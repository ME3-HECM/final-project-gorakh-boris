

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 07 19:08:23 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    63                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    64   000000                     
    65                           ; Generated 18/08/2023 GMT
    66                           ; 
    67                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution. Publication is not required when
    81                           ;        this file is used in an embedded application.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F67K40 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99   000000                     
   100                           	psect	idataCOMRAM
   101   0021A4                     __pidataCOMRAM:
   102                           	callstack 0
   103                           
   104                           ;initializer for _timer_high_pointer
   105   0021A4  28                 	db	low _trail_timer_high
   106   0021A5  01                 	db	high _trail_timer_high
   107                           
   108                           ;initializer for _topGearLeft
   109   0021A6  14                 	db	20
   110                           
   111                           ;initializer for _rampDelay
   112   0021A7  08                 	db	8
   113                           
   114                           	psect	idataBANK0
   115   00214C                     __pidataBANK0:
   116                           	callstack 0
   117                           
   118                           ;initializer for _manoeuvre_pointer
   119   00214C  00                 	db	low _trail_manoeuvre
   120   00214D  01                 	db	high _trail_manoeuvre
   121                           
   122                           ;initializer for _timer_low_pointer
   123   00214E  14                 	db	low _trail_timer_low
   124   00214F  01                 	db	high _trail_timer_low
   125                           
   126                           ;initializer for _squareDelay
   127   002150  012C               	dw	300
   128                           
   129                           ;initializer for _headbuttDelay
   130   002152  0046               	dw	70
   131                           
   132                           ;initializer for _turn180Delay
   133   002154  01FE               	dw	510
   134                           
   135                           ;initializer for _turnRight135Delay
   136   002156  012C               	dw	300
   137                           
   138                           ;initializer for _turnLeft135Delay
   139   002158  012C               	dw	300
   140                           
   141                           ;initializer for _turnRight90Delay
   142   00215A  00AF               	dw	175
   143                           
   144                           ;initializer for _turnLeft90Delay
   145   00215C  00AF               	dw	175
   146                           
   147                           ;initializer for _wall_threshold
   148   00215E  012C               	dw	300
   149                           
   150                           ;initializer for _turningGear
   151   002160  2A                 	db	42
   152                           
   153                           ;initializer for _topGearRight
   154   002161  14                 	db	20
   155   000000                     _TMR0H	set	4052
   156   000000                     _TX4REG	set	3812
   157   000000                     _RC4STAbits	set	3815
   158   000000                     _SP4BRGH	set	3814
   159   000000                     _LATEbits	set	3965
   160   000000                     _TRISEbits	set	3973
   161   000000                     _LATGbits	set	3967
   162   000000                     _TRISGbits	set	3975
   163   000000                     _LATFbits	set	3966
   164   000000                     _LATHbits	set	3968
   165   000000                     _TRISFbits	set	3974
   166   000000                     _TRISHbits	set	3976
   167   000000                     _SSP2CON2bits	set	3802
   168   000000                     _RX4PPS	set	3605
   169   000000                     _SSP2CLKPPS	set	3612
   170   000000                     _SSP2DATPPS	set	3613
   171   000000                     _RC7PPS	set	3689
   172   000000                     _RE2PPS	set	3700
   173   000000                     _LATAbits	set	3961
   174   000000                     _LATDbits	set	3964
   175   000000                     _TRISDbits	set	3972
   176   000000                     _T2PR	set	4028
   177   000000                     _T2CONbits	set	4029
   178   000000                     _CCPR2H	set	4006
   179   000000                     _CCPR1H	set	4010
   180   000000                     _TRISCbits	set	3971
   181   000000                     _TRISAbits	set	3969
   182   000000                     _LATCbits	set	3963
   183   000000                     _RE4PPS	set	3702
   184   000000                     _RG6PPS	set	3720
   185   000000                     _RD5PPS	set	3695
   186   000000                     _ANSELDbits	set	3751
   187   000000                     _SSP2ADD	set	3798
   188   000000                     _SSP2CON1bits	set	3801
   189   000000                     _CCPR4H	set	3873
   190   000000                     _CCPR3H	set	3877
   191   000000                     _TMR0L	set	4051
   192   000000                     _T0CON0bits	set	4053
   193   000000                     _T0CON1bits	set	4054
   194   000000                     _T2CLKCONbits	set	4031
   195   000000                     _T2HLTbits	set	4030
   196   000000                     _CCP1CONbits	set	4011
   197   000000                     _CCPTMRS0bits	set	4013
   198   000000                     _CCP2CONbits	set	4007
   199   000000                     _CCP3CONbits	set	3878
   200   000000                     _CCP4CONbits	set	3874
   201   000000                     _RC4REG	set	3811
   202   000000                     _SP4BRGL	set	3813
   203   000000                     _TX4STAbits	set	3816
   204   000000                     _BAUD4CONbits	set	3817
   205   000000                     _SSP2CON2	set	3802
   206   000000                     _SSP2STAT	set	3800
   207   000000                     _ANSELFbits	set	3764
   208   000000                     _SSP2BUF	set	3797
   209   000000                     _PIE0bits	set	3625
   210   000000                     _PIR4bits	set	3639
   211   000000                     _RC0PPS	set	3682
   212   000000                     _RD6PPS	set	3696
   213   000000                     _INTCONbits	set	4082
   214   000000                     _PIR0bits	set	3635
   215                           
   216                           	psect	smallconst
   217   000E00                     __psmallconst:
   218                           	callstack 0
   219   000E00  00                 	db	0
   220   000E01                     STR_5:
   221                           
   222                           ; BSR set to: 14
   223   000E01  25                 	db	37
   224   000E02  75                 	db	117	;'u'
   225   000E03  20                 	db	32
   226   000E04  25                 	db	37
   227   000E05  75                 	db	117	;'u'
   228   000E06  20                 	db	32
   229   000E07  25                 	db	37
   230   000E08  75                 	db	117	;'u'
   231   000E09  20                 	db	32
   232   000E0A  25                 	db	37
   233   000E0B  75                 	db	117	;'u'
   234   000E0C  20                 	db	32
   235   000E0D  0D                 	db	13
   236   000E0E  00                 	db	0
   237   000E0F                     STR_1:
   238                           
   239                           ; BSR set to: 14
   240   000E0F  25                 	db	37
   241   000E10  64                 	db	100	;'d'
   242   000E11  20                 	db	32
   243   000E12  0D                 	db	13
   244   000E13  00                 	db	0
   245   000E14                     STR_2:
   246                           
   247                           ; BSR set to: 14
   248   000E14  25                 	db	37
   249   000E15  64                 	db	100	;'d'
   250   000E16  20                 	db	32
   251   000E17  00                 	db	0
   252   000E18  00                 	db	0	; dummy byte at the end
   253   000000                     
   254                           ; #config settings
   255                           
   256                           	psect	cinit
   257   001A6A                     __pcinit:
   258                           	callstack 0
   259   001A6A                     start_initialization:
   260                           	callstack 0
   261   001A6A                     __initialization:
   262                           	callstack 0
   263                           
   264                           ; Initialize objects allocated to BANK0 (22 bytes)
   265                           ; load TBLPTR registers with __pidataBANK0
   266   001A6A  0E4C               	movlw	low __pidataBANK0
   267   001A6C  6EF6               	movwf	tblptrl,c
   268   001A6E  0E21               	movlw	high __pidataBANK0
   269   001A70  6EF7               	movwf	tblptrh,c
   270   001A72  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   271   001A74  6EF8               	movwf	tblptru,c
   272   001A76  EE00  F0A7         	lfsr	0,__pdataBANK0
   273   001A7A  EE10 F016          	lfsr	1,22
   274   001A7E                     copy_data0:
   275   001A7E  0009               	tblrd		*+
   276   001A80  CFF5 FFEE          	movff	tablat,postinc0
   277   001A84  50E5               	movf	postdec1,w,c
   278   001A86  50E1               	movf	fsr1l,w,c
   279   001A88  E1FA               	bnz	copy_data0
   280                           
   281                           ; Initialize objects allocated to COMRAM (4 bytes)
   282                           ; load TBLPTR registers with __pidataCOMRAM
   283   001A8A  0EA4               	movlw	low __pidataCOMRAM
   284   001A8C  6EF6               	movwf	tblptrl,c
   285   001A8E  0E21               	movlw	high __pidataCOMRAM
   286   001A90  6EF7               	movwf	tblptrh,c
   287   001A92  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   288   001A94  6EF8               	movwf	tblptru,c
   289   001A96  EE00  F057         	lfsr	0,__pdataCOMRAM
   290   001A9A  EE10 F004          	lfsr	1,4
   291   001A9E                     copy_data1:
   292   001A9E  0009               	tblrd		*+
   293   001AA0  CFF5 FFEE          	movff	tablat,postinc0
   294   001AA4  50E5               	movf	postdec1,w,c
   295   001AA6  50E1               	movf	fsr1l,w,c
   296   001AA8  E1FA               	bnz	copy_data1
   297                           
   298                           ; Clear objects allocated to BANK1 (60 bytes)
   299   001AAA  EE01  F000         	lfsr	0,__pbssBANK1
   300   001AAE  0E3C               	movlw	60
   301   001AB0                     clear_0:
   302   001AB0  6AEE               	clrf	postinc0,c
   303   001AB2  06E8               	decf	wreg,f,c
   304   001AB4  E1FD               	bnz	clear_0
   305                           
   306                           ; Clear objects allocated to BANK0 (39 bytes)
   307   001AB6  EE00  F060         	lfsr	0,__pbssBANK0
   308   001ABA  0E27               	movlw	39
   309   001ABC                     clear_1:
   310   001ABC  6AEE               	clrf	postinc0,c
   311   001ABE  06E8               	decf	wreg,f,c
   312   001AC0  E1FD               	bnz	clear_1
   313                           
   314                           ; Clear objects allocated to COMRAM (3 bytes)
   315   001AC2  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   316   001AC4  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   317   001AC6  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   318   001AC8                     end_of_initialization:
   319                           	callstack 0
   320   001AC8                     __end_of__initialization:
   321                           	callstack 0
   322   001AC8  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   323   001ACA  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   324   001ACC  0100               	movlb	0
   325   001ACE  EF9D  F00A         	goto	_main	;jump to C main() function
   326                           
   327                           	psect	bssCOMRAM
   328   00005B                     __pbssCOMRAM:
   329                           	callstack 0
   330   00005B                     _manoeuvre_count:
   331                           	callstack 0
   332   00005B                     	ds	1
   333   00005C                     _return_flag:
   334                           	callstack 0
   335   00005C                     	ds	1
   336   00005D                     _returning:
   337                           	callstack 0
   338   00005D                     	ds	1
   339                           
   340                           	psect	dataCOMRAM
   341   000057                     __pdataCOMRAM:
   342                           	callstack 0
   343   000057                     _timer_high_pointer:
   344                           	callstack 0
   345   000057                     	ds	2
   346   000059                     _topGearLeft:
   347                           	callstack 0
   348   000059                     	ds	1
   349   00005A                     _rampDelay:
   350                           	callstack 0
   351   00005A                     	ds	1
   352                           
   353                           	psect	bssBANK0
   354   000060                     __pbssBANK0:
   355                           	callstack 0
   356   000060                     _dbuf:
   357                           	callstack 0
   358   000060                     	ds	32
   359   000080                     _nout:
   360                           	callstack 0
   361   000080                     	ds	2
   362   000082                     _width:
   363                           	callstack 0
   364   000082                     	ds	2
   365   000084                     _prec:
   366                           	callstack 0
   367   000084                     	ds	2
   368   000086                     _flags:
   369                           	callstack 0
   370   000086                     	ds	1
   371                           
   372                           	psect	dataBANK0
   373   0000A7                     __pdataBANK0:
   374                           	callstack 0
   375   0000A7                     _manoeuvre_pointer:
   376                           	callstack 0
   377   0000A7                     	ds	2
   378   0000A9                     _timer_low_pointer:
   379                           	callstack 0
   380   0000A9                     	ds	2
   381   0000AB                     _squareDelay:
   382                           	callstack 0
   383   0000AB                     	ds	2
   384   0000AD                     _headbuttDelay:
   385                           	callstack 0
   386   0000AD                     	ds	2
   387   0000AF                     _turn180Delay:
   388                           	callstack 0
   389   0000AF                     	ds	2
   390   0000B1                     _turnRight135Delay:
   391                           	callstack 0
   392   0000B1                     	ds	2
   393   0000B3                     _turnLeft135Delay:
   394                           	callstack 0
   395   0000B3                     	ds	2
   396   0000B5                     _turnRight90Delay:
   397                           	callstack 0
   398   0000B5                     	ds	2
   399   0000B7                     _turnLeft90Delay:
   400                           	callstack 0
   401   0000B7                     	ds	2
   402   0000B9                     _wall_threshold:
   403                           	callstack 0
   404   0000B9                     	ds	2
   405   0000BB                     _turningGear:
   406                           	callstack 0
   407   0000BB                     	ds	1
   408   0000BC                     _topGearRight:
   409                           	callstack 0
   410   0000BC                     	ds	1
   411                           
   412                           	psect	bssBANK1
   413   000100                     __pbssBANK1:
   414                           	callstack 0
   415   000100                     _trail_manoeuvre:
   416                           	callstack 0
   417   000100                     	ds	20
   418   000114                     _trail_timer_low:
   419                           	callstack 0
   420   000114                     	ds	20
   421   000128                     _trail_timer_high:
   422                           	callstack 0
   423   000128                     	ds	20
   424                           
   425                           	psect	cstackBANK0
   426   000087                     __pcstackBANK0:
   427                           	callstack 0
   428   000087                     main@HSV_colour:
   429                           	callstack 0
   430                           
   431                           ; 6 bytes @ 0x0
   432   000087                     	ds	6
   433   00008D                     main@motorL:
   434                           	callstack 0
   435                           
   436                           ; 9 bytes @ 0x6
   437   00008D                     	ds	9
   438   000096                     main@motorR:
   439                           	callstack 0
   440                           
   441                           ; 9 bytes @ 0xF
   442   000096                     	ds	9
   443   00009F                     main@measured_colour:
   444                           	callstack 0
   445                           
   446                           ; 8 bytes @ 0x18
   447   00009F                     	ds	8
   448                           
   449                           	psect	cstackCOMRAM
   450   000001                     __pcstackCOMRAM:
   451                           	callstack 0
   452   000001                     ??_toggle_tricolour_LED:
   453   000001                     ??_I2C_2_Master_Idle:
   454   000001                     ?_max:
   455                           	callstack 0
   456   000001                     ?_min:
   457                           	callstack 0
   458   000001                     ?___wmul:
   459                           	callstack 0
   460   000001                     ?___awdiv:
   461                           	callstack 0
   462   000001                     ?___awmod:
   463                           	callstack 0
   464   000001                     ?___lwmod:
   465                           	callstack 0
   466   000001                     sendCharSerial4@charToSend:
   467                           	callstack 0
   468   000001                     write_timer@tL:
   469                           	callstack 0
   470   000001                     max@a:
   471                           	callstack 0
   472   000001                     min@a:
   473                           	callstack 0
   474   000001                     initDCmotorsPWM@PWMperiod:
   475                           	callstack 0
   476   000001                     ___wmul@multiplier:
   477                           	callstack 0
   478   000001                     ___awdiv@dividend:
   479                           	callstack 0
   480   000001                     ___awmod@dividend:
   481                           	callstack 0
   482   000001                     ___lwmod@dividend:
   483                           	callstack 0
   484   000001                     fputc@c:
   485                           	callstack 0
   486                           
   487                           ; 2 bytes @ 0x0
   488   000001                     	ds	1
   489   000002                     ??_I2C_2_Master_Read:
   490   000002                     I2C_2_Master_Write@data_byte:
   491                           	callstack 0
   492   000002                     write_timer@tH:
   493                           	callstack 0
   494   000002                     sendStringSerial4@string:
   495                           	callstack 0
   496                           
   497                           ; 2 bytes @ 0x1
   498   000002                     	ds	1
   499   000003                     color_writetoaddr@value:
   500                           	callstack 0
   501   000003                     I2C_2_Master_Read@ack:
   502                           	callstack 0
   503   000003                     fputc@fp:
   504                           	callstack 0
   505   000003                     max@b:
   506                           	callstack 0
   507   000003                     min@b:
   508                           	callstack 0
   509   000003                     ___wmul@multiplicand:
   510                           	callstack 0
   511   000003                     ___awdiv@divisor:
   512                           	callstack 0
   513   000003                     ___awmod@divisor:
   514                           	callstack 0
   515   000003                     ___lwmod@divisor:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x2
   519   000003                     	ds	1
   520   000004                     ??_fputc:
   521   000004                     color_writetoaddr@address:
   522                           	callstack 0
   523   000004                     I2C_2_Master_Read@tmp:
   524                           	callstack 0
   525                           
   526                           ; 1 bytes @ 0x3
   527   000004                     	ds	1
   528   000005                     ??_color_click_init:
   529   000005                     ?_color_read_Red:
   530                           	callstack 0
   531   000005                     ?_color_read_Blue:
   532                           	callstack 0
   533   000005                     ?_color_read_Green:
   534                           	callstack 0
   535   000005                     ?_color_read_Clear:
   536                           	callstack 0
   537   000005                     ___awdiv@counter:
   538                           	callstack 0
   539   000005                     ___awmod@counter:
   540                           	callstack 0
   541   000005                     ___lwmod@counter:
   542                           	callstack 0
   543   000005                     max@max_val:
   544                           	callstack 0
   545   000005                     min@min_val:
   546                           	callstack 0
   547   000005                     ___wmul@product:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0x4
   551   000005                     	ds	1
   552   000006                     ___awdiv@sign:
   553                           	callstack 0
   554   000006                     ___awmod@sign:
   555                           	callstack 0
   556                           
   557                           ; 1 bytes @ 0x5
   558   000006                     	ds	1
   559   000007                     ??_color_read_Red:
   560   000007                     ??_color_read_Blue:
   561   000007                     ??_color_read_Green:
   562   000007                     ??_color_read_Clear:
   563   000007                     ?_abs:
   564                           	callstack 0
   565   000007                     ?_maxRGB:
   566                           	callstack 0
   567   000007                     ?_minRGB:
   568                           	callstack 0
   569   000007                     ?___lwdiv:
   570                           	callstack 0
   571   000007                     maxRGB@p:
   572                           	callstack 0
   573   000007                     minRGB@p:
   574                           	callstack 0
   575   000007                     ___awdiv@quotient:
   576                           	callstack 0
   577   000007                     ___lwdiv@dividend:
   578                           	callstack 0
   579   000007                     abs@a:
   580                           	callstack 0
   581                           
   582                           ; 2 bytes @ 0x6
   583   000007                     	ds	2
   584   000009                     ??_abs:
   585   000009                     ___lwdiv@divisor:
   586                           	callstack 0
   587   000009                     _maxRGB$3149:
   588                           	callstack 0
   589   000009                     _minRGB$3150:
   590                           	callstack 0
   591                           
   592                           ; 2 bytes @ 0x8
   593   000009                     	ds	1
   594   00000A                     color_read_Red@tmp:
   595                           	callstack 0
   596   00000A                     color_read_Blue@tmp:
   597                           	callstack 0
   598   00000A                     color_read_Green@tmp:
   599                           	callstack 0
   600   00000A                     color_read_Clear@tmp:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0x9
   604   00000A                     	ds	1
   605   00000B                     ___lwdiv@quotient:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0xA
   609   00000B                     	ds	1
   610   00000C                     getRGBCval@p:
   611                           	callstack 0
   612                           
   613                           ; 1 bytes @ 0xB
   614   00000C                     	ds	1
   615   00000D                     ___lwdiv@counter:
   616                           	callstack 0
   617                           
   618                           ; 1 bytes @ 0xC
   619   00000D                     	ds	1
   620   00000E                     ?_vfpfcnvrt:
   621                           	callstack 0
   622   00000E                     getHSVval@p1:
   623                           	callstack 0
   624   00000E                     vfpfcnvrt@fp:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0xD
   628   00000E                     	ds	1
   629   00000F                     getHSVval@p2:
   630                           	callstack 0
   631   00000F                     vfpfcnvrt@fmt:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0xE
   635   00000F                     	ds	1
   636   000010                     ??_getHSVval:
   637   000010                     vfpfcnvrt@ap:
   638                           	callstack 0
   639                           
   640                           ; 1 bytes @ 0xF
   641   000010                     	ds	1
   642   000011                     ??_vfpfcnvrt:
   643                           
   644                           ; 1 bytes @ 0x10
   645   000011                     	ds	2
   646   000013                     vfpfcnvrt@done:
   647                           	callstack 0
   648                           
   649                           ; 1 bytes @ 0x12
   650   000013                     	ds	1
   651   000014                     vfpfcnvrt@cnt:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x13
   655   000014                     	ds	2
   656   000016                     vfpfcnvrt@cp:
   657                           	callstack 0
   658                           
   659                           ; 1 bytes @ 0x15
   660   000016                     	ds	1
   661   000017                     vfpfcnvrt@convarg:
   662                           	callstack 0
   663                           
   664                           ; 4 bytes @ 0x16
   665   000017                     	ds	1
   666   000018                     getHSVval@RR:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x17
   670   000018                     	ds	2
   671   00001A                     getHSVval@m:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x19
   675   00001A                     	ds	1
   676   00001B                     vfpfcnvrt@c:
   677                           	callstack 0
   678                           
   679                           ; 1 bytes @ 0x1A
   680   00001B                     	ds	1
   681   00001C                     ?_vfprintf:
   682                           	callstack 0
   683   00001C                     vfprintf@fp:
   684                           	callstack 0
   685   00001C                     getHSVval@S:
   686                           	callstack 0
   687                           
   688                           ; 2 bytes @ 0x1B
   689   00001C                     	ds	1
   690   00001D                     vfprintf@fmt:
   691                           	callstack 0
   692                           
   693                           ; 1 bytes @ 0x1C
   694   00001D                     	ds	1
   695   00001E                     vfprintf@ap:
   696                           	callstack 0
   697   00001E                     getHSVval@GG:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x1D
   701   00001E                     	ds	1
   702   00001F                     vfprintf@cfmt:
   703                           	callstack 0
   704                           
   705                           ; 1 bytes @ 0x1E
   706   00001F                     	ds	1
   707   000020                     ?_sprintf:
   708                           	callstack 0
   709   000020                     getHSVval@BB:
   710                           	callstack 0
   711   000020                     sprintf@s:
   712                           	callstack 0
   713                           
   714                           ; 2 bytes @ 0x1F
   715   000020                     	ds	2
   716   000022                     sprintf@fmt:
   717                           	callstack 0
   718   000022                     getHSVval@H:
   719                           	callstack 0
   720                           
   721                           ; 2 bytes @ 0x21
   722   000022                     	ds	2
   723   000024                     getHSVval@M:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x23
   727   000024                     	ds	2
   728   000026                     getHSVval@C:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x25
   732   000026                     	ds	5
   733   00002B                     sprintf@ret:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x2A
   737   00002B                     	ds	2
   738   00002D                     sprintf@ap:
   739                           	callstack 0
   740                           
   741                           ; 1 bytes @ 0x2C
   742   00002D                     	ds	1
   743   00002E                     sprintf@f:
   744                           	callstack 0
   745                           
   746                           ; 12 bytes @ 0x2D
   747   00002E                     	ds	12
   748   00003A                     sendRGBCvalSerial4@col_val:
   749                           	callstack 0
   750   00003A                     sendHSVvalSerial4@col_val:
   751                           	callstack 0
   752                           
   753                           ; 1 bytes @ 0x39
   754   00003A                     	ds	1
   755   00003B                     sendHSVvalSerial4@tempStr:
   756                           	callstack 0
   757   00003B                     sendRGBCvalSerial4@tempStr:
   758                           	callstack 0
   759                           
   760                           ; 26 bytes @ 0x3A
   761   00003B                     	ds	26
   762   000055                     ??_main:
   763                           
   764                           ; 1 bytes @ 0x54
   765   000055                     	ds	2
   766                           
   767 ;;
   768 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   769 ;;
   770 ;; *************** function _main *****************
   771 ;; Defined at:
   772 ;;		line 27 in file "main.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;  motorR          9   15[BANK0 ] struct DC_motor
   777 ;;  motorL          9    6[BANK0 ] struct DC_motor
   778 ;;  measured_col    8   24[BANK0 ] struct RGBC_val
   779 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
   780 ;;  PWMcycle        2    0        unsigned int 
   781 ;; Return value:  Size  Location     Type
   782 ;;                  1    wreg      void 
   783 ;; Registers used:
   784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   785 ;; Tracked objects:
   786 ;;		On entry : 0/0
   787 ;;		On exit  : 0/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   791 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   792 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   793 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   794 ;;Total ram usage:       34 bytes
   795 ;; Hardware stack levels required when called: 7
   796 ;; This function calls:
   797 ;;		_Timer0_init
   798 ;;		_buggy_lights_init
   799 ;;		_color_click_init
   800 ;;		_getHSVval
   801 ;;		_getRGBCval
   802 ;;		_initDCmotorsPWM
   803 ;;		_initUSART4
   804 ;;		_sendHSVvalSerial4
   805 ;;		_sendRGBCvalSerial4
   806 ;;		_toggle_tricolour_LED
   807 ;; This function is called by:
   808 ;;		Startup code after reset
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           	psect	text0
   813   00153A                     __ptext0:
   814                           	callstack 0
   815   00153A                     _main:
   816                           	callstack 24
   817   00153A                     
   818                           ;main.c: 28:     struct RGBC_val measured_colour;;main.c: 29:         measured_colour.R 
      +                          = 0;
   819   00153A  0E00               	movlw	0
   820   00153C  0100               	movlb	0	; () banked
   821   00153E  6FA0               	movwf	(main@measured_colour+1)& (0+255),b
   822   001540  0E00               	movlw	0
   823   001542  6F9F               	movwf	main@measured_colour& (0+255),b
   824                           
   825                           ;main.c: 30:         measured_colour.G = 0;
   826   001544  0E00               	movlw	0
   827   001546  6FA2               	movwf	(main@measured_colour+3)& (0+255),b
   828   001548  0E00               	movlw	0
   829   00154A  6FA1               	movwf	(main@measured_colour+2)& (0+255),b
   830                           
   831                           ;main.c: 31:         measured_colour.B = 0;
   832   00154C  0E00               	movlw	0
   833   00154E  6FA4               	movwf	(main@measured_colour+5)& (0+255),b
   834   001550  0E00               	movlw	0
   835   001552  6FA3               	movwf	(main@measured_colour+4)& (0+255),b
   836                           
   837                           ;main.c: 32:         measured_colour.C = 0;
   838   001554  0E00               	movlw	0
   839   001556  6FA6               	movwf	(main@measured_colour+7)& (0+255),b
   840   001558  0E00               	movlw	0
   841   00155A  6FA5               	movwf	(main@measured_colour+6)& (0+255),b
   842                           
   843                           ;main.c: 34:     struct HSV_val HSV_colour;;main.c: 35:         HSV_colour.H = 0;
   844   00155C  0E00               	movlw	0
   845   00155E  6F88               	movwf	(main@HSV_colour+1)& (0+255),b
   846   001560  0E00               	movlw	0
   847   001562  6F87               	movwf	main@HSV_colour& (0+255),b
   848                           
   849                           ;main.c: 36:         HSV_colour.S = 0;
   850   001564  0E00               	movlw	0
   851   001566  6F8A               	movwf	(main@HSV_colour+3)& (0+255),b
   852   001568  0E00               	movlw	0
   853   00156A  6F89               	movwf	(main@HSV_colour+2)& (0+255),b
   854                           
   855                           ;main.c: 37:         HSV_colour.V = 0;
   856   00156C  0E00               	movlw	0
   857   00156E  6F8C               	movwf	(main@HSV_colour+5)& (0+255),b
   858   001570  0E00               	movlw	0
   859   001572  6F8B               	movwf	(main@HSV_colour+4)& (0+255),b
   860                           
   861                           ;main.c: 41:     struct DC_motor motorL, motorR;;main.c: 42:         motorL.power = 0;
   862   001574  0E00               	movlw	0
   863   001576  6F8D               	movwf	main@motorL& (0+255),b
   864                           
   865                           ;main.c: 43:         motorL.direction = 1;
   866   001578  0E01               	movlw	1
   867   00157A  6F8E               	movwf	(main@motorL+1)& (0+255),b
   868                           
   869                           ;main.c: 44:         motorL.brakemode = 1;
   870   00157C  0E01               	movlw	1
   871   00157E  6F8F               	movwf	(main@motorL+2)& (0+255),b
   872   001580                     
   873                           ; BSR set to: 0
   874                           ;main.c: 45:         motorL.PWMperiod = PWMcycle;
   875   001580  0E00               	movlw	0
   876   001582  6F91               	movwf	(main@motorL+4)& (0+255),b
   877   001584  0E63               	movlw	99
   878   001586  6F90               	movwf	(main@motorL+3)& (0+255),b
   879   001588                     
   880                           ; BSR set to: 0
   881                           ;main.c: 46:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   882   001588  0EAA               	movlw	170
   883   00158A  6F92               	movwf	(main@motorL+5)& (0+255),b
   884   00158C  0E0F               	movlw	15
   885   00158E  6F93               	movwf	(main@motorL+6)& (0+255),b
   886   001590                     
   887                           ; BSR set to: 0
   888                           ;main.c: 47:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   889   001590  0EA6               	movlw	166
   890   001592  6F94               	movwf	(main@motorL+7)& (0+255),b
   891   001594  0E0F               	movlw	15
   892   001596  6F95               	movwf	(main@motorL+8)& (0+255),b
   893                           
   894                           ;main.c: 48:         motorR.power = 0;
   895   001598  0E00               	movlw	0
   896   00159A  6F96               	movwf	main@motorR& (0+255),b
   897                           
   898                           ;main.c: 49:         motorR.direction = 1;
   899   00159C  0E01               	movlw	1
   900   00159E  6F97               	movwf	(main@motorR+1)& (0+255),b
   901                           
   902                           ;main.c: 50:         motorR.brakemode = 1;
   903   0015A0  0E01               	movlw	1
   904   0015A2  6F98               	movwf	(main@motorR+2)& (0+255),b
   905   0015A4                     
   906                           ; BSR set to: 0
   907                           ;main.c: 51:         motorR.PWMperiod = PWMcycle;
   908   0015A4  0E00               	movlw	0
   909   0015A6  6F9A               	movwf	(main@motorR+4)& (0+255),b
   910   0015A8  0E63               	movlw	99
   911   0015AA  6F99               	movwf	(main@motorR+3)& (0+255),b
   912   0015AC                     
   913                           ; BSR set to: 0
   914                           ;main.c: 52:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   915   0015AC  0E25               	movlw	37
   916   0015AE  6F9B               	movwf	(main@motorR+5)& (0+255),b
   917   0015B0  0E0F               	movlw	15
   918   0015B2  6F9C               	movwf	(main@motorR+6)& (0+255),b
   919   0015B4                     
   920                           ; BSR set to: 0
   921                           ;main.c: 53:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   922   0015B4  0E21               	movlw	33
   923   0015B6  6F9D               	movwf	(main@motorR+7)& (0+255),b
   924   0015B8  0E0F               	movlw	15
   925   0015BA  6F9E               	movwf	(main@motorR+8)& (0+255),b
   926   0015BC                     
   927                           ; BSR set to: 0
   928                           ;main.c: 55:     initDCmotorsPWM(PWMcycle);
   929   0015BC  0E00               	movlw	0
   930   0015BE  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   931   0015C0  0E63               	movlw	99
   932   0015C2  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   933   0015C4  ECB3  F00C         	call	_initDCmotorsPWM	;wreg free
   934                           
   935                           ;main.c: 56:     buggy_lights_init();
   936   0015C8  EC16  F010         	call	_buggy_lights_init	;wreg free
   937   0015CC                     
   938                           ;main.c: 57:     color_click_init();
   939   0015CC  ECCC  F00F         	call	_color_click_init	;wreg free
   940   0015D0                     
   941                           ;main.c: 58:     initUSART4();
   942   0015D0  EC8B  F010         	call	_initUSART4	;wreg free
   943   0015D4                     
   944                           ;main.c: 59:     Timer0_init();
   945   0015D4  EC69  F010         	call	_Timer0_init	;wreg free
   946   0015D8                     
   947                           ;main.c: 63:         TRISDbits.TRISD7 = 0;
   948   0015D8  9E84               	bcf	132,7,c	;volatile
   949   0015DA                     
   950                           ;main.c: 64:         TRISHbits.TRISH3 = 0;
   951   0015DA  9688               	bcf	136,3,c	;volatile
   952   0015DC                     
   953                           ;main.c: 66:         LATDbits.LATD7 = 0;
   954   0015DC  9E7C               	bcf	124,7,c	;volatile
   955   0015DE                     
   956                           ;main.c: 67:         LATHbits.LATH3 = 0;
   957   0015DE  9680               	bcf	128,3,c	;volatile
   958   0015E0                     
   959                           ;main.c: 71:         TRISFbits.TRISF2 = 1;
   960   0015E0  8486               	bsf	134,2,c	;volatile
   961   0015E2                     
   962                           ;main.c: 72:         TRISFbits.TRISF3 = 1;
   963   0015E2  8686               	bsf	134,3,c	;volatile
   964   0015E4                     
   965                           ;main.c: 74:         ANSELFbits.ANSELF2 = 0;
   966   0015E4  010E               	movlb	14	; () banked
   967   0015E6  95B4               	bcf	180,2,b	;volatile
   968   0015E8                     
   969                           ; BSR set to: 14
   970                           ;main.c: 75:         ANSELFbits.ANSELF3 = 0;
   971   0015E8  97B4               	bcf	180,3,b	;volatile
   972                           
   973                           ;main.c: 80:     LATHbits.LATH3 = !LATHbits.LATH3;
   974   0015EA  A680               	btfss	128,3,c	;volatile
   975   0015EC  EFFA  F00A         	goto	u2051
   976   0015F0  EFFE  F00A         	goto	u2050
   977   0015F4                     u2051:
   978   0015F4  6A55               	clrf	??_main^0,c
   979   0015F6  2A55               	incf	??_main^0,f,c
   980   0015F8  EFFF  F00A         	goto	u2068
   981   0015FC                     u2050:
   982   0015FC  6A55               	clrf	??_main^0,c
   983   0015FE                     u2068:
   984   0015FE  4655               	rlncf	??_main^0,f,c
   985   001600  4655               	rlncf	??_main^0,f,c
   986   001602  4655               	rlncf	??_main^0,f,c
   987   001604  5080               	movf	128,w,c	;volatile
   988   001606  1855               	xorwf	??_main^0,w,c
   989   001608  0BF7               	andlw	-9
   990   00160A  1855               	xorwf	??_main^0,w,c
   991   00160C  6E80               	movwf	128,c	;volatile
   992   00160E                     
   993                           ;main.c: 81:     toggle_tricolour_LED();
   994   00160E  EC38  F00B         	call	_toggle_tricolour_LED	;wreg free
   995   001612                     l3325:
   996                           
   997                           ;main.c: 86:         getRGBCval(&measured_colour);
   998   001612  0E9F               	movlw	low main@measured_colour
   999   001614  6E0C               	movwf	getRGBCval@p^0,c
  1000   001616  EC26  F00E         	call	_getRGBCval	;wreg free
  1001   00161A                     
  1002                           ;main.c: 87:         measured_colour.R = 10000;
  1003   00161A  0E27               	movlw	39
  1004   00161C  0100               	movlb	0	; () banked
  1005   00161E  6FA0               	movwf	(main@measured_colour+1)& (0+255),b
  1006   001620  0E10               	movlw	16
  1007   001622  6F9F               	movwf	main@measured_colour& (0+255),b
  1008   001624                     
  1009                           ; BSR set to: 0
  1010                           ;main.c: 88:         measured_colour.G = 2000;
  1011   001624  0E07               	movlw	7
  1012   001626  6FA2               	movwf	(main@measured_colour+3)& (0+255),b
  1013   001628  0ED0               	movlw	208
  1014   00162A  6FA1               	movwf	(main@measured_colour+2)& (0+255),b
  1015   00162C                     
  1016                           ; BSR set to: 0
  1017                           ;main.c: 89:         measured_colour.B = 9000;
  1018   00162C  0E23               	movlw	35
  1019   00162E  6FA4               	movwf	(main@measured_colour+5)& (0+255),b
  1020   001630  0E28               	movlw	40
  1021   001632  6FA3               	movwf	(main@measured_colour+4)& (0+255),b
  1022   001634                     
  1023                           ; BSR set to: 0
  1024                           ;main.c: 90:         getHSVval(&HSV_colour, &measured_colour);
  1025   001634  0E87               	movlw	low main@HSV_colour
  1026   001636  6E0E               	movwf	getHSVval@p1^0,c
  1027   001638  0E9F               	movlw	low main@measured_colour
  1028   00163A  6E0F               	movwf	getHSVval@p2^0,c
  1029   00163C  EC0D  F007         	call	_getHSVval	;wreg free
  1030   001640                     
  1031                           ;main.c: 91:         sendRGBCvalSerial4(&measured_colour);
  1032   001640  0E9F               	movlw	low main@measured_colour
  1033   001642  6E3A               	movwf	sendRGBCvalSerial4@col_val^0,c
  1034   001644  ECCC  F00D         	call	_sendRGBCvalSerial4	;wreg free
  1035   001648                     
  1036                           ;main.c: 92:         sendHSVvalSerial4(&HSV_colour);
  1037   001648  0E87               	movlw	low main@HSV_colour
  1038   00164A  6E3A               	movwf	sendHSVvalSerial4@col_val^0,c
  1039   00164C  EC45  F00F         	call	_sendHSVvalSerial4	;wreg free
  1040   001650                     
  1041                           ;main.c: 93:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1042   001650  0E52               	movlw	82
  1043   001652  6E56               	movwf	(??_main+1)^0,c
  1044   001654  0E2B               	movlw	43
  1045   001656  6E55               	movwf	??_main^0,c
  1046   001658  0E00               	movlw	0
  1047   00165A                     u2507:
  1048   00165A  2EE8               	decfsz	wreg,f,c
  1049   00165C  D7FE               	bra	u2507
  1050   00165E  2E55               	decfsz	??_main^0,f,c
  1051   001660  D7FC               	bra	u2507
  1052   001662  2E56               	decfsz	(??_main+1)^0,f,c
  1053   001664  D7FA               	bra	u2507
  1054   001666  D000               	nop2	
  1055   001668  EF09  F00B         	goto	l3325
  1056   00166C  EF1A  F000         	goto	start
  1057   001670                     __end_of_main:
  1058                           	callstack 0
  1059                           
  1060 ;; *************** function _toggle_tricolour_LED *****************
  1061 ;; Defined at:
  1062 ;;		line 86 in file "buggy_lights.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;		None
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      void 
  1069 ;; Registers used:
  1070 ;;		wreg, status,2, status,0
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1078 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1079 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1080 ;;Total ram usage:        1 bytes
  1081 ;; Hardware stack levels used: 1
  1082 ;; Hardware stack levels required when called: 1
  1083 ;; This function calls:
  1084 ;;		Nothing
  1085 ;; This function is called by:
  1086 ;;		_main
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text1
  1091   001670                     __ptext1:
  1092                           	callstack 0
  1093   001670                     _toggle_tricolour_LED:
  1094                           	callstack 29
  1095   001670                     
  1096                           ;buggy_lights.c: 91:             LATGbits.LATG1 = !LATGbits.LATG1;
  1097   001670  A27F               	btfss	127,1,c	;volatile
  1098   001672  EF3D  F00B         	goto	u1771
  1099   001676  EF41  F00B         	goto	u1770
  1100   00167A                     u1771:
  1101   00167A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1102   00167C  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1103   00167E  EF42  F00B         	goto	u1788
  1104   001682                     u1770:
  1105   001682  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1106   001684                     u1788:
  1107   001684  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1108   001686  507F               	movf	127,w,c	;volatile
  1109   001688  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1110   00168A  0BFD               	andlw	-3
  1111   00168C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1112   00168E  6E7F               	movwf	127,c	;volatile
  1113                           
  1114                           ;buggy_lights.c: 92:             LATAbits.LATA4 = !LATAbits.LATA4;
  1115   001690  A879               	btfss	121,4,c	;volatile
  1116   001692  EF4D  F00B         	goto	u1791
  1117   001696  EF51  F00B         	goto	u1790
  1118   00169A                     u1791:
  1119   00169A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1120   00169C  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1121   00169E  EF52  F00B         	goto	u1808
  1122   0016A2                     u1790:
  1123   0016A2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1124   0016A4                     u1808:
  1125   0016A4  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  1126   0016A6  5079               	movf	121,w,c	;volatile
  1127   0016A8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1128   0016AA  0BEF               	andlw	-17
  1129   0016AC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1130   0016AE  6E79               	movwf	121,c	;volatile
  1131                           
  1132                           ;buggy_lights.c: 93:             LATFbits.LATF7 = !LATFbits.LATF7;
  1133   0016B0  AE7E               	btfss	126,7,c	;volatile
  1134   0016B2  EF5D  F00B         	goto	u1811
  1135   0016B6  EF61  F00B         	goto	u1810
  1136   0016BA                     u1811:
  1137   0016BA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1138   0016BC  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1139   0016BE  EF62  F00B         	goto	u1828
  1140   0016C2                     u1810:
  1141   0016C2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1142   0016C4                     u1828:
  1143   0016C4  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1144   0016C6  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1145   0016C8  507E               	movf	126,w,c	;volatile
  1146   0016CA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1147   0016CC  0B7F               	andlw	-129
  1148   0016CE  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1149   0016D0  6E7E               	movwf	126,c	;volatile
  1150                           
  1151                           ;buggy_lights.c: 97:             LATGbits.LATG0 = !LATGbits.LATG0;
  1152   0016D2  A07F               	btfss	127,0,c	;volatile
  1153   0016D4  EF6E  F00B         	goto	u1831
  1154   0016D8  EF72  F00B         	goto	u1830
  1155   0016DC                     u1831:
  1156   0016DC  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1157   0016DE  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1158   0016E0  EF73  F00B         	goto	u1848
  1159   0016E4                     u1830:
  1160   0016E4  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1161   0016E6                     u1848:
  1162   0016E6  507F               	movf	127,w,c	;volatile
  1163   0016E8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1164   0016EA  0BFE               	andlw	-2
  1165   0016EC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1166   0016EE  6E7F               	movwf	127,c	;volatile
  1167                           
  1168                           ;buggy_lights.c: 98:             LATEbits.LATE7 = !LATEbits.LATE7;
  1169   0016F0  AE7D               	btfss	125,7,c	;volatile
  1170   0016F2  EF7D  F00B         	goto	u1851
  1171   0016F6  EF81  F00B         	goto	u1850
  1172   0016FA                     u1851:
  1173   0016FA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1174   0016FC  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1175   0016FE  EF82  F00B         	goto	u1868
  1176   001702                     u1850:
  1177   001702  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1178   001704                     u1868:
  1179   001704  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1180   001706  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1181   001708  507D               	movf	125,w,c	;volatile
  1182   00170A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1183   00170C  0B7F               	andlw	-129
  1184   00170E  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1185   001710  6E7D               	movwf	125,c	;volatile
  1186                           
  1187                           ;buggy_lights.c: 99:             LATAbits.LATA3 = !LATAbits.LATA3;
  1188   001712  A679               	btfss	121,3,c	;volatile
  1189   001714  EF8E  F00B         	goto	u1871
  1190   001718  EF92  F00B         	goto	u1870
  1191   00171C                     u1871:
  1192   00171C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1193   00171E  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1194   001720  EF93  F00B         	goto	u1888
  1195   001724                     u1870:
  1196   001724  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1197   001726                     u1888:
  1198   001726  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1199   001728  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1200   00172A  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1201   00172C  5079               	movf	121,w,c	;volatile
  1202   00172E  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1203   001730  0BF7               	andlw	-9
  1204   001732  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1205   001734  6E79               	movwf	121,c	;volatile
  1206   001736  0012               	return		;funcret
  1207   001738                     __end_of_toggle_tricolour_LED:
  1208                           	callstack 0
  1209                           
  1210 ;; *************** function _sendRGBCvalSerial4 *****************
  1211 ;; Defined at:
  1212 ;;		line 62 in file "serial.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;  col_val         1   57[COMRAM] PTR struct RGBC_val
  1215 ;;		 -> main@measured_colour(8), 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  tempStr        26   58[COMRAM] unsigned char [26]
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1227 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1228 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1230 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1231 ;;Total ram usage:       27 bytes
  1232 ;; Hardware stack levels used: 1
  1233 ;; Hardware stack levels required when called: 6
  1234 ;; This function calls:
  1235 ;;		_sendStringSerial4
  1236 ;;		_sprintf
  1237 ;; This function is called by:
  1238 ;;		_main
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           	psect	text2
  1243   001B98                     __ptext2:
  1244                           	callstack 0
  1245   001B98                     _sendRGBCvalSerial4:
  1246                           	callstack 24
  1247   001B98                     
  1248                           ;serial.c: 63:     char tempStr[26];;serial.c: 65:     sprintf(tempStr, "%u %u %u %u \r"
      +                          , col_val->R, col_val->G, col_val->B, col_val->C);
  1249   001B98  0E3B               	movlw	low sendRGBCvalSerial4@tempStr
  1250   001B9A  6E20               	movwf	sprintf@s^0,c
  1251   001B9C  6A21               	clrf	(sprintf@s+1)^0,c
  1252   001B9E  0E01               	movlw	low STR_5
  1253   001BA0  6E22               	movwf	sprintf@fmt^0,c
  1254   001BA2  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1255   001BA4  6ED9               	movwf	fsr2l,c
  1256   001BA6  6ADA               	clrf	fsr2h,c
  1257   001BA8  CFDE F023          	movff	postinc2,?_sprintf+3
  1258   001BAC  CFDD F024          	movff	postdec2,?_sprintf+4
  1259   001BB0  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1260   001BB2  6ED9               	movwf	fsr2l,c
  1261   001BB4  6ADA               	clrf	fsr2h,c
  1262   001BB6  0E02               	movlw	2
  1263   001BB8  26D9               	addwf	fsr2l,f,c
  1264   001BBA  CFDE F025          	movff	postinc2,?_sprintf+5
  1265   001BBE  CFDD F026          	movff	postdec2,?_sprintf+6
  1266   001BC2  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1267   001BC4  6ED9               	movwf	fsr2l,c
  1268   001BC6  6ADA               	clrf	fsr2h,c
  1269   001BC8  0E04               	movlw	4
  1270   001BCA  26D9               	addwf	fsr2l,f,c
  1271   001BCC  CFDE F027          	movff	postinc2,?_sprintf+7
  1272   001BD0  CFDD F028          	movff	postdec2,?_sprintf+8
  1273   001BD4  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1274   001BD6  6ED9               	movwf	fsr2l,c
  1275   001BD8  6ADA               	clrf	fsr2h,c
  1276   001BDA  0E06               	movlw	6
  1277   001BDC  26D9               	addwf	fsr2l,f,c
  1278   001BDE  CFDE F029          	movff	postinc2,?_sprintf+9
  1279   001BE2  CFDD F02A          	movff	postdec2,?_sprintf+10
  1280   001BE6  EC6B  F00F         	call	_sprintf	;wreg free
  1281   001BEA                     
  1282                           ;serial.c: 66:     sendStringSerial4(tempStr);
  1283   001BEA  0E3B               	movlw	low sendRGBCvalSerial4@tempStr
  1284   001BEC  6E02               	movwf	sendStringSerial4@string^0,c
  1285   001BEE  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1286   001BF0  EC9B  F00D         	call	_sendStringSerial4	;wreg free
  1287   001BF4  0012               	return		;funcret
  1288   001BF6                     __end_of_sendRGBCvalSerial4:
  1289                           	callstack 0
  1290                           
  1291 ;; *************** function _sendHSVvalSerial4 *****************
  1292 ;; Defined at:
  1293 ;;		line 70 in file "serial.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;  col_val         1   57[COMRAM] PTR struct HSV_val
  1296 ;;		 -> main@HSV_colour(6), 
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;  tempStr        21   58[COMRAM] unsigned char [21]
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1308 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1309 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1311 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1312 ;;Total ram usage:       22 bytes
  1313 ;; Hardware stack levels used: 1
  1314 ;; Hardware stack levels required when called: 6
  1315 ;; This function calls:
  1316 ;;		_sendStringSerial4
  1317 ;;		_sprintf
  1318 ;; This function is called by:
  1319 ;;		_main
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text3
  1324   001E8A                     __ptext3:
  1325                           	callstack 0
  1326   001E8A                     _sendHSVvalSerial4:
  1327                           	callstack 24
  1328   001E8A                     
  1329                           ;serial.c: 71:     char tempStr[21];;serial.c: 73:     sprintf(tempStr, "%u %u %u \r", c
      +                          ol_val->H, col_val->S, col_val->V);
  1330   001E8A  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  1331   001E8C  6E20               	movwf	sprintf@s^0,c
  1332   001E8E  6A21               	clrf	(sprintf@s+1)^0,c
  1333   001E90  0E04               	movlw	low (STR_5+3)
  1334   001E92  6E22               	movwf	sprintf@fmt^0,c
  1335   001E94  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  1336   001E96  6ED9               	movwf	fsr2l,c
  1337   001E98  6ADA               	clrf	fsr2h,c
  1338   001E9A  CFDE F023          	movff	postinc2,?_sprintf+3
  1339   001E9E  CFDD F024          	movff	postdec2,?_sprintf+4
  1340   001EA2  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  1341   001EA4  6ED9               	movwf	fsr2l,c
  1342   001EA6  6ADA               	clrf	fsr2h,c
  1343   001EA8  0E02               	movlw	2
  1344   001EAA  26D9               	addwf	fsr2l,f,c
  1345   001EAC  CFDE F025          	movff	postinc2,?_sprintf+5
  1346   001EB0  CFDD F026          	movff	postdec2,?_sprintf+6
  1347   001EB4  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  1348   001EB6  6ED9               	movwf	fsr2l,c
  1349   001EB8  6ADA               	clrf	fsr2h,c
  1350   001EBA  0E04               	movlw	4
  1351   001EBC  26D9               	addwf	fsr2l,f,c
  1352   001EBE  CFDE F027          	movff	postinc2,?_sprintf+7
  1353   001EC2  CFDD F028          	movff	postdec2,?_sprintf+8
  1354   001EC6  EC6B  F00F         	call	_sprintf	;wreg free
  1355   001ECA                     
  1356                           ;serial.c: 74:     sendStringSerial4(tempStr);
  1357   001ECA  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  1358   001ECC  6E02               	movwf	sendStringSerial4@string^0,c
  1359   001ECE  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1360   001ED0  EC9B  F00D         	call	_sendStringSerial4	;wreg free
  1361   001ED4  0012               	return		;funcret
  1362   001ED6                     __end_of_sendHSVvalSerial4:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _sprintf *****************
  1366 ;; Defined at:
  1367 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  s               2   31[COMRAM] PTR unsigned char 
  1370 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), sendArrayCharSerial4@tempStr(161), sendIntSerial4
      +@string(17), 
  1371 ;;  fmt             1   33[COMRAM] PTR const unsigned char 
  1372 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  f              12   45[COMRAM] struct _IO_FILE
  1375 ;;  ret             2   42[COMRAM] int 
  1376 ;;  ap              1   44[COMRAM] PTR void [1]
  1377 ;;		 -> ?_sprintf(2), 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  2   31[COMRAM] int 
  1380 ;; Registers used:
  1381 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1387 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1388 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1390 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1391 ;;Total ram usage:       26 bytes
  1392 ;; Hardware stack levels used: 1
  1393 ;; Hardware stack levels required when called: 5
  1394 ;; This function calls:
  1395 ;;		_vfprintf
  1396 ;; This function is called by:
  1397 ;;		_sendRGBCvalSerial4
  1398 ;;		_sendHSVvalSerial4
  1399 ;;		_sendIntSerial4
  1400 ;;		_sendArrayCharSerial4
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text4
  1405   001ED6                     __ptext4:
  1406                           	callstack 0
  1407   001ED6                     _sprintf:
  1408                           	callstack 24
  1409   001ED6  0E23               	movlw	low (?_sprintf+3)
  1410   001ED8  6E2D               	movwf	sprintf@ap^0,c
  1411   001EDA  C020  F02E         	movff	sprintf@s,sprintf@f
  1412   001EDE  C021  F02F         	movff	sprintf@s+1,sprintf@f+1
  1413   001EE2  0E00               	movlw	0
  1414   001EE4  6E32               	movwf	(sprintf@f+4)^0,c
  1415   001EE6  0E00               	movlw	0
  1416   001EE8  6E31               	movwf	(sprintf@f+3)^0,c
  1417   001EEA  0E00               	movlw	0
  1418   001EEC  6E39               	movwf	(sprintf@f+11)^0,c
  1419   001EEE  0E00               	movlw	0
  1420   001EF0  6E38               	movwf	(sprintf@f+10)^0,c
  1421   001EF2  0E2E               	movlw	low sprintf@f
  1422   001EF4  6E1C               	movwf	vfprintf@fp^0,c
  1423   001EF6  C022  F01D         	movff	sprintf@fmt,vfprintf@fmt
  1424   001EFA  0E2D               	movlw	low sprintf@ap
  1425   001EFC  6E1E               	movwf	vfprintf@ap^0,c
  1426   001EFE  ECFB  F00D         	call	_vfprintf	;wreg free
  1427   001F02  C01C  F02B         	movff	?_vfprintf,sprintf@ret
  1428   001F06  C01D  F02C         	movff	?_vfprintf+1,sprintf@ret+1
  1429   001F0A  5031               	movf	(sprintf@f+3)^0,w,c
  1430   001F0C  2420               	addwf	sprintf@s^0,w,c
  1431   001F0E  6ED9               	movwf	fsr2l,c
  1432   001F10  5032               	movf	(sprintf@f+4)^0,w,c
  1433   001F12  2021               	addwfc	(sprintf@s+1)^0,w,c
  1434   001F14  6EDA               	movwf	fsr2h,c
  1435   001F16  6ADF               	clrf	indf2,c
  1436   001F18  C02B  F020         	movff	sprintf@ret,?_sprintf
  1437   001F1C  C02C  F021         	movff	sprintf@ret+1,?_sprintf+1
  1438   001F20  0012               	return		;funcret
  1439   001F22                     __end_of_sprintf:
  1440                           	callstack 0
  1441                           
  1442 ;; *************** function _vfprintf *****************
  1443 ;; Defined at:
  1444 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  fp              1   27[COMRAM] PTR struct _IO_FILE
  1447 ;;		 -> sprintf@f(12), 
  1448 ;;  fmt             1   28[COMRAM] PTR const unsigned char 
  1449 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1450 ;;  ap              1   29[COMRAM] PTR PTR void 
  1451 ;;		 -> sprintf@ap(1), 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  cfmt            1   30[COMRAM] PTR unsigned char 
  1454 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  2   27[COMRAM] int 
  1457 ;; Registers used:
  1458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1464 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1465 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1467 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1468 ;;Total ram usage:        4 bytes
  1469 ;; Hardware stack levels used: 1
  1470 ;; Hardware stack levels required when called: 4
  1471 ;; This function calls:
  1472 ;;		_vfpfcnvrt
  1473 ;; This function is called by:
  1474 ;;		_sprintf
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text5
  1479   001BF6                     __ptext5:
  1480                           	callstack 0
  1481   001BF6                     _vfprintf:
  1482                           	callstack 24
  1483   001BF6                     
  1484                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1485   001BF6  C01D  F01F         	movff	vfprintf@fmt,vfprintf@cfmt
  1486   001BFA                     
  1487                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  1488   001BFA  0E00               	movlw	0
  1489   001BFC  0100               	movlb	0	; () banked
  1490   001BFE  6F81               	movwf	(_nout+1)& (0+255),b
  1491   001C00  0E00               	movlw	0
  1492   001C02  6F80               	movwf	_nout& (0+255),b
  1493                           
  1494                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1495   001C04  EF11  F00E         	goto	l2881
  1496   001C08                     l2879:
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  1500   001C08  C01C  F00E         	movff	vfprintf@fp,vfpfcnvrt@fp
  1501   001C0C  0E1F               	movlw	low vfprintf@cfmt
  1502   001C0E  6E0F               	movwf	vfpfcnvrt@fmt^0,c
  1503   001C10  C01E  F010         	movff	vfprintf@ap,vfpfcnvrt@ap
  1504   001C14  EC17  F009         	call	_vfpfcnvrt	;wreg free
  1505   001C18  500E               	movf	?_vfpfcnvrt^0,w,c
  1506   001C1A  0100               	movlb	0	; () banked
  1507   001C1C  2780               	addwf	_nout& (0+255),f,b
  1508   001C1E  500F               	movf	(?_vfpfcnvrt+1)^0,w,c
  1509   001C20  2381               	addwfc	(_nout+1)& (0+255),f,b
  1510   001C22                     l2881:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1514   001C22  C01F  FFF6         	movff	vfprintf@cfmt,tblptrl
  1515   001C26                     	if	1	;There is more than 1 active tblptr byte
  1516   001C26  0E0E               	movlw	high __smallconst
  1517   001C28  6EF7               	movwf	tblptrh,c
  1518   001C2A                     	endif
  1519   001C2A                     	if	0	;tblptru may be non-zero
  1520   001C2A                     	endif
  1521   001C2A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1522   001C2A  0E00               	movlw	low (__smallconst shr (0+16))
  1523   001C2C  6EF8               	movwf	tblptru,c
  1524   001C2E                     	endif
  1525   001C2E  0008               	tblrd		*
  1526   001C30  50F5               	movf	tablat,w,c
  1527   001C32  0900               	iorlw	0
  1528   001C34  A4D8               	btfss	status,2,c
  1529   001C36  EF1F  F00E         	goto	u1731
  1530   001C3A  EF21  F00E         	goto	u1730
  1531   001C3E                     u1731:
  1532   001C3E  EF04  F00E         	goto	l2879
  1533   001C42                     u1730:
  1534   001C42                     
  1535                           ; BSR set to: 0
  1536                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  1537   001C42  C080  F01C         	movff	_nout,?_vfprintf
  1538   001C46  C081  F01D         	movff	_nout+1,?_vfprintf+1
  1539   001C4A                     
  1540                           ; BSR set to: 0
  1541   001C4A  0012               	return		;funcret
  1542   001C4C                     __end_of_vfprintf:
  1543                           	callstack 0
  1544                           
  1545 ;; *************** function _vfpfcnvrt *****************
  1546 ;; Defined at:
  1547 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  1550 ;;		 -> sprintf@f(12), 
  1551 ;;  fmt             1   14[COMRAM] PTR PTR unsigned char 
  1552 ;;		 -> vfprintf@cfmt(1), 
  1553 ;;  ap              1   15[COMRAM] PTR PTR void 
  1554 ;;		 -> sprintf@ap(1), 
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  convarg         4   22[COMRAM] struct .
  1557 ;;  cnt             2   19[COMRAM] int 
  1558 ;;  c               1   26[COMRAM] unsigned char 
  1559 ;;  cp              1   21[COMRAM] PTR unsigned char 
  1560 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1561 ;;  done            1   18[COMRAM] _Bool 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  2   13[COMRAM] int 
  1564 ;; Registers used:
  1565 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1571 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1572 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1573 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1574 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1575 ;;Total ram usage:       14 bytes
  1576 ;; Hardware stack levels used: 1
  1577 ;; Hardware stack levels required when called: 3
  1578 ;; This function calls:
  1579 ;;		___awdiv
  1580 ;;		___awmod
  1581 ;;		___lwdiv
  1582 ;;		___lwmod
  1583 ;;		_abs
  1584 ;;		_fputc
  1585 ;; This function is called by:
  1586 ;;		_vfprintf
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text6
  1591   00122E                     __ptext6:
  1592                           	callstack 0
  1593   00122E                     _vfpfcnvrt:
  1594                           	callstack 24
  1595   00122E                     
  1596                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  1597   00122E  0E00               	movlw	0
  1598   001230  6E15               	movwf	(vfpfcnvrt@cnt+1)^0,c
  1599   001232  0E00               	movlw	0
  1600   001234  6E14               	movwf	vfpfcnvrt@cnt^0,c
  1601   001236                     
  1602                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  1603   001236  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1604   001238  6ED9               	movwf	fsr2l,c
  1605   00123A  6ADA               	clrf	fsr2h,c
  1606   00123C  CFDF FFF6          	movff	indf2,tblptrl
  1607   001240                     	if	1	;There is more than 1 active tblptr byte
  1608   001240  0E0E               	movlw	high __smallconst
  1609   001242  6EF7               	movwf	tblptrh,c
  1610   001244                     	endif
  1611   001244                     	if	0	;tblptru may be non-zero
  1612   001244                     	endif
  1613   001244                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1614   001244  0E00               	movlw	low (__smallconst shr (0+16))
  1615   001246  6EF8               	movwf	tblptru,c
  1616   001248                     	endif
  1617   001248  0008               	tblrd		*
  1618   00124A  50F5               	movf	tablat,w,c
  1619   00124C  0A25               	xorlw	37
  1620   00124E  A4D8               	btfss	status,2,c
  1621   001250  EF2C  F009         	goto	u1541
  1622   001254  EF2E  F009         	goto	u1540
  1623   001258                     u1541:
  1624   001258  EF83  F00A         	goto	l2769
  1625   00125C                     u1540:
  1626   00125C                     
  1627                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1628   00125C  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1629   00125E  6ED9               	movwf	fsr2l,c
  1630   001260  6ADA               	clrf	fsr2h,c
  1631   001262  2ADF               	incf	indf2,f,c
  1632   001264                     
  1633                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1634   001264  0E00               	movlw	0
  1635   001266  0100               	movlb	0	; () banked
  1636   001268  6F83               	movwf	(_width+1)& (0+255),b
  1637   00126A  0E00               	movlw	0
  1638   00126C  6F82               	movwf	_width& (0+255),b
  1639   00126E  C082  F086         	movff	_width,_flags
  1640   001272                     
  1641                           ; BSR set to: 0
  1642                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1643   001272  6984               	setf	_prec& (0+255),b
  1644   001274  6985               	setf	(_prec+1)& (0+255),b
  1645   001276                     
  1646                           ; BSR set to: 0
  1647                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1648   001276  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1649   001278  6ED9               	movwf	fsr2l,c
  1650   00127A  6ADA               	clrf	fsr2h,c
  1651   00127C  50DF               	movf	indf2,w,c
  1652   00127E  6E16               	movwf	vfpfcnvrt@cp^0,c
  1653   001280                     
  1654                           ; BSR set to: 0
  1655                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1656   001280  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1657   001284                     	if	1	;There is more than 1 active tblptr byte
  1658   001284  0E0E               	movlw	high __smallconst
  1659   001286  6EF7               	movwf	tblptrh,c
  1660   001288                     	endif
  1661   001288                     	if	0	;tblptru may be non-zero
  1662   001288                     	endif
  1663   001288                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1664   001288  0E00               	movlw	low (__smallconst shr (0+16))
  1665   00128A  6EF8               	movwf	tblptru,c
  1666   00128C                     	endif
  1667   00128C  0008               	tblrd		*
  1668   00128E  50F5               	movf	tablat,w,c
  1669   001290  0A64               	xorlw	100
  1670   001292  B4D8               	btfsc	status,2,c
  1671   001294  EF4E  F009         	goto	u1551
  1672   001298  EF50  F009         	goto	u1550
  1673   00129C                     u1551:
  1674   00129C  EF60  F009         	goto	l2705
  1675   0012A0                     u1550:
  1676   0012A0                     
  1677                           ; BSR set to: 0
  1678   0012A0  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1679   0012A4                     	if	1	;There is more than 1 active tblptr byte
  1680   0012A4  0E0E               	movlw	high __smallconst
  1681   0012A6  6EF7               	movwf	tblptrh,c
  1682   0012A8                     	endif
  1683   0012A8                     	if	0	;tblptru may be non-zero
  1684   0012A8                     	endif
  1685   0012A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1686   0012A8  0E00               	movlw	low (__smallconst shr (0+16))
  1687   0012AA  6EF8               	movwf	tblptru,c
  1688   0012AC                     	endif
  1689   0012AC  0008               	tblrd		*
  1690   0012AE  50F5               	movf	tablat,w,c
  1691   0012B0  0A69               	xorlw	105
  1692   0012B2  A4D8               	btfss	status,2,c
  1693   0012B4  EF5E  F009         	goto	u1561
  1694   0012B8  EF60  F009         	goto	u1560
  1695   0012BC                     u1561:
  1696   0012BC  EFEE  F009         	goto	l2735
  1697   0012C0                     u1560:
  1698   0012C0                     l2705:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1702   0012C0  5010               	movf	vfpfcnvrt@ap^0,w,c
  1703   0012C2  6ED9               	movwf	fsr2l,c
  1704   0012C4  6ADA               	clrf	fsr2h,c
  1705   0012C6  0E02               	movlw	2
  1706   0012C8  26DF               	addwf	indf2,f,c
  1707   0012CA  5CDF               	subwf	indf2,w,c
  1708   0012CC  6ED9               	movwf	fsr2l,c
  1709   0012CE  6ADA               	clrf	fsr2h,c
  1710   0012D0  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  1711   0012D4  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  1712   0012D8                     
  1713                           ; BSR set to: 0
  1714                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1715   0012D8  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1716   0012DA  6ED9               	movwf	fsr2l,c
  1717   0012DC  6ADA               	clrf	fsr2h,c
  1718   0012DE  2816               	incf	vfpfcnvrt@cp^0,w,c
  1719   0012E0  6EDF               	movwf	indf2,c
  1720   0012E2                     
  1721                           ; BSR set to: 0
  1722                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1723   0012E2  0E20               	movlw	32
  1724   0012E4  6E1B               	movwf	vfpfcnvrt@c^0,c
  1725                           
  1726                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1727   0012E6  BE18               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1728   0012E8  EF78  F009         	goto	u1571
  1729   0012EC  EF7B  F009         	goto	u1570
  1730   0012F0                     u1571:
  1731   0012F0  0E01               	movlw	1
  1732   0012F2  EF7C  F009         	goto	u1580
  1733   0012F6                     u1570:
  1734   0012F6  0E00               	movlw	0
  1735   0012F8                     u1580:
  1736   0012F8  6E13               	movwf	vfpfcnvrt@done^0,c
  1737   0012FA                     l2711:
  1738                           
  1739                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1740   0012FA  061B               	decf	vfpfcnvrt@c^0,f,c
  1741   0012FC  501B               	movf	vfpfcnvrt@c^0,w,c
  1742   0012FE  0F60               	addlw	low _dbuf
  1743   001300  6ED9               	movwf	fsr2l,c
  1744   001302  6ADA               	clrf	fsr2h,c
  1745   001304  C017  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1746   001308  C018  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1747   00130C  0E00               	movlw	0
  1748   00130E  6E04               	movwf	(___awmod@divisor+1)^0,c
  1749   001310  0E0A               	movlw	10
  1750   001312  6E03               	movwf	___awmod@divisor^0,c
  1751   001314  EC5B  F00C         	call	___awmod	;wreg free
  1752   001318  C001  F007         	movff	?___awmod,abs@a
  1753   00131C  C002  F008         	movff	?___awmod+1,abs@a+1
  1754   001320  ECB2  F00F         	call	_abs	;wreg free
  1755   001324  5007               	movf	?_abs^0,w,c
  1756   001326  0F30               	addlw	48
  1757   001328  6EDF               	movwf	indf2,c
  1758   00132A                     
  1759                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1760   00132A  C017  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1761   00132E  C018  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1762   001332  0E00               	movlw	0
  1763   001334  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1764   001336  0E0A               	movlw	10
  1765   001338  6E03               	movwf	___awdiv@divisor^0,c
  1766   00133A  EC9C  F00B         	call	___awdiv	;wreg free
  1767   00133E  C001  F017         	movff	?___awdiv,vfpfcnvrt@convarg
  1768   001342  C002  F018         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1769   001346                     
  1770                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  1771   001346  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  1772   001348  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1773   00134A                     
  1774                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1775   00134A  5017               	movf	vfpfcnvrt@convarg^0,w,c
  1776   00134C  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1777   00134E  B4D8               	btfsc	status,2,c
  1778   001350  EFAC  F009         	goto	u1591
  1779   001354  EFAE  F009         	goto	u1590
  1780   001358                     u1591:
  1781   001358  EFB6  F009         	goto	l2721
  1782   00135C                     u1590:
  1783   00135C  501B               	movf	vfpfcnvrt@c^0,w,c
  1784   00135E  A4D8               	btfss	status,2,c
  1785   001360  EFB4  F009         	goto	u1601
  1786   001364  EFB6  F009         	goto	u1600
  1787   001368                     u1601:
  1788   001368  EF7D  F009         	goto	l2711
  1789   00136C                     u1600:
  1790   00136C                     l2721:
  1791                           
  1792                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1793   00136C  501B               	movf	vfpfcnvrt@c^0,w,c
  1794   00136E  B4D8               	btfsc	status,2,c
  1795   001370  EFBC  F009         	goto	u1611
  1796   001374  EFBE  F009         	goto	u1610
  1797   001378                     u1611:
  1798   001378  EFDF  F009         	goto	l2733
  1799   00137C                     u1610:
  1800   00137C  5013               	movf	vfpfcnvrt@done^0,w,c
  1801   00137E  B4D8               	btfsc	status,2,c
  1802   001380  EFC4  F009         	goto	u1621
  1803   001384  EFC6  F009         	goto	u1620
  1804   001388                     u1621:
  1805   001388  EFDF  F009         	goto	l2733
  1806   00138C                     u1620:
  1807   00138C                     
  1808                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1809   00138C  061B               	decf	vfpfcnvrt@c^0,f,c
  1810   00138E  501B               	movf	vfpfcnvrt@c^0,w,c
  1811   001390  0F60               	addlw	low _dbuf
  1812   001392  6ED9               	movwf	fsr2l,c
  1813   001394  6ADA               	clrf	fsr2h,c
  1814   001396  0E2D               	movlw	45
  1815   001398  6EDF               	movwf	indf2,c
  1816   00139A                     
  1817                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  1818   00139A  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  1819   00139C  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1820   00139E  EFDF  F009         	goto	l2733
  1821   0013A2                     l2729:
  1822                           
  1823                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1824   0013A2  501B               	movf	vfpfcnvrt@c^0,w,c
  1825   0013A4  0F60               	addlw	low _dbuf
  1826   0013A6  6ED9               	movwf	fsr2l,c
  1827   0013A8  6ADA               	clrf	fsr2h,c
  1828   0013AA  50DF               	movf	indf2,w,c
  1829   0013AC  6E11               	movwf	??_vfpfcnvrt^0,c
  1830   0013AE  5011               	movf	??_vfpfcnvrt^0,w,c
  1831   0013B0  6E01               	movwf	fputc@c^0,c
  1832   0013B2  6A02               	clrf	(fputc@c+1)^0,c
  1833   0013B4  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1834   0013B8  ECFE  F00B         	call	_fputc	;wreg free
  1835   0013BC  2A1B               	incf	vfpfcnvrt@c^0,f,c
  1836   0013BE                     l2733:
  1837                           
  1838                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1839   0013BE  0E20               	movlw	32
  1840   0013C0  181B               	xorwf	vfpfcnvrt@c^0,w,c
  1841   0013C2  A4D8               	btfss	status,2,c
  1842   0013C4  EFE6  F009         	goto	u1631
  1843   0013C8  EFE8  F009         	goto	u1630
  1844   0013CC                     u1631:
  1845   0013CC  EFD1  F009         	goto	l2729
  1846   0013D0                     u1630:
  1847   0013D0                     l1417:
  1848                           
  1849                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  1850   0013D0  C014  F00E         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  1851   0013D4  C015  F00F         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  1852   0013D8  EF9C  F00A         	goto	l1418
  1853   0013DC                     l2735:
  1854                           
  1855                           ; BSR set to: 0
  1856   0013DC  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1857   0013E0                     	if	1	;There is more than 1 active tblptr byte
  1858   0013E0  0E0E               	movlw	high __smallconst
  1859   0013E2  6EF7               	movwf	tblptrh,c
  1860   0013E4                     	endif
  1861   0013E4                     	if	0	;tblptru may be non-zero
  1862   0013E4                     	endif
  1863   0013E4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1864   0013E4  0E00               	movlw	low (__smallconst shr (0+16))
  1865   0013E6  6EF8               	movwf	tblptru,c
  1866   0013E8                     	endif
  1867   0013E8  0008               	tblrd		*
  1868   0013EA  50F5               	movf	tablat,w,c
  1869   0013EC  0A75               	xorlw	117
  1870   0013EE  A4D8               	btfss	status,2,c
  1871   0013F0  EFFC  F009         	goto	u1641
  1872   0013F4  EFFE  F009         	goto	u1640
  1873   0013F8                     u1641:
  1874   0013F8  EF79  F00A         	goto	l2763
  1875   0013FC                     u1640:
  1876   0013FC                     
  1877                           ; BSR set to: 0
  1878                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1879   0013FC  5010               	movf	vfpfcnvrt@ap^0,w,c
  1880   0013FE  6ED9               	movwf	fsr2l,c
  1881   001400  6ADA               	clrf	fsr2h,c
  1882   001402  0E02               	movlw	2
  1883   001404  26DF               	addwf	indf2,f,c
  1884   001406  5CDF               	subwf	indf2,w,c
  1885   001408  6ED9               	movwf	fsr2l,c
  1886   00140A  6ADA               	clrf	fsr2h,c
  1887   00140C  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  1888   001410  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  1889   001414                     
  1890                           ; BSR set to: 0
  1891                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1892   001414  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1893   001416  6ED9               	movwf	fsr2l,c
  1894   001418  6ADA               	clrf	fsr2h,c
  1895   00141A  2816               	incf	vfpfcnvrt@cp^0,w,c
  1896   00141C  6EDF               	movwf	indf2,c
  1897                           
  1898                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1899   00141E  EF61  F00A         	goto	l2761
  1900   001422                     l2741:
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  1904   001422  0E20               	movlw	32
  1905   001424  6E1B               	movwf	vfpfcnvrt@c^0,c
  1906   001426                     l2743:
  1907                           
  1908                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  1909   001426  061B               	decf	vfpfcnvrt@c^0,f,c
  1910   001428  501B               	movf	vfpfcnvrt@c^0,w,c
  1911   00142A  0F60               	addlw	low _dbuf
  1912   00142C  6ED9               	movwf	fsr2l,c
  1913   00142E  6ADA               	clrf	fsr2h,c
  1914   001430  C017  F001         	movff	vfpfcnvrt@convarg,___lwmod@dividend
  1915   001434  C018  F002         	movff	vfpfcnvrt@convarg+1,___lwmod@dividend+1
  1916   001438  0E00               	movlw	0
  1917   00143A  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1918   00143C  0E0A               	movlw	10
  1919   00143E  6E03               	movwf	___lwmod@divisor^0,c
  1920   001440  EC69  F00D         	call	___lwmod	;wreg free
  1921   001444  5001               	movf	?___lwmod^0,w,c
  1922   001446  0F30               	addlw	48
  1923   001448  6EDF               	movwf	indf2,c
  1924   00144A                     
  1925                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  1926   00144A  C017  F007         	movff	vfpfcnvrt@convarg,___lwdiv@dividend
  1927   00144E  C018  F008         	movff	vfpfcnvrt@convarg+1,___lwdiv@dividend+1
  1928   001452  0E00               	movlw	0
  1929   001454  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1930   001456  0E0A               	movlw	10
  1931   001458  6E09               	movwf	___lwdiv@divisor^0,c
  1932   00145A  ECFB  F00C         	call	___lwdiv	;wreg free
  1933   00145E  C007  F017         	movff	?___lwdiv,vfpfcnvrt@convarg
  1934   001462  C008  F018         	movff	?___lwdiv+1,vfpfcnvrt@convarg+1
  1935   001466                     
  1936                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1530:       cnt++
      +                          ;
  1937   001466  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  1938   001468  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1939   00146A                     
  1940                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  1941   00146A  5017               	movf	vfpfcnvrt@convarg^0,w,c
  1942   00146C  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1943   00146E  B4D8               	btfsc	status,2,c
  1944   001470  EF3C  F00A         	goto	u1651
  1945   001474  EF3E  F00A         	goto	u1650
  1946   001478                     u1651:
  1947   001478  EF56  F00A         	goto	l2757
  1948   00147C                     u1650:
  1949   00147C  501B               	movf	vfpfcnvrt@c^0,w,c
  1950   00147E  A4D8               	btfss	status,2,c
  1951   001480  EF44  F00A         	goto	u1661
  1952   001484  EF46  F00A         	goto	u1660
  1953   001488                     u1661:
  1954   001488  EF13  F00A         	goto	l2743
  1955   00148C                     u1660:
  1956   00148C  EF56  F00A         	goto	l2757
  1957   001490                     l2753:
  1958                           
  1959                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  1960   001490  501B               	movf	vfpfcnvrt@c^0,w,c
  1961   001492  0F60               	addlw	low _dbuf
  1962   001494  6ED9               	movwf	fsr2l,c
  1963   001496  6ADA               	clrf	fsr2h,c
  1964   001498  50DF               	movf	indf2,w,c
  1965   00149A  6E11               	movwf	??_vfpfcnvrt^0,c
  1966   00149C  5011               	movf	??_vfpfcnvrt^0,w,c
  1967   00149E  6E01               	movwf	fputc@c^0,c
  1968   0014A0  6A02               	clrf	(fputc@c+1)^0,c
  1969   0014A2  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1970   0014A6  ECFE  F00B         	call	_fputc	;wreg free
  1971   0014AA  2A1B               	incf	vfpfcnvrt@c^0,f,c
  1972   0014AC                     l2757:
  1973                           
  1974                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  1975   0014AC  0E20               	movlw	32
  1976   0014AE  181B               	xorwf	vfpfcnvrt@c^0,w,c
  1977   0014B0  A4D8               	btfss	status,2,c
  1978   0014B2  EF5D  F00A         	goto	u1671
  1979   0014B6  EF5F  F00A         	goto	u1670
  1980   0014BA                     u1671:
  1981   0014BA  EF48  F00A         	goto	l2753
  1982   0014BE                     u1670:
  1983   0014BE  EFE8  F009         	goto	l1417
  1984   0014C2                     l2761:
  1985                           
  1986                           ; BSR set to: 0
  1987   0014C2  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1988   0014C6                     	if	1	;There is more than 1 active tblptr byte
  1989   0014C6  0E0E               	movlw	high __smallconst
  1990   0014C8  6EF7               	movwf	tblptrh,c
  1991   0014CA                     	endif
  1992   0014CA                     	if	0	;tblptru may be non-zero
  1993   0014CA                     	endif
  1994   0014CA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1995   0014CA  0E00               	movlw	low (__smallconst shr (0+16))
  1996   0014CC  6EF8               	movwf	tblptru,c
  1997   0014CE                     	endif
  1998   0014CE  0008               	tblrd		*
  1999   0014D0  50F5               	movf	tablat,w,c
  2000   0014D2  6E11               	movwf	??_vfpfcnvrt^0,c
  2001   0014D4  6A12               	clrf	(??_vfpfcnvrt+1)^0,c
  2002                           
  2003                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2004                           ; Switch size 1, requested type "simple"
  2005                           ; Number of cases is 1, Range of values is 0 to 0
  2006                           ; switch strategies available:
  2007                           ; Name         Instructions Cycles
  2008                           ; simple_byte            4     3 (average)
  2009                           ;	Chosen strategy is simple_byte
  2010   0014D6  5012               	movf	(??_vfpfcnvrt+1)^0,w,c
  2011   0014D8  0A00               	xorlw	0	; case 0
  2012   0014DA  B4D8               	btfsc	status,2,c
  2013   0014DC  EF72  F00A         	goto	l3741
  2014   0014E0  EF79  F00A         	goto	l2763
  2015   0014E4                     l3741:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ; Switch size 1, requested type "simple"
  2019                           ; Number of cases is 1, Range of values is 117 to 117
  2020                           ; switch strategies available:
  2021                           ; Name         Instructions Cycles
  2022                           ; simple_byte            4     3 (average)
  2023                           ;	Chosen strategy is simple_byte
  2024   0014E4  5011               	movf	??_vfpfcnvrt^0,w,c
  2025   0014E6  0A75               	xorlw	117	; case 117
  2026   0014E8  B4D8               	btfsc	status,2,c
  2027   0014EA  EF11  F00A         	goto	l2741
  2028   0014EE  EF79  F00A         	goto	l2763
  2029   0014F2                     l2763:
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2033   0014F2  500F               	movf	vfpfcnvrt@fmt^0,w,c
  2034   0014F4  6ED9               	movwf	fsr2l,c
  2035   0014F6  6ADA               	clrf	fsr2h,c
  2036   0014F8  2ADF               	incf	indf2,f,c
  2037   0014FA                     
  2038                           ; BSR set to: 0
  2039                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  2040   0014FA  0E00               	movlw	0
  2041   0014FC  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  2042   0014FE  0E00               	movlw	0
  2043   001500  6E0E               	movwf	?_vfpfcnvrt^0,c
  2044   001502  EF9C  F00A         	goto	l1418
  2045   001506                     l2769:
  2046                           
  2047                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2048   001506  500F               	movf	vfpfcnvrt@fmt^0,w,c
  2049   001508  6ED9               	movwf	fsr2l,c
  2050   00150A  6ADA               	clrf	fsr2h,c
  2051   00150C  CFDF FFF6          	movff	indf2,tblptrl
  2052   001510                     	if	1	;There is more than 1 active tblptr byte
  2053   001510  0E0E               	movlw	high __smallconst
  2054   001512  6EF7               	movwf	tblptrh,c
  2055   001514                     	endif
  2056   001514                     	if	0	;tblptru may be non-zero
  2057   001514                     	endif
  2058   001514                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2059   001514  0E00               	movlw	low (__smallconst shr (0+16))
  2060   001516  6EF8               	movwf	tblptru,c
  2061   001518                     	endif
  2062   001518  0008               	tblrd		*
  2063   00151A  50F5               	movf	tablat,w,c
  2064   00151C  6E01               	movwf	fputc@c^0,c
  2065   00151E  6A02               	clrf	(fputc@c+1)^0,c
  2066   001520  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2067   001524  ECFE  F00B         	call	_fputc	;wreg free
  2068   001528                     
  2069                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  2070   001528  500F               	movf	vfpfcnvrt@fmt^0,w,c
  2071   00152A  6ED9               	movwf	fsr2l,c
  2072   00152C  6ADA               	clrf	fsr2h,c
  2073   00152E  2ADF               	incf	indf2,f,c
  2074   001530                     
  2075                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  2076   001530  0E00               	movlw	0
  2077   001532  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  2078   001534  0E01               	movlw	1
  2079   001536  6E0E               	movwf	?_vfpfcnvrt^0,c
  2080   001538                     l1418:
  2081   001538  0012               	return		;funcret
  2082   00153A                     __end_of_vfpfcnvrt:
  2083                           	callstack 0
  2084                           
  2085 ;; *************** function _fputc *****************
  2086 ;; Defined at:
  2087 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  c               2    0[COMRAM] int 
  2090 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2091 ;;		 -> sprintf@f(12), 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  2    0[COMRAM] int 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2103 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;Total ram usage:        8 bytes
  2108 ;; Hardware stack levels used: 1
  2109 ;; Hardware stack levels required when called: 2
  2110 ;; This function calls:
  2111 ;;		_putch
  2112 ;; This function is called by:
  2113 ;;		_vfpfcnvrt
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text7
  2118   0017FC                     __ptext7:
  2119                           	callstack 0
  2120   0017FC                     _fputc:
  2121                           	callstack 24
  2122   0017FC  5003               	movf	fputc@fp^0,w,c
  2123   0017FE  B4D8               	btfsc	status,2,c
  2124   001800  EF04  F00C         	goto	u1311
  2125   001804  EF06  F00C         	goto	u1310
  2126   001808                     u1311:
  2127   001808  EF0E  F00C         	goto	l2585
  2128   00180C                     u1310:
  2129   00180C  5003               	movf	fputc@fp^0,w,c
  2130   00180E  A4D8               	btfss	status,2,c
  2131   001810  EF0C  F00C         	goto	u1321
  2132   001814  EF0E  F00C         	goto	u1320
  2133   001818                     u1321:
  2134   001818  EF13  F00C         	goto	l2587
  2135   00181C                     u1320:
  2136   00181C                     l2585:
  2137   00181C  5001               	movf	fputc@c^0,w,c
  2138   00181E  ECD4  F010         	call	_putch
  2139   001822  EF5A  F00C         	goto	l1456
  2140   001826                     l2587:
  2141   001826  5003               	movf	fputc@fp^0,w,c
  2142   001828  6ED9               	movwf	fsr2l,c
  2143   00182A  6ADA               	clrf	fsr2h,c
  2144   00182C  0E0A               	movlw	10
  2145   00182E  26D9               	addwf	fsr2l,f,c
  2146   001830  50DE               	movf	postinc2,w,c
  2147   001832  10DE               	iorwf	postinc2,w,c
  2148   001834  B4D8               	btfsc	status,2,c
  2149   001836  EF1F  F00C         	goto	u1331
  2150   00183A  EF21  F00C         	goto	u1330
  2151   00183E                     u1331:
  2152   00183E  EF3A  F00C         	goto	l2591
  2153   001842                     u1330:
  2154   001842  5003               	movf	fputc@fp^0,w,c
  2155   001844  6ED9               	movwf	fsr2l,c
  2156   001846  6ADA               	clrf	fsr2h,c
  2157   001848  0E0A               	movlw	10
  2158   00184A  26D9               	addwf	fsr2l,f,c
  2159   00184C  5003               	movf	fputc@fp^0,w,c
  2160   00184E  6EE1               	movwf	fsr1l,c
  2161   001850  6AE2               	clrf	fsr1h,c
  2162   001852  0E03               	movlw	3
  2163   001854  26E1               	addwf	fsr1l,f,c
  2164   001856  50DE               	movf	postinc2,w,c
  2165   001858  5CE6               	subwf	postinc1,w,c
  2166   00185A  50E6               	movf	postinc1,w,c
  2167   00185C  0A80               	xorlw	128
  2168   00185E  6E08               	movwf	(??_fputc+4)^0,c
  2169   001860  50DE               	movf	postinc2,w,c
  2170   001862  0A80               	xorlw	128
  2171   001864  5808               	subwfb	(??_fputc+4)^0,w,c
  2172   001866  B0D8               	btfsc	status,0,c
  2173   001868  EF38  F00C         	goto	u1341
  2174   00186C  EF3A  F00C         	goto	u1340
  2175   001870                     u1341:
  2176   001870  EF5A  F00C         	goto	l1456
  2177   001874                     u1340:
  2178   001874                     l2591:
  2179   001874  5003               	movf	fputc@fp^0,w,c
  2180   001876  6ED9               	movwf	fsr2l,c
  2181   001878  6ADA               	clrf	fsr2h,c
  2182   00187A  0E03               	movlw	3
  2183   00187C  26D9               	addwf	fsr2l,f,c
  2184   00187E  CFDE F004          	movff	postinc2,??_fputc
  2185   001882  CFDD F005          	movff	postdec2,??_fputc+1
  2186   001886  5003               	movf	fputc@fp^0,w,c
  2187   001888  6ED9               	movwf	fsr2l,c
  2188   00188A  6ADA               	clrf	fsr2h,c
  2189   00188C  CFDE F006          	movff	postinc2,??_fputc+2
  2190   001890  CFDD F007          	movff	postdec2,??_fputc+3
  2191   001894  5004               	movf	??_fputc^0,w,c
  2192   001896  2406               	addwf	(??_fputc+2)^0,w,c
  2193   001898  6ED9               	movwf	fsr2l,c
  2194   00189A  5005               	movf	(??_fputc+1)^0,w,c
  2195   00189C  2007               	addwfc	(??_fputc+3)^0,w,c
  2196   00189E  6EDA               	movwf	fsr2h,c
  2197   0018A0  C001  FFDF         	movff	fputc@c,indf2
  2198   0018A4  5003               	movf	fputc@fp^0,w,c
  2199   0018A6  6ED9               	movwf	fsr2l,c
  2200   0018A8  6ADA               	clrf	fsr2h,c
  2201   0018AA  0E03               	movlw	3
  2202   0018AC  26D9               	addwf	fsr2l,f,c
  2203   0018AE  2ADE               	incf	postinc2,f,c
  2204   0018B0  0E00               	movlw	0
  2205   0018B2  22DD               	addwfc	postdec2,f,c
  2206   0018B4                     l1456:
  2207   0018B4  0012               	return		;funcret
  2208   0018B6                     __end_of_fputc:
  2209                           	callstack 0
  2210                           
  2211 ;; *************** function _putch *****************
  2212 ;; Defined at:
  2213 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  c               1    wreg     unsigned char 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  c               1    0[COMRAM] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2231 ;;Total ram usage:        0 bytes
  2232 ;; Hardware stack levels used: 1
  2233 ;; Hardware stack levels required when called: 1
  2234 ;; This function calls:
  2235 ;;		Nothing
  2236 ;; This function is called by:
  2237 ;;		_fputc
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text8
  2242   0021A8                     __ptext8:
  2243                           	callstack 0
  2244   0021A8                     _putch:
  2245                           	callstack 24
  2246   0021A8  0012               	return		;funcret
  2247   0021AA                     __end_of_putch:
  2248                           	callstack 0
  2249                           
  2250 ;; *************** function _abs *****************
  2251 ;; Defined at:
  2252 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  a               2    6[COMRAM] int 
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;		None
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  2    6[COMRAM] int 
  2259 ;; Registers used:
  2260 ;;		wreg, status,2, status,0
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2266 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2269 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2270 ;;Total ram usage:        4 bytes
  2271 ;; Hardware stack levels used: 1
  2272 ;; Hardware stack levels required when called: 1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_vfpfcnvrt
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text9
  2281   001F64                     __ptext9:
  2282                           	callstack 0
  2283   001F64                     _abs:
  2284                           	callstack 25
  2285   001F64  BE08               	btfsc	(abs@a+1)^0,7,c
  2286   001F66  EFB7  F00F         	goto	u1351
  2287   001F6A  EFB9  F00F         	goto	u1350
  2288   001F6E                     u1351:
  2289   001F6E  EFBF  F00F         	goto	l1441
  2290   001F72                     u1350:
  2291   001F72  C007  F007         	movff	abs@a,?_abs
  2292   001F76  C008  F008         	movff	abs@a+1,?_abs+1
  2293   001F7A  EFCB  F00F         	goto	l1444
  2294   001F7E                     l1441:
  2295   001F7E  C007  F009         	movff	abs@a,??_abs
  2296   001F82  C008  F00A         	movff	abs@a+1,??_abs+1
  2297   001F86  1E09               	comf	??_abs^0,f,c
  2298   001F88  1E0A               	comf	(??_abs+1)^0,f,c
  2299   001F8A  4A09               	infsnz	??_abs^0,f,c
  2300   001F8C  2A0A               	incf	(??_abs+1)^0,f,c
  2301   001F8E  C009  F007         	movff	??_abs,?_abs
  2302   001F92  C00A  F008         	movff	??_abs+1,?_abs+1
  2303   001F96                     l1444:
  2304   001F96  0012               	return		;funcret
  2305   001F98                     __end_of_abs:
  2306                           	callstack 0
  2307                           
  2308 ;; *************** function ___lwmod *****************
  2309 ;; Defined at:
  2310 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  dividend        2    0[COMRAM] unsigned int 
  2313 ;;  divisor         2    2[COMRAM] unsigned int 
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;  counter         1    4[COMRAM] unsigned char 
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  2    0[COMRAM] unsigned int 
  2318 ;; Registers used:
  2319 ;;		wreg, status,2, status,0
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2325 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2326 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2328 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2329 ;;Total ram usage:        5 bytes
  2330 ;; Hardware stack levels used: 1
  2331 ;; Hardware stack levels required when called: 1
  2332 ;; This function calls:
  2333 ;;		Nothing
  2334 ;; This function is called by:
  2335 ;;		_vfpfcnvrt
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text10
  2340   001AD2                     __ptext10:
  2341                           	callstack 0
  2342   001AD2                     ___lwmod:
  2343                           	callstack 25
  2344   001AD2  5003               	movf	___lwmod@divisor^0,w,c
  2345   001AD4  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  2346   001AD6  B4D8               	btfsc	status,2,c
  2347   001AD8  EF70  F00D         	goto	u1281
  2348   001ADC  EF72  F00D         	goto	u1280
  2349   001AE0                     u1281:
  2350   001AE0  EF96  F00D         	goto	l1199
  2351   001AE4                     u1280:
  2352   001AE4  0E01               	movlw	1
  2353   001AE6  6E05               	movwf	___lwmod@counter^0,c
  2354   001AE8  EF7A  F00D         	goto	l2571
  2355   001AEC                     l2569:
  2356   001AEC  90D8               	bcf	status,0,c
  2357   001AEE  3603               	rlcf	___lwmod@divisor^0,f,c
  2358   001AF0  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  2359   001AF2  2A05               	incf	___lwmod@counter^0,f,c
  2360   001AF4                     l2571:
  2361   001AF4  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  2362   001AF6  EF7F  F00D         	goto	u1291
  2363   001AFA  EF81  F00D         	goto	u1290
  2364   001AFE                     u1291:
  2365   001AFE  EF76  F00D         	goto	l2569
  2366   001B02                     u1290:
  2367   001B02                     l2573:
  2368   001B02  5003               	movf	___lwmod@divisor^0,w,c
  2369   001B04  5C01               	subwf	___lwmod@dividend^0,w,c
  2370   001B06  5004               	movf	(___lwmod@divisor+1)^0,w,c
  2371   001B08  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  2372   001B0A  A0D8               	btfss	status,0,c
  2373   001B0C  EF8A  F00D         	goto	u1301
  2374   001B10  EF8C  F00D         	goto	u1300
  2375   001B14                     u1301:
  2376   001B14  EF90  F00D         	goto	l2577
  2377   001B18                     u1300:
  2378   001B18  5003               	movf	___lwmod@divisor^0,w,c
  2379   001B1A  5E01               	subwf	___lwmod@dividend^0,f,c
  2380   001B1C  5004               	movf	(___lwmod@divisor+1)^0,w,c
  2381   001B1E  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  2382   001B20                     l2577:
  2383   001B20  90D8               	bcf	status,0,c
  2384   001B22  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  2385   001B24  3203               	rrcf	___lwmod@divisor^0,f,c
  2386   001B26  2E05               	decfsz	___lwmod@counter^0,f,c
  2387   001B28  EF81  F00D         	goto	l2573
  2388   001B2C                     l1199:
  2389   001B2C  C001  F001         	movff	___lwmod@dividend,?___lwmod
  2390   001B30  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  2391   001B34  0012               	return		;funcret
  2392   001B36                     __end_of___lwmod:
  2393                           	callstack 0
  2394                           
  2395 ;; *************** function ___awmod *****************
  2396 ;; Defined at:
  2397 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  dividend        2    0[COMRAM] int 
  2400 ;;  divisor         2    2[COMRAM] int 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  sign            1    5[COMRAM] unsigned char 
  2403 ;;  counter         1    4[COMRAM] unsigned char 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  2    0[COMRAM] int 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2, status,0
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2417 ;;Total ram usage:        6 bytes
  2418 ;; Hardware stack levels used: 1
  2419 ;; Hardware stack levels required when called: 1
  2420 ;; This function calls:
  2421 ;;		Nothing
  2422 ;; This function is called by:
  2423 ;;		_vfpfcnvrt
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text11
  2428   0018B6                     __ptext11:
  2429                           	callstack 0
  2430   0018B6                     ___awmod:
  2431                           	callstack 25
  2432   0018B6  0E00               	movlw	0
  2433   0018B8  6E06               	movwf	___awmod@sign^0,c
  2434   0018BA  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2435   0018BC  EF64  F00C         	goto	u1190
  2436   0018C0  EF62  F00C         	goto	u1191
  2437   0018C4                     u1191:
  2438   0018C4  EF6A  F00C         	goto	l2515
  2439   0018C8                     u1190:
  2440   0018C8  6C01               	negf	___awmod@dividend^0,c
  2441   0018CA  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2442   0018CC  B0D8               	btfsc	status,0,c
  2443   0018CE  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2444   0018D0  0E01               	movlw	1
  2445   0018D2  6E06               	movwf	___awmod@sign^0,c
  2446   0018D4                     l2515:
  2447   0018D4  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2448   0018D6  EF71  F00C         	goto	u1200
  2449   0018DA  EF6F  F00C         	goto	u1201
  2450   0018DE                     u1201:
  2451   0018DE  EF75  F00C         	goto	l2519
  2452   0018E2                     u1200:
  2453   0018E2  6C03               	negf	___awmod@divisor^0,c
  2454   0018E4  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2455   0018E6  B0D8               	btfsc	status,0,c
  2456   0018E8  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2457   0018EA                     l2519:
  2458   0018EA  5003               	movf	___awmod@divisor^0,w,c
  2459   0018EC  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2460   0018EE  B4D8               	btfsc	status,2,c
  2461   0018F0  EF7C  F00C         	goto	u1211
  2462   0018F4  EF7E  F00C         	goto	u1210
  2463   0018F8                     u1211:
  2464   0018F8  EFA2  F00C         	goto	l2535
  2465   0018FC                     u1210:
  2466   0018FC  0E01               	movlw	1
  2467   0018FE  6E05               	movwf	___awmod@counter^0,c
  2468   001900  EF86  F00C         	goto	l2525
  2469   001904                     l2523:
  2470   001904  90D8               	bcf	status,0,c
  2471   001906  3603               	rlcf	___awmod@divisor^0,f,c
  2472   001908  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2473   00190A  2A05               	incf	___awmod@counter^0,f,c
  2474   00190C                     l2525:
  2475   00190C  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2476   00190E  EF8B  F00C         	goto	u1221
  2477   001912  EF8D  F00C         	goto	u1220
  2478   001916                     u1221:
  2479   001916  EF82  F00C         	goto	l2523
  2480   00191A                     u1220:
  2481   00191A                     l2527:
  2482   00191A  5003               	movf	___awmod@divisor^0,w,c
  2483   00191C  5C01               	subwf	___awmod@dividend^0,w,c
  2484   00191E  5004               	movf	(___awmod@divisor+1)^0,w,c
  2485   001920  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2486   001922  A0D8               	btfss	status,0,c
  2487   001924  EF96  F00C         	goto	u1231
  2488   001928  EF98  F00C         	goto	u1230
  2489   00192C                     u1231:
  2490   00192C  EF9C  F00C         	goto	l2531
  2491   001930                     u1230:
  2492   001930  5003               	movf	___awmod@divisor^0,w,c
  2493   001932  5E01               	subwf	___awmod@dividend^0,f,c
  2494   001934  5004               	movf	(___awmod@divisor+1)^0,w,c
  2495   001936  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2496   001938                     l2531:
  2497   001938  90D8               	bcf	status,0,c
  2498   00193A  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2499   00193C  3203               	rrcf	___awmod@divisor^0,f,c
  2500   00193E  2E05               	decfsz	___awmod@counter^0,f,c
  2501   001940  EF8D  F00C         	goto	l2527
  2502   001944                     l2535:
  2503   001944  5006               	movf	___awmod@sign^0,w,c
  2504   001946  B4D8               	btfsc	status,2,c
  2505   001948  EFA8  F00C         	goto	u1241
  2506   00194C  EFAA  F00C         	goto	u1240
  2507   001950                     u1241:
  2508   001950  EFAE  F00C         	goto	l2539
  2509   001954                     u1240:
  2510   001954  6C01               	negf	___awmod@dividend^0,c
  2511   001956  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2512   001958  B0D8               	btfsc	status,0,c
  2513   00195A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2514   00195C                     l2539:
  2515   00195C  C001  F001         	movff	___awmod@dividend,?___awmod
  2516   001960  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2517   001964  0012               	return		;funcret
  2518   001966                     __end_of___awmod:
  2519                           	callstack 0
  2520                           
  2521 ;; *************** function ___awdiv *****************
  2522 ;; Defined at:
  2523 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  dividend        2    0[COMRAM] int 
  2526 ;;  divisor         2    2[COMRAM] int 
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  quotient        2    6[COMRAM] int 
  2529 ;;  sign            1    5[COMRAM] unsigned char 
  2530 ;;  counter         1    4[COMRAM] unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  2    0[COMRAM] int 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2540 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2541 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2543 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2544 ;;Total ram usage:        8 bytes
  2545 ;; Hardware stack levels used: 1
  2546 ;; Hardware stack levels required when called: 1
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_vfpfcnvrt
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text12
  2555   001738                     __ptext12:
  2556                           	callstack 0
  2557   001738                     ___awdiv:
  2558                           	callstack 25
  2559   001738  0E00               	movlw	0
  2560   00173A  6E06               	movwf	___awdiv@sign^0,c
  2561   00173C  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2562   00173E  EFA5  F00B         	goto	u1130
  2563   001742  EFA3  F00B         	goto	u1131
  2564   001746                     u1131:
  2565   001746  EFAB  F00B         	goto	l2471
  2566   00174A                     u1130:
  2567   00174A  6C03               	negf	___awdiv@divisor^0,c
  2568   00174C  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2569   00174E  B0D8               	btfsc	status,0,c
  2570   001750  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2571   001752  0E01               	movlw	1
  2572   001754  6E06               	movwf	___awdiv@sign^0,c
  2573   001756                     l2471:
  2574   001756  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2575   001758  EFB2  F00B         	goto	u1140
  2576   00175C  EFB0  F00B         	goto	u1141
  2577   001760                     u1141:
  2578   001760  EFB8  F00B         	goto	l2477
  2579   001764                     u1140:
  2580   001764  6C01               	negf	___awdiv@dividend^0,c
  2581   001766  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2582   001768  B0D8               	btfsc	status,0,c
  2583   00176A  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2584   00176C  0E01               	movlw	1
  2585   00176E  1A06               	xorwf	___awdiv@sign^0,f,c
  2586   001770                     l2477:
  2587   001770  0E00               	movlw	0
  2588   001772  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2589   001774  0E00               	movlw	0
  2590   001776  6E07               	movwf	___awdiv@quotient^0,c
  2591   001778  5003               	movf	___awdiv@divisor^0,w,c
  2592   00177A  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2593   00177C  B4D8               	btfsc	status,2,c
  2594   00177E  EFC3  F00B         	goto	u1151
  2595   001782  EFC5  F00B         	goto	u1150
  2596   001786                     u1151:
  2597   001786  EFED  F00B         	goto	l2499
  2598   00178A                     u1150:
  2599   00178A  0E01               	movlw	1
  2600   00178C  6E05               	movwf	___awdiv@counter^0,c
  2601   00178E  EFCD  F00B         	goto	l2485
  2602   001792                     l2483:
  2603   001792  90D8               	bcf	status,0,c
  2604   001794  3603               	rlcf	___awdiv@divisor^0,f,c
  2605   001796  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2606   001798  2A05               	incf	___awdiv@counter^0,f,c
  2607   00179A                     l2485:
  2608   00179A  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2609   00179C  EFD2  F00B         	goto	u1161
  2610   0017A0  EFD4  F00B         	goto	u1160
  2611   0017A4                     u1161:
  2612   0017A4  EFC9  F00B         	goto	l2483
  2613   0017A8                     u1160:
  2614   0017A8                     l2487:
  2615   0017A8  90D8               	bcf	status,0,c
  2616   0017AA  3607               	rlcf	___awdiv@quotient^0,f,c
  2617   0017AC  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2618   0017AE  5003               	movf	___awdiv@divisor^0,w,c
  2619   0017B0  5C01               	subwf	___awdiv@dividend^0,w,c
  2620   0017B2  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2621   0017B4  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2622   0017B6  A0D8               	btfss	status,0,c
  2623   0017B8  EFE0  F00B         	goto	u1171
  2624   0017BC  EFE2  F00B         	goto	u1170
  2625   0017C0                     u1171:
  2626   0017C0  EFE7  F00B         	goto	l2495
  2627   0017C4                     u1170:
  2628   0017C4  5003               	movf	___awdiv@divisor^0,w,c
  2629   0017C6  5E01               	subwf	___awdiv@dividend^0,f,c
  2630   0017C8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2631   0017CA  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2632   0017CC  8007               	bsf	___awdiv@quotient^0,0,c
  2633   0017CE                     l2495:
  2634   0017CE  90D8               	bcf	status,0,c
  2635   0017D0  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2636   0017D2  3203               	rrcf	___awdiv@divisor^0,f,c
  2637   0017D4  2E05               	decfsz	___awdiv@counter^0,f,c
  2638   0017D6  EFD4  F00B         	goto	l2487
  2639   0017DA                     l2499:
  2640   0017DA  5006               	movf	___awdiv@sign^0,w,c
  2641   0017DC  B4D8               	btfsc	status,2,c
  2642   0017DE  EFF3  F00B         	goto	u1181
  2643   0017E2  EFF5  F00B         	goto	u1180
  2644   0017E6                     u1181:
  2645   0017E6  EFF9  F00B         	goto	l2503
  2646   0017EA                     u1180:
  2647   0017EA  6C07               	negf	___awdiv@quotient^0,c
  2648   0017EC  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2649   0017EE  B0D8               	btfsc	status,0,c
  2650   0017F0  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2651   0017F2                     l2503:
  2652   0017F2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2653   0017F6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2654   0017FA  0012               	return		;funcret
  2655   0017FC                     __end_of___awdiv:
  2656                           	callstack 0
  2657                           
  2658 ;; *************** function _sendStringSerial4 *****************
  2659 ;; Defined at:
  2660 ;;		line 35 in file "serial.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  string          2    1[COMRAM] PTR unsigned char 
  2663 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), STR_4(3), sendArrayCharSerial4@tempStr(161), 
  2664 ;;		 -> sendIntSerial4@string(17), 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;		None
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      void 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2680 ;;Total ram usage:        2 bytes
  2681 ;; Hardware stack levels used: 1
  2682 ;; Hardware stack levels required when called: 2
  2683 ;; This function calls:
  2684 ;;		_sendCharSerial4
  2685 ;; This function is called by:
  2686 ;;		_sendRGBCvalSerial4
  2687 ;;		_sendHSVvalSerial4
  2688 ;;		_sendIntSerial4
  2689 ;;		_sendArrayCharSerial4
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text13
  2694   001B36                     __ptext13:
  2695                           	callstack 0
  2696   001B36                     _sendStringSerial4:
  2697                           	callstack 27
  2698   001B36                     
  2699                           ;serial.c: 37:     while(*string != 0){
  2700   001B36  EFB2  F00D         	goto	l2935
  2701   001B3A                     l2931:
  2702                           
  2703                           ;serial.c: 38:   sendCharSerial4(*string++);
  2704   001B3A  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2705   001B3E  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2706   001B42  0E00               	movlw	low (__smallconst shr (0+16))
  2707   001B44  6EF8               	movwf	tblptru,c
  2708   001B46  0E0D               	movlw	(high __ramtop+-1)
  2709   001B48  64F7               	cpfsgt	tblptrh,c
  2710   001B4A  D003               	bra	u1747
  2711   001B4C  0008               	tblrd		*
  2712   001B4E  50F5               	movf	tablat,w,c
  2713   001B50  D005               	bra	u1740
  2714   001B52                     u1747:
  2715   001B52  CFF6 FFE9          	movff	tblptrl,fsr0l
  2716   001B56  CFF7 FFEA          	movff	tblptrh,fsr0h
  2717   001B5A  50EF               	movf	indf0,w,c
  2718   001B5C                     u1740:
  2719   001B5C  EC9A  F010         	call	_sendCharSerial4
  2720   001B60  4A02               	infsnz	sendStringSerial4@string^0,f,c
  2721   001B62  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  2722   001B64                     l2935:
  2723                           
  2724                           ;serial.c: 37:     while(*string != 0){
  2725   001B64  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2726   001B68  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2727   001B6C  0E00               	movlw	low (__smallconst shr (0+16))
  2728   001B6E  6EF8               	movwf	tblptru,c
  2729   001B70  0E0D               	movlw	(high __ramtop+-1)
  2730   001B72  64F7               	cpfsgt	tblptrh,c
  2731   001B74  D003               	bra	u1757
  2732   001B76  0008               	tblrd		*
  2733   001B78  50F5               	movf	tablat,w,c
  2734   001B7A  D005               	bra	u1750
  2735   001B7C                     u1757:
  2736   001B7C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2737   001B80  CFF7 FFEA          	movff	tblptrh,fsr0h
  2738   001B84  50EF               	movf	indf0,w,c
  2739   001B86                     u1750:
  2740   001B86  0900               	iorlw	0
  2741   001B88  A4D8               	btfss	status,2,c
  2742   001B8A  EFC9  F00D         	goto	u1761
  2743   001B8E  EFCB  F00D         	goto	u1760
  2744   001B92                     u1761:
  2745   001B92  EF9D  F00D         	goto	l2931
  2746   001B96                     u1760:
  2747   001B96  0012               	return		;funcret
  2748   001B98                     __end_of_sendStringSerial4:
  2749                           	callstack 0
  2750                           
  2751 ;; *************** function _sendCharSerial4 *****************
  2752 ;; Defined at:
  2753 ;;		line 29 in file "serial.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  charToSend      1    wreg     unsigned char 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  charToSend      1    0[COMRAM] unsigned char 
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      void 
  2760 ;; Registers used:
  2761 ;;		wreg
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2770 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2771 ;;Total ram usage:        1 bytes
  2772 ;; Hardware stack levels used: 1
  2773 ;; Hardware stack levels required when called: 1
  2774 ;; This function calls:
  2775 ;;		Nothing
  2776 ;; This function is called by:
  2777 ;;		_sendStringSerial4
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text14
  2782   002134                     __ptext14:
  2783                           	callstack 0
  2784   002134                     _sendCharSerial4:
  2785                           	callstack 27
  2786                           
  2787                           ;incstack = 0
  2788                           ;sendCharSerial4@charToSend stored from wreg
  2789   002134  6E01               	movwf	sendCharSerial4@charToSend^0,c
  2790   002136                     l437:
  2791   002136  010E               	movlb	14	; () banked
  2792   002138  A537               	btfss	55,2,b	;volatile
  2793   00213A  EFA1  F010         	goto	u1721
  2794   00213E  EFA3  F010         	goto	u1720
  2795   002142                     u1721:
  2796   002142  EF9B  F010         	goto	l437
  2797   002146                     u1720:
  2798   002146                     
  2799                           ; BSR set to: 14
  2800                           ;serial.c: 31:     TX4REG = charToSend;
  2801   002146  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  2802   00214A                     
  2803                           ; BSR set to: 14
  2804   00214A  0012               	return		;funcret
  2805   00214C                     __end_of_sendCharSerial4:
  2806                           	callstack 0
  2807                           
  2808 ;; *************** function _initUSART4 *****************
  2809 ;; Defined at:
  2810 ;;		line 5 in file "serial.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;		None
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;		None
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg, status,2
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2828 ;;Total ram usage:        0 bytes
  2829 ;; Hardware stack levels used: 1
  2830 ;; Hardware stack levels required when called: 1
  2831 ;; This function calls:
  2832 ;;		Nothing
  2833 ;; This function is called by:
  2834 ;;		_main
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text15
  2839   002116                     __ptext15:
  2840                           	callstack 0
  2841   002116                     _initUSART4:
  2842                           	callstack 29
  2843   002116                     
  2844                           ;serial.c: 9:     RC0PPS = 0x12;
  2845   002116  0E12               	movlw	18
  2846   002118  010E               	movlb	14	; () banked
  2847   00211A  6F62               	movwf	98,b	;volatile
  2848                           
  2849                           ;serial.c: 10:     RX4PPS = 0x11;
  2850   00211C  0E11               	movlw	17
  2851   00211E  6F15               	movwf	21,b	;volatile
  2852   002120                     
  2853                           ; BSR set to: 14
  2854                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  2855   002120  97E9               	bcf	233,3,b	;volatile
  2856   002122                     
  2857                           ; BSR set to: 14
  2858                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  2859   002122  95E8               	bcf	232,2,b	;volatile
  2860                           
  2861                           ;serial.c: 14:     SP4BRGL = 51;
  2862   002124  0E33               	movlw	51
  2863   002126  6FE5               	movwf	229,b	;volatile
  2864                           
  2865                           ;serial.c: 15:     SP4BRGH = 0;
  2866   002128  0E00               	movlw	0
  2867   00212A  6FE6               	movwf	230,b	;volatile
  2868   00212C                     
  2869                           ; BSR set to: 14
  2870                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  2871   00212C  89E7               	bsf	231,4,b	;volatile
  2872   00212E                     
  2873                           ; BSR set to: 14
  2874                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  2875   00212E  8BE8               	bsf	232,5,b	;volatile
  2876   002130                     
  2877                           ; BSR set to: 14
  2878                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  2879   002130  8FE7               	bsf	231,7,b	;volatile
  2880   002132                     
  2881                           ; BSR set to: 14
  2882   002132  0012               	return		;funcret
  2883   002134                     __end_of_initUSART4:
  2884                           	callstack 0
  2885                           
  2886 ;; *************** function _initDCmotorsPWM *****************
  2887 ;; Defined at:
  2888 ;;		line 5 in file "dc_motor.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;		None
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2902 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2905 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2906 ;;Total ram usage:        2 bytes
  2907 ;; Hardware stack levels used: 1
  2908 ;; Hardware stack levels required when called: 1
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_main
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text16
  2917   001966                     __ptext16:
  2918                           	callstack 0
  2919   001966                     _initDCmotorsPWM:
  2920                           	callstack 29
  2921   001966                     
  2922                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  2923   001966  9485               	bcf	133,2,c	;volatile
  2924                           
  2925                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  2926   001968  9885               	bcf	133,4,c	;volatile
  2927                           
  2928                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  2929   00196A  9E83               	bcf	131,7,c	;volatile
  2930                           
  2931                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  2932   00196C  9C87               	bcf	135,6,c	;volatile
  2933                           
  2934                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
  2935   00196E  947D               	bcf	125,2,c	;volatile
  2936                           
  2937                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
  2938   001970  987D               	bcf	125,4,c	;volatile
  2939                           
  2940                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
  2941   001972  9E7B               	bcf	123,7,c	;volatile
  2942                           
  2943                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
  2944   001974  9C7F               	bcf	127,6,c	;volatile
  2945   001976                     
  2946                           ;dc_motor.c: 18:     RE2PPS=0x05;
  2947   001976  0E05               	movlw	5
  2948   001978  010E               	movlb	14	; () banked
  2949   00197A  6F74               	movwf	116,b	;volatile
  2950                           
  2951                           ;dc_motor.c: 19:     RE4PPS=0x06;
  2952   00197C  0E06               	movlw	6
  2953   00197E  6F76               	movwf	118,b	;volatile
  2954                           
  2955                           ;dc_motor.c: 20:     RC7PPS=0x07;
  2956   001980  0E07               	movlw	7
  2957   001982  6F69               	movwf	105,b	;volatile
  2958                           
  2959                           ;dc_motor.c: 21:     RG6PPS=0x08;
  2960   001984  0E08               	movlw	8
  2961   001986  6F88               	movwf	136,b	;volatile
  2962                           
  2963                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  2964   001988  50BD               	movf	189,w,c	;volatile
  2965   00198A  0B8F               	andlw	-113
  2966   00198C  0940               	iorlw	64
  2967   00198E  6EBD               	movwf	189,c	;volatile
  2968                           
  2969                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  2970   001990  0EE0               	movlw	-32
  2971   001992  16BE               	andwf	190,f,c	;volatile
  2972                           
  2973                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  2974   001994  50BF               	movf	191,w,c	;volatile
  2975   001996  0BF0               	andlw	-16
  2976   001998  0901               	iorlw	1
  2977   00199A  6EBF               	movwf	191,c	;volatile
  2978   00199C                     
  2979                           ; BSR set to: 14
  2980                           ;dc_motor.c: 30:     T2PR=(unsigned char)PWMperiod;
  2981   00199C  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2982   0019A0                     
  2983                           ; BSR set to: 14
  2984                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  2985   0019A0  8EBD               	bsf	189,7,c	;volatile
  2986                           
  2987                           ;dc_motor.c: 35:     CCPR1H=0;
  2988   0019A2  0E00               	movlw	0
  2989   0019A4  6EAA               	movwf	170,c	;volatile
  2990                           
  2991                           ;dc_motor.c: 36:     CCPR2H=0;
  2992   0019A6  0E00               	movlw	0
  2993   0019A8  6EA6               	movwf	166,c	;volatile
  2994                           
  2995                           ;dc_motor.c: 37:     CCPR3H=0;
  2996   0019AA  0E00               	movlw	0
  2997   0019AC  010F               	movlb	15	; () banked
  2998   0019AE  6F25               	movwf	37,b	;volatile
  2999                           
  3000                           ;dc_motor.c: 38:     CCPR4H=0;
  3001   0019B0  0E00               	movlw	0
  3002   0019B2  6F21               	movwf	33,b	;volatile
  3003                           
  3004                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3005   0019B4  0EFC               	movlw	-4
  3006   0019B6  16AD               	andwf	173,f,c	;volatile
  3007                           
  3008                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3009   0019B8  0EF3               	movlw	-13
  3010   0019BA  16AD               	andwf	173,f,c	;volatile
  3011                           
  3012                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3013   0019BC  0ECF               	movlw	-49
  3014   0019BE  16AD               	andwf	173,f,c	;volatile
  3015                           
  3016                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3017   0019C0  0E3F               	movlw	-193
  3018   0019C2  16AD               	andwf	173,f,c	;volatile
  3019   0019C4                     
  3020                           ; BSR set to: 15
  3021                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3022   0019C4  88AB               	bsf	171,4,c	;volatile
  3023                           
  3024                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3025   0019C6  50AB               	movf	171,w,c	;volatile
  3026   0019C8  0BF0               	andlw	-16
  3027   0019CA  090C               	iorlw	12
  3028   0019CC  6EAB               	movwf	171,c	;volatile
  3029   0019CE                     
  3030                           ; BSR set to: 15
  3031                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3032   0019CE  8EAB               	bsf	171,7,c	;volatile
  3033   0019D0                     
  3034                           ; BSR set to: 15
  3035                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3036   0019D0  88A7               	bsf	167,4,c	;volatile
  3037                           
  3038                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3039   0019D2  50A7               	movf	167,w,c	;volatile
  3040   0019D4  0BF0               	andlw	-16
  3041   0019D6  090C               	iorlw	12
  3042   0019D8  6EA7               	movwf	167,c	;volatile
  3043   0019DA                     
  3044                           ; BSR set to: 15
  3045                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3046   0019DA  8EA7               	bsf	167,7,c	;volatile
  3047   0019DC                     
  3048                           ; BSR set to: 15
  3049                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3050   0019DC  8926               	bsf	38,4,b	;volatile
  3051                           
  3052                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3053   0019DE  5126               	movf	38,w,b	;volatile
  3054   0019E0  0BF0               	andlw	-16
  3055   0019E2  090C               	iorlw	12
  3056   0019E4  6F26               	movwf	38,b	;volatile
  3057   0019E6                     
  3058                           ; BSR set to: 15
  3059                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3060   0019E6  8F26               	bsf	38,7,b	;volatile
  3061   0019E8                     
  3062                           ; BSR set to: 15
  3063                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3064   0019E8  8922               	bsf	34,4,b	;volatile
  3065                           
  3066                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3067   0019EA  5122               	movf	34,w,b	;volatile
  3068   0019EC  0BF0               	andlw	-16
  3069   0019EE  090C               	iorlw	12
  3070   0019F0  6F22               	movwf	34,b	;volatile
  3071   0019F2                     
  3072                           ; BSR set to: 15
  3073                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3074   0019F2  8F22               	bsf	34,7,b	;volatile
  3075   0019F4                     
  3076                           ; BSR set to: 15
  3077   0019F4  0012               	return		;funcret
  3078   0019F6                     __end_of_initDCmotorsPWM:
  3079                           	callstack 0
  3080                           
  3081 ;; *************** function _getRGBCval *****************
  3082 ;; Defined at:
  3083 ;;		line 84 in file "color.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  3086 ;;		 -> main@measured_colour(8), 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;		None
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      void 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3098 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3101 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3102 ;;Total ram usage:        1 bytes
  3103 ;; Hardware stack levels used: 1
  3104 ;; Hardware stack levels required when called: 4
  3105 ;; This function calls:
  3106 ;;		_color_read_Blue
  3107 ;;		_color_read_Clear
  3108 ;;		_color_read_Green
  3109 ;;		_color_read_Red
  3110 ;; This function is called by:
  3111 ;;		_main
  3112 ;;		_wait_for_wall
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text17
  3117   001C4C                     __ptext17:
  3118                           	callstack 0
  3119   001C4C                     _getRGBCval:
  3120                           	callstack 26
  3121   001C4C                     
  3122                           ;color.c: 84: void getRGBCval(struct RGBC_val *p);color.c: 85: {;color.c: 86:     p->R =
      +                           color_read_Red();
  3123   001C4C  ECA5  F00E         	call	_color_read_Red	;wreg free
  3124   001C50  500C               	movf	getRGBCval@p^0,w,c
  3125   001C52  6ED9               	movwf	fsr2l,c
  3126   001C54  6ADA               	clrf	fsr2h,c
  3127   001C56  C005  FFDE         	movff	?_color_read_Red,postinc2
  3128   001C5A  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3129                           
  3130                           ;color.c: 87:     p->B = color_read_Blue();
  3131   001C5E  EC1D  F00F         	call	_color_read_Blue	;wreg free
  3132   001C62  500C               	movf	getRGBCval@p^0,w,c
  3133   001C64  6ED9               	movwf	fsr2l,c
  3134   001C66  6ADA               	clrf	fsr2h,c
  3135   001C68  0E04               	movlw	4
  3136   001C6A  26D9               	addwf	fsr2l,f,c
  3137   001C6C  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3138   001C70  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3139                           
  3140                           ;color.c: 88:     p->G = color_read_Green();
  3141   001C74  ECCD  F00E         	call	_color_read_Green	;wreg free
  3142   001C78  500C               	movf	getRGBCval@p^0,w,c
  3143   001C7A  6ED9               	movwf	fsr2l,c
  3144   001C7C  6ADA               	clrf	fsr2h,c
  3145   001C7E  0E02               	movlw	2
  3146   001C80  26D9               	addwf	fsr2l,f,c
  3147   001C82  C005  FFDE         	movff	?_color_read_Green,postinc2
  3148   001C86  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3149                           
  3150                           ;color.c: 89:     p->C = color_read_Clear();
  3151   001C8A  ECF5  F00E         	call	_color_read_Clear	;wreg free
  3152   001C8E  500C               	movf	getRGBCval@p^0,w,c
  3153   001C90  6ED9               	movwf	fsr2l,c
  3154   001C92  6ADA               	clrf	fsr2h,c
  3155   001C94  0E06               	movlw	6
  3156   001C96  26D9               	addwf	fsr2l,f,c
  3157   001C98  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3158   001C9C  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3159   001CA0  0012               	return		;funcret
  3160   001CA2                     __end_of_getRGBCval:
  3161                           	callstack 0
  3162                           
  3163 ;; *************** function _color_read_Red *****************
  3164 ;; Defined at:
  3165 ;;		line 28 in file "color.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;		None
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  tmp             2    9[COMRAM] unsigned int 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  2    4[COMRAM] unsigned int 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2, status,0, cstack
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3180 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3181 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3182 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3183 ;;Total ram usage:        7 bytes
  3184 ;; Hardware stack levels used: 1
  3185 ;; Hardware stack levels required when called: 3
  3186 ;; This function calls:
  3187 ;;		_I2C_2_Master_Read
  3188 ;;		_I2C_2_Master_RepStart
  3189 ;;		_I2C_2_Master_Start
  3190 ;;		_I2C_2_Master_Stop
  3191 ;;		_I2C_2_Master_Write
  3192 ;; This function is called by:
  3193 ;;		_getRGBCval
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text18
  3198   001D4A                     __ptext18:
  3199                           	callstack 0
  3200   001D4A                     _color_read_Red:
  3201                           	callstack 26
  3202   001D4A                     
  3203                           ;color.c: 30:  unsigned int tmp;;color.c: 31:  I2C_2_Master_Start();
  3204   001D4A  ECCD  F010         	call	_I2C_2_Master_Start	;wreg free
  3205                           
  3206                           ;color.c: 32:  I2C_2_Master_Write(0x52 | 0x00);
  3207   001D4E  0E52               	movlw	82
  3208   001D50  ECB1  F010         	call	_I2C_2_Master_Write
  3209                           
  3210                           ;color.c: 33:  I2C_2_Master_Write(0xA0 | 0x16);
  3211   001D54  0EB6               	movlw	182
  3212   001D56  ECB1  F010         	call	_I2C_2_Master_Write
  3213                           
  3214                           ;color.c: 34:  I2C_2_Master_RepStart();
  3215   001D5A  ECC3  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3216                           
  3217                           ;color.c: 35:  I2C_2_Master_Write(0x52 | 0x01);
  3218   001D5E  0E53               	movlw	83
  3219   001D60  ECB1  F010         	call	_I2C_2_Master_Write
  3220                           
  3221                           ;color.c: 36:  tmp=I2C_2_Master_Read(1);
  3222   001D64  0E01               	movlw	1
  3223   001D66  EC91  F00F         	call	_I2C_2_Master_Read
  3224   001D6A  6E07               	movwf	??_color_read_Red^0,c
  3225   001D6C  5007               	movf	??_color_read_Red^0,w,c
  3226   001D6E  6E0A               	movwf	color_read_Red@tmp^0,c
  3227   001D70  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3228                           
  3229                           ;color.c: 37:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3230   001D72  0E00               	movlw	0
  3231   001D74  EC91  F00F         	call	_I2C_2_Master_Read
  3232   001D78  6E07               	movwf	??_color_read_Red^0,c
  3233   001D7A  5007               	movf	??_color_read_Red^0,w,c
  3234   001D7C  6E09               	movwf	(??_color_read_Red+2)^0,c
  3235   001D7E  6A08               	clrf	(??_color_read_Red+1)^0,c
  3236   001D80  500A               	movf	color_read_Red@tmp^0,w,c
  3237   001D82  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3238   001D84  6E0A               	movwf	color_read_Red@tmp^0,c
  3239   001D86  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3240   001D88  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3241   001D8A  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3242                           
  3243                           ;color.c: 38:  I2C_2_Master_Stop();
  3244   001D8C  ECC8  F010         	call	_I2C_2_Master_Stop	;wreg free
  3245   001D90                     
  3246                           ;color.c: 39:  return tmp;
  3247   001D90  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3248   001D94  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3249   001D98  0012               	return		;funcret
  3250   001D9A                     __end_of_color_read_Red:
  3251                           	callstack 0
  3252                           
  3253 ;; *************** function _color_read_Green *****************
  3254 ;; Defined at:
  3255 ;;		line 56 in file "color.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;		None
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;  tmp             2    9[COMRAM] unsigned int 
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  2    4[COMRAM] unsigned int 
  3262 ;; Registers used:
  3263 ;;		wreg, status,2, status,0, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3269 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3270 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3271 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3272 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3273 ;;Total ram usage:        7 bytes
  3274 ;; Hardware stack levels used: 1
  3275 ;; Hardware stack levels required when called: 3
  3276 ;; This function calls:
  3277 ;;		_I2C_2_Master_Read
  3278 ;;		_I2C_2_Master_RepStart
  3279 ;;		_I2C_2_Master_Start
  3280 ;;		_I2C_2_Master_Stop
  3281 ;;		_I2C_2_Master_Write
  3282 ;; This function is called by:
  3283 ;;		_getRGBCval
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           	psect	text19
  3288   001D9A                     __ptext19:
  3289                           	callstack 0
  3290   001D9A                     _color_read_Green:
  3291                           	callstack 26
  3292   001D9A                     
  3293                           ;color.c: 58:     unsigned int tmp;;color.c: 59:  I2C_2_Master_Start();
  3294   001D9A  ECCD  F010         	call	_I2C_2_Master_Start	;wreg free
  3295                           
  3296                           ;color.c: 60:  I2C_2_Master_Write(0x52 | 0x00);
  3297   001D9E  0E52               	movlw	82
  3298   001DA0  ECB1  F010         	call	_I2C_2_Master_Write
  3299                           
  3300                           ;color.c: 61:  I2C_2_Master_Write(0xA0 | 0x18);
  3301   001DA4  0EB8               	movlw	184
  3302   001DA6  ECB1  F010         	call	_I2C_2_Master_Write
  3303                           
  3304                           ;color.c: 62:  I2C_2_Master_RepStart();
  3305   001DAA  ECC3  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3306                           
  3307                           ;color.c: 63:  I2C_2_Master_Write(0x52 | 0x01);
  3308   001DAE  0E53               	movlw	83
  3309   001DB0  ECB1  F010         	call	_I2C_2_Master_Write
  3310                           
  3311                           ;color.c: 64:  tmp=I2C_2_Master_Read(1);
  3312   001DB4  0E01               	movlw	1
  3313   001DB6  EC91  F00F         	call	_I2C_2_Master_Read
  3314   001DBA  6E07               	movwf	??_color_read_Green^0,c
  3315   001DBC  5007               	movf	??_color_read_Green^0,w,c
  3316   001DBE  6E0A               	movwf	color_read_Green@tmp^0,c
  3317   001DC0  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3318                           
  3319                           ;color.c: 65:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3320   001DC2  0E00               	movlw	0
  3321   001DC4  EC91  F00F         	call	_I2C_2_Master_Read
  3322   001DC8  6E07               	movwf	??_color_read_Green^0,c
  3323   001DCA  5007               	movf	??_color_read_Green^0,w,c
  3324   001DCC  6E09               	movwf	(??_color_read_Green+2)^0,c
  3325   001DCE  6A08               	clrf	(??_color_read_Green+1)^0,c
  3326   001DD0  500A               	movf	color_read_Green@tmp^0,w,c
  3327   001DD2  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3328   001DD4  6E0A               	movwf	color_read_Green@tmp^0,c
  3329   001DD6  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3330   001DD8  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3331   001DDA  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3332                           
  3333                           ;color.c: 66:  I2C_2_Master_Stop();
  3334   001DDC  ECC8  F010         	call	_I2C_2_Master_Stop	;wreg free
  3335   001DE0                     
  3336                           ;color.c: 67:  return tmp;
  3337   001DE0  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3338   001DE4  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3339   001DE8  0012               	return		;funcret
  3340   001DEA                     __end_of_color_read_Green:
  3341                           	callstack 0
  3342                           
  3343 ;; *************** function _color_read_Clear *****************
  3344 ;; Defined at:
  3345 ;;		line 70 in file "color.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;		None
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  tmp             2    9[COMRAM] unsigned int 
  3350 ;; Return value:  Size  Location     Type
  3351 ;;                  2    4[COMRAM] unsigned int 
  3352 ;; Registers used:
  3353 ;;		wreg, status,2, status,0, cstack
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3359 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3360 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3361 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3362 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3363 ;;Total ram usage:        7 bytes
  3364 ;; Hardware stack levels used: 1
  3365 ;; Hardware stack levels required when called: 3
  3366 ;; This function calls:
  3367 ;;		_I2C_2_Master_Read
  3368 ;;		_I2C_2_Master_RepStart
  3369 ;;		_I2C_2_Master_Start
  3370 ;;		_I2C_2_Master_Stop
  3371 ;;		_I2C_2_Master_Write
  3372 ;; This function is called by:
  3373 ;;		_getRGBCval
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text20
  3378   001DEA                     __ptext20:
  3379                           	callstack 0
  3380   001DEA                     _color_read_Clear:
  3381                           	callstack 26
  3382   001DEA                     
  3383                           ;color.c: 72:     unsigned int tmp;;color.c: 73:  I2C_2_Master_Start();
  3384   001DEA  ECCD  F010         	call	_I2C_2_Master_Start	;wreg free
  3385                           
  3386                           ;color.c: 74:  I2C_2_Master_Write(0x52 | 0x00);
  3387   001DEE  0E52               	movlw	82
  3388   001DF0  ECB1  F010         	call	_I2C_2_Master_Write
  3389                           
  3390                           ;color.c: 75:  I2C_2_Master_Write(0xA0 | 0x14);
  3391   001DF4  0EB4               	movlw	180
  3392   001DF6  ECB1  F010         	call	_I2C_2_Master_Write
  3393                           
  3394                           ;color.c: 76:  I2C_2_Master_RepStart();
  3395   001DFA  ECC3  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3396                           
  3397                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x01);
  3398   001DFE  0E53               	movlw	83
  3399   001E00  ECB1  F010         	call	_I2C_2_Master_Write
  3400                           
  3401                           ;color.c: 78:  tmp=I2C_2_Master_Read(1);
  3402   001E04  0E01               	movlw	1
  3403   001E06  EC91  F00F         	call	_I2C_2_Master_Read
  3404   001E0A  6E07               	movwf	??_color_read_Clear^0,c
  3405   001E0C  5007               	movf	??_color_read_Clear^0,w,c
  3406   001E0E  6E0A               	movwf	color_read_Clear@tmp^0,c
  3407   001E10  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3408                           
  3409                           ;color.c: 79:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3410   001E12  0E00               	movlw	0
  3411   001E14  EC91  F00F         	call	_I2C_2_Master_Read
  3412   001E18  6E07               	movwf	??_color_read_Clear^0,c
  3413   001E1A  5007               	movf	??_color_read_Clear^0,w,c
  3414   001E1C  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3415   001E1E  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3416   001E20  500A               	movf	color_read_Clear@tmp^0,w,c
  3417   001E22  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3418   001E24  6E0A               	movwf	color_read_Clear@tmp^0,c
  3419   001E26  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3420   001E28  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3421   001E2A  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3422                           
  3423                           ;color.c: 80:  I2C_2_Master_Stop();
  3424   001E2C  ECC8  F010         	call	_I2C_2_Master_Stop	;wreg free
  3425   001E30                     
  3426                           ;color.c: 81:  return tmp;
  3427   001E30  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3428   001E34  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3429   001E38  0012               	return		;funcret
  3430   001E3A                     __end_of_color_read_Clear:
  3431                           	callstack 0
  3432                           
  3433 ;; *************** function _color_read_Blue *****************
  3434 ;; Defined at:
  3435 ;;		line 42 in file "color.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;		None
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  tmp             2    9[COMRAM] unsigned int 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  2    4[COMRAM] unsigned int 
  3442 ;; Registers used:
  3443 ;;		wreg, status,2, status,0, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3449 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3451 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3452 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3453 ;;Total ram usage:        7 bytes
  3454 ;; Hardware stack levels used: 1
  3455 ;; Hardware stack levels required when called: 3
  3456 ;; This function calls:
  3457 ;;		_I2C_2_Master_Read
  3458 ;;		_I2C_2_Master_RepStart
  3459 ;;		_I2C_2_Master_Start
  3460 ;;		_I2C_2_Master_Stop
  3461 ;;		_I2C_2_Master_Write
  3462 ;; This function is called by:
  3463 ;;		_getRGBCval
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text21
  3468   001E3A                     __ptext21:
  3469                           	callstack 0
  3470   001E3A                     _color_read_Blue:
  3471                           	callstack 26
  3472   001E3A                     
  3473                           ;color.c: 44:     unsigned int tmp;;color.c: 45:  I2C_2_Master_Start();
  3474   001E3A  ECCD  F010         	call	_I2C_2_Master_Start	;wreg free
  3475                           
  3476                           ;color.c: 46:  I2C_2_Master_Write(0x52 | 0x00);
  3477   001E3E  0E52               	movlw	82
  3478   001E40  ECB1  F010         	call	_I2C_2_Master_Write
  3479                           
  3480                           ;color.c: 47:  I2C_2_Master_Write(0xA0 | 0x1A);
  3481   001E44  0EBA               	movlw	186
  3482   001E46  ECB1  F010         	call	_I2C_2_Master_Write
  3483                           
  3484                           ;color.c: 48:  I2C_2_Master_RepStart();
  3485   001E4A  ECC3  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3486                           
  3487                           ;color.c: 49:  I2C_2_Master_Write(0x52 | 0x01);
  3488   001E4E  0E53               	movlw	83
  3489   001E50  ECB1  F010         	call	_I2C_2_Master_Write
  3490                           
  3491                           ;color.c: 50:  tmp=I2C_2_Master_Read(1);
  3492   001E54  0E01               	movlw	1
  3493   001E56  EC91  F00F         	call	_I2C_2_Master_Read
  3494   001E5A  6E07               	movwf	??_color_read_Blue^0,c
  3495   001E5C  5007               	movf	??_color_read_Blue^0,w,c
  3496   001E5E  6E0A               	movwf	color_read_Blue@tmp^0,c
  3497   001E60  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3498                           
  3499                           ;color.c: 51:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3500   001E62  0E00               	movlw	0
  3501   001E64  EC91  F00F         	call	_I2C_2_Master_Read
  3502   001E68  6E07               	movwf	??_color_read_Blue^0,c
  3503   001E6A  5007               	movf	??_color_read_Blue^0,w,c
  3504   001E6C  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3505   001E6E  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3506   001E70  500A               	movf	color_read_Blue@tmp^0,w,c
  3507   001E72  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3508   001E74  6E0A               	movwf	color_read_Blue@tmp^0,c
  3509   001E76  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3510   001E78  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3511   001E7A  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3512                           
  3513                           ;color.c: 52:  I2C_2_Master_Stop();
  3514   001E7C  ECC8  F010         	call	_I2C_2_Master_Stop	;wreg free
  3515   001E80                     
  3516                           ;color.c: 53:  return tmp;
  3517   001E80  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3518   001E84  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3519   001E88  0012               	return		;funcret
  3520   001E8A                     __end_of_color_read_Blue:
  3521                           	callstack 0
  3522                           
  3523 ;; *************** function _I2C_2_Master_RepStart *****************
  3524 ;; Defined at:
  3525 ;;		line 33 in file "i2c.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;		None
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;		None
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3543 ;;Total ram usage:        0 bytes
  3544 ;; Hardware stack levels used: 1
  3545 ;; Hardware stack levels required when called: 2
  3546 ;; This function calls:
  3547 ;;		_I2C_2_Master_Idle
  3548 ;; This function is called by:
  3549 ;;		_color_read_Red
  3550 ;;		_color_read_Blue
  3551 ;;		_color_read_Green
  3552 ;;		_color_read_Clear
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text22
  3557   002186                     __ptext22:
  3558                           	callstack 0
  3559   002186                     _I2C_2_Master_RepStart:
  3560                           	callstack 26
  3561   002186                     
  3562                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3563   002186  EC42  F010         	call	_I2C_2_Master_Idle	;wreg free
  3564   00218A                     
  3565                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3566   00218A  010E               	movlb	14	; () banked
  3567   00218C  83DA               	bsf	218,1,b	;volatile
  3568   00218E                     
  3569                           ; BSR set to: 14
  3570   00218E  0012               	return		;funcret
  3571   002190                     __end_of_I2C_2_Master_RepStart:
  3572                           	callstack 0
  3573                           
  3574 ;; *************** function _I2C_2_Master_Read *****************
  3575 ;; Defined at:
  3576 ;;		line 51 in file "i2c.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  ack             1    wreg     unsigned char 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  ack             1    2[COMRAM] unsigned char 
  3581 ;;  tmp             1    3[COMRAM] unsigned char 
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      unsigned char 
  3584 ;; Registers used:
  3585 ;;		wreg, status,2, status,0, cstack
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3594 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3595 ;;Total ram usage:        3 bytes
  3596 ;; Hardware stack levels used: 1
  3597 ;; Hardware stack levels required when called: 2
  3598 ;; This function calls:
  3599 ;;		_I2C_2_Master_Idle
  3600 ;; This function is called by:
  3601 ;;		_color_read_Red
  3602 ;;		_color_read_Blue
  3603 ;;		_color_read_Green
  3604 ;;		_color_read_Clear
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text23
  3609   001F22                     __ptext23:
  3610                           	callstack 0
  3611   001F22                     _I2C_2_Master_Read:
  3612                           	callstack 26
  3613                           
  3614                           ; BSR set to: 14
  3615                           ;incstack = 0
  3616                           ;I2C_2_Master_Read@ack stored from wreg
  3617   001F22  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3618   001F24                     
  3619                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3620   001F24  EC42  F010         	call	_I2C_2_Master_Idle	;wreg free
  3621   001F28                     
  3622                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3623   001F28  010E               	movlb	14	; () banked
  3624   001F2A  87DA               	bsf	218,3,b	;volatile
  3625                           
  3626                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3627   001F2C  EC42  F010         	call	_I2C_2_Master_Idle	;wreg free
  3628   001F30                     
  3629                           ;i2c.c: 57:   tmp = SSP2BUF;
  3630   001F30  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3631                           
  3632                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3633   001F34  EC42  F010         	call	_I2C_2_Master_Idle	;wreg free
  3634   001F38                     
  3635                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3636   001F38  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3637   001F3A  B4D8               	btfsc	status,2,c
  3638   001F3C  EFA2  F00F         	goto	u1681
  3639   001F40  EFA6  F00F         	goto	u1680
  3640   001F44                     u1681:
  3641   001F44  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3642   001F46  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3643   001F48  EFA7  F00F         	goto	u1698
  3644   001F4C                     u1680:
  3645   001F4C  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3646   001F4E                     u1698:
  3647   001F4E  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3648   001F50  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3649   001F52  010E               	movlb	14	; () banked
  3650   001F54  51DA               	movf	218,w,b	;volatile
  3651   001F56  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3652   001F58  0BDF               	andlw	-33
  3653   001F5A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3654   001F5C  6FDA               	movwf	218,b	;volatile
  3655   001F5E                     
  3656                           ; BSR set to: 14
  3657                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3658   001F5E  89DA               	bsf	218,4,b	;volatile
  3659   001F60                     
  3660                           ; BSR set to: 14
  3661                           ;i2c.c: 61:   return tmp;
  3662   001F60  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3663   001F62                     
  3664                           ; BSR set to: 14
  3665   001F62  0012               	return		;funcret
  3666   001F64                     __end_of_I2C_2_Master_Read:
  3667                           	callstack 0
  3668                           
  3669 ;; *************** function _getHSVval *****************
  3670 ;; Defined at:
  3671 ;;		line 133 in file "color.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  3674 ;;		 -> main@HSV_colour(6), 
  3675 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  3676 ;;		 -> main@measured_colour(8), 
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  C               2   37[COMRAM] unsigned int 
  3679 ;;  M               2   35[COMRAM] unsigned int 
  3680 ;;  z               2    0        unsigned int 
  3681 ;;  H               2   33[COMRAM] unsigned int 
  3682 ;;  BB              2   31[COMRAM] unsigned int 
  3683 ;;  GG              2   29[COMRAM] unsigned int 
  3684 ;;  S               2   27[COMRAM] unsigned int 
  3685 ;;  m               2   25[COMRAM] unsigned int 
  3686 ;;  RR              2   23[COMRAM] unsigned int 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3697 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3698 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3699 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3700 ;;Total ram usage:       26 bytes
  3701 ;; Hardware stack levels used: 1
  3702 ;; Hardware stack levels required when called: 3
  3703 ;; This function calls:
  3704 ;;		___lwdiv
  3705 ;;		___wmul
  3706 ;;		_maxRGB
  3707 ;;		_minRGB
  3708 ;; This function is called by:
  3709 ;;		_main
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           	psect	text24
  3714   000E1A                     __ptext24:
  3715                           	callstack 0
  3716   000E1A                     _getHSVval:
  3717                           	callstack 27
  3718   000E1A                     
  3719                           ;color.c: 136:     unsigned int H = 0;
  3720   000E1A  0E00               	movlw	0
  3721   000E1C  6E23               	movwf	(getHSVval@H+1)^0,c
  3722   000E1E  0E00               	movlw	0
  3723   000E20  6E22               	movwf	getHSVval@H^0,c
  3724                           
  3725                           ;color.c: 137:     unsigned int S = 0;
  3726   000E22  0E00               	movlw	0
  3727   000E24  6E1D               	movwf	(getHSVval@S+1)^0,c
  3728   000E26  0E00               	movlw	0
  3729   000E28  6E1C               	movwf	getHSVval@S^0,c
  3730   000E2A                     
  3731                           ;color.c: 139:     unsigned int RR = (p2->R);
  3732   000E2A  500F               	movf	getHSVval@p2^0,w,c
  3733   000E2C  6ED9               	movwf	fsr2l,c
  3734   000E2E  6ADA               	clrf	fsr2h,c
  3735   000E30  CFDE F018          	movff	postinc2,getHSVval@RR
  3736   000E34  CFDD F019          	movff	postdec2,getHSVval@RR+1
  3737   000E38                     
  3738                           ;color.c: 140:     unsigned int GG = (p2->G);
  3739   000E38  500F               	movf	getHSVval@p2^0,w,c
  3740   000E3A  6ED9               	movwf	fsr2l,c
  3741   000E3C  6ADA               	clrf	fsr2h,c
  3742   000E3E  0E02               	movlw	2
  3743   000E40  26D9               	addwf	fsr2l,f,c
  3744   000E42  CFDE F01E          	movff	postinc2,getHSVval@GG
  3745   000E46  CFDD F01F          	movff	postdec2,getHSVval@GG+1
  3746   000E4A                     
  3747                           ;color.c: 141:     unsigned int BB = (p2->B);
  3748   000E4A  500F               	movf	getHSVval@p2^0,w,c
  3749   000E4C  6ED9               	movwf	fsr2l,c
  3750   000E4E  6ADA               	clrf	fsr2h,c
  3751   000E50  0E04               	movlw	4
  3752   000E52  26D9               	addwf	fsr2l,f,c
  3753   000E54  CFDE F020          	movff	postinc2,getHSVval@BB
  3754   000E58  CFDD F021          	movff	postdec2,getHSVval@BB+1
  3755   000E5C                     
  3756                           ;color.c: 143:     unsigned int M = maxRGB(p2);
  3757   000E5C  C00F  F007         	movff	getHSVval@p2,maxRGB@p
  3758   000E60  EC7B  F00E         	call	_maxRGB	;wreg free
  3759   000E64  C007  F024         	movff	?_maxRGB,getHSVval@M
  3760   000E68  C008  F025         	movff	?_maxRGB+1,getHSVval@M+1
  3761   000E6C                     
  3762                           ;color.c: 144:     unsigned int m = minRGB(p2);
  3763   000E6C  C00F  F007         	movff	getHSVval@p2,minRGB@p
  3764   000E70  EC51  F00E         	call	_minRGB	;wreg free
  3765   000E74  C007  F01A         	movff	?_minRGB,getHSVval@m
  3766   000E78  C008  F01B         	movff	?_minRGB+1,getHSVval@m+1
  3767   000E7C                     
  3768                           ;color.c: 145:     unsigned int C = M - m;
  3769   000E7C  501A               	movf	getHSVval@m^0,w,c
  3770   000E7E  5C24               	subwf	getHSVval@M^0,w,c
  3771   000E80  6E26               	movwf	getHSVval@C^0,c
  3772   000E82  501B               	movf	(getHSVval@m+1)^0,w,c
  3773   000E84  5825               	subwfb	(getHSVval@M+1)^0,w,c
  3774   000E86  6E27               	movwf	(getHSVval@C+1)^0,c
  3775   000E88                     
  3776                           ;color.c: 147:     if (C == 0) {
  3777   000E88  5026               	movf	getHSVval@C^0,w,c
  3778   000E8A  1027               	iorwf	(getHSVval@C+1)^0,w,c
  3779   000E8C  A4D8               	btfss	status,2,c
  3780   000E8E  EF4B  F007         	goto	u1921
  3781   000E92  EF4D  F007         	goto	u1920
  3782   000E96                     u1921:
  3783   000E96  EF53  F007         	goto	l3101
  3784   000E9A                     u1920:
  3785   000E9A                     
  3786                           ;color.c: 148:         H = 0;
  3787   000E9A  0E00               	movlw	0
  3788   000E9C  6E23               	movwf	(getHSVval@H+1)^0,c
  3789   000E9E  0E00               	movlw	0
  3790   000EA0  6E22               	movwf	getHSVval@H^0,c
  3791                           
  3792                           ;color.c: 149:     } else {
  3793   000EA2  EFD6  F008         	goto	l3125
  3794   000EA6                     l3101:
  3795                           
  3796                           ;color.c: 150:         if (M == RR) {
  3797   000EA6  5018               	movf	getHSVval@RR^0,w,c
  3798   000EA8  1824               	xorwf	getHSVval@M^0,w,c
  3799   000EAA  E107               	bnz	u1931
  3800   000EAC  5019               	movf	(getHSVval@RR+1)^0,w,c
  3801   000EAE  1825               	xorwf	(getHSVval@M+1)^0,w,c
  3802   000EB0  A4D8               	btfss	status,2,c
  3803   000EB2  EF5D  F007         	goto	u1931
  3804   000EB6  EF5F  F007         	goto	u1930
  3805   000EBA                     u1931:
  3806   000EBA  EFA8  F007         	goto	l3109
  3807   000EBE                     u1930:
  3808   000EBE                     
  3809                           ;color.c: 151:             if (GG >= BB) {
  3810   000EBE  5020               	movf	getHSVval@BB^0,w,c
  3811   000EC0  5C1E               	subwf	getHSVval@GG^0,w,c
  3812   000EC2  5021               	movf	(getHSVval@BB+1)^0,w,c
  3813   000EC4  581F               	subwfb	(getHSVval@GG+1)^0,w,c
  3814   000EC6  A0D8               	btfss	status,0,c
  3815   000EC8  EF68  F007         	goto	u1941
  3816   000ECC  EF6A  F007         	goto	u1940
  3817   000ED0                     u1941:
  3818   000ED0  EF7C  F007         	goto	l3107
  3819   000ED4                     u1940:
  3820   000ED4                     
  3821                           ;color.c: 152:                 H = ((GG - BB)) / C;
  3822   000ED4  5020               	movf	getHSVval@BB^0,w,c
  3823   000ED6  5C1E               	subwf	getHSVval@GG^0,w,c
  3824   000ED8  6E07               	movwf	___lwdiv@dividend^0,c
  3825   000EDA  5021               	movf	(getHSVval@BB+1)^0,w,c
  3826   000EDC  581F               	subwfb	(getHSVval@GG+1)^0,w,c
  3827   000EDE  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  3828   000EE0  C026  F009         	movff	getHSVval@C,___lwdiv@divisor
  3829   000EE4  C027  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  3830   000EE8  ECFB  F00C         	call	___lwdiv	;wreg free
  3831   000EEC  C007  F022         	movff	?___lwdiv,getHSVval@H
  3832   000EF0  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  3833                           
  3834                           ;color.c: 153:             } else {
  3835   000EF4  EFA8  F007         	goto	l3109
  3836   000EF8                     l3107:
  3837                           
  3838                           ;color.c: 154:                 H = ((6 * C - (BB - GG))) / C;
  3839   000EF8  C026  F001         	movff	getHSVval@C,___wmul@multiplier
  3840   000EFC  C027  F002         	movff	getHSVval@C+1,___wmul@multiplier+1
  3841   000F00  0E00               	movlw	0
  3842   000F02  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3843   000F04  0E06               	movlw	6
  3844   000F06  6E03               	movwf	___wmul@multiplicand^0,c
  3845   000F08  EC56  F010         	call	___wmul	;wreg free
  3846   000F0C  5020               	movf	getHSVval@BB^0,w,c
  3847   000F0E  5E01               	subwf	?___wmul^0,f,c
  3848   000F10  5021               	movf	(getHSVval@BB+1)^0,w,c
  3849   000F12  5A02               	subwfb	(?___wmul+1)^0,f,c
  3850   000F14  501E               	movf	getHSVval@GG^0,w,c
  3851   000F16  2401               	addwf	?___wmul^0,w,c
  3852   000F18  6E07               	movwf	___lwdiv@dividend^0,c
  3853   000F1A  501F               	movf	(getHSVval@GG+1)^0,w,c
  3854   000F1C  2002               	addwfc	(?___wmul+1)^0,w,c
  3855   000F1E  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  3856   000F20  C026  F009         	movff	getHSVval@C,___lwdiv@divisor
  3857   000F24  C027  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  3858   000F28  ECFB  F00C         	call	___lwdiv	;wreg free
  3859   000F2C  C007  F022         	movff	?___lwdiv,getHSVval@H
  3860   000F30  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  3861                           
  3862                           ;color.c: 155:                 H *= z;
  3863   000F34  C022  F001         	movff	getHSVval@H,___wmul@multiplier
  3864   000F38  C023  F002         	movff	getHSVval@H+1,___wmul@multiplier+1
  3865   000F3C  0E00               	movlw	0
  3866   000F3E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3867   000F40  0E3C               	movlw	60
  3868   000F42  6E03               	movwf	___wmul@multiplicand^0,c
  3869   000F44  EC56  F010         	call	___wmul	;wreg free
  3870   000F48  C001  F022         	movff	?___wmul,getHSVval@H
  3871   000F4C  C002  F023         	movff	?___wmul+1,getHSVval@H+1
  3872   000F50                     l3109:
  3873                           
  3874                           ;color.c: 158:         if (M == p2->G) {
  3875   000F50  500F               	movf	getHSVval@p2^0,w,c
  3876   000F52  6ED9               	movwf	fsr2l,c
  3877   000F54  6ADA               	clrf	fsr2h,c
  3878   000F56  0E02               	movlw	2
  3879   000F58  26D9               	addwf	fsr2l,f,c
  3880   000F5A  5024               	movf	getHSVval@M^0,w,c
  3881   000F5C  18DE               	xorwf	postinc2,w,c
  3882   000F5E  E107               	bnz	u1951
  3883   000F60  5025               	movf	(getHSVval@M+1)^0,w,c
  3884   000F62  18DE               	xorwf	postinc2,w,c
  3885   000F64  A4D8               	btfss	status,2,c
  3886   000F66  EFB7  F007         	goto	u1951
  3887   000F6A  EFB9  F007         	goto	u1950
  3888   000F6E                     u1951:
  3889   000F6E  EF3C  F008         	goto	l3117
  3890   000F72                     u1950:
  3891   000F72                     
  3892                           ;color.c: 159:             if (p2->B >= p2->R) {
  3893   000F72  500F               	movf	getHSVval@p2^0,w,c
  3894   000F74  6ED9               	movwf	fsr2l,c
  3895   000F76  6ADA               	clrf	fsr2h,c
  3896   000F78  500F               	movf	getHSVval@p2^0,w,c
  3897   000F7A  6EE1               	movwf	fsr1l,c
  3898   000F7C  6AE2               	clrf	fsr1h,c
  3899   000F7E  0E04               	movlw	4
  3900   000F80  26E1               	addwf	fsr1l,f,c
  3901   000F82  50DE               	movf	postinc2,w,c
  3902   000F84  5CE6               	subwf	postinc1,w,c
  3903   000F86  50DE               	movf	postinc2,w,c
  3904   000F88  58E6               	subwfb	postinc1,w,c
  3905   000F8A  A0D8               	btfss	status,0,c
  3906   000F8C  EFCA  F007         	goto	u1961
  3907   000F90  EFCC  F007         	goto	u1960
  3908   000F94                     u1961:
  3909   000F94  EF05  F008         	goto	l3115
  3910   000F98                     u1960:
  3911   000F98                     
  3912                           ;color.c: 160:                 H = (z * (2 * C + (p2->B - p2->R))) / C;
  3913   000F98  500F               	movf	getHSVval@p2^0,w,c
  3914   000F9A  6ED9               	movwf	fsr2l,c
  3915   000F9C  6ADA               	clrf	fsr2h,c
  3916   000F9E  0E04               	movlw	4
  3917   000FA0  26D9               	addwf	fsr2l,f,c
  3918   000FA2  CFDE F010          	movff	postinc2,??_getHSVval
  3919   000FA6  CFDD F011          	movff	postdec2,??_getHSVval+1
  3920   000FAA  500F               	movf	getHSVval@p2^0,w,c
  3921   000FAC  6ED9               	movwf	fsr2l,c
  3922   000FAE  6ADA               	clrf	fsr2h,c
  3923   000FB0  CFDE F012          	movff	postinc2,??_getHSVval+2
  3924   000FB4  CFDD F013          	movff	postdec2,??_getHSVval+3
  3925   000FB8  C026  F014         	movff	getHSVval@C,??_getHSVval+4
  3926   000FBC  C027  F015         	movff	getHSVval@C+1,??_getHSVval+5
  3927   000FC0  90D8               	bcf	status,0,c
  3928   000FC2  3614               	rlcf	(??_getHSVval+4)^0,f,c
  3929   000FC4  3615               	rlcf	(??_getHSVval+5)^0,f,c
  3930   000FC6  5012               	movf	(??_getHSVval+2)^0,w,c
  3931   000FC8  5C14               	subwf	(??_getHSVval+4)^0,w,c
  3932   000FCA  6E16               	movwf	(??_getHSVval+6)^0,c
  3933   000FCC  5013               	movf	(??_getHSVval+3)^0,w,c
  3934   000FCE  5815               	subwfb	(??_getHSVval+5)^0,w,c
  3935   000FD0  6E17               	movwf	(??_getHSVval+7)^0,c
  3936   000FD2  5010               	movf	??_getHSVval^0,w,c
  3937   000FD4  2416               	addwf	(??_getHSVval+6)^0,w,c
  3938   000FD6  6E01               	movwf	___wmul@multiplier^0,c
  3939   000FD8  5011               	movf	(??_getHSVval+1)^0,w,c
  3940   000FDA  2017               	addwfc	(??_getHSVval+7)^0,w,c
  3941   000FDC  6E02               	movwf	(___wmul@multiplier+1)^0,c
  3942   000FDE  0E00               	movlw	0
  3943   000FE0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3944   000FE2  0E3C               	movlw	60
  3945   000FE4  6E03               	movwf	___wmul@multiplicand^0,c
  3946   000FE6  EC56  F010         	call	___wmul	;wreg free
  3947   000FEA  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3948   000FEE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3949   000FF2  C026  F009         	movff	getHSVval@C,___lwdiv@divisor
  3950   000FF6  C027  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  3951   000FFA  ECFB  F00C         	call	___lwdiv	;wreg free
  3952   000FFE  C007  F022         	movff	?___lwdiv,getHSVval@H
  3953   001002  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  3954                           
  3955                           ;color.c: 161:             } else {
  3956   001006  EF3C  F008         	goto	l3117
  3957   00100A                     l3115:
  3958                           
  3959                           ;color.c: 162:                 H = (z * (2 * C - (p2->R - p2->B))) / C;
  3960   00100A  500F               	movf	getHSVval@p2^0,w,c
  3961   00100C  6ED9               	movwf	fsr2l,c
  3962   00100E  6ADA               	clrf	fsr2h,c
  3963   001010  0E04               	movlw	4
  3964   001012  26D9               	addwf	fsr2l,f,c
  3965   001014  CFDE F010          	movff	postinc2,??_getHSVval
  3966   001018  CFDD F011          	movff	postdec2,??_getHSVval+1
  3967   00101C  500F               	movf	getHSVval@p2^0,w,c
  3968   00101E  6ED9               	movwf	fsr2l,c
  3969   001020  6ADA               	clrf	fsr2h,c
  3970   001022  CFDE F012          	movff	postinc2,??_getHSVval+2
  3971   001026  CFDD F013          	movff	postdec2,??_getHSVval+3
  3972   00102A  C026  F014         	movff	getHSVval@C,??_getHSVval+4
  3973   00102E  C027  F015         	movff	getHSVval@C+1,??_getHSVval+5
  3974   001032  90D8               	bcf	status,0,c
  3975   001034  3614               	rlcf	(??_getHSVval+4)^0,f,c
  3976   001036  3615               	rlcf	(??_getHSVval+5)^0,f,c
  3977   001038  5012               	movf	(??_getHSVval+2)^0,w,c
  3978   00103A  5C14               	subwf	(??_getHSVval+4)^0,w,c
  3979   00103C  6E16               	movwf	(??_getHSVval+6)^0,c
  3980   00103E  5013               	movf	(??_getHSVval+3)^0,w,c
  3981   001040  5815               	subwfb	(??_getHSVval+5)^0,w,c
  3982   001042  6E17               	movwf	(??_getHSVval+7)^0,c
  3983   001044  5010               	movf	??_getHSVval^0,w,c
  3984   001046  2416               	addwf	(??_getHSVval+6)^0,w,c
  3985   001048  6E01               	movwf	___wmul@multiplier^0,c
  3986   00104A  5011               	movf	(??_getHSVval+1)^0,w,c
  3987   00104C  2017               	addwfc	(??_getHSVval+7)^0,w,c
  3988   00104E  6E02               	movwf	(___wmul@multiplier+1)^0,c
  3989   001050  0E00               	movlw	0
  3990   001052  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3991   001054  0E3C               	movlw	60
  3992   001056  6E03               	movwf	___wmul@multiplicand^0,c
  3993   001058  EC56  F010         	call	___wmul	;wreg free
  3994   00105C  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3995   001060  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3996   001064  C026  F009         	movff	getHSVval@C,___lwdiv@divisor
  3997   001068  C027  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  3998   00106C  ECFB  F00C         	call	___lwdiv	;wreg free
  3999   001070  C007  F022         	movff	?___lwdiv,getHSVval@H
  4000   001074  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  4001   001078                     l3117:
  4002                           
  4003                           ;color.c: 165:         if (M == p2->B) {
  4004   001078  500F               	movf	getHSVval@p2^0,w,c
  4005   00107A  6ED9               	movwf	fsr2l,c
  4006   00107C  6ADA               	clrf	fsr2h,c
  4007   00107E  0E04               	movlw	4
  4008   001080  26D9               	addwf	fsr2l,f,c
  4009   001082  5024               	movf	getHSVval@M^0,w,c
  4010   001084  18DE               	xorwf	postinc2,w,c
  4011   001086  E107               	bnz	u1971
  4012   001088  5025               	movf	(getHSVval@M+1)^0,w,c
  4013   00108A  18DE               	xorwf	postinc2,w,c
  4014   00108C  A4D8               	btfss	status,2,c
  4015   00108E  EF4B  F008         	goto	u1971
  4016   001092  EF4D  F008         	goto	u1970
  4017   001096                     u1971:
  4018   001096  EFD6  F008         	goto	l3125
  4019   00109A                     u1970:
  4020   00109A                     
  4021                           ;color.c: 166:             if (p2->R >= p2->G) {
  4022   00109A  500F               	movf	getHSVval@p2^0,w,c
  4023   00109C  6ED9               	movwf	fsr2l,c
  4024   00109E  6ADA               	clrf	fsr2h,c
  4025   0010A0  0E02               	movlw	2
  4026   0010A2  26D9               	addwf	fsr2l,f,c
  4027   0010A4  500F               	movf	getHSVval@p2^0,w,c
  4028   0010A6  6EE1               	movwf	fsr1l,c
  4029   0010A8  6AE2               	clrf	fsr1h,c
  4030   0010AA  50DE               	movf	postinc2,w,c
  4031   0010AC  5CE6               	subwf	postinc1,w,c
  4032   0010AE  50DE               	movf	postinc2,w,c
  4033   0010B0  58E6               	subwfb	postinc1,w,c
  4034   0010B2  A0D8               	btfss	status,0,c
  4035   0010B4  EF5E  F008         	goto	u1981
  4036   0010B8  EF60  F008         	goto	u1980
  4037   0010BC                     u1981:
  4038   0010BC  EF9C  F008         	goto	l3123
  4039   0010C0                     u1980:
  4040   0010C0                     
  4041                           ;color.c: 167:                 H = (z * (4 * C + (p2->R - p2->G))) / C;
  4042   0010C0  500F               	movf	getHSVval@p2^0,w,c
  4043   0010C2  6ED9               	movwf	fsr2l,c
  4044   0010C4  6ADA               	clrf	fsr2h,c
  4045   0010C6  CFDE F010          	movff	postinc2,??_getHSVval
  4046   0010CA  CFDD F011          	movff	postdec2,??_getHSVval+1
  4047   0010CE  500F               	movf	getHSVval@p2^0,w,c
  4048   0010D0  6ED9               	movwf	fsr2l,c
  4049   0010D2  6ADA               	clrf	fsr2h,c
  4050   0010D4  0E02               	movlw	2
  4051   0010D6  26D9               	addwf	fsr2l,f,c
  4052   0010D8  CFDE F012          	movff	postinc2,??_getHSVval+2
  4053   0010DC  CFDD F013          	movff	postdec2,??_getHSVval+3
  4054   0010E0  C026  F014         	movff	getHSVval@C,??_getHSVval+4
  4055   0010E4  C027  F015         	movff	getHSVval@C+1,??_getHSVval+5
  4056   0010E8  90D8               	bcf	status,0,c
  4057   0010EA  3614               	rlcf	(??_getHSVval+4)^0,f,c
  4058   0010EC  3615               	rlcf	(??_getHSVval+5)^0,f,c
  4059   0010EE  90D8               	bcf	status,0,c
  4060   0010F0  3614               	rlcf	(??_getHSVval+4)^0,f,c
  4061   0010F2  3615               	rlcf	(??_getHSVval+5)^0,f,c
  4062   0010F4  5012               	movf	(??_getHSVval+2)^0,w,c
  4063   0010F6  5C14               	subwf	(??_getHSVval+4)^0,w,c
  4064   0010F8  6E16               	movwf	(??_getHSVval+6)^0,c
  4065   0010FA  5013               	movf	(??_getHSVval+3)^0,w,c
  4066   0010FC  5815               	subwfb	(??_getHSVval+5)^0,w,c
  4067   0010FE  6E17               	movwf	(??_getHSVval+7)^0,c
  4068   001100  5010               	movf	??_getHSVval^0,w,c
  4069   001102  2416               	addwf	(??_getHSVval+6)^0,w,c
  4070   001104  6E01               	movwf	___wmul@multiplier^0,c
  4071   001106  5011               	movf	(??_getHSVval+1)^0,w,c
  4072   001108  2017               	addwfc	(??_getHSVval+7)^0,w,c
  4073   00110A  6E02               	movwf	(___wmul@multiplier+1)^0,c
  4074   00110C  0E00               	movlw	0
  4075   00110E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4076   001110  0E3C               	movlw	60
  4077   001112  6E03               	movwf	___wmul@multiplicand^0,c
  4078   001114  EC56  F010         	call	___wmul	;wreg free
  4079   001118  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4080   00111C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4081   001120  C026  F009         	movff	getHSVval@C,___lwdiv@divisor
  4082   001124  C027  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  4083   001128  ECFB  F00C         	call	___lwdiv	;wreg free
  4084   00112C  C007  F022         	movff	?___lwdiv,getHSVval@H
  4085   001130  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  4086                           
  4087                           ;color.c: 168:             } else {
  4088   001134  EFD6  F008         	goto	l3125
  4089   001138                     l3123:
  4090                           
  4091                           ;color.c: 169:                 H = (z * (4 * C - (p2->G - p2->R))) / C;
  4092   001138  500F               	movf	getHSVval@p2^0,w,c
  4093   00113A  6ED9               	movwf	fsr2l,c
  4094   00113C  6ADA               	clrf	fsr2h,c
  4095   00113E  CFDE F010          	movff	postinc2,??_getHSVval
  4096   001142  CFDD F011          	movff	postdec2,??_getHSVval+1
  4097   001146  500F               	movf	getHSVval@p2^0,w,c
  4098   001148  6ED9               	movwf	fsr2l,c
  4099   00114A  6ADA               	clrf	fsr2h,c
  4100   00114C  0E02               	movlw	2
  4101   00114E  26D9               	addwf	fsr2l,f,c
  4102   001150  CFDE F012          	movff	postinc2,??_getHSVval+2
  4103   001154  CFDD F013          	movff	postdec2,??_getHSVval+3
  4104   001158  C026  F014         	movff	getHSVval@C,??_getHSVval+4
  4105   00115C  C027  F015         	movff	getHSVval@C+1,??_getHSVval+5
  4106   001160  90D8               	bcf	status,0,c
  4107   001162  3614               	rlcf	(??_getHSVval+4)^0,f,c
  4108   001164  3615               	rlcf	(??_getHSVval+5)^0,f,c
  4109   001166  90D8               	bcf	status,0,c
  4110   001168  3614               	rlcf	(??_getHSVval+4)^0,f,c
  4111   00116A  3615               	rlcf	(??_getHSVval+5)^0,f,c
  4112   00116C  5012               	movf	(??_getHSVval+2)^0,w,c
  4113   00116E  5C14               	subwf	(??_getHSVval+4)^0,w,c
  4114   001170  6E16               	movwf	(??_getHSVval+6)^0,c
  4115   001172  5013               	movf	(??_getHSVval+3)^0,w,c
  4116   001174  5815               	subwfb	(??_getHSVval+5)^0,w,c
  4117   001176  6E17               	movwf	(??_getHSVval+7)^0,c
  4118   001178  5010               	movf	??_getHSVval^0,w,c
  4119   00117A  2416               	addwf	(??_getHSVval+6)^0,w,c
  4120   00117C  6E01               	movwf	___wmul@multiplier^0,c
  4121   00117E  5011               	movf	(??_getHSVval+1)^0,w,c
  4122   001180  2017               	addwfc	(??_getHSVval+7)^0,w,c
  4123   001182  6E02               	movwf	(___wmul@multiplier+1)^0,c
  4124   001184  0E00               	movlw	0
  4125   001186  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4126   001188  0E3C               	movlw	60
  4127   00118A  6E03               	movwf	___wmul@multiplicand^0,c
  4128   00118C  EC56  F010         	call	___wmul	;wreg free
  4129   001190  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4130   001194  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4131   001198  C026  F009         	movff	getHSVval@C,___lwdiv@divisor
  4132   00119C  C027  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  4133   0011A0  ECFB  F00C         	call	___lwdiv	;wreg free
  4134   0011A4  C007  F022         	movff	?___lwdiv,getHSVval@H
  4135   0011A8  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  4136   0011AC                     l3125:
  4137                           
  4138                           ;color.c: 174:     if (M == 0) {
  4139   0011AC  5024               	movf	getHSVval@M^0,w,c
  4140   0011AE  1025               	iorwf	(getHSVval@M+1)^0,w,c
  4141   0011B0  A4D8               	btfss	status,2,c
  4142   0011B2  EFDD  F008         	goto	u1991
  4143   0011B6  EFDF  F008         	goto	u1990
  4144   0011BA                     u1991:
  4145   0011BA  EFE5  F008         	goto	l3129
  4146   0011BE                     u1990:
  4147   0011BE                     
  4148                           ;color.c: 175:         S = 0;
  4149   0011BE  0E00               	movlw	0
  4150   0011C0  6E1D               	movwf	(getHSVval@S+1)^0,c
  4151   0011C2  0E00               	movlw	0
  4152   0011C4  6E1C               	movwf	getHSVval@S^0,c
  4153                           
  4154                           ;color.c: 176:     } else {
  4155   0011C6  EFFD  F008         	goto	l3131
  4156   0011CA                     l3129:
  4157                           
  4158                           ;color.c: 177:         S = z * C / M;
  4159   0011CA  0E00               	movlw	0
  4160   0011CC  6E02               	movwf	(___wmul@multiplier+1)^0,c
  4161   0011CE  0E3C               	movlw	60
  4162   0011D0  6E01               	movwf	___wmul@multiplier^0,c
  4163   0011D2  C026  F003         	movff	getHSVval@C,___wmul@multiplicand
  4164   0011D6  C027  F004         	movff	getHSVval@C+1,___wmul@multiplicand+1
  4165   0011DA  EC56  F010         	call	___wmul	;wreg free
  4166   0011DE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4167   0011E2  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4168   0011E6  C024  F009         	movff	getHSVval@M,___lwdiv@divisor
  4169   0011EA  C025  F00A         	movff	getHSVval@M+1,___lwdiv@divisor+1
  4170   0011EE  ECFB  F00C         	call	___lwdiv	;wreg free
  4171   0011F2  C007  F01C         	movff	?___lwdiv,getHSVval@S
  4172   0011F6  C008  F01D         	movff	?___lwdiv+1,getHSVval@S+1
  4173   0011FA                     l3131:
  4174                           
  4175                           ;color.c: 180:     p1->H = H;
  4176   0011FA  500E               	movf	getHSVval@p1^0,w,c
  4177   0011FC  6ED9               	movwf	fsr2l,c
  4178   0011FE  6ADA               	clrf	fsr2h,c
  4179   001200  C022  FFDE         	movff	getHSVval@H,postinc2
  4180   001204  C023  FFDD         	movff	getHSVval@H+1,postdec2
  4181   001208                     
  4182                           ;color.c: 181:     p1->S = S;
  4183   001208  500E               	movf	getHSVval@p1^0,w,c
  4184   00120A  6ED9               	movwf	fsr2l,c
  4185   00120C  6ADA               	clrf	fsr2h,c
  4186   00120E  0E02               	movlw	2
  4187   001210  26D9               	addwf	fsr2l,f,c
  4188   001212  C01C  FFDE         	movff	getHSVval@S,postinc2
  4189   001216  C01D  FFDD         	movff	getHSVval@S+1,postdec2
  4190   00121A                     
  4191                           ;color.c: 182:     p1->V = M;
  4192   00121A  500E               	movf	getHSVval@p1^0,w,c
  4193   00121C  6ED9               	movwf	fsr2l,c
  4194   00121E  6ADA               	clrf	fsr2h,c
  4195   001220  0E04               	movlw	4
  4196   001222  26D9               	addwf	fsr2l,f,c
  4197   001224  C024  FFDE         	movff	getHSVval@M,postinc2
  4198   001228  C025  FFDD         	movff	getHSVval@M+1,postdec2
  4199   00122C  0012               	return		;funcret
  4200   00122E                     __end_of_getHSVval:
  4201                           	callstack 0
  4202                           
  4203 ;; *************** function _minRGB *****************
  4204 ;; Defined at:
  4205 ;;		line 123 in file "color.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  p               1    6[COMRAM] PTR struct RGBC_val
  4208 ;;		 -> main@measured_colour(8), 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;		None
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  2    6[COMRAM] unsigned int 
  4213 ;; Registers used:
  4214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4220 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4223 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4224 ;;Total ram usage:        4 bytes
  4225 ;; Hardware stack levels used: 1
  4226 ;; Hardware stack levels required when called: 2
  4227 ;; This function calls:
  4228 ;;		_min
  4229 ;; This function is called by:
  4230 ;;		_getHSVval
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	text25
  4235   001CA2                     __ptext25:
  4236                           	callstack 0
  4237   001CA2                     _minRGB:
  4238                           	callstack 27
  4239   001CA2                     
  4240                           ;color.c: 123: unsigned int minRGB(struct RGBC_val *p);color.c: 124: {;color.c: 125:    
      +                           return(min(min(p->R,p->G),p->B));
  4241   001CA2  5007               	movf	minRGB@p^0,w,c
  4242   001CA4  6ED9               	movwf	fsr2l,c
  4243   001CA6  6ADA               	clrf	fsr2h,c
  4244   001CA8  CFDE F001          	movff	postinc2,min@a
  4245   001CAC  CFDD F002          	movff	postdec2,min@a+1
  4246   001CB0  5007               	movf	minRGB@p^0,w,c
  4247   001CB2  6ED9               	movwf	fsr2l,c
  4248   001CB4  6ADA               	clrf	fsr2h,c
  4249   001CB6  0E02               	movlw	2
  4250   001CB8  26D9               	addwf	fsr2l,f,c
  4251   001CBA  CFDE F003          	movff	postinc2,min@b
  4252   001CBE  CFDD F004          	movff	postdec2,min@b+1
  4253   001CC2  ECE6  F00F         	call	_min	;wreg free
  4254   001CC6  C001  F009         	movff	?_min,_minRGB$3150
  4255   001CCA  C002  F00A         	movff	?_min+1,_minRGB$3150+1
  4256                           
  4257                           ;color.c: 123: unsigned int minRGB(struct RGBC_val *p);color.c: 124: {;color.c: 125:    
      +                           return(min(min(p->R,p->G),p->B));
  4258   001CCE  C009  F001         	movff	_minRGB$3150,min@a
  4259   001CD2  C00A  F002         	movff	_minRGB$3150+1,min@a+1
  4260   001CD6  5007               	movf	minRGB@p^0,w,c
  4261   001CD8  6ED9               	movwf	fsr2l,c
  4262   001CDA  6ADA               	clrf	fsr2h,c
  4263   001CDC  0E04               	movlw	4
  4264   001CDE  26D9               	addwf	fsr2l,f,c
  4265   001CE0  CFDE F003          	movff	postinc2,min@b
  4266   001CE4  CFDD F004          	movff	postdec2,min@b+1
  4267   001CE8  ECE6  F00F         	call	_min	;wreg free
  4268   001CEC  C001  F007         	movff	?_min,?_minRGB
  4269   001CF0  C002  F008         	movff	?_min+1,?_minRGB+1
  4270   001CF4  0012               	return		;funcret
  4271   001CF6                     __end_of_minRGB:
  4272                           	callstack 0
  4273                           
  4274 ;; *************** function _min *****************
  4275 ;; Defined at:
  4276 ;;		line 111 in file "color.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  a               2    0[COMRAM] unsigned int 
  4279 ;;  b               2    2[COMRAM] unsigned int 
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  min_val         2    4[COMRAM] unsigned int 
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  2    0[COMRAM] unsigned int 
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4291 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4294 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4295 ;;Total ram usage:        6 bytes
  4296 ;; Hardware stack levels used: 1
  4297 ;; Hardware stack levels required when called: 1
  4298 ;; This function calls:
  4299 ;;		Nothing
  4300 ;; This function is called by:
  4301 ;;		_minRGB
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text26
  4306   001FCC                     __ptext26:
  4307                           	callstack 0
  4308   001FCC                     _min:
  4309                           	callstack 27
  4310   001FCC                     
  4311                           ;color.c: 111: unsigned int min(unsigned int a, unsigned int b);color.c: 112: {;color.c:
      +                           113:     unsigned int min_val = b;
  4312   001FCC  C003  F005         	movff	min@b,min@min_val
  4313   001FD0  C004  F006         	movff	min@b+1,min@min_val+1
  4314   001FD4                     
  4315                           ;color.c: 114:     if (a < b) {min_val = a;}
  4316   001FD4  5003               	movf	min@b^0,w,c
  4317   001FD6  5C01               	subwf	min@a^0,w,c
  4318   001FD8  5004               	movf	(min@b+1)^0,w,c
  4319   001FDA  5802               	subwfb	(min@a+1)^0,w,c
  4320   001FDC  B0D8               	btfsc	status,0,c
  4321   001FDE  EFF3  F00F         	goto	u1711
  4322   001FE2  EFF5  F00F         	goto	u1710
  4323   001FE6                     u1711:
  4324   001FE6  EFF9  F00F         	goto	l97
  4325   001FEA                     u1710:
  4326   001FEA  C001  F005         	movff	min@a,min@min_val
  4327   001FEE  C002  F006         	movff	min@a+1,min@min_val+1
  4328   001FF2                     l97:
  4329                           
  4330                           ;color.c: 115:     return min_val;
  4331   001FF2  C005  F001         	movff	min@min_val,?_min
  4332   001FF6  C006  F002         	movff	min@min_val+1,?_min+1
  4333   001FFA  0012               	return		;funcret
  4334   001FFC                     __end_of_min:
  4335                           	callstack 0
  4336                           
  4337 ;; *************** function _maxRGB *****************
  4338 ;; Defined at:
  4339 ;;		line 118 in file "color.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  p               1    6[COMRAM] PTR struct RGBC_val
  4342 ;;		 -> main@measured_colour(8), 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  2    6[COMRAM] unsigned int 
  4347 ;; Registers used:
  4348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4357 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4358 ;;Total ram usage:        4 bytes
  4359 ;; Hardware stack levels used: 1
  4360 ;; Hardware stack levels required when called: 2
  4361 ;; This function calls:
  4362 ;;		_max
  4363 ;; This function is called by:
  4364 ;;		_getHSVval
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text27
  4369   001CF6                     __ptext27:
  4370                           	callstack 0
  4371   001CF6                     _maxRGB:
  4372                           	callstack 27
  4373   001CF6                     
  4374                           ;color.c: 118: unsigned int maxRGB(struct RGBC_val *p);color.c: 119: {;color.c: 120:    
      +                           return(max(max(p->R,p->G),p->B));
  4375   001CF6  5007               	movf	maxRGB@p^0,w,c
  4376   001CF8  6ED9               	movwf	fsr2l,c
  4377   001CFA  6ADA               	clrf	fsr2h,c
  4378   001CFC  CFDE F001          	movff	postinc2,max@a
  4379   001D00  CFDD F002          	movff	postdec2,max@a+1
  4380   001D04  5007               	movf	maxRGB@p^0,w,c
  4381   001D06  6ED9               	movwf	fsr2l,c
  4382   001D08  6ADA               	clrf	fsr2h,c
  4383   001D0A  0E02               	movlw	2
  4384   001D0C  26D9               	addwf	fsr2l,f,c
  4385   001D0E  CFDE F003          	movff	postinc2,max@b
  4386   001D12  CFDD F004          	movff	postdec2,max@b+1
  4387   001D16  ECFE  F00F         	call	_max	;wreg free
  4388   001D1A  C001  F009         	movff	?_max,_maxRGB$3149
  4389   001D1E  C002  F00A         	movff	?_max+1,_maxRGB$3149+1
  4390                           
  4391                           ;color.c: 118: unsigned int maxRGB(struct RGBC_val *p);color.c: 119: {;color.c: 120:    
      +                           return(max(max(p->R,p->G),p->B));
  4392   001D22  C009  F001         	movff	_maxRGB$3149,max@a
  4393   001D26  C00A  F002         	movff	_maxRGB$3149+1,max@a+1
  4394   001D2A  5007               	movf	maxRGB@p^0,w,c
  4395   001D2C  6ED9               	movwf	fsr2l,c
  4396   001D2E  6ADA               	clrf	fsr2h,c
  4397   001D30  0E04               	movlw	4
  4398   001D32  26D9               	addwf	fsr2l,f,c
  4399   001D34  CFDE F003          	movff	postinc2,max@b
  4400   001D38  CFDD F004          	movff	postdec2,max@b+1
  4401   001D3C  ECFE  F00F         	call	_max	;wreg free
  4402   001D40  C001  F007         	movff	?_max,?_maxRGB
  4403   001D44  C002  F008         	movff	?_max+1,?_maxRGB+1
  4404   001D48  0012               	return		;funcret
  4405   001D4A                     __end_of_maxRGB:
  4406                           	callstack 0
  4407                           
  4408 ;; *************** function _max *****************
  4409 ;; Defined at:
  4410 ;;		line 104 in file "color.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  a               2    0[COMRAM] unsigned int 
  4413 ;;  b               2    2[COMRAM] unsigned int 
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;  max_val         2    4[COMRAM] unsigned int 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  2    0[COMRAM] unsigned int 
  4418 ;; Registers used:
  4419 ;;		wreg, status,2, status,0
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4426 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4428 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4429 ;;Total ram usage:        6 bytes
  4430 ;; Hardware stack levels used: 1
  4431 ;; Hardware stack levels required when called: 1
  4432 ;; This function calls:
  4433 ;;		Nothing
  4434 ;; This function is called by:
  4435 ;;		_maxRGB
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text28
  4440   001FFC                     __ptext28:
  4441                           	callstack 0
  4442   001FFC                     _max:
  4443                           	callstack 27
  4444   001FFC                     
  4445                           ;color.c: 104: unsigned int max(unsigned int a, unsigned int b);color.c: 105: {;color.c:
      +                           106:     unsigned int max_val = b;
  4446   001FFC  C003  F005         	movff	max@b,max@max_val
  4447   002000  C004  F006         	movff	max@b+1,max@max_val+1
  4448   002004                     
  4449                           ;color.c: 107:     if (a > b) {max_val = a;}
  4450   002004  5001               	movf	max@a^0,w,c
  4451   002006  5C03               	subwf	max@b^0,w,c
  4452   002008  5002               	movf	(max@a+1)^0,w,c
  4453   00200A  5804               	subwfb	(max@b+1)^0,w,c
  4454   00200C  B0D8               	btfsc	status,0,c
  4455   00200E  EF0B  F010         	goto	u1701
  4456   002012  EF0D  F010         	goto	u1700
  4457   002016                     u1701:
  4458   002016  EF11  F010         	goto	l93
  4459   00201A                     u1700:
  4460   00201A  C001  F005         	movff	max@a,max@max_val
  4461   00201E  C002  F006         	movff	max@a+1,max@max_val+1
  4462   002022                     l93:
  4463                           
  4464                           ;color.c: 108:     return max_val;
  4465   002022  C005  F001         	movff	max@max_val,?_max
  4466   002026  C006  F002         	movff	max@max_val+1,?_max+1
  4467   00202A  0012               	return		;funcret
  4468   00202C                     __end_of_max:
  4469                           	callstack 0
  4470                           
  4471 ;; *************** function ___wmul *****************
  4472 ;; Defined at:
  4473 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;  multiplier      2    0[COMRAM] unsigned int 
  4476 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  product         2    4[COMRAM] unsigned int 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  2    0[COMRAM] unsigned int 
  4481 ;; Registers used:
  4482 ;;		wreg, status,2, status,0, prodl, prodh
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4491 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4492 ;;Total ram usage:        6 bytes
  4493 ;; Hardware stack levels used: 1
  4494 ;; Hardware stack levels required when called: 1
  4495 ;; This function calls:
  4496 ;;		Nothing
  4497 ;; This function is called by:
  4498 ;;		_getHSVval
  4499 ;;		_setMotorPWM
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           	psect	text29
  4504   0020AC                     __ptext29:
  4505                           	callstack 0
  4506   0020AC                     ___wmul:
  4507                           	callstack 28
  4508   0020AC  5001               	movf	___wmul@multiplier^0,w,c
  4509   0020AE  0203               	mulwf	___wmul@multiplicand^0,c
  4510   0020B0  CFF3 F005          	movff	prodl,___wmul@product
  4511   0020B4  CFF4 F006          	movff	prodh,___wmul@product+1
  4512   0020B8  5001               	movf	___wmul@multiplier^0,w,c
  4513   0020BA  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4514   0020BC  50F3               	movf	243,w,c
  4515   0020BE  2606               	addwf	(___wmul@product+1)^0,f,c
  4516   0020C0  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4517   0020C2  0203               	mulwf	___wmul@multiplicand^0,c
  4518   0020C4  50F3               	movf	243,w,c
  4519   0020C6  2606               	addwf	(___wmul@product+1)^0,f,c
  4520   0020C8  C005  F001         	movff	___wmul@product,?___wmul
  4521   0020CC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4522   0020D0  0012               	return		;funcret
  4523   0020D2                     __end_of___wmul:
  4524                           	callstack 0
  4525                           
  4526 ;; *************** function ___lwdiv *****************
  4527 ;; Defined at:
  4528 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  dividend        2    6[COMRAM] unsigned int 
  4531 ;;  divisor         2    8[COMRAM] unsigned int 
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  quotient        2   10[COMRAM] unsigned int 
  4534 ;;  counter         1   12[COMRAM] unsigned char 
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  2    6[COMRAM] unsigned int 
  4537 ;; Registers used:
  4538 ;;		wreg, status,2, status,0
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4545 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4547 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4548 ;;Total ram usage:        7 bytes
  4549 ;; Hardware stack levels used: 1
  4550 ;; Hardware stack levels required when called: 1
  4551 ;; This function calls:
  4552 ;;		Nothing
  4553 ;; This function is called by:
  4554 ;;		_getHSVval
  4555 ;;		_vfpfcnvrt
  4556 ;;		_setMotorPWM
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text30
  4561   0019F6                     __ptext30:
  4562                           	callstack 0
  4563   0019F6                     ___lwdiv:
  4564                           	callstack 25
  4565   0019F6  0E00               	movlw	0
  4566   0019F8  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  4567   0019FA  0E00               	movlw	0
  4568   0019FC  6E0B               	movwf	___lwdiv@quotient^0,c
  4569   0019FE  5009               	movf	___lwdiv@divisor^0,w,c
  4570   001A00  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4571   001A02  B4D8               	btfsc	status,2,c
  4572   001A04  EF06  F00D         	goto	u1251
  4573   001A08  EF08  F00D         	goto	u1250
  4574   001A0C                     u1251:
  4575   001A0C  EF30  F00D         	goto	l1189
  4576   001A10                     u1250:
  4577   001A10  0E01               	movlw	1
  4578   001A12  6E0D               	movwf	___lwdiv@counter^0,c
  4579   001A14  EF10  F00D         	goto	l2551
  4580   001A18                     l2549:
  4581   001A18  90D8               	bcf	status,0,c
  4582   001A1A  3609               	rlcf	___lwdiv@divisor^0,f,c
  4583   001A1C  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4584   001A1E  2A0D               	incf	___lwdiv@counter^0,f,c
  4585   001A20                     l2551:
  4586   001A20  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  4587   001A22  EF15  F00D         	goto	u1261
  4588   001A26  EF17  F00D         	goto	u1260
  4589   001A2A                     u1261:
  4590   001A2A  EF0C  F00D         	goto	l2549
  4591   001A2E                     u1260:
  4592   001A2E                     l2553:
  4593   001A2E  90D8               	bcf	status,0,c
  4594   001A30  360B               	rlcf	___lwdiv@quotient^0,f,c
  4595   001A32  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4596   001A34  5009               	movf	___lwdiv@divisor^0,w,c
  4597   001A36  5C07               	subwf	___lwdiv@dividend^0,w,c
  4598   001A38  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4599   001A3A  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4600   001A3C  A0D8               	btfss	status,0,c
  4601   001A3E  EF23  F00D         	goto	u1271
  4602   001A42  EF25  F00D         	goto	u1270
  4603   001A46                     u1271:
  4604   001A46  EF2A  F00D         	goto	l2561
  4605   001A4A                     u1270:
  4606   001A4A  5009               	movf	___lwdiv@divisor^0,w,c
  4607   001A4C  5E07               	subwf	___lwdiv@dividend^0,f,c
  4608   001A4E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4609   001A50  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4610   001A52  800B               	bsf	___lwdiv@quotient^0,0,c
  4611   001A54                     l2561:
  4612   001A54  90D8               	bcf	status,0,c
  4613   001A56  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4614   001A58  3209               	rrcf	___lwdiv@divisor^0,f,c
  4615   001A5A  2E0D               	decfsz	___lwdiv@counter^0,f,c
  4616   001A5C  EF17  F00D         	goto	l2553
  4617   001A60                     l1189:
  4618   001A60  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  4619   001A64  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4620   001A68  0012               	return		;funcret
  4621   001A6A                     __end_of___lwdiv:
  4622                           	callstack 0
  4623                           
  4624 ;; *************** function _color_click_init *****************
  4625 ;; Defined at:
  4626 ;;		line 4 in file "color.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4643 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4644 ;;Total ram usage:        1 bytes
  4645 ;; Hardware stack levels used: 1
  4646 ;; Hardware stack levels required when called: 4
  4647 ;; This function calls:
  4648 ;;		_I2C_2_Master_Init
  4649 ;;		_color_writetoaddr
  4650 ;; This function is called by:
  4651 ;;		_main
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text31
  4656   001F98                     __ptext31:
  4657                           	callstack 0
  4658   001F98                     _color_click_init:
  4659                           	callstack 26
  4660   001F98                     
  4661                           ;color.c: 7:     I2C_2_Master_Init();
  4662   001F98  EC2D  F010         	call	_I2C_2_Master_Init	;wreg free
  4663   001F9C                     
  4664                           ;color.c: 10:   color_writetoaddr(0x00, 0x01);
  4665   001F9C  0E01               	movlw	1
  4666   001F9E  6E03               	movwf	color_writetoaddr@value^0,c
  4667   001FA0  0E00               	movlw	0
  4668   001FA2  EC7B  F010         	call	_color_writetoaddr
  4669   001FA6                     
  4670                           ;color.c: 11:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4671   001FA6  0E3F               	movlw	63
  4672   001FA8  6E05               	movwf	??_color_click_init^0,c
  4673   001FAA  0E55               	movlw	85
  4674   001FAC                     u2517:
  4675   001FAC  2EE8               	decfsz	wreg,f,c
  4676   001FAE  D7FE               	bra	u2517
  4677   001FB0  2E05               	decfsz	??_color_click_init^0,f,c
  4678   001FB2  D7FC               	bra	u2517
  4679   001FB4  0000               	nop	
  4680   001FB6                     
  4681                           ;color.c: 14:  color_writetoaddr(0x00, 0x03);
  4682   001FB6  0E03               	movlw	3
  4683   001FB8  6E03               	movwf	color_writetoaddr@value^0,c
  4684   001FBA  0E00               	movlw	0
  4685   001FBC  EC7B  F010         	call	_color_writetoaddr
  4686   001FC0                     
  4687                           ;color.c: 17:  color_writetoaddr(0x01, 0xD5);
  4688   001FC0  0ED5               	movlw	213
  4689   001FC2  6E03               	movwf	color_writetoaddr@value^0,c
  4690   001FC4  0E01               	movlw	1
  4691   001FC6  EC7B  F010         	call	_color_writetoaddr
  4692   001FCA  0012               	return		;funcret
  4693   001FCC                     __end_of_color_click_init:
  4694                           	callstack 0
  4695                           
  4696 ;; *************** function _color_writetoaddr *****************
  4697 ;; Defined at:
  4698 ;;		line 20 in file "color.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  address         1    wreg     unsigned char 
  4701 ;;  value           1    2[COMRAM] unsigned char 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;  address         1    3[COMRAM] unsigned char 
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg, status,2, status,0, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4713 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4716 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;Total ram usage:        2 bytes
  4718 ;; Hardware stack levels used: 1
  4719 ;; Hardware stack levels required when called: 3
  4720 ;; This function calls:
  4721 ;;		_I2C_2_Master_Start
  4722 ;;		_I2C_2_Master_Stop
  4723 ;;		_I2C_2_Master_Write
  4724 ;; This function is called by:
  4725 ;;		_color_click_init
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           	psect	text32
  4730   0020F6                     __ptext32:
  4731                           	callstack 0
  4732   0020F6                     _color_writetoaddr:
  4733                           	callstack 26
  4734                           
  4735                           ;incstack = 0
  4736                           ;color_writetoaddr@address stored from wreg
  4737   0020F6  6E04               	movwf	color_writetoaddr@address^0,c
  4738   0020F8                     
  4739                           ;color.c: 21:     I2C_2_Master_Start();
  4740   0020F8  ECCD  F010         	call	_I2C_2_Master_Start	;wreg free
  4741                           
  4742                           ;color.c: 22:     I2C_2_Master_Write(0x52 | 0x00);
  4743   0020FC  0E52               	movlw	82
  4744   0020FE  ECB1  F010         	call	_I2C_2_Master_Write
  4745                           
  4746                           ;color.c: 23:     I2C_2_Master_Write(0x80 | address);
  4747   002102  5004               	movf	color_writetoaddr@address^0,w,c
  4748   002104  0980               	iorlw	128
  4749   002106  ECB1  F010         	call	_I2C_2_Master_Write
  4750                           
  4751                           ;color.c: 24:     I2C_2_Master_Write(value);
  4752   00210A  5003               	movf	color_writetoaddr@value^0,w,c
  4753   00210C  ECB1  F010         	call	_I2C_2_Master_Write
  4754                           
  4755                           ;color.c: 25:     I2C_2_Master_Stop();
  4756   002110  ECC8  F010         	call	_I2C_2_Master_Stop	;wreg free
  4757   002114  0012               	return		;funcret
  4758   002116                     __end_of_color_writetoaddr:
  4759                           	callstack 0
  4760                           
  4761 ;; *************** function _I2C_2_Master_Write *****************
  4762 ;; Defined at:
  4763 ;;		line 45 in file "i2c.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  data_byte       1    wreg     unsigned char 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  data_byte       1    1[COMRAM] unsigned char 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4778 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4780 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4781 ;;Total ram usage:        1 bytes
  4782 ;; Hardware stack levels used: 1
  4783 ;; Hardware stack levels required when called: 2
  4784 ;; This function calls:
  4785 ;;		_I2C_2_Master_Idle
  4786 ;; This function is called by:
  4787 ;;		_color_writetoaddr
  4788 ;;		_color_read_Red
  4789 ;;		_color_read_Blue
  4790 ;;		_color_read_Green
  4791 ;;		_color_read_Clear
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text33
  4796   002162                     __ptext33:
  4797                           	callstack 0
  4798   002162                     _I2C_2_Master_Write:
  4799                           	callstack 26
  4800                           
  4801                           ;incstack = 0
  4802                           ;I2C_2_Master_Write@data_byte stored from wreg
  4803   002162  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  4804   002164                     
  4805                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4806   002164  EC42  F010         	call	_I2C_2_Master_Idle	;wreg free
  4807   002168                     
  4808                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4809   002168  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4810   00216C  0012               	return		;funcret
  4811   00216E                     __end_of_I2C_2_Master_Write:
  4812                           	callstack 0
  4813                           
  4814 ;; *************** function _I2C_2_Master_Stop *****************
  4815 ;; Defined at:
  4816 ;;		line 39 in file "i2c.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;		None
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      void 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4834 ;;Total ram usage:        0 bytes
  4835 ;; Hardware stack levels used: 1
  4836 ;; Hardware stack levels required when called: 2
  4837 ;; This function calls:
  4838 ;;		_I2C_2_Master_Idle
  4839 ;; This function is called by:
  4840 ;;		_color_writetoaddr
  4841 ;;		_color_read_Red
  4842 ;;		_color_read_Blue
  4843 ;;		_color_read_Green
  4844 ;;		_color_read_Clear
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text34
  4849   002190                     __ptext34:
  4850                           	callstack 0
  4851   002190                     _I2C_2_Master_Stop:
  4852                           	callstack 26
  4853   002190                     
  4854                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4855   002190  EC42  F010         	call	_I2C_2_Master_Idle	;wreg free
  4856   002194                     
  4857                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4858   002194  010E               	movlb	14	; () banked
  4859   002196  85DA               	bsf	218,2,b	;volatile
  4860   002198                     
  4861                           ; BSR set to: 14
  4862   002198  0012               	return		;funcret
  4863   00219A                     __end_of_I2C_2_Master_Stop:
  4864                           	callstack 0
  4865                           
  4866 ;; *************** function _I2C_2_Master_Start *****************
  4867 ;; Defined at:
  4868 ;;		line 27 in file "i2c.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;		None
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4886 ;;Total ram usage:        0 bytes
  4887 ;; Hardware stack levels used: 1
  4888 ;; Hardware stack levels required when called: 2
  4889 ;; This function calls:
  4890 ;;		_I2C_2_Master_Idle
  4891 ;; This function is called by:
  4892 ;;		_color_writetoaddr
  4893 ;;		_color_read_Red
  4894 ;;		_color_read_Blue
  4895 ;;		_color_read_Green
  4896 ;;		_color_read_Clear
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text35
  4901   00219A                     __ptext35:
  4902                           	callstack 0
  4903   00219A                     _I2C_2_Master_Start:
  4904                           	callstack 26
  4905   00219A                     
  4906                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4907   00219A  EC42  F010         	call	_I2C_2_Master_Idle	;wreg free
  4908   00219E                     
  4909                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4910   00219E  010E               	movlb	14	; () banked
  4911   0021A0  81DA               	bsf	218,0,b	;volatile
  4912   0021A2                     
  4913                           ; BSR set to: 14
  4914   0021A2  0012               	return		;funcret
  4915   0021A4                     __end_of_I2C_2_Master_Start:
  4916                           	callstack 0
  4917                           
  4918 ;; *************** function _I2C_2_Master_Idle *****************
  4919 ;; Defined at:
  4920 ;;		line 22 in file "i2c.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;		None
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;		None
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg, status,2, status,0
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4936 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4937 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4938 ;;Total ram usage:        1 bytes
  4939 ;; Hardware stack levels used: 1
  4940 ;; Hardware stack levels required when called: 1
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_I2C_2_Master_Start
  4945 ;;		_I2C_2_Master_RepStart
  4946 ;;		_I2C_2_Master_Stop
  4947 ;;		_I2C_2_Master_Write
  4948 ;;		_I2C_2_Master_Read
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           	psect	text36
  4953   002084                     __ptext36:
  4954                           	callstack 0
  4955   002084                     _I2C_2_Master_Idle:
  4956                           	callstack 26
  4957   002084                     l291:
  4958   002084  010E               	movlb	14	; () banked
  4959   002086  B5D8               	btfsc	216,2,b	;volatile
  4960   002088  EF48  F010         	goto	u1521
  4961   00208C  EF4A  F010         	goto	u1520
  4962   002090                     u1521:
  4963   002090  EF42  F010         	goto	l291
  4964   002094                     u1520:
  4965   002094                     
  4966                           ; BSR set to: 14
  4967   002094  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4968   002098  0E1F               	movlw	31
  4969   00209A  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4970   00209C  A4D8               	btfss	status,2,c
  4971   00209E  EF53  F010         	goto	u1531
  4972   0020A2  EF55  F010         	goto	u1530
  4973   0020A6                     u1531:
  4974   0020A6  EF42  F010         	goto	l291
  4975   0020AA                     u1530:
  4976   0020AA                     
  4977                           ; BSR set to: 14
  4978   0020AA  0012               	return		;funcret
  4979   0020AC                     __end_of_I2C_2_Master_Idle:
  4980                           	callstack 0
  4981                           
  4982 ;; *************** function _I2C_2_Master_Init *****************
  4983 ;; Defined at:
  4984 ;;		line 4 in file "i2c.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;		None
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;		None
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      void 
  4991 ;; Registers used:
  4992 ;;		wreg, status,2
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5002 ;;Total ram usage:        0 bytes
  5003 ;; Hardware stack levels used: 1
  5004 ;; Hardware stack levels required when called: 1
  5005 ;; This function calls:
  5006 ;;		Nothing
  5007 ;; This function is called by:
  5008 ;;		_color_click_init
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           	psect	text37
  5013   00205A                     __ptext37:
  5014                           	callstack 0
  5015   00205A                     _I2C_2_Master_Init:
  5016                           	callstack 28
  5017   00205A                     
  5018                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  5019   00205A  010E               	movlb	14	; () banked
  5020   00205C  51D9               	movf	217,w,b	;volatile
  5021   00205E  0BF0               	andlw	-16
  5022   002060  0908               	iorlw	8
  5023   002062  6FD9               	movwf	217,b	;volatile
  5024   002064                     
  5025                           ; BSR set to: 14
  5026                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  5027   002064  8BD9               	bsf	217,5,b	;volatile
  5028                           
  5029                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  5030   002066  0E9F               	movlw	159
  5031   002068  6FD6               	movwf	214,b	;volatile
  5032   00206A                     
  5033                           ; BSR set to: 14
  5034                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  5035   00206A  8A84               	bsf	132,5,c	;volatile
  5036   00206C                     
  5037                           ; BSR set to: 14
  5038                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  5039   00206C  8C84               	bsf	132,6,c	;volatile
  5040   00206E                     
  5041                           ; BSR set to: 14
  5042                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  5043   00206E  9BA7               	bcf	167,5,b	;volatile
  5044   002070                     
  5045                           ; BSR set to: 14
  5046                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  5047   002070  9DA7               	bcf	167,6,b	;volatile
  5048                           
  5049                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  5050   002072  0E1D               	movlw	29
  5051   002074  6F1D               	movwf	29,b	;volatile
  5052                           
  5053                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  5054   002076  0E1E               	movlw	30
  5055   002078  6F1C               	movwf	28,b	;volatile
  5056                           
  5057                           ;i2c.c: 18:   RD5PPS=0x1C;
  5058   00207A  0E1C               	movlw	28
  5059   00207C  6F6F               	movwf	111,b	;volatile
  5060                           
  5061                           ;i2c.c: 19:   RD6PPS=0x1B;
  5062   00207E  0E1B               	movlw	27
  5063   002080  6F70               	movwf	112,b	;volatile
  5064   002082                     
  5065                           ; BSR set to: 14
  5066   002082  0012               	return		;funcret
  5067   002084                     __end_of_I2C_2_Master_Init:
  5068                           	callstack 0
  5069                           
  5070 ;; *************** function _buggy_lights_init *****************
  5071 ;; Defined at:
  5072 ;;		line 4 in file "buggy_lights.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;		None
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;		None
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		None
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5090 ;;Total ram usage:        0 bytes
  5091 ;; Hardware stack levels used: 1
  5092 ;; Hardware stack levels required when called: 1
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_main
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	text38
  5101   00202C                     __ptext38:
  5102                           	callstack 0
  5103   00202C                     _buggy_lights_init:
  5104                           	callstack 29
  5105   00202C                     
  5106                           ;buggy_lights.c: 8:         TRISDbits.TRISD4 = 0;
  5107   00202C  9884               	bcf	132,4,c	;volatile
  5108                           
  5109                           ;buggy_lights.c: 9:         TRISHbits.TRISH1 = 0;
  5110   00202E  9288               	bcf	136,1,c	;volatile
  5111                           
  5112                           ;buggy_lights.c: 10:         TRISDbits.TRISD3 = 0;
  5113   002030  9684               	bcf	132,3,c	;volatile
  5114                           
  5115                           ;buggy_lights.c: 11:         TRISFbits.TRISF0 = 0;
  5116   002032  9086               	bcf	134,0,c	;volatile
  5117                           
  5118                           ;buggy_lights.c: 12:         TRISHbits.TRISH0 = 0;
  5119   002034  9088               	bcf	136,0,c	;volatile
  5120                           
  5121                           ;buggy_lights.c: 14:         LATDbits.LATD4 = 0;
  5122   002036  987C               	bcf	124,4,c	;volatile
  5123                           
  5124                           ;buggy_lights.c: 15:         LATHbits.LATH1 = 0;
  5125   002038  9280               	bcf	128,1,c	;volatile
  5126                           
  5127                           ;buggy_lights.c: 16:         LATDbits.LATD3 = 0;
  5128   00203A  967C               	bcf	124,3,c	;volatile
  5129                           
  5130                           ;buggy_lights.c: 17:         LATFbits.LATF0 = 0;
  5131   00203C  907E               	bcf	126,0,c	;volatile
  5132                           
  5133                           ;buggy_lights.c: 18:         LATHbits.LATH0 = 0;
  5134   00203E  9080               	bcf	128,0,c	;volatile
  5135                           
  5136                           ;buggy_lights.c: 24:             TRISGbits.TRISG1 = 0;
  5137   002040  9287               	bcf	135,1,c	;volatile
  5138                           
  5139                           ;buggy_lights.c: 25:             TRISAbits.TRISA4 = 0;
  5140   002042  9881               	bcf	129,4,c	;volatile
  5141                           
  5142                           ;buggy_lights.c: 26:             TRISFbits.TRISF7 = 0;
  5143   002044  9E86               	bcf	134,7,c	;volatile
  5144                           
  5145                           ;buggy_lights.c: 28:             LATGbits.LATG1 = 0;
  5146   002046  927F               	bcf	127,1,c	;volatile
  5147                           
  5148                           ;buggy_lights.c: 29:             LATAbits.LATA4 = 0;
  5149   002048  9879               	bcf	121,4,c	;volatile
  5150                           
  5151                           ;buggy_lights.c: 30:             LATFbits.LATF7 = 0;
  5152   00204A  9E7E               	bcf	126,7,c	;volatile
  5153                           
  5154                           ;buggy_lights.c: 34:             TRISGbits.TRISG0 = 0;
  5155   00204C  9087               	bcf	135,0,c	;volatile
  5156                           
  5157                           ;buggy_lights.c: 35:             TRISEbits.TRISE7 = 0;
  5158   00204E  9E85               	bcf	133,7,c	;volatile
  5159                           
  5160                           ;buggy_lights.c: 36:             TRISAbits.TRISA3 = 0;
  5161   002050  9681               	bcf	129,3,c	;volatile
  5162                           
  5163                           ;buggy_lights.c: 38:             LATGbits.LATG0 = 0;
  5164   002052  907F               	bcf	127,0,c	;volatile
  5165                           
  5166                           ;buggy_lights.c: 39:             LATEbits.LATE7 = 0;
  5167   002054  9E7D               	bcf	125,7,c	;volatile
  5168                           
  5169                           ;buggy_lights.c: 40:             LATAbits.LATA3 = 0;
  5170   002056  9679               	bcf	121,3,c	;volatile
  5171   002058  0012               	return		;funcret
  5172   00205A                     __end_of_buggy_lights_init:
  5173                           	callstack 0
  5174                           
  5175 ;; *************** function _Timer0_init *****************
  5176 ;; Defined at:
  5177 ;;		line 7 in file "timers.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;		None
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5195 ;;Total ram usage:        0 bytes
  5196 ;; Hardware stack levels used: 1
  5197 ;; Hardware stack levels required when called: 3
  5198 ;; This function calls:
  5199 ;;		_reset_timer
  5200 ;; This function is called by:
  5201 ;;		_main
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           	psect	text39
  5206   0020D2                     __ptext39:
  5207                           	callstack 0
  5208   0020D2                     _Timer0_init:
  5209                           	callstack 27
  5210   0020D2                     
  5211                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  5212   0020D2  50D6               	movf	214,w,c	;volatile
  5213   0020D4  0B1F               	andlw	-225
  5214   0020D6  0940               	iorlw	64
  5215   0020D8  6ED6               	movwf	214,c	;volatile
  5216   0020DA                     
  5217                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  5218   0020DA  88D6               	bsf	214,4,c	;volatile
  5219   0020DC                     
  5220                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  5221   0020DC  88D5               	bsf	213,4,c	;volatile
  5222                           
  5223                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  5224   0020DE  50D6               	movf	214,w,c	;volatile
  5225   0020E0  0BF0               	andlw	-16
  5226   0020E2  090E               	iorlw	14
  5227   0020E4  6ED6               	movwf	214,c	;volatile
  5228   0020E6                     
  5229                           ;timers.c: 18:     reset_timer();
  5230   0020E6  ECB7  F010         	call	_reset_timer	;wreg free
  5231   0020EA                     
  5232                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  5233   0020EA  8ED5               	bsf	213,7,c	;volatile
  5234   0020EC                     
  5235                           ;timers.c: 21:     PIE0bits.TMR0IE = 1;
  5236   0020EC  010E               	movlb	14	; () banked
  5237   0020EE  8B29               	bsf	41,5,b	;volatile
  5238   0020F0                     
  5239                           ; BSR set to: 14
  5240                           ;timers.c: 22:     INTCONbits.PEIE = 1;
  5241   0020F0  8CF2               	bsf	242,6,c	;volatile
  5242   0020F2                     
  5243                           ; BSR set to: 14
  5244                           ;timers.c: 23:     INTCONbits.GIE = 1;
  5245   0020F2  8EF2               	bsf	242,7,c	;volatile
  5246   0020F4                     
  5247                           ; BSR set to: 14
  5248   0020F4  0012               	return		;funcret
  5249   0020F6                     __end_of_Timer0_init:
  5250                           	callstack 0
  5251                           
  5252 ;; *************** function _reset_timer *****************
  5253 ;; Defined at:
  5254 ;;		line 44 in file "timers.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg, status,2, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5272 ;;Total ram usage:        0 bytes
  5273 ;; Hardware stack levels used: 1
  5274 ;; Hardware stack levels required when called: 2
  5275 ;; This function calls:
  5276 ;;		_write_timer
  5277 ;; This function is called by:
  5278 ;;		_Timer0_init
  5279 ;;		_forward_navigation
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text40
  5284   00216E                     __ptext40:
  5285                           	callstack 0
  5286   00216E                     _reset_timer:
  5287                           	callstack 27
  5288   00216E                     
  5289                           ;timers.c: 46:     write_timer(0, 0);
  5290   00216E  0E00               	movlw	0
  5291   002170  6E01               	movwf	write_timer@tL^0,c
  5292   002172  0E00               	movlw	0
  5293   002174  ECBD  F010         	call	_write_timer
  5294   002178  0012               	return		;funcret
  5295   00217A                     __end_of_reset_timer:
  5296                           	callstack 0
  5297                           
  5298 ;; *************** function _write_timer *****************
  5299 ;; Defined at:
  5300 ;;		line 35 in file "timers.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;  tH              1    wreg     unsigned char 
  5303 ;;  tL              1    0[COMRAM] unsigned char 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  tH              1    1[COMRAM] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      void 
  5308 ;; Registers used:
  5309 ;;		wreg
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5315 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5318 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5319 ;;Total ram usage:        2 bytes
  5320 ;; Hardware stack levels used: 1
  5321 ;; Hardware stack levels required when called: 1
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_reset_timer
  5326 ;;		_return_to_sender
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text41
  5331   00217A                     __ptext41:
  5332                           	callstack 0
  5333   00217A                     _write_timer:
  5334                           	callstack 27
  5335                           
  5336                           ;incstack = 0
  5337                           ;write_timer@tH stored from wreg
  5338   00217A  6E02               	movwf	write_timer@tH^0,c
  5339   00217C                     
  5340                           ;timers.c: 35: void write_timer(unsigned char tH, unsigned char tL);timers.c: 36: {;time
      +                          rs.c: 40:     TMR0H = tH;
  5341   00217C  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  5342   002180                     
  5343                           ;timers.c: 41:     TMR0L = tL;
  5344   002180  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  5345   002184  0012               	return		;funcret
  5346   002186                     __end_of_write_timer:
  5347                           	callstack 0
  5348                           
  5349 ;; *************** function _ISR *****************
  5350 ;; Defined at:
  5351 ;;		line 116 in file "timers.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;		None
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;		None
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      void 
  5358 ;; Registers used:
  5359 ;;		wreg, status,2
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5369 ;;Total ram usage:        0 bytes
  5370 ;; Hardware stack levels used: 1
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		Interrupt level 2
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           	psect	intcode
  5379   000008                     __pintcode:
  5380                           	callstack 0
  5381   000008                     _ISR:
  5382                           	callstack 24
  5383                           
  5384                           ;incstack = 0
  5385   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5386   00000A                     
  5387                           ;timers.c: 119:     if (PIR0bits.TMR0IF) {
  5388   00000A  010E               	movlb	14	; () banked
  5389   00000C  AB33               	btfss	51,5,b	;volatile
  5390   00000E  EF0B  F000         	goto	i2u109_41
  5391   000012  EF0D  F000         	goto	i2u109_40
  5392   000016                     i2u109_41:
  5393   000016  EF18  F000         	goto	i2l668
  5394   00001A                     i2u109_40:
  5395   00001A                     
  5396                           ; BSR set to: 14
  5397                           ;timers.c: 120:         if (returning) {
  5398   00001A  505D               	movf	_returning^0,w,c
  5399   00001C  B4D8               	btfsc	status,2,c
  5400   00001E  EF13  F000         	goto	i2u110_41
  5401   000022  EF15  F000         	goto	i2u110_40
  5402   000026                     i2u110_41:
  5403   000026  EF17  F000         	goto	i2l667
  5404   00002A                     i2u110_40:
  5405   00002A                     
  5406                           ; BSR set to: 14
  5407                           ;timers.c: 121:             return_flag = 1;
  5408   00002A  0E01               	movlw	1
  5409   00002C  6E5C               	movwf	_return_flag^0,c
  5410   00002E                     i2l667:
  5411                           
  5412                           ; BSR set to: 14
  5413                           ;timers.c: 126:         PIR0bits.TMR0IF = 0;
  5414   00002E  9B33               	bcf	51,5,b	;volatile
  5415   000030                     i2l668:
  5416                           
  5417                           ; BSR set to: 14
  5418   000030  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5419   000032  0011               	retfie		f
  5420   000034                     __end_of_ISR:
  5421                           	callstack 0
  5422                           
  5423                           	psect	rparam
  5424   000000                     
  5425                           	psect	temp
  5426   00005E                     btemp:
  5427                           	callstack 0
  5428   00005E                     	ds	1
  5429   000000                     int$flags	set	btemp
  5430   000000                     wtemp8	set	btemp+1
  5431   000000                     ttemp5	set	btemp+1
  5432   000000                     ttemp6	set	btemp+4
  5433   000000                     ttemp7	set	btemp+8
  5434                           
  5435                           	psect	idloc
  5436                           
  5437                           ;Config register IDLOC0 @ 0x200000
  5438                           ;	unspecified, using default values
  5439   200000                     	org	2097152
  5440   200000  FFFF               	dw	65535
  5441                           
  5442                           ;Config register IDLOC1 @ 0x200002
  5443                           ;	unspecified, using default values
  5444   200002                     	org	2097154
  5445   200002  FFFF               	dw	65535
  5446                           
  5447                           ;Config register IDLOC2 @ 0x200004
  5448                           ;	unspecified, using default values
  5449   200004                     	org	2097156
  5450   200004  FFFF               	dw	65535
  5451                           
  5452                           ;Config register IDLOC3 @ 0x200006
  5453                           ;	unspecified, using default values
  5454   200006                     	org	2097158
  5455   200006  FFFF               	dw	65535
  5456                           
  5457                           ;Config register IDLOC4 @ 0x200008
  5458                           ;	unspecified, using default values
  5459   200008                     	org	2097160
  5460   200008  FFFF               	dw	65535
  5461                           
  5462                           ;Config register IDLOC5 @ 0x20000A
  5463                           ;	unspecified, using default values
  5464   20000A                     	org	2097162
  5465   20000A  FFFF               	dw	65535
  5466                           
  5467                           ;Config register IDLOC6 @ 0x20000C
  5468                           ;	unspecified, using default values
  5469   20000C                     	org	2097164
  5470   20000C  FFFF               	dw	65535
  5471                           
  5472                           ;Config register IDLOC7 @ 0x20000E
  5473                           ;	unspecified, using default values
  5474   20000E                     	org	2097166
  5475   20000E  FFFF               	dw	65535
  5476                           
  5477                           	psect	config
  5478                           
  5479                           ;Config register CONFIG1L @ 0x300000
  5480                           ;	External Oscillator mode Selection bits
  5481                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5482                           ;	Power-up default value for COSC bits
  5483                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5484   300000                     	org	3145728
  5485   300000  AA                 	db	170
  5486                           
  5487                           ;Config register CONFIG1H @ 0x300001
  5488                           ;	unspecified, using default values
  5489                           ;	Clock Out Enable bit
  5490                           ;	CLKOUTEN = 0x1, unprogrammed default
  5491                           ;	Clock Switch Enable bit
  5492                           ;	CSWEN = 0x1, unprogrammed default
  5493                           ;	Fail-Safe Clock Monitor Enable bit
  5494                           ;	FCMEN = 0x1, unprogrammed default
  5495   300001                     	org	3145729
  5496   300001  FF                 	db	255
  5497                           
  5498                           ;Config register CONFIG2L @ 0x300002
  5499                           ;	unspecified, using default values
  5500                           ;	Master Clear Enable bit
  5501                           ;	MCLRE = 0x1, unprogrammed default
  5502                           ;	Power-up Timer Enable bit
  5503                           ;	PWRTE = 0x1, unprogrammed default
  5504                           ;	Low-power BOR enable bit
  5505                           ;	LPBOREN = 0x1, unprogrammed default
  5506                           ;	Brown-out Reset Enable bits
  5507                           ;	BOREN = 0x3, unprogrammed default
  5508   300002                     	org	3145730
  5509   300002  FF                 	db	255
  5510                           
  5511                           ;Config register CONFIG2H @ 0x300003
  5512                           ;	unspecified, using default values
  5513                           ;	Brown Out Reset Voltage selection bits
  5514                           ;	BORV = 0x3, unprogrammed default
  5515                           ;	ZCD Disable bit
  5516                           ;	ZCD = 0x1, unprogrammed default
  5517                           ;	PPSLOCK bit One-Way Set Enable bit
  5518                           ;	PPS1WAY = 0x1, unprogrammed default
  5519                           ;	Stack Full/Underflow Reset Enable bit
  5520                           ;	STVREN = 0x1, unprogrammed default
  5521                           ;	Debugger Enable bit
  5522                           ;	DEBUG = 0x1, unprogrammed default
  5523                           ;	Extended Instruction Set Enable bit
  5524                           ;	XINST = 0x1, unprogrammed default
  5525   300003                     	org	3145731
  5526   300003  FF                 	db	255
  5527                           
  5528                           ;Config register CONFIG3L @ 0x300004
  5529                           ;	WDT Period Select bits
  5530                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5531                           ;	WDT operating mode
  5532                           ;	WDTE = OFF, WDT Disabled
  5533   300004                     	org	3145732
  5534   300004  9F                 	db	159
  5535                           
  5536                           ;Config register CONFIG3H @ 0x300005
  5537                           ;	unspecified, using default values
  5538                           ;	WDT Window Select bits
  5539                           ;	WDTCWS = 0x7, unprogrammed default
  5540                           ;	WDT input clock selector
  5541                           ;	WDTCCS = 0x7, unprogrammed default
  5542   300005                     	org	3145733
  5543   300005  FF                 	db	255
  5544                           
  5545                           ;Config register CONFIG4L @ 0x300006
  5546                           ;	unspecified, using default values
  5547                           ;	Write Protection Block 0
  5548                           ;	WRT0 = 0x1, unprogrammed default
  5549                           ;	Write Protection Block 1
  5550                           ;	WRT1 = 0x1, unprogrammed default
  5551                           ;	Write Protection Block 2
  5552                           ;	WRT2 = 0x1, unprogrammed default
  5553                           ;	Write Protection Block 3
  5554                           ;	WRT3 = 0x1, unprogrammed default
  5555                           ;	Write Protection Block 3
  5556                           ;	WRT4 = 0x1, unprogrammed default
  5557                           ;	Write Protection Block 3
  5558                           ;	WRT5 = 0x1, unprogrammed default
  5559                           ;	Write Protection Block 3
  5560                           ;	WRT6 = 0x1, unprogrammed default
  5561                           ;	Write Protection Block 3
  5562                           ;	WRT7 = 0x1, unprogrammed default
  5563   300006                     	org	3145734
  5564   300006  FF                 	db	255
  5565                           
  5566                           ;Config register CONFIG4H @ 0x300007
  5567                           ;	unspecified, using default values
  5568                           ;	Configuration Register Write Protection bit
  5569                           ;	WRTC = 0x1, unprogrammed default
  5570                           ;	Boot Block Write Protection bit
  5571                           ;	WRTB = 0x1, unprogrammed default
  5572                           ;	Data EEPROM Write Protection bit
  5573                           ;	WRTD = 0x1, unprogrammed default
  5574                           ;	Scanner Enable bit
  5575                           ;	SCANE = 0x1, unprogrammed default
  5576                           ;	Low Voltage Programming Enable bit
  5577                           ;	LVP = 0x1, unprogrammed default
  5578   300007                     	org	3145735
  5579   300007  FF                 	db	255
  5580                           
  5581                           ;Config register CONFIG5L @ 0x300008
  5582                           ;	unspecified, using default values
  5583                           ;	UserNVM Program Memory Code Protection bit
  5584                           ;	CP = 0x1, unprogrammed default
  5585                           ;	DataNVM Memory Code Protection bit
  5586                           ;	CPD = 0x1, unprogrammed default
  5587   300008                     	org	3145736
  5588   300008  FF                 	db	255
  5589                           
  5590                           ;Config register CONFIG5H @ 0x300009
  5591                           ;	unspecified, using default values
  5592   300009                     	org	3145737
  5593   300009  FF                 	db	255
  5594                           
  5595                           ;Config register CONFIG6L @ 0x30000A
  5596                           ;	unspecified, using default values
  5597                           ;	Table Read Protection Block 0
  5598                           ;	EBTR0 = 0x1, unprogrammed default
  5599                           ;	Table Read Protection Block 1
  5600                           ;	EBTR1 = 0x1, unprogrammed default
  5601                           ;	Table Read Protection Block 2
  5602                           ;	EBTR2 = 0x1, unprogrammed default
  5603                           ;	Table Read Protection Block 3
  5604                           ;	EBTR3 = 0x1, unprogrammed default
  5605                           ;	Table Read Protection Block 4
  5606                           ;	EBTR4 = 0x1, unprogrammed default
  5607                           ;	Table Read Protection Block 5
  5608                           ;	EBTR5 = 0x1, unprogrammed default
  5609                           ;	Table Read Protection Block 6
  5610                           ;	EBTR6 = 0x1, unprogrammed default
  5611                           ;	Table Read Protection Block 7
  5612                           ;	EBTR7 = 0x1, unprogrammed default
  5613   30000A                     	org	3145738
  5614   30000A  FF                 	db	255
  5615                           
  5616                           ;Config register CONFIG6H @ 0x30000B
  5617                           ;	unspecified, using default values
  5618                           ;	Boot Block Table Read Protection bit
  5619                           ;	EBTRB = 0x1, unprogrammed default
  5620   30000B                     	org	3145739
  5621   30000B  FF                 	db	255
  5622                           tosu	equ	0xFFF
  5623                           tosh	equ	0xFFE
  5624                           tosl	equ	0xFFD
  5625                           stkptr	equ	0xFFC
  5626                           pclatu	equ	0xFFB
  5627                           pclath	equ	0xFFA
  5628                           pcl	equ	0xFF9
  5629                           tblptru	equ	0xFF8
  5630                           tblptrh	equ	0xFF7
  5631                           tblptrl	equ	0xFF6
  5632                           tablat	equ	0xFF5
  5633                           prodh	equ	0xFF4
  5634                           prodl	equ	0xFF3
  5635                           indf0	equ	0xFEF
  5636                           postinc0	equ	0xFEE
  5637                           postdec0	equ	0xFED
  5638                           preinc0	equ	0xFEC
  5639                           plusw0	equ	0xFEB
  5640                           fsr0h	equ	0xFEA
  5641                           fsr0l	equ	0xFE9
  5642                           wreg	equ	0xFE8
  5643                           indf1	equ	0xFE7
  5644                           postinc1	equ	0xFE6
  5645                           postdec1	equ	0xFE5
  5646                           preinc1	equ	0xFE4
  5647                           plusw1	equ	0xFE3
  5648                           fsr1h	equ	0xFE2
  5649                           fsr1l	equ	0xFE1
  5650                           bsr	equ	0xFE0
  5651                           indf2	equ	0xFDF
  5652                           postinc2	equ	0xFDE
  5653                           postdec2	equ	0xFDD
  5654                           preinc2	equ	0xFDC
  5655                           plusw2	equ	0xFDB
  5656                           fsr2h	equ	0xFDA
  5657                           fsr2l	equ	0xFD9
  5658                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        26
    BSS         102
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      93
    BANK0           160     32      93
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getHSVval@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    getHSVval@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    maxRGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    minRGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1138DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1138DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2713$buffer	PTR unsigned char  size(2) Largest target is 0

    S2713$source	PTR const unsigned char  size(2) Largest target is 0

    sendHSVvalSerial4@col_val	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    sendRGBCvalSerial4@col_val	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 
		 -> STR_4(CODE[3]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sendRGBCvalSerial4
    _sendRGBCvalSerial4->_sprintf
    _sendHSVvalSerial4->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___lwdiv
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _getHSVval->___lwdiv
    _minRGB->_min
    _maxRGB->_max
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   20682
                                             84 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                          _getHSVval
                         _getRGBCval
                    _initDCmotorsPWM
                         _initUSART4
                  _sendHSVvalSerial4
                 _sendRGBCvalSerial4
               _toggle_tricolour_LED
 ---------------------------------------------------------------------------------
 (1) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sendRGBCvalSerial4                                  27    26      1    6691
                                             57 COMRAM    27    26      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sendHSVvalSerial4                                   22    21      1    6669
                                             57 COMRAM    22    21      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    15     11    6030
                                             31 COMRAM    26    15     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    5205
                                             27 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           14    11      3    4853
                                             13 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     934
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     447
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _getHSVval                                           28    26      2    5408
                                             13 COMRAM    26    24      2
                            ___lwdiv
                             ___wmul
                             _maxRGB
                             _minRGB
 ---------------------------------------------------------------------------------
 (2) _minRGB                                               4     2      2     581
                                              6 COMRAM     4     2      2
                                _min
 ---------------------------------------------------------------------------------
 (3) _min                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _maxRGB                                               4     2      2     581
                                              6 COMRAM     4     2      2
                                _max
 ---------------------------------------------------------------------------------
 (3) _max                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4    1466
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _getHSVval
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _maxRGB
       _max
     _minRGB
       _min
   _getRGBCval
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendHSVvalSerial4
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           ___awdiv
           ___awmod
           ___lwdiv
           ___lwmod
           _abs
             ___awmod (ARG)
           _fputc
             _putch
   _sendRGBCvalSerial4
     _sendStringSerial4
     _sprintf
   _toggle_tricolour_LED

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      5D       5       58.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5D       1       98.9%
BITBIGSFRlllhhh     52      0       0      41        0.0%
BITBIGSFRlllhhh     37      0       0      43        0.0%
BITBIGSFRlllllh     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      59        0.0%
BITBIGSFRlllhhh     20      0       0      46        0.0%
BITBIGSFRlllhhh     1E      0       0      48        0.0%
BITBIGSFRhhlll      1D      0       0      38        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      49        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      47        0.0%
BITBIGSFRlllllh      B      0       0      57        0.0%
BITBIGSFRlllllh      9      0       0      56        0.0%
BITBIGSFRlllhhh      8      0       0      44        0.0%
BITBIGSFRllllll      6      0       0      58        0.0%
BITBIGSFRlllllh      6      0       0      53        0.0%
BITBIGSFRllllhl      5      0       0      52        0.0%
BITBIGSFRlllllh      3      0       0      55        0.0%
BITBIGSFRllllhh      3      0       0      51        0.0%
BITBIGSFRlllhhh      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      50        0.0%
BITBIGSFRllh         1      0       0      40        0.0%
BITBIGSFRlhh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F6      60        0.0%
DATA                 0      0      F6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 07 19:08:23 2024

                 _turn180Delay 00AF                 _color_read_Red 1D4A                _color_read_Blue 1E3A  
              _trail_timer_low 0114                             l42 1736                             l27 2058  
                           l71 1D98                             l80 1E38                             l65 1FCA  
                           l74 1E88                             l83 1CA0                             l68 2114  
                           l93 2022                             l77 1DE8                             l94 202A  
                           l97 1FF2                             l98 1FFA                   ___awdiv@sign 0006  
          ___wmul@multiplicand 0003               _trail_timer_high 0128               _color_read_Clear 1DEA  
             _color_read_Green 1D9A                            l101 1D48                            l104 1CF4  
                          l120 122C                            l300 218E                            l303 2198  
                          l306 216C                            l309 1F62                            l440 214A  
                          l193 19F4                            l291 2084                            l428 2132  
                          l460 1ED4                            l437 2136                            l294 20AA  
                          l446 1B96                            l632 20F4                            l288 2082  
                          l641 2178                            l297 21A2                            l457 1BF4  
                          l638 2184                            l942 1964                            l929 17FA  
                          l698 20D0                            _ISR 0008         ??_toggle_tricolour_LED 0001  
                          _abs 1F64                            _max 1FFC                            _min 1FCC  
                 ___awmod@sign 0006                            wreg 0FE8                    _squareDelay 00AB  
                         ?_ISR 0001                           ?_abs 0007                           l1206 1B34  
                         l3101 0EA6                           l3111 0F72                           l3103 0EBE  
                         l3201 20E6                           l3121 10C0                           l3113 0F98  
                         l3105 0ED4                           l1441 1F7E                           l1417 13D0  
                         l1418 1538                           l3051 216E                           l3203 20EA  
                         l3131 11FA                           l3123 1138                           l3115 100A  
                         l3107 0EF8                           l3211 1B98                           l1196 1A68  
                         l1444 1F96                           l1436 1C42                           l3205 20EC  
                         l1189 1A60                           l3053 20AC                           l3133 1208  
                         l3117 1078                           l3109 0F50                           l3125 11AC  
                         l3141 199C                           l2501 17EA                           l1437 1C4A  
                         l3213 1BEA                           l3061 1670                           l3301 15CC  
                         l3207 20F0                           l3071 1FC0                           l3063 1F98  
                         l3055 20C8                           l3135 121A                           l3127 11BE  
                         l3119 109A                           l3151 19DA                           l3143 19A0  
                         l2503 17F2                           l2511 18C8                           l1199 1B2C  
                         l3215 1E8A                           l3311 15DC                           l3303 15D0  
                         l1456 18B4                           l1376 1F20                           l3209 20F2  
                         l3065 1F9C                           l3129 11CA                           l3073 1C4C  
                         l3153 19DC                           l3145 19C4                           l3137 1966  
                         l2521 18FC                           l2513 18D0                           l3217 1ECA  
                         l3321 15E8                           l3313 15DE                           l3305 15D4  
                         l3059 202C                           l3067 1FA6                           l3091 0E5C  
                         l3083 0E1A                           l3155 19E6                           l3147 19CE  
                         l3139 1976                           l2531 1938                           l2523 1904  
                         l2515 18D4                           l2507 18B6                           l1467 21A8  
                         l3331 162C                           l3323 160E                           l3315 15E0  
                         l3307 15D8                           l3069 1FB6                           l3093 0E6C  
                         l3085 0E2A                           l3157 19E8                           l3149 19D0  
                         l2533 193E                           l2525 190C                           l2517 18E2  
                         l2509 18BA                           l2701 1280                           l3333 1634  
                         l3325 1612                           l3317 15E2                           l3309 15DA  
                         l2551 1A20                           l2543 19F6                           l3095 0E7C  
                         l3087 0E38                           l3159 19F2                           l3191 212E  
                         l3183 2116                           l2471 1756                           l2463 1738  
                         l2527 191A                           l2535 1944                           l2519 18EA  
                         l2711 12FA                           l2703 12A0                           l3335 1640  
                         l3327 161A                           l3319 15E4                           l2561 1A54  
                         l2553 1A2E                           l2545 19FE                           l3097 0E88  
                         l3089 0E4A                           l2801 1F28                           l3193 2130  
                         l3185 2120                           l2481 178A                           l2473 1764  
                         l2465 173C                           l2537 1954                           l2529 1930  
                         l2721 136C                           l2713 132A                           l2705 12C0  
                         l3337 1648                           l3329 1624                           l3195 20D2  
                         l2563 1A5A                           l2555 1A34                           l2547 1A10  
                         l3099 0E9A                           l2803 1F30                           l3187 2122  
                         l2491 17C4                           l2483 1792                           l2475 176C  
                         l2467 174A                           l2539 195C                           l2571 1AF4  
                         l2731 13BC                           l2723 137C                           l2715 1346  
                         l2707 12D8                           l3339 1650                           l3291 1590  
                         l3197 20DA                           l2557 1A4A                           l2549 1A18  
                         l2813 1FFC                           l2821 1FD4                           l2805 1F38  
                         l3189 212C                           l2493 17CC                           l2485 179A  
                         l2477 1770                           l2469 1752                           l2573 1B02  
                         l2565 1AD2                           l2581 17FC                           l2741 1422  
                         l2725 138C                           l2733 13BE                           l2717 134A  
                         l2709 12E2                           l3293 15A4                           l3285 153A  
                         l3199 20DC                           l2559 1A52                           l2815 2004  
                         l2823 1FEA                           l2807 1F5E                           l2903 1E3A  
                         l2911 1DE0                           l2495 17CE                           l2487 17A8  
                         l2479 1778                           l2575 1B18                           l2567 1AE4  
                         l2591 1874                           l2583 180C                           l2751 147C  
                         l2743 1426                           l2727 139A                           l2719 135C  
                         l2735 13DC                           l3295 15AC                           l3287 1580  
                         l2817 201A                           l2921 1CF6                           l2809 1F60  
                         l2905 1E80                           l2497 17D4                           l2489 17AE  
                         l2577 1B20                           l2569 1AEC                           l2585 181C  
                         l2753 1490                           l2745 144A                           l2761 14C2  
                         l2737 13FC                           l2729 13A2                           l3297 15B4  
                         l3289 1588                           l2819 1FCC                           l2915 1DEA  
                         l2931 1B3A                           l2499 17DA                           l2579 1B26  
                         l2595 1F64                           l2587 1826                           l2771 1528  
                         l2755 14AA                           l2747 1466                           l2739 1414  
                         l2763 14F2                           l2691 1236                           l3299 15BC  
                         l2685 2084                           l2925 1CA2                           l2917 1E30  
                         l2909 1D9A                           l2933 1B60                           l2597 1F72  
                         l2589 1842                           l2773 1530                           l2765 14FA  
                         l3741 14E4                           l2757 14AC                           l2749 146A  
                         l2693 125C                           l2941 1EEA                           l2871 217C  
                         l2687 2094                           l2783 219A                           l2791 2190  
                         l2935 1B64                           l2695 1264                           l2943 1EF2  
                         l2873 2180                           l2785 219E                           l2793 2194  
                         l2929 1B36                           l2697 1272                           l2769 1506  
                         l2689 122E                           l2881 1C22                           l2945 1F0A  
                         l2937 1ED6                           l2891 206E                           l2883 205A  
                         l2787 2164                           l2795 2186                           l2867 2136  
                         l2699 1276                           l2875 1BF6                           l2947 1F18  
                         l2939 1EE2                           l2893 2070                           l2885 2064  
                         l2789 2168                           l2797 218A                           l2869 2146  
                         l2877 1BFA                           ?_max 0001                           l2887 206A  
                         l2895 20F8                           l2799 1F24                           l2879 1C08  
                         l2889 206C                           l2897 1D4A                           l2899 1D90  
                         ?_min 0001                           STR_1 0E0F                           STR_2 0E14  
                         STR_5 0E01                           STR_6 0E04                           u1200 18E2  
                         u1201 18DE                           u1130 174A                           u1210 18FC  
                         u1131 1746                           u1211 18F8                           u1140 1764  
                         u1220 191A                           u1300 1B18                           u1141 1760  
                         u1221 1916                           u1301 1B14                           u1150 178A  
                         u1230 1930                           u1310 180C                           u1151 1786  
                         u1231 192C                           u1311 1808                           u1160 17A8  
                         u1240 1954                           u1320 181C                           u1161 17A4  
                         u1241 1950                           u1321 1818                           u1250 1A10  
                         u1170 17C4                           u1330 1842                           u2050 15FC  
                         u1251 1A0C                           u1171 17C0                           u1331 183E  
                         u2051 15F4                           u1260 1A2E                           u1180 17EA  
                         u1340 1874                           u1261 1A2A                           u1181 17E6  
                         u1341 1870                           u1270 1A4A                           u1190 18C8  
                         u1350 1F72                           u1271 1A46                           u1191 18C4  
                         u1351 1F6E                           u1520 2094                           u1280 1AE4  
                         u1600 136C                   _BAUD4CONbits 0EE9                           u1521 2090  
                         u1281 1AE0                           u1601 1368                           u1530 20AA  
                         u1290 1B02                           u1610 137C                           u1531 20A6  
                         u1291 1AFE                           u1611 1378                           u1700 201A  
                         u1620 138C                           u1540 125C                           u2068 15FE  
                         u1701 2016                           u1621 1388                           u1541 1258  
                         u1710 1FEA                           u1630 13D0                           u1550 12A0  
                         u1711 1FE6                           u1631 13CC                           u1551 129C  
                         u1720 2146                           u1640 13FC                           u1560 12C0  
                         u1721 2142                           u1641 13F8                           u1561 12BC  
                         u1650 147C                           u1570 12F6                           u1730 1C42  
                         u1810 16C2                           _T2PR 0FBC                           u1651 1478  
                         u1571 12F0                           u1731 1C3E                           u1811 16BA  
                         u2507 165A                           u1740 1B5C                           u1660 148C  
                         u1580 12F8                           u2517 1FAC                           u1661 1488  
                         u1750 1B86                           u1670 14BE                           u1590 135C  
                         u1830 16E4                           u1671 14BA                           u1591 1358  
                         u1831 16DC                           u1920 0E9A                           u1680 1F4C  
                         u1760 1B96                           u1808 16A4                           u1921 0E96  
                         u1681 1F44                           u1761 1B92                           u1930 0EBE  
                         u1850 1702                           u1770 1682                           u1931 0EBA  
                         u1747 1B52                           u1851 16FA                           u1771 167A  
                         u1940 0ED4                           u1828 16C4                           u1941 0ED0  
                         u1757 1B7C                           u1950 0F72                           u1870 1724  
                         u1790 16A2                           u1951 0F6E                           u1871 171C  
                         u1791 169A                           u1960 0F98                           u1848 16E6  
                         u1961 0F94                           u1970 109A                           u1698 1F4E  
                         u1971 1096                           u1980 10C0                           u1868 1704  
                         u1788 1684                           u1981 10BC                           u1990 11BE  
                         u1991 11BA                           u1888 1726                           abs@a 0007  
                         _dbuf 0060                           _main 153A                           _prec 0084  
                         _nout 0080                           fsr0h 0FEA                           fsr1h 0FE2  
                         indf0 0FEF                           fsr2h 0FDA                           fsr0l 0FE9  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         max@a 0001                           max@b 0003                           btemp 005E  
                         min@a 0001                           min@b 0003             _sendRGBCvalSerial4 1B98  
                         prodh 0FF4                           prodl 0FF3                           start 0034  
       __end_of_color_read_Red 1D9A                   ___param_bank 0000                          ??_ISR 0001  
          ?_sendRGBCvalSerial4 003A                          ??_abs 0009                  write_timer@tH 0002  
                write_timer@tL 0001                          ??_max 0005                          ??_min 0005  
                        ?_main 0001             _timer_high_pointer 0057                __end_of___awdiv 17FC  
              __end_of___awmod 1966                ___awdiv@divisor 0003                __end_of___lwdiv 1A6A  
              __end_of___lwmod 1B36                          i2l667 002E                          i2l668 0030  
              ___awdiv@counter 0005                   vfpfcnvrt@cnt 0014                   vfpfcnvrt@fmt 000F  
                        _TMR0H 0FD4                          _TMR0L 0FD3        __end_of_sendCharSerial4 214C  
   __end_of_I2C_2_Master_Start 21A4                    _write_timer 217A     __end_of_I2C_2_Master_Write 216E  
                  _turningGear 00BB                          _flags 0086           ??_sendRGBCvalSerial4 003B  
                        _fputc 17FC                          _width 0082                          _putch 21A8  
            _turnRight135Delay 00B1                          tablat 0FF5                _turnLeft90Delay 00B7  
                        ttemp5 005F                          ttemp6 0062                          ttemp7 0066  
                        status 0FD8                          wtemp8 005F                __end_of_sprintf 1F22  
      __end_of_color_read_Blue 1E8A          _I2C_2_Master_RepStart 2186                ?_color_read_Red 0005  
              __initialization 1A6A                   __end_of_main 1670                         ??_main 0055  
                __activetblptr 0003                         ?_fputc 0001                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 0001                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         _RD6PPS 0E70                         _RE4PPS 0E76  
                       i2l2421 001A                         i2l2423 002A                         i2l2419 000A  
                       _RG6PPS 0E88                  vfpfcnvrt@done 0013       __end_of_color_click_init 1FCC  
                       _RX4PPS 0E15                         _TX4REG 0EE4               _turnLeft135Delay 00B3  
                ??_Timer0_init 0003                   ?_reset_timer 0001                   _CCPTMRS0bits 0FAD  
                 vfprintf@cfmt 001F                         ___wmul 20AC                      ??___awdiv 0005  
                    ??___awmod 0005                      ??___lwdiv 000B                      ??___lwmod 0005  
                       _maxRGB 1CF6                         _minRGB 1CA2                         clear_0 1AB0  
                       clear_1 1ABC               ___awdiv@quotient 0007                ___awmod@divisor 0003  
                       isa$std 0001                ___awmod@counter 0005                         fputc@c 0001  
                 __pdataCOMRAM 0057              _timer_low_pointer 00A9                   __mediumconst 0000  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
             ?_sendCharSerial4 0001                         putch@c 0001               __end_of_vfprintf 1C4C  
            ??_initDCmotorsPWM 0003                      ??_sprintf 002B              _buggy_lights_init 202C  
                   __accesstop 0060        __end_of__initialization 1AC8       __end_of_color_read_Clear 1E3A  
     __end_of_color_read_Green 1DEA         ?_I2C_2_Master_RepStart 0001             ?_buggy_lights_init 0001  
                ___rparam_used 0001               ?_color_read_Blue 0005                 __pcstackCOMRAM 0001  
                 __pidataBANK0 214C            ??_buggy_lights_init 0001                  __end_of_fputc 18B6  
                __end_of_putch 21AA            __end_of_Timer0_init 20F6                        ??_fputc 0004  
    __end_of_buggy_lights_init 205A                        ??_putch 0001                     __pbssBANK0 0060  
                   __pbssBANK1 0100                     _getRGBCval 1C4C              _color_writetoaddr 20F6  
                 _T2CLKCONbits 0FBF             ?_color_writetoaddr 0003                        ?___wmul 0001  
                      ?_maxRGB 0007                        ?_minRGB 0007            ??_color_writetoaddr 0004  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                   ?_write_timer 0001  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5              __end_of_getHSVval 122E  
       color_writetoaddr@value 0003               ??_color_read_Red 0007      __end_of_color_writetoaddr 2116  
           _I2C_2_Master_Start 219A                     _initUSART4 2116             _I2C_2_Master_Write 2162  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000A  
                  _Timer0_init 20D2        sendStringSerial4@string 0002                        ___awdiv 1738  
                      ___awmod 18B6            ?_I2C_2_Master_Start 0001                        ___lwdiv 19F6  
          ?_I2C_2_Master_Write 0001                        ___lwmod 1AD2                      ?_vfprintf 001C  
                 __psmallconst 0E00                        __pcinit 1A6A                        __ramtop 0E00  
                      __ptext0 153A                        __ptext1 1670                        __ptext2 1B98  
                      __ptext3 1E8A                        __ptext4 1ED6                        __ptext5 1BF6  
                      __ptext6 122E                        __ptext7 17FC                        __ptext8 21A8  
                      __ptext9 1F64                      _T2CONbits 0FBD               ___awmod@dividend 0001  
                   getHSVval@C 0026                     getHSVval@H 0022                     getHSVval@M 0024  
                    _T2HLTbits 0FBE                     getHSVval@S 001C                     getHSVval@m 001A  
                      maxRGB@p 0007                        _sprintf 1ED6                        minRGB@p 0007  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 1AC8  
            _sendHSVvalSerial4 1E8A                    ?_getRGBCval 000C                        fputc@fp 0003  
            ?_color_click_init 0001             ?_sendHSVvalSerial4 003A             ??_color_click_init 0005  
            __end_of_vfpfcnvrt 153A            ??_sendHSVvalSerial4 003B                        postdec1 0FE5  
                      postdec2 0FDD                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0017                     ??_vfprintf 001F  
              _initDCmotorsPWM 1966                      _TRISAbits 0F81                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88      __end_of_sendHSVvalSerial4 1ED6  
     color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002                    _CCP1CONbits 0FAB  
            ?_color_read_Clear 0005                    _CCP2CONbits 0FA7              ?_color_read_Green 0005  
                  _CCP3CONbits 0F26                    ?_initUSART4 0001                    _CCP4CONbits 0F22  
    sendCharSerial4@charToSend 0001                     main@motorL 008D                     main@motorR 0096  
           ??_color_read_Clear 0007             ??_color_read_Green 0007                     max@max_val 0005  
                  vfpfcnvrt@ap 0010                    vfpfcnvrt@cp 0016                    vfpfcnvrt@fp 000E  
               __end_of___wmul 20D2                  __pidataCOMRAM 21A4                 __end_of_maxRGB 1D4A  
               __end_of_minRGB 1CF6      sendRGBCvalSerial4@col_val 003A       sendHSVvalSerial4@col_val 003A  
                   min@min_val 0005            color_read_Clear@tmp 000A            start_initialization 1A6A  
                  __end_of_ISR 0034                    __end_of_abs 1F98                    __end_of_max 202C  
                  __end_of_min 1FFC               _turnRight90Delay 00B5      sendRGBCvalSerial4@tempStr 003B  
     sendHSVvalSerial4@tempStr 003B            color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 19F6  
                  vfprintf@fmt 001D                       ??___wmul 0005                       ??_maxRGB 0009  
                     ??_minRGB 0009                    __pdataBANK0 00A7                    __pbssCOMRAM 005B  
                __pcstackBANK0 0087                 _wall_threshold 00B9   __end_of_toggle_tricolour_LED 1738  
                    _getHSVval 0E1A               ___lwdiv@dividend 0007                   ?_Timer0_init 0001  
                    __pintcode 0008                       ?___awdiv 0001                       ?___awmod 0001  
                     ?___lwdiv 0007                       ?___lwmod 0001           I2C_2_Master_Read@ack 0003  
         I2C_2_Master_Read@tmp 0004                    __smallconst 0E00              _I2C_2_Master_Idle 2084  
            _I2C_2_Master_Init 205A              _I2C_2_Master_Read 1F22              _I2C_2_Master_Stop 2190  
                  _maxRGB$3149 0009             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
                _headbuttDelay 00AD       initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 0020  
                    _rampDelay 005A                   ??_getRGBCval 000D              _sendStringSerial4 1B36  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
                  _minRGB$3150 0009                       _PIE0bits 0E29             ?_sendStringSerial4 0002  
                   ?_getHSVval 000E                       i2u110_40 002A                       i2u110_41 0026  
                ??_reset_timer 0003                       i2u109_40 001A                       i2u109_41 0016  
                     _PIR0bits 0E33                       _PIR4bits 0E37               ?_initDCmotorsPWM 0001  
            ??_sendCharSerial4 0001                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                      _returning 005D                      _vfpfcnvrt 122E  
    __end_of_I2C_2_Master_Idle 20AC      __end_of_I2C_2_Master_Init 2084      __end_of_I2C_2_Master_Read 1F64  
            ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 219A    I2C_2_Master_Write@data_byte 0002  
           __end_of_getRGBCval 1CA2     __end_of_sendRGBCvalSerial4 1BF6              ??_color_read_Blue 0007  
                   vfpfcnvrt@c 001B                      copy_data0 1A7E                      copy_data1 1A9E  
    __end_of_sendStringSerial4 1B98  __end_of_I2C_2_Master_RepStart 2190             color_read_Blue@tmp 000A  
                 ??_initUSART4 0001                       __Hrparam 0000                     vfprintf@ap 001E  
                     __Lrparam 0000                     vfprintf@fp 001C                     ?_vfpfcnvrt 000E  
          __end_of_reset_timer 217A                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                   sprintf@fmt 0022                     sprintf@ret 002B                     _T0CON0bits 0FD5  
                   _T0CON1bits 0FD6           _toggle_tricolour_LED 1670                ___lwdiv@divisor 0009  
           __end_of_initUSART4 2134                ___lwdiv@counter 000D                       __ptext10 1AD2  
                     __ptext11 18B6                       __ptext20 1DEA                       __ptext12 1738  
                     __ptext21 1E3A                       __ptext13 1B36                       __ptext30 19F6  
                     __ptext22 2186                       __ptext14 2134                       __ptext31 1F98  
                     __ptext23 1F22                       __ptext15 2116                       __ptext40 216E  
                     __ptext32 20F6                       __ptext24 0E1A                       __ptext16 1966  
                     __ptext41 217A                       __ptext33 2162                       __ptext25 1CA2  
                     __ptext17 1C4C                       __ptext34 2190                       __ptext26 1FCC  
                     __ptext18 1D4A                       __ptext35 219A                       __ptext27 1CF6  
                     __ptext19 1D9A                       __ptext36 2084                       __ptext28 1FFC  
                     __ptext37 205A                       __ptext29 20AC                       __ptext38 202C  
                     __ptext39 20D2                    getRGBCval@p 000C            main@measured_colour 009F  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA                    getHSVval@BB 0020  
                  ??_getHSVval 0010                    getHSVval@GG 001E                    getHSVval@RR 0018  
                  getHSVval@p1 000E                    getHSVval@p2 000F                       isa$xinst 0000  
                   _RC4STAbits 0EE7                       int$flags 005E                       _vfprintf 1BF6  
                   _INTCONbits 0FF2          ?_toggle_tricolour_LED 0001                  ??_write_timer 0002  
                     intlevel2 0000                      sprintf@ap 002D                   _topGearRight 00BC  
            _manoeuvre_pointer 00A7               ___lwmod@dividend 0001                 main@HSV_colour 0087  
                  _reset_timer 216E                    ??_vfpfcnvrt 0011               _color_click_init 1F98  
                  _topGearLeft 0059                       sprintf@f 002E                       sprintf@s 0020  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                ___lwmod@divisor 0003  
              ___lwmod@counter 0005                _trail_manoeuvre 0100                    _return_flag 005C  
              _manoeuvre_count 005B                     _TX4STAbits 0EE8                _sendCharSerial4 2134  
          __end_of_write_timer 2186  
