

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Feb 26 17:13:45 2024

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 05/05/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F67K40 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataCOMRAM
    56  01FDEC                     __pidataCOMRAM:
    57                           	callstack 0
    58                           
    59                           ;initializer for _squareDelay
    60  01FDEC  012C               	dw	300
    61                           
    62                           ;initializer for _headbuttDelay
    63  01FDEE  0046               	dw	70
    64                           
    65                           ;initializer for _turn180Delay
    66  01FDF0  01FE               	dw	510
    67                           
    68                           ;initializer for _turnRight135Delay
    69  01FDF2  012C               	dw	300
    70                           
    71                           ;initializer for _turnLeft135Delay
    72  01FDF4  012C               	dw	300
    73                           
    74                           ;initializer for _turnRight90Delay
    75  01FDF6  00AF               	dw	175
    76                           
    77                           ;initializer for _turnLeft90Delay
    78  01FDF8  00AF               	dw	175
    79                           
    80                           ;initializer for _turningGear
    81  01FDFA  2A                 	db	42
    82                           
    83                           ;initializer for _topGearRight
    84  01FDFB  20                 	db	32
    85                           
    86                           ;initializer for _topGearLeft
    87  01FDFC  1E                 	db	30
    88                           
    89                           ;initializer for _rampDelay
    90  01FDFD  08                 	db	8
    91  0000                     _PIE4bits	set	3629
    92  0000                     _TX4REG	set	3812
    93  0000                     _RC4REG	set	3811
    94  0000                     _PIR4bits	set	3639
    95  0000                     _RC4STAbits	set	3815
    96  0000                     _SP4BRGH	set	3814
    97  0000                     _SP4BRGL	set	3813
    98  0000                     _TX4STAbits	set	3816
    99  0000                     _BAUD4CONbits	set	3817
   100  0000                     _RX4PPS	set	3605
   101  0000                     _RC0PPS	set	3682
   102  0000                     _SSP2BUF	set	3797
   103  0000                     _SSP2CON2bits	set	3802
   104  0000                     _SSP2CON2	set	3802
   105  0000                     _SSP2STAT	set	3800
   106  0000                     _RD6PPS	set	3696
   107  0000                     _RD5PPS	set	3695
   108  0000                     _SSP2CLKPPS	set	3612
   109  0000                     _SSP2DATPPS	set	3613
   110  0000                     _ANSELDbits	set	3751
   111  0000                     _SSP2ADD	set	3798
   112  0000                     _SSP2CON1bits	set	3801
   113  0000                     _RG6PPS	set	3720
   114  0000                     _RC7PPS	set	3689
   115  0000                     _RE4PPS	set	3702
   116  0000                     _RE2PPS	set	3700
   117  0000                     _CCP4CONbits	set	3874
   118  0000                     _CCP3CONbits	set	3878
   119  0000                     _CCPR4H	set	3873
   120  0000                     _CCPR3H	set	3877
   121  0000                     _CCP2CONbits	set	4007
   122  0000                     _CCP1CONbits	set	4011
   123  0000                     _CCPTMRS0bits	set	4013
   124  0000                     _T2PR	set	4028
   125  0000                     _T2CLKCONbits	set	4031
   126  0000                     _T2HLTbits	set	4030
   127  0000                     _T2CONbits	set	4029
   128  0000                     _LATGbits	set	3967
   129  0000                     _LATCbits	set	3963
   130  0000                     _LATEbits	set	3965
   131  0000                     _TRISGbits	set	3975
   132  0000                     _TRISCbits	set	3971
   133  0000                     _TRISEbits	set	3973
   134  0000                     _LATFbits	set	3966
   135  0000                     _LATHbits	set	3968
   136  0000                     _LATDbits	set	3964
   137  0000                     _TRISFbits	set	3974
   138  0000                     _TRISHbits	set	3976
   139  0000                     _TRISDbits	set	3972
   140  0000                     _CCPR2H	set	4006
   141  0000                     _CCPR1H	set	4010
   142                           
   143                           ; #config settings
   144                           
   145                           	psect	cinit
   146  01FE1C                     __pcinit:
   147                           	callstack 0
   148  01FE1C                     start_initialization:
   149                           	callstack 0
   150  01FE1C                     __initialization:
   151                           	callstack 0
   152                           
   153                           ; Initialize objects allocated to COMRAM (18 bytes)
   154                           ; load TBLPTR registers with __pidataCOMRAM
   155  01FE1C  0EEC               	movlw	low __pidataCOMRAM
   156  01FE1E  6EF6               	movwf	tblptrl,c
   157  01FE20  0EFD               	movlw	high __pidataCOMRAM
   158  01FE22  6EF7               	movwf	tblptrh,c
   159  01FE24  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
   160  01FE26  6EF8               	movwf	tblptru,c
   161  01FE28  EE00  F02F         	lfsr	0,__pdataCOMRAM
   162  01FE2C  EE10 F012          	lfsr	1,18
   163  01FE30                     copy_data0:
   164  01FE30  0009               	tblrd		*+
   165  01FE32  CFF5 FFEE          	movff	tablat,postinc0
   166  01FE36  50E5               	movf	postdec1,w,c
   167  01FE38  50E1               	movf	fsr1l,w,c
   168  01FE3A  E1FA               	bnz	copy_data0
   169                           
   170                           ; Clear objects allocated to BANK0 (60 bytes)
   171  01FE3C  EE00  F060         	lfsr	0,__pbssBANK0
   172  01FE40  0E3C               	movlw	60
   173  01FE42                     clear_0:
   174  01FE42  6AEE               	clrf	postinc0,c
   175  01FE44  06E8               	decf	wreg,f,c
   176  01FE46  E1FD               	bnz	clear_0
   177                           
   178                           ; Clear objects allocated to COMRAM (24 bytes)
   179  01FE48  EE00  F001         	lfsr	0,__pbssCOMRAM
   180  01FE4C  0E18               	movlw	24
   181  01FE4E                     clear_1:
   182  01FE4E  6AEE               	clrf	postinc0,c
   183  01FE50  06E8               	decf	wreg,f,c
   184  01FE52  E1FD               	bnz	clear_1
   185  01FE54                     end_of_initialization:
   186                           	callstack 0
   187  01FE54                     __end_of__initialization:
   188                           	callstack 0
   189  01FE54  0100               	movlb	0
   190  01FE56  EF2D  F0FF         	goto	_main	;jump to C main() function
   191                           
   192                           	psect	bssCOMRAM
   193  000001                     __pbssCOMRAM:
   194                           	callstack 0
   195  000001                     _EUSART4RXbuf:
   196                           	callstack 0
   197  000001                     	ds	20
   198  000015                     _TxBufReadCnt:
   199                           	callstack 0
   200  000015                     	ds	1
   201  000016                     _TxBufWriteCnt:
   202                           	callstack 0
   203  000016                     	ds	1
   204  000017                     _RxBufReadCnt:
   205                           	callstack 0
   206  000017                     	ds	1
   207  000018                     _RxBufWriteCnt:
   208                           	callstack 0
   209  000018                     	ds	1
   210                           
   211                           	psect	dataCOMRAM
   212  00002F                     __pdataCOMRAM:
   213                           	callstack 0
   214  00002F                     _squareDelay:
   215                           	callstack 0
   216  00002F                     	ds	2
   217  000031                     _headbuttDelay:
   218                           	callstack 0
   219  000031                     	ds	2
   220  000033                     _turn180Delay:
   221                           	callstack 0
   222  000033                     	ds	2
   223  000035                     _turnRight135Delay:
   224                           	callstack 0
   225  000035                     	ds	2
   226  000037                     _turnLeft135Delay:
   227                           	callstack 0
   228  000037                     	ds	2
   229  000039                     _turnRight90Delay:
   230                           	callstack 0
   231  000039                     	ds	2
   232  00003B                     _turnLeft90Delay:
   233                           	callstack 0
   234  00003B                     	ds	2
   235  00003D                     _turningGear:
   236                           	callstack 0
   237  00003D                     	ds	1
   238  00003E                     _topGearRight:
   239                           	callstack 0
   240  00003E                     	ds	1
   241  00003F                     _topGearLeft:
   242                           	callstack 0
   243  00003F                     	ds	1
   244  000040                     _rampDelay:
   245                           	callstack 0
   246  000040                     	ds	1
   247                           
   248                           	psect	bssBANK0
   249  000060                     __pbssBANK0:
   250                           	callstack 0
   251  000060                     _EUSART4TXbuf:
   252                           	callstack 0
   253  000060                     	ds	60
   254                           
   255                           	psect	cstackCOMRAM
   256  000019                     __pcstackCOMRAM:
   257                           	callstack 0
   258  000019                     ??_lights_flashing:
   259  000019                     initDCmotorsPWM@PWMperiod:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x0
   263  000019                     	ds	2
   264  00001B                     ??_main:
   265                           
   266                           ; 1 bytes @ 0x2
   267  00001B                     	ds	2
   268  00001D                     main@motorL:
   269                           	callstack 0
   270                           
   271                           ; 9 bytes @ 0x4
   272  00001D                     	ds	9
   273  000026                     main@motorR:
   274                           	callstack 0
   275                           
   276                           ; 9 bytes @ 0xD
   277  000026                     	ds	9
   278                           
   279 ;;
   280 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   281 ;;
   282 ;; *************** function _main *****************
   283 ;; Defined at:
   284 ;;		line 23 in file "main.c"
   285 ;; Parameters:    Size  Location     Type
   286 ;;		None
   287 ;; Auto vars:     Size  Location     Type
   288 ;;  motorR          9   13[COMRAM] struct DC_motor
   289 ;;  motorL          9    4[COMRAM] struct DC_motor
   290 ;;  PWMcycle        2    0        unsigned int 
   291 ;;  backtrack       1    0        unsigned char 
   292 ;; Return value:  Size  Location     Type
   293 ;;                  1    wreg      void 
   294 ;; Registers used:
   295 ;;		wreg, status,2, status,0, cstack
   296 ;; Tracked objects:
   297 ;;		On entry : 0/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   302 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   303 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   304 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   305 ;;Total ram usage:       20 bytes
   306 ;; Hardware stack levels required when called: 1
   307 ;; This function calls:
   308 ;;		_buggy_lights_init
   309 ;;		_initDCmotorsPWM
   310 ;;		_lights_flashing
   311 ;; This function is called by:
   312 ;;		Startup code after reset
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text0
   317  01FE5A                     __ptext0:
   318                           	callstack 0
   319  01FE5A                     _main:
   320                           	callstack 30
   321  01FE5A                     
   322                           ;main.c: 24:     _delay((unsigned long)((500)*(64000000/4000.0)));
   323  01FE5A  0E29               	movlw	41
   324  01FE5C  6E1C               	movwf	(??_main+1)^0,c
   325  01FE5E  0E96               	movlw	150
   326  01FE60  6E1B               	movwf	??_main^0,c
   327  01FE62  0E7F               	movlw	127
   328  01FE64                     u357:
   329  01FE64  2EE8               	decfsz	wreg,f,c
   330  01FE66  D7FE               	bra	u357
   331  01FE68  2E1B               	decfsz	??_main^0,f,c
   332  01FE6A  D7FC               	bra	u357
   333  01FE6C  2E1C               	decfsz	(??_main+1)^0,f,c
   334  01FE6E  D7FA               	bra	u357
   335  01FE70  F000               	nop	
   336  01FE72                     
   337                           ;main.c: 27:     initDCmotorsPWM(PWMcycle);
   338  01FE72  0E00               	movlw	0
   339  01FE74  6E1A               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   340  01FE76  0E63               	movlw	99
   341  01FE78  6E19               	movwf	initDCmotorsPWM@PWMperiod^0,c
   342  01FE7A  EC6B  F0FF         	call	_initDCmotorsPWM	;wreg free
   343  01FE7E                     
   344                           ;main.c: 29:     struct DC_motor motorL, motorR;;main.c: 31:     motorL.power = 0;
   345  01FE7E  0E00               	movlw	0
   346  01FE80  6E1D               	movwf	main@motorL^0,c
   347  01FE82                     
   348                           ;main.c: 32:     motorL.direction = 1;
   349  01FE82  0E01               	movlw	1
   350  01FE84  6E1E               	movwf	(main@motorL+1)^0,c
   351  01FE86                     
   352                           ;main.c: 33:     motorL.brakemode = 1;
   353  01FE86  0E01               	movlw	1
   354  01FE88  6E1F               	movwf	(main@motorL+2)^0,c
   355  01FE8A                     
   356                           ;main.c: 34:     motorL.PWMperiod = PWMcycle;
   357  01FE8A  0E00               	movlw	0
   358  01FE8C  6E21               	movwf	(main@motorL+4)^0,c
   359  01FE8E  0E63               	movlw	99
   360  01FE90  6E20               	movwf	(main@motorL+3)^0,c
   361  01FE92                     
   362                           ;main.c: 35:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   363  01FE92  0EAA               	movlw	170
   364  01FE94  6E22               	movwf	(main@motorL+5)^0,c
   365  01FE96  0E0F               	movlw	15
   366  01FE98  6E23               	movwf	(main@motorL+6)^0,c
   367  01FE9A                     
   368                           ;main.c: 36:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   369  01FE9A  0EA6               	movlw	166
   370  01FE9C  6E24               	movwf	(main@motorL+7)^0,c
   371  01FE9E  0E0F               	movlw	15
   372  01FEA0  6E25               	movwf	(main@motorL+8)^0,c
   373  01FEA2                     
   374                           ;main.c: 38:     motorR.power = 0;
   375  01FEA2  0E00               	movlw	0
   376  01FEA4  6E26               	movwf	main@motorR^0,c
   377  01FEA6                     
   378                           ;main.c: 39:     motorR.direction = 1;
   379  01FEA6  0E01               	movlw	1
   380  01FEA8  6E27               	movwf	(main@motorR+1)^0,c
   381  01FEAA                     
   382                           ;main.c: 40:     motorR.brakemode = 1;
   383  01FEAA  0E01               	movlw	1
   384  01FEAC  6E28               	movwf	(main@motorR+2)^0,c
   385  01FEAE                     
   386                           ;main.c: 41:     motorR.PWMperiod = PWMcycle;
   387  01FEAE  0E00               	movlw	0
   388  01FEB0  6E2A               	movwf	(main@motorR+4)^0,c
   389  01FEB2  0E63               	movlw	99
   390  01FEB4  6E29               	movwf	(main@motorR+3)^0,c
   391  01FEB6                     
   392                           ;main.c: 42:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   393  01FEB6  0E25               	movlw	37
   394  01FEB8  6E2B               	movwf	(main@motorR+5)^0,c
   395  01FEBA  0E0F               	movlw	15
   396  01FEBC  6E2C               	movwf	(main@motorR+6)^0,c
   397  01FEBE                     
   398                           ;main.c: 43:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   399  01FEBE  0E21               	movlw	33
   400  01FEC0  6E2D               	movwf	(main@motorR+7)^0,c
   401  01FEC2  0E0F               	movlw	15
   402  01FEC4  6E2E               	movwf	(main@motorR+8)^0,c
   403  01FEC6                     
   404                           ;main.c: 45:     buggy_lights_init();
   405  01FEC6  ECFF  F0FE         	call	_buggy_lights_init	;wreg free
   406  01FECA                     l1641:
   407                           
   408                           ;main.c: 59:         lights_flashing();
   409  01FECA  ECB3  F0FF         	call	_lights_flashing	;wreg free
   410  01FECE  EF65  F0FF         	goto	l1641
   411  01FED2  EF00  F000         	goto	start
   412  01FED6                     __end_of_main:
   413                           	callstack 0
   414                           
   415 ;; *************** function _lights_flashing *****************
   416 ;; Defined at:
   417 ;;		line 29 in file "buggy_lights.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, status,2, status,0
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   435 ;;Total ram usage:        2 bytes
   436 ;; Hardware stack levels used: 1
   437 ;; This function calls:
   438 ;;		Nothing
   439 ;; This function is called by:
   440 ;;		_main
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           	psect	text1
   445  01FF66                     __ptext1:
   446                           	callstack 0
   447  01FF66                     _lights_flashing:
   448                           	callstack 30
   449  01FF66                     
   450                           ;buggy_lights.c: 31:     LATDbits.LATD4 = !LATDbits.LATD4;
   451  01FF66  A87C               	btfss	124,4,c	;volatile
   452  01FF68  EFB8  F0FF         	goto	u101
   453  01FF6C  EFBC  F0FF         	goto	u100
   454  01FF70                     u101:
   455  01FF70  6A19               	clrf	??_lights_flashing^0,c
   456  01FF72  2A19               	incf	??_lights_flashing^0,f,c
   457  01FF74  EFBD  F0FF         	goto	u118
   458  01FF78                     u100:
   459  01FF78  6A19               	clrf	??_lights_flashing^0,c
   460  01FF7A                     u118:
   461  01FF7A  3A19               	swapf	??_lights_flashing^0,f,c
   462  01FF7C  507C               	movf	124,w,c	;volatile
   463  01FF7E  1819               	xorwf	??_lights_flashing^0,w,c
   464  01FF80  0BEF               	andlw	-17
   465  01FF82  1819               	xorwf	??_lights_flashing^0,w,c
   466  01FF84  6E7C               	movwf	124,c	;volatile
   467                           
   468                           ;buggy_lights.c: 32:     LATDbits.LATD3 = !LATDbits.LATD3;
   469  01FF86  A67C               	btfss	124,3,c	;volatile
   470  01FF88  EFC8  F0FF         	goto	u121
   471  01FF8C  EFCC  F0FF         	goto	u120
   472  01FF90                     u121:
   473  01FF90  6A19               	clrf	??_lights_flashing^0,c
   474  01FF92  2A19               	incf	??_lights_flashing^0,f,c
   475  01FF94  EFCD  F0FF         	goto	u138
   476  01FF98                     u120:
   477  01FF98  6A19               	clrf	??_lights_flashing^0,c
   478  01FF9A                     u138:
   479  01FF9A  4619               	rlncf	??_lights_flashing^0,f,c
   480  01FF9C  4619               	rlncf	??_lights_flashing^0,f,c
   481  01FF9E  4619               	rlncf	??_lights_flashing^0,f,c
   482  01FFA0  507C               	movf	124,w,c	;volatile
   483  01FFA2  1819               	xorwf	??_lights_flashing^0,w,c
   484  01FFA4  0BF7               	andlw	-9
   485  01FFA6  1819               	xorwf	??_lights_flashing^0,w,c
   486  01FFA8  6E7C               	movwf	124,c	;volatile
   487  01FFAA                     
   488                           ;buggy_lights.c: 33:     _delay((unsigned long)((500)*(64000000/4000.0)));
   489  01FFAA  0E29               	movlw	41
   490  01FFAC  6E1A               	movwf	(??_lights_flashing+1)^0,c
   491  01FFAE  0E96               	movlw	150
   492  01FFB0  6E19               	movwf	??_lights_flashing^0,c
   493  01FFB2  0E7F               	movlw	127
   494  01FFB4                     u367:
   495  01FFB4  2EE8               	decfsz	wreg,f,c
   496  01FFB6  D7FE               	bra	u367
   497  01FFB8  2E19               	decfsz	??_lights_flashing^0,f,c
   498  01FFBA  D7FC               	bra	u367
   499  01FFBC  2E1A               	decfsz	(??_lights_flashing+1)^0,f,c
   500  01FFBE  D7FA               	bra	u367
   501  01FFC0  F000               	nop	
   502  01FFC2                     
   503                           ;buggy_lights.c: 34:     LATFbits.LATF0 = !LATFbits.LATF0;
   504  01FFC2  A07E               	btfss	126,0,c	;volatile
   505  01FFC4  EFE6  F0FF         	goto	u141
   506  01FFC8  EFEA  F0FF         	goto	u140
   507  01FFCC                     u141:
   508  01FFCC  6A19               	clrf	??_lights_flashing^0,c
   509  01FFCE  2A19               	incf	??_lights_flashing^0,f,c
   510  01FFD0  EFEB  F0FF         	goto	u158
   511  01FFD4                     u140:
   512  01FFD4  6A19               	clrf	??_lights_flashing^0,c
   513  01FFD6                     u158:
   514  01FFD6  507E               	movf	126,w,c	;volatile
   515  01FFD8  1819               	xorwf	??_lights_flashing^0,w,c
   516  01FFDA  0BFE               	andlw	-2
   517  01FFDC  1819               	xorwf	??_lights_flashing^0,w,c
   518  01FFDE  6E7E               	movwf	126,c	;volatile
   519  01FFE0                     
   520                           ;buggy_lights.c: 35:     LATHbits.LATH0 = !LATHbits.LATH0;
   521  01FFE0  A080               	btfss	128,0,c	;volatile
   522  01FFE2  EFF5  F0FF         	goto	u161
   523  01FFE6  EFF9  F0FF         	goto	u160
   524  01FFEA                     u161:
   525  01FFEA  6A19               	clrf	??_lights_flashing^0,c
   526  01FFEC  2A19               	incf	??_lights_flashing^0,f,c
   527  01FFEE  EFFA  F0FF         	goto	u178
   528  01FFF2                     u160:
   529  01FFF2  6A19               	clrf	??_lights_flashing^0,c
   530  01FFF4                     u178:
   531  01FFF4  5080               	movf	128,w,c	;volatile
   532  01FFF6  1819               	xorwf	??_lights_flashing^0,w,c
   533  01FFF8  0BFE               	andlw	-2
   534  01FFFA  1819               	xorwf	??_lights_flashing^0,w,c
   535  01FFFC  6E80               	movwf	128,c	;volatile
   536  01FFFE  0012               	return		;funcret
   537  020000                     __end_of_lights_flashing:
   538                           	callstack 0
   539                           
   540 ;; *************** function _initDCmotorsPWM *****************
   541 ;; Defined at:
   542 ;;		line 5 in file "dc_motor.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   545 ;; Auto vars:     Size  Location     Type
   546 ;;		None
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg, status,2
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   556 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   559 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   560 ;;Total ram usage:        2 bytes
   561 ;; Hardware stack levels used: 1
   562 ;; This function calls:
   563 ;;		Nothing
   564 ;; This function is called by:
   565 ;;		_main
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text2
   570  01FED6                     __ptext2:
   571                           	callstack 0
   572  01FED6                     _initDCmotorsPWM:
   573                           	callstack 30
   574  01FED6                     
   575                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   576  01FED6  9485               	bcf	133,2,c	;volatile
   577                           
   578                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   579  01FED8  9885               	bcf	133,4,c	;volatile
   580                           
   581                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   582  01FEDA  9E83               	bcf	131,7,c	;volatile
   583                           
   584                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   585  01FEDC  9C87               	bcf	135,6,c	;volatile
   586                           
   587                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   588  01FEDE  947D               	bcf	125,2,c	;volatile
   589                           
   590                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   591  01FEE0  987D               	bcf	125,4,c	;volatile
   592                           
   593                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   594  01FEE2  9E7B               	bcf	123,7,c	;volatile
   595                           
   596                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   597  01FEE4  9C7F               	bcf	127,6,c	;volatile
   598  01FEE6                     
   599                           ;dc_motor.c: 18:     RE2PPS=0x05;
   600  01FEE6  0E05               	movlw	5
   601  01FEE8  010E               	movlb	14	; () banked
   602  01FEEA  6F74               	movwf	116,b	;volatile
   603                           
   604                           ;dc_motor.c: 19:     RE4PPS=0x06;
   605  01FEEC  0E06               	movlw	6
   606  01FEEE  6F76               	movwf	118,b	;volatile
   607                           
   608                           ;dc_motor.c: 20:     RC7PPS=0x07;
   609  01FEF0  0E07               	movlw	7
   610  01FEF2  6F69               	movwf	105,b	;volatile
   611                           
   612                           ;dc_motor.c: 21:     RG6PPS=0x08;
   613  01FEF4  0E08               	movlw	8
   614  01FEF6  6F88               	movwf	136,b	;volatile
   615                           
   616                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   617  01FEF8  50BD               	movf	189,w,c	;volatile
   618  01FEFA  0B8F               	andlw	-113
   619  01FEFC  0940               	iorlw	64
   620  01FEFE  6EBD               	movwf	189,c	;volatile
   621                           
   622                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   623  01FF00  0EE0               	movlw	-32
   624  01FF02  16BE               	andwf	190,f,c	;volatile
   625                           
   626                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   627  01FF04  50BF               	movf	191,w,c	;volatile
   628  01FF06  0BF0               	andlw	-16
   629  01FF08  0901               	iorlw	1
   630  01FF0A  6EBF               	movwf	191,c	;volatile
   631  01FF0C                     
   632                           ; BSR set to: 14
   633                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   634  01FF0C  C019  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   635  01FF10                     
   636                           ; BSR set to: 14
   637                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   638  01FF10  8EBD               	bsf	189,7,c	;volatile
   639                           
   640                           ;dc_motor.c: 35:     CCPR1H=0;
   641  01FF12  0E00               	movlw	0
   642  01FF14  6EAA               	movwf	170,c	;volatile
   643                           
   644                           ;dc_motor.c: 36:     CCPR2H=0;
   645  01FF16  0E00               	movlw	0
   646  01FF18  6EA6               	movwf	166,c	;volatile
   647                           
   648                           ;dc_motor.c: 37:     CCPR3H=0;
   649  01FF1A  0E00               	movlw	0
   650  01FF1C  010F               	movlb	15	; () banked
   651  01FF1E  6F25               	movwf	37,b	;volatile
   652                           
   653                           ;dc_motor.c: 38:     CCPR4H=0;
   654  01FF20  0E00               	movlw	0
   655  01FF22  6F21               	movwf	33,b	;volatile
   656                           
   657                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   658  01FF24  0EFC               	movlw	-4
   659  01FF26  16AD               	andwf	173,f,c	;volatile
   660                           
   661                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   662  01FF28  0EF3               	movlw	-13
   663  01FF2A  16AD               	andwf	173,f,c	;volatile
   664                           
   665                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   666  01FF2C  0ECF               	movlw	-49
   667  01FF2E  16AD               	andwf	173,f,c	;volatile
   668                           
   669                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   670  01FF30  0E3F               	movlw	-193
   671  01FF32  16AD               	andwf	173,f,c	;volatile
   672  01FF34                     
   673                           ; BSR set to: 15
   674                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   675  01FF34  88AB               	bsf	171,4,c	;volatile
   676                           
   677                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   678  01FF36  50AB               	movf	171,w,c	;volatile
   679  01FF38  0BF0               	andlw	-16
   680  01FF3A  090C               	iorlw	12
   681  01FF3C  6EAB               	movwf	171,c	;volatile
   682  01FF3E                     
   683                           ; BSR set to: 15
   684                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   685  01FF3E  8EAB               	bsf	171,7,c	;volatile
   686  01FF40                     
   687                           ; BSR set to: 15
   688                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   689  01FF40  88A7               	bsf	167,4,c	;volatile
   690                           
   691                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   692  01FF42  50A7               	movf	167,w,c	;volatile
   693  01FF44  0BF0               	andlw	-16
   694  01FF46  090C               	iorlw	12
   695  01FF48  6EA7               	movwf	167,c	;volatile
   696  01FF4A                     
   697                           ; BSR set to: 15
   698                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   699  01FF4A  8EA7               	bsf	167,7,c	;volatile
   700  01FF4C                     
   701                           ; BSR set to: 15
   702                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   703  01FF4C  8926               	bsf	38,4,b	;volatile
   704                           
   705                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   706  01FF4E  5126               	movf	38,w,b	;volatile
   707  01FF50  0BF0               	andlw	-16
   708  01FF52  090C               	iorlw	12
   709  01FF54  6F26               	movwf	38,b	;volatile
   710  01FF56                     
   711                           ; BSR set to: 15
   712                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   713  01FF56  8F26               	bsf	38,7,b	;volatile
   714  01FF58                     
   715                           ; BSR set to: 15
   716                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   717  01FF58  8922               	bsf	34,4,b	;volatile
   718                           
   719                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   720  01FF5A  5122               	movf	34,w,b	;volatile
   721  01FF5C  0BF0               	andlw	-16
   722  01FF5E  090C               	iorlw	12
   723  01FF60  6F22               	movwf	34,b	;volatile
   724  01FF62                     
   725                           ; BSR set to: 15
   726                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   727  01FF62  8F22               	bsf	34,7,b	;volatile
   728  01FF64                     
   729                           ; BSR set to: 15
   730  01FF64  0012               	return		;funcret
   731  01FF66                     __end_of_initDCmotorsPWM:
   732                           	callstack 0
   733                           
   734 ;; *************** function _buggy_lights_init *****************
   735 ;; Defined at:
   736 ;;		line 4 in file "buggy_lights.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;		None
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		None
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   754 ;;Total ram usage:        0 bytes
   755 ;; Hardware stack levels used: 1
   756 ;; This function calls:
   757 ;;		Nothing
   758 ;; This function is called by:
   759 ;;		_main
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text3
   764  01FDFE                     __ptext3:
   765                           	callstack 0
   766  01FDFE                     _buggy_lights_init:
   767                           	callstack 30
   768  01FDFE                     
   769                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
   770  01FDFE  9884               	bcf	132,4,c	;volatile
   771                           
   772                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
   773  01FE00  9288               	bcf	136,1,c	;volatile
   774                           
   775                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
   776  01FE02  9684               	bcf	132,3,c	;volatile
   777                           
   778                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
   779  01FE04  9086               	bcf	134,0,c	;volatile
   780                           
   781                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
   782  01FE06  9088               	bcf	136,0,c	;volatile
   783                           
   784                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
   785  01FE08  887C               	bsf	124,4,c	;volatile
   786                           
   787                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
   788  01FE0A  8280               	bsf	128,1,c	;volatile
   789                           
   790                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
   791  01FE0C  867C               	bsf	124,3,c	;volatile
   792                           
   793                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
   794  01FE0E  807E               	bsf	126,0,c	;volatile
   795                           
   796                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
   797  01FE10  8080               	bsf	128,0,c	;volatile
   798                           
   799                           ;buggy_lights.c: 22:     TRISDbits.TRISD7 = 0;
   800  01FE12  9E84               	bcf	132,7,c	;volatile
   801                           
   802                           ;buggy_lights.c: 23:     TRISHbits.TRISH3 = 0;
   803  01FE14  9688               	bcf	136,3,c	;volatile
   804                           
   805                           ;buggy_lights.c: 25:     LATDbits.LATD7 = 1;
   806  01FE16  8E7C               	bsf	124,7,c	;volatile
   807                           
   808                           ;buggy_lights.c: 26:     LATHbits.LATH3 = 1;
   809  01FE18  8680               	bsf	128,3,c	;volatile
   810  01FE1A  0012               	return		;funcret
   811  01FE1C                     __end_of_buggy_lights_init:
   812                           	callstack 0
   813  0000                     
   814                           	psect	rparam
   815  0000                     
   816                           	psect	idloc
   817                           
   818                           ;Config register IDLOC0 @ 0x200000
   819                           ;	unspecified, using default values
   820  200000                     	org	2097152
   821  200000  0FFF               	dw	4095
   822                           
   823                           ;Config register IDLOC1 @ 0x200002
   824                           ;	unspecified, using default values
   825  200002                     	org	2097154
   826  200002  0FFF               	dw	4095
   827                           
   828                           ;Config register IDLOC2 @ 0x200004
   829                           ;	unspecified, using default values
   830  200004                     	org	2097156
   831  200004  0FFF               	dw	4095
   832                           
   833                           ;Config register IDLOC3 @ 0x200006
   834                           ;	unspecified, using default values
   835  200006                     	org	2097158
   836  200006  0FFF               	dw	4095
   837                           
   838                           ;Config register IDLOC4 @ 0x200008
   839                           ;	unspecified, using default values
   840  200008                     	org	2097160
   841  200008  0FFF               	dw	4095
   842                           
   843                           ;Config register IDLOC5 @ 0x20000A
   844                           ;	unspecified, using default values
   845  20000A                     	org	2097162
   846  20000A  0FFF               	dw	4095
   847                           
   848                           ;Config register IDLOC6 @ 0x20000C
   849                           ;	unspecified, using default values
   850  20000C                     	org	2097164
   851  20000C  0FFF               	dw	4095
   852                           
   853                           ;Config register IDLOC7 @ 0x20000E
   854                           ;	unspecified, using default values
   855  20000E                     	org	2097166
   856  20000E  0FFF               	dw	4095
   857                           
   858                           	psect	config
   859                           
   860                           ;Config register CONFIG1L @ 0x300000
   861                           ;	External Oscillator mode Selection bits
   862                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   863                           ;	Power-up default value for COSC bits
   864                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   865  300000                     	org	3145728
   866  300000  AA                 	db	170
   867                           
   868                           ;Config register CONFIG1H @ 0x300001
   869                           ;	unspecified, using default values
   870                           ;	Clock Out Enable bit
   871                           ;	CLKOUTEN = 0x1, unprogrammed default
   872                           ;	Clock Switch Enable bit
   873                           ;	CSWEN = 0x1, unprogrammed default
   874                           ;	Fail-Safe Clock Monitor Enable bit
   875                           ;	FCMEN = 0x1, unprogrammed default
   876  300001                     	org	3145729
   877  300001  FF                 	db	255
   878                           
   879                           ;Config register CONFIG2L @ 0x300002
   880                           ;	unspecified, using default values
   881                           ;	Master Clear Enable bit
   882                           ;	MCLRE = 0x1, unprogrammed default
   883                           ;	Power-up Timer Enable bit
   884                           ;	PWRTE = 0x1, unprogrammed default
   885                           ;	Low-power BOR enable bit
   886                           ;	LPBOREN = 0x1, unprogrammed default
   887                           ;	Brown-out Reset Enable bits
   888                           ;	BOREN = 0x3, unprogrammed default
   889  300002                     	org	3145730
   890  300002  FF                 	db	255
   891                           
   892                           ;Config register CONFIG2H @ 0x300003
   893                           ;	unspecified, using default values
   894                           ;	Brown Out Reset Voltage selection bits
   895                           ;	BORV = 0x3, unprogrammed default
   896                           ;	ZCD Disable bit
   897                           ;	ZCD = 0x1, unprogrammed default
   898                           ;	PPSLOCK bit One-Way Set Enable bit
   899                           ;	PPS1WAY = 0x1, unprogrammed default
   900                           ;	Stack Full/Underflow Reset Enable bit
   901                           ;	STVREN = 0x1, unprogrammed default
   902                           ;	Debugger Enable bit
   903                           ;	DEBUG = 0x1, unprogrammed default
   904                           ;	Extended Instruction Set Enable bit
   905                           ;	XINST = 0x1, unprogrammed default
   906  300003                     	org	3145731
   907  300003  FF                 	db	255
   908                           
   909                           ;Config register CONFIG3L @ 0x300004
   910                           ;	WDT Period Select bits
   911                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   912                           ;	WDT operating mode
   913                           ;	WDTE = OFF, WDT Disabled
   914  300004                     	org	3145732
   915  300004  9F                 	db	159
   916                           
   917                           ;Config register CONFIG3H @ 0x300005
   918                           ;	unspecified, using default values
   919                           ;	WDT Window Select bits
   920                           ;	WDTCWS = 0x7, unprogrammed default
   921                           ;	WDT input clock selector
   922                           ;	WDTCCS = 0x7, unprogrammed default
   923  300005                     	org	3145733
   924  300005  FF                 	db	255
   925                           
   926                           ;Config register CONFIG4L @ 0x300006
   927                           ;	unspecified, using default values
   928                           ;	Write Protection Block 0
   929                           ;	WRT0 = 0x1, unprogrammed default
   930                           ;	Write Protection Block 1
   931                           ;	WRT1 = 0x1, unprogrammed default
   932                           ;	Write Protection Block 2
   933                           ;	WRT2 = 0x1, unprogrammed default
   934                           ;	Write Protection Block 3
   935                           ;	WRT3 = 0x1, unprogrammed default
   936                           ;	Write Protection Block 3
   937                           ;	WRT4 = 0x1, unprogrammed default
   938                           ;	Write Protection Block 3
   939                           ;	WRT5 = 0x1, unprogrammed default
   940                           ;	Write Protection Block 3
   941                           ;	WRT6 = 0x1, unprogrammed default
   942                           ;	Write Protection Block 3
   943                           ;	WRT7 = 0x1, unprogrammed default
   944  300006                     	org	3145734
   945  300006  FF                 	db	255
   946                           
   947                           ;Config register CONFIG4H @ 0x300007
   948                           ;	unspecified, using default values
   949                           ;	Configuration Register Write Protection bit
   950                           ;	WRTC = 0x1, unprogrammed default
   951                           ;	Boot Block Write Protection bit
   952                           ;	WRTB = 0x1, unprogrammed default
   953                           ;	Data EEPROM Write Protection bit
   954                           ;	WRTD = 0x1, unprogrammed default
   955                           ;	Scanner Enable bit
   956                           ;	SCANE = 0x1, unprogrammed default
   957                           ;	Low Voltage Programming Enable bit
   958                           ;	LVP = 0x1, unprogrammed default
   959  300007                     	org	3145735
   960  300007  FF                 	db	255
   961                           
   962                           ;Config register CONFIG5L @ 0x300008
   963                           ;	unspecified, using default values
   964                           ;	UserNVM Program Memory Code Protection bit
   965                           ;	CP = 0x1, unprogrammed default
   966                           ;	DataNVM Memory Code Protection bit
   967                           ;	CPD = 0x1, unprogrammed default
   968  300008                     	org	3145736
   969  300008  FF                 	db	255
   970                           
   971                           ;Config register CONFIG5H @ 0x300009
   972                           ;	unspecified, using default values
   973  300009                     	org	3145737
   974  300009  FF                 	db	255
   975                           
   976                           ;Config register CONFIG6L @ 0x30000A
   977                           ;	unspecified, using default values
   978                           ;	Table Read Protection Block 0
   979                           ;	EBTR0 = 0x1, unprogrammed default
   980                           ;	Table Read Protection Block 1
   981                           ;	EBTR1 = 0x1, unprogrammed default
   982                           ;	Table Read Protection Block 2
   983                           ;	EBTR2 = 0x1, unprogrammed default
   984                           ;	Table Read Protection Block 3
   985                           ;	EBTR3 = 0x1, unprogrammed default
   986                           ;	Table Read Protection Block 4
   987                           ;	EBTR4 = 0x1, unprogrammed default
   988                           ;	Table Read Protection Block 5
   989                           ;	EBTR5 = 0x1, unprogrammed default
   990                           ;	Table Read Protection Block 6
   991                           ;	EBTR6 = 0x1, unprogrammed default
   992                           ;	Table Read Protection Block 7
   993                           ;	EBTR7 = 0x1, unprogrammed default
   994  30000A                     	org	3145738
   995  30000A  FF                 	db	255
   996                           
   997                           ;Config register CONFIG6H @ 0x30000B
   998                           ;	unspecified, using default values
   999                           ;	Boot Block Table Read Protection bit
  1000                           ;	EBTRB = 0x1, unprogrammed default
  1001  30000B                     	org	3145739
  1002  30000B  FF                 	db	255
  1003                           tosu	equ	0xFFF
  1004                           tosh	equ	0xFFE
  1005                           tosl	equ	0xFFD
  1006                           stkptr	equ	0xFFC
  1007                           pclatu	equ	0xFFB
  1008                           pclath	equ	0xFFA
  1009                           pcl	equ	0xFF9
  1010                           tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           prodh	equ	0xFF4
  1015                           prodl	equ	0xFF3
  1016                           indf0	equ	0xFEF
  1017                           postinc0	equ	0xFEE
  1018                           postdec0	equ	0xFED
  1019                           preinc0	equ	0xFEC
  1020                           plusw0	equ	0xFEB
  1021                           fsr0h	equ	0xFEA
  1022                           fsr0l	equ	0xFE9
  1023                           wreg	equ	0xFE8
  1024                           indf1	equ	0xFE7
  1025                           postinc1	equ	0xFE6
  1026                           postdec1	equ	0xFE5
  1027                           preinc1	equ	0xFE4
  1028                           plusw1	equ	0xFE3
  1029                           fsr1h	equ	0xFE2
  1030                           fsr1l	equ	0xFE1
  1031                           bsr	equ	0xFE0
  1032                           indf2	equ	0xFDF
  1033                           postinc2	equ	0xFDE
  1034                           postdec2	equ	0xFDD
  1035                           preinc2	equ	0xFDC
  1036                           plusw2	equ	0xFDB
  1037                           fsr2h	equ	0xFDA
  1038                           fsr2l	equ	0xFD9
  1039                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      64
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    fullSpeedReverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    fullSpeedReverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    fullSpeedReverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    fullSpeedReverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    S910DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    S910DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM
    _main->_lights_flashing

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0     408
                                              2 COMRAM    20    20      0
                  _buggy_lights_init
                    _initDCmotorsPWM
                    _lights_flashing
 ---------------------------------------------------------------------------------
 (1) _lights_flashing                                      2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _initDCmotorsPWM
   _lights_flashing

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      40       1       67.4%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7C       8        0.0%
DATA                 0      0      7C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Feb 26 17:13:45 2024

              _turn180Delay 0033                          l20 FFFE                          l17 FE1A  
                       l130 FF64                         u100 FF78                         u101 FF70  
                       u120 FF98                         u121 FF90                         u140 FFD4  
                       u141 FFCC                         u118 FF7A                         u160 FFF2  
                       u161 FFEA                         u138 FF9A                         u158 FFD6  
                       u178 FFF4                         u357 FE64                         u367 FFB4  
                       wreg 000FE8                 _squareDelay 002F                        l1211 FFAA  
                      l1213 FFC2                        l1207 FDFE                        l1215 FFE0  
                      l1209 FF66                        l1601 FF56                        l1603 FF58  
                      l1611 FE72                        l1605 FF62                        l1621 FE92  
                      l1613 FE7E                        l1631 FEAE                        l1623 FE9A  
                      l1615 FE82                        l1607 FE5A                        l1641 FECA  
                      l1633 FEB6                        l1625 FEA2                        l1617 FE86  
                      l1609 FE72                        l1635 FEBE                        l1627 FEA6  
                      l1619 FE8A                        l1637 FEC6                        l1629 FEAA  
                      l1591 FF34                        l1583 FED6                        l1639 FECA  
                      l1593 FF3E                        l1585 FEE6                        l1595 FF40  
                      l1587 FF0C                        l1597 FF4A                        l1589 FF10  
                      l1599 FF4C                _BAUD4CONbits 000EE9                        _T2PR 000FBC  
                      _main FE5A                        fsr1l 000FE1                        start 0000  
              ___param_bank 000000                       ?_main 0019    __size_of_initDCmotorsPWM 0090  
               _turningGear 003D           _turnRight135Delay 0035                       tablat 000FF5  
           _turnLeft90Delay 003B             __initialization FE1C                __end_of_main FED6  
                    ??_main 001B               __activetblptr 000003                      _CCPR1H 000FAA  
                    _CCPR2H 000FA6                      _CCPR3H 000F25                      _CCPR4H 000F21  
                    _RC0PPS 000E62                      _RC4REG 000EE3                      _RE2PPS 000E74  
                    _RC7PPS 000E69                      _RD5PPS 000E6F                      _RE4PPS 000E76  
                    _RD6PPS 000E70                      _RG6PPS 000E88                      _RX4PPS 000E15  
                    _TX4REG 000EE4            _turnLeft135Delay 0037                _CCPTMRS0bits 000FAD  
           _lights_flashing FF66                      clear_0 FE42                      clear_1 FE4E  
                    isa$std 000001                __pdataCOMRAM 002F                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8           ??_initDCmotorsPWM 001B  
         _buggy_lights_init FDFE                  __accesstop 0060     __end_of__initialization FE54  
        ?_buggy_lights_init 0019               ___rparam_used 000001              __pcstackCOMRAM 0019  
       ??_buggy_lights_init 0019   __end_of_buggy_lights_init FE1C                  __pbssBANK0 0060  
   __end_of_lights_flashing 0000                _T2CLKCONbits 000FBF                     _SP4BRGH 000EE6  
                   _SP4BRGL 000EE5                     _SSP2ADD 000ED6                     _SSP2BUF 000ED5  
                   __Hparam 0000                     __Lparam 0000                     __pcinit FE1C  
                   __ramtop 0E00                     __ptext0 FE5A                     __ptext1 FF66  
                   __ptext2 FED6                     __ptext3 FDFE                   _T2CONbits 000FBD  
                 _T2HLTbits 000FBE               _RxBufWriteCnt 0018  __size_of_buggy_lights_init 001E  
      end_of_initialization FE54            ?_lights_flashing 0019                     postdec1 000FE5  
                   postinc0 000FEE             _initDCmotorsPWM FED6                   _TRISCbits 000F83  
                 _TRISDbits 000F84                   _TRISEbits 000F85                   _TRISFbits 000F86  
                 _TRISGbits 000F87                   _TRISHbits 000F88                 _CCP1CONbits 000FAB  
              _EUSART4RXbuf 0001                _EUSART4TXbuf 0060                 _CCP2CONbits 000FA7  
               _CCP3CONbits 000F26                 _CCP4CONbits 000F22                  main@motorL 001D  
                main@motorR 0026               __pidataCOMRAM FDEC         start_initialization FE1C  
             _TxBufWriteCnt 0016            _turnRight90Delay 0039     __end_of_initDCmotorsPWM FF66  
               __pbssCOMRAM 0001                _RxBufReadCnt 0017               _headbuttDelay 0031  
  initDCmotorsPWM@PWMperiod 0019                   _rampDelay 0040                    _LATCbits 000F7B  
                  _LATDbits 000F7C                    _LATEbits 000F7D                    _LATFbits 000F7E  
                  _LATGbits 000F7F                    _LATHbits 000F80                    _PIE4bits 000E2D  
                  _PIR4bits 000E37            ?_initDCmotorsPWM 0019                    _SSP2CON2 000EDA  
                  _SSP2STAT 000ED8                _TxBufReadCnt 0015                   copy_data0 FE30  
                  __Hrparam 0000                    __Lrparam 0000    __size_of_lights_flashing 009A  
                _ANSELDbits 000EA7                _SSP2CON1bits 000ED9                _SSP2CON2bits 000EDA  
             __size_of_main 007C                    isa$xinst 000000                  _RC4STAbits 000EE7  
              _topGearRight 003E                 _topGearLeft 003F                  _SSP2DATPPS 000E1D  
         ??_lights_flashing 0019                  _SSP2CLKPPS 000E1C                  _TX4STAbits 000EE8  
