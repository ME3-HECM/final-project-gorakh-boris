

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 26 17:21:51 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 21/07/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F67K40 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000000                     
    55                           	psect	idataCOMRAM
    56   001004                     __pidataCOMRAM:
    57                           	callstack 0
    58                           
    59                           ;initializer for _squareDelay
    60   001004  012C               	dw	300
    61                           
    62                           ;initializer for _headbuttDelay
    63   001006  0046               	dw	70
    64                           
    65                           ;initializer for _turn180Delay
    66   001008  01FE               	dw	510
    67                           
    68                           ;initializer for _turnRight135Delay
    69   00100A  012C               	dw	300
    70                           
    71                           ;initializer for _turnLeft135Delay
    72   00100C  012C               	dw	300
    73                           
    74                           ;initializer for _turnRight90Delay
    75   00100E  00AF               	dw	175
    76                           
    77                           ;initializer for _turnLeft90Delay
    78   001010  00AF               	dw	175
    79                           
    80                           ;initializer for _turningGear
    81   001012  2A                 	db	42
    82                           
    83                           ;initializer for _topGearRight
    84   001013  20                 	db	32
    85                           
    86                           ;initializer for _topGearLeft
    87   001014  1E                 	db	30
    88                           
    89                           ;initializer for _rampDelay
    90   001015  08                 	db	8
    91   000000                     _TX4REG	set	3812
    92   000000                     _RC4STAbits	set	3815
    93   000000                     _SP4BRGH	set	3814
    94   000000                     _LATGbits	set	3967
    95   000000                     _LATEbits	set	3965
    96   000000                     _TRISGbits	set	3975
    97   000000                     _TRISEbits	set	3973
    98   000000                     _LATFbits	set	3966
    99   000000                     _LATHbits	set	3968
   100   000000                     _TRISFbits	set	3974
   101   000000                     _TRISHbits	set	3976
   102   000000                     _SSP2CON2bits	set	3802
   103   000000                     _RX4PPS	set	3605
   104   000000                     _SSP2CLKPPS	set	3612
   105   000000                     _SSP2DATPPS	set	3613
   106   000000                     _RC7PPS	set	3689
   107   000000                     _RE2PPS	set	3700
   108   000000                     _LATCbits	set	3963
   109   000000                     _LATDbits	set	3964
   110   000000                     _TRISDbits	set	3972
   111   000000                     _T2PR	set	4028
   112   000000                     _T2CONbits	set	4029
   113   000000                     _CCPR2H	set	4006
   114   000000                     _CCPR1H	set	4010
   115   000000                     _TRISCbits	set	3971
   116   000000                     _RE4PPS	set	3702
   117   000000                     _RG6PPS	set	3720
   118   000000                     _RD5PPS	set	3695
   119   000000                     _ANSELDbits	set	3751
   120   000000                     _SSP2ADD	set	3798
   121   000000                     _SSP2CON1bits	set	3801
   122   000000                     _CCPR4H	set	3873
   123   000000                     _CCPR3H	set	3877
   124   000000                     _T2CLKCONbits	set	4031
   125   000000                     _T2HLTbits	set	4030
   126   000000                     _CCP1CONbits	set	4011
   127   000000                     _CCPTMRS0bits	set	4013
   128   000000                     _CCP2CONbits	set	4007
   129   000000                     _CCP3CONbits	set	3878
   130   000000                     _CCP4CONbits	set	3874
   131   000000                     _RC4REG	set	3811
   132   000000                     _SP4BRGL	set	3813
   133   000000                     _TX4STAbits	set	3816
   134   000000                     _BAUD4CONbits	set	3817
   135   000000                     _SSP2CON2	set	3802
   136   000000                     _SSP2STAT	set	3800
   137   000000                     _SSP2BUF	set	3797
   138   000000                     _PIE4bits	set	3629
   139   000000                     _PIR4bits	set	3639
   140   000000                     _RC0PPS	set	3682
   141   000000                     _RD6PPS	set	3696
   142                           
   143                           ; #config settings
   144                           
   145                           	psect	cinit
   146   000FA8                     __pcinit:
   147                           	callstack 0
   148   000FA8                     start_initialization:
   149                           	callstack 0
   150   000FA8                     __initialization:
   151                           	callstack 0
   152                           
   153                           ; Initialize objects allocated to COMRAM (18 bytes)
   154                           ; load TBLPTR registers with __pidataCOMRAM
   155   000FA8  0E04               	movlw	low __pidataCOMRAM
   156   000FAA  6EF6               	movwf	tblptrl,c
   157   000FAC  0E10               	movlw	high __pidataCOMRAM
   158   000FAE  6EF7               	movwf	tblptrh,c
   159   000FB0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   160   000FB2  6EF8               	movwf	tblptru,c
   161   000FB4  EE00  F02F         	lfsr	0,__pdataCOMRAM
   162   000FB8  EE10 F012          	lfsr	1,18
   163   000FBC                     copy_data0:
   164   000FBC  0009               	tblrd		*+
   165   000FBE  CFF5 FFEE          	movff	tablat,postinc0
   166   000FC2  50E5               	movf	postdec1,w,c
   167   000FC4  50E1               	movf	fsr1l,w,c
   168   000FC6  E1FA               	bnz	copy_data0
   169                           
   170                           ; Clear objects allocated to BANK0 (60 bytes)
   171   000FC8  EE00  F060         	lfsr	0,__pbssBANK0
   172   000FCC  0E3C               	movlw	60
   173   000FCE                     clear_0:
   174   000FCE  6AEE               	clrf	postinc0,c
   175   000FD0  06E8               	decf	wreg,f,c
   176   000FD2  E1FD               	bnz	clear_0
   177                           
   178                           ; Clear objects allocated to COMRAM (24 bytes)
   179   000FD4  EE00  F001         	lfsr	0,__pbssCOMRAM
   180   000FD8  0E18               	movlw	24
   181   000FDA                     clear_1:
   182   000FDA  6AEE               	clrf	postinc0,c
   183   000FDC  06E8               	decf	wreg,f,c
   184   000FDE  E1FD               	bnz	clear_1
   185   000FE0                     end_of_initialization:
   186                           	callstack 0
   187   000FE0                     __end_of__initialization:
   188                           	callstack 0
   189   000FE0  0100               	movlb	0
   190   000FE2  EF96  F007         	goto	_main	;jump to C main() function
   191                           
   192                           	psect	bssCOMRAM
   193   000001                     __pbssCOMRAM:
   194                           	callstack 0
   195   000001                     _EUSART4RXbuf:
   196                           	callstack 0
   197   000001                     	ds	20
   198   000015                     _TxBufReadCnt:
   199                           	callstack 0
   200   000015                     	ds	1
   201   000016                     _TxBufWriteCnt:
   202                           	callstack 0
   203   000016                     	ds	1
   204   000017                     _RxBufReadCnt:
   205                           	callstack 0
   206   000017                     	ds	1
   207   000018                     _RxBufWriteCnt:
   208                           	callstack 0
   209   000018                     	ds	1
   210                           
   211                           	psect	dataCOMRAM
   212   00002F                     __pdataCOMRAM:
   213                           	callstack 0
   214   00002F                     _squareDelay:
   215                           	callstack 0
   216   00002F                     	ds	2
   217   000031                     _headbuttDelay:
   218                           	callstack 0
   219   000031                     	ds	2
   220   000033                     _turn180Delay:
   221                           	callstack 0
   222   000033                     	ds	2
   223   000035                     _turnRight135Delay:
   224                           	callstack 0
   225   000035                     	ds	2
   226   000037                     _turnLeft135Delay:
   227                           	callstack 0
   228   000037                     	ds	2
   229   000039                     _turnRight90Delay:
   230                           	callstack 0
   231   000039                     	ds	2
   232   00003B                     _turnLeft90Delay:
   233                           	callstack 0
   234   00003B                     	ds	2
   235   00003D                     _turningGear:
   236                           	callstack 0
   237   00003D                     	ds	1
   238   00003E                     _topGearRight:
   239                           	callstack 0
   240   00003E                     	ds	1
   241   00003F                     _topGearLeft:
   242                           	callstack 0
   243   00003F                     	ds	1
   244   000040                     _rampDelay:
   245                           	callstack 0
   246   000040                     	ds	1
   247                           
   248                           	psect	bssBANK0
   249   000060                     __pbssBANK0:
   250                           	callstack 0
   251   000060                     _EUSART4TXbuf:
   252                           	callstack 0
   253   000060                     	ds	60
   254                           
   255                           	psect	cstackCOMRAM
   256   000019                     __pcstackCOMRAM:
   257                           	callstack 0
   258   000019                     ??_lights_flashing:
   259   000019                     initDCmotorsPWM@PWMperiod:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x0
   263   000019                     	ds	2
   264   00001B                     ??_main:
   265                           
   266                           ; 1 bytes @ 0x2
   267   00001B                     	ds	2
   268   00001D                     main@motorL:
   269                           	callstack 0
   270                           
   271                           ; 9 bytes @ 0x4
   272   00001D                     	ds	9
   273   000026                     main@motorR:
   274                           	callstack 0
   275                           
   276                           ; 9 bytes @ 0xD
   277   000026                     	ds	9
   278                           
   279 ;;
   280 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   281 ;;
   282 ;; *************** function _main *****************
   283 ;; Defined at:
   284 ;;		line 23 in file "main.c"
   285 ;; Parameters:    Size  Location     Type
   286 ;;		None
   287 ;; Auto vars:     Size  Location     Type
   288 ;;  motorR          9   13[COMRAM] struct DC_motor
   289 ;;  motorL          9    4[COMRAM] struct DC_motor
   290 ;;  PWMcycle        2    0        unsigned int 
   291 ;;  backtrack       1    0        unsigned char 
   292 ;; Return value:  Size  Location     Type
   293 ;;                  1    wreg      void 
   294 ;; Registers used:
   295 ;;		wreg, status,2, status,0, cstack
   296 ;; Tracked objects:
   297 ;;		On entry : 0/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   302 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   303 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   304 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   305 ;;Total ram usage:       20 bytes
   306 ;; Hardware stack levels required when called: 1
   307 ;; This function calls:
   308 ;;		_buggy_lights_init
   309 ;;		_initDCmotorsPWM
   310 ;;		_lights_flashing
   311 ;; This function is called by:
   312 ;;		Startup code after reset
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text0
   317   000F2C                     __ptext0:
   318                           	callstack 0
   319   000F2C                     _main:
   320                           	callstack 30
   321   000F2C                     
   322                           ;main.c: 24:     _delay((unsigned long)((500)*(64000000/4000.0)));
   323   000F2C  0E29               	movlw	41
   324   000F2E  6E1C               	movwf	(??_main+1)^0,c
   325   000F30  0E96               	movlw	150
   326   000F32  6E1B               	movwf	??_main^0,c
   327   000F34  0E7F               	movlw	127
   328   000F36                     u467:
   329   000F36  2EE8               	decfsz	wreg,f,c
   330   000F38  D7FE               	bra	u467
   331   000F3A  2E1B               	decfsz	??_main^0,f,c
   332   000F3C  D7FC               	bra	u467
   333   000F3E  2E1C               	decfsz	(??_main+1)^0,f,c
   334   000F40  D7FA               	bra	u467
   335   000F42  0000               	nop	
   336   000F44                     
   337                           ;main.c: 27:     initDCmotorsPWM(PWMcycle);
   338   000F44  0E00               	movlw	0
   339   000F46  6E1A               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   340   000F48  0E63               	movlw	99
   341   000F4A  6E19               	movwf	initDCmotorsPWM@PWMperiod^0,c
   342   000F4C  EC4E  F007         	call	_initDCmotorsPWM	;wreg free
   343   000F50                     
   344                           ;main.c: 29:     struct DC_motor motorL, motorR;;main.c: 31:     motorL.power = 0;
   345   000F50  0E00               	movlw	0
   346   000F52  6E1D               	movwf	main@motorL^0,c
   347   000F54                     
   348                           ;main.c: 32:     motorL.direction = 1;
   349   000F54  0E01               	movlw	1
   350   000F56  6E1E               	movwf	(main@motorL+1)^0,c
   351   000F58                     
   352                           ;main.c: 33:     motorL.brakemode = 1;
   353   000F58  0E01               	movlw	1
   354   000F5A  6E1F               	movwf	(main@motorL+2)^0,c
   355   000F5C                     
   356                           ;main.c: 34:     motorL.PWMperiod = PWMcycle;
   357   000F5C  0E00               	movlw	0
   358   000F5E  6E21               	movwf	(main@motorL+4)^0,c
   359   000F60  0E63               	movlw	99
   360   000F62  6E20               	movwf	(main@motorL+3)^0,c
   361   000F64                     
   362                           ;main.c: 35:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   363   000F64  0EAA               	movlw	170
   364   000F66  6E22               	movwf	(main@motorL+5)^0,c
   365   000F68  0E0F               	movlw	15
   366   000F6A  6E23               	movwf	(main@motorL+6)^0,c
   367   000F6C                     
   368                           ;main.c: 36:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   369   000F6C  0EA6               	movlw	166
   370   000F6E  6E24               	movwf	(main@motorL+7)^0,c
   371   000F70  0E0F               	movlw	15
   372   000F72  6E25               	movwf	(main@motorL+8)^0,c
   373   000F74                     
   374                           ;main.c: 38:     motorR.power = 0;
   375   000F74  0E00               	movlw	0
   376   000F76  6E26               	movwf	main@motorR^0,c
   377   000F78                     
   378                           ;main.c: 39:     motorR.direction = 1;
   379   000F78  0E01               	movlw	1
   380   000F7A  6E27               	movwf	(main@motorR+1)^0,c
   381   000F7C                     
   382                           ;main.c: 40:     motorR.brakemode = 1;
   383   000F7C  0E01               	movlw	1
   384   000F7E  6E28               	movwf	(main@motorR+2)^0,c
   385   000F80                     
   386                           ;main.c: 41:     motorR.PWMperiod = PWMcycle;
   387   000F80  0E00               	movlw	0
   388   000F82  6E2A               	movwf	(main@motorR+4)^0,c
   389   000F84  0E63               	movlw	99
   390   000F86  6E29               	movwf	(main@motorR+3)^0,c
   391   000F88                     
   392                           ;main.c: 42:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   393   000F88  0E25               	movlw	37
   394   000F8A  6E2B               	movwf	(main@motorR+5)^0,c
   395   000F8C  0E0F               	movlw	15
   396   000F8E  6E2C               	movwf	(main@motorR+6)^0,c
   397   000F90                     
   398                           ;main.c: 43:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   399   000F90  0E21               	movlw	33
   400   000F92  6E2D               	movwf	(main@motorR+7)^0,c
   401   000F94  0E0F               	movlw	15
   402   000F96  6E2E               	movwf	(main@motorR+8)^0,c
   403   000F98                     
   404                           ;main.c: 45:     buggy_lights_init();
   405   000F98  ECF3  F007         	call	_buggy_lights_init	;wreg free
   406   000F9C                     l1681:
   407                           
   408                           ;main.c: 59:         lights_flashing();
   409   000F9C  EC01  F007         	call	_lights_flashing	;wreg free
   410   000FA0  EFCE  F007         	goto	l1681
   411   000FA4  EF00  F000         	goto	start
   412   000FA8                     __end_of_main:
   413                           	callstack 0
   414                           
   415 ;; *************** function _lights_flashing *****************
   416 ;; Defined at:
   417 ;;		line 29 in file "buggy_lights.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, status,2, status,0
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   435 ;;Total ram usage:        2 bytes
   436 ;; Hardware stack levels used: 1
   437 ;; This function calls:
   438 ;;		Nothing
   439 ;; This function is called by:
   440 ;;		_main
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           	psect	text1
   445   000E02                     __ptext1:
   446                           	callstack 0
   447   000E02                     _lights_flashing:
   448                           	callstack 30
   449   000E02                     
   450                           ;buggy_lights.c: 31:     LATDbits.LATD4 = !LATDbits.LATD4;
   451   000E02  A87C               	btfss	124,4,c	;volatile
   452   000E04  EF06  F007         	goto	u191
   453   000E08  EF0A  F007         	goto	u190
   454   000E0C                     u191:
   455   000E0C  6A19               	clrf	??_lights_flashing^0,c
   456   000E0E  2A19               	incf	??_lights_flashing^0,f,c
   457   000E10  EF0B  F007         	goto	u208
   458   000E14                     u190:
   459   000E14  6A19               	clrf	??_lights_flashing^0,c
   460   000E16                     u208:
   461   000E16  3A19               	swapf	??_lights_flashing^0,f,c
   462   000E18  507C               	movf	124,w,c	;volatile
   463   000E1A  1819               	xorwf	??_lights_flashing^0,w,c
   464   000E1C  0BEF               	andlw	-17
   465   000E1E  1819               	xorwf	??_lights_flashing^0,w,c
   466   000E20  6E7C               	movwf	124,c	;volatile
   467                           
   468                           ;buggy_lights.c: 32:     LATDbits.LATD3 = !LATDbits.LATD3;
   469   000E22  A67C               	btfss	124,3,c	;volatile
   470   000E24  EF16  F007         	goto	u211
   471   000E28  EF1A  F007         	goto	u210
   472   000E2C                     u211:
   473   000E2C  6A19               	clrf	??_lights_flashing^0,c
   474   000E2E  2A19               	incf	??_lights_flashing^0,f,c
   475   000E30  EF1B  F007         	goto	u228
   476   000E34                     u210:
   477   000E34  6A19               	clrf	??_lights_flashing^0,c
   478   000E36                     u228:
   479   000E36  4619               	rlncf	??_lights_flashing^0,f,c
   480   000E38  4619               	rlncf	??_lights_flashing^0,f,c
   481   000E3A  4619               	rlncf	??_lights_flashing^0,f,c
   482   000E3C  507C               	movf	124,w,c	;volatile
   483   000E3E  1819               	xorwf	??_lights_flashing^0,w,c
   484   000E40  0BF7               	andlw	-9
   485   000E42  1819               	xorwf	??_lights_flashing^0,w,c
   486   000E44  6E7C               	movwf	124,c	;volatile
   487   000E46                     
   488                           ;buggy_lights.c: 33:     _delay((unsigned long)((500)*(64000000/4000.0)));
   489   000E46  0E29               	movlw	41
   490   000E48  6E1A               	movwf	(??_lights_flashing+1)^0,c
   491   000E4A  0E96               	movlw	150
   492   000E4C  6E19               	movwf	??_lights_flashing^0,c
   493   000E4E  0E7F               	movlw	127
   494   000E50                     u477:
   495   000E50  2EE8               	decfsz	wreg,f,c
   496   000E52  D7FE               	bra	u477
   497   000E54  2E19               	decfsz	??_lights_flashing^0,f,c
   498   000E56  D7FC               	bra	u477
   499   000E58  2E1A               	decfsz	(??_lights_flashing+1)^0,f,c
   500   000E5A  D7FA               	bra	u477
   501   000E5C  0000               	nop	
   502   000E5E                     
   503                           ;buggy_lights.c: 34:     LATFbits.LATF0 = !LATFbits.LATF0;
   504   000E5E  A07E               	btfss	126,0,c	;volatile
   505   000E60  EF34  F007         	goto	u231
   506   000E64  EF38  F007         	goto	u230
   507   000E68                     u231:
   508   000E68  6A19               	clrf	??_lights_flashing^0,c
   509   000E6A  2A19               	incf	??_lights_flashing^0,f,c
   510   000E6C  EF39  F007         	goto	u248
   511   000E70                     u230:
   512   000E70  6A19               	clrf	??_lights_flashing^0,c
   513   000E72                     u248:
   514   000E72  507E               	movf	126,w,c	;volatile
   515   000E74  1819               	xorwf	??_lights_flashing^0,w,c
   516   000E76  0BFE               	andlw	-2
   517   000E78  1819               	xorwf	??_lights_flashing^0,w,c
   518   000E7A  6E7E               	movwf	126,c	;volatile
   519   000E7C                     
   520                           ;buggy_lights.c: 35:     LATHbits.LATH0 = !LATHbits.LATH0;
   521   000E7C  A080               	btfss	128,0,c	;volatile
   522   000E7E  EF43  F007         	goto	u251
   523   000E82  EF47  F007         	goto	u250
   524   000E86                     u251:
   525   000E86  6A19               	clrf	??_lights_flashing^0,c
   526   000E88  2A19               	incf	??_lights_flashing^0,f,c
   527   000E8A  EF48  F007         	goto	u268
   528   000E8E                     u250:
   529   000E8E  6A19               	clrf	??_lights_flashing^0,c
   530   000E90                     u268:
   531   000E90  5080               	movf	128,w,c	;volatile
   532   000E92  1819               	xorwf	??_lights_flashing^0,w,c
   533   000E94  0BFE               	andlw	-2
   534   000E96  1819               	xorwf	??_lights_flashing^0,w,c
   535   000E98  6E80               	movwf	128,c	;volatile
   536   000E9A  0012               	return		;funcret
   537   000E9C                     __end_of_lights_flashing:
   538                           	callstack 0
   539                           
   540 ;; *************** function _initDCmotorsPWM *****************
   541 ;; Defined at:
   542 ;;		line 5 in file "dc_motor.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   545 ;; Auto vars:     Size  Location     Type
   546 ;;		None
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg, status,2
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   556 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   559 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   560 ;;Total ram usage:        2 bytes
   561 ;; Hardware stack levels used: 1
   562 ;; This function calls:
   563 ;;		Nothing
   564 ;; This function is called by:
   565 ;;		_main
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text2
   570   000E9C                     __ptext2:
   571                           	callstack 0
   572   000E9C                     _initDCmotorsPWM:
   573                           	callstack 30
   574   000E9C                     
   575                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   576   000E9C  9485               	bcf	133,2,c	;volatile
   577                           
   578                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   579   000E9E  9885               	bcf	133,4,c	;volatile
   580                           
   581                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   582   000EA0  9E83               	bcf	131,7,c	;volatile
   583                           
   584                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   585   000EA2  9C87               	bcf	135,6,c	;volatile
   586                           
   587                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   588   000EA4  947D               	bcf	125,2,c	;volatile
   589                           
   590                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   591   000EA6  987D               	bcf	125,4,c	;volatile
   592                           
   593                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   594   000EA8  9E7B               	bcf	123,7,c	;volatile
   595                           
   596                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   597   000EAA  9C7F               	bcf	127,6,c	;volatile
   598   000EAC                     
   599                           ;dc_motor.c: 18:     RE2PPS=0x05;
   600   000EAC  0E05               	movlw	5
   601   000EAE  010E               	movlb	14	; () banked
   602   000EB0  6F74               	movwf	116,b	;volatile
   603                           
   604                           ;dc_motor.c: 19:     RE4PPS=0x06;
   605   000EB2  0E06               	movlw	6
   606   000EB4  6F76               	movwf	118,b	;volatile
   607                           
   608                           ;dc_motor.c: 20:     RC7PPS=0x07;
   609   000EB6  0E07               	movlw	7
   610   000EB8  6F69               	movwf	105,b	;volatile
   611                           
   612                           ;dc_motor.c: 21:     RG6PPS=0x08;
   613   000EBA  0E08               	movlw	8
   614   000EBC  6F88               	movwf	136,b	;volatile
   615                           
   616                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   617   000EBE  50BD               	movf	189,w,c	;volatile
   618   000EC0  0B8F               	andlw	-113
   619   000EC2  0940               	iorlw	64
   620   000EC4  6EBD               	movwf	189,c	;volatile
   621                           
   622                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   623   000EC6  0EE0               	movlw	-32
   624   000EC8  16BE               	andwf	190,f,c	;volatile
   625                           
   626                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   627   000ECA  50BF               	movf	191,w,c	;volatile
   628   000ECC  0BF0               	andlw	-16
   629   000ECE  0901               	iorlw	1
   630   000ED0  6EBF               	movwf	191,c	;volatile
   631   000ED2                     
   632                           ; BSR set to: 14
   633                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   634   000ED2  C019  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   635   000ED6                     
   636                           ; BSR set to: 14
   637                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   638   000ED6  8EBD               	bsf	189,7,c	;volatile
   639                           
   640                           ;dc_motor.c: 35:     CCPR1H=0;
   641   000ED8  0E00               	movlw	0
   642   000EDA  6EAA               	movwf	170,c	;volatile
   643                           
   644                           ;dc_motor.c: 36:     CCPR2H=0;
   645   000EDC  0E00               	movlw	0
   646   000EDE  6EA6               	movwf	166,c	;volatile
   647                           
   648                           ;dc_motor.c: 37:     CCPR3H=0;
   649   000EE0  0E00               	movlw	0
   650   000EE2  010F               	movlb	15	; () banked
   651   000EE4  6F25               	movwf	37,b	;volatile
   652                           
   653                           ;dc_motor.c: 38:     CCPR4H=0;
   654   000EE6  0E00               	movlw	0
   655   000EE8  6F21               	movwf	33,b	;volatile
   656                           
   657                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   658   000EEA  0EFC               	movlw	-4
   659   000EEC  16AD               	andwf	173,f,c	;volatile
   660                           
   661                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   662   000EEE  0EF3               	movlw	-13
   663   000EF0  16AD               	andwf	173,f,c	;volatile
   664                           
   665                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   666   000EF2  0ECF               	movlw	-49
   667   000EF4  16AD               	andwf	173,f,c	;volatile
   668                           
   669                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   670   000EF6  0E3F               	movlw	-193
   671   000EF8  16AD               	andwf	173,f,c	;volatile
   672   000EFA                     
   673                           ; BSR set to: 15
   674                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   675   000EFA  88AB               	bsf	171,4,c	;volatile
   676                           
   677                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   678   000EFC  50AB               	movf	171,w,c	;volatile
   679   000EFE  0BF0               	andlw	-16
   680   000F00  090C               	iorlw	12
   681   000F02  6EAB               	movwf	171,c	;volatile
   682   000F04                     
   683                           ; BSR set to: 15
   684                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   685   000F04  8EAB               	bsf	171,7,c	;volatile
   686   000F06                     
   687                           ; BSR set to: 15
   688                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   689   000F06  88A7               	bsf	167,4,c	;volatile
   690                           
   691                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   692   000F08  50A7               	movf	167,w,c	;volatile
   693   000F0A  0BF0               	andlw	-16
   694   000F0C  090C               	iorlw	12
   695   000F0E  6EA7               	movwf	167,c	;volatile
   696   000F10                     
   697                           ; BSR set to: 15
   698                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   699   000F10  8EA7               	bsf	167,7,c	;volatile
   700   000F12                     
   701                           ; BSR set to: 15
   702                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   703   000F12  8926               	bsf	38,4,b	;volatile
   704                           
   705                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   706   000F14  5126               	movf	38,w,b	;volatile
   707   000F16  0BF0               	andlw	-16
   708   000F18  090C               	iorlw	12
   709   000F1A  6F26               	movwf	38,b	;volatile
   710   000F1C                     
   711                           ; BSR set to: 15
   712                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   713   000F1C  8F26               	bsf	38,7,b	;volatile
   714   000F1E                     
   715                           ; BSR set to: 15
   716                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   717   000F1E  8922               	bsf	34,4,b	;volatile
   718                           
   719                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   720   000F20  5122               	movf	34,w,b	;volatile
   721   000F22  0BF0               	andlw	-16
   722   000F24  090C               	iorlw	12
   723   000F26  6F22               	movwf	34,b	;volatile
   724   000F28                     
   725                           ; BSR set to: 15
   726                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   727   000F28  8F22               	bsf	34,7,b	;volatile
   728   000F2A                     
   729                           ; BSR set to: 15
   730   000F2A  0012               	return		;funcret
   731   000F2C                     __end_of_initDCmotorsPWM:
   732                           	callstack 0
   733                           
   734 ;; *************** function _buggy_lights_init *****************
   735 ;; Defined at:
   736 ;;		line 4 in file "buggy_lights.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;		None
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		None
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   754 ;;Total ram usage:        0 bytes
   755 ;; Hardware stack levels used: 1
   756 ;; This function calls:
   757 ;;		Nothing
   758 ;; This function is called by:
   759 ;;		_main
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text3
   764   000FE6                     __ptext3:
   765                           	callstack 0
   766   000FE6                     _buggy_lights_init:
   767                           	callstack 30
   768   000FE6                     
   769                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
   770   000FE6  9884               	bcf	132,4,c	;volatile
   771                           
   772                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
   773   000FE8  9288               	bcf	136,1,c	;volatile
   774                           
   775                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
   776   000FEA  9684               	bcf	132,3,c	;volatile
   777                           
   778                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
   779   000FEC  9086               	bcf	134,0,c	;volatile
   780                           
   781                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
   782   000FEE  9088               	bcf	136,0,c	;volatile
   783                           
   784                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
   785   000FF0  887C               	bsf	124,4,c	;volatile
   786                           
   787                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
   788   000FF2  8280               	bsf	128,1,c	;volatile
   789                           
   790                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
   791   000FF4  867C               	bsf	124,3,c	;volatile
   792                           
   793                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
   794   000FF6  807E               	bsf	126,0,c	;volatile
   795                           
   796                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
   797   000FF8  8080               	bsf	128,0,c	;volatile
   798                           
   799                           ;buggy_lights.c: 22:     TRISDbits.TRISD7 = 0;
   800   000FFA  9E84               	bcf	132,7,c	;volatile
   801                           
   802                           ;buggy_lights.c: 23:     TRISHbits.TRISH3 = 0;
   803   000FFC  9688               	bcf	136,3,c	;volatile
   804                           
   805                           ;buggy_lights.c: 25:     LATDbits.LATD7 = 1;
   806   000FFE  8E7C               	bsf	124,7,c	;volatile
   807                           
   808                           ;buggy_lights.c: 26:     LATHbits.LATH3 = 1;
   809   001000  8680               	bsf	128,3,c	;volatile
   810   001002  0012               	return		;funcret
   811   001004                     __end_of_buggy_lights_init:
   812                           	callstack 0
   813                           
   814                           	psect	smallconst
   815   000E00                     __psmallconst:
   816                           	callstack 0
   817   000E00  00                 	db	0
   818   000E01  00                 	db	0	; dummy byte at the end
   819   000000                     
   820                           	psect	rparam
   821   000000                     
   822                           	psect	config
   823                           
   824                           ;Config register CONFIG1L @ 0x300000
   825                           ;	External Oscillator mode Selection bits
   826                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   827                           ;	Power-up default value for COSC bits
   828                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   829   300000                     	org	3145728
   830   300000  AA                 	db	170
   831                           
   832                           ;Config register CONFIG1H @ 0x300001
   833                           ;	unspecified, using default values
   834                           ;	Clock Out Enable bit
   835                           ;	CLKOUTEN = 0x1, unprogrammed default
   836                           ;	Clock Switch Enable bit
   837                           ;	CSWEN = 0x1, unprogrammed default
   838                           ;	Fail-Safe Clock Monitor Enable bit
   839                           ;	FCMEN = 0x1, unprogrammed default
   840   300001                     	org	3145729
   841   300001  FF                 	db	255
   842                           
   843                           ;Config register CONFIG3L @ 0x300004
   844                           ;	WDT Period Select bits
   845                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   846                           ;	WDT operating mode
   847                           ;	WDTE = OFF, WDT Disabled
   848   300004                     	org	3145732
   849   300004  9F                 	db	159
   850                           
   851                           ;Config register CONFIG3H @ 0x300005
   852                           ;	unspecified, using default values
   853                           ;	WDT Window Select bits
   854                           ;	WDTCWS = 0x7, unprogrammed default
   855                           ;	WDT input clock selector
   856                           ;	WDTCCS = 0x7, unprogrammed default
   857   300005                     	org	3145733
   858   300005  FF                 	db	255
   859                           tosu	equ	0xFFF
   860                           tosh	equ	0xFFE
   861                           tosl	equ	0xFFD
   862                           stkptr	equ	0xFFC
   863                           pclatu	equ	0xFFB
   864                           pclath	equ	0xFFA
   865                           pcl	equ	0xFF9
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           prodh	equ	0xFF4
   871                           prodl	equ	0xFF3
   872                           indf0	equ	0xFEF
   873                           postinc0	equ	0xFEE
   874                           postdec0	equ	0xFED
   875                           preinc0	equ	0xFEC
   876                           plusw0	equ	0xFEB
   877                           fsr0h	equ	0xFEA
   878                           fsr0l	equ	0xFE9
   879                           wreg	equ	0xFE8
   880                           indf1	equ	0xFE7
   881                           postinc1	equ	0xFE6
   882                           postdec1	equ	0xFE5
   883                           preinc1	equ	0xFE4
   884                           plusw1	equ	0xFE3
   885                           fsr1h	equ	0xFE2
   886                           fsr1l	equ	0xFE1
   887                           bsr	equ	0xFE0
   888                           indf2	equ	0xFDF
   889                           postinc2	equ	0xFDE
   890                           postdec2	equ	0xFDD
   891                           preinc2	equ	0xFDC
   892                           plusw2	equ	0xFDB
   893                           fsr2h	equ	0xFDA
   894                           fsr2l	equ	0xFD9
   895                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      64
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    S885DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    S885DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM
    _main->_lights_flashing

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0     408
                                              2 COMRAM    20    20      0
                  _buggy_lights_init
                    _initDCmotorsPWM
                    _lights_flashing
 ---------------------------------------------------------------------------------
 (1) _lights_flashing                                      2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _initDCmotorsPWM
   _lights_flashing

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      56        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      40       1       67.4%
BITBIGSFRllhhhh     54      0       0      38        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     37      0       0      40        0.0%
BITBIGSFRllhhhl     2D      0       0      43        0.0%
BITBIGSFRllllhl     2A      0       0      50        0.0%
BITBIGSFRllllll     26      0       0      54        0.0%
BITBIGSFRllhhhl     1E      0       0      44        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      45        0.0%
BITBIGSFRllllhl      F      0       0      52        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRllllhl      9      0       0      51        0.0%
BITBIGSFRllhhhl      8      0       0      41        0.0%
BITBIGSFRlllllh      6      0       0      53        0.0%
BITBIGSFRllllhh      6      0       0      49        0.0%
BITBIGSFRlllhl       5      0       0      48        0.0%
BITBIGSFRlllhh       3      0       0      47        0.0%
BITBIGSFRllhhhl      2      0       0      39        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRlhh         2      0       0      37        0.0%
BITBIGSFRllhhhl      1      0       0      42        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      46        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7C      55        0.0%
DATA                 0      0      7C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 26 17:21:51 2024

             _turn180Delay 0033                         l20 0E9A                         l17 1002  
                      l130 0F2A                        u210 0E34                        u211 0E2C  
                      u230 0E70                        u231 0E68                        u208 0E16  
                      u250 0E8E                        u251 0E86                        u228 0E36  
                      u190 0E14                        u191 0E0C                        u248 0E72  
                      u268 0E90                        u467 0F36                        u477 0E50  
                      wreg 0FE8                _squareDelay 002F                       l1241 0E02  
                     l1243 0E46                       l1245 0E5E                       l1239 0FE6  
                     l1247 0E7C                       l1631 0EFA                       l1623 0E9C  
                     l1641 0F1C                       l1633 0F04                       l1625 0EAC  
                     l1643 0F1E                       l1635 0F06                       l1627 0ED2  
                     l1651 0F44                       l1645 0F28                       l1637 0F10  
                     l1629 0ED6                       l1661 0F64                       l1653 0F50  
                     l1639 0F12                       l1671 0F80                       l1663 0F6C  
                     l1655 0F54                       l1647 0F2C                       l1681 0F9C  
                     l1673 0F88                       l1665 0F74                       l1657 0F58  
                     l1649 0F44                       l1675 0F90                       l1667 0F78  
                     l1659 0F5C                       l1677 0F98                       l1669 0F7C  
                     l1679 0F9C               _BAUD4CONbits 0EE9                       _T2PR 0FBC  
                     _main 0F2C                       fsr1l 0FE1                       start 0000  
             ___param_bank 0000                      ?_main 0019                _turningGear 003D  
        _turnRight135Delay 0035                      tablat 0FF5            _turnLeft90Delay 003B  
          __initialization 0FA8               __end_of_main 0FA8                     ??_main 001B  
            __activetblptr 0003                     _CCPR1H 0FAA                     _CCPR2H 0FA6  
                   _CCPR3H 0F25                     _CCPR4H 0F21                     _RC0PPS 0E62  
                   _RC4REG 0EE3                     _RE2PPS 0E74                     _RD5PPS 0E6F  
                   _RC7PPS 0E69                     _RD6PPS 0E70                     _RE4PPS 0E76  
                   _RG6PPS 0E88                     _RX4PPS 0E15                     _TX4REG 0EE4  
         _turnLeft135Delay 0037               _CCPTMRS0bits 0FAD            _lights_flashing 0E02  
                   clear_0 0FCE                     clear_1 0FDA                     isa$std 0001  
             __pdataCOMRAM 002F               __mediumconst 0000                     tblptrh 0FF7  
                   tblptrl 0FF6                     tblptru 0FF8          ??_initDCmotorsPWM 001B  
        _buggy_lights_init 0FE6                 __accesstop 0060    __end_of__initialization 0FE0  
       ?_buggy_lights_init 0019              ___rparam_used 0001             __pcstackCOMRAM 0019  
      ??_buggy_lights_init 0019  __end_of_buggy_lights_init 1004                 __pbssBANK0 0060  
  __end_of_lights_flashing 0E9C               _T2CLKCONbits 0FBF                    _SP4BRGH 0EE6  
                  _SP4BRGL 0EE5                    _SSP2ADD 0ED6                    _SSP2BUF 0ED5  
                  __Hparam 0000                    __Lparam 0000               __psmallconst 0E00  
                  __pcinit 0FA8                    __ramtop 0E00                    __ptext0 0F2C  
                  __ptext1 0E02                    __ptext2 0E9C                    __ptext3 0FE6  
                _T2CONbits 0FBD                  _T2HLTbits 0FBE              _RxBufWriteCnt 0018  
     end_of_initialization 0FE0           ?_lights_flashing 0019                    postdec1 0FE5  
                  postinc0 0FEE            _initDCmotorsPWM 0E9C                  _TRISCbits 0F83  
                _TRISDbits 0F84                  _TRISEbits 0F85                  _TRISFbits 0F86  
                _TRISGbits 0F87                  _TRISHbits 0F88                _CCP1CONbits 0FAB  
             _EUSART4RXbuf 0001               _EUSART4TXbuf 0060                _CCP2CONbits 0FA7  
              _CCP3CONbits 0F26                _CCP4CONbits 0F22                 main@motorL 001D  
               main@motorR 0026              __pidataCOMRAM 1004        start_initialization 0FA8  
            _TxBufWriteCnt 0016           _turnRight90Delay 0039    __end_of_initDCmotorsPWM 0F2C  
              __pbssCOMRAM 0001                __smallconst 0E00               _RxBufReadCnt 0017  
            _headbuttDelay 0031   initDCmotorsPWM@PWMperiod 0019                  _rampDelay 0040  
                 _LATCbits 0F7B                   _LATDbits 0F7C                   _LATEbits 0F7D  
                 _LATFbits 0F7E                   _LATGbits 0F7F                   _LATHbits 0F80  
                 _PIE4bits 0E2D                   _PIR4bits 0E37           ?_initDCmotorsPWM 0019  
                 _SSP2CON2 0EDA                   _SSP2STAT 0ED8               _TxBufReadCnt 0015  
                copy_data0 0FBC                   __Hrparam 0000                   __Lrparam 0000  
               _ANSELDbits 0EA7               _SSP2CON1bits 0ED9               _SSP2CON2bits 0EDA  
                 isa$xinst 0000                 _RC4STAbits 0EE7               _topGearRight 003E  
              _topGearLeft 003F                 _SSP2DATPPS 0E1D          ??_lights_flashing 0019  
               _SSP2CLKPPS 0E1C                 _TX4STAbits 0EE8  
