

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 26 12:39:39 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16   000000                     
    17                           ; Generated 21/07/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F67K40 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51   000000                     
    52                           	psect	idataCOMRAM
    53   000F18                     __pidataCOMRAM:
    54                           	callstack 0
    55                           
    56                           ;initializer for _turn180Delay
    57   000F18  01FE               	dw	510
    58                           
    59                           ;initializer for _turnRight135Delay
    60   000F1A  012C               	dw	300
    61                           
    62                           ;initializer for _turnLeft135Delay
    63   000F1C  012C               	dw	300
    64                           
    65                           ;initializer for _turnRight90Delay
    66   000F1E  00AF               	dw	175
    67                           
    68                           ;initializer for _turnLeft90Delay
    69   000F20  00AF               	dw	175
    70                           
    71                           ;initializer for _forward1Delay
    72   000F22  00C8               	dw	200
    73                           
    74                           ;initializer for _turningGear
    75   000F24  2A                 	db	42
    76                           
    77                           ;initializer for _topAdjustSide
    78   000F25  01                 	db	1
    79                           
    80                           ;initializer for _topAdjustPower
    81   000F26  02                 	db	2
    82                           
    83                           ;initializer for _topGear
    84   000F27  1E                 	db	30
    85                           
    86                           ;initializer for _rampDelay
    87   000F28  08                 	db	8
    88   000000                     _LATDbits	set	3964
    89   000000                     _TRISDbits	set	3972
    90   000000                     _RC7PPS	set	3689
    91   000000                     _RE2PPS	set	3700
    92   000000                     _CCPR4H	set	3873
    93   000000                     _CCPR3H	set	3877
    94   000000                     _CCPR2H	set	4006
    95   000000                     _CCPR1H	set	4010
    96   000000                     _CCP1CONbits	set	4011
    97   000000                     _CCPTMRS0bits	set	4013
    98   000000                     _T2PR	set	4028
    99   000000                     _T2CONbits	set	4029
   100   000000                     _CCP2CONbits	set	4007
   101   000000                     _LATAbits	set	3961
   102   000000                     _CCP3CONbits	set	3878
   103   000000                     _LATCbits	set	3963
   104   000000                     _LATEbits	set	3965
   105   000000                     _TRISCbits	set	3971
   106   000000                     _TRISEbits	set	3973
   107   000000                     _CCP4CONbits	set	3874
   108   000000                     _TRISGbits	set	3975
   109   000000                     _LATGbits	set	3967
   110   000000                     _TRISAbits	set	3969
   111   000000                     _RE4PPS	set	3702
   112   000000                     _RG6PPS	set	3720
   113   000000                     _T2CLKCONbits	set	4031
   114   000000                     _T2HLTbits	set	4030
   115                           
   116                           ; #config settings
   117                           
   118                           	psect	cinit
   119   000EF2                     __pcinit:
   120                           	callstack 0
   121   000EF2                     start_initialization:
   122                           	callstack 0
   123   000EF2                     __initialization:
   124                           	callstack 0
   125                           
   126                           ; Initialize objects allocated to COMRAM (17 bytes)
   127                           ; load TBLPTR registers with __pidataCOMRAM
   128   000EF2  0E18               	movlw	low __pidataCOMRAM
   129   000EF4  6EF6               	movwf	tblptrl,c
   130   000EF6  0E0F               	movlw	high __pidataCOMRAM
   131   000EF8  6EF7               	movwf	tblptrh,c
   132   000EFA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   133   000EFC  6EF8               	movwf	tblptru,c
   134   000EFE  EE00  F015         	lfsr	0,__pdataCOMRAM
   135   000F02  EE10 F011          	lfsr	1,17
   136   000F06                     copy_data0:
   137   000F06  0009               	tblrd		*+
   138   000F08  CFF5 FFEE          	movff	tablat,postinc0
   139   000F0C  50E5               	movf	postdec1,w,c
   140   000F0E  50E1               	movf	fsr1l,w,c
   141   000F10  E1FA               	bnz	copy_data0
   142   000F12                     end_of_initialization:
   143                           	callstack 0
   144   000F12                     __end_of__initialization:
   145                           	callstack 0
   146   000F12  0100               	movlb	0
   147   000F14  EF49  F007         	goto	_main	;jump to C main() function
   148                           
   149                           	psect	dataCOMRAM
   150   000015                     __pdataCOMRAM:
   151                           	callstack 0
   152   000015                     _turn180Delay:
   153                           	callstack 0
   154   000015                     	ds	2
   155   000017                     _turnRight135Delay:
   156                           	callstack 0
   157   000017                     	ds	2
   158   000019                     _turnLeft135Delay:
   159                           	callstack 0
   160   000019                     	ds	2
   161   00001B                     _turnRight90Delay:
   162                           	callstack 0
   163   00001B                     	ds	2
   164   00001D                     _turnLeft90Delay:
   165                           	callstack 0
   166   00001D                     	ds	2
   167   00001F                     _forward1Delay:
   168                           	callstack 0
   169   00001F                     	ds	2
   170   000021                     _turningGear:
   171                           	callstack 0
   172   000021                     	ds	1
   173   000022                     _topAdjustSide:
   174                           	callstack 0
   175   000022                     	ds	1
   176   000023                     _topAdjustPower:
   177                           	callstack 0
   178   000023                     	ds	1
   179   000024                     _topGear:
   180                           	callstack 0
   181   000024                     	ds	1
   182   000025                     _rampDelay:
   183                           	callstack 0
   184   000025                     	ds	1
   185                           
   186                           	psect	cstackCOMRAM
   187   000001                     __pcstackCOMRAM:
   188                           	callstack 0
   189   000001                     initDCmotorsPWM@PWMperiod:
   190                           	callstack 0
   191                           
   192                           ; 2 bytes @ 0x0
   193   000001                     	ds	2
   194   000003                     main@motorL:
   195                           	callstack 0
   196                           
   197                           ; 9 bytes @ 0x2
   198   000003                     	ds	9
   199   00000C                     main@motorR:
   200                           	callstack 0
   201                           
   202                           ; 9 bytes @ 0xB
   203   00000C                     	ds	9
   204                           
   205 ;;
   206 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   207 ;;
   208 ;; *************** function _main *****************
   209 ;; Defined at:
   210 ;;		line 22 in file "main.c"
   211 ;; Parameters:    Size  Location     Type
   212 ;;		None
   213 ;; Auto vars:     Size  Location     Type
   214 ;;  motorR          9   11[COMRAM] struct DC_motor
   215 ;;  motorL          9    2[COMRAM] struct DC_motor
   216 ;;  PWMcycle        2    0        unsigned int 
   217 ;; Return value:  Size  Location     Type
   218 ;;                  1    wreg      void 
   219 ;; Registers used:
   220 ;;		wreg, status,2, status,0, cstack
   221 ;; Tracked objects:
   222 ;;		On entry : 0/0
   223 ;;		On exit  : 0/0
   224 ;;		Unchanged: 0/0
   225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   227 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   229 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   230 ;;Total ram usage:       18 bytes
   231 ;; Hardware stack levels required when called: 1
   232 ;; This function calls:
   233 ;;		_buggy_lights_init
   234 ;;		_initDCmotorsPWM
   235 ;; This function is called by:
   236 ;;		Startup code after reset
   237 ;; This function uses a non-reentrant model
   238 ;;
   239                           
   240                           	psect	text0
   241   000E92                     __ptext0:
   242                           	callstack 0
   243   000E92                     _main:
   244                           	callstack 30
   245   000E92                     
   246                           ;main.c: 24:     initDCmotorsPWM(PWMcycle);
   247   000E92  0E00               	movlw	0
   248   000E94  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   249   000E96  0E63               	movlw	99
   250   000E98  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   251   000E9A  EC01  F007         	call	_initDCmotorsPWM	;wreg free
   252   000E9E                     
   253                           ;main.c: 26:     struct DC_motor motorL, motorR;;main.c: 28:     motorL.power = 0;
   254   000E9E  0E00               	movlw	0
   255   000EA0  6E03               	movwf	main@motorL^0,c
   256   000EA2                     
   257                           ;main.c: 29:     motorL.direction = 1;
   258   000EA2  0E01               	movlw	1
   259   000EA4  6E04               	movwf	(main@motorL+1)^0,c
   260   000EA6                     
   261                           ;main.c: 30:     motorL.brakemode = 1;
   262   000EA6  0E01               	movlw	1
   263   000EA8  6E05               	movwf	(main@motorL+2)^0,c
   264   000EAA                     
   265                           ;main.c: 31:     motorL.PWMperiod = PWMcycle;
   266   000EAA  0E00               	movlw	0
   267   000EAC  6E07               	movwf	(main@motorL+4)^0,c
   268   000EAE  0E63               	movlw	99
   269   000EB0  6E06               	movwf	(main@motorL+3)^0,c
   270   000EB2                     
   271                           ;main.c: 32:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   272   000EB2  0EAA               	movlw	170
   273   000EB4  6E08               	movwf	(main@motorL+5)^0,c
   274   000EB6  0E0F               	movlw	15
   275   000EB8  6E09               	movwf	(main@motorL+6)^0,c
   276   000EBA                     
   277                           ;main.c: 33:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   278   000EBA  0EA6               	movlw	166
   279   000EBC  6E0A               	movwf	(main@motorL+7)^0,c
   280   000EBE  0E0F               	movlw	15
   281   000EC0  6E0B               	movwf	(main@motorL+8)^0,c
   282   000EC2                     
   283                           ;main.c: 35:     motorR.power = 0;
   284   000EC2  0E00               	movlw	0
   285   000EC4  6E0C               	movwf	main@motorR^0,c
   286   000EC6                     
   287                           ;main.c: 36:     motorR.direction = 1;
   288   000EC6  0E01               	movlw	1
   289   000EC8  6E0D               	movwf	(main@motorR+1)^0,c
   290   000ECA                     
   291                           ;main.c: 37:     motorR.brakemode = 1;
   292   000ECA  0E01               	movlw	1
   293   000ECC  6E0E               	movwf	(main@motorR+2)^0,c
   294   000ECE                     
   295                           ;main.c: 38:     motorR.PWMperiod = PWMcycle;
   296   000ECE  0E00               	movlw	0
   297   000ED0  6E10               	movwf	(main@motorR+4)^0,c
   298   000ED2  0E63               	movlw	99
   299   000ED4  6E0F               	movwf	(main@motorR+3)^0,c
   300   000ED6                     
   301                           ;main.c: 39:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   302   000ED6  0E25               	movlw	37
   303   000ED8  6E11               	movwf	(main@motorR+5)^0,c
   304   000EDA  0E0F               	movlw	15
   305   000EDC  6E12               	movwf	(main@motorR+6)^0,c
   306   000EDE                     
   307                           ;main.c: 40:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   308   000EDE  0E21               	movlw	33
   309   000EE0  6E13               	movwf	(main@motorR+7)^0,c
   310   000EE2  0E0F               	movlw	15
   311   000EE4  6E14               	movwf	(main@motorR+8)^0,c
   312                           
   313                           ;main.c: 42:     buggy_lights_init();
   314   000EE6  EC95  F007         	call	_buggy_lights_init	;wreg free
   315   000EEA                     l39:
   316   000EEA  EF75  F007         	goto	l39
   317   000EEE  EF00  F000         	goto	start
   318   000EF2                     __end_of_main:
   319                           	callstack 0
   320                           
   321 ;; *************** function _initDCmotorsPWM *****************
   322 ;; Defined at:
   323 ;;		line 5 in file "dc_motor.c"
   324 ;; Parameters:    Size  Location     Type
   325 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   326 ;; Auto vars:     Size  Location     Type
   327 ;;		None
   328 ;; Return value:  Size  Location     Type
   329 ;;                  1    wreg      void 
   330 ;; Registers used:
   331 ;;		wreg, status,2
   332 ;; Tracked objects:
   333 ;;		On entry : 0/0
   334 ;;		On exit  : 0/0
   335 ;;		Unchanged: 0/0
   336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   337 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   341 ;;Total ram usage:        2 bytes
   342 ;; Hardware stack levels used: 1
   343 ;; This function calls:
   344 ;;		Nothing
   345 ;; This function is called by:
   346 ;;		_main
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           	psect	text1
   351   000E02                     __ptext1:
   352                           	callstack 0
   353   000E02                     _initDCmotorsPWM:
   354                           	callstack 30
   355   000E02                     
   356                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   357   000E02  9485               	bcf	133,2,c	;volatile
   358                           
   359                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   360   000E04  9885               	bcf	133,4,c	;volatile
   361                           
   362                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   363   000E06  9E83               	bcf	131,7,c	;volatile
   364                           
   365                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   366   000E08  9C87               	bcf	135,6,c	;volatile
   367                           
   368                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   369   000E0A  947D               	bcf	125,2,c	;volatile
   370                           
   371                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   372   000E0C  987D               	bcf	125,4,c	;volatile
   373                           
   374                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   375   000E0E  9E7B               	bcf	123,7,c	;volatile
   376                           
   377                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   378   000E10  9C7F               	bcf	127,6,c	;volatile
   379   000E12                     
   380                           ;dc_motor.c: 18:     RE2PPS=0x05;
   381   000E12  0E05               	movlw	5
   382   000E14  010E               	movlb	14	; () banked
   383   000E16  6F74               	movwf	116,b	;volatile
   384                           
   385                           ;dc_motor.c: 19:     RE4PPS=0x06;
   386   000E18  0E06               	movlw	6
   387   000E1A  6F76               	movwf	118,b	;volatile
   388                           
   389                           ;dc_motor.c: 20:     RC7PPS=0x07;
   390   000E1C  0E07               	movlw	7
   391   000E1E  6F69               	movwf	105,b	;volatile
   392                           
   393                           ;dc_motor.c: 21:     RG6PPS=0x08;
   394   000E20  0E08               	movlw	8
   395   000E22  6F88               	movwf	136,b	;volatile
   396                           
   397                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   398   000E24  50BD               	movf	189,w,c	;volatile
   399   000E26  0B8F               	andlw	-113
   400   000E28  0940               	iorlw	64
   401   000E2A  6EBD               	movwf	189,c	;volatile
   402                           
   403                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   404   000E2C  0EE0               	movlw	-32
   405   000E2E  16BE               	andwf	190,f,c	;volatile
   406                           
   407                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   408   000E30  50BF               	movf	191,w,c	;volatile
   409   000E32  0BF0               	andlw	-16
   410   000E34  0901               	iorlw	1
   411   000E36  6EBF               	movwf	191,c	;volatile
   412   000E38                     
   413                           ; BSR set to: 14
   414                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   415   000E38  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   416   000E3C                     
   417                           ; BSR set to: 14
   418                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   419   000E3C  8EBD               	bsf	189,7,c	;volatile
   420                           
   421                           ;dc_motor.c: 35:     CCPR1H=0;
   422   000E3E  0E00               	movlw	0
   423   000E40  6EAA               	movwf	170,c	;volatile
   424                           
   425                           ;dc_motor.c: 36:     CCPR2H=0;
   426   000E42  0E00               	movlw	0
   427   000E44  6EA6               	movwf	166,c	;volatile
   428                           
   429                           ;dc_motor.c: 37:     CCPR3H=0;
   430   000E46  0E00               	movlw	0
   431   000E48  010F               	movlb	15	; () banked
   432   000E4A  6F25               	movwf	37,b	;volatile
   433                           
   434                           ;dc_motor.c: 38:     CCPR4H=0;
   435   000E4C  0E00               	movlw	0
   436   000E4E  6F21               	movwf	33,b	;volatile
   437                           
   438                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   439   000E50  0EFC               	movlw	-4
   440   000E52  16AD               	andwf	173,f,c	;volatile
   441                           
   442                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   443   000E54  0EF3               	movlw	-13
   444   000E56  16AD               	andwf	173,f,c	;volatile
   445                           
   446                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   447   000E58  0ECF               	movlw	-49
   448   000E5A  16AD               	andwf	173,f,c	;volatile
   449                           
   450                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   451   000E5C  0E3F               	movlw	-193
   452   000E5E  16AD               	andwf	173,f,c	;volatile
   453   000E60                     
   454                           ; BSR set to: 15
   455                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   456   000E60  88AB               	bsf	171,4,c	;volatile
   457                           
   458                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   459   000E62  50AB               	movf	171,w,c	;volatile
   460   000E64  0BF0               	andlw	-16
   461   000E66  090C               	iorlw	12
   462   000E68  6EAB               	movwf	171,c	;volatile
   463   000E6A                     
   464                           ; BSR set to: 15
   465                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   466   000E6A  8EAB               	bsf	171,7,c	;volatile
   467   000E6C                     
   468                           ; BSR set to: 15
   469                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   470   000E6C  88A7               	bsf	167,4,c	;volatile
   471                           
   472                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   473   000E6E  50A7               	movf	167,w,c	;volatile
   474   000E70  0BF0               	andlw	-16
   475   000E72  090C               	iorlw	12
   476   000E74  6EA7               	movwf	167,c	;volatile
   477   000E76                     
   478                           ; BSR set to: 15
   479                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   480   000E76  8EA7               	bsf	167,7,c	;volatile
   481   000E78                     
   482                           ; BSR set to: 15
   483                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   484   000E78  8926               	bsf	38,4,b	;volatile
   485                           
   486                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   487   000E7A  5126               	movf	38,w,b	;volatile
   488   000E7C  0BF0               	andlw	-16
   489   000E7E  090C               	iorlw	12
   490   000E80  6F26               	movwf	38,b	;volatile
   491   000E82                     
   492                           ; BSR set to: 15
   493                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   494   000E82  8F26               	bsf	38,7,b	;volatile
   495   000E84                     
   496                           ; BSR set to: 15
   497                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   498   000E84  8922               	bsf	34,4,b	;volatile
   499                           
   500                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   501   000E86  5122               	movf	34,w,b	;volatile
   502   000E88  0BF0               	andlw	-16
   503   000E8A  090C               	iorlw	12
   504   000E8C  6F22               	movwf	34,b	;volatile
   505   000E8E                     
   506                           ; BSR set to: 15
   507                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   508   000E8E  8F22               	bsf	34,7,b	;volatile
   509   000E90                     
   510                           ; BSR set to: 15
   511   000E90  0012               	return		;funcret
   512   000E92                     __end_of_initDCmotorsPWM:
   513                           	callstack 0
   514                           
   515 ;; *************** function _buggy_lights_init *****************
   516 ;; Defined at:
   517 ;;		line 4 in file "buggy_lights.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;		None
   520 ;; Auto vars:     Size  Location     Type
   521 ;;		None
   522 ;; Return value:  Size  Location     Type
   523 ;;                  1    wreg      void 
   524 ;; Registers used:
   525 ;;		None
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   535 ;;Total ram usage:        0 bytes
   536 ;; Hardware stack levels used: 1
   537 ;; This function calls:
   538 ;;		Nothing
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           	psect	text2
   545   000F2A                     __ptext2:
   546                           	callstack 0
   547   000F2A                     _buggy_lights_init:
   548                           	callstack 30
   549   000F2A                     
   550                           ;buggy_lights.c: 7:     TRISAbits.TRISA0 = 0;
   551   000F2A  9081               	bcf	129,0,c	;volatile
   552                           
   553                           ;buggy_lights.c: 8:     TRISDbits.TRISD0 = 0;
   554   000F2C  9084               	bcf	132,0,c	;volatile
   555                           
   556                           ;buggy_lights.c: 9:     TRISCbits.TRISC5 = 0;
   557   000F2E  9A83               	bcf	131,5,c	;volatile
   558                           
   559                           ;buggy_lights.c: 12:     LATAbits.LATA0 = 1;
   560   000F30  8079               	bsf	121,0,c	;volatile
   561                           
   562                           ;buggy_lights.c: 13:     LATDbits.LATD0 = 1;
   563   000F32  807C               	bsf	124,0,c	;volatile
   564                           
   565                           ;buggy_lights.c: 14:     LATCbits.LATC5 = 1;
   566   000F34  8A7B               	bsf	123,5,c	;volatile
   567   000F36  0012               	return		;funcret
   568   000F38                     __end_of_buggy_lights_init:
   569                           	callstack 0
   570                           
   571                           	psect	smallconst
   572   000E00                     __psmallconst:
   573                           	callstack 0
   574   000E00  00                 	db	0
   575   000E01  00                 	db	0	; dummy byte at the end
   576   000000                     
   577                           	psect	rparam
   578   000000                     
   579                           	psect	config
   580                           
   581                           ;Config register CONFIG1L @ 0x300000
   582                           ;	External Oscillator mode Selection bits
   583                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   584                           ;	Power-up default value for COSC bits
   585                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   586   300000                     	org	3145728
   587   300000  AA                 	db	170
   588                           
   589                           ;Config register CONFIG1H @ 0x300001
   590                           ;	unspecified, using default values
   591                           ;	Clock Out Enable bit
   592                           ;	CLKOUTEN = 0x1, unprogrammed default
   593                           ;	Clock Switch Enable bit
   594                           ;	CSWEN = 0x1, unprogrammed default
   595                           ;	Fail-Safe Clock Monitor Enable bit
   596                           ;	FCMEN = 0x1, unprogrammed default
   597   300001                     	org	3145729
   598   300001  FF                 	db	255
   599                           
   600                           ;Config register CONFIG3L @ 0x300004
   601                           ;	WDT Period Select bits
   602                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   603                           ;	WDT operating mode
   604                           ;	WDTE = OFF, WDT Disabled
   605   300004                     	org	3145732
   606   300004  9F                 	db	159
   607                           
   608                           ;Config register CONFIG3H @ 0x300005
   609                           ;	unspecified, using default values
   610                           ;	WDT Window Select bits
   611                           ;	WDTCWS = 0x7, unprogrammed default
   612                           ;	WDT input clock selector
   613                           ;	WDTCCS = 0x7, unprogrammed default
   614   300005                     	org	3145733
   615   300005  FF                 	db	255
   616                           tosu	equ	0xFFF
   617                           tosh	equ	0xFFE
   618                           tosl	equ	0xFFD
   619                           stkptr	equ	0xFFC
   620                           pclatu	equ	0xFFB
   621                           pclath	equ	0xFFA
   622                           pcl	equ	0xFF9
   623                           tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           prodh	equ	0xFF4
   628                           prodl	equ	0xFF3
   629                           indf0	equ	0xFEF
   630                           postinc0	equ	0xFEE
   631                           postdec0	equ	0xFED
   632                           preinc0	equ	0xFEC
   633                           plusw0	equ	0xFEB
   634                           fsr0h	equ	0xFEA
   635                           fsr0l	equ	0xFE9
   636                           wreg	equ	0xFE8
   637                           indf1	equ	0xFE7
   638                           postinc1	equ	0xFE6
   639                           postdec1	equ	0xFE5
   640                           preinc1	equ	0xFE4
   641                           plusw1	equ	0xFE3
   642                           fsr1h	equ	0xFE2
   643                           fsr1l	equ	0xFE1
   644                           bsr	equ	0xFE0
   645                           indf2	equ	0xFDF
   646                           postinc2	equ	0xFDE
   647                           postdec2	equ	0xFDD
   648                           preinc2	equ	0xFDC
   649                           plusw2	equ	0xFDB
   650                           fsr2h	equ	0xFDA
   651                           fsr2l	equ	0xFD9
   652                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     20      37
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0     407
                                              2 COMRAM    18    18      0
                  _buggy_lights_init
                    _initDCmotorsPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _initDCmotorsPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      50        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRllllhh     98      0       0      44        0.0%
BITBIGSFRllllll     7A      0       0      48        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     14      25       1       38.9%
BITBIGSFRllhlll     52      0       0      42        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRllhhh      1E      0       0      36        0.0%
BITBIGSFRllllhh     11      0       0      45        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRlllllh      A      0       0      47        0.0%
BITBIGSFRlllh        2      0       0      43        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRllhlll      1      0       0      41        0.0%
BITBIGSFRllhllh      1      0       0      38        0.0%
BITBIGSFRllllhl      1      0       0      46        0.0%
BITBIGSFRllhllh      1      0       0      39        0.0%
BITBIGSFRllhllh      1      0       0      40        0.0%
BITBIGSFRllhhl       1      0       0      37        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      25      49        0.0%
DATA                 0      0      25       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 26 12:39:39 2024

             _turn180Delay 0015                         l40 0EEA                         l39 0EEA  
                      l115 0E90                        l189 0F36                        l905 0F2A  
                     l1101 0EC2                       l1111 0EDE                       l1103 0EC6  
                     l1105 0ECA                       l1107 0ECE                       l1061 0E02  
                     l1109 0ED6                       l1071 0E6A                       l1063 0E12  
                     l1081 0E84                       l1073 0E6C                       l1065 0E38  
                     l1083 0E8E                       l1075 0E76                       l1067 0E3C  
                     l1091 0EA2                       l1077 0E78                       l1069 0E60  
                     l1093 0EA6                       l1085 0E92                       l1079 0E82  
                     l1095 0EAA                       l1087 0E92                       l1097 0EB2  
                     l1089 0E9E                       l1099 0EBA                       _T2PR 0FBC  
                     _main 0E92                       fsr1l 0FE1                       start 0000  
             ___param_bank 0000                      ?_main 0001                _turningGear 0021  
        _turnRight135Delay 0017                      tablat 0FF5            _turnLeft90Delay 001D  
          __initialization 0EF2               __end_of_main 0EF2                     ??_main 0003  
            __activetblptr 0000                     _CCPR1H 0FAA                     _CCPR2H 0FA6  
                   _CCPR3H 0F25                     _CCPR4H 0F21                     _RE2PPS 0E74  
                   _RC7PPS 0E69                     _RE4PPS 0E76                     _RG6PPS 0E88  
         _turnLeft135Delay 0019               _CCPTMRS0bits 0FAD                     isa$std 0001  
             __pdataCOMRAM 0015               __mediumconst 0000                     tblptrh 0FF7  
                   tblptrl 0FF6                     tblptru 0FF8          ??_initDCmotorsPWM 0003  
        _buggy_lights_init 0F2A                 __accesstop 0060    __end_of__initialization 0F12  
       ?_buggy_lights_init 0001              ___rparam_used 0001             __pcstackCOMRAM 0001  
      ??_buggy_lights_init 0001              _forward1Delay 001F  __end_of_buggy_lights_init 0F38  
             _T2CLKCONbits 0FBF                    __Hparam 0000                    __Lparam 0000  
             __psmallconst 0E00                    __pcinit 0EF2                    __ramtop 0E00  
                  __ptext0 0E92                    __ptext1 0E02                    __ptext2 0F2A  
                _T2CONbits 0FBD                  _T2HLTbits 0FBE                    _topGear 0024  
     end_of_initialization 0F12                    postdec1 0FE5                    postinc0 0FEE  
          _initDCmotorsPWM 0E02                  _TRISAbits 0F81                  _TRISCbits 0F83  
                _TRISDbits 0F84                  _TRISEbits 0F85                  _TRISGbits 0F87  
              _CCP1CONbits 0FAB                _CCP2CONbits 0FA7                _CCP3CONbits 0F26  
              _CCP4CONbits 0F22                 main@motorL 0003                 main@motorR 000C  
            __pidataCOMRAM 0F18        start_initialization 0EF2           _turnRight90Delay 001B  
  __end_of_initDCmotorsPWM 0E92             _topAdjustPower 0023                __smallconst 0E00  
 initDCmotorsPWM@PWMperiod 0001                  _rampDelay 0025                   _LATAbits 0F79  
                 _LATCbits 0F7B                   _LATDbits 0F7C                   _LATEbits 0F7D  
                 _LATGbits 0F7F           ?_initDCmotorsPWM 0001                  copy_data0 0F06  
                 __Hrparam 0000                   __Lrparam 0000              _topAdjustSide 0022  
                 isa$xinst 0000  
