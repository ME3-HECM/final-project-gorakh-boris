

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 12 19:50:26 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    41   000000                     
    42                           ; Generated 21/07/2023 GMT
    43                           ; 
    44                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F67K40 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000000                     
    77                           	psect	idataCOMRAM
    78   0014DE                     __pidataCOMRAM:
    79                           	callstack 0
    80                           
    81                           ;initializer for _manoeuvre_pointer
    82   0014DE  00                 	db	low _trail_manoeuvre
    83   0014DF  01                 	db	high _trail_manoeuvre
    84                           
    85                           ;initializer for _timer_low_pointer
    86   0014E0  14                 	db	low _trail_timer_low
    87   0014E1  01                 	db	high _trail_timer_low
    88                           
    89                           ;initializer for _timer_high_pointer
    90   0014E2  28                 	db	low _trail_timer_high
    91   0014E3  01                 	db	high _trail_timer_high
    92                           
    93                           ;initializer for _headbuttDelay
    94   0014E4  0046               	dw	70
    95                           
    96                           ;initializer for _turn180Delay
    97   0014E6  0190               	dw	400
    98                           
    99                           ;initializer for _turnRight135Delay
   100   0014E8  0106               	dw	262
   101                           
   102                           ;initializer for _turnLeft135Delay
   103   0014EA  00FA               	dw	250
   104                           
   105                           ;initializer for _turnRight90Delay
   106   0014EC  006C               	dw	108
   107                           
   108                           ;initializer for _turnLeft90Delay
   109   0014EE  0054               	dw	84
   110                           
   111                           ;initializer for _wall_threshold_blue
   112   0014F0  001E               	dw	30
   113                           
   114                           ;initializer for _turningRightGear
   115   0014F2  28                 	db	40
   116                           
   117                           ;initializer for _turningLeftGear
   118   0014F3  28                 	db	40
   119                           
   120                           ;initializer for _topGearRight
   121   0014F4  14                 	db	20
   122                           
   123                           ;initializer for _topGearLeft
   124   0014F5  14                 	db	20
   125                           
   126                           ;initializer for _rampDelay
   127   0014F6  08                 	db	8
   128                           
   129                           ;initializer for _sample_count
   130   0014F7  14                 	db	20
   131                           
   132                           	psect	idataBANK0
   133   001534                     __pidataBANK0:
   134                           	callstack 0
   135                           
   136                           ;initializer for _squareDelay
   137   001534  012C               	dw	300
   138   000000                     _TMR0H	set	4052
   139   000000                     _TX4REG	set	3812
   140   000000                     _RC4STAbits	set	3815
   141   000000                     _SP4BRGH	set	3814
   142   000000                     _LATEbits	set	3965
   143   000000                     _TRISEbits	set	3973
   144   000000                     _LATGbits	set	3967
   145   000000                     _TRISGbits	set	3975
   146   000000                     _LATFbits	set	3966
   147   000000                     _LATHbits	set	3968
   148   000000                     _TRISFbits	set	3974
   149   000000                     _TRISHbits	set	3976
   150   000000                     _SSP2CON2bits	set	3802
   151   000000                     _RX4PPS	set	3605
   152   000000                     _SSP2CLKPPS	set	3612
   153   000000                     _SSP2DATPPS	set	3613
   154   000000                     _RC7PPS	set	3689
   155   000000                     _RE2PPS	set	3700
   156   000000                     _LATAbits	set	3961
   157   000000                     _LATDbits	set	3964
   158   000000                     _TRISDbits	set	3972
   159   000000                     _PORTFbits	set	3982
   160   000000                     _T2PR	set	4028
   161   000000                     _T2CONbits	set	4029
   162   000000                     _CCPR2H	set	4006
   163   000000                     _CCPR1H	set	4010
   164   000000                     _TRISCbits	set	3971
   165   000000                     _TRISAbits	set	3969
   166   000000                     _LATCbits	set	3963
   167   000000                     _RE4PPS	set	3702
   168   000000                     _RG6PPS	set	3720
   169   000000                     _RD5PPS	set	3695
   170   000000                     _ANSELDbits	set	3751
   171   000000                     _SSP2ADD	set	3798
   172   000000                     _SSP2CON1bits	set	3801
   173   000000                     _CCPR4H	set	3873
   174   000000                     _CCPR3H	set	3877
   175   000000                     _TMR0L	set	4051
   176   000000                     _T0CON0bits	set	4053
   177   000000                     _T0CON1bits	set	4054
   178   000000                     _T2CLKCONbits	set	4031
   179   000000                     _T2HLTbits	set	4030
   180   000000                     _CCP1CONbits	set	4011
   181   000000                     _CCPTMRS0bits	set	4013
   182   000000                     _CCP2CONbits	set	4007
   183   000000                     _CCP3CONbits	set	3878
   184   000000                     _CCP4CONbits	set	3874
   185   000000                     _RC4REG	set	3811
   186   000000                     _SP4BRGL	set	3813
   187   000000                     _TX4STAbits	set	3816
   188   000000                     _BAUD4CONbits	set	3817
   189   000000                     _SSP2CON2	set	3802
   190   000000                     _SSP2STAT	set	3800
   191   000000                     _ANSELFbits	set	3764
   192   000000                     _SSP2BUF	set	3797
   193   000000                     _PIE0bits	set	3625
   194   000000                     _PIR4bits	set	3639
   195   000000                     _RC0PPS	set	3682
   196   000000                     _RD6PPS	set	3696
   197   000000                     _INTCONbits	set	4082
   198   000000                     _PIR0bits	set	3635
   199                           
   200                           	psect	smallconst
   201   000E00                     __psmallconst:
   202                           	callstack 0
   203   000E00  00                 	db	0
   204   000E01                     STR_5:
   205                           
   206                           ; BSR set to: 14
   207   000E01  25                 	db	37
   208   000E02  75                 	db	117	;'u'
   209   000E03  20                 	db	32
   210   000E04  25                 	db	37
   211   000E05  75                 	db	117	;'u'
   212   000E06  20                 	db	32
   213   000E07  25                 	db	37
   214   000E08  75                 	db	117	;'u'
   215   000E09  20                 	db	32
   216   000E0A  25                 	db	37
   217   000E0B  75                 	db	117	;'u'
   218   000E0C  20                 	db	32
   219   000E0D  0D                 	db	13
   220   000E0E  00                 	db	0
   221   000E0F                     STR_1:
   222                           
   223                           ; BSR set to: 14
   224   000E0F  25                 	db	37
   225   000E10  64                 	db	100	;'d'
   226   000E11  20                 	db	32
   227   000E12  0D                 	db	13
   228   000E13  00                 	db	0
   229   000E14                     STR_2:
   230                           
   231                           ; BSR set to: 14
   232   000E14  25                 	db	37
   233   000E15  64                 	db	100	;'d'
   234   000E16  20                 	db	32
   235   000E17  00                 	db	0
   236   000E18  00                 	db	0	; dummy byte at the end
   237   000000                     
   238                           ; #config settings
   239                           
   240                           	psect	cinit
   241   001316                     __pcinit:
   242                           	callstack 0
   243   001316                     start_initialization:
   244                           	callstack 0
   245   001316                     __initialization:
   246                           	callstack 0
   247                           
   248                           ; Initialize objects allocated to BANK0 (2 bytes)
   249                           ; load TBLPTR registers with __pidataBANK0
   250   001316  0E34               	movlw	low __pidataBANK0
   251   001318  6EF6               	movwf	tblptrl,c
   252   00131A  0E15               	movlw	high __pidataBANK0
   253   00131C  6EF7               	movwf	tblptrh,c
   254   00131E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   255   001320  6EF8               	movwf	tblptru,c
   256   001322  0009               	tblrd		*+	;fetch initializer
   257   001324  CFF5 F060          	movff	tablat,__pdataBANK0
   258   001328  0009               	tblrd		*+	;fetch initializer
   259   00132A  CFF5 F061          	movff	tablat,__pdataBANK0+1
   260                           
   261                           ; Initialize objects allocated to COMRAM (26 bytes)
   262                           ; load TBLPTR registers with __pidataCOMRAM
   263   00132E  0EDE               	movlw	low __pidataCOMRAM
   264   001330  6EF6               	movwf	tblptrl,c
   265   001332  0E14               	movlw	high __pidataCOMRAM
   266   001334  6EF7               	movwf	tblptrh,c
   267   001336  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   268   001338  6EF8               	movwf	tblptru,c
   269   00133A  EE00  F040         	lfsr	0,__pdataCOMRAM
   270   00133E  EE10 F01A          	lfsr	1,26
   271   001342                     copy_data0:
   272   001342  0009               	tblrd		*+
   273   001344  CFF5 FFEE          	movff	tablat,postinc0
   274   001348  50E5               	movf	postdec1,w,c
   275   00134A  50E1               	movf	fsr1l,w,c
   276   00134C  E1FA               	bnz	copy_data0
   277                           
   278                           ; Clear objects allocated to BANK1 (60 bytes)
   279   00134E  EE01  F000         	lfsr	0,__pbssBANK1
   280   001352  0E3C               	movlw	60
   281   001354                     clear_0:
   282   001354  6AEE               	clrf	postinc0,c
   283   001356  06E8               	decf	wreg,f,c
   284   001358  E1FD               	bnz	clear_0
   285                           
   286                           ; Clear objects allocated to COMRAM (4 bytes)
   287   00135A  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   288   00135C  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   289   00135E  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   290   001360  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   291   001362                     end_of_initialization:
   292                           	callstack 0
   293   001362                     __end_of__initialization:
   294                           	callstack 0
   295   001362  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   296   001364  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   297   001366  0100               	movlb	0
   298   001368  EF0D  F007         	goto	_main	;jump to C main() function
   299                           
   300                           	psect	bssCOMRAM
   301   00005A                     __pbssCOMRAM:
   302                           	callstack 0
   303   00005A                     _manoeuvre_count:
   304                           	callstack 0
   305   00005A                     	ds	1
   306   00005B                     _lost_flag:
   307                           	callstack 0
   308   00005B                     	ds	1
   309   00005C                     _return_flag:
   310                           	callstack 0
   311   00005C                     	ds	1
   312   00005D                     _returning:
   313                           	callstack 0
   314   00005D                     	ds	1
   315                           
   316                           	psect	dataCOMRAM
   317   000040                     __pdataCOMRAM:
   318                           	callstack 0
   319   000040                     _manoeuvre_pointer:
   320                           	callstack 0
   321   000040                     	ds	2
   322   000042                     _timer_low_pointer:
   323                           	callstack 0
   324   000042                     	ds	2
   325   000044                     _timer_high_pointer:
   326                           	callstack 0
   327   000044                     	ds	2
   328   000046                     _headbuttDelay:
   329                           	callstack 0
   330   000046                     	ds	2
   331   000048                     _turn180Delay:
   332                           	callstack 0
   333   000048                     	ds	2
   334   00004A                     _turnRight135Delay:
   335                           	callstack 0
   336   00004A                     	ds	2
   337   00004C                     _turnLeft135Delay:
   338                           	callstack 0
   339   00004C                     	ds	2
   340   00004E                     _turnRight90Delay:
   341                           	callstack 0
   342   00004E                     	ds	2
   343   000050                     _turnLeft90Delay:
   344                           	callstack 0
   345   000050                     	ds	2
   346   000052                     _wall_threshold_blue:
   347                           	callstack 0
   348   000052                     	ds	2
   349   000054                     _turningRightGear:
   350                           	callstack 0
   351   000054                     	ds	1
   352   000055                     _turningLeftGear:
   353                           	callstack 0
   354   000055                     	ds	1
   355   000056                     _topGearRight:
   356                           	callstack 0
   357   000056                     	ds	1
   358   000057                     _topGearLeft:
   359                           	callstack 0
   360   000057                     	ds	1
   361   000058                     _rampDelay:
   362                           	callstack 0
   363   000058                     	ds	1
   364   000059                     _sample_count:
   365                           	callstack 0
   366   000059                     	ds	1
   367                           
   368                           	psect	dataBANK0
   369   000060                     __pdataBANK0:
   370                           	callstack 0
   371   000060                     _squareDelay:
   372                           	callstack 0
   373   000060                     	ds	2
   374                           
   375                           	psect	bssBANK1
   376   000100                     __pbssBANK1:
   377                           	callstack 0
   378   000100                     _trail_manoeuvre:
   379                           	callstack 0
   380   000100                     	ds	20
   381   000114                     _trail_timer_low:
   382                           	callstack 0
   383   000114                     	ds	20
   384   000128                     _trail_timer_high:
   385                           	callstack 0
   386   000128                     	ds	20
   387                           
   388                           	psect	cstackCOMRAM
   389   000001                     __pcstackCOMRAM:
   390                           	callstack 0
   391   000001                     ??_I2C_2_Master_Idle:
   392   000001                     ?___wmul:
   393                           	callstack 0
   394   000001                     write_timer@tL:
   395                           	callstack 0
   396   000001                     initDCmotorsPWM@PWMperiod:
   397                           	callstack 0
   398   000001                     ___wmul@multiplier:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x0
   402   000001                     	ds	1
   403   000002                     I2C_2_Master_Write@data_byte:
   404                           	callstack 0
   405   000002                     write_timer@tH:
   406                           	callstack 0
   407                           
   408                           ; 1 bytes @ 0x1
   409   000002                     	ds	1
   410   000003                     color_writetoaddr@value:
   411                           	callstack 0
   412   000003                     ___wmul@multiplicand:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0x2
   416   000003                     	ds	1
   417   000004                     color_writetoaddr@address:
   418                           	callstack 0
   419                           
   420                           ; 1 bytes @ 0x3
   421   000004                     	ds	1
   422   000005                     ??_color_click_init:
   423   000005                     ___wmul@product:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x4
   427   000005                     	ds	2
   428   000007                     ?___lwdiv:
   429                           	callstack 0
   430   000007                     ___lwdiv@dividend:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0x6
   434   000007                     	ds	2
   435   000009                     ___lwdiv@divisor:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x8
   439   000009                     	ds	2
   440   00000B                     ___lwdiv@counter:
   441                           	callstack 0
   442                           
   443                           ; 1 bytes @ 0xA
   444   00000B                     	ds	1
   445   00000C                     ___lwdiv@quotient:
   446                           	callstack 0
   447                           
   448                           ; 2 bytes @ 0xB
   449   00000C                     	ds	2
   450   00000E                     setMotorPWM@m:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0xD
   454   00000E                     	ds	1
   455   00000F                     ??_setMotorPWM:
   456                           
   457                           ; 1 bytes @ 0xE
   458   00000F                     	ds	2
   459   000011                     setMotorPWM@posDuty:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x10
   463   000011                     	ds	1
   464   000012                     setMotorPWM@negDuty:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x11
   468   000012                     	ds	1
   469   000013                     stop@mL:
   470                           	callstack 0
   471   000013                     turnLeft@mL:
   472                           	callstack 0
   473                           
   474                           ; 1 bytes @ 0x12
   475   000013                     	ds	1
   476   000014                     stop@mR:
   477                           	callstack 0
   478   000014                     turnLeft@mR:
   479                           	callstack 0
   480                           
   481                           ; 1 bytes @ 0x13
   482   000014                     	ds	1
   483   000015                     ??_stop:
   484   000015                     ??_turnLeft:
   485                           
   486                           ; 1 bytes @ 0x14
   487   000015                     	ds	1
   488   000016                     turnLeft@leftGear:
   489                           	callstack 0
   490                           
   491                           ; 1 bytes @ 0x15
   492   000016                     	ds	1
   493   000017                     turnLeft@rightGear:
   494                           	callstack 0
   495                           
   496                           ; 1 bytes @ 0x16
   497   000017                     	ds	1
   498   000018                     UTurn@mL:
   499                           	callstack 0
   500                           
   501                           ; 1 bytes @ 0x17
   502   000018                     	ds	1
   503   000019                     UTurn@mR:
   504                           	callstack 0
   505                           
   506                           ; 1 bytes @ 0x18
   507   000019                     	ds	1
   508   00001A                     ??_UTurn:
   509                           
   510                           ; 1 bytes @ 0x19
   511   00001A                     	ds	2
   512   00001C                     ??_main:
   513                           
   514                           ; 1 bytes @ 0x1B
   515   00001C                     	ds	2
   516   00001E                     main@i:
   517                           	callstack 0
   518                           
   519                           ; 2 bytes @ 0x1D
   520   00001E                     	ds	2
   521   000020                     main@HSV_colour:
   522                           	callstack 0
   523                           
   524                           ; 6 bytes @ 0x1F
   525   000020                     	ds	6
   526   000026                     main@RGBC_colour:
   527                           	callstack 0
   528                           
   529                           ; 8 bytes @ 0x25
   530   000026                     	ds	8
   531   00002E                     main@motorL:
   532                           	callstack 0
   533                           
   534                           ; 9 bytes @ 0x2D
   535   00002E                     	ds	9
   536   000037                     main@motorR:
   537                           	callstack 0
   538                           
   539                           ; 9 bytes @ 0x36
   540   000037                     	ds	9
   541                           
   542 ;;
   543 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   544 ;;
   545 ;; *************** function _main *****************
   546 ;; Defined at:
   547 ;;		line 29 in file "main.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;  motorR          9   54[COMRAM] struct DC_motor
   552 ;;  motorL          9   45[COMRAM] struct DC_motor
   553 ;;  RGBC_colour     8   37[COMRAM] struct RGBC_val
   554 ;;  HSV_colour      6   31[COMRAM] struct HSV_val
   555 ;;  PWMcycle        2    0        unsigned int 
   556 ;;  i               2   29[COMRAM] int 
   557 ;; Return value:  Size  Location     Type
   558 ;;                  1    wreg      void 
   559 ;; Registers used:
   560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   567 ;;      Locals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   568 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   569 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   570 ;;Total ram usage:       36 bytes
   571 ;; Hardware stack levels required when called: 5
   572 ;; This function calls:
   573 ;;		_Timer0_init
   574 ;;		_UTurn
   575 ;;		_buggy_lights_init
   576 ;;		_color_click_init
   577 ;;		_initDCmotorsPWM
   578 ;;		_initUSART4
   579 ;;		_stop
   580 ;; This function is called by:
   581 ;;		Startup code after reset
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585                           	psect	text0
   586   000E1A                     __ptext0:
   587                           	callstack 0
   588   000E1A                     _main:
   589                           	callstack 26
   590   000E1A                     
   591                           ;main.c: 30:     struct RGBC_val RGBC_colour;;main.c: 31:         RGBC_colour.R = 0;
   592   000E1A  0E00               	movlw	0
   593   000E1C  6E27               	movwf	(main@RGBC_colour+1)^0,c
   594   000E1E  0E00               	movlw	0
   595   000E20  6E26               	movwf	main@RGBC_colour^0,c
   596                           
   597                           ;main.c: 32:         RGBC_colour.G = 0;
   598   000E22  0E00               	movlw	0
   599   000E24  6E29               	movwf	(main@RGBC_colour+3)^0,c
   600   000E26  0E00               	movlw	0
   601   000E28  6E28               	movwf	(main@RGBC_colour+2)^0,c
   602                           
   603                           ;main.c: 33:         RGBC_colour.B = 0;
   604   000E2A  0E00               	movlw	0
   605   000E2C  6E2B               	movwf	(main@RGBC_colour+5)^0,c
   606   000E2E  0E00               	movlw	0
   607   000E30  6E2A               	movwf	(main@RGBC_colour+4)^0,c
   608                           
   609                           ;main.c: 34:         RGBC_colour.C = 0;
   610   000E32  0E00               	movlw	0
   611   000E34  6E2D               	movwf	(main@RGBC_colour+7)^0,c
   612   000E36  0E00               	movlw	0
   613   000E38  6E2C               	movwf	(main@RGBC_colour+6)^0,c
   614                           
   615                           ;main.c: 36:     struct HSV_val HSV_colour;;main.c: 37:         HSV_colour.H = 0;
   616   000E3A  0E00               	movlw	0
   617   000E3C  6E21               	movwf	(main@HSV_colour+1)^0,c
   618   000E3E  0E00               	movlw	0
   619   000E40  6E20               	movwf	main@HSV_colour^0,c
   620                           
   621                           ;main.c: 38:         HSV_colour.S = 0;
   622   000E42  0E00               	movlw	0
   623   000E44  6E23               	movwf	(main@HSV_colour+3)^0,c
   624   000E46  0E00               	movlw	0
   625   000E48  6E22               	movwf	(main@HSV_colour+2)^0,c
   626                           
   627                           ;main.c: 39:         HSV_colour.V = 0;
   628   000E4A  0E00               	movlw	0
   629   000E4C  6E25               	movwf	(main@HSV_colour+5)^0,c
   630   000E4E  0E00               	movlw	0
   631   000E50  6E24               	movwf	(main@HSV_colour+4)^0,c
   632                           
   633                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 43:         motorL.power = 0;
   634   000E52  0E00               	movlw	0
   635   000E54  6E2E               	movwf	main@motorL^0,c
   636                           
   637                           ;main.c: 44:         motorL.direction = 1;
   638   000E56  0E01               	movlw	1
   639   000E58  6E2F               	movwf	(main@motorL+1)^0,c
   640                           
   641                           ;main.c: 45:         motorL.brakemode = 1;
   642   000E5A  0E01               	movlw	1
   643   000E5C  6E30               	movwf	(main@motorL+2)^0,c
   644   000E5E                     
   645                           ;main.c: 46:         motorL.PWMperiod = PWMcycle;
   646   000E5E  0E00               	movlw	0
   647   000E60  6E32               	movwf	(main@motorL+4)^0,c
   648   000E62  0E63               	movlw	99
   649   000E64  6E31               	movwf	(main@motorL+3)^0,c
   650   000E66                     
   651                           ;main.c: 47:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   652   000E66  0EAA               	movlw	170
   653   000E68  6E33               	movwf	(main@motorL+5)^0,c
   654   000E6A  0E0F               	movlw	15
   655   000E6C  6E34               	movwf	(main@motorL+6)^0,c
   656   000E6E                     
   657                           ;main.c: 48:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   658   000E6E  0EA6               	movlw	166
   659   000E70  6E35               	movwf	(main@motorL+7)^0,c
   660   000E72  0E0F               	movlw	15
   661   000E74  6E36               	movwf	(main@motorL+8)^0,c
   662                           
   663                           ;main.c: 49:         motorR.power = 0;
   664   000E76  0E00               	movlw	0
   665   000E78  6E37               	movwf	main@motorR^0,c
   666                           
   667                           ;main.c: 50:         motorR.direction = 1;
   668   000E7A  0E01               	movlw	1
   669   000E7C  6E38               	movwf	(main@motorR+1)^0,c
   670                           
   671                           ;main.c: 51:         motorR.brakemode = 1;
   672   000E7E  0E01               	movlw	1
   673   000E80  6E39               	movwf	(main@motorR+2)^0,c
   674   000E82                     
   675                           ;main.c: 52:         motorR.PWMperiod = PWMcycle;
   676   000E82  0E00               	movlw	0
   677   000E84  6E3B               	movwf	(main@motorR+4)^0,c
   678   000E86  0E63               	movlw	99
   679   000E88  6E3A               	movwf	(main@motorR+3)^0,c
   680   000E8A                     
   681                           ;main.c: 53:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   682   000E8A  0E25               	movlw	37
   683   000E8C  6E3C               	movwf	(main@motorR+5)^0,c
   684   000E8E  0E0F               	movlw	15
   685   000E90  6E3D               	movwf	(main@motorR+6)^0,c
   686   000E92                     
   687                           ;main.c: 54:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   688   000E92  0E21               	movlw	33
   689   000E94  6E3E               	movwf	(main@motorR+7)^0,c
   690   000E96  0E0F               	movlw	15
   691   000E98  6E3F               	movwf	(main@motorR+8)^0,c
   692   000E9A                     
   693                           ;main.c: 57:     initDCmotorsPWM(PWMcycle);
   694   000E9A  0E00               	movlw	0
   695   000E9C  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   696   000E9E  0E63               	movlw	99
   697   000EA0  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   698   000EA2  ECC2  F008         	call	_initDCmotorsPWM	;wreg free
   699                           
   700                           ;main.c: 58:     buggy_lights_init();
   701   000EA6  ECE9  F009         	call	_buggy_lights_init	;wreg free
   702   000EAA                     
   703                           ;main.c: 59:     color_click_init();
   704   000EAA  ECB6  F009         	call	_color_click_init	;wreg free
   705   000EAE                     
   706                           ;main.c: 60:     initUSART4();
   707   000EAE  EC60  F00A         	call	_initUSART4	;wreg free
   708   000EB2                     
   709                           ;main.c: 61:     Timer0_init();
   710   000EB2  EC29  F00A         	call	_Timer0_init	;wreg free
   711   000EB6                     
   712                           ;main.c: 65:         TRISDbits.TRISD7 = 0;
   713   000EB6  9E84               	bcf	132,7,c	;volatile
   714   000EB8                     
   715                           ;main.c: 66:         TRISHbits.TRISH3 = 0;
   716   000EB8  9688               	bcf	136,3,c	;volatile
   717   000EBA                     
   718                           ;main.c: 68:         LATDbits.LATD7 = 0;
   719   000EBA  9E7C               	bcf	124,7,c	;volatile
   720   000EBC                     
   721                           ;main.c: 69:         LATHbits.LATH3 = 0;
   722   000EBC  9680               	bcf	128,3,c	;volatile
   723   000EBE                     
   724                           ;main.c: 73:         TRISFbits.TRISF2 = 1;
   725   000EBE  8486               	bsf	134,2,c	;volatile
   726   000EC0                     
   727                           ;main.c: 74:         TRISFbits.TRISF3 = 1;
   728   000EC0  8686               	bsf	134,3,c	;volatile
   729   000EC2                     
   730                           ;main.c: 76:         ANSELFbits.ANSELF2 = 0;
   731   000EC2  010E               	movlb	14	; () banked
   732   000EC4  95B4               	bcf	180,2,b	;volatile
   733   000EC6                     
   734                           ; BSR set to: 14
   735                           ;main.c: 77:         ANSELFbits.ANSELF3 = 0;
   736   000EC6  97B4               	bcf	180,3,b	;volatile
   737   000EC8                     l419:
   738   000EC8  B68E               	btfsc	142,3,c	;volatile
   739   000ECA  EF69  F007         	goto	u3351
   740   000ECE  EF6B  F007         	goto	u3350
   741   000ED2                     u3351:
   742   000ED2  EF64  F007         	goto	l419
   743   000ED6                     u3350:
   744   000ED6                     
   745                           ;main.c: 82:     LATDbits.LATD7 = !LATDbits.LATD7;
   746   000ED6  AE7C               	btfss	124,7,c	;volatile
   747   000ED8  EF70  F007         	goto	u3361
   748   000EDC  EF74  F007         	goto	u3360
   749   000EE0                     u3361:
   750   000EE0  6A1C               	clrf	??_main^0,c
   751   000EE2  2A1C               	incf	??_main^0,f,c
   752   000EE4  EF75  F007         	goto	u3378
   753   000EE8                     u3360:
   754   000EE8  6A1C               	clrf	??_main^0,c
   755   000EEA                     u3378:
   756   000EEA  321C               	rrcf	??_main^0,f,c
   757   000EEC  321C               	rrcf	??_main^0,f,c
   758   000EEE  507C               	movf	124,w,c	;volatile
   759   000EF0  181C               	xorwf	??_main^0,w,c
   760   000EF2  0B7F               	andlw	-129
   761   000EF4  181C               	xorwf	??_main^0,w,c
   762   000EF6  6E7C               	movwf	124,c	;volatile
   763                           
   764                           ;main.c: 83:     LATHbits.LATH3 = !LATHbits.LATH3;
   765   000EF8  A680               	btfss	128,3,c	;volatile
   766   000EFA  EF81  F007         	goto	u3381
   767   000EFE  EF85  F007         	goto	u3380
   768   000F02                     u3381:
   769   000F02  6A1C               	clrf	??_main^0,c
   770   000F04  2A1C               	incf	??_main^0,f,c
   771   000F06  EF86  F007         	goto	u3398
   772   000F0A                     u3380:
   773   000F0A  6A1C               	clrf	??_main^0,c
   774   000F0C                     u3398:
   775   000F0C  461C               	rlncf	??_main^0,f,c
   776   000F0E  461C               	rlncf	??_main^0,f,c
   777   000F10  461C               	rlncf	??_main^0,f,c
   778   000F12  5080               	movf	128,w,c	;volatile
   779   000F14  181C               	xorwf	??_main^0,w,c
   780   000F16  0BF7               	andlw	-9
   781   000F18  181C               	xorwf	??_main^0,w,c
   782   000F1A  6E80               	movwf	128,c	;volatile
   783   000F1C                     
   784                           ;main.c: 107:     int i;;main.c: 116:      _delay((unsigned long)((1000)*(64000000/4000.
      +                          0)));
   785   000F1C  0E52               	movlw	82
   786   000F1E  6E1D               	movwf	(??_main+1)^0,c
   787   000F20  0E2B               	movlw	43
   788   000F22  6E1C               	movwf	??_main^0,c
   789   000F24  0E00               	movlw	0
   790   000F26                     u3847:
   791   000F26  2EE8               	decfsz	wreg,f,c
   792   000F28  D7FE               	bra	u3847
   793   000F2A  2E1C               	decfsz	??_main^0,f,c
   794   000F2C  D7FC               	bra	u3847
   795   000F2E  2E1D               	decfsz	(??_main+1)^0,f,c
   796   000F30  D7FA               	bra	u3847
   797   000F32  D000               	nop2	
   798   000F34                     
   799                           ;main.c: 117:     for (i=0; i < 4; i++) {
   800   000F34  0E00               	movlw	0
   801   000F36  6E1F               	movwf	(main@i+1)^0,c
   802   000F38  0E00               	movlw	0
   803   000F3A  6E1E               	movwf	main@i^0,c
   804   000F3C                     l4223:
   805                           
   806                           ;main.c: 126:         UTurn(&motorL, &motorR);
   807   000F3C  0E2E               	movlw	low main@motorL
   808   000F3E  6E18               	movwf	UTurn@mL^0,c
   809   000F40  0E37               	movlw	low main@motorR
   810   000F42  6E19               	movwf	UTurn@mR^0,c
   811   000F44  ECD0  F009         	call	_UTurn	;wreg free
   812   000F48                     
   813                           ;main.c: 128:     }
   814   000F48  4A1E               	infsnz	main@i^0,f,c
   815   000F4A  2A1F               	incf	(main@i+1)^0,f,c
   816   000F4C  BE1F               	btfsc	(main@i+1)^0,7,c
   817   000F4E  EFB2  F007         	goto	u3401
   818   000F52  501F               	movf	(main@i+1)^0,w,c
   819   000F54  E109               	bnz	u3400
   820   000F56  0E04               	movlw	4
   821   000F58  5C1E               	subwf	main@i^0,w,c
   822   000F5A  A0D8               	btfss	status,0,c
   823   000F5C  EFB2  F007         	goto	u3401
   824   000F60  EFB4  F007         	goto	u3400
   825   000F64                     u3401:
   826   000F64  EF9E  F007         	goto	l4223
   827   000F68                     u3400:
   828   000F68                     
   829                           ;main.c: 129:     stop(&motorL, &motorR);
   830   000F68  0E2E               	movlw	low main@motorL
   831   000F6A  6E13               	movwf	stop@mL^0,c
   832   000F6C  0E37               	movlw	low main@motorR
   833   000F6E  6E14               	movwf	stop@mR^0,c
   834   000F70  EC0A  F009         	call	_stop	;wreg free
   835   000F74  EF1E  F000         	goto	start
   836   000F78                     __end_of_main:
   837                           	callstack 0
   838                           
   839 ;; *************** function _initUSART4 *****************
   840 ;; Defined at:
   841 ;;		line 8 in file "serial.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;		None
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, status,2
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   859 ;;Total ram usage:        0 bytes
   860 ;; Hardware stack levels used: 1
   861 ;; Hardware stack levels required when called: 1
   862 ;; This function calls:
   863 ;;		Nothing
   864 ;; This function is called by:
   865 ;;		_main
   866 ;; This function uses a non-reentrant model
   867 ;;
   868                           
   869                           	psect	text1
   870   0014C0                     __ptext1:
   871                           	callstack 0
   872   0014C0                     _initUSART4:
   873                           	callstack 29
   874   0014C0                     
   875                           ;serial.c: 9:     RC0PPS = 0x12;
   876   0014C0  0E12               	movlw	18
   877   0014C2  010E               	movlb	14	; () banked
   878   0014C4  6F62               	movwf	98,b	;volatile
   879                           
   880                           ;serial.c: 10:     RX4PPS = 0x11;
   881   0014C6  0E11               	movlw	17
   882   0014C8  6F15               	movwf	21,b	;volatile
   883   0014CA                     
   884                           ; BSR set to: 14
   885                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
   886   0014CA  97E9               	bcf	233,3,b	;volatile
   887   0014CC                     
   888                           ; BSR set to: 14
   889                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
   890   0014CC  95E8               	bcf	232,2,b	;volatile
   891                           
   892                           ;serial.c: 14:     SP4BRGL = 51;
   893   0014CE  0E33               	movlw	51
   894   0014D0  6FE5               	movwf	229,b	;volatile
   895                           
   896                           ;serial.c: 15:     SP4BRGH = 0;
   897   0014D2  0E00               	movlw	0
   898   0014D4  6FE6               	movwf	230,b	;volatile
   899   0014D6                     
   900                           ; BSR set to: 14
   901                           ;serial.c: 17:     RC4STAbits.CREN = 1;
   902   0014D6  89E7               	bsf	231,4,b	;volatile
   903   0014D8                     
   904                           ; BSR set to: 14
   905                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
   906   0014D8  8BE8               	bsf	232,5,b	;volatile
   907   0014DA                     
   908                           ; BSR set to: 14
   909                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
   910   0014DA  8FE7               	bsf	231,7,b	;volatile
   911   0014DC                     
   912                           ; BSR set to: 14
   913   0014DC  0012               	return		;funcret
   914   0014DE                     __end_of_initUSART4:
   915                           	callstack 0
   916                           
   917 ;; *************** function _initDCmotorsPWM *****************
   918 ;; Defined at:
   919 ;;		line 7 in file "dc_motor.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;		None
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, status,2
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   937 ;;Total ram usage:        2 bytes
   938 ;; Hardware stack levels used: 1
   939 ;; Hardware stack levels required when called: 1
   940 ;; This function calls:
   941 ;;		Nothing
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text2
   948   001184                     __ptext2:
   949                           	callstack 0
   950   001184                     _initDCmotorsPWM:
   951                           	callstack 29
   952   001184                     
   953                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
   954   001184  9485               	bcf	133,2,c	;volatile
   955                           
   956                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
   957   001186  9885               	bcf	133,4,c	;volatile
   958                           
   959                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
   960   001188  9E83               	bcf	131,7,c	;volatile
   961                           
   962                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
   963   00118A  9C87               	bcf	135,6,c	;volatile
   964                           
   965                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
   966   00118C  947D               	bcf	125,2,c	;volatile
   967                           
   968                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
   969   00118E  987D               	bcf	125,4,c	;volatile
   970                           
   971                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
   972   001190  9E7B               	bcf	123,7,c	;volatile
   973                           
   974                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
   975   001192  9C7F               	bcf	127,6,c	;volatile
   976   001194                     
   977                           ;dc_motor.c: 19:     RE2PPS=0x05;
   978   001194  0E05               	movlw	5
   979   001196  010E               	movlb	14	; () banked
   980   001198  6F74               	movwf	116,b	;volatile
   981                           
   982                           ;dc_motor.c: 20:     RE4PPS=0x06;
   983   00119A  0E06               	movlw	6
   984   00119C  6F76               	movwf	118,b	;volatile
   985                           
   986                           ;dc_motor.c: 21:     RC7PPS=0x07;
   987   00119E  0E07               	movlw	7
   988   0011A0  6F69               	movwf	105,b	;volatile
   989                           
   990                           ;dc_motor.c: 22:     RG6PPS=0x08;
   991   0011A2  0E08               	movlw	8
   992   0011A4  6F88               	movwf	136,b	;volatile
   993                           
   994                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
   995   0011A6  50BD               	movf	189,w,c	;volatile
   996   0011A8  0B8F               	andlw	-113
   997   0011AA  0940               	iorlw	64
   998   0011AC  6EBD               	movwf	189,c	;volatile
   999                           
  1000                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  1001   0011AE  0EE0               	movlw	-32
  1002   0011B0  16BE               	andwf	190,f,c	;volatile
  1003                           
  1004                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  1005   0011B2  50BF               	movf	191,w,c	;volatile
  1006   0011B4  0BF0               	andlw	-16
  1007   0011B6  0901               	iorlw	1
  1008   0011B8  6EBF               	movwf	191,c	;volatile
  1009   0011BA                     
  1010                           ; BSR set to: 14
  1011                           ;dc_motor.c: 31:     T2PR=(unsigned char)PWMperiod;
  1012   0011BA  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1013   0011BE                     
  1014                           ; BSR set to: 14
  1015                           ;dc_motor.c: 32:     T2CONbits.ON=1;
  1016   0011BE  8EBD               	bsf	189,7,c	;volatile
  1017                           
  1018                           ;dc_motor.c: 36:         CCPR1H=0;
  1019   0011C0  0E00               	movlw	0
  1020   0011C2  6EAA               	movwf	170,c	;volatile
  1021                           
  1022                           ;dc_motor.c: 37:         CCPR2H=0;
  1023   0011C4  0E00               	movlw	0
  1024   0011C6  6EA6               	movwf	166,c	;volatile
  1025                           
  1026                           ;dc_motor.c: 38:         CCPR3H=0;
  1027   0011C8  0E00               	movlw	0
  1028   0011CA  010F               	movlb	15	; () banked
  1029   0011CC  6F25               	movwf	37,b	;volatile
  1030                           
  1031                           ;dc_motor.c: 39:         CCPR4H=0;
  1032   0011CE  0E00               	movlw	0
  1033   0011D0  6F21               	movwf	33,b	;volatile
  1034                           
  1035                           ;dc_motor.c: 42:         CCPTMRS0bits.C1TSEL=0;
  1036   0011D2  0EFC               	movlw	-4
  1037   0011D4  16AD               	andwf	173,f,c	;volatile
  1038                           
  1039                           ;dc_motor.c: 43:         CCPTMRS0bits.C2TSEL=0;
  1040   0011D6  0EF3               	movlw	-13
  1041   0011D8  16AD               	andwf	173,f,c	;volatile
  1042                           
  1043                           ;dc_motor.c: 44:         CCPTMRS0bits.C3TSEL=0;
  1044   0011DA  0ECF               	movlw	-49
  1045   0011DC  16AD               	andwf	173,f,c	;volatile
  1046                           
  1047                           ;dc_motor.c: 45:         CCPTMRS0bits.C4TSEL=0;
  1048   0011DE  0E3F               	movlw	-193
  1049   0011E0  16AD               	andwf	173,f,c	;volatile
  1050   0011E2                     
  1051                           ; BSR set to: 15
  1052                           ;dc_motor.c: 48:         CCP1CONbits.FMT=1;
  1053   0011E2  88AB               	bsf	171,4,c	;volatile
  1054                           
  1055                           ;dc_motor.c: 49:         CCP1CONbits.CCP1MODE=0b1100;
  1056   0011E4  50AB               	movf	171,w,c	;volatile
  1057   0011E6  0BF0               	andlw	-16
  1058   0011E8  090C               	iorlw	12
  1059   0011EA  6EAB               	movwf	171,c	;volatile
  1060   0011EC                     
  1061                           ; BSR set to: 15
  1062                           ;dc_motor.c: 50:         CCP1CONbits.EN=1;
  1063   0011EC  8EAB               	bsf	171,7,c	;volatile
  1064   0011EE                     
  1065                           ; BSR set to: 15
  1066                           ;dc_motor.c: 52:         CCP2CONbits.FMT=1;
  1067   0011EE  88A7               	bsf	167,4,c	;volatile
  1068                           
  1069                           ;dc_motor.c: 53:         CCP2CONbits.CCP2MODE=0b1100;
  1070   0011F0  50A7               	movf	167,w,c	;volatile
  1071   0011F2  0BF0               	andlw	-16
  1072   0011F4  090C               	iorlw	12
  1073   0011F6  6EA7               	movwf	167,c	;volatile
  1074   0011F8                     
  1075                           ; BSR set to: 15
  1076                           ;dc_motor.c: 54:         CCP2CONbits.EN=1;
  1077   0011F8  8EA7               	bsf	167,7,c	;volatile
  1078   0011FA                     
  1079                           ; BSR set to: 15
  1080                           ;dc_motor.c: 56:         CCP3CONbits.FMT=1;
  1081   0011FA  8926               	bsf	38,4,b	;volatile
  1082                           
  1083                           ;dc_motor.c: 57:         CCP3CONbits.CCP3MODE=0b1100;
  1084   0011FC  5126               	movf	38,w,b	;volatile
  1085   0011FE  0BF0               	andlw	-16
  1086   001200  090C               	iorlw	12
  1087   001202  6F26               	movwf	38,b	;volatile
  1088   001204                     
  1089                           ; BSR set to: 15
  1090                           ;dc_motor.c: 58:         CCP3CONbits.EN=1;
  1091   001204  8F26               	bsf	38,7,b	;volatile
  1092   001206                     
  1093                           ; BSR set to: 15
  1094                           ;dc_motor.c: 60:         CCP4CONbits.FMT=1;
  1095   001206  8922               	bsf	34,4,b	;volatile
  1096                           
  1097                           ;dc_motor.c: 61:         CCP4CONbits.CCP4MODE=0b1100;
  1098   001208  5122               	movf	34,w,b	;volatile
  1099   00120A  0BF0               	andlw	-16
  1100   00120C  090C               	iorlw	12
  1101   00120E  6F22               	movwf	34,b	;volatile
  1102   001210                     
  1103                           ; BSR set to: 15
  1104                           ;dc_motor.c: 62:         CCP4CONbits.EN=1;
  1105   001210  8F22               	bsf	34,7,b	;volatile
  1106   001212                     
  1107                           ; BSR set to: 15
  1108   001212  0012               	return		;funcret
  1109   001214                     __end_of_initDCmotorsPWM:
  1110                           	callstack 0
  1111                           
  1112 ;; *************** function _color_click_init *****************
  1113 ;; Defined at:
  1114 ;;		line 7 in file "color.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;		None
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, status,2, status,0, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1130 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1131 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1132 ;;Total ram usage:        1 bytes
  1133 ;; Hardware stack levels used: 1
  1134 ;; Hardware stack levels required when called: 4
  1135 ;; This function calls:
  1136 ;;		_I2C_2_Master_Init
  1137 ;;		_color_writetoaddr
  1138 ;; This function is called by:
  1139 ;;		_main
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text3
  1144   00136C                     __ptext3:
  1145                           	callstack 0
  1146   00136C                     _color_click_init:
  1147                           	callstack 26
  1148   00136C                     
  1149                           ;color.c: 10:     I2C_2_Master_Init();
  1150   00136C  EC00  F00A         	call	_I2C_2_Master_Init	;wreg free
  1151   001370                     
  1152                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  1153   001370  0E01               	movlw	1
  1154   001372  6E03               	movwf	color_writetoaddr@value^0,c
  1155   001374  0E00               	movlw	0
  1156   001376  EC50  F00A         	call	_color_writetoaddr
  1157   00137A                     
  1158                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1159   00137A  0E3F               	movlw	63
  1160   00137C  6E05               	movwf	??_color_click_init^0,c
  1161   00137E  0E55               	movlw	85
  1162   001380                     u3857:
  1163   001380  2EE8               	decfsz	wreg,f,c
  1164   001382  D7FE               	bra	u3857
  1165   001384  2E05               	decfsz	??_color_click_init^0,f,c
  1166   001386  D7FC               	bra	u3857
  1167   001388  0000               	nop	
  1168   00138A                     
  1169                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  1170   00138A  0E03               	movlw	3
  1171   00138C  6E03               	movwf	color_writetoaddr@value^0,c
  1172   00138E  0E00               	movlw	0
  1173   001390  EC50  F00A         	call	_color_writetoaddr
  1174   001394                     
  1175                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  1176   001394  0ED5               	movlw	213
  1177   001396  6E03               	movwf	color_writetoaddr@value^0,c
  1178   001398  0E01               	movlw	1
  1179   00139A  EC50  F00A         	call	_color_writetoaddr
  1180   00139E  0012               	return		;funcret
  1181   0013A0                     __end_of_color_click_init:
  1182                           	callstack 0
  1183                           
  1184 ;; *************** function _color_writetoaddr *****************
  1185 ;; Defined at:
  1186 ;;		line 28 in file "color.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;  address         1    wreg     unsigned char 
  1189 ;;  value           1    2[COMRAM] unsigned char 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  address         1    3[COMRAM] unsigned char 
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, status,2, status,0, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1201 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;Total ram usage:        2 bytes
  1206 ;; Hardware stack levels used: 1
  1207 ;; Hardware stack levels required when called: 3
  1208 ;; This function calls:
  1209 ;;		_I2C_2_Master_Start
  1210 ;;		_I2C_2_Master_Stop
  1211 ;;		_I2C_2_Master_Write
  1212 ;; This function is called by:
  1213 ;;		_color_click_init
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text4
  1218   0014A0                     __ptext4:
  1219                           	callstack 0
  1220   0014A0                     _color_writetoaddr:
  1221                           	callstack 26
  1222                           
  1223                           ;incstack = 0
  1224                           ;color_writetoaddr@address stored from wreg
  1225   0014A0  6E04               	movwf	color_writetoaddr@address^0,c
  1226   0014A2                     
  1227                           ;color.c: 29:     I2C_2_Master_Start();
  1228   0014A2  EC93  F00A         	call	_I2C_2_Master_Start	;wreg free
  1229                           
  1230                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  1231   0014A6  0E52               	movlw	82
  1232   0014A8  EC7C  F00A         	call	_I2C_2_Master_Write
  1233                           
  1234                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  1235   0014AC  5004               	movf	color_writetoaddr@address^0,w,c
  1236   0014AE  0980               	iorlw	128
  1237   0014B0  EC7C  F00A         	call	_I2C_2_Master_Write
  1238                           
  1239                           ;color.c: 32:     I2C_2_Master_Write(value);
  1240   0014B4  5003               	movf	color_writetoaddr@value^0,w,c
  1241   0014B6  EC7C  F00A         	call	_I2C_2_Master_Write
  1242                           
  1243                           ;color.c: 33:     I2C_2_Master_Stop();
  1244   0014BA  EC8E  F00A         	call	_I2C_2_Master_Stop	;wreg free
  1245   0014BE  0012               	return		;funcret
  1246   0014C0                     __end_of_color_writetoaddr:
  1247                           	callstack 0
  1248                           
  1249 ;; *************** function _I2C_2_Master_Write *****************
  1250 ;; Defined at:
  1251 ;;		line 45 in file "i2c.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;  data_byte       1    wreg     unsigned char 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  data_byte       1    1[COMRAM] unsigned char 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, status,2, status,0, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1266 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1269 ;;Total ram usage:        1 bytes
  1270 ;; Hardware stack levels used: 1
  1271 ;; Hardware stack levels required when called: 2
  1272 ;; This function calls:
  1273 ;;		_I2C_2_Master_Idle
  1274 ;; This function is called by:
  1275 ;;		_color_writetoaddr
  1276 ;;		_color_read_Red
  1277 ;;		_color_read_Green
  1278 ;;		_color_read_Blue
  1279 ;;		_color_read_Clear
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text5
  1284   0014F8                     __ptext5:
  1285                           	callstack 0
  1286   0014F8                     _I2C_2_Master_Write:
  1287                           	callstack 26
  1288                           
  1289                           ;incstack = 0
  1290                           ;I2C_2_Master_Write@data_byte stored from wreg
  1291   0014F8  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1292   0014FA                     
  1293                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1294   0014FA  EC15  F00A         	call	_I2C_2_Master_Idle	;wreg free
  1295   0014FE                     
  1296                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1297   0014FE  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1298   001502  0012               	return		;funcret
  1299   001504                     __end_of_I2C_2_Master_Write:
  1300                           	callstack 0
  1301                           
  1302 ;; *************** function _I2C_2_Master_Stop *****************
  1303 ;; Defined at:
  1304 ;;		line 39 in file "i2c.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1322 ;;Total ram usage:        0 bytes
  1323 ;; Hardware stack levels used: 1
  1324 ;; Hardware stack levels required when called: 2
  1325 ;; This function calls:
  1326 ;;		_I2C_2_Master_Idle
  1327 ;; This function is called by:
  1328 ;;		_color_writetoaddr
  1329 ;;		_color_read_Red
  1330 ;;		_color_read_Green
  1331 ;;		_color_read_Blue
  1332 ;;		_color_read_Clear
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text6
  1337   00151C                     __ptext6:
  1338                           	callstack 0
  1339   00151C                     _I2C_2_Master_Stop:
  1340                           	callstack 26
  1341   00151C                     
  1342                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1343   00151C  EC15  F00A         	call	_I2C_2_Master_Idle	;wreg free
  1344   001520                     
  1345                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1346   001520  010E               	movlb	14	; () banked
  1347   001522  85DA               	bsf	218,2,b	;volatile
  1348   001524                     
  1349                           ; BSR set to: 14
  1350   001524  0012               	return		;funcret
  1351   001526                     __end_of_I2C_2_Master_Stop:
  1352                           	callstack 0
  1353                           
  1354 ;; *************** function _I2C_2_Master_Start *****************
  1355 ;; Defined at:
  1356 ;;		line 27 in file "i2c.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;		None
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;		None
  1361 ;; Return value:  Size  Location     Type
  1362 ;;                  1    wreg      void 
  1363 ;; Registers used:
  1364 ;;		wreg, status,2, status,0, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1374 ;;Total ram usage:        0 bytes
  1375 ;; Hardware stack levels used: 1
  1376 ;; Hardware stack levels required when called: 2
  1377 ;; This function calls:
  1378 ;;		_I2C_2_Master_Idle
  1379 ;; This function is called by:
  1380 ;;		_color_writetoaddr
  1381 ;;		_color_read_Red
  1382 ;;		_color_read_Green
  1383 ;;		_color_read_Blue
  1384 ;;		_color_read_Clear
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text7
  1389   001526                     __ptext7:
  1390                           	callstack 0
  1391   001526                     _I2C_2_Master_Start:
  1392                           	callstack 26
  1393   001526                     
  1394                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1395   001526  EC15  F00A         	call	_I2C_2_Master_Idle	;wreg free
  1396   00152A                     
  1397                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  1398   00152A  010E               	movlb	14	; () banked
  1399   00152C  81DA               	bsf	218,0,b	;volatile
  1400   00152E                     
  1401                           ; BSR set to: 14
  1402   00152E  0012               	return		;funcret
  1403   001530                     __end_of_I2C_2_Master_Start:
  1404                           	callstack 0
  1405                           
  1406 ;; *************** function _I2C_2_Master_Idle *****************
  1407 ;; Defined at:
  1408 ;;		line 22 in file "i2c.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;		None
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;		None
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      void 
  1415 ;; Registers used:
  1416 ;;		wreg, status,2, status,0
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1425 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1426 ;;Total ram usage:        1 bytes
  1427 ;; Hardware stack levels used: 1
  1428 ;; Hardware stack levels required when called: 1
  1429 ;; This function calls:
  1430 ;;		Nothing
  1431 ;; This function is called by:
  1432 ;;		_I2C_2_Master_Start
  1433 ;;		_I2C_2_Master_Stop
  1434 ;;		_I2C_2_Master_Write
  1435 ;;		_I2C_2_Master_RepStart
  1436 ;;		_I2C_2_Master_Read
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text8
  1441   00142A                     __ptext8:
  1442                           	callstack 0
  1443   00142A                     _I2C_2_Master_Idle:
  1444                           	callstack 26
  1445   00142A                     l310:
  1446   00142A  010E               	movlb	14	; () banked
  1447   00142C  B5D8               	btfsc	216,2,b	;volatile
  1448   00142E  EF1B  F00A         	goto	u1681
  1449   001432  EF1D  F00A         	goto	u1680
  1450   001436                     u1681:
  1451   001436  EF15  F00A         	goto	l310
  1452   00143A                     u1680:
  1453   00143A                     
  1454                           ; BSR set to: 14
  1455   00143A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  1456   00143E  0E1F               	movlw	31
  1457   001440  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  1458   001442  A4D8               	btfss	status,2,c
  1459   001444  EF26  F00A         	goto	u1691
  1460   001448  EF28  F00A         	goto	u1690
  1461   00144C                     u1691:
  1462   00144C  EF15  F00A         	goto	l310
  1463   001450                     u1690:
  1464   001450                     
  1465                           ; BSR set to: 14
  1466   001450  0012               	return		;funcret
  1467   001452                     __end_of_I2C_2_Master_Idle:
  1468                           	callstack 0
  1469                           
  1470 ;; *************** function _I2C_2_Master_Init *****************
  1471 ;; Defined at:
  1472 ;;		line 4 in file "i2c.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;		None
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;		None
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      void 
  1479 ;; Registers used:
  1480 ;;		wreg, status,2
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1490 ;;Total ram usage:        0 bytes
  1491 ;; Hardware stack levels used: 1
  1492 ;; Hardware stack levels required when called: 1
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_color_click_init
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text9
  1501   001400                     __ptext9:
  1502                           	callstack 0
  1503   001400                     _I2C_2_Master_Init:
  1504                           	callstack 28
  1505   001400                     
  1506                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1507   001400  010E               	movlb	14	; () banked
  1508   001402  51D9               	movf	217,w,b	;volatile
  1509   001404  0BF0               	andlw	-16
  1510   001406  0908               	iorlw	8
  1511   001408  6FD9               	movwf	217,b	;volatile
  1512   00140A                     
  1513                           ; BSR set to: 14
  1514                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1515   00140A  8BD9               	bsf	217,5,b	;volatile
  1516                           
  1517                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1518   00140C  0E9F               	movlw	159
  1519   00140E  6FD6               	movwf	214,b	;volatile
  1520   001410                     
  1521                           ; BSR set to: 14
  1522                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1523   001410  8A84               	bsf	132,5,c	;volatile
  1524   001412                     
  1525                           ; BSR set to: 14
  1526                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1527   001412  8C84               	bsf	132,6,c	;volatile
  1528   001414                     
  1529                           ; BSR set to: 14
  1530                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1531   001414  9BA7               	bcf	167,5,b	;volatile
  1532   001416                     
  1533                           ; BSR set to: 14
  1534                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1535   001416  9DA7               	bcf	167,6,b	;volatile
  1536                           
  1537                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1538   001418  0E1D               	movlw	29
  1539   00141A  6F1D               	movwf	29,b	;volatile
  1540                           
  1541                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1542   00141C  0E1E               	movlw	30
  1543   00141E  6F1C               	movwf	28,b	;volatile
  1544                           
  1545                           ;i2c.c: 18:   RD5PPS=0x1C;
  1546   001420  0E1C               	movlw	28
  1547   001422  6F6F               	movwf	111,b	;volatile
  1548                           
  1549                           ;i2c.c: 19:   RD6PPS=0x1B;
  1550   001424  0E1B               	movlw	27
  1551   001426  6F70               	movwf	112,b	;volatile
  1552   001428                     
  1553                           ; BSR set to: 14
  1554   001428  0012               	return		;funcret
  1555   00142A                     __end_of_I2C_2_Master_Init:
  1556                           	callstack 0
  1557                           
  1558 ;; *************** function _buggy_lights_init *****************
  1559 ;; Defined at:
  1560 ;;		line 7 in file "buggy_lights.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;		None
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;		None
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  1    wreg      void 
  1567 ;; Registers used:
  1568 ;;		None
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1578 ;;Total ram usage:        0 bytes
  1579 ;; Hardware stack levels used: 1
  1580 ;; Hardware stack levels required when called: 1
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_main
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text10
  1589   0013D2                     __ptext10:
  1590                           	callstack 0
  1591   0013D2                     _buggy_lights_init:
  1592                           	callstack 29
  1593   0013D2                     
  1594                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
  1595   0013D2  9884               	bcf	132,4,c	;volatile
  1596                           
  1597                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
  1598   0013D4  9288               	bcf	136,1,c	;volatile
  1599                           
  1600                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
  1601   0013D6  9684               	bcf	132,3,c	;volatile
  1602                           
  1603                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
  1604   0013D8  9086               	bcf	134,0,c	;volatile
  1605                           
  1606                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
  1607   0013DA  9088               	bcf	136,0,c	;volatile
  1608                           
  1609                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
  1610   0013DC  987C               	bcf	124,4,c	;volatile
  1611                           
  1612                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
  1613   0013DE  9280               	bcf	128,1,c	;volatile
  1614                           
  1615                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
  1616   0013E0  967C               	bcf	124,3,c	;volatile
  1617                           
  1618                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
  1619   0013E2  907E               	bcf	126,0,c	;volatile
  1620                           
  1621                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
  1622   0013E4  9080               	bcf	128,0,c	;volatile
  1623                           
  1624                           ;buggy_lights.c: 26:             TRISGbits.TRISG1 = 0;
  1625   0013E6  9287               	bcf	135,1,c	;volatile
  1626                           
  1627                           ;buggy_lights.c: 27:             TRISAbits.TRISA4 = 0;
  1628   0013E8  9881               	bcf	129,4,c	;volatile
  1629                           
  1630                           ;buggy_lights.c: 28:             TRISFbits.TRISF7 = 0;
  1631   0013EA  9E86               	bcf	134,7,c	;volatile
  1632                           
  1633                           ;buggy_lights.c: 30:             LATGbits.LATG1 = 0;
  1634   0013EC  927F               	bcf	127,1,c	;volatile
  1635                           
  1636                           ;buggy_lights.c: 31:             LATAbits.LATA4 = 0;
  1637   0013EE  9879               	bcf	121,4,c	;volatile
  1638                           
  1639                           ;buggy_lights.c: 32:             LATFbits.LATF7 = 0;
  1640   0013F0  9E7E               	bcf	126,7,c	;volatile
  1641                           
  1642                           ;buggy_lights.c: 36:             TRISGbits.TRISG0 = 0;
  1643   0013F2  9087               	bcf	135,0,c	;volatile
  1644                           
  1645                           ;buggy_lights.c: 37:             TRISEbits.TRISE7 = 0;
  1646   0013F4  9E85               	bcf	133,7,c	;volatile
  1647                           
  1648                           ;buggy_lights.c: 38:             TRISAbits.TRISA3 = 0;
  1649   0013F6  9681               	bcf	129,3,c	;volatile
  1650                           
  1651                           ;buggy_lights.c: 40:             LATGbits.LATG0 = 0;
  1652   0013F8  907F               	bcf	127,0,c	;volatile
  1653                           
  1654                           ;buggy_lights.c: 41:             LATEbits.LATE7 = 0;
  1655   0013FA  9E7D               	bcf	125,7,c	;volatile
  1656                           
  1657                           ;buggy_lights.c: 42:             LATAbits.LATA3 = 0;
  1658   0013FC  9679               	bcf	121,3,c	;volatile
  1659   0013FE  0012               	return		;funcret
  1660   001400                     __end_of_buggy_lights_init:
  1661                           	callstack 0
  1662                           
  1663 ;; *************** function _UTurn *****************
  1664 ;; Defined at:
  1665 ;;		line 219 in file "dc_motor.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  1668 ;;		 -> main@motorL(9), 
  1669 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  1670 ;;		 -> main@motorR(9), 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  1    wreg      void 
  1675 ;; Registers used:
  1676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1682 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1684 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1685 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1686 ;;Total ram usage:        4 bytes
  1687 ;; Hardware stack levels used: 1
  1688 ;; Hardware stack levels required when called: 4
  1689 ;; This function calls:
  1690 ;;		_stop
  1691 ;;		_turnLeft
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;;		_card_blue
  1695 ;;		_card_white
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text11
  1700   0013A0                     __ptext11:
  1701                           	callstack 0
  1702   0013A0                     _UTurn:
  1703                           	callstack 26
  1704   0013A0                     
  1705                           ;dc_motor.c: 219: void UTurn(DC_motor *mL, DC_motor *mR);dc_motor.c: 220: {;dc_motor.c: 
      +                          221:     turnLeft(mL, mR);
  1706   0013A0  C018  F013         	movff	UTurn@mL,turnLeft@mL
  1707   0013A4  C019  F014         	movff	UTurn@mR,turnLeft@mR
  1708   0013A8  EC66  F008         	call	_turnLeft	;wreg free
  1709   0013AC                     
  1710                           ;dc_motor.c: 222:     _delay((unsigned long)((turn180Delay)*(64000000/4000.0)));
  1711   0013AC  0E21               	movlw	33
  1712   0013AE  6E1B               	movwf	(??_UTurn+1)^0,c
  1713   0013B0  0E78               	movlw	120
  1714   0013B2  6E1A               	movwf	??_UTurn^0,c
  1715   0013B4  0E98               	movlw	152
  1716   0013B6                     u3867:
  1717   0013B6  2EE8               	decfsz	wreg,f,c
  1718   0013B8  D7FE               	bra	u3867
  1719   0013BA  2E1A               	decfsz	??_UTurn^0,f,c
  1720   0013BC  D7FC               	bra	u3867
  1721   0013BE  2E1B               	decfsz	(??_UTurn+1)^0,f,c
  1722   0013C0  D7FA               	bra	u3867
  1723   0013C2  D000               	nop2	
  1724   0013C4                     
  1725                           ;dc_motor.c: 223:     stop(mL, mR);
  1726   0013C4  C018  F013         	movff	UTurn@mL,stop@mL
  1727   0013C8  C019  F014         	movff	UTurn@mR,stop@mR
  1728   0013CC  EC0A  F009         	call	_stop	;wreg free
  1729   0013D0  0012               	return		;funcret
  1730   0013D2                     __end_of_UTurn:
  1731                           	callstack 0
  1732                           
  1733 ;; *************** function _turnLeft *****************
  1734 ;; Defined at:
  1735 ;;		line 107 in file "dc_motor.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1738 ;;		 -> main@motorL(9), 
  1739 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1740 ;;		 -> main@motorR(9), 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  rightGear       1   22[COMRAM] unsigned char 
  1743 ;;  leftGear        1   21[COMRAM] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1756 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1757 ;;Total ram usage:        5 bytes
  1758 ;; Hardware stack levels used: 1
  1759 ;; Hardware stack levels required when called: 3
  1760 ;; This function calls:
  1761 ;;		_setMotorPWM
  1762 ;; This function is called by:
  1763 ;;		_UTurn
  1764 ;;		_turnLeft90
  1765 ;;		_turnLeft135
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text12
  1770   0010CC                     __ptext12:
  1771                           	callstack 0
  1772   0010CC                     _turnLeft:
  1773                           	callstack 26
  1774   0010CC  0E28               	movlw	40
  1775   0010CE  6E16               	movwf	turnLeft@leftGear^0,c
  1776   0010D0  0E28               	movlw	40
  1777   0010D2  6E17               	movwf	turnLeft@rightGear^0,c
  1778   0010D4                     
  1779                           ;dc_motor.c: 111:     (mL->direction) = 0;
  1780   0010D4  5013               	movf	turnLeft@mL^0,w,c
  1781   0010D6  6ED9               	movwf	fsr2l,c
  1782   0010D8  6ADA               	clrf	fsr2h,c
  1783   0010DA  0E01               	movlw	1
  1784   0010DC  26D9               	addwf	fsr2l,f,c
  1785   0010DE  6ADF               	clrf	indf2,c
  1786   0010E0                     
  1787                           ;dc_motor.c: 112:     (mR->direction) = 1;
  1788   0010E0  5014               	movf	turnLeft@mR^0,w,c
  1789   0010E2  6ED9               	movwf	fsr2l,c
  1790   0010E4  6ADA               	clrf	fsr2h,c
  1791   0010E6  0E01               	movlw	1
  1792   0010E8  26D9               	addwf	fsr2l,f,c
  1793   0010EA  0E01               	movlw	1
  1794   0010EC  6EDF               	movwf	indf2,c
  1795                           
  1796                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1797   0010EE  EFA9  F008         	goto	l4001
  1798   0010F2                     l3989:
  1799                           
  1800                           ;dc_motor.c: 114:         if (mL->power<leftGear) {mL->power++;}
  1801   0010F2  5013               	movf	turnLeft@mL^0,w,c
  1802   0010F4  6ED9               	movwf	fsr2l,c
  1803   0010F6  6ADA               	clrf	fsr2h,c
  1804   0010F8  5016               	movf	turnLeft@leftGear^0,w,c
  1805   0010FA  5CDE               	subwf	postinc2,w,c
  1806   0010FC  B0D8               	btfsc	status,0,c
  1807   0010FE  EF83  F008         	goto	u3261
  1808   001102  EF85  F008         	goto	u3260
  1809   001106                     u3261:
  1810   001106  EF89  F008         	goto	l232
  1811   00110A                     u3260:
  1812   00110A  5013               	movf	turnLeft@mL^0,w,c
  1813   00110C  6ED9               	movwf	fsr2l,c
  1814   00110E  6ADA               	clrf	fsr2h,c
  1815   001110  2ADF               	incf	indf2,f,c
  1816   001112                     l232:
  1817                           
  1818                           ;dc_motor.c: 115:         if (mR->power<rightGear) {mR->power++;}
  1819   001112  5014               	movf	turnLeft@mR^0,w,c
  1820   001114  6ED9               	movwf	fsr2l,c
  1821   001116  6ADA               	clrf	fsr2h,c
  1822   001118  5017               	movf	turnLeft@rightGear^0,w,c
  1823   00111A  5CDE               	subwf	postinc2,w,c
  1824   00111C  B0D8               	btfsc	status,0,c
  1825   00111E  EF93  F008         	goto	u3271
  1826   001122  EF95  F008         	goto	u3270
  1827   001126                     u3271:
  1828   001126  EF99  F008         	goto	l3995
  1829   00112A                     u3270:
  1830   00112A  5014               	movf	turnLeft@mR^0,w,c
  1831   00112C  6ED9               	movwf	fsr2l,c
  1832   00112E  6ADA               	clrf	fsr2h,c
  1833   001130  2ADF               	incf	indf2,f,c
  1834   001132                     l3995:
  1835                           
  1836                           ;dc_motor.c: 116:         setMotorPWM(mL);
  1837   001132  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  1838   001136  ECBC  F007         	call	_setMotorPWM	;wreg free
  1839   00113A                     
  1840                           ;dc_motor.c: 117:         setMotorPWM(mR);
  1841   00113A  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  1842   00113E  ECBC  F007         	call	_setMotorPWM	;wreg free
  1843   001142                     
  1844                           ;dc_motor.c: 118:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1845   001142  0EA7               	movlw	167
  1846   001144  6E15               	movwf	??_turnLeft^0,c
  1847   001146  0E3A               	movlw	58
  1848   001148                     u3877:
  1849   001148  2EE8               	decfsz	wreg,f,c
  1850   00114A  D7FE               	bra	u3877
  1851   00114C  2E15               	decfsz	??_turnLeft^0,f,c
  1852   00114E  D7FC               	bra	u3877
  1853   001150  D000               	nop2	
  1854   001152                     l4001:
  1855                           
  1856                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1857   001152  5013               	movf	turnLeft@mL^0,w,c
  1858   001154  6ED9               	movwf	fsr2l,c
  1859   001156  6ADA               	clrf	fsr2h,c
  1860   001158  5016               	movf	turnLeft@leftGear^0,w,c
  1861   00115A  5CDE               	subwf	postinc2,w,c
  1862   00115C  A0D8               	btfss	status,0,c
  1863   00115E  EFB3  F008         	goto	u3281
  1864   001162  EFB5  F008         	goto	u3280
  1865   001166                     u3281:
  1866   001166  EF79  F008         	goto	l3989
  1867   00116A                     u3280:
  1868   00116A  5014               	movf	turnLeft@mR^0,w,c
  1869   00116C  6ED9               	movwf	fsr2l,c
  1870   00116E  6ADA               	clrf	fsr2h,c
  1871   001170  5017               	movf	turnLeft@rightGear^0,w,c
  1872   001172  5CDE               	subwf	postinc2,w,c
  1873   001174  A0D8               	btfss	status,0,c
  1874   001176  EFBF  F008         	goto	u3291
  1875   00117A  EFC1  F008         	goto	u3290
  1876   00117E                     u3291:
  1877   00117E  EF79  F008         	goto	l3989
  1878   001182                     u3290:
  1879   001182  0012               	return		;funcret
  1880   001184                     __end_of_turnLeft:
  1881                           	callstack 0
  1882                           
  1883 ;; *************** function _stop *****************
  1884 ;; Defined at:
  1885 ;;		line 93 in file "dc_motor.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1888 ;;		 -> main@motorL(9), 
  1889 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1890 ;;		 -> main@motorR(9), 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1902 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1905 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1906 ;;Total ram usage:        3 bytes
  1907 ;; Hardware stack levels used: 1
  1908 ;; Hardware stack levels required when called: 3
  1909 ;; This function calls:
  1910 ;;		_setMotorPWM
  1911 ;; This function is called by:
  1912 ;;		_UTurn
  1913 ;;		_main
  1914 ;;		_turnLeft90
  1915 ;;		_turnRight90
  1916 ;;		_turnLeft135
  1917 ;;		_turnRight135
  1918 ;;		_headbuttReverse
  1919 ;;		_squareReverse
  1920 ;;		_forward_navigation
  1921 ;;		_return_to_sender
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text13
  1926   001214                     __ptext13:
  1927                           	callstack 0
  1928   001214                     _stop:
  1929                           	callstack 27
  1930   001214                     
  1931                           ;dc_motor.c: 93: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 94: {;dc_motor.c: 95:
      +                               while ((mL->power>0) || (mR->power>0)){
  1932   001214  EF3A  F009         	goto	l3979
  1933   001218                     l3965:
  1934                           
  1935                           ;dc_motor.c: 96:         if (mL->power>0) {mL->power--;}
  1936   001218  5013               	movf	stop@mL^0,w,c
  1937   00121A  6ED9               	movwf	fsr2l,c
  1938   00121C  6ADA               	clrf	fsr2h,c
  1939   00121E  50DF               	movf	indf2,w,c
  1940   001220  B4D8               	btfsc	status,2,c
  1941   001222  EF15  F009         	goto	u3221
  1942   001226  EF17  F009         	goto	u3220
  1943   00122A                     u3221:
  1944   00122A  EF1B  F009         	goto	l3969
  1945   00122E                     u3220:
  1946   00122E  5013               	movf	stop@mL^0,w,c
  1947   001230  6ED9               	movwf	fsr2l,c
  1948   001232  6ADA               	clrf	fsr2h,c
  1949   001234  06DF               	decf	indf2,f,c
  1950   001236                     l3969:
  1951                           
  1952                           ;dc_motor.c: 97:         if (mR->power>0) {mR->power--;}
  1953   001236  5014               	movf	stop@mR^0,w,c
  1954   001238  6ED9               	movwf	fsr2l,c
  1955   00123A  6ADA               	clrf	fsr2h,c
  1956   00123C  50DF               	movf	indf2,w,c
  1957   00123E  B4D8               	btfsc	status,2,c
  1958   001240  EF24  F009         	goto	u3231
  1959   001244  EF26  F009         	goto	u3230
  1960   001248                     u3231:
  1961   001248  EF2A  F009         	goto	l3973
  1962   00124C                     u3230:
  1963   00124C  5014               	movf	stop@mR^0,w,c
  1964   00124E  6ED9               	movwf	fsr2l,c
  1965   001250  6ADA               	clrf	fsr2h,c
  1966   001252  06DF               	decf	indf2,f,c
  1967   001254                     l3973:
  1968                           
  1969                           ;dc_motor.c: 98:         setMotorPWM(mL);
  1970   001254  C013  F00E         	movff	stop@mL,setMotorPWM@m
  1971   001258  ECBC  F007         	call	_setMotorPWM	;wreg free
  1972   00125C                     
  1973                           ;dc_motor.c: 99:         setMotorPWM(mR);
  1974   00125C  C014  F00E         	movff	stop@mR,setMotorPWM@m
  1975   001260  ECBC  F007         	call	_setMotorPWM	;wreg free
  1976   001264                     
  1977                           ;dc_motor.c: 100:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1978   001264  0EA7               	movlw	167
  1979   001266  6E15               	movwf	??_stop^0,c
  1980   001268  0E3A               	movlw	58
  1981   00126A                     u3887:
  1982   00126A  2EE8               	decfsz	wreg,f,c
  1983   00126C  D7FE               	bra	u3887
  1984   00126E  2E15               	decfsz	??_stop^0,f,c
  1985   001270  D7FC               	bra	u3887
  1986   001272  D000               	nop2	
  1987   001274                     l3979:
  1988                           
  1989                           ;dc_motor.c: 95:     while ((mL->power>0) || (mR->power>0)){
  1990   001274  5013               	movf	stop@mL^0,w,c
  1991   001276  6ED9               	movwf	fsr2l,c
  1992   001278  6ADA               	clrf	fsr2h,c
  1993   00127A  50DF               	movf	indf2,w,c
  1994   00127C  A4D8               	btfss	status,2,c
  1995   00127E  EF43  F009         	goto	u3241
  1996   001282  EF45  F009         	goto	u3240
  1997   001286                     u3241:
  1998   001286  EF0C  F009         	goto	l3965
  1999   00128A                     u3240:
  2000   00128A  5014               	movf	stop@mR^0,w,c
  2001   00128C  6ED9               	movwf	fsr2l,c
  2002   00128E  6ADA               	clrf	fsr2h,c
  2003   001290  50DF               	movf	indf2,w,c
  2004   001292  A4D8               	btfss	status,2,c
  2005   001294  EF4E  F009         	goto	u3251
  2006   001298  EF50  F009         	goto	u3250
  2007   00129C                     u3251:
  2008   00129C  EF0C  F009         	goto	l3965
  2009   0012A0                     u3250:
  2010   0012A0  0012               	return		;funcret
  2011   0012A2                     __end_of_stop:
  2012                           	callstack 0
  2013                           
  2014 ;; *************** function _setMotorPWM *****************
  2015 ;; Defined at:
  2016 ;;		line 68 in file "dc_motor.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  m               1   13[COMRAM] PTR struct DC_motor
  2019 ;;		 -> main@motorR(9), main@motorL(9), 
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;  negDuty         1   17[COMRAM] unsigned char 
  2022 ;;  posDuty         1   16[COMRAM] unsigned char 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2032 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2033 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2034 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2035 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2036 ;;Total ram usage:        5 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; Hardware stack levels required when called: 2
  2039 ;; This function calls:
  2040 ;;		___lwdiv
  2041 ;;		___wmul
  2042 ;; This function is called by:
  2043 ;;		_stop
  2044 ;;		_turnLeft
  2045 ;;		_turnRight
  2046 ;;		_fullSpeedAhead
  2047 ;;		_fullSpeedReverse
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text14
  2052   000F78                     __ptext14:
  2053                           	callstack 0
  2054   000F78                     _setMotorPWM:
  2055                           	callstack 27
  2056   000F78                     
  2057                           ;dc_motor.c: 68: void setMotorPWM(DC_motor *m);dc_motor.c: 69: {;dc_motor.c: 70:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 72:     if(m->brakemode) {
  2058   000F78  500E               	movf	setMotorPWM@m^0,w,c
  2059   000F7A  6ED9               	movwf	fsr2l,c
  2060   000F7C  6ADA               	clrf	fsr2h,c
  2061   000F7E  0E02               	movlw	2
  2062   000F80  26D9               	addwf	fsr2l,f,c
  2063   000F82  50DF               	movf	indf2,w,c
  2064   000F84  B4D8               	btfsc	status,2,c
  2065   000F86  EFC7  F007         	goto	u3201
  2066   000F8A  EFC9  F007         	goto	u3200
  2067   000F8E                     u3201:
  2068   000F8E  EFF9  F007         	goto	l3917
  2069   000F92                     u3200:
  2070   000F92                     
  2071                           ;dc_motor.c: 73:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  2072   000F92  500E               	movf	setMotorPWM@m^0,w,c
  2073   000F94  6ED9               	movwf	fsr2l,c
  2074   000F96  6ADA               	clrf	fsr2h,c
  2075   000F98  50DF               	movf	indf2,w,c
  2076   000F9A  6E0F               	movwf	??_setMotorPWM^0,c
  2077   000F9C  500F               	movf	??_setMotorPWM^0,w,c
  2078   000F9E  6E01               	movwf	___wmul@multiplier^0,c
  2079   000FA0  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2080   000FA2  500E               	movf	setMotorPWM@m^0,w,c
  2081   000FA4  6ED9               	movwf	fsr2l,c
  2082   000FA6  6ADA               	clrf	fsr2h,c
  2083   000FA8  0E03               	movlw	3
  2084   000FAA  26D9               	addwf	fsr2l,f,c
  2085   000FAC  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2086   000FB0  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2087   000FB4  EC3D  F00A         	call	___wmul	;wreg free
  2088   000FB8  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2089   000FBC  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2090   000FC0  0E00               	movlw	0
  2091   000FC2  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2092   000FC4  0E64               	movlw	100
  2093   000FC6  6E09               	movwf	___lwdiv@divisor^0,c
  2094   000FC8  EC51  F009         	call	___lwdiv	;wreg free
  2095   000FCC  500E               	movf	setMotorPWM@m^0,w,c
  2096   000FCE  6ED9               	movwf	fsr2l,c
  2097   000FD0  6ADA               	clrf	fsr2h,c
  2098   000FD2  0E03               	movlw	3
  2099   000FD4  26D9               	addwf	fsr2l,f,c
  2100   000FD6  50DF               	movf	indf2,w,c
  2101   000FD8  6E10               	movwf	(??_setMotorPWM+1)^0,c
  2102   000FDA  5007               	movf	?___lwdiv^0,w,c
  2103   000FDC  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  2104   000FDE  6E11               	movwf	setMotorPWM@posDuty^0,c
  2105   000FE0                     
  2106                           ;dc_motor.c: 74:         negDuty=(unsigned char)(m->PWMperiod);
  2107   000FE0  500E               	movf	setMotorPWM@m^0,w,c
  2108   000FE2  6ED9               	movwf	fsr2l,c
  2109   000FE4  6ADA               	clrf	fsr2h,c
  2110   000FE6  0E03               	movlw	3
  2111   000FE8  26D9               	addwf	fsr2l,f,c
  2112   000FEA  50DF               	movf	indf2,w,c
  2113   000FEC  6E12               	movwf	setMotorPWM@negDuty^0,c
  2114                           
  2115                           ;dc_motor.c: 75:     }
  2116   000FEE  EF1A  F008         	goto	l3921
  2117   000FF2                     l3917:
  2118                           
  2119                           ;dc_motor.c: 77:         posDuty=0;
  2120   000FF2  0E00               	movlw	0
  2121   000FF4  6E11               	movwf	setMotorPWM@posDuty^0,c
  2122   000FF6                     
  2123                           ;dc_motor.c: 78:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  2124   000FF6  500E               	movf	setMotorPWM@m^0,w,c
  2125   000FF8  6ED9               	movwf	fsr2l,c
  2126   000FFA  6ADA               	clrf	fsr2h,c
  2127   000FFC  50DF               	movf	indf2,w,c
  2128   000FFE  6E0F               	movwf	??_setMotorPWM^0,c
  2129   001000  500F               	movf	??_setMotorPWM^0,w,c
  2130   001002  6E01               	movwf	___wmul@multiplier^0,c
  2131   001004  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2132   001006  500E               	movf	setMotorPWM@m^0,w,c
  2133   001008  6ED9               	movwf	fsr2l,c
  2134   00100A  6ADA               	clrf	fsr2h,c
  2135   00100C  0E03               	movlw	3
  2136   00100E  26D9               	addwf	fsr2l,f,c
  2137   001010  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2138   001014  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2139   001018  EC3D  F00A         	call	___wmul	;wreg free
  2140   00101C  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2141   001020  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2142   001024  0E00               	movlw	0
  2143   001026  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2144   001028  0E64               	movlw	100
  2145   00102A  6E09               	movwf	___lwdiv@divisor^0,c
  2146   00102C  EC51  F009         	call	___lwdiv	;wreg free
  2147   001030  5007               	movf	?___lwdiv^0,w,c
  2148   001032  6E12               	movwf	setMotorPWM@negDuty^0,c
  2149   001034                     l3921:
  2150                           
  2151                           ;dc_motor.c: 81:     if (m->direction) {
  2152   001034  500E               	movf	setMotorPWM@m^0,w,c
  2153   001036  6ED9               	movwf	fsr2l,c
  2154   001038  6ADA               	clrf	fsr2h,c
  2155   00103A  0E01               	movlw	1
  2156   00103C  26D9               	addwf	fsr2l,f,c
  2157   00103E  50DF               	movf	indf2,w,c
  2158   001040  B4D8               	btfsc	status,2,c
  2159   001042  EF25  F008         	goto	u3211
  2160   001046  EF27  F008         	goto	u3210
  2161   00104A                     u3211:
  2162   00104A  EF47  F008         	goto	l3925
  2163   00104E                     u3210:
  2164   00104E                     
  2165                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=posDuty;
  2166   00104E  500E               	movf	setMotorPWM@m^0,w,c
  2167   001050  6ED9               	movwf	fsr2l,c
  2168   001052  6ADA               	clrf	fsr2h,c
  2169   001054  0E05               	movlw	5
  2170   001056  26D9               	addwf	fsr2l,f,c
  2171   001058  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2172   00105C  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2173   001060  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2174   001064  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2175   001068  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2176                           
  2177                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=negDuty;
  2178   00106C  500E               	movf	setMotorPWM@m^0,w,c
  2179   00106E  6ED9               	movwf	fsr2l,c
  2180   001070  6ADA               	clrf	fsr2h,c
  2181   001072  0E07               	movlw	7
  2182   001074  26D9               	addwf	fsr2l,f,c
  2183   001076  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2184   00107A  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2185   00107E  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2186   001082  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2187   001086  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2188                           
  2189                           ;dc_motor.c: 84:     } else {
  2190   00108A  EF65  F008         	goto	l219
  2191   00108E                     l3925:
  2192                           
  2193                           ;dc_motor.c: 85:         *(m->posDutyHighByte)=negDuty;
  2194   00108E  500E               	movf	setMotorPWM@m^0,w,c
  2195   001090  6ED9               	movwf	fsr2l,c
  2196   001092  6ADA               	clrf	fsr2h,c
  2197   001094  0E05               	movlw	5
  2198   001096  26D9               	addwf	fsr2l,f,c
  2199   001098  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2200   00109C  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2201   0010A0  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2202   0010A4  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2203   0010A8  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2204                           
  2205                           ;dc_motor.c: 86:         *(m->negDutyHighByte)=posDuty;
  2206   0010AC  500E               	movf	setMotorPWM@m^0,w,c
  2207   0010AE  6ED9               	movwf	fsr2l,c
  2208   0010B0  6ADA               	clrf	fsr2h,c
  2209   0010B2  0E07               	movlw	7
  2210   0010B4  26D9               	addwf	fsr2l,f,c
  2211   0010B6  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2212   0010BA  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2213   0010BE  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2214   0010C2  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2215   0010C6  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2216   0010CA                     l219:
  2217   0010CA  0012               	return		;funcret
  2218   0010CC                     __end_of_setMotorPWM:
  2219                           	callstack 0
  2220                           
  2221 ;; *************** function ___wmul *****************
  2222 ;; Defined at:
  2223 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  multiplier      2    0[COMRAM] unsigned int 
  2226 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  product         2    4[COMRAM] unsigned int 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  2    0[COMRAM] unsigned int 
  2231 ;; Registers used:
  2232 ;;		wreg, status,2, status,0, prodl, prodh
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2241 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2242 ;;Total ram usage:        6 bytes
  2243 ;; Hardware stack levels used: 1
  2244 ;; Hardware stack levels required when called: 1
  2245 ;; This function calls:
  2246 ;;		Nothing
  2247 ;; This function is called by:
  2248 ;;		_setMotorPWM
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text15
  2253   00147A                     __ptext15:
  2254                           	callstack 0
  2255   00147A                     ___wmul:
  2256                           	callstack 27
  2257   00147A  5001               	movf	___wmul@multiplier^0,w,c
  2258   00147C  0203               	mulwf	___wmul@multiplicand^0,c
  2259   00147E  CFF3 F005          	movff	prodl,___wmul@product
  2260   001482  CFF4 F006          	movff	prodh,___wmul@product+1
  2261   001486  5001               	movf	___wmul@multiplier^0,w,c
  2262   001488  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2263   00148A  50F3               	movf	243,w,c
  2264   00148C  2606               	addwf	(___wmul@product+1)^0,f,c
  2265   00148E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2266   001490  0203               	mulwf	___wmul@multiplicand^0,c
  2267   001492  50F3               	movf	243,w,c
  2268   001494  2606               	addwf	(___wmul@product+1)^0,f,c
  2269   001496  C005  F001         	movff	___wmul@product,?___wmul
  2270   00149A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2271   00149E  0012               	return		;funcret
  2272   0014A0                     __end_of___wmul:
  2273                           	callstack 0
  2274                           
  2275 ;; *************** function ___lwdiv *****************
  2276 ;; Defined at:
  2277 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;  dividend        2    6[COMRAM] unsigned int 
  2280 ;;  divisor         2    8[COMRAM] unsigned int 
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;  quotient        2   11[COMRAM] unsigned int 
  2283 ;;  counter         1   10[COMRAM] unsigned char 
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  2    6[COMRAM] unsigned int 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2293 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2294 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2296 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2297 ;;Total ram usage:        7 bytes
  2298 ;; Hardware stack levels used: 1
  2299 ;; Hardware stack levels required when called: 1
  2300 ;; This function calls:
  2301 ;;		Nothing
  2302 ;; This function is called by:
  2303 ;;		_setMotorPWM
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text16
  2308   0012A2                     __ptext16:
  2309                           	callstack 0
  2310   0012A2                     ___lwdiv:
  2311                           	callstack 27
  2312   0012A2  0E00               	movlw	0
  2313   0012A4  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  2314   0012A6  0E00               	movlw	0
  2315   0012A8  6E0C               	movwf	___lwdiv@quotient^0,c
  2316   0012AA  5009               	movf	___lwdiv@divisor^0,w,c
  2317   0012AC  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2318   0012AE  B4D8               	btfsc	status,2,c
  2319   0012B0  EF5C  F009         	goto	u3171
  2320   0012B4  EF5E  F009         	goto	u3170
  2321   0012B8                     u3171:
  2322   0012B8  EF86  F009         	goto	l1256
  2323   0012BC                     u3170:
  2324   0012BC  0E01               	movlw	1
  2325   0012BE  6E0B               	movwf	___lwdiv@counter^0,c
  2326   0012C0  EF66  F009         	goto	l3897
  2327   0012C4                     l3895:
  2328   0012C4  90D8               	bcf	status,0,c
  2329   0012C6  3609               	rlcf	___lwdiv@divisor^0,f,c
  2330   0012C8  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2331   0012CA  2A0B               	incf	___lwdiv@counter^0,f,c
  2332   0012CC                     l3897:
  2333   0012CC  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2334   0012CE  EF6B  F009         	goto	u3181
  2335   0012D2  EF6D  F009         	goto	u3180
  2336   0012D6                     u3181:
  2337   0012D6  EF62  F009         	goto	l3895
  2338   0012DA                     u3180:
  2339   0012DA                     l3899:
  2340   0012DA  90D8               	bcf	status,0,c
  2341   0012DC  360C               	rlcf	___lwdiv@quotient^0,f,c
  2342   0012DE  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2343   0012E0  5009               	movf	___lwdiv@divisor^0,w,c
  2344   0012E2  5C07               	subwf	___lwdiv@dividend^0,w,c
  2345   0012E4  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2346   0012E6  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2347   0012E8  A0D8               	btfss	status,0,c
  2348   0012EA  EF79  F009         	goto	u3191
  2349   0012EE  EF7B  F009         	goto	u3190
  2350   0012F2                     u3191:
  2351   0012F2  EF80  F009         	goto	l3907
  2352   0012F6                     u3190:
  2353   0012F6  5009               	movf	___lwdiv@divisor^0,w,c
  2354   0012F8  5E07               	subwf	___lwdiv@dividend^0,f,c
  2355   0012FA  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2356   0012FC  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2357   0012FE  800C               	bsf	___lwdiv@quotient^0,0,c
  2358   001300                     l3907:
  2359   001300  90D8               	bcf	status,0,c
  2360   001302  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2361   001304  3209               	rrcf	___lwdiv@divisor^0,f,c
  2362   001306  2E0B               	decfsz	___lwdiv@counter^0,f,c
  2363   001308  EF6D  F009         	goto	l3899
  2364   00130C                     l1256:
  2365   00130C  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  2366   001310  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2367   001314  0012               	return		;funcret
  2368   001316                     __end_of___lwdiv:
  2369                           	callstack 0
  2370                           
  2371 ;; *************** function _Timer0_init *****************
  2372 ;; Defined at:
  2373 ;;		line 7 in file "timers.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;		None
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;		None
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      void 
  2380 ;; Registers used:
  2381 ;;		wreg, status,2, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2391 ;;Total ram usage:        0 bytes
  2392 ;; Hardware stack levels used: 1
  2393 ;; Hardware stack levels required when called: 3
  2394 ;; This function calls:
  2395 ;;		_reset_timer
  2396 ;;		_start_timer
  2397 ;; This function is called by:
  2398 ;;		_main
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text17
  2403   001452                     __ptext17:
  2404                           	callstack 0
  2405   001452                     _Timer0_init:
  2406                           	callstack 27
  2407   001452                     
  2408                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  2409   001452  50D6               	movf	214,w,c	;volatile
  2410   001454  0B1F               	andlw	-225
  2411   001456  0940               	iorlw	64
  2412   001458  6ED6               	movwf	214,c	;volatile
  2413   00145A                     
  2414                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  2415   00145A  88D6               	bsf	214,4,c	;volatile
  2416   00145C                     
  2417                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  2418   00145C  88D5               	bsf	213,4,c	;volatile
  2419                           
  2420                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  2421   00145E  50D6               	movf	214,w,c	;volatile
  2422   001460  0BF0               	andlw	-16
  2423   001462  090E               	iorlw	14
  2424   001464  6ED6               	movwf	214,c	;volatile
  2425   001466                     
  2426                           ;timers.c: 18:     reset_timer();
  2427   001466  EC82  F00A         	call	_reset_timer	;wreg free
  2428   00146A                     
  2429                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  2430   00146A  8ED5               	bsf	213,7,c	;volatile
  2431                           
  2432                           ;timers.c: 21:     start_timer();
  2433   00146C  EC98  F00A         	call	_start_timer	;wreg free
  2434   001470                     
  2435                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
  2436   001470  010E               	movlb	14	; () banked
  2437   001472  8B29               	bsf	41,5,b	;volatile
  2438   001474                     
  2439                           ; BSR set to: 14
  2440                           ;timers.c: 23:     INTCONbits.PEIE = 1;
  2441   001474  8CF2               	bsf	242,6,c	;volatile
  2442   001476                     
  2443                           ; BSR set to: 14
  2444                           ;timers.c: 24:     INTCONbits.GIE = 1;
  2445   001476  8EF2               	bsf	242,7,c	;volatile
  2446   001478                     
  2447                           ; BSR set to: 14
  2448   001478  0012               	return		;funcret
  2449   00147A                     __end_of_Timer0_init:
  2450                           	callstack 0
  2451                           
  2452 ;; *************** function _start_timer *****************
  2453 ;; Defined at:
  2454 ;;		line 30 in file "timers.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;		None
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;		None
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      void 
  2461 ;; Registers used:
  2462 ;;		None
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2472 ;;Total ram usage:        0 bytes
  2473 ;; Hardware stack levels used: 1
  2474 ;; Hardware stack levels required when called: 1
  2475 ;; This function calls:
  2476 ;;		Nothing
  2477 ;; This function is called by:
  2478 ;;		_Timer0_init
  2479 ;;		_forward_navigation
  2480 ;;		_return_to_sender
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text18
  2485   001530                     __ptext18:
  2486                           	callstack 0
  2487   001530                     _start_timer:
  2488                           	callstack 28
  2489   001530                     
  2490                           ;timers.c: 32:     T0CON0bits.T0EN=1;
  2491   001530  8ED5               	bsf	213,7,c	;volatile
  2492   001532  0012               	return		;funcret
  2493   001534                     __end_of_start_timer:
  2494                           	callstack 0
  2495                           
  2496 ;; *************** function _reset_timer *****************
  2497 ;; Defined at:
  2498 ;;		line 70 in file "timers.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;		None
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;		None
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, status,2, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2516 ;;Total ram usage:        0 bytes
  2517 ;; Hardware stack levels used: 1
  2518 ;; Hardware stack levels required when called: 2
  2519 ;; This function calls:
  2520 ;;		_write_timer
  2521 ;; This function is called by:
  2522 ;;		_Timer0_init
  2523 ;;		_forward_navigation
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           	psect	text19
  2528   001504                     __ptext19:
  2529                           	callstack 0
  2530   001504                     _reset_timer:
  2531                           	callstack 27
  2532   001504                     
  2533                           ;timers.c: 72:     write_timer(0, 0);
  2534   001504  0E00               	movlw	0
  2535   001506  6E01               	movwf	write_timer@tL^0,c
  2536   001508  0E00               	movlw	0
  2537   00150A  EC88  F00A         	call	_write_timer
  2538   00150E  0012               	return		;funcret
  2539   001510                     __end_of_reset_timer:
  2540                           	callstack 0
  2541                           
  2542 ;; *************** function _write_timer *****************
  2543 ;; Defined at:
  2544 ;;		line 58 in file "timers.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  tH              1    wreg     unsigned char 
  2547 ;;  tL              1    0[COMRAM] unsigned char 
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  tH              1    1[COMRAM] unsigned char 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2559 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2563 ;;Total ram usage:        2 bytes
  2564 ;; Hardware stack levels used: 1
  2565 ;; Hardware stack levels required when called: 1
  2566 ;; This function calls:
  2567 ;;		Nothing
  2568 ;; This function is called by:
  2569 ;;		_reset_timer
  2570 ;;		_return_to_sender
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text20
  2575   001510                     __ptext20:
  2576                           	callstack 0
  2577   001510                     _write_timer:
  2578                           	callstack 27
  2579                           
  2580                           ;incstack = 0
  2581                           ;write_timer@tH stored from wreg
  2582   001510  6E02               	movwf	write_timer@tH^0,c
  2583   001512                     
  2584                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
  2585   001512  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  2586   001516                     
  2587                           ;timers.c: 64:     TMR0L = tL;
  2588   001516  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  2589   00151A  0012               	return		;funcret
  2590   00151C                     __end_of_write_timer:
  2591                           	callstack 0
  2592                           
  2593 ;; *************** function _ISR *****************
  2594 ;; Defined at:
  2595 ;;		line 210 in file "timers.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, status,2
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2613 ;;Total ram usage:        0 bytes
  2614 ;; Hardware stack levels used: 1
  2615 ;; This function calls:
  2616 ;;		Nothing
  2617 ;; This function is called by:
  2618 ;;		Interrupt level 2
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	intcode
  2623   000008                     __pintcode:
  2624                           	callstack 0
  2625   000008                     _ISR:
  2626                           	callstack 26
  2627                           
  2628                           ;incstack = 0
  2629   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2630   00000A                     
  2631                           ;timers.c: 212:     if (PIR0bits.TMR0IF) {
  2632   00000A  010E               	movlb	14	; () banked
  2633   00000C  AB33               	btfss	51,5,b	;volatile
  2634   00000E  EF0B  F000         	goto	i2u120_41
  2635   000012  EF0D  F000         	goto	i2u120_40
  2636   000016                     i2u120_41:
  2637   000016  EF1C  F000         	goto	i2l733
  2638   00001A                     i2u120_40:
  2639   00001A                     
  2640                           ; BSR set to: 14
  2641                           ;timers.c: 213:         if (returning) {
  2642   00001A  505D               	movf	_returning^0,w,c
  2643   00001C  B4D8               	btfsc	status,2,c
  2644   00001E  EF13  F000         	goto	i2u121_41
  2645   000022  EF15  F000         	goto	i2u121_40
  2646   000026                     i2u121_41:
  2647   000026  EF19  F000         	goto	i2l2429
  2648   00002A                     i2u121_40:
  2649   00002A                     
  2650                           ; BSR set to: 14
  2651                           ;timers.c: 214:             return_flag = 1;
  2652   00002A  0E01               	movlw	1
  2653   00002C  6E5C               	movwf	_return_flag^0,c
  2654                           
  2655                           ;timers.c: 215:         } else {
  2656   00002E  EF1B  F000         	goto	i2l2431
  2657   000032                     i2l2429:
  2658                           
  2659                           ; BSR set to: 14
  2660                           ;timers.c: 216:             lost_flag = 1;
  2661   000032  0E01               	movlw	1
  2662   000034  6E5B               	movwf	_lost_flag^0,c
  2663   000036                     i2l2431:
  2664                           
  2665                           ; BSR set to: 14
  2666                           ;timers.c: 218:         PIR0bits.TMR0IF = 0;
  2667   000036  9B33               	bcf	51,5,b	;volatile
  2668   000038                     i2l733:
  2669                           
  2670                           ; BSR set to: 14
  2671   000038  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2672   00003A  0011               	retfie		f
  2673   00003C                     __end_of_ISR:
  2674                           	callstack 0
  2675                           
  2676                           	psect	rparam
  2677   000000                     
  2678                           	psect	temp
  2679   00005E                     btemp:
  2680                           	callstack 0
  2681   00005E                     	ds	1
  2682   000000                     int$flags	set	btemp
  2683   000000                     wtemp8	set	btemp+1
  2684   000000                     ttemp5	set	btemp+1
  2685   000000                     ttemp6	set	btemp+4
  2686   000000                     ttemp7	set	btemp+8
  2687                           
  2688                           	psect	idloc
  2689                           
  2690                           ;Config register IDLOC0 @ 0x200000
  2691                           ;	unspecified, using default values
  2692   200000                     	org	2097152
  2693   200000  FFFF               	dw	65535
  2694                           
  2695                           ;Config register IDLOC1 @ 0x200002
  2696                           ;	unspecified, using default values
  2697   200002                     	org	2097154
  2698   200002  FFFF               	dw	65535
  2699                           
  2700                           ;Config register IDLOC2 @ 0x200004
  2701                           ;	unspecified, using default values
  2702   200004                     	org	2097156
  2703   200004  FFFF               	dw	65535
  2704                           
  2705                           ;Config register IDLOC3 @ 0x200006
  2706                           ;	unspecified, using default values
  2707   200006                     	org	2097158
  2708   200006  FFFF               	dw	65535
  2709                           
  2710                           ;Config register IDLOC4 @ 0x200008
  2711                           ;	unspecified, using default values
  2712   200008                     	org	2097160
  2713   200008  FFFF               	dw	65535
  2714                           
  2715                           ;Config register IDLOC5 @ 0x20000A
  2716                           ;	unspecified, using default values
  2717   20000A                     	org	2097162
  2718   20000A  FFFF               	dw	65535
  2719                           
  2720                           ;Config register IDLOC6 @ 0x20000C
  2721                           ;	unspecified, using default values
  2722   20000C                     	org	2097164
  2723   20000C  FFFF               	dw	65535
  2724                           
  2725                           ;Config register IDLOC7 @ 0x20000E
  2726                           ;	unspecified, using default values
  2727   20000E                     	org	2097166
  2728   20000E  FFFF               	dw	65535
  2729                           
  2730                           	psect	config
  2731                           
  2732                           ;Config register CONFIG1L @ 0x300000
  2733                           ;	External Oscillator mode Selection bits
  2734                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2735                           ;	Power-up default value for COSC bits
  2736                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2737   300000                     	org	3145728
  2738   300000  AA                 	db	170
  2739                           
  2740                           ;Config register CONFIG1H @ 0x300001
  2741                           ;	unspecified, using default values
  2742                           ;	Clock Out Enable bit
  2743                           ;	CLKOUTEN = 0x1, unprogrammed default
  2744                           ;	Clock Switch Enable bit
  2745                           ;	CSWEN = 0x1, unprogrammed default
  2746                           ;	Fail-Safe Clock Monitor Enable bit
  2747                           ;	FCMEN = 0x1, unprogrammed default
  2748   300001                     	org	3145729
  2749   300001  FF                 	db	255
  2750                           
  2751                           ;Config register CONFIG2L @ 0x300002
  2752                           ;	unspecified, using default values
  2753                           ;	Master Clear Enable bit
  2754                           ;	MCLRE = 0x1, unprogrammed default
  2755                           ;	Power-up Timer Enable bit
  2756                           ;	PWRTE = 0x1, unprogrammed default
  2757                           ;	Low-power BOR enable bit
  2758                           ;	LPBOREN = 0x1, unprogrammed default
  2759                           ;	Brown-out Reset Enable bits
  2760                           ;	BOREN = 0x3, unprogrammed default
  2761   300002                     	org	3145730
  2762   300002  FF                 	db	255
  2763                           
  2764                           ;Config register CONFIG2H @ 0x300003
  2765                           ;	unspecified, using default values
  2766                           ;	Brown Out Reset Voltage selection bits
  2767                           ;	BORV = 0x3, unprogrammed default
  2768                           ;	ZCD Disable bit
  2769                           ;	ZCD = 0x1, unprogrammed default
  2770                           ;	PPSLOCK bit One-Way Set Enable bit
  2771                           ;	PPS1WAY = 0x1, unprogrammed default
  2772                           ;	Stack Full/Underflow Reset Enable bit
  2773                           ;	STVREN = 0x1, unprogrammed default
  2774                           ;	Debugger Enable bit
  2775                           ;	DEBUG = 0x1, unprogrammed default
  2776                           ;	Extended Instruction Set Enable bit
  2777                           ;	XINST = 0x1, unprogrammed default
  2778   300003                     	org	3145731
  2779   300003  FF                 	db	255
  2780                           
  2781                           ;Config register CONFIG3L @ 0x300004
  2782                           ;	WDT Period Select bits
  2783                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2784                           ;	WDT operating mode
  2785                           ;	WDTE = OFF, WDT Disabled
  2786   300004                     	org	3145732
  2787   300004  9F                 	db	159
  2788                           
  2789                           ;Config register CONFIG3H @ 0x300005
  2790                           ;	unspecified, using default values
  2791                           ;	WDT Window Select bits
  2792                           ;	WDTCWS = 0x7, unprogrammed default
  2793                           ;	WDT input clock selector
  2794                           ;	WDTCCS = 0x7, unprogrammed default
  2795   300005                     	org	3145733
  2796   300005  FF                 	db	255
  2797                           
  2798                           ;Config register CONFIG4L @ 0x300006
  2799                           ;	unspecified, using default values
  2800                           ;	Write Protection Block 0
  2801                           ;	WRT0 = 0x1, unprogrammed default
  2802                           ;	Write Protection Block 1
  2803                           ;	WRT1 = 0x1, unprogrammed default
  2804                           ;	Write Protection Block 2
  2805                           ;	WRT2 = 0x1, unprogrammed default
  2806                           ;	Write Protection Block 3
  2807                           ;	WRT3 = 0x1, unprogrammed default
  2808                           ;	Write Protection Block 3
  2809                           ;	WRT4 = 0x1, unprogrammed default
  2810                           ;	Write Protection Block 3
  2811                           ;	WRT5 = 0x1, unprogrammed default
  2812                           ;	Write Protection Block 3
  2813                           ;	WRT6 = 0x1, unprogrammed default
  2814                           ;	Write Protection Block 3
  2815                           ;	WRT7 = 0x1, unprogrammed default
  2816   300006                     	org	3145734
  2817   300006  FF                 	db	255
  2818                           
  2819                           ;Config register CONFIG4H @ 0x300007
  2820                           ;	unspecified, using default values
  2821                           ;	Configuration Register Write Protection bit
  2822                           ;	WRTC = 0x1, unprogrammed default
  2823                           ;	Boot Block Write Protection bit
  2824                           ;	WRTB = 0x1, unprogrammed default
  2825                           ;	Data EEPROM Write Protection bit
  2826                           ;	WRTD = 0x1, unprogrammed default
  2827                           ;	Scanner Enable bit
  2828                           ;	SCANE = 0x1, unprogrammed default
  2829                           ;	Low Voltage Programming Enable bit
  2830                           ;	LVP = 0x1, unprogrammed default
  2831   300007                     	org	3145735
  2832   300007  FF                 	db	255
  2833                           
  2834                           ;Config register CONFIG5L @ 0x300008
  2835                           ;	unspecified, using default values
  2836                           ;	UserNVM Program Memory Code Protection bit
  2837                           ;	CP = 0x1, unprogrammed default
  2838                           ;	DataNVM Memory Code Protection bit
  2839                           ;	CPD = 0x1, unprogrammed default
  2840   300008                     	org	3145736
  2841   300008  FF                 	db	255
  2842                           
  2843                           ;Config register CONFIG5H @ 0x300009
  2844                           ;	unspecified, using default values
  2845   300009                     	org	3145737
  2846   300009  FF                 	db	255
  2847                           
  2848                           ;Config register CONFIG6L @ 0x30000A
  2849                           ;	unspecified, using default values
  2850                           ;	Table Read Protection Block 0
  2851                           ;	EBTR0 = 0x1, unprogrammed default
  2852                           ;	Table Read Protection Block 1
  2853                           ;	EBTR1 = 0x1, unprogrammed default
  2854                           ;	Table Read Protection Block 2
  2855                           ;	EBTR2 = 0x1, unprogrammed default
  2856                           ;	Table Read Protection Block 3
  2857                           ;	EBTR3 = 0x1, unprogrammed default
  2858                           ;	Table Read Protection Block 4
  2859                           ;	EBTR4 = 0x1, unprogrammed default
  2860                           ;	Table Read Protection Block 5
  2861                           ;	EBTR5 = 0x1, unprogrammed default
  2862                           ;	Table Read Protection Block 6
  2863                           ;	EBTR6 = 0x1, unprogrammed default
  2864                           ;	Table Read Protection Block 7
  2865                           ;	EBTR7 = 0x1, unprogrammed default
  2866   30000A                     	org	3145738
  2867   30000A  FF                 	db	255
  2868                           
  2869                           ;Config register CONFIG6H @ 0x30000B
  2870                           ;	unspecified, using default values
  2871                           ;	Boot Block Table Read Protection bit
  2872                           ;	EBTRB = 0x1, unprogrammed default
  2873   30000B                     	org	3145739
  2874   30000B  FF                 	db	255
  2875                           tosu	equ	0xFFF
  2876                           tosh	equ	0xFFE
  2877                           tosl	equ	0xFFD
  2878                           stkptr	equ	0xFFC
  2879                           pclatu	equ	0xFFB
  2880                           pclath	equ	0xFFA
  2881                           pcl	equ	0xFF9
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           prodh	equ	0xFF4
  2887                           prodl	equ	0xFF3
  2888                           indf0	equ	0xFEF
  2889                           postinc0	equ	0xFEE
  2890                           postdec0	equ	0xFED
  2891                           preinc0	equ	0xFEC
  2892                           plusw0	equ	0xFEB
  2893                           fsr0h	equ	0xFEA
  2894                           fsr0l	equ	0xFE9
  2895                           wreg	equ	0xFE8
  2896                           indf1	equ	0xFE7
  2897                           postinc1	equ	0xFE6
  2898                           postdec1	equ	0xFE5
  2899                           preinc1	equ	0xFE4
  2900                           plusw1	equ	0xFE3
  2901                           fsr1h	equ	0xFE2
  2902                           fsr1l	equ	0xFE1
  2903                           bsr	equ	0xFE0
  2904                           indf2	equ	0xFDF
  2905                           postinc2	equ	0xFDE
  2906                           postdec2	equ	0xFDD
  2907                           preinc2	equ	0xFDC
  2908                           plusw2	equ	0xFDB
  2909                           fsr2h	equ	0xFDA
  2910                           fsr2l	equ	0xFD9
  2911                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        28
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     63      93
    BANK0           160      0       2
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2784$buffer	PTR unsigned char  size(2) Largest target is 0

    S2784$source	PTR const unsigned char  size(2) Largest target is 0

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), main@motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    UTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    UTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_UTurn
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _UTurn->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   14578
                                             27 COMRAM    36    36      0
                        _Timer0_init
                              _UTurn
                  _buggy_lights_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UTurn                                                4     2      2    8594
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     3      2    3341
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 3     1      2    4409
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          5     4      1    2361
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     472
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     481
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
     _start_timer
   _UTurn
     _stop
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _setMotorPWM
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4
   _stop

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       2       5        1.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3F      5D       1       98.9%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      9      0       0      57        0.0%
BITBIGSFRlllhhh      8      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B      61        0.0%
DATA                 0      0      9B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 12 19:50:26 2024

               _turn180Delay 0048              _trail_timer_low 0114                           l27 13FE  
                         l65 139E                           l68 14BE          ___wmul@multiplicand 0003  
           _trail_timer_high 0128                          l212 1212                          l310 142A  
                        l232 1112                          l313 1450                          l322 1524  
                        l219 10CA                          l227 12A0                          l235 1182  
                        l307 1428                          l316 152E                          l325 1502  
                        l424 0F74                          l274 13D0                          l419 0EC8  
                        l700 150E                          l453 14DC                          l685 1478  
                        l765 149E                          l688 1532                          l697 151A  
                        _ISR 0008                  _start_timer 1530                          wreg 0FE8  
                _squareDelay 0060                         ?_ISR 0001                         l3023 1504  
                       l1263 1314                         l3031 1370                         l1256 130C  
                       l3025 1530                         l4001 1152                         l3033 137A  
                       l2161 14C0                         l4003 116A                         l3035 138A  
                       l2171 14DA                         l2163 14CA                         l3037 1394  
                       l3029 136C                         l3301 1206                         l2165 14CC  
                       l3303 1210                         l2167 14D6                         l2169 14D8  
                       l4201 0EBA                         l4131 13AC                         l4211 0EC6  
                       l4203 0EBC                         l3341 146A                         l3333 1452  
                       l4133 13C4                         l1661 140A                         l4213 0ED6  
                       l4205 0EBE                         l3343 1470                         l3335 145A  
                       l1663 1410                         l4223 0F3C                         l4215 0F1C  
                       l4207 0EC0                         l3345 1474                         l3337 145C  
                       l4129 13A0                         l1665 1412                         l3281 1184  
                       l4225 0F48                         l4217 0F34                         l4209 0EC2  
                       l3347 1476                         l3339 1466                         l1667 1414  
                       l1659 1400                         l3291 11EC                         l3283 1194  
                       l4227 0F4C                         l1853 13D2                         l1669 1416  
                       l2717 142A                         l3293 11EE                         l3285 11BA  
                       l4229 0F68                         l4181 0E6E                         l2719 143A  
                       l2751 152A                         l3295 11F8                         l3287 11BE  
                       l4191 0EAA                         l4183 0E82                         l4175 0E1A  
                       l2841 1512                         l2753 14FA                         l3297 11FA  
                       l3289 11E2                         l4193 0EAE                         l4185 0E8A  
                       l4177 0E5E                         l2843 1516                         l2755 14FE  
                       l3299 1204                         l4195 0EB2                         l4187 0E92  
                       l4179 0E66                         l3901 12E0                         l2749 1526  
                       l2757 151C                         l2845 14A2                         l4197 0EB6  
                       l4189 0E9A                         l3903 12F6                         l3911 0F78  
                       l2759 1520                         l4199 0EB8                         l3905 12FE  
                       l3921 1034                         l3913 0F92                         l3907 1300  
                       l3923 104E                         l3915 0FE0                         l3909 1306  
                       l3925 108E                         l3917 0FF2                         l3919 0FF6  
                       l3891 12AA                         l3883 147A                         l3971 124C  
                       l3963 1214                         l3893 12BC                         l3885 1496  
                       l3981 128A                         l3973 1254                         l3965 1218  
                       l3895 12C4                         l3975 125C                         l3967 122E  
                       l3991 110A                         l3983 10CC                         l3897 12CC  
                       l3889 12A2                         l3977 1264                         l3969 1236  
                       l3993 112A                         l3985 10D4                         l3899 12DA  
                       l3979 1274                         l3995 1132                         l3987 10E0  
                       l3997 113A                         l3989 10F2                         l3999 1142  
                       STR_1 0E0F                         STR_2 0E14                         STR_5 0E01  
                       u3200 0F92                 _BAUD4CONbits 0EE9                         u3201 0F8E  
                       u3210 104E                         u3211 104A                         u3220 122E  
                       u3221 122A                         u3230 124C                         u3231 1248  
                       u3240 128A                         u3400 0F68                         u3241 1286  
                       u3401 0F64                         u3170 12BC                         u3250 12A0  
                       _T2PR 0FBC                         u3171 12B8                         u3251 129C  
                       u3180 12DA                         u3260 110A                         u3181 12D6  
                       u3261 1106                         u3190 12F6                         u3270 112A  
                       u3350 0ED6                         u3191 12F2                         u3271 1126  
                       u3351 0ED2                         u3280 116A                         u1680 143A  
                       u3360 0EE8                         u3281 1166                         u1681 1436  
                       u3361 0EE0                         u3290 1182                         u1690 1450  
                       u3291 117E                         u1691 144C                         u3380 0F0A  
                       u3381 0F02                         u3378 0EEA                         u3398 0F0C  
                       u3847 0F26                         u3857 1380                         u3867 13B6  
                       u3877 1148                         u3887 126A                         _main 0E1A  
                       fsr2h 0FDA                         indf2 0FDF                         fsr1l 0FE1  
                       fsr2l 0FD9                         btemp 005E                         _stop 1214  
                       prodh 0FF4                         prodl 0FF3                         start 003C  
               ___param_bank 0000                        ??_ISR 0001                write_timer@tH 0002  
              write_timer@tL 0001                        ?_main 0001           _timer_high_pointer 0044  
                      ?_stop 0013              __end_of___lwdiv 1316                        i2l733 0038  
                      _TMR0H 0FD4                        _TMR0L 0FD3                        _UTurn 13A0  
 __end_of_I2C_2_Master_Start 1530                  _write_timer 1510   __end_of_I2C_2_Master_Write 1504  
                      main@i 001E            _turnRight135Delay 004A                        tablat 0FF5  
            _turnLeft90Delay 0050                        ttemp5 005F                        ttemp6 0062  
                      ttemp7 0066                        status 0FD8                        wtemp8 005F  
            __initialization 1316                 __end_of_main 0F78                 __end_of_stop 12A2  
                     ??_main 001C                       ??_stop 0015                __activetblptr 0003  
                     ?_UTurn 0018                 ?_setMotorPWM 000E                       _CCPR1H 0FAA  
                     _CCPR2H 0FA6                       _CCPR3H 0F25                       _CCPR4H 0F21  
                     _RC0PPS 0E62                       _RC4REG 0EE3                       _RE2PPS 0E74  
                     _RD5PPS 0E6F                       _RC7PPS 0E69                       _RD6PPS 0E70  
                     _RE4PPS 0E76                       i2l2431 0036                       i2l2423 000A  
                     i2l2425 001A                       i2l2427 002A                       i2l2429 0032  
                     _RG6PPS 0E88     __end_of_color_click_init 13A0                       _RX4PPS 0E15  
                     _TX4REG 0EE4             _turnLeft135Delay 004C                ??_Timer0_init 0003  
               ?_reset_timer 0001                 _CCPTMRS0bits 0FAD                       ___wmul 147A  
                  ??___lwdiv 000B                       clear_0 1354                       isa$std 0001  
               __pdataCOMRAM 0040            _timer_low_pointer 0042                 __mediumconst 0000  
                     tblptrh 0FF7                       tblptrl 0FF6                       tblptru 0FF8  
                     stop@mL 0013                       stop@mR 0014            ??_initDCmotorsPWM 0003  
           __end_of_turnLeft 1184            _buggy_lights_init 13D2                   __accesstop 0060  
    __end_of__initialization 1362           ?_buggy_lights_init 0001                ___rparam_used 0001  
             __pcstackCOMRAM 0001                __end_of_UTurn 13D2                 __pidataBANK0 1534  
        ??_buggy_lights_init 0001          __end_of_Timer0_init 147A                 ?_start_timer 0001  
                    ??_UTurn 001A    __end_of_buggy_lights_init 1400                   __pbssBANK1 0100  
          _color_writetoaddr 14A0                 _T2CLKCONbits 0FBF           ?_color_writetoaddr 0003  
                    ?___wmul 0001          ??_color_writetoaddr 0004                      _SP4BRGH 0EE6  
                    _SP4BRGL 0EE5                 ?_write_timer 0001                      _SSP2ADD 0ED6  
                    _SSP2BUF 0ED5       color_writetoaddr@value 0003                      UTurn@mL 0018  
                    UTurn@mR 0019    __end_of_color_writetoaddr 14C0           _I2C_2_Master_Start 1526  
                 _initUSART4 14C0           _I2C_2_Master_Write 14F8                      __Hparam 0000  
                    __Lparam 0000                  _Timer0_init 1452             _turningRightGear 0054  
        ?_I2C_2_Master_Start 0001                      ___lwdiv 12A2          ?_I2C_2_Master_Write 0001  
               __psmallconst 0E00                      __pcinit 1316                      __ramtop 0E00  
                  ?_turnLeft 0013                      __ptext0 0E1A                      __ptext1 14C0  
                    __ptext2 1184                      __ptext3 136C                      __ptext4 14A0  
                    __ptext5 14F8                      __ptext6 151C                      __ptext7 1526  
                    __ptext8 142A                      __ptext9 1400                    _T2CONbits 0FBD  
                  _T2HLTbits 0FBE         ??_I2C_2_Master_Start 0002         ??_I2C_2_Master_Write 0002  
       end_of_initialization 1362            ?_color_click_init 0001           ??_color_click_init 0005  
                    postdec1 0FE5                      postdec2 0FDD                      postinc0 0FEE  
                    postinc2 0FDE              _initDCmotorsPWM 1184                   ??_turnLeft 0015  
                  _PORTFbits 0F8E           setMotorPWM@negDuty 0012                    _TRISAbits 0F81  
         setMotorPWM@posDuty 0011                    _TRISCbits 0F83                    _TRISDbits 0F84  
                  _TRISEbits 0F85                    _TRISFbits 0F86                    _TRISGbits 0F87  
                  _TRISHbits 0F88     color_writetoaddr@address 0004                  _CCP1CONbits 0FAB  
                _CCP2CONbits 0FA7                  _CCP3CONbits 0F26                  ?_initUSART4 0001  
                _CCP4CONbits 0F22                   main@motorL 002E                   main@motorR 0037  
             __end_of___wmul 14A0                __pidataCOMRAM 14DE          start_initialization 1316  
                __end_of_ISR 003C             _turnRight90Delay 004E      __end_of_initDCmotorsPWM 1214  
                   ??___wmul 0005                  __pdataBANK0 0060                  __pbssCOMRAM 005A  
        _wall_threshold_blue 0052            turnLeft@rightGear 0017             ___lwdiv@dividend 0007  
               ?_Timer0_init 0001                    __pintcode 0008                     ?___lwdiv 0007  
            _turningLeftGear 0055                  __smallconst 0E00            _I2C_2_Master_Idle 142A  
          _I2C_2_Master_Init 1400            _I2C_2_Master_Stop 151C           ?_I2C_2_Master_Idle 0001  
         ?_I2C_2_Master_Init 0001                ??_setMotorPWM 000F           ?_I2C_2_Master_Stop 0001  
           ___lwdiv@quotient 000C                _headbuttDelay 0046     initDCmotorsPWM@PWMperiod 0001  
                  _rampDelay 0058          ??_I2C_2_Master_Idle 0001          ??_I2C_2_Master_Init 0001  
             ___wmul@product 0005                     _LATAbits 0F79          ??_I2C_2_Master_Stop 0002  
                   _LATCbits 0F7B                     _LATDbits 0F7C                     _LATEbits 0F7D  
                   _LATFbits 0F7E                     _LATGbits 0F7F                     _LATHbits 0F80  
                   _PIE0bits 0E29                     i2u120_40 001A                     i2u120_41 0016  
                   i2u121_40 002A                     i2u121_41 0026                ??_reset_timer 0003  
                  _lost_flag 005B                     _PIR0bits 0E33                     _PIR4bits 0E37  
           ?_initDCmotorsPWM 0001                     _SSP2CON2 0EDA                     _SSP2STAT 0ED8  
                  _returning 005D    __end_of_I2C_2_Master_Idle 1452    __end_of_I2C_2_Master_Init 142A  
          ___wmul@multiplier 0001    __end_of_I2C_2_Master_Stop 1526                 setMotorPWM@m 000E  
I2C_2_Master_Write@data_byte 0002              main@RGBC_colour 0026                    copy_data0 1342  
        __end_of_setMotorPWM 10CC                 ??_initUSART4 0001                     __Hrparam 0000  
                   __Lrparam 0000                 _sample_count 0059             turnLeft@leftGear 0016  
        __end_of_reset_timer 1510                   _ANSELDbits 0EA7                   _ANSELFbits 0EB4  
              ??_start_timer 0001                   _T0CON0bits 0FD5                   _T0CON1bits 0FD6  
            ___lwdiv@divisor 0009           __end_of_initUSART4 14DE              ___lwdiv@counter 000B  
                   __ptext10 13D2                     __ptext11 13A0                     __ptext20 1510  
                   __ptext12 10CC                     __ptext13 1214                     __ptext14 0F78  
                   __ptext15 147A                     __ptext16 12A2                     __ptext17 1452  
                   __ptext18 1530                     __ptext19 1504                 _SSP2CON1bits 0ED9  
               _SSP2CON2bits 0EDA                   turnLeft@mL 0013                   turnLeft@mR 0014  
                   isa$xinst 0000                   _RC4STAbits 0EE7                     int$flags 005E  
                   _turnLeft 10CC                   _INTCONbits 0FF2                ??_write_timer 0002  
                _setMotorPWM 0F78          __end_of_start_timer 1534                     intlevel2 0000  
               _topGearRight 0056            _manoeuvre_pointer 0040               main@HSV_colour 0020  
                _reset_timer 1504             _color_click_init 136C                  _topGearLeft 0057  
                 _SSP2DATPPS 0E1D                   _SSP2CLKPPS 0E1C              _trail_manoeuvre 0100  
                _return_flag 005C              _manoeuvre_count 005A                   _TX4STAbits 0EE8  
        __end_of_write_timer 151C  
