

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 26 13:10:17 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16   000000                     
    17                           ; Generated 21/07/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F67K40 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51   000000                     
    52                           	psect	idataCOMRAM
    53   000F74                     __pidataCOMRAM:
    54                           	callstack 0
    55                           
    56                           ;initializer for _turn180Delay
    57   000F74  01FE               	dw	510
    58                           
    59                           ;initializer for _turnRight135Delay
    60   000F76  012C               	dw	300
    61                           
    62                           ;initializer for _turnLeft135Delay
    63   000F78  012C               	dw	300
    64                           
    65                           ;initializer for _turnRight90Delay
    66   000F7A  00AF               	dw	175
    67                           
    68                           ;initializer for _turnLeft90Delay
    69   000F7C  00AF               	dw	175
    70                           
    71                           ;initializer for _forward1Delay
    72   000F7E  00C8               	dw	200
    73                           
    74                           ;initializer for _turningGear
    75   000F80  2A                 	db	42
    76                           
    77                           ;initializer for _topAdjustSide
    78   000F81  01                 	db	1
    79                           
    80                           ;initializer for _topAdjustPower
    81   000F82  02                 	db	2
    82                           
    83                           ;initializer for _topGear
    84   000F83  1E                 	db	30
    85                           
    86                           ;initializer for _rampDelay
    87   000F84  08                 	db	8
    88   000000                     _TRISDbits	set	3972
    89   000000                     _RC7PPS	set	3689
    90   000000                     _RE2PPS	set	3700
    91   000000                     _CCPR4H	set	3873
    92   000000                     _CCPR3H	set	3877
    93   000000                     _CCPR2H	set	4006
    94   000000                     _CCPR1H	set	4010
    95   000000                     _CCP1CONbits	set	4011
    96   000000                     _CCPTMRS0bits	set	4013
    97   000000                     _T2PR	set	4028
    98   000000                     _T2CONbits	set	4029
    99   000000                     _CCP2CONbits	set	4007
   100   000000                     _CCP3CONbits	set	3878
   101   000000                     _LATCbits	set	3963
   102   000000                     _LATDbits	set	3964
   103   000000                     _CCP4CONbits	set	3874
   104   000000                     _LATGbits	set	3967
   105   000000                     _LATEbits	set	3965
   106   000000                     _TRISCbits	set	3971
   107   000000                     _TRISEbits	set	3973
   108   000000                     _TRISGbits	set	3975
   109   000000                     _TRISHbits	set	3976
   110   000000                     _LATHbits	set	3968
   111   000000                     _RE4PPS	set	3702
   112   000000                     _RG6PPS	set	3720
   113   000000                     _T2CLKCONbits	set	4031
   114   000000                     _T2HLTbits	set	4030
   115                           
   116                           ; #config settings
   117                           
   118                           	psect	cinit
   119   000F4E                     __pcinit:
   120                           	callstack 0
   121   000F4E                     start_initialization:
   122                           	callstack 0
   123   000F4E                     __initialization:
   124                           	callstack 0
   125                           
   126                           ; Initialize objects allocated to COMRAM (17 bytes)
   127                           ; load TBLPTR registers with __pidataCOMRAM
   128   000F4E  0E74               	movlw	low __pidataCOMRAM
   129   000F50  6EF6               	movwf	tblptrl,c
   130   000F52  0E0F               	movlw	high __pidataCOMRAM
   131   000F54  6EF7               	movwf	tblptrh,c
   132   000F56  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   133   000F58  6EF8               	movwf	tblptru,c
   134   000F5A  EE00  F017         	lfsr	0,__pdataCOMRAM
   135   000F5E  EE10 F011          	lfsr	1,17
   136   000F62                     copy_data0:
   137   000F62  0009               	tblrd		*+
   138   000F64  CFF5 FFEE          	movff	tablat,postinc0
   139   000F68  50E5               	movf	postdec1,w,c
   140   000F6A  50E1               	movf	fsr1l,w,c
   141   000F6C  E1FA               	bnz	copy_data0
   142   000F6E                     end_of_initialization:
   143                           	callstack 0
   144   000F6E                     __end_of__initialization:
   145                           	callstack 0
   146   000F6E  0100               	movlb	0
   147   000F70  EF01  F007         	goto	_main	;jump to C main() function
   148                           
   149                           	psect	dataCOMRAM
   150   000017                     __pdataCOMRAM:
   151                           	callstack 0
   152   000017                     _turn180Delay:
   153                           	callstack 0
   154   000017                     	ds	2
   155   000019                     _turnRight135Delay:
   156                           	callstack 0
   157   000019                     	ds	2
   158   00001B                     _turnLeft135Delay:
   159                           	callstack 0
   160   00001B                     	ds	2
   161   00001D                     _turnRight90Delay:
   162                           	callstack 0
   163   00001D                     	ds	2
   164   00001F                     _turnLeft90Delay:
   165                           	callstack 0
   166   00001F                     	ds	2
   167   000021                     _forward1Delay:
   168                           	callstack 0
   169   000021                     	ds	2
   170   000023                     _turningGear:
   171                           	callstack 0
   172   000023                     	ds	1
   173   000024                     _topAdjustSide:
   174                           	callstack 0
   175   000024                     	ds	1
   176   000025                     _topAdjustPower:
   177                           	callstack 0
   178   000025                     	ds	1
   179   000026                     _topGear:
   180                           	callstack 0
   181   000026                     	ds	1
   182   000027                     _rampDelay:
   183                           	callstack 0
   184   000027                     	ds	1
   185                           
   186                           	psect	cstackCOMRAM
   187   000001                     __pcstackCOMRAM:
   188                           	callstack 0
   189   000001                     initDCmotorsPWM@PWMperiod:
   190                           	callstack 0
   191                           
   192                           ; 2 bytes @ 0x0
   193   000001                     	ds	2
   194   000003                     ??_main:
   195                           
   196                           ; 1 bytes @ 0x2
   197   000003                     	ds	2
   198   000005                     main@motorL:
   199                           	callstack 0
   200                           
   201                           ; 9 bytes @ 0x4
   202   000005                     	ds	9
   203   00000E                     main@motorR:
   204                           	callstack 0
   205                           
   206                           ; 9 bytes @ 0xD
   207   00000E                     	ds	9
   208                           
   209 ;;
   210 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   211 ;;
   212 ;; *************** function _main *****************
   213 ;; Defined at:
   214 ;;		line 22 in file "main.c"
   215 ;; Parameters:    Size  Location     Type
   216 ;;		None
   217 ;; Auto vars:     Size  Location     Type
   218 ;;  motorR          9   13[COMRAM] struct DC_motor
   219 ;;  motorL          9    4[COMRAM] struct DC_motor
   220 ;;  PWMcycle        2    0        unsigned int 
   221 ;; Return value:  Size  Location     Type
   222 ;;                  1    wreg      void 
   223 ;; Registers used:
   224 ;;		wreg, status,2, status,0, cstack
   225 ;; Tracked objects:
   226 ;;		On entry : 0/0
   227 ;;		On exit  : 0/0
   228 ;;		Unchanged: 0/0
   229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   231 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   232 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   233 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   234 ;;Total ram usage:       20 bytes
   235 ;; Hardware stack levels required when called: 1
   236 ;; This function calls:
   237 ;;		_buggy_lights_init
   238 ;;		_initDCmotorsPWM
   239 ;; This function is called by:
   240 ;;		Startup code after reset
   241 ;; This function uses a non-reentrant model
   242 ;;
   243                           
   244                           	psect	text0
   245   000E02                     __ptext0:
   246                           	callstack 0
   247   000E02                     _main:
   248                           	callstack 30
   249   000E02                     
   250                           ;main.c: 24:     initDCmotorsPWM(PWMcycle);
   251   000E02  0E00               	movlw	0
   252   000E04  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   253   000E06  0E63               	movlw	99
   254   000E08  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   255   000E0A  EC5F  F007         	call	_initDCmotorsPWM	;wreg free
   256   000E0E                     
   257                           ;main.c: 26:     struct DC_motor motorL, motorR;;main.c: 28:     motorL.power = 0;
   258   000E0E  0E00               	movlw	0
   259   000E10  6E05               	movwf	main@motorL^0,c
   260   000E12                     
   261                           ;main.c: 29:     motorL.direction = 1;
   262   000E12  0E01               	movlw	1
   263   000E14  6E06               	movwf	(main@motorL+1)^0,c
   264   000E16                     
   265                           ;main.c: 30:     motorL.brakemode = 1;
   266   000E16  0E01               	movlw	1
   267   000E18  6E07               	movwf	(main@motorL+2)^0,c
   268   000E1A                     
   269                           ;main.c: 31:     motorL.PWMperiod = PWMcycle;
   270   000E1A  0E00               	movlw	0
   271   000E1C  6E09               	movwf	(main@motorL+4)^0,c
   272   000E1E  0E63               	movlw	99
   273   000E20  6E08               	movwf	(main@motorL+3)^0,c
   274   000E22                     
   275                           ;main.c: 32:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   276   000E22  0EAA               	movlw	170
   277   000E24  6E0A               	movwf	(main@motorL+5)^0,c
   278   000E26  0E0F               	movlw	15
   279   000E28  6E0B               	movwf	(main@motorL+6)^0,c
   280   000E2A                     
   281                           ;main.c: 33:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   282   000E2A  0EA6               	movlw	166
   283   000E2C  6E0C               	movwf	(main@motorL+7)^0,c
   284   000E2E  0E0F               	movlw	15
   285   000E30  6E0D               	movwf	(main@motorL+8)^0,c
   286   000E32                     
   287                           ;main.c: 35:     motorR.power = 0;
   288   000E32  0E00               	movlw	0
   289   000E34  6E0E               	movwf	main@motorR^0,c
   290   000E36                     
   291                           ;main.c: 36:     motorR.direction = 1;
   292   000E36  0E01               	movlw	1
   293   000E38  6E0F               	movwf	(main@motorR+1)^0,c
   294   000E3A                     
   295                           ;main.c: 37:     motorR.brakemode = 1;
   296   000E3A  0E01               	movlw	1
   297   000E3C  6E10               	movwf	(main@motorR+2)^0,c
   298   000E3E                     
   299                           ;main.c: 38:     motorR.PWMperiod = PWMcycle;
   300   000E3E  0E00               	movlw	0
   301   000E40  6E12               	movwf	(main@motorR+4)^0,c
   302   000E42  0E63               	movlw	99
   303   000E44  6E11               	movwf	(main@motorR+3)^0,c
   304   000E46                     
   305                           ;main.c: 39:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   306   000E46  0E25               	movlw	37
   307   000E48  6E13               	movwf	(main@motorR+5)^0,c
   308   000E4A  0E0F               	movlw	15
   309   000E4C  6E14               	movwf	(main@motorR+6)^0,c
   310   000E4E                     
   311                           ;main.c: 40:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   312   000E4E  0E21               	movlw	33
   313   000E50  6E15               	movwf	(main@motorR+7)^0,c
   314   000E52  0E0F               	movlw	15
   315   000E54  6E16               	movwf	(main@motorR+8)^0,c
   316                           
   317                           ;main.c: 42:     buggy_lights_init();
   318   000E56  ECC3  F007         	call	_buggy_lights_init	;wreg free
   319   000E5A                     l1119:
   320                           
   321                           ;main.c: 46:         LATDbits.LATD4 = !LATDbits.LATD4;
   322   000E5A  A87C               	btfss	124,4,c	;volatile
   323   000E5C  EF32  F007         	goto	u231
   324   000E60  EF36  F007         	goto	u230
   325   000E64                     u231:
   326   000E64  6A03               	clrf	??_main^0,c
   327   000E66  2A03               	incf	??_main^0,f,c
   328   000E68  EF37  F007         	goto	u248
   329   000E6C                     u230:
   330   000E6C  6A03               	clrf	??_main^0,c
   331   000E6E                     u248:
   332   000E6E  3A03               	swapf	??_main^0,f,c
   333   000E70  507C               	movf	124,w,c	;volatile
   334   000E72  1803               	xorwf	??_main^0,w,c
   335   000E74  0BEF               	andlw	-17
   336   000E76  1803               	xorwf	??_main^0,w,c
   337   000E78  6E7C               	movwf	124,c	;volatile
   338   000E7A                     
   339                           ;main.c: 47:         LATDbits.LATD3 = !LATDbits.LATD3;
   340   000E7A  A67C               	btfss	124,3,c	;volatile
   341   000E7C  EF42  F007         	goto	u251
   342   000E80  EF46  F007         	goto	u250
   343   000E84                     u251:
   344   000E84  6A03               	clrf	??_main^0,c
   345   000E86  2A03               	incf	??_main^0,f,c
   346   000E88  EF47  F007         	goto	u268
   347   000E8C                     u250:
   348   000E8C  6A03               	clrf	??_main^0,c
   349   000E8E                     u268:
   350   000E8E  4603               	rlncf	??_main^0,f,c
   351   000E90  4603               	rlncf	??_main^0,f,c
   352   000E92  4603               	rlncf	??_main^0,f,c
   353   000E94  507C               	movf	124,w,c	;volatile
   354   000E96  1803               	xorwf	??_main^0,w,c
   355   000E98  0BF7               	andlw	-9
   356   000E9A  1803               	xorwf	??_main^0,w,c
   357   000E9C  6E7C               	movwf	124,c	;volatile
   358   000E9E                     
   359                           ;main.c: 48:         _delay((unsigned long)((500)*(64000000/4000.0)));
   360   000E9E  0E29               	movlw	41
   361   000EA0  6E04               	movwf	(??_main+1)^0,c
   362   000EA2  0E96               	movlw	150
   363   000EA4  6E03               	movwf	??_main^0,c
   364   000EA6  0E7F               	movlw	127
   365   000EA8                     u277:
   366   000EA8  2EE8               	decfsz	wreg,f,c
   367   000EAA  D7FE               	bra	u277
   368   000EAC  2E03               	decfsz	??_main^0,f,c
   369   000EAE  D7FC               	bra	u277
   370   000EB0  2E04               	decfsz	(??_main+1)^0,f,c
   371   000EB2  D7FA               	bra	u277
   372   000EB4  0000               	nop	
   373   000EB6  EF2D  F007         	goto	l1119
   374   000EBA  EF00  F000         	goto	start
   375   000EBE                     __end_of_main:
   376                           	callstack 0
   377                           
   378 ;; *************** function _initDCmotorsPWM *****************
   379 ;; Defined at:
   380 ;;		line 5 in file "dc_motor.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   383 ;; Auto vars:     Size  Location     Type
   384 ;;		None
   385 ;; Return value:  Size  Location     Type
   386 ;;                  1    wreg      void 
   387 ;; Registers used:
   388 ;;		wreg, status,2
   389 ;; Tracked objects:
   390 ;;		On entry : 0/0
   391 ;;		On exit  : 0/0
   392 ;;		Unchanged: 0/0
   393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   394 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   397 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   398 ;;Total ram usage:        2 bytes
   399 ;; Hardware stack levels used: 1
   400 ;; This function calls:
   401 ;;		Nothing
   402 ;; This function is called by:
   403 ;;		_main
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text1
   408   000EBE                     __ptext1:
   409                           	callstack 0
   410   000EBE                     _initDCmotorsPWM:
   411                           	callstack 30
   412   000EBE                     
   413                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   414   000EBE  9485               	bcf	133,2,c	;volatile
   415                           
   416                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   417   000EC0  9885               	bcf	133,4,c	;volatile
   418                           
   419                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   420   000EC2  9E83               	bcf	131,7,c	;volatile
   421                           
   422                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   423   000EC4  9C87               	bcf	135,6,c	;volatile
   424                           
   425                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   426   000EC6  947D               	bcf	125,2,c	;volatile
   427                           
   428                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   429   000EC8  987D               	bcf	125,4,c	;volatile
   430                           
   431                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   432   000ECA  9E7B               	bcf	123,7,c	;volatile
   433                           
   434                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   435   000ECC  9C7F               	bcf	127,6,c	;volatile
   436   000ECE                     
   437                           ;dc_motor.c: 18:     RE2PPS=0x05;
   438   000ECE  0E05               	movlw	5
   439   000ED0  010E               	movlb	14	; () banked
   440   000ED2  6F74               	movwf	116,b	;volatile
   441                           
   442                           ;dc_motor.c: 19:     RE4PPS=0x06;
   443   000ED4  0E06               	movlw	6
   444   000ED6  6F76               	movwf	118,b	;volatile
   445                           
   446                           ;dc_motor.c: 20:     RC7PPS=0x07;
   447   000ED8  0E07               	movlw	7
   448   000EDA  6F69               	movwf	105,b	;volatile
   449                           
   450                           ;dc_motor.c: 21:     RG6PPS=0x08;
   451   000EDC  0E08               	movlw	8
   452   000EDE  6F88               	movwf	136,b	;volatile
   453                           
   454                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   455   000EE0  50BD               	movf	189,w,c	;volatile
   456   000EE2  0B8F               	andlw	-113
   457   000EE4  0940               	iorlw	64
   458   000EE6  6EBD               	movwf	189,c	;volatile
   459                           
   460                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   461   000EE8  0EE0               	movlw	-32
   462   000EEA  16BE               	andwf	190,f,c	;volatile
   463                           
   464                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   465   000EEC  50BF               	movf	191,w,c	;volatile
   466   000EEE  0BF0               	andlw	-16
   467   000EF0  0901               	iorlw	1
   468   000EF2  6EBF               	movwf	191,c	;volatile
   469   000EF4                     
   470                           ; BSR set to: 14
   471                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   472   000EF4  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   473   000EF8                     
   474                           ; BSR set to: 14
   475                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   476   000EF8  8EBD               	bsf	189,7,c	;volatile
   477                           
   478                           ;dc_motor.c: 35:     CCPR1H=0;
   479   000EFA  0E00               	movlw	0
   480   000EFC  6EAA               	movwf	170,c	;volatile
   481                           
   482                           ;dc_motor.c: 36:     CCPR2H=0;
   483   000EFE  0E00               	movlw	0
   484   000F00  6EA6               	movwf	166,c	;volatile
   485                           
   486                           ;dc_motor.c: 37:     CCPR3H=0;
   487   000F02  0E00               	movlw	0
   488   000F04  010F               	movlb	15	; () banked
   489   000F06  6F25               	movwf	37,b	;volatile
   490                           
   491                           ;dc_motor.c: 38:     CCPR4H=0;
   492   000F08  0E00               	movlw	0
   493   000F0A  6F21               	movwf	33,b	;volatile
   494                           
   495                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   496   000F0C  0EFC               	movlw	-4
   497   000F0E  16AD               	andwf	173,f,c	;volatile
   498                           
   499                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   500   000F10  0EF3               	movlw	-13
   501   000F12  16AD               	andwf	173,f,c	;volatile
   502                           
   503                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   504   000F14  0ECF               	movlw	-49
   505   000F16  16AD               	andwf	173,f,c	;volatile
   506                           
   507                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   508   000F18  0E3F               	movlw	-193
   509   000F1A  16AD               	andwf	173,f,c	;volatile
   510   000F1C                     
   511                           ; BSR set to: 15
   512                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   513   000F1C  88AB               	bsf	171,4,c	;volatile
   514                           
   515                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   516   000F1E  50AB               	movf	171,w,c	;volatile
   517   000F20  0BF0               	andlw	-16
   518   000F22  090C               	iorlw	12
   519   000F24  6EAB               	movwf	171,c	;volatile
   520   000F26                     
   521                           ; BSR set to: 15
   522                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   523   000F26  8EAB               	bsf	171,7,c	;volatile
   524   000F28                     
   525                           ; BSR set to: 15
   526                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   527   000F28  88A7               	bsf	167,4,c	;volatile
   528                           
   529                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   530   000F2A  50A7               	movf	167,w,c	;volatile
   531   000F2C  0BF0               	andlw	-16
   532   000F2E  090C               	iorlw	12
   533   000F30  6EA7               	movwf	167,c	;volatile
   534   000F32                     
   535                           ; BSR set to: 15
   536                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   537   000F32  8EA7               	bsf	167,7,c	;volatile
   538   000F34                     
   539                           ; BSR set to: 15
   540                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   541   000F34  8926               	bsf	38,4,b	;volatile
   542                           
   543                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   544   000F36  5126               	movf	38,w,b	;volatile
   545   000F38  0BF0               	andlw	-16
   546   000F3A  090C               	iorlw	12
   547   000F3C  6F26               	movwf	38,b	;volatile
   548   000F3E                     
   549                           ; BSR set to: 15
   550                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   551   000F3E  8F26               	bsf	38,7,b	;volatile
   552   000F40                     
   553                           ; BSR set to: 15
   554                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   555   000F40  8922               	bsf	34,4,b	;volatile
   556                           
   557                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   558   000F42  5122               	movf	34,w,b	;volatile
   559   000F44  0BF0               	andlw	-16
   560   000F46  090C               	iorlw	12
   561   000F48  6F22               	movwf	34,b	;volatile
   562   000F4A                     
   563                           ; BSR set to: 15
   564                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   565   000F4A  8F22               	bsf	34,7,b	;volatile
   566   000F4C                     
   567                           ; BSR set to: 15
   568   000F4C  0012               	return		;funcret
   569   000F4E                     __end_of_initDCmotorsPWM:
   570                           	callstack 0
   571                           
   572 ;; *************** function _buggy_lights_init *****************
   573 ;; Defined at:
   574 ;;		line 4 in file "buggy_lights.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		None
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   592 ;;Total ram usage:        0 bytes
   593 ;; Hardware stack levels used: 1
   594 ;; This function calls:
   595 ;;		Nothing
   596 ;; This function is called by:
   597 ;;		_main
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           	psect	text2
   602   000F86                     __ptext2:
   603                           	callstack 0
   604   000F86                     _buggy_lights_init:
   605                           	callstack 30
   606   000F86                     
   607                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
   608   000F86  9884               	bcf	132,4,c	;volatile
   609                           
   610                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
   611   000F88  9288               	bcf	136,1,c	;volatile
   612                           
   613                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
   614   000F8A  9684               	bcf	132,3,c	;volatile
   615                           
   616                           ;buggy_lights.c: 12:     LATDbits.LATD4 = 1;
   617   000F8C  887C               	bsf	124,4,c	;volatile
   618                           
   619                           ;buggy_lights.c: 13:     LATHbits.LATH1 = 1;
   620   000F8E  8280               	bsf	128,1,c	;volatile
   621                           
   622                           ;buggy_lights.c: 14:     LATDbits.LATD3 = 1;
   623   000F90  867C               	bsf	124,3,c	;volatile
   624   000F92  0012               	return		;funcret
   625   000F94                     __end_of_buggy_lights_init:
   626                           	callstack 0
   627                           
   628                           	psect	smallconst
   629   000E00                     __psmallconst:
   630                           	callstack 0
   631   000E00  00                 	db	0
   632   000E01  00                 	db	0	; dummy byte at the end
   633   000000                     
   634                           	psect	rparam
   635   000000                     
   636                           	psect	config
   637                           
   638                           ;Config register CONFIG1L @ 0x300000
   639                           ;	External Oscillator mode Selection bits
   640                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   641                           ;	Power-up default value for COSC bits
   642                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   643   300000                     	org	3145728
   644   300000  AA                 	db	170
   645                           
   646                           ;Config register CONFIG1H @ 0x300001
   647                           ;	unspecified, using default values
   648                           ;	Clock Out Enable bit
   649                           ;	CLKOUTEN = 0x1, unprogrammed default
   650                           ;	Clock Switch Enable bit
   651                           ;	CSWEN = 0x1, unprogrammed default
   652                           ;	Fail-Safe Clock Monitor Enable bit
   653                           ;	FCMEN = 0x1, unprogrammed default
   654   300001                     	org	3145729
   655   300001  FF                 	db	255
   656                           
   657                           ;Config register CONFIG3L @ 0x300004
   658                           ;	WDT Period Select bits
   659                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   660                           ;	WDT operating mode
   661                           ;	WDTE = OFF, WDT Disabled
   662   300004                     	org	3145732
   663   300004  9F                 	db	159
   664                           
   665                           ;Config register CONFIG3H @ 0x300005
   666                           ;	unspecified, using default values
   667                           ;	WDT Window Select bits
   668                           ;	WDTCWS = 0x7, unprogrammed default
   669                           ;	WDT input clock selector
   670                           ;	WDTCCS = 0x7, unprogrammed default
   671   300005                     	org	3145733
   672   300005  FF                 	db	255
   673                           tosu	equ	0xFFF
   674                           tosh	equ	0xFFE
   675                           tosl	equ	0xFFD
   676                           stkptr	equ	0xFFC
   677                           pclatu	equ	0xFFB
   678                           pclath	equ	0xFFA
   679                           pcl	equ	0xFF9
   680                           tblptru	equ	0xFF8
   681                           tblptrh	equ	0xFF7
   682                           tblptrl	equ	0xFF6
   683                           tablat	equ	0xFF5
   684                           prodh	equ	0xFF4
   685                           prodl	equ	0xFF3
   686                           indf0	equ	0xFEF
   687                           postinc0	equ	0xFEE
   688                           postdec0	equ	0xFED
   689                           preinc0	equ	0xFEC
   690                           plusw0	equ	0xFEB
   691                           fsr0h	equ	0xFEA
   692                           fsr0l	equ	0xFE9
   693                           wreg	equ	0xFE8
   694                           indf1	equ	0xFE7
   695                           postinc1	equ	0xFE6
   696                           postdec1	equ	0xFE5
   697                           preinc1	equ	0xFE4
   698                           plusw1	equ	0xFE3
   699                           fsr1h	equ	0xFE2
   700                           fsr1l	equ	0xFE1
   701                           bsr	equ	0xFE0
   702                           indf2	equ	0xFDF
   703                           postinc2	equ	0xFDE
   704                           postdec2	equ	0xFDD
   705                           preinc2	equ	0xFDC
   706                           plusw2	equ	0xFDB
   707                           fsr2h	equ	0xFDA
   708                           fsr2l	equ	0xFD9
   709                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      39
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0     407
                                              2 COMRAM    20    20      0
                  _buggy_lights_init
                    _initDCmotorsPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _initDCmotorsPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      48        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRllllhh     98      0       0      42        0.0%
BITBIGSFRllllll     7A      0       0      46        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      27       1       41.1%
BITBIGSFRllhl       54      0       0      40        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRllhhhh     1D      0       0      36        0.0%
BITBIGSFRllllhh     11      0       0      43        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRlllllh      A      0       0      45        0.0%
BITBIGSFRllhhll      2      0       0      38        0.0%
BITBIGSFRlllh        2      0       0      41        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRllllhl      1      0       0      44        0.0%
BITBIGSFRllhhhl      1      0       0      37        0.0%
BITBIGSFRllhhll      1      0       0      39        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      27      47        0.0%
DATA                 0      0      27       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 26 13:10:17 2024

             _turn180Delay 0017                        l119 0F4C                        l189 0F92  
                      l905 0F86                        u230 0E6C                        u231 0E64  
                      u250 0E8C                        u251 0E84                        u248 0E6E  
                      u268 0E8E                        u277 0EA8                        wreg 0FE8  
                     l1101 0E1A                       l1111 0E3A                       l1103 0E22  
                     l1121 0E7A                       l1113 0E3E                       l1105 0E2A  
                     l1123 0E9E                       l1115 0E46                       l1107 0E32  
                     l1117 0E4E                       l1109 0E36                       l1071 0EF4  
                     l1119 0E5A                       l1081 0F32                       l1073 0EF8  
                     l1083 0F34                       l1075 0F1C                       l1067 0EBE  
                     l1091 0E02                       l1085 0F3E                       l1077 0F26  
                     l1069 0ECE                       l1093 0E02                       l1087 0F40  
                     l1079 0F28                       l1095 0E0E                       l1089 0F4A  
                     l1097 0E12                       l1099 0E16                       _T2PR 0FBC  
                     _main 0E02                       fsr1l 0FE1                       start 0000  
             ___param_bank 0000                      ?_main 0001                _turningGear 0023  
        _turnRight135Delay 0019                      tablat 0FF5            _turnLeft90Delay 001F  
          __initialization 0F4E               __end_of_main 0EBE                     ??_main 0003  
            __activetblptr 0000                     _CCPR1H 0FAA                     _CCPR2H 0FA6  
                   _CCPR3H 0F25                     _CCPR4H 0F21                     _RE2PPS 0E74  
                   _RC7PPS 0E69                     _RE4PPS 0E76                     _RG6PPS 0E88  
         _turnLeft135Delay 001B               _CCPTMRS0bits 0FAD                     isa$std 0001  
             __pdataCOMRAM 0017               __mediumconst 0000                     tblptrh 0FF7  
                   tblptrl 0FF6                     tblptru 0FF8          ??_initDCmotorsPWM 0003  
        _buggy_lights_init 0F86                 __accesstop 0060    __end_of__initialization 0F6E  
       ?_buggy_lights_init 0001              ___rparam_used 0001             __pcstackCOMRAM 0001  
      ??_buggy_lights_init 0001              _forward1Delay 0021  __end_of_buggy_lights_init 0F94  
             _T2CLKCONbits 0FBF                    __Hparam 0000                    __Lparam 0000  
             __psmallconst 0E00                    __pcinit 0F4E                    __ramtop 0E00  
                  __ptext0 0E02                    __ptext1 0EBE                    __ptext2 0F86  
                _T2CONbits 0FBD                  _T2HLTbits 0FBE                    _topGear 0026  
     end_of_initialization 0F6E                    postdec1 0FE5                    postinc0 0FEE  
          _initDCmotorsPWM 0EBE                  _TRISCbits 0F83                  _TRISDbits 0F84  
                _TRISEbits 0F85                  _TRISGbits 0F87                  _TRISHbits 0F88  
              _CCP1CONbits 0FAB                _CCP2CONbits 0FA7                _CCP3CONbits 0F26  
              _CCP4CONbits 0F22                 main@motorL 0005                 main@motorR 000E  
            __pidataCOMRAM 0F74        start_initialization 0F4E           _turnRight90Delay 001D  
  __end_of_initDCmotorsPWM 0F4E             _topAdjustPower 0025                __smallconst 0E00  
 initDCmotorsPWM@PWMperiod 0001                  _rampDelay 0027                   _LATCbits 0F7B  
                 _LATDbits 0F7C                   _LATEbits 0F7D                   _LATGbits 0F7F  
                 _LATHbits 0F80           ?_initDCmotorsPWM 0001                  copy_data0 0F62  
                 __Hrparam 0000                   __Lrparam 0000              _topAdjustSide 0024  
                 isa$xinst 0000  
