

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 14:53:45 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42   000000                     
    43                           ; Generated 21/07/2023 GMT
    44                           ; 
    45                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F67K40 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77   000000                     
    78                           	psect	idataCOMRAM
    79   0014FA                     __pidataCOMRAM:
    80                           	callstack 0
    81                           
    82                           ;initializer for _manoeuvre_pointer
    83   0014FA  00                 	db	low _trail_manoeuvre
    84   0014FB  01                 	db	high _trail_manoeuvre
    85                           
    86                           ;initializer for _timer_low_pointer
    87   0014FC  14                 	db	low _trail_timer_low
    88   0014FD  01                 	db	high _trail_timer_low
    89                           
    90                           ;initializer for _timer_high_pointer
    91   0014FE  28                 	db	low _trail_timer_high
    92   0014FF  01                 	db	high _trail_timer_high
    93                           
    94                           ;initializer for _headbuttDelay
    95   001500  0334               	dw	820
    96                           
    97                           ;initializer for _turn180Delay
    98   001502  0190               	dw	400
    99                           
   100                           ;initializer for _turnRight135Delay
   101   001504  0106               	dw	262
   102                           
   103                           ;initializer for _turnLeft135Delay
   104   001506  00FA               	dw	250
   105                           
   106                           ;initializer for _turnRight90Delay
   107   001508  006C               	dw	108
   108                           
   109                           ;initializer for _turnLeft90Delay
   110   00150A  0054               	dw	84
   111                           
   112                           ;initializer for _wall_threshold_blue
   113   00150C  001E               	dw	30
   114                           
   115                           ;initializer for _turningRightGear
   116   00150E  28                 	db	40
   117                           
   118                           ;initializer for _turningLeftGear
   119   00150F  28                 	db	40
   120                           
   121                           ;initializer for _bottomGearRight
   122   001510  15                 	db	21
   123                           
   124                           ;initializer for _bottomGearLeft
   125   001511  14                 	db	20
   126                           
   127                           ;initializer for _topGearRight
   128   001512  14                 	db	20
   129                           
   130                           ;initializer for _topGearLeft
   131   001513  14                 	db	20
   132                           
   133                           ;initializer for _rampDelay
   134   001514  08                 	db	8
   135                           
   136                           ;initializer for _sample_count
   137   001515  14                 	db	20
   138                           
   139                           	psect	idataBANK0
   140   001552                     __pidataBANK0:
   141                           	callstack 0
   142                           
   143                           ;initializer for _squareDelay
   144   001552  0988               	dw	2440
   145   000000                     _TMR0H	set	4052
   146   000000                     _TX4REG	set	3812
   147   000000                     _RC4STAbits	set	3815
   148   000000                     _SP4BRGH	set	3814
   149   000000                     _LATEbits	set	3965
   150   000000                     _TRISEbits	set	3973
   151   000000                     _LATGbits	set	3967
   152   000000                     _TRISGbits	set	3975
   153   000000                     _LATFbits	set	3966
   154   000000                     _LATHbits	set	3968
   155   000000                     _TRISFbits	set	3974
   156   000000                     _TRISHbits	set	3976
   157   000000                     _SSP2CON2bits	set	3802
   158   000000                     _RX4PPS	set	3605
   159   000000                     _SSP2CLKPPS	set	3612
   160   000000                     _SSP2DATPPS	set	3613
   161   000000                     _RC7PPS	set	3689
   162   000000                     _RE2PPS	set	3700
   163   000000                     _LATAbits	set	3961
   164   000000                     _LATDbits	set	3964
   165   000000                     _TRISDbits	set	3972
   166   000000                     _PORTFbits	set	3982
   167   000000                     _T2PR	set	4028
   168   000000                     _T2CONbits	set	4029
   169   000000                     _CCPR2H	set	4006
   170   000000                     _CCPR1H	set	4010
   171   000000                     _TRISCbits	set	3971
   172   000000                     _TRISAbits	set	3969
   173   000000                     _LATCbits	set	3963
   174   000000                     _RE4PPS	set	3702
   175   000000                     _RG6PPS	set	3720
   176   000000                     _RD5PPS	set	3695
   177   000000                     _ANSELDbits	set	3751
   178   000000                     _SSP2ADD	set	3798
   179   000000                     _SSP2CON1bits	set	3801
   180   000000                     _CCPR4H	set	3873
   181   000000                     _CCPR3H	set	3877
   182   000000                     _TMR0L	set	4051
   183   000000                     _T0CON0bits	set	4053
   184   000000                     _T0CON1bits	set	4054
   185   000000                     _T2CLKCONbits	set	4031
   186   000000                     _T2HLTbits	set	4030
   187   000000                     _CCP1CONbits	set	4011
   188   000000                     _CCPTMRS0bits	set	4013
   189   000000                     _CCP2CONbits	set	4007
   190   000000                     _CCP3CONbits	set	3878
   191   000000                     _CCP4CONbits	set	3874
   192   000000                     _RC4REG	set	3811
   193   000000                     _SP4BRGL	set	3813
   194   000000                     _TX4STAbits	set	3816
   195   000000                     _BAUD4CONbits	set	3817
   196   000000                     _SSP2CON2	set	3802
   197   000000                     _SSP2STAT	set	3800
   198   000000                     _ANSELFbits	set	3764
   199   000000                     _SSP2BUF	set	3797
   200   000000                     _PIE0bits	set	3625
   201   000000                     _PIR4bits	set	3639
   202   000000                     _RC0PPS	set	3682
   203   000000                     _RD6PPS	set	3696
   204   000000                     _INTCONbits	set	4082
   205   000000                     _PIR0bits	set	3635
   206                           
   207                           	psect	smallconst
   208   000E00                     __psmallconst:
   209                           	callstack 0
   210   000E00  00                 	db	0
   211   000E01                     STR_5:
   212                           
   213                           ; BSR set to: 14
   214   000E01  25                 	db	37
   215   000E02  75                 	db	117	;'u'
   216   000E03  20                 	db	32
   217   000E04  25                 	db	37
   218   000E05  75                 	db	117	;'u'
   219   000E06  20                 	db	32
   220   000E07  25                 	db	37
   221   000E08  75                 	db	117	;'u'
   222   000E09  20                 	db	32
   223   000E0A  25                 	db	37
   224   000E0B  75                 	db	117	;'u'
   225   000E0C  20                 	db	32
   226   000E0D  0D                 	db	13
   227   000E0E  00                 	db	0
   228   000E0F                     STR_1:
   229                           
   230                           ; BSR set to: 14
   231   000E0F  25                 	db	37
   232   000E10  64                 	db	100	;'d'
   233   000E11  20                 	db	32
   234   000E12  0D                 	db	13
   235   000E13  00                 	db	0
   236   000E14                     STR_2:
   237                           
   238                           ; BSR set to: 14
   239   000E14  25                 	db	37
   240   000E15  64                 	db	100	;'d'
   241   000E16  20                 	db	32
   242   000E17  00                 	db	0
   243   000E18  00                 	db	0	; dummy byte at the end
   244   000000                     
   245                           ; #config settings
   246                           
   247                           	psect	cinit
   248   001302                     __pcinit:
   249                           	callstack 0
   250   001302                     start_initialization:
   251                           	callstack 0
   252   001302                     __initialization:
   253                           	callstack 0
   254                           
   255                           ; Initialize objects allocated to BANK0 (2 bytes)
   256                           ; load TBLPTR registers with __pidataBANK0
   257   001302  0E52               	movlw	low __pidataBANK0
   258   001304  6EF6               	movwf	tblptrl,c
   259   001306  0E15               	movlw	high __pidataBANK0
   260   001308  6EF7               	movwf	tblptrh,c
   261   00130A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   262   00130C  6EF8               	movwf	tblptru,c
   263   00130E  0009               	tblrd		*+	;fetch initializer
   264   001310  CFF5 F060          	movff	tablat,__pdataBANK0
   265   001314  0009               	tblrd		*+	;fetch initializer
   266   001316  CFF5 F061          	movff	tablat,__pdataBANK0+1
   267                           
   268                           ; Initialize objects allocated to COMRAM (28 bytes)
   269                           ; load TBLPTR registers with __pidataCOMRAM
   270   00131A  0EFA               	movlw	low __pidataCOMRAM
   271   00131C  6EF6               	movwf	tblptrl,c
   272   00131E  0E14               	movlw	high __pidataCOMRAM
   273   001320  6EF7               	movwf	tblptrh,c
   274   001322  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   275   001324  6EF8               	movwf	tblptru,c
   276   001326  EE00  F03F         	lfsr	0,__pdataCOMRAM
   277   00132A  EE10 F01C          	lfsr	1,28
   278   00132E                     copy_data0:
   279   00132E  0009               	tblrd		*+
   280   001330  CFF5 FFEE          	movff	tablat,postinc0
   281   001334  50E5               	movf	postdec1,w,c
   282   001336  50E1               	movf	fsr1l,w,c
   283   001338  E1FA               	bnz	copy_data0
   284                           
   285                           ; Clear objects allocated to BANK1 (60 bytes)
   286   00133A  EE01  F000         	lfsr	0,__pbssBANK1
   287   00133E  0E3C               	movlw	60
   288   001340                     clear_0:
   289   001340  6AEE               	clrf	postinc0,c
   290   001342  06E8               	decf	wreg,f,c
   291   001344  E1FD               	bnz	clear_0
   292                           
   293                           ; Clear objects allocated to COMRAM (4 bytes)
   294   001346  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   295   001348  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   296   00134A  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   297   00134C  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   298   00134E                     end_of_initialization:
   299                           	callstack 0
   300   00134E                     __end_of__initialization:
   301                           	callstack 0
   302   00134E  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   303   001350  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   304   001352  0100               	movlb	0
   305   001354  EFB7  F007         	goto	_main	;jump to C main() function
   306                           
   307                           	psect	bssCOMRAM
   308   00005B                     __pbssCOMRAM:
   309                           	callstack 0
   310   00005B                     _manoeuvre_count:
   311                           	callstack 0
   312   00005B                     	ds	1
   313   00005C                     _lost_flag:
   314                           	callstack 0
   315   00005C                     	ds	1
   316   00005D                     _return_flag:
   317                           	callstack 0
   318   00005D                     	ds	1
   319   00005E                     _returning:
   320                           	callstack 0
   321   00005E                     	ds	1
   322                           
   323                           	psect	dataCOMRAM
   324   00003F                     __pdataCOMRAM:
   325                           	callstack 0
   326   00003F                     _manoeuvre_pointer:
   327                           	callstack 0
   328   00003F                     	ds	2
   329   000041                     _timer_low_pointer:
   330                           	callstack 0
   331   000041                     	ds	2
   332   000043                     _timer_high_pointer:
   333                           	callstack 0
   334   000043                     	ds	2
   335   000045                     _headbuttDelay:
   336                           	callstack 0
   337   000045                     	ds	2
   338   000047                     _turn180Delay:
   339                           	callstack 0
   340   000047                     	ds	2
   341   000049                     _turnRight135Delay:
   342                           	callstack 0
   343   000049                     	ds	2
   344   00004B                     _turnLeft135Delay:
   345                           	callstack 0
   346   00004B                     	ds	2
   347   00004D                     _turnRight90Delay:
   348                           	callstack 0
   349   00004D                     	ds	2
   350   00004F                     _turnLeft90Delay:
   351                           	callstack 0
   352   00004F                     	ds	2
   353   000051                     _wall_threshold_blue:
   354                           	callstack 0
   355   000051                     	ds	2
   356   000053                     _turningRightGear:
   357                           	callstack 0
   358   000053                     	ds	1
   359   000054                     _turningLeftGear:
   360                           	callstack 0
   361   000054                     	ds	1
   362   000055                     _bottomGearRight:
   363                           	callstack 0
   364   000055                     	ds	1
   365   000056                     _bottomGearLeft:
   366                           	callstack 0
   367   000056                     	ds	1
   368   000057                     _topGearRight:
   369                           	callstack 0
   370   000057                     	ds	1
   371   000058                     _topGearLeft:
   372                           	callstack 0
   373   000058                     	ds	1
   374   000059                     _rampDelay:
   375                           	callstack 0
   376   000059                     	ds	1
   377   00005A                     _sample_count:
   378                           	callstack 0
   379   00005A                     	ds	1
   380                           
   381                           	psect	dataBANK0
   382   000060                     __pdataBANK0:
   383                           	callstack 0
   384   000060                     _squareDelay:
   385                           	callstack 0
   386   000060                     	ds	2
   387                           
   388                           	psect	bssBANK1
   389   000100                     __pbssBANK1:
   390                           	callstack 0
   391   000100                     _trail_manoeuvre:
   392                           	callstack 0
   393   000100                     	ds	20
   394   000114                     _trail_timer_low:
   395                           	callstack 0
   396   000114                     	ds	20
   397   000128                     _trail_timer_high:
   398                           	callstack 0
   399   000128                     	ds	20
   400                           
   401                           	psect	cstackCOMRAM
   402   000001                     __pcstackCOMRAM:
   403                           	callstack 0
   404   000001                     ??_I2C_2_Master_Idle:
   405   000001                     ?___wmul:
   406                           	callstack 0
   407   000001                     write_timer@tL:
   408                           	callstack 0
   409   000001                     initDCmotorsPWM@PWMperiod:
   410                           	callstack 0
   411   000001                     ___wmul@multiplier:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x0
   415   000001                     	ds	1
   416   000002                     I2C_2_Master_Write@data_byte:
   417                           	callstack 0
   418   000002                     write_timer@tH:
   419                           	callstack 0
   420                           
   421                           ; 1 bytes @ 0x1
   422   000002                     	ds	1
   423   000003                     color_writetoaddr@value:
   424                           	callstack 0
   425   000003                     ___wmul@multiplicand:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x2
   429   000003                     	ds	1
   430   000004                     color_writetoaddr@address:
   431                           	callstack 0
   432                           
   433                           ; 1 bytes @ 0x3
   434   000004                     	ds	1
   435   000005                     ??_color_click_init:
   436   000005                     ___wmul@product:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x4
   440   000005                     	ds	2
   441   000007                     ?___lwdiv:
   442                           	callstack 0
   443   000007                     ___lwdiv@dividend:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x6
   447   000007                     	ds	2
   448   000009                     ___lwdiv@divisor:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x8
   452   000009                     	ds	2
   453   00000B                     ___lwdiv@counter:
   454                           	callstack 0
   455                           
   456                           ; 1 bytes @ 0xA
   457   00000B                     	ds	1
   458   00000C                     ___lwdiv@quotient:
   459                           	callstack 0
   460                           
   461                           ; 2 bytes @ 0xB
   462   00000C                     	ds	2
   463   00000E                     setMotorPWM@m:
   464                           	callstack 0
   465                           
   466                           ; 1 bytes @ 0xD
   467   00000E                     	ds	1
   468   00000F                     ??_setMotorPWM:
   469                           
   470                           ; 1 bytes @ 0xE
   471   00000F                     	ds	2
   472   000011                     setMotorPWM@posDuty:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0x10
   476   000011                     	ds	1
   477   000012                     setMotorPWM@negDuty:
   478                           	callstack 0
   479                           
   480                           ; 1 bytes @ 0x11
   481   000012                     	ds	1
   482   000013                     stop@mL:
   483                           	callstack 0
   484   000013                     fullSpeedReverse@mL:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0x12
   488   000013                     	ds	1
   489   000014                     stop@mR:
   490                           	callstack 0
   491   000014                     fullSpeedReverse@mR:
   492                           	callstack 0
   493                           
   494                           ; 1 bytes @ 0x13
   495   000014                     	ds	1
   496   000015                     ??_stop:
   497   000015                     ??_fullSpeedReverse:
   498                           
   499                           ; 1 bytes @ 0x14
   500   000015                     	ds	1
   501   000016                     fullSpeedReverse@leftGear:
   502                           	callstack 0
   503                           
   504                           ; 1 bytes @ 0x15
   505   000016                     	ds	1
   506   000017                     fullSpeedReverse@rightGear:
   507                           	callstack 0
   508                           
   509                           ; 1 bytes @ 0x16
   510   000017                     	ds	1
   511   000018                     headbuttReverse@mL:
   512                           	callstack 0
   513   000018                     squareReverse@mL:
   514                           	callstack 0
   515                           
   516                           ; 1 bytes @ 0x17
   517   000018                     	ds	1
   518   000019                     headbuttReverse@mR:
   519                           	callstack 0
   520   000019                     squareReverse@mR:
   521                           	callstack 0
   522                           
   523                           ; 1 bytes @ 0x18
   524   000019                     	ds	1
   525   00001A                     ??_headbuttReverse:
   526   00001A                     ??_squareReverse:
   527                           
   528                           ; 1 bytes @ 0x19
   529   00001A                     	ds	2
   530   00001C                     ??_main:
   531                           
   532                           ; 1 bytes @ 0x1B
   533   00001C                     	ds	2
   534   00001E                     main@i:
   535                           	callstack 0
   536                           
   537                           ; 1 bytes @ 0x1D
   538   00001E                     	ds	1
   539   00001F                     main@HSV_colour:
   540                           	callstack 0
   541                           
   542                           ; 6 bytes @ 0x1E
   543   00001F                     	ds	6
   544   000025                     main@RGBC_colour:
   545                           	callstack 0
   546                           
   547                           ; 8 bytes @ 0x24
   548   000025                     	ds	8
   549   00002D                     main@motorL:
   550                           	callstack 0
   551                           
   552                           ; 9 bytes @ 0x2C
   553   00002D                     	ds	9
   554   000036                     main@motorR:
   555                           	callstack 0
   556                           
   557                           ; 9 bytes @ 0x35
   558   000036                     	ds	9
   559                           
   560 ;;
   561 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   562 ;;
   563 ;; *************** function _main *****************
   564 ;; Defined at:
   565 ;;		line 29 in file "main.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;		None
   568 ;; Auto vars:     Size  Location     Type
   569 ;;  i               1   29[COMRAM] unsigned char 
   570 ;;  motorR          9   53[COMRAM] struct DC_motor
   571 ;;  motorL          9   44[COMRAM] struct DC_motor
   572 ;;  RGBC_colour     8   36[COMRAM] struct RGBC_val
   573 ;;  HSV_colour      6   30[COMRAM] struct HSV_val
   574 ;;  PWMcycle        2    0        unsigned int 
   575 ;; Return value:  Size  Location     Type
   576 ;;                  1    wreg      void 
   577 ;; Registers used:
   578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   579 ;; Tracked objects:
   580 ;;		On entry : 0/0
   581 ;;		On exit  : 0/0
   582 ;;		Unchanged: 0/0
   583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   585 ;;      Locals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   586 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   587 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   588 ;;Total ram usage:       35 bytes
   589 ;; Hardware stack levels required when called: 5
   590 ;; This function calls:
   591 ;;		_Timer0_init
   592 ;;		_buggy_lights_init
   593 ;;		_color_click_init
   594 ;;		_headbuttReverse
   595 ;;		_initDCmotorsPWM
   596 ;;		_initUSART4
   597 ;;		_squareReverse
   598 ;; This function is called by:
   599 ;;		Startup code after reset
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text0
   604   000F6E                     __ptext0:
   605                           	callstack 0
   606   000F6E                     _main:
   607                           	callstack 26
   608   000F6E                     
   609                           ;main.c: 30:     struct RGBC_val RGBC_colour;;main.c: 31:         RGBC_colour.R = 0;
   610   000F6E  0E00               	movlw	0
   611   000F70  6E26               	movwf	(main@RGBC_colour+1)^0,c
   612   000F72  0E00               	movlw	0
   613   000F74  6E25               	movwf	main@RGBC_colour^0,c
   614                           
   615                           ;main.c: 32:         RGBC_colour.G = 0;
   616   000F76  0E00               	movlw	0
   617   000F78  6E28               	movwf	(main@RGBC_colour+3)^0,c
   618   000F7A  0E00               	movlw	0
   619   000F7C  6E27               	movwf	(main@RGBC_colour+2)^0,c
   620                           
   621                           ;main.c: 33:         RGBC_colour.B = 0;
   622   000F7E  0E00               	movlw	0
   623   000F80  6E2A               	movwf	(main@RGBC_colour+5)^0,c
   624   000F82  0E00               	movlw	0
   625   000F84  6E29               	movwf	(main@RGBC_colour+4)^0,c
   626                           
   627                           ;main.c: 34:         RGBC_colour.C = 0;
   628   000F86  0E00               	movlw	0
   629   000F88  6E2C               	movwf	(main@RGBC_colour+7)^0,c
   630   000F8A  0E00               	movlw	0
   631   000F8C  6E2B               	movwf	(main@RGBC_colour+6)^0,c
   632                           
   633                           ;main.c: 36:     struct HSV_val HSV_colour;;main.c: 37:         HSV_colour.H = 0;
   634   000F8E  0E00               	movlw	0
   635   000F90  6E20               	movwf	(main@HSV_colour+1)^0,c
   636   000F92  0E00               	movlw	0
   637   000F94  6E1F               	movwf	main@HSV_colour^0,c
   638                           
   639                           ;main.c: 38:         HSV_colour.S = 0;
   640   000F96  0E00               	movlw	0
   641   000F98  6E22               	movwf	(main@HSV_colour+3)^0,c
   642   000F9A  0E00               	movlw	0
   643   000F9C  6E21               	movwf	(main@HSV_colour+2)^0,c
   644                           
   645                           ;main.c: 39:         HSV_colour.V = 0;
   646   000F9E  0E00               	movlw	0
   647   000FA0  6E24               	movwf	(main@HSV_colour+5)^0,c
   648   000FA2  0E00               	movlw	0
   649   000FA4  6E23               	movwf	(main@HSV_colour+4)^0,c
   650                           
   651                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 43:         motorL.power = 0;
   652   000FA6  0E00               	movlw	0
   653   000FA8  6E2D               	movwf	main@motorL^0,c
   654                           
   655                           ;main.c: 44:         motorL.direction = 1;
   656   000FAA  0E01               	movlw	1
   657   000FAC  6E2E               	movwf	(main@motorL+1)^0,c
   658                           
   659                           ;main.c: 45:         motorL.brakemode = 1;
   660   000FAE  0E01               	movlw	1
   661   000FB0  6E2F               	movwf	(main@motorL+2)^0,c
   662   000FB2                     
   663                           ;main.c: 46:         motorL.PWMperiod = PWMcycle;
   664   000FB2  0E00               	movlw	0
   665   000FB4  6E31               	movwf	(main@motorL+4)^0,c
   666   000FB6  0E63               	movlw	99
   667   000FB8  6E30               	movwf	(main@motorL+3)^0,c
   668   000FBA                     
   669                           ;main.c: 47:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   670   000FBA  0EAA               	movlw	170
   671   000FBC  6E32               	movwf	(main@motorL+5)^0,c
   672   000FBE  0E0F               	movlw	15
   673   000FC0  6E33               	movwf	(main@motorL+6)^0,c
   674   000FC2                     
   675                           ;main.c: 48:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   676   000FC2  0EA6               	movlw	166
   677   000FC4  6E34               	movwf	(main@motorL+7)^0,c
   678   000FC6  0E0F               	movlw	15
   679   000FC8  6E35               	movwf	(main@motorL+8)^0,c
   680                           
   681                           ;main.c: 49:         motorR.power = 0;
   682   000FCA  0E00               	movlw	0
   683   000FCC  6E36               	movwf	main@motorR^0,c
   684                           
   685                           ;main.c: 50:         motorR.direction = 1;
   686   000FCE  0E01               	movlw	1
   687   000FD0  6E37               	movwf	(main@motorR+1)^0,c
   688                           
   689                           ;main.c: 51:         motorR.brakemode = 1;
   690   000FD2  0E01               	movlw	1
   691   000FD4  6E38               	movwf	(main@motorR+2)^0,c
   692   000FD6                     
   693                           ;main.c: 52:         motorR.PWMperiod = PWMcycle;
   694   000FD6  0E00               	movlw	0
   695   000FD8  6E3A               	movwf	(main@motorR+4)^0,c
   696   000FDA  0E63               	movlw	99
   697   000FDC  6E39               	movwf	(main@motorR+3)^0,c
   698   000FDE                     
   699                           ;main.c: 53:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   700   000FDE  0E25               	movlw	37
   701   000FE0  6E3B               	movwf	(main@motorR+5)^0,c
   702   000FE2  0E0F               	movlw	15
   703   000FE4  6E3C               	movwf	(main@motorR+6)^0,c
   704   000FE6                     
   705                           ;main.c: 54:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   706   000FE6  0E21               	movlw	33
   707   000FE8  6E3D               	movwf	(main@motorR+7)^0,c
   708   000FEA  0E0F               	movlw	15
   709   000FEC  6E3E               	movwf	(main@motorR+8)^0,c
   710   000FEE                     
   711                           ;main.c: 57:     initDCmotorsPWM(PWMcycle);
   712   000FEE  0E00               	movlw	0
   713   000FF0  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   714   000FF2  0E63               	movlw	99
   715   000FF4  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   716   000FF6  ECB8  F008         	call	_initDCmotorsPWM	;wreg free
   717                           
   718                           ;main.c: 58:     buggy_lights_init();
   719   000FFA  ECF7  F009         	call	_buggy_lights_init	;wreg free
   720   000FFE                     
   721                           ;main.c: 59:     color_click_init();
   722   000FFE  ECAC  F009         	call	_color_click_init	;wreg free
   723   001002                     
   724                           ;main.c: 60:     initUSART4();
   725   001002  EC6E  F00A         	call	_initUSART4	;wreg free
   726   001006                     
   727                           ;main.c: 61:     Timer0_init();
   728   001006  EC37  F00A         	call	_Timer0_init	;wreg free
   729   00100A                     
   730                           ;main.c: 65:         TRISDbits.TRISD7 = 0;
   731   00100A  9E84               	bcf	132,7,c	;volatile
   732   00100C                     
   733                           ;main.c: 66:         TRISHbits.TRISH3 = 0;
   734   00100C  9688               	bcf	136,3,c	;volatile
   735   00100E                     
   736                           ;main.c: 68:         LATDbits.LATD7 = 0;
   737   00100E  9E7C               	bcf	124,7,c	;volatile
   738   001010                     
   739                           ;main.c: 69:         LATHbits.LATH3 = 0;
   740   001010  9680               	bcf	128,3,c	;volatile
   741   001012                     
   742                           ;main.c: 73:         TRISFbits.TRISF2 = 1;
   743   001012  8486               	bsf	134,2,c	;volatile
   744   001014                     
   745                           ;main.c: 74:         TRISFbits.TRISF3 = 1;
   746   001014  8686               	bsf	134,3,c	;volatile
   747   001016                     
   748                           ;main.c: 76:         ANSELFbits.ANSELF2 = 0;
   749   001016  010E               	movlb	14	; () banked
   750   001018  95B4               	bcf	180,2,b	;volatile
   751   00101A                     
   752                           ; BSR set to: 14
   753                           ;main.c: 77:         ANSELFbits.ANSELF3 = 0;
   754   00101A  97B4               	bcf	180,3,b	;volatile
   755   00101C                     l427:
   756   00101C  B68E               	btfsc	142,3,c	;volatile
   757   00101E  EF13  F008         	goto	u3351
   758   001022  EF15  F008         	goto	u3350
   759   001026                     u3351:
   760   001026  EF0E  F008         	goto	l427
   761   00102A                     u3350:
   762   00102A                     
   763                           ;main.c: 80:     LATDbits.LATD7 = !LATDbits.LATD7;
   764   00102A  AE7C               	btfss	124,7,c	;volatile
   765   00102C  EF1A  F008         	goto	u3361
   766   001030  EF1E  F008         	goto	u3360
   767   001034                     u3361:
   768   001034  6A1C               	clrf	??_main^0,c
   769   001036  2A1C               	incf	??_main^0,f,c
   770   001038  EF1F  F008         	goto	u3378
   771   00103C                     u3360:
   772   00103C  6A1C               	clrf	??_main^0,c
   773   00103E                     u3378:
   774   00103E  321C               	rrcf	??_main^0,f,c
   775   001040  321C               	rrcf	??_main^0,f,c
   776   001042  507C               	movf	124,w,c	;volatile
   777   001044  181C               	xorwf	??_main^0,w,c
   778   001046  0B7F               	andlw	-129
   779   001048  181C               	xorwf	??_main^0,w,c
   780   00104A  6E7C               	movwf	124,c	;volatile
   781                           
   782                           ;main.c: 81:     LATHbits.LATH3 = !LATHbits.LATH3;
   783   00104C  A680               	btfss	128,3,c	;volatile
   784   00104E  EF2B  F008         	goto	u3381
   785   001052  EF2F  F008         	goto	u3380
   786   001056                     u3381:
   787   001056  6A1C               	clrf	??_main^0,c
   788   001058  2A1C               	incf	??_main^0,f,c
   789   00105A  EF30  F008         	goto	u3398
   790   00105E                     u3380:
   791   00105E  6A1C               	clrf	??_main^0,c
   792   001060                     u3398:
   793   001060  461C               	rlncf	??_main^0,f,c
   794   001062  461C               	rlncf	??_main^0,f,c
   795   001064  461C               	rlncf	??_main^0,f,c
   796   001066  5080               	movf	128,w,c	;volatile
   797   001068  181C               	xorwf	??_main^0,w,c
   798   00106A  0BF7               	andlw	-9
   799   00106C  181C               	xorwf	??_main^0,w,c
   800   00106E  6E80               	movwf	128,c	;volatile
   801   001070                     
   802                           ;main.c: 82:      _delay((unsigned long)((1000)*(64000000/4000.0)));
   803   001070  0E52               	movlw	82
   804   001072  6E1D               	movwf	(??_main+1)^0,c
   805   001074  0E2B               	movlw	43
   806   001076  6E1C               	movwf	??_main^0,c
   807   001078  0E00               	movlw	0
   808   00107A                     u3847:
   809   00107A  2EE8               	decfsz	wreg,f,c
   810   00107C  D7FE               	bra	u3847
   811   00107E  2E1C               	decfsz	??_main^0,f,c
   812   001080  D7FC               	bra	u3847
   813   001082  2E1D               	decfsz	(??_main+1)^0,f,c
   814   001084  D7FA               	bra	u3847
   815   001086  D000               	nop2	
   816   001088                     
   817                           ;main.c: 110:     headbuttReverse(&motorL, &motorR);
   818   001088  0E2D               	movlw	low main@motorL
   819   00108A  6E18               	movwf	headbuttReverse@mL^0,c
   820   00108C  0E36               	movlw	low main@motorR
   821   00108E  6E19               	movwf	headbuttReverse@mR^0,c
   822   001090  ECDF  F009         	call	_headbuttReverse	;wreg free
   823   001094                     
   824                           ;main.c: 111:     squareReverse(&motorL, &motorR);
   825   001094  0E2D               	movlw	low main@motorL
   826   001096  6E18               	movwf	squareReverse@mL^0,c
   827   001098  0E36               	movlw	low main@motorR
   828   00109A  6E19               	movwf	squareReverse@mR^0,c
   829   00109C  ECC6  F009         	call	_squareReverse	;wreg free
   830   0010A0                     
   831                           ;main.c: 115:     for (unsigned char i = 0; i < 4; i++) {
   832   0010A0  0E00               	movlw	0
   833   0010A2  6E1E               	movwf	main@i^0,c
   834   0010A4                     l4247:
   835                           
   836                           ;main.c: 122:     }
   837   0010A4  2A1E               	incf	main@i^0,f,c
   838   0010A6  0E03               	movlw	3
   839   0010A8  641E               	cpfsgt	main@i^0,c
   840   0010AA  EF59  F008         	goto	u3401
   841   0010AE  EF5B  F008         	goto	u3400
   842   0010B2                     u3401:
   843   0010B2  EF52  F008         	goto	l4247
   844   0010B6                     u3400:
   845   0010B6  EF1E  F000         	goto	start
   846   0010BA                     __end_of_main:
   847                           	callstack 0
   848                           
   849 ;; *************** function _squareReverse *****************
   850 ;; Defined at:
   851 ;;		line 239 in file "dc_motor.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;  mL              1   23[COMRAM] PTR struct DC_motor
   854 ;;		 -> main@motorL(9), 
   855 ;;  mR              1   24[COMRAM] PTR struct DC_motor
   856 ;;		 -> main@motorR(9), 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   868 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   870 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   871 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   872 ;;Total ram usage:        4 bytes
   873 ;; Hardware stack levels used: 1
   874 ;; Hardware stack levels required when called: 4
   875 ;; This function calls:
   876 ;;		_fullSpeedReverse
   877 ;;		_stop
   878 ;; This function is called by:
   879 ;;		_main
   880 ;;		_card_yellow
   881 ;;		_card_pink
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text1
   886   00138C                     __ptext1:
   887                           	callstack 0
   888   00138C                     _squareReverse:
   889                           	callstack 26
   890   00138C                     
   891                           ;dc_motor.c: 239: void squareReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 240: {;dc_m
      +                          otor.c: 241:     fullSpeedReverse(mL, mR);
   892   00138C  C018  F013         	movff	squareReverse@mL,fullSpeedReverse@mL
   893   001390  C019  F014         	movff	squareReverse@mR,fullSpeedReverse@mR
   894   001394  EC5D  F008         	call	_fullSpeedReverse	;wreg free
   895   001398                     
   896                           ;dc_motor.c: 242:     _delay((unsigned long)((squareDelay)*(64000000/4000.0)));
   897   001398  0EC7               	movlw	199
   898   00139A  6E1B               	movwf	(??_squareReverse+1)^0,c
   899   00139C  0E0D               	movlw	13
   900   00139E  6E1A               	movwf	??_squareReverse^0,c
   901   0013A0  0EC6               	movlw	198
   902   0013A2                     u3857:
   903   0013A2  2EE8               	decfsz	wreg,f,c
   904   0013A4  D7FE               	bra	u3857
   905   0013A6  2E1A               	decfsz	??_squareReverse^0,f,c
   906   0013A8  D7FC               	bra	u3857
   907   0013AA  2E1B               	decfsz	(??_squareReverse+1)^0,f,c
   908   0013AC  D7FA               	bra	u3857
   909   0013AE  D000               	nop2	
   910   0013B0                     
   911                           ;dc_motor.c: 243:     stop(mL, mR);
   912   0013B0  C018  F013         	movff	squareReverse@mL,stop@mL
   913   0013B4  C019  F014         	movff	squareReverse@mR,stop@mR
   914   0013B8  EC00  F009         	call	_stop	;wreg free
   915   0013BC  0012               	return		;funcret
   916   0013BE                     __end_of_squareReverse:
   917                           	callstack 0
   918                           
   919 ;; *************** function _initUSART4 *****************
   920 ;; Defined at:
   921 ;;		line 8 in file "serial.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, status,2
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   939 ;;Total ram usage:        0 bytes
   940 ;; Hardware stack levels used: 1
   941 ;; Hardware stack levels required when called: 1
   942 ;; This function calls:
   943 ;;		Nothing
   944 ;; This function is called by:
   945 ;;		_main
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           	psect	text2
   950   0014DC                     __ptext2:
   951                           	callstack 0
   952   0014DC                     _initUSART4:
   953                           	callstack 29
   954   0014DC                     
   955                           ;serial.c: 9:     RC0PPS = 0x12;
   956   0014DC  0E12               	movlw	18
   957   0014DE  010E               	movlb	14	; () banked
   958   0014E0  6F62               	movwf	98,b	;volatile
   959                           
   960                           ;serial.c: 10:     RX4PPS = 0x11;
   961   0014E2  0E11               	movlw	17
   962   0014E4  6F15               	movwf	21,b	;volatile
   963   0014E6                     
   964                           ; BSR set to: 14
   965                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
   966   0014E6  97E9               	bcf	233,3,b	;volatile
   967   0014E8                     
   968                           ; BSR set to: 14
   969                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
   970   0014E8  95E8               	bcf	232,2,b	;volatile
   971                           
   972                           ;serial.c: 14:     SP4BRGL = 51;
   973   0014EA  0E33               	movlw	51
   974   0014EC  6FE5               	movwf	229,b	;volatile
   975                           
   976                           ;serial.c: 15:     SP4BRGH = 0;
   977   0014EE  0E00               	movlw	0
   978   0014F0  6FE6               	movwf	230,b	;volatile
   979   0014F2                     
   980                           ; BSR set to: 14
   981                           ;serial.c: 17:     RC4STAbits.CREN = 1;
   982   0014F2  89E7               	bsf	231,4,b	;volatile
   983   0014F4                     
   984                           ; BSR set to: 14
   985                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
   986   0014F4  8BE8               	bsf	232,5,b	;volatile
   987   0014F6                     
   988                           ; BSR set to: 14
   989                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
   990   0014F6  8FE7               	bsf	231,7,b	;volatile
   991   0014F8                     
   992                           ; BSR set to: 14
   993   0014F8  0012               	return		;funcret
   994   0014FA                     __end_of_initUSART4:
   995                           	callstack 0
   996                           
   997 ;; *************** function _initDCmotorsPWM *****************
   998 ;; Defined at:
   999 ;;		line 7 in file "dc_motor.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;		None
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		wreg, status,2
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1013 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1016 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1017 ;;Total ram usage:        2 bytes
  1018 ;; Hardware stack levels used: 1
  1019 ;; Hardware stack levels required when called: 1
  1020 ;; This function calls:
  1021 ;;		Nothing
  1022 ;; This function is called by:
  1023 ;;		_main
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text3
  1028   001170                     __ptext3:
  1029                           	callstack 0
  1030   001170                     _initDCmotorsPWM:
  1031                           	callstack 29
  1032   001170                     
  1033                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
  1034   001170  9485               	bcf	133,2,c	;volatile
  1035                           
  1036                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1037   001172  9885               	bcf	133,4,c	;volatile
  1038                           
  1039                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
  1040   001174  9E83               	bcf	131,7,c	;volatile
  1041                           
  1042                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
  1043   001176  9C87               	bcf	135,6,c	;volatile
  1044                           
  1045                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
  1046   001178  947D               	bcf	125,2,c	;volatile
  1047                           
  1048                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
  1049   00117A  987D               	bcf	125,4,c	;volatile
  1050                           
  1051                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
  1052   00117C  9E7B               	bcf	123,7,c	;volatile
  1053                           
  1054                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
  1055   00117E  9C7F               	bcf	127,6,c	;volatile
  1056   001180                     
  1057                           ;dc_motor.c: 19:     RE2PPS=0x05;
  1058   001180  0E05               	movlw	5
  1059   001182  010E               	movlb	14	; () banked
  1060   001184  6F74               	movwf	116,b	;volatile
  1061                           
  1062                           ;dc_motor.c: 20:     RE4PPS=0x06;
  1063   001186  0E06               	movlw	6
  1064   001188  6F76               	movwf	118,b	;volatile
  1065                           
  1066                           ;dc_motor.c: 21:     RC7PPS=0x07;
  1067   00118A  0E07               	movlw	7
  1068   00118C  6F69               	movwf	105,b	;volatile
  1069                           
  1070                           ;dc_motor.c: 22:     RG6PPS=0x08;
  1071   00118E  0E08               	movlw	8
  1072   001190  6F88               	movwf	136,b	;volatile
  1073                           
  1074                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  1075   001192  50BD               	movf	189,w,c	;volatile
  1076   001194  0B8F               	andlw	-113
  1077   001196  0940               	iorlw	64
  1078   001198  6EBD               	movwf	189,c	;volatile
  1079                           
  1080                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  1081   00119A  0EE0               	movlw	-32
  1082   00119C  16BE               	andwf	190,f,c	;volatile
  1083                           
  1084                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  1085   00119E  50BF               	movf	191,w,c	;volatile
  1086   0011A0  0BF0               	andlw	-16
  1087   0011A2  0901               	iorlw	1
  1088   0011A4  6EBF               	movwf	191,c	;volatile
  1089   0011A6                     
  1090                           ; BSR set to: 14
  1091                           ;dc_motor.c: 31:     T2PR=(unsigned char)PWMperiod;
  1092   0011A6  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1093   0011AA                     
  1094                           ; BSR set to: 14
  1095                           ;dc_motor.c: 32:     T2CONbits.ON=1;
  1096   0011AA  8EBD               	bsf	189,7,c	;volatile
  1097                           
  1098                           ;dc_motor.c: 36:         CCPR1H=0;
  1099   0011AC  0E00               	movlw	0
  1100   0011AE  6EAA               	movwf	170,c	;volatile
  1101                           
  1102                           ;dc_motor.c: 37:         CCPR2H=0;
  1103   0011B0  0E00               	movlw	0
  1104   0011B2  6EA6               	movwf	166,c	;volatile
  1105                           
  1106                           ;dc_motor.c: 38:         CCPR3H=0;
  1107   0011B4  0E00               	movlw	0
  1108   0011B6  010F               	movlb	15	; () banked
  1109   0011B8  6F25               	movwf	37,b	;volatile
  1110                           
  1111                           ;dc_motor.c: 39:         CCPR4H=0;
  1112   0011BA  0E00               	movlw	0
  1113   0011BC  6F21               	movwf	33,b	;volatile
  1114                           
  1115                           ;dc_motor.c: 42:         CCPTMRS0bits.C1TSEL=0;
  1116   0011BE  0EFC               	movlw	-4
  1117   0011C0  16AD               	andwf	173,f,c	;volatile
  1118                           
  1119                           ;dc_motor.c: 43:         CCPTMRS0bits.C2TSEL=0;
  1120   0011C2  0EF3               	movlw	-13
  1121   0011C4  16AD               	andwf	173,f,c	;volatile
  1122                           
  1123                           ;dc_motor.c: 44:         CCPTMRS0bits.C3TSEL=0;
  1124   0011C6  0ECF               	movlw	-49
  1125   0011C8  16AD               	andwf	173,f,c	;volatile
  1126                           
  1127                           ;dc_motor.c: 45:         CCPTMRS0bits.C4TSEL=0;
  1128   0011CA  0E3F               	movlw	-193
  1129   0011CC  16AD               	andwf	173,f,c	;volatile
  1130   0011CE                     
  1131                           ; BSR set to: 15
  1132                           ;dc_motor.c: 48:         CCP1CONbits.FMT=1;
  1133   0011CE  88AB               	bsf	171,4,c	;volatile
  1134                           
  1135                           ;dc_motor.c: 49:         CCP1CONbits.CCP1MODE=0b1100;
  1136   0011D0  50AB               	movf	171,w,c	;volatile
  1137   0011D2  0BF0               	andlw	-16
  1138   0011D4  090C               	iorlw	12
  1139   0011D6  6EAB               	movwf	171,c	;volatile
  1140   0011D8                     
  1141                           ; BSR set to: 15
  1142                           ;dc_motor.c: 50:         CCP1CONbits.EN=1;
  1143   0011D8  8EAB               	bsf	171,7,c	;volatile
  1144   0011DA                     
  1145                           ; BSR set to: 15
  1146                           ;dc_motor.c: 52:         CCP2CONbits.FMT=1;
  1147   0011DA  88A7               	bsf	167,4,c	;volatile
  1148                           
  1149                           ;dc_motor.c: 53:         CCP2CONbits.CCP2MODE=0b1100;
  1150   0011DC  50A7               	movf	167,w,c	;volatile
  1151   0011DE  0BF0               	andlw	-16
  1152   0011E0  090C               	iorlw	12
  1153   0011E2  6EA7               	movwf	167,c	;volatile
  1154   0011E4                     
  1155                           ; BSR set to: 15
  1156                           ;dc_motor.c: 54:         CCP2CONbits.EN=1;
  1157   0011E4  8EA7               	bsf	167,7,c	;volatile
  1158   0011E6                     
  1159                           ; BSR set to: 15
  1160                           ;dc_motor.c: 56:         CCP3CONbits.FMT=1;
  1161   0011E6  8926               	bsf	38,4,b	;volatile
  1162                           
  1163                           ;dc_motor.c: 57:         CCP3CONbits.CCP3MODE=0b1100;
  1164   0011E8  5126               	movf	38,w,b	;volatile
  1165   0011EA  0BF0               	andlw	-16
  1166   0011EC  090C               	iorlw	12
  1167   0011EE  6F26               	movwf	38,b	;volatile
  1168   0011F0                     
  1169                           ; BSR set to: 15
  1170                           ;dc_motor.c: 58:         CCP3CONbits.EN=1;
  1171   0011F0  8F26               	bsf	38,7,b	;volatile
  1172   0011F2                     
  1173                           ; BSR set to: 15
  1174                           ;dc_motor.c: 60:         CCP4CONbits.FMT=1;
  1175   0011F2  8922               	bsf	34,4,b	;volatile
  1176                           
  1177                           ;dc_motor.c: 61:         CCP4CONbits.CCP4MODE=0b1100;
  1178   0011F4  5122               	movf	34,w,b	;volatile
  1179   0011F6  0BF0               	andlw	-16
  1180   0011F8  090C               	iorlw	12
  1181   0011FA  6F22               	movwf	34,b	;volatile
  1182   0011FC                     
  1183                           ; BSR set to: 15
  1184                           ;dc_motor.c: 62:         CCP4CONbits.EN=1;
  1185   0011FC  8F22               	bsf	34,7,b	;volatile
  1186   0011FE                     
  1187                           ; BSR set to: 15
  1188   0011FE  0012               	return		;funcret
  1189   001200                     __end_of_initDCmotorsPWM:
  1190                           	callstack 0
  1191                           
  1192 ;; *************** function _headbuttReverse *****************
  1193 ;; Defined at:
  1194 ;;		line 229 in file "dc_motor.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  1197 ;;		 -> main@motorL(9), 
  1198 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  1199 ;;		 -> main@motorR(9), 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;		None
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1211 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1213 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1214 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1215 ;;Total ram usage:        4 bytes
  1216 ;; Hardware stack levels used: 1
  1217 ;; Hardware stack levels required when called: 4
  1218 ;; This function calls:
  1219 ;;		_fullSpeedReverse
  1220 ;;		_stop
  1221 ;; This function is called by:
  1222 ;;		_main
  1223 ;;		_card_red
  1224 ;;		_card_green
  1225 ;;		_card_blue
  1226 ;;		_card_yellow
  1227 ;;		_card_pink
  1228 ;;		_card_orange
  1229 ;;		_card_cyan
  1230 ;;		_card_white
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text4
  1235   0013BE                     __ptext4:
  1236                           	callstack 0
  1237   0013BE                     _headbuttReverse:
  1238                           	callstack 26
  1239   0013BE                     
  1240                           ;dc_motor.c: 229: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 230: {;dc
      +                          _motor.c: 231:     fullSpeedReverse(mL, mR);
  1241   0013BE  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
  1242   0013C2  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
  1243   0013C6  EC5D  F008         	call	_fullSpeedReverse	;wreg free
  1244   0013CA                     
  1245                           ;dc_motor.c: 232:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
  1246   0013CA  0E43               	movlw	67
  1247   0013CC  6E1B               	movwf	(??_headbuttReverse+1)^0,c
  1248   0013CE  0E8F               	movlw	143
  1249   0013D0  6E1A               	movwf	??_headbuttReverse^0,c
  1250   0013D2  0EC8               	movlw	200
  1251   0013D4                     u3867:
  1252   0013D4  2EE8               	decfsz	wreg,f,c
  1253   0013D6  D7FE               	bra	u3867
  1254   0013D8  2E1A               	decfsz	??_headbuttReverse^0,f,c
  1255   0013DA  D7FC               	bra	u3867
  1256   0013DC  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
  1257   0013DE  D7FA               	bra	u3867
  1258   0013E0                     
  1259                           ;dc_motor.c: 233:     stop(mL, mR);
  1260   0013E0  C018  F013         	movff	headbuttReverse@mL,stop@mL
  1261   0013E4  C019  F014         	movff	headbuttReverse@mR,stop@mR
  1262   0013E8  EC00  F009         	call	_stop	;wreg free
  1263   0013EC  0012               	return		;funcret
  1264   0013EE                     __end_of_headbuttReverse:
  1265                           	callstack 0
  1266                           
  1267 ;; *************** function _stop *****************
  1268 ;; Defined at:
  1269 ;;		line 93 in file "dc_motor.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1272 ;;		 -> main@motorL(9), 
  1273 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1274 ;;		 -> main@motorR(9), 
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;		None
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1288 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1289 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1290 ;;Total ram usage:        3 bytes
  1291 ;; Hardware stack levels used: 1
  1292 ;; Hardware stack levels required when called: 3
  1293 ;; This function calls:
  1294 ;;		_setMotorPWM
  1295 ;; This function is called by:
  1296 ;;		_headbuttReverse
  1297 ;;		_squareReverse
  1298 ;;		_turnLeft90
  1299 ;;		_turnRight90
  1300 ;;		_turnLeft135
  1301 ;;		_turnRight135
  1302 ;;		_UTurn
  1303 ;;		_forward_navigation
  1304 ;;		_return_to_sender
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text5
  1309   001200                     __ptext5:
  1310                           	callstack 0
  1311   001200                     _stop:
  1312                           	callstack 26
  1313   001200                     
  1314                           ;dc_motor.c: 93: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 94: {;dc_motor.c: 95:
      +                               while ((mL->power>0) || (mR->power>0)){
  1315   001200  EF30  F009         	goto	l3993
  1316   001204                     l3979:
  1317                           
  1318                           ;dc_motor.c: 96:         if (mL->power>0) {mL->power--;}
  1319   001204  5013               	movf	stop@mL^0,w,c
  1320   001206  6ED9               	movwf	fsr2l,c
  1321   001208  6ADA               	clrf	fsr2h,c
  1322   00120A  50DF               	movf	indf2,w,c
  1323   00120C  B4D8               	btfsc	status,2,c
  1324   00120E  EF0B  F009         	goto	u3221
  1325   001212  EF0D  F009         	goto	u3220
  1326   001216                     u3221:
  1327   001216  EF11  F009         	goto	l3983
  1328   00121A                     u3220:
  1329   00121A  5013               	movf	stop@mL^0,w,c
  1330   00121C  6ED9               	movwf	fsr2l,c
  1331   00121E  6ADA               	clrf	fsr2h,c
  1332   001220  06DF               	decf	indf2,f,c
  1333   001222                     l3983:
  1334                           
  1335                           ;dc_motor.c: 97:         if (mR->power>0) {mR->power--;}
  1336   001222  5014               	movf	stop@mR^0,w,c
  1337   001224  6ED9               	movwf	fsr2l,c
  1338   001226  6ADA               	clrf	fsr2h,c
  1339   001228  50DF               	movf	indf2,w,c
  1340   00122A  B4D8               	btfsc	status,2,c
  1341   00122C  EF1A  F009         	goto	u3231
  1342   001230  EF1C  F009         	goto	u3230
  1343   001234                     u3231:
  1344   001234  EF20  F009         	goto	l3987
  1345   001238                     u3230:
  1346   001238  5014               	movf	stop@mR^0,w,c
  1347   00123A  6ED9               	movwf	fsr2l,c
  1348   00123C  6ADA               	clrf	fsr2h,c
  1349   00123E  06DF               	decf	indf2,f,c
  1350   001240                     l3987:
  1351                           
  1352                           ;dc_motor.c: 98:         setMotorPWM(mL);
  1353   001240  C013  F00E         	movff	stop@mL,setMotorPWM@m
  1354   001244  EC0D  F007         	call	_setMotorPWM	;wreg free
  1355   001248                     
  1356                           ;dc_motor.c: 99:         setMotorPWM(mR);
  1357   001248  C014  F00E         	movff	stop@mR,setMotorPWM@m
  1358   00124C  EC0D  F007         	call	_setMotorPWM	;wreg free
  1359   001250                     
  1360                           ;dc_motor.c: 100:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1361   001250  0EA7               	movlw	167
  1362   001252  6E15               	movwf	??_stop^0,c
  1363   001254  0E3A               	movlw	58
  1364   001256                     u3877:
  1365   001256  2EE8               	decfsz	wreg,f,c
  1366   001258  D7FE               	bra	u3877
  1367   00125A  2E15               	decfsz	??_stop^0,f,c
  1368   00125C  D7FC               	bra	u3877
  1369   00125E  D000               	nop2	
  1370   001260                     l3993:
  1371                           
  1372                           ;dc_motor.c: 95:     while ((mL->power>0) || (mR->power>0)){
  1373   001260  5013               	movf	stop@mL^0,w,c
  1374   001262  6ED9               	movwf	fsr2l,c
  1375   001264  6ADA               	clrf	fsr2h,c
  1376   001266  50DF               	movf	indf2,w,c
  1377   001268  A4D8               	btfss	status,2,c
  1378   00126A  EF39  F009         	goto	u3241
  1379   00126E  EF3B  F009         	goto	u3240
  1380   001272                     u3241:
  1381   001272  EF02  F009         	goto	l3979
  1382   001276                     u3240:
  1383   001276  5014               	movf	stop@mR^0,w,c
  1384   001278  6ED9               	movwf	fsr2l,c
  1385   00127A  6ADA               	clrf	fsr2h,c
  1386   00127C  50DF               	movf	indf2,w,c
  1387   00127E  A4D8               	btfss	status,2,c
  1388   001280  EF44  F009         	goto	u3251
  1389   001284  EF46  F009         	goto	u3250
  1390   001288                     u3251:
  1391   001288  EF02  F009         	goto	l3979
  1392   00128C                     u3250:
  1393   00128C  0012               	return		;funcret
  1394   00128E                     __end_of_stop:
  1395                           	callstack 0
  1396                           
  1397 ;; *************** function _fullSpeedReverse *****************
  1398 ;; Defined at:
  1399 ;;		line 161 in file "dc_motor.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1402 ;;		 -> main@motorL(9), 
  1403 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1404 ;;		 -> main@motorR(9), 
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  rightGear       1   22[COMRAM] unsigned char 
  1407 ;;  leftGear        1   21[COMRAM] unsigned char 
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  1    wreg      void 
  1410 ;; Registers used:
  1411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1417 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1418 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1420 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1421 ;;Total ram usage:        5 bytes
  1422 ;; Hardware stack levels used: 1
  1423 ;; Hardware stack levels required when called: 3
  1424 ;; This function calls:
  1425 ;;		_setMotorPWM
  1426 ;; This function is called by:
  1427 ;;		_headbuttReverse
  1428 ;;		_squareReverse
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text6
  1433   0010BA                     __ptext6:
  1434                           	callstack 0
  1435   0010BA                     _fullSpeedReverse:
  1436                           	callstack 26
  1437   0010BA  0E14               	movlw	20
  1438   0010BC  6E16               	movwf	fullSpeedReverse@leftGear^0,c
  1439   0010BE  0E15               	movlw	21
  1440   0010C0  6E17               	movwf	fullSpeedReverse@rightGear^0,c
  1441   0010C2                     
  1442                           ;dc_motor.c: 165:     (mL->direction) = 0;
  1443   0010C2  5013               	movf	fullSpeedReverse@mL^0,w,c
  1444   0010C4  6ED9               	movwf	fsr2l,c
  1445   0010C6  6ADA               	clrf	fsr2h,c
  1446   0010C8  0E01               	movlw	1
  1447   0010CA  26D9               	addwf	fsr2l,f,c
  1448   0010CC  6ADF               	clrf	indf2,c
  1449   0010CE                     
  1450                           ;dc_motor.c: 166:     (mR->direction) = 0;
  1451   0010CE  5014               	movf	fullSpeedReverse@mR^0,w,c
  1452   0010D0  6ED9               	movwf	fsr2l,c
  1453   0010D2  6ADA               	clrf	fsr2h,c
  1454   0010D4  0E01               	movlw	1
  1455   0010D6  26D9               	addwf	fsr2l,f,c
  1456   0010D8  6ADF               	clrf	indf2,c
  1457                           
  1458                           ;dc_motor.c: 167:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1459   0010DA  EF9F  F008         	goto	l4015
  1460   0010DE                     l4003:
  1461                           
  1462                           ;dc_motor.c: 168:         if (mL->power<leftGear) {mL->power++;}
  1463   0010DE  5013               	movf	fullSpeedReverse@mL^0,w,c
  1464   0010E0  6ED9               	movwf	fsr2l,c
  1465   0010E2  6ADA               	clrf	fsr2h,c
  1466   0010E4  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  1467   0010E6  5CDE               	subwf	postinc2,w,c
  1468   0010E8  B0D8               	btfsc	status,0,c
  1469   0010EA  EF79  F008         	goto	u3261
  1470   0010EE  EF7B  F008         	goto	u3260
  1471   0010F2                     u3261:
  1472   0010F2  EF7F  F008         	goto	l260
  1473   0010F6                     u3260:
  1474   0010F6  5013               	movf	fullSpeedReverse@mL^0,w,c
  1475   0010F8  6ED9               	movwf	fsr2l,c
  1476   0010FA  6ADA               	clrf	fsr2h,c
  1477   0010FC  2ADF               	incf	indf2,f,c
  1478   0010FE                     l260:
  1479                           
  1480                           ;dc_motor.c: 169:         if (mR->power<rightGear) {mR->power++;}
  1481   0010FE  5014               	movf	fullSpeedReverse@mR^0,w,c
  1482   001100  6ED9               	movwf	fsr2l,c
  1483   001102  6ADA               	clrf	fsr2h,c
  1484   001104  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  1485   001106  5CDE               	subwf	postinc2,w,c
  1486   001108  B0D8               	btfsc	status,0,c
  1487   00110A  EF89  F008         	goto	u3271
  1488   00110E  EF8B  F008         	goto	u3270
  1489   001112                     u3271:
  1490   001112  EF8F  F008         	goto	l4009
  1491   001116                     u3270:
  1492   001116  5014               	movf	fullSpeedReverse@mR^0,w,c
  1493   001118  6ED9               	movwf	fsr2l,c
  1494   00111A  6ADA               	clrf	fsr2h,c
  1495   00111C  2ADF               	incf	indf2,f,c
  1496   00111E                     l4009:
  1497                           
  1498                           ;dc_motor.c: 170:         setMotorPWM(mL);
  1499   00111E  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  1500   001122  EC0D  F007         	call	_setMotorPWM	;wreg free
  1501   001126                     
  1502                           ;dc_motor.c: 171:         setMotorPWM(mR);
  1503   001126  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  1504   00112A  EC0D  F007         	call	_setMotorPWM	;wreg free
  1505   00112E                     
  1506                           ;dc_motor.c: 172:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1507   00112E  0EA7               	movlw	167
  1508   001130  6E15               	movwf	??_fullSpeedReverse^0,c
  1509   001132  0E3A               	movlw	58
  1510   001134                     u3887:
  1511   001134  2EE8               	decfsz	wreg,f,c
  1512   001136  D7FE               	bra	u3887
  1513   001138  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  1514   00113A  D7FC               	bra	u3887
  1515   00113C  D000               	nop2	
  1516   00113E                     l4015:
  1517                           
  1518                           ;dc_motor.c: 167:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1519   00113E  5013               	movf	fullSpeedReverse@mL^0,w,c
  1520   001140  6ED9               	movwf	fsr2l,c
  1521   001142  6ADA               	clrf	fsr2h,c
  1522   001144  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  1523   001146  5CDE               	subwf	postinc2,w,c
  1524   001148  A0D8               	btfss	status,0,c
  1525   00114A  EFA9  F008         	goto	u3281
  1526   00114E  EFAB  F008         	goto	u3280
  1527   001152                     u3281:
  1528   001152  EF6F  F008         	goto	l4003
  1529   001156                     u3280:
  1530   001156  5014               	movf	fullSpeedReverse@mR^0,w,c
  1531   001158  6ED9               	movwf	fsr2l,c
  1532   00115A  6ADA               	clrf	fsr2h,c
  1533   00115C  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  1534   00115E  5CDE               	subwf	postinc2,w,c
  1535   001160  A0D8               	btfss	status,0,c
  1536   001162  EFB5  F008         	goto	u3291
  1537   001166  EFB7  F008         	goto	u3290
  1538   00116A                     u3291:
  1539   00116A  EF6F  F008         	goto	l4003
  1540   00116E                     u3290:
  1541   00116E  0012               	return		;funcret
  1542   001170                     __end_of_fullSpeedReverse:
  1543                           	callstack 0
  1544                           
  1545 ;; *************** function _setMotorPWM *****************
  1546 ;; Defined at:
  1547 ;;		line 68 in file "dc_motor.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1550 ;;		 -> main@motorR(9), main@motorL(9), 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  negDuty         1   17[COMRAM] unsigned char 
  1553 ;;  posDuty         1   16[COMRAM] unsigned char 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  1    wreg      void 
  1556 ;; Registers used:
  1557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1563 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1565 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1566 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1567 ;;Total ram usage:        5 bytes
  1568 ;; Hardware stack levels used: 1
  1569 ;; Hardware stack levels required when called: 2
  1570 ;; This function calls:
  1571 ;;		___lwdiv
  1572 ;;		___wmul
  1573 ;; This function is called by:
  1574 ;;		_stop
  1575 ;;		_fullSpeedReverse
  1576 ;;		_turnLeft
  1577 ;;		_turnRight
  1578 ;;		_fullSpeedAhead
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text7
  1583   000E1A                     __ptext7:
  1584                           	callstack 0
  1585   000E1A                     _setMotorPWM:
  1586                           	callstack 26
  1587   000E1A                     
  1588                           ;dc_motor.c: 68: void setMotorPWM(DC_motor *m);dc_motor.c: 69: {;dc_motor.c: 70:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 72:     if(m->brakemode) {
  1589   000E1A  500E               	movf	setMotorPWM@m^0,w,c
  1590   000E1C  6ED9               	movwf	fsr2l,c
  1591   000E1E  6ADA               	clrf	fsr2h,c
  1592   000E20  0E02               	movlw	2
  1593   000E22  26D9               	addwf	fsr2l,f,c
  1594   000E24  50DF               	movf	indf2,w,c
  1595   000E26  B4D8               	btfsc	status,2,c
  1596   000E28  EF18  F007         	goto	u3201
  1597   000E2C  EF1A  F007         	goto	u3200
  1598   000E30                     u3201:
  1599   000E30  EF4A  F007         	goto	l3937
  1600   000E34                     u3200:
  1601   000E34                     
  1602                           ;dc_motor.c: 73:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  1603   000E34  500E               	movf	setMotorPWM@m^0,w,c
  1604   000E36  6ED9               	movwf	fsr2l,c
  1605   000E38  6ADA               	clrf	fsr2h,c
  1606   000E3A  50DF               	movf	indf2,w,c
  1607   000E3C  6E0F               	movwf	??_setMotorPWM^0,c
  1608   000E3E  500F               	movf	??_setMotorPWM^0,w,c
  1609   000E40  6E01               	movwf	___wmul@multiplier^0,c
  1610   000E42  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1611   000E44  500E               	movf	setMotorPWM@m^0,w,c
  1612   000E46  6ED9               	movwf	fsr2l,c
  1613   000E48  6ADA               	clrf	fsr2h,c
  1614   000E4A  0E03               	movlw	3
  1615   000E4C  26D9               	addwf	fsr2l,f,c
  1616   000E4E  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1617   000E52  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1618   000E56  EC4B  F00A         	call	___wmul	;wreg free
  1619   000E5A  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1620   000E5E  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1621   000E62  0E00               	movlw	0
  1622   000E64  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1623   000E66  0E64               	movlw	100
  1624   000E68  6E09               	movwf	___lwdiv@divisor^0,c
  1625   000E6A  EC47  F009         	call	___lwdiv	;wreg free
  1626   000E6E  500E               	movf	setMotorPWM@m^0,w,c
  1627   000E70  6ED9               	movwf	fsr2l,c
  1628   000E72  6ADA               	clrf	fsr2h,c
  1629   000E74  0E03               	movlw	3
  1630   000E76  26D9               	addwf	fsr2l,f,c
  1631   000E78  50DF               	movf	indf2,w,c
  1632   000E7A  6E10               	movwf	(??_setMotorPWM+1)^0,c
  1633   000E7C  5007               	movf	?___lwdiv^0,w,c
  1634   000E7E  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  1635   000E80  6E11               	movwf	setMotorPWM@posDuty^0,c
  1636   000E82                     
  1637                           ;dc_motor.c: 74:         negDuty=(unsigned char)(m->PWMperiod);
  1638   000E82  500E               	movf	setMotorPWM@m^0,w,c
  1639   000E84  6ED9               	movwf	fsr2l,c
  1640   000E86  6ADA               	clrf	fsr2h,c
  1641   000E88  0E03               	movlw	3
  1642   000E8A  26D9               	addwf	fsr2l,f,c
  1643   000E8C  50DF               	movf	indf2,w,c
  1644   000E8E  6E12               	movwf	setMotorPWM@negDuty^0,c
  1645                           
  1646                           ;dc_motor.c: 75:     }
  1647   000E90  EF6B  F007         	goto	l3941
  1648   000E94                     l3937:
  1649                           
  1650                           ;dc_motor.c: 77:         posDuty=0;
  1651   000E94  0E00               	movlw	0
  1652   000E96  6E11               	movwf	setMotorPWM@posDuty^0,c
  1653   000E98                     
  1654                           ;dc_motor.c: 78:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  1655   000E98  500E               	movf	setMotorPWM@m^0,w,c
  1656   000E9A  6ED9               	movwf	fsr2l,c
  1657   000E9C  6ADA               	clrf	fsr2h,c
  1658   000E9E  50DF               	movf	indf2,w,c
  1659   000EA0  6E0F               	movwf	??_setMotorPWM^0,c
  1660   000EA2  500F               	movf	??_setMotorPWM^0,w,c
  1661   000EA4  6E01               	movwf	___wmul@multiplier^0,c
  1662   000EA6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1663   000EA8  500E               	movf	setMotorPWM@m^0,w,c
  1664   000EAA  6ED9               	movwf	fsr2l,c
  1665   000EAC  6ADA               	clrf	fsr2h,c
  1666   000EAE  0E03               	movlw	3
  1667   000EB0  26D9               	addwf	fsr2l,f,c
  1668   000EB2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1669   000EB6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1670   000EBA  EC4B  F00A         	call	___wmul	;wreg free
  1671   000EBE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1672   000EC2  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1673   000EC6  0E00               	movlw	0
  1674   000EC8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1675   000ECA  0E64               	movlw	100
  1676   000ECC  6E09               	movwf	___lwdiv@divisor^0,c
  1677   000ECE  EC47  F009         	call	___lwdiv	;wreg free
  1678   000ED2  5007               	movf	?___lwdiv^0,w,c
  1679   000ED4  6E12               	movwf	setMotorPWM@negDuty^0,c
  1680   000ED6                     l3941:
  1681                           
  1682                           ;dc_motor.c: 81:     if (m->direction) {
  1683   000ED6  500E               	movf	setMotorPWM@m^0,w,c
  1684   000ED8  6ED9               	movwf	fsr2l,c
  1685   000EDA  6ADA               	clrf	fsr2h,c
  1686   000EDC  0E01               	movlw	1
  1687   000EDE  26D9               	addwf	fsr2l,f,c
  1688   000EE0  50DF               	movf	indf2,w,c
  1689   000EE2  B4D8               	btfsc	status,2,c
  1690   000EE4  EF76  F007         	goto	u3211
  1691   000EE8  EF78  F007         	goto	u3210
  1692   000EEC                     u3211:
  1693   000EEC  EF98  F007         	goto	l3945
  1694   000EF0                     u3210:
  1695   000EF0                     
  1696                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=posDuty;
  1697   000EF0  500E               	movf	setMotorPWM@m^0,w,c
  1698   000EF2  6ED9               	movwf	fsr2l,c
  1699   000EF4  6ADA               	clrf	fsr2h,c
  1700   000EF6  0E05               	movlw	5
  1701   000EF8  26D9               	addwf	fsr2l,f,c
  1702   000EFA  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1703   000EFE  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1704   000F02  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1705   000F06  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1706   000F0A  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1707                           
  1708                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=negDuty;
  1709   000F0E  500E               	movf	setMotorPWM@m^0,w,c
  1710   000F10  6ED9               	movwf	fsr2l,c
  1711   000F12  6ADA               	clrf	fsr2h,c
  1712   000F14  0E07               	movlw	7
  1713   000F16  26D9               	addwf	fsr2l,f,c
  1714   000F18  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1715   000F1C  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1716   000F20  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1717   000F24  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1718   000F28  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1719                           
  1720                           ;dc_motor.c: 84:     } else {
  1721   000F2C  EFB6  F007         	goto	l223
  1722   000F30                     l3945:
  1723                           
  1724                           ;dc_motor.c: 85:         *(m->posDutyHighByte)=negDuty;
  1725   000F30  500E               	movf	setMotorPWM@m^0,w,c
  1726   000F32  6ED9               	movwf	fsr2l,c
  1727   000F34  6ADA               	clrf	fsr2h,c
  1728   000F36  0E05               	movlw	5
  1729   000F38  26D9               	addwf	fsr2l,f,c
  1730   000F3A  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1731   000F3E  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1732   000F42  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1733   000F46  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1734   000F4A  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1735                           
  1736                           ;dc_motor.c: 86:         *(m->negDutyHighByte)=posDuty;
  1737   000F4E  500E               	movf	setMotorPWM@m^0,w,c
  1738   000F50  6ED9               	movwf	fsr2l,c
  1739   000F52  6ADA               	clrf	fsr2h,c
  1740   000F54  0E07               	movlw	7
  1741   000F56  26D9               	addwf	fsr2l,f,c
  1742   000F58  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1743   000F5C  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1744   000F60  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1745   000F64  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1746   000F68  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1747   000F6C                     l223:
  1748   000F6C  0012               	return		;funcret
  1749   000F6E                     __end_of_setMotorPWM:
  1750                           	callstack 0
  1751                           
  1752 ;; *************** function ___wmul *****************
  1753 ;; Defined at:
  1754 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  multiplier      2    0[COMRAM] unsigned int 
  1757 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  product         2    4[COMRAM] unsigned int 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  2    0[COMRAM] unsigned int 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2, status,0, prodl, prodh
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1769 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1772 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1773 ;;Total ram usage:        6 bytes
  1774 ;; Hardware stack levels used: 1
  1775 ;; Hardware stack levels required when called: 1
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_setMotorPWM
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text8
  1784   001496                     __ptext8:
  1785                           	callstack 0
  1786   001496                     ___wmul:
  1787                           	callstack 26
  1788   001496  5001               	movf	___wmul@multiplier^0,w,c
  1789   001498  0203               	mulwf	___wmul@multiplicand^0,c
  1790   00149A  CFF3 F005          	movff	prodl,___wmul@product
  1791   00149E  CFF4 F006          	movff	prodh,___wmul@product+1
  1792   0014A2  5001               	movf	___wmul@multiplier^0,w,c
  1793   0014A4  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1794   0014A6  50F3               	movf	243,w,c
  1795   0014A8  2606               	addwf	(___wmul@product+1)^0,f,c
  1796   0014AA  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1797   0014AC  0203               	mulwf	___wmul@multiplicand^0,c
  1798   0014AE  50F3               	movf	243,w,c
  1799   0014B0  2606               	addwf	(___wmul@product+1)^0,f,c
  1800   0014B2  C005  F001         	movff	___wmul@product,?___wmul
  1801   0014B6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1802   0014BA  0012               	return		;funcret
  1803   0014BC                     __end_of___wmul:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function ___lwdiv *****************
  1807 ;; Defined at:
  1808 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  dividend        2    6[COMRAM] unsigned int 
  1811 ;;  divisor         2    8[COMRAM] unsigned int 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  quotient        2   11[COMRAM] unsigned int 
  1814 ;;  counter         1   10[COMRAM] unsigned char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  2    6[COMRAM] unsigned int 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1824 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1825 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1827 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1828 ;;Total ram usage:        7 bytes
  1829 ;; Hardware stack levels used: 1
  1830 ;; Hardware stack levels required when called: 1
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_setMotorPWM
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text9
  1839   00128E                     __ptext9:
  1840                           	callstack 0
  1841   00128E                     ___lwdiv:
  1842                           	callstack 26
  1843   00128E  0E00               	movlw	0
  1844   001290  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  1845   001292  0E00               	movlw	0
  1846   001294  6E0C               	movwf	___lwdiv@quotient^0,c
  1847   001296  5009               	movf	___lwdiv@divisor^0,w,c
  1848   001298  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1849   00129A  B4D8               	btfsc	status,2,c
  1850   00129C  EF52  F009         	goto	u3171
  1851   0012A0  EF54  F009         	goto	u3170
  1852   0012A4                     u3171:
  1853   0012A4  EF7C  F009         	goto	l1276
  1854   0012A8                     u3170:
  1855   0012A8  0E01               	movlw	1
  1856   0012AA  6E0B               	movwf	___lwdiv@counter^0,c
  1857   0012AC  EF5C  F009         	goto	l3917
  1858   0012B0                     l3915:
  1859   0012B0  90D8               	bcf	status,0,c
  1860   0012B2  3609               	rlcf	___lwdiv@divisor^0,f,c
  1861   0012B4  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1862   0012B6  2A0B               	incf	___lwdiv@counter^0,f,c
  1863   0012B8                     l3917:
  1864   0012B8  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1865   0012BA  EF61  F009         	goto	u3181
  1866   0012BE  EF63  F009         	goto	u3180
  1867   0012C2                     u3181:
  1868   0012C2  EF58  F009         	goto	l3915
  1869   0012C6                     u3180:
  1870   0012C6                     l3919:
  1871   0012C6  90D8               	bcf	status,0,c
  1872   0012C8  360C               	rlcf	___lwdiv@quotient^0,f,c
  1873   0012CA  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1874   0012CC  5009               	movf	___lwdiv@divisor^0,w,c
  1875   0012CE  5C07               	subwf	___lwdiv@dividend^0,w,c
  1876   0012D0  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1877   0012D2  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1878   0012D4  A0D8               	btfss	status,0,c
  1879   0012D6  EF6F  F009         	goto	u3191
  1880   0012DA  EF71  F009         	goto	u3190
  1881   0012DE                     u3191:
  1882   0012DE  EF76  F009         	goto	l3927
  1883   0012E2                     u3190:
  1884   0012E2  5009               	movf	___lwdiv@divisor^0,w,c
  1885   0012E4  5E07               	subwf	___lwdiv@dividend^0,f,c
  1886   0012E6  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1887   0012E8  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1888   0012EA  800C               	bsf	___lwdiv@quotient^0,0,c
  1889   0012EC                     l3927:
  1890   0012EC  90D8               	bcf	status,0,c
  1891   0012EE  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1892   0012F0  3209               	rrcf	___lwdiv@divisor^0,f,c
  1893   0012F2  2E0B               	decfsz	___lwdiv@counter^0,f,c
  1894   0012F4  EF63  F009         	goto	l3919
  1895   0012F8                     l1276:
  1896   0012F8  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  1897   0012FC  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1898   001300  0012               	return		;funcret
  1899   001302                     __end_of___lwdiv:
  1900                           	callstack 0
  1901                           
  1902 ;; *************** function _color_click_init *****************
  1903 ;; Defined at:
  1904 ;;		line 7 in file "color.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;		None
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;		None
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, status,2, status,0, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1920 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1921 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1922 ;;Total ram usage:        1 bytes
  1923 ;; Hardware stack levels used: 1
  1924 ;; Hardware stack levels required when called: 4
  1925 ;; This function calls:
  1926 ;;		_I2C_2_Master_Init
  1927 ;;		_color_writetoaddr
  1928 ;; This function is called by:
  1929 ;;		_main
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text10
  1934   001358                     __ptext10:
  1935                           	callstack 0
  1936   001358                     _color_click_init:
  1937                           	callstack 26
  1938   001358                     
  1939                           ;color.c: 10:     I2C_2_Master_Init();
  1940   001358  EC0E  F00A         	call	_I2C_2_Master_Init	;wreg free
  1941   00135C                     
  1942                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  1943   00135C  0E01               	movlw	1
  1944   00135E  6E03               	movwf	color_writetoaddr@value^0,c
  1945   001360  0E00               	movlw	0
  1946   001362  EC5E  F00A         	call	_color_writetoaddr
  1947   001366                     
  1948                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1949   001366  0E3F               	movlw	63
  1950   001368  6E05               	movwf	??_color_click_init^0,c
  1951   00136A  0E55               	movlw	85
  1952   00136C                     u3897:
  1953   00136C  2EE8               	decfsz	wreg,f,c
  1954   00136E  D7FE               	bra	u3897
  1955   001370  2E05               	decfsz	??_color_click_init^0,f,c
  1956   001372  D7FC               	bra	u3897
  1957   001374  0000               	nop	
  1958   001376                     
  1959                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  1960   001376  0E03               	movlw	3
  1961   001378  6E03               	movwf	color_writetoaddr@value^0,c
  1962   00137A  0E00               	movlw	0
  1963   00137C  EC5E  F00A         	call	_color_writetoaddr
  1964   001380                     
  1965                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  1966   001380  0ED5               	movlw	213
  1967   001382  6E03               	movwf	color_writetoaddr@value^0,c
  1968   001384  0E01               	movlw	1
  1969   001386  EC5E  F00A         	call	_color_writetoaddr
  1970   00138A  0012               	return		;funcret
  1971   00138C                     __end_of_color_click_init:
  1972                           	callstack 0
  1973                           
  1974 ;; *************** function _color_writetoaddr *****************
  1975 ;; Defined at:
  1976 ;;		line 28 in file "color.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  address         1    wreg     unsigned char 
  1979 ;;  value           1    2[COMRAM] unsigned char 
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  address         1    3[COMRAM] unsigned char 
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      void 
  1984 ;; Registers used:
  1985 ;;		wreg, status,2, status,0, cstack
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1991 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1994 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1995 ;;Total ram usage:        2 bytes
  1996 ;; Hardware stack levels used: 1
  1997 ;; Hardware stack levels required when called: 3
  1998 ;; This function calls:
  1999 ;;		_I2C_2_Master_Start
  2000 ;;		_I2C_2_Master_Stop
  2001 ;;		_I2C_2_Master_Write
  2002 ;; This function is called by:
  2003 ;;		_color_click_init
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text11
  2008   0014BC                     __ptext11:
  2009                           	callstack 0
  2010   0014BC                     _color_writetoaddr:
  2011                           	callstack 26
  2012                           
  2013                           ;incstack = 0
  2014                           ;color_writetoaddr@address stored from wreg
  2015   0014BC  6E04               	movwf	color_writetoaddr@address^0,c
  2016   0014BE                     
  2017                           ;color.c: 29:     I2C_2_Master_Start();
  2018   0014BE  ECA2  F00A         	call	_I2C_2_Master_Start	;wreg free
  2019                           
  2020                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  2021   0014C2  0E52               	movlw	82
  2022   0014C4  EC8B  F00A         	call	_I2C_2_Master_Write
  2023                           
  2024                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  2025   0014C8  5004               	movf	color_writetoaddr@address^0,w,c
  2026   0014CA  0980               	iorlw	128
  2027   0014CC  EC8B  F00A         	call	_I2C_2_Master_Write
  2028                           
  2029                           ;color.c: 32:     I2C_2_Master_Write(value);
  2030   0014D0  5003               	movf	color_writetoaddr@value^0,w,c
  2031   0014D2  EC8B  F00A         	call	_I2C_2_Master_Write
  2032                           
  2033                           ;color.c: 33:     I2C_2_Master_Stop();
  2034   0014D6  EC9D  F00A         	call	_I2C_2_Master_Stop	;wreg free
  2035   0014DA  0012               	return		;funcret
  2036   0014DC                     __end_of_color_writetoaddr:
  2037                           	callstack 0
  2038                           
  2039 ;; *************** function _I2C_2_Master_Write *****************
  2040 ;; Defined at:
  2041 ;;		line 45 in file "i2c.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;  data_byte       1    wreg     unsigned char 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  data_byte       1    1[COMRAM] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg, status,2, status,0, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2058 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2059 ;;Total ram usage:        1 bytes
  2060 ;; Hardware stack levels used: 1
  2061 ;; Hardware stack levels required when called: 2
  2062 ;; This function calls:
  2063 ;;		_I2C_2_Master_Idle
  2064 ;; This function is called by:
  2065 ;;		_color_writetoaddr
  2066 ;;		_color_read_Red
  2067 ;;		_color_read_Green
  2068 ;;		_color_read_Blue
  2069 ;;		_color_read_Clear
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text12
  2074   001516                     __ptext12:
  2075                           	callstack 0
  2076   001516                     _I2C_2_Master_Write:
  2077                           	callstack 26
  2078                           
  2079                           ;incstack = 0
  2080                           ;I2C_2_Master_Write@data_byte stored from wreg
  2081   001516  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  2082   001518                     
  2083                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2084   001518  EC23  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2085   00151C                     
  2086                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2087   00151C  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2088   001520  0012               	return		;funcret
  2089   001522                     __end_of_I2C_2_Master_Write:
  2090                           	callstack 0
  2091                           
  2092 ;; *************** function _I2C_2_Master_Stop *****************
  2093 ;; Defined at:
  2094 ;;		line 39 in file "i2c.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;		None
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;		None
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		wreg, status,2, status,0, cstack
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2112 ;;Total ram usage:        0 bytes
  2113 ;; Hardware stack levels used: 1
  2114 ;; Hardware stack levels required when called: 2
  2115 ;; This function calls:
  2116 ;;		_I2C_2_Master_Idle
  2117 ;; This function is called by:
  2118 ;;		_color_writetoaddr
  2119 ;;		_color_read_Red
  2120 ;;		_color_read_Green
  2121 ;;		_color_read_Blue
  2122 ;;		_color_read_Clear
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text13
  2127   00153A                     __ptext13:
  2128                           	callstack 0
  2129   00153A                     _I2C_2_Master_Stop:
  2130                           	callstack 26
  2131   00153A                     
  2132                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2133   00153A  EC23  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2134   00153E                     
  2135                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2136   00153E  010E               	movlb	14	; () banked
  2137   001540  85DA               	bsf	218,2,b	;volatile
  2138   001542                     
  2139                           ; BSR set to: 14
  2140   001542  0012               	return		;funcret
  2141   001544                     __end_of_I2C_2_Master_Stop:
  2142                           	callstack 0
  2143                           
  2144 ;; *************** function _I2C_2_Master_Start *****************
  2145 ;; Defined at:
  2146 ;;		line 27 in file "i2c.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;		None
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;		None
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      void 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2, status,0, cstack
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2164 ;;Total ram usage:        0 bytes
  2165 ;; Hardware stack levels used: 1
  2166 ;; Hardware stack levels required when called: 2
  2167 ;; This function calls:
  2168 ;;		_I2C_2_Master_Idle
  2169 ;; This function is called by:
  2170 ;;		_color_writetoaddr
  2171 ;;		_color_read_Red
  2172 ;;		_color_read_Green
  2173 ;;		_color_read_Blue
  2174 ;;		_color_read_Clear
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text14
  2179   001544                     __ptext14:
  2180                           	callstack 0
  2181   001544                     _I2C_2_Master_Start:
  2182                           	callstack 26
  2183   001544                     
  2184                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2185   001544  EC23  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2186   001548                     
  2187                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2188   001548  010E               	movlb	14	; () banked
  2189   00154A  81DA               	bsf	218,0,b	;volatile
  2190   00154C                     
  2191                           ; BSR set to: 14
  2192   00154C  0012               	return		;funcret
  2193   00154E                     __end_of_I2C_2_Master_Start:
  2194                           	callstack 0
  2195                           
  2196 ;; *************** function _I2C_2_Master_Idle *****************
  2197 ;; Defined at:
  2198 ;;		line 22 in file "i2c.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;		None
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;		None
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, status,2, status,0
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2215 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;Total ram usage:        1 bytes
  2217 ;; Hardware stack levels used: 1
  2218 ;; Hardware stack levels required when called: 1
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_I2C_2_Master_Start
  2223 ;;		_I2C_2_Master_Stop
  2224 ;;		_I2C_2_Master_Write
  2225 ;;		_I2C_2_Master_RepStart
  2226 ;;		_I2C_2_Master_Read
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text15
  2231   001446                     __ptext15:
  2232                           	callstack 0
  2233   001446                     _I2C_2_Master_Idle:
  2234                           	callstack 26
  2235   001446                     l314:
  2236   001446  010E               	movlb	14	; () banked
  2237   001448  B5D8               	btfsc	216,2,b	;volatile
  2238   00144A  EF29  F00A         	goto	u1681
  2239   00144E  EF2B  F00A         	goto	u1680
  2240   001452                     u1681:
  2241   001452  EF23  F00A         	goto	l314
  2242   001456                     u1680:
  2243   001456                     
  2244                           ; BSR set to: 14
  2245   001456  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2246   00145A  0E1F               	movlw	31
  2247   00145C  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  2248   00145E  A4D8               	btfss	status,2,c
  2249   001460  EF34  F00A         	goto	u1691
  2250   001464  EF36  F00A         	goto	u1690
  2251   001468                     u1691:
  2252   001468  EF23  F00A         	goto	l314
  2253   00146C                     u1690:
  2254   00146C                     
  2255                           ; BSR set to: 14
  2256   00146C  0012               	return		;funcret
  2257   00146E                     __end_of_I2C_2_Master_Idle:
  2258                           	callstack 0
  2259                           
  2260 ;; *************** function _I2C_2_Master_Init *****************
  2261 ;; Defined at:
  2262 ;;		line 4 in file "i2c.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;		None
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;		None
  2267 ;; Return value:  Size  Location     Type
  2268 ;;                  1    wreg      void 
  2269 ;; Registers used:
  2270 ;;		wreg, status,2
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2280 ;;Total ram usage:        0 bytes
  2281 ;; Hardware stack levels used: 1
  2282 ;; Hardware stack levels required when called: 1
  2283 ;; This function calls:
  2284 ;;		Nothing
  2285 ;; This function is called by:
  2286 ;;		_color_click_init
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           	psect	text16
  2291   00141C                     __ptext16:
  2292                           	callstack 0
  2293   00141C                     _I2C_2_Master_Init:
  2294                           	callstack 28
  2295   00141C                     
  2296                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2297   00141C  010E               	movlb	14	; () banked
  2298   00141E  51D9               	movf	217,w,b	;volatile
  2299   001420  0BF0               	andlw	-16
  2300   001422  0908               	iorlw	8
  2301   001424  6FD9               	movwf	217,b	;volatile
  2302   001426                     
  2303                           ; BSR set to: 14
  2304                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2305   001426  8BD9               	bsf	217,5,b	;volatile
  2306                           
  2307                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2308   001428  0E9F               	movlw	159
  2309   00142A  6FD6               	movwf	214,b	;volatile
  2310   00142C                     
  2311                           ; BSR set to: 14
  2312                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2313   00142C  8A84               	bsf	132,5,c	;volatile
  2314   00142E                     
  2315                           ; BSR set to: 14
  2316                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2317   00142E  8C84               	bsf	132,6,c	;volatile
  2318   001430                     
  2319                           ; BSR set to: 14
  2320                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2321   001430  9BA7               	bcf	167,5,b	;volatile
  2322   001432                     
  2323                           ; BSR set to: 14
  2324                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2325   001432  9DA7               	bcf	167,6,b	;volatile
  2326                           
  2327                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2328   001434  0E1D               	movlw	29
  2329   001436  6F1D               	movwf	29,b	;volatile
  2330                           
  2331                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2332   001438  0E1E               	movlw	30
  2333   00143A  6F1C               	movwf	28,b	;volatile
  2334                           
  2335                           ;i2c.c: 18:   RD5PPS=0x1C;
  2336   00143C  0E1C               	movlw	28
  2337   00143E  6F6F               	movwf	111,b	;volatile
  2338                           
  2339                           ;i2c.c: 19:   RD6PPS=0x1B;
  2340   001440  0E1B               	movlw	27
  2341   001442  6F70               	movwf	112,b	;volatile
  2342   001444                     
  2343                           ; BSR set to: 14
  2344   001444  0012               	return		;funcret
  2345   001446                     __end_of_I2C_2_Master_Init:
  2346                           	callstack 0
  2347                           
  2348 ;; *************** function _buggy_lights_init *****************
  2349 ;; Defined at:
  2350 ;;		line 7 in file "buggy_lights.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;		None
  2355 ;; Return value:  Size  Location     Type
  2356 ;;                  1    wreg      void 
  2357 ;; Registers used:
  2358 ;;		None
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2368 ;;Total ram usage:        0 bytes
  2369 ;; Hardware stack levels used: 1
  2370 ;; Hardware stack levels required when called: 1
  2371 ;; This function calls:
  2372 ;;		Nothing
  2373 ;; This function is called by:
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text17
  2379   0013EE                     __ptext17:
  2380                           	callstack 0
  2381   0013EE                     _buggy_lights_init:
  2382                           	callstack 29
  2383   0013EE                     
  2384                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
  2385   0013EE  9884               	bcf	132,4,c	;volatile
  2386                           
  2387                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
  2388   0013F0  9288               	bcf	136,1,c	;volatile
  2389                           
  2390                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
  2391   0013F2  9684               	bcf	132,3,c	;volatile
  2392                           
  2393                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
  2394   0013F4  9086               	bcf	134,0,c	;volatile
  2395                           
  2396                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
  2397   0013F6  9088               	bcf	136,0,c	;volatile
  2398                           
  2399                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
  2400   0013F8  987C               	bcf	124,4,c	;volatile
  2401                           
  2402                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
  2403   0013FA  9280               	bcf	128,1,c	;volatile
  2404                           
  2405                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
  2406   0013FC  967C               	bcf	124,3,c	;volatile
  2407                           
  2408                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
  2409   0013FE  907E               	bcf	126,0,c	;volatile
  2410                           
  2411                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
  2412   001400  9080               	bcf	128,0,c	;volatile
  2413                           
  2414                           ;buggy_lights.c: 26:             TRISGbits.TRISG1 = 0;
  2415   001402  9287               	bcf	135,1,c	;volatile
  2416                           
  2417                           ;buggy_lights.c: 27:             TRISAbits.TRISA4 = 0;
  2418   001404  9881               	bcf	129,4,c	;volatile
  2419                           
  2420                           ;buggy_lights.c: 28:             TRISFbits.TRISF7 = 0;
  2421   001406  9E86               	bcf	134,7,c	;volatile
  2422                           
  2423                           ;buggy_lights.c: 30:             LATGbits.LATG1 = 0;
  2424   001408  927F               	bcf	127,1,c	;volatile
  2425                           
  2426                           ;buggy_lights.c: 31:             LATAbits.LATA4 = 0;
  2427   00140A  9879               	bcf	121,4,c	;volatile
  2428                           
  2429                           ;buggy_lights.c: 32:             LATFbits.LATF7 = 0;
  2430   00140C  9E7E               	bcf	126,7,c	;volatile
  2431                           
  2432                           ;buggy_lights.c: 36:             TRISGbits.TRISG0 = 0;
  2433   00140E  9087               	bcf	135,0,c	;volatile
  2434                           
  2435                           ;buggy_lights.c: 37:             TRISEbits.TRISE7 = 0;
  2436   001410  9E85               	bcf	133,7,c	;volatile
  2437                           
  2438                           ;buggy_lights.c: 38:             TRISAbits.TRISA3 = 0;
  2439   001412  9681               	bcf	129,3,c	;volatile
  2440                           
  2441                           ;buggy_lights.c: 40:             LATGbits.LATG0 = 0;
  2442   001414  907F               	bcf	127,0,c	;volatile
  2443                           
  2444                           ;buggy_lights.c: 41:             LATEbits.LATE7 = 0;
  2445   001416  9E7D               	bcf	125,7,c	;volatile
  2446                           
  2447                           ;buggy_lights.c: 42:             LATAbits.LATA3 = 0;
  2448   001418  9679               	bcf	121,3,c	;volatile
  2449   00141A  0012               	return		;funcret
  2450   00141C                     __end_of_buggy_lights_init:
  2451                           	callstack 0
  2452                           
  2453 ;; *************** function _Timer0_init *****************
  2454 ;; Defined at:
  2455 ;;		line 7 in file "timers.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2473 ;;Total ram usage:        0 bytes
  2474 ;; Hardware stack levels used: 1
  2475 ;; Hardware stack levels required when called: 3
  2476 ;; This function calls:
  2477 ;;		_reset_timer
  2478 ;;		_start_timer
  2479 ;; This function is called by:
  2480 ;;		_main
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text18
  2485   00146E                     __ptext18:
  2486                           	callstack 0
  2487   00146E                     _Timer0_init:
  2488                           	callstack 27
  2489   00146E                     
  2490                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  2491   00146E  50D6               	movf	214,w,c	;volatile
  2492   001470  0B1F               	andlw	-225
  2493   001472  0940               	iorlw	64
  2494   001474  6ED6               	movwf	214,c	;volatile
  2495   001476                     
  2496                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  2497   001476  88D6               	bsf	214,4,c	;volatile
  2498   001478                     
  2499                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  2500   001478  88D5               	bsf	213,4,c	;volatile
  2501                           
  2502                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  2503   00147A  50D6               	movf	214,w,c	;volatile
  2504   00147C  0BF0               	andlw	-16
  2505   00147E  090E               	iorlw	14
  2506   001480  6ED6               	movwf	214,c	;volatile
  2507   001482                     
  2508                           ;timers.c: 18:     reset_timer();
  2509   001482  EC91  F00A         	call	_reset_timer	;wreg free
  2510   001486                     
  2511                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  2512   001486  8ED5               	bsf	213,7,c	;volatile
  2513                           
  2514                           ;timers.c: 21:     start_timer();
  2515   001488  ECA7  F00A         	call	_start_timer	;wreg free
  2516   00148C                     
  2517                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
  2518   00148C  010E               	movlb	14	; () banked
  2519   00148E  8B29               	bsf	41,5,b	;volatile
  2520   001490                     
  2521                           ; BSR set to: 14
  2522                           ;timers.c: 23:     INTCONbits.PEIE = 1;
  2523   001490  8CF2               	bsf	242,6,c	;volatile
  2524   001492                     
  2525                           ; BSR set to: 14
  2526                           ;timers.c: 24:     INTCONbits.GIE = 1;
  2527   001492  8EF2               	bsf	242,7,c	;volatile
  2528   001494                     
  2529                           ; BSR set to: 14
  2530   001494  0012               	return		;funcret
  2531   001496                     __end_of_Timer0_init:
  2532                           	callstack 0
  2533                           
  2534 ;; *************** function _start_timer *****************
  2535 ;; Defined at:
  2536 ;;		line 30 in file "timers.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		None
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2554 ;;Total ram usage:        0 bytes
  2555 ;; Hardware stack levels used: 1
  2556 ;; Hardware stack levels required when called: 1
  2557 ;; This function calls:
  2558 ;;		Nothing
  2559 ;; This function is called by:
  2560 ;;		_Timer0_init
  2561 ;;		_forward_navigation
  2562 ;;		_return_to_sender
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	text19
  2567   00154E                     __ptext19:
  2568                           	callstack 0
  2569   00154E                     _start_timer:
  2570                           	callstack 28
  2571   00154E                     
  2572                           ;timers.c: 32:     T0CON0bits.T0EN=1;
  2573   00154E  8ED5               	bsf	213,7,c	;volatile
  2574   001550  0012               	return		;funcret
  2575   001552                     __end_of_start_timer:
  2576                           	callstack 0
  2577                           
  2578 ;; *************** function _reset_timer *****************
  2579 ;; Defined at:
  2580 ;;		line 70 in file "timers.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;		None
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;		None
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  1    wreg      void 
  2587 ;; Registers used:
  2588 ;;		wreg, status,2, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2598 ;;Total ram usage:        0 bytes
  2599 ;; Hardware stack levels used: 1
  2600 ;; Hardware stack levels required when called: 2
  2601 ;; This function calls:
  2602 ;;		_write_timer
  2603 ;; This function is called by:
  2604 ;;		_Timer0_init
  2605 ;;		_forward_navigation
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text20
  2610   001522                     __ptext20:
  2611                           	callstack 0
  2612   001522                     _reset_timer:
  2613                           	callstack 27
  2614   001522                     
  2615                           ;timers.c: 72:     write_timer(0, 0);
  2616   001522  0E00               	movlw	0
  2617   001524  6E01               	movwf	write_timer@tL^0,c
  2618   001526  0E00               	movlw	0
  2619   001528  EC97  F00A         	call	_write_timer
  2620   00152C  0012               	return		;funcret
  2621   00152E                     __end_of_reset_timer:
  2622                           	callstack 0
  2623                           
  2624 ;; *************** function _write_timer *****************
  2625 ;; Defined at:
  2626 ;;		line 58 in file "timers.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  tH              1    wreg     unsigned char 
  2629 ;;  tL              1    0[COMRAM] unsigned char 
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;  tH              1    1[COMRAM] unsigned char 
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  1    wreg      void 
  2634 ;; Registers used:
  2635 ;;		wreg
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2641 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2645 ;;Total ram usage:        2 bytes
  2646 ;; Hardware stack levels used: 1
  2647 ;; Hardware stack levels required when called: 1
  2648 ;; This function calls:
  2649 ;;		Nothing
  2650 ;; This function is called by:
  2651 ;;		_reset_timer
  2652 ;;		_return_to_sender
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text21
  2657   00152E                     __ptext21:
  2658                           	callstack 0
  2659   00152E                     _write_timer:
  2660                           	callstack 27
  2661                           
  2662                           ;incstack = 0
  2663                           ;write_timer@tH stored from wreg
  2664   00152E  6E02               	movwf	write_timer@tH^0,c
  2665   001530                     
  2666                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
  2667   001530  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  2668   001534                     
  2669                           ;timers.c: 64:     TMR0L = tL;
  2670   001534  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  2671   001538  0012               	return		;funcret
  2672   00153A                     __end_of_write_timer:
  2673                           	callstack 0
  2674                           
  2675 ;; *************** function _ISR *****************
  2676 ;; Defined at:
  2677 ;;		line 210 in file "timers.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;		None
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;		None
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  1    wreg      void 
  2684 ;; Registers used:
  2685 ;;		wreg, status,2
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2695 ;;Total ram usage:        0 bytes
  2696 ;; Hardware stack levels used: 1
  2697 ;; This function calls:
  2698 ;;		Nothing
  2699 ;; This function is called by:
  2700 ;;		Interrupt level 2
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	intcode
  2705   000008                     __pintcode:
  2706                           	callstack 0
  2707   000008                     _ISR:
  2708                           	callstack 26
  2709                           
  2710                           ;incstack = 0
  2711   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2712   00000A                     
  2713                           ;timers.c: 212:     if (PIR0bits.TMR0IF) {
  2714   00000A  010E               	movlb	14	; () banked
  2715   00000C  AB33               	btfss	51,5,b	;volatile
  2716   00000E  EF0B  F000         	goto	i2u120_41
  2717   000012  EF0D  F000         	goto	i2u120_40
  2718   000016                     i2u120_41:
  2719   000016  EF1C  F000         	goto	i2l749
  2720   00001A                     i2u120_40:
  2721   00001A                     
  2722                           ; BSR set to: 14
  2723                           ;timers.c: 213:         if (returning) {
  2724   00001A  505E               	movf	_returning^0,w,c
  2725   00001C  B4D8               	btfsc	status,2,c
  2726   00001E  EF13  F000         	goto	i2u121_41
  2727   000022  EF15  F000         	goto	i2u121_40
  2728   000026                     i2u121_41:
  2729   000026  EF19  F000         	goto	i2l2449
  2730   00002A                     i2u121_40:
  2731   00002A                     
  2732                           ; BSR set to: 14
  2733                           ;timers.c: 214:             return_flag = 1;
  2734   00002A  0E01               	movlw	1
  2735   00002C  6E5D               	movwf	_return_flag^0,c
  2736                           
  2737                           ;timers.c: 215:         } else {
  2738   00002E  EF1B  F000         	goto	i2l2451
  2739   000032                     i2l2449:
  2740                           
  2741                           ; BSR set to: 14
  2742                           ;timers.c: 216:             lost_flag = 1;
  2743   000032  0E01               	movlw	1
  2744   000034  6E5C               	movwf	_lost_flag^0,c
  2745   000036                     i2l2451:
  2746                           
  2747                           ; BSR set to: 14
  2748                           ;timers.c: 218:         PIR0bits.TMR0IF = 0;
  2749   000036  9B33               	bcf	51,5,b	;volatile
  2750   000038                     i2l749:
  2751                           
  2752                           ; BSR set to: 14
  2753   000038  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2754   00003A  0011               	retfie		f
  2755   00003C                     __end_of_ISR:
  2756                           	callstack 0
  2757                           
  2758                           	psect	rparam
  2759   000000                     
  2760                           	psect	temp
  2761   00005F                     btemp:
  2762                           	callstack 0
  2763   00005F                     	ds	1
  2764   000000                     int$flags	set	btemp
  2765   000000                     wtemp8	set	btemp+1
  2766   000000                     ttemp5	set	btemp+1
  2767   000000                     ttemp6	set	btemp+4
  2768   000000                     ttemp7	set	btemp+8
  2769                           
  2770                           	psect	idloc
  2771                           
  2772                           ;Config register IDLOC0 @ 0x200000
  2773                           ;	unspecified, using default values
  2774   200000                     	org	2097152
  2775   200000  FFFF               	dw	65535
  2776                           
  2777                           ;Config register IDLOC1 @ 0x200002
  2778                           ;	unspecified, using default values
  2779   200002                     	org	2097154
  2780   200002  FFFF               	dw	65535
  2781                           
  2782                           ;Config register IDLOC2 @ 0x200004
  2783                           ;	unspecified, using default values
  2784   200004                     	org	2097156
  2785   200004  FFFF               	dw	65535
  2786                           
  2787                           ;Config register IDLOC3 @ 0x200006
  2788                           ;	unspecified, using default values
  2789   200006                     	org	2097158
  2790   200006  FFFF               	dw	65535
  2791                           
  2792                           ;Config register IDLOC4 @ 0x200008
  2793                           ;	unspecified, using default values
  2794   200008                     	org	2097160
  2795   200008  FFFF               	dw	65535
  2796                           
  2797                           ;Config register IDLOC5 @ 0x20000A
  2798                           ;	unspecified, using default values
  2799   20000A                     	org	2097162
  2800   20000A  FFFF               	dw	65535
  2801                           
  2802                           ;Config register IDLOC6 @ 0x20000C
  2803                           ;	unspecified, using default values
  2804   20000C                     	org	2097164
  2805   20000C  FFFF               	dw	65535
  2806                           
  2807                           ;Config register IDLOC7 @ 0x20000E
  2808                           ;	unspecified, using default values
  2809   20000E                     	org	2097166
  2810   20000E  FFFF               	dw	65535
  2811                           
  2812                           	psect	config
  2813                           
  2814                           ;Config register CONFIG1L @ 0x300000
  2815                           ;	External Oscillator mode Selection bits
  2816                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2817                           ;	Power-up default value for COSC bits
  2818                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2819   300000                     	org	3145728
  2820   300000  AA                 	db	170
  2821                           
  2822                           ;Config register CONFIG1H @ 0x300001
  2823                           ;	unspecified, using default values
  2824                           ;	Clock Out Enable bit
  2825                           ;	CLKOUTEN = 0x1, unprogrammed default
  2826                           ;	Clock Switch Enable bit
  2827                           ;	CSWEN = 0x1, unprogrammed default
  2828                           ;	Fail-Safe Clock Monitor Enable bit
  2829                           ;	FCMEN = 0x1, unprogrammed default
  2830   300001                     	org	3145729
  2831   300001  FF                 	db	255
  2832                           
  2833                           ;Config register CONFIG2L @ 0x300002
  2834                           ;	unspecified, using default values
  2835                           ;	Master Clear Enable bit
  2836                           ;	MCLRE = 0x1, unprogrammed default
  2837                           ;	Power-up Timer Enable bit
  2838                           ;	PWRTE = 0x1, unprogrammed default
  2839                           ;	Low-power BOR enable bit
  2840                           ;	LPBOREN = 0x1, unprogrammed default
  2841                           ;	Brown-out Reset Enable bits
  2842                           ;	BOREN = 0x3, unprogrammed default
  2843   300002                     	org	3145730
  2844   300002  FF                 	db	255
  2845                           
  2846                           ;Config register CONFIG2H @ 0x300003
  2847                           ;	unspecified, using default values
  2848                           ;	Brown Out Reset Voltage selection bits
  2849                           ;	BORV = 0x3, unprogrammed default
  2850                           ;	ZCD Disable bit
  2851                           ;	ZCD = 0x1, unprogrammed default
  2852                           ;	PPSLOCK bit One-Way Set Enable bit
  2853                           ;	PPS1WAY = 0x1, unprogrammed default
  2854                           ;	Stack Full/Underflow Reset Enable bit
  2855                           ;	STVREN = 0x1, unprogrammed default
  2856                           ;	Debugger Enable bit
  2857                           ;	DEBUG = 0x1, unprogrammed default
  2858                           ;	Extended Instruction Set Enable bit
  2859                           ;	XINST = 0x1, unprogrammed default
  2860   300003                     	org	3145731
  2861   300003  FF                 	db	255
  2862                           
  2863                           ;Config register CONFIG3L @ 0x300004
  2864                           ;	WDT Period Select bits
  2865                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2866                           ;	WDT operating mode
  2867                           ;	WDTE = OFF, WDT Disabled
  2868   300004                     	org	3145732
  2869   300004  9F                 	db	159
  2870                           
  2871                           ;Config register CONFIG3H @ 0x300005
  2872                           ;	unspecified, using default values
  2873                           ;	WDT Window Select bits
  2874                           ;	WDTCWS = 0x7, unprogrammed default
  2875                           ;	WDT input clock selector
  2876                           ;	WDTCCS = 0x7, unprogrammed default
  2877   300005                     	org	3145733
  2878   300005  FF                 	db	255
  2879                           
  2880                           ;Config register CONFIG4L @ 0x300006
  2881                           ;	unspecified, using default values
  2882                           ;	Write Protection Block 0
  2883                           ;	WRT0 = 0x1, unprogrammed default
  2884                           ;	Write Protection Block 1
  2885                           ;	WRT1 = 0x1, unprogrammed default
  2886                           ;	Write Protection Block 2
  2887                           ;	WRT2 = 0x1, unprogrammed default
  2888                           ;	Write Protection Block 3
  2889                           ;	WRT3 = 0x1, unprogrammed default
  2890                           ;	Write Protection Block 3
  2891                           ;	WRT4 = 0x1, unprogrammed default
  2892                           ;	Write Protection Block 3
  2893                           ;	WRT5 = 0x1, unprogrammed default
  2894                           ;	Write Protection Block 3
  2895                           ;	WRT6 = 0x1, unprogrammed default
  2896                           ;	Write Protection Block 3
  2897                           ;	WRT7 = 0x1, unprogrammed default
  2898   300006                     	org	3145734
  2899   300006  FF                 	db	255
  2900                           
  2901                           ;Config register CONFIG4H @ 0x300007
  2902                           ;	unspecified, using default values
  2903                           ;	Configuration Register Write Protection bit
  2904                           ;	WRTC = 0x1, unprogrammed default
  2905                           ;	Boot Block Write Protection bit
  2906                           ;	WRTB = 0x1, unprogrammed default
  2907                           ;	Data EEPROM Write Protection bit
  2908                           ;	WRTD = 0x1, unprogrammed default
  2909                           ;	Scanner Enable bit
  2910                           ;	SCANE = 0x1, unprogrammed default
  2911                           ;	Low Voltage Programming Enable bit
  2912                           ;	LVP = 0x1, unprogrammed default
  2913   300007                     	org	3145735
  2914   300007  FF                 	db	255
  2915                           
  2916                           ;Config register CONFIG5L @ 0x300008
  2917                           ;	unspecified, using default values
  2918                           ;	UserNVM Program Memory Code Protection bit
  2919                           ;	CP = 0x1, unprogrammed default
  2920                           ;	DataNVM Memory Code Protection bit
  2921                           ;	CPD = 0x1, unprogrammed default
  2922   300008                     	org	3145736
  2923   300008  FF                 	db	255
  2924                           
  2925                           ;Config register CONFIG5H @ 0x300009
  2926                           ;	unspecified, using default values
  2927   300009                     	org	3145737
  2928   300009  FF                 	db	255
  2929                           
  2930                           ;Config register CONFIG6L @ 0x30000A
  2931                           ;	unspecified, using default values
  2932                           ;	Table Read Protection Block 0
  2933                           ;	EBTR0 = 0x1, unprogrammed default
  2934                           ;	Table Read Protection Block 1
  2935                           ;	EBTR1 = 0x1, unprogrammed default
  2936                           ;	Table Read Protection Block 2
  2937                           ;	EBTR2 = 0x1, unprogrammed default
  2938                           ;	Table Read Protection Block 3
  2939                           ;	EBTR3 = 0x1, unprogrammed default
  2940                           ;	Table Read Protection Block 4
  2941                           ;	EBTR4 = 0x1, unprogrammed default
  2942                           ;	Table Read Protection Block 5
  2943                           ;	EBTR5 = 0x1, unprogrammed default
  2944                           ;	Table Read Protection Block 6
  2945                           ;	EBTR6 = 0x1, unprogrammed default
  2946                           ;	Table Read Protection Block 7
  2947                           ;	EBTR7 = 0x1, unprogrammed default
  2948   30000A                     	org	3145738
  2949   30000A  FF                 	db	255
  2950                           
  2951                           ;Config register CONFIG6H @ 0x30000B
  2952                           ;	unspecified, using default values
  2953                           ;	Boot Block Table Read Protection bit
  2954                           ;	EBTRB = 0x1, unprogrammed default
  2955   30000B                     	org	3145739
  2956   30000B  FF                 	db	255
  2957                           tosu	equ	0xFFF
  2958                           tosh	equ	0xFFE
  2959                           tosl	equ	0xFFD
  2960                           stkptr	equ	0xFFC
  2961                           pclatu	equ	0xFFB
  2962                           pclath	equ	0xFFA
  2963                           pcl	equ	0xFF9
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodh	equ	0xFF4
  2969                           prodl	equ	0xFF3
  2970                           indf0	equ	0xFEF
  2971                           postinc0	equ	0xFEE
  2972                           postdec0	equ	0xFED
  2973                           preinc0	equ	0xFEC
  2974                           plusw0	equ	0xFEB
  2975                           fsr0h	equ	0xFEA
  2976                           fsr0l	equ	0xFE9
  2977                           wreg	equ	0xFE8
  2978                           indf1	equ	0xFE7
  2979                           postinc1	equ	0xFE6
  2980                           postdec1	equ	0xFE5
  2981                           preinc1	equ	0xFE4
  2982                           plusw1	equ	0xFE3
  2983                           fsr1h	equ	0xFE2
  2984                           fsr1l	equ	0xFE1
  2985                           bsr	equ	0xFE0
  2986                           indf2	equ	0xFDF
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           preinc2	equ	0xFDC
  2990                           plusw2	equ	0xFDB
  2991                           fsr2h	equ	0xFDA
  2992                           fsr2l	equ	0xFD9
  2993                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        30
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      94
    BANK0           160      0       2
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2794$buffer	PTR unsigned char  size(2) Largest target is 0

    S2794$source	PTR const unsigned char  size(2) Largest target is 0

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), main@motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    squareReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    squareReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_headbuttReverse
    _main->_squareReverse
    _squareReverse->_fullSpeedReverse
    _headbuttReverse->_fullSpeedReverse
    _stop->_setMotorPWM
    _fullSpeedReverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   20563
                                             27 COMRAM    35    35      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                    _headbuttReverse
                    _initDCmotorsPWM
                         _initUSART4
                      _squareReverse
 ---------------------------------------------------------------------------------
 (1) _squareReverse                                        4     2      2    8414
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _headbuttReverse                                      4     2      2   10574
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    4229
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedReverse                                     5     3      2    3161
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    2361
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     472
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     481
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
     _start_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _headbuttReverse
     _fullSpeedReverse
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
   _initDCmotorsPWM
   _initUSART4
   _squareReverse
     _fullSpeedReverse
     _stop

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       2       5        1.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      5E       1      100.0%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      9      0       0      57        0.0%
BITBIGSFRlllhhh      8      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      61        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 14:53:45 2024

               _turn180Delay 0047              _trail_timer_low 0114                           l27 141A  
                         l65 138A                           l68 14DA          ___wmul@multiplicand 0003  
           _trail_timer_high 0128                          l311 1444                          l223 0F6C  
                        l231 128C                          l320 154C                          l216 11FE  
                        l314 1446                          l260 10FE                          l317 146C  
                        l326 1542                          l263 116E                          l432 10B6  
                        l329 1520                          l281 13EC                          l427 101C  
                        l284 13BC                          l701 1494                          l461 14F8  
                        l704 1550                          l713 1538                          l716 152C  
                        l785 14BA                          _ISR 0008                  _start_timer 154E  
                        wreg 0FE8                  _squareDelay 0060                         ?_ISR 0001  
                       l4001 10CE                         l3051 1380                         l3043 1358  
                       l1283 1300                         l4011 1126                         l4003 10DE  
                       l1276 12F8                         l3037 1522                         l3045 135C  
                       l4013 112E                         l4005 10F6                         l3301 11AA  
                       l2181 14DC                         l3039 154E                         l3047 1366  
                       l4007 1116                         l4015 113E                         l3311 11E6  
                       l3303 11CE                         l2191 14F6                         l2183 14E6  
                       l3049 1376                         l4017 1156                         l4009 111E  
                       l3313 11F0                         l3305 11D8                         l2185 14E8  
                       l4201 0FC2                         l3315 11F2                         l3307 11DA  
                       l2187 14F2                         l4211 0FFE                         l4203 0FD6  
                       l3317 11FC                         l3309 11E4                         l2189 14F4  
                       l4221 100E                         l4213 1002                         l4205 0FDE  
                       l4143 13BE                         l4151 1398                         l4231 101A  
                       l4223 1010                         l4215 1006                         l4207 0FE6  
                       l3361 1486                         l3353 146E                         l1681 1430  
                       l1673 141C                         l4145 13CA                         l4153 13B0  
                       l4241 10A0                         l4233 102A                         l4225 1012  
                       l4217 100A                         l4209 0FEE                         l3363 148C  
                       l3355 1476                         l1683 1432                         l1675 1426  
                       l4147 13E0                         l4235 1070                         l4227 1014  
                       l4219 100C                         l3365 1490                         l3357 1478  
                       l1677 142C                         l4149 138C                         l4237 1088  
                       l4229 1016                         l3367 1492                         l3359 1482  
                       l1679 142E                         l3295 1170                         l4247 10A4  
                       l4239 1094                         l2737 1446                         l3297 1180  
                       l4249 10A6                         l1867 13EE                         l2739 1456  
                       l2771 1548                         l3299 11A6                         l4195 0F6E  
                       l2773 1518                         l4197 0FB2                         l2855 1530  
                       l2775 151C                         l3911 1296                         l3903 1496  
                       l4199 0FBA                         l2857 1534                         l2769 1544  
                       l2777 153A                         l3921 12CC                         l3913 12A8  
                       l3905 14B2                         l2779 153E                         l2859 14BE  
                       l3923 12E2                         l3915 12B0                         l3931 0E1A  
                       l3925 12EA                         l3917 12B8                         l3909 128E  
                       l3941 0ED6                         l3933 0E34                         l3927 12EC  
                       l3919 12C6                         l3943 0EF0                         l3935 0E82  
                       l3929 12F2                         l3945 0F30                         l3937 0E94  
                       l3939 0E98                         l3981 121A                         l3991 1250  
                       l3983 1222                         l3985 1238                         l3993 1260  
                       l3977 1200                         l3995 1276                         l3987 1240  
                       l3979 1204                         l3997 10BA                         l3989 1248  
                       l3999 10C2                         STR_1 0E0F                         STR_2 0E14  
                       STR_5 0E01                         u3200 0E34                 _BAUD4CONbits 0EE9  
                       u3201 0E30                         u3210 0EF0                         u3211 0EEC  
                       u3220 121A                         u3221 1216                         u3230 1238  
                       u3231 1234                         u3240 1276                         u3400 10B6  
                       u3241 1272                         u3401 10B2                         u3170 12A8  
                       u3250 128C                         _T2PR 0FBC                         u3171 12A4  
                       u3251 1288                         u3180 12C6                         u3260 10F6  
                       u3181 12C2                         u3261 10F2                         u3190 12E2  
                       u3270 1116                         u3350 102A                         u3191 12DE  
                       u3271 1112                         u3351 1026                         u1680 1456  
                       u3280 1156                         u3360 103C                         u1681 1452  
                       u3281 1152                         u3361 1034                         u1690 146C  
                       u3290 116E                         u1691 1468                         u3291 116A  
                       u3380 105E                         u3381 1056                         u3378 103E  
                       u3398 1060                         u3847 107A                         u3857 13A2  
                       u3867 13D4                         u3877 1256                         u3887 1134  
                       u3897 136C                         _main 0F6E                         fsr2h 0FDA  
                       indf2 0FDF                         fsr1l 0FE1                         fsr2l 0FD9  
                       btemp 005F                         _stop 1200                         prodh 0FF4  
                       prodl 0FF3                         start 003C            headbuttReverse@mL 0018  
          headbuttReverse@mR 0019                 ___param_bank 0000                        ??_ISR 0001  
              write_timer@tH 0002                write_timer@tL 0001                        ?_main 0001  
         _timer_high_pointer 0043                        ?_stop 0013              __end_of___lwdiv 1302  
                      i2l749 0038                        _TMR0H 0FD4                        _TMR0L 0FD3  
           ?_headbuttReverse 0018   __end_of_I2C_2_Master_Start 154E                  _write_timer 152E  
 __end_of_I2C_2_Master_Write 1522                        main@i 001E            _turnRight135Delay 0049  
                      tablat 0FF5              _turnLeft90Delay 004F                        ttemp5 0060  
                      ttemp6 0063                        ttemp7 0067                        status 0FD8  
                      wtemp8 0060              __initialization 1302                 __end_of_main 10BA  
               __end_of_stop 128E                       ??_main 001C                       ??_stop 0015  
              __activetblptr 0003               _bottomGearLeft 0056                 ?_setMotorPWM 000E  
                     _CCPR1H 0FAA                       _CCPR2H 0FA6                       _CCPR3H 0F25  
                     _CCPR4H 0F21                _squareReverse 138C                       _RC0PPS 0E62  
                     _RC4REG 0EE3                       _RE2PPS 0E74                       _RD5PPS 0E6F  
                     _RC7PPS 0E69                       _RD6PPS 0E70                       _RE4PPS 0E76  
                     i2l2451 0036                       i2l2443 000A                       i2l2445 001A  
                     i2l2447 002A                       i2l2449 0032                       _RG6PPS 0E88  
   __end_of_color_click_init 138C                       _RX4PPS 0E15                       _TX4REG 0EE4  
           _fullSpeedReverse 10BA             _turnLeft135Delay 004B                ??_Timer0_init 0003  
               ?_reset_timer 0001                 _CCPTMRS0bits 0FAD                       ___wmul 1496  
                  ??___lwdiv 000B                       clear_0 1340           fullSpeedReverse@mL 0013  
         fullSpeedReverse@mR 0014                       isa$std 0001                 __pdataCOMRAM 003F  
          _timer_low_pointer 0041                 __mediumconst 0000                       tblptrh 0FF7  
                     tblptrl 0FF6                       tblptru 0FF8               ?_squareReverse 0018  
                     stop@mL 0013                       stop@mR 0014            ??_initDCmotorsPWM 0003  
          _buggy_lights_init 13EE                   __accesstop 0060      __end_of__initialization 134E  
         ?_buggy_lights_init 0001                ___rparam_used 0001               __pcstackCOMRAM 0001  
               __pidataBANK0 1552          ??_buggy_lights_init 0001          __end_of_Timer0_init 1496  
               ?_start_timer 0001    __end_of_buggy_lights_init 141C                   __pbssBANK1 0100  
          _color_writetoaddr 14BC                 _T2CLKCONbits 0FBF           ?_color_writetoaddr 0003  
  fullSpeedReverse@rightGear 0017                      ?___wmul 0001              _bottomGearRight 0055  
        ??_color_writetoaddr 0004              ??_squareReverse 001A                      _SP4BRGH 0EE6  
                    _SP4BRGL 0EE5                 ?_write_timer 0001                      _SSP2ADD 0ED6  
                    _SSP2BUF 0ED5       color_writetoaddr@value 0003    __end_of_color_writetoaddr 14DC  
         _I2C_2_Master_Start 1544                   _initUSART4 14DC           _I2C_2_Master_Write 1516  
                    __Hparam 0000                      __Lparam 0000                  _Timer0_init 146E  
           _turningRightGear 0053          ?_I2C_2_Master_Start 0001                      ___lwdiv 128E  
        ?_I2C_2_Master_Write 0001                 __psmallconst 0E00                      __pcinit 1302  
                    __ramtop 0E00                      __ptext0 0F6E                      __ptext1 138C  
                    __ptext2 14DC                      __ptext3 1170                      __ptext4 13BE  
                    __ptext5 1200                      __ptext6 10BA                      __ptext7 0E1A  
                    __ptext8 1496                      __ptext9 128E                    _T2CONbits 0FBD  
   __end_of_fullSpeedReverse 1170                    _T2HLTbits 0FBE         ??_I2C_2_Master_Start 0002  
       ??_I2C_2_Master_Write 0002         end_of_initialization 134E            ?_color_click_init 0001  
         ??_color_click_init 0005                      postdec1 0FE5                      postdec2 0FDD  
            squareReverse@mL 0018              squareReverse@mR 0019                      postinc0 0FEE  
                    postinc2 0FDE              _initDCmotorsPWM 1170                    _PORTFbits 0F8E  
         setMotorPWM@negDuty 0012                    _TRISAbits 0F81           setMotorPWM@posDuty 0011  
                  _TRISCbits 0F83                    _TRISDbits 0F84                    _TRISEbits 0F85  
                  _TRISFbits 0F86                    _TRISGbits 0F87                    _TRISHbits 0F88  
   color_writetoaddr@address 0004                  _CCP1CONbits 0FAB                  _CCP2CONbits 0FA7  
                _CCP3CONbits 0F26                  ?_initUSART4 0001                  _CCP4CONbits 0F22  
                 main@motorL 002D                   main@motorR 0036               __end_of___wmul 14BC  
              __pidataCOMRAM 14FA          start_initialization 1302                  __end_of_ISR 003C  
           _turnRight90Delay 004D            ??_headbuttReverse 001A      __end_of_initDCmotorsPWM 1200  
                   ??___wmul 0005                  __pdataBANK0 0060                  __pbssCOMRAM 005B  
        _wall_threshold_blue 0051             ___lwdiv@dividend 0007                 ?_Timer0_init 0001  
                  __pintcode 0008                     ?___lwdiv 0007              _turningLeftGear 0054  
                __smallconst 0E00            _I2C_2_Master_Idle 1446            _I2C_2_Master_Init 141C  
          _I2C_2_Master_Stop 153A            ?_fullSpeedReverse 0013           ?_I2C_2_Master_Idle 0001  
         ?_I2C_2_Master_Init 0001                ??_setMotorPWM 000F        __end_of_squareReverse 13BE  
         ?_I2C_2_Master_Stop 0001             ___lwdiv@quotient 000C                _headbuttDelay 0045  
   initDCmotorsPWM@PWMperiod 0001           ??_fullSpeedReverse 0015                    _rampDelay 0059  
        ??_I2C_2_Master_Idle 0001          ??_I2C_2_Master_Init 0001               ___wmul@product 0005  
                   _LATAbits 0F79          ??_I2C_2_Master_Stop 0002                     _LATCbits 0F7B  
                   _LATDbits 0F7C                     _LATEbits 0F7D                     _LATFbits 0F7E  
                   _LATGbits 0F7F                     _LATHbits 0F80                     _PIE0bits 0E29  
                   i2u120_40 001A                     i2u120_41 0016                     i2u121_40 002A  
                   i2u121_41 0026                ??_reset_timer 0003                    _lost_flag 005C  
                   _PIR0bits 0E33                     _PIR4bits 0E37             ?_initDCmotorsPWM 0001  
                   _SSP2CON2 0EDA                     _SSP2STAT 0ED8                    _returning 005E  
  __end_of_I2C_2_Master_Idle 146E    __end_of_I2C_2_Master_Init 1446            ___wmul@multiplier 0001  
  __end_of_I2C_2_Master_Stop 1544                 setMotorPWM@m 000E  I2C_2_Master_Write@data_byte 0002  
            main@RGBC_colour 0025                    copy_data0 132E          __end_of_setMotorPWM 0F6E  
               ??_initUSART4 0001                     __Hrparam 0000                     __Lrparam 0000  
               _sample_count 005A          __end_of_reset_timer 152E                   _ANSELDbits 0EA7  
                 _ANSELFbits 0EB4                ??_start_timer 0001                   _T0CON0bits 0FD5  
                 _T0CON1bits 0FD6              ___lwdiv@divisor 0009           __end_of_initUSART4 14FA  
            ___lwdiv@counter 000B                     __ptext10 1358                     __ptext11 14BC  
                   __ptext20 1522                     __ptext12 1516                     __ptext21 152E  
                   __ptext13 153A                     __ptext14 1544                     __ptext15 1446  
                   __ptext16 141C                     __ptext17 13EE                     __ptext18 146E  
                   __ptext19 154E                 _SSP2CON1bits 0ED9              _headbuttReverse 13BE  
               _SSP2CON2bits 0EDA     fullSpeedReverse@leftGear 0016                     isa$xinst 0000  
                 _RC4STAbits 0EE7                     int$flags 005F                   _INTCONbits 0FF2  
              ??_write_timer 0002                  _setMotorPWM 0E1A          __end_of_start_timer 1552  
                   intlevel2 0000                 _topGearRight 0057            _manoeuvre_pointer 003F  
             main@HSV_colour 001F                  _reset_timer 1522             _color_click_init 1358  
                _topGearLeft 0058                   _SSP2DATPPS 0E1D      __end_of_headbuttReverse 13EE  
                 _SSP2CLKPPS 0E1C              _trail_manoeuvre 0100                  _return_flag 005D  
            _manoeuvre_count 005B                   _TX4STAbits 0EE8          __end_of_write_timer 153A  
