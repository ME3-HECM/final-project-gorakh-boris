

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 12 18:17:46 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    38                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    39   000000                     
    40                           ; Generated 21/07/2023 GMT
    41                           ; 
    42                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F67K40 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74   000000                     
    75                           	psect	idataCOMRAM
    76   0014AE                     __pidataCOMRAM:
    77                           	callstack 0
    78                           
    79                           ;initializer for _manoeuvre_pointer
    80   0014AE  00                 	db	low _trail_manoeuvre
    81   0014AF  01                 	db	high _trail_manoeuvre
    82                           
    83                           ;initializer for _timer_low_pointer
    84   0014B0  14                 	db	low _trail_timer_low
    85   0014B1  01                 	db	high _trail_timer_low
    86                           
    87                           ;initializer for _timer_high_pointer
    88   0014B2  28                 	db	low _trail_timer_high
    89   0014B3  01                 	db	high _trail_timer_high
    90                           
    91                           ;initializer for _squareDelay
    92   0014B4  012C               	dw	300
    93                           
    94                           ;initializer for _headbuttDelay
    95   0014B6  0046               	dw	70
    96                           
    97                           ;initializer for _turn180Delay
    98   0014B8  01FE               	dw	510
    99                           
   100                           ;initializer for _turnRight135Delay
   101   0014BA  012C               	dw	300
   102                           
   103                           ;initializer for _turnLeft135Delay
   104   0014BC  012C               	dw	300
   105                           
   106                           ;initializer for _turnRight90Delay
   107   0014BE  00AF               	dw	175
   108                           
   109                           ;initializer for _turnLeft90Delay
   110   0014C0  008C               	dw	140
   111                           
   112                           ;initializer for _wall_threshold_blue
   113   0014C2  001E               	dw	30
   114                           
   115                           ;initializer for _turningGear
   116   0014C4  32                 	db	50
   117                           
   118                           ;initializer for _topGearRight
   119   0014C5  14                 	db	20
   120                           
   121                           ;initializer for _topGearLeft
   122   0014C6  14                 	db	20
   123                           
   124                           ;initializer for _rampDelay
   125   0014C7  08                 	db	8
   126                           
   127                           ;initializer for _sample_count
   128   0014C8  14                 	db	20
   129   000000                     _TMR0H	set	4052
   130   000000                     _TX4REG	set	3812
   131   000000                     _RC4STAbits	set	3815
   132   000000                     _SP4BRGH	set	3814
   133   000000                     _LATEbits	set	3965
   134   000000                     _TRISEbits	set	3973
   135   000000                     _LATGbits	set	3967
   136   000000                     _TRISGbits	set	3975
   137   000000                     _LATFbits	set	3966
   138   000000                     _LATHbits	set	3968
   139   000000                     _TRISFbits	set	3974
   140   000000                     _TRISHbits	set	3976
   141   000000                     _SSP2CON2bits	set	3802
   142   000000                     _RX4PPS	set	3605
   143   000000                     _SSP2CLKPPS	set	3612
   144   000000                     _SSP2DATPPS	set	3613
   145   000000                     _RC7PPS	set	3689
   146   000000                     _RE2PPS	set	3700
   147   000000                     _LATAbits	set	3961
   148   000000                     _LATDbits	set	3964
   149   000000                     _TRISDbits	set	3972
   150   000000                     _PORTFbits	set	3982
   151   000000                     _T2PR	set	4028
   152   000000                     _T2CONbits	set	4029
   153   000000                     _CCPR2H	set	4006
   154   000000                     _CCPR1H	set	4010
   155   000000                     _TRISCbits	set	3971
   156   000000                     _TRISAbits	set	3969
   157   000000                     _LATCbits	set	3963
   158   000000                     _RE4PPS	set	3702
   159   000000                     _RG6PPS	set	3720
   160   000000                     _RD5PPS	set	3695
   161   000000                     _ANSELDbits	set	3751
   162   000000                     _SSP2ADD	set	3798
   163   000000                     _SSP2CON1bits	set	3801
   164   000000                     _CCPR4H	set	3873
   165   000000                     _CCPR3H	set	3877
   166   000000                     _TMR0L	set	4051
   167   000000                     _T0CON0bits	set	4053
   168   000000                     _T0CON1bits	set	4054
   169   000000                     _T2CLKCONbits	set	4031
   170   000000                     _T2HLTbits	set	4030
   171   000000                     _CCP1CONbits	set	4011
   172   000000                     _CCPTMRS0bits	set	4013
   173   000000                     _CCP2CONbits	set	4007
   174   000000                     _CCP3CONbits	set	3878
   175   000000                     _CCP4CONbits	set	3874
   176   000000                     _RC4REG	set	3811
   177   000000                     _SP4BRGL	set	3813
   178   000000                     _TX4STAbits	set	3816
   179   000000                     _BAUD4CONbits	set	3817
   180   000000                     _SSP2CON2	set	3802
   181   000000                     _SSP2STAT	set	3800
   182   000000                     _ANSELFbits	set	3764
   183   000000                     _SSP2BUF	set	3797
   184   000000                     _PIE0bits	set	3625
   185   000000                     _PIR4bits	set	3639
   186   000000                     _RC0PPS	set	3682
   187   000000                     _RD6PPS	set	3696
   188   000000                     _INTCONbits	set	4082
   189   000000                     _PIR0bits	set	3635
   190                           
   191                           	psect	smallconst
   192   000E00                     __psmallconst:
   193                           	callstack 0
   194   000E00  00                 	db	0
   195   000E01                     STR_5:
   196                           
   197                           ; BSR set to: 14
   198   000E01  25                 	db	37
   199   000E02  75                 	db	117	;'u'
   200   000E03  20                 	db	32
   201   000E04  25                 	db	37
   202   000E05  75                 	db	117	;'u'
   203   000E06  20                 	db	32
   204   000E07  25                 	db	37
   205   000E08  75                 	db	117	;'u'
   206   000E09  20                 	db	32
   207   000E0A  25                 	db	37
   208   000E0B  75                 	db	117	;'u'
   209   000E0C  20                 	db	32
   210   000E0D  0D                 	db	13
   211   000E0E  00                 	db	0
   212   000E0F                     STR_1:
   213                           
   214                           ; BSR set to: 14
   215   000E0F  25                 	db	37
   216   000E10  64                 	db	100	;'d'
   217   000E11  20                 	db	32
   218   000E12  0D                 	db	13
   219   000E13  00                 	db	0
   220   000E14                     STR_2:
   221                           
   222                           ; BSR set to: 14
   223   000E14  25                 	db	37
   224   000E15  64                 	db	100	;'d'
   225   000E16  20                 	db	32
   226   000E17  00                 	db	0
   227   000E18  00                 	db	0	; dummy byte at the end
   228   000000                     
   229                           ; #config settings
   230                           
   231                           	psect	cinit
   232   0012FE                     __pcinit:
   233                           	callstack 0
   234   0012FE                     start_initialization:
   235                           	callstack 0
   236   0012FE                     __initialization:
   237                           	callstack 0
   238                           
   239                           ; Initialize objects allocated to COMRAM (27 bytes)
   240                           ; load TBLPTR registers with __pidataCOMRAM
   241   0012FE  0EAE               	movlw	low __pidataCOMRAM
   242   001300  6EF6               	movwf	tblptrl,c
   243   001302  0E14               	movlw	high __pidataCOMRAM
   244   001304  6EF7               	movwf	tblptrh,c
   245   001306  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   246   001308  6EF8               	movwf	tblptru,c
   247   00130A  EE00  F03F         	lfsr	0,__pdataCOMRAM
   248   00130E  EE10 F01B          	lfsr	1,27
   249   001312                     copy_data0:
   250   001312  0009               	tblrd		*+
   251   001314  CFF5 FFEE          	movff	tablat,postinc0
   252   001318  50E5               	movf	postdec1,w,c
   253   00131A  50E1               	movf	fsr1l,w,c
   254   00131C  E1FA               	bnz	copy_data0
   255                           
   256                           ; Clear objects allocated to BANK1 (60 bytes)
   257   00131E  EE01  F000         	lfsr	0,__pbssBANK1
   258   001322  0E3C               	movlw	60
   259   001324                     clear_0:
   260   001324  6AEE               	clrf	postinc0,c
   261   001326  06E8               	decf	wreg,f,c
   262   001328  E1FD               	bnz	clear_0
   263                           
   264                           ; Clear objects allocated to COMRAM (4 bytes)
   265   00132A  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   266   00132C  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   267   00132E  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   268   001330  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   269   001332                     end_of_initialization:
   270                           	callstack 0
   271   001332                     __end_of__initialization:
   272                           	callstack 0
   273   001332  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   274   001334  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   275   001336  0100               	movlb	0
   276   001338  EFB7  F007         	goto	_main	;jump to C main() function
   277                           
   278                           	psect	bssCOMRAM
   279   00005A                     __pbssCOMRAM:
   280                           	callstack 0
   281   00005A                     _manoeuvre_count:
   282                           	callstack 0
   283   00005A                     	ds	1
   284   00005B                     _lost_flag:
   285                           	callstack 0
   286   00005B                     	ds	1
   287   00005C                     _return_flag:
   288                           	callstack 0
   289   00005C                     	ds	1
   290   00005D                     _returning:
   291                           	callstack 0
   292   00005D                     	ds	1
   293                           
   294                           	psect	dataCOMRAM
   295   00003F                     __pdataCOMRAM:
   296                           	callstack 0
   297   00003F                     _manoeuvre_pointer:
   298                           	callstack 0
   299   00003F                     	ds	2
   300   000041                     _timer_low_pointer:
   301                           	callstack 0
   302   000041                     	ds	2
   303   000043                     _timer_high_pointer:
   304                           	callstack 0
   305   000043                     	ds	2
   306   000045                     _squareDelay:
   307                           	callstack 0
   308   000045                     	ds	2
   309   000047                     _headbuttDelay:
   310                           	callstack 0
   311   000047                     	ds	2
   312   000049                     _turn180Delay:
   313                           	callstack 0
   314   000049                     	ds	2
   315   00004B                     _turnRight135Delay:
   316                           	callstack 0
   317   00004B                     	ds	2
   318   00004D                     _turnLeft135Delay:
   319                           	callstack 0
   320   00004D                     	ds	2
   321   00004F                     _turnRight90Delay:
   322                           	callstack 0
   323   00004F                     	ds	2
   324   000051                     _turnLeft90Delay:
   325                           	callstack 0
   326   000051                     	ds	2
   327   000053                     _wall_threshold_blue:
   328                           	callstack 0
   329   000053                     	ds	2
   330   000055                     _turningGear:
   331                           	callstack 0
   332   000055                     	ds	1
   333   000056                     _topGearRight:
   334                           	callstack 0
   335   000056                     	ds	1
   336   000057                     _topGearLeft:
   337                           	callstack 0
   338   000057                     	ds	1
   339   000058                     _rampDelay:
   340                           	callstack 0
   341   000058                     	ds	1
   342   000059                     _sample_count:
   343                           	callstack 0
   344   000059                     	ds	1
   345                           
   346                           	psect	bssBANK1
   347   000100                     __pbssBANK1:
   348                           	callstack 0
   349   000100                     _trail_manoeuvre:
   350                           	callstack 0
   351   000100                     	ds	20
   352   000114                     _trail_timer_low:
   353                           	callstack 0
   354   000114                     	ds	20
   355   000128                     _trail_timer_high:
   356                           	callstack 0
   357   000128                     	ds	20
   358                           
   359                           	psect	cstackCOMRAM
   360   000001                     __pcstackCOMRAM:
   361                           	callstack 0
   362   000001                     ??_I2C_2_Master_Idle:
   363   000001                     ?___wmul:
   364                           	callstack 0
   365   000001                     write_timer@tL:
   366                           	callstack 0
   367   000001                     initDCmotorsPWM@PWMperiod:
   368                           	callstack 0
   369   000001                     ___wmul@multiplier:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x0
   373   000001                     	ds	1
   374   000002                     I2C_2_Master_Write@data_byte:
   375                           	callstack 0
   376   000002                     write_timer@tH:
   377                           	callstack 0
   378                           
   379                           ; 1 bytes @ 0x1
   380   000002                     	ds	1
   381   000003                     color_writetoaddr@value:
   382                           	callstack 0
   383   000003                     ___wmul@multiplicand:
   384                           	callstack 0
   385                           
   386                           ; 2 bytes @ 0x2
   387   000003                     	ds	1
   388   000004                     color_writetoaddr@address:
   389                           	callstack 0
   390                           
   391                           ; 1 bytes @ 0x3
   392   000004                     	ds	1
   393   000005                     ??_color_click_init:
   394   000005                     ___wmul@product:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x4
   398   000005                     	ds	2
   399   000007                     ?___lwdiv:
   400                           	callstack 0
   401   000007                     ___lwdiv@dividend:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x6
   405   000007                     	ds	2
   406   000009                     ___lwdiv@divisor:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x8
   410   000009                     	ds	2
   411   00000B                     ___lwdiv@quotient:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0xA
   415   00000B                     	ds	2
   416   00000D                     ___lwdiv@counter:
   417                           	callstack 0
   418                           
   419                           ; 1 bytes @ 0xC
   420   00000D                     	ds	1
   421   00000E                     setMotorPWM@m:
   422                           	callstack 0
   423                           
   424                           ; 1 bytes @ 0xD
   425   00000E                     	ds	1
   426   00000F                     ??_setMotorPWM:
   427                           
   428                           ; 1 bytes @ 0xE
   429   00000F                     	ds	2
   430   000011                     setMotorPWM@posDuty:
   431                           	callstack 0
   432                           
   433                           ; 1 bytes @ 0x10
   434   000011                     	ds	1
   435   000012                     setMotorPWM@negDuty:
   436                           	callstack 0
   437                           
   438                           ; 1 bytes @ 0x11
   439   000012                     	ds	1
   440   000013                     stop@mL:
   441                           	callstack 0
   442   000013                     turnLeft@mL:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x12
   446   000013                     	ds	1
   447   000014                     stop@mR:
   448                           	callstack 0
   449   000014                     turnLeft@mR:
   450                           	callstack 0
   451                           
   452                           ; 1 bytes @ 0x13
   453   000014                     	ds	1
   454   000015                     ??_stop:
   455   000015                     ??_turnLeft:
   456                           
   457                           ; 1 bytes @ 0x14
   458   000015                     	ds	1
   459   000016                     turnLeft@leftGear:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x15
   463   000016                     	ds	1
   464   000017                     turnLeft@rightGear:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x16
   468   000017                     	ds	1
   469   000018                     turnLeft90@mL:
   470                           	callstack 0
   471                           
   472                           ; 1 bytes @ 0x17
   473   000018                     	ds	1
   474   000019                     turnLeft90@mR:
   475                           	callstack 0
   476                           
   477                           ; 1 bytes @ 0x18
   478   000019                     	ds	1
   479   00001A                     ??_turnLeft90:
   480                           
   481                           ; 1 bytes @ 0x19
   482   00001A                     	ds	2
   483   00001C                     ??_main:
   484                           
   485                           ; 1 bytes @ 0x1B
   486   00001C                     	ds	1
   487   00001D                     main@i:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x1C
   491   00001D                     	ds	2
   492   00001F                     main@HSV_colour:
   493                           	callstack 0
   494                           
   495                           ; 6 bytes @ 0x1E
   496   00001F                     	ds	6
   497   000025                     main@RGBC_colour:
   498                           	callstack 0
   499                           
   500                           ; 8 bytes @ 0x24
   501   000025                     	ds	8
   502   00002D                     main@motorL:
   503                           	callstack 0
   504                           
   505                           ; 9 bytes @ 0x2C
   506   00002D                     	ds	9
   507   000036                     main@motorR:
   508                           	callstack 0
   509                           
   510                           ; 9 bytes @ 0x35
   511   000036                     	ds	9
   512                           
   513 ;;
   514 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   515 ;;
   516 ;; *************** function _main *****************
   517 ;; Defined at:
   518 ;;		line 29 in file "main.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;  motorR          9   53[COMRAM] struct DC_motor
   523 ;;  motorL          9   44[COMRAM] struct DC_motor
   524 ;;  RGBC_colour     8   36[COMRAM] struct RGBC_val
   525 ;;  HSV_colour      6   30[COMRAM] struct HSV_val
   526 ;;  PWMcycle        2    0        unsigned int 
   527 ;;  i               2   28[COMRAM] int 
   528 ;; Return value:  Size  Location     Type
   529 ;;                  1    wreg      void 
   530 ;; Registers used:
   531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   532 ;; Tracked objects:
   533 ;;		On entry : 0/0
   534 ;;		On exit  : 0/0
   535 ;;		Unchanged: 0/0
   536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   538 ;;      Locals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   539 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   540 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   541 ;;Total ram usage:       35 bytes
   542 ;; Hardware stack levels required when called: 5
   543 ;; This function calls:
   544 ;;		_Timer0_init
   545 ;;		_buggy_lights_init
   546 ;;		_color_click_init
   547 ;;		_initDCmotorsPWM
   548 ;;		_initUSART4
   549 ;;		_stop
   550 ;;		_turnLeft90
   551 ;; This function is called by:
   552 ;;		Startup code after reset
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text0
   557   000F6E                     __ptext0:
   558                           	callstack 0
   559   000F6E                     _main:
   560                           	callstack 26
   561   000F6E                     
   562                           ;main.c: 30:     struct RGBC_val RGBC_colour;;main.c: 31:         RGBC_colour.R = 0;
   563   000F6E  0E00               	movlw	0
   564   000F70  6E26               	movwf	(main@RGBC_colour+1)^0,c
   565   000F72  0E00               	movlw	0
   566   000F74  6E25               	movwf	main@RGBC_colour^0,c
   567                           
   568                           ;main.c: 32:         RGBC_colour.G = 0;
   569   000F76  0E00               	movlw	0
   570   000F78  6E28               	movwf	(main@RGBC_colour+3)^0,c
   571   000F7A  0E00               	movlw	0
   572   000F7C  6E27               	movwf	(main@RGBC_colour+2)^0,c
   573                           
   574                           ;main.c: 33:         RGBC_colour.B = 0;
   575   000F7E  0E00               	movlw	0
   576   000F80  6E2A               	movwf	(main@RGBC_colour+5)^0,c
   577   000F82  0E00               	movlw	0
   578   000F84  6E29               	movwf	(main@RGBC_colour+4)^0,c
   579                           
   580                           ;main.c: 34:         RGBC_colour.C = 0;
   581   000F86  0E00               	movlw	0
   582   000F88  6E2C               	movwf	(main@RGBC_colour+7)^0,c
   583   000F8A  0E00               	movlw	0
   584   000F8C  6E2B               	movwf	(main@RGBC_colour+6)^0,c
   585                           
   586                           ;main.c: 36:     struct HSV_val HSV_colour;;main.c: 37:         HSV_colour.H = 0;
   587   000F8E  0E00               	movlw	0
   588   000F90  6E20               	movwf	(main@HSV_colour+1)^0,c
   589   000F92  0E00               	movlw	0
   590   000F94  6E1F               	movwf	main@HSV_colour^0,c
   591                           
   592                           ;main.c: 38:         HSV_colour.S = 0;
   593   000F96  0E00               	movlw	0
   594   000F98  6E22               	movwf	(main@HSV_colour+3)^0,c
   595   000F9A  0E00               	movlw	0
   596   000F9C  6E21               	movwf	(main@HSV_colour+2)^0,c
   597                           
   598                           ;main.c: 39:         HSV_colour.V = 0;
   599   000F9E  0E00               	movlw	0
   600   000FA0  6E24               	movwf	(main@HSV_colour+5)^0,c
   601   000FA2  0E00               	movlw	0
   602   000FA4  6E23               	movwf	(main@HSV_colour+4)^0,c
   603                           
   604                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 43:         motorL.power = 0;
   605   000FA6  0E00               	movlw	0
   606   000FA8  6E2D               	movwf	main@motorL^0,c
   607                           
   608                           ;main.c: 44:         motorL.direction = 1;
   609   000FAA  0E01               	movlw	1
   610   000FAC  6E2E               	movwf	(main@motorL+1)^0,c
   611                           
   612                           ;main.c: 45:         motorL.brakemode = 1;
   613   000FAE  0E01               	movlw	1
   614   000FB0  6E2F               	movwf	(main@motorL+2)^0,c
   615   000FB2                     
   616                           ;main.c: 46:         motorL.PWMperiod = PWMcycle;
   617   000FB2  0E00               	movlw	0
   618   000FB4  6E31               	movwf	(main@motorL+4)^0,c
   619   000FB6  0E63               	movlw	99
   620   000FB8  6E30               	movwf	(main@motorL+3)^0,c
   621   000FBA                     
   622                           ;main.c: 47:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   623   000FBA  0EAA               	movlw	170
   624   000FBC  6E32               	movwf	(main@motorL+5)^0,c
   625   000FBE  0E0F               	movlw	15
   626   000FC0  6E33               	movwf	(main@motorL+6)^0,c
   627   000FC2                     
   628                           ;main.c: 48:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   629   000FC2  0EA6               	movlw	166
   630   000FC4  6E34               	movwf	(main@motorL+7)^0,c
   631   000FC6  0E0F               	movlw	15
   632   000FC8  6E35               	movwf	(main@motorL+8)^0,c
   633                           
   634                           ;main.c: 49:         motorR.power = 0;
   635   000FCA  0E00               	movlw	0
   636   000FCC  6E36               	movwf	main@motorR^0,c
   637                           
   638                           ;main.c: 50:         motorR.direction = 1;
   639   000FCE  0E01               	movlw	1
   640   000FD0  6E37               	movwf	(main@motorR+1)^0,c
   641                           
   642                           ;main.c: 51:         motorR.brakemode = 1;
   643   000FD2  0E01               	movlw	1
   644   000FD4  6E38               	movwf	(main@motorR+2)^0,c
   645   000FD6                     
   646                           ;main.c: 52:         motorR.PWMperiod = PWMcycle;
   647   000FD6  0E00               	movlw	0
   648   000FD8  6E3A               	movwf	(main@motorR+4)^0,c
   649   000FDA  0E63               	movlw	99
   650   000FDC  6E39               	movwf	(main@motorR+3)^0,c
   651   000FDE                     
   652                           ;main.c: 53:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   653   000FDE  0E25               	movlw	37
   654   000FE0  6E3B               	movwf	(main@motorR+5)^0,c
   655   000FE2  0E0F               	movlw	15
   656   000FE4  6E3C               	movwf	(main@motorR+6)^0,c
   657   000FE6                     
   658                           ;main.c: 54:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   659   000FE6  0E21               	movlw	33
   660   000FE8  6E3D               	movwf	(main@motorR+7)^0,c
   661   000FEA  0E0F               	movlw	15
   662   000FEC  6E3E               	movwf	(main@motorR+8)^0,c
   663   000FEE                     
   664                           ;main.c: 57:     initDCmotorsPWM(PWMcycle);
   665   000FEE  0E00               	movlw	0
   666   000FF0  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   667   000FF2  0E63               	movlw	99
   668   000FF4  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   669   000FF6  ECB6  F008         	call	_initDCmotorsPWM	;wreg free
   670                           
   671                           ;main.c: 58:     buggy_lights_init();
   672   000FFA  ECD1  F009         	call	_buggy_lights_init	;wreg free
   673   000FFE                     
   674                           ;main.c: 59:     color_click_init();
   675   000FFE  EC9E  F009         	call	_color_click_init	;wreg free
   676   001002                     
   677                           ;main.c: 60:     initUSART4();
   678   001002  EC48  F00A         	call	_initUSART4	;wreg free
   679   001006                     
   680                           ;main.c: 61:     Timer0_init();
   681   001006  EC11  F00A         	call	_Timer0_init	;wreg free
   682   00100A                     
   683                           ;main.c: 65:         TRISDbits.TRISD7 = 0;
   684   00100A  9E84               	bcf	132,7,c	;volatile
   685   00100C                     
   686                           ;main.c: 66:         TRISHbits.TRISH3 = 0;
   687   00100C  9688               	bcf	136,3,c	;volatile
   688   00100E                     
   689                           ;main.c: 68:         LATDbits.LATD7 = 0;
   690   00100E  9E7C               	bcf	124,7,c	;volatile
   691   001010                     
   692                           ;main.c: 69:         LATHbits.LATH3 = 0;
   693   001010  9680               	bcf	128,3,c	;volatile
   694   001012                     
   695                           ;main.c: 73:         TRISFbits.TRISF2 = 1;
   696   001012  8486               	bsf	134,2,c	;volatile
   697   001014                     
   698                           ;main.c: 74:         TRISFbits.TRISF3 = 1;
   699   001014  8686               	bsf	134,3,c	;volatile
   700   001016                     
   701                           ;main.c: 76:         ANSELFbits.ANSELF2 = 0;
   702   001016  010E               	movlb	14	; () banked
   703   001018  95B4               	bcf	180,2,b	;volatile
   704   00101A                     
   705                           ; BSR set to: 14
   706                           ;main.c: 77:         ANSELFbits.ANSELF3 = 0;
   707   00101A  97B4               	bcf	180,3,b	;volatile
   708   00101C                     l413:
   709   00101C  B68E               	btfsc	142,3,c	;volatile
   710   00101E  EF13  F008         	goto	u2571
   711   001022  EF15  F008         	goto	u2570
   712   001026                     u2571:
   713   001026  EF0E  F008         	goto	l413
   714   00102A                     u2570:
   715   00102A                     
   716                           ;main.c: 82:     LATDbits.LATD7 = !LATDbits.LATD7;
   717   00102A  AE7C               	btfss	124,7,c	;volatile
   718   00102C  EF1A  F008         	goto	u2581
   719   001030  EF1E  F008         	goto	u2580
   720   001034                     u2581:
   721   001034  6A1C               	clrf	??_main^0,c
   722   001036  2A1C               	incf	??_main^0,f,c
   723   001038  EF1F  F008         	goto	u2598
   724   00103C                     u2580:
   725   00103C  6A1C               	clrf	??_main^0,c
   726   00103E                     u2598:
   727   00103E  321C               	rrcf	??_main^0,f,c
   728   001040  321C               	rrcf	??_main^0,f,c
   729   001042  507C               	movf	124,w,c	;volatile
   730   001044  181C               	xorwf	??_main^0,w,c
   731   001046  0B7F               	andlw	-129
   732   001048  181C               	xorwf	??_main^0,w,c
   733   00104A  6E7C               	movwf	124,c	;volatile
   734                           
   735                           ;main.c: 83:     LATHbits.LATH3 = !LATHbits.LATH3;
   736   00104C  A680               	btfss	128,3,c	;volatile
   737   00104E  EF2B  F008         	goto	u2601
   738   001052  EF2F  F008         	goto	u2600
   739   001056                     u2601:
   740   001056  6A1C               	clrf	??_main^0,c
   741   001058  2A1C               	incf	??_main^0,f,c
   742   00105A  EF30  F008         	goto	u2618
   743   00105E                     u2600:
   744   00105E  6A1C               	clrf	??_main^0,c
   745   001060                     u2618:
   746   001060  461C               	rlncf	??_main^0,f,c
   747   001062  461C               	rlncf	??_main^0,f,c
   748   001064  461C               	rlncf	??_main^0,f,c
   749   001066  5080               	movf	128,w,c	;volatile
   750   001068  181C               	xorwf	??_main^0,w,c
   751   00106A  0BF7               	andlw	-9
   752   00106C  181C               	xorwf	??_main^0,w,c
   753   00106E  6E80               	movwf	128,c	;volatile
   754   001070                     
   755                           ;main.c: 107:     int i;;main.c: 117:     for (i=0; i < 4; i++) {
   756   001070  0E00               	movlw	0
   757   001072  6E1E               	movwf	(main@i+1)^0,c
   758   001074  0E00               	movlw	0
   759   001076  6E1D               	movwf	main@i^0,c
   760   001078                     l3469:
   761                           
   762                           ;main.c: 118:         turnLeft90(&motorL, &motorR);
   763   001078  0E2D               	movlw	low main@motorL
   764   00107A  6E18               	movwf	turnLeft90@mL^0,c
   765   00107C  0E36               	movlw	low main@motorR
   766   00107E  6E19               	movwf	turnLeft90@mR^0,c
   767   001080  ECB8  F009         	call	_turnLeft90	;wreg free
   768   001084                     
   769                           ;main.c: 119:     }
   770   001084  4A1D               	infsnz	main@i^0,f,c
   771   001086  2A1E               	incf	(main@i+1)^0,f,c
   772   001088  BE1E               	btfsc	(main@i+1)^0,7,c
   773   00108A  EF50  F008         	goto	u2621
   774   00108E  501E               	movf	(main@i+1)^0,w,c
   775   001090  E109               	bnz	u2620
   776   001092  0E04               	movlw	4
   777   001094  5C1D               	subwf	main@i^0,w,c
   778   001096  A0D8               	btfss	status,0,c
   779   001098  EF50  F008         	goto	u2621
   780   00109C  EF52  F008         	goto	u2620
   781   0010A0                     u2621:
   782   0010A0  EF3C  F008         	goto	l3469
   783   0010A4                     u2620:
   784   0010A4                     
   785                           ;main.c: 120:     stop(&motorL, &motorR);
   786   0010A4  0E2D               	movlw	low main@motorL
   787   0010A6  6E13               	movwf	stop@mL^0,c
   788   0010A8  0E36               	movlw	low main@motorR
   789   0010AA  6E14               	movwf	stop@mR^0,c
   790   0010AC  ECFE  F008         	call	_stop	;wreg free
   791   0010B0  EF1E  F000         	goto	start
   792   0010B4                     __end_of_main:
   793                           	callstack 0
   794                           
   795 ;; *************** function _turnLeft90 *****************
   796 ;; Defined at:
   797 ;;		line 179 in file "dc_motor.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;  mL              1   23[COMRAM] PTR struct DC_motor
   800 ;;		 -> main@motorL(9), 
   801 ;;  mR              1   24[COMRAM] PTR struct DC_motor
   802 ;;		 -> main@motorR(9), 
   803 ;; Auto vars:     Size  Location     Type
   804 ;;		None
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   814 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   816 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   817 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   818 ;;Total ram usage:        4 bytes
   819 ;; Hardware stack levels used: 1
   820 ;; Hardware stack levels required when called: 4
   821 ;; This function calls:
   822 ;;		_stop
   823 ;;		_turnLeft
   824 ;; This function is called by:
   825 ;;		_main
   826 ;;		_card_red
   827 ;;		_card_green
   828 ;;		_card_yellow
   829 ;;		_card_pink
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text1
   834   001370                     __ptext1:
   835                           	callstack 0
   836   001370                     _turnLeft90:
   837                           	callstack 26
   838   001370                     
   839                           ;dc_motor.c: 179: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 180: {;dc_moto
      +                          r.c: 181:     turnLeft(mL, mR);
   840   001370  C018  F013         	movff	turnLeft90@mL,turnLeft@mL
   841   001374  C019  F014         	movff	turnLeft90@mR,turnLeft@mR
   842   001378  EC5A  F008         	call	_turnLeft	;wreg free
   843   00137C                     
   844                           ;dc_motor.c: 182:     _delay((unsigned long)((turnLeft90Delay)*(64000000/4000.0)));
   845   00137C  0E0C               	movlw	12
   846   00137E  6E1B               	movwf	(??_turnLeft90+1)^0,c
   847   001380  0E5E               	movlw	94
   848   001382  6E1A               	movwf	??_turnLeft90^0,c
   849   001384  0E0D               	movlw	13
   850   001386                     u3147:
   851   001386  2EE8               	decfsz	wreg,f,c
   852   001388  D7FE               	bra	u3147
   853   00138A  2E1A               	decfsz	??_turnLeft90^0,f,c
   854   00138C  D7FC               	bra	u3147
   855   00138E  2E1B               	decfsz	(??_turnLeft90+1)^0,f,c
   856   001390  D7FA               	bra	u3147
   857   001392  0000               	nop	
   858   001394                     
   859                           ;dc_motor.c: 183:     stop(mL, mR);
   860   001394  C018  F013         	movff	turnLeft90@mL,stop@mL
   861   001398  C019  F014         	movff	turnLeft90@mR,stop@mR
   862   00139C  ECFE  F008         	call	_stop	;wreg free
   863   0013A0  0012               	return		;funcret
   864   0013A2                     __end_of_turnLeft90:
   865                           	callstack 0
   866                           
   867 ;; *************** function _turnLeft *****************
   868 ;; Defined at:
   869 ;;		line 107 in file "dc_motor.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   872 ;;		 -> main@motorL(9), 
   873 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   874 ;;		 -> main@motorR(9), 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;  rightGear       1   22[COMRAM] unsigned char 
   877 ;;  leftGear        1   21[COMRAM] unsigned char 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   888 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   889 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   890 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   891 ;;Total ram usage:        5 bytes
   892 ;; Hardware stack levels used: 1
   893 ;; Hardware stack levels required when called: 3
   894 ;; This function calls:
   895 ;;		_setMotorPWM
   896 ;; This function is called by:
   897 ;;		_turnLeft90
   898 ;;		_turnLeft135
   899 ;;		_UTurn
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text2
   904   0010B4                     __ptext2:
   905                           	callstack 0
   906   0010B4                     _turnLeft:
   907                           	callstack 26
   908   0010B4  0E32               	movlw	50
   909   0010B6  6E16               	movwf	turnLeft@leftGear^0,c
   910   0010B8  0E32               	movlw	50
   911   0010BA  6E17               	movwf	turnLeft@rightGear^0,c
   912   0010BC                     
   913                           ;dc_motor.c: 111:     (mL->direction) = 0;
   914   0010BC  5013               	movf	turnLeft@mL^0,w,c
   915   0010BE  6ED9               	movwf	fsr2l,c
   916   0010C0  6ADA               	clrf	fsr2h,c
   917   0010C2  0E01               	movlw	1
   918   0010C4  26D9               	addwf	fsr2l,f,c
   919   0010C6  6ADF               	clrf	indf2,c
   920   0010C8                     
   921                           ;dc_motor.c: 112:     (mR->direction) = 1;
   922   0010C8  5014               	movf	turnLeft@mR^0,w,c
   923   0010CA  6ED9               	movwf	fsr2l,c
   924   0010CC  6ADA               	clrf	fsr2h,c
   925   0010CE  0E01               	movlw	1
   926   0010D0  26D9               	addwf	fsr2l,f,c
   927   0010D2  0E01               	movlw	1
   928   0010D4  6EDF               	movwf	indf2,c
   929                           
   930                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
   931   0010D6  EF9D  F008         	goto	l2897
   932   0010DA                     l2885:
   933                           
   934                           ;dc_motor.c: 114:         if (mL->power<leftGear) {mL->power++;}
   935   0010DA  5013               	movf	turnLeft@mL^0,w,c
   936   0010DC  6ED9               	movwf	fsr2l,c
   937   0010DE  6ADA               	clrf	fsr2h,c
   938   0010E0  5016               	movf	turnLeft@leftGear^0,w,c
   939   0010E2  5CDE               	subwf	postinc2,w,c
   940   0010E4  B0D8               	btfsc	status,0,c
   941   0010E6  EF77  F008         	goto	u1841
   942   0010EA  EF79  F008         	goto	u1840
   943   0010EE                     u1841:
   944   0010EE  EF7D  F008         	goto	l230
   945   0010F2                     u1840:
   946   0010F2  5013               	movf	turnLeft@mL^0,w,c
   947   0010F4  6ED9               	movwf	fsr2l,c
   948   0010F6  6ADA               	clrf	fsr2h,c
   949   0010F8  2ADF               	incf	indf2,f,c
   950   0010FA                     l230:
   951                           
   952                           ;dc_motor.c: 115:         if (mR->power<rightGear) {mR->power++;}
   953   0010FA  5014               	movf	turnLeft@mR^0,w,c
   954   0010FC  6ED9               	movwf	fsr2l,c
   955   0010FE  6ADA               	clrf	fsr2h,c
   956   001100  5017               	movf	turnLeft@rightGear^0,w,c
   957   001102  5CDE               	subwf	postinc2,w,c
   958   001104  B0D8               	btfsc	status,0,c
   959   001106  EF87  F008         	goto	u1851
   960   00110A  EF89  F008         	goto	u1850
   961   00110E                     u1851:
   962   00110E  EF8D  F008         	goto	l2891
   963   001112                     u1850:
   964   001112  5014               	movf	turnLeft@mR^0,w,c
   965   001114  6ED9               	movwf	fsr2l,c
   966   001116  6ADA               	clrf	fsr2h,c
   967   001118  2ADF               	incf	indf2,f,c
   968   00111A                     l2891:
   969                           
   970                           ;dc_motor.c: 116:         setMotorPWM(mL);
   971   00111A  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
   972   00111E  EC0D  F007         	call	_setMotorPWM	;wreg free
   973   001122                     
   974                           ;dc_motor.c: 117:         setMotorPWM(mR);
   975   001122  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
   976   001126  EC0D  F007         	call	_setMotorPWM	;wreg free
   977   00112A                     
   978                           ;dc_motor.c: 118:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
   979   00112A  0EA7               	movlw	167
   980   00112C  6E15               	movwf	??_turnLeft^0,c
   981   00112E  0E3A               	movlw	58
   982   001130                     u3157:
   983   001130  2EE8               	decfsz	wreg,f,c
   984   001132  D7FE               	bra	u3157
   985   001134  2E15               	decfsz	??_turnLeft^0,f,c
   986   001136  D7FC               	bra	u3157
   987   001138  D000               	nop2	
   988   00113A                     l2897:
   989                           
   990                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
   991   00113A  5013               	movf	turnLeft@mL^0,w,c
   992   00113C  6ED9               	movwf	fsr2l,c
   993   00113E  6ADA               	clrf	fsr2h,c
   994   001140  5016               	movf	turnLeft@leftGear^0,w,c
   995   001142  5CDE               	subwf	postinc2,w,c
   996   001144  A0D8               	btfss	status,0,c
   997   001146  EFA7  F008         	goto	u1861
   998   00114A  EFA9  F008         	goto	u1860
   999   00114E                     u1861:
  1000   00114E  EF6D  F008         	goto	l2885
  1001   001152                     u1860:
  1002   001152  5014               	movf	turnLeft@mR^0,w,c
  1003   001154  6ED9               	movwf	fsr2l,c
  1004   001156  6ADA               	clrf	fsr2h,c
  1005   001158  5017               	movf	turnLeft@rightGear^0,w,c
  1006   00115A  5CDE               	subwf	postinc2,w,c
  1007   00115C  A0D8               	btfss	status,0,c
  1008   00115E  EFB3  F008         	goto	u1871
  1009   001162  EFB5  F008         	goto	u1870
  1010   001166                     u1871:
  1011   001166  EF6D  F008         	goto	l2885
  1012   00116A                     u1870:
  1013   00116A  0012               	return		;funcret
  1014   00116C                     __end_of_turnLeft:
  1015                           	callstack 0
  1016                           
  1017 ;; *************** function _stop *****************
  1018 ;; Defined at:
  1019 ;;		line 93 in file "dc_motor.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1022 ;;		 -> main@motorL(9), 
  1023 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1024 ;;		 -> main@motorR(9), 
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;		None
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1036 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1039 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1040 ;;Total ram usage:        3 bytes
  1041 ;; Hardware stack levels used: 1
  1042 ;; Hardware stack levels required when called: 3
  1043 ;; This function calls:
  1044 ;;		_setMotorPWM
  1045 ;; This function is called by:
  1046 ;;		_turnLeft90
  1047 ;;		_main
  1048 ;;		_turnRight90
  1049 ;;		_turnLeft135
  1050 ;;		_turnRight135
  1051 ;;		_UTurn
  1052 ;;		_headbuttReverse
  1053 ;;		_squareReverse
  1054 ;;		_forward_navigation
  1055 ;;		_return_to_sender
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           	psect	text3
  1060   0011FC                     __ptext3:
  1061                           	callstack 0
  1062   0011FC                     _stop:
  1063                           	callstack 26
  1064   0011FC                     
  1065                           ;dc_motor.c: 93: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 94: {;dc_motor.c: 95:
      +                               while ((mL->power>0) || (mR->power>0)){
  1066   0011FC  EF2E  F009         	goto	l2875
  1067   001200                     l2861:
  1068                           
  1069                           ;dc_motor.c: 96:         if (mL->power>0) {mL->power--;}
  1070   001200  5013               	movf	stop@mL^0,w,c
  1071   001202  6ED9               	movwf	fsr2l,c
  1072   001204  6ADA               	clrf	fsr2h,c
  1073   001206  50DF               	movf	indf2,w,c
  1074   001208  B4D8               	btfsc	status,2,c
  1075   00120A  EF09  F009         	goto	u1801
  1076   00120E  EF0B  F009         	goto	u1800
  1077   001212                     u1801:
  1078   001212  EF0F  F009         	goto	l2865
  1079   001216                     u1800:
  1080   001216  5013               	movf	stop@mL^0,w,c
  1081   001218  6ED9               	movwf	fsr2l,c
  1082   00121A  6ADA               	clrf	fsr2h,c
  1083   00121C  06DF               	decf	indf2,f,c
  1084   00121E                     l2865:
  1085                           
  1086                           ;dc_motor.c: 97:         if (mR->power>0) {mR->power--;}
  1087   00121E  5014               	movf	stop@mR^0,w,c
  1088   001220  6ED9               	movwf	fsr2l,c
  1089   001222  6ADA               	clrf	fsr2h,c
  1090   001224  50DF               	movf	indf2,w,c
  1091   001226  B4D8               	btfsc	status,2,c
  1092   001228  EF18  F009         	goto	u1811
  1093   00122C  EF1A  F009         	goto	u1810
  1094   001230                     u1811:
  1095   001230  EF1E  F009         	goto	l2869
  1096   001234                     u1810:
  1097   001234  5014               	movf	stop@mR^0,w,c
  1098   001236  6ED9               	movwf	fsr2l,c
  1099   001238  6ADA               	clrf	fsr2h,c
  1100   00123A  06DF               	decf	indf2,f,c
  1101   00123C                     l2869:
  1102                           
  1103                           ;dc_motor.c: 98:         setMotorPWM(mL);
  1104   00123C  C013  F00E         	movff	stop@mL,setMotorPWM@m
  1105   001240  EC0D  F007         	call	_setMotorPWM	;wreg free
  1106   001244                     
  1107                           ;dc_motor.c: 99:         setMotorPWM(mR);
  1108   001244  C014  F00E         	movff	stop@mR,setMotorPWM@m
  1109   001248  EC0D  F007         	call	_setMotorPWM	;wreg free
  1110   00124C                     
  1111                           ;dc_motor.c: 100:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1112   00124C  0EA7               	movlw	167
  1113   00124E  6E15               	movwf	??_stop^0,c
  1114   001250  0E3A               	movlw	58
  1115   001252                     u3167:
  1116   001252  2EE8               	decfsz	wreg,f,c
  1117   001254  D7FE               	bra	u3167
  1118   001256  2E15               	decfsz	??_stop^0,f,c
  1119   001258  D7FC               	bra	u3167
  1120   00125A  D000               	nop2	
  1121   00125C                     l2875:
  1122                           
  1123                           ;dc_motor.c: 95:     while ((mL->power>0) || (mR->power>0)){
  1124   00125C  5013               	movf	stop@mL^0,w,c
  1125   00125E  6ED9               	movwf	fsr2l,c
  1126   001260  6ADA               	clrf	fsr2h,c
  1127   001262  50DF               	movf	indf2,w,c
  1128   001264  A4D8               	btfss	status,2,c
  1129   001266  EF37  F009         	goto	u1821
  1130   00126A  EF39  F009         	goto	u1820
  1131   00126E                     u1821:
  1132   00126E  EF00  F009         	goto	l2861
  1133   001272                     u1820:
  1134   001272  5014               	movf	stop@mR^0,w,c
  1135   001274  6ED9               	movwf	fsr2l,c
  1136   001276  6ADA               	clrf	fsr2h,c
  1137   001278  50DF               	movf	indf2,w,c
  1138   00127A  A4D8               	btfss	status,2,c
  1139   00127C  EF42  F009         	goto	u1831
  1140   001280  EF44  F009         	goto	u1830
  1141   001284                     u1831:
  1142   001284  EF00  F009         	goto	l2861
  1143   001288                     u1830:
  1144   001288  0012               	return		;funcret
  1145   00128A                     __end_of_stop:
  1146                           	callstack 0
  1147                           
  1148 ;; *************** function _setMotorPWM *****************
  1149 ;; Defined at:
  1150 ;;		line 68 in file "dc_motor.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1153 ;;		 -> main@motorR(9), main@motorL(9), 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  negDuty         1   17[COMRAM] unsigned char 
  1156 ;;  posDuty         1   16[COMRAM] unsigned char 
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1166 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1167 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1168 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1169 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1170 ;;Total ram usage:        5 bytes
  1171 ;; Hardware stack levels used: 1
  1172 ;; Hardware stack levels required when called: 2
  1173 ;; This function calls:
  1174 ;;		___lwdiv
  1175 ;;		___wmul
  1176 ;; This function is called by:
  1177 ;;		_stop
  1178 ;;		_turnLeft
  1179 ;;		_turnRight
  1180 ;;		_fullSpeedAhead
  1181 ;;		_fullSpeedReverse
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text4
  1186   000E1A                     __ptext4:
  1187                           	callstack 0
  1188   000E1A                     _setMotorPWM:
  1189                           	callstack 26
  1190   000E1A                     
  1191                           ;dc_motor.c: 68: void setMotorPWM(DC_motor *m);dc_motor.c: 69: {;dc_motor.c: 70:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 72:     if(m->brakemode) {
  1192   000E1A  500E               	movf	setMotorPWM@m^0,w,c
  1193   000E1C  6ED9               	movwf	fsr2l,c
  1194   000E1E  6ADA               	clrf	fsr2h,c
  1195   000E20  0E02               	movlw	2
  1196   000E22  26D9               	addwf	fsr2l,f,c
  1197   000E24  50DF               	movf	indf2,w,c
  1198   000E26  B4D8               	btfsc	status,2,c
  1199   000E28  EF18  F007         	goto	u1731
  1200   000E2C  EF1A  F007         	goto	u1730
  1201   000E30                     u1731:
  1202   000E30  EF4A  F007         	goto	l2777
  1203   000E34                     u1730:
  1204   000E34                     
  1205                           ;dc_motor.c: 73:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  1206   000E34  500E               	movf	setMotorPWM@m^0,w,c
  1207   000E36  6ED9               	movwf	fsr2l,c
  1208   000E38  6ADA               	clrf	fsr2h,c
  1209   000E3A  50DF               	movf	indf2,w,c
  1210   000E3C  6E0F               	movwf	??_setMotorPWM^0,c
  1211   000E3E  500F               	movf	??_setMotorPWM^0,w,c
  1212   000E40  6E01               	movwf	___wmul@multiplier^0,c
  1213   000E42  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1214   000E44  500E               	movf	setMotorPWM@m^0,w,c
  1215   000E46  6ED9               	movwf	fsr2l,c
  1216   000E48  6ADA               	clrf	fsr2h,c
  1217   000E4A  0E03               	movlw	3
  1218   000E4C  26D9               	addwf	fsr2l,f,c
  1219   000E4E  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1220   000E52  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1221   000E56  EC25  F00A         	call	___wmul	;wreg free
  1222   000E5A  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1223   000E5E  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1224   000E62  0E00               	movlw	0
  1225   000E64  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1226   000E66  0E64               	movlw	100
  1227   000E68  6E09               	movwf	___lwdiv@divisor^0,c
  1228   000E6A  EC45  F009         	call	___lwdiv	;wreg free
  1229   000E6E  500E               	movf	setMotorPWM@m^0,w,c
  1230   000E70  6ED9               	movwf	fsr2l,c
  1231   000E72  6ADA               	clrf	fsr2h,c
  1232   000E74  0E03               	movlw	3
  1233   000E76  26D9               	addwf	fsr2l,f,c
  1234   000E78  50DF               	movf	indf2,w,c
  1235   000E7A  6E10               	movwf	(??_setMotorPWM+1)^0,c
  1236   000E7C  5007               	movf	?___lwdiv^0,w,c
  1237   000E7E  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  1238   000E80  6E11               	movwf	setMotorPWM@posDuty^0,c
  1239   000E82                     
  1240                           ;dc_motor.c: 74:         negDuty=(unsigned char)(m->PWMperiod);
  1241   000E82  500E               	movf	setMotorPWM@m^0,w,c
  1242   000E84  6ED9               	movwf	fsr2l,c
  1243   000E86  6ADA               	clrf	fsr2h,c
  1244   000E88  0E03               	movlw	3
  1245   000E8A  26D9               	addwf	fsr2l,f,c
  1246   000E8C  50DF               	movf	indf2,w,c
  1247   000E8E  6E12               	movwf	setMotorPWM@negDuty^0,c
  1248                           
  1249                           ;dc_motor.c: 75:     }
  1250   000E90  EF6B  F007         	goto	l2781
  1251   000E94                     l2777:
  1252                           
  1253                           ;dc_motor.c: 77:         posDuty=0;
  1254   000E94  0E00               	movlw	0
  1255   000E96  6E11               	movwf	setMotorPWM@posDuty^0,c
  1256   000E98                     
  1257                           ;dc_motor.c: 78:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  1258   000E98  500E               	movf	setMotorPWM@m^0,w,c
  1259   000E9A  6ED9               	movwf	fsr2l,c
  1260   000E9C  6ADA               	clrf	fsr2h,c
  1261   000E9E  50DF               	movf	indf2,w,c
  1262   000EA0  6E0F               	movwf	??_setMotorPWM^0,c
  1263   000EA2  500F               	movf	??_setMotorPWM^0,w,c
  1264   000EA4  6E01               	movwf	___wmul@multiplier^0,c
  1265   000EA6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1266   000EA8  500E               	movf	setMotorPWM@m^0,w,c
  1267   000EAA  6ED9               	movwf	fsr2l,c
  1268   000EAC  6ADA               	clrf	fsr2h,c
  1269   000EAE  0E03               	movlw	3
  1270   000EB0  26D9               	addwf	fsr2l,f,c
  1271   000EB2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1272   000EB6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1273   000EBA  EC25  F00A         	call	___wmul	;wreg free
  1274   000EBE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1275   000EC2  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1276   000EC6  0E00               	movlw	0
  1277   000EC8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1278   000ECA  0E64               	movlw	100
  1279   000ECC  6E09               	movwf	___lwdiv@divisor^0,c
  1280   000ECE  EC45  F009         	call	___lwdiv	;wreg free
  1281   000ED2  5007               	movf	?___lwdiv^0,w,c
  1282   000ED4  6E12               	movwf	setMotorPWM@negDuty^0,c
  1283   000ED6                     l2781:
  1284                           
  1285                           ;dc_motor.c: 81:     if (m->direction) {
  1286   000ED6  500E               	movf	setMotorPWM@m^0,w,c
  1287   000ED8  6ED9               	movwf	fsr2l,c
  1288   000EDA  6ADA               	clrf	fsr2h,c
  1289   000EDC  0E01               	movlw	1
  1290   000EDE  26D9               	addwf	fsr2l,f,c
  1291   000EE0  50DF               	movf	indf2,w,c
  1292   000EE2  B4D8               	btfsc	status,2,c
  1293   000EE4  EF76  F007         	goto	u1741
  1294   000EE8  EF78  F007         	goto	u1740
  1295   000EEC                     u1741:
  1296   000EEC  EF98  F007         	goto	l2785
  1297   000EF0                     u1740:
  1298   000EF0                     
  1299                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=posDuty;
  1300   000EF0  500E               	movf	setMotorPWM@m^0,w,c
  1301   000EF2  6ED9               	movwf	fsr2l,c
  1302   000EF4  6ADA               	clrf	fsr2h,c
  1303   000EF6  0E05               	movlw	5
  1304   000EF8  26D9               	addwf	fsr2l,f,c
  1305   000EFA  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1306   000EFE  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1307   000F02  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1308   000F06  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1309   000F0A  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1310                           
  1311                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=negDuty;
  1312   000F0E  500E               	movf	setMotorPWM@m^0,w,c
  1313   000F10  6ED9               	movwf	fsr2l,c
  1314   000F12  6ADA               	clrf	fsr2h,c
  1315   000F14  0E07               	movlw	7
  1316   000F16  26D9               	addwf	fsr2l,f,c
  1317   000F18  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1318   000F1C  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1319   000F20  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1320   000F24  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1321   000F28  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1322                           
  1323                           ;dc_motor.c: 84:     } else {
  1324   000F2C  EFB6  F007         	goto	l217
  1325   000F30                     l2785:
  1326                           
  1327                           ;dc_motor.c: 85:         *(m->posDutyHighByte)=negDuty;
  1328   000F30  500E               	movf	setMotorPWM@m^0,w,c
  1329   000F32  6ED9               	movwf	fsr2l,c
  1330   000F34  6ADA               	clrf	fsr2h,c
  1331   000F36  0E05               	movlw	5
  1332   000F38  26D9               	addwf	fsr2l,f,c
  1333   000F3A  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1334   000F3E  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1335   000F42  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1336   000F46  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1337   000F4A  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1338                           
  1339                           ;dc_motor.c: 86:         *(m->negDutyHighByte)=posDuty;
  1340   000F4E  500E               	movf	setMotorPWM@m^0,w,c
  1341   000F50  6ED9               	movwf	fsr2l,c
  1342   000F52  6ADA               	clrf	fsr2h,c
  1343   000F54  0E07               	movlw	7
  1344   000F56  26D9               	addwf	fsr2l,f,c
  1345   000F58  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1346   000F5C  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1347   000F60  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1348   000F64  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1349   000F68  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1350   000F6C                     l217:
  1351   000F6C  0012               	return		;funcret
  1352   000F6E                     __end_of_setMotorPWM:
  1353                           	callstack 0
  1354                           
  1355 ;; *************** function ___wmul *****************
  1356 ;; Defined at:
  1357 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;  multiplier      2    0[COMRAM] unsigned int 
  1360 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;  product         2    4[COMRAM] unsigned int 
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  2    0[COMRAM] unsigned int 
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, status,0, prodl, prodh
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1372 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1375 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1376 ;;Total ram usage:        6 bytes
  1377 ;; Hardware stack levels used: 1
  1378 ;; Hardware stack levels required when called: 1
  1379 ;; This function calls:
  1380 ;;		Nothing
  1381 ;; This function is called by:
  1382 ;;		_setMotorPWM
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text5
  1387   00144A                     __ptext5:
  1388                           	callstack 0
  1389   00144A                     ___wmul:
  1390                           	callstack 26
  1391   00144A  5001               	movf	___wmul@multiplier^0,w,c
  1392   00144C  0203               	mulwf	___wmul@multiplicand^0,c
  1393   00144E  CFF3 F005          	movff	prodl,___wmul@product
  1394   001452  CFF4 F006          	movff	prodh,___wmul@product+1
  1395   001456  5001               	movf	___wmul@multiplier^0,w,c
  1396   001458  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1397   00145A  50F3               	movf	243,w,c
  1398   00145C  2606               	addwf	(___wmul@product+1)^0,f,c
  1399   00145E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1400   001460  0203               	mulwf	___wmul@multiplicand^0,c
  1401   001462  50F3               	movf	243,w,c
  1402   001464  2606               	addwf	(___wmul@product+1)^0,f,c
  1403   001466  C005  F001         	movff	___wmul@product,?___wmul
  1404   00146A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1405   00146E  0012               	return		;funcret
  1406   001470                     __end_of___wmul:
  1407                           	callstack 0
  1408                           
  1409 ;; *************** function ___lwdiv *****************
  1410 ;; Defined at:
  1411 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  dividend        2    6[COMRAM] unsigned int 
  1414 ;;  divisor         2    8[COMRAM] unsigned int 
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  quotient        2   10[COMRAM] unsigned int 
  1417 ;;  counter         1   12[COMRAM] unsigned char 
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  2    6[COMRAM] unsigned int 
  1420 ;; Registers used:
  1421 ;;		wreg, status,2, status,0
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1428 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1430 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1431 ;;Total ram usage:        7 bytes
  1432 ;; Hardware stack levels used: 1
  1433 ;; Hardware stack levels required when called: 1
  1434 ;; This function calls:
  1435 ;;		Nothing
  1436 ;; This function is called by:
  1437 ;;		_setMotorPWM
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text6
  1442   00128A                     __ptext6:
  1443                           	callstack 0
  1444   00128A                     ___lwdiv:
  1445                           	callstack 26
  1446   00128A  0E00               	movlw	0
  1447   00128C  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  1448   00128E  0E00               	movlw	0
  1449   001290  6E0B               	movwf	___lwdiv@quotient^0,c
  1450   001292  5009               	movf	___lwdiv@divisor^0,w,c
  1451   001294  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1452   001296  B4D8               	btfsc	status,2,c
  1453   001298  EF50  F009         	goto	u1701
  1454   00129C  EF52  F009         	goto	u1700
  1455   0012A0                     u1701:
  1456   0012A0  EF7A  F009         	goto	l1244
  1457   0012A4                     u1700:
  1458   0012A4  0E01               	movlw	1
  1459   0012A6  6E0D               	movwf	___lwdiv@counter^0,c
  1460   0012A8  EF5A  F009         	goto	l2721
  1461   0012AC                     l2719:
  1462   0012AC  90D8               	bcf	status,0,c
  1463   0012AE  3609               	rlcf	___lwdiv@divisor^0,f,c
  1464   0012B0  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1465   0012B2  2A0D               	incf	___lwdiv@counter^0,f,c
  1466   0012B4                     l2721:
  1467   0012B4  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1468   0012B6  EF5F  F009         	goto	u1711
  1469   0012BA  EF61  F009         	goto	u1710
  1470   0012BE                     u1711:
  1471   0012BE  EF56  F009         	goto	l2719
  1472   0012C2                     u1710:
  1473   0012C2                     l2723:
  1474   0012C2  90D8               	bcf	status,0,c
  1475   0012C4  360B               	rlcf	___lwdiv@quotient^0,f,c
  1476   0012C6  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1477   0012C8  5009               	movf	___lwdiv@divisor^0,w,c
  1478   0012CA  5C07               	subwf	___lwdiv@dividend^0,w,c
  1479   0012CC  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1480   0012CE  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1481   0012D0  A0D8               	btfss	status,0,c
  1482   0012D2  EF6D  F009         	goto	u1721
  1483   0012D6  EF6F  F009         	goto	u1720
  1484   0012DA                     u1721:
  1485   0012DA  EF74  F009         	goto	l2731
  1486   0012DE                     u1720:
  1487   0012DE  5009               	movf	___lwdiv@divisor^0,w,c
  1488   0012E0  5E07               	subwf	___lwdiv@dividend^0,f,c
  1489   0012E2  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1490   0012E4  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1491   0012E6  800B               	bsf	___lwdiv@quotient^0,0,c
  1492   0012E8                     l2731:
  1493   0012E8  90D8               	bcf	status,0,c
  1494   0012EA  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1495   0012EC  3209               	rrcf	___lwdiv@divisor^0,f,c
  1496   0012EE  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1497   0012F0  EF61  F009         	goto	l2723
  1498   0012F4                     l1244:
  1499   0012F4  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1500   0012F8  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1501   0012FC  0012               	return		;funcret
  1502   0012FE                     __end_of___lwdiv:
  1503                           	callstack 0
  1504                           
  1505 ;; *************** function _initUSART4 *****************
  1506 ;; Defined at:
  1507 ;;		line 8 in file "serial.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;		None
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		wreg, status,2
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1525 ;;Total ram usage:        0 bytes
  1526 ;; Hardware stack levels used: 1
  1527 ;; Hardware stack levels required when called: 1
  1528 ;; This function calls:
  1529 ;;		Nothing
  1530 ;; This function is called by:
  1531 ;;		_main
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text7
  1536   001490                     __ptext7:
  1537                           	callstack 0
  1538   001490                     _initUSART4:
  1539                           	callstack 29
  1540   001490                     
  1541                           ;serial.c: 9:     RC0PPS = 0x12;
  1542   001490  0E12               	movlw	18
  1543   001492  010E               	movlb	14	; () banked
  1544   001494  6F62               	movwf	98,b	;volatile
  1545                           
  1546                           ;serial.c: 10:     RX4PPS = 0x11;
  1547   001496  0E11               	movlw	17
  1548   001498  6F15               	movwf	21,b	;volatile
  1549   00149A                     
  1550                           ; BSR set to: 14
  1551                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1552   00149A  97E9               	bcf	233,3,b	;volatile
  1553   00149C                     
  1554                           ; BSR set to: 14
  1555                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1556   00149C  95E8               	bcf	232,2,b	;volatile
  1557                           
  1558                           ;serial.c: 14:     SP4BRGL = 51;
  1559   00149E  0E33               	movlw	51
  1560   0014A0  6FE5               	movwf	229,b	;volatile
  1561                           
  1562                           ;serial.c: 15:     SP4BRGH = 0;
  1563   0014A2  0E00               	movlw	0
  1564   0014A4  6FE6               	movwf	230,b	;volatile
  1565   0014A6                     
  1566                           ; BSR set to: 14
  1567                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1568   0014A6  89E7               	bsf	231,4,b	;volatile
  1569   0014A8                     
  1570                           ; BSR set to: 14
  1571                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1572   0014A8  8BE8               	bsf	232,5,b	;volatile
  1573   0014AA                     
  1574                           ; BSR set to: 14
  1575                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1576   0014AA  8FE7               	bsf	231,7,b	;volatile
  1577   0014AC                     
  1578                           ; BSR set to: 14
  1579   0014AC  0012               	return		;funcret
  1580   0014AE                     __end_of_initUSART4:
  1581                           	callstack 0
  1582                           
  1583 ;; *************** function _initDCmotorsPWM *****************
  1584 ;; Defined at:
  1585 ;;		line 7 in file "dc_motor.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		wreg, status,2
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1599 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1602 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1603 ;;Total ram usage:        2 bytes
  1604 ;; Hardware stack levels used: 1
  1605 ;; Hardware stack levels required when called: 1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text8
  1614   00116C                     __ptext8:
  1615                           	callstack 0
  1616   00116C                     _initDCmotorsPWM:
  1617                           	callstack 29
  1618   00116C                     
  1619                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
  1620   00116C  9485               	bcf	133,2,c	;volatile
  1621                           
  1622                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1623   00116E  9885               	bcf	133,4,c	;volatile
  1624                           
  1625                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
  1626   001170  9E83               	bcf	131,7,c	;volatile
  1627                           
  1628                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
  1629   001172  9C87               	bcf	135,6,c	;volatile
  1630                           
  1631                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
  1632   001174  947D               	bcf	125,2,c	;volatile
  1633                           
  1634                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
  1635   001176  987D               	bcf	125,4,c	;volatile
  1636                           
  1637                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
  1638   001178  9E7B               	bcf	123,7,c	;volatile
  1639                           
  1640                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
  1641   00117A  9C7F               	bcf	127,6,c	;volatile
  1642   00117C                     
  1643                           ;dc_motor.c: 19:     RE2PPS=0x05;
  1644   00117C  0E05               	movlw	5
  1645   00117E  010E               	movlb	14	; () banked
  1646   001180  6F74               	movwf	116,b	;volatile
  1647                           
  1648                           ;dc_motor.c: 20:     RE4PPS=0x06;
  1649   001182  0E06               	movlw	6
  1650   001184  6F76               	movwf	118,b	;volatile
  1651                           
  1652                           ;dc_motor.c: 21:     RC7PPS=0x07;
  1653   001186  0E07               	movlw	7
  1654   001188  6F69               	movwf	105,b	;volatile
  1655                           
  1656                           ;dc_motor.c: 22:     RG6PPS=0x08;
  1657   00118A  0E08               	movlw	8
  1658   00118C  6F88               	movwf	136,b	;volatile
  1659                           
  1660                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  1661   00118E  50BD               	movf	189,w,c	;volatile
  1662   001190  0B8F               	andlw	-113
  1663   001192  0940               	iorlw	64
  1664   001194  6EBD               	movwf	189,c	;volatile
  1665                           
  1666                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  1667   001196  0EE0               	movlw	-32
  1668   001198  16BE               	andwf	190,f,c	;volatile
  1669                           
  1670                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  1671   00119A  50BF               	movf	191,w,c	;volatile
  1672   00119C  0BF0               	andlw	-16
  1673   00119E  0901               	iorlw	1
  1674   0011A0  6EBF               	movwf	191,c	;volatile
  1675   0011A2                     
  1676                           ; BSR set to: 14
  1677                           ;dc_motor.c: 31:     T2PR=(unsigned char)PWMperiod;
  1678   0011A2  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1679   0011A6                     
  1680                           ; BSR set to: 14
  1681                           ;dc_motor.c: 32:     T2CONbits.ON=1;
  1682   0011A6  8EBD               	bsf	189,7,c	;volatile
  1683                           
  1684                           ;dc_motor.c: 36:         CCPR1H=0;
  1685   0011A8  0E00               	movlw	0
  1686   0011AA  6EAA               	movwf	170,c	;volatile
  1687                           
  1688                           ;dc_motor.c: 37:         CCPR2H=0;
  1689   0011AC  0E00               	movlw	0
  1690   0011AE  6EA6               	movwf	166,c	;volatile
  1691                           
  1692                           ;dc_motor.c: 38:         CCPR3H=0;
  1693   0011B0  0E00               	movlw	0
  1694   0011B2  010F               	movlb	15	; () banked
  1695   0011B4  6F25               	movwf	37,b	;volatile
  1696                           
  1697                           ;dc_motor.c: 39:         CCPR4H=0;
  1698   0011B6  0E00               	movlw	0
  1699   0011B8  6F21               	movwf	33,b	;volatile
  1700                           
  1701                           ;dc_motor.c: 42:         CCPTMRS0bits.C1TSEL=0;
  1702   0011BA  0EFC               	movlw	-4
  1703   0011BC  16AD               	andwf	173,f,c	;volatile
  1704                           
  1705                           ;dc_motor.c: 43:         CCPTMRS0bits.C2TSEL=0;
  1706   0011BE  0EF3               	movlw	-13
  1707   0011C0  16AD               	andwf	173,f,c	;volatile
  1708                           
  1709                           ;dc_motor.c: 44:         CCPTMRS0bits.C3TSEL=0;
  1710   0011C2  0ECF               	movlw	-49
  1711   0011C4  16AD               	andwf	173,f,c	;volatile
  1712                           
  1713                           ;dc_motor.c: 45:         CCPTMRS0bits.C4TSEL=0;
  1714   0011C6  0E3F               	movlw	-193
  1715   0011C8  16AD               	andwf	173,f,c	;volatile
  1716   0011CA                     
  1717                           ; BSR set to: 15
  1718                           ;dc_motor.c: 48:         CCP1CONbits.FMT=1;
  1719   0011CA  88AB               	bsf	171,4,c	;volatile
  1720                           
  1721                           ;dc_motor.c: 49:         CCP1CONbits.CCP1MODE=0b1100;
  1722   0011CC  50AB               	movf	171,w,c	;volatile
  1723   0011CE  0BF0               	andlw	-16
  1724   0011D0  090C               	iorlw	12
  1725   0011D2  6EAB               	movwf	171,c	;volatile
  1726   0011D4                     
  1727                           ; BSR set to: 15
  1728                           ;dc_motor.c: 50:         CCP1CONbits.EN=1;
  1729   0011D4  8EAB               	bsf	171,7,c	;volatile
  1730   0011D6                     
  1731                           ; BSR set to: 15
  1732                           ;dc_motor.c: 52:         CCP2CONbits.FMT=1;
  1733   0011D6  88A7               	bsf	167,4,c	;volatile
  1734                           
  1735                           ;dc_motor.c: 53:         CCP2CONbits.CCP2MODE=0b1100;
  1736   0011D8  50A7               	movf	167,w,c	;volatile
  1737   0011DA  0BF0               	andlw	-16
  1738   0011DC  090C               	iorlw	12
  1739   0011DE  6EA7               	movwf	167,c	;volatile
  1740   0011E0                     
  1741                           ; BSR set to: 15
  1742                           ;dc_motor.c: 54:         CCP2CONbits.EN=1;
  1743   0011E0  8EA7               	bsf	167,7,c	;volatile
  1744   0011E2                     
  1745                           ; BSR set to: 15
  1746                           ;dc_motor.c: 56:         CCP3CONbits.FMT=1;
  1747   0011E2  8926               	bsf	38,4,b	;volatile
  1748                           
  1749                           ;dc_motor.c: 57:         CCP3CONbits.CCP3MODE=0b1100;
  1750   0011E4  5126               	movf	38,w,b	;volatile
  1751   0011E6  0BF0               	andlw	-16
  1752   0011E8  090C               	iorlw	12
  1753   0011EA  6F26               	movwf	38,b	;volatile
  1754   0011EC                     
  1755                           ; BSR set to: 15
  1756                           ;dc_motor.c: 58:         CCP3CONbits.EN=1;
  1757   0011EC  8F26               	bsf	38,7,b	;volatile
  1758   0011EE                     
  1759                           ; BSR set to: 15
  1760                           ;dc_motor.c: 60:         CCP4CONbits.FMT=1;
  1761   0011EE  8922               	bsf	34,4,b	;volatile
  1762                           
  1763                           ;dc_motor.c: 61:         CCP4CONbits.CCP4MODE=0b1100;
  1764   0011F0  5122               	movf	34,w,b	;volatile
  1765   0011F2  0BF0               	andlw	-16
  1766   0011F4  090C               	iorlw	12
  1767   0011F6  6F22               	movwf	34,b	;volatile
  1768   0011F8                     
  1769                           ; BSR set to: 15
  1770                           ;dc_motor.c: 62:         CCP4CONbits.EN=1;
  1771   0011F8  8F22               	bsf	34,7,b	;volatile
  1772   0011FA                     
  1773                           ; BSR set to: 15
  1774   0011FA  0012               	return		;funcret
  1775   0011FC                     __end_of_initDCmotorsPWM:
  1776                           	callstack 0
  1777                           
  1778 ;; *************** function _color_click_init *****************
  1779 ;; Defined at:
  1780 ;;		line 7 in file "color.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1798 ;;Total ram usage:        1 bytes
  1799 ;; Hardware stack levels used: 1
  1800 ;; Hardware stack levels required when called: 4
  1801 ;; This function calls:
  1802 ;;		_I2C_2_Master_Init
  1803 ;;		_color_writetoaddr
  1804 ;; This function is called by:
  1805 ;;		_main
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text9
  1810   00133C                     __ptext9:
  1811                           	callstack 0
  1812   00133C                     _color_click_init:
  1813                           	callstack 26
  1814   00133C                     
  1815                           ;color.c: 10:     I2C_2_Master_Init();
  1816   00133C  ECE8  F009         	call	_I2C_2_Master_Init	;wreg free
  1817   001340                     
  1818                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  1819   001340  0E01               	movlw	1
  1820   001342  6E03               	movwf	color_writetoaddr@value^0,c
  1821   001344  0E00               	movlw	0
  1822   001346  EC38  F00A         	call	_color_writetoaddr
  1823   00134A                     
  1824                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1825   00134A  0E3F               	movlw	63
  1826   00134C  6E05               	movwf	??_color_click_init^0,c
  1827   00134E  0E55               	movlw	85
  1828   001350                     u3177:
  1829   001350  2EE8               	decfsz	wreg,f,c
  1830   001352  D7FE               	bra	u3177
  1831   001354  2E05               	decfsz	??_color_click_init^0,f,c
  1832   001356  D7FC               	bra	u3177
  1833   001358  0000               	nop	
  1834   00135A                     
  1835                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  1836   00135A  0E03               	movlw	3
  1837   00135C  6E03               	movwf	color_writetoaddr@value^0,c
  1838   00135E  0E00               	movlw	0
  1839   001360  EC38  F00A         	call	_color_writetoaddr
  1840   001364                     
  1841                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  1842   001364  0ED5               	movlw	213
  1843   001366  6E03               	movwf	color_writetoaddr@value^0,c
  1844   001368  0E01               	movlw	1
  1845   00136A  EC38  F00A         	call	_color_writetoaddr
  1846   00136E  0012               	return		;funcret
  1847   001370                     __end_of_color_click_init:
  1848                           	callstack 0
  1849                           
  1850 ;; *************** function _color_writetoaddr *****************
  1851 ;; Defined at:
  1852 ;;		line 28 in file "color.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;  address         1    wreg     unsigned char 
  1855 ;;  value           1    2[COMRAM] unsigned char 
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;  address         1    3[COMRAM] unsigned char 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		wreg, status,2, status,0, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1867 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1868 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1870 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1871 ;;Total ram usage:        2 bytes
  1872 ;; Hardware stack levels used: 1
  1873 ;; Hardware stack levels required when called: 3
  1874 ;; This function calls:
  1875 ;;		_I2C_2_Master_Start
  1876 ;;		_I2C_2_Master_Stop
  1877 ;;		_I2C_2_Master_Write
  1878 ;; This function is called by:
  1879 ;;		_color_click_init
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text10
  1884   001470                     __ptext10:
  1885                           	callstack 0
  1886   001470                     _color_writetoaddr:
  1887                           	callstack 26
  1888                           
  1889                           ;incstack = 0
  1890                           ;color_writetoaddr@address stored from wreg
  1891   001470  6E04               	movwf	color_writetoaddr@address^0,c
  1892   001472                     
  1893                           ;color.c: 29:     I2C_2_Master_Start();
  1894   001472  EC7C  F00A         	call	_I2C_2_Master_Start	;wreg free
  1895                           
  1896                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  1897   001476  0E52               	movlw	82
  1898   001478  EC65  F00A         	call	_I2C_2_Master_Write
  1899                           
  1900                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  1901   00147C  5004               	movf	color_writetoaddr@address^0,w,c
  1902   00147E  0980               	iorlw	128
  1903   001480  EC65  F00A         	call	_I2C_2_Master_Write
  1904                           
  1905                           ;color.c: 32:     I2C_2_Master_Write(value);
  1906   001484  5003               	movf	color_writetoaddr@value^0,w,c
  1907   001486  EC65  F00A         	call	_I2C_2_Master_Write
  1908                           
  1909                           ;color.c: 33:     I2C_2_Master_Stop();
  1910   00148A  EC77  F00A         	call	_I2C_2_Master_Stop	;wreg free
  1911   00148E  0012               	return		;funcret
  1912   001490                     __end_of_color_writetoaddr:
  1913                           	callstack 0
  1914                           
  1915 ;; *************** function _I2C_2_Master_Write *****************
  1916 ;; Defined at:
  1917 ;;		line 45 in file "i2c.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  data_byte       1    wreg     unsigned char 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  data_byte       1    1[COMRAM] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, status,2, status,0, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1934 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1935 ;;Total ram usage:        1 bytes
  1936 ;; Hardware stack levels used: 1
  1937 ;; Hardware stack levels required when called: 2
  1938 ;; This function calls:
  1939 ;;		_I2C_2_Master_Idle
  1940 ;; This function is called by:
  1941 ;;		_color_writetoaddr
  1942 ;;		_color_read_Red
  1943 ;;		_color_read_Green
  1944 ;;		_color_read_Blue
  1945 ;;		_color_read_Clear
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text11
  1950   0014CA                     __ptext11:
  1951                           	callstack 0
  1952   0014CA                     _I2C_2_Master_Write:
  1953                           	callstack 26
  1954                           
  1955                           ;incstack = 0
  1956                           ;I2C_2_Master_Write@data_byte stored from wreg
  1957   0014CA  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1958   0014CC                     
  1959                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1960   0014CC  ECFD  F009         	call	_I2C_2_Master_Idle	;wreg free
  1961   0014D0                     
  1962                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1963   0014D0  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1964   0014D4  0012               	return		;funcret
  1965   0014D6                     __end_of_I2C_2_Master_Write:
  1966                           	callstack 0
  1967                           
  1968 ;; *************** function _I2C_2_Master_Stop *****************
  1969 ;; Defined at:
  1970 ;;		line 39 in file "i2c.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;		None
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg, status,2, status,0, cstack
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1988 ;;Total ram usage:        0 bytes
  1989 ;; Hardware stack levels used: 1
  1990 ;; Hardware stack levels required when called: 2
  1991 ;; This function calls:
  1992 ;;		_I2C_2_Master_Idle
  1993 ;; This function is called by:
  1994 ;;		_color_writetoaddr
  1995 ;;		_color_read_Red
  1996 ;;		_color_read_Green
  1997 ;;		_color_read_Blue
  1998 ;;		_color_read_Clear
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text12
  2003   0014EE                     __ptext12:
  2004                           	callstack 0
  2005   0014EE                     _I2C_2_Master_Stop:
  2006                           	callstack 26
  2007   0014EE                     
  2008                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2009   0014EE  ECFD  F009         	call	_I2C_2_Master_Idle	;wreg free
  2010   0014F2                     
  2011                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2012   0014F2  010E               	movlb	14	; () banked
  2013   0014F4  85DA               	bsf	218,2,b	;volatile
  2014   0014F6                     
  2015                           ; BSR set to: 14
  2016   0014F6  0012               	return		;funcret
  2017   0014F8                     __end_of_I2C_2_Master_Stop:
  2018                           	callstack 0
  2019                           
  2020 ;; *************** function _I2C_2_Master_Start *****************
  2021 ;; Defined at:
  2022 ;;		line 27 in file "i2c.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;		None
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, status,2, status,0, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2040 ;;Total ram usage:        0 bytes
  2041 ;; Hardware stack levels used: 1
  2042 ;; Hardware stack levels required when called: 2
  2043 ;; This function calls:
  2044 ;;		_I2C_2_Master_Idle
  2045 ;; This function is called by:
  2046 ;;		_color_writetoaddr
  2047 ;;		_color_read_Red
  2048 ;;		_color_read_Green
  2049 ;;		_color_read_Blue
  2050 ;;		_color_read_Clear
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text13
  2055   0014F8                     __ptext13:
  2056                           	callstack 0
  2057   0014F8                     _I2C_2_Master_Start:
  2058                           	callstack 26
  2059   0014F8                     
  2060                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2061   0014F8  ECFD  F009         	call	_I2C_2_Master_Idle	;wreg free
  2062   0014FC                     
  2063                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2064   0014FC  010E               	movlb	14	; () banked
  2065   0014FE  81DA               	bsf	218,0,b	;volatile
  2066   001500                     
  2067                           ; BSR set to: 14
  2068   001500  0012               	return		;funcret
  2069   001502                     __end_of_I2C_2_Master_Start:
  2070                           	callstack 0
  2071                           
  2072 ;; *************** function _I2C_2_Master_Idle *****************
  2073 ;; Defined at:
  2074 ;;		line 22 in file "i2c.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, status,0
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2091 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2092 ;;Total ram usage:        1 bytes
  2093 ;; Hardware stack levels used: 1
  2094 ;; Hardware stack levels required when called: 1
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_I2C_2_Master_Start
  2099 ;;		_I2C_2_Master_Stop
  2100 ;;		_I2C_2_Master_Write
  2101 ;;		_I2C_2_Master_RepStart
  2102 ;;		_I2C_2_Master_Read
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text14
  2107   0013FA                     __ptext14:
  2108                           	callstack 0
  2109   0013FA                     _I2C_2_Master_Idle:
  2110                           	callstack 26
  2111   0013FA                     l308:
  2112   0013FA  010E               	movlb	14	; () banked
  2113   0013FC  B5D8               	btfsc	216,2,b	;volatile
  2114   0013FE  EF03  F00A         	goto	u1681
  2115   001402  EF05  F00A         	goto	u1680
  2116   001406                     u1681:
  2117   001406  EFFD  F009         	goto	l308
  2118   00140A                     u1680:
  2119   00140A                     
  2120                           ; BSR set to: 14
  2121   00140A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2122   00140E  0E1F               	movlw	31
  2123   001410  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  2124   001412  A4D8               	btfss	status,2,c
  2125   001414  EF0E  F00A         	goto	u1691
  2126   001418  EF10  F00A         	goto	u1690
  2127   00141C                     u1691:
  2128   00141C  EFFD  F009         	goto	l308
  2129   001420                     u1690:
  2130   001420                     
  2131                           ; BSR set to: 14
  2132   001420  0012               	return		;funcret
  2133   001422                     __end_of_I2C_2_Master_Idle:
  2134                           	callstack 0
  2135                           
  2136 ;; *************** function _I2C_2_Master_Init *****************
  2137 ;; Defined at:
  2138 ;;		line 4 in file "i2c.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;		None
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2156 ;;Total ram usage:        0 bytes
  2157 ;; Hardware stack levels used: 1
  2158 ;; Hardware stack levels required when called: 1
  2159 ;; This function calls:
  2160 ;;		Nothing
  2161 ;; This function is called by:
  2162 ;;		_color_click_init
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text15
  2167   0013D0                     __ptext15:
  2168                           	callstack 0
  2169   0013D0                     _I2C_2_Master_Init:
  2170                           	callstack 28
  2171   0013D0                     
  2172                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2173   0013D0  010E               	movlb	14	; () banked
  2174   0013D2  51D9               	movf	217,w,b	;volatile
  2175   0013D4  0BF0               	andlw	-16
  2176   0013D6  0908               	iorlw	8
  2177   0013D8  6FD9               	movwf	217,b	;volatile
  2178   0013DA                     
  2179                           ; BSR set to: 14
  2180                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2181   0013DA  8BD9               	bsf	217,5,b	;volatile
  2182                           
  2183                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2184   0013DC  0E9F               	movlw	159
  2185   0013DE  6FD6               	movwf	214,b	;volatile
  2186   0013E0                     
  2187                           ; BSR set to: 14
  2188                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2189   0013E0  8A84               	bsf	132,5,c	;volatile
  2190   0013E2                     
  2191                           ; BSR set to: 14
  2192                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2193   0013E2  8C84               	bsf	132,6,c	;volatile
  2194   0013E4                     
  2195                           ; BSR set to: 14
  2196                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2197   0013E4  9BA7               	bcf	167,5,b	;volatile
  2198   0013E6                     
  2199                           ; BSR set to: 14
  2200                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2201   0013E6  9DA7               	bcf	167,6,b	;volatile
  2202                           
  2203                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2204   0013E8  0E1D               	movlw	29
  2205   0013EA  6F1D               	movwf	29,b	;volatile
  2206                           
  2207                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2208   0013EC  0E1E               	movlw	30
  2209   0013EE  6F1C               	movwf	28,b	;volatile
  2210                           
  2211                           ;i2c.c: 18:   RD5PPS=0x1C;
  2212   0013F0  0E1C               	movlw	28
  2213   0013F2  6F6F               	movwf	111,b	;volatile
  2214                           
  2215                           ;i2c.c: 19:   RD6PPS=0x1B;
  2216   0013F4  0E1B               	movlw	27
  2217   0013F6  6F70               	movwf	112,b	;volatile
  2218   0013F8                     
  2219                           ; BSR set to: 14
  2220   0013F8  0012               	return		;funcret
  2221   0013FA                     __end_of_I2C_2_Master_Init:
  2222                           	callstack 0
  2223                           
  2224 ;; *************** function _buggy_lights_init *****************
  2225 ;; Defined at:
  2226 ;;		line 7 in file "buggy_lights.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		None
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2244 ;;Total ram usage:        0 bytes
  2245 ;; Hardware stack levels used: 1
  2246 ;; Hardware stack levels required when called: 1
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_main
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text16
  2255   0013A2                     __ptext16:
  2256                           	callstack 0
  2257   0013A2                     _buggy_lights_init:
  2258                           	callstack 29
  2259   0013A2                     
  2260                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
  2261   0013A2  9884               	bcf	132,4,c	;volatile
  2262                           
  2263                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
  2264   0013A4  9288               	bcf	136,1,c	;volatile
  2265                           
  2266                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
  2267   0013A6  9684               	bcf	132,3,c	;volatile
  2268                           
  2269                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
  2270   0013A8  9086               	bcf	134,0,c	;volatile
  2271                           
  2272                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
  2273   0013AA  9088               	bcf	136,0,c	;volatile
  2274                           
  2275                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
  2276   0013AC  987C               	bcf	124,4,c	;volatile
  2277                           
  2278                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
  2279   0013AE  9280               	bcf	128,1,c	;volatile
  2280                           
  2281                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
  2282   0013B0  967C               	bcf	124,3,c	;volatile
  2283                           
  2284                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
  2285   0013B2  907E               	bcf	126,0,c	;volatile
  2286                           
  2287                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
  2288   0013B4  9080               	bcf	128,0,c	;volatile
  2289                           
  2290                           ;buggy_lights.c: 26:             TRISGbits.TRISG1 = 0;
  2291   0013B6  9287               	bcf	135,1,c	;volatile
  2292                           
  2293                           ;buggy_lights.c: 27:             TRISAbits.TRISA4 = 0;
  2294   0013B8  9881               	bcf	129,4,c	;volatile
  2295                           
  2296                           ;buggy_lights.c: 28:             TRISFbits.TRISF7 = 0;
  2297   0013BA  9E86               	bcf	134,7,c	;volatile
  2298                           
  2299                           ;buggy_lights.c: 30:             LATGbits.LATG1 = 0;
  2300   0013BC  927F               	bcf	127,1,c	;volatile
  2301                           
  2302                           ;buggy_lights.c: 31:             LATAbits.LATA4 = 0;
  2303   0013BE  9879               	bcf	121,4,c	;volatile
  2304                           
  2305                           ;buggy_lights.c: 32:             LATFbits.LATF7 = 0;
  2306   0013C0  9E7E               	bcf	126,7,c	;volatile
  2307                           
  2308                           ;buggy_lights.c: 36:             TRISGbits.TRISG0 = 0;
  2309   0013C2  9087               	bcf	135,0,c	;volatile
  2310                           
  2311                           ;buggy_lights.c: 37:             TRISEbits.TRISE7 = 0;
  2312   0013C4  9E85               	bcf	133,7,c	;volatile
  2313                           
  2314                           ;buggy_lights.c: 38:             TRISAbits.TRISA3 = 0;
  2315   0013C6  9681               	bcf	129,3,c	;volatile
  2316                           
  2317                           ;buggy_lights.c: 40:             LATGbits.LATG0 = 0;
  2318   0013C8  907F               	bcf	127,0,c	;volatile
  2319                           
  2320                           ;buggy_lights.c: 41:             LATEbits.LATE7 = 0;
  2321   0013CA  9E7D               	bcf	125,7,c	;volatile
  2322                           
  2323                           ;buggy_lights.c: 42:             LATAbits.LATA3 = 0;
  2324   0013CC  9679               	bcf	121,3,c	;volatile
  2325   0013CE  0012               	return		;funcret
  2326   0013D0                     __end_of_buggy_lights_init:
  2327                           	callstack 0
  2328                           
  2329 ;; *************** function _Timer0_init *****************
  2330 ;; Defined at:
  2331 ;;		line 7 in file "timers.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;		None
  2334 ;; Auto vars:     Size  Location     Type
  2335 ;;		None
  2336 ;; Return value:  Size  Location     Type
  2337 ;;                  1    wreg      void 
  2338 ;; Registers used:
  2339 ;;		wreg, status,2, cstack
  2340 ;; Tracked objects:
  2341 ;;		On entry : 0/0
  2342 ;;		On exit  : 0/0
  2343 ;;		Unchanged: 0/0
  2344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2349 ;;Total ram usage:        0 bytes
  2350 ;; Hardware stack levels used: 1
  2351 ;; Hardware stack levels required when called: 3
  2352 ;; This function calls:
  2353 ;;		_reset_timer
  2354 ;;		_start_timer
  2355 ;; This function is called by:
  2356 ;;		_main
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           	psect	text17
  2361   001422                     __ptext17:
  2362                           	callstack 0
  2363   001422                     _Timer0_init:
  2364                           	callstack 27
  2365   001422                     
  2366                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  2367   001422  50D6               	movf	214,w,c	;volatile
  2368   001424  0B1F               	andlw	-225
  2369   001426  0940               	iorlw	64
  2370   001428  6ED6               	movwf	214,c	;volatile
  2371   00142A                     
  2372                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  2373   00142A  88D6               	bsf	214,4,c	;volatile
  2374   00142C                     
  2375                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  2376   00142C  88D5               	bsf	213,4,c	;volatile
  2377                           
  2378                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  2379   00142E  50D6               	movf	214,w,c	;volatile
  2380   001430  0BF0               	andlw	-16
  2381   001432  090E               	iorlw	14
  2382   001434  6ED6               	movwf	214,c	;volatile
  2383   001436                     
  2384                           ;timers.c: 18:     reset_timer();
  2385   001436  EC6B  F00A         	call	_reset_timer	;wreg free
  2386   00143A                     
  2387                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  2388   00143A  8ED5               	bsf	213,7,c	;volatile
  2389                           
  2390                           ;timers.c: 21:     start_timer();
  2391   00143C  EC81  F00A         	call	_start_timer	;wreg free
  2392   001440                     
  2393                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
  2394   001440  010E               	movlb	14	; () banked
  2395   001442  8B29               	bsf	41,5,b	;volatile
  2396   001444                     
  2397                           ; BSR set to: 14
  2398                           ;timers.c: 23:     INTCONbits.PEIE = 1;
  2399   001444  8CF2               	bsf	242,6,c	;volatile
  2400   001446                     
  2401                           ; BSR set to: 14
  2402                           ;timers.c: 24:     INTCONbits.GIE = 1;
  2403   001446  8EF2               	bsf	242,7,c	;volatile
  2404   001448                     
  2405                           ; BSR set to: 14
  2406   001448  0012               	return		;funcret
  2407   00144A                     __end_of_Timer0_init:
  2408                           	callstack 0
  2409                           
  2410 ;; *************** function _start_timer *****************
  2411 ;; Defined at:
  2412 ;;		line 30 in file "timers.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;		None
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;		None
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  1    wreg      void 
  2419 ;; Registers used:
  2420 ;;		None
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2430 ;;Total ram usage:        0 bytes
  2431 ;; Hardware stack levels used: 1
  2432 ;; Hardware stack levels required when called: 1
  2433 ;; This function calls:
  2434 ;;		Nothing
  2435 ;; This function is called by:
  2436 ;;		_Timer0_init
  2437 ;;		_forward_navigation
  2438 ;;		_return_to_sender
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text18
  2443   001502                     __ptext18:
  2444                           	callstack 0
  2445   001502                     _start_timer:
  2446                           	callstack 28
  2447   001502                     
  2448                           ;timers.c: 32:     T0CON0bits.T0EN=1;
  2449   001502  8ED5               	bsf	213,7,c	;volatile
  2450   001504  0012               	return		;funcret
  2451   001506                     __end_of_start_timer:
  2452                           	callstack 0
  2453                           
  2454 ;; *************** function _reset_timer *****************
  2455 ;; Defined at:
  2456 ;;		line 70 in file "timers.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used: 1
  2476 ;; Hardware stack levels required when called: 2
  2477 ;; This function calls:
  2478 ;;		_write_timer
  2479 ;; This function is called by:
  2480 ;;		_Timer0_init
  2481 ;;		_forward_navigation
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text19
  2486   0014D6                     __ptext19:
  2487                           	callstack 0
  2488   0014D6                     _reset_timer:
  2489                           	callstack 27
  2490   0014D6                     
  2491                           ;timers.c: 72:     write_timer(0, 0);
  2492   0014D6  0E00               	movlw	0
  2493   0014D8  6E01               	movwf	write_timer@tL^0,c
  2494   0014DA  0E00               	movlw	0
  2495   0014DC  EC71  F00A         	call	_write_timer
  2496   0014E0  0012               	return		;funcret
  2497   0014E2                     __end_of_reset_timer:
  2498                           	callstack 0
  2499                           
  2500 ;; *************** function _write_timer *****************
  2501 ;; Defined at:
  2502 ;;		line 58 in file "timers.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;  tH              1    wreg     unsigned char 
  2505 ;;  tL              1    0[COMRAM] unsigned char 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  tH              1    1[COMRAM] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  1    wreg      void 
  2510 ;; Registers used:
  2511 ;;		wreg
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2517 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2520 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2521 ;;Total ram usage:        2 bytes
  2522 ;; Hardware stack levels used: 1
  2523 ;; Hardware stack levels required when called: 1
  2524 ;; This function calls:
  2525 ;;		Nothing
  2526 ;; This function is called by:
  2527 ;;		_reset_timer
  2528 ;;		_return_to_sender
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text20
  2533   0014E2                     __ptext20:
  2534                           	callstack 0
  2535   0014E2                     _write_timer:
  2536                           	callstack 27
  2537                           
  2538                           ;incstack = 0
  2539                           ;write_timer@tH stored from wreg
  2540   0014E2  6E02               	movwf	write_timer@tH^0,c
  2541   0014E4                     
  2542                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
  2543   0014E4  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  2544   0014E8                     
  2545                           ;timers.c: 64:     TMR0L = tL;
  2546   0014E8  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  2547   0014EC  0012               	return		;funcret
  2548   0014EE                     __end_of_write_timer:
  2549                           	callstack 0
  2550                           
  2551 ;; *************** function _ISR *****************
  2552 ;; Defined at:
  2553 ;;		line 210 in file "timers.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2571 ;;Total ram usage:        0 bytes
  2572 ;; Hardware stack levels used: 1
  2573 ;; This function calls:
  2574 ;;		Nothing
  2575 ;; This function is called by:
  2576 ;;		Interrupt level 2
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	intcode
  2581   000008                     __pintcode:
  2582                           	callstack 0
  2583   000008                     _ISR:
  2584                           	callstack 26
  2585                           
  2586                           ;incstack = 0
  2587   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2588   00000A                     
  2589                           ;timers.c: 212:     if (PIR0bits.TMR0IF) {
  2590   00000A  010E               	movlb	14	; () banked
  2591   00000C  AB33               	btfss	51,5,b	;volatile
  2592   00000E  EF0B  F000         	goto	i2u120_41
  2593   000012  EF0D  F000         	goto	i2u120_40
  2594   000016                     i2u120_41:
  2595   000016  EF1C  F000         	goto	i2l723
  2596   00001A                     i2u120_40:
  2597   00001A                     
  2598                           ; BSR set to: 14
  2599                           ;timers.c: 213:         if (returning) {
  2600   00001A  505D               	movf	_returning^0,w,c
  2601   00001C  B4D8               	btfsc	status,2,c
  2602   00001E  EF13  F000         	goto	i2u121_41
  2603   000022  EF15  F000         	goto	i2u121_40
  2604   000026                     i2u121_41:
  2605   000026  EF19  F000         	goto	i2l2415
  2606   00002A                     i2u121_40:
  2607   00002A                     
  2608                           ; BSR set to: 14
  2609                           ;timers.c: 214:             return_flag = 1;
  2610   00002A  0E01               	movlw	1
  2611   00002C  6E5C               	movwf	_return_flag^0,c
  2612                           
  2613                           ;timers.c: 215:         } else {
  2614   00002E  EF1B  F000         	goto	i2l2417
  2615   000032                     i2l2415:
  2616                           
  2617                           ; BSR set to: 14
  2618                           ;timers.c: 216:             lost_flag = 1;
  2619   000032  0E01               	movlw	1
  2620   000034  6E5B               	movwf	_lost_flag^0,c
  2621   000036                     i2l2417:
  2622                           
  2623                           ; BSR set to: 14
  2624                           ;timers.c: 218:         PIR0bits.TMR0IF = 0;
  2625   000036  9B33               	bcf	51,5,b	;volatile
  2626   000038                     i2l723:
  2627                           
  2628                           ; BSR set to: 14
  2629   000038  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2630   00003A  0011               	retfie		f
  2631   00003C                     __end_of_ISR:
  2632                           	callstack 0
  2633                           
  2634                           	psect	rparam
  2635   000000                     
  2636                           	psect	temp
  2637   00005E                     btemp:
  2638                           	callstack 0
  2639   00005E                     	ds	1
  2640   000000                     int$flags	set	btemp
  2641   000000                     wtemp8	set	btemp+1
  2642   000000                     ttemp5	set	btemp+1
  2643   000000                     ttemp6	set	btemp+4
  2644   000000                     ttemp7	set	btemp+8
  2645                           
  2646                           	psect	idloc
  2647                           
  2648                           ;Config register IDLOC0 @ 0x200000
  2649                           ;	unspecified, using default values
  2650   200000                     	org	2097152
  2651   200000  FFFF               	dw	65535
  2652                           
  2653                           ;Config register IDLOC1 @ 0x200002
  2654                           ;	unspecified, using default values
  2655   200002                     	org	2097154
  2656   200002  FFFF               	dw	65535
  2657                           
  2658                           ;Config register IDLOC2 @ 0x200004
  2659                           ;	unspecified, using default values
  2660   200004                     	org	2097156
  2661   200004  FFFF               	dw	65535
  2662                           
  2663                           ;Config register IDLOC3 @ 0x200006
  2664                           ;	unspecified, using default values
  2665   200006                     	org	2097158
  2666   200006  FFFF               	dw	65535
  2667                           
  2668                           ;Config register IDLOC4 @ 0x200008
  2669                           ;	unspecified, using default values
  2670   200008                     	org	2097160
  2671   200008  FFFF               	dw	65535
  2672                           
  2673                           ;Config register IDLOC5 @ 0x20000A
  2674                           ;	unspecified, using default values
  2675   20000A                     	org	2097162
  2676   20000A  FFFF               	dw	65535
  2677                           
  2678                           ;Config register IDLOC6 @ 0x20000C
  2679                           ;	unspecified, using default values
  2680   20000C                     	org	2097164
  2681   20000C  FFFF               	dw	65535
  2682                           
  2683                           ;Config register IDLOC7 @ 0x20000E
  2684                           ;	unspecified, using default values
  2685   20000E                     	org	2097166
  2686   20000E  FFFF               	dw	65535
  2687                           
  2688                           	psect	config
  2689                           
  2690                           ;Config register CONFIG1L @ 0x300000
  2691                           ;	External Oscillator mode Selection bits
  2692                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2693                           ;	Power-up default value for COSC bits
  2694                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2695   300000                     	org	3145728
  2696   300000  AA                 	db	170
  2697                           
  2698                           ;Config register CONFIG1H @ 0x300001
  2699                           ;	unspecified, using default values
  2700                           ;	Clock Out Enable bit
  2701                           ;	CLKOUTEN = 0x1, unprogrammed default
  2702                           ;	Clock Switch Enable bit
  2703                           ;	CSWEN = 0x1, unprogrammed default
  2704                           ;	Fail-Safe Clock Monitor Enable bit
  2705                           ;	FCMEN = 0x1, unprogrammed default
  2706   300001                     	org	3145729
  2707   300001  FF                 	db	255
  2708                           
  2709                           ;Config register CONFIG2L @ 0x300002
  2710                           ;	unspecified, using default values
  2711                           ;	Master Clear Enable bit
  2712                           ;	MCLRE = 0x1, unprogrammed default
  2713                           ;	Power-up Timer Enable bit
  2714                           ;	PWRTE = 0x1, unprogrammed default
  2715                           ;	Low-power BOR enable bit
  2716                           ;	LPBOREN = 0x1, unprogrammed default
  2717                           ;	Brown-out Reset Enable bits
  2718                           ;	BOREN = 0x3, unprogrammed default
  2719   300002                     	org	3145730
  2720   300002  FF                 	db	255
  2721                           
  2722                           ;Config register CONFIG2H @ 0x300003
  2723                           ;	unspecified, using default values
  2724                           ;	Brown Out Reset Voltage selection bits
  2725                           ;	BORV = 0x3, unprogrammed default
  2726                           ;	ZCD Disable bit
  2727                           ;	ZCD = 0x1, unprogrammed default
  2728                           ;	PPSLOCK bit One-Way Set Enable bit
  2729                           ;	PPS1WAY = 0x1, unprogrammed default
  2730                           ;	Stack Full/Underflow Reset Enable bit
  2731                           ;	STVREN = 0x1, unprogrammed default
  2732                           ;	Debugger Enable bit
  2733                           ;	DEBUG = 0x1, unprogrammed default
  2734                           ;	Extended Instruction Set Enable bit
  2735                           ;	XINST = 0x1, unprogrammed default
  2736   300003                     	org	3145731
  2737   300003  FF                 	db	255
  2738                           
  2739                           ;Config register CONFIG3L @ 0x300004
  2740                           ;	WDT Period Select bits
  2741                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2742                           ;	WDT operating mode
  2743                           ;	WDTE = OFF, WDT Disabled
  2744   300004                     	org	3145732
  2745   300004  9F                 	db	159
  2746                           
  2747                           ;Config register CONFIG3H @ 0x300005
  2748                           ;	unspecified, using default values
  2749                           ;	WDT Window Select bits
  2750                           ;	WDTCWS = 0x7, unprogrammed default
  2751                           ;	WDT input clock selector
  2752                           ;	WDTCCS = 0x7, unprogrammed default
  2753   300005                     	org	3145733
  2754   300005  FF                 	db	255
  2755                           
  2756                           ;Config register CONFIG4L @ 0x300006
  2757                           ;	unspecified, using default values
  2758                           ;	Write Protection Block 0
  2759                           ;	WRT0 = 0x1, unprogrammed default
  2760                           ;	Write Protection Block 1
  2761                           ;	WRT1 = 0x1, unprogrammed default
  2762                           ;	Write Protection Block 2
  2763                           ;	WRT2 = 0x1, unprogrammed default
  2764                           ;	Write Protection Block 3
  2765                           ;	WRT3 = 0x1, unprogrammed default
  2766                           ;	Write Protection Block 3
  2767                           ;	WRT4 = 0x1, unprogrammed default
  2768                           ;	Write Protection Block 3
  2769                           ;	WRT5 = 0x1, unprogrammed default
  2770                           ;	Write Protection Block 3
  2771                           ;	WRT6 = 0x1, unprogrammed default
  2772                           ;	Write Protection Block 3
  2773                           ;	WRT7 = 0x1, unprogrammed default
  2774   300006                     	org	3145734
  2775   300006  FF                 	db	255
  2776                           
  2777                           ;Config register CONFIG4H @ 0x300007
  2778                           ;	unspecified, using default values
  2779                           ;	Configuration Register Write Protection bit
  2780                           ;	WRTC = 0x1, unprogrammed default
  2781                           ;	Boot Block Write Protection bit
  2782                           ;	WRTB = 0x1, unprogrammed default
  2783                           ;	Data EEPROM Write Protection bit
  2784                           ;	WRTD = 0x1, unprogrammed default
  2785                           ;	Scanner Enable bit
  2786                           ;	SCANE = 0x1, unprogrammed default
  2787                           ;	Low Voltage Programming Enable bit
  2788                           ;	LVP = 0x1, unprogrammed default
  2789   300007                     	org	3145735
  2790   300007  FF                 	db	255
  2791                           
  2792                           ;Config register CONFIG5L @ 0x300008
  2793                           ;	unspecified, using default values
  2794                           ;	UserNVM Program Memory Code Protection bit
  2795                           ;	CP = 0x1, unprogrammed default
  2796                           ;	DataNVM Memory Code Protection bit
  2797                           ;	CPD = 0x1, unprogrammed default
  2798   300008                     	org	3145736
  2799   300008  FF                 	db	255
  2800                           
  2801                           ;Config register CONFIG5H @ 0x300009
  2802                           ;	unspecified, using default values
  2803   300009                     	org	3145737
  2804   300009  FF                 	db	255
  2805                           
  2806                           ;Config register CONFIG6L @ 0x30000A
  2807                           ;	unspecified, using default values
  2808                           ;	Table Read Protection Block 0
  2809                           ;	EBTR0 = 0x1, unprogrammed default
  2810                           ;	Table Read Protection Block 1
  2811                           ;	EBTR1 = 0x1, unprogrammed default
  2812                           ;	Table Read Protection Block 2
  2813                           ;	EBTR2 = 0x1, unprogrammed default
  2814                           ;	Table Read Protection Block 3
  2815                           ;	EBTR3 = 0x1, unprogrammed default
  2816                           ;	Table Read Protection Block 4
  2817                           ;	EBTR4 = 0x1, unprogrammed default
  2818                           ;	Table Read Protection Block 5
  2819                           ;	EBTR5 = 0x1, unprogrammed default
  2820                           ;	Table Read Protection Block 6
  2821                           ;	EBTR6 = 0x1, unprogrammed default
  2822                           ;	Table Read Protection Block 7
  2823                           ;	EBTR7 = 0x1, unprogrammed default
  2824   30000A                     	org	3145738
  2825   30000A  FF                 	db	255
  2826                           
  2827                           ;Config register CONFIG6H @ 0x30000B
  2828                           ;	unspecified, using default values
  2829                           ;	Boot Block Table Read Protection bit
  2830                           ;	EBTRB = 0x1, unprogrammed default
  2831   30000B                     	org	3145739
  2832   30000B  FF                 	db	255
  2833                           tosu	equ	0xFFF
  2834                           tosh	equ	0xFFE
  2835                           tosl	equ	0xFFD
  2836                           stkptr	equ	0xFFC
  2837                           pclatu	equ	0xFFB
  2838                           pclath	equ	0xFFA
  2839                           pcl	equ	0xFF9
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           prodh	equ	0xFF4
  2845                           prodl	equ	0xFF3
  2846                           indf0	equ	0xFEF
  2847                           postinc0	equ	0xFEE
  2848                           postdec0	equ	0xFED
  2849                           preinc0	equ	0xFEC
  2850                           plusw0	equ	0xFEB
  2851                           fsr0h	equ	0xFEA
  2852                           fsr0l	equ	0xFE9
  2853                           wreg	equ	0xFE8
  2854                           indf1	equ	0xFE7
  2855                           postinc1	equ	0xFE6
  2856                           postdec1	equ	0xFE5
  2857                           preinc1	equ	0xFE4
  2858                           plusw1	equ	0xFE3
  2859                           fsr1h	equ	0xFE2
  2860                           fsr1l	equ	0xFE1
  2861                           bsr	equ	0xFE0
  2862                           indf2	equ	0xFDF
  2863                           postinc2	equ	0xFDE
  2864                           postdec2	equ	0xFDD
  2865                           preinc2	equ	0xFDC
  2866                           plusw2	equ	0xFDB
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        27
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      93
    BANK0           160      0       0
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2777$buffer	PTR unsigned char  size(2) Largest target is 0

    S2777$source	PTR const unsigned char  size(2) Largest target is 0

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), main@motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_turnLeft90
    _turnLeft90->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   11690
                                             27 COMRAM    35    35      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                               _stop
                         _turnLeft90
 ---------------------------------------------------------------------------------
 (1) _turnLeft90                                           4     2      2    6968
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    3525
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    1829
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
     _start_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4
   _stop
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft90
     _stop
     _turnLeft
       _setMotorPWM

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      5D       1       98.9%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      9      0       0      57        0.0%
BITBIGSFRlllhhh      8      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      99      61        0.0%
DATA                 0      0      99       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 12 18:17:46 2024

               _turn180Delay 0049              _trail_timer_low 0114                           l27 13CE  
                         l65 136E                           l68 148E          ___wmul@multiplicand 0003  
           _trail_timer_high 0128                          l210 11FA                          l230 10FA  
                        l311 1420                          l320 14F6                          l305 13F8  
                        l217 0F6C                          l225 1288                          l233 116A  
                        l314 1500                          l323 14D4                          l308 13FA  
                        l260 13A0                          l413 101C                          l418 10B0  
                        l447 14AC                          l753 146E                          l690 14E0  
                        l675 1448                          l678 1504                          l687 14EC  
                        _ISR 0008                  _start_timer 1502                          wreg 0FE8  
                _squareDelay 0045                         ?_ISR 0001                         l3011 1502  
                       l1251 12FC                         l1244 12F4                         l3021 135A  
                       l3023 1364                         l3015 133C                         l2151 149A  
                       l3009 14D6                         l3017 1340                         l2153 149C  
                       l3019 134A                         l2155 14A6                         l2157 14A8  
                       l2149 1490                         l2159 14AA                         l3321 142A  
                       l3313 1370                         l3331 1444                         l3323 142C  
                       l1651 13E0                         l3315 137C                         l3333 1446  
                       l3325 1436                         l1653 13E2                         l3317 1394  
                       l3327 143A                         l3319 1422                         l1655 13E4  
                       l1647 13D0                         l2703 13FA                         l3271 11A2  
                       l3431 0FD6                         l3423 0F6E                         l3329 1440  
                       l1841 13A2                         l1657 13E6                         l1649 13DA  
                       l2705 140A                         l3281 11E0                         l3273 11A6  
                       l2721 12B4                         l2713 128A                         l3441 1002  
                       l3433 0FDE                         l3425 0FB2                         l3283 11E2  
                       l3275 11CA                         l3267 116C                         l2731 12E8  
                       l2723 12C2                         l2715 1292                         l2707 144A  
                       l3451 1010                         l3443 1006                         l3435 0FE6  
                       l3427 0FBA                         l2741 14D0                         l3285 11EC  
                       l3277 11D4                         l3269 117C                         l2733 12EE  
                       l2725 12C8                         l2717 12A4                         l2709 1466  
                       l3461 102A                         l3453 1012                         l3445 100A  
                       l3437 0FEE                         l3429 0FC2                         l2735 14F8  
                       l2743 14EE                         l2831 1472                         l3287 11EE  
                       l3279 11D6                         l2727 12DE                         l2719 12AC  
                       l3471 1084                         l3463 1070                         l3455 1014  
                       l3447 100C                         l3439 0FFE                         l2737 14FC  
                       l2745 14F2                         l3289 11F8                         l2729 12E6  
                       l3473 1088                         l3457 1016                         l3449 100E  
                       l2827 14E4                         l2739 14CC                         l2771 0E1A  
                       l3475 10A4                         l3459 101A                         l2829 14E8  
                       l2781 0ED6                         l2773 0E34                         l2861 1200  
                       l3469 1078                         l2783 0EF0                         l2775 0E82  
                       l2871 1244                         l2863 1216                         l2785 0F30  
                       l2777 0E94                         l2873 124C                         l2865 121E  
                       l2881 10BC                         l2779 0E98                         l2867 1234  
                       l2875 125C                         l2859 11FC                         l2891 111A  
                       l2883 10C8                         l2877 1272                         l2869 123C  
                       l2893 1122                         l2885 10DA                         l2895 112A  
                       l2887 10F2                         l2879 10B4                         l2889 1112  
                       l2897 113A                         l2899 1152                         STR_1 0E0F  
                       STR_2 0E14                         STR_5 0E01                 _BAUD4CONbits 0EE9  
                       u1700 12A4                         u1701 12A0                         u1710 12C2  
                       u1711 12BE                         u1720 12DE                         u1800 1216  
                       u2600 105E                         u1721 12DA                         u1801 1212  
                       u2601 1056                         u1730 0E34                         u1810 1234  
                       _T2PR 0FBC                         u1731 0E30                         u1811 1230  
                       u3147 1386                         u1740 0EF0                         u1820 1272  
                       u2620 10A4                         u1741 0EEC                         u1821 126E  
                       u3157 1130                         u2621 10A0                         u1830 1288  
                       u1831 1284                         u3167 1252                         u1680 140A  
                       u1840 10F2                         u1681 1406                         u3177 1350  
                       u1841 10EE                         u1690 1420                         u1850 1112  
                       u2618 1060                         u2570 102A                         u1691 141C  
                       u1851 110E                         u2571 1026                         u1860 1152  
                       u2580 103C                         u1861 114E                         u2581 1034  
                       u1870 116A                         u1871 1166                         u2598 103E  
                       _main 0F6E                         fsr2h 0FDA                         indf2 0FDF  
                       fsr1l 0FE1                         fsr2l 0FD9                         btemp 005E  
                       _stop 11FC                         prodh 0FF4                         prodl 0FF3  
                       start 003C                 ___param_bank 0000                        ??_ISR 0001  
              write_timer@tH 0002                write_timer@tL 0001                        ?_main 0001  
         _timer_high_pointer 0043                        ?_stop 0013              __end_of___lwdiv 12FE  
                      i2l723 0038                        _TMR0H 0FD4                        _TMR0L 0FD3  
 __end_of_I2C_2_Master_Start 1502                  _write_timer 14E2   __end_of_I2C_2_Master_Write 14D6  
                _turningGear 0055                        main@i 001D            _turnRight135Delay 004B  
                      tablat 0FF5              _turnLeft90Delay 0051                        ttemp5 005F  
                      ttemp6 0062                        ttemp7 0066                        status 0FD8  
                      wtemp8 005F              __initialization 12FE                 __end_of_main 10B4  
               __end_of_stop 128A                       ??_main 001C                       ??_stop 0015  
              __activetblptr 0003                 ?_setMotorPWM 000E                       _CCPR1H 0FAA  
                     _CCPR2H 0FA6                       _CCPR3H 0F25                       _CCPR4H 0F21  
                     _RC0PPS 0E62                       _RC4REG 0EE3                       _RE2PPS 0E74  
                     _RD5PPS 0E6F                       _RC7PPS 0E69                       _RD6PPS 0E70  
                     _RE4PPS 0E76                       i2l2411 001A                       i2l2413 002A  
                     i2l2415 0032                       i2l2417 0036                       i2l2409 000A  
                     _RG6PPS 0E88     __end_of_color_click_init 1370                       _RX4PPS 0E15  
                     _TX4REG 0EE4             _turnLeft135Delay 004D                ??_Timer0_init 0003  
               ?_reset_timer 0001                 _CCPTMRS0bits 0FAD                       ___wmul 144A  
                  ??___lwdiv 000B                       clear_0 1324                       isa$std 0001  
               __pdataCOMRAM 003F            _timer_low_pointer 0041                 __mediumconst 0000  
                     tblptrh 0FF7                       tblptrl 0FF6                       tblptru 0FF8  
                     stop@mL 0013                       stop@mR 0014            ??_initDCmotorsPWM 0003  
           __end_of_turnLeft 116C            _buggy_lights_init 13A2                   __accesstop 0060  
    __end_of__initialization 1332           ?_buggy_lights_init 0001                ___rparam_used 0001  
             __pcstackCOMRAM 0001          ??_buggy_lights_init 0001          __end_of_Timer0_init 144A  
               ?_start_timer 0001    __end_of_buggy_lights_init 13D0                   __pbssBANK1 0100  
          _color_writetoaddr 1470                 _T2CLKCONbits 0FBF           ?_color_writetoaddr 0003  
                    ?___wmul 0001          ??_color_writetoaddr 0004                      _SP4BRGH 0EE6  
                    _SP4BRGL 0EE5                 ?_write_timer 0001                      _SSP2ADD 0ED6  
                    _SSP2BUF 0ED5       color_writetoaddr@value 0003    __end_of_color_writetoaddr 1490  
         _I2C_2_Master_Start 14F8                   _initUSART4 1490           _I2C_2_Master_Write 14CA  
                    __Hparam 0000                      __Lparam 0000                  _Timer0_init 1422  
        ?_I2C_2_Master_Start 0001                      ___lwdiv 128A          ?_I2C_2_Master_Write 0001  
               __psmallconst 0E00                 turnLeft90@mL 0018                 turnLeft90@mR 0019  
                    __pcinit 12FE                      __ramtop 0E00                    ?_turnLeft 0013  
                    __ptext0 0F6E                      __ptext1 1370                      __ptext2 10B4  
                    __ptext3 11FC                      __ptext4 0E1A                      __ptext5 144A  
                    __ptext6 128A                      __ptext7 1490                      __ptext8 116C  
                    __ptext9 133C                    _T2CONbits 0FBD                    _T2HLTbits 0FBE  
       ??_I2C_2_Master_Start 0002         ??_I2C_2_Master_Write 0002         end_of_initialization 1332  
          ?_color_click_init 0001           ??_color_click_init 0005                      postdec1 0FE5  
                    postdec2 0FDD                      postinc0 0FEE                      postinc2 0FDE  
            _initDCmotorsPWM 116C                   ??_turnLeft 0015                    _PORTFbits 0F8E  
         setMotorPWM@negDuty 0012                    _TRISAbits 0F81           setMotorPWM@posDuty 0011  
                  _TRISCbits 0F83                    _TRISDbits 0F84                    _TRISEbits 0F85  
                  _TRISFbits 0F86                    _TRISGbits 0F87                    _TRISHbits 0F88  
   color_writetoaddr@address 0004                  _CCP1CONbits 0FAB                  _CCP2CONbits 0FA7  
                _CCP3CONbits 0F26                  ?_initUSART4 0001                  _CCP4CONbits 0F22  
                 main@motorL 002D                   main@motorR 0036                   _turnLeft90 1370  
             __end_of___wmul 1470                __pidataCOMRAM 14AE          start_initialization 12FE  
                __end_of_ISR 003C             _turnRight90Delay 004F      __end_of_initDCmotorsPWM 11FC  
                   ??___wmul 0005                  __pbssCOMRAM 005A          _wall_threshold_blue 0053  
          turnLeft@rightGear 0017             ___lwdiv@dividend 0007                 ?_Timer0_init 0001  
                ?_turnLeft90 0018                    __pintcode 0008                     ?___lwdiv 0007  
                __smallconst 0E00            _I2C_2_Master_Idle 13FA            _I2C_2_Master_Init 13D0  
          _I2C_2_Master_Stop 14EE           ?_I2C_2_Master_Idle 0001           ?_I2C_2_Master_Init 0001  
              ??_setMotorPWM 000F           ?_I2C_2_Master_Stop 0001             ___lwdiv@quotient 000B  
              _headbuttDelay 0047     initDCmotorsPWM@PWMperiod 0001                    _rampDelay 0058  
        ??_I2C_2_Master_Idle 0001          ??_I2C_2_Master_Init 0001               ___wmul@product 0005  
                   _LATAbits 0F79          ??_I2C_2_Master_Stop 0002                     _LATCbits 0F7B  
                   _LATDbits 0F7C                     _LATEbits 0F7D                     _LATFbits 0F7E  
                   _LATGbits 0F7F                     _LATHbits 0F80                     _PIE0bits 0E29  
                   i2u120_40 001A                     i2u120_41 0016                     i2u121_40 002A  
                   i2u121_41 0026                ??_reset_timer 0003                    _lost_flag 005B  
                   _PIR0bits 0E33                     _PIR4bits 0E37             ?_initDCmotorsPWM 0001  
                   _SSP2CON2 0EDA                     _SSP2STAT 0ED8                    _returning 005D  
  __end_of_I2C_2_Master_Idle 1422    __end_of_I2C_2_Master_Init 13FA            ___wmul@multiplier 0001  
  __end_of_I2C_2_Master_Stop 14F8                 setMotorPWM@m 000E  I2C_2_Master_Write@data_byte 0002  
            main@RGBC_colour 0025                    copy_data0 1312          __end_of_setMotorPWM 0F6E  
               ??_initUSART4 0001                     __Hrparam 0000                     __Lrparam 0000  
               _sample_count 0059             turnLeft@leftGear 0016          __end_of_reset_timer 14E2  
                 _ANSELDbits 0EA7                   _ANSELFbits 0EB4                ??_start_timer 0001  
                 _T0CON0bits 0FD5                   _T0CON1bits 0FD6              ___lwdiv@divisor 0009  
         __end_of_initUSART4 14AE              ___lwdiv@counter 000D                     __ptext10 1470  
                   __ptext11 14CA                     __ptext20 14E2                     __ptext12 14EE  
                   __ptext13 14F8                     __ptext14 13FA                     __ptext15 13D0  
                   __ptext16 13A2                     __ptext17 1422                     __ptext18 1502  
                   __ptext19 14D6                 _SSP2CON1bits 0ED9                 _SSP2CON2bits 0EDA  
                 turnLeft@mL 0013                   turnLeft@mR 0014                     isa$xinst 0000  
                 _RC4STAbits 0EE7                     int$flags 005E                     _turnLeft 10B4  
                 _INTCONbits 0FF2                ??_write_timer 0002                  _setMotorPWM 0E1A  
        __end_of_start_timer 1506                     intlevel2 0000                 _topGearRight 0056  
          _manoeuvre_pointer 003F               main@HSV_colour 001F                  _reset_timer 14D6  
               ??_turnLeft90 001A             _color_click_init 133C                  _topGearLeft 0057  
                 _SSP2DATPPS 0E1D                   _SSP2CLKPPS 0E1C              _trail_manoeuvre 0100  
                _return_flag 005C           __end_of_turnLeft90 13A2              _manoeuvre_count 005A  
                 _TX4STAbits 0EE8          __end_of_write_timer 14EE  
