

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 07 15:51:58 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    59                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    60   000000                     
    61                           ; Generated 18/08/2023 GMT
    62                           ; 
    63                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F67K40 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95   000000                     
    96                           	psect	idataBANK0
    97   001F76                     __pidataBANK0:
    98                           	callstack 0
    99                           
   100                           ;initializer for _manoeuvre_pointer
   101   001F76  3C                 	db	low _trail_manoeuvre
   102   001F77  01                 	db	high _trail_manoeuvre
   103                           
   104                           ;initializer for _timer_low_pointer
   105   001F78  50                 	db	low _trail_timer_low
   106   001F79  01                 	db	high _trail_timer_low
   107                           
   108                           ;initializer for _timer_high_pointer
   109   001F7A  64                 	db	low _trail_timer_high
   110   001F7B  01                 	db	high _trail_timer_high
   111                           
   112                           ;initializer for _squareDelay
   113   001F7C  012C               	dw	300
   114                           
   115                           ;initializer for _headbuttDelay
   116   001F7E  0046               	dw	70
   117                           
   118                           ;initializer for _turn180Delay
   119   001F80  01FE               	dw	510
   120                           
   121                           ;initializer for _turnRight135Delay
   122   001F82  012C               	dw	300
   123                           
   124                           ;initializer for _turnLeft135Delay
   125   001F84  012C               	dw	300
   126                           
   127                           ;initializer for _turnRight90Delay
   128   001F86  00AF               	dw	175
   129                           
   130                           ;initializer for _turnLeft90Delay
   131   001F88  00AF               	dw	175
   132                           
   133                           ;initializer for _wall_threshold
   134   001F8A  012C               	dw	300
   135                           
   136                           ;initializer for _turningGear
   137   001F8C  2A                 	db	42
   138                           
   139                           ;initializer for _topGearRight
   140   001F8D  14                 	db	20
   141                           
   142                           ;initializer for _topGearLeft
   143   001F8E  14                 	db	20
   144                           
   145                           ;initializer for _rampDelay
   146   001F8F  08                 	db	8
   147   000000                     _TMR0H	set	4052
   148   000000                     _TX4REG	set	3812
   149   000000                     _RC4STAbits	set	3815
   150   000000                     _SP4BRGH	set	3814
   151   000000                     _LATEbits	set	3965
   152   000000                     _TRISEbits	set	3973
   153   000000                     _LATGbits	set	3967
   154   000000                     _TRISGbits	set	3975
   155   000000                     _LATFbits	set	3966
   156   000000                     _LATHbits	set	3968
   157   000000                     _TRISFbits	set	3974
   158   000000                     _TRISHbits	set	3976
   159   000000                     _SSP2CON2bits	set	3802
   160   000000                     _RX4PPS	set	3605
   161   000000                     _SSP2CLKPPS	set	3612
   162   000000                     _SSP2DATPPS	set	3613
   163   000000                     _RC7PPS	set	3689
   164   000000                     _RE2PPS	set	3700
   165   000000                     _LATAbits	set	3961
   166   000000                     _LATDbits	set	3964
   167   000000                     _TRISDbits	set	3972
   168   000000                     _T2PR	set	4028
   169   000000                     _T2CONbits	set	4029
   170   000000                     _CCPR2H	set	4006
   171   000000                     _CCPR1H	set	4010
   172   000000                     _TRISCbits	set	3971
   173   000000                     _TRISAbits	set	3969
   174   000000                     _LATCbits	set	3963
   175   000000                     _RE4PPS	set	3702
   176   000000                     _RG6PPS	set	3720
   177   000000                     _RD5PPS	set	3695
   178   000000                     _ANSELDbits	set	3751
   179   000000                     _SSP2ADD	set	3798
   180   000000                     _SSP2CON1bits	set	3801
   181   000000                     _CCPR4H	set	3873
   182   000000                     _CCPR3H	set	3877
   183   000000                     _TMR0L	set	4051
   184   000000                     _T0CON0bits	set	4053
   185   000000                     _T0CON1bits	set	4054
   186   000000                     _T2CLKCONbits	set	4031
   187   000000                     _T2HLTbits	set	4030
   188   000000                     _CCP1CONbits	set	4011
   189   000000                     _CCPTMRS0bits	set	4013
   190   000000                     _CCP2CONbits	set	4007
   191   000000                     _CCP3CONbits	set	3878
   192   000000                     _CCP4CONbits	set	3874
   193   000000                     _RC4REG	set	3811
   194   000000                     _SP4BRGL	set	3813
   195   000000                     _TX4STAbits	set	3816
   196   000000                     _BAUD4CONbits	set	3817
   197   000000                     _SSP2CON2	set	3802
   198   000000                     _SSP2STAT	set	3800
   199   000000                     _ANSELFbits	set	3764
   200   000000                     _SSP2BUF	set	3797
   201   000000                     _PIE0bits	set	3625
   202   000000                     _PIE4bits	set	3629
   203   000000                     _PIR4bits	set	3639
   204   000000                     _RC0PPS	set	3682
   205   000000                     _RD6PPS	set	3696
   206   000000                     _PIR0bits	set	3635
   207   000000                     _INTCONbits	set	4082
   208                           
   209                           	psect	smallconst
   210   000E00                     __psmallconst:
   211                           	callstack 0
   212   000E00  00                 	db	0
   213   000E01                     STR_5:
   214                           
   215                           ; BSR set to: 14
   216   000E01  25                 	db	37
   217   000E02  75                 	db	117	;'u'
   218   000E03  20                 	db	32
   219   000E04  25                 	db	37
   220   000E05  75                 	db	117	;'u'
   221   000E06  20                 	db	32
   222   000E07  25                 	db	37
   223   000E08  75                 	db	117	;'u'
   224   000E09  20                 	db	32
   225   000E0A  25                 	db	37
   226   000E0B  75                 	db	117	;'u'
   227   000E0C  20                 	db	32
   228   000E0D  0D                 	db	13
   229   000E0E  00                 	db	0
   230   000E0F                     STR_1:
   231                           
   232                           ; BSR set to: 14
   233   000E0F  25                 	db	37
   234   000E10  64                 	db	100	;'d'
   235   000E11  20                 	db	32
   236   000E12  0D                 	db	13
   237   000E13  00                 	db	0
   238   000E14                     STR_2:
   239                           
   240                           ; BSR set to: 14
   241   000E14  25                 	db	37
   242   000E15  64                 	db	100	;'d'
   243   000E16  20                 	db	32
   244   000E17  00                 	db	0
   245   000E18  00                 	db	0	; dummy byte at the end
   246   000000                     
   247                           ; #config settings
   248                           
   249                           	psect	cinit
   250   001D14                     __pcinit:
   251                           	callstack 0
   252   001D14                     start_initialization:
   253                           	callstack 0
   254   001D14                     __initialization:
   255                           	callstack 0
   256                           
   257                           ; Initialize objects allocated to BANK0 (26 bytes)
   258                           ; load TBLPTR registers with __pidataBANK0
   259   001D14  0E76               	movlw	low __pidataBANK0
   260   001D16  6EF6               	movwf	tblptrl,c
   261   001D18  0E1F               	movlw	high __pidataBANK0
   262   001D1A  6EF7               	movwf	tblptrh,c
   263   001D1C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   264   001D1E  6EF8               	movwf	tblptru,c
   265   001D20  EE00  F0BF         	lfsr	0,__pdataBANK0
   266   001D24  EE10 F01A          	lfsr	1,26
   267   001D28                     copy_data0:
   268   001D28  0009               	tblrd		*+
   269   001D2A  CFF5 FFEE          	movff	tablat,postinc0
   270   001D2E  50E5               	movf	postdec1,w,c
   271   001D30  50E1               	movf	fsr1l,w,c
   272   001D32  E1FA               	bnz	copy_data0
   273                           
   274                           ; Clear objects allocated to BANK1 (120 bytes)
   275   001D34  EE01  F000         	lfsr	0,__pbssBANK1
   276   001D38  0E78               	movlw	120
   277   001D3A                     clear_0:
   278   001D3A  6AEE               	clrf	postinc0,c
   279   001D3C  06E8               	decf	wreg,f,c
   280   001D3E  E1FD               	bnz	clear_0
   281                           
   282                           ; Clear objects allocated to BANK0 (63 bytes)
   283   001D40  EE00  F060         	lfsr	0,__pbssBANK0
   284   001D44  0E3F               	movlw	63
   285   001D46                     clear_1:
   286   001D46  6AEE               	clrf	postinc0,c
   287   001D48  06E8               	decf	wreg,f,c
   288   001D4A  E1FD               	bnz	clear_1
   289                           
   290                           ; Clear objects allocated to COMRAM (3 bytes)
   291   001D4C  6A5E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   292   001D4E  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   293   001D50  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   294   001D52                     end_of_initialization:
   295                           	callstack 0
   296   001D52                     __end_of__initialization:
   297                           	callstack 0
   298   001D52  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   299   001D54  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   300   001D56  0100               	movlb	0
   301   001D58  EF2B  F00A         	goto	_main	;jump to C main() function
   302                           
   303                           	psect	bssCOMRAM
   304   00005C                     __pbssCOMRAM:
   305                           	callstack 0
   306   00005C                     _TxBufReadCnt:
   307                           	callstack 0
   308   00005C                     	ds	1
   309   00005D                     _TxBufWriteCnt:
   310                           	callstack 0
   311   00005D                     	ds	1
   312   00005E                     _RxBufWriteCnt:
   313                           	callstack 0
   314   00005E                     	ds	1
   315                           
   316                           	psect	bssBANK0
   317   000060                     __pbssBANK0:
   318                           	callstack 0
   319   000060                     _dbuf:
   320                           	callstack 0
   321   000060                     	ds	32
   322   000080                     _EUSART4RXbuf:
   323                           	callstack 0
   324   000080                     	ds	20
   325   000094                     _nout:
   326                           	callstack 0
   327   000094                     	ds	2
   328   000096                     _width:
   329                           	callstack 0
   330   000096                     	ds	2
   331   000098                     _prec:
   332                           	callstack 0
   333   000098                     	ds	2
   334   00009A                     _flags:
   335                           	callstack 0
   336   00009A                     	ds	1
   337   00009B                     _manoeuvre_count:
   338                           	callstack 0
   339   00009B                     	ds	1
   340   00009C                     _return_flag:
   341                           	callstack 0
   342   00009C                     	ds	1
   343   00009D                     _returning:
   344                           	callstack 0
   345   00009D                     	ds	1
   346   00009E                     _RxBufReadCnt:
   347                           	callstack 0
   348   00009E                     	ds	1
   349                           
   350                           	psect	dataBANK0
   351   0000BF                     __pdataBANK0:
   352                           	callstack 0
   353   0000BF                     _manoeuvre_pointer:
   354                           	callstack 0
   355   0000BF                     	ds	2
   356   0000C1                     _timer_low_pointer:
   357                           	callstack 0
   358   0000C1                     	ds	2
   359   0000C3                     _timer_high_pointer:
   360                           	callstack 0
   361   0000C3                     	ds	2
   362   0000C5                     _squareDelay:
   363                           	callstack 0
   364   0000C5                     	ds	2
   365   0000C7                     _headbuttDelay:
   366                           	callstack 0
   367   0000C7                     	ds	2
   368   0000C9                     _turn180Delay:
   369                           	callstack 0
   370   0000C9                     	ds	2
   371   0000CB                     _turnRight135Delay:
   372                           	callstack 0
   373   0000CB                     	ds	2
   374   0000CD                     _turnLeft135Delay:
   375                           	callstack 0
   376   0000CD                     	ds	2
   377   0000CF                     _turnRight90Delay:
   378                           	callstack 0
   379   0000CF                     	ds	2
   380   0000D1                     _turnLeft90Delay:
   381                           	callstack 0
   382   0000D1                     	ds	2
   383   0000D3                     _wall_threshold:
   384                           	callstack 0
   385   0000D3                     	ds	2
   386   0000D5                     _turningGear:
   387                           	callstack 0
   388   0000D5                     	ds	1
   389   0000D6                     _topGearRight:
   390                           	callstack 0
   391   0000D6                     	ds	1
   392   0000D7                     _topGearLeft:
   393                           	callstack 0
   394   0000D7                     	ds	1
   395   0000D8                     _rampDelay:
   396                           	callstack 0
   397   0000D8                     	ds	1
   398                           
   399                           	psect	bssBANK1
   400   000100                     __pbssBANK1:
   401                           	callstack 0
   402   000100                     _EUSART4TXbuf:
   403                           	callstack 0
   404   000100                     	ds	60
   405   00013C                     _trail_manoeuvre:
   406                           	callstack 0
   407   00013C                     	ds	20
   408   000150                     _trail_timer_low:
   409                           	callstack 0
   410   000150                     	ds	20
   411   000164                     _trail_timer_high:
   412                           	callstack 0
   413   000164                     	ds	20
   414                           
   415                           	psect	cstackBANK0
   416   00009F                     __pcstackBANK0:
   417                           	callstack 0
   418   00009F                     main@HSV_colour:
   419                           	callstack 0
   420                           
   421                           ; 6 bytes @ 0x0
   422   00009F                     	ds	6
   423   0000A5                     main@motorL:
   424                           	callstack 0
   425                           
   426                           ; 9 bytes @ 0x6
   427   0000A5                     	ds	9
   428   0000AE                     main@motorR:
   429                           	callstack 0
   430                           
   431                           ; 9 bytes @ 0xF
   432   0000AE                     	ds	9
   433   0000B7                     main@measured_colour:
   434                           	callstack 0
   435                           
   436                           ; 8 bytes @ 0x18
   437   0000B7                     	ds	8
   438                           
   439                           	psect	cstackCOMRAM
   440   000001                     __pcstackCOMRAM:
   441                           	callstack 0
   442   000001                     ??_toggle_tricolour_LED:
   443   000001                     ??_I2C_2_Master_Idle:
   444   000001                     ?_max:
   445                           	callstack 0
   446   000001                     ?_min:
   447                           	callstack 0
   448   000001                     ?___wmul:
   449                           	callstack 0
   450   000001                     ?___awdiv:
   451                           	callstack 0
   452   000001                     ?___awmod:
   453                           	callstack 0
   454   000001                     sendCharSerial4@charToSend:
   455                           	callstack 0
   456   000001                     write_timer@tL:
   457                           	callstack 0
   458   000001                     max@a:
   459                           	callstack 0
   460   000001                     min@a:
   461                           	callstack 0
   462   000001                     initDCmotorsPWM@PWMperiod:
   463                           	callstack 0
   464   000001                     ___wmul@multiplier:
   465                           	callstack 0
   466   000001                     ___awdiv@dividend:
   467                           	callstack 0
   468   000001                     ___awmod@dividend:
   469                           	callstack 0
   470   000001                     fputc@c:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x0
   474   000001                     	ds	1
   475   000002                     ??_I2C_2_Master_Read:
   476   000002                     I2C_2_Master_Write@data_byte:
   477                           	callstack 0
   478   000002                     write_timer@tH:
   479                           	callstack 0
   480   000002                     sendStringSerial4@string:
   481                           	callstack 0
   482                           
   483                           ; 2 bytes @ 0x1
   484   000002                     	ds	1
   485   000003                     color_writetoaddr@value:
   486                           	callstack 0
   487   000003                     I2C_2_Master_Read@ack:
   488                           	callstack 0
   489   000003                     fputc@fp:
   490                           	callstack 0
   491   000003                     max@b:
   492                           	callstack 0
   493   000003                     min@b:
   494                           	callstack 0
   495   000003                     ___wmul@multiplicand:
   496                           	callstack 0
   497   000003                     ___awdiv@divisor:
   498                           	callstack 0
   499   000003                     ___awmod@divisor:
   500                           	callstack 0
   501                           
   502                           ; 2 bytes @ 0x2
   503   000003                     	ds	1
   504   000004                     ??_fputc:
   505   000004                     color_writetoaddr@address:
   506                           	callstack 0
   507   000004                     I2C_2_Master_Read@tmp:
   508                           	callstack 0
   509                           
   510                           ; 1 bytes @ 0x3
   511   000004                     	ds	1
   512   000005                     ??_color_click_init:
   513   000005                     ?_color_read_Red:
   514                           	callstack 0
   515   000005                     ?_color_read_Blue:
   516                           	callstack 0
   517   000005                     ?_color_read_Green:
   518                           	callstack 0
   519   000005                     ?_color_read_Clear:
   520                           	callstack 0
   521   000005                     ___awdiv@counter:
   522                           	callstack 0
   523   000005                     ___awmod@counter:
   524                           	callstack 0
   525   000005                     max@max_val:
   526                           	callstack 0
   527   000005                     min@min_val:
   528                           	callstack 0
   529   000005                     ___wmul@product:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0x4
   533   000005                     	ds	1
   534   000006                     ___awdiv@sign:
   535                           	callstack 0
   536   000006                     ___awmod@sign:
   537                           	callstack 0
   538                           
   539                           ; 1 bytes @ 0x5
   540   000006                     	ds	1
   541   000007                     ??_color_read_Red:
   542   000007                     ??_color_read_Blue:
   543   000007                     ??_color_read_Green:
   544   000007                     ??_color_read_Clear:
   545   000007                     ?_abs:
   546                           	callstack 0
   547   000007                     ?___lwdiv:
   548                           	callstack 0
   549   000007                     ___awdiv@quotient:
   550                           	callstack 0
   551   000007                     ___lwdiv@dividend:
   552                           	callstack 0
   553   000007                     abs@a:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0x6
   557   000007                     	ds	2
   558   000009                     ??_abs:
   559   000009                     ___lwdiv@divisor:
   560                           	callstack 0
   561                           
   562                           ; 2 bytes @ 0x8
   563   000009                     	ds	1
   564   00000A                     color_read_Red@tmp:
   565                           	callstack 0
   566   00000A                     color_read_Blue@tmp:
   567                           	callstack 0
   568   00000A                     color_read_Green@tmp:
   569                           	callstack 0
   570   00000A                     color_read_Clear@tmp:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x9
   574   00000A                     	ds	1
   575   00000B                     ___lwdiv@quotient:
   576                           	callstack 0
   577                           
   578                           ; 2 bytes @ 0xA
   579   00000B                     	ds	1
   580   00000C                     getRGBCval@p:
   581                           	callstack 0
   582                           
   583                           ; 1 bytes @ 0xB
   584   00000C                     	ds	1
   585   00000D                     ___lwdiv@counter:
   586                           	callstack 0
   587                           
   588                           ; 1 bytes @ 0xC
   589   00000D                     	ds	1
   590   00000E                     ?___lwmod:
   591                           	callstack 0
   592   00000E                     ___lwmod@dividend:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0xD
   596   00000E                     	ds	2
   597   000010                     ___lwmod@divisor:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0xF
   601   000010                     	ds	2
   602   000012                     ___lwmod@counter:
   603                           	callstack 0
   604                           
   605                           ; 1 bytes @ 0x11
   606   000012                     	ds	1
   607   000013                     ?_vfpfcnvrt:
   608                           	callstack 0
   609   000013                     getHSVval@p1:
   610                           	callstack 0
   611   000013                     vfpfcnvrt@fp:
   612                           	callstack 0
   613                           
   614                           ; 1 bytes @ 0x12
   615   000013                     	ds	1
   616   000014                     getHSVval@p2:
   617                           	callstack 0
   618   000014                     vfpfcnvrt@fmt:
   619                           	callstack 0
   620                           
   621                           ; 1 bytes @ 0x13
   622   000014                     	ds	1
   623   000015                     ??_getHSVval:
   624   000015                     vfpfcnvrt@ap:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0x14
   628   000015                     	ds	1
   629   000016                     ??_vfpfcnvrt:
   630                           
   631                           ; 1 bytes @ 0x15
   632   000016                     	ds	2
   633   000018                     vfpfcnvrt@done:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0x17
   637   000018                     	ds	1
   638   000019                     getHSVval@minRGB:
   639                           	callstack 0
   640   000019                     vfpfcnvrt@cnt:
   641                           	callstack 0
   642                           
   643                           ; 2 bytes @ 0x18
   644   000019                     	ds	2
   645   00001B                     vfpfcnvrt@cp:
   646                           	callstack 0
   647   00001B                     _getHSVval$3203:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x1A
   651   00001B                     	ds	1
   652   00001C                     vfpfcnvrt@convarg:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x1B
   656   00001C                     	ds	1
   657   00001D                     _getHSVval$3204:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x1C
   661   00001D                     	ds	2
   662   00001F                     getHSVval@saturation:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0x1E
   666   00001F                     	ds	1
   667   000020                     vfpfcnvrt@c:
   668                           	callstack 0
   669                           
   670                           ; 1 bytes @ 0x1F
   671   000020                     	ds	1
   672   000021                     ?_vfprintf:
   673                           	callstack 0
   674   000021                     vfprintf@fp:
   675                           	callstack 0
   676   000021                     getHSVval@hue:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0x20
   680   000021                     	ds	1
   681   000022                     vfprintf@fmt:
   682                           	callstack 0
   683                           
   684                           ; 1 bytes @ 0x21
   685   000022                     	ds	1
   686   000023                     vfprintf@ap:
   687                           	callstack 0
   688   000023                     _getHSVval$3205:
   689                           	callstack 0
   690                           
   691                           ; 2 bytes @ 0x22
   692   000023                     	ds	1
   693   000024                     vfprintf@cfmt:
   694                           	callstack 0
   695                           
   696                           ; 1 bytes @ 0x23
   697   000024                     	ds	1
   698   000025                     ?_sprintf:
   699                           	callstack 0
   700   000025                     getHSVval@range:
   701                           	callstack 0
   702   000025                     sprintf@s:
   703                           	callstack 0
   704                           
   705                           ; 2 bytes @ 0x24
   706   000025                     	ds	2
   707   000027                     sprintf@fmt:
   708                           	callstack 0
   709   000027                     getHSVval@maxRGB:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x26
   713   000027                     	ds	9
   714   000030                     sprintf@ret:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x2F
   718   000030                     	ds	2
   719   000032                     sprintf@ap:
   720                           	callstack 0
   721                           
   722                           ; 1 bytes @ 0x31
   723   000032                     	ds	1
   724   000033                     sprintf@f:
   725                           	callstack 0
   726                           
   727                           ; 12 bytes @ 0x32
   728   000033                     	ds	12
   729   00003F                     sendRGBCvalSerial4@col_val:
   730                           	callstack 0
   731   00003F                     sendHSVvalSerial4@col_val:
   732                           	callstack 0
   733                           
   734                           ; 1 bytes @ 0x3E
   735   00003F                     	ds	1
   736   000040                     sendHSVvalSerial4@tempStr:
   737                           	callstack 0
   738   000040                     sendRGBCvalSerial4@tempStr:
   739                           	callstack 0
   740                           
   741                           ; 26 bytes @ 0x3F
   742   000040                     	ds	26
   743   00005A                     ??_main:
   744                           
   745                           ; 1 bytes @ 0x59
   746   00005A                     	ds	2
   747                           
   748 ;;
   749 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   750 ;;
   751 ;; *************** function _main *****************
   752 ;; Defined at:
   753 ;;		line 27 in file "main.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;		None
   756 ;; Auto vars:     Size  Location     Type
   757 ;;  motorR          9   15[BANK0 ] struct DC_motor
   758 ;;  motorL          9    6[BANK0 ] struct DC_motor
   759 ;;  measured_col    8   24[BANK0 ] struct RGBC_val
   760 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
   761 ;;  PWMcycle        2    0        unsigned int 
   762 ;; Return value:  Size  Location     Type
   763 ;;                  1    wreg      void 
   764 ;; Registers used:
   765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   772 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   773 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   774 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   775 ;;Total ram usage:       34 bytes
   776 ;; Hardware stack levels required when called: 7
   777 ;; This function calls:
   778 ;;		_Timer0_init
   779 ;;		_buggy_lights_init
   780 ;;		_color_click_init
   781 ;;		_getHSVval
   782 ;;		_getRGBCval
   783 ;;		_initDCmotorsPWM
   784 ;;		_initUSART4
   785 ;;		_sendHSVvalSerial4
   786 ;;		_sendRGBCvalSerial4
   787 ;;		_toggle_tricolour_LED
   788 ;; This function is called by:
   789 ;;		Startup code after reset
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text0
   794   001456                     __ptext0:
   795                           	callstack 0
   796   001456                     _main:
   797                           	callstack 24
   798   001456                     
   799                           ;main.c: 28:     struct RGBC_val measured_colour;;main.c: 29:         measured_colour.R 
      +                          = 0;
   800   001456  0E00               	movlw	0
   801   001458  0100               	movlb	0	; () banked
   802   00145A  6FB8               	movwf	(main@measured_colour+1)& (0+255),b
   803   00145C  0E00               	movlw	0
   804   00145E  6FB7               	movwf	main@measured_colour& (0+255),b
   805                           
   806                           ;main.c: 30:         measured_colour.G = 0;
   807   001460  0E00               	movlw	0
   808   001462  6FBA               	movwf	(main@measured_colour+3)& (0+255),b
   809   001464  0E00               	movlw	0
   810   001466  6FB9               	movwf	(main@measured_colour+2)& (0+255),b
   811                           
   812                           ;main.c: 31:         measured_colour.B = 0;
   813   001468  0E00               	movlw	0
   814   00146A  6FBC               	movwf	(main@measured_colour+5)& (0+255),b
   815   00146C  0E00               	movlw	0
   816   00146E  6FBB               	movwf	(main@measured_colour+4)& (0+255),b
   817                           
   818                           ;main.c: 32:         measured_colour.C = 0;
   819   001470  0E00               	movlw	0
   820   001472  6FBE               	movwf	(main@measured_colour+7)& (0+255),b
   821   001474  0E00               	movlw	0
   822   001476  6FBD               	movwf	(main@measured_colour+6)& (0+255),b
   823                           
   824                           ;main.c: 34:     struct HSV_val HSV_colour;;main.c: 35:         HSV_colour.H = 0;
   825   001478  0E00               	movlw	0
   826   00147A  6FA0               	movwf	(main@HSV_colour+1)& (0+255),b
   827   00147C  0E00               	movlw	0
   828   00147E  6F9F               	movwf	main@HSV_colour& (0+255),b
   829                           
   830                           ;main.c: 36:         HSV_colour.S = 0;
   831   001480  0E00               	movlw	0
   832   001482  6FA2               	movwf	(main@HSV_colour+3)& (0+255),b
   833   001484  0E00               	movlw	0
   834   001486  6FA1               	movwf	(main@HSV_colour+2)& (0+255),b
   835                           
   836                           ;main.c: 37:         HSV_colour.V = 0;
   837   001488  0E00               	movlw	0
   838   00148A  6FA4               	movwf	(main@HSV_colour+5)& (0+255),b
   839   00148C  0E00               	movlw	0
   840   00148E  6FA3               	movwf	(main@HSV_colour+4)& (0+255),b
   841                           
   842                           ;main.c: 41:     struct DC_motor motorL, motorR;;main.c: 42:         motorL.power = 0;
   843   001490  0E00               	movlw	0
   844   001492  6FA5               	movwf	main@motorL& (0+255),b
   845                           
   846                           ;main.c: 43:         motorL.direction = 1;
   847   001494  0E01               	movlw	1
   848   001496  6FA6               	movwf	(main@motorL+1)& (0+255),b
   849                           
   850                           ;main.c: 44:         motorL.brakemode = 1;
   851   001498  0E01               	movlw	1
   852   00149A  6FA7               	movwf	(main@motorL+2)& (0+255),b
   853   00149C                     
   854                           ; BSR set to: 0
   855                           ;main.c: 45:         motorL.PWMperiod = PWMcycle;
   856   00149C  0E00               	movlw	0
   857   00149E  6FA9               	movwf	(main@motorL+4)& (0+255),b
   858   0014A0  0E63               	movlw	99
   859   0014A2  6FA8               	movwf	(main@motorL+3)& (0+255),b
   860   0014A4                     
   861                           ; BSR set to: 0
   862                           ;main.c: 46:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   863   0014A4  0EAA               	movlw	170
   864   0014A6  6FAA               	movwf	(main@motorL+5)& (0+255),b
   865   0014A8  0E0F               	movlw	15
   866   0014AA  6FAB               	movwf	(main@motorL+6)& (0+255),b
   867   0014AC                     
   868                           ; BSR set to: 0
   869                           ;main.c: 47:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   870   0014AC  0EA6               	movlw	166
   871   0014AE  6FAC               	movwf	(main@motorL+7)& (0+255),b
   872   0014B0  0E0F               	movlw	15
   873   0014B2  6FAD               	movwf	(main@motorL+8)& (0+255),b
   874                           
   875                           ;main.c: 48:         motorR.power = 0;
   876   0014B4  0E00               	movlw	0
   877   0014B6  6FAE               	movwf	main@motorR& (0+255),b
   878                           
   879                           ;main.c: 49:         motorR.direction = 1;
   880   0014B8  0E01               	movlw	1
   881   0014BA  6FAF               	movwf	(main@motorR+1)& (0+255),b
   882                           
   883                           ;main.c: 50:         motorR.brakemode = 1;
   884   0014BC  0E01               	movlw	1
   885   0014BE  6FB0               	movwf	(main@motorR+2)& (0+255),b
   886   0014C0                     
   887                           ; BSR set to: 0
   888                           ;main.c: 51:         motorR.PWMperiod = PWMcycle;
   889   0014C0  0E00               	movlw	0
   890   0014C2  6FB2               	movwf	(main@motorR+4)& (0+255),b
   891   0014C4  0E63               	movlw	99
   892   0014C6  6FB1               	movwf	(main@motorR+3)& (0+255),b
   893   0014C8                     
   894                           ; BSR set to: 0
   895                           ;main.c: 52:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   896   0014C8  0E25               	movlw	37
   897   0014CA  6FB3               	movwf	(main@motorR+5)& (0+255),b
   898   0014CC  0E0F               	movlw	15
   899   0014CE  6FB4               	movwf	(main@motorR+6)& (0+255),b
   900   0014D0                     
   901                           ; BSR set to: 0
   902                           ;main.c: 53:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   903   0014D0  0E21               	movlw	33
   904   0014D2  6FB5               	movwf	(main@motorR+7)& (0+255),b
   905   0014D4  0E0F               	movlw	15
   906   0014D6  6FB6               	movwf	(main@motorR+8)& (0+255),b
   907   0014D8                     
   908                           ; BSR set to: 0
   909                           ;main.c: 55:     initDCmotorsPWM(PWMcycle);
   910   0014D8  0E00               	movlw	0
   911   0014DA  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   912   0014DC  0E63               	movlw	99
   913   0014DE  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   914   0014E0  EC34  F00C         	call	_initDCmotorsPWM	;wreg free
   915                           
   916                           ;main.c: 56:     buggy_lights_init();
   917   0014E4  EC37  F00F         	call	_buggy_lights_init	;wreg free
   918   0014E8                     
   919                           ;main.c: 57:     color_click_init();
   920   0014E8  EC1D  F00F         	call	_color_click_init	;wreg free
   921   0014EC                     
   922                           ;main.c: 58:     initUSART4();
   923   0014EC  ECAC  F00F         	call	_initUSART4	;wreg free
   924   0014F0                     
   925                           ;main.c: 59:     Timer0_init();
   926   0014F0  EC8A  F00F         	call	_Timer0_init	;wreg free
   927   0014F4                     
   928                           ;main.c: 63:         TRISDbits.TRISD7 = 0;
   929   0014F4  9E84               	bcf	132,7,c	;volatile
   930   0014F6                     
   931                           ;main.c: 64:         TRISHbits.TRISH3 = 0;
   932   0014F6  9688               	bcf	136,3,c	;volatile
   933   0014F8                     
   934                           ;main.c: 66:         LATDbits.LATD7 = 0;
   935   0014F8  9E7C               	bcf	124,7,c	;volatile
   936   0014FA                     
   937                           ;main.c: 67:         LATHbits.LATH3 = 0;
   938   0014FA  9680               	bcf	128,3,c	;volatile
   939   0014FC                     
   940                           ;main.c: 71:         TRISFbits.TRISF2 = 1;
   941   0014FC  8486               	bsf	134,2,c	;volatile
   942   0014FE                     
   943                           ;main.c: 72:         TRISFbits.TRISF3 = 1;
   944   0014FE  8686               	bsf	134,3,c	;volatile
   945   001500                     
   946                           ;main.c: 74:         ANSELFbits.ANSELF2 = 0;
   947   001500  010E               	movlb	14	; () banked
   948   001502  95B4               	bcf	180,2,b	;volatile
   949   001504                     
   950                           ; BSR set to: 14
   951                           ;main.c: 75:         ANSELFbits.ANSELF3 = 0;
   952   001504  97B4               	bcf	180,3,b	;volatile
   953                           
   954                           ;main.c: 80:     LATHbits.LATH3 = !LATHbits.LATH3;
   955   001506  A680               	btfss	128,3,c	;volatile
   956   001508  EF88  F00A         	goto	u2101
   957   00150C  EF8C  F00A         	goto	u2100
   958   001510                     u2101:
   959   001510  6A5A               	clrf	??_main^0,c
   960   001512  2A5A               	incf	??_main^0,f,c
   961   001514  EF8D  F00A         	goto	u2118
   962   001518                     u2100:
   963   001518  6A5A               	clrf	??_main^0,c
   964   00151A                     u2118:
   965   00151A  465A               	rlncf	??_main^0,f,c
   966   00151C  465A               	rlncf	??_main^0,f,c
   967   00151E  465A               	rlncf	??_main^0,f,c
   968   001520  5080               	movf	128,w,c	;volatile
   969   001522  185A               	xorwf	??_main^0,w,c
   970   001524  0BF7               	andlw	-9
   971   001526  185A               	xorwf	??_main^0,w,c
   972   001528  6E80               	movwf	128,c	;volatile
   973   00152A                     
   974                           ;main.c: 81:     toggle_tricolour_LED();
   975   00152A  ECB9  F00A         	call	_toggle_tricolour_LED	;wreg free
   976   00152E                     l3389:
   977                           
   978                           ;main.c: 86:         getRGBCval(&measured_colour);
   979   00152E  0EB7               	movlw	low main@measured_colour
   980   001530  6E0C               	movwf	getRGBCval@p^0,c
   981   001532  EC73  F00D         	call	_getRGBCval	;wreg free
   982   001536                     
   983                           ;main.c: 87:         getHSVval(&HSV_colour, &measured_colour);
   984   001536  0E9F               	movlw	low main@HSV_colour
   985   001538  6E13               	movwf	getHSVval@p1^0,c
   986   00153A  0EB7               	movlw	low main@measured_colour
   987   00153C  6E14               	movwf	getHSVval@p2^0,c
   988   00153E  EC0D  F007         	call	_getHSVval	;wreg free
   989   001542                     
   990                           ;main.c: 88:         sendRGBCvalSerial4(&measured_colour);
   991   001542  0EB7               	movlw	low main@measured_colour
   992   001544  6E3F               	movwf	sendRGBCvalSerial4@col_val^0,c
   993   001546  EC19  F00D         	call	_sendRGBCvalSerial4	;wreg free
   994   00154A                     
   995                           ;main.c: 89:         sendHSVvalSerial4(&HSV_colour);
   996   00154A  0E9F               	movlw	low main@HSV_colour
   997   00154C  6E3F               	movwf	sendHSVvalSerial4@col_val^0,c
   998   00154E  EC3E  F00E         	call	_sendHSVvalSerial4	;wreg free
   999   001552                     
  1000                           ;main.c: 90:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1001   001552  0E52               	movlw	82
  1002   001554  6E5B               	movwf	(??_main+1)^0,c
  1003   001556  0E2B               	movlw	43
  1004   001558  6E5A               	movwf	??_main^0,c
  1005   00155A  0E00               	movlw	0
  1006   00155C                     u2587:
  1007   00155C  2EE8               	decfsz	wreg,f,c
  1008   00155E  D7FE               	bra	u2587
  1009   001560  2E5A               	decfsz	??_main^0,f,c
  1010   001562  D7FC               	bra	u2587
  1011   001564  2E5B               	decfsz	(??_main+1)^0,f,c
  1012   001566  D7FA               	bra	u2587
  1013   001568  D000               	nop2	
  1014   00156A  EF97  F00A         	goto	l3389
  1015   00156E  EF1C  F000         	goto	start
  1016   001572                     __end_of_main:
  1017                           	callstack 0
  1018                           
  1019 ;; *************** function _toggle_tricolour_LED *****************
  1020 ;; Defined at:
  1021 ;;		line 86 in file "buggy_lights.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;		None
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, status,2, status,0
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1037 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1038 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1039 ;;Total ram usage:        1 bytes
  1040 ;; Hardware stack levels used: 1
  1041 ;; Hardware stack levels required when called: 1
  1042 ;; This function calls:
  1043 ;;		Nothing
  1044 ;; This function is called by:
  1045 ;;		_main
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049                           	psect	text1
  1050   001572                     __ptext1:
  1051                           	callstack 0
  1052   001572                     _toggle_tricolour_LED:
  1053                           	callstack 29
  1054   001572                     
  1055                           ;buggy_lights.c: 91:             LATGbits.LATG1 = !LATGbits.LATG1;
  1056   001572  A27F               	btfss	127,1,c	;volatile
  1057   001574  EFBE  F00A         	goto	u1831
  1058   001578  EFC2  F00A         	goto	u1830
  1059   00157C                     u1831:
  1060   00157C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1061   00157E  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1062   001580  EFC3  F00A         	goto	u1848
  1063   001584                     u1830:
  1064   001584  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1065   001586                     u1848:
  1066   001586  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1067   001588  507F               	movf	127,w,c	;volatile
  1068   00158A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1069   00158C  0BFD               	andlw	-3
  1070   00158E  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1071   001590  6E7F               	movwf	127,c	;volatile
  1072                           
  1073                           ;buggy_lights.c: 92:             LATAbits.LATA4 = !LATAbits.LATA4;
  1074   001592  A879               	btfss	121,4,c	;volatile
  1075   001594  EFCE  F00A         	goto	u1851
  1076   001598  EFD2  F00A         	goto	u1850
  1077   00159C                     u1851:
  1078   00159C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1079   00159E  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1080   0015A0  EFD3  F00A         	goto	u1868
  1081   0015A4                     u1850:
  1082   0015A4  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1083   0015A6                     u1868:
  1084   0015A6  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  1085   0015A8  5079               	movf	121,w,c	;volatile
  1086   0015AA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1087   0015AC  0BEF               	andlw	-17
  1088   0015AE  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1089   0015B0  6E79               	movwf	121,c	;volatile
  1090                           
  1091                           ;buggy_lights.c: 93:             LATFbits.LATF7 = !LATFbits.LATF7;
  1092   0015B2  AE7E               	btfss	126,7,c	;volatile
  1093   0015B4  EFDE  F00A         	goto	u1871
  1094   0015B8  EFE2  F00A         	goto	u1870
  1095   0015BC                     u1871:
  1096   0015BC  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1097   0015BE  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1098   0015C0  EFE3  F00A         	goto	u1888
  1099   0015C4                     u1870:
  1100   0015C4  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1101   0015C6                     u1888:
  1102   0015C6  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1103   0015C8  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1104   0015CA  507E               	movf	126,w,c	;volatile
  1105   0015CC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1106   0015CE  0B7F               	andlw	-129
  1107   0015D0  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1108   0015D2  6E7E               	movwf	126,c	;volatile
  1109                           
  1110                           ;buggy_lights.c: 97:             LATGbits.LATG0 = !LATGbits.LATG0;
  1111   0015D4  A07F               	btfss	127,0,c	;volatile
  1112   0015D6  EFEF  F00A         	goto	u1891
  1113   0015DA  EFF3  F00A         	goto	u1890
  1114   0015DE                     u1891:
  1115   0015DE  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1116   0015E0  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1117   0015E2  EFF4  F00A         	goto	u1908
  1118   0015E6                     u1890:
  1119   0015E6  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1120   0015E8                     u1908:
  1121   0015E8  507F               	movf	127,w,c	;volatile
  1122   0015EA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1123   0015EC  0BFE               	andlw	-2
  1124   0015EE  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1125   0015F0  6E7F               	movwf	127,c	;volatile
  1126                           
  1127                           ;buggy_lights.c: 98:             LATEbits.LATE7 = !LATEbits.LATE7;
  1128   0015F2  AE7D               	btfss	125,7,c	;volatile
  1129   0015F4  EFFE  F00A         	goto	u1911
  1130   0015F8  EF02  F00B         	goto	u1910
  1131   0015FC                     u1911:
  1132   0015FC  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1133   0015FE  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1134   001600  EF03  F00B         	goto	u1928
  1135   001604                     u1910:
  1136   001604  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1137   001606                     u1928:
  1138   001606  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1139   001608  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1140   00160A  507D               	movf	125,w,c	;volatile
  1141   00160C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1142   00160E  0B7F               	andlw	-129
  1143   001610  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1144   001612  6E7D               	movwf	125,c	;volatile
  1145                           
  1146                           ;buggy_lights.c: 99:             LATAbits.LATA3 = !LATAbits.LATA3;
  1147   001614  A679               	btfss	121,3,c	;volatile
  1148   001616  EF0F  F00B         	goto	u1931
  1149   00161A  EF13  F00B         	goto	u1930
  1150   00161E                     u1931:
  1151   00161E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1152   001620  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1153   001622  EF14  F00B         	goto	u1948
  1154   001626                     u1930:
  1155   001626  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1156   001628                     u1948:
  1157   001628  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1158   00162A  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1159   00162C  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1160   00162E  5079               	movf	121,w,c	;volatile
  1161   001630  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1162   001632  0BF7               	andlw	-9
  1163   001634  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1164   001636  6E79               	movwf	121,c	;volatile
  1165   001638  0012               	return		;funcret
  1166   00163A                     __end_of_toggle_tricolour_LED:
  1167                           	callstack 0
  1168                           
  1169 ;; *************** function _sendRGBCvalSerial4 *****************
  1170 ;; Defined at:
  1171 ;;		line 62 in file "serial.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;  col_val         1   62[COMRAM] PTR struct RGBC_val
  1174 ;;		 -> main@measured_colour(8), 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;  tempStr        26   63[COMRAM] unsigned char [26]
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1186 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1187 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1189 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1190 ;;Total ram usage:       27 bytes
  1191 ;; Hardware stack levels used: 1
  1192 ;; Hardware stack levels required when called: 6
  1193 ;; This function calls:
  1194 ;;		_sendStringSerial4
  1195 ;;		_sprintf
  1196 ;; This function is called by:
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text2
  1202   001A32                     __ptext2:
  1203                           	callstack 0
  1204   001A32                     _sendRGBCvalSerial4:
  1205                           	callstack 24
  1206   001A32                     
  1207                           ;serial.c: 63:     char tempStr[26];;serial.c: 65:     sprintf(tempStr, "%u %u %u %u \r"
      +                          , col_val->R, col_val->G, col_val->B, col_val->C);
  1208   001A32  0E40               	movlw	low sendRGBCvalSerial4@tempStr
  1209   001A34  6E25               	movwf	sprintf@s^0,c
  1210   001A36  6A26               	clrf	(sprintf@s+1)^0,c
  1211   001A38  0E01               	movlw	low STR_5
  1212   001A3A  6E27               	movwf	sprintf@fmt^0,c
  1213   001A3C  503F               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1214   001A3E  6ED9               	movwf	fsr2l,c
  1215   001A40  6ADA               	clrf	fsr2h,c
  1216   001A42  CFDE F028          	movff	postinc2,?_sprintf+3
  1217   001A46  CFDD F029          	movff	postdec2,?_sprintf+4
  1218   001A4A  503F               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1219   001A4C  6ED9               	movwf	fsr2l,c
  1220   001A4E  6ADA               	clrf	fsr2h,c
  1221   001A50  0E02               	movlw	2
  1222   001A52  26D9               	addwf	fsr2l,f,c
  1223   001A54  CFDE F02A          	movff	postinc2,?_sprintf+5
  1224   001A58  CFDD F02B          	movff	postdec2,?_sprintf+6
  1225   001A5C  503F               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1226   001A5E  6ED9               	movwf	fsr2l,c
  1227   001A60  6ADA               	clrf	fsr2h,c
  1228   001A62  0E04               	movlw	4
  1229   001A64  26D9               	addwf	fsr2l,f,c
  1230   001A66  CFDE F02C          	movff	postinc2,?_sprintf+7
  1231   001A6A  CFDD F02D          	movff	postdec2,?_sprintf+8
  1232   001A6E  503F               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1233   001A70  6ED9               	movwf	fsr2l,c
  1234   001A72  6ADA               	clrf	fsr2h,c
  1235   001A74  0E06               	movlw	6
  1236   001A76  26D9               	addwf	fsr2l,f,c
  1237   001A78  CFDE F02E          	movff	postinc2,?_sprintf+9
  1238   001A7C  CFDD F02F          	movff	postdec2,?_sprintf+10
  1239   001A80  EC64  F00E         	call	_sprintf	;wreg free
  1240   001A84                     
  1241                           ;serial.c: 66:     sendStringSerial4(tempStr);
  1242   001A84  0E40               	movlw	low sendRGBCvalSerial4@tempStr
  1243   001A86  6E02               	movwf	sendStringSerial4@string^0,c
  1244   001A88  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1245   001A8A  ECE8  F00C         	call	_sendStringSerial4	;wreg free
  1246   001A8E  0012               	return		;funcret
  1247   001A90                     __end_of_sendRGBCvalSerial4:
  1248                           	callstack 0
  1249                           
  1250 ;; *************** function _sendHSVvalSerial4 *****************
  1251 ;; Defined at:
  1252 ;;		line 70 in file "serial.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;  col_val         1   62[COMRAM] PTR struct HSV_val
  1255 ;;		 -> main@HSV_colour(6), 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  tempStr        21   63[COMRAM] unsigned char [21]
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1267 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1268 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1270 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1271 ;;Total ram usage:       22 bytes
  1272 ;; Hardware stack levels used: 1
  1273 ;; Hardware stack levels required when called: 6
  1274 ;; This function calls:
  1275 ;;		_sendStringSerial4
  1276 ;;		_sprintf
  1277 ;; This function is called by:
  1278 ;;		_main
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text3
  1283   001C7C                     __ptext3:
  1284                           	callstack 0
  1285   001C7C                     _sendHSVvalSerial4:
  1286                           	callstack 24
  1287   001C7C                     
  1288                           ;serial.c: 71:     char tempStr[21];;serial.c: 73:     sprintf(tempStr, "%u %u %u \r", c
      +                          ol_val->H, col_val->S, col_val->V);
  1289   001C7C  0E40               	movlw	low sendHSVvalSerial4@tempStr
  1290   001C7E  6E25               	movwf	sprintf@s^0,c
  1291   001C80  6A26               	clrf	(sprintf@s+1)^0,c
  1292   001C82  0E04               	movlw	low (STR_5+3)
  1293   001C84  6E27               	movwf	sprintf@fmt^0,c
  1294   001C86  503F               	movf	sendHSVvalSerial4@col_val^0,w,c
  1295   001C88  6ED9               	movwf	fsr2l,c
  1296   001C8A  6ADA               	clrf	fsr2h,c
  1297   001C8C  CFDE F028          	movff	postinc2,?_sprintf+3
  1298   001C90  CFDD F029          	movff	postdec2,?_sprintf+4
  1299   001C94  503F               	movf	sendHSVvalSerial4@col_val^0,w,c
  1300   001C96  6ED9               	movwf	fsr2l,c
  1301   001C98  6ADA               	clrf	fsr2h,c
  1302   001C9A  0E02               	movlw	2
  1303   001C9C  26D9               	addwf	fsr2l,f,c
  1304   001C9E  CFDE F02A          	movff	postinc2,?_sprintf+5
  1305   001CA2  CFDD F02B          	movff	postdec2,?_sprintf+6
  1306   001CA6  503F               	movf	sendHSVvalSerial4@col_val^0,w,c
  1307   001CA8  6ED9               	movwf	fsr2l,c
  1308   001CAA  6ADA               	clrf	fsr2h,c
  1309   001CAC  0E04               	movlw	4
  1310   001CAE  26D9               	addwf	fsr2l,f,c
  1311   001CB0  CFDE F02C          	movff	postinc2,?_sprintf+7
  1312   001CB4  CFDD F02D          	movff	postdec2,?_sprintf+8
  1313   001CB8  EC64  F00E         	call	_sprintf	;wreg free
  1314   001CBC                     
  1315                           ;serial.c: 74:     sendStringSerial4(tempStr);
  1316   001CBC  0E40               	movlw	low sendHSVvalSerial4@tempStr
  1317   001CBE  6E02               	movwf	sendStringSerial4@string^0,c
  1318   001CC0  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1319   001CC2  ECE8  F00C         	call	_sendStringSerial4	;wreg free
  1320   001CC6  0012               	return		;funcret
  1321   001CC8                     __end_of_sendHSVvalSerial4:
  1322                           	callstack 0
  1323                           
  1324 ;; *************** function _sprintf *****************
  1325 ;; Defined at:
  1326 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  s               2   36[COMRAM] PTR unsigned char 
  1329 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), sendArrayCharSerial4@tempStr(161), sendIntSerial4
      +@string(17), 
  1330 ;;  fmt             1   38[COMRAM] PTR const unsigned char 
  1331 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;  f              12   50[COMRAM] struct _IO_FILE
  1334 ;;  ret             2   47[COMRAM] int 
  1335 ;;  ap              1   49[COMRAM] PTR void [1]
  1336 ;;		 -> ?_sprintf(2), 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  2   36[COMRAM] int 
  1339 ;; Registers used:
  1340 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1346 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1347 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1349 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1350 ;;Total ram usage:       26 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; Hardware stack levels required when called: 5
  1353 ;; This function calls:
  1354 ;;		_vfprintf
  1355 ;; This function is called by:
  1356 ;;		_sendRGBCvalSerial4
  1357 ;;		_sendHSVvalSerial4
  1358 ;;		_sendIntSerial4
  1359 ;;		_sendArrayCharSerial4
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text4
  1364   001CC8                     __ptext4:
  1365                           	callstack 0
  1366   001CC8                     _sprintf:
  1367                           	callstack 24
  1368   001CC8  0E28               	movlw	low (?_sprintf+3)
  1369   001CCA  6E32               	movwf	sprintf@ap^0,c
  1370   001CCC  C025  F033         	movff	sprintf@s,sprintf@f
  1371   001CD0  C026  F034         	movff	sprintf@s+1,sprintf@f+1
  1372   001CD4  0E00               	movlw	0
  1373   001CD6  6E37               	movwf	(sprintf@f+4)^0,c
  1374   001CD8  0E00               	movlw	0
  1375   001CDA  6E36               	movwf	(sprintf@f+3)^0,c
  1376   001CDC  0E00               	movlw	0
  1377   001CDE  6E3E               	movwf	(sprintf@f+11)^0,c
  1378   001CE0  0E00               	movlw	0
  1379   001CE2  6E3D               	movwf	(sprintf@f+10)^0,c
  1380   001CE4  0E33               	movlw	low sprintf@f
  1381   001CE6  6E21               	movwf	vfprintf@fp^0,c
  1382   001CE8  C027  F022         	movff	sprintf@fmt,vfprintf@fmt
  1383   001CEC  0E32               	movlw	low sprintf@ap
  1384   001CEE  6E23               	movwf	vfprintf@ap^0,c
  1385   001CF0  EC48  F00D         	call	_vfprintf	;wreg free
  1386   001CF4  C021  F030         	movff	?_vfprintf,sprintf@ret
  1387   001CF8  C022  F031         	movff	?_vfprintf+1,sprintf@ret+1
  1388   001CFC  5036               	movf	(sprintf@f+3)^0,w,c
  1389   001CFE  2425               	addwf	sprintf@s^0,w,c
  1390   001D00  6ED9               	movwf	fsr2l,c
  1391   001D02  5037               	movf	(sprintf@f+4)^0,w,c
  1392   001D04  2026               	addwfc	(sprintf@s+1)^0,w,c
  1393   001D06  6EDA               	movwf	fsr2h,c
  1394   001D08  6ADF               	clrf	indf2,c
  1395   001D0A  C030  F025         	movff	sprintf@ret,?_sprintf
  1396   001D0E  C031  F026         	movff	sprintf@ret+1,?_sprintf+1
  1397   001D12  0012               	return		;funcret
  1398   001D14                     __end_of_sprintf:
  1399                           	callstack 0
  1400                           
  1401 ;; *************** function _vfprintf *****************
  1402 ;; Defined at:
  1403 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;  fp              1   32[COMRAM] PTR struct _IO_FILE
  1406 ;;		 -> sprintf@f(12), 
  1407 ;;  fmt             1   33[COMRAM] PTR const unsigned char 
  1408 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1409 ;;  ap              1   34[COMRAM] PTR PTR void 
  1410 ;;		 -> sprintf@ap(1), 
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;  cfmt            1   35[COMRAM] PTR unsigned char 
  1413 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  2   32[COMRAM] int 
  1416 ;; Registers used:
  1417 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1423 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1426 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1427 ;;Total ram usage:        4 bytes
  1428 ;; Hardware stack levels used: 1
  1429 ;; Hardware stack levels required when called: 4
  1430 ;; This function calls:
  1431 ;;		_vfpfcnvrt
  1432 ;; This function is called by:
  1433 ;;		_sprintf
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text5
  1438   001A90                     __ptext5:
  1439                           	callstack 0
  1440   001A90                     _vfprintf:
  1441                           	callstack 24
  1442   001A90                     
  1443                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1444   001A90  C022  F024         	movff	vfprintf@fmt,vfprintf@cfmt
  1445   001A94                     
  1446                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  1447   001A94  0E00               	movlw	0
  1448   001A96  0100               	movlb	0	; () banked
  1449   001A98  6F95               	movwf	(_nout+1)& (0+255),b
  1450   001A9A  0E00               	movlw	0
  1451   001A9C  6F94               	movwf	_nout& (0+255),b
  1452                           
  1453                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1454   001A9E  EF5E  F00D         	goto	l2951
  1455   001AA2                     l2949:
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  1459   001AA2  C021  F013         	movff	vfprintf@fp,vfpfcnvrt@fp
  1460   001AA6  0E24               	movlw	low vfprintf@cfmt
  1461   001AA8  6E14               	movwf	vfpfcnvrt@fmt^0,c
  1462   001AAA  C023  F015         	movff	vfprintf@ap,vfpfcnvrt@ap
  1463   001AAE  ECA5  F008         	call	_vfpfcnvrt	;wreg free
  1464   001AB2  5013               	movf	?_vfpfcnvrt^0,w,c
  1465   001AB4  0100               	movlb	0	; () banked
  1466   001AB6  2794               	addwf	_nout& (0+255),f,b
  1467   001AB8  5014               	movf	(?_vfpfcnvrt+1)^0,w,c
  1468   001ABA  2395               	addwfc	(_nout+1)& (0+255),f,b
  1469   001ABC                     l2951:
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1473   001ABC  C024  FFF6         	movff	vfprintf@cfmt,tblptrl
  1474   001AC0                     	if	1	;There is more than 1 active tblptr byte
  1475   001AC0  0E0E               	movlw	high __smallconst
  1476   001AC2  6EF7               	movwf	tblptrh,c
  1477   001AC4                     	endif
  1478   001AC4                     	if	0	;tblptru may be non-zero
  1479   001AC4                     	endif
  1480   001AC4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1481   001AC4  0E00               	movlw	low (__smallconst shr (0+16))
  1482   001AC6  6EF8               	movwf	tblptru,c
  1483   001AC8                     	endif
  1484   001AC8  0008               	tblrd		*
  1485   001ACA  50F5               	movf	tablat,w,c
  1486   001ACC  0900               	iorlw	0
  1487   001ACE  A4D8               	btfss	status,2,c
  1488   001AD0  EF6C  F00D         	goto	u1771
  1489   001AD4  EF6E  F00D         	goto	u1770
  1490   001AD8                     u1771:
  1491   001AD8  EF51  F00D         	goto	l2949
  1492   001ADC                     u1770:
  1493   001ADC                     
  1494                           ; BSR set to: 0
  1495                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  1496   001ADC  C094  F021         	movff	_nout,?_vfprintf
  1497   001AE0  C095  F022         	movff	_nout+1,?_vfprintf+1
  1498   001AE4                     
  1499                           ; BSR set to: 0
  1500   001AE4  0012               	return		;funcret
  1501   001AE6                     __end_of_vfprintf:
  1502                           	callstack 0
  1503                           
  1504 ;; *************** function _vfpfcnvrt *****************
  1505 ;; Defined at:
  1506 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  fp              1   18[COMRAM] PTR struct _IO_FILE
  1509 ;;		 -> sprintf@f(12), 
  1510 ;;  fmt             1   19[COMRAM] PTR PTR unsigned char 
  1511 ;;		 -> vfprintf@cfmt(1), 
  1512 ;;  ap              1   20[COMRAM] PTR PTR void 
  1513 ;;		 -> sprintf@ap(1), 
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  convarg         4   27[COMRAM] struct .
  1516 ;;  cnt             2   24[COMRAM] int 
  1517 ;;  c               1   31[COMRAM] unsigned char 
  1518 ;;  cp              1   26[COMRAM] PTR unsigned char 
  1519 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1520 ;;  done            1   23[COMRAM] _Bool 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  2   18[COMRAM] int 
  1523 ;; Registers used:
  1524 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1530 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1531 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1533 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1534 ;;Total ram usage:       14 bytes
  1535 ;; Hardware stack levels used: 1
  1536 ;; Hardware stack levels required when called: 3
  1537 ;; This function calls:
  1538 ;;		___awdiv
  1539 ;;		___awmod
  1540 ;;		___lwdiv
  1541 ;;		___lwmod
  1542 ;;		_abs
  1543 ;;		_fputc
  1544 ;; This function is called by:
  1545 ;;		_vfprintf
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text6
  1550   00114A                     __ptext6:
  1551                           	callstack 0
  1552   00114A                     _vfpfcnvrt:
  1553                           	callstack 24
  1554   00114A                     
  1555                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  1556   00114A  0E00               	movlw	0
  1557   00114C  6E1A               	movwf	(vfpfcnvrt@cnt+1)^0,c
  1558   00114E  0E00               	movlw	0
  1559   001150  6E19               	movwf	vfpfcnvrt@cnt^0,c
  1560   001152                     
  1561                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  1562   001152  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1563   001154  6ED9               	movwf	fsr2l,c
  1564   001156  6ADA               	clrf	fsr2h,c
  1565   001158  CFDF FFF6          	movff	indf2,tblptrl
  1566   00115C                     	if	1	;There is more than 1 active tblptr byte
  1567   00115C  0E0E               	movlw	high __smallconst
  1568   00115E  6EF7               	movwf	tblptrh,c
  1569   001160                     	endif
  1570   001160                     	if	0	;tblptru may be non-zero
  1571   001160                     	endif
  1572   001160                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1573   001160  0E00               	movlw	low (__smallconst shr (0+16))
  1574   001162  6EF8               	movwf	tblptru,c
  1575   001164                     	endif
  1576   001164  0008               	tblrd		*
  1577   001166  50F5               	movf	tablat,w,c
  1578   001168  0A25               	xorlw	37
  1579   00116A  A4D8               	btfss	status,2,c
  1580   00116C  EFBA  F008         	goto	u1601
  1581   001170  EFBC  F008         	goto	u1600
  1582   001174                     u1601:
  1583   001174  EF11  F00A         	goto	l2851
  1584   001178                     u1600:
  1585   001178                     
  1586                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1587   001178  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1588   00117A  6ED9               	movwf	fsr2l,c
  1589   00117C  6ADA               	clrf	fsr2h,c
  1590   00117E  2ADF               	incf	indf2,f,c
  1591   001180                     
  1592                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1593   001180  0E00               	movlw	0
  1594   001182  0100               	movlb	0	; () banked
  1595   001184  6F97               	movwf	(_width+1)& (0+255),b
  1596   001186  0E00               	movlw	0
  1597   001188  6F96               	movwf	_width& (0+255),b
  1598   00118A  C096  F09A         	movff	_width,_flags
  1599   00118E                     
  1600                           ; BSR set to: 0
  1601                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1602   00118E  6998               	setf	_prec& (0+255),b
  1603   001190  6999               	setf	(_prec+1)& (0+255),b
  1604   001192                     
  1605                           ; BSR set to: 0
  1606                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1607   001192  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1608   001194  6ED9               	movwf	fsr2l,c
  1609   001196  6ADA               	clrf	fsr2h,c
  1610   001198  50DF               	movf	indf2,w,c
  1611   00119A  6E1B               	movwf	vfpfcnvrt@cp^0,c
  1612   00119C                     
  1613                           ; BSR set to: 0
  1614                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1615   00119C  C01B  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1616   0011A0                     	if	1	;There is more than 1 active tblptr byte
  1617   0011A0  0E0E               	movlw	high __smallconst
  1618   0011A2  6EF7               	movwf	tblptrh,c
  1619   0011A4                     	endif
  1620   0011A4                     	if	0	;tblptru may be non-zero
  1621   0011A4                     	endif
  1622   0011A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1623   0011A4  0E00               	movlw	low (__smallconst shr (0+16))
  1624   0011A6  6EF8               	movwf	tblptru,c
  1625   0011A8                     	endif
  1626   0011A8  0008               	tblrd		*
  1627   0011AA  50F5               	movf	tablat,w,c
  1628   0011AC  0A64               	xorlw	100
  1629   0011AE  B4D8               	btfsc	status,2,c
  1630   0011B0  EFDC  F008         	goto	u1611
  1631   0011B4  EFDE  F008         	goto	u1610
  1632   0011B8                     u1611:
  1633   0011B8  EFEE  F008         	goto	l2787
  1634   0011BC                     u1610:
  1635   0011BC                     
  1636                           ; BSR set to: 0
  1637   0011BC  C01B  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1638   0011C0                     	if	1	;There is more than 1 active tblptr byte
  1639   0011C0  0E0E               	movlw	high __smallconst
  1640   0011C2  6EF7               	movwf	tblptrh,c
  1641   0011C4                     	endif
  1642   0011C4                     	if	0	;tblptru may be non-zero
  1643   0011C4                     	endif
  1644   0011C4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1645   0011C4  0E00               	movlw	low (__smallconst shr (0+16))
  1646   0011C6  6EF8               	movwf	tblptru,c
  1647   0011C8                     	endif
  1648   0011C8  0008               	tblrd		*
  1649   0011CA  50F5               	movf	tablat,w,c
  1650   0011CC  0A69               	xorlw	105
  1651   0011CE  A4D8               	btfss	status,2,c
  1652   0011D0  EFEC  F008         	goto	u1621
  1653   0011D4  EFEE  F008         	goto	u1620
  1654   0011D8                     u1621:
  1655   0011D8  EF7C  F009         	goto	l2817
  1656   0011DC                     u1620:
  1657   0011DC                     l2787:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1661   0011DC  5015               	movf	vfpfcnvrt@ap^0,w,c
  1662   0011DE  6ED9               	movwf	fsr2l,c
  1663   0011E0  6ADA               	clrf	fsr2h,c
  1664   0011E2  0E02               	movlw	2
  1665   0011E4  26DF               	addwf	indf2,f,c
  1666   0011E6  5CDF               	subwf	indf2,w,c
  1667   0011E8  6ED9               	movwf	fsr2l,c
  1668   0011EA  6ADA               	clrf	fsr2h,c
  1669   0011EC  CFDE F01C          	movff	postinc2,vfpfcnvrt@convarg
  1670   0011F0  CFDE F01D          	movff	postinc2,vfpfcnvrt@convarg+1
  1671   0011F4                     
  1672                           ; BSR set to: 0
  1673                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1674   0011F4  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1675   0011F6  6ED9               	movwf	fsr2l,c
  1676   0011F8  6ADA               	clrf	fsr2h,c
  1677   0011FA  281B               	incf	vfpfcnvrt@cp^0,w,c
  1678   0011FC  6EDF               	movwf	indf2,c
  1679   0011FE                     
  1680                           ; BSR set to: 0
  1681                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1682   0011FE  0E20               	movlw	32
  1683   001200  6E20               	movwf	vfpfcnvrt@c^0,c
  1684                           
  1685                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1686   001202  BE1D               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1687   001204  EF06  F009         	goto	u1631
  1688   001208  EF09  F009         	goto	u1630
  1689   00120C                     u1631:
  1690   00120C  0E01               	movlw	1
  1691   00120E  EF0A  F009         	goto	u1640
  1692   001212                     u1630:
  1693   001212  0E00               	movlw	0
  1694   001214                     u1640:
  1695   001214  6E18               	movwf	vfpfcnvrt@done^0,c
  1696   001216                     l2793:
  1697                           
  1698                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1699   001216  0620               	decf	vfpfcnvrt@c^0,f,c
  1700   001218  5020               	movf	vfpfcnvrt@c^0,w,c
  1701   00121A  0F60               	addlw	low _dbuf
  1702   00121C  6ED9               	movwf	fsr2l,c
  1703   00121E  6ADA               	clrf	fsr2h,c
  1704   001220  C01C  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1705   001224  C01D  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1706   001228  0E00               	movlw	0
  1707   00122A  6E04               	movwf	(___awmod@divisor+1)^0,c
  1708   00122C  0E0A               	movlw	10
  1709   00122E  6E03               	movwf	___awmod@divisor^0,c
  1710   001230  ECDC  F00B         	call	___awmod	;wreg free
  1711   001234  C001  F007         	movff	?___awmod,abs@a
  1712   001238  C002  F008         	movff	?___awmod+1,abs@a+1
  1713   00123C  ECCF  F00E         	call	_abs	;wreg free
  1714   001240  5007               	movf	?_abs^0,w,c
  1715   001242  0F30               	addlw	48
  1716   001244  6EDF               	movwf	indf2,c
  1717   001246                     
  1718                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1719   001246  C01C  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1720   00124A  C01D  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1721   00124E  0E00               	movlw	0
  1722   001250  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1723   001252  0E0A               	movlw	10
  1724   001254  6E03               	movwf	___awdiv@divisor^0,c
  1725   001256  EC1D  F00B         	call	___awdiv	;wreg free
  1726   00125A  C001  F01C         	movff	?___awdiv,vfpfcnvrt@convarg
  1727   00125E  C002  F01D         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1728   001262                     
  1729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  1730   001262  4A19               	infsnz	vfpfcnvrt@cnt^0,f,c
  1731   001264  2A1A               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1732   001266                     
  1733                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1734   001266  501C               	movf	vfpfcnvrt@convarg^0,w,c
  1735   001268  101D               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1736   00126A  B4D8               	btfsc	status,2,c
  1737   00126C  EF3A  F009         	goto	u1651
  1738   001270  EF3C  F009         	goto	u1650
  1739   001274                     u1651:
  1740   001274  EF44  F009         	goto	l2803
  1741   001278                     u1650:
  1742   001278  5020               	movf	vfpfcnvrt@c^0,w,c
  1743   00127A  A4D8               	btfss	status,2,c
  1744   00127C  EF42  F009         	goto	u1661
  1745   001280  EF44  F009         	goto	u1660
  1746   001284                     u1661:
  1747   001284  EF0B  F009         	goto	l2793
  1748   001288                     u1660:
  1749   001288                     l2803:
  1750                           
  1751                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1752   001288  5020               	movf	vfpfcnvrt@c^0,w,c
  1753   00128A  B4D8               	btfsc	status,2,c
  1754   00128C  EF4A  F009         	goto	u1671
  1755   001290  EF4C  F009         	goto	u1670
  1756   001294                     u1671:
  1757   001294  EF6D  F009         	goto	l2815
  1758   001298                     u1670:
  1759   001298  5018               	movf	vfpfcnvrt@done^0,w,c
  1760   00129A  B4D8               	btfsc	status,2,c
  1761   00129C  EF52  F009         	goto	u1681
  1762   0012A0  EF54  F009         	goto	u1680
  1763   0012A4                     u1681:
  1764   0012A4  EF6D  F009         	goto	l2815
  1765   0012A8                     u1680:
  1766   0012A8                     
  1767                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1768   0012A8  0620               	decf	vfpfcnvrt@c^0,f,c
  1769   0012AA  5020               	movf	vfpfcnvrt@c^0,w,c
  1770   0012AC  0F60               	addlw	low _dbuf
  1771   0012AE  6ED9               	movwf	fsr2l,c
  1772   0012B0  6ADA               	clrf	fsr2h,c
  1773   0012B2  0E2D               	movlw	45
  1774   0012B4  6EDF               	movwf	indf2,c
  1775   0012B6                     
  1776                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  1777   0012B6  4A19               	infsnz	vfpfcnvrt@cnt^0,f,c
  1778   0012B8  2A1A               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1779   0012BA  EF6D  F009         	goto	l2815
  1780   0012BE                     l2811:
  1781                           
  1782                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1783   0012BE  5020               	movf	vfpfcnvrt@c^0,w,c
  1784   0012C0  0F60               	addlw	low _dbuf
  1785   0012C2  6ED9               	movwf	fsr2l,c
  1786   0012C4  6ADA               	clrf	fsr2h,c
  1787   0012C6  50DF               	movf	indf2,w,c
  1788   0012C8  6E16               	movwf	??_vfpfcnvrt^0,c
  1789   0012CA  5016               	movf	??_vfpfcnvrt^0,w,c
  1790   0012CC  6E01               	movwf	fputc@c^0,c
  1791   0012CE  6A02               	clrf	(fputc@c+1)^0,c
  1792   0012D0  C013  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1793   0012D4  EC7F  F00B         	call	_fputc	;wreg free
  1794   0012D8  2A20               	incf	vfpfcnvrt@c^0,f,c
  1795   0012DA                     l2815:
  1796                           
  1797                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1798   0012DA  0E20               	movlw	32
  1799   0012DC  1820               	xorwf	vfpfcnvrt@c^0,w,c
  1800   0012DE  A4D8               	btfss	status,2,c
  1801   0012E0  EF74  F009         	goto	u1691
  1802   0012E4  EF76  F009         	goto	u1690
  1803   0012E8                     u1691:
  1804   0012E8  EF5F  F009         	goto	l2811
  1805   0012EC                     u1690:
  1806   0012EC                     l1477:
  1807                           
  1808                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  1809   0012EC  C019  F013         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  1810   0012F0  C01A  F014         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  1811   0012F4  EF2A  F00A         	goto	l1478
  1812   0012F8                     l2817:
  1813                           
  1814                           ; BSR set to: 0
  1815   0012F8  C01B  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1816   0012FC                     	if	1	;There is more than 1 active tblptr byte
  1817   0012FC  0E0E               	movlw	high __smallconst
  1818   0012FE  6EF7               	movwf	tblptrh,c
  1819   001300                     	endif
  1820   001300                     	if	0	;tblptru may be non-zero
  1821   001300                     	endif
  1822   001300                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1823   001300  0E00               	movlw	low (__smallconst shr (0+16))
  1824   001302  6EF8               	movwf	tblptru,c
  1825   001304                     	endif
  1826   001304  0008               	tblrd		*
  1827   001306  50F5               	movf	tablat,w,c
  1828   001308  0A75               	xorlw	117
  1829   00130A  A4D8               	btfss	status,2,c
  1830   00130C  EF8A  F009         	goto	u1701
  1831   001310  EF8C  F009         	goto	u1700
  1832   001314                     u1701:
  1833   001314  EF07  F00A         	goto	l2845
  1834   001318                     u1700:
  1835   001318                     
  1836                           ; BSR set to: 0
  1837                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1838   001318  5015               	movf	vfpfcnvrt@ap^0,w,c
  1839   00131A  6ED9               	movwf	fsr2l,c
  1840   00131C  6ADA               	clrf	fsr2h,c
  1841   00131E  0E02               	movlw	2
  1842   001320  26DF               	addwf	indf2,f,c
  1843   001322  5CDF               	subwf	indf2,w,c
  1844   001324  6ED9               	movwf	fsr2l,c
  1845   001326  6ADA               	clrf	fsr2h,c
  1846   001328  CFDE F01C          	movff	postinc2,vfpfcnvrt@convarg
  1847   00132C  CFDE F01D          	movff	postinc2,vfpfcnvrt@convarg+1
  1848   001330                     
  1849                           ; BSR set to: 0
  1850                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1851   001330  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1852   001332  6ED9               	movwf	fsr2l,c
  1853   001334  6ADA               	clrf	fsr2h,c
  1854   001336  281B               	incf	vfpfcnvrt@cp^0,w,c
  1855   001338  6EDF               	movwf	indf2,c
  1856                           
  1857                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1858   00133A  EFEF  F009         	goto	l2843
  1859   00133E                     l2823:
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  1863   00133E  0E20               	movlw	32
  1864   001340  6E20               	movwf	vfpfcnvrt@c^0,c
  1865   001342                     l2825:
  1866                           
  1867                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  1868   001342  0620               	decf	vfpfcnvrt@c^0,f,c
  1869   001344  5020               	movf	vfpfcnvrt@c^0,w,c
  1870   001346  0F60               	addlw	low _dbuf
  1871   001348  6ED9               	movwf	fsr2l,c
  1872   00134A  6ADA               	clrf	fsr2h,c
  1873   00134C  C01C  F00E         	movff	vfpfcnvrt@convarg,___lwmod@dividend
  1874   001350  C01D  F00F         	movff	vfpfcnvrt@convarg+1,___lwmod@dividend+1
  1875   001354  0E00               	movlw	0
  1876   001356  6E11               	movwf	(___lwmod@divisor+1)^0,c
  1877   001358  0E0A               	movlw	10
  1878   00135A  6E10               	movwf	___lwmod@divisor^0,c
  1879   00135C  ECB6  F00C         	call	___lwmod	;wreg free
  1880   001360  500E               	movf	?___lwmod^0,w,c
  1881   001362  0F30               	addlw	48
  1882   001364  6EDF               	movwf	indf2,c
  1883   001366                     
  1884                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  1885   001366  C01C  F007         	movff	vfpfcnvrt@convarg,___lwdiv@dividend
  1886   00136A  C01D  F008         	movff	vfpfcnvrt@convarg+1,___lwdiv@dividend+1
  1887   00136E  0E00               	movlw	0
  1888   001370  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1889   001372  0E0A               	movlw	10
  1890   001374  6E09               	movwf	___lwdiv@divisor^0,c
  1891   001376  EC7C  F00C         	call	___lwdiv	;wreg free
  1892   00137A  C007  F01C         	movff	?___lwdiv,vfpfcnvrt@convarg
  1893   00137E  C008  F01D         	movff	?___lwdiv+1,vfpfcnvrt@convarg+1
  1894   001382                     
  1895                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1530:       cnt++
      +                          ;
  1896   001382  4A19               	infsnz	vfpfcnvrt@cnt^0,f,c
  1897   001384  2A1A               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1898   001386                     
  1899                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  1900   001386  501C               	movf	vfpfcnvrt@convarg^0,w,c
  1901   001388  101D               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1902   00138A  B4D8               	btfsc	status,2,c
  1903   00138C  EFCA  F009         	goto	u1711
  1904   001390  EFCC  F009         	goto	u1710
  1905   001394                     u1711:
  1906   001394  EFE4  F009         	goto	l2839
  1907   001398                     u1710:
  1908   001398  5020               	movf	vfpfcnvrt@c^0,w,c
  1909   00139A  A4D8               	btfss	status,2,c
  1910   00139C  EFD2  F009         	goto	u1721
  1911   0013A0  EFD4  F009         	goto	u1720
  1912   0013A4                     u1721:
  1913   0013A4  EFA1  F009         	goto	l2825
  1914   0013A8                     u1720:
  1915   0013A8  EFE4  F009         	goto	l2839
  1916   0013AC                     l2835:
  1917                           
  1918                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  1919   0013AC  5020               	movf	vfpfcnvrt@c^0,w,c
  1920   0013AE  0F60               	addlw	low _dbuf
  1921   0013B0  6ED9               	movwf	fsr2l,c
  1922   0013B2  6ADA               	clrf	fsr2h,c
  1923   0013B4  50DF               	movf	indf2,w,c
  1924   0013B6  6E16               	movwf	??_vfpfcnvrt^0,c
  1925   0013B8  5016               	movf	??_vfpfcnvrt^0,w,c
  1926   0013BA  6E01               	movwf	fputc@c^0,c
  1927   0013BC  6A02               	clrf	(fputc@c+1)^0,c
  1928   0013BE  C013  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1929   0013C2  EC7F  F00B         	call	_fputc	;wreg free
  1930   0013C6  2A20               	incf	vfpfcnvrt@c^0,f,c
  1931   0013C8                     l2839:
  1932                           
  1933                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  1934   0013C8  0E20               	movlw	32
  1935   0013CA  1820               	xorwf	vfpfcnvrt@c^0,w,c
  1936   0013CC  A4D8               	btfss	status,2,c
  1937   0013CE  EFEB  F009         	goto	u1731
  1938   0013D2  EFED  F009         	goto	u1730
  1939   0013D6                     u1731:
  1940   0013D6  EFD6  F009         	goto	l2835
  1941   0013DA                     u1730:
  1942   0013DA  EF76  F009         	goto	l1477
  1943   0013DE                     l2843:
  1944                           
  1945                           ; BSR set to: 0
  1946   0013DE  C01B  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1947   0013E2                     	if	1	;There is more than 1 active tblptr byte
  1948   0013E2  0E0E               	movlw	high __smallconst
  1949   0013E4  6EF7               	movwf	tblptrh,c
  1950   0013E6                     	endif
  1951   0013E6                     	if	0	;tblptru may be non-zero
  1952   0013E6                     	endif
  1953   0013E6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1954   0013E6  0E00               	movlw	low (__smallconst shr (0+16))
  1955   0013E8  6EF8               	movwf	tblptru,c
  1956   0013EA                     	endif
  1957   0013EA  0008               	tblrd		*
  1958   0013EC  50F5               	movf	tablat,w,c
  1959   0013EE  6E16               	movwf	??_vfpfcnvrt^0,c
  1960   0013F0  6A17               	clrf	(??_vfpfcnvrt+1)^0,c
  1961                           
  1962                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1963                           ; Switch size 1, requested type "simple"
  1964                           ; Number of cases is 1, Range of values is 0 to 0
  1965                           ; switch strategies available:
  1966                           ; Name         Instructions Cycles
  1967                           ; simple_byte            4     3 (average)
  1968                           ;	Chosen strategy is simple_byte
  1969   0013F2  5017               	movf	(??_vfpfcnvrt+1)^0,w,c
  1970   0013F4  0A00               	xorlw	0	; case 0
  1971   0013F6  B4D8               	btfsc	status,2,c
  1972   0013F8  EF00  F00A         	goto	l3795
  1973   0013FC  EF07  F00A         	goto	l2845
  1974   001400                     l3795:
  1975                           
  1976                           ; BSR set to: 0
  1977                           ; Switch size 1, requested type "simple"
  1978                           ; Number of cases is 1, Range of values is 117 to 117
  1979                           ; switch strategies available:
  1980                           ; Name         Instructions Cycles
  1981                           ; simple_byte            4     3 (average)
  1982                           ;	Chosen strategy is simple_byte
  1983   001400  5016               	movf	??_vfpfcnvrt^0,w,c
  1984   001402  0A75               	xorlw	117	; case 117
  1985   001404  B4D8               	btfsc	status,2,c
  1986   001406  EF9F  F009         	goto	l2823
  1987   00140A  EF07  F00A         	goto	l2845
  1988   00140E                     l2845:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1992   00140E  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1993   001410  6ED9               	movwf	fsr2l,c
  1994   001412  6ADA               	clrf	fsr2h,c
  1995   001414  2ADF               	incf	indf2,f,c
  1996   001416                     
  1997                           ; BSR set to: 0
  1998                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  1999   001416  0E00               	movlw	0
  2000   001418  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  2001   00141A  0E00               	movlw	0
  2002   00141C  6E13               	movwf	?_vfpfcnvrt^0,c
  2003   00141E  EF2A  F00A         	goto	l1478
  2004   001422                     l2851:
  2005                           
  2006                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2007   001422  5014               	movf	vfpfcnvrt@fmt^0,w,c
  2008   001424  6ED9               	movwf	fsr2l,c
  2009   001426  6ADA               	clrf	fsr2h,c
  2010   001428  CFDF FFF6          	movff	indf2,tblptrl
  2011   00142C                     	if	1	;There is more than 1 active tblptr byte
  2012   00142C  0E0E               	movlw	high __smallconst
  2013   00142E  6EF7               	movwf	tblptrh,c
  2014   001430                     	endif
  2015   001430                     	if	0	;tblptru may be non-zero
  2016   001430                     	endif
  2017   001430                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2018   001430  0E00               	movlw	low (__smallconst shr (0+16))
  2019   001432  6EF8               	movwf	tblptru,c
  2020   001434                     	endif
  2021   001434  0008               	tblrd		*
  2022   001436  50F5               	movf	tablat,w,c
  2023   001438  6E01               	movwf	fputc@c^0,c
  2024   00143A  6A02               	clrf	(fputc@c+1)^0,c
  2025   00143C  C013  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2026   001440  EC7F  F00B         	call	_fputc	;wreg free
  2027   001444                     
  2028                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  2029   001444  5014               	movf	vfpfcnvrt@fmt^0,w,c
  2030   001446  6ED9               	movwf	fsr2l,c
  2031   001448  6ADA               	clrf	fsr2h,c
  2032   00144A  2ADF               	incf	indf2,f,c
  2033   00144C                     
  2034                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  2035   00144C  0E00               	movlw	0
  2036   00144E  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  2037   001450  0E01               	movlw	1
  2038   001452  6E13               	movwf	?_vfpfcnvrt^0,c
  2039   001454                     l1478:
  2040   001454  0012               	return		;funcret
  2041   001456                     __end_of_vfpfcnvrt:
  2042                           	callstack 0
  2043                           
  2044 ;; *************** function _fputc *****************
  2045 ;; Defined at:
  2046 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  c               2    0[COMRAM] int 
  2049 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2050 ;;		 -> sprintf@f(12), 
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;		None
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  2    0[COMRAM] int 
  2055 ;; Registers used:
  2056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2062 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2064 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2065 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2066 ;;Total ram usage:        8 bytes
  2067 ;; Hardware stack levels used: 1
  2068 ;; Hardware stack levels required when called: 2
  2069 ;; This function calls:
  2070 ;;		_putch
  2071 ;; This function is called by:
  2072 ;;		_vfpfcnvrt
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text7
  2077   0016FE                     __ptext7:
  2078                           	callstack 0
  2079   0016FE                     _fputc:
  2080                           	callstack 24
  2081   0016FE  5003               	movf	fputc@fp^0,w,c
  2082   001700  B4D8               	btfsc	status,2,c
  2083   001702  EF85  F00B         	goto	u1371
  2084   001706  EF87  F00B         	goto	u1370
  2085   00170A                     u1371:
  2086   00170A  EF8F  F00B         	goto	l2667
  2087   00170E                     u1370:
  2088   00170E  5003               	movf	fputc@fp^0,w,c
  2089   001710  A4D8               	btfss	status,2,c
  2090   001712  EF8D  F00B         	goto	u1381
  2091   001716  EF8F  F00B         	goto	u1380
  2092   00171A                     u1381:
  2093   00171A  EF94  F00B         	goto	l2669
  2094   00171E                     u1380:
  2095   00171E                     l2667:
  2096   00171E  5001               	movf	fputc@c^0,w,c
  2097   001720  ECF5  F00F         	call	_putch
  2098   001724  EFDB  F00B         	goto	l1516
  2099   001728                     l2669:
  2100   001728  5003               	movf	fputc@fp^0,w,c
  2101   00172A  6ED9               	movwf	fsr2l,c
  2102   00172C  6ADA               	clrf	fsr2h,c
  2103   00172E  0E0A               	movlw	10
  2104   001730  26D9               	addwf	fsr2l,f,c
  2105   001732  50DE               	movf	postinc2,w,c
  2106   001734  10DE               	iorwf	postinc2,w,c
  2107   001736  B4D8               	btfsc	status,2,c
  2108   001738  EFA0  F00B         	goto	u1391
  2109   00173C  EFA2  F00B         	goto	u1390
  2110   001740                     u1391:
  2111   001740  EFBB  F00B         	goto	l2673
  2112   001744                     u1390:
  2113   001744  5003               	movf	fputc@fp^0,w,c
  2114   001746  6ED9               	movwf	fsr2l,c
  2115   001748  6ADA               	clrf	fsr2h,c
  2116   00174A  0E0A               	movlw	10
  2117   00174C  26D9               	addwf	fsr2l,f,c
  2118   00174E  5003               	movf	fputc@fp^0,w,c
  2119   001750  6EE1               	movwf	fsr1l,c
  2120   001752  6AE2               	clrf	fsr1h,c
  2121   001754  0E03               	movlw	3
  2122   001756  26E1               	addwf	fsr1l,f,c
  2123   001758  50DE               	movf	postinc2,w,c
  2124   00175A  5CE6               	subwf	postinc1,w,c
  2125   00175C  50E6               	movf	postinc1,w,c
  2126   00175E  0A80               	xorlw	128
  2127   001760  6E08               	movwf	(??_fputc+4)^0,c
  2128   001762  50DE               	movf	postinc2,w,c
  2129   001764  0A80               	xorlw	128
  2130   001766  5808               	subwfb	(??_fputc+4)^0,w,c
  2131   001768  B0D8               	btfsc	status,0,c
  2132   00176A  EFB9  F00B         	goto	u1401
  2133   00176E  EFBB  F00B         	goto	u1400
  2134   001772                     u1401:
  2135   001772  EFDB  F00B         	goto	l1516
  2136   001776                     u1400:
  2137   001776                     l2673:
  2138   001776  5003               	movf	fputc@fp^0,w,c
  2139   001778  6ED9               	movwf	fsr2l,c
  2140   00177A  6ADA               	clrf	fsr2h,c
  2141   00177C  0E03               	movlw	3
  2142   00177E  26D9               	addwf	fsr2l,f,c
  2143   001780  CFDE F004          	movff	postinc2,??_fputc
  2144   001784  CFDD F005          	movff	postdec2,??_fputc+1
  2145   001788  5003               	movf	fputc@fp^0,w,c
  2146   00178A  6ED9               	movwf	fsr2l,c
  2147   00178C  6ADA               	clrf	fsr2h,c
  2148   00178E  CFDE F006          	movff	postinc2,??_fputc+2
  2149   001792  CFDD F007          	movff	postdec2,??_fputc+3
  2150   001796  5004               	movf	??_fputc^0,w,c
  2151   001798  2406               	addwf	(??_fputc+2)^0,w,c
  2152   00179A  6ED9               	movwf	fsr2l,c
  2153   00179C  5005               	movf	(??_fputc+1)^0,w,c
  2154   00179E  2007               	addwfc	(??_fputc+3)^0,w,c
  2155   0017A0  6EDA               	movwf	fsr2h,c
  2156   0017A2  C001  FFDF         	movff	fputc@c,indf2
  2157   0017A6  5003               	movf	fputc@fp^0,w,c
  2158   0017A8  6ED9               	movwf	fsr2l,c
  2159   0017AA  6ADA               	clrf	fsr2h,c
  2160   0017AC  0E03               	movlw	3
  2161   0017AE  26D9               	addwf	fsr2l,f,c
  2162   0017B0  2ADE               	incf	postinc2,f,c
  2163   0017B2  0E00               	movlw	0
  2164   0017B4  22DD               	addwfc	postdec2,f,c
  2165   0017B6                     l1516:
  2166   0017B6  0012               	return		;funcret
  2167   0017B8                     __end_of_fputc:
  2168                           	callstack 0
  2169                           
  2170 ;; *************** function _putch *****************
  2171 ;; Defined at:
  2172 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  c               1    wreg     unsigned char 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  c               1    0[COMRAM] unsigned char 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  1    wreg      void 
  2179 ;; Registers used:
  2180 ;;		wreg
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;Total ram usage:        0 bytes
  2191 ;; Hardware stack levels used: 1
  2192 ;; Hardware stack levels required when called: 1
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_fputc
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text8
  2201   001FEA                     __ptext8:
  2202                           	callstack 0
  2203   001FEA                     _putch:
  2204                           	callstack 24
  2205   001FEA  0012               	return		;funcret
  2206   001FEC                     __end_of_putch:
  2207                           	callstack 0
  2208                           
  2209 ;; *************** function _abs *****************
  2210 ;; Defined at:
  2211 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  a               2    6[COMRAM] int 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;		None
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  2    6[COMRAM] int 
  2218 ;; Registers used:
  2219 ;;		wreg, status,2, status,0
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2225 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2228 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2229 ;;Total ram usage:        4 bytes
  2230 ;; Hardware stack levels used: 1
  2231 ;; Hardware stack levels required when called: 1
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_vfpfcnvrt
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text9
  2240   001D9E                     __ptext9:
  2241                           	callstack 0
  2242   001D9E                     _abs:
  2243                           	callstack 25
  2244   001D9E  BE08               	btfsc	(abs@a+1)^0,7,c
  2245   001DA0  EFD4  F00E         	goto	u1411
  2246   001DA4  EFD6  F00E         	goto	u1410
  2247   001DA8                     u1411:
  2248   001DA8  EFDC  F00E         	goto	l1501
  2249   001DAC                     u1410:
  2250   001DAC  C007  F007         	movff	abs@a,?_abs
  2251   001DB0  C008  F008         	movff	abs@a+1,?_abs+1
  2252   001DB4  EFE8  F00E         	goto	l1504
  2253   001DB8                     l1501:
  2254   001DB8  C007  F009         	movff	abs@a,??_abs
  2255   001DBC  C008  F00A         	movff	abs@a+1,??_abs+1
  2256   001DC0  1E09               	comf	??_abs^0,f,c
  2257   001DC2  1E0A               	comf	(??_abs+1)^0,f,c
  2258   001DC4  4A09               	infsnz	??_abs^0,f,c
  2259   001DC6  2A0A               	incf	(??_abs+1)^0,f,c
  2260   001DC8  C009  F007         	movff	??_abs,?_abs
  2261   001DCC  C00A  F008         	movff	??_abs+1,?_abs+1
  2262   001DD0                     l1504:
  2263   001DD0  0012               	return		;funcret
  2264   001DD2                     __end_of_abs:
  2265                           	callstack 0
  2266                           
  2267 ;; *************** function ___awmod *****************
  2268 ;; Defined at:
  2269 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  dividend        2    0[COMRAM] int 
  2272 ;;  divisor         2    2[COMRAM] int 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  sign            1    5[COMRAM] unsigned char 
  2275 ;;  counter         1    4[COMRAM] unsigned char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  2    0[COMRAM] int 
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2285 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2286 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2288 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2289 ;;Total ram usage:        6 bytes
  2290 ;; Hardware stack levels used: 1
  2291 ;; Hardware stack levels required when called: 1
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_vfpfcnvrt
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text10
  2300   0017B8                     __ptext10:
  2301                           	callstack 0
  2302   0017B8                     ___awmod:
  2303                           	callstack 25
  2304   0017B8  0E00               	movlw	0
  2305   0017BA  6E06               	movwf	___awmod@sign^0,c
  2306   0017BC  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2307   0017BE  EFE5  F00B         	goto	u1250
  2308   0017C2  EFE3  F00B         	goto	u1251
  2309   0017C6                     u1251:
  2310   0017C6  EFEB  F00B         	goto	l2597
  2311   0017CA                     u1250:
  2312   0017CA  6C01               	negf	___awmod@dividend^0,c
  2313   0017CC  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2314   0017CE  B0D8               	btfsc	status,0,c
  2315   0017D0  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2316   0017D2  0E01               	movlw	1
  2317   0017D4  6E06               	movwf	___awmod@sign^0,c
  2318   0017D6                     l2597:
  2319   0017D6  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2320   0017D8  EFF2  F00B         	goto	u1260
  2321   0017DC  EFF0  F00B         	goto	u1261
  2322   0017E0                     u1261:
  2323   0017E0  EFF6  F00B         	goto	l2601
  2324   0017E4                     u1260:
  2325   0017E4  6C03               	negf	___awmod@divisor^0,c
  2326   0017E6  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2327   0017E8  B0D8               	btfsc	status,0,c
  2328   0017EA  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2329   0017EC                     l2601:
  2330   0017EC  5003               	movf	___awmod@divisor^0,w,c
  2331   0017EE  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2332   0017F0  B4D8               	btfsc	status,2,c
  2333   0017F2  EFFD  F00B         	goto	u1271
  2334   0017F6  EFFF  F00B         	goto	u1270
  2335   0017FA                     u1271:
  2336   0017FA  EF23  F00C         	goto	l2617
  2337   0017FE                     u1270:
  2338   0017FE  0E01               	movlw	1
  2339   001800  6E05               	movwf	___awmod@counter^0,c
  2340   001802  EF07  F00C         	goto	l2607
  2341   001806                     l2605:
  2342   001806  90D8               	bcf	status,0,c
  2343   001808  3603               	rlcf	___awmod@divisor^0,f,c
  2344   00180A  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2345   00180C  2A05               	incf	___awmod@counter^0,f,c
  2346   00180E                     l2607:
  2347   00180E  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2348   001810  EF0C  F00C         	goto	u1281
  2349   001814  EF0E  F00C         	goto	u1280
  2350   001818                     u1281:
  2351   001818  EF03  F00C         	goto	l2605
  2352   00181C                     u1280:
  2353   00181C                     l2609:
  2354   00181C  5003               	movf	___awmod@divisor^0,w,c
  2355   00181E  5C01               	subwf	___awmod@dividend^0,w,c
  2356   001820  5004               	movf	(___awmod@divisor+1)^0,w,c
  2357   001822  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2358   001824  A0D8               	btfss	status,0,c
  2359   001826  EF17  F00C         	goto	u1291
  2360   00182A  EF19  F00C         	goto	u1290
  2361   00182E                     u1291:
  2362   00182E  EF1D  F00C         	goto	l2613
  2363   001832                     u1290:
  2364   001832  5003               	movf	___awmod@divisor^0,w,c
  2365   001834  5E01               	subwf	___awmod@dividend^0,f,c
  2366   001836  5004               	movf	(___awmod@divisor+1)^0,w,c
  2367   001838  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2368   00183A                     l2613:
  2369   00183A  90D8               	bcf	status,0,c
  2370   00183C  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2371   00183E  3203               	rrcf	___awmod@divisor^0,f,c
  2372   001840  2E05               	decfsz	___awmod@counter^0,f,c
  2373   001842  EF0E  F00C         	goto	l2609
  2374   001846                     l2617:
  2375   001846  5006               	movf	___awmod@sign^0,w,c
  2376   001848  B4D8               	btfsc	status,2,c
  2377   00184A  EF29  F00C         	goto	u1301
  2378   00184E  EF2B  F00C         	goto	u1300
  2379   001852                     u1301:
  2380   001852  EF2F  F00C         	goto	l2621
  2381   001856                     u1300:
  2382   001856  6C01               	negf	___awmod@dividend^0,c
  2383   001858  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2384   00185A  B0D8               	btfsc	status,0,c
  2385   00185C  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2386   00185E                     l2621:
  2387   00185E  C001  F001         	movff	___awmod@dividend,?___awmod
  2388   001862  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2389   001866  0012               	return		;funcret
  2390   001868                     __end_of___awmod:
  2391                           	callstack 0
  2392                           
  2393 ;; *************** function ___awdiv *****************
  2394 ;; Defined at:
  2395 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  dividend        2    0[COMRAM] int 
  2398 ;;  divisor         2    2[COMRAM] int 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  quotient        2    6[COMRAM] int 
  2401 ;;  sign            1    5[COMRAM] unsigned char 
  2402 ;;  counter         1    4[COMRAM] unsigned char 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  2    0[COMRAM] int 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;Total ram usage:        8 bytes
  2417 ;; Hardware stack levels used: 1
  2418 ;; Hardware stack levels required when called: 1
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_vfpfcnvrt
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text11
  2427   00163A                     __ptext11:
  2428                           	callstack 0
  2429   00163A                     ___awdiv:
  2430                           	callstack 25
  2431   00163A  0E00               	movlw	0
  2432   00163C  6E06               	movwf	___awdiv@sign^0,c
  2433   00163E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2434   001640  EF26  F00B         	goto	u1190
  2435   001644  EF24  F00B         	goto	u1191
  2436   001648                     u1191:
  2437   001648  EF2C  F00B         	goto	l2553
  2438   00164C                     u1190:
  2439   00164C  6C03               	negf	___awdiv@divisor^0,c
  2440   00164E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2441   001650  B0D8               	btfsc	status,0,c
  2442   001652  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2443   001654  0E01               	movlw	1
  2444   001656  6E06               	movwf	___awdiv@sign^0,c
  2445   001658                     l2553:
  2446   001658  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2447   00165A  EF33  F00B         	goto	u1200
  2448   00165E  EF31  F00B         	goto	u1201
  2449   001662                     u1201:
  2450   001662  EF39  F00B         	goto	l2559
  2451   001666                     u1200:
  2452   001666  6C01               	negf	___awdiv@dividend^0,c
  2453   001668  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2454   00166A  B0D8               	btfsc	status,0,c
  2455   00166C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2456   00166E  0E01               	movlw	1
  2457   001670  1A06               	xorwf	___awdiv@sign^0,f,c
  2458   001672                     l2559:
  2459   001672  0E00               	movlw	0
  2460   001674  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2461   001676  0E00               	movlw	0
  2462   001678  6E07               	movwf	___awdiv@quotient^0,c
  2463   00167A  5003               	movf	___awdiv@divisor^0,w,c
  2464   00167C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2465   00167E  B4D8               	btfsc	status,2,c
  2466   001680  EF44  F00B         	goto	u1211
  2467   001684  EF46  F00B         	goto	u1210
  2468   001688                     u1211:
  2469   001688  EF6E  F00B         	goto	l2581
  2470   00168C                     u1210:
  2471   00168C  0E01               	movlw	1
  2472   00168E  6E05               	movwf	___awdiv@counter^0,c
  2473   001690  EF4E  F00B         	goto	l2567
  2474   001694                     l2565:
  2475   001694  90D8               	bcf	status,0,c
  2476   001696  3603               	rlcf	___awdiv@divisor^0,f,c
  2477   001698  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2478   00169A  2A05               	incf	___awdiv@counter^0,f,c
  2479   00169C                     l2567:
  2480   00169C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2481   00169E  EF53  F00B         	goto	u1221
  2482   0016A2  EF55  F00B         	goto	u1220
  2483   0016A6                     u1221:
  2484   0016A6  EF4A  F00B         	goto	l2565
  2485   0016AA                     u1220:
  2486   0016AA                     l2569:
  2487   0016AA  90D8               	bcf	status,0,c
  2488   0016AC  3607               	rlcf	___awdiv@quotient^0,f,c
  2489   0016AE  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2490   0016B0  5003               	movf	___awdiv@divisor^0,w,c
  2491   0016B2  5C01               	subwf	___awdiv@dividend^0,w,c
  2492   0016B4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2493   0016B6  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2494   0016B8  A0D8               	btfss	status,0,c
  2495   0016BA  EF61  F00B         	goto	u1231
  2496   0016BE  EF63  F00B         	goto	u1230
  2497   0016C2                     u1231:
  2498   0016C2  EF68  F00B         	goto	l2577
  2499   0016C6                     u1230:
  2500   0016C6  5003               	movf	___awdiv@divisor^0,w,c
  2501   0016C8  5E01               	subwf	___awdiv@dividend^0,f,c
  2502   0016CA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2503   0016CC  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2504   0016CE  8007               	bsf	___awdiv@quotient^0,0,c
  2505   0016D0                     l2577:
  2506   0016D0  90D8               	bcf	status,0,c
  2507   0016D2  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2508   0016D4  3203               	rrcf	___awdiv@divisor^0,f,c
  2509   0016D6  2E05               	decfsz	___awdiv@counter^0,f,c
  2510   0016D8  EF55  F00B         	goto	l2569
  2511   0016DC                     l2581:
  2512   0016DC  5006               	movf	___awdiv@sign^0,w,c
  2513   0016DE  B4D8               	btfsc	status,2,c
  2514   0016E0  EF74  F00B         	goto	u1241
  2515   0016E4  EF76  F00B         	goto	u1240
  2516   0016E8                     u1241:
  2517   0016E8  EF7A  F00B         	goto	l2585
  2518   0016EC                     u1240:
  2519   0016EC  6C07               	negf	___awdiv@quotient^0,c
  2520   0016EE  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2521   0016F0  B0D8               	btfsc	status,0,c
  2522   0016F2  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2523   0016F4                     l2585:
  2524   0016F4  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2525   0016F8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2526   0016FC  0012               	return		;funcret
  2527   0016FE                     __end_of___awdiv:
  2528                           	callstack 0
  2529                           
  2530 ;; *************** function _sendStringSerial4 *****************
  2531 ;; Defined at:
  2532 ;;		line 35 in file "serial.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  string          2    1[COMRAM] PTR unsigned char 
  2535 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), STR_4(3), sendArrayCharSerial4@tempStr(161), 
  2536 ;;		 -> sendIntSerial4@string(17), 
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2548 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2552 ;;Total ram usage:        2 bytes
  2553 ;; Hardware stack levels used: 1
  2554 ;; Hardware stack levels required when called: 2
  2555 ;; This function calls:
  2556 ;;		_sendCharSerial4
  2557 ;; This function is called by:
  2558 ;;		_sendRGBCvalSerial4
  2559 ;;		_sendHSVvalSerial4
  2560 ;;		_sendIntSerial4
  2561 ;;		_sendArrayCharSerial4
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text12
  2566   0019D0                     __ptext12:
  2567                           	callstack 0
  2568   0019D0                     _sendStringSerial4:
  2569                           	callstack 27
  2570   0019D0                     
  2571                           ;serial.c: 37:     while(*string != 0){
  2572   0019D0  EFFF  F00C         	goto	l3005
  2573   0019D4                     l3001:
  2574                           
  2575                           ;serial.c: 38:   sendCharSerial4(*string++);
  2576   0019D4  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2577   0019D8  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2578   0019DC  0E00               	movlw	low (__smallconst shr (0+16))
  2579   0019DE  6EF8               	movwf	tblptru,c
  2580   0019E0  0E0D               	movlw	(high __ramtop+-1)
  2581   0019E2  64F7               	cpfsgt	tblptrh,c
  2582   0019E4  D003               	bra	u1807
  2583   0019E6  0008               	tblrd		*
  2584   0019E8  50F5               	movf	tablat,w,c
  2585   0019EA  D005               	bra	u1800
  2586   0019EC                     u1807:
  2587   0019EC  CFF6 FFE9          	movff	tblptrl,fsr0l
  2588   0019F0  CFF7 FFEA          	movff	tblptrh,fsr0h
  2589   0019F4  50EF               	movf	indf0,w,c
  2590   0019F6                     u1800:
  2591   0019F6  ECC8  F00F         	call	_sendCharSerial4
  2592   0019FA  4A02               	infsnz	sendStringSerial4@string^0,f,c
  2593   0019FC  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  2594   0019FE                     l3005:
  2595                           
  2596                           ;serial.c: 37:     while(*string != 0){
  2597   0019FE  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2598   001A02  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2599   001A06  0E00               	movlw	low (__smallconst shr (0+16))
  2600   001A08  6EF8               	movwf	tblptru,c
  2601   001A0A  0E0D               	movlw	(high __ramtop+-1)
  2602   001A0C  64F7               	cpfsgt	tblptrh,c
  2603   001A0E  D003               	bra	u1817
  2604   001A10  0008               	tblrd		*
  2605   001A12  50F5               	movf	tablat,w,c
  2606   001A14  D005               	bra	u1810
  2607   001A16                     u1817:
  2608   001A16  CFF6 FFE9          	movff	tblptrl,fsr0l
  2609   001A1A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2610   001A1E  50EF               	movf	indf0,w,c
  2611   001A20                     u1810:
  2612   001A20  0900               	iorlw	0
  2613   001A22  A4D8               	btfss	status,2,c
  2614   001A24  EF16  F00D         	goto	u1821
  2615   001A28  EF18  F00D         	goto	u1820
  2616   001A2C                     u1821:
  2617   001A2C  EFEA  F00C         	goto	l3001
  2618   001A30                     u1820:
  2619   001A30  0012               	return		;funcret
  2620   001A32                     __end_of_sendStringSerial4:
  2621                           	callstack 0
  2622                           
  2623 ;; *************** function _sendCharSerial4 *****************
  2624 ;; Defined at:
  2625 ;;		line 29 in file "serial.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  charToSend      1    wreg     unsigned char 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  charToSend      1    0[COMRAM] unsigned char 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2640 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;Total ram usage:        1 bytes
  2644 ;; Hardware stack levels used: 1
  2645 ;; Hardware stack levels required when called: 1
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_sendStringSerial4
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text13
  2654   001F90                     __ptext13:
  2655                           	callstack 0
  2656   001F90                     _sendCharSerial4:
  2657                           	callstack 27
  2658                           
  2659                           ;incstack = 0
  2660                           ;sendCharSerial4@charToSend stored from wreg
  2661   001F90  6E01               	movwf	sendCharSerial4@charToSend^0,c
  2662   001F92                     l453:
  2663   001F92  010E               	movlb	14	; () banked
  2664   001F94  A537               	btfss	55,2,b	;volatile
  2665   001F96  EFCF  F00F         	goto	u1761
  2666   001F9A  EFD1  F00F         	goto	u1760
  2667   001F9E                     u1761:
  2668   001F9E  EFC9  F00F         	goto	l453
  2669   001FA2                     u1760:
  2670   001FA2                     
  2671                           ; BSR set to: 14
  2672                           ;serial.c: 31:     TX4REG = charToSend;
  2673   001FA2  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  2674   001FA6                     
  2675                           ; BSR set to: 14
  2676   001FA6  0012               	return		;funcret
  2677   001FA8                     __end_of_sendCharSerial4:
  2678                           	callstack 0
  2679                           
  2680 ;; *************** function _initUSART4 *****************
  2681 ;; Defined at:
  2682 ;;		line 5 in file "serial.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, status,2
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2700 ;;Total ram usage:        0 bytes
  2701 ;; Hardware stack levels used: 1
  2702 ;; Hardware stack levels required when called: 1
  2703 ;; This function calls:
  2704 ;;		Nothing
  2705 ;; This function is called by:
  2706 ;;		_main
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           	psect	text14
  2711   001F58                     __ptext14:
  2712                           	callstack 0
  2713   001F58                     _initUSART4:
  2714                           	callstack 29
  2715   001F58                     
  2716                           ;serial.c: 9:     RC0PPS = 0x12;
  2717   001F58  0E12               	movlw	18
  2718   001F5A  010E               	movlb	14	; () banked
  2719   001F5C  6F62               	movwf	98,b	;volatile
  2720                           
  2721                           ;serial.c: 10:     RX4PPS = 0x11;
  2722   001F5E  0E11               	movlw	17
  2723   001F60  6F15               	movwf	21,b	;volatile
  2724   001F62                     
  2725                           ; BSR set to: 14
  2726                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  2727   001F62  97E9               	bcf	233,3,b	;volatile
  2728   001F64                     
  2729                           ; BSR set to: 14
  2730                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  2731   001F64  95E8               	bcf	232,2,b	;volatile
  2732                           
  2733                           ;serial.c: 14:     SP4BRGL = 51;
  2734   001F66  0E33               	movlw	51
  2735   001F68  6FE5               	movwf	229,b	;volatile
  2736                           
  2737                           ;serial.c: 15:     SP4BRGH = 0;
  2738   001F6A  0E00               	movlw	0
  2739   001F6C  6FE6               	movwf	230,b	;volatile
  2740   001F6E                     
  2741                           ; BSR set to: 14
  2742                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  2743   001F6E  89E7               	bsf	231,4,b	;volatile
  2744   001F70                     
  2745                           ; BSR set to: 14
  2746                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  2747   001F70  8BE8               	bsf	232,5,b	;volatile
  2748   001F72                     
  2749                           ; BSR set to: 14
  2750                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  2751   001F72  8FE7               	bsf	231,7,b	;volatile
  2752   001F74                     
  2753                           ; BSR set to: 14
  2754   001F74  0012               	return		;funcret
  2755   001F76                     __end_of_initUSART4:
  2756                           	callstack 0
  2757                           
  2758 ;; *************** function _initDCmotorsPWM *****************
  2759 ;; Defined at:
  2760 ;;		line 5 in file "dc_motor.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2774 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;Total ram usage:        2 bytes
  2779 ;; Hardware stack levels used: 1
  2780 ;; Hardware stack levels required when called: 1
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_main
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text15
  2789   001868                     __ptext15:
  2790                           	callstack 0
  2791   001868                     _initDCmotorsPWM:
  2792                           	callstack 29
  2793   001868                     
  2794                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  2795   001868  9485               	bcf	133,2,c	;volatile
  2796                           
  2797                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  2798   00186A  9885               	bcf	133,4,c	;volatile
  2799                           
  2800                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  2801   00186C  9E83               	bcf	131,7,c	;volatile
  2802                           
  2803                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  2804   00186E  9C87               	bcf	135,6,c	;volatile
  2805                           
  2806                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
  2807   001870  947D               	bcf	125,2,c	;volatile
  2808                           
  2809                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
  2810   001872  987D               	bcf	125,4,c	;volatile
  2811                           
  2812                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
  2813   001874  9E7B               	bcf	123,7,c	;volatile
  2814                           
  2815                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
  2816   001876  9C7F               	bcf	127,6,c	;volatile
  2817   001878                     
  2818                           ;dc_motor.c: 18:     RE2PPS=0x05;
  2819   001878  0E05               	movlw	5
  2820   00187A  010E               	movlb	14	; () banked
  2821   00187C  6F74               	movwf	116,b	;volatile
  2822                           
  2823                           ;dc_motor.c: 19:     RE4PPS=0x06;
  2824   00187E  0E06               	movlw	6
  2825   001880  6F76               	movwf	118,b	;volatile
  2826                           
  2827                           ;dc_motor.c: 20:     RC7PPS=0x07;
  2828   001882  0E07               	movlw	7
  2829   001884  6F69               	movwf	105,b	;volatile
  2830                           
  2831                           ;dc_motor.c: 21:     RG6PPS=0x08;
  2832   001886  0E08               	movlw	8
  2833   001888  6F88               	movwf	136,b	;volatile
  2834                           
  2835                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  2836   00188A  50BD               	movf	189,w,c	;volatile
  2837   00188C  0B8F               	andlw	-113
  2838   00188E  0940               	iorlw	64
  2839   001890  6EBD               	movwf	189,c	;volatile
  2840                           
  2841                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  2842   001892  0EE0               	movlw	-32
  2843   001894  16BE               	andwf	190,f,c	;volatile
  2844                           
  2845                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  2846   001896  50BF               	movf	191,w,c	;volatile
  2847   001898  0BF0               	andlw	-16
  2848   00189A  0901               	iorlw	1
  2849   00189C  6EBF               	movwf	191,c	;volatile
  2850   00189E                     
  2851                           ; BSR set to: 14
  2852                           ;dc_motor.c: 30:     T2PR=(unsigned char)PWMperiod;
  2853   00189E  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2854   0018A2                     
  2855                           ; BSR set to: 14
  2856                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  2857   0018A2  8EBD               	bsf	189,7,c	;volatile
  2858                           
  2859                           ;dc_motor.c: 35:     CCPR1H=0;
  2860   0018A4  0E00               	movlw	0
  2861   0018A6  6EAA               	movwf	170,c	;volatile
  2862                           
  2863                           ;dc_motor.c: 36:     CCPR2H=0;
  2864   0018A8  0E00               	movlw	0
  2865   0018AA  6EA6               	movwf	166,c	;volatile
  2866                           
  2867                           ;dc_motor.c: 37:     CCPR3H=0;
  2868   0018AC  0E00               	movlw	0
  2869   0018AE  010F               	movlb	15	; () banked
  2870   0018B0  6F25               	movwf	37,b	;volatile
  2871                           
  2872                           ;dc_motor.c: 38:     CCPR4H=0;
  2873   0018B2  0E00               	movlw	0
  2874   0018B4  6F21               	movwf	33,b	;volatile
  2875                           
  2876                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  2877   0018B6  0EFC               	movlw	-4
  2878   0018B8  16AD               	andwf	173,f,c	;volatile
  2879                           
  2880                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  2881   0018BA  0EF3               	movlw	-13
  2882   0018BC  16AD               	andwf	173,f,c	;volatile
  2883                           
  2884                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  2885   0018BE  0ECF               	movlw	-49
  2886   0018C0  16AD               	andwf	173,f,c	;volatile
  2887                           
  2888                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  2889   0018C2  0E3F               	movlw	-193
  2890   0018C4  16AD               	andwf	173,f,c	;volatile
  2891   0018C6                     
  2892                           ; BSR set to: 15
  2893                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  2894   0018C6  88AB               	bsf	171,4,c	;volatile
  2895                           
  2896                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  2897   0018C8  50AB               	movf	171,w,c	;volatile
  2898   0018CA  0BF0               	andlw	-16
  2899   0018CC  090C               	iorlw	12
  2900   0018CE  6EAB               	movwf	171,c	;volatile
  2901   0018D0                     
  2902                           ; BSR set to: 15
  2903                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  2904   0018D0  8EAB               	bsf	171,7,c	;volatile
  2905   0018D2                     
  2906                           ; BSR set to: 15
  2907                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  2908   0018D2  88A7               	bsf	167,4,c	;volatile
  2909                           
  2910                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  2911   0018D4  50A7               	movf	167,w,c	;volatile
  2912   0018D6  0BF0               	andlw	-16
  2913   0018D8  090C               	iorlw	12
  2914   0018DA  6EA7               	movwf	167,c	;volatile
  2915   0018DC                     
  2916                           ; BSR set to: 15
  2917                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  2918   0018DC  8EA7               	bsf	167,7,c	;volatile
  2919   0018DE                     
  2920                           ; BSR set to: 15
  2921                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  2922   0018DE  8926               	bsf	38,4,b	;volatile
  2923                           
  2924                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  2925   0018E0  5126               	movf	38,w,b	;volatile
  2926   0018E2  0BF0               	andlw	-16
  2927   0018E4  090C               	iorlw	12
  2928   0018E6  6F26               	movwf	38,b	;volatile
  2929   0018E8                     
  2930                           ; BSR set to: 15
  2931                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  2932   0018E8  8F26               	bsf	38,7,b	;volatile
  2933   0018EA                     
  2934                           ; BSR set to: 15
  2935                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  2936   0018EA  8922               	bsf	34,4,b	;volatile
  2937                           
  2938                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  2939   0018EC  5122               	movf	34,w,b	;volatile
  2940   0018EE  0BF0               	andlw	-16
  2941   0018F0  090C               	iorlw	12
  2942   0018F2  6F22               	movwf	34,b	;volatile
  2943   0018F4                     
  2944                           ; BSR set to: 15
  2945                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  2946   0018F4  8F22               	bsf	34,7,b	;volatile
  2947   0018F6                     
  2948                           ; BSR set to: 15
  2949   0018F6  0012               	return		;funcret
  2950   0018F8                     __end_of_initDCmotorsPWM:
  2951                           	callstack 0
  2952                           
  2953 ;; *************** function _getRGBCval *****************
  2954 ;; Defined at:
  2955 ;;		line 84 in file "color.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  2958 ;;		 -> main@measured_colour(8), 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2970 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2973 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2974 ;;Total ram usage:        1 bytes
  2975 ;; Hardware stack levels used: 1
  2976 ;; Hardware stack levels required when called: 4
  2977 ;; This function calls:
  2978 ;;		_color_read_Blue
  2979 ;;		_color_read_Clear
  2980 ;;		_color_read_Green
  2981 ;;		_color_read_Red
  2982 ;; This function is called by:
  2983 ;;		_main
  2984 ;;		_wait_for_wall
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text16
  2989   001AE6                     __ptext16:
  2990                           	callstack 0
  2991   001AE6                     _getRGBCval:
  2992                           	callstack 26
  2993   001AE6                     
  2994                           ;color.c: 84: void getRGBCval(struct RGBC_val *p);color.c: 85: {;color.c: 86:     p->R =
      +                           color_read_Red();
  2995   001AE6  EC9E  F00D         	call	_color_read_Red	;wreg free
  2996   001AEA  500C               	movf	getRGBCval@p^0,w,c
  2997   001AEC  6ED9               	movwf	fsr2l,c
  2998   001AEE  6ADA               	clrf	fsr2h,c
  2999   001AF0  C005  FFDE         	movff	?_color_read_Red,postinc2
  3000   001AF4  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3001                           
  3002                           ;color.c: 87:     p->B = color_read_Blue();
  3003   001AF8  EC16  F00E         	call	_color_read_Blue	;wreg free
  3004   001AFC  500C               	movf	getRGBCval@p^0,w,c
  3005   001AFE  6ED9               	movwf	fsr2l,c
  3006   001B00  6ADA               	clrf	fsr2h,c
  3007   001B02  0E04               	movlw	4
  3008   001B04  26D9               	addwf	fsr2l,f,c
  3009   001B06  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3010   001B0A  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3011                           
  3012                           ;color.c: 88:     p->G = color_read_Green();
  3013   001B0E  ECC6  F00D         	call	_color_read_Green	;wreg free
  3014   001B12  500C               	movf	getRGBCval@p^0,w,c
  3015   001B14  6ED9               	movwf	fsr2l,c
  3016   001B16  6ADA               	clrf	fsr2h,c
  3017   001B18  0E02               	movlw	2
  3018   001B1A  26D9               	addwf	fsr2l,f,c
  3019   001B1C  C005  FFDE         	movff	?_color_read_Green,postinc2
  3020   001B20  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3021                           
  3022                           ;color.c: 89:     p->C = color_read_Clear();
  3023   001B24  ECEE  F00D         	call	_color_read_Clear	;wreg free
  3024   001B28  500C               	movf	getRGBCval@p^0,w,c
  3025   001B2A  6ED9               	movwf	fsr2l,c
  3026   001B2C  6ADA               	clrf	fsr2h,c
  3027   001B2E  0E06               	movlw	6
  3028   001B30  26D9               	addwf	fsr2l,f,c
  3029   001B32  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3030   001B36  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3031   001B3A  0012               	return		;funcret
  3032   001B3C                     __end_of_getRGBCval:
  3033                           	callstack 0
  3034                           
  3035 ;; *************** function _color_read_Red *****************
  3036 ;; Defined at:
  3037 ;;		line 28 in file "color.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;  tmp             2    9[COMRAM] unsigned int 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  2    4[COMRAM] unsigned int 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2, status,0, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3053 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3054 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3055 ;;Total ram usage:        7 bytes
  3056 ;; Hardware stack levels used: 1
  3057 ;; Hardware stack levels required when called: 3
  3058 ;; This function calls:
  3059 ;;		_I2C_2_Master_Read
  3060 ;;		_I2C_2_Master_RepStart
  3061 ;;		_I2C_2_Master_Start
  3062 ;;		_I2C_2_Master_Stop
  3063 ;;		_I2C_2_Master_Write
  3064 ;; This function is called by:
  3065 ;;		_getRGBCval
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text17
  3070   001B3C                     __ptext17:
  3071                           	callstack 0
  3072   001B3C                     _color_read_Red:
  3073                           	callstack 26
  3074   001B3C                     
  3075                           ;color.c: 30:  unsigned int tmp;;color.c: 31:  I2C_2_Master_Start();
  3076   001B3C  ECF0  F00F         	call	_I2C_2_Master_Start	;wreg free
  3077                           
  3078                           ;color.c: 32:  I2C_2_Master_Write(0x52 | 0x00);
  3079   001B40  0E52               	movlw	82
  3080   001B42  ECD4  F00F         	call	_I2C_2_Master_Write
  3081                           
  3082                           ;color.c: 33:  I2C_2_Master_Write(0xA0 | 0x16);
  3083   001B46  0EB6               	movlw	182
  3084   001B48  ECD4  F00F         	call	_I2C_2_Master_Write
  3085                           
  3086                           ;color.c: 34:  I2C_2_Master_RepStart();
  3087   001B4C  ECE6  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3088                           
  3089                           ;color.c: 35:  I2C_2_Master_Write(0x52 | 0x01);
  3090   001B50  0E53               	movlw	83
  3091   001B52  ECD4  F00F         	call	_I2C_2_Master_Write
  3092                           
  3093                           ;color.c: 36:  tmp=I2C_2_Master_Read(1);
  3094   001B56  0E01               	movlw	1
  3095   001B58  ECAE  F00E         	call	_I2C_2_Master_Read
  3096   001B5C  6E07               	movwf	??_color_read_Red^0,c
  3097   001B5E  5007               	movf	??_color_read_Red^0,w,c
  3098   001B60  6E0A               	movwf	color_read_Red@tmp^0,c
  3099   001B62  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3100                           
  3101                           ;color.c: 37:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3102   001B64  0E00               	movlw	0
  3103   001B66  ECAE  F00E         	call	_I2C_2_Master_Read
  3104   001B6A  6E07               	movwf	??_color_read_Red^0,c
  3105   001B6C  5007               	movf	??_color_read_Red^0,w,c
  3106   001B6E  6E09               	movwf	(??_color_read_Red+2)^0,c
  3107   001B70  6A08               	clrf	(??_color_read_Red+1)^0,c
  3108   001B72  500A               	movf	color_read_Red@tmp^0,w,c
  3109   001B74  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3110   001B76  6E0A               	movwf	color_read_Red@tmp^0,c
  3111   001B78  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3112   001B7A  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3113   001B7C  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3114                           
  3115                           ;color.c: 38:  I2C_2_Master_Stop();
  3116   001B7E  ECEB  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3117   001B82                     
  3118                           ;color.c: 39:  return tmp;
  3119   001B82  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3120   001B86  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3121   001B8A  0012               	return		;funcret
  3122   001B8C                     __end_of_color_read_Red:
  3123                           	callstack 0
  3124                           
  3125 ;; *************** function _color_read_Green *****************
  3126 ;; Defined at:
  3127 ;;		line 56 in file "color.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  tmp             2    9[COMRAM] unsigned int 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  2    4[COMRAM] unsigned int 
  3134 ;; Registers used:
  3135 ;;		wreg, status,2, status,0, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3141 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3142 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3143 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3144 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3145 ;;Total ram usage:        7 bytes
  3146 ;; Hardware stack levels used: 1
  3147 ;; Hardware stack levels required when called: 3
  3148 ;; This function calls:
  3149 ;;		_I2C_2_Master_Read
  3150 ;;		_I2C_2_Master_RepStart
  3151 ;;		_I2C_2_Master_Start
  3152 ;;		_I2C_2_Master_Stop
  3153 ;;		_I2C_2_Master_Write
  3154 ;; This function is called by:
  3155 ;;		_getRGBCval
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text18
  3160   001B8C                     __ptext18:
  3161                           	callstack 0
  3162   001B8C                     _color_read_Green:
  3163                           	callstack 26
  3164   001B8C                     
  3165                           ;color.c: 58:     unsigned int tmp;;color.c: 59:  I2C_2_Master_Start();
  3166   001B8C  ECF0  F00F         	call	_I2C_2_Master_Start	;wreg free
  3167                           
  3168                           ;color.c: 60:  I2C_2_Master_Write(0x52 | 0x00);
  3169   001B90  0E52               	movlw	82
  3170   001B92  ECD4  F00F         	call	_I2C_2_Master_Write
  3171                           
  3172                           ;color.c: 61:  I2C_2_Master_Write(0xA0 | 0x18);
  3173   001B96  0EB8               	movlw	184
  3174   001B98  ECD4  F00F         	call	_I2C_2_Master_Write
  3175                           
  3176                           ;color.c: 62:  I2C_2_Master_RepStart();
  3177   001B9C  ECE6  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3178                           
  3179                           ;color.c: 63:  I2C_2_Master_Write(0x52 | 0x01);
  3180   001BA0  0E53               	movlw	83
  3181   001BA2  ECD4  F00F         	call	_I2C_2_Master_Write
  3182                           
  3183                           ;color.c: 64:  tmp=I2C_2_Master_Read(1);
  3184   001BA6  0E01               	movlw	1
  3185   001BA8  ECAE  F00E         	call	_I2C_2_Master_Read
  3186   001BAC  6E07               	movwf	??_color_read_Green^0,c
  3187   001BAE  5007               	movf	??_color_read_Green^0,w,c
  3188   001BB0  6E0A               	movwf	color_read_Green@tmp^0,c
  3189   001BB2  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3190                           
  3191                           ;color.c: 65:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3192   001BB4  0E00               	movlw	0
  3193   001BB6  ECAE  F00E         	call	_I2C_2_Master_Read
  3194   001BBA  6E07               	movwf	??_color_read_Green^0,c
  3195   001BBC  5007               	movf	??_color_read_Green^0,w,c
  3196   001BBE  6E09               	movwf	(??_color_read_Green+2)^0,c
  3197   001BC0  6A08               	clrf	(??_color_read_Green+1)^0,c
  3198   001BC2  500A               	movf	color_read_Green@tmp^0,w,c
  3199   001BC4  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3200   001BC6  6E0A               	movwf	color_read_Green@tmp^0,c
  3201   001BC8  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3202   001BCA  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3203   001BCC  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3204                           
  3205                           ;color.c: 66:  I2C_2_Master_Stop();
  3206   001BCE  ECEB  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3207   001BD2                     
  3208                           ;color.c: 67:  return tmp;
  3209   001BD2  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3210   001BD6  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3211   001BDA  0012               	return		;funcret
  3212   001BDC                     __end_of_color_read_Green:
  3213                           	callstack 0
  3214                           
  3215 ;; *************** function _color_read_Clear *****************
  3216 ;; Defined at:
  3217 ;;		line 70 in file "color.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  tmp             2    9[COMRAM] unsigned int 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  2    4[COMRAM] unsigned int 
  3224 ;; Registers used:
  3225 ;;		wreg, status,2, status,0, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3231 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3232 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3233 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3234 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3235 ;;Total ram usage:        7 bytes
  3236 ;; Hardware stack levels used: 1
  3237 ;; Hardware stack levels required when called: 3
  3238 ;; This function calls:
  3239 ;;		_I2C_2_Master_Read
  3240 ;;		_I2C_2_Master_RepStart
  3241 ;;		_I2C_2_Master_Start
  3242 ;;		_I2C_2_Master_Stop
  3243 ;;		_I2C_2_Master_Write
  3244 ;; This function is called by:
  3245 ;;		_getRGBCval
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text19
  3250   001BDC                     __ptext19:
  3251                           	callstack 0
  3252   001BDC                     _color_read_Clear:
  3253                           	callstack 26
  3254   001BDC                     
  3255                           ;color.c: 72:     unsigned int tmp;;color.c: 73:  I2C_2_Master_Start();
  3256   001BDC  ECF0  F00F         	call	_I2C_2_Master_Start	;wreg free
  3257                           
  3258                           ;color.c: 74:  I2C_2_Master_Write(0x52 | 0x00);
  3259   001BE0  0E52               	movlw	82
  3260   001BE2  ECD4  F00F         	call	_I2C_2_Master_Write
  3261                           
  3262                           ;color.c: 75:  I2C_2_Master_Write(0xA0 | 0x14);
  3263   001BE6  0EB4               	movlw	180
  3264   001BE8  ECD4  F00F         	call	_I2C_2_Master_Write
  3265                           
  3266                           ;color.c: 76:  I2C_2_Master_RepStart();
  3267   001BEC  ECE6  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3268                           
  3269                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x01);
  3270   001BF0  0E53               	movlw	83
  3271   001BF2  ECD4  F00F         	call	_I2C_2_Master_Write
  3272                           
  3273                           ;color.c: 78:  tmp=I2C_2_Master_Read(1);
  3274   001BF6  0E01               	movlw	1
  3275   001BF8  ECAE  F00E         	call	_I2C_2_Master_Read
  3276   001BFC  6E07               	movwf	??_color_read_Clear^0,c
  3277   001BFE  5007               	movf	??_color_read_Clear^0,w,c
  3278   001C00  6E0A               	movwf	color_read_Clear@tmp^0,c
  3279   001C02  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3280                           
  3281                           ;color.c: 79:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3282   001C04  0E00               	movlw	0
  3283   001C06  ECAE  F00E         	call	_I2C_2_Master_Read
  3284   001C0A  6E07               	movwf	??_color_read_Clear^0,c
  3285   001C0C  5007               	movf	??_color_read_Clear^0,w,c
  3286   001C0E  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3287   001C10  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3288   001C12  500A               	movf	color_read_Clear@tmp^0,w,c
  3289   001C14  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3290   001C16  6E0A               	movwf	color_read_Clear@tmp^0,c
  3291   001C18  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3292   001C1A  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3293   001C1C  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3294                           
  3295                           ;color.c: 80:  I2C_2_Master_Stop();
  3296   001C1E  ECEB  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3297   001C22                     
  3298                           ;color.c: 81:  return tmp;
  3299   001C22  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3300   001C26  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3301   001C2A  0012               	return		;funcret
  3302   001C2C                     __end_of_color_read_Clear:
  3303                           	callstack 0
  3304                           
  3305 ;; *************** function _color_read_Blue *****************
  3306 ;; Defined at:
  3307 ;;		line 42 in file "color.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;		None
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  tmp             2    9[COMRAM] unsigned int 
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  2    4[COMRAM] unsigned int 
  3314 ;; Registers used:
  3315 ;;		wreg, status,2, status,0, cstack
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3321 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3322 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3323 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3324 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3325 ;;Total ram usage:        7 bytes
  3326 ;; Hardware stack levels used: 1
  3327 ;; Hardware stack levels required when called: 3
  3328 ;; This function calls:
  3329 ;;		_I2C_2_Master_Read
  3330 ;;		_I2C_2_Master_RepStart
  3331 ;;		_I2C_2_Master_Start
  3332 ;;		_I2C_2_Master_Stop
  3333 ;;		_I2C_2_Master_Write
  3334 ;; This function is called by:
  3335 ;;		_getRGBCval
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           	psect	text20
  3340   001C2C                     __ptext20:
  3341                           	callstack 0
  3342   001C2C                     _color_read_Blue:
  3343                           	callstack 26
  3344   001C2C                     
  3345                           ;color.c: 44:     unsigned int tmp;;color.c: 45:  I2C_2_Master_Start();
  3346   001C2C  ECF0  F00F         	call	_I2C_2_Master_Start	;wreg free
  3347                           
  3348                           ;color.c: 46:  I2C_2_Master_Write(0x52 | 0x00);
  3349   001C30  0E52               	movlw	82
  3350   001C32  ECD4  F00F         	call	_I2C_2_Master_Write
  3351                           
  3352                           ;color.c: 47:  I2C_2_Master_Write(0xA0 | 0x1A);
  3353   001C36  0EBA               	movlw	186
  3354   001C38  ECD4  F00F         	call	_I2C_2_Master_Write
  3355                           
  3356                           ;color.c: 48:  I2C_2_Master_RepStart();
  3357   001C3C  ECE6  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3358                           
  3359                           ;color.c: 49:  I2C_2_Master_Write(0x52 | 0x01);
  3360   001C40  0E53               	movlw	83
  3361   001C42  ECD4  F00F         	call	_I2C_2_Master_Write
  3362                           
  3363                           ;color.c: 50:  tmp=I2C_2_Master_Read(1);
  3364   001C46  0E01               	movlw	1
  3365   001C48  ECAE  F00E         	call	_I2C_2_Master_Read
  3366   001C4C  6E07               	movwf	??_color_read_Blue^0,c
  3367   001C4E  5007               	movf	??_color_read_Blue^0,w,c
  3368   001C50  6E0A               	movwf	color_read_Blue@tmp^0,c
  3369   001C52  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3370                           
  3371                           ;color.c: 51:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3372   001C54  0E00               	movlw	0
  3373   001C56  ECAE  F00E         	call	_I2C_2_Master_Read
  3374   001C5A  6E07               	movwf	??_color_read_Blue^0,c
  3375   001C5C  5007               	movf	??_color_read_Blue^0,w,c
  3376   001C5E  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3377   001C60  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3378   001C62  500A               	movf	color_read_Blue@tmp^0,w,c
  3379   001C64  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3380   001C66  6E0A               	movwf	color_read_Blue@tmp^0,c
  3381   001C68  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3382   001C6A  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3383   001C6C  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3384                           
  3385                           ;color.c: 52:  I2C_2_Master_Stop();
  3386   001C6E  ECEB  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3387   001C72                     
  3388                           ;color.c: 53:  return tmp;
  3389   001C72  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3390   001C76  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3391   001C7A  0012               	return		;funcret
  3392   001C7C                     __end_of_color_read_Blue:
  3393                           	callstack 0
  3394                           
  3395 ;; *************** function _I2C_2_Master_RepStart *****************
  3396 ;; Defined at:
  3397 ;;		line 33 in file "i2c.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3415 ;;Total ram usage:        0 bytes
  3416 ;; Hardware stack levels used: 1
  3417 ;; Hardware stack levels required when called: 2
  3418 ;; This function calls:
  3419 ;;		_I2C_2_Master_Idle
  3420 ;; This function is called by:
  3421 ;;		_color_read_Red
  3422 ;;		_color_read_Blue
  3423 ;;		_color_read_Green
  3424 ;;		_color_read_Clear
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	text21
  3429   001FCC                     __ptext21:
  3430                           	callstack 0
  3431   001FCC                     _I2C_2_Master_RepStart:
  3432                           	callstack 26
  3433   001FCC                     
  3434                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3435   001FCC  EC63  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3436   001FD0                     
  3437                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3438   001FD0  010E               	movlb	14	; () banked
  3439   001FD2  83DA               	bsf	218,1,b	;volatile
  3440   001FD4                     
  3441                           ; BSR set to: 14
  3442   001FD4  0012               	return		;funcret
  3443   001FD6                     __end_of_I2C_2_Master_RepStart:
  3444                           	callstack 0
  3445                           
  3446 ;; *************** function _I2C_2_Master_Read *****************
  3447 ;; Defined at:
  3448 ;;		line 51 in file "i2c.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  ack             1    wreg     unsigned char 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;  ack             1    2[COMRAM] unsigned char 
  3453 ;;  tmp             1    3[COMRAM] unsigned char 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      unsigned char 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3465 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3466 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3467 ;;Total ram usage:        3 bytes
  3468 ;; Hardware stack levels used: 1
  3469 ;; Hardware stack levels required when called: 2
  3470 ;; This function calls:
  3471 ;;		_I2C_2_Master_Idle
  3472 ;; This function is called by:
  3473 ;;		_color_read_Red
  3474 ;;		_color_read_Blue
  3475 ;;		_color_read_Green
  3476 ;;		_color_read_Clear
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           	psect	text22
  3481   001D5C                     __ptext22:
  3482                           	callstack 0
  3483   001D5C                     _I2C_2_Master_Read:
  3484                           	callstack 26
  3485                           
  3486                           ; BSR set to: 14
  3487                           ;incstack = 0
  3488                           ;I2C_2_Master_Read@ack stored from wreg
  3489   001D5C  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3490   001D5E                     
  3491                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3492   001D5E  EC63  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3493   001D62                     
  3494                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3495   001D62  010E               	movlb	14	; () banked
  3496   001D64  87DA               	bsf	218,3,b	;volatile
  3497                           
  3498                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3499   001D66  EC63  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3500   001D6A                     
  3501                           ;i2c.c: 57:   tmp = SSP2BUF;
  3502   001D6A  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3503                           
  3504                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3505   001D6E  EC63  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3506   001D72                     
  3507                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3508   001D72  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3509   001D74  B4D8               	btfsc	status,2,c
  3510   001D76  EFBF  F00E         	goto	u1741
  3511   001D7A  EFC3  F00E         	goto	u1740
  3512   001D7E                     u1741:
  3513   001D7E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3514   001D80  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3515   001D82  EFC4  F00E         	goto	u1758
  3516   001D86                     u1740:
  3517   001D86  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3518   001D88                     u1758:
  3519   001D88  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3520   001D8A  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3521   001D8C  010E               	movlb	14	; () banked
  3522   001D8E  51DA               	movf	218,w,b	;volatile
  3523   001D90  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3524   001D92  0BDF               	andlw	-33
  3525   001D94  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3526   001D96  6FDA               	movwf	218,b	;volatile
  3527   001D98                     
  3528                           ; BSR set to: 14
  3529                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3530   001D98  89DA               	bsf	218,4,b	;volatile
  3531   001D9A                     
  3532                           ; BSR set to: 14
  3533                           ;i2c.c: 61:   return tmp;
  3534   001D9A  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3535   001D9C                     
  3536                           ; BSR set to: 14
  3537   001D9C  0012               	return		;funcret
  3538   001D9E                     __end_of_I2C_2_Master_Read:
  3539                           	callstack 0
  3540                           
  3541 ;; *************** function _getHSVval *****************
  3542 ;; Defined at:
  3543 ;;		line 154 in file "color.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  p1              1   18[COMRAM] PTR struct HSV_val
  3546 ;;		 -> main@HSV_colour(6), 
  3547 ;;  p2              1   19[COMRAM] PTR struct RGBC_val
  3548 ;;		 -> main@measured_colour(8), 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  maxRGB          2   38[COMRAM] unsigned int 
  3551 ;;  range           2   36[COMRAM] unsigned int 
  3552 ;;  hue             2   32[COMRAM] unsigned int 
  3553 ;;  saturation      2   30[COMRAM] unsigned int 
  3554 ;;  minRGB          2   24[COMRAM] unsigned int 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3564 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3565 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3566 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3567 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3568 ;;Total ram usage:       22 bytes
  3569 ;; Hardware stack levels used: 1
  3570 ;; Hardware stack levels required when called: 2
  3571 ;; This function calls:
  3572 ;;		___lwdiv
  3573 ;;		___lwmod
  3574 ;;		___wmul
  3575 ;;		_max
  3576 ;;		_min
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text23
  3583   000E1A                     __ptext23:
  3584                           	callstack 0
  3585   000E1A                     _getHSVval:
  3586                           	callstack 28
  3587   000E1A                     
  3588                           ;color.c: 154: void getHSVval(struct HSV_val *p1,struct RGBC_val *p2);color.c: 155: {;co
      +                          lor.c: 156:     unsigned int maxRGB;;color.c: 157:     unsigned int minRGB;;color.c: 158
      +                          :     unsigned int range;;color.c: 159:     unsigned int hue;;color.c: 160:     unsigned
      +                           int saturation;;color.c: 164:     maxRGB = max(max(p2->R,p2->G),p2->B);
  3589   000E1A  5014               	movf	getHSVval@p2^0,w,c
  3590   000E1C  6ED9               	movwf	fsr2l,c
  3591   000E1E  6ADA               	clrf	fsr2h,c
  3592   000E20  CFDE F001          	movff	postinc2,max@a
  3593   000E24  CFDD F002          	movff	postdec2,max@a+1
  3594   000E28  5014               	movf	getHSVval@p2^0,w,c
  3595   000E2A  6ED9               	movwf	fsr2l,c
  3596   000E2C  6ADA               	clrf	fsr2h,c
  3597   000E2E  0E02               	movlw	2
  3598   000E30  26D9               	addwf	fsr2l,f,c
  3599   000E32  CFDE F003          	movff	postinc2,max@b
  3600   000E36  CFDD F004          	movff	postdec2,max@b+1
  3601   000E3A  EC03  F00F         	call	_max	;wreg free
  3602   000E3E  C001  F01B         	movff	?_max,_getHSVval$3203
  3603   000E42  C002  F01C         	movff	?_max+1,_getHSVval$3203+1
  3604                           
  3605                           ;color.c: 154: void getHSVval(struct HSV_val *p1,struct RGBC_val *p2);color.c: 155: {;co
      +                          lor.c: 156:     unsigned int maxRGB;;color.c: 157:     unsigned int minRGB;;color.c: 158
      +                          :     unsigned int range;;color.c: 159:     unsigned int hue;;color.c: 160:     unsigned
      +                           int saturation;;color.c: 164:     maxRGB = max(max(p2->R,p2->G),p2->B);
  3606   000E46  C01B  F001         	movff	_getHSVval$3203,max@a
  3607   000E4A  C01C  F002         	movff	_getHSVval$3203+1,max@a+1
  3608   000E4E  5014               	movf	getHSVval@p2^0,w,c
  3609   000E50  6ED9               	movwf	fsr2l,c
  3610   000E52  6ADA               	clrf	fsr2h,c
  3611   000E54  0E04               	movlw	4
  3612   000E56  26D9               	addwf	fsr2l,f,c
  3613   000E58  CFDE F003          	movff	postinc2,max@b
  3614   000E5C  CFDD F004          	movff	postdec2,max@b+1
  3615   000E60  EC03  F00F         	call	_max	;wreg free
  3616   000E64  C001  F027         	movff	?_max,getHSVval@maxRGB
  3617   000E68  C002  F028         	movff	?_max+1,getHSVval@maxRGB+1
  3618                           
  3619                           ;color.c: 165:     minRGB = min(min(p2->R,p2->G),p2->B);
  3620   000E6C  5014               	movf	getHSVval@p2^0,w,c
  3621   000E6E  6ED9               	movwf	fsr2l,c
  3622   000E70  6ADA               	clrf	fsr2h,c
  3623   000E72  CFDE F001          	movff	postinc2,min@a
  3624   000E76  CFDD F002          	movff	postdec2,min@a+1
  3625   000E7A  5014               	movf	getHSVval@p2^0,w,c
  3626   000E7C  6ED9               	movwf	fsr2l,c
  3627   000E7E  6ADA               	clrf	fsr2h,c
  3628   000E80  0E02               	movlw	2
  3629   000E82  26D9               	addwf	fsr2l,f,c
  3630   000E84  CFDE F003          	movff	postinc2,min@b
  3631   000E88  CFDD F004          	movff	postdec2,min@b+1
  3632   000E8C  ECE9  F00E         	call	_min	;wreg free
  3633   000E90  C001  F01D         	movff	?_min,_getHSVval$3204
  3634   000E94  C002  F01E         	movff	?_min+1,_getHSVval$3204+1
  3635                           
  3636                           ;color.c: 165:     minRGB = min(min(p2->R,p2->G),p2->B);
  3637   000E98  C01D  F001         	movff	_getHSVval$3204,min@a
  3638   000E9C  C01E  F002         	movff	_getHSVval$3204+1,min@a+1
  3639   000EA0  5014               	movf	getHSVval@p2^0,w,c
  3640   000EA2  6ED9               	movwf	fsr2l,c
  3641   000EA4  6ADA               	clrf	fsr2h,c
  3642   000EA6  0E04               	movlw	4
  3643   000EA8  26D9               	addwf	fsr2l,f,c
  3644   000EAA  CFDE F003          	movff	postinc2,min@b
  3645   000EAE  CFDD F004          	movff	postdec2,min@b+1
  3646   000EB2  ECE9  F00E         	call	_min	;wreg free
  3647   000EB6  C001  F019         	movff	?_min,getHSVval@minRGB
  3648   000EBA  C002  F01A         	movff	?_min+1,getHSVval@minRGB+1
  3649   000EBE                     
  3650                           ;color.c: 166:     range = maxRGB - minRGB;
  3651   000EBE  5019               	movf	getHSVval@minRGB^0,w,c
  3652   000EC0  5C27               	subwf	getHSVval@maxRGB^0,w,c
  3653   000EC2  6E25               	movwf	getHSVval@range^0,c
  3654   000EC4  501A               	movf	(getHSVval@minRGB+1)^0,w,c
  3655   000EC6  5828               	subwfb	(getHSVval@maxRGB+1)^0,w,c
  3656   000EC8  6E26               	movwf	(getHSVval@range+1)^0,c
  3657   000ECA                     
  3658                           ;color.c: 168:     if (range == 0) {
  3659   000ECA  5025               	movf	getHSVval@range^0,w,c
  3660   000ECC  1026               	iorwf	(getHSVval@range+1)^0,w,c
  3661   000ECE  A4D8               	btfss	status,2,c
  3662   000ED0  EF6C  F007         	goto	u1981
  3663   000ED4  EF6E  F007         	goto	u1980
  3664   000ED8                     u1981:
  3665   000ED8  EF74  F007         	goto	l3161
  3666   000EDC                     u1980:
  3667   000EDC                     
  3668                           ;color.c: 169:         hue = 0;
  3669   000EDC  0E00               	movlw	0
  3670   000EDE  6E22               	movwf	(getHSVval@hue+1)^0,c
  3671   000EE0  0E00               	movlw	0
  3672   000EE2  6E21               	movwf	getHSVval@hue^0,c
  3673                           
  3674                           ;color.c: 170:     }
  3675   000EE4  EF5D  F008         	goto	l3179
  3676   000EE8                     l3161:
  3677                           
  3678                           ;color.c: 172:         if (maxRGB == (p2->R)) {
  3679   000EE8  5014               	movf	getHSVval@p2^0,w,c
  3680   000EEA  6ED9               	movwf	fsr2l,c
  3681   000EEC  6ADA               	clrf	fsr2h,c
  3682   000EEE  5027               	movf	getHSVval@maxRGB^0,w,c
  3683   000EF0  18DE               	xorwf	postinc2,w,c
  3684   000EF2  E107               	bnz	u1991
  3685   000EF4  5028               	movf	(getHSVval@maxRGB+1)^0,w,c
  3686   000EF6  18DE               	xorwf	postinc2,w,c
  3687   000EF8  A4D8               	btfss	status,2,c
  3688   000EFA  EF81  F007         	goto	u1991
  3689   000EFE  EF83  F007         	goto	u1990
  3690   000F02                     u1991:
  3691   000F02  EFC7  F007         	goto	l3167
  3692   000F06                     u1990:
  3693   000F06                     
  3694                           ;color.c: 173:             hue = 60*(((((p2->G)-(p2->B))*10)/range)%60);
  3695   000F06  0E00               	movlw	0
  3696   000F08  6E11               	movwf	(___lwmod@divisor+1)^0,c
  3697   000F0A  0E3C               	movlw	60
  3698   000F0C  6E10               	movwf	___lwmod@divisor^0,c
  3699   000F0E  C025  F009         	movff	getHSVval@range,___lwdiv@divisor
  3700   000F12  C026  F00A         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3701   000F16  5014               	movf	getHSVval@p2^0,w,c
  3702   000F18  6ED9               	movwf	fsr2l,c
  3703   000F1A  6ADA               	clrf	fsr2h,c
  3704   000F1C  0E04               	movlw	4
  3705   000F1E  26D9               	addwf	fsr2l,f,c
  3706   000F20  CFDE F015          	movff	postinc2,??_getHSVval
  3707   000F24  CFDD F016          	movff	postdec2,??_getHSVval+1
  3708   000F28  5014               	movf	getHSVval@p2^0,w,c
  3709   000F2A  6ED9               	movwf	fsr2l,c
  3710   000F2C  6ADA               	clrf	fsr2h,c
  3711   000F2E  0E02               	movlw	2
  3712   000F30  26D9               	addwf	fsr2l,f,c
  3713   000F32  CFDE F017          	movff	postinc2,??_getHSVval+2
  3714   000F36  CFDD F018          	movff	postdec2,??_getHSVval+3
  3715   000F3A  5015               	movf	??_getHSVval^0,w,c
  3716   000F3C  5C17               	subwf	(??_getHSVval+2)^0,w,c
  3717   000F3E  6E01               	movwf	___wmul@multiplier^0,c
  3718   000F40  5016               	movf	(??_getHSVval+1)^0,w,c
  3719   000F42  5818               	subwfb	(??_getHSVval+3)^0,w,c
  3720   000F44  6E02               	movwf	(___wmul@multiplier+1)^0,c
  3721   000F46  0E00               	movlw	0
  3722   000F48  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3723   000F4A  0E0A               	movlw	10
  3724   000F4C  6E03               	movwf	___wmul@multiplicand^0,c
  3725   000F4E  EC77  F00F         	call	___wmul	;wreg free
  3726   000F52  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3727   000F56  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3728   000F5A  EC7C  F00C         	call	___lwdiv	;wreg free
  3729   000F5E  C007  F00E         	movff	?___lwdiv,___lwmod@dividend
  3730   000F62  C008  F00F         	movff	?___lwdiv+1,___lwmod@dividend+1
  3731   000F66  ECB6  F00C         	call	___lwmod	;wreg free
  3732   000F6A  C00E  F023         	movff	?___lwmod,_getHSVval$3205
  3733   000F6E  C00F  F024         	movff	?___lwmod+1,_getHSVval$3205+1
  3734   000F72                     
  3735                           ;color.c: 173:             hue = 60*(((((p2->G)-(p2->B))*10)/range)%60);
  3736   000F72  C023  F001         	movff	_getHSVval$3205,___wmul@multiplier
  3737   000F76  C024  F002         	movff	_getHSVval$3205+1,___wmul@multiplier+1
  3738   000F7A  0E00               	movlw	0
  3739   000F7C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3740   000F7E  0E3C               	movlw	60
  3741   000F80  6E03               	movwf	___wmul@multiplicand^0,c
  3742   000F82  EC77  F00F         	call	___wmul	;wreg free
  3743   000F86  C001  F021         	movff	?___wmul,getHSVval@hue
  3744   000F8A  C002  F022         	movff	?___wmul+1,getHSVval@hue+1
  3745   000F8E                     l3167:
  3746                           
  3747                           ;color.c: 176:         if (maxRGB == (p2->G)){
  3748   000F8E  5014               	movf	getHSVval@p2^0,w,c
  3749   000F90  6ED9               	movwf	fsr2l,c
  3750   000F92  6ADA               	clrf	fsr2h,c
  3751   000F94  0E02               	movlw	2
  3752   000F96  26D9               	addwf	fsr2l,f,c
  3753   000F98  5027               	movf	getHSVval@maxRGB^0,w,c
  3754   000F9A  18DE               	xorwf	postinc2,w,c
  3755   000F9C  E107               	bnz	u2001
  3756   000F9E  5028               	movf	(getHSVval@maxRGB+1)^0,w,c
  3757   000FA0  18DE               	xorwf	postinc2,w,c
  3758   000FA2  A4D8               	btfss	status,2,c
  3759   000FA4  EFD6  F007         	goto	u2001
  3760   000FA8  EFD8  F007         	goto	u2000
  3761   000FAC                     u2001:
  3762   000FAC  EF12  F008         	goto	l3173
  3763   000FB0                     u2000:
  3764   000FB0                     
  3765                           ;color.c: 177:             hue = 60*(((((p2->B)-(p2->R))*10)/range)+20);
  3766   000FB0  C025  F009         	movff	getHSVval@range,___lwdiv@divisor
  3767   000FB4  C026  F00A         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3768   000FB8  5014               	movf	getHSVval@p2^0,w,c
  3769   000FBA  6ED9               	movwf	fsr2l,c
  3770   000FBC  6ADA               	clrf	fsr2h,c
  3771   000FBE  CFDE F015          	movff	postinc2,??_getHSVval
  3772   000FC2  CFDD F016          	movff	postdec2,??_getHSVval+1
  3773   000FC6  5014               	movf	getHSVval@p2^0,w,c
  3774   000FC8  6ED9               	movwf	fsr2l,c
  3775   000FCA  6ADA               	clrf	fsr2h,c
  3776   000FCC  0E04               	movlw	4
  3777   000FCE  26D9               	addwf	fsr2l,f,c
  3778   000FD0  CFDE F017          	movff	postinc2,??_getHSVval+2
  3779   000FD4  CFDD F018          	movff	postdec2,??_getHSVval+3
  3780   000FD8  5015               	movf	??_getHSVval^0,w,c
  3781   000FDA  5C17               	subwf	(??_getHSVval+2)^0,w,c
  3782   000FDC  6E01               	movwf	___wmul@multiplier^0,c
  3783   000FDE  5016               	movf	(??_getHSVval+1)^0,w,c
  3784   000FE0  5818               	subwfb	(??_getHSVval+3)^0,w,c
  3785   000FE2  6E02               	movwf	(___wmul@multiplier+1)^0,c
  3786   000FE4  0E00               	movlw	0
  3787   000FE6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3788   000FE8  0E0A               	movlw	10
  3789   000FEA  6E03               	movwf	___wmul@multiplicand^0,c
  3790   000FEC  EC77  F00F         	call	___wmul	;wreg free
  3791   000FF0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3792   000FF4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3793   000FF8  EC7C  F00C         	call	___lwdiv	;wreg free
  3794   000FFC  0E14               	movlw	20
  3795   000FFE  2407               	addwf	?___lwdiv^0,w,c
  3796   001000  6E23               	movwf	_getHSVval$3205^0,c
  3797   001002  0E00               	movlw	0
  3798   001004  2008               	addwfc	(?___lwdiv+1)^0,w,c
  3799   001006  6E24               	movwf	(_getHSVval$3205+1)^0,c
  3800   001008                     
  3801                           ;color.c: 177:             hue = 60*(((((p2->B)-(p2->R))*10)/range)+20);
  3802   001008  C023  F001         	movff	_getHSVval$3205,___wmul@multiplier
  3803   00100C  C024  F002         	movff	_getHSVval$3205+1,___wmul@multiplier+1
  3804   001010  0E00               	movlw	0
  3805   001012  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3806   001014  0E3C               	movlw	60
  3807   001016  6E03               	movwf	___wmul@multiplicand^0,c
  3808   001018  EC77  F00F         	call	___wmul	;wreg free
  3809   00101C  C001  F021         	movff	?___wmul,getHSVval@hue
  3810   001020  C002  F022         	movff	?___wmul+1,getHSVval@hue+1
  3811   001024                     l3173:
  3812                           
  3813                           ;color.c: 180:         if (maxRGB == (p2->G)){
  3814   001024  5014               	movf	getHSVval@p2^0,w,c
  3815   001026  6ED9               	movwf	fsr2l,c
  3816   001028  6ADA               	clrf	fsr2h,c
  3817   00102A  0E02               	movlw	2
  3818   00102C  26D9               	addwf	fsr2l,f,c
  3819   00102E  5027               	movf	getHSVval@maxRGB^0,w,c
  3820   001030  18DE               	xorwf	postinc2,w,c
  3821   001032  E107               	bnz	u2011
  3822   001034  5028               	movf	(getHSVval@maxRGB+1)^0,w,c
  3823   001036  18DE               	xorwf	postinc2,w,c
  3824   001038  A4D8               	btfss	status,2,c
  3825   00103A  EF21  F008         	goto	u2011
  3826   00103E  EF23  F008         	goto	u2010
  3827   001042                     u2011:
  3828   001042  EF5D  F008         	goto	l3179
  3829   001046                     u2010:
  3830   001046                     
  3831                           ;color.c: 181:             hue = 60*(((((p2->R)-(p2->G))*10)/range)+40);
  3832   001046  C025  F009         	movff	getHSVval@range,___lwdiv@divisor
  3833   00104A  C026  F00A         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3834   00104E  5014               	movf	getHSVval@p2^0,w,c
  3835   001050  6ED9               	movwf	fsr2l,c
  3836   001052  6ADA               	clrf	fsr2h,c
  3837   001054  0E02               	movlw	2
  3838   001056  26D9               	addwf	fsr2l,f,c
  3839   001058  CFDE F015          	movff	postinc2,??_getHSVval
  3840   00105C  CFDD F016          	movff	postdec2,??_getHSVval+1
  3841   001060  5014               	movf	getHSVval@p2^0,w,c
  3842   001062  6ED9               	movwf	fsr2l,c
  3843   001064  6ADA               	clrf	fsr2h,c
  3844   001066  CFDE F017          	movff	postinc2,??_getHSVval+2
  3845   00106A  CFDD F018          	movff	postdec2,??_getHSVval+3
  3846   00106E  5015               	movf	??_getHSVval^0,w,c
  3847   001070  5C17               	subwf	(??_getHSVval+2)^0,w,c
  3848   001072  6E01               	movwf	___wmul@multiplier^0,c
  3849   001074  5016               	movf	(??_getHSVval+1)^0,w,c
  3850   001076  5818               	subwfb	(??_getHSVval+3)^0,w,c
  3851   001078  6E02               	movwf	(___wmul@multiplier+1)^0,c
  3852   00107A  0E00               	movlw	0
  3853   00107C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3854   00107E  0E0A               	movlw	10
  3855   001080  6E03               	movwf	___wmul@multiplicand^0,c
  3856   001082  EC77  F00F         	call	___wmul	;wreg free
  3857   001086  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3858   00108A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3859   00108E  EC7C  F00C         	call	___lwdiv	;wreg free
  3860   001092  0E28               	movlw	40
  3861   001094  2407               	addwf	?___lwdiv^0,w,c
  3862   001096  6E23               	movwf	_getHSVval$3205^0,c
  3863   001098  0E00               	movlw	0
  3864   00109A  2008               	addwfc	(?___lwdiv+1)^0,w,c
  3865   00109C  6E24               	movwf	(_getHSVval$3205+1)^0,c
  3866   00109E                     
  3867                           ;color.c: 181:             hue = 60*(((((p2->R)-(p2->G))*10)/range)+40);
  3868   00109E  C023  F001         	movff	_getHSVval$3205,___wmul@multiplier
  3869   0010A2  C024  F002         	movff	_getHSVval$3205+1,___wmul@multiplier+1
  3870   0010A6  0E00               	movlw	0
  3871   0010A8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3872   0010AA  0E3C               	movlw	60
  3873   0010AC  6E03               	movwf	___wmul@multiplicand^0,c
  3874   0010AE  EC77  F00F         	call	___wmul	;wreg free
  3875   0010B2  C001  F021         	movff	?___wmul,getHSVval@hue
  3876   0010B6  C002  F022         	movff	?___wmul+1,getHSVval@hue+1
  3877   0010BA                     l3179:
  3878                           
  3879                           ;color.c: 184:     if (maxRGB == 0) {saturation = 0;}
  3880   0010BA  5027               	movf	getHSVval@maxRGB^0,w,c
  3881   0010BC  1028               	iorwf	(getHSVval@maxRGB+1)^0,w,c
  3882   0010BE  A4D8               	btfss	status,2,c
  3883   0010C0  EF64  F008         	goto	u2021
  3884   0010C4  EF66  F008         	goto	u2020
  3885   0010C8                     u2021:
  3886   0010C8  EF6A  F008         	goto	l3183
  3887   0010CC                     u2020:
  3888   0010CC  0E00               	movlw	0
  3889   0010CE  6E20               	movwf	(getHSVval@saturation+1)^0,c
  3890   0010D0  0E00               	movlw	0
  3891   0010D2  6E1F               	movwf	getHSVval@saturation^0,c
  3892   0010D4                     l3183:
  3893                           
  3894                           ;color.c: 186:     if (maxRGB != 0) {saturation = (range*10)/maxRGB;}
  3895   0010D4  5027               	movf	getHSVval@maxRGB^0,w,c
  3896   0010D6  1028               	iorwf	(getHSVval@maxRGB+1)^0,w,c
  3897   0010D8  B4D8               	btfsc	status,2,c
  3898   0010DA  EF71  F008         	goto	u2031
  3899   0010DE  EF73  F008         	goto	u2030
  3900   0010E2                     u2031:
  3901   0010E2  EF8B  F008         	goto	l3187
  3902   0010E6                     u2030:
  3903   0010E6  C025  F001         	movff	getHSVval@range,___wmul@multiplier
  3904   0010EA  C026  F002         	movff	getHSVval@range+1,___wmul@multiplier+1
  3905   0010EE  0E00               	movlw	0
  3906   0010F0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3907   0010F2  0E0A               	movlw	10
  3908   0010F4  6E03               	movwf	___wmul@multiplicand^0,c
  3909   0010F6  EC77  F00F         	call	___wmul	;wreg free
  3910   0010FA  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3911   0010FE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3912   001102  C027  F009         	movff	getHSVval@maxRGB,___lwdiv@divisor
  3913   001106  C028  F00A         	movff	getHSVval@maxRGB+1,___lwdiv@divisor+1
  3914   00110A  EC7C  F00C         	call	___lwdiv	;wreg free
  3915   00110E  C007  F01F         	movff	?___lwdiv,getHSVval@saturation
  3916   001112  C008  F020         	movff	?___lwdiv+1,getHSVval@saturation+1
  3917   001116                     l3187:
  3918                           
  3919                           ;color.c: 188:     p1->H = hue;
  3920   001116  5013               	movf	getHSVval@p1^0,w,c
  3921   001118  6ED9               	movwf	fsr2l,c
  3922   00111A  6ADA               	clrf	fsr2h,c
  3923   00111C  C021  FFDE         	movff	getHSVval@hue,postinc2
  3924   001120  C022  FFDD         	movff	getHSVval@hue+1,postdec2
  3925   001124                     
  3926                           ;color.c: 189:     p1->S = saturation;
  3927   001124  5013               	movf	getHSVval@p1^0,w,c
  3928   001126  6ED9               	movwf	fsr2l,c
  3929   001128  6ADA               	clrf	fsr2h,c
  3930   00112A  0E02               	movlw	2
  3931   00112C  26D9               	addwf	fsr2l,f,c
  3932   00112E  C01F  FFDE         	movff	getHSVval@saturation,postinc2
  3933   001132  C020  FFDD         	movff	getHSVval@saturation+1,postdec2
  3934   001136                     
  3935                           ;color.c: 190:     p1->V = maxRGB;
  3936   001136  5013               	movf	getHSVval@p1^0,w,c
  3937   001138  6ED9               	movwf	fsr2l,c
  3938   00113A  6ADA               	clrf	fsr2h,c
  3939   00113C  0E04               	movlw	4
  3940   00113E  26D9               	addwf	fsr2l,f,c
  3941   001140  C027  FFDE         	movff	getHSVval@maxRGB,postinc2
  3942   001144  C028  FFDD         	movff	getHSVval@maxRGB+1,postdec2
  3943   001148  0012               	return		;funcret
  3944   00114A                     __end_of_getHSVval:
  3945                           	callstack 0
  3946                           
  3947 ;; *************** function _min *****************
  3948 ;; Defined at:
  3949 ;;		line 127 in file "color.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  a               2    0[COMRAM] unsigned int 
  3952 ;;  b               2    2[COMRAM] unsigned int 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  min_val         2    4[COMRAM] unsigned int 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  2    0[COMRAM] unsigned int 
  3957 ;; Registers used:
  3958 ;;		wreg, status,2, status,0
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3967 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;Total ram usage:        6 bytes
  3969 ;; Hardware stack levels used: 1
  3970 ;; Hardware stack levels required when called: 1
  3971 ;; This function calls:
  3972 ;;		Nothing
  3973 ;; This function is called by:
  3974 ;;		_getHSVval
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text24
  3979   001DD2                     __ptext24:
  3980                           	callstack 0
  3981   001DD2                     _min:
  3982                           	callstack 28
  3983   001DD2                     
  3984                           ;color.c: 127: unsigned int min(unsigned int a, unsigned int b);color.c: 128: {;color.c:
      +                           129:     unsigned int min_val;;color.c: 131:     if (a < b) {min_val = a;}
  3985   001DD2  5003               	movf	min@b^0,w,c
  3986   001DD4  5C01               	subwf	min@a^0,w,c
  3987   001DD6  5004               	movf	(min@b+1)^0,w,c
  3988   001DD8  5802               	subwfb	(min@a+1)^0,w,c
  3989   001DDA  B0D8               	btfsc	status,0,c
  3990   001DDC  EFF2  F00E         	goto	u1791
  3991   001DE0  EFF4  F00E         	goto	u1790
  3992   001DE4                     u1791:
  3993   001DE4  EFFA  F00E         	goto	l98
  3994   001DE8                     u1790:
  3995   001DE8  C001  F005         	movff	min@a,min@min_val
  3996   001DEC  C002  F006         	movff	min@a+1,min@min_val+1
  3997   001DF0  EFFE  F00E         	goto	l99
  3998   001DF4                     l98:
  3999   001DF4  C003  F005         	movff	min@b,min@min_val
  4000   001DF8  C004  F006         	movff	min@b+1,min@min_val+1
  4001   001DFC                     l99:
  4002                           
  4003                           ;color.c: 135:     return min_val;
  4004   001DFC  C005  F001         	movff	min@min_val,?_min
  4005   001E00  C006  F002         	movff	min@min_val+1,?_min+1
  4006   001E04  0012               	return		;funcret
  4007   001E06                     __end_of_min:
  4008                           	callstack 0
  4009                           
  4010 ;; *************** function _max *****************
  4011 ;; Defined at:
  4012 ;;		line 110 in file "color.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  a               2    0[COMRAM] unsigned int 
  4015 ;;  b               2    2[COMRAM] unsigned int 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  max_val         2    4[COMRAM] unsigned int 
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  2    0[COMRAM] unsigned int 
  4020 ;; Registers used:
  4021 ;;		wreg, status,2, status,0
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4027 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4028 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4030 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4031 ;;Total ram usage:        6 bytes
  4032 ;; Hardware stack levels used: 1
  4033 ;; Hardware stack levels required when called: 1
  4034 ;; This function calls:
  4035 ;;		Nothing
  4036 ;; This function is called by:
  4037 ;;		_getHSVval
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text25
  4042   001E06                     __ptext25:
  4043                           	callstack 0
  4044   001E06                     _max:
  4045                           	callstack 28
  4046   001E06                     
  4047                           ;color.c: 110: unsigned int max(unsigned int a, unsigned int b);color.c: 111: {;color.c:
      +                           112:     unsigned int max_val;;color.c: 114:     if (a > b) {max_val = a;}
  4048   001E06  5001               	movf	max@a^0,w,c
  4049   001E08  5C03               	subwf	max@b^0,w,c
  4050   001E0A  5002               	movf	(max@a+1)^0,w,c
  4051   001E0C  5804               	subwfb	(max@b+1)^0,w,c
  4052   001E0E  B0D8               	btfsc	status,0,c
  4053   001E10  EF0C  F00F         	goto	u1781
  4054   001E14  EF0E  F00F         	goto	u1780
  4055   001E18                     u1781:
  4056   001E18  EF14  F00F         	goto	l93
  4057   001E1C                     u1780:
  4058   001E1C  C001  F005         	movff	max@a,max@max_val
  4059   001E20  C002  F006         	movff	max@a+1,max@max_val+1
  4060   001E24  EF18  F00F         	goto	l94
  4061   001E28                     l93:
  4062   001E28  C003  F005         	movff	max@b,max@max_val
  4063   001E2C  C004  F006         	movff	max@b+1,max@max_val+1
  4064   001E30                     l94:
  4065                           
  4066                           ;color.c: 118:     return max_val;
  4067   001E30  C005  F001         	movff	max@max_val,?_max
  4068   001E34  C006  F002         	movff	max@max_val+1,?_max+1
  4069   001E38  0012               	return		;funcret
  4070   001E3A                     __end_of_max:
  4071                           	callstack 0
  4072                           
  4073 ;; *************** function ___wmul *****************
  4074 ;; Defined at:
  4075 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  multiplier      2    0[COMRAM] unsigned int 
  4078 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  product         2    4[COMRAM] unsigned int 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  2    0[COMRAM] unsigned int 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0, prodl, prodh
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4090 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4093 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4094 ;;Total ram usage:        6 bytes
  4095 ;; Hardware stack levels used: 1
  4096 ;; Hardware stack levels required when called: 1
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_getHSVval
  4101 ;;		_setMotorPWM
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text26
  4106   001EEE                     __ptext26:
  4107                           	callstack 0
  4108   001EEE                     ___wmul:
  4109                           	callstack 28
  4110   001EEE  5001               	movf	___wmul@multiplier^0,w,c
  4111   001EF0  0203               	mulwf	___wmul@multiplicand^0,c
  4112   001EF2  CFF3 F005          	movff	prodl,___wmul@product
  4113   001EF6  CFF4 F006          	movff	prodh,___wmul@product+1
  4114   001EFA  5001               	movf	___wmul@multiplier^0,w,c
  4115   001EFC  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4116   001EFE  50F3               	movf	243,w,c
  4117   001F00  2606               	addwf	(___wmul@product+1)^0,f,c
  4118   001F02  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4119   001F04  0203               	mulwf	___wmul@multiplicand^0,c
  4120   001F06  50F3               	movf	243,w,c
  4121   001F08  2606               	addwf	(___wmul@product+1)^0,f,c
  4122   001F0A  C005  F001         	movff	___wmul@product,?___wmul
  4123   001F0E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4124   001F12  0012               	return		;funcret
  4125   001F14                     __end_of___wmul:
  4126                           	callstack 0
  4127                           
  4128 ;; *************** function ___lwmod *****************
  4129 ;; Defined at:
  4130 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  dividend        2   13[COMRAM] unsigned int 
  4133 ;;  divisor         2   15[COMRAM] unsigned int 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  counter         1   17[COMRAM] unsigned char 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  2   13[COMRAM] unsigned int 
  4138 ;; Registers used:
  4139 ;;		wreg, status,2, status,0
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4145 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4146 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4148 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4149 ;;Total ram usage:        5 bytes
  4150 ;; Hardware stack levels used: 1
  4151 ;; Hardware stack levels required when called: 1
  4152 ;; This function calls:
  4153 ;;		Nothing
  4154 ;; This function is called by:
  4155 ;;		_getHSVval
  4156 ;;		_vfpfcnvrt
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text27
  4161   00196C                     __ptext27:
  4162                           	callstack 0
  4163   00196C                     ___lwmod:
  4164                           	callstack 25
  4165   00196C  5010               	movf	___lwmod@divisor^0,w,c
  4166   00196E  1011               	iorwf	(___lwmod@divisor+1)^0,w,c
  4167   001970  B4D8               	btfsc	status,2,c
  4168   001972  EFBD  F00C         	goto	u1341
  4169   001976  EFBF  F00C         	goto	u1340
  4170   00197A                     u1341:
  4171   00197A  EFE3  F00C         	goto	l1259
  4172   00197E                     u1340:
  4173   00197E  0E01               	movlw	1
  4174   001980  6E12               	movwf	___lwmod@counter^0,c
  4175   001982  EFC7  F00C         	goto	l2653
  4176   001986                     l2651:
  4177   001986  90D8               	bcf	status,0,c
  4178   001988  3610               	rlcf	___lwmod@divisor^0,f,c
  4179   00198A  3611               	rlcf	(___lwmod@divisor+1)^0,f,c
  4180   00198C  2A12               	incf	___lwmod@counter^0,f,c
  4181   00198E                     l2653:
  4182   00198E  AE11               	btfss	(___lwmod@divisor+1)^0,7,c
  4183   001990  EFCC  F00C         	goto	u1351
  4184   001994  EFCE  F00C         	goto	u1350
  4185   001998                     u1351:
  4186   001998  EFC3  F00C         	goto	l2651
  4187   00199C                     u1350:
  4188   00199C                     l2655:
  4189   00199C  5010               	movf	___lwmod@divisor^0,w,c
  4190   00199E  5C0E               	subwf	___lwmod@dividend^0,w,c
  4191   0019A0  5011               	movf	(___lwmod@divisor+1)^0,w,c
  4192   0019A2  580F               	subwfb	(___lwmod@dividend+1)^0,w,c
  4193   0019A4  A0D8               	btfss	status,0,c
  4194   0019A6  EFD7  F00C         	goto	u1361
  4195   0019AA  EFD9  F00C         	goto	u1360
  4196   0019AE                     u1361:
  4197   0019AE  EFDD  F00C         	goto	l2659
  4198   0019B2                     u1360:
  4199   0019B2  5010               	movf	___lwmod@divisor^0,w,c
  4200   0019B4  5E0E               	subwf	___lwmod@dividend^0,f,c
  4201   0019B6  5011               	movf	(___lwmod@divisor+1)^0,w,c
  4202   0019B8  5A0F               	subwfb	(___lwmod@dividend+1)^0,f,c
  4203   0019BA                     l2659:
  4204   0019BA  90D8               	bcf	status,0,c
  4205   0019BC  3211               	rrcf	(___lwmod@divisor+1)^0,f,c
  4206   0019BE  3210               	rrcf	___lwmod@divisor^0,f,c
  4207   0019C0  2E12               	decfsz	___lwmod@counter^0,f,c
  4208   0019C2  EFCE  F00C         	goto	l2655
  4209   0019C6                     l1259:
  4210   0019C6  C00E  F00E         	movff	___lwmod@dividend,?___lwmod
  4211   0019CA  C00F  F00F         	movff	___lwmod@dividend+1,?___lwmod+1
  4212   0019CE  0012               	return		;funcret
  4213   0019D0                     __end_of___lwmod:
  4214                           	callstack 0
  4215                           
  4216 ;; *************** function ___lwdiv *****************
  4217 ;; Defined at:
  4218 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  dividend        2    6[COMRAM] unsigned int 
  4221 ;;  divisor         2    8[COMRAM] unsigned int 
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;  quotient        2   10[COMRAM] unsigned int 
  4224 ;;  counter         1   12[COMRAM] unsigned char 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  2    6[COMRAM] unsigned int 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4234 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4235 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4237 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4238 ;;Total ram usage:        7 bytes
  4239 ;; Hardware stack levels used: 1
  4240 ;; Hardware stack levels required when called: 1
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_getHSVval
  4245 ;;		_vfpfcnvrt
  4246 ;;		_setMotorPWM
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           	psect	text28
  4251   0018F8                     __ptext28:
  4252                           	callstack 0
  4253   0018F8                     ___lwdiv:
  4254                           	callstack 25
  4255   0018F8  0E00               	movlw	0
  4256   0018FA  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  4257   0018FC  0E00               	movlw	0
  4258   0018FE  6E0B               	movwf	___lwdiv@quotient^0,c
  4259   001900  5009               	movf	___lwdiv@divisor^0,w,c
  4260   001902  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4261   001904  B4D8               	btfsc	status,2,c
  4262   001906  EF87  F00C         	goto	u1311
  4263   00190A  EF89  F00C         	goto	u1310
  4264   00190E                     u1311:
  4265   00190E  EFB1  F00C         	goto	l1249
  4266   001912                     u1310:
  4267   001912  0E01               	movlw	1
  4268   001914  6E0D               	movwf	___lwdiv@counter^0,c
  4269   001916  EF91  F00C         	goto	l2633
  4270   00191A                     l2631:
  4271   00191A  90D8               	bcf	status,0,c
  4272   00191C  3609               	rlcf	___lwdiv@divisor^0,f,c
  4273   00191E  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4274   001920  2A0D               	incf	___lwdiv@counter^0,f,c
  4275   001922                     l2633:
  4276   001922  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  4277   001924  EF96  F00C         	goto	u1321
  4278   001928  EF98  F00C         	goto	u1320
  4279   00192C                     u1321:
  4280   00192C  EF8D  F00C         	goto	l2631
  4281   001930                     u1320:
  4282   001930                     l2635:
  4283   001930  90D8               	bcf	status,0,c
  4284   001932  360B               	rlcf	___lwdiv@quotient^0,f,c
  4285   001934  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4286   001936  5009               	movf	___lwdiv@divisor^0,w,c
  4287   001938  5C07               	subwf	___lwdiv@dividend^0,w,c
  4288   00193A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4289   00193C  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4290   00193E  A0D8               	btfss	status,0,c
  4291   001940  EFA4  F00C         	goto	u1331
  4292   001944  EFA6  F00C         	goto	u1330
  4293   001948                     u1331:
  4294   001948  EFAB  F00C         	goto	l2643
  4295   00194C                     u1330:
  4296   00194C  5009               	movf	___lwdiv@divisor^0,w,c
  4297   00194E  5E07               	subwf	___lwdiv@dividend^0,f,c
  4298   001950  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4299   001952  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4300   001954  800B               	bsf	___lwdiv@quotient^0,0,c
  4301   001956                     l2643:
  4302   001956  90D8               	bcf	status,0,c
  4303   001958  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4304   00195A  3209               	rrcf	___lwdiv@divisor^0,f,c
  4305   00195C  2E0D               	decfsz	___lwdiv@counter^0,f,c
  4306   00195E  EF98  F00C         	goto	l2635
  4307   001962                     l1249:
  4308   001962  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  4309   001966  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4310   00196A  0012               	return		;funcret
  4311   00196C                     __end_of___lwdiv:
  4312                           	callstack 0
  4313                           
  4314 ;; *************** function _color_click_init *****************
  4315 ;; Defined at:
  4316 ;;		line 4 in file "color.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, status,2, status,0, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4332 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4333 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4334 ;;Total ram usage:        1 bytes
  4335 ;; Hardware stack levels used: 1
  4336 ;; Hardware stack levels required when called: 4
  4337 ;; This function calls:
  4338 ;;		_I2C_2_Master_Init
  4339 ;;		_color_writetoaddr
  4340 ;; This function is called by:
  4341 ;;		_main
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text29
  4346   001E3A                     __ptext29:
  4347                           	callstack 0
  4348   001E3A                     _color_click_init:
  4349                           	callstack 26
  4350   001E3A                     
  4351                           ;color.c: 7:     I2C_2_Master_Init();
  4352   001E3A  EC4E  F00F         	call	_I2C_2_Master_Init	;wreg free
  4353   001E3E                     
  4354                           ;color.c: 10:   color_writetoaddr(0x00, 0x01);
  4355   001E3E  0E01               	movlw	1
  4356   001E40  6E03               	movwf	color_writetoaddr@value^0,c
  4357   001E42  0E00               	movlw	0
  4358   001E44  EC9C  F00F         	call	_color_writetoaddr
  4359   001E48                     
  4360                           ;color.c: 11:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4361   001E48  0E3F               	movlw	63
  4362   001E4A  6E05               	movwf	??_color_click_init^0,c
  4363   001E4C  0E55               	movlw	85
  4364   001E4E                     u2597:
  4365   001E4E  2EE8               	decfsz	wreg,f,c
  4366   001E50  D7FE               	bra	u2597
  4367   001E52  2E05               	decfsz	??_color_click_init^0,f,c
  4368   001E54  D7FC               	bra	u2597
  4369   001E56  0000               	nop	
  4370   001E58                     
  4371                           ;color.c: 14:  color_writetoaddr(0x00, 0x03);
  4372   001E58  0E03               	movlw	3
  4373   001E5A  6E03               	movwf	color_writetoaddr@value^0,c
  4374   001E5C  0E00               	movlw	0
  4375   001E5E  EC9C  F00F         	call	_color_writetoaddr
  4376   001E62                     
  4377                           ;color.c: 17:  color_writetoaddr(0x01, 0xD5);
  4378   001E62  0ED5               	movlw	213
  4379   001E64  6E03               	movwf	color_writetoaddr@value^0,c
  4380   001E66  0E01               	movlw	1
  4381   001E68  EC9C  F00F         	call	_color_writetoaddr
  4382   001E6C  0012               	return		;funcret
  4383   001E6E                     __end_of_color_click_init:
  4384                           	callstack 0
  4385                           
  4386 ;; *************** function _color_writetoaddr *****************
  4387 ;; Defined at:
  4388 ;;		line 20 in file "color.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  address         1    wreg     unsigned char 
  4391 ;;  value           1    2[COMRAM] unsigned char 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  address         1    3[COMRAM] unsigned char 
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg, status,2, status,0, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4403 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4406 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4407 ;;Total ram usage:        2 bytes
  4408 ;; Hardware stack levels used: 1
  4409 ;; Hardware stack levels required when called: 3
  4410 ;; This function calls:
  4411 ;;		_I2C_2_Master_Start
  4412 ;;		_I2C_2_Master_Stop
  4413 ;;		_I2C_2_Master_Write
  4414 ;; This function is called by:
  4415 ;;		_color_click_init
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text30
  4420   001F38                     __ptext30:
  4421                           	callstack 0
  4422   001F38                     _color_writetoaddr:
  4423                           	callstack 26
  4424                           
  4425                           ;incstack = 0
  4426                           ;color_writetoaddr@address stored from wreg
  4427   001F38  6E04               	movwf	color_writetoaddr@address^0,c
  4428   001F3A                     
  4429                           ;color.c: 21:     I2C_2_Master_Start();
  4430   001F3A  ECF0  F00F         	call	_I2C_2_Master_Start	;wreg free
  4431                           
  4432                           ;color.c: 22:     I2C_2_Master_Write(0x52 | 0x00);
  4433   001F3E  0E52               	movlw	82
  4434   001F40  ECD4  F00F         	call	_I2C_2_Master_Write
  4435                           
  4436                           ;color.c: 23:     I2C_2_Master_Write(0x80 | address);
  4437   001F44  5004               	movf	color_writetoaddr@address^0,w,c
  4438   001F46  0980               	iorlw	128
  4439   001F48  ECD4  F00F         	call	_I2C_2_Master_Write
  4440                           
  4441                           ;color.c: 24:     I2C_2_Master_Write(value);
  4442   001F4C  5003               	movf	color_writetoaddr@value^0,w,c
  4443   001F4E  ECD4  F00F         	call	_I2C_2_Master_Write
  4444                           
  4445                           ;color.c: 25:     I2C_2_Master_Stop();
  4446   001F52  ECEB  F00F         	call	_I2C_2_Master_Stop	;wreg free
  4447   001F56  0012               	return		;funcret
  4448   001F58                     __end_of_color_writetoaddr:
  4449                           	callstack 0
  4450                           
  4451 ;; *************** function _I2C_2_Master_Write *****************
  4452 ;; Defined at:
  4453 ;;		line 45 in file "i2c.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  data_byte       1    wreg     unsigned char 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  data_byte       1    1[COMRAM] unsigned char 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  1    wreg      void 
  4460 ;; Registers used:
  4461 ;;		wreg, status,2, status,0, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4468 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4470 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4471 ;;Total ram usage:        1 bytes
  4472 ;; Hardware stack levels used: 1
  4473 ;; Hardware stack levels required when called: 2
  4474 ;; This function calls:
  4475 ;;		_I2C_2_Master_Idle
  4476 ;; This function is called by:
  4477 ;;		_color_writetoaddr
  4478 ;;		_color_read_Red
  4479 ;;		_color_read_Blue
  4480 ;;		_color_read_Green
  4481 ;;		_color_read_Clear
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text31
  4486   001FA8                     __ptext31:
  4487                           	callstack 0
  4488   001FA8                     _I2C_2_Master_Write:
  4489                           	callstack 26
  4490                           
  4491                           ;incstack = 0
  4492                           ;I2C_2_Master_Write@data_byte stored from wreg
  4493   001FA8  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  4494   001FAA                     
  4495                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4496   001FAA  EC63  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4497   001FAE                     
  4498                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4499   001FAE  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4500   001FB2  0012               	return		;funcret
  4501   001FB4                     __end_of_I2C_2_Master_Write:
  4502                           	callstack 0
  4503                           
  4504 ;; *************** function _I2C_2_Master_Stop *****************
  4505 ;; Defined at:
  4506 ;;		line 39 in file "i2c.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;		None
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;		None
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  1    wreg      void 
  4513 ;; Registers used:
  4514 ;;		wreg, status,2, status,0, cstack
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4524 ;;Total ram usage:        0 bytes
  4525 ;; Hardware stack levels used: 1
  4526 ;; Hardware stack levels required when called: 2
  4527 ;; This function calls:
  4528 ;;		_I2C_2_Master_Idle
  4529 ;; This function is called by:
  4530 ;;		_color_writetoaddr
  4531 ;;		_color_read_Red
  4532 ;;		_color_read_Blue
  4533 ;;		_color_read_Green
  4534 ;;		_color_read_Clear
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text32
  4539   001FD6                     __ptext32:
  4540                           	callstack 0
  4541   001FD6                     _I2C_2_Master_Stop:
  4542                           	callstack 26
  4543   001FD6                     
  4544                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4545   001FD6  EC63  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4546   001FDA                     
  4547                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4548   001FDA  010E               	movlb	14	; () banked
  4549   001FDC  85DA               	bsf	218,2,b	;volatile
  4550   001FDE                     
  4551                           ; BSR set to: 14
  4552   001FDE  0012               	return		;funcret
  4553   001FE0                     __end_of_I2C_2_Master_Stop:
  4554                           	callstack 0
  4555                           
  4556 ;; *************** function _I2C_2_Master_Start *****************
  4557 ;; Defined at:
  4558 ;;		line 27 in file "i2c.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg, status,2, status,0, cstack
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4576 ;;Total ram usage:        0 bytes
  4577 ;; Hardware stack levels used: 1
  4578 ;; Hardware stack levels required when called: 2
  4579 ;; This function calls:
  4580 ;;		_I2C_2_Master_Idle
  4581 ;; This function is called by:
  4582 ;;		_color_writetoaddr
  4583 ;;		_color_read_Red
  4584 ;;		_color_read_Blue
  4585 ;;		_color_read_Green
  4586 ;;		_color_read_Clear
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	text33
  4591   001FE0                     __ptext33:
  4592                           	callstack 0
  4593   001FE0                     _I2C_2_Master_Start:
  4594                           	callstack 26
  4595   001FE0                     
  4596                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4597   001FE0  EC63  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4598   001FE4                     
  4599                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4600   001FE4  010E               	movlb	14	; () banked
  4601   001FE6  81DA               	bsf	218,0,b	;volatile
  4602   001FE8                     
  4603                           ; BSR set to: 14
  4604   001FE8  0012               	return		;funcret
  4605   001FEA                     __end_of_I2C_2_Master_Start:
  4606                           	callstack 0
  4607                           
  4608 ;; *************** function _I2C_2_Master_Idle *****************
  4609 ;; Defined at:
  4610 ;;		line 22 in file "i2c.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4628 ;;Total ram usage:        1 bytes
  4629 ;; Hardware stack levels used: 1
  4630 ;; Hardware stack levels required when called: 1
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_I2C_2_Master_Start
  4635 ;;		_I2C_2_Master_RepStart
  4636 ;;		_I2C_2_Master_Stop
  4637 ;;		_I2C_2_Master_Write
  4638 ;;		_I2C_2_Master_Read
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text34
  4643   001EC6                     __ptext34:
  4644                           	callstack 0
  4645   001EC6                     _I2C_2_Master_Idle:
  4646                           	callstack 26
  4647   001EC6                     l281:
  4648   001EC6  010E               	movlb	14	; () banked
  4649   001EC8  B5D8               	btfsc	216,2,b	;volatile
  4650   001ECA  EF69  F00F         	goto	u1581
  4651   001ECE  EF6B  F00F         	goto	u1580
  4652   001ED2                     u1581:
  4653   001ED2  EF63  F00F         	goto	l281
  4654   001ED6                     u1580:
  4655   001ED6                     
  4656                           ; BSR set to: 14
  4657   001ED6  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4658   001EDA  0E1F               	movlw	31
  4659   001EDC  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4660   001EDE  A4D8               	btfss	status,2,c
  4661   001EE0  EF74  F00F         	goto	u1591
  4662   001EE4  EF76  F00F         	goto	u1590
  4663   001EE8                     u1591:
  4664   001EE8  EF63  F00F         	goto	l281
  4665   001EEC                     u1590:
  4666   001EEC                     
  4667                           ; BSR set to: 14
  4668   001EEC  0012               	return		;funcret
  4669   001EEE                     __end_of_I2C_2_Master_Idle:
  4670                           	callstack 0
  4671                           
  4672 ;; *************** function _I2C_2_Master_Init *****************
  4673 ;; Defined at:
  4674 ;;		line 4 in file "i2c.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;		None
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;		None
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  1    wreg      void 
  4681 ;; Registers used:
  4682 ;;		wreg, status,2
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4692 ;;Total ram usage:        0 bytes
  4693 ;; Hardware stack levels used: 1
  4694 ;; Hardware stack levels required when called: 1
  4695 ;; This function calls:
  4696 ;;		Nothing
  4697 ;; This function is called by:
  4698 ;;		_color_click_init
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text35
  4703   001E9C                     __ptext35:
  4704                           	callstack 0
  4705   001E9C                     _I2C_2_Master_Init:
  4706                           	callstack 28
  4707   001E9C                     
  4708                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4709   001E9C  010E               	movlb	14	; () banked
  4710   001E9E  51D9               	movf	217,w,b	;volatile
  4711   001EA0  0BF0               	andlw	-16
  4712   001EA2  0908               	iorlw	8
  4713   001EA4  6FD9               	movwf	217,b	;volatile
  4714   001EA6                     
  4715                           ; BSR set to: 14
  4716                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4717   001EA6  8BD9               	bsf	217,5,b	;volatile
  4718                           
  4719                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4720   001EA8  0E9F               	movlw	159
  4721   001EAA  6FD6               	movwf	214,b	;volatile
  4722   001EAC                     
  4723                           ; BSR set to: 14
  4724                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4725   001EAC  8A84               	bsf	132,5,c	;volatile
  4726   001EAE                     
  4727                           ; BSR set to: 14
  4728                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4729   001EAE  8C84               	bsf	132,6,c	;volatile
  4730   001EB0                     
  4731                           ; BSR set to: 14
  4732                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4733   001EB0  9BA7               	bcf	167,5,b	;volatile
  4734   001EB2                     
  4735                           ; BSR set to: 14
  4736                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4737   001EB2  9DA7               	bcf	167,6,b	;volatile
  4738                           
  4739                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4740   001EB4  0E1D               	movlw	29
  4741   001EB6  6F1D               	movwf	29,b	;volatile
  4742                           
  4743                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4744   001EB8  0E1E               	movlw	30
  4745   001EBA  6F1C               	movwf	28,b	;volatile
  4746                           
  4747                           ;i2c.c: 18:   RD5PPS=0x1C;
  4748   001EBC  0E1C               	movlw	28
  4749   001EBE  6F6F               	movwf	111,b	;volatile
  4750                           
  4751                           ;i2c.c: 19:   RD6PPS=0x1B;
  4752   001EC0  0E1B               	movlw	27
  4753   001EC2  6F70               	movwf	112,b	;volatile
  4754   001EC4                     
  4755                           ; BSR set to: 14
  4756   001EC4  0012               	return		;funcret
  4757   001EC6                     __end_of_I2C_2_Master_Init:
  4758                           	callstack 0
  4759                           
  4760 ;; *************** function _buggy_lights_init *****************
  4761 ;; Defined at:
  4762 ;;		line 4 in file "buggy_lights.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;		None
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;		None
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      void 
  4769 ;; Registers used:
  4770 ;;		None
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4780 ;;Total ram usage:        0 bytes
  4781 ;; Hardware stack levels used: 1
  4782 ;; Hardware stack levels required when called: 1
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_main
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           	psect	text36
  4791   001E6E                     __ptext36:
  4792                           	callstack 0
  4793   001E6E                     _buggy_lights_init:
  4794                           	callstack 29
  4795   001E6E                     
  4796                           ;buggy_lights.c: 8:         TRISDbits.TRISD4 = 0;
  4797   001E6E  9884               	bcf	132,4,c	;volatile
  4798                           
  4799                           ;buggy_lights.c: 9:         TRISHbits.TRISH1 = 0;
  4800   001E70  9288               	bcf	136,1,c	;volatile
  4801                           
  4802                           ;buggy_lights.c: 10:         TRISDbits.TRISD3 = 0;
  4803   001E72  9684               	bcf	132,3,c	;volatile
  4804                           
  4805                           ;buggy_lights.c: 11:         TRISFbits.TRISF0 = 0;
  4806   001E74  9086               	bcf	134,0,c	;volatile
  4807                           
  4808                           ;buggy_lights.c: 12:         TRISHbits.TRISH0 = 0;
  4809   001E76  9088               	bcf	136,0,c	;volatile
  4810                           
  4811                           ;buggy_lights.c: 14:         LATDbits.LATD4 = 0;
  4812   001E78  987C               	bcf	124,4,c	;volatile
  4813                           
  4814                           ;buggy_lights.c: 15:         LATHbits.LATH1 = 0;
  4815   001E7A  9280               	bcf	128,1,c	;volatile
  4816                           
  4817                           ;buggy_lights.c: 16:         LATDbits.LATD3 = 0;
  4818   001E7C  967C               	bcf	124,3,c	;volatile
  4819                           
  4820                           ;buggy_lights.c: 17:         LATFbits.LATF0 = 0;
  4821   001E7E  907E               	bcf	126,0,c	;volatile
  4822                           
  4823                           ;buggy_lights.c: 18:         LATHbits.LATH0 = 0;
  4824   001E80  9080               	bcf	128,0,c	;volatile
  4825                           
  4826                           ;buggy_lights.c: 24:             TRISGbits.TRISG1 = 0;
  4827   001E82  9287               	bcf	135,1,c	;volatile
  4828                           
  4829                           ;buggy_lights.c: 25:             TRISAbits.TRISA4 = 0;
  4830   001E84  9881               	bcf	129,4,c	;volatile
  4831                           
  4832                           ;buggy_lights.c: 26:             TRISFbits.TRISF7 = 0;
  4833   001E86  9E86               	bcf	134,7,c	;volatile
  4834                           
  4835                           ;buggy_lights.c: 28:             LATGbits.LATG1 = 0;
  4836   001E88  927F               	bcf	127,1,c	;volatile
  4837                           
  4838                           ;buggy_lights.c: 29:             LATAbits.LATA4 = 0;
  4839   001E8A  9879               	bcf	121,4,c	;volatile
  4840                           
  4841                           ;buggy_lights.c: 30:             LATFbits.LATF7 = 0;
  4842   001E8C  9E7E               	bcf	126,7,c	;volatile
  4843                           
  4844                           ;buggy_lights.c: 34:             TRISGbits.TRISG0 = 0;
  4845   001E8E  9087               	bcf	135,0,c	;volatile
  4846                           
  4847                           ;buggy_lights.c: 35:             TRISEbits.TRISE7 = 0;
  4848   001E90  9E85               	bcf	133,7,c	;volatile
  4849                           
  4850                           ;buggy_lights.c: 36:             TRISAbits.TRISA3 = 0;
  4851   001E92  9681               	bcf	129,3,c	;volatile
  4852                           
  4853                           ;buggy_lights.c: 38:             LATGbits.LATG0 = 0;
  4854   001E94  907F               	bcf	127,0,c	;volatile
  4855                           
  4856                           ;buggy_lights.c: 39:             LATEbits.LATE7 = 0;
  4857   001E96  9E7D               	bcf	125,7,c	;volatile
  4858                           
  4859                           ;buggy_lights.c: 40:             LATAbits.LATA3 = 0;
  4860   001E98  9679               	bcf	121,3,c	;volatile
  4861   001E9A  0012               	return		;funcret
  4862   001E9C                     __end_of_buggy_lights_init:
  4863                           	callstack 0
  4864                           
  4865 ;; *************** function _Timer0_init *****************
  4866 ;; Defined at:
  4867 ;;		line 7 in file "timers.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg, status,2, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4885 ;;Total ram usage:        0 bytes
  4886 ;; Hardware stack levels used: 1
  4887 ;; Hardware stack levels required when called: 3
  4888 ;; This function calls:
  4889 ;;		_reset_timer
  4890 ;; This function is called by:
  4891 ;;		_main
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text37
  4896   001F14                     __ptext37:
  4897                           	callstack 0
  4898   001F14                     _Timer0_init:
  4899                           	callstack 27
  4900   001F14                     
  4901                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4902   001F14  50D6               	movf	214,w,c	;volatile
  4903   001F16  0B1F               	andlw	-225
  4904   001F18  0940               	iorlw	64
  4905   001F1A  6ED6               	movwf	214,c	;volatile
  4906   001F1C                     
  4907                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4908   001F1C  88D6               	bsf	214,4,c	;volatile
  4909   001F1E                     
  4910                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  4911   001F1E  88D5               	bsf	213,4,c	;volatile
  4912                           
  4913                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  4914   001F20  50D6               	movf	214,w,c	;volatile
  4915   001F22  0BF0               	andlw	-16
  4916   001F24  090E               	iorlw	14
  4917   001F26  6ED6               	movwf	214,c	;volatile
  4918   001F28                     
  4919                           ;timers.c: 18:     reset_timer();
  4920   001F28  ECDA  F00F         	call	_reset_timer	;wreg free
  4921   001F2C                     
  4922                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  4923   001F2C  8ED5               	bsf	213,7,c	;volatile
  4924   001F2E                     
  4925                           ;timers.c: 21:     PIE0bits.TMR0IE = 1;
  4926   001F2E  010E               	movlb	14	; () banked
  4927   001F30  8B29               	bsf	41,5,b	;volatile
  4928   001F32                     
  4929                           ; BSR set to: 14
  4930                           ;timers.c: 22:     INTCONbits.PEIE = 1;
  4931   001F32  8CF2               	bsf	242,6,c	;volatile
  4932   001F34                     
  4933                           ; BSR set to: 14
  4934                           ;timers.c: 23:     INTCONbits.GIE = 1;
  4935   001F34  8EF2               	bsf	242,7,c	;volatile
  4936   001F36                     
  4937                           ; BSR set to: 14
  4938   001F36  0012               	return		;funcret
  4939   001F38                     __end_of_Timer0_init:
  4940                           	callstack 0
  4941                           
  4942 ;; *************** function _reset_timer *****************
  4943 ;; Defined at:
  4944 ;;		line 44 in file "timers.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;		None
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;		None
  4949 ;; Return value:  Size  Location     Type
  4950 ;;                  1    wreg      void 
  4951 ;; Registers used:
  4952 ;;		wreg, status,2, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4962 ;;Total ram usage:        0 bytes
  4963 ;; Hardware stack levels used: 1
  4964 ;; Hardware stack levels required when called: 2
  4965 ;; This function calls:
  4966 ;;		_write_timer
  4967 ;; This function is called by:
  4968 ;;		_Timer0_init
  4969 ;;		_forward_navigation
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           	psect	text38
  4974   001FB4                     __ptext38:
  4975                           	callstack 0
  4976   001FB4                     _reset_timer:
  4977                           	callstack 27
  4978   001FB4                     
  4979                           ;timers.c: 46:     write_timer(0, 0);
  4980   001FB4  0E00               	movlw	0
  4981   001FB6  6E01               	movwf	write_timer@tL^0,c
  4982   001FB8  0E00               	movlw	0
  4983   001FBA  ECE0  F00F         	call	_write_timer
  4984   001FBE  0012               	return		;funcret
  4985   001FC0                     __end_of_reset_timer:
  4986                           	callstack 0
  4987                           
  4988 ;; *************** function _write_timer *****************
  4989 ;; Defined at:
  4990 ;;		line 35 in file "timers.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;  tH              1    wreg     unsigned char 
  4993 ;;  tL              1    0[COMRAM] unsigned char 
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  tH              1    1[COMRAM] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5005 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5006 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5008 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5009 ;;Total ram usage:        2 bytes
  5010 ;; Hardware stack levels used: 1
  5011 ;; Hardware stack levels required when called: 1
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_reset_timer
  5016 ;;		_return_to_sender
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text39
  5021   001FC0                     __ptext39:
  5022                           	callstack 0
  5023   001FC0                     _write_timer:
  5024                           	callstack 27
  5025                           
  5026                           ;incstack = 0
  5027                           ;write_timer@tH stored from wreg
  5028   001FC0  6E02               	movwf	write_timer@tH^0,c
  5029   001FC2                     
  5030                           ;timers.c: 35: void write_timer(unsigned char tH, unsigned char tL);timers.c: 36: {;time
      +                          rs.c: 40:     TMR0H = tH;
  5031   001FC2  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  5032   001FC6                     
  5033                           ;timers.c: 41:     TMR0L = tL;
  5034   001FC6  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  5035   001FCA  0012               	return		;funcret
  5036   001FCC                     __end_of_write_timer:
  5037                           	callstack 0
  5038                           
  5039 ;; *************** function _ISR *****************
  5040 ;; Defined at:
  5041 ;;		line 116 in file "timers.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;		None
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;		None
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      void 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5059 ;;Total ram usage:        0 bytes
  5060 ;; Hardware stack levels used: 1
  5061 ;; This function calls:
  5062 ;;		Nothing
  5063 ;; This function is called by:
  5064 ;;		Interrupt level 2
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	intcode
  5069   000008                     __pintcode:
  5070                           	callstack 0
  5071   000008                     _ISR:
  5072                           	callstack 24
  5073                           
  5074                           ;incstack = 0
  5075   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5076   00000A                     
  5077                           ;timers.c: 119:     if (PIR0bits.TMR0IF) {
  5078   00000A  010E               	movlb	14	; () banked
  5079   00000C  AB33               	btfss	51,5,b	;volatile
  5080   00000E  EF0B  F000         	goto	i2u219_41
  5081   000012  EF0D  F000         	goto	i2u219_40
  5082   000016                     i2u219_41:
  5083   000016  EF1A  F000         	goto	i2l728
  5084   00001A                     i2u219_40:
  5085   00001A                     
  5086                           ; BSR set to: 14
  5087                           ;timers.c: 120:         if (returning) {
  5088   00001A  0100               	movlb	0	; () banked
  5089   00001C  519D               	movf	_returning& (0+255),w,b
  5090   00001E  B4D8               	btfsc	status,2,c
  5091   000020  EF14  F000         	goto	i2u220_41
  5092   000024  EF16  F000         	goto	i2u220_40
  5093   000028                     i2u220_41:
  5094   000028  EF18  F000         	goto	i2l727
  5095   00002C                     i2u220_40:
  5096   00002C                     
  5097                           ; BSR set to: 0
  5098                           ;timers.c: 121:             return_flag = 1;
  5099   00002C  0E01               	movlw	1
  5100   00002E  6F9C               	movwf	_return_flag& (0+255),b
  5101   000030                     i2l727:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;timers.c: 126:         PIR0bits.TMR0IF = 0;
  5105   000030  010E               	movlb	14	; () banked
  5106   000032  9B33               	bcf	51,5,b	;volatile
  5107   000034                     i2l728:
  5108                           
  5109                           ; BSR set to: 14
  5110   000034  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5111   000036  0011               	retfie		f
  5112   000038                     __end_of_ISR:
  5113                           	callstack 0
  5114                           
  5115                           	psect	rparam
  5116   000000                     
  5117                           	psect	temp
  5118   00005F                     btemp:
  5119                           	callstack 0
  5120   00005F                     	ds	1
  5121   000000                     int$flags	set	btemp
  5122   000000                     wtemp8	set	btemp+1
  5123   000000                     ttemp5	set	btemp+1
  5124   000000                     ttemp6	set	btemp+4
  5125   000000                     ttemp7	set	btemp+8
  5126                           
  5127                           	psect	idloc
  5128                           
  5129                           ;Config register IDLOC0 @ 0x200000
  5130                           ;	unspecified, using default values
  5131   200000                     	org	2097152
  5132   200000  FFFF               	dw	65535
  5133                           
  5134                           ;Config register IDLOC1 @ 0x200002
  5135                           ;	unspecified, using default values
  5136   200002                     	org	2097154
  5137   200002  FFFF               	dw	65535
  5138                           
  5139                           ;Config register IDLOC2 @ 0x200004
  5140                           ;	unspecified, using default values
  5141   200004                     	org	2097156
  5142   200004  FFFF               	dw	65535
  5143                           
  5144                           ;Config register IDLOC3 @ 0x200006
  5145                           ;	unspecified, using default values
  5146   200006                     	org	2097158
  5147   200006  FFFF               	dw	65535
  5148                           
  5149                           ;Config register IDLOC4 @ 0x200008
  5150                           ;	unspecified, using default values
  5151   200008                     	org	2097160
  5152   200008  FFFF               	dw	65535
  5153                           
  5154                           ;Config register IDLOC5 @ 0x20000A
  5155                           ;	unspecified, using default values
  5156   20000A                     	org	2097162
  5157   20000A  FFFF               	dw	65535
  5158                           
  5159                           ;Config register IDLOC6 @ 0x20000C
  5160                           ;	unspecified, using default values
  5161   20000C                     	org	2097164
  5162   20000C  FFFF               	dw	65535
  5163                           
  5164                           ;Config register IDLOC7 @ 0x20000E
  5165                           ;	unspecified, using default values
  5166   20000E                     	org	2097166
  5167   20000E  FFFF               	dw	65535
  5168                           
  5169                           	psect	config
  5170                           
  5171                           ;Config register CONFIG1L @ 0x300000
  5172                           ;	External Oscillator mode Selection bits
  5173                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5174                           ;	Power-up default value for COSC bits
  5175                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5176   300000                     	org	3145728
  5177   300000  AA                 	db	170
  5178                           
  5179                           ;Config register CONFIG1H @ 0x300001
  5180                           ;	unspecified, using default values
  5181                           ;	Clock Out Enable bit
  5182                           ;	CLKOUTEN = 0x1, unprogrammed default
  5183                           ;	Clock Switch Enable bit
  5184                           ;	CSWEN = 0x1, unprogrammed default
  5185                           ;	Fail-Safe Clock Monitor Enable bit
  5186                           ;	FCMEN = 0x1, unprogrammed default
  5187   300001                     	org	3145729
  5188   300001  FF                 	db	255
  5189                           
  5190                           ;Config register CONFIG2L @ 0x300002
  5191                           ;	unspecified, using default values
  5192                           ;	Master Clear Enable bit
  5193                           ;	MCLRE = 0x1, unprogrammed default
  5194                           ;	Power-up Timer Enable bit
  5195                           ;	PWRTE = 0x1, unprogrammed default
  5196                           ;	Low-power BOR enable bit
  5197                           ;	LPBOREN = 0x1, unprogrammed default
  5198                           ;	Brown-out Reset Enable bits
  5199                           ;	BOREN = 0x3, unprogrammed default
  5200   300002                     	org	3145730
  5201   300002  FF                 	db	255
  5202                           
  5203                           ;Config register CONFIG2H @ 0x300003
  5204                           ;	unspecified, using default values
  5205                           ;	Brown Out Reset Voltage selection bits
  5206                           ;	BORV = 0x3, unprogrammed default
  5207                           ;	ZCD Disable bit
  5208                           ;	ZCD = 0x1, unprogrammed default
  5209                           ;	PPSLOCK bit One-Way Set Enable bit
  5210                           ;	PPS1WAY = 0x1, unprogrammed default
  5211                           ;	Stack Full/Underflow Reset Enable bit
  5212                           ;	STVREN = 0x1, unprogrammed default
  5213                           ;	Debugger Enable bit
  5214                           ;	DEBUG = 0x1, unprogrammed default
  5215                           ;	Extended Instruction Set Enable bit
  5216                           ;	XINST = 0x1, unprogrammed default
  5217   300003                     	org	3145731
  5218   300003  FF                 	db	255
  5219                           
  5220                           ;Config register CONFIG3L @ 0x300004
  5221                           ;	WDT Period Select bits
  5222                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5223                           ;	WDT operating mode
  5224                           ;	WDTE = OFF, WDT Disabled
  5225   300004                     	org	3145732
  5226   300004  9F                 	db	159
  5227                           
  5228                           ;Config register CONFIG3H @ 0x300005
  5229                           ;	unspecified, using default values
  5230                           ;	WDT Window Select bits
  5231                           ;	WDTCWS = 0x7, unprogrammed default
  5232                           ;	WDT input clock selector
  5233                           ;	WDTCCS = 0x7, unprogrammed default
  5234   300005                     	org	3145733
  5235   300005  FF                 	db	255
  5236                           
  5237                           ;Config register CONFIG4L @ 0x300006
  5238                           ;	unspecified, using default values
  5239                           ;	Write Protection Block 0
  5240                           ;	WRT0 = 0x1, unprogrammed default
  5241                           ;	Write Protection Block 1
  5242                           ;	WRT1 = 0x1, unprogrammed default
  5243                           ;	Write Protection Block 2
  5244                           ;	WRT2 = 0x1, unprogrammed default
  5245                           ;	Write Protection Block 3
  5246                           ;	WRT3 = 0x1, unprogrammed default
  5247                           ;	Write Protection Block 3
  5248                           ;	WRT4 = 0x1, unprogrammed default
  5249                           ;	Write Protection Block 3
  5250                           ;	WRT5 = 0x1, unprogrammed default
  5251                           ;	Write Protection Block 3
  5252                           ;	WRT6 = 0x1, unprogrammed default
  5253                           ;	Write Protection Block 3
  5254                           ;	WRT7 = 0x1, unprogrammed default
  5255   300006                     	org	3145734
  5256   300006  FF                 	db	255
  5257                           
  5258                           ;Config register CONFIG4H @ 0x300007
  5259                           ;	unspecified, using default values
  5260                           ;	Configuration Register Write Protection bit
  5261                           ;	WRTC = 0x1, unprogrammed default
  5262                           ;	Boot Block Write Protection bit
  5263                           ;	WRTB = 0x1, unprogrammed default
  5264                           ;	Data EEPROM Write Protection bit
  5265                           ;	WRTD = 0x1, unprogrammed default
  5266                           ;	Scanner Enable bit
  5267                           ;	SCANE = 0x1, unprogrammed default
  5268                           ;	Low Voltage Programming Enable bit
  5269                           ;	LVP = 0x1, unprogrammed default
  5270   300007                     	org	3145735
  5271   300007  FF                 	db	255
  5272                           
  5273                           ;Config register CONFIG5L @ 0x300008
  5274                           ;	unspecified, using default values
  5275                           ;	UserNVM Program Memory Code Protection bit
  5276                           ;	CP = 0x1, unprogrammed default
  5277                           ;	DataNVM Memory Code Protection bit
  5278                           ;	CPD = 0x1, unprogrammed default
  5279   300008                     	org	3145736
  5280   300008  FF                 	db	255
  5281                           
  5282                           ;Config register CONFIG5H @ 0x300009
  5283                           ;	unspecified, using default values
  5284   300009                     	org	3145737
  5285   300009  FF                 	db	255
  5286                           
  5287                           ;Config register CONFIG6L @ 0x30000A
  5288                           ;	unspecified, using default values
  5289                           ;	Table Read Protection Block 0
  5290                           ;	EBTR0 = 0x1, unprogrammed default
  5291                           ;	Table Read Protection Block 1
  5292                           ;	EBTR1 = 0x1, unprogrammed default
  5293                           ;	Table Read Protection Block 2
  5294                           ;	EBTR2 = 0x1, unprogrammed default
  5295                           ;	Table Read Protection Block 3
  5296                           ;	EBTR3 = 0x1, unprogrammed default
  5297                           ;	Table Read Protection Block 4
  5298                           ;	EBTR4 = 0x1, unprogrammed default
  5299                           ;	Table Read Protection Block 5
  5300                           ;	EBTR5 = 0x1, unprogrammed default
  5301                           ;	Table Read Protection Block 6
  5302                           ;	EBTR6 = 0x1, unprogrammed default
  5303                           ;	Table Read Protection Block 7
  5304                           ;	EBTR7 = 0x1, unprogrammed default
  5305   30000A                     	org	3145738
  5306   30000A  FF                 	db	255
  5307                           
  5308                           ;Config register CONFIG6H @ 0x30000B
  5309                           ;	unspecified, using default values
  5310                           ;	Boot Block Table Read Protection bit
  5311                           ;	EBTRB = 0x1, unprogrammed default
  5312   30000B                     	org	3145739
  5313   30000B  FF                 	db	255
  5314                           tosu	equ	0xFFF
  5315                           tosh	equ	0xFFE
  5316                           tosl	equ	0xFFD
  5317                           stkptr	equ	0xFFC
  5318                           pclatu	equ	0xFFB
  5319                           pclath	equ	0xFFA
  5320                           pcl	equ	0xFF9
  5321                           tblptru	equ	0xFF8
  5322                           tblptrh	equ	0xFF7
  5323                           tblptrl	equ	0xFF6
  5324                           tablat	equ	0xFF5
  5325                           prodh	equ	0xFF4
  5326                           prodl	equ	0xFF3
  5327                           indf0	equ	0xFEF
  5328                           postinc0	equ	0xFEE
  5329                           postdec0	equ	0xFED
  5330                           preinc0	equ	0xFEC
  5331                           plusw0	equ	0xFEB
  5332                           fsr0h	equ	0xFEA
  5333                           fsr0l	equ	0xFE9
  5334                           wreg	equ	0xFE8
  5335                           indf1	equ	0xFE7
  5336                           postinc1	equ	0xFE6
  5337                           postdec1	equ	0xFE5
  5338                           preinc1	equ	0xFE4
  5339                           plusw1	equ	0xFE3
  5340                           fsr1h	equ	0xFE2
  5341                           fsr1l	equ	0xFE1
  5342                           bsr	equ	0xFE0
  5343                           indf2	equ	0xFDF
  5344                           postinc2	equ	0xFDE
  5345                           postdec2	equ	0xFDD
  5346                           preinc2	equ	0xFDC
  5347                           plusw2	equ	0xFDB
  5348                           fsr2h	equ	0xFDA
  5349                           fsr2l	equ	0xFD9
  5350                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        26
    BSS         186
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     91      94
    BANK0           160     32     121
    BANK1           256      0     120
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getHSVval@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    getHSVval@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1120DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1120DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2749$buffer	PTR unsigned char  size(2) Largest target is 0

    S2749$source	PTR const unsigned char  size(2) Largest target is 0

    sendHSVvalSerial4@col_val	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    sendRGBCvalSerial4@col_val	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 
		 -> STR_4(CODE[3]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sendRGBCvalSerial4
    _sendRGBCvalSerial4->_sprintf
    _sendHSVvalSerial4->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___lwmod
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _getHSVval->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   19141
                                             89 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                          _getHSVval
                         _getRGBCval
                    _initDCmotorsPWM
                         _initUSART4
                  _sendHSVvalSerial4
                 _sendRGBCvalSerial4
               _toggle_tricolour_LED
 ---------------------------------------------------------------------------------
 (1) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sendRGBCvalSerial4                                  27    26      1    6387
                                             62 COMRAM    27    26      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sendHSVvalSerial4                                   22    21      1    6365
                                             62 COMRAM    22    21      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    15     11    5726
                                             36 COMRAM    26    15     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    4901
                                             32 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           14    11      3    4549
                                             18 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     934
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     447
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _getHSVval                                           22    20      2    4532
                                             18 COMRAM    22    20      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _max
                                _min
 ---------------------------------------------------------------------------------
 (2) _min                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _max                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     409
                                             13 COMRAM     5     1      4
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4    1064
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _getHSVval
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul
     _max
     _min
   _getRGBCval
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendHSVvalSerial4
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           ___awdiv
           ___awmod
           ___lwdiv
           ___lwmod
           _abs
             ___awmod (ARG)
           _fputc
             _putch
   _sendRGBCvalSerial4
     _sendStringSerial4
     _sprintf
   _toggle_tricolour_LED

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      78       7       46.9%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      79       5       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5B      5E       1      100.0%
BITBIGSFRlllhhh     52      0       0      41        0.0%
BITBIGSFRlllhhh     37      0       0      43        0.0%
BITBIGSFRlllllh     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      46        0.0%
BITBIGSFRlllhhh     1E      0       0      48        0.0%
BITBIGSFRhhlll      1D      0       0      38        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      49        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      47        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllhhh      8      0       0      44        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      53        0.0%
BITBIGSFRlllllh      5      0       0      56        0.0%
BITBIGSFRllllhl      5      0       0      52        0.0%
BITBIGSFRlllllh      3      0       0      55        0.0%
BITBIGSFRlllllh      3      0       0      57        0.0%
BITBIGSFRllllhh      3      0       0      51        0.0%
BITBIGSFRlllhhh      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      50        0.0%
BITBIGSFRllh         1      0       0      40        0.0%
BITBIGSFRlhh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14F      61        0.0%
DATA                 0      0     14F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 07 15:51:58 2024

                 _turn180Delay 00C9                 _color_read_Red 1B3C                _color_read_Blue 1C2C  
              _trail_timer_low 0150                             l42 1638                             l27 1E9A  
                           l71 1B8A                             l80 1C2A                             l65 1E6C  
                           l74 1C7A                             l83 1B3A                             l68 1F56  
                           l93 1E28                             l77 1BDA                             l94 1E30  
                           l95 1E38                             l98 1DF4                             l99 1DFC  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003               _trail_timer_high 0164  
             _color_read_Clear 1BDC               _color_read_Green 1B8C                            l100 1E04  
                          l110 1148                            l183 18F6                            l281 1EC6  
                          l290 1FD4                            l284 1EEC                            l444 1F74  
                          l701 1FBE                            l293 1FDE                            l453 1F92  
                          l278 1EC4                            l462 1A30                            l287 1FE8  
                          l296 1FB2                            l456 1FA6                            l473 1A8E  
                          l299 1D9C                            l476 1CC6                            l692 1F36  
                          l758 1F12                            l698 1FCA                            l989 16FC  
                          _ISR 0008         ??_toggle_tricolour_LED 0001                            _abs 1D9E  
                          _max 1E06                            _min 1DD2                   ___awmod@sign 0006  
                          wreg 0FE8                    _squareDelay 00C5                           ?_ISR 0001  
                         l1002 1866                           ?_abs 0007                           l3001 19D4  
                         l3003 19FA                           l3011 1CDC                           l3005 19FE  
                         l1501 1DB8                           l3013 1CE4                           l3015 1CFC  
                         l3007 1CC8                           l1256 196A                           l1504 1DD0  
                         l3121 1FB4                           l1249 1962                           l3201 18C6  
                         l3017 1D0A                           l3009 1CD4                           l1266 19CE  
                         l1259 19C6                           l3123 1EEE                           l3211 18E8  
                         l3203 18D0                           l3131 1572                           l1516 17B6  
                         l1436 1D12                           l3141 1E62                           l3133 1E3A  
                         l3125 1F0A                           l3213 18EA                           l3205 18D2  
                         l3135 1E3E                           l3143 1AE6                           l3215 18F4  
                         l3207 18DC                           l1527 1FEA                           l3129 1E6E  
                         l3137 1E48                           l3161 0EE8                           l3153 0E1A  
                         l3209 18DE                           l3241 1F62                           l2601 17EC  
                         l3251 1F14                           l3139 1E58                           l3171 1008  
                         l3163 0F06                           l3155 0EBE                           l3243 1F64  
                         l2611 1832                           l2603 17FE                           l3261 1F2E  
                         l3253 1F1C                           l3181 10CC                           l3173 1024  
                         l3165 0F72                           l3157 0ECA                           l3245 1F6E  
                         l2621 185E                           l2613 183A                           l2605 1806  
                         l1477 12EC                           l1478 1454                           l3263 1F32  
                         l3255 1F1E                           l2631 191A                           l3191 1136  
                         l3183 10D4                           l3175 1046                           l3167 0F8E  
                         l3159 0EDC                           l3247 1F70                           l3239 1F58  
                         l2551 1654                           l2615 1840                           l2607 180E  
                         l3271 1C7C                           l3351 149C                           l1496 1ADC  
                         l3265 1F34                           l3257 1F28                           l2641 1954  
                         l2633 1922                           l2625 18F8                           l3185 10E6  
                         l3177 109E                           l3169 0FB0                           l3193 1868  
                         l3249 1F72                           l2561 167A                           l2553 1658  
                         l2545 163A                           l2609 181C                           l2617 1846  
                         l2801 1278                           l1497 1AE4                           l3273 1CBC  
                         l3361 14D0                           l3353 14A4                           l3259 1F2C  
                         l2643 1956                           l2635 1930                           l2627 1900  
                         l2651 1986                           l3187 1116                           l3179 10BA  
                         l3195 1878                           l2571 16B0                           l2563 168C  
                         l2555 1666                           l2547 163E                           l2619 1856  
                         l2811 12BE                           l2803 1288                           l3267 1A32  
                         l3371 14F4                           l3363 14D8                           l3355 14AC  
                         l2645 195C                           l2637 1936                           l2629 1912  
                         l2661 19C0                           l2653 198E                           l3189 1124  
                         l3197 189E                           l2573 16C6                           l2565 1694  
                         l2581 16DC                           l2557 166E                           l2549 164C  
                         l2821 1330                           l2813 12D8                           l2805 1298  
                         l3269 1A84                           l3381 14FE                           l3373 14F6  
                         l3365 14E8                           l3357 14C0                           l3349 1456  
                         l2639 194C                           l2655 199C                           l2647 196C  
                         l3199 18A2                           l2583 16EC                           l2575 16CE  
                         l2567 169C                           l2559 1672                           l2591 17BC  
                         l2671 1744                           l2663 16FE                           l2831 1386  
                         l2823 133E                           l2807 12A8                           l2815 12DA  
                         l3391 1536                           l3383 1500                           l3375 14F8  
                         l3367 14EC                           l3359 14C8                           l2657 19B2  
                         l2649 197E                           l2585 16F4                           l2577 16D0  
                         l2569 16AA                           l2593 17CA                           l2673 1776  
                         l2665 170E                           l2833 1398                           l2825 1342  
                         l2809 12B6                           l2817 12F8                           l3393 1542  
                         l3385 1504                           l3377 14FA                           l3369 14F0  
                         l2659 19BA                           l2579 16D6                           l2595 17D2  
                         l2667 171E                           l2835 13AC                           l2827 1366  
                         l2843 13DE                           l2819 1318                           l2851 1422  
                         l2771 114A                           l3395 154A                           l3387 152A  
                         l3379 14FC                           l2941 1FC2                           l2597 17D6  
                         l2589 17B8                           l2677 1D9E                           l2669 1728  
                         l2853 1444                           l2837 13C6                           l2829 1382  
                         l2845 140E                           l2781 1192                           l2773 1152  
                         l3397 1552                           l3389 152E                           l2943 1FC6  
                         l2767 1EC6                           l2871 1FAE                           l2599 17E4  
                         l2679 1DAC                           l2855 144C                           l2847 1416  
                         l2839 13C8                           l2791 11FE                           l2783 119C  
                         l2775 1178                           l2951 1ABC                           l2961 1EB0  
                         l2953 1E9C                           l2769 1ED6                           l2865 1FE0  
                         l2873 1FD6                           l2881 1D5E                           l2937 1F92  
                         l2793 1216                           l2785 11BC                           l2777 1180  
                         l2945 1A90                           l2963 1EB2                           l2955 1EA6  
                         l2867 1FE4                           l2875 1FDA                           l2891 1D9A  
                         l2883 1D62                           l2939 1FA2                           l2795 1246  
                         l2787 11DC                           l2779 118E                           l2947 1A94  
                         l2957 1EAC                           l2869 1FAA                           l2965 1F3A  
                         l2885 1D6A                           l2877 1FCC                           l2973 1C2C  
                         l2981 1BD2                           l2797 1262                           l2789 11F4  
                         l2949 1AA2                           ?_max 0001                           l2959 1EAE  
                         l2991 1E06                           l2887 1D72                           l2879 1FD0  
                         l2975 1C72                           l2967 1B3C                           l2799 1266  
                         l2993 1E1C                           l2889 1D98                           l2985 1BDC  
                         l2969 1B82                           l2995 1DD2                           l2987 1C22  
                         l2979 1B8C                           l3795 1400                           ?_min 0001  
                         l2997 1DE8                           l2999 19D0                           STR_1 0E0F  
                         STR_2 0E14                           STR_5 0E01                           STR_6 0E04  
                         u2000 0FB0                           u1200 1666                           u2001 0FAC  
                         u1201 1662                           u2010 1046                           u1210 168C  
                         u2011 1042                           u1211 1688                           u2020 10CC  
                         u1220 16AA                           u1300 1856                           u2100 1518  
                         u2021 10C8                           u1221 16A6                           u1301 1852  
                         u2101 1510                           u1310 1912                           u2030 10E6  
                         u1230 16C6                           u1311 190E                           u2031 10E2  
                         u1231 16C2                           u1320 1930                           u1240 16EC  
                         u1400 1776                           u1321 192C                           u1241 16E8  
                         u1401 1772                           u1330 194C                           u1250 17CA  
                         u1410 1DAC                           u1331 1948                           u1251 17C6  
                         u1411 1DA8                           u1340 197E                           u1260 17E4  
                         u1341 197A                           u1261 17E0                           u1350 199C  
                         u1190 164C                           u1270 17FE                           u2118 151A  
                         u1351 1998                           u1191 1648                           u1271 17FA  
                         u1360 19B2                           u1280 181C                           u1600 1178  
                 _BAUD4CONbits 0EE9                           u1361 19AE                           u1281 1818  
                         u1601 1174                           u1290 1832                           u1370 170E  
                         u1610 11BC                           u1291 182E                           u1371 170A  
                         u1611 11B8                           u1380 171E                           u1700 1318  
                         u1620 11DC                           u1381 171A                           u1701 1314  
                         u1621 11D8                           u1390 1744                           u1710 1398  
                         u1630 1212                           u1391 1740                           u1711 1394  
                         u1631 120C                           u1800 19F6                           u1720 13A8  
                         u1640 1214                           u1721 13A4                           u1810 1A20  
                         u1730 13DA                           u1650 1278                           _T2PR 0FBC  
                         u1731 13D6                           u1651 1274                           u1580 1ED6  
                         u1740 1D86                           u1820 1A30                           u1660 1288  
                         u1581 1ED2                           u1741 1D7E                           u1821 1A2C  
                         u1661 1284                           u1590 1EEC                           u1670 1298  
                         u1910 1604                           u1830 1584                           u1591 1EE8  
                         u1807 19EC                           u1671 1294                           u1911 15FC  
                         u1831 157C                           u1760 1FA2                           u1680 12A8  
                         u1761 1F9E                           u1817 1A16                           u1681 12A4  
                         u1690 12EC                           u1770 1ADC                           u1930 1626  
                         u1850 15A4                           u1691 12E8                           u1771 1AD8  
                         u1931 161E                           u1851 159C                           u1780 1E1C  
                         u1908 15E8                           u1781 1E18                           u1790 1DE8  
                         u1758 1D88                           u1870 15C4                           u1791 1DE4  
                         u1871 15BC                           u1928 1606                           u1848 1586  
                         u1890 15E6                           u1891 15DE                           u2587 155C  
                         u1980 0EDC                           u1948 1628                           u1868 15A6  
                         u2597 1E4E                           u1981 0ED8                           u1990 0F06  
                         u1991 0F02                           u1888 15C6                           abs@a 0007  
                         _dbuf 0060                           _main 1456                           _prec 0098  
                         _nout 0094                           fsr0h 0FEA                           fsr1h 0FE2  
                         indf0 0FEF                           fsr2h 0FDA                           fsr0l 0FE9  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         max@a 0001                           max@b 0003                           btemp 005F  
                         min@a 0001                           min@b 0003             _sendRGBCvalSerial4 1A32  
                         prodh 0FF4                           prodl 0FF3                           start 0038  
       __end_of_color_read_Red 1B8C                   ___param_bank 0000                          ??_ISR 0001  
          ?_sendRGBCvalSerial4 003F                          ??_abs 0009                  write_timer@tH 0002  
                write_timer@tL 0001                          ??_max 0005                          ??_min 0005  
                        ?_main 0001             _timer_high_pointer 00C3                __end_of___awdiv 16FE  
              __end_of___awmod 1868                ___awdiv@divisor 0003                __end_of___lwdiv 196C  
              __end_of___lwmod 19D0                          i2l727 0030                          i2l728 0034  
              ___awdiv@counter 0005                   vfpfcnvrt@cnt 0019                   vfpfcnvrt@fmt 0014  
                        _TMR0H 0FD4                          _TMR0L 0FD3        __end_of_sendCharSerial4 1FA8  
   __end_of_I2C_2_Master_Start 1FEA                    _write_timer 1FC0     __end_of_I2C_2_Master_Write 1FB4  
                  _turningGear 00D5                          _flags 009A           ??_sendRGBCvalSerial4 0040  
                        _fputc 16FE                          _width 0096                          _putch 1FEA  
            _turnRight135Delay 00CB                          tablat 0FF5                _turnLeft90Delay 00D1  
                        ttemp5 0060                          ttemp6 0063                          ttemp7 0067  
                        status 0FD8                          wtemp8 0060                __end_of_sprintf 1D14  
          getHSVval@saturation 001F        __end_of_color_read_Blue 1C7C          _I2C_2_Master_RepStart 1FCC  
              ?_color_read_Red 0005                __initialization 1D14                   __end_of_main 1572  
                       ??_main 005A                  __activetblptr 0003                 _getHSVval$3203 001B  
               _getHSVval$3204 001D                 _getHSVval$3205 0023                         ?_fputc 0001  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0001                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       _RD5PPS 0E6F                         _RC7PPS 0E69                         _RD6PPS 0E70  
                       _RE4PPS 0E76                         i2l3481 002C                         i2l3477 000A  
                       i2l3479 001A                         _RG6PPS 0E88                  vfpfcnvrt@done 0018  
     __end_of_color_click_init 1E6E                         _RX4PPS 0E15                         _TX4REG 0EE4  
             _turnLeft135Delay 00CD                  ??_Timer0_init 0003                   ?_reset_timer 0001  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0024                         ___wmul 1EEE  
                    ??___awdiv 0005                      ??___awmod 0005                      ??___lwdiv 000B  
                    ??___lwmod 0012                         clear_0 1D3A                         clear_1 1D46  
             ___awdiv@quotient 0007                ___awmod@divisor 0003                         isa$std 0001  
              ___awmod@counter 0005                         fputc@c 0001              _timer_low_pointer 00C1  
                 __mediumconst 0000                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8               ?_sendCharSerial4 0001                         putch@c 0001  
             __end_of_vfprintf 1AE6              ??_initDCmotorsPWM 0003                      ??_sprintf 0030  
            _buggy_lights_init 1E6E                     __accesstop 0060        __end_of__initialization 1D52  
     __end_of_color_read_Clear 1C2C       __end_of_color_read_Green 1BDC         ?_I2C_2_Master_RepStart 0001  
           ?_buggy_lights_init 0001                  ___rparam_used 0001               ?_color_read_Blue 0005  
               __pcstackCOMRAM 0001                   __pidataBANK0 1F76            ??_buggy_lights_init 0001  
                __end_of_fputc 17B8                  __end_of_putch 1FEC            __end_of_Timer0_init 1F38  
                      ??_fputc 0004      __end_of_buggy_lights_init 1E9C                        ??_putch 0001  
                   __pbssBANK0 0060                     __pbssBANK1 0100                     _getRGBCval 1AE6  
            _color_writetoaddr 1F38                   _T2CLKCONbits 0FBF             ?_color_writetoaddr 0003  
                      ?___wmul 0001            ??_color_writetoaddr 0004                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5                   ?_write_timer 0001                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5              __end_of_getHSVval 114A         color_writetoaddr@value 0003  
             ??_color_read_Red 0007      __end_of_color_writetoaddr 1F58             _I2C_2_Master_Start 1FE0  
                   _initUSART4 1F58             _I2C_2_Master_Write 1FA8                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000A                    _Timer0_init 1F14  
      sendStringSerial4@string 0002                        ___awdiv 163A                        ___awmod 17B8  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 18F8            ?_I2C_2_Master_Write 0001  
                      ___lwmod 196C                      ?_vfprintf 0021                   __psmallconst 0E00  
                      __pcinit 1D14                        __ramtop 0E00                        __ptext0 1456  
                      __ptext1 1572                        __ptext2 1A32                        __ptext3 1C7C  
                      __ptext4 1CC8                        __ptext5 1A90                        __ptext6 114A  
                      __ptext7 16FE                        __ptext8 1FEA                        __ptext9 1D9E  
                    _T2CONbits 0FBD               ___awmod@dividend 0001                      _T2HLTbits 0FBE  
                _RxBufWriteCnt 005E                        _sprintf 1CC8           ??_I2C_2_Master_Start 0002  
         ??_I2C_2_Master_Write 0002           end_of_initialization 1D52              _sendHSVvalSerial4 1C7C  
                  ?_getRGBCval 000C                        fputc@fp 0003              ?_color_click_init 0001  
           ?_sendHSVvalSerial4 003F             ??_color_click_init 0005              __end_of_vfpfcnvrt 1456  
          ??_sendHSVvalSerial4 0040                        postdec1 0FE5                        postdec2 0FDD  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 001C                     ??_vfprintf 0024                _initDCmotorsPWM 1868  
                    _TRISAbits 0F81                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
                    _TRISHbits 0F88      __end_of_sendHSVvalSerial4 1CC8       color_writetoaddr@address 0004  
      ??_I2C_2_Master_RepStart 0002                    _CCP1CONbits 0FAB              ?_color_read_Clear 0005  
                 _EUSART4RXbuf 0080                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0005                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001                     main@motorL 00A5  
                   main@motorR 00AE             ??_color_read_Clear 0007             ??_color_read_Green 0007  
                   max@max_val 0005                    vfpfcnvrt@ap 0015                    vfpfcnvrt@cp 001B  
                  vfpfcnvrt@fp 0013                 __end_of___wmul 1F14      sendRGBCvalSerial4@col_val 003F  
     sendHSVvalSerial4@col_val 003F                     min@min_val 0005            color_read_Clear@tmp 000A  
          start_initialization 1D14                    __end_of_ISR 0038                    __end_of_abs 1DD2  
                  __end_of_max 1E3A                    __end_of_min 1E06                  _TxBufWriteCnt 005D  
             _turnRight90Delay 00CF      sendRGBCvalSerial4@tempStr 0040       sendHSVvalSerial4@tempStr 0040  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 18F8                    vfprintf@fmt 0022  
                     ??___wmul 0005                    __pdataBANK0 00BF                    __pbssCOMRAM 005C  
                __pcstackBANK0 009F                 _wall_threshold 00D3   __end_of_toggle_tricolour_LED 163A  
                    _getHSVval 0E1A               ___lwdiv@dividend 0007                   ?_Timer0_init 0001  
                    __pintcode 0008                       ?___awdiv 0001                       ?___awmod 0001  
                     ?___lwdiv 0007                       ?___lwmod 000E           I2C_2_Master_Read@ack 0003  
         I2C_2_Master_Read@tmp 0004                    __smallconst 0E00              _I2C_2_Master_Idle 1EC6  
            _I2C_2_Master_Init 1E9C              _I2C_2_Master_Read 1D5C              _I2C_2_Master_Stop 1FD6  
                 _RxBufReadCnt 009E             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
                _headbuttDelay 00C7       initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 0025  
                    _rampDelay 00D8                   ??_getRGBCval 000D              _sendStringSerial4 19D0  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
                     _PIE0bits 0E29             ?_sendStringSerial4 0002                       _PIE4bits 0E2D  
                 getHSVval@hue 0021                     ?_getHSVval 0013                  ??_reset_timer 0003  
                     i2u220_40 002C                       i2u220_41 0028                       i2u219_40 001A  
                     i2u219_41 0016                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0001              ??_sendCharSerial4 0001                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0004                       _SSP2STAT 0ED8                      _returning 009D  
                    _vfpfcnvrt 114A      __end_of_I2C_2_Master_Idle 1EEE      __end_of_I2C_2_Master_Init 1EC6  
    __end_of_I2C_2_Master_Read 1D9E              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 1FE0  
  I2C_2_Master_Write@data_byte 0002             __end_of_getRGBCval 1B3C     __end_of_sendRGBCvalSerial4 1A90  
            ??_color_read_Blue 0007                   _TxBufReadCnt 005C                     vfpfcnvrt@c 0020  
                    copy_data0 1D28      __end_of_sendStringSerial4 1A32  __end_of_I2C_2_Master_RepStart 1FD6  
           color_read_Blue@tmp 000A                   ??_initUSART4 0001                       __Hrparam 0000  
                   vfprintf@ap 0023                       __Lrparam 0000                     vfprintf@fp 0021  
              getHSVval@maxRGB 0027                getHSVval@minRGB 0019                     ?_vfpfcnvrt 0013  
          __end_of_reset_timer 1FC0                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                   sprintf@fmt 0027                     sprintf@ret 0030                     _T0CON0bits 0FD5  
                   _T0CON1bits 0FD6           _toggle_tricolour_LED 1572                ___lwdiv@divisor 0009  
           __end_of_initUSART4 1F76                ___lwdiv@counter 000D                       __ptext10 17B8  
                     __ptext11 163A                       __ptext20 1C2C                       __ptext12 19D0  
                     __ptext21 1FCC                       __ptext13 1F90                       __ptext30 1F38  
                     __ptext22 1D5C                       __ptext14 1F58                       __ptext31 1FA8  
                     __ptext23 0E1A                       __ptext15 1868                       __ptext32 1FD6  
                     __ptext24 1DD2                       __ptext16 1AE6                       __ptext33 1FE0  
                     __ptext25 1E06                       __ptext17 1B3C                       __ptext34 1EC6  
                     __ptext26 1EEE                       __ptext18 1B8C                       __ptext35 1E9C  
                     __ptext27 196C                       __ptext19 1BDC                       __ptext36 1E6E  
                     __ptext28 18F8                       __ptext37 1F14                       __ptext29 1E3A  
                     __ptext38 1FB4                       __ptext39 1FC0                    getRGBCval@p 000C  
          main@measured_colour 00B7                   _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA  
                  ??_getHSVval 0015                    getHSVval@p1 0013                    getHSVval@p2 0014  
                     isa$xinst 0000                     _RC4STAbits 0EE7                       int$flags 005F  
                     _vfprintf 1A90                     _INTCONbits 0FF2          ?_toggle_tricolour_LED 0001  
                ??_write_timer 0002                 getHSVval@range 0025                       intlevel2 0000  
                    sprintf@ap 0032                   _topGearRight 00D6              _manoeuvre_pointer 00BF  
             ___lwmod@dividend 000E                 main@HSV_colour 009F                    _reset_timer 1FB4  
                  ??_vfpfcnvrt 0016               _color_click_init 1E3A                    _topGearLeft 00D7  
                     sprintf@f 0033                       sprintf@s 0025                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C                ___lwmod@divisor 0010                ___lwmod@counter 0012  
              _trail_manoeuvre 013C                    _return_flag 009C                _manoeuvre_count 009B  
                   _TX4STAbits 0EE8                _sendCharSerial4 1F90            __end_of_write_timer 1FCC  
