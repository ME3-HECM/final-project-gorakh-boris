

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Feb 26 14:30:14 2024

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 05/05/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F67K40 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     
    52                           	psect	idataCOMRAM
    53  01FE2D                     __pidataCOMRAM:
    54                           	callstack 0
    55                           
    56                           ;initializer for _turn180Delay
    57  01FE2D  01FE               	dw	510
    58                           
    59                           ;initializer for _turnRight135Delay
    60  01FE2F  012C               	dw	300
    61                           
    62                           ;initializer for _turnLeft135Delay
    63  01FE31  012C               	dw	300
    64                           
    65                           ;initializer for _turnRight90Delay
    66  01FE33  00AF               	dw	175
    67                           
    68                           ;initializer for _turnLeft90Delay
    69  01FE35  00AF               	dw	175
    70                           
    71                           ;initializer for _turningGear
    72  01FE37  2A                 	db	42
    73                           
    74                           ;initializer for _topAdjustSide
    75  01FE38  01                 	db	1
    76                           
    77                           ;initializer for _topAdjustPower
    78  01FE39  02                 	db	2
    79                           
    80                           ;initializer for _topGear
    81  01FE3A  1E                 	db	30
    82                           
    83                           ;initializer for _rampDelay
    84  01FE3B  08                 	db	8
    85  0000                     _SSP2BUF	set	3797
    86  0000                     _SSP2CON2bits	set	3802
    87  0000                     _SSP2CON2	set	3802
    88  0000                     _SSP2STAT	set	3800
    89  0000                     _RD6PPS	set	3696
    90  0000                     _RD5PPS	set	3695
    91  0000                     _SSP2CLKPPS	set	3612
    92  0000                     _SSP2DATPPS	set	3613
    93  0000                     _ANSELDbits	set	3751
    94  0000                     _SSP2ADD	set	3798
    95  0000                     _SSP2CON1bits	set	3801
    96  0000                     _RG6PPS	set	3720
    97  0000                     _RC7PPS	set	3689
    98  0000                     _RE4PPS	set	3702
    99  0000                     _RE2PPS	set	3700
   100  0000                     _CCP4CONbits	set	3874
   101  0000                     _CCP3CONbits	set	3878
   102  0000                     _CCPR4H	set	3873
   103  0000                     _CCPR3H	set	3877
   104  0000                     _CCP2CONbits	set	4007
   105  0000                     _CCP1CONbits	set	4011
   106  0000                     _CCPTMRS0bits	set	4013
   107  0000                     _T2PR	set	4028
   108  0000                     _T2CLKCONbits	set	4031
   109  0000                     _T2HLTbits	set	4030
   110  0000                     _T2CONbits	set	4029
   111  0000                     _LATGbits	set	3967
   112  0000                     _LATCbits	set	3963
   113  0000                     _LATEbits	set	3965
   114  0000                     _TRISGbits	set	3975
   115  0000                     _TRISCbits	set	3971
   116  0000                     _TRISEbits	set	3973
   117  0000                     _LATFbits	set	3966
   118  0000                     _LATHbits	set	3968
   119  0000                     _LATDbits	set	3964
   120  0000                     _TRISFbits	set	3974
   121  0000                     _TRISHbits	set	3976
   122  0000                     _TRISDbits	set	3972
   123  0000                     _CCPR2H	set	4006
   124  0000                     _CCPR1H	set	4010
   125                           
   126                           ; #config settings
   127                           
   128                           	psect	cinit
   129  01FE52                     __pcinit:
   130                           	callstack 0
   131  01FE52                     start_initialization:
   132                           	callstack 0
   133  01FE52                     __initialization:
   134                           	callstack 0
   135                           
   136                           ; Initialize objects allocated to COMRAM (15 bytes)
   137                           ; load TBLPTR registers with __pidataCOMRAM
   138  01FE52  0E2D               	movlw	low __pidataCOMRAM
   139  01FE54  6EF6               	movwf	tblptrl,c
   140  01FE56  0EFE               	movlw	high __pidataCOMRAM
   141  01FE58  6EF7               	movwf	tblptrh,c
   142  01FE5A  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
   143  01FE5C  6EF8               	movwf	tblptru,c
   144  01FE5E  EE00  F017         	lfsr	0,__pdataCOMRAM
   145  01FE62  EE10 F00F          	lfsr	1,15
   146  01FE66                     copy_data0:
   147  01FE66  0009               	tblrd		*+
   148  01FE68  CFF5 FFEE          	movff	tablat,postinc0
   149  01FE6C  50E5               	movf	postdec1,w,c
   150  01FE6E  50E1               	movf	fsr1l,w,c
   151  01FE70  E1FA               	bnz	copy_data0
   152  01FE72                     end_of_initialization:
   153                           	callstack 0
   154  01FE72                     __end_of__initialization:
   155                           	callstack 0
   156  01FE72  0100               	movlb	0
   157  01FE74  EF84  F0FF         	goto	_main	;jump to C main() function
   158                           
   159                           	psect	dataCOMRAM
   160  000017                     __pdataCOMRAM:
   161                           	callstack 0
   162  000017                     _turn180Delay:
   163                           	callstack 0
   164  000017                     	ds	2
   165  000019                     _turnRight135Delay:
   166                           	callstack 0
   167  000019                     	ds	2
   168  00001B                     _turnLeft135Delay:
   169                           	callstack 0
   170  00001B                     	ds	2
   171  00001D                     _turnRight90Delay:
   172                           	callstack 0
   173  00001D                     	ds	2
   174  00001F                     _turnLeft90Delay:
   175                           	callstack 0
   176  00001F                     	ds	2
   177  000021                     _turningGear:
   178                           	callstack 0
   179  000021                     	ds	1
   180  000022                     _topAdjustSide:
   181                           	callstack 0
   182  000022                     	ds	1
   183  000023                     _topAdjustPower:
   184                           	callstack 0
   185  000023                     	ds	1
   186  000024                     _topGear:
   187                           	callstack 0
   188  000024                     	ds	1
   189  000025                     _rampDelay:
   190                           	callstack 0
   191  000025                     	ds	1
   192                           
   193                           	psect	cstackCOMRAM
   194  000001                     __pcstackCOMRAM:
   195                           	callstack 0
   196  000001                     initDCmotorsPWM@PWMperiod:
   197                           	callstack 0
   198                           
   199                           ; 2 bytes @ 0x0
   200  000001                     	ds	2
   201  000003                     ??_main:
   202                           
   203                           ; 1 bytes @ 0x2
   204  000003                     	ds	2
   205  000005                     main@motorL:
   206                           	callstack 0
   207                           
   208                           ; 9 bytes @ 0x4
   209  000005                     	ds	9
   210  00000E                     main@motorR:
   211                           	callstack 0
   212                           
   213                           ; 9 bytes @ 0xD
   214  00000E                     	ds	9
   215                           
   216 ;;
   217 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   218 ;;
   219 ;; *************** function _main *****************
   220 ;; Defined at:
   221 ;;		line 23 in file "main.c"
   222 ;; Parameters:    Size  Location     Type
   223 ;;		None
   224 ;; Auto vars:     Size  Location     Type
   225 ;;  motorR          9   13[COMRAM] struct DC_motor
   226 ;;  motorL          9    4[COMRAM] struct DC_motor
   227 ;;  PWMcycle        2    0        unsigned int 
   228 ;; Return value:  Size  Location     Type
   229 ;;                  1    wreg      void 
   230 ;; Registers used:
   231 ;;		wreg, status,2, status,0, cstack
   232 ;; Tracked objects:
   233 ;;		On entry : 0/0
   234 ;;		On exit  : 0/0
   235 ;;		Unchanged: 0/0
   236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   238 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   239 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   240 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   241 ;;Total ram usage:       20 bytes
   242 ;; Hardware stack levels required when called: 1
   243 ;; This function calls:
   244 ;;		_buggy_lights_init
   245 ;;		_initDCmotorsPWM
   246 ;; This function is called by:
   247 ;;		Startup code after reset
   248 ;; This function uses a non-reentrant model
   249 ;;
   250                           
   251                           	psect	text0
   252  01FF08                     __ptext0:
   253                           	callstack 0
   254  01FF08                     _main:
   255                           	callstack 30
   256  01FF08                     
   257                           ;main.c: 25:     initDCmotorsPWM(PWMcycle);
   258  01FF08  0E00               	movlw	0
   259  01FF0A  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   260  01FF0C  0E63               	movlw	99
   261  01FF0E  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   262  01FF10  EC3C  F0FF         	call	_initDCmotorsPWM	;wreg free
   263  01FF14                     
   264                           ;main.c: 27:     struct DC_motor motorL, motorR;;main.c: 29:     motorL.power = 0;
   265  01FF14  0E00               	movlw	0
   266  01FF16  6E05               	movwf	main@motorL^0,c
   267  01FF18                     
   268                           ;main.c: 30:     motorL.direction = 1;
   269  01FF18  0E01               	movlw	1
   270  01FF1A  6E06               	movwf	(main@motorL+1)^0,c
   271  01FF1C                     
   272                           ;main.c: 31:     motorL.brakemode = 1;
   273  01FF1C  0E01               	movlw	1
   274  01FF1E  6E07               	movwf	(main@motorL+2)^0,c
   275  01FF20                     
   276                           ;main.c: 32:     motorL.PWMperiod = PWMcycle;
   277  01FF20  0E00               	movlw	0
   278  01FF22  6E09               	movwf	(main@motorL+4)^0,c
   279  01FF24  0E63               	movlw	99
   280  01FF26  6E08               	movwf	(main@motorL+3)^0,c
   281  01FF28                     
   282                           ;main.c: 33:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   283  01FF28  0EAA               	movlw	170
   284  01FF2A  6E0A               	movwf	(main@motorL+5)^0,c
   285  01FF2C  0E0F               	movlw	15
   286  01FF2E  6E0B               	movwf	(main@motorL+6)^0,c
   287  01FF30                     
   288                           ;main.c: 34:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   289  01FF30  0EA6               	movlw	166
   290  01FF32  6E0C               	movwf	(main@motorL+7)^0,c
   291  01FF34  0E0F               	movlw	15
   292  01FF36  6E0D               	movwf	(main@motorL+8)^0,c
   293  01FF38                     
   294                           ;main.c: 36:     motorR.power = 0;
   295  01FF38  0E00               	movlw	0
   296  01FF3A  6E0E               	movwf	main@motorR^0,c
   297  01FF3C                     
   298                           ;main.c: 37:     motorR.direction = 1;
   299  01FF3C  0E01               	movlw	1
   300  01FF3E  6E0F               	movwf	(main@motorR+1)^0,c
   301  01FF40                     
   302                           ;main.c: 38:     motorR.brakemode = 1;
   303  01FF40  0E01               	movlw	1
   304  01FF42  6E10               	movwf	(main@motorR+2)^0,c
   305  01FF44                     
   306                           ;main.c: 39:     motorR.PWMperiod = PWMcycle;
   307  01FF44  0E00               	movlw	0
   308  01FF46  6E12               	movwf	(main@motorR+4)^0,c
   309  01FF48  0E63               	movlw	99
   310  01FF4A  6E11               	movwf	(main@motorR+3)^0,c
   311  01FF4C                     
   312                           ;main.c: 40:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   313  01FF4C  0E25               	movlw	37
   314  01FF4E  6E13               	movwf	(main@motorR+5)^0,c
   315  01FF50  0E0F               	movlw	15
   316  01FF52  6E14               	movwf	(main@motorR+6)^0,c
   317  01FF54                     
   318                           ;main.c: 41:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   319  01FF54  0E21               	movlw	33
   320  01FF56  6E15               	movwf	(main@motorR+7)^0,c
   321  01FF58  0E0F               	movlw	15
   322  01FF5A  6E16               	movwf	(main@motorR+8)^0,c
   323                           
   324                           ;main.c: 43:     buggy_lights_init();
   325  01FF5C  EC1E  F0FF         	call	_buggy_lights_init	;wreg free
   326  01FF60                     l1178:
   327                           
   328                           ;main.c: 47:         LATDbits.LATD4 = !LATDbits.LATD4;
   329  01FF60  A87C               	btfss	124,4,c	;volatile
   330  01FF62  EFB5  F0FF         	goto	u221
   331  01FF66  EFB9  F0FF         	goto	u220
   332  01FF6A                     u221:
   333  01FF6A  6A03               	clrf	??_main^0,c
   334  01FF6C  2A03               	incf	??_main^0,f,c
   335  01FF6E  EFBA  F0FF         	goto	u238
   336  01FF72                     u220:
   337  01FF72  6A03               	clrf	??_main^0,c
   338  01FF74                     u238:
   339  01FF74  3A03               	swapf	??_main^0,f,c
   340  01FF76  507C               	movf	124,w,c	;volatile
   341  01FF78  1803               	xorwf	??_main^0,w,c
   342  01FF7A  0BEF               	andlw	-17
   343  01FF7C  1803               	xorwf	??_main^0,w,c
   344  01FF7E  6E7C               	movwf	124,c	;volatile
   345  01FF80                     
   346                           ;main.c: 48:         LATDbits.LATD3 = !LATDbits.LATD3;
   347  01FF80  A67C               	btfss	124,3,c	;volatile
   348  01FF82  EFC5  F0FF         	goto	u241
   349  01FF86  EFC9  F0FF         	goto	u240
   350  01FF8A                     u241:
   351  01FF8A  6A03               	clrf	??_main^0,c
   352  01FF8C  2A03               	incf	??_main^0,f,c
   353  01FF8E  EFCA  F0FF         	goto	u258
   354  01FF92                     u240:
   355  01FF92  6A03               	clrf	??_main^0,c
   356  01FF94                     u258:
   357  01FF94  4603               	rlncf	??_main^0,f,c
   358  01FF96  4603               	rlncf	??_main^0,f,c
   359  01FF98  4603               	rlncf	??_main^0,f,c
   360  01FF9A  507C               	movf	124,w,c	;volatile
   361  01FF9C  1803               	xorwf	??_main^0,w,c
   362  01FF9E  0BF7               	andlw	-9
   363  01FFA0  1803               	xorwf	??_main^0,w,c
   364  01FFA2  6E7C               	movwf	124,c	;volatile
   365  01FFA4                     
   366                           ;main.c: 49:         _delay((unsigned long)((500)*(64000000/4000.0)));
   367  01FFA4  0E29               	movlw	41
   368  01FFA6  6E04               	movwf	(??_main+1)^0,c
   369  01FFA8  0E96               	movlw	150
   370  01FFAA  6E03               	movwf	??_main^0,c
   371  01FFAC  0E7F               	movlw	127
   372  01FFAE                     u307:
   373  01FFAE  2EE8               	decfsz	wreg,f,c
   374  01FFB0  D7FE               	bra	u307
   375  01FFB2  2E03               	decfsz	??_main^0,f,c
   376  01FFB4  D7FC               	bra	u307
   377  01FFB6  2E04               	decfsz	(??_main+1)^0,f,c
   378  01FFB8  D7FA               	bra	u307
   379  01FFBA  F000               	nop	
   380  01FFBC                     
   381                           ;main.c: 50:         LATFbits.LATF0 = !LATFbits.LATF0;
   382  01FFBC  A07E               	btfss	126,0,c	;volatile
   383  01FFBE  EFE3  F0FF         	goto	u261
   384  01FFC2  EFE7  F0FF         	goto	u260
   385  01FFC6                     u261:
   386  01FFC6  6A03               	clrf	??_main^0,c
   387  01FFC8  2A03               	incf	??_main^0,f,c
   388  01FFCA  EFE8  F0FF         	goto	u278
   389  01FFCE                     u260:
   390  01FFCE  6A03               	clrf	??_main^0,c
   391  01FFD0                     u278:
   392  01FFD0  507E               	movf	126,w,c	;volatile
   393  01FFD2  1803               	xorwf	??_main^0,w,c
   394  01FFD4  0BFE               	andlw	-2
   395  01FFD6  1803               	xorwf	??_main^0,w,c
   396  01FFD8  6E7E               	movwf	126,c	;volatile
   397  01FFDA                     
   398                           ;main.c: 51:         LATHbits.LATH0 = !LATHbits.LATH0;
   399  01FFDA  A080               	btfss	128,0,c	;volatile
   400  01FFDC  EFF2  F0FF         	goto	u281
   401  01FFE0  EFF6  F0FF         	goto	u280
   402  01FFE4                     u281:
   403  01FFE4  6A03               	clrf	??_main^0,c
   404  01FFE6  2A03               	incf	??_main^0,f,c
   405  01FFE8  EFF7  F0FF         	goto	u298
   406  01FFEC                     u280:
   407  01FFEC  6A03               	clrf	??_main^0,c
   408  01FFEE                     u298:
   409  01FFEE  5080               	movf	128,w,c	;volatile
   410  01FFF0  1803               	xorwf	??_main^0,w,c
   411  01FFF2  0BFE               	andlw	-2
   412  01FFF4  1803               	xorwf	??_main^0,w,c
   413  01FFF6  6E80               	movwf	128,c	;volatile
   414  01FFF8  EFB0  F0FF         	goto	l1178
   415  01FFFC  EF00  F000         	goto	start
   416  020000                     __end_of_main:
   417                           	callstack 0
   418                           
   419 ;; *************** function _initDCmotorsPWM *****************
   420 ;; Defined at:
   421 ;;		line 5 in file "dc_motor.c"
   422 ;; Parameters:    Size  Location     Type
   423 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   424 ;; Auto vars:     Size  Location     Type
   425 ;;		None
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1    wreg      void 
   428 ;; Registers used:
   429 ;;		wreg, status,2
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   435 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   438 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   439 ;;Total ram usage:        2 bytes
   440 ;; Hardware stack levels used: 1
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_main
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           	psect	text1
   449  01FE78                     __ptext1:
   450                           	callstack 0
   451  01FE78                     _initDCmotorsPWM:
   452                           	callstack 30
   453  01FE78                     
   454                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   455  01FE78  9485               	bcf	133,2,c	;volatile
   456                           
   457                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   458  01FE7A  9885               	bcf	133,4,c	;volatile
   459                           
   460                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   461  01FE7C  9E83               	bcf	131,7,c	;volatile
   462                           
   463                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   464  01FE7E  9C87               	bcf	135,6,c	;volatile
   465                           
   466                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   467  01FE80  947D               	bcf	125,2,c	;volatile
   468                           
   469                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   470  01FE82  987D               	bcf	125,4,c	;volatile
   471                           
   472                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   473  01FE84  9E7B               	bcf	123,7,c	;volatile
   474                           
   475                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   476  01FE86  9C7F               	bcf	127,6,c	;volatile
   477  01FE88                     
   478                           ;dc_motor.c: 18:     RE2PPS=0x05;
   479  01FE88  0E05               	movlw	5
   480  01FE8A  010E               	movlb	14	; () banked
   481  01FE8C  6F74               	movwf	116,b	;volatile
   482                           
   483                           ;dc_motor.c: 19:     RE4PPS=0x06;
   484  01FE8E  0E06               	movlw	6
   485  01FE90  6F76               	movwf	118,b	;volatile
   486                           
   487                           ;dc_motor.c: 20:     RC7PPS=0x07;
   488  01FE92  0E07               	movlw	7
   489  01FE94  6F69               	movwf	105,b	;volatile
   490                           
   491                           ;dc_motor.c: 21:     RG6PPS=0x08;
   492  01FE96  0E08               	movlw	8
   493  01FE98  6F88               	movwf	136,b	;volatile
   494                           
   495                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   496  01FE9A  50BD               	movf	189,w,c	;volatile
   497  01FE9C  0B8F               	andlw	-113
   498  01FE9E  0940               	iorlw	64
   499  01FEA0  6EBD               	movwf	189,c	;volatile
   500                           
   501                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   502  01FEA2  0EE0               	movlw	-32
   503  01FEA4  16BE               	andwf	190,f,c	;volatile
   504                           
   505                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   506  01FEA6  50BF               	movf	191,w,c	;volatile
   507  01FEA8  0BF0               	andlw	-16
   508  01FEAA  0901               	iorlw	1
   509  01FEAC  6EBF               	movwf	191,c	;volatile
   510  01FEAE                     
   511                           ; BSR set to: 14
   512                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   513  01FEAE  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   514  01FEB2                     
   515                           ; BSR set to: 14
   516                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   517  01FEB2  8EBD               	bsf	189,7,c	;volatile
   518                           
   519                           ;dc_motor.c: 35:     CCPR1H=0;
   520  01FEB4  0E00               	movlw	0
   521  01FEB6  6EAA               	movwf	170,c	;volatile
   522                           
   523                           ;dc_motor.c: 36:     CCPR2H=0;
   524  01FEB8  0E00               	movlw	0
   525  01FEBA  6EA6               	movwf	166,c	;volatile
   526                           
   527                           ;dc_motor.c: 37:     CCPR3H=0;
   528  01FEBC  0E00               	movlw	0
   529  01FEBE  010F               	movlb	15	; () banked
   530  01FEC0  6F25               	movwf	37,b	;volatile
   531                           
   532                           ;dc_motor.c: 38:     CCPR4H=0;
   533  01FEC2  0E00               	movlw	0
   534  01FEC4  6F21               	movwf	33,b	;volatile
   535                           
   536                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   537  01FEC6  0EFC               	movlw	-4
   538  01FEC8  16AD               	andwf	173,f,c	;volatile
   539                           
   540                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   541  01FECA  0EF3               	movlw	-13
   542  01FECC  16AD               	andwf	173,f,c	;volatile
   543                           
   544                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   545  01FECE  0ECF               	movlw	-49
   546  01FED0  16AD               	andwf	173,f,c	;volatile
   547                           
   548                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   549  01FED2  0E3F               	movlw	-193
   550  01FED4  16AD               	andwf	173,f,c	;volatile
   551  01FED6                     
   552                           ; BSR set to: 15
   553                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   554  01FED6  88AB               	bsf	171,4,c	;volatile
   555                           
   556                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   557  01FED8  50AB               	movf	171,w,c	;volatile
   558  01FEDA  0BF0               	andlw	-16
   559  01FEDC  090C               	iorlw	12
   560  01FEDE  6EAB               	movwf	171,c	;volatile
   561  01FEE0                     
   562                           ; BSR set to: 15
   563                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   564  01FEE0  8EAB               	bsf	171,7,c	;volatile
   565  01FEE2                     
   566                           ; BSR set to: 15
   567                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   568  01FEE2  88A7               	bsf	167,4,c	;volatile
   569                           
   570                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   571  01FEE4  50A7               	movf	167,w,c	;volatile
   572  01FEE6  0BF0               	andlw	-16
   573  01FEE8  090C               	iorlw	12
   574  01FEEA  6EA7               	movwf	167,c	;volatile
   575  01FEEC                     
   576                           ; BSR set to: 15
   577                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   578  01FEEC  8EA7               	bsf	167,7,c	;volatile
   579  01FEEE                     
   580                           ; BSR set to: 15
   581                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   582  01FEEE  8926               	bsf	38,4,b	;volatile
   583                           
   584                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   585  01FEF0  5126               	movf	38,w,b	;volatile
   586  01FEF2  0BF0               	andlw	-16
   587  01FEF4  090C               	iorlw	12
   588  01FEF6  6F26               	movwf	38,b	;volatile
   589  01FEF8                     
   590                           ; BSR set to: 15
   591                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   592  01FEF8  8F26               	bsf	38,7,b	;volatile
   593  01FEFA                     
   594                           ; BSR set to: 15
   595                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   596  01FEFA  8922               	bsf	34,4,b	;volatile
   597                           
   598                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   599  01FEFC  5122               	movf	34,w,b	;volatile
   600  01FEFE  0BF0               	andlw	-16
   601  01FF00  090C               	iorlw	12
   602  01FF02  6F22               	movwf	34,b	;volatile
   603  01FF04                     
   604                           ; BSR set to: 15
   605                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   606  01FF04  8F22               	bsf	34,7,b	;volatile
   607  01FF06                     
   608                           ; BSR set to: 15
   609  01FF06  0012               	return		;funcret
   610  01FF08                     __end_of_initDCmotorsPWM:
   611                           	callstack 0
   612                           
   613 ;; *************** function _buggy_lights_init *****************
   614 ;; Defined at:
   615 ;;		line 4 in file "buggy_lights.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;		None
   618 ;; Auto vars:     Size  Location     Type
   619 ;;		None
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      void 
   622 ;; Registers used:
   623 ;;		None
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   633 ;;Total ram usage:        0 bytes
   634 ;; Hardware stack levels used: 1
   635 ;; This function calls:
   636 ;;		Nothing
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           	psect	text2
   643  01FE3C                     __ptext2:
   644                           	callstack 0
   645  01FE3C                     _buggy_lights_init:
   646                           	callstack 30
   647  01FE3C                     
   648                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
   649  01FE3C  9884               	bcf	132,4,c	;volatile
   650                           
   651                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
   652  01FE3E  9288               	bcf	136,1,c	;volatile
   653                           
   654                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
   655  01FE40  9684               	bcf	132,3,c	;volatile
   656                           
   657                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
   658  01FE42  9086               	bcf	134,0,c	;volatile
   659                           
   660                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
   661  01FE44  9088               	bcf	136,0,c	;volatile
   662                           
   663                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
   664  01FE46  887C               	bsf	124,4,c	;volatile
   665                           
   666                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
   667  01FE48  8280               	bsf	128,1,c	;volatile
   668                           
   669                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
   670  01FE4A  867C               	bsf	124,3,c	;volatile
   671                           
   672                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
   673  01FE4C  807E               	bsf	126,0,c	;volatile
   674                           
   675                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
   676  01FE4E  8080               	bsf	128,0,c	;volatile
   677  01FE50  0012               	return		;funcret
   678  01FE52                     __end_of_buggy_lights_init:
   679                           	callstack 0
   680  0000                     
   681                           	psect	rparam
   682  0000                     
   683                           	psect	idloc
   684                           
   685                           ;Config register IDLOC0 @ 0x200000
   686                           ;	unspecified, using default values
   687  200000                     	org	2097152
   688  200000  0FFF               	dw	4095
   689                           
   690                           ;Config register IDLOC1 @ 0x200002
   691                           ;	unspecified, using default values
   692  200002                     	org	2097154
   693  200002  0FFF               	dw	4095
   694                           
   695                           ;Config register IDLOC2 @ 0x200004
   696                           ;	unspecified, using default values
   697  200004                     	org	2097156
   698  200004  0FFF               	dw	4095
   699                           
   700                           ;Config register IDLOC3 @ 0x200006
   701                           ;	unspecified, using default values
   702  200006                     	org	2097158
   703  200006  0FFF               	dw	4095
   704                           
   705                           ;Config register IDLOC4 @ 0x200008
   706                           ;	unspecified, using default values
   707  200008                     	org	2097160
   708  200008  0FFF               	dw	4095
   709                           
   710                           ;Config register IDLOC5 @ 0x20000A
   711                           ;	unspecified, using default values
   712  20000A                     	org	2097162
   713  20000A  0FFF               	dw	4095
   714                           
   715                           ;Config register IDLOC6 @ 0x20000C
   716                           ;	unspecified, using default values
   717  20000C                     	org	2097164
   718  20000C  0FFF               	dw	4095
   719                           
   720                           ;Config register IDLOC7 @ 0x20000E
   721                           ;	unspecified, using default values
   722  20000E                     	org	2097166
   723  20000E  0FFF               	dw	4095
   724                           
   725                           	psect	config
   726                           
   727                           ;Config register CONFIG1L @ 0x300000
   728                           ;	External Oscillator mode Selection bits
   729                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   730                           ;	Power-up default value for COSC bits
   731                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   732  300000                     	org	3145728
   733  300000  AA                 	db	170
   734                           
   735                           ;Config register CONFIG1H @ 0x300001
   736                           ;	unspecified, using default values
   737                           ;	Clock Out Enable bit
   738                           ;	CLKOUTEN = 0x1, unprogrammed default
   739                           ;	Clock Switch Enable bit
   740                           ;	CSWEN = 0x1, unprogrammed default
   741                           ;	Fail-Safe Clock Monitor Enable bit
   742                           ;	FCMEN = 0x1, unprogrammed default
   743  300001                     	org	3145729
   744  300001  FF                 	db	255
   745                           
   746                           ;Config register CONFIG2L @ 0x300002
   747                           ;	unspecified, using default values
   748                           ;	Master Clear Enable bit
   749                           ;	MCLRE = 0x1, unprogrammed default
   750                           ;	Power-up Timer Enable bit
   751                           ;	PWRTE = 0x1, unprogrammed default
   752                           ;	Low-power BOR enable bit
   753                           ;	LPBOREN = 0x1, unprogrammed default
   754                           ;	Brown-out Reset Enable bits
   755                           ;	BOREN = 0x3, unprogrammed default
   756  300002                     	org	3145730
   757  300002  FF                 	db	255
   758                           
   759                           ;Config register CONFIG2H @ 0x300003
   760                           ;	unspecified, using default values
   761                           ;	Brown Out Reset Voltage selection bits
   762                           ;	BORV = 0x3, unprogrammed default
   763                           ;	ZCD Disable bit
   764                           ;	ZCD = 0x1, unprogrammed default
   765                           ;	PPSLOCK bit One-Way Set Enable bit
   766                           ;	PPS1WAY = 0x1, unprogrammed default
   767                           ;	Stack Full/Underflow Reset Enable bit
   768                           ;	STVREN = 0x1, unprogrammed default
   769                           ;	Debugger Enable bit
   770                           ;	DEBUG = 0x1, unprogrammed default
   771                           ;	Extended Instruction Set Enable bit
   772                           ;	XINST = 0x1, unprogrammed default
   773  300003                     	org	3145731
   774  300003  FF                 	db	255
   775                           
   776                           ;Config register CONFIG3L @ 0x300004
   777                           ;	WDT Period Select bits
   778                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   779                           ;	WDT operating mode
   780                           ;	WDTE = OFF, WDT Disabled
   781  300004                     	org	3145732
   782  300004  9F                 	db	159
   783                           
   784                           ;Config register CONFIG3H @ 0x300005
   785                           ;	unspecified, using default values
   786                           ;	WDT Window Select bits
   787                           ;	WDTCWS = 0x7, unprogrammed default
   788                           ;	WDT input clock selector
   789                           ;	WDTCCS = 0x7, unprogrammed default
   790  300005                     	org	3145733
   791  300005  FF                 	db	255
   792                           
   793                           ;Config register CONFIG4L @ 0x300006
   794                           ;	unspecified, using default values
   795                           ;	Write Protection Block 0
   796                           ;	WRT0 = 0x1, unprogrammed default
   797                           ;	Write Protection Block 1
   798                           ;	WRT1 = 0x1, unprogrammed default
   799                           ;	Write Protection Block 2
   800                           ;	WRT2 = 0x1, unprogrammed default
   801                           ;	Write Protection Block 3
   802                           ;	WRT3 = 0x1, unprogrammed default
   803                           ;	Write Protection Block 3
   804                           ;	WRT4 = 0x1, unprogrammed default
   805                           ;	Write Protection Block 3
   806                           ;	WRT5 = 0x1, unprogrammed default
   807                           ;	Write Protection Block 3
   808                           ;	WRT6 = 0x1, unprogrammed default
   809                           ;	Write Protection Block 3
   810                           ;	WRT7 = 0x1, unprogrammed default
   811  300006                     	org	3145734
   812  300006  FF                 	db	255
   813                           
   814                           ;Config register CONFIG4H @ 0x300007
   815                           ;	unspecified, using default values
   816                           ;	Configuration Register Write Protection bit
   817                           ;	WRTC = 0x1, unprogrammed default
   818                           ;	Boot Block Write Protection bit
   819                           ;	WRTB = 0x1, unprogrammed default
   820                           ;	Data EEPROM Write Protection bit
   821                           ;	WRTD = 0x1, unprogrammed default
   822                           ;	Scanner Enable bit
   823                           ;	SCANE = 0x1, unprogrammed default
   824                           ;	Low Voltage Programming Enable bit
   825                           ;	LVP = 0x1, unprogrammed default
   826  300007                     	org	3145735
   827  300007  FF                 	db	255
   828                           
   829                           ;Config register CONFIG5L @ 0x300008
   830                           ;	unspecified, using default values
   831                           ;	UserNVM Program Memory Code Protection bit
   832                           ;	CP = 0x1, unprogrammed default
   833                           ;	DataNVM Memory Code Protection bit
   834                           ;	CPD = 0x1, unprogrammed default
   835  300008                     	org	3145736
   836  300008  FF                 	db	255
   837                           
   838                           ;Config register CONFIG5H @ 0x300009
   839                           ;	unspecified, using default values
   840  300009                     	org	3145737
   841  300009  FF                 	db	255
   842                           
   843                           ;Config register CONFIG6L @ 0x30000A
   844                           ;	unspecified, using default values
   845                           ;	Table Read Protection Block 0
   846                           ;	EBTR0 = 0x1, unprogrammed default
   847                           ;	Table Read Protection Block 1
   848                           ;	EBTR1 = 0x1, unprogrammed default
   849                           ;	Table Read Protection Block 2
   850                           ;	EBTR2 = 0x1, unprogrammed default
   851                           ;	Table Read Protection Block 3
   852                           ;	EBTR3 = 0x1, unprogrammed default
   853                           ;	Table Read Protection Block 4
   854                           ;	EBTR4 = 0x1, unprogrammed default
   855                           ;	Table Read Protection Block 5
   856                           ;	EBTR5 = 0x1, unprogrammed default
   857                           ;	Table Read Protection Block 6
   858                           ;	EBTR6 = 0x1, unprogrammed default
   859                           ;	Table Read Protection Block 7
   860                           ;	EBTR7 = 0x1, unprogrammed default
   861  30000A                     	org	3145738
   862  30000A  FF                 	db	255
   863                           
   864                           ;Config register CONFIG6H @ 0x30000B
   865                           ;	unspecified, using default values
   866                           ;	Boot Block Table Read Protection bit
   867                           ;	EBTRB = 0x1, unprogrammed default
   868  30000B                     	org	3145739
   869  30000B  FF                 	db	255
   870                           tosu	equ	0xFFF
   871                           tosh	equ	0xFFE
   872                           tosl	equ	0xFFD
   873                           stkptr	equ	0xFFC
   874                           pclatu	equ	0xFFB
   875                           pclath	equ	0xFFA
   876                           pcl	equ	0xFF9
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           prodh	equ	0xFF4
   882                           prodl	equ	0xFF3
   883                           indf0	equ	0xFEF
   884                           postinc0	equ	0xFEE
   885                           postdec0	equ	0xFED
   886                           preinc0	equ	0xFEC
   887                           plusw0	equ	0xFEB
   888                           fsr0h	equ	0xFEA
   889                           fsr0l	equ	0xFE9
   890                           wreg	equ	0xFE8
   891                           indf1	equ	0xFE7
   892                           postinc1	equ	0xFE6
   893                           postdec1	equ	0xFE5
   894                           preinc1	equ	0xFE4
   895                           plusw1	equ	0xFE3
   896                           fsr1h	equ	0xFE2
   897                           fsr1l	equ	0xFE1
   898                           bsr	equ	0xFE0
   899                           indf2	equ	0xFDF
   900                           postinc2	equ	0xFDE
   901                           postdec2	equ	0xFDD
   902                           preinc2	equ	0xFDC
   903                           plusw2	equ	0xFDB
   904                           fsr2h	equ	0xFDA
   905                           fsr2l	equ	0xFD9
   906                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        15
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      37
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    S842DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    S842DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0     407
                                              2 COMRAM    20    20      0
                  _buggy_lights_init
                    _initDCmotorsPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _initDCmotorsPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      25       1       38.9%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      25       8        0.0%
DATA                 0      0      25       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Feb 26 14:30:14 2024

              _turn180Delay 0017                          l15 FE50                          l86 FF06  
                       l928 FE3C                         u220 FF72                         u221 FF6A  
                       u240 FF92                         u241 FF8A                         u307 FFAE  
                       u260 FFCE                         u261 FFC6                         u238 FF74  
                       u280 FFEC                         u281 FFE4                         u258 FF94  
                       u278 FFD0                         u298 FFEE                         wreg 000FE8  
                      l1130 FEAE                        l1140 FEEC                        l1132 FEB2  
                      l1142 FEEE                        l1134 FED6                        l1126 FE78  
                      l1150 FF08                        l1144 FEF8                        l1136 FEE0  
                      l1128 FE88                        l1160 FF20                        l1152 FF08  
                      l1146 FEFA                        l1138 FEE2                        l1170 FF40  
                      l1162 FF28                        l1154 FF14                        l1148 FF04  
                      l1180 FF80                        l1172 FF44                        l1164 FF30  
                      l1156 FF18                        l1182 FFA4                        l1174 FF4C  
                      l1166 FF38                        l1158 FF1C                        l1184 FFBC  
                      l1176 FF54                        l1168 FF3C                        l1186 FFDA  
                      l1178 FF60                        _T2PR 000FBC                        _main FF08  
                      fsr1l 000FE1                        start 0000                ___param_bank 000000  
                     ?_main 0001    __size_of_initDCmotorsPWM 0090                 _turningGear 0021  
         _turnRight135Delay 0019                       tablat 000FF5             _turnLeft90Delay 001F  
           __initialization FE52                __end_of_main 0000                      ??_main 0003  
             __activetblptr 000000                      _CCPR1H 000FAA                      _CCPR2H 000FA6  
                    _CCPR3H 000F25                      _CCPR4H 000F21                      _RE2PPS 000E74  
                    _RC7PPS 000E69                      _RD5PPS 000E6F                      _RE4PPS 000E76  
                    _RD6PPS 000E70                      _RG6PPS 000E88            _turnLeft135Delay 001B  
              _CCPTMRS0bits 000FAD                      isa$std 000001                __pdataCOMRAM 0017  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
         ??_initDCmotorsPWM 0003           _buggy_lights_init FE3C                  __accesstop 0060  
   __end_of__initialization FE72          ?_buggy_lights_init 0001               ___rparam_used 000001  
            __pcstackCOMRAM 0001         ??_buggy_lights_init 0001   __end_of_buggy_lights_init FE52  
              _T2CLKCONbits 000FBF                     _SSP2ADD 000ED6                     _SSP2BUF 000ED5  
                   __Hparam 0000                     __Lparam 0000                     __pcinit FE52  
                   __ramtop 0E00                     __ptext0 FF08                     __ptext1 FE78  
                   __ptext2 FE3C                   _T2CONbits 000FBD                   _T2HLTbits 000FBE  
                   _topGear 0024  __size_of_buggy_lights_init 0016        end_of_initialization FE72  
                   postdec1 000FE5                     postinc0 000FEE             _initDCmotorsPWM FE78  
                 _TRISCbits 000F83                   _TRISDbits 000F84                   _TRISEbits 000F85  
                 _TRISFbits 000F86                   _TRISGbits 000F87                   _TRISHbits 000F88  
               _CCP1CONbits 000FAB                 _CCP2CONbits 000FA7                 _CCP3CONbits 000F26  
               _CCP4CONbits 000F22                  main@motorL 0005                  main@motorR 000E  
             __pidataCOMRAM FE2D         start_initialization FE52            _turnRight90Delay 001D  
   __end_of_initDCmotorsPWM FF08              _topAdjustPower 0023    initDCmotorsPWM@PWMperiod 0001  
                 _rampDelay 0025                    _LATCbits 000F7B                    _LATDbits 000F7C  
                  _LATEbits 000F7D                    _LATFbits 000F7E                    _LATGbits 000F7F  
                  _LATHbits 000F80            ?_initDCmotorsPWM 0001                    _SSP2CON2 000EDA  
                  _SSP2STAT 000ED8                   copy_data0 FE66                    __Hrparam 0000  
                  __Lrparam 0000               _topAdjustSide 0022                  _ANSELDbits 000EA7  
              _SSP2CON1bits 000ED9                _SSP2CON2bits 000EDA               __size_of_main 00F8  
                  isa$xinst 000000                  _SSP2DATPPS 000E1D                  _SSP2CLKPPS 000E1C  
