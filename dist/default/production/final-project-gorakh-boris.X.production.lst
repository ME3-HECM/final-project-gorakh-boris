

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 14 11:31:30 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    89                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    90   000000                     
    91                           ; Generated 21/07/2023 GMT
    92                           ; 
    93                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution. Publication is not required when
   107                           ;        this file is used in an embedded application.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F67K40 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125   000000                     
   126                           	psect	idataCOMRAM
   127   00396A                     __pidataCOMRAM:
   128                           	callstack 0
   129                           
   130                           ;initializer for _wall_threshold_clear
   131   00396A  0032               	dw	50
   132                           
   133                           ;initializer for _manoeuvre_pointer
   134   00396C  60                 	db	low _trail_manoeuvre
   135                           
   136                           ;initializer for _timer_low_pointer
   137   00396D  74                 	db	low _trail_timer_low
   138                           
   139                           ;initializer for _timer_high_pointer
   140   00396E  88                 	db	low _trail_timer_high
   141                           
   142                           ;initializer for _turningRightGear
   143   00396F  28                 	db	40
   144                           
   145                           ;initializer for _turningLeftGear
   146   003970  28                 	db	40
   147                           
   148                           ;initializer for _bottomGearRight
   149   003971  15                 	db	21
   150                           
   151                           ;initializer for _bottomGearLeft
   152   003972  14                 	db	20
   153                           
   154                           ;initializer for _topGearRight
   155   003973  14                 	db	20
   156                           
   157                           ;initializer for _topGearLeft
   158   003974  14                 	db	20
   159                           
   160                           ;initializer for _rampDelay
   161   003975  08                 	db	8
   162                           
   163                           ;initializer for _sample_count
   164   003976  14                 	db	20
   165                           
   166                           	psect	idataBANK0
   167   00395C                     __pidataBANK0:
   168                           	callstack 0
   169                           
   170                           ;initializer for _squareDelay
   171   00395C  0988               	dw	2440
   172                           
   173                           ;initializer for _headbuttDelay
   174   00395E  0334               	dw	820
   175                           
   176                           ;initializer for _turn180Delay
   177   003960  0190               	dw	400
   178                           
   179                           ;initializer for _turnRight135Delay
   180   003962  0106               	dw	262
   181                           
   182                           ;initializer for _turnLeft135Delay
   183   003964  00FA               	dw	250
   184                           
   185                           ;initializer for _turnRight90Delay
   186   003966  006C               	dw	108
   187                           
   188                           ;initializer for _turnLeft90Delay
   189   003968  0054               	dw	84
   190   000000                     _TMR0H	set	4052
   191   000000                     _RC4STAbits	set	3815
   192   000000                     _SP4BRGH	set	3814
   193   000000                     _LATEbits	set	3965
   194   000000                     _TRISEbits	set	3973
   195   000000                     _LATGbits	set	3967
   196   000000                     _TRISGbits	set	3975
   197   000000                     _LATFbits	set	3966
   198   000000                     _LATHbits	set	3968
   199   000000                     _TRISFbits	set	3974
   200   000000                     _TRISHbits	set	3976
   201   000000                     _SSP2CON2bits	set	3802
   202   000000                     _RX4PPS	set	3605
   203   000000                     _SSP2CLKPPS	set	3612
   204   000000                     _SSP2DATPPS	set	3613
   205   000000                     _RC7PPS	set	3689
   206   000000                     _RE2PPS	set	3700
   207   000000                     _LATAbits	set	3961
   208   000000                     _LATDbits	set	3964
   209   000000                     _TRISDbits	set	3972
   210   000000                     _PORTFbits	set	3982
   211   000000                     _T2PR	set	4028
   212   000000                     _T2CONbits	set	4029
   213   000000                     _CCPR2H	set	4006
   214   000000                     _CCPR1H	set	4010
   215   000000                     _TRISCbits	set	3971
   216   000000                     _TRISAbits	set	3969
   217   000000                     _LATCbits	set	3963
   218   000000                     _RE4PPS	set	3702
   219   000000                     _RG6PPS	set	3720
   220   000000                     _RD5PPS	set	3695
   221   000000                     _ANSELDbits	set	3751
   222   000000                     _SSP2ADD	set	3798
   223   000000                     _SSP2CON1bits	set	3801
   224   000000                     _CCPR4H	set	3873
   225   000000                     _CCPR3H	set	3877
   226   000000                     _TMR0L	set	4051
   227   000000                     _T0CON0bits	set	4053
   228   000000                     _T0CON1bits	set	4054
   229   000000                     _T2CLKCONbits	set	4031
   230   000000                     _T2HLTbits	set	4030
   231   000000                     _CCP1CONbits	set	4011
   232   000000                     _CCPTMRS0bits	set	4013
   233   000000                     _CCP2CONbits	set	4007
   234   000000                     _CCP3CONbits	set	3878
   235   000000                     _CCP4CONbits	set	3874
   236   000000                     _TX4REG	set	3812
   237   000000                     _SP4BRGL	set	3813
   238   000000                     _TX4STAbits	set	3816
   239   000000                     _BAUD4CONbits	set	3817
   240   000000                     _SSP2CON2	set	3802
   241   000000                     _SSP2STAT	set	3800
   242   000000                     _ANSELFbits	set	3764
   243   000000                     _SSP2BUF	set	3797
   244   000000                     _PIE0bits	set	3625
   245   000000                     _PIR4bits	set	3639
   246   000000                     _RC0PPS	set	3682
   247   000000                     _RD6PPS	set	3696
   248   000000                     _INTCONbits	set	4082
   249   000000                     _PIR0bits	set	3635
   250                           
   251                           	psect	smallconst
   252   000E00                     __psmallconst:
   253                           	callstack 0
   254   000E00  00                 	db	0
   255   000E01                     STR_5:
   256                           
   257                           ; BSR set to: 14
   258   000E01  25                 	db	37
   259   000E02  75                 	db	117	;'u'
   260   000E03  20                 	db	32
   261   000E04  25                 	db	37
   262   000E05  75                 	db	117	;'u'
   263   000E06  20                 	db	32
   264   000E07  25                 	db	37
   265   000E08  75                 	db	117	;'u'
   266   000E09  20                 	db	32
   267   000E0A  25                 	db	37
   268   000E0B  75                 	db	117	;'u'
   269   000E0C  20                 	db	32
   270   000E0D  0D                 	db	13
   271   000E0E  00                 	db	0
   272   000E0F                     STR_1:
   273                           
   274                           ; BSR set to: 14
   275   000E0F  25                 	db	37
   276   000E10  64                 	db	100	;'d'
   277   000E11  20                 	db	32
   278   000E12  0D                 	db	13
   279   000E13  00                 	db	0
   280   000E14                     STR_2:
   281                           
   282                           ; BSR set to: 14
   283   000E14  25                 	db	37
   284   000E15  64                 	db	100	;'d'
   285   000E16  20                 	db	32
   286   000E17  00                 	db	0
   287   000E18  00                 	db	0	; dummy byte at the end
   288   000000                     
   289                           ; #config settings
   290                           
   291                           	psect	cinit
   292   0032E2                     __pcinit:
   293                           	callstack 0
   294   0032E2                     start_initialization:
   295                           	callstack 0
   296   0032E2                     __initialization:
   297                           	callstack 0
   298                           
   299                           ; Initialize objects allocated to BANK0 (14 bytes)
   300                           ; load TBLPTR registers with __pidataBANK0
   301   0032E2  0E5C               	movlw	low __pidataBANK0
   302   0032E4  6EF6               	movwf	tblptrl,c
   303   0032E6  0E39               	movlw	high __pidataBANK0
   304   0032E8  6EF7               	movwf	tblptrh,c
   305   0032EA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   306   0032EC  6EF8               	movwf	tblptru,c
   307   0032EE  EE00  F0BC         	lfsr	0,__pdataBANK0
   308   0032F2  EE10 F00E          	lfsr	1,14
   309   0032F6                     copy_data0:
   310   0032F6  0009               	tblrd		*+
   311   0032F8  CFF5 FFEE          	movff	tablat,postinc0
   312   0032FC  50E5               	movf	postdec1,w,c
   313   0032FE  50E1               	movf	fsr1l,w,c
   314   003300  E1FA               	bnz	copy_data0
   315                           
   316                           ; Initialize objects allocated to COMRAM (13 bytes)
   317                           ; load TBLPTR registers with __pidataCOMRAM
   318   003302  0E6A               	movlw	low __pidataCOMRAM
   319   003304  6EF6               	movwf	tblptrl,c
   320   003306  0E39               	movlw	high __pidataCOMRAM
   321   003308  6EF7               	movwf	tblptrh,c
   322   00330A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   323   00330C  6EF8               	movwf	tblptru,c
   324   00330E  EE00  F04D         	lfsr	0,__pdataCOMRAM
   325   003312  EE10 F00D          	lfsr	1,13
   326   003316                     copy_data1:
   327   003316  0009               	tblrd		*+
   328   003318  CFF5 FFEE          	movff	tablat,postinc0
   329   00331C  50E5               	movf	postdec1,w,c
   330   00331E  50E1               	movf	fsr1l,w,c
   331   003320  E1FA               	bnz	copy_data1
   332                           
   333                           ; Clear objects allocated to BANK0 (60 bytes)
   334   003322  EE00  F060         	lfsr	0,__pbssBANK0
   335   003326  0E3C               	movlw	60
   336   003328                     clear_0:
   337   003328  6AEE               	clrf	postinc0,c
   338   00332A  06E8               	decf	wreg,f,c
   339   00332C  E1FD               	bnz	clear_0
   340                           
   341                           ; Clear objects allocated to COMRAM (4 bytes)
   342   00332E  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   343   003330  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   344   003332  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   345   003334  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   346   003336                     end_of_initialization:
   347                           	callstack 0
   348   003336                     __end_of__initialization:
   349                           	callstack 0
   350   003336  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   351   003338  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   352   00333A  0100               	movlb	0
   353   00333C  EFF0  F011         	goto	_main	;jump to C main() function
   354                           
   355                           	psect	bssCOMRAM
   356   00005A                     __pbssCOMRAM:
   357                           	callstack 0
   358   00005A                     _manoeuvre_count:
   359                           	callstack 0
   360   00005A                     	ds	1
   361   00005B                     _lost_flag:
   362                           	callstack 0
   363   00005B                     	ds	1
   364   00005C                     _return_flag:
   365                           	callstack 0
   366   00005C                     	ds	1
   367   00005D                     _returning:
   368                           	callstack 0
   369   00005D                     	ds	1
   370                           
   371                           	psect	dataCOMRAM
   372   00004D                     __pdataCOMRAM:
   373                           	callstack 0
   374   00004D                     _wall_threshold_clear:
   375                           	callstack 0
   376   00004D                     	ds	2
   377   00004F                     _manoeuvre_pointer:
   378                           	callstack 0
   379   00004F                     	ds	1
   380   000050                     _timer_low_pointer:
   381                           	callstack 0
   382   000050                     	ds	1
   383   000051                     _timer_high_pointer:
   384                           	callstack 0
   385   000051                     	ds	1
   386   000052                     _turningRightGear:
   387                           	callstack 0
   388   000052                     	ds	1
   389   000053                     _turningLeftGear:
   390                           	callstack 0
   391   000053                     	ds	1
   392   000054                     _bottomGearRight:
   393                           	callstack 0
   394   000054                     	ds	1
   395   000055                     _bottomGearLeft:
   396                           	callstack 0
   397   000055                     	ds	1
   398   000056                     _topGearRight:
   399                           	callstack 0
   400   000056                     	ds	1
   401   000057                     _topGearLeft:
   402                           	callstack 0
   403   000057                     	ds	1
   404   000058                     _rampDelay:
   405                           	callstack 0
   406   000058                     	ds	1
   407   000059                     _sample_count:
   408                           	callstack 0
   409   000059                     	ds	1
   410                           
   411                           	psect	bssBANK0
   412   000060                     __pbssBANK0:
   413                           	callstack 0
   414   000060                     _trail_manoeuvre:
   415                           	callstack 0
   416   000060                     	ds	20
   417   000074                     _trail_timer_low:
   418                           	callstack 0
   419   000074                     	ds	20
   420   000088                     _trail_timer_high:
   421                           	callstack 0
   422   000088                     	ds	20
   423                           
   424                           	psect	dataBANK0
   425   0000BC                     __pdataBANK0:
   426                           	callstack 0
   427   0000BC                     _squareDelay:
   428                           	callstack 0
   429   0000BC                     	ds	2
   430   0000BE                     _headbuttDelay:
   431                           	callstack 0
   432   0000BE                     	ds	2
   433   0000C0                     _turn180Delay:
   434                           	callstack 0
   435   0000C0                     	ds	2
   436   0000C2                     _turnRight135Delay:
   437                           	callstack 0
   438   0000C2                     	ds	2
   439   0000C4                     _turnLeft135Delay:
   440                           	callstack 0
   441   0000C4                     	ds	2
   442   0000C6                     _turnRight90Delay:
   443                           	callstack 0
   444   0000C6                     	ds	2
   445   0000C8                     _turnLeft90Delay:
   446                           	callstack 0
   447   0000C8                     	ds	2
   448                           
   449                           	psect	cstackBANK0
   450   00009C                     __pcstackBANK0:
   451                           	callstack 0
   452   00009C                     main@HSV_colour:
   453                           	callstack 0
   454                           
   455                           ; 6 bytes @ 0x0
   456   00009C                     	ds	6
   457   0000A2                     main@motorL:
   458                           	callstack 0
   459                           
   460                           ; 9 bytes @ 0x6
   461   0000A2                     	ds	9
   462   0000AB                     main@motorR:
   463                           	callstack 0
   464                           
   465                           ; 9 bytes @ 0xF
   466   0000AB                     	ds	9
   467   0000B4                     main@RGBC_colour:
   468                           	callstack 0
   469                           
   470                           ; 8 bytes @ 0x18
   471   0000B4                     	ds	8
   472                           
   473                           	psect	cstackCOMRAM
   474   000001                     __pcstackCOMRAM:
   475                           	callstack 0
   476   000001                     ??_toggle_brake_lights:
   477   000001                     ??_toggle_main_beam:
   478   000001                     ??_toggle_left_indicators:
   479   000001                     ??_toggle_right_indicators:
   480   000001                     ??_toggle_tricolour_LED:
   481   000001                     ??_I2C_2_Master_Idle:
   482   000001                     ?_max_RGB:
   483                           	callstack 0
   484   000001                     ?_min_RGB:
   485                           	callstack 0
   486   000001                     ?___wmul:
   487                           	callstack 0
   488   000001                     ?___lmul:
   489                           	callstack 0
   490   000001                     ?___lldiv:
   491                           	callstack 0
   492   000001                     ?___xxtofl:
   493                           	callstack 0
   494   000001                     max_RGB@p:
   495                           	callstack 0
   496   000001                     min_RGB@p:
   497                           	callstack 0
   498   000001                     colour_to_key@p1:
   499                           	callstack 0
   500   000001                     read_timer@tH:
   501                           	callstack 0
   502   000001                     write_timer@tL:
   503                           	callstack 0
   504   000001                     read_trail@tH:
   505                           	callstack 0
   506   000001                     write_trail@tL:
   507                           	callstack 0
   508   000001                     initDCmotorsPWM@PWMperiod:
   509                           	callstack 0
   510   000001                     ___wmul@multiplier:
   511                           	callstack 0
   512   000001                     ___lmul@multiplier:
   513                           	callstack 0
   514   000001                     ___lldiv@dividend:
   515                           	callstack 0
   516   000001                     ___xxtofl@val:
   517                           	callstack 0
   518                           
   519                           ; 4 bytes @ 0x0
   520   000001                     	ds	1
   521   000002                     ??_I2C_2_Master_Read:
   522   000002                     colour_to_key@p2:
   523                           	callstack 0
   524   000002                     I2C_2_Master_Write@data_byte:
   525                           	callstack 0
   526   000002                     read_timer@tL:
   527                           	callstack 0
   528   000002                     write_timer@tH:
   529                           	callstack 0
   530   000002                     read_trail@tL:
   531                           	callstack 0
   532   000002                     write_trail@man:
   533                           	callstack 0
   534                           
   535                           ; 1 bytes @ 0x1
   536   000002                     	ds	1
   537   000003                     color_writetoaddr@value:
   538                           	callstack 0
   539   000003                     I2C_2_Master_Read@ack:
   540                           	callstack 0
   541   000003                     read_trail@man:
   542                           	callstack 0
   543   000003                     write_trail@tH:
   544                           	callstack 0
   545   000003                     ___wmul@multiplicand:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x2
   549   000003                     	ds	1
   550   000004                     color_writetoaddr@address:
   551                           	callstack 0
   552   000004                     I2C_2_Master_Read@tmp:
   553                           	callstack 0
   554                           
   555                           ; 1 bytes @ 0x3
   556   000004                     	ds	1
   557   000005                     ??_color_click_init:
   558   000005                     ??___xxtofl:
   559   000005                     ?_color_read_Red:
   560                           	callstack 0
   561   000005                     ?_color_read_Green:
   562                           	callstack 0
   563   000005                     ?_color_read_Blue:
   564                           	callstack 0
   565   000005                     ?_color_read_Clear:
   566                           	callstack 0
   567   000005                     colour_to_key@key:
   568                           	callstack 0
   569   000005                     max_RGB@max_val:
   570                           	callstack 0
   571   000005                     min_RGB@min_val:
   572                           	callstack 0
   573   000005                     ___wmul@product:
   574                           	callstack 0
   575   000005                     ___lmul@multiplicand:
   576                           	callstack 0
   577   000005                     ___lldiv@divisor:
   578                           	callstack 0
   579                           
   580                           ; 4 bytes @ 0x4
   581   000005                     	ds	2
   582   000007                     ??_color_read_Red:
   583   000007                     ??_color_read_Green:
   584   000007                     ??_color_read_Blue:
   585   000007                     ??_color_read_Clear:
   586   000007                     ?___lwdiv:
   587                           	callstack 0
   588   000007                     ___lwdiv@dividend:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x6
   592   000007                     	ds	2
   593   000009                     ___xxtofl@sign:
   594                           	callstack 0
   595   000009                     ___lwdiv@divisor:
   596                           	callstack 0
   597   000009                     ___lmul@product:
   598                           	callstack 0
   599   000009                     ___lldiv@quotient:
   600                           	callstack 0
   601                           
   602                           ; 4 bytes @ 0x8
   603   000009                     	ds	1
   604   00000A                     ___xxtofl@exp:
   605                           	callstack 0
   606   00000A                     color_read_Red@tmp:
   607                           	callstack 0
   608   00000A                     color_read_Green@tmp:
   609                           	callstack 0
   610   00000A                     color_read_Blue@tmp:
   611                           	callstack 0
   612   00000A                     color_read_Clear@tmp:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x9
   616   00000A                     	ds	1
   617   00000B                     ___lwdiv@quotient:
   618                           	callstack 0
   619   00000B                     ___xxtofl@arg:
   620                           	callstack 0
   621                           
   622                           ; 4 bytes @ 0xA
   623   00000B                     	ds	1
   624   00000C                     getRGBCval@p:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0xB
   628   00000C                     	ds	1
   629   00000D                     wait_for_wall@p:
   630                           	callstack 0
   631   00000D                     ___lldiv@counter:
   632                           	callstack 0
   633   00000D                     ___lwdiv@counter:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0xC
   637   00000D                     	ds	1
   638   00000E                     average_RGBC@p:
   639                           	callstack 0
   640   00000E                     wait_for_wall@loss:
   641                           	callstack 0
   642   00000E                     convert_HSV@p1:
   643                           	callstack 0
   644   00000E                     setMotorPWM@m:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0xD
   648   00000E                     	ds	1
   649   00000F                     ??_average_RGBC:
   650   00000F                     ??_setMotorPWM:
   651   00000F                     ?___flmul:
   652                           	callstack 0
   653   00000F                     convert_HSV@p2:
   654                           	callstack 0
   655   00000F                     ___flmul@b:
   656                           	callstack 0
   657                           
   658                           ; 4 bytes @ 0xE
   659   00000F                     	ds	1
   660   000010                     ??_convert_HSV:
   661                           
   662                           ; 1 bytes @ 0xF
   663   000010                     	ds	1
   664   000011                     average_RGBC@i:
   665                           	callstack 0
   666   000011                     setMotorPWM@posDuty:
   667                           	callstack 0
   668                           
   669                           ; 1 bytes @ 0x10
   670   000011                     	ds	1
   671   000012                     setMotorPWM@negDuty:
   672                           	callstack 0
   673   000012                     average_RGBC@temp_R:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x11
   677   000012                     	ds	1
   678   000013                     stop@mL:
   679                           	callstack 0
   680   000013                     turnLeft@mL:
   681                           	callstack 0
   682   000013                     turnRight@mL:
   683                           	callstack 0
   684   000013                     fullSpeedAhead@mL:
   685                           	callstack 0
   686   000013                     fullSpeedReverse@mL:
   687                           	callstack 0
   688   000013                     ___flmul@a:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x12
   692   000013                     	ds	1
   693   000014                     stop@mR:
   694                           	callstack 0
   695   000014                     turnLeft@mR:
   696                           	callstack 0
   697   000014                     turnRight@mR:
   698                           	callstack 0
   699   000014                     fullSpeedAhead@mR:
   700                           	callstack 0
   701   000014                     fullSpeedReverse@mR:
   702                           	callstack 0
   703                           
   704                           ; 1 bytes @ 0x13
   705   000014                     	ds	1
   706   000015                     ??_stop:
   707   000015                     ??_turnLeft:
   708   000015                     ??_turnRight:
   709   000015                     ??_fullSpeedAhead:
   710   000015                     ??_fullSpeedReverse:
   711                           
   712                           ; 1 bytes @ 0x14
   713   000015                     	ds	1
   714   000016                     turnLeft@leftGear:
   715                           	callstack 0
   716   000016                     turnRight@leftGear:
   717                           	callstack 0
   718   000016                     fullSpeedAhead@leftGear:
   719                           	callstack 0
   720   000016                     fullSpeedReverse@leftGear:
   721                           	callstack 0
   722   000016                     average_RGBC@temp_G:
   723                           	callstack 0
   724                           
   725                           ; 4 bytes @ 0x15
   726   000016                     	ds	1
   727   000017                     ??___flmul:
   728   000017                     turnLeft@rightGear:
   729                           	callstack 0
   730   000017                     turnRight@rightGear:
   731                           	callstack 0
   732   000017                     fullSpeedAhead@rightGear:
   733                           	callstack 0
   734   000017                     fullSpeedReverse@rightGear:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x16
   738   000017                     	ds	1
   739   000018                     turnLeft90@mL:
   740                           	callstack 0
   741   000018                     turnRight90@mL:
   742                           	callstack 0
   743   000018                     turnLeft135@mL:
   744                           	callstack 0
   745   000018                     turnRight135@mL:
   746                           	callstack 0
   747   000018                     UTurn@mL:
   748                           	callstack 0
   749   000018                     headbuttReverse@mL:
   750                           	callstack 0
   751   000018                     squareReverse@mL:
   752                           	callstack 0
   753   000018                     convert_HSV@sat_scale:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x17
   757   000018                     	ds	1
   758   000019                     turnLeft90@mR:
   759                           	callstack 0
   760   000019                     turnRight90@mR:
   761                           	callstack 0
   762   000019                     turnLeft135@mR:
   763                           	callstack 0
   764   000019                     turnRight135@mR:
   765                           	callstack 0
   766   000019                     UTurn@mR:
   767                           	callstack 0
   768   000019                     headbuttReverse@mR:
   769                           	callstack 0
   770   000019                     squareReverse@mR:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0x18
   774   000019                     	ds	1
   775   00001A                     ??_turnLeft90:
   776   00001A                     ??_turnRight90:
   777   00001A                     ??_turnLeft135:
   778   00001A                     ??_turnRight135:
   779   00001A                     ??_UTurn:
   780   00001A                     ??_headbuttReverse:
   781   00001A                     ??_squareReverse:
   782   00001A                     convert_HSV@m:
   783                           	callstack 0
   784   00001A                     average_RGBC@temp_B:
   785                           	callstack 0
   786                           
   787                           ; 4 bytes @ 0x19
   788   00001A                     	ds	1
   789   00001B                     ___flmul@sign:
   790                           	callstack 0
   791                           
   792                           ; 1 bytes @ 0x1A
   793   00001B                     	ds	1
   794   00001C                     card_red@mL:
   795                           	callstack 0
   796   00001C                     card_green@mL:
   797                           	callstack 0
   798   00001C                     card_blue@mL:
   799                           	callstack 0
   800   00001C                     card_yellow@mL:
   801                           	callstack 0
   802   00001C                     card_pink@mL:
   803                           	callstack 0
   804   00001C                     card_orange@mL:
   805                           	callstack 0
   806   00001C                     card_cyan@mL:
   807                           	callstack 0
   808   00001C                     card_white@mL:
   809                           	callstack 0
   810   00001C                     convert_HSV@sat:
   811                           	callstack 0
   812   00001C                     ___flmul@grs:
   813                           	callstack 0
   814                           
   815                           ; 4 bytes @ 0x1B
   816   00001C                     	ds	1
   817   00001D                     card_red@mR:
   818                           	callstack 0
   819   00001D                     card_green@mR:
   820                           	callstack 0
   821   00001D                     card_blue@mR:
   822                           	callstack 0
   823   00001D                     card_yellow@mR:
   824                           	callstack 0
   825   00001D                     card_pink@mR:
   826                           	callstack 0
   827   00001D                     card_orange@mR:
   828                           	callstack 0
   829   00001D                     card_cyan@mR:
   830                           	callstack 0
   831   00001D                     card_white@mR:
   832                           	callstack 0
   833                           
   834                           ; 1 bytes @ 0x1C
   835   00001D                     	ds	1
   836   00001E                     card_red@backtrack:
   837                           	callstack 0
   838   00001E                     card_green@backtrack:
   839                           	callstack 0
   840   00001E                     card_blue@backtrack:
   841                           	callstack 0
   842   00001E                     card_yellow@backtrack:
   843                           	callstack 0
   844   00001E                     card_pink@backtrack:
   845                           	callstack 0
   846   00001E                     card_orange@backtrack:
   847                           	callstack 0
   848   00001E                     card_cyan@backtrack:
   849                           	callstack 0
   850   00001E                     convert_HSV@hue:
   851                           	callstack 0
   852   00001E                     average_RGBC@temp_C:
   853                           	callstack 0
   854                           
   855                           ; 4 bytes @ 0x1D
   856   00001E                     	ds	1
   857   00001F                     ??_card_red:
   858   00001F                     ??_card_green:
   859   00001F                     ??_card_blue:
   860   00001F                     ??_card_yellow:
   861   00001F                     ??_card_pink:
   862   00001F                     ??_card_orange:
   863   00001F                     ??_card_cyan:
   864                           
   865                           ; 1 bytes @ 0x1E
   866   00001F                     	ds	1
   867   000020                     ___flmul@aexp:
   868                           	callstack 0
   869   000020                     convert_HSV@temp_614:
   870                           	callstack 0
   871                           
   872                           ; 4 bytes @ 0x1F
   873   000020                     	ds	1
   874   000021                     pick_card@mL:
   875                           	callstack 0
   876   000021                     ___flmul@bexp:
   877                           	callstack 0
   878                           
   879                           ; 1 bytes @ 0x20
   880   000021                     	ds	1
   881   000022                     pick_card@mR:
   882                           	callstack 0
   883   000022                     ___flmul@prod:
   884                           	callstack 0
   885                           
   886                           ; 4 bytes @ 0x21
   887   000022                     	ds	1
   888   000023                     pick_card@backtrack:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x22
   892   000023                     	ds	1
   893   000024                     pick_card@key:
   894                           	callstack 0
   895   000024                     convert_HSV@temp:
   896                           	callstack 0
   897                           
   898                           ; 4 bytes @ 0x23
   899   000024                     	ds	1
   900   000025                     ??_pick_card:
   901                           
   902                           ; 1 bytes @ 0x24
   903   000025                     	ds	1
   904   000026                     ___flmul@temp:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x25
   908   000026                     	ds	1
   909   000027                     return_to_sender@mL:
   910                           	callstack 0
   911                           
   912                           ; 1 bytes @ 0x26
   913   000027                     	ds	1
   914   000028                     ?___fltol:
   915                           	callstack 0
   916   000028                     return_to_sender@mR:
   917                           	callstack 0
   918   000028                     convert_HSV@temp_610:
   919                           	callstack 0
   920   000028                     ___fltol@f1:
   921                           	callstack 0
   922                           
   923                           ; 4 bytes @ 0x27
   924   000028                     	ds	1
   925   000029                     return_to_sender@timerH:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0x28
   929   000029                     	ds	1
   930   00002A                     return_to_sender@timerL:
   931                           	callstack 0
   932                           
   933                           ; 1 bytes @ 0x29
   934   00002A                     	ds	1
   935   00002B                     return_to_sender@mann:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x2A
   939   00002B                     	ds	1
   940   00002C                     ??___fltol:
   941   00002C                     convert_HSV@temp_611:
   942                           	callstack 0
   943                           
   944                           ; 4 bytes @ 0x2B
   945   00002C                     	ds	4
   946   000030                     ___fltol@sign1:
   947                           	callstack 0
   948   000030                     convert_HSV@temp_612:
   949                           	callstack 0
   950                           
   951                           ; 4 bytes @ 0x2F
   952   000030                     	ds	1
   953   000031                     ___fltol@exp1:
   954                           	callstack 0
   955                           
   956                           ; 1 bytes @ 0x30
   957   000031                     	ds	1
   958   000032                     scale_RGB@p:
   959                           	callstack 0
   960                           
   961                           ; 1 bytes @ 0x31
   962   000032                     	ds	1
   963   000033                     ??_scale_RGB:
   964                           
   965                           ; 1 bytes @ 0x32
   966   000033                     	ds	1
   967   000034                     convert_HSV@temp_613:
   968                           	callstack 0
   969                           
   970                           ; 4 bytes @ 0x33
   971   000034                     	ds	4
   972   000038                     convert_HSV@temp_609:
   973                           	callstack 0
   974                           
   975                           ; 4 bytes @ 0x37
   976   000038                     	ds	4
   977   00003C                     convert_HSV@hue_scale:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x3B
   981   00003C                     	ds	2
   982   00003E                     convert_HSV@M:
   983                           	callstack 0
   984                           
   985                           ; 2 bytes @ 0x3D
   986   00003E                     	ds	2
   987   000040                     convert_HSV@C:
   988                           	callstack 0
   989                           
   990                           ; 2 bytes @ 0x3F
   991   000040                     	ds	2
   992   000042                     forward_navigation@mL:
   993                           	callstack 0
   994                           
   995                           ; 1 bytes @ 0x41
   996   000042                     	ds	1
   997   000043                     forward_navigation@mR:
   998                           	callstack 0
   999                           
  1000                           ; 1 bytes @ 0x42
  1001   000043                     	ds	1
  1002   000044                     forward_navigation@p1:
  1003                           	callstack 0
  1004                           
  1005                           ; 1 bytes @ 0x43
  1006   000044                     	ds	1
  1007   000045                     forward_navigation@p2:
  1008                           	callstack 0
  1009                           
  1010                           ; 1 bytes @ 0x44
  1011   000045                     	ds	1
  1012   000046                     ??_forward_navigation:
  1013                           
  1014                           ; 1 bytes @ 0x45
  1015   000046                     	ds	2
  1016   000048                     forward_navigation@timerH:
  1017                           	callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x47
  1020   000048                     	ds	1
  1021   000049                     forward_navigation@timerL:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x48
  1025   000049                     	ds	1
  1026   00004A                     forward_navigation@mann:
  1027                           	callstack 0
  1028                           
  1029                           ; 1 bytes @ 0x49
  1030   00004A                     	ds	1
  1031   00004B                     ??_main:
  1032                           
  1033                           ; 1 bytes @ 0x4A
  1034   00004B                     	ds	2
  1035                           
  1036 ;;
  1037 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1038 ;;
  1039 ;; *************** function _main *****************
  1040 ;; Defined at:
  1041 ;;		line 31 in file "main.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;  motorR          9   15[BANK0 ] struct DC_motor
  1046 ;;  motorL          9    6[BANK0 ] struct DC_motor
  1047 ;;  RGBC_colour     8   24[BANK0 ] struct RGBC_val
  1048 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
  1049 ;;  PWMcycle        2    0        unsigned int 
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1060 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1062 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1063 ;;Total ram usage:       34 bytes
  1064 ;; Hardware stack levels required when called: 8
  1065 ;; This function calls:
  1066 ;;		_Timer0_init
  1067 ;;		_buggy_lights_init
  1068 ;;		_color_click_init
  1069 ;;		_forward_navigation
  1070 ;;		_initDCmotorsPWM
  1071 ;;		_initUSART4
  1072 ;;		_return_to_sender
  1073 ;; This function is called by:
  1074 ;;		Startup code after reset
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text0
  1079   0023E0                     __ptext0:
  1080                           	callstack 0
  1081   0023E0                     _main:
  1082                           	callstack 23
  1083   0023E0                     
  1084                           ;main.c: 32:     struct RGBC_val RGBC_colour;;main.c: 33:         RGBC_colour.R = 0;
  1085   0023E0  0E00               	movlw	0
  1086   0023E2  0100               	movlb	0	; () banked
  1087   0023E4  6FB5               	movwf	(main@RGBC_colour+1)& (0+255),b
  1088   0023E6  0E00               	movlw	0
  1089   0023E8  6FB4               	movwf	main@RGBC_colour& (0+255),b
  1090                           
  1091                           ;main.c: 34:         RGBC_colour.G = 0;
  1092   0023EA  0E00               	movlw	0
  1093   0023EC  6FB7               	movwf	(main@RGBC_colour+3)& (0+255),b
  1094   0023EE  0E00               	movlw	0
  1095   0023F0  6FB6               	movwf	(main@RGBC_colour+2)& (0+255),b
  1096                           
  1097                           ;main.c: 35:         RGBC_colour.B = 0;
  1098   0023F2  0E00               	movlw	0
  1099   0023F4  6FB9               	movwf	(main@RGBC_colour+5)& (0+255),b
  1100   0023F6  0E00               	movlw	0
  1101   0023F8  6FB8               	movwf	(main@RGBC_colour+4)& (0+255),b
  1102                           
  1103                           ;main.c: 36:         RGBC_colour.C = 0;
  1104   0023FA  0E00               	movlw	0
  1105   0023FC  6FBB               	movwf	(main@RGBC_colour+7)& (0+255),b
  1106   0023FE  0E00               	movlw	0
  1107   002400  6FBA               	movwf	(main@RGBC_colour+6)& (0+255),b
  1108                           
  1109                           ;main.c: 38:     struct HSV_val HSV_colour;;main.c: 39:         HSV_colour.H = 0;
  1110   002402  0E00               	movlw	0
  1111   002404  6F9D               	movwf	(main@HSV_colour+1)& (0+255),b
  1112   002406  0E00               	movlw	0
  1113   002408  6F9C               	movwf	main@HSV_colour& (0+255),b
  1114                           
  1115                           ;main.c: 40:         HSV_colour.S = 0;
  1116   00240A  0E00               	movlw	0
  1117   00240C  6F9F               	movwf	(main@HSV_colour+3)& (0+255),b
  1118   00240E  0E00               	movlw	0
  1119   002410  6F9E               	movwf	(main@HSV_colour+2)& (0+255),b
  1120                           
  1121                           ;main.c: 41:         HSV_colour.V = 0;
  1122   002412  0E00               	movlw	0
  1123   002414  6FA1               	movwf	(main@HSV_colour+5)& (0+255),b
  1124   002416  0E00               	movlw	0
  1125   002418  6FA0               	movwf	(main@HSV_colour+4)& (0+255),b
  1126                           
  1127                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 45:         motorL.power = 0;
  1128   00241A  0E00               	movlw	0
  1129   00241C  6FA2               	movwf	main@motorL& (0+255),b
  1130                           
  1131                           ;main.c: 46:         motorL.direction = 1;
  1132   00241E  0E01               	movlw	1
  1133   002420  6FA3               	movwf	(main@motorL+1)& (0+255),b
  1134                           
  1135                           ;main.c: 47:         motorL.brakemode = 1;
  1136   002422  0E01               	movlw	1
  1137   002424  6FA4               	movwf	(main@motorL+2)& (0+255),b
  1138   002426                     
  1139                           ; BSR set to: 0
  1140                           ;main.c: 48:         motorL.PWMperiod = PWMcycle;
  1141   002426  0E00               	movlw	0
  1142   002428  6FA6               	movwf	(main@motorL+4)& (0+255),b
  1143   00242A  0E63               	movlw	99
  1144   00242C  6FA5               	movwf	(main@motorL+3)& (0+255),b
  1145   00242E                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 49:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1148   00242E  0EAA               	movlw	170
  1149   002430  6FA7               	movwf	(main@motorL+5)& (0+255),b
  1150   002432  0E0F               	movlw	15
  1151   002434  6FA8               	movwf	(main@motorL+6)& (0+255),b
  1152   002436                     
  1153                           ; BSR set to: 0
  1154                           ;main.c: 50:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1155   002436  0EA6               	movlw	166
  1156   002438  6FA9               	movwf	(main@motorL+7)& (0+255),b
  1157   00243A  0E0F               	movlw	15
  1158   00243C  6FAA               	movwf	(main@motorL+8)& (0+255),b
  1159                           
  1160                           ;main.c: 51:         motorR.power = 0;
  1161   00243E  0E00               	movlw	0
  1162   002440  6FAB               	movwf	main@motorR& (0+255),b
  1163                           
  1164                           ;main.c: 52:         motorR.direction = 1;
  1165   002442  0E01               	movlw	1
  1166   002444  6FAC               	movwf	(main@motorR+1)& (0+255),b
  1167                           
  1168                           ;main.c: 53:         motorR.brakemode = 1;
  1169   002446  0E01               	movlw	1
  1170   002448  6FAD               	movwf	(main@motorR+2)& (0+255),b
  1171   00244A                     
  1172                           ; BSR set to: 0
  1173                           ;main.c: 54:         motorR.PWMperiod = PWMcycle;
  1174   00244A  0E00               	movlw	0
  1175   00244C  6FAF               	movwf	(main@motorR+4)& (0+255),b
  1176   00244E  0E63               	movlw	99
  1177   002450  6FAE               	movwf	(main@motorR+3)& (0+255),b
  1178   002452                     
  1179                           ; BSR set to: 0
  1180                           ;main.c: 55:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1181   002452  0E25               	movlw	37
  1182   002454  6FB0               	movwf	(main@motorR+5)& (0+255),b
  1183   002456  0E0F               	movlw	15
  1184   002458  6FB1               	movwf	(main@motorR+6)& (0+255),b
  1185   00245A                     
  1186                           ; BSR set to: 0
  1187                           ;main.c: 56:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1188   00245A  0E21               	movlw	33
  1189   00245C  6FB2               	movwf	(main@motorR+7)& (0+255),b
  1190   00245E  0E0F               	movlw	15
  1191   002460  6FB3               	movwf	(main@motorR+8)& (0+255),b
  1192   002462                     
  1193                           ; BSR set to: 0
  1194                           ;main.c: 59:     initDCmotorsPWM(PWMcycle);
  1195   002462  0E00               	movlw	0
  1196   002464  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1197   002466  0E63               	movlw	99
  1198   002468  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1199   00246A  EC73  F016         	call	_initDCmotorsPWM	;wreg free
  1200                           
  1201                           ;main.c: 60:     buggy_lights_init();
  1202   00246E  ECB1  F01B         	call	_buggy_lights_init	;wreg free
  1203   002472                     
  1204                           ;main.c: 61:     color_click_init();
  1205   002472  EC97  F01B         	call	_color_click_init	;wreg free
  1206   002476                     
  1207                           ;main.c: 62:     initUSART4();
  1208   002476  EC94  F01C         	call	_initUSART4	;wreg free
  1209   00247A                     
  1210                           ;main.c: 63:     Timer0_init();
  1211   00247A  EC06  F01C         	call	_Timer0_init	;wreg free
  1212   00247E                     
  1213                           ;main.c: 67:         TRISDbits.TRISD7 = 0;
  1214   00247E  9E84               	bcf	132,7,c	;volatile
  1215   002480                     
  1216                           ;main.c: 68:         TRISHbits.TRISH3 = 0;
  1217   002480  9688               	bcf	136,3,c	;volatile
  1218   002482                     
  1219                           ;main.c: 70:         LATDbits.LATD7 = 0;
  1220   002482  9E7C               	bcf	124,7,c	;volatile
  1221   002484                     
  1222                           ;main.c: 71:         LATHbits.LATH3 = 0;
  1223   002484  9680               	bcf	128,3,c	;volatile
  1224   002486                     
  1225                           ;main.c: 75:         TRISFbits.TRISF2 = 1;
  1226   002486  8486               	bsf	134,2,c	;volatile
  1227   002488                     
  1228                           ;main.c: 76:         TRISFbits.TRISF3 = 1;
  1229   002488  8686               	bsf	134,3,c	;volatile
  1230   00248A                     
  1231                           ;main.c: 78:         ANSELFbits.ANSELF2 = 0;
  1232   00248A  010E               	movlb	14	; () banked
  1233   00248C  95B4               	bcf	180,2,b	;volatile
  1234   00248E                     
  1235                           ; BSR set to: 14
  1236                           ;main.c: 79:         ANSELFbits.ANSELF3 = 0;
  1237   00248E  97B4               	bcf	180,3,b	;volatile
  1238   002490                     l433:
  1239   002490  B68E               	btfsc	142,3,c	;volatile
  1240   002492  EF4D  F012         	goto	u3171
  1241   002496  EF4F  F012         	goto	u3170
  1242   00249A                     u3171:
  1243   00249A  EF48  F012         	goto	l433
  1244   00249E                     u3170:
  1245   00249E                     
  1246                           ;main.c: 82:     LATDbits.LATD7 = !LATDbits.LATD7;
  1247   00249E  AE7C               	btfss	124,7,c	;volatile
  1248   0024A0  EF54  F012         	goto	u3181
  1249   0024A4  EF58  F012         	goto	u3180
  1250   0024A8                     u3181:
  1251   0024A8  6A4B               	clrf	??_main^0,c
  1252   0024AA  2A4B               	incf	??_main^0,f,c
  1253   0024AC  EF59  F012         	goto	u3198
  1254   0024B0                     u3180:
  1255   0024B0  6A4B               	clrf	??_main^0,c
  1256   0024B2                     u3198:
  1257   0024B2  324B               	rrcf	??_main^0,f,c
  1258   0024B4  324B               	rrcf	??_main^0,f,c
  1259   0024B6  507C               	movf	124,w,c	;volatile
  1260   0024B8  184B               	xorwf	??_main^0,w,c
  1261   0024BA  0B7F               	andlw	-129
  1262   0024BC  184B               	xorwf	??_main^0,w,c
  1263   0024BE  6E7C               	movwf	124,c	;volatile
  1264                           
  1265                           ;main.c: 83:     LATHbits.LATH3 = !LATHbits.LATH3;
  1266   0024C0  A680               	btfss	128,3,c	;volatile
  1267   0024C2  EF65  F012         	goto	u3201
  1268   0024C6  EF69  F012         	goto	u3200
  1269   0024CA                     u3201:
  1270   0024CA  6A4B               	clrf	??_main^0,c
  1271   0024CC  2A4B               	incf	??_main^0,f,c
  1272   0024CE  EF6A  F012         	goto	u3218
  1273   0024D2                     u3200:
  1274   0024D2  6A4B               	clrf	??_main^0,c
  1275   0024D4                     u3218:
  1276   0024D4  464B               	rlncf	??_main^0,f,c
  1277   0024D6  464B               	rlncf	??_main^0,f,c
  1278   0024D8  464B               	rlncf	??_main^0,f,c
  1279   0024DA  5080               	movf	128,w,c	;volatile
  1280   0024DC  184B               	xorwf	??_main^0,w,c
  1281   0024DE  0BF7               	andlw	-9
  1282   0024E0  184B               	xorwf	??_main^0,w,c
  1283   0024E2  6E80               	movwf	128,c	;volatile
  1284   0024E4                     
  1285                           ;main.c: 84:      _delay((unsigned long)((1000)*(64000000/4000.0)));
  1286   0024E4  0E52               	movlw	82
  1287   0024E6  6E4C               	movwf	(??_main+1)^0,c
  1288   0024E8  0E2B               	movlw	43
  1289   0024EA  6E4B               	movwf	??_main^0,c
  1290   0024EC  0E00               	movlw	0
  1291   0024EE                     u3227:
  1292   0024EE  2EE8               	decfsz	wreg,f,c
  1293   0024F0  D7FE               	bra	u3227
  1294   0024F2  2E4B               	decfsz	??_main^0,f,c
  1295   0024F4  D7FC               	bra	u3227
  1296   0024F6  2E4C               	decfsz	(??_main+1)^0,f,c
  1297   0024F8  D7FA               	bra	u3227
  1298   0024FA  D000               	nop2	
  1299   0024FC                     
  1300                           ;main.c: 87:     forward_navigation(&motorL, &motorR, &HSV_colour, &RGBC_colour);
  1301   0024FC  0EA2               	movlw	low main@motorL
  1302   0024FE  6E42               	movwf	forward_navigation@mL^0,c
  1303   002500  0EAB               	movlw	low main@motorR
  1304   002502  6E43               	movwf	forward_navigation@mR^0,c
  1305   002504  0E9C               	movlw	low main@HSV_colour
  1306   002506  6E44               	movwf	forward_navigation@p1^0,c
  1307   002508  0EB4               	movlw	low main@RGBC_colour
  1308   00250A  6E45               	movwf	forward_navigation@p2^0,c
  1309   00250C  EC92  F010         	call	_forward_navigation	;wreg free
  1310   002510                     
  1311                           ;main.c: 88:     return_to_sender(&motorL, &motorR);
  1312   002510  0EA2               	movlw	low main@motorL
  1313   002512  6E27               	movwf	return_to_sender@mL^0,c
  1314   002514  0EAB               	movlw	low main@motorR
  1315   002516  6E28               	movwf	return_to_sender@mR^0,c
  1316   002518  EC22  F016         	call	_return_to_sender	;wreg free
  1317   00251C  EF1E  F000         	goto	start
  1318   002520                     __end_of_main:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _return_to_sender *****************
  1322 ;; Defined at:
  1323 ;;		line 180 in file "timers.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  1326 ;;		 -> main@motorL(9), 
  1327 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  1328 ;;		 -> main@motorR(9), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  mann            1   42[COMRAM] unsigned char 
  1331 ;;  timerL          1   41[COMRAM] unsigned char 
  1332 ;;  timerH          1   40[COMRAM] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1343 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1345 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1346 ;;Total ram usage:        5 bytes
  1347 ;; Hardware stack levels used: 1
  1348 ;; Hardware stack levels required when called: 7
  1349 ;; This function calls:
  1350 ;;		_fullSpeedAhead
  1351 ;;		_pick_card
  1352 ;;		_read_trail
  1353 ;;		_start_timer
  1354 ;;		_stop
  1355 ;;		_stop_timer
  1356 ;;		_toggle_main_beam
  1357 ;;		_write_timer
  1358 ;; This function is called by:
  1359 ;;		_main
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text1
  1364   002C44                     __ptext1:
  1365                           	callstack 0
  1366   002C44                     _return_to_sender:
  1367                           	callstack 23
  1368   002C44                     
  1369                           ;timers.c: 180: void return_to_sender(DC_motor *mL, DC_motor *mR);timers.c: 181: {;timer
      +                          s.c: 182:     while (manoeuvre_count != 0) {
  1370   002C44  EF6A  F016         	goto	l3938
  1371   002C48                     l3912:
  1372                           
  1373                           ;timers.c: 183:         unsigned char timerH = 0;
  1374   002C48  0E00               	movlw	0
  1375   002C4A  6E29               	movwf	return_to_sender@timerH^0,c
  1376                           
  1377                           ;timers.c: 184:         unsigned char timerL = 0;
  1378   002C4C  0E00               	movlw	0
  1379   002C4E  6E2A               	movwf	return_to_sender@timerL^0,c
  1380                           
  1381                           ;timers.c: 185:         unsigned char mann = 0;
  1382   002C50  0E00               	movlw	0
  1383   002C52  6E2B               	movwf	return_to_sender@mann^0,c
  1384   002C54                     
  1385                           ;timers.c: 187:         read_trail(&timerH, &timerL, &mann);
  1386   002C54  0E29               	movlw	low return_to_sender@timerH
  1387   002C56  6E01               	movwf	read_trail@tH^0,c
  1388   002C58  0E2A               	movlw	low return_to_sender@timerL
  1389   002C5A  6E02               	movwf	read_trail@tL^0,c
  1390   002C5C  0E2B               	movlw	low return_to_sender@mann
  1391   002C5E  6E03               	movwf	read_trail@man^0,c
  1392   002C60  ECCF  F01A         	call	_read_trail	;wreg free
  1393   002C64                     
  1394                           ;timers.c: 191:         if (mann != 8) {
  1395   002C64  0E08               	movlw	8
  1396   002C66  182B               	xorwf	return_to_sender@mann^0,w,c
  1397   002C68  B4D8               	btfsc	status,2,c
  1398   002C6A  EF39  F016         	goto	u3141
  1399   002C6E  EF3B  F016         	goto	u3140
  1400   002C72                     u3141:
  1401   002C72  EF45  F016         	goto	l3920
  1402   002C76                     u3140:
  1403   002C76                     
  1404                           ;timers.c: 192:             pick_card(mL, mR, returning, mann);
  1405   002C76  C027  F021         	movff	return_to_sender@mL,pick_card@mL
  1406   002C7A  C028  F022         	movff	return_to_sender@mR,pick_card@mR
  1407   002C7E  C05D  F023         	movff	_returning,pick_card@backtrack
  1408   002C82  C02B  F024         	movff	return_to_sender@mann,pick_card@key
  1409   002C86  EC13  F013         	call	_pick_card	;wreg free
  1410   002C8A                     l3920:
  1411                           
  1412                           ;timers.c: 195:         toggle_main_beam();
  1413   002C8A  EC1A  F01C         	call	_toggle_main_beam	;wreg free
  1414   002C8E                     
  1415                           ;timers.c: 196:         write_timer(0b11111111 - timerH, 0b11111111 - timerL);
  1416   002C8E  502A               	movf	return_to_sender@timerL^0,w,c
  1417   002C90  0AFF               	xorlw	255
  1418   002C92  6E01               	movwf	write_timer@tL^0,c
  1419   002C94  5029               	movf	return_to_sender@timerH^0,w,c
  1420   002C96  0AFF               	xorlw	255
  1421   002C98  ECC8  F01C         	call	_write_timer
  1422   002C9C                     
  1423                           ;timers.c: 197:         start_timer();
  1424   002C9C  ECDF  F01C         	call	_start_timer	;wreg free
  1425   002CA0                     
  1426                           ;timers.c: 198:         fullSpeedAhead(mL, mR);
  1427   002CA0  C027  F013         	movff	return_to_sender@mL,fullSpeedAhead@mL
  1428   002CA4  C028  F014         	movff	return_to_sender@mR,fullSpeedAhead@mR
  1429   002CA8  EC60  F014         	call	_fullSpeedAhead	;wreg free
  1430   002CAC                     l3928:
  1431   002CAC  505C               	movf	_return_flag^0,w,c
  1432   002CAE  B4D8               	btfsc	status,2,c
  1433   002CB0  EF5C  F016         	goto	u3151
  1434   002CB4  EF5E  F016         	goto	u3150
  1435   002CB8                     u3151:
  1436   002CB8  EF56  F016         	goto	l3928
  1437   002CBC                     u3150:
  1438   002CBC                     
  1439                           ;timers.c: 202:         stop(mL, mR);
  1440   002CBC  C027  F013         	movff	return_to_sender@mL,stop@mL
  1441   002CC0  C028  F014         	movff	return_to_sender@mR,stop@mR
  1442   002CC4  ECBB  F016         	call	_stop	;wreg free
  1443   002CC8                     
  1444                           ;timers.c: 203:         stop_timer();
  1445   002CC8  ECDD  F01C         	call	_stop_timer	;wreg free
  1446   002CCC                     
  1447                           ;timers.c: 204:         return_flag = 0;
  1448   002CCC  0E00               	movlw	0
  1449   002CCE  6E5C               	movwf	_return_flag^0,c
  1450   002CD0                     
  1451                           ;timers.c: 205:         toggle_main_beam();
  1452   002CD0  EC1A  F01C         	call	_toggle_main_beam	;wreg free
  1453   002CD4                     l3938:
  1454                           
  1455                           ;timers.c: 182:     while (manoeuvre_count != 0) {
  1456   002CD4  505A               	movf	_manoeuvre_count^0,w,c
  1457   002CD6  A4D8               	btfss	status,2,c
  1458   002CD8  EF70  F016         	goto	u3161
  1459   002CDC  EF72  F016         	goto	u3160
  1460   002CE0                     u3161:
  1461   002CE0  EF24  F016         	goto	l3912
  1462   002CE4                     u3160:
  1463   002CE4  0012               	return		;funcret
  1464   002CE6                     __end_of_return_to_sender:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _toggle_main_beam *****************
  1468 ;; Defined at:
  1469 ;;		line 57 in file "buggy_lights.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels used: 1
  1489 ;; Hardware stack levels required when called: 1
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_return_to_sender
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text2
  1498   003834                     __ptext2:
  1499                           	callstack 0
  1500   003834                     _toggle_main_beam:
  1501                           	callstack 28
  1502   003834                     
  1503                           ;buggy_lights.c: 60:     LATDbits.LATD3 = !LATDbits.LATD3;
  1504   003834  A67C               	btfss	124,3,c	;volatile
  1505   003836  EF1F  F01C         	goto	u2411
  1506   00383A  EF23  F01C         	goto	u2410
  1507   00383E                     u2411:
  1508   00383E  6A01               	clrf	??_toggle_main_beam^0,c
  1509   003840  2A01               	incf	??_toggle_main_beam^0,f,c
  1510   003842  EF24  F01C         	goto	u2428
  1511   003846                     u2410:
  1512   003846  6A01               	clrf	??_toggle_main_beam^0,c
  1513   003848                     u2428:
  1514   003848  4601               	rlncf	??_toggle_main_beam^0,f,c
  1515   00384A  4601               	rlncf	??_toggle_main_beam^0,f,c
  1516   00384C  4601               	rlncf	??_toggle_main_beam^0,f,c
  1517   00384E  507C               	movf	124,w,c	;volatile
  1518   003850  1801               	xorwf	??_toggle_main_beam^0,w,c
  1519   003852  0BF7               	andlw	-9
  1520   003854  1801               	xorwf	??_toggle_main_beam^0,w,c
  1521   003856  6E7C               	movwf	124,c	;volatile
  1522   003858  0012               	return		;funcret
  1523   00385A                     __end_of_toggle_main_beam:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _read_trail *****************
  1527 ;; Defined at:
  1528 ;;		line 81 in file "timers.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  tH              1    0[COMRAM] PTR unsigned char 
  1531 ;;		 -> return_to_sender@timerH(1), 
  1532 ;;  tL              1    1[COMRAM] PTR unsigned char 
  1533 ;;		 -> return_to_sender@timerL(1), 
  1534 ;;  man             1    2[COMRAM] PTR unsigned char 
  1535 ;;		 -> return_to_sender@mann(1), 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1547 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1550 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1551 ;;Total ram usage:        3 bytes
  1552 ;; Hardware stack levels used: 1
  1553 ;; Hardware stack levels required when called: 1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_return_to_sender
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text3
  1562   00359E                     __ptext3:
  1563                           	callstack 0
  1564   00359E                     _read_trail:
  1565                           	callstack 28
  1566   00359E                     
  1567                           ;timers.c: 81: void read_trail(unsigned char *tH, unsigned char *tL, unsigned char *man)
      +                          ;timers.c: 82: {;timers.c: 83:     timer_high_pointer --;
  1568   00359E  0651               	decf	_timer_high_pointer^0,f,c
  1569                           
  1570                           ;timers.c: 84:     timer_low_pointer --;
  1571   0035A0  0650               	decf	_timer_low_pointer^0,f,c
  1572                           
  1573                           ;timers.c: 85:     manoeuvre_pointer --;
  1574   0035A2  064F               	decf	_manoeuvre_pointer^0,f,c
  1575                           
  1576                           ;timers.c: 87:     manoeuvre_count --;
  1577   0035A4  065A               	decf	_manoeuvre_count^0,f,c
  1578   0035A6                     
  1579                           ;timers.c: 89:     *tH = *timer_high_pointer;
  1580   0035A6  5051               	movf	_timer_high_pointer^0,w,c
  1581   0035A8  6ED9               	movwf	fsr2l,c
  1582   0035AA  6ADA               	clrf	fsr2h,c
  1583   0035AC  5001               	movf	read_trail@tH^0,w,c
  1584   0035AE  6EE1               	movwf	fsr1l,c
  1585   0035B0  6AE2               	clrf	fsr1h,c
  1586   0035B2  CFDF FFE7          	movff	indf2,indf1
  1587   0035B6                     
  1588                           ;timers.c: 90:     *tL = *timer_low_pointer;
  1589   0035B6  5050               	movf	_timer_low_pointer^0,w,c
  1590   0035B8  6ED9               	movwf	fsr2l,c
  1591   0035BA  6ADA               	clrf	fsr2h,c
  1592   0035BC  5002               	movf	read_trail@tL^0,w,c
  1593   0035BE  6EE1               	movwf	fsr1l,c
  1594   0035C0  6AE2               	clrf	fsr1h,c
  1595   0035C2  CFDF FFE7          	movff	indf2,indf1
  1596   0035C6                     
  1597                           ;timers.c: 91:     *man = *manoeuvre_pointer;
  1598   0035C6  504F               	movf	_manoeuvre_pointer^0,w,c
  1599   0035C8  6ED9               	movwf	fsr2l,c
  1600   0035CA  6ADA               	clrf	fsr2h,c
  1601   0035CC  5003               	movf	read_trail@man^0,w,c
  1602   0035CE  6EE1               	movwf	fsr1l,c
  1603   0035D0  6AE2               	clrf	fsr1h,c
  1604   0035D2  CFDF FFE7          	movff	indf2,indf1
  1605   0035D6  0012               	return		;funcret
  1606   0035D8                     __end_of_read_trail:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _initUSART4 *****************
  1610 ;; Defined at:
  1611 ;;		line 8 in file "serial.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1629 ;;Total ram usage:        0 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text4
  1640   003928                     __ptext4:
  1641                           	callstack 0
  1642   003928                     _initUSART4:
  1643                           	callstack 29
  1644   003928                     
  1645                           ;serial.c: 9:     RC0PPS = 0x12;
  1646   003928  0E12               	movlw	18
  1647   00392A  010E               	movlb	14	; () banked
  1648   00392C  6F62               	movwf	98,b	;volatile
  1649                           
  1650                           ;serial.c: 10:     RX4PPS = 0x11;
  1651   00392E  0E11               	movlw	17
  1652   003930  6F15               	movwf	21,b	;volatile
  1653   003932                     
  1654                           ; BSR set to: 14
  1655                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1656   003932  97E9               	bcf	233,3,b	;volatile
  1657   003934                     
  1658                           ; BSR set to: 14
  1659                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1660   003934  95E8               	bcf	232,2,b	;volatile
  1661                           
  1662                           ;serial.c: 14:     SP4BRGL = 51;
  1663   003936  0E33               	movlw	51
  1664   003938  6FE5               	movwf	229,b	;volatile
  1665                           
  1666                           ;serial.c: 15:     SP4BRGH = 0;
  1667   00393A  0E00               	movlw	0
  1668   00393C  6FE6               	movwf	230,b	;volatile
  1669   00393E                     
  1670                           ; BSR set to: 14
  1671                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1672   00393E  89E7               	bsf	231,4,b	;volatile
  1673   003940                     
  1674                           ; BSR set to: 14
  1675                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1676   003940  8BE8               	bsf	232,5,b	;volatile
  1677   003942                     
  1678                           ; BSR set to: 14
  1679                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1680   003942  8FE7               	bsf	231,7,b	;volatile
  1681   003944                     
  1682                           ; BSR set to: 14
  1683   003944  0012               	return		;funcret
  1684   003946                     __end_of_initUSART4:
  1685                           	callstack 0
  1686                           
  1687 ;; *************** function _initDCmotorsPWM *****************
  1688 ;; Defined at:
  1689 ;;		line 7 in file "dc_motor.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg, status,2
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1703 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1707 ;;Total ram usage:        2 bytes
  1708 ;; Hardware stack levels used: 1
  1709 ;; Hardware stack levels required when called: 1
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text5
  1718   002CE6                     __ptext5:
  1719                           	callstack 0
  1720   002CE6                     _initDCmotorsPWM:
  1721                           	callstack 29
  1722   002CE6                     
  1723                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
  1724   002CE6  9485               	bcf	133,2,c	;volatile
  1725                           
  1726                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1727   002CE8  9885               	bcf	133,4,c	;volatile
  1728                           
  1729                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
  1730   002CEA  9E83               	bcf	131,7,c	;volatile
  1731                           
  1732                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
  1733   002CEC  9C87               	bcf	135,6,c	;volatile
  1734                           
  1735                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
  1736   002CEE  947D               	bcf	125,2,c	;volatile
  1737                           
  1738                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
  1739   002CF0  987D               	bcf	125,4,c	;volatile
  1740                           
  1741                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
  1742   002CF2  9E7B               	bcf	123,7,c	;volatile
  1743                           
  1744                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
  1745   002CF4  9C7F               	bcf	127,6,c	;volatile
  1746   002CF6                     
  1747                           ;dc_motor.c: 19:     RE2PPS=0x05;
  1748   002CF6  0E05               	movlw	5
  1749   002CF8  010E               	movlb	14	; () banked
  1750   002CFA  6F74               	movwf	116,b	;volatile
  1751                           
  1752                           ;dc_motor.c: 20:     RE4PPS=0x06;
  1753   002CFC  0E06               	movlw	6
  1754   002CFE  6F76               	movwf	118,b	;volatile
  1755                           
  1756                           ;dc_motor.c: 21:     RC7PPS=0x07;
  1757   002D00  0E07               	movlw	7
  1758   002D02  6F69               	movwf	105,b	;volatile
  1759                           
  1760                           ;dc_motor.c: 22:     RG6PPS=0x08;
  1761   002D04  0E08               	movlw	8
  1762   002D06  6F88               	movwf	136,b	;volatile
  1763                           
  1764                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  1765   002D08  50BD               	movf	189,w,c	;volatile
  1766   002D0A  0B8F               	andlw	-113
  1767   002D0C  0940               	iorlw	64
  1768   002D0E  6EBD               	movwf	189,c	;volatile
  1769                           
  1770                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  1771   002D10  0EE0               	movlw	-32
  1772   002D12  16BE               	andwf	190,f,c	;volatile
  1773                           
  1774                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  1775   002D14  50BF               	movf	191,w,c	;volatile
  1776   002D16  0BF0               	andlw	-16
  1777   002D18  0901               	iorlw	1
  1778   002D1A  6EBF               	movwf	191,c	;volatile
  1779   002D1C                     
  1780                           ; BSR set to: 14
  1781                           ;dc_motor.c: 31:     T2PR=(unsigned char)PWMperiod;
  1782   002D1C  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1783   002D20                     
  1784                           ; BSR set to: 14
  1785                           ;dc_motor.c: 32:     T2CONbits.ON=1;
  1786   002D20  8EBD               	bsf	189,7,c	;volatile
  1787                           
  1788                           ;dc_motor.c: 36:         CCPR1H=0;
  1789   002D22  0E00               	movlw	0
  1790   002D24  6EAA               	movwf	170,c	;volatile
  1791                           
  1792                           ;dc_motor.c: 37:         CCPR2H=0;
  1793   002D26  0E00               	movlw	0
  1794   002D28  6EA6               	movwf	166,c	;volatile
  1795                           
  1796                           ;dc_motor.c: 38:         CCPR3H=0;
  1797   002D2A  0E00               	movlw	0
  1798   002D2C  010F               	movlb	15	; () banked
  1799   002D2E  6F25               	movwf	37,b	;volatile
  1800                           
  1801                           ;dc_motor.c: 39:         CCPR4H=0;
  1802   002D30  0E00               	movlw	0
  1803   002D32  6F21               	movwf	33,b	;volatile
  1804                           
  1805                           ;dc_motor.c: 42:         CCPTMRS0bits.C1TSEL=0;
  1806   002D34  0EFC               	movlw	-4
  1807   002D36  16AD               	andwf	173,f,c	;volatile
  1808                           
  1809                           ;dc_motor.c: 43:         CCPTMRS0bits.C2TSEL=0;
  1810   002D38  0EF3               	movlw	-13
  1811   002D3A  16AD               	andwf	173,f,c	;volatile
  1812                           
  1813                           ;dc_motor.c: 44:         CCPTMRS0bits.C3TSEL=0;
  1814   002D3C  0ECF               	movlw	-49
  1815   002D3E  16AD               	andwf	173,f,c	;volatile
  1816                           
  1817                           ;dc_motor.c: 45:         CCPTMRS0bits.C4TSEL=0;
  1818   002D40  0E3F               	movlw	-193
  1819   002D42  16AD               	andwf	173,f,c	;volatile
  1820   002D44                     
  1821                           ; BSR set to: 15
  1822                           ;dc_motor.c: 48:         CCP1CONbits.FMT=1;
  1823   002D44  88AB               	bsf	171,4,c	;volatile
  1824                           
  1825                           ;dc_motor.c: 49:         CCP1CONbits.CCP1MODE=0b1100;
  1826   002D46  50AB               	movf	171,w,c	;volatile
  1827   002D48  0BF0               	andlw	-16
  1828   002D4A  090C               	iorlw	12
  1829   002D4C  6EAB               	movwf	171,c	;volatile
  1830   002D4E                     
  1831                           ; BSR set to: 15
  1832                           ;dc_motor.c: 50:         CCP1CONbits.EN=1;
  1833   002D4E  8EAB               	bsf	171,7,c	;volatile
  1834   002D50                     
  1835                           ; BSR set to: 15
  1836                           ;dc_motor.c: 52:         CCP2CONbits.FMT=1;
  1837   002D50  88A7               	bsf	167,4,c	;volatile
  1838                           
  1839                           ;dc_motor.c: 53:         CCP2CONbits.CCP2MODE=0b1100;
  1840   002D52  50A7               	movf	167,w,c	;volatile
  1841   002D54  0BF0               	andlw	-16
  1842   002D56  090C               	iorlw	12
  1843   002D58  6EA7               	movwf	167,c	;volatile
  1844   002D5A                     
  1845                           ; BSR set to: 15
  1846                           ;dc_motor.c: 54:         CCP2CONbits.EN=1;
  1847   002D5A  8EA7               	bsf	167,7,c	;volatile
  1848   002D5C                     
  1849                           ; BSR set to: 15
  1850                           ;dc_motor.c: 56:         CCP3CONbits.FMT=1;
  1851   002D5C  8926               	bsf	38,4,b	;volatile
  1852                           
  1853                           ;dc_motor.c: 57:         CCP3CONbits.CCP3MODE=0b1100;
  1854   002D5E  5126               	movf	38,w,b	;volatile
  1855   002D60  0BF0               	andlw	-16
  1856   002D62  090C               	iorlw	12
  1857   002D64  6F26               	movwf	38,b	;volatile
  1858   002D66                     
  1859                           ; BSR set to: 15
  1860                           ;dc_motor.c: 58:         CCP3CONbits.EN=1;
  1861   002D66  8F26               	bsf	38,7,b	;volatile
  1862   002D68                     
  1863                           ; BSR set to: 15
  1864                           ;dc_motor.c: 60:         CCP4CONbits.FMT=1;
  1865   002D68  8922               	bsf	34,4,b	;volatile
  1866                           
  1867                           ;dc_motor.c: 61:         CCP4CONbits.CCP4MODE=0b1100;
  1868   002D6A  5122               	movf	34,w,b	;volatile
  1869   002D6C  0BF0               	andlw	-16
  1870   002D6E  090C               	iorlw	12
  1871   002D70  6F22               	movwf	34,b	;volatile
  1872   002D72                     
  1873                           ; BSR set to: 15
  1874                           ;dc_motor.c: 62:         CCP4CONbits.EN=1;
  1875   002D72  8F22               	bsf	34,7,b	;volatile
  1876   002D74                     
  1877                           ; BSR set to: 15
  1878   002D74  0012               	return		;funcret
  1879   002D76                     __end_of_initDCmotorsPWM:
  1880                           	callstack 0
  1881                           
  1882 ;; *************** function _forward_navigation *****************
  1883 ;; Defined at:
  1884 ;;		line 116 in file "timers.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  mL              1   65[COMRAM] PTR struct DC_motor
  1887 ;;		 -> main@motorL(9), 
  1888 ;;  mR              1   66[COMRAM] PTR struct DC_motor
  1889 ;;		 -> main@motorR(9), 
  1890 ;;  p1              1   67[COMRAM] PTR struct HSV_val
  1891 ;;		 -> main@HSV_colour(6), 
  1892 ;;  p2              1   68[COMRAM] PTR struct RGBC_val
  1893 ;;		 -> main@RGBC_colour(8), 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  mann            1   73[COMRAM] unsigned char 
  1896 ;;  timerL          1   72[COMRAM] unsigned char 
  1897 ;;  timerH          1   71[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1911 ;;Total ram usage:        9 bytes
  1912 ;; Hardware stack levels used: 1
  1913 ;; Hardware stack levels required when called: 7
  1914 ;; This function calls:
  1915 ;;		_average_RGBC
  1916 ;;		_colour_to_key
  1917 ;;		_convert_HSV
  1918 ;;		_fullSpeedAhead
  1919 ;;		_pick_card
  1920 ;;		_read_timer
  1921 ;;		_reset_timer
  1922 ;;		_scale_RGB
  1923 ;;		_start_timer
  1924 ;;		_stop
  1925 ;;		_stop_timer
  1926 ;;		_toggle_tricolour_LED
  1927 ;;		_wait_for_wall
  1928 ;;		_write_trail
  1929 ;; This function is called by:
  1930 ;;		_main
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text6
  1935   002124                     __ptext6:
  1936                           	callstack 0
  1937   002124                     _forward_navigation:
  1938                           	callstack 23
  1939   002124                     
  1940                           ;timers.c: 116: void forward_navigation(DC_motor *mL, DC_motor *mR, HSV_val *p1, RGBC_va
      +                          l *p2);timers.c: 117: {;timers.c: 118:     while (!returning) {
  1941   002124  EF3D  F011         	goto	l3908
  1942   002128                     l3858:
  1943                           
  1944                           ;timers.c: 119:         unsigned char timerH = 0;
  1945   002128  0E00               	movlw	0
  1946   00212A  6E48               	movwf	forward_navigation@timerH^0,c
  1947                           
  1948                           ;timers.c: 120:         unsigned char timerL = 0;
  1949   00212C  0E00               	movlw	0
  1950   00212E  6E49               	movwf	forward_navigation@timerL^0,c
  1951   002130                     
  1952                           ;timers.c: 123:         reset_timer();
  1953   002130  ECC2  F01C         	call	_reset_timer	;wreg free
  1954                           
  1955                           ;timers.c: 124:         start_timer();
  1956   002134  ECDF  F01C         	call	_start_timer	;wreg free
  1957   002138                     
  1958                           ;timers.c: 125:         fullSpeedAhead(mL, mR);
  1959   002138  C042  F013         	movff	forward_navigation@mL,fullSpeedAhead@mL
  1960   00213C  C043  F014         	movff	forward_navigation@mR,fullSpeedAhead@mR
  1961   002140  EC60  F014         	call	_fullSpeedAhead	;wreg free
  1962   002144                     
  1963                           ;timers.c: 127:         wait_for_wall(p2, lost_flag);
  1964   002144  C045  F00D         	movff	forward_navigation@p2,wait_for_wall@p
  1965   002148  C05B  F00E         	movff	_lost_flag,wait_for_wall@loss
  1966   00214C  EC6B  F01A         	call	_wait_for_wall	;wreg free
  1967   002150                     
  1968                           ;timers.c: 129:         read_timer(&timerH, &timerL);
  1969   002150  0E48               	movlw	low forward_navigation@timerH
  1970   002152  6E01               	movwf	read_timer@tH^0,c
  1971   002154  0E49               	movlw	low forward_navigation@timerL
  1972   002156  6E02               	movwf	read_timer@tL^0,c
  1973   002158  ECA3  F01C         	call	_read_timer	;wreg free
  1974   00215C                     
  1975                           ;timers.c: 130:         stop_timer();
  1976   00215C  ECDD  F01C         	call	_stop_timer	;wreg free
  1977                           
  1978                           ;timers.c: 131:         stop(mL, mR);
  1979   002160  C042  F013         	movff	forward_navigation@mL,stop@mL
  1980   002164  C043  F014         	movff	forward_navigation@mR,stop@mR
  1981   002168  ECBB  F016         	call	_stop	;wreg free
  1982   00216C                     
  1983                           ;timers.c: 133:         toggle_tricolour_LED();
  1984   00216C  ECFC  F013         	call	_toggle_tricolour_LED	;wreg free
  1985   002170                     
  1986                           ;timers.c: 134:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1987   002170  0E11               	movlw	17
  1988   002172  6E47               	movwf	(??_forward_navigation+1)^0,c
  1989   002174  0E3C               	movlw	60
  1990   002176  6E46               	movwf	??_forward_navigation^0,c
  1991   002178  0ECB               	movlw	203
  1992   00217A                     u3237:
  1993   00217A  2EE8               	decfsz	wreg,f,c
  1994   00217C  D7FE               	bra	u3237
  1995   00217E  2E46               	decfsz	??_forward_navigation^0,f,c
  1996   002180  D7FC               	bra	u3237
  1997   002182  2E47               	decfsz	(??_forward_navigation+1)^0,f,c
  1998   002184  D7FA               	bra	u3237
  1999   002186  0000               	nop	
  2000   002188                     
  2001                           ;timers.c: 136:         average_RGBC(p2);
  2002   002188  C045  F00E         	movff	forward_navigation@p2,average_RGBC@p
  2003   00218C  ECBA  F00E         	call	_average_RGBC	;wreg free
  2004   002190                     
  2005                           ;timers.c: 137:         scale_RGB(p2);
  2006   002190  C045  F032         	movff	forward_navigation@p2,scale_RGB@p
  2007   002194  EC91  F013         	call	_scale_RGB	;wreg free
  2008   002198                     
  2009                           ;timers.c: 139:         convert_HSV(p1, p2);
  2010   002198  C044  F00E         	movff	forward_navigation@p1,convert_HSV@p1
  2011   00219C  C045  F00F         	movff	forward_navigation@p2,convert_HSV@p2
  2012   0021A0  EC0D  F007         	call	_convert_HSV	;wreg free
  2013   0021A4                     
  2014                           ;timers.c: 140:         mann = colour_to_key(p1, p2);
  2015   0021A4  C044  F001         	movff	forward_navigation@p1,colour_to_key@p1
  2016   0021A8  C045  F002         	movff	forward_navigation@p2,colour_to_key@p2
  2017   0021AC  EC73  F00A         	call	_colour_to_key	;wreg free
  2018   0021B0  6E4A               	movwf	forward_navigation@mann^0,c
  2019   0021B2                     
  2020                           ;timers.c: 142:         toggle_tricolour_LED();
  2021   0021B2  ECFC  F013         	call	_toggle_tricolour_LED	;wreg free
  2022   0021B6                     
  2023                           ;timers.c: 143:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2024   0021B6  0E11               	movlw	17
  2025   0021B8  6E47               	movwf	(??_forward_navigation+1)^0,c
  2026   0021BA  0E3C               	movlw	60
  2027   0021BC  6E46               	movwf	??_forward_navigation^0,c
  2028   0021BE  0ECB               	movlw	203
  2029   0021C0                     u3247:
  2030   0021C0  2EE8               	decfsz	wreg,f,c
  2031   0021C2  D7FE               	bra	u3247
  2032   0021C4  2E46               	decfsz	??_forward_navigation^0,f,c
  2033   0021C6  D7FC               	bra	u3247
  2034   0021C8  2E47               	decfsz	(??_forward_navigation+1)^0,f,c
  2035   0021CA  D7FA               	bra	u3247
  2036   0021CC  0000               	nop	
  2037   0021CE                     
  2038                           ;timers.c: 152:         if (lost_flag) {
  2039   0021CE  505B               	movf	_lost_flag^0,w,c
  2040   0021D0  B4D8               	btfsc	status,2,c
  2041   0021D2  EFED  F010         	goto	u3061
  2042   0021D6  EFEF  F010         	goto	u3060
  2043   0021DA                     u3061:
  2044   0021DA  EF04  F011         	goto	l3894
  2045   0021DE                     u3060:
  2046   0021DE                     
  2047                           ;timers.c: 153:             timerH = 0b11111111;
  2048   0021DE  6848               	setf	forward_navigation@timerH^0,c
  2049                           
  2050                           ;timers.c: 154:             timerL = 0b11111111;
  2051   0021E0  6849               	setf	forward_navigation@timerL^0,c
  2052   0021E2                     
  2053                           ;timers.c: 155:             mann = 8;
  2054   0021E2  0E08               	movlw	8
  2055   0021E4  6E4A               	movwf	forward_navigation@mann^0,c
  2056   0021E6                     
  2057                           ;timers.c: 156:             LATDbits.LATD7 = !LATDbits.LATD7;
  2058   0021E6  AE7C               	btfss	124,7,c	;volatile
  2059   0021E8  EFF8  F010         	goto	u3071
  2060   0021EC  EFFC  F010         	goto	u3070
  2061   0021F0                     u3071:
  2062   0021F0  6A46               	clrf	??_forward_navigation^0,c
  2063   0021F2  2A46               	incf	??_forward_navigation^0,f,c
  2064   0021F4  EFFD  F010         	goto	u3088
  2065   0021F8                     u3070:
  2066   0021F8  6A46               	clrf	??_forward_navigation^0,c
  2067   0021FA                     u3088:
  2068   0021FA  3246               	rrcf	??_forward_navigation^0,f,c
  2069   0021FC  3246               	rrcf	??_forward_navigation^0,f,c
  2070   0021FE  507C               	movf	124,w,c	;volatile
  2071   002200  1846               	xorwf	??_forward_navigation^0,w,c
  2072   002202  0B7F               	andlw	-129
  2073   002204  1846               	xorwf	??_forward_navigation^0,w,c
  2074   002206  6E7C               	movwf	124,c	;volatile
  2075   002208                     l3894:
  2076                           
  2077                           ;timers.c: 159:         if (manoeuvre_count == 19) {
  2078   002208  0E13               	movlw	19
  2079   00220A  185A               	xorwf	_manoeuvre_count^0,w,c
  2080   00220C  A4D8               	btfss	status,2,c
  2081   00220E  EF0B  F011         	goto	u3091
  2082   002212  EF0D  F011         	goto	u3090
  2083   002216                     u3091:
  2084   002216  EF0F  F011         	goto	l3898
  2085   00221A                     u3090:
  2086   00221A                     
  2087                           ;timers.c: 160:             mann = 8;
  2088   00221A  0E08               	movlw	8
  2089   00221C  6E4A               	movwf	forward_navigation@mann^0,c
  2090   00221E                     l3898:
  2091                           
  2092                           ;timers.c: 163:         write_trail(timerH, timerL, mann);
  2093   00221E  C049  F001         	movff	forward_navigation@timerL,write_trail@tL
  2094   002222  C04A  F002         	movff	forward_navigation@mann,write_trail@man
  2095   002226  5048               	movf	forward_navigation@timerH^0,w,c
  2096   002228  ECC8  F01B         	call	_write_trail
  2097   00222C                     
  2098                           ;timers.c: 164:         pick_card(mL, mR, returning, mann);
  2099   00222C  C042  F021         	movff	forward_navigation@mL,pick_card@mL
  2100   002230  C043  F022         	movff	forward_navigation@mR,pick_card@mR
  2101   002234  C05D  F023         	movff	_returning,pick_card@backtrack
  2102   002238  C04A  F024         	movff	forward_navigation@mann,pick_card@key
  2103   00223C  EC13  F013         	call	_pick_card	;wreg free
  2104   002240                     
  2105                           ;timers.c: 166:         if (mann == 8) {
  2106   002240  0E08               	movlw	8
  2107   002242  184A               	xorwf	forward_navigation@mann^0,w,c
  2108   002244  A4D8               	btfss	status,2,c
  2109   002246  EF27  F011         	goto	u3101
  2110   00224A  EF29  F011         	goto	u3100
  2111   00224E                     u3101:
  2112   00224E  EF3D  F011         	goto	l3908
  2113   002252                     u3100:
  2114   002252                     
  2115                           ;timers.c: 167:             returning = 1;
  2116   002252  0E01               	movlw	1
  2117   002254  6E5D               	movwf	_returning^0,c
  2118   002256                     
  2119                           ;timers.c: 168:             LATHbits.LATH3 = !LATHbits.LATH3;
  2120   002256  A680               	btfss	128,3,c	;volatile
  2121   002258  EF30  F011         	goto	u3111
  2122   00225C  EF34  F011         	goto	u3110
  2123   002260                     u3111:
  2124   002260  6A46               	clrf	??_forward_navigation^0,c
  2125   002262  2A46               	incf	??_forward_navigation^0,f,c
  2126   002264  EF35  F011         	goto	u3128
  2127   002268                     u3110:
  2128   002268  6A46               	clrf	??_forward_navigation^0,c
  2129   00226A                     u3128:
  2130   00226A  4646               	rlncf	??_forward_navigation^0,f,c
  2131   00226C  4646               	rlncf	??_forward_navigation^0,f,c
  2132   00226E  4646               	rlncf	??_forward_navigation^0,f,c
  2133   002270  5080               	movf	128,w,c	;volatile
  2134   002272  1846               	xorwf	??_forward_navigation^0,w,c
  2135   002274  0BF7               	andlw	-9
  2136   002276  1846               	xorwf	??_forward_navigation^0,w,c
  2137   002278  6E80               	movwf	128,c	;volatile
  2138   00227A                     l3908:
  2139                           
  2140                           ;timers.c: 118:     while (!returning) {
  2141   00227A  505D               	movf	_returning^0,w,c
  2142   00227C  B4D8               	btfsc	status,2,c
  2143   00227E  EF43  F011         	goto	u3131
  2144   002282  EF45  F011         	goto	u3130
  2145   002286                     u3131:
  2146   002286  EF94  F010         	goto	l3858
  2147   00228A                     u3130:
  2148   00228A  0012               	return		;funcret
  2149   00228C                     __end_of_forward_navigation:
  2150                           	callstack 0
  2151                           
  2152 ;; *************** function _write_trail *****************
  2153 ;; Defined at:
  2154 ;;		line 100 in file "timers.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  tH              1    wreg     unsigned char 
  2157 ;;  tL              1    0[COMRAM] unsigned char 
  2158 ;;  man             1    1[COMRAM] unsigned char 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  tH              1    2[COMRAM] unsigned char 
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2170 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2173 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2174 ;;Total ram usage:        3 bytes
  2175 ;; Hardware stack levels used: 1
  2176 ;; Hardware stack levels required when called: 1
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_forward_navigation
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text7
  2185   003790                     __ptext7:
  2186                           	callstack 0
  2187   003790                     _write_trail:
  2188                           	callstack 28
  2189                           
  2190                           ;incstack = 0
  2191                           ;write_trail@tH stored from wreg
  2192   003790  6E03               	movwf	write_trail@tH^0,c
  2193   003792                     
  2194                           ;timers.c: 100: void write_trail(unsigned char tH, unsigned char tL, unsigned char man);
      +                          timers.c: 101: {;timers.c: 102:     *timer_high_pointer = tH;
  2195   003792  5051               	movf	_timer_high_pointer^0,w,c
  2196   003794  6ED9               	movwf	fsr2l,c
  2197   003796  6ADA               	clrf	fsr2h,c
  2198   003798  C003  FFDF         	movff	write_trail@tH,indf2
  2199                           
  2200                           ;timers.c: 103:     *timer_low_pointer = tL;
  2201   00379C  5050               	movf	_timer_low_pointer^0,w,c
  2202   00379E  6ED9               	movwf	fsr2l,c
  2203   0037A0  6ADA               	clrf	fsr2h,c
  2204   0037A2  C001  FFDF         	movff	write_trail@tL,indf2
  2205                           
  2206                           ;timers.c: 104:     *manoeuvre_pointer = man;
  2207   0037A6  504F               	movf	_manoeuvre_pointer^0,w,c
  2208   0037A8  6ED9               	movwf	fsr2l,c
  2209   0037AA  6ADA               	clrf	fsr2h,c
  2210   0037AC  C002  FFDF         	movff	write_trail@man,indf2
  2211   0037B0                     
  2212                           ;timers.c: 106:     timer_high_pointer ++;
  2213   0037B0  2A51               	incf	_timer_high_pointer^0,f,c
  2214   0037B2                     
  2215                           ;timers.c: 107:     timer_low_pointer ++;
  2216   0037B2  2A50               	incf	_timer_low_pointer^0,f,c
  2217   0037B4                     
  2218                           ;timers.c: 108:     manoeuvre_pointer ++;
  2219   0037B4  2A4F               	incf	_manoeuvre_pointer^0,f,c
  2220   0037B6                     
  2221                           ;timers.c: 110:     manoeuvre_count ++;
  2222   0037B6  2A5A               	incf	_manoeuvre_count^0,f,c
  2223   0037B8  0012               	return		;funcret
  2224   0037BA                     __end_of_write_trail:
  2225                           	callstack 0
  2226                           
  2227 ;; *************** function _wait_for_wall *****************
  2228 ;; Defined at:
  2229 ;;		line 162 in file "color.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  p               1   12[COMRAM] PTR struct RGBC_val
  2232 ;;		 -> main@RGBC_colour(8), 
  2233 ;;  loss            1   13[COMRAM] unsigned char 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2245 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2248 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2249 ;;Total ram usage:        4 bytes
  2250 ;; Hardware stack levels used: 1
  2251 ;; Hardware stack levels required when called: 5
  2252 ;; This function calls:
  2253 ;;		_getRGBCval
  2254 ;; This function is called by:
  2255 ;;		_forward_navigation
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	text8
  2260   0034D6                     __ptext8:
  2261                           	callstack 0
  2262   0034D6                     _wait_for_wall:
  2263                           	callstack 24
  2264   0034D6                     
  2265                           ;color.c: 162: void wait_for_wall(struct RGBC_val *p, unsigned char loss);color.c: 163: 
      +                          {;color.c: 164:     while (!loss) {
  2266   0034D6  EF84  F01A         	goto	l3510
  2267   0034DA                     l3504:
  2268                           
  2269                           ;color.c: 165:         getRGBCval(p);
  2270   0034DA  C00D  F00C         	movff	wait_for_wall@p,getRGBCval@p
  2271   0034DE  ECA0  F019         	call	_getRGBCval	;wreg free
  2272   0034E2  500D               	movf	wait_for_wall@p^0,w,c
  2273   0034E4  6ED9               	movwf	fsr2l,c
  2274   0034E6  6ADA               	clrf	fsr2h,c
  2275   0034E8  0E06               	movlw	6
  2276   0034EA  26D9               	addwf	fsr2l,f,c
  2277   0034EC  0E01               	movlw	1
  2278   0034EE  50DB               	movf	plusw2,w,c
  2279   0034F0  E107               	bnz	u2561
  2280   0034F2  0E32               	movlw	50
  2281   0034F4  5CDE               	subwf	postinc2,w,c
  2282   0034F6  B0D8               	btfsc	status,0,c
  2283   0034F8  EF80  F01A         	goto	u2561
  2284   0034FC  EF82  F01A         	goto	u2560
  2285   003500                     u2561:
  2286   003500  EF84  F01A         	goto	l3510
  2287   003504                     u2560:
  2288   003504  EF8C  F01A         	goto	l96
  2289   003508                     l3510:
  2290                           
  2291                           ;color.c: 164:     while (!loss) {
  2292   003508  500E               	movf	wait_for_wall@loss^0,w,c
  2293   00350A  B4D8               	btfsc	status,2,c
  2294   00350C  EF8A  F01A         	goto	u2571
  2295   003510  EF8C  F01A         	goto	u2570
  2296   003514                     u2571:
  2297   003514  EF6D  F01A         	goto	l3504
  2298   003518                     u2570:
  2299   003518                     l96:
  2300   003518  0012               	return		;funcret
  2301   00351A                     __end_of_wait_for_wall:
  2302                           	callstack 0
  2303                           
  2304 ;; *************** function _toggle_tricolour_LED *****************
  2305 ;; Defined at:
  2306 ;;		line 84 in file "buggy_lights.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;		None
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;		None
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2, status,0
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2323 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2324 ;;Total ram usage:        1 bytes
  2325 ;; Hardware stack levels used: 1
  2326 ;; Hardware stack levels required when called: 1
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_forward_navigation
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text9
  2335   0027F8                     __ptext9:
  2336                           	callstack 0
  2337   0027F8                     _toggle_tricolour_LED:
  2338                           	callstack 28
  2339   0027F8                     
  2340                           ;buggy_lights.c: 88:         LATGbits.LATG1 = !LATGbits.LATG1;
  2341   0027F8  A27F               	btfss	127,1,c	;volatile
  2342   0027FA  EF01  F014         	goto	u2431
  2343   0027FE  EF05  F014         	goto	u2430
  2344   002802                     u2431:
  2345   002802  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2346   002804  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2347   002806  EF06  F014         	goto	u2448
  2348   00280A                     u2430:
  2349   00280A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2350   00280C                     u2448:
  2351   00280C  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2352   00280E  507F               	movf	127,w,c	;volatile
  2353   002810  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2354   002812  0BFD               	andlw	-3
  2355   002814  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2356   002816  6E7F               	movwf	127,c	;volatile
  2357                           
  2358                           ;buggy_lights.c: 89:         LATAbits.LATA4 = !LATAbits.LATA4;
  2359   002818  A879               	btfss	121,4,c	;volatile
  2360   00281A  EF11  F014         	goto	u2451
  2361   00281E  EF15  F014         	goto	u2450
  2362   002822                     u2451:
  2363   002822  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2364   002824  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2365   002826  EF16  F014         	goto	u2468
  2366   00282A                     u2450:
  2367   00282A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2368   00282C                     u2468:
  2369   00282C  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  2370   00282E  5079               	movf	121,w,c	;volatile
  2371   002830  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2372   002832  0BEF               	andlw	-17
  2373   002834  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2374   002836  6E79               	movwf	121,c	;volatile
  2375                           
  2376                           ;buggy_lights.c: 90:         LATFbits.LATF7 = !LATFbits.LATF7;
  2377   002838  AE7E               	btfss	126,7,c	;volatile
  2378   00283A  EF21  F014         	goto	u2471
  2379   00283E  EF25  F014         	goto	u2470
  2380   002842                     u2471:
  2381   002842  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2382   002844  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2383   002846  EF26  F014         	goto	u2488
  2384   00284A                     u2470:
  2385   00284A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2386   00284C                     u2488:
  2387   00284C  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2388   00284E  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2389   002850  507E               	movf	126,w,c	;volatile
  2390   002852  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2391   002854  0B7F               	andlw	-129
  2392   002856  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2393   002858  6E7E               	movwf	126,c	;volatile
  2394                           
  2395                           ;buggy_lights.c: 93:         LATGbits.LATG0 = !LATGbits.LATG0;
  2396   00285A  A07F               	btfss	127,0,c	;volatile
  2397   00285C  EF32  F014         	goto	u2491
  2398   002860  EF36  F014         	goto	u2490
  2399   002864                     u2491:
  2400   002864  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2401   002866  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2402   002868  EF37  F014         	goto	u2508
  2403   00286C                     u2490:
  2404   00286C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2405   00286E                     u2508:
  2406   00286E  507F               	movf	127,w,c	;volatile
  2407   002870  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2408   002872  0BFE               	andlw	-2
  2409   002874  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2410   002876  6E7F               	movwf	127,c	;volatile
  2411                           
  2412                           ;buggy_lights.c: 94:         LATEbits.LATE7 = !LATEbits.LATE7;
  2413   002878  AE7D               	btfss	125,7,c	;volatile
  2414   00287A  EF41  F014         	goto	u2511
  2415   00287E  EF45  F014         	goto	u2510
  2416   002882                     u2511:
  2417   002882  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2418   002884  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2419   002886  EF46  F014         	goto	u2528
  2420   00288A                     u2510:
  2421   00288A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2422   00288C                     u2528:
  2423   00288C  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2424   00288E  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2425   002890  507D               	movf	125,w,c	;volatile
  2426   002892  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2427   002894  0B7F               	andlw	-129
  2428   002896  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2429   002898  6E7D               	movwf	125,c	;volatile
  2430                           
  2431                           ;buggy_lights.c: 95:         LATAbits.LATA3 = !LATAbits.LATA3;
  2432   00289A  A679               	btfss	121,3,c	;volatile
  2433   00289C  EF52  F014         	goto	u2531
  2434   0028A0  EF56  F014         	goto	u2530
  2435   0028A4                     u2531:
  2436   0028A4  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2437   0028A6  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2438   0028A8  EF57  F014         	goto	u2548
  2439   0028AC                     u2530:
  2440   0028AC  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2441   0028AE                     u2548:
  2442   0028AE  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2443   0028B0  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2444   0028B2  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2445   0028B4  5079               	movf	121,w,c	;volatile
  2446   0028B6  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2447   0028B8  0BF7               	andlw	-9
  2448   0028BA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2449   0028BC  6E79               	movwf	121,c	;volatile
  2450   0028BE  0012               	return		;funcret
  2451   0028C0                     __end_of_toggle_tricolour_LED:
  2452                           	callstack 0
  2453                           
  2454 ;; *************** function _stop_timer *****************
  2455 ;; Defined at:
  2456 ;;		line 38 in file "timers.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		None
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used: 1
  2476 ;; Hardware stack levels required when called: 1
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_forward_navigation
  2481 ;;		_return_to_sender
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text10
  2486   0039BA                     __ptext10:
  2487                           	callstack 0
  2488   0039BA                     _stop_timer:
  2489                           	callstack 28
  2490   0039BA                     
  2491                           ;timers.c: 40:     T0CON0bits.T0EN=0;
  2492   0039BA  9ED5               	bcf	213,7,c	;volatile
  2493   0039BC  0012               	return		;funcret
  2494   0039BE                     __end_of_stop_timer:
  2495                           	callstack 0
  2496                           
  2497 ;; *************** function _scale_RGB *****************
  2498 ;; Defined at:
  2499 ;;		line 197 in file "color.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  p               1   49[COMRAM] PTR struct RGBC_val
  2502 ;;		 -> main@RGBC_colour(8), 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;		None
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2514 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2516 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;Total ram usage:        3 bytes
  2519 ;; Hardware stack levels used: 1
  2520 ;; Hardware stack levels required when called: 2
  2521 ;; This function calls:
  2522 ;;		___flmul
  2523 ;;		___fltol
  2524 ;;		___xxtofl
  2525 ;; This function is called by:
  2526 ;;		_forward_navigation
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text11
  2531   002722                     __ptext11:
  2532                           	callstack 0
  2533   002722                     _scale_RGB:
  2534                           	callstack 27
  2535   002722                     
  2536                           ;color.c: 197: void scale_RGB(struct RGBC_val *p);color.c: 198: {;color.c: 199:     p->R
      +                           *= 0.5;
  2537   002722  0E00               	movlw	0
  2538   002724  6E13               	movwf	___flmul@a^0,c
  2539   002726  0E00               	movlw	0
  2540   002728  6E14               	movwf	(___flmul@a+1)^0,c
  2541   00272A  0E00               	movlw	0
  2542   00272C  6E15               	movwf	(___flmul@a+2)^0,c
  2543   00272E  0E3F               	movlw	63
  2544   002730  6E16               	movwf	(___flmul@a+3)^0,c
  2545   002732  5032               	movf	scale_RGB@p^0,w,c
  2546   002734  6ED9               	movwf	fsr2l,c
  2547   002736  6ADA               	clrf	fsr2h,c
  2548   002738  CFDE F033          	movff	postinc2,??_scale_RGB
  2549   00273C  CFDD F034          	movff	postdec2,??_scale_RGB+1
  2550   002740  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  2551   002744  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  2552   002748  6A03               	clrf	(___xxtofl@val+2)^0,c
  2553   00274A  6A04               	clrf	(___xxtofl@val+3)^0,c
  2554   00274C  0E00               	movlw	0
  2555   00274E  ECB8  F00F         	call	___xxtofl
  2556   002752  C001  F00F         	movff	?___xxtofl,___flmul@b
  2557   002756  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2558   00275A  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2559   00275E  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2560   002762  ECA5  F00C         	call	___flmul	;wreg free
  2561   002766  C00F  F028         	movff	?___flmul,___fltol@f1
  2562   00276A  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  2563   00276E  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  2564   002772  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  2565   002776  EC90  F012         	call	___fltol	;wreg free
  2566   00277A  5032               	movf	scale_RGB@p^0,w,c
  2567   00277C  6ED9               	movwf	fsr2l,c
  2568   00277E  6ADA               	clrf	fsr2h,c
  2569   002780  C028  FFDE         	movff	?___fltol,postinc2
  2570   002784  C029  FFDD         	movff	?___fltol+1,postdec2
  2571                           
  2572                           ;color.c: 200:     p->G *= 0.7;
  2573   002788  0E33               	movlw	51
  2574   00278A  6E13               	movwf	___flmul@a^0,c
  2575   00278C  0E33               	movlw	51
  2576   00278E  6E14               	movwf	(___flmul@a+1)^0,c
  2577   002790  0E33               	movlw	51
  2578   002792  6E15               	movwf	(___flmul@a+2)^0,c
  2579   002794  0E3F               	movlw	63
  2580   002796  6E16               	movwf	(___flmul@a+3)^0,c
  2581   002798  5032               	movf	scale_RGB@p^0,w,c
  2582   00279A  6ED9               	movwf	fsr2l,c
  2583   00279C  6ADA               	clrf	fsr2h,c
  2584   00279E  0E02               	movlw	2
  2585   0027A0  26D9               	addwf	fsr2l,f,c
  2586   0027A2  CFDE F033          	movff	postinc2,??_scale_RGB
  2587   0027A6  CFDD F034          	movff	postdec2,??_scale_RGB+1
  2588   0027AA  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  2589   0027AE  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  2590   0027B2  6A03               	clrf	(___xxtofl@val+2)^0,c
  2591   0027B4  6A04               	clrf	(___xxtofl@val+3)^0,c
  2592   0027B6  0E00               	movlw	0
  2593   0027B8  ECB8  F00F         	call	___xxtofl
  2594   0027BC  C001  F00F         	movff	?___xxtofl,___flmul@b
  2595   0027C0  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2596   0027C4  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2597   0027C8  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2598   0027CC  ECA5  F00C         	call	___flmul	;wreg free
  2599   0027D0  C00F  F028         	movff	?___flmul,___fltol@f1
  2600   0027D4  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  2601   0027D8  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  2602   0027DC  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  2603   0027E0  EC90  F012         	call	___fltol	;wreg free
  2604   0027E4  5032               	movf	scale_RGB@p^0,w,c
  2605   0027E6  6ED9               	movwf	fsr2l,c
  2606   0027E8  6ADA               	clrf	fsr2h,c
  2607   0027EA  0E02               	movlw	2
  2608   0027EC  26D9               	addwf	fsr2l,f,c
  2609   0027EE  C028  FFDE         	movff	?___fltol,postinc2
  2610   0027F2  C029  FFDD         	movff	?___fltol+1,postdec2
  2611   0027F6  0012               	return		;funcret
  2612   0027F8                     __end_of_scale_RGB:
  2613                           	callstack 0
  2614                           
  2615 ;; *************** function ___xxtofl *****************
  2616 ;; Defined at:
  2617 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  sign            1    wreg     unsigned char 
  2620 ;;  val             4    0[COMRAM] long 
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;  sign            1    8[COMRAM] unsigned char 
  2623 ;;  arg             4   10[COMRAM] unsigned long 
  2624 ;;  exp             1    9[COMRAM] unsigned char 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  4    0[COMRAM] unsigned char 
  2627 ;; Registers used:
  2628 ;;		wreg, status,2, status,0
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2634 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2635 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2636 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2637 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2638 ;;Total ram usage:       14 bytes
  2639 ;; Hardware stack levels used: 1
  2640 ;; Hardware stack levels required when called: 1
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_scale_RGB
  2645 ;;		_stop
  2646 ;;		_turnLeft
  2647 ;;		_turnRight
  2648 ;;		_fullSpeedAhead
  2649 ;;		_fullSpeedReverse
  2650 ;;		_turnLeft90
  2651 ;;		_turnRight90
  2652 ;;		_turnLeft135
  2653 ;;		_turnRight135
  2654 ;;		_UTurn
  2655 ;;		_headbuttReverse
  2656 ;;		_squareReverse
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text12
  2661   001F70                     __ptext12:
  2662                           	callstack 0
  2663   001F70                     ___xxtofl:
  2664                           	callstack 27
  2665                           
  2666                           ;incstack = 0
  2667                           ;___xxtofl@sign stored from wreg
  2668   001F70  6E09               	movwf	___xxtofl@sign^0,c
  2669   001F72  5009               	movf	___xxtofl@sign^0,w,c
  2670   001F74  B4D8               	btfsc	status,2,c
  2671   001F76  EFBF  F00F         	goto	u2311
  2672   001F7A  EFC1  F00F         	goto	u2310
  2673   001F7E                     u2311:
  2674   001F7E  EFE3  F00F         	goto	l1401
  2675   001F82                     u2310:
  2676   001F82  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2677   001F84  EFC8  F00F         	goto	u2320
  2678   001F88  EFC6  F00F         	goto	u2321
  2679   001F8C                     u2321:
  2680   001F8C  EFE3  F00F         	goto	l1401
  2681   001F90                     u2320:
  2682   001F90  C001  F005         	movff	___xxtofl@val,??___xxtofl
  2683   001F94  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  2684   001F98  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  2685   001F9C  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  2686   001FA0  1E05               	comf	??___xxtofl^0,f,c
  2687   001FA2  1E06               	comf	(??___xxtofl+1)^0,f,c
  2688   001FA4  1E07               	comf	(??___xxtofl+2)^0,f,c
  2689   001FA6  1E08               	comf	(??___xxtofl+3)^0,f,c
  2690   001FA8  2A05               	incf	??___xxtofl^0,f,c
  2691   001FAA  0E00               	movlw	0
  2692   001FAC  2206               	addwfc	(??___xxtofl+1)^0,f,c
  2693   001FAE  2207               	addwfc	(??___xxtofl+2)^0,f,c
  2694   001FB0  2208               	addwfc	(??___xxtofl+3)^0,f,c
  2695   001FB2  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  2696   001FB6  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  2697   001FBA  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  2698   001FBE  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  2699   001FC2  EFEB  F00F         	goto	l3418
  2700   001FC6                     l1401:
  2701   001FC6  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  2702   001FCA  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2703   001FCE  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2704   001FD2  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2705   001FD6                     l3418:
  2706   001FD6  5001               	movf	___xxtofl@val^0,w,c
  2707   001FD8  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  2708   001FDA  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  2709   001FDC  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  2710   001FDE  A4D8               	btfss	status,2,c
  2711   001FE0  EFF4  F00F         	goto	u2331
  2712   001FE4  EFF6  F00F         	goto	u2330
  2713   001FE8                     u2331:
  2714   001FE8  EF00  F010         	goto	l3424
  2715   001FEC                     u2330:
  2716   001FEC  0E00               	movlw	0
  2717   001FEE  6E01               	movwf	?___xxtofl^0,c
  2718   001FF0  0E00               	movlw	0
  2719   001FF2  6E02               	movwf	(?___xxtofl+1)^0,c
  2720   001FF4  0E00               	movlw	0
  2721   001FF6  6E03               	movwf	(?___xxtofl+2)^0,c
  2722   001FF8  0E00               	movlw	0
  2723   001FFA  6E04               	movwf	(?___xxtofl+3)^0,c
  2724   001FFC  EF91  F010         	goto	l1404
  2725   002000                     l3424:
  2726   002000  0E96               	movlw	150
  2727   002002  6E0A               	movwf	___xxtofl@exp^0,c
  2728   002004  EF0A  F010         	goto	l3428
  2729   002008                     l3426:
  2730   002008  2A0A               	incf	___xxtofl@exp^0,f,c
  2731   00200A  90D8               	bcf	status,0,c
  2732   00200C  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2733   00200E  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2734   002010  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2735   002012  320B               	rrcf	___xxtofl@arg^0,f,c
  2736   002014                     l3428:
  2737   002014  0E00               	movlw	0
  2738   002016  140B               	andwf	___xxtofl@arg^0,w,c
  2739   002018  6E05               	movwf	??___xxtofl^0,c
  2740   00201A  0E00               	movlw	0
  2741   00201C  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2742   00201E  6E06               	movwf	(??___xxtofl+1)^0,c
  2743   002020  0E00               	movlw	0
  2744   002022  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2745   002024  6E07               	movwf	(??___xxtofl+2)^0,c
  2746   002026  0EFE               	movlw	254
  2747   002028  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2748   00202A  6E08               	movwf	(??___xxtofl+3)^0,c
  2749   00202C  5005               	movf	??___xxtofl^0,w,c
  2750   00202E  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2751   002030  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2752   002032  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2753   002034  A4D8               	btfss	status,2,c
  2754   002036  EF1F  F010         	goto	u2341
  2755   00203A  EF21  F010         	goto	u2340
  2756   00203E                     u2341:
  2757   00203E  EF04  F010         	goto	l3426
  2758   002042                     u2340:
  2759   002042  EF2F  F010         	goto	l1408
  2760   002046                     l3430:
  2761   002046  2A0A               	incf	___xxtofl@exp^0,f,c
  2762   002048  0E01               	movlw	1
  2763   00204A  260B               	addwf	___xxtofl@arg^0,f,c
  2764   00204C  0E00               	movlw	0
  2765   00204E  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  2766   002050  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  2767   002052  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  2768   002054  90D8               	bcf	status,0,c
  2769   002056  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2770   002058  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2771   00205A  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2772   00205C  320B               	rrcf	___xxtofl@arg^0,f,c
  2773   00205E                     l1408:
  2774   00205E  0E00               	movlw	0
  2775   002060  140B               	andwf	___xxtofl@arg^0,w,c
  2776   002062  6E05               	movwf	??___xxtofl^0,c
  2777   002064  0E00               	movlw	0
  2778   002066  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2779   002068  6E06               	movwf	(??___xxtofl+1)^0,c
  2780   00206A  0E00               	movlw	0
  2781   00206C  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2782   00206E  6E07               	movwf	(??___xxtofl+2)^0,c
  2783   002070  0EFF               	movlw	255
  2784   002072  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2785   002074  6E08               	movwf	(??___xxtofl+3)^0,c
  2786   002076  5005               	movf	??___xxtofl^0,w,c
  2787   002078  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2788   00207A  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2789   00207C  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2790   00207E  A4D8               	btfss	status,2,c
  2791   002080  EF44  F010         	goto	u2351
  2792   002084  EF46  F010         	goto	u2350
  2793   002088                     u2351:
  2794   002088  EF23  F010         	goto	l3430
  2795   00208C                     u2350:
  2796   00208C  EF4E  F010         	goto	l3438
  2797   002090                     l3436:
  2798   002090  060A               	decf	___xxtofl@exp^0,f,c
  2799   002092  90D8               	bcf	status,0,c
  2800   002094  360B               	rlcf	___xxtofl@arg^0,f,c
  2801   002096  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  2802   002098  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  2803   00209A  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  2804   00209C                     l3438:
  2805   00209C  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  2806   00209E  EF53  F010         	goto	u2361
  2807   0020A2  EF55  F010         	goto	u2360
  2808   0020A6                     u2361:
  2809   0020A6  EF5D  F010         	goto	l1415
  2810   0020AA                     u2360:
  2811   0020AA  0E02               	movlw	2
  2812   0020AC  600A               	cpfslt	___xxtofl@exp^0,c
  2813   0020AE  EF5B  F010         	goto	u2371
  2814   0020B2  EF5D  F010         	goto	u2370
  2815   0020B6                     u2371:
  2816   0020B6  EF48  F010         	goto	l3436
  2817   0020BA                     u2370:
  2818   0020BA                     l1415:
  2819   0020BA  B00A               	btfsc	___xxtofl@exp^0,0,c
  2820   0020BC  EF62  F010         	goto	u2381
  2821   0020C0  EF64  F010         	goto	u2380
  2822   0020C4                     u2381:
  2823   0020C4  EF65  F010         	goto	l3444
  2824   0020C8                     u2380:
  2825   0020C8  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  2826   0020CA                     l3444:
  2827   0020CA  90D8               	bcf	status,0,c
  2828   0020CC  320A               	rrcf	___xxtofl@exp^0,f,c
  2829   0020CE  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  2830   0020D2  6A06               	clrf	(??___xxtofl+1)^0,c
  2831   0020D4  6A07               	clrf	(??___xxtofl+2)^0,c
  2832   0020D6  6A08               	clrf	(??___xxtofl+3)^0,c
  2833   0020D8  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  2834   0020DC  6A07               	clrf	(??___xxtofl+2)^0,c
  2835   0020DE  6A06               	clrf	(??___xxtofl+1)^0,c
  2836   0020E0  6A05               	clrf	??___xxtofl^0,c
  2837   0020E2  5005               	movf	??___xxtofl^0,w,c
  2838   0020E4  120B               	iorwf	___xxtofl@arg^0,f,c
  2839   0020E6  5006               	movf	(??___xxtofl+1)^0,w,c
  2840   0020E8  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  2841   0020EA  5007               	movf	(??___xxtofl+2)^0,w,c
  2842   0020EC  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  2843   0020EE  5008               	movf	(??___xxtofl+3)^0,w,c
  2844   0020F0  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  2845   0020F2  5009               	movf	___xxtofl@sign^0,w,c
  2846   0020F4  B4D8               	btfsc	status,2,c
  2847   0020F6  EF7F  F010         	goto	u2391
  2848   0020FA  EF81  F010         	goto	u2390
  2849   0020FE                     u2391:
  2850   0020FE  EF89  F010         	goto	l3454
  2851   002102                     u2390:
  2852   002102  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2853   002104  EF88  F010         	goto	u2400
  2854   002108  EF86  F010         	goto	u2401
  2855   00210C                     u2401:
  2856   00210C  EF89  F010         	goto	l3454
  2857   002110                     u2400:
  2858   002110  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  2859   002112                     l3454:
  2860   002112  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  2861   002116  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  2862   00211A  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  2863   00211E  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  2864   002122                     l1404:
  2865   002122  0012               	return		;funcret
  2866   002124                     __end_of___xxtofl:
  2867                           	callstack 0
  2868                           
  2869 ;; *************** function ___fltol *****************
  2870 ;; Defined at:
  2871 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;  f1              4   39[COMRAM] unsigned char 
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;  exp1            1   48[COMRAM] unsigned char 
  2876 ;;  sign1           1   47[COMRAM] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  4   39[COMRAM] long 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2888 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2889 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2890 ;;Total ram usage:       10 bytes
  2891 ;; Hardware stack levels used: 1
  2892 ;; Hardware stack levels required when called: 1
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_scale_RGB
  2897 ;;		_stop
  2898 ;;		_turnLeft
  2899 ;;		_turnRight
  2900 ;;		_fullSpeedAhead
  2901 ;;		_fullSpeedReverse
  2902 ;;		_turnLeft90
  2903 ;;		_turnRight90
  2904 ;;		_turnLeft135
  2905 ;;		_turnRight135
  2906 ;;		_UTurn
  2907 ;;		_headbuttReverse
  2908 ;;		_squareReverse
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text13
  2913   002520                     __ptext13:
  2914                           	callstack 0
  2915   002520                     ___fltol:
  2916                           	callstack 27
  2917   002520  342A               	rlcf	(___fltol@f1+2)^0,w,c
  2918   002522  342B               	rlcf	(___fltol@f1+3)^0,w,c
  2919   002524  6E31               	movwf	___fltol@exp1^0,c
  2920   002526  5031               	movf	___fltol@exp1^0,w,c
  2921   002528  A4D8               	btfss	status,2,c
  2922   00252A  EF99  F012         	goto	u2241
  2923   00252E  EF9B  F012         	goto	u2240
  2924   002532                     u2241:
  2925   002532  EFA5  F012         	goto	l3374
  2926   002536                     u2240:
  2927   002536                     l3370:
  2928   002536  0E00               	movlw	0
  2929   002538  6E28               	movwf	?___fltol^0,c
  2930   00253A  0E00               	movlw	0
  2931   00253C  6E29               	movwf	(?___fltol+1)^0,c
  2932   00253E  0E00               	movlw	0
  2933   002540  6E2A               	movwf	(?___fltol+2)^0,c
  2934   002542  0E00               	movlw	0
  2935   002544  6E2B               	movwf	(?___fltol+3)^0,c
  2936   002546  EF12  F013         	goto	l1043
  2937   00254A                     l3374:
  2938   00254A  C028  F02C         	movff	___fltol@f1,??___fltol
  2939   00254E  C029  F02D         	movff	___fltol@f1+1,??___fltol+1
  2940   002552  C02A  F02E         	movff	___fltol@f1+2,??___fltol+2
  2941   002556  C02B  F02F         	movff	___fltol@f1+3,??___fltol+3
  2942   00255A  0E20               	movlw	32
  2943   00255C  EFB5  F012         	goto	u2250
  2944   002560                     u2255:
  2945   002560  90D8               	bcf	status,0,c
  2946   002562  322F               	rrcf	(??___fltol+3)^0,f,c
  2947   002564  322E               	rrcf	(??___fltol+2)^0,f,c
  2948   002566  322D               	rrcf	(??___fltol+1)^0,f,c
  2949   002568  322C               	rrcf	??___fltol^0,f,c
  2950   00256A                     u2250:
  2951   00256A  2EE8               	decfsz	wreg,f,c
  2952   00256C  EFB0  F012         	goto	u2255
  2953   002570  502C               	movf	??___fltol^0,w,c
  2954   002572  6E30               	movwf	___fltol@sign1^0,c
  2955   002574  8E2A               	bsf	(___fltol@f1+2)^0,7,c
  2956   002576  0EFF               	movlw	255
  2957   002578  1628               	andwf	___fltol@f1^0,f,c
  2958   00257A  0EFF               	movlw	255
  2959   00257C  1629               	andwf	(___fltol@f1+1)^0,f,c
  2960   00257E  0EFF               	movlw	255
  2961   002580  162A               	andwf	(___fltol@f1+2)^0,f,c
  2962   002582  0E00               	movlw	0
  2963   002584  162B               	andwf	(___fltol@f1+3)^0,f,c
  2964   002586  0E96               	movlw	150
  2965   002588  5E31               	subwf	___fltol@exp1^0,f,c
  2966   00258A  BE31               	btfsc	___fltol@exp1^0,7,c
  2967   00258C  EFCC  F012         	goto	u2260
  2968   002590  EFCA  F012         	goto	u2261
  2969   002594                     u2261:
  2970   002594  EFE2  F012         	goto	l3394
  2971   002598                     u2260:
  2972   002598  5031               	movf	___fltol@exp1^0,w,c
  2973   00259A  0A80               	xorlw	128
  2974   00259C  0F97               	addlw	151
  2975   00259E  B0D8               	btfsc	status,0,c
  2976   0025A0  EFD4  F012         	goto	u2271
  2977   0025A4  EFD6  F012         	goto	u2270
  2978   0025A8                     u2271:
  2979   0025A8  EFD8  F012         	goto	l3390
  2980   0025AC                     u2270:
  2981   0025AC  EF9B  F012         	goto	l3370
  2982   0025B0                     l3390:
  2983   0025B0  90D8               	bcf	status,0,c
  2984   0025B2  322B               	rrcf	(___fltol@f1+3)^0,f,c
  2985   0025B4  322A               	rrcf	(___fltol@f1+2)^0,f,c
  2986   0025B6  3229               	rrcf	(___fltol@f1+1)^0,f,c
  2987   0025B8  3228               	rrcf	___fltol@f1^0,f,c
  2988   0025BA  3E31               	incfsz	___fltol@exp1^0,f,c
  2989   0025BC  EFD8  F012         	goto	l3390
  2990   0025C0  EFFA  F012         	goto	l3404
  2991   0025C4                     l3394:
  2992   0025C4  0E1F               	movlw	31
  2993   0025C6  6431               	cpfsgt	___fltol@exp1^0,c
  2994   0025C8  EFE8  F012         	goto	u2281
  2995   0025CC  EFEA  F012         	goto	u2280
  2996   0025D0                     u2281:
  2997   0025D0  EFF2  F012         	goto	l3402
  2998   0025D4                     u2280:
  2999   0025D4  EF9B  F012         	goto	l3370
  3000   0025D8                     l3400:
  3001   0025D8  90D8               	bcf	status,0,c
  3002   0025DA  3628               	rlcf	___fltol@f1^0,f,c
  3003   0025DC  3629               	rlcf	(___fltol@f1+1)^0,f,c
  3004   0025DE  362A               	rlcf	(___fltol@f1+2)^0,f,c
  3005   0025E0  362B               	rlcf	(___fltol@f1+3)^0,f,c
  3006   0025E2  0631               	decf	___fltol@exp1^0,f,c
  3007   0025E4                     l3402:
  3008   0025E4  5031               	movf	___fltol@exp1^0,w,c
  3009   0025E6  A4D8               	btfss	status,2,c
  3010   0025E8  EFF8  F012         	goto	u2291
  3011   0025EC  EFFA  F012         	goto	u2290
  3012   0025F0                     u2291:
  3013   0025F0  EFEC  F012         	goto	l3400
  3014   0025F4                     u2290:
  3015   0025F4                     l3404:
  3016   0025F4  5030               	movf	___fltol@sign1^0,w,c
  3017   0025F6  B4D8               	btfsc	status,2,c
  3018   0025F8  EF00  F013         	goto	u2301
  3019   0025FC  EF02  F013         	goto	u2300
  3020   002600                     u2301:
  3021   002600  EF0A  F013         	goto	l3408
  3022   002604                     u2300:
  3023   002604  1E2B               	comf	(___fltol@f1+3)^0,f,c
  3024   002606  1E2A               	comf	(___fltol@f1+2)^0,f,c
  3025   002608  1E29               	comf	(___fltol@f1+1)^0,f,c
  3026   00260A  6C28               	negf	___fltol@f1^0,c
  3027   00260C  0E00               	movlw	0
  3028   00260E  2229               	addwfc	(___fltol@f1+1)^0,f,c
  3029   002610  222A               	addwfc	(___fltol@f1+2)^0,f,c
  3030   002612  222B               	addwfc	(___fltol@f1+3)^0,f,c
  3031   002614                     l3408:
  3032   002614  C028  F028         	movff	___fltol@f1,?___fltol
  3033   002618  C029  F029         	movff	___fltol@f1+1,?___fltol+1
  3034   00261C  C02A  F02A         	movff	___fltol@f1+2,?___fltol+2
  3035   002620  C02B  F02B         	movff	___fltol@f1+3,?___fltol+3
  3036   002624                     l1043:
  3037   002624  0012               	return		;funcret
  3038   002626                     __end_of___fltol:
  3039                           	callstack 0
  3040                           
  3041 ;; *************** function ___flmul *****************
  3042 ;; Defined at:
  3043 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  b               4   14[COMRAM] long 
  3046 ;;  a               4   18[COMRAM] long 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  prod            4   33[COMRAM] struct .
  3049 ;;  grs             4   27[COMRAM] unsigned long 
  3050 ;;  temp            2   37[COMRAM] struct .
  3051 ;;  bexp            1   32[COMRAM] unsigned char 
  3052 ;;  aexp            1   31[COMRAM] unsigned char 
  3053 ;;  sign            1   26[COMRAM] unsigned char 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  4   14[COMRAM] unsigned char 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0, prodl, prodh
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3063 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3064 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3065 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3066 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3067 ;;Total ram usage:       25 bytes
  3068 ;; Hardware stack levels used: 1
  3069 ;; Hardware stack levels required when called: 1
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_scale_RGB
  3074 ;;		_stop
  3075 ;;		_turnLeft
  3076 ;;		_turnRight
  3077 ;;		_fullSpeedAhead
  3078 ;;		_fullSpeedReverse
  3079 ;;		_turnLeft90
  3080 ;;		_turnRight90
  3081 ;;		_turnLeft135
  3082 ;;		_turnRight135
  3083 ;;		_UTurn
  3084 ;;		_headbuttReverse
  3085 ;;		_squareReverse
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text14
  3090   00194A                     __ptext14:
  3091                           	callstack 0
  3092   00194A                     ___flmul:
  3093                           	callstack 27
  3094   00194A  5012               	movf	(___flmul@b+3)^0,w,c
  3095   00194C  0B80               	andlw	128
  3096   00194E  6E1B               	movwf	___flmul@sign^0,c
  3097   001950  5012               	movf	(___flmul@b+3)^0,w,c
  3098   001952  2412               	addwf	(___flmul@b+3)^0,w,c
  3099   001954  6E21               	movwf	___flmul@bexp^0,c
  3100   001956  AE11               	btfss	(___flmul@b+2)^0,7,c
  3101   001958  EFB0  F00C         	goto	u2051
  3102   00195C  EFB2  F00C         	goto	u2050
  3103   001960                     u2051:
  3104   001960  EFB3  F00C         	goto	l3244
  3105   001964                     u2050:
  3106   001964  8021               	bsf	___flmul@bexp^0,0,c
  3107   001966                     l3244:
  3108   001966  5021               	movf	___flmul@bexp^0,w,c
  3109   001968  B4D8               	btfsc	status,2,c
  3110   00196A  EFB9  F00C         	goto	u2061
  3111   00196E  EFBB  F00C         	goto	u2060
  3112   001972                     u2061:
  3113   001972  EFCE  F00C         	goto	l3252
  3114   001976                     u2060:
  3115   001976  2821               	incf	___flmul@bexp^0,w,c
  3116   001978  A4D8               	btfss	status,2,c
  3117   00197A  EFC1  F00C         	goto	u2071
  3118   00197E  EFC3  F00C         	goto	u2070
  3119   001982                     u2071:
  3120   001982  EFCB  F00C         	goto	l3250
  3121   001986                     u2070:
  3122   001986  0E00               	movlw	0
  3123   001988  6E0F               	movwf	___flmul@b^0,c
  3124   00198A  0E00               	movlw	0
  3125   00198C  6E10               	movwf	(___flmul@b+1)^0,c
  3126   00198E  0E00               	movlw	0
  3127   001990  6E11               	movwf	(___flmul@b+2)^0,c
  3128   001992  0E00               	movlw	0
  3129   001994  6E12               	movwf	(___flmul@b+3)^0,c
  3130   001996                     l3250:
  3131   001996  8E11               	bsf	(___flmul@b+2)^0,7,c
  3132   001998  EFD6  F00C         	goto	l3254
  3133   00199C                     l3252:
  3134   00199C  0E00               	movlw	0
  3135   00199E  6E0F               	movwf	___flmul@b^0,c
  3136   0019A0  0E00               	movlw	0
  3137   0019A2  6E10               	movwf	(___flmul@b+1)^0,c
  3138   0019A4  0E00               	movlw	0
  3139   0019A6  6E11               	movwf	(___flmul@b+2)^0,c
  3140   0019A8  0E00               	movlw	0
  3141   0019AA  6E12               	movwf	(___flmul@b+3)^0,c
  3142   0019AC                     l3254:
  3143   0019AC  5016               	movf	(___flmul@a+3)^0,w,c
  3144   0019AE  0B80               	andlw	128
  3145   0019B0  1A1B               	xorwf	___flmul@sign^0,f,c
  3146   0019B2  5016               	movf	(___flmul@a+3)^0,w,c
  3147   0019B4  2416               	addwf	(___flmul@a+3)^0,w,c
  3148   0019B6  6E20               	movwf	___flmul@aexp^0,c
  3149   0019B8  AE15               	btfss	(___flmul@a+2)^0,7,c
  3150   0019BA  EFE1  F00C         	goto	u2081
  3151   0019BE  EFE3  F00C         	goto	u2080
  3152   0019C2                     u2081:
  3153   0019C2  EFE4  F00C         	goto	l3262
  3154   0019C6                     u2080:
  3155   0019C6  8020               	bsf	___flmul@aexp^0,0,c
  3156   0019C8                     l3262:
  3157   0019C8  5020               	movf	___flmul@aexp^0,w,c
  3158   0019CA  B4D8               	btfsc	status,2,c
  3159   0019CC  EFEA  F00C         	goto	u2091
  3160   0019D0  EFEC  F00C         	goto	u2090
  3161   0019D4                     u2091:
  3162   0019D4  EFFF  F00C         	goto	l3270
  3163   0019D8                     u2090:
  3164   0019D8  2820               	incf	___flmul@aexp^0,w,c
  3165   0019DA  A4D8               	btfss	status,2,c
  3166   0019DC  EFF2  F00C         	goto	u2101
  3167   0019E0  EFF4  F00C         	goto	u2100
  3168   0019E4                     u2101:
  3169   0019E4  EFFC  F00C         	goto	l3268
  3170   0019E8                     u2100:
  3171   0019E8  0E00               	movlw	0
  3172   0019EA  6E13               	movwf	___flmul@a^0,c
  3173   0019EC  0E00               	movlw	0
  3174   0019EE  6E14               	movwf	(___flmul@a+1)^0,c
  3175   0019F0  0E00               	movlw	0
  3176   0019F2  6E15               	movwf	(___flmul@a+2)^0,c
  3177   0019F4  0E00               	movlw	0
  3178   0019F6  6E16               	movwf	(___flmul@a+3)^0,c
  3179   0019F8                     l3268:
  3180   0019F8  8E15               	bsf	(___flmul@a+2)^0,7,c
  3181   0019FA  EF07  F00D         	goto	l1360
  3182   0019FE                     l3270:
  3183   0019FE  0E00               	movlw	0
  3184   001A00  6E13               	movwf	___flmul@a^0,c
  3185   001A02  0E00               	movlw	0
  3186   001A04  6E14               	movwf	(___flmul@a+1)^0,c
  3187   001A06  0E00               	movlw	0
  3188   001A08  6E15               	movwf	(___flmul@a+2)^0,c
  3189   001A0A  0E00               	movlw	0
  3190   001A0C  6E16               	movwf	(___flmul@a+3)^0,c
  3191   001A0E                     l1360:
  3192   001A0E  5020               	movf	___flmul@aexp^0,w,c
  3193   001A10  B4D8               	btfsc	status,2,c
  3194   001A12  EF0D  F00D         	goto	u2111
  3195   001A16  EF0F  F00D         	goto	u2110
  3196   001A1A                     u2111:
  3197   001A1A  EF17  F00D         	goto	l3274
  3198   001A1E                     u2110:
  3199   001A1E  5021               	movf	___flmul@bexp^0,w,c
  3200   001A20  A4D8               	btfss	status,2,c
  3201   001A22  EF15  F00D         	goto	u2121
  3202   001A26  EF17  F00D         	goto	u2120
  3203   001A2A                     u2121:
  3204   001A2A  EF21  F00D         	goto	l3278
  3205   001A2E                     u2120:
  3206   001A2E                     l3274:
  3207   001A2E  0E00               	movlw	0
  3208   001A30  6E0F               	movwf	?___flmul^0,c
  3209   001A32  0E00               	movlw	0
  3210   001A34  6E10               	movwf	(?___flmul+1)^0,c
  3211   001A36  0E00               	movlw	0
  3212   001A38  6E11               	movwf	(?___flmul+2)^0,c
  3213   001A3A  0E00               	movlw	0
  3214   001A3C  6E12               	movwf	(?___flmul+3)^0,c
  3215   001A3E  EFB9  F00E         	goto	l1364
  3216   001A42                     l3278:
  3217   001A42  5015               	movf	(___flmul@a+2)^0,w,c
  3218   001A44  020F               	mulwf	___flmul@b^0,c
  3219   001A46  CFF3 F026          	movff	prodl,___flmul@temp
  3220   001A4A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3221   001A4E  5026               	movf	___flmul@temp^0,w,c
  3222   001A50  6E1C               	movwf	___flmul@grs^0,c
  3223   001A52  6A1D               	clrf	(___flmul@grs+1)^0,c
  3224   001A54  6A1E               	clrf	(___flmul@grs+2)^0,c
  3225   001A56  6A1F               	clrf	(___flmul@grs+3)^0,c
  3226   001A58  5027               	movf	(___flmul@temp+1)^0,w,c
  3227   001A5A  6E22               	movwf	___flmul@prod^0,c
  3228   001A5C  6A23               	clrf	(___flmul@prod+1)^0,c
  3229   001A5E  6A24               	clrf	(___flmul@prod+2)^0,c
  3230   001A60  6A25               	clrf	(___flmul@prod+3)^0,c
  3231   001A62  5014               	movf	(___flmul@a+1)^0,w,c
  3232   001A64  0210               	mulwf	(___flmul@b+1)^0,c
  3233   001A66  CFF3 F026          	movff	prodl,___flmul@temp
  3234   001A6A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3235   001A6E  5026               	movf	___flmul@temp^0,w,c
  3236   001A70  261C               	addwf	___flmul@grs^0,f,c
  3237   001A72  0E00               	movlw	0
  3238   001A74  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3239   001A76  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3240   001A78  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3241   001A7A  5027               	movf	(___flmul@temp+1)^0,w,c
  3242   001A7C  2622               	addwf	___flmul@prod^0,f,c
  3243   001A7E  0E00               	movlw	0
  3244   001A80  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3245   001A82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3246   001A84  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3247   001A86  5013               	movf	___flmul@a^0,w,c
  3248   001A88  0211               	mulwf	(___flmul@b+2)^0,c
  3249   001A8A  CFF3 F026          	movff	prodl,___flmul@temp
  3250   001A8E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3251   001A92  5026               	movf	___flmul@temp^0,w,c
  3252   001A94  261C               	addwf	___flmul@grs^0,f,c
  3253   001A96  0E00               	movlw	0
  3254   001A98  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3255   001A9A  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3256   001A9C  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3257   001A9E  5027               	movf	(___flmul@temp+1)^0,w,c
  3258   001AA0  2622               	addwf	___flmul@prod^0,f,c
  3259   001AA2  0E00               	movlw	0
  3260   001AA4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3261   001AA6  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3262   001AA8  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3263   001AAA  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3264   001AAE  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3265   001AB2  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3266   001AB6  6A1C               	clrf	___flmul@grs^0,c
  3267   001AB8  5013               	movf	___flmul@a^0,w,c
  3268   001ABA  0210               	mulwf	(___flmul@b+1)^0,c
  3269   001ABC  CFF3 F026          	movff	prodl,___flmul@temp
  3270   001AC0  CFF4 F027          	movff	prodh,___flmul@temp+1
  3271   001AC4  5026               	movf	___flmul@temp^0,w,c
  3272   001AC6  261C               	addwf	___flmul@grs^0,f,c
  3273   001AC8  5027               	movf	(___flmul@temp+1)^0,w,c
  3274   001ACA  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3275   001ACC  0E00               	movlw	0
  3276   001ACE  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3277   001AD0  0E00               	movlw	0
  3278   001AD2  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3279   001AD4  5014               	movf	(___flmul@a+1)^0,w,c
  3280   001AD6  020F               	mulwf	___flmul@b^0,c
  3281   001AD8  CFF3 F026          	movff	prodl,___flmul@temp
  3282   001ADC  CFF4 F027          	movff	prodh,___flmul@temp+1
  3283   001AE0  5026               	movf	___flmul@temp^0,w,c
  3284   001AE2  261C               	addwf	___flmul@grs^0,f,c
  3285   001AE4  5027               	movf	(___flmul@temp+1)^0,w,c
  3286   001AE6  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3287   001AE8  0E00               	movlw	0
  3288   001AEA  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3289   001AEC  0E00               	movlw	0
  3290   001AEE  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3291   001AF0  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3292   001AF4  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3293   001AF8  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3294   001AFC  6A1C               	clrf	___flmul@grs^0,c
  3295   001AFE  5013               	movf	___flmul@a^0,w,c
  3296   001B00  020F               	mulwf	___flmul@b^0,c
  3297   001B02  CFF3 F026          	movff	prodl,___flmul@temp
  3298   001B06  CFF4 F027          	movff	prodh,___flmul@temp+1
  3299   001B0A  5026               	movf	___flmul@temp^0,w,c
  3300   001B0C  261C               	addwf	___flmul@grs^0,f,c
  3301   001B0E  5027               	movf	(___flmul@temp+1)^0,w,c
  3302   001B10  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3303   001B12  0E00               	movlw	0
  3304   001B14  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3305   001B16  0E00               	movlw	0
  3306   001B18  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3307   001B1A  5015               	movf	(___flmul@a+2)^0,w,c
  3308   001B1C  0210               	mulwf	(___flmul@b+1)^0,c
  3309   001B1E  CFF3 F026          	movff	prodl,___flmul@temp
  3310   001B22  CFF4 F027          	movff	prodh,___flmul@temp+1
  3311   001B26  5026               	movf	___flmul@temp^0,w,c
  3312   001B28  2622               	addwf	___flmul@prod^0,f,c
  3313   001B2A  5027               	movf	(___flmul@temp+1)^0,w,c
  3314   001B2C  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3315   001B2E  0E00               	movlw	0
  3316   001B30  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3317   001B32  0E00               	movlw	0
  3318   001B34  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3319   001B36  5014               	movf	(___flmul@a+1)^0,w,c
  3320   001B38  0211               	mulwf	(___flmul@b+2)^0,c
  3321   001B3A  CFF3 F026          	movff	prodl,___flmul@temp
  3322   001B3E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3323   001B42  5026               	movf	___flmul@temp^0,w,c
  3324   001B44  2622               	addwf	___flmul@prod^0,f,c
  3325   001B46  5027               	movf	(___flmul@temp+1)^0,w,c
  3326   001B48  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3327   001B4A  0E00               	movlw	0
  3328   001B4C  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3329   001B4E  0E00               	movlw	0
  3330   001B50  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3331   001B52  5015               	movf	(___flmul@a+2)^0,w,c
  3332   001B54  0211               	mulwf	(___flmul@b+2)^0,c
  3333   001B56  CFF3 F026          	movff	prodl,___flmul@temp
  3334   001B5A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3335   001B5E  5026               	movf	___flmul@temp^0,w,c
  3336   001B60  6E17               	movwf	??___flmul^0,c
  3337   001B62  5027               	movf	(___flmul@temp+1)^0,w,c
  3338   001B64  6E18               	movwf	(??___flmul+1)^0,c
  3339   001B66  6A19               	clrf	(??___flmul+2)^0,c
  3340   001B68  6A1A               	clrf	(??___flmul+3)^0,c
  3341   001B6A  C019  F01A         	movff	??___flmul+2,??___flmul+3
  3342   001B6E  C018  F019         	movff	??___flmul+1,??___flmul+2
  3343   001B72  C017  F018         	movff	??___flmul,??___flmul+1
  3344   001B76  6A17               	clrf	??___flmul^0,c
  3345   001B78  5017               	movf	??___flmul^0,w,c
  3346   001B7A  2622               	addwf	___flmul@prod^0,f,c
  3347   001B7C  5018               	movf	(??___flmul+1)^0,w,c
  3348   001B7E  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3349   001B80  5019               	movf	(??___flmul+2)^0,w,c
  3350   001B82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3351   001B84  501A               	movf	(??___flmul+3)^0,w,c
  3352   001B86  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3353   001B88  C01C  F017         	movff	___flmul@grs,??___flmul
  3354   001B8C  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  3355   001B90  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  3356   001B94  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  3357   001B98  0E19               	movlw	25
  3358   001B9A  EFD4  F00D         	goto	u2130
  3359   001B9E                     u2135:
  3360   001B9E  90D8               	bcf	status,0,c
  3361   001BA0  321A               	rrcf	(??___flmul+3)^0,f,c
  3362   001BA2  3219               	rrcf	(??___flmul+2)^0,f,c
  3363   001BA4  3218               	rrcf	(??___flmul+1)^0,f,c
  3364   001BA6  3217               	rrcf	??___flmul^0,f,c
  3365   001BA8                     u2130:
  3366   001BA8  2EE8               	decfsz	wreg,f,c
  3367   001BAA  EFCF  F00D         	goto	u2135
  3368   001BAE  5017               	movf	??___flmul^0,w,c
  3369   001BB0  2622               	addwf	___flmul@prod^0,f,c
  3370   001BB2  5018               	movf	(??___flmul+1)^0,w,c
  3371   001BB4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3372   001BB6  5019               	movf	(??___flmul+2)^0,w,c
  3373   001BB8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3374   001BBA  501A               	movf	(??___flmul+3)^0,w,c
  3375   001BBC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3376   001BBE  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3377   001BC2  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3378   001BC6  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3379   001BCA  6A1C               	clrf	___flmul@grs^0,c
  3380   001BCC  5020               	movf	___flmul@aexp^0,w,c
  3381   001BCE  C021  F017         	movff	___flmul@bexp,??___flmul
  3382   001BD2  6A18               	clrf	(??___flmul+1)^0,c
  3383   001BD4  2617               	addwf	??___flmul^0,f,c
  3384   001BD6  0E00               	movlw	0
  3385   001BD8  2218               	addwfc	(??___flmul+1)^0,f,c
  3386   001BDA  0E82               	movlw	130
  3387   001BDC  2417               	addwf	??___flmul^0,w,c
  3388   001BDE  6E26               	movwf	___flmul@temp^0,c
  3389   001BE0  0EFF               	movlw	255
  3390   001BE2  2018               	addwfc	(??___flmul+1)^0,w,c
  3391   001BE4  6E27               	movwf	(___flmul@temp+1)^0,c
  3392   001BE6  EF0A  F00E         	goto	l3326
  3393   001BEA                     l3320:
  3394   001BEA  90D8               	bcf	status,0,c
  3395   001BEC  3622               	rlcf	___flmul@prod^0,f,c
  3396   001BEE  3623               	rlcf	(___flmul@prod+1)^0,f,c
  3397   001BF0  3624               	rlcf	(___flmul@prod+2)^0,f,c
  3398   001BF2  3625               	rlcf	(___flmul@prod+3)^0,f,c
  3399   001BF4  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  3400   001BF6  EFFF  F00D         	goto	u2141
  3401   001BFA  EF01  F00E         	goto	u2140
  3402   001BFE                     u2141:
  3403   001BFE  EF02  F00E         	goto	l1367
  3404   001C02                     u2140:
  3405   001C02  8022               	bsf	___flmul@prod^0,0,c
  3406   001C04                     l1367:
  3407   001C04  90D8               	bcf	status,0,c
  3408   001C06  361C               	rlcf	___flmul@grs^0,f,c
  3409   001C08  361D               	rlcf	(___flmul@grs+1)^0,f,c
  3410   001C0A  361E               	rlcf	(___flmul@grs+2)^0,f,c
  3411   001C0C  361F               	rlcf	(___flmul@grs+3)^0,f,c
  3412   001C0E  0626               	decf	___flmul@temp^0,f,c
  3413   001C10  A0D8               	btfss	status,0,c
  3414   001C12  0627               	decf	(___flmul@temp+1)^0,f,c
  3415   001C14                     l3326:
  3416   001C14  AE24               	btfss	(___flmul@prod+2)^0,7,c
  3417   001C16  EF0F  F00E         	goto	u2151
  3418   001C1A  EF11  F00E         	goto	u2150
  3419   001C1E                     u2151:
  3420   001C1E  EFF5  F00D         	goto	l3320
  3421   001C22                     u2150:
  3422   001C22  0E00               	movlw	0
  3423   001C24  6E20               	movwf	___flmul@aexp^0,c
  3424   001C26  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  3425   001C28  EF18  F00E         	goto	u2161
  3426   001C2C  EF1A  F00E         	goto	u2160
  3427   001C30                     u2161:
  3428   001C30  EF3E  F00E         	goto	l1369
  3429   001C34                     u2160:
  3430   001C34  0EFF               	movlw	255
  3431   001C36  141C               	andwf	___flmul@grs^0,w,c
  3432   001C38  6E17               	movwf	??___flmul^0,c
  3433   001C3A  0EFF               	movlw	255
  3434   001C3C  141D               	andwf	(___flmul@grs+1)^0,w,c
  3435   001C3E  6E18               	movwf	(??___flmul+1)^0,c
  3436   001C40  0EFF               	movlw	255
  3437   001C42  141E               	andwf	(___flmul@grs+2)^0,w,c
  3438   001C44  6E19               	movwf	(??___flmul+2)^0,c
  3439   001C46  0E7F               	movlw	127
  3440   001C48  141F               	andwf	(___flmul@grs+3)^0,w,c
  3441   001C4A  6E1A               	movwf	(??___flmul+3)^0,c
  3442   001C4C  5017               	movf	??___flmul^0,w,c
  3443   001C4E  1018               	iorwf	(??___flmul+1)^0,w,c
  3444   001C50  1019               	iorwf	(??___flmul+2)^0,w,c
  3445   001C52  101A               	iorwf	(??___flmul+3)^0,w,c
  3446   001C54  B4D8               	btfsc	status,2,c
  3447   001C56  EF2F  F00E         	goto	u2171
  3448   001C5A  EF31  F00E         	goto	u2170
  3449   001C5E                     u2171:
  3450   001C5E  EF35  F00E         	goto	l1370
  3451   001C62                     u2170:
  3452   001C62                     l3334:
  3453   001C62  0E01               	movlw	1
  3454   001C64  6E20               	movwf	___flmul@aexp^0,c
  3455   001C66  EF3E  F00E         	goto	l1369
  3456   001C6A                     l1370:
  3457   001C6A  A022               	btfss	___flmul@prod^0,0,c
  3458   001C6C  EF3A  F00E         	goto	u2181
  3459   001C70  EF3C  F00E         	goto	u2180
  3460   001C74                     u2181:
  3461   001C74  EF3E  F00E         	goto	l1369
  3462   001C78                     u2180:
  3463   001C78  EF31  F00E         	goto	l3334
  3464   001C7C                     l1369:
  3465   001C7C  5020               	movf	___flmul@aexp^0,w,c
  3466   001C7E  B4D8               	btfsc	status,2,c
  3467   001C80  EF44  F00E         	goto	u2191
  3468   001C84  EF46  F00E         	goto	u2190
  3469   001C88                     u2191:
  3470   001C88  EF6A  F00E         	goto	l3346
  3471   001C8C                     u2190:
  3472   001C8C  0E01               	movlw	1
  3473   001C8E  2622               	addwf	___flmul@prod^0,f,c
  3474   001C90  0E00               	movlw	0
  3475   001C92  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3476   001C94  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3477   001C96  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3478   001C98  A025               	btfss	(___flmul@prod+3)^0,0,c
  3479   001C9A  EF51  F00E         	goto	u2201
  3480   001C9E  EF53  F00E         	goto	u2200
  3481   001CA2                     u2201:
  3482   001CA2  EF6A  F00E         	goto	l3346
  3483   001CA6                     u2200:
  3484   001CA6  C022  F017         	movff	___flmul@prod,??___flmul
  3485   001CAA  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  3486   001CAE  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  3487   001CB2  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  3488   001CB6  341A               	rlcf	(??___flmul+3)^0,w,c
  3489   001CB8  321A               	rrcf	(??___flmul+3)^0,f,c
  3490   001CBA  3219               	rrcf	(??___flmul+2)^0,f,c
  3491   001CBC  3218               	rrcf	(??___flmul+1)^0,f,c
  3492   001CBE  3217               	rrcf	??___flmul^0,f,c
  3493   001CC0  C017  F022         	movff	??___flmul,___flmul@prod
  3494   001CC4  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  3495   001CC8  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  3496   001CCC  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  3497   001CD0  4A26               	infsnz	___flmul@temp^0,f,c
  3498   001CD2  2A27               	incf	(___flmul@temp+1)^0,f,c
  3499   001CD4                     l3346:
  3500   001CD4  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  3501   001CD6  EF75  F00E         	goto	u2211
  3502   001CDA  5027               	movf	(___flmul@temp+1)^0,w,c
  3503   001CDC  E108               	bnz	u2210
  3504   001CDE  2826               	incf	___flmul@temp^0,w,c
  3505   001CE0  A0D8               	btfss	status,0,c
  3506   001CE2  EF75  F00E         	goto	u2211
  3507   001CE6  EF77  F00E         	goto	u2210
  3508   001CEA                     u2211:
  3509   001CEA  EF81  F00E         	goto	l3350
  3510   001CEE                     u2210:
  3511   001CEE  0E00               	movlw	0
  3512   001CF0  6E22               	movwf	___flmul@prod^0,c
  3513   001CF2  0E00               	movlw	0
  3514   001CF4  6E23               	movwf	(___flmul@prod+1)^0,c
  3515   001CF6  0E80               	movlw	128
  3516   001CF8  6E24               	movwf	(___flmul@prod+2)^0,c
  3517   001CFA  0E7F               	movlw	127
  3518   001CFC  6E25               	movwf	(___flmul@prod+3)^0,c
  3519   001CFE  EFAF  F00E         	goto	l3362
  3520   001D02                     l3350:
  3521   001D02  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  3522   001D04  EF8E  F00E         	goto	u2220
  3523   001D08  5027               	movf	(___flmul@temp+1)^0,w,c
  3524   001D0A  E106               	bnz	u2221
  3525   001D0C  0426               	decf	___flmul@temp^0,w,c
  3526   001D0E  B0D8               	btfsc	status,0,c
  3527   001D10  EF8C  F00E         	goto	u2221
  3528   001D14  EF8E  F00E         	goto	u2220
  3529   001D18                     u2221:
  3530   001D18  EF9A  F00E         	goto	l1377
  3531   001D1C                     u2220:
  3532   001D1C  0E00               	movlw	0
  3533   001D1E  6E22               	movwf	___flmul@prod^0,c
  3534   001D20  0E00               	movlw	0
  3535   001D22  6E23               	movwf	(___flmul@prod+1)^0,c
  3536   001D24  0E00               	movlw	0
  3537   001D26  6E24               	movwf	(___flmul@prod+2)^0,c
  3538   001D28  0E00               	movlw	0
  3539   001D2A  6E25               	movwf	(___flmul@prod+3)^0,c
  3540   001D2C  0E00               	movlw	0
  3541   001D2E  6E1B               	movwf	___flmul@sign^0,c
  3542   001D30  EFAF  F00E         	goto	l3362
  3543   001D34                     l1377:
  3544   001D34  C026  F021         	movff	___flmul@temp,___flmul@bexp
  3545   001D38  0EFF               	movlw	255
  3546   001D3A  1622               	andwf	___flmul@prod^0,f,c
  3547   001D3C  0EFF               	movlw	255
  3548   001D3E  1623               	andwf	(___flmul@prod+1)^0,f,c
  3549   001D40  0E7F               	movlw	127
  3550   001D42  1624               	andwf	(___flmul@prod+2)^0,f,c
  3551   001D44  0E00               	movlw	0
  3552   001D46  1625               	andwf	(___flmul@prod+3)^0,f,c
  3553   001D48  A021               	btfss	___flmul@bexp^0,0,c
  3554   001D4A  EFA9  F00E         	goto	u2231
  3555   001D4E  EFAB  F00E         	goto	u2230
  3556   001D52                     u2231:
  3557   001D52  EFAC  F00E         	goto	l3360
  3558   001D56                     u2230:
  3559   001D56  8E24               	bsf	(___flmul@prod+2)^0,7,c
  3560   001D58                     l3360:
  3561   001D58  90D8               	bcf	status,0,c
  3562   001D5A  3021               	rrcf	___flmul@bexp^0,w,c
  3563   001D5C  6E25               	movwf	(___flmul@prod+3)^0,c
  3564   001D5E                     l3362:
  3565   001D5E  501B               	movf	___flmul@sign^0,w,c
  3566   001D60  1225               	iorwf	(___flmul@prod+3)^0,f,c
  3567   001D62  C022  F00F         	movff	___flmul@prod,?___flmul
  3568   001D66  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  3569   001D6A  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  3570   001D6E  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  3571   001D72                     l1364:
  3572   001D72  0012               	return		;funcret
  3573   001D74                     __end_of___flmul:
  3574                           	callstack 0
  3575                           
  3576 ;; *************** function _read_timer *****************
  3577 ;; Defined at:
  3578 ;;		line 46 in file "timers.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  tH              1    0[COMRAM] PTR unsigned char 
  3581 ;;		 -> forward_navigation@timerH(1), 
  3582 ;;  tL              1    1[COMRAM] PTR unsigned char 
  3583 ;;		 -> forward_navigation@timerL(1), 
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;		None
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  1    wreg      void 
  3588 ;; Registers used:
  3589 ;;		wreg, fsr2l, fsr2h, status,2
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3598 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3599 ;;Total ram usage:        2 bytes
  3600 ;; Hardware stack levels used: 1
  3601 ;; Hardware stack levels required when called: 1
  3602 ;; This function calls:
  3603 ;;		Nothing
  3604 ;; This function is called by:
  3605 ;;		_forward_navigation
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text15
  3610   003946                     __ptext15:
  3611                           	callstack 0
  3612   003946                     _read_timer:
  3613                           	callstack 28
  3614   003946                     
  3615                           ;timers.c: 46: void read_timer(unsigned char *tH, unsigned char *tL);timers.c: 47: {;tim
      +                          ers.c: 51:     *tL = TMR0L;
  3616   003946  5002               	movf	read_timer@tL^0,w,c
  3617   003948  6ED9               	movwf	fsr2l,c
  3618   00394A  6ADA               	clrf	fsr2h,c
  3619   00394C  CFD3 FFDF          	movff	4051,indf2	;volatile
  3620                           
  3621                           ;timers.c: 52:     *tH = TMR0H;
  3622   003950  5001               	movf	read_timer@tH^0,w,c
  3623   003952  6ED9               	movwf	fsr2l,c
  3624   003954  6ADA               	clrf	fsr2h,c
  3625   003956  CFD4 FFDF          	movff	4052,indf2	;volatile
  3626   00395A  0012               	return		;funcret
  3627   00395C                     __end_of_read_timer:
  3628                           	callstack 0
  3629                           
  3630 ;; *************** function _pick_card *****************
  3631 ;; Defined at:
  3632 ;;		line 141 in file "manoeuvres.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  3635 ;;		 -> main@motorL(9), 
  3636 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  3637 ;;		 -> main@motorR(9), 
  3638 ;;  backtrack       1   34[COMRAM] unsigned char 
  3639 ;;  key             1   35[COMRAM] unsigned char 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3651 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3653 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3654 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3655 ;;Total ram usage:        6 bytes
  3656 ;; Hardware stack levels used: 1
  3657 ;; Hardware stack levels required when called: 6
  3658 ;; This function calls:
  3659 ;;		_card_blue
  3660 ;;		_card_cyan
  3661 ;;		_card_green
  3662 ;;		_card_orange
  3663 ;;		_card_pink
  3664 ;;		_card_red
  3665 ;;		_card_white
  3666 ;;		_card_yellow
  3667 ;; This function is called by:
  3668 ;;		_forward_navigation
  3669 ;;		_return_to_sender
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text16
  3674   002626                     __ptext16:
  3675                           	callstack 0
  3676   002626                     _pick_card:
  3677                           	callstack 23
  3678   002626                     
  3679                           ;manoeuvres.c: 141: void pick_card(DC_motor *mL, DC_motor *mR, unsigned char backtrack, 
      +                          unsigned char key);manoeuvres.c: 142: {;manoeuvres.c: 143:     switch (key) {
  3680   002626  EF63  F013         	goto	l3760
  3681   00262A                     l3742:
  3682                           
  3683                           ;manoeuvres.c: 145:             card_red(mL, mR, backtrack);
  3684   00262A  C021  F01C         	movff	pick_card@mL,card_red@mL
  3685   00262E  C022  F01D         	movff	pick_card@mR,card_red@mR
  3686   002632  C023  F01E         	movff	pick_card@backtrack,card_red@backtrack
  3687   002636  EC6D  F018         	call	_card_red	;wreg free
  3688                           
  3689                           ;manoeuvres.c: 146:             break;
  3690   00263A  EF90  F013         	goto	l596
  3691   00263E                     l3744:
  3692                           
  3693                           ;manoeuvres.c: 148:             card_green(mL, mR, backtrack);
  3694   00263E  C021  F01C         	movff	pick_card@mL,card_green@mL
  3695   002642  C022  F01D         	movff	pick_card@mR,card_green@mR
  3696   002646  C023  F01E         	movff	pick_card@backtrack,card_green@backtrack
  3697   00264A  ECD5  F018         	call	_card_green	;wreg free
  3698                           
  3699                           ;manoeuvres.c: 149:             break;
  3700   00264E  EF90  F013         	goto	l596
  3701   002652                     l3746:
  3702                           
  3703                           ;manoeuvres.c: 151:             card_blue(mL, mR, backtrack);
  3704   002652  C021  F01C         	movff	pick_card@mL,card_blue@mL
  3705   002656  C022  F01D         	movff	pick_card@mR,card_blue@mR
  3706   00265A  C023  F01E         	movff	pick_card@backtrack,card_blue@backtrack
  3707   00265E  EC3D  F019         	call	_card_blue	;wreg free
  3708                           
  3709                           ;manoeuvres.c: 152:             break;
  3710   002662  EF90  F013         	goto	l596
  3711   002666                     l3748:
  3712                           
  3713                           ;manoeuvres.c: 154:             card_yellow(mL, mR, backtrack);
  3714   002666  C021  F01C         	movff	pick_card@mL,card_yellow@mL
  3715   00266A  C022  F01D         	movff	pick_card@mR,card_yellow@mR
  3716   00266E  C023  F01E         	movff	pick_card@backtrack,card_yellow@backtrack
  3717   002672  EC02  F017         	call	_card_yellow	;wreg free
  3718                           
  3719                           ;manoeuvres.c: 155:             break;
  3720   002676  EF90  F013         	goto	l596
  3721   00267A                     l3750:
  3722                           
  3723                           ;manoeuvres.c: 157:             card_pink(mL, mR, backtrack);
  3724   00267A  C021  F01C         	movff	pick_card@mL,card_pink@mL
  3725   00267E  C022  F01D         	movff	pick_card@mR,card_pink@mR
  3726   002682  C023  F01E         	movff	pick_card@backtrack,card_pink@backtrack
  3727   002686  EC42  F017         	call	_card_pink	;wreg free
  3728                           
  3729                           ;manoeuvres.c: 158:             break;
  3730   00268A  EF90  F013         	goto	l596
  3731   00268E                     l3752:
  3732                           
  3733                           ;manoeuvres.c: 160:             card_orange(mL, mR, backtrack);
  3734   00268E  C021  F01C         	movff	pick_card@mL,card_orange@mL
  3735   002692  C022  F01D         	movff	pick_card@mR,card_orange@mR
  3736   002696  C023  F01E         	movff	pick_card@backtrack,card_orange@backtrack
  3737   00269A  ECA1  F018         	call	_card_orange	;wreg free
  3738                           
  3739                           ;manoeuvres.c: 161:             break;
  3740   00269E  EF90  F013         	goto	l596
  3741   0026A2                     l3754:
  3742                           
  3743                           ;manoeuvres.c: 163:             card_cyan(mL, mR, backtrack);
  3744   0026A2  C021  F01C         	movff	pick_card@mL,card_cyan@mL
  3745   0026A6  C022  F01D         	movff	pick_card@mR,card_cyan@mR
  3746   0026AA  C023  F01E         	movff	pick_card@backtrack,card_cyan@backtrack
  3747   0026AE  EC09  F019         	call	_card_cyan	;wreg free
  3748                           
  3749                           ;manoeuvres.c: 164:             break;
  3750   0026B2  EF90  F013         	goto	l596
  3751   0026B6                     l3756:
  3752                           
  3753                           ;manoeuvres.c: 166:             card_white(mL, mR);
  3754   0026B6  C021  F01C         	movff	pick_card@mL,card_white@mL
  3755   0026BA  C022  F01D         	movff	pick_card@mR,card_white@mR
  3756   0026BE  EC2D  F01C         	call	_card_white	;wreg free
  3757                           
  3758                           ;manoeuvres.c: 167:             break;
  3759   0026C2  EF90  F013         	goto	l596
  3760   0026C6                     l3760:
  3761   0026C6  5024               	movf	pick_card@key^0,w,c
  3762   0026C8  6E25               	movwf	??_pick_card^0,c
  3763   0026CA  6A26               	clrf	(??_pick_card+1)^0,c
  3764                           
  3765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3766                           ; Switch size 1, requested type "simple"
  3767                           ; Number of cases is 1, Range of values is 0 to 0
  3768                           ; switch strategies available:
  3769                           ; Name         Instructions Cycles
  3770                           ; simple_byte            4     3 (average)
  3771                           ;	Chosen strategy is simple_byte
  3772   0026CC  5026               	movf	(??_pick_card+1)^0,w,c
  3773   0026CE  0A00               	xorlw	0	; case 0
  3774   0026D0  B4D8               	btfsc	status,2,c
  3775   0026D2  EF6D  F013         	goto	l4146
  3776   0026D6  EF90  F013         	goto	l596
  3777   0026DA                     l4146:
  3778                           
  3779                           ; Switch size 1, requested type "simple"
  3780                           ; Number of cases is 8, Range of values is 1 to 8
  3781                           ; switch strategies available:
  3782                           ; Name         Instructions Cycles
  3783                           ; simple_byte           25    13 (average)
  3784                           ;	Chosen strategy is simple_byte
  3785   0026DA  5025               	movf	??_pick_card^0,w,c
  3786   0026DC  0A01               	xorlw	1	; case 1
  3787   0026DE  B4D8               	btfsc	status,2,c
  3788   0026E0  EF15  F013         	goto	l3742
  3789   0026E4  0A03               	xorlw	3	; case 2
  3790   0026E6  B4D8               	btfsc	status,2,c
  3791   0026E8  EF1F  F013         	goto	l3744
  3792   0026EC  0A01               	xorlw	1	; case 3
  3793   0026EE  B4D8               	btfsc	status,2,c
  3794   0026F0  EF29  F013         	goto	l3746
  3795   0026F4  0A07               	xorlw	7	; case 4
  3796   0026F6  B4D8               	btfsc	status,2,c
  3797   0026F8  EF33  F013         	goto	l3748
  3798   0026FC  0A01               	xorlw	1	; case 5
  3799   0026FE  B4D8               	btfsc	status,2,c
  3800   002700  EF3D  F013         	goto	l3750
  3801   002704  0A03               	xorlw	3	; case 6
  3802   002706  B4D8               	btfsc	status,2,c
  3803   002708  EF47  F013         	goto	l3752
  3804   00270C  0A01               	xorlw	1	; case 7
  3805   00270E  B4D8               	btfsc	status,2,c
  3806   002710  EF51  F013         	goto	l3754
  3807   002714  0A0F               	xorlw	15	; case 8
  3808   002716  B4D8               	btfsc	status,2,c
  3809   002718  EF5B  F013         	goto	l3756
  3810   00271C  EF90  F013         	goto	l596
  3811   002720                     l596:
  3812   002720  0012               	return		;funcret
  3813   002722                     __end_of_pick_card:
  3814                           	callstack 0
  3815                           
  3816 ;; *************** function _card_yellow *****************
  3817 ;; Defined at:
  3818 ;;		line 58 in file "manoeuvres.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3821 ;;		 -> main@motorL(9), 
  3822 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3823 ;;		 -> main@motorR(9), 
  3824 ;;  backtrack       1   29[COMRAM] unsigned char 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;		None
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  1    wreg      void 
  3829 ;; Registers used:
  3830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3836 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3838 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3839 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3840 ;;Total ram usage:        5 bytes
  3841 ;; Hardware stack levels used: 1
  3842 ;; Hardware stack levels required when called: 5
  3843 ;; This function calls:
  3844 ;;		_headbuttReverse
  3845 ;;		_squareReverse
  3846 ;;		_turnLeft90
  3847 ;;		_turnRight90
  3848 ;; This function is called by:
  3849 ;;		_pick_card
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           	psect	text17
  3854   002E04                     __ptext17:
  3855                           	callstack 0
  3856   002E04                     _card_yellow:
  3857                           	callstack 23
  3858   002E04                     
  3859                           ;manoeuvres.c: 58: void card_yellow(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 59: {;manoeuvres.c: 60:     switch (backtrack) {
  3860   002E04  EF2C  F017         	goto	l3152
  3861   002E08                     l3146:
  3862                           
  3863                           ;manoeuvres.c: 62:             headbuttReverse(mL, mR);
  3864   002E08  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  3865   002E0C  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  3866   002E10  EC7B  F01B         	call	_headbuttReverse	;wreg free
  3867                           
  3868                           ;manoeuvres.c: 63:             squareReverse(mL, mR);
  3869   002E14  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  3870   002E18  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  3871   002E1C  ECEC  F01A         	call	_squareReverse	;wreg free
  3872                           
  3873                           ;manoeuvres.c: 64:             turnRight90(mL, mR);
  3874   002E20  C01C  F018         	movff	card_yellow@mL,turnRight90@mL
  3875   002E24  C01D  F019         	movff	card_yellow@mR,turnRight90@mR
  3876   002E28  EC43  F01B         	call	_turnRight90	;wreg free
  3877                           
  3878                           ;manoeuvres.c: 65:             break;
  3879   002E2C  EF41  F017         	goto	l559
  3880   002E30                     l3148:
  3881                           
  3882                           ;manoeuvres.c: 67:             turnLeft90(mL, mR);
  3883   002E30  C01C  F018         	movff	card_yellow@mL,turnLeft90@mL
  3884   002E34  C01D  F019         	movff	card_yellow@mR,turnLeft90@mR
  3885   002E38  EC5F  F01B         	call	_turnLeft90	;wreg free
  3886                           
  3887                           ;manoeuvres.c: 68:             squareReverse(mL, mR);
  3888   002E3C  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  3889   002E40  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  3890   002E44  ECEC  F01A         	call	_squareReverse	;wreg free
  3891                           
  3892                           ;manoeuvres.c: 69:             headbuttReverse(mL, mR);
  3893   002E48  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  3894   002E4C  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  3895   002E50  EC7B  F01B         	call	_headbuttReverse	;wreg free
  3896                           
  3897                           ;manoeuvres.c: 70:             break;
  3898   002E54  EF41  F017         	goto	l559
  3899   002E58                     l3152:
  3900   002E58  501E               	movf	card_yellow@backtrack^0,w,c
  3901   002E5A  6E1F               	movwf	??_card_yellow^0,c
  3902   002E5C  6A20               	clrf	(??_card_yellow+1)^0,c
  3903                           
  3904                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3905                           ; Switch size 1, requested type "simple"
  3906                           ; Number of cases is 1, Range of values is 0 to 0
  3907                           ; switch strategies available:
  3908                           ; Name         Instructions Cycles
  3909                           ; simple_byte            4     3 (average)
  3910                           ;	Chosen strategy is simple_byte
  3911   002E5E  5020               	movf	(??_card_yellow+1)^0,w,c
  3912   002E60  0A00               	xorlw	0	; case 0
  3913   002E62  B4D8               	btfsc	status,2,c
  3914   002E64  EF36  F017         	goto	l4148
  3915   002E68  EF41  F017         	goto	l559
  3916   002E6C                     l4148:
  3917                           
  3918                           ; Switch size 1, requested type "simple"
  3919                           ; Number of cases is 2, Range of values is 0 to 1
  3920                           ; switch strategies available:
  3921                           ; Name         Instructions Cycles
  3922                           ; simple_byte            7     4 (average)
  3923                           ;	Chosen strategy is simple_byte
  3924   002E6C  501F               	movf	??_card_yellow^0,w,c
  3925   002E6E  0A00               	xorlw	0	; case 0
  3926   002E70  B4D8               	btfsc	status,2,c
  3927   002E72  EF04  F017         	goto	l3146
  3928   002E76  0A01               	xorlw	1	; case 1
  3929   002E78  B4D8               	btfsc	status,2,c
  3930   002E7A  EF18  F017         	goto	l3148
  3931   002E7E  EF41  F017         	goto	l559
  3932   002E82                     l559:
  3933   002E82  0012               	return		;funcret
  3934   002E84                     __end_of_card_yellow:
  3935                           	callstack 0
  3936                           
  3937 ;; *************** function _card_white *****************
  3938 ;; Defined at:
  3939 ;;		line 131 in file "manoeuvres.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3942 ;;		 -> main@motorL(9), 
  3943 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3944 ;;		 -> main@motorR(9), 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      void 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3956 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3959 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3960 ;;Total ram usage:        2 bytes
  3961 ;; Hardware stack levels used: 1
  3962 ;; Hardware stack levels required when called: 5
  3963 ;; This function calls:
  3964 ;;		_UTurn
  3965 ;;		_headbuttReverse
  3966 ;; This function is called by:
  3967 ;;		_pick_card
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text18
  3972   00385A                     __ptext18:
  3973                           	callstack 0
  3974   00385A                     _card_white:
  3975                           	callstack 23
  3976   00385A                     
  3977                           ;manoeuvres.c: 131: void card_white(DC_motor *mL, DC_motor *mR);manoeuvres.c: 132: {;man
      +                          oeuvres.c: 133:     headbuttReverse(mL, mR);
  3978   00385A  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  3979   00385E  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  3980   003862  EC7B  F01B         	call	_headbuttReverse	;wreg free
  3981                           
  3982                           ;manoeuvres.c: 134:     UTurn(mL, mR);
  3983   003866  C01C  F018         	movff	card_white@mL,UTurn@mL
  3984   00386A  C01D  F019         	movff	card_white@mR,UTurn@mR
  3985   00386E  EC8D  F01A         	call	_UTurn	;wreg free
  3986                           
  3987                           ;manoeuvres.c: 135:     headbuttReverse(mL, mR);
  3988   003872  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  3989   003876  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  3990   00387A  EC7B  F01B         	call	_headbuttReverse	;wreg free
  3991   00387E  0012               	return		;funcret
  3992   003880                     __end_of_card_white:
  3993                           	callstack 0
  3994                           
  3995 ;; *************** function _card_red *****************
  3996 ;; Defined at:
  3997 ;;		line 7 in file "manoeuvres.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4000 ;;		 -> main@motorL(9), 
  4001 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4002 ;;		 -> main@motorR(9), 
  4003 ;;  backtrack       1   29[COMRAM] unsigned char 
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;		None
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  1    wreg      void 
  4008 ;; Registers used:
  4009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4015 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4017 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4018 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4019 ;;Total ram usage:        5 bytes
  4020 ;; Hardware stack levels used: 1
  4021 ;; Hardware stack levels required when called: 5
  4022 ;; This function calls:
  4023 ;;		_headbuttReverse
  4024 ;;		_turnLeft90
  4025 ;;		_turnRight90
  4026 ;; This function is called by:
  4027 ;;		_pick_card
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	text19
  4032   0030DA                     __ptext19:
  4033                           	callstack 0
  4034   0030DA                     _card_red:
  4035                           	callstack 23
  4036   0030DA                     
  4037                           ;manoeuvres.c: 7: void card_red(DC_motor *mL, DC_motor *mR, unsigned char backtrack);man
      +                          oeuvres.c: 8: {;manoeuvres.c: 9:     switch (backtrack) {
  4038   0030DA  EF8B  F018         	goto	l3110
  4039   0030DE                     l3104:
  4040                           
  4041                           ;manoeuvres.c: 11:             headbuttReverse(mL, mR);
  4042   0030DE  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  4043   0030E2  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  4044   0030E6  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4045                           
  4046                           ;manoeuvres.c: 12:             turnRight90(mL, mR);
  4047   0030EA  C01C  F018         	movff	card_red@mL,turnRight90@mL
  4048   0030EE  C01D  F019         	movff	card_red@mR,turnRight90@mR
  4049   0030F2  EC43  F01B         	call	_turnRight90	;wreg free
  4050                           
  4051                           ;manoeuvres.c: 13:             break;
  4052   0030F6  EFA0  F018         	goto	l538
  4053   0030FA                     l3106:
  4054                           
  4055                           ;manoeuvres.c: 15:             turnLeft90(mL, mR);
  4056   0030FA  C01C  F018         	movff	card_red@mL,turnLeft90@mL
  4057   0030FE  C01D  F019         	movff	card_red@mR,turnLeft90@mR
  4058   003102  EC5F  F01B         	call	_turnLeft90	;wreg free
  4059                           
  4060                           ;manoeuvres.c: 16:             headbuttReverse(mL, mR);
  4061   003106  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  4062   00310A  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  4063   00310E  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4064                           
  4065                           ;manoeuvres.c: 17:             break;
  4066   003112  EFA0  F018         	goto	l538
  4067   003116                     l3110:
  4068   003116  501E               	movf	card_red@backtrack^0,w,c
  4069   003118  6E1F               	movwf	??_card_red^0,c
  4070   00311A  6A20               	clrf	(??_card_red+1)^0,c
  4071                           
  4072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4073                           ; Switch size 1, requested type "simple"
  4074                           ; Number of cases is 1, Range of values is 0 to 0
  4075                           ; switch strategies available:
  4076                           ; Name         Instructions Cycles
  4077                           ; simple_byte            4     3 (average)
  4078                           ;	Chosen strategy is simple_byte
  4079   00311C  5020               	movf	(??_card_red+1)^0,w,c
  4080   00311E  0A00               	xorlw	0	; case 0
  4081   003120  B4D8               	btfsc	status,2,c
  4082   003122  EF95  F018         	goto	l4150
  4083   003126  EFA0  F018         	goto	l538
  4084   00312A                     l4150:
  4085                           
  4086                           ; Switch size 1, requested type "simple"
  4087                           ; Number of cases is 2, Range of values is 0 to 1
  4088                           ; switch strategies available:
  4089                           ; Name         Instructions Cycles
  4090                           ; simple_byte            7     4 (average)
  4091                           ;	Chosen strategy is simple_byte
  4092   00312A  501F               	movf	??_card_red^0,w,c
  4093   00312C  0A00               	xorlw	0	; case 0
  4094   00312E  B4D8               	btfsc	status,2,c
  4095   003130  EF6F  F018         	goto	l3104
  4096   003134  0A01               	xorlw	1	; case 1
  4097   003136  B4D8               	btfsc	status,2,c
  4098   003138  EF7D  F018         	goto	l3106
  4099   00313C  EFA0  F018         	goto	l538
  4100   003140                     l538:
  4101   003140  0012               	return		;funcret
  4102   003142                     __end_of_card_red:
  4103                           	callstack 0
  4104                           
  4105 ;; *************** function _card_pink *****************
  4106 ;; Defined at:
  4107 ;;		line 77 in file "manoeuvres.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4110 ;;		 -> main@motorL(9), 
  4111 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4112 ;;		 -> main@motorR(9), 
  4113 ;;  backtrack       1   29[COMRAM] unsigned char 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;		None
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      void 
  4118 ;; Registers used:
  4119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4125 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4127 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4128 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4129 ;;Total ram usage:        5 bytes
  4130 ;; Hardware stack levels used: 1
  4131 ;; Hardware stack levels required when called: 5
  4132 ;; This function calls:
  4133 ;;		_headbuttReverse
  4134 ;;		_squareReverse
  4135 ;;		_turnLeft90
  4136 ;;		_turnRight90
  4137 ;; This function is called by:
  4138 ;;		_pick_card
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           	psect	text20
  4143   002E84                     __ptext20:
  4144                           	callstack 0
  4145   002E84                     _card_pink:
  4146                           	callstack 23
  4147   002E84                     
  4148                           ;manoeuvres.c: 77: void card_pink(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 78: {;manoeuvres.c: 79:     switch (backtrack) {
  4149   002E84  EF6C  F017         	goto	l3166
  4150   002E88                     l3160:
  4151                           
  4152                           ;manoeuvres.c: 81:             headbuttReverse(mL, mR);
  4153   002E88  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  4154   002E8C  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  4155   002E90  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4156                           
  4157                           ;manoeuvres.c: 82:             squareReverse(mL, mR);
  4158   002E94  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  4159   002E98  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  4160   002E9C  ECEC  F01A         	call	_squareReverse	;wreg free
  4161                           
  4162                           ;manoeuvres.c: 83:             turnLeft90(mL, mR);
  4163   002EA0  C01C  F018         	movff	card_pink@mL,turnLeft90@mL
  4164   002EA4  C01D  F019         	movff	card_pink@mR,turnLeft90@mR
  4165   002EA8  EC5F  F01B         	call	_turnLeft90	;wreg free
  4166                           
  4167                           ;manoeuvres.c: 84:             break;
  4168   002EAC  EF81  F017         	goto	l566
  4169   002EB0                     l3162:
  4170                           
  4171                           ;manoeuvres.c: 86:             turnRight90(mL, mR);
  4172   002EB0  C01C  F018         	movff	card_pink@mL,turnRight90@mL
  4173   002EB4  C01D  F019         	movff	card_pink@mR,turnRight90@mR
  4174   002EB8  EC43  F01B         	call	_turnRight90	;wreg free
  4175                           
  4176                           ;manoeuvres.c: 87:             squareReverse(mL, mR);
  4177   002EBC  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  4178   002EC0  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  4179   002EC4  ECEC  F01A         	call	_squareReverse	;wreg free
  4180                           
  4181                           ;manoeuvres.c: 88:             headbuttReverse(mL, mR);
  4182   002EC8  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  4183   002ECC  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  4184   002ED0  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4185                           
  4186                           ;manoeuvres.c: 89:             break;
  4187   002ED4  EF81  F017         	goto	l566
  4188   002ED8                     l3166:
  4189   002ED8  501E               	movf	card_pink@backtrack^0,w,c
  4190   002EDA  6E1F               	movwf	??_card_pink^0,c
  4191   002EDC  6A20               	clrf	(??_card_pink+1)^0,c
  4192                           
  4193                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4194                           ; Switch size 1, requested type "simple"
  4195                           ; Number of cases is 1, Range of values is 0 to 0
  4196                           ; switch strategies available:
  4197                           ; Name         Instructions Cycles
  4198                           ; simple_byte            4     3 (average)
  4199                           ;	Chosen strategy is simple_byte
  4200   002EDE  5020               	movf	(??_card_pink+1)^0,w,c
  4201   002EE0  0A00               	xorlw	0	; case 0
  4202   002EE2  B4D8               	btfsc	status,2,c
  4203   002EE4  EF76  F017         	goto	l4152
  4204   002EE8  EF81  F017         	goto	l566
  4205   002EEC                     l4152:
  4206                           
  4207                           ; Switch size 1, requested type "simple"
  4208                           ; Number of cases is 2, Range of values is 0 to 1
  4209                           ; switch strategies available:
  4210                           ; Name         Instructions Cycles
  4211                           ; simple_byte            7     4 (average)
  4212                           ;	Chosen strategy is simple_byte
  4213   002EEC  501F               	movf	??_card_pink^0,w,c
  4214   002EEE  0A00               	xorlw	0	; case 0
  4215   002EF0  B4D8               	btfsc	status,2,c
  4216   002EF2  EF44  F017         	goto	l3160
  4217   002EF6  0A01               	xorlw	1	; case 1
  4218   002EF8  B4D8               	btfsc	status,2,c
  4219   002EFA  EF58  F017         	goto	l3162
  4220   002EFE  EF81  F017         	goto	l566
  4221   002F02                     l566:
  4222   002F02  0012               	return		;funcret
  4223   002F04                     __end_of_card_pink:
  4224                           	callstack 0
  4225                           
  4226 ;; *************** function _squareReverse *****************
  4227 ;; Defined at:
  4228 ;;		line 265 in file "dc_motor.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4231 ;;		 -> main@motorL(9), 
  4232 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4233 ;;		 -> main@motorR(9), 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4245 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4248 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4249 ;;Total ram usage:        4 bytes
  4250 ;; Hardware stack levels used: 1
  4251 ;; Hardware stack levels required when called: 4
  4252 ;; This function calls:
  4253 ;;		_fullSpeedReverse
  4254 ;;		_stop
  4255 ;;		_toggle_brake_lights
  4256 ;; This function is called by:
  4257 ;;		_card_yellow
  4258 ;;		_card_pink
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text21
  4263   0035D8                     __ptext21:
  4264                           	callstack 0
  4265   0035D8                     _squareReverse:
  4266                           	callstack 23
  4267   0035D8                     
  4268                           ;dc_motor.c: 265: void squareReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 266: {;dc_m
      +                          otor.c: 267:     toggle_brake_lights();
  4269   0035D8  EC53  F01C         	call	_toggle_brake_lights	;wreg free
  4270   0035DC                     
  4271                           ;dc_motor.c: 269:     fullSpeedReverse(mL, mR);
  4272   0035DC  C018  F013         	movff	squareReverse@mL,fullSpeedReverse@mL
  4273   0035E0  C019  F014         	movff	squareReverse@mR,fullSpeedReverse@mR
  4274   0035E4  EC75  F015         	call	_fullSpeedReverse	;wreg free
  4275   0035E8                     
  4276                           ;dc_motor.c: 270:     _delay((unsigned long)((squareDelay)*(64000000/4000.0)));
  4277   0035E8  0EC7               	movlw	199
  4278   0035EA  6E1B               	movwf	(??_squareReverse+1)^0,c
  4279   0035EC  0E0D               	movlw	13
  4280   0035EE  6E1A               	movwf	??_squareReverse^0,c
  4281   0035F0  0EC6               	movlw	198
  4282   0035F2                     u3257:
  4283   0035F2  2EE8               	decfsz	wreg,f,c
  4284   0035F4  D7FE               	bra	u3257
  4285   0035F6  2E1A               	decfsz	??_squareReverse^0,f,c
  4286   0035F8  D7FC               	bra	u3257
  4287   0035FA  2E1B               	decfsz	(??_squareReverse+1)^0,f,c
  4288   0035FC  D7FA               	bra	u3257
  4289   0035FE  D000               	nop2	
  4290   003600                     
  4291                           ;dc_motor.c: 271:     stop(mL, mR);
  4292   003600  C018  F013         	movff	squareReverse@mL,stop@mL
  4293   003604  C019  F014         	movff	squareReverse@mR,stop@mR
  4294   003608  ECBB  F016         	call	_stop	;wreg free
  4295   00360C                     
  4296                           ;dc_motor.c: 273:     toggle_brake_lights();
  4297   00360C  EC53  F01C         	call	_toggle_brake_lights	;wreg free
  4298   003610  0012               	return		;funcret
  4299   003612                     __end_of_squareReverse:
  4300                           	callstack 0
  4301                           
  4302 ;; *************** function _card_orange *****************
  4303 ;; Defined at:
  4304 ;;		line 96 in file "manoeuvres.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4307 ;;		 -> main@motorL(9), 
  4308 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4309 ;;		 -> main@motorR(9), 
  4310 ;;  backtrack       1   29[COMRAM] unsigned char 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4322 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4325 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4326 ;;Total ram usage:        5 bytes
  4327 ;; Hardware stack levels used: 1
  4328 ;; Hardware stack levels required when called: 5
  4329 ;; This function calls:
  4330 ;;		_headbuttReverse
  4331 ;;		_turnLeft135
  4332 ;;		_turnRight135
  4333 ;; This function is called by:
  4334 ;;		_pick_card
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text22
  4339   003142                     __ptext22:
  4340                           	callstack 0
  4341   003142                     _card_orange:
  4342                           	callstack 23
  4343   003142                     
  4344                           ;manoeuvres.c: 96: void card_orange(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 97: {;manoeuvres.c: 98:     switch (backtrack) {
  4345   003142  EFBF  F018         	goto	l3180
  4346   003146                     l3174:
  4347                           
  4348                           ;manoeuvres.c: 100:             headbuttReverse(mL, mR);
  4349   003146  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  4350   00314A  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  4351   00314E  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4352                           
  4353                           ;manoeuvres.c: 101:             turnRight135(mL, mR);
  4354   003152  C01C  F018         	movff	card_orange@mL,turnRight135@mL
  4355   003156  C01D  F019         	movff	card_orange@mR,turnRight135@mR
  4356   00315A  EC09  F01B         	call	_turnRight135	;wreg free
  4357                           
  4358                           ;manoeuvres.c: 102:             break;
  4359   00315E  EFD4  F018         	goto	l573
  4360   003162                     l3176:
  4361                           
  4362                           ;manoeuvres.c: 104:             turnLeft135(mL, mR);
  4363   003162  C01C  F018         	movff	card_orange@mL,turnLeft135@mL
  4364   003166  C01D  F019         	movff	card_orange@mR,turnLeft135@mR
  4365   00316A  EC26  F01B         	call	_turnLeft135	;wreg free
  4366                           
  4367                           ;manoeuvres.c: 105:             headbuttReverse(mL, mR);
  4368   00316E  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  4369   003172  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  4370   003176  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4371                           
  4372                           ;manoeuvres.c: 106:             break;
  4373   00317A  EFD4  F018         	goto	l573
  4374   00317E                     l3180:
  4375   00317E  501E               	movf	card_orange@backtrack^0,w,c
  4376   003180  6E1F               	movwf	??_card_orange^0,c
  4377   003182  6A20               	clrf	(??_card_orange+1)^0,c
  4378                           
  4379                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4380                           ; Switch size 1, requested type "simple"
  4381                           ; Number of cases is 1, Range of values is 0 to 0
  4382                           ; switch strategies available:
  4383                           ; Name         Instructions Cycles
  4384                           ; simple_byte            4     3 (average)
  4385                           ;	Chosen strategy is simple_byte
  4386   003184  5020               	movf	(??_card_orange+1)^0,w,c
  4387   003186  0A00               	xorlw	0	; case 0
  4388   003188  B4D8               	btfsc	status,2,c
  4389   00318A  EFC9  F018         	goto	l4154
  4390   00318E  EFD4  F018         	goto	l573
  4391   003192                     l4154:
  4392                           
  4393                           ; Switch size 1, requested type "simple"
  4394                           ; Number of cases is 2, Range of values is 0 to 1
  4395                           ; switch strategies available:
  4396                           ; Name         Instructions Cycles
  4397                           ; simple_byte            7     4 (average)
  4398                           ;	Chosen strategy is simple_byte
  4399   003192  501F               	movf	??_card_orange^0,w,c
  4400   003194  0A00               	xorlw	0	; case 0
  4401   003196  B4D8               	btfsc	status,2,c
  4402   003198  EFA3  F018         	goto	l3174
  4403   00319C  0A01               	xorlw	1	; case 1
  4404   00319E  B4D8               	btfsc	status,2,c
  4405   0031A0  EFB1  F018         	goto	l3176
  4406   0031A4  EFD4  F018         	goto	l573
  4407   0031A8                     l573:
  4408   0031A8  0012               	return		;funcret
  4409   0031AA                     __end_of_card_orange:
  4410                           	callstack 0
  4411                           
  4412 ;; *************** function _card_green *****************
  4413 ;; Defined at:
  4414 ;;		line 24 in file "manoeuvres.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4417 ;;		 -> main@motorL(9), 
  4418 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4419 ;;		 -> main@motorR(9), 
  4420 ;;  backtrack       1   29[COMRAM] unsigned char 
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4432 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4434 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4435 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4436 ;;Total ram usage:        5 bytes
  4437 ;; Hardware stack levels used: 1
  4438 ;; Hardware stack levels required when called: 5
  4439 ;; This function calls:
  4440 ;;		_headbuttReverse
  4441 ;;		_turnLeft90
  4442 ;;		_turnRight90
  4443 ;; This function is called by:
  4444 ;;		_pick_card
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           	psect	text23
  4449   0031AA                     __ptext23:
  4450                           	callstack 0
  4451   0031AA                     _card_green:
  4452                           	callstack 23
  4453   0031AA                     
  4454                           ;manoeuvres.c: 24: void card_green(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 25: {;manoeuvres.c: 26:     switch (backtrack) {
  4455   0031AA  EFF3  F018         	goto	l3124
  4456   0031AE                     l3118:
  4457                           
  4458                           ;manoeuvres.c: 28:             headbuttReverse(mL, mR);
  4459   0031AE  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  4460   0031B2  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  4461   0031B6  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4462                           
  4463                           ;manoeuvres.c: 29:             turnLeft90(mL, mR);
  4464   0031BA  C01C  F018         	movff	card_green@mL,turnLeft90@mL
  4465   0031BE  C01D  F019         	movff	card_green@mR,turnLeft90@mR
  4466   0031C2  EC5F  F01B         	call	_turnLeft90	;wreg free
  4467                           
  4468                           ;manoeuvres.c: 30:             break;
  4469   0031C6  EF08  F019         	goto	l545
  4470   0031CA                     l3120:
  4471                           
  4472                           ;manoeuvres.c: 32:             turnRight90(mL, mR);
  4473   0031CA  C01C  F018         	movff	card_green@mL,turnRight90@mL
  4474   0031CE  C01D  F019         	movff	card_green@mR,turnRight90@mR
  4475   0031D2  EC43  F01B         	call	_turnRight90	;wreg free
  4476                           
  4477                           ;manoeuvres.c: 33:             headbuttReverse(mL, mR);
  4478   0031D6  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  4479   0031DA  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  4480   0031DE  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4481                           
  4482                           ;manoeuvres.c: 34:             break;
  4483   0031E2  EF08  F019         	goto	l545
  4484   0031E6                     l3124:
  4485   0031E6  501E               	movf	card_green@backtrack^0,w,c
  4486   0031E8  6E1F               	movwf	??_card_green^0,c
  4487   0031EA  6A20               	clrf	(??_card_green+1)^0,c
  4488                           
  4489                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4490                           ; Switch size 1, requested type "simple"
  4491                           ; Number of cases is 1, Range of values is 0 to 0
  4492                           ; switch strategies available:
  4493                           ; Name         Instructions Cycles
  4494                           ; simple_byte            4     3 (average)
  4495                           ;	Chosen strategy is simple_byte
  4496   0031EC  5020               	movf	(??_card_green+1)^0,w,c
  4497   0031EE  0A00               	xorlw	0	; case 0
  4498   0031F0  B4D8               	btfsc	status,2,c
  4499   0031F2  EFFD  F018         	goto	l4156
  4500   0031F6  EF08  F019         	goto	l545
  4501   0031FA                     l4156:
  4502                           
  4503                           ; Switch size 1, requested type "simple"
  4504                           ; Number of cases is 2, Range of values is 0 to 1
  4505                           ; switch strategies available:
  4506                           ; Name         Instructions Cycles
  4507                           ; simple_byte            7     4 (average)
  4508                           ;	Chosen strategy is simple_byte
  4509   0031FA  501F               	movf	??_card_green^0,w,c
  4510   0031FC  0A00               	xorlw	0	; case 0
  4511   0031FE  B4D8               	btfsc	status,2,c
  4512   003200  EFD7  F018         	goto	l3118
  4513   003204  0A01               	xorlw	1	; case 1
  4514   003206  B4D8               	btfsc	status,2,c
  4515   003208  EFE5  F018         	goto	l3120
  4516   00320C  EF08  F019         	goto	l545
  4517   003210                     l545:
  4518   003210  0012               	return		;funcret
  4519   003212                     __end_of_card_green:
  4520                           	callstack 0
  4521                           
  4522 ;; *************** function _turnRight90 *****************
  4523 ;; Defined at:
  4524 ;;		line 193 in file "dc_motor.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4527 ;;		 -> main@motorL(9), 
  4528 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4529 ;;		 -> main@motorR(9), 
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;		None
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      void 
  4534 ;; Registers used:
  4535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4541 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4543 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4544 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4545 ;;Total ram usage:        4 bytes
  4546 ;; Hardware stack levels used: 1
  4547 ;; Hardware stack levels required when called: 4
  4548 ;; This function calls:
  4549 ;;		_stop
  4550 ;;		_toggle_right_indicators
  4551 ;;		_turnRight
  4552 ;; This function is called by:
  4553 ;;		_card_red
  4554 ;;		_card_green
  4555 ;;		_card_yellow
  4556 ;;		_card_pink
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text24
  4561   003686                     __ptext24:
  4562                           	callstack 0
  4563   003686                     _turnRight90:
  4564                           	callstack 23
  4565   003686                     
  4566                           ;dc_motor.c: 193: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 194: {;dc_mot
      +                          or.c: 195:     toggle_right_indicators();
  4567   003686  EC64  F01C         	call	_toggle_right_indicators	;wreg free
  4568   00368A                     
  4569                           ;dc_motor.c: 197:     turnRight(mL, mR);
  4570   00368A  C018  F013         	movff	turnRight90@mL,turnRight@mL
  4571   00368E  C019  F014         	movff	turnRight90@mR,turnRight@mR
  4572   003692  ECBD  F014         	call	_turnRight	;wreg free
  4573   003696                     
  4574                           ;dc_motor.c: 198:     _delay((unsigned long)((turnRight90Delay)*(64000000/4000.0)));
  4575   003696  0E09               	movlw	9
  4576   003698  6E1B               	movwf	(??_turnRight90+1)^0,c
  4577   00369A  0EC5               	movlw	197
  4578   00369C  6E1A               	movwf	??_turnRight90^0,c
  4579   00369E  0E20               	movlw	32
  4580   0036A0                     u3267:
  4581   0036A0  2EE8               	decfsz	wreg,f,c
  4582   0036A2  D7FE               	bra	u3267
  4583   0036A4  2E1A               	decfsz	??_turnRight90^0,f,c
  4584   0036A6  D7FC               	bra	u3267
  4585   0036A8  2E1B               	decfsz	(??_turnRight90+1)^0,f,c
  4586   0036AA  D7FA               	bra	u3267
  4587   0036AC                     
  4588                           ;dc_motor.c: 199:     stop(mL, mR);
  4589   0036AC  C018  F013         	movff	turnRight90@mL,stop@mL
  4590   0036B0  C019  F014         	movff	turnRight90@mR,stop@mR
  4591   0036B4  ECBB  F016         	call	_stop	;wreg free
  4592   0036B8                     
  4593                           ;dc_motor.c: 201:     toggle_right_indicators();
  4594   0036B8  EC64  F01C         	call	_toggle_right_indicators	;wreg free
  4595   0036BC  0012               	return		;funcret
  4596   0036BE                     __end_of_turnRight90:
  4597                           	callstack 0
  4598                           
  4599 ;; *************** function _turnLeft90 *****************
  4600 ;; Defined at:
  4601 ;;		line 179 in file "dc_motor.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4604 ;;		 -> main@motorL(9), 
  4605 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4606 ;;		 -> main@motorR(9), 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;		None
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  1    wreg      void 
  4611 ;; Registers used:
  4612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4618 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4620 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4621 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4622 ;;Total ram usage:        4 bytes
  4623 ;; Hardware stack levels used: 1
  4624 ;; Hardware stack levels required when called: 4
  4625 ;; This function calls:
  4626 ;;		_stop
  4627 ;;		_toggle_left_indicators
  4628 ;;		_turnLeft
  4629 ;; This function is called by:
  4630 ;;		_card_red
  4631 ;;		_card_green
  4632 ;;		_card_yellow
  4633 ;;		_card_pink
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text25
  4638   0036BE                     __ptext25:
  4639                           	callstack 0
  4640   0036BE                     _turnLeft90:
  4641                           	callstack 23
  4642   0036BE                     
  4643                           ;dc_motor.c: 179: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 180: {;dc_moto
      +                          r.c: 181:     toggle_left_indicators();
  4644   0036BE  EC74  F01C         	call	_toggle_left_indicators	;wreg free
  4645   0036C2                     
  4646                           ;dc_motor.c: 183:     turnLeft(mL, mR);
  4647   0036C2  C018  F013         	movff	turnLeft90@mL,turnLeft@mL
  4648   0036C6  C019  F014         	movff	turnLeft90@mR,turnLeft@mR
  4649   0036CA  EC19  F015         	call	_turnLeft	;wreg free
  4650   0036CE                     
  4651                           ;dc_motor.c: 184:     _delay((unsigned long)((turnLeft90Delay)*(64000000/4000.0)));
  4652   0036CE  0E07               	movlw	7
  4653   0036D0  6E1B               	movwf	(??_turnLeft90+1)^0,c
  4654   0036D2  0ED2               	movlw	210
  4655   0036D4  6E1A               	movwf	??_turnLeft90^0,c
  4656   0036D6  0E6E               	movlw	110
  4657   0036D8                     u3277:
  4658   0036D8  2EE8               	decfsz	wreg,f,c
  4659   0036DA  D7FE               	bra	u3277
  4660   0036DC  2E1A               	decfsz	??_turnLeft90^0,f,c
  4661   0036DE  D7FC               	bra	u3277
  4662   0036E0  2E1B               	decfsz	(??_turnLeft90+1)^0,f,c
  4663   0036E2  D7FA               	bra	u3277
  4664   0036E4                     
  4665                           ;dc_motor.c: 185:     stop(mL, mR);
  4666   0036E4  C018  F013         	movff	turnLeft90@mL,stop@mL
  4667   0036E8  C019  F014         	movff	turnLeft90@mR,stop@mR
  4668   0036EC  ECBB  F016         	call	_stop	;wreg free
  4669   0036F0                     
  4670                           ;dc_motor.c: 187:     toggle_left_indicators();
  4671   0036F0  EC74  F01C         	call	_toggle_left_indicators	;wreg free
  4672   0036F4  0012               	return		;funcret
  4673   0036F6                     __end_of_turnLeft90:
  4674                           	callstack 0
  4675                           
  4676 ;; *************** function _card_cyan *****************
  4677 ;; Defined at:
  4678 ;;		line 113 in file "manoeuvres.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4681 ;;		 -> main@motorL(9), 
  4682 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4683 ;;		 -> main@motorR(9), 
  4684 ;;  backtrack       1   29[COMRAM] unsigned char 
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;		None
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      void 
  4689 ;; Registers used:
  4690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4696 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4698 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4699 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4700 ;;Total ram usage:        5 bytes
  4701 ;; Hardware stack levels used: 1
  4702 ;; Hardware stack levels required when called: 5
  4703 ;; This function calls:
  4704 ;;		_headbuttReverse
  4705 ;;		_turnLeft135
  4706 ;;		_turnRight135
  4707 ;; This function is called by:
  4708 ;;		_pick_card
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           	psect	text26
  4713   003212                     __ptext26:
  4714                           	callstack 0
  4715   003212                     _card_cyan:
  4716                           	callstack 23
  4717   003212                     
  4718                           ;manoeuvres.c: 113: void card_cyan(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 114: {;manoeuvres.c: 115:     switch (backtrack) {
  4719   003212  EF27  F019         	goto	l3194
  4720   003216                     l3188:
  4721                           
  4722                           ;manoeuvres.c: 117:             headbuttReverse(mL, mR);
  4723   003216  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  4724   00321A  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  4725   00321E  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4726                           
  4727                           ;manoeuvres.c: 118:             turnLeft135(mL, mR);
  4728   003222  C01C  F018         	movff	card_cyan@mL,turnLeft135@mL
  4729   003226  C01D  F019         	movff	card_cyan@mR,turnLeft135@mR
  4730   00322A  EC26  F01B         	call	_turnLeft135	;wreg free
  4731                           
  4732                           ;manoeuvres.c: 119:             break;
  4733   00322E  EF3C  F019         	goto	l580
  4734   003232                     l3190:
  4735                           
  4736                           ;manoeuvres.c: 121:             turnRight135(mL, mR);
  4737   003232  C01C  F018         	movff	card_cyan@mL,turnRight135@mL
  4738   003236  C01D  F019         	movff	card_cyan@mR,turnRight135@mR
  4739   00323A  EC09  F01B         	call	_turnRight135	;wreg free
  4740                           
  4741                           ;manoeuvres.c: 122:             headbuttReverse(mL, mR);
  4742   00323E  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  4743   003242  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  4744   003246  EC7B  F01B         	call	_headbuttReverse	;wreg free
  4745                           
  4746                           ;manoeuvres.c: 123:             break;
  4747   00324A  EF3C  F019         	goto	l580
  4748   00324E                     l3194:
  4749   00324E  501E               	movf	card_cyan@backtrack^0,w,c
  4750   003250  6E1F               	movwf	??_card_cyan^0,c
  4751   003252  6A20               	clrf	(??_card_cyan+1)^0,c
  4752                           
  4753                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4754                           ; Switch size 1, requested type "simple"
  4755                           ; Number of cases is 1, Range of values is 0 to 0
  4756                           ; switch strategies available:
  4757                           ; Name         Instructions Cycles
  4758                           ; simple_byte            4     3 (average)
  4759                           ;	Chosen strategy is simple_byte
  4760   003254  5020               	movf	(??_card_cyan+1)^0,w,c
  4761   003256  0A00               	xorlw	0	; case 0
  4762   003258  B4D8               	btfsc	status,2,c
  4763   00325A  EF31  F019         	goto	l4158
  4764   00325E  EF3C  F019         	goto	l580
  4765   003262                     l4158:
  4766                           
  4767                           ; Switch size 1, requested type "simple"
  4768                           ; Number of cases is 2, Range of values is 0 to 1
  4769                           ; switch strategies available:
  4770                           ; Name         Instructions Cycles
  4771                           ; simple_byte            7     4 (average)
  4772                           ;	Chosen strategy is simple_byte
  4773   003262  501F               	movf	??_card_cyan^0,w,c
  4774   003264  0A00               	xorlw	0	; case 0
  4775   003266  B4D8               	btfsc	status,2,c
  4776   003268  EF0B  F019         	goto	l3188
  4777   00326C  0A01               	xorlw	1	; case 1
  4778   00326E  B4D8               	btfsc	status,2,c
  4779   003270  EF19  F019         	goto	l3190
  4780   003274  EF3C  F019         	goto	l580
  4781   003278                     l580:
  4782   003278  0012               	return		;funcret
  4783   00327A                     __end_of_card_cyan:
  4784                           	callstack 0
  4785                           
  4786 ;; *************** function _turnRight135 *****************
  4787 ;; Defined at:
  4788 ;;		line 221 in file "dc_motor.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4791 ;;		 -> main@motorL(9), 
  4792 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4793 ;;		 -> main@motorR(9), 
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;		None
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      void 
  4798 ;; Registers used:
  4799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4805 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4807 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;Total ram usage:        4 bytes
  4810 ;; Hardware stack levels used: 1
  4811 ;; Hardware stack levels required when called: 4
  4812 ;; This function calls:
  4813 ;;		_stop
  4814 ;;		_toggle_right_indicators
  4815 ;;		_turnRight
  4816 ;; This function is called by:
  4817 ;;		_card_orange
  4818 ;;		_card_cyan
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text27
  4823   003612                     __ptext27:
  4824                           	callstack 0
  4825   003612                     _turnRight135:
  4826                           	callstack 23
  4827   003612                     
  4828                           ;dc_motor.c: 221: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 222: {;dc_mo
      +                          tor.c: 223:     toggle_right_indicators();
  4829   003612  EC64  F01C         	call	_toggle_right_indicators	;wreg free
  4830   003616                     
  4831                           ;dc_motor.c: 225:     turnRight(mL, mR);
  4832   003616  C018  F013         	movff	turnRight135@mL,turnRight@mL
  4833   00361A  C019  F014         	movff	turnRight135@mR,turnRight@mR
  4834   00361E  ECBD  F014         	call	_turnRight	;wreg free
  4835   003622                     
  4836                           ;dc_motor.c: 226:     _delay((unsigned long)((turnRight135Delay)*(64000000/4000.0)));
  4837   003622  0E16               	movlw	22
  4838   003624  6E1B               	movwf	(??_turnRight135+1)^0,c
  4839   003626  0E45               	movlw	69
  4840   003628  6E1A               	movwf	??_turnRight135^0,c
  4841   00362A  0E17               	movlw	23
  4842   00362C                     u3287:
  4843   00362C  2EE8               	decfsz	wreg,f,c
  4844   00362E  D7FE               	bra	u3287
  4845   003630  2E1A               	decfsz	??_turnRight135^0,f,c
  4846   003632  D7FC               	bra	u3287
  4847   003634  2E1B               	decfsz	(??_turnRight135+1)^0,f,c
  4848   003636  D7FA               	bra	u3287
  4849   003638  0000               	nop	
  4850   00363A                     
  4851                           ;dc_motor.c: 227:     stop(mL, mR);
  4852   00363A  C018  F013         	movff	turnRight135@mL,stop@mL
  4853   00363E  C019  F014         	movff	turnRight135@mR,stop@mR
  4854   003642  ECBB  F016         	call	_stop	;wreg free
  4855   003646                     
  4856                           ;dc_motor.c: 229:     toggle_right_indicators();
  4857   003646  EC64  F01C         	call	_toggle_right_indicators	;wreg free
  4858   00364A  0012               	return		;funcret
  4859   00364C                     __end_of_turnRight135:
  4860                           	callstack 0
  4861                           
  4862 ;; *************** function _turnRight *****************
  4863 ;; Defined at:
  4864 ;;		line 125 in file "dc_motor.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  4867 ;;		 -> main@motorL(9), 
  4868 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  4869 ;;		 -> main@motorR(9), 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  rightGear       1   22[COMRAM] unsigned char 
  4872 ;;  leftGear        1   21[COMRAM] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4883 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4885 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4886 ;;Total ram usage:        5 bytes
  4887 ;; Hardware stack levels used: 1
  4888 ;; Hardware stack levels required when called: 3
  4889 ;; This function calls:
  4890 ;;		_setMotorPWM
  4891 ;; This function is called by:
  4892 ;;		_turnRight90
  4893 ;;		_turnRight135
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text28
  4898   00297A                     __ptext28:
  4899                           	callstack 0
  4900   00297A                     _turnRight:
  4901                           	callstack 23
  4902   00297A  0E28               	movlw	40
  4903   00297C  6E16               	movwf	turnRight@leftGear^0,c
  4904   00297E  0E28               	movlw	40
  4905   002980  6E17               	movwf	turnRight@rightGear^0,c
  4906   002982                     
  4907                           ;dc_motor.c: 129:     (mL->direction) = 1;
  4908   002982  5013               	movf	turnRight@mL^0,w,c
  4909   002984  6ED9               	movwf	fsr2l,c
  4910   002986  6ADA               	clrf	fsr2h,c
  4911   002988  0E01               	movlw	1
  4912   00298A  26D9               	addwf	fsr2l,f,c
  4913   00298C  0E01               	movlw	1
  4914   00298E  6EDF               	movwf	indf2,c
  4915   002990                     
  4916                           ;dc_motor.c: 130:     (mR->direction) = 0;
  4917   002990  5014               	movf	turnRight@mR^0,w,c
  4918   002992  6ED9               	movwf	fsr2l,c
  4919   002994  6ADA               	clrf	fsr2h,c
  4920   002996  0E01               	movlw	1
  4921   002998  26D9               	addwf	fsr2l,f,c
  4922   00299A  6ADF               	clrf	indf2,c
  4923                           
  4924                           ;dc_motor.c: 131:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  4925   00299C  EF00  F015         	goto	l2954
  4926   0029A0                     l2942:
  4927                           
  4928                           ;dc_motor.c: 132:         if (mL->power<leftGear) {mL->power++;}
  4929   0029A0  5013               	movf	turnRight@mL^0,w,c
  4930   0029A2  6ED9               	movwf	fsr2l,c
  4931   0029A4  6ADA               	clrf	fsr2h,c
  4932   0029A6  5016               	movf	turnRight@leftGear^0,w,c
  4933   0029A8  5CDE               	subwf	postinc2,w,c
  4934   0029AA  B0D8               	btfsc	status,0,c
  4935   0029AC  EFDA  F014         	goto	u1881
  4936   0029B0  EFDC  F014         	goto	u1880
  4937   0029B4                     u1881:
  4938   0029B4  EFE0  F014         	goto	l250
  4939   0029B8                     u1880:
  4940   0029B8  5013               	movf	turnRight@mL^0,w,c
  4941   0029BA  6ED9               	movwf	fsr2l,c
  4942   0029BC  6ADA               	clrf	fsr2h,c
  4943   0029BE  2ADF               	incf	indf2,f,c
  4944   0029C0                     l250:
  4945                           
  4946                           ;dc_motor.c: 133:         if (mR->power<rightGear) {mR->power++;}
  4947   0029C0  5014               	movf	turnRight@mR^0,w,c
  4948   0029C2  6ED9               	movwf	fsr2l,c
  4949   0029C4  6ADA               	clrf	fsr2h,c
  4950   0029C6  5017               	movf	turnRight@rightGear^0,w,c
  4951   0029C8  5CDE               	subwf	postinc2,w,c
  4952   0029CA  B0D8               	btfsc	status,0,c
  4953   0029CC  EFEA  F014         	goto	u1891
  4954   0029D0  EFEC  F014         	goto	u1890
  4955   0029D4                     u1891:
  4956   0029D4  EFF0  F014         	goto	l2948
  4957   0029D8                     u1890:
  4958   0029D8  5014               	movf	turnRight@mR^0,w,c
  4959   0029DA  6ED9               	movwf	fsr2l,c
  4960   0029DC  6ADA               	clrf	fsr2h,c
  4961   0029DE  2ADF               	incf	indf2,f,c
  4962   0029E0                     l2948:
  4963                           
  4964                           ;dc_motor.c: 134:         setMotorPWM(mL);
  4965   0029E0  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  4966   0029E4  EC46  F011         	call	_setMotorPWM	;wreg free
  4967   0029E8                     
  4968                           ;dc_motor.c: 135:         setMotorPWM(mR);
  4969   0029E8  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  4970   0029EC  EC46  F011         	call	_setMotorPWM	;wreg free
  4971   0029F0                     
  4972                           ;dc_motor.c: 136:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  4973   0029F0  0EA7               	movlw	167
  4974   0029F2  6E15               	movwf	??_turnRight^0,c
  4975   0029F4  0E3A               	movlw	58
  4976   0029F6                     u3297:
  4977   0029F6  2EE8               	decfsz	wreg,f,c
  4978   0029F8  D7FE               	bra	u3297
  4979   0029FA  2E15               	decfsz	??_turnRight^0,f,c
  4980   0029FC  D7FC               	bra	u3297
  4981   0029FE  D000               	nop2	
  4982   002A00                     l2954:
  4983                           
  4984                           ;dc_motor.c: 131:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  4985   002A00  5013               	movf	turnRight@mL^0,w,c
  4986   002A02  6ED9               	movwf	fsr2l,c
  4987   002A04  6ADA               	clrf	fsr2h,c
  4988   002A06  5016               	movf	turnRight@leftGear^0,w,c
  4989   002A08  5CDE               	subwf	postinc2,w,c
  4990   002A0A  A0D8               	btfss	status,0,c
  4991   002A0C  EF0A  F015         	goto	u1901
  4992   002A10  EF0C  F015         	goto	u1900
  4993   002A14                     u1901:
  4994   002A14  EFD0  F014         	goto	l2942
  4995   002A18                     u1900:
  4996   002A18  5014               	movf	turnRight@mR^0,w,c
  4997   002A1A  6ED9               	movwf	fsr2l,c
  4998   002A1C  6ADA               	clrf	fsr2h,c
  4999   002A1E  5017               	movf	turnRight@rightGear^0,w,c
  5000   002A20  5CDE               	subwf	postinc2,w,c
  5001   002A22  A0D8               	btfss	status,0,c
  5002   002A24  EF16  F015         	goto	u1911
  5003   002A28  EF18  F015         	goto	u1910
  5004   002A2C                     u1911:
  5005   002A2C  EFD0  F014         	goto	l2942
  5006   002A30                     u1910:
  5007   002A30  0012               	return		;funcret
  5008   002A32                     __end_of_turnRight:
  5009                           	callstack 0
  5010                           
  5011 ;; *************** function _turnLeft135 *****************
  5012 ;; Defined at:
  5013 ;;		line 207 in file "dc_motor.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5016 ;;		 -> main@motorL(9), 
  5017 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5018 ;;		 -> main@motorR(9), 
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5030 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5032 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5033 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5034 ;;Total ram usage:        4 bytes
  5035 ;; Hardware stack levels used: 1
  5036 ;; Hardware stack levels required when called: 4
  5037 ;; This function calls:
  5038 ;;		_stop
  5039 ;;		_toggle_left_indicators
  5040 ;;		_turnLeft
  5041 ;; This function is called by:
  5042 ;;		_card_orange
  5043 ;;		_card_cyan
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text29
  5048   00364C                     __ptext29:
  5049                           	callstack 0
  5050   00364C                     _turnLeft135:
  5051                           	callstack 23
  5052   00364C                     
  5053                           ;dc_motor.c: 207: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 208: {;dc_mot
      +                          or.c: 209:     toggle_left_indicators();
  5054   00364C  EC74  F01C         	call	_toggle_left_indicators	;wreg free
  5055   003650                     
  5056                           ;dc_motor.c: 211:     turnLeft(mL, mR);
  5057   003650  C018  F013         	movff	turnLeft135@mL,turnLeft@mL
  5058   003654  C019  F014         	movff	turnLeft135@mR,turnLeft@mR
  5059   003658  EC19  F015         	call	_turnLeft	;wreg free
  5060   00365C                     
  5061                           ;dc_motor.c: 212:     _delay((unsigned long)((turnLeft135Delay)*(64000000/4000.0)));
  5062   00365C  0E15               	movlw	21
  5063   00365E  6E1B               	movwf	(??_turnLeft135+1)^0,c
  5064   003660  0E4B               	movlw	75
  5065   003662  6E1A               	movwf	??_turnLeft135^0,c
  5066   003664  0EBE               	movlw	190
  5067   003666                     u3307:
  5068   003666  2EE8               	decfsz	wreg,f,c
  5069   003668  D7FE               	bra	u3307
  5070   00366A  2E1A               	decfsz	??_turnLeft135^0,f,c
  5071   00366C  D7FC               	bra	u3307
  5072   00366E  2E1B               	decfsz	(??_turnLeft135+1)^0,f,c
  5073   003670  D7FA               	bra	u3307
  5074   003672  D000               	nop2	
  5075   003674                     
  5076                           ;dc_motor.c: 213:     stop(mL, mR);
  5077   003674  C018  F013         	movff	turnLeft135@mL,stop@mL
  5078   003678  C019  F014         	movff	turnLeft135@mR,stop@mR
  5079   00367C  ECBB  F016         	call	_stop	;wreg free
  5080   003680                     
  5081                           ;dc_motor.c: 215:     toggle_left_indicators();
  5082   003680  EC74  F01C         	call	_toggle_left_indicators	;wreg free
  5083   003684  0012               	return		;funcret
  5084   003686                     __end_of_turnLeft135:
  5085                           	callstack 0
  5086                           
  5087 ;; *************** function _card_blue *****************
  5088 ;; Defined at:
  5089 ;;		line 41 in file "manoeuvres.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5092 ;;		 -> main@motorL(9), 
  5093 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5094 ;;		 -> main@motorR(9), 
  5095 ;;  backtrack       1   29[COMRAM] unsigned char 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5107 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5109 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5110 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5111 ;;Total ram usage:        5 bytes
  5112 ;; Hardware stack levels used: 1
  5113 ;; Hardware stack levels required when called: 5
  5114 ;; This function calls:
  5115 ;;		_UTurn
  5116 ;;		_headbuttReverse
  5117 ;; This function is called by:
  5118 ;;		_pick_card
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	text30
  5123   00327A                     __ptext30:
  5124                           	callstack 0
  5125   00327A                     _card_blue:
  5126                           	callstack 23
  5127   00327A                     
  5128                           ;manoeuvres.c: 41: void card_blue(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 42: {;manoeuvres.c: 43:     switch (backtrack) {
  5129   00327A  EF5B  F019         	goto	l3138
  5130   00327E                     l3132:
  5131                           
  5132                           ;manoeuvres.c: 45:             headbuttReverse(mL, mR);
  5133   00327E  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  5134   003282  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  5135   003286  EC7B  F01B         	call	_headbuttReverse	;wreg free
  5136                           
  5137                           ;manoeuvres.c: 46:             UTurn(mL, mR);
  5138   00328A  C01C  F018         	movff	card_blue@mL,UTurn@mL
  5139   00328E  C01D  F019         	movff	card_blue@mR,UTurn@mR
  5140   003292  EC8D  F01A         	call	_UTurn	;wreg free
  5141                           
  5142                           ;manoeuvres.c: 47:             break;
  5143   003296  EF70  F019         	goto	l552
  5144   00329A                     l3134:
  5145                           
  5146                           ;manoeuvres.c: 49:             UTurn(mL, mR);
  5147   00329A  C01C  F018         	movff	card_blue@mL,UTurn@mL
  5148   00329E  C01D  F019         	movff	card_blue@mR,UTurn@mR
  5149   0032A2  EC8D  F01A         	call	_UTurn	;wreg free
  5150                           
  5151                           ;manoeuvres.c: 50:             headbuttReverse(mL, mR);
  5152   0032A6  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  5153   0032AA  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  5154   0032AE  EC7B  F01B         	call	_headbuttReverse	;wreg free
  5155                           
  5156                           ;manoeuvres.c: 51:             break;
  5157   0032B2  EF70  F019         	goto	l552
  5158   0032B6                     l3138:
  5159   0032B6  501E               	movf	card_blue@backtrack^0,w,c
  5160   0032B8  6E1F               	movwf	??_card_blue^0,c
  5161   0032BA  6A20               	clrf	(??_card_blue+1)^0,c
  5162                           
  5163                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5164                           ; Switch size 1, requested type "simple"
  5165                           ; Number of cases is 1, Range of values is 0 to 0
  5166                           ; switch strategies available:
  5167                           ; Name         Instructions Cycles
  5168                           ; simple_byte            4     3 (average)
  5169                           ;	Chosen strategy is simple_byte
  5170   0032BC  5020               	movf	(??_card_blue+1)^0,w,c
  5171   0032BE  0A00               	xorlw	0	; case 0
  5172   0032C0  B4D8               	btfsc	status,2,c
  5173   0032C2  EF65  F019         	goto	l4160
  5174   0032C6  EF70  F019         	goto	l552
  5175   0032CA                     l4160:
  5176                           
  5177                           ; Switch size 1, requested type "simple"
  5178                           ; Number of cases is 2, Range of values is 0 to 1
  5179                           ; switch strategies available:
  5180                           ; Name         Instructions Cycles
  5181                           ; simple_byte            7     4 (average)
  5182                           ;	Chosen strategy is simple_byte
  5183   0032CA  501F               	movf	??_card_blue^0,w,c
  5184   0032CC  0A00               	xorlw	0	; case 0
  5185   0032CE  B4D8               	btfsc	status,2,c
  5186   0032D0  EF3F  F019         	goto	l3132
  5187   0032D4  0A01               	xorlw	1	; case 1
  5188   0032D6  B4D8               	btfsc	status,2,c
  5189   0032D8  EF4D  F019         	goto	l3134
  5190   0032DC  EF70  F019         	goto	l552
  5191   0032E0                     l552:
  5192   0032E0  0012               	return		;funcret
  5193   0032E2                     __end_of_card_blue:
  5194                           	callstack 0
  5195                           
  5196 ;; *************** function _headbuttReverse *****************
  5197 ;; Defined at:
  5198 ;;		line 251 in file "dc_motor.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5201 ;;		 -> main@motorL(9), 
  5202 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5203 ;;		 -> main@motorR(9), 
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;		None
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  1    wreg      void 
  5208 ;; Registers used:
  5209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5217 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5218 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5219 ;;Total ram usage:        4 bytes
  5220 ;; Hardware stack levels used: 1
  5221 ;; Hardware stack levels required when called: 4
  5222 ;; This function calls:
  5223 ;;		_fullSpeedReverse
  5224 ;;		_stop
  5225 ;;		_toggle_brake_lights
  5226 ;; This function is called by:
  5227 ;;		_card_red
  5228 ;;		_card_green
  5229 ;;		_card_blue
  5230 ;;		_card_yellow
  5231 ;;		_card_pink
  5232 ;;		_card_orange
  5233 ;;		_card_cyan
  5234 ;;		_card_white
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	text31
  5239   0036F6                     __ptext31:
  5240                           	callstack 0
  5241   0036F6                     _headbuttReverse:
  5242                           	callstack 23
  5243   0036F6                     
  5244                           ;dc_motor.c: 251: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 252: {;dc
      +                          _motor.c: 253:     toggle_brake_lights();
  5245   0036F6  EC53  F01C         	call	_toggle_brake_lights	;wreg free
  5246   0036FA                     
  5247                           ;dc_motor.c: 255:     fullSpeedReverse(mL, mR);
  5248   0036FA  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
  5249   0036FE  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
  5250   003702  EC75  F015         	call	_fullSpeedReverse	;wreg free
  5251   003706                     
  5252                           ;dc_motor.c: 256:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
  5253   003706  0E43               	movlw	67
  5254   003708  6E1B               	movwf	(??_headbuttReverse+1)^0,c
  5255   00370A  0E8F               	movlw	143
  5256   00370C  6E1A               	movwf	??_headbuttReverse^0,c
  5257   00370E  0EC8               	movlw	200
  5258   003710                     u3317:
  5259   003710  2EE8               	decfsz	wreg,f,c
  5260   003712  D7FE               	bra	u3317
  5261   003714  2E1A               	decfsz	??_headbuttReverse^0,f,c
  5262   003716  D7FC               	bra	u3317
  5263   003718  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
  5264   00371A  D7FA               	bra	u3317
  5265   00371C                     
  5266                           ;dc_motor.c: 257:     stop(mL, mR);
  5267   00371C  C018  F013         	movff	headbuttReverse@mL,stop@mL
  5268   003720  C019  F014         	movff	headbuttReverse@mR,stop@mR
  5269   003724  ECBB  F016         	call	_stop	;wreg free
  5270   003728                     
  5271                           ;dc_motor.c: 259:     toggle_brake_lights();
  5272   003728  EC53  F01C         	call	_toggle_brake_lights	;wreg free
  5273   00372C  0012               	return		;funcret
  5274   00372E                     __end_of_headbuttReverse:
  5275                           	callstack 0
  5276                           
  5277 ;; *************** function _toggle_brake_lights *****************
  5278 ;; Defined at:
  5279 ;;		line 48 in file "buggy_lights.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;		None
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  1    wreg      void 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5295 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5296 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5297 ;;Total ram usage:        1 bytes
  5298 ;; Hardware stack levels used: 1
  5299 ;; Hardware stack levels required when called: 1
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_headbuttReverse
  5304 ;;		_squareReverse
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text32
  5309   0038A6                     __ptext32:
  5310                           	callstack 0
  5311   0038A6                     _toggle_brake_lights:
  5312                           	callstack 25
  5313   0038A6                     
  5314                           ;buggy_lights.c: 51:     LATDbits.LATD4 = !LATDbits.LATD4;
  5315   0038A6  A87C               	btfss	124,4,c	;volatile
  5316   0038A8  EF58  F01C         	goto	u1721
  5317   0038AC  EF5C  F01C         	goto	u1720
  5318   0038B0                     u1721:
  5319   0038B0  6A01               	clrf	??_toggle_brake_lights^0,c
  5320   0038B2  2A01               	incf	??_toggle_brake_lights^0,f,c
  5321   0038B4  EF5D  F01C         	goto	u1738
  5322   0038B8                     u1720:
  5323   0038B8  6A01               	clrf	??_toggle_brake_lights^0,c
  5324   0038BA                     u1738:
  5325   0038BA  3A01               	swapf	??_toggle_brake_lights^0,f,c
  5326   0038BC  507C               	movf	124,w,c	;volatile
  5327   0038BE  1801               	xorwf	??_toggle_brake_lights^0,w,c
  5328   0038C0  0BEF               	andlw	-17
  5329   0038C2  1801               	xorwf	??_toggle_brake_lights^0,w,c
  5330   0038C4  6E7C               	movwf	124,c	;volatile
  5331   0038C6  0012               	return		;funcret
  5332   0038C8                     __end_of_toggle_brake_lights:
  5333                           	callstack 0
  5334                           
  5335 ;; *************** function _fullSpeedReverse *****************
  5336 ;; Defined at:
  5337 ;;		line 161 in file "dc_motor.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5340 ;;		 -> main@motorL(9), 
  5341 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5342 ;;		 -> main@motorR(9), 
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;  rightGear       1   22[COMRAM] unsigned char 
  5345 ;;  leftGear        1   21[COMRAM] unsigned char 
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5355 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5356 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5357 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5358 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5359 ;;Total ram usage:        5 bytes
  5360 ;; Hardware stack levels used: 1
  5361 ;; Hardware stack levels required when called: 3
  5362 ;; This function calls:
  5363 ;;		_setMotorPWM
  5364 ;; This function is called by:
  5365 ;;		_headbuttReverse
  5366 ;;		_squareReverse
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           	psect	text33
  5371   002AEA                     __ptext33:
  5372                           	callstack 0
  5373   002AEA                     _fullSpeedReverse:
  5374                           	callstack 23
  5375   002AEA  0E14               	movlw	20
  5376   002AEC  6E16               	movwf	fullSpeedReverse@leftGear^0,c
  5377   002AEE  0E15               	movlw	21
  5378   002AF0  6E17               	movwf	fullSpeedReverse@rightGear^0,c
  5379   002AF2                     
  5380                           ;dc_motor.c: 165:     (mL->direction) = 0;
  5381   002AF2  5013               	movf	fullSpeedReverse@mL^0,w,c
  5382   002AF4  6ED9               	movwf	fsr2l,c
  5383   002AF6  6ADA               	clrf	fsr2h,c
  5384   002AF8  0E01               	movlw	1
  5385   002AFA  26D9               	addwf	fsr2l,f,c
  5386   002AFC  6ADF               	clrf	indf2,c
  5387   002AFE                     
  5388                           ;dc_motor.c: 166:     (mR->direction) = 0;
  5389   002AFE  5014               	movf	fullSpeedReverse@mR^0,w,c
  5390   002B00  6ED9               	movwf	fsr2l,c
  5391   002B02  6ADA               	clrf	fsr2h,c
  5392   002B04  0E01               	movlw	1
  5393   002B06  26D9               	addwf	fsr2l,f,c
  5394   002B08  6ADF               	clrf	indf2,c
  5395                           
  5396                           ;dc_motor.c: 167:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  5397   002B0A  EFB7  F015         	goto	l2976
  5398   002B0E                     l2964:
  5399                           
  5400                           ;dc_motor.c: 168:         if (mL->power<leftGear) {mL->power++;}
  5401   002B0E  5013               	movf	fullSpeedReverse@mL^0,w,c
  5402   002B10  6ED9               	movwf	fsr2l,c
  5403   002B12  6ADA               	clrf	fsr2h,c
  5404   002B14  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  5405   002B16  5CDE               	subwf	postinc2,w,c
  5406   002B18  B0D8               	btfsc	status,0,c
  5407   002B1A  EF91  F015         	goto	u1921
  5408   002B1E  EF93  F015         	goto	u1920
  5409   002B22                     u1921:
  5410   002B22  EF97  F015         	goto	l266
  5411   002B26                     u1920:
  5412   002B26  5013               	movf	fullSpeedReverse@mL^0,w,c
  5413   002B28  6ED9               	movwf	fsr2l,c
  5414   002B2A  6ADA               	clrf	fsr2h,c
  5415   002B2C  2ADF               	incf	indf2,f,c
  5416   002B2E                     l266:
  5417                           
  5418                           ;dc_motor.c: 169:         if (mR->power<rightGear) {mR->power++;}
  5419   002B2E  5014               	movf	fullSpeedReverse@mR^0,w,c
  5420   002B30  6ED9               	movwf	fsr2l,c
  5421   002B32  6ADA               	clrf	fsr2h,c
  5422   002B34  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  5423   002B36  5CDE               	subwf	postinc2,w,c
  5424   002B38  B0D8               	btfsc	status,0,c
  5425   002B3A  EFA1  F015         	goto	u1931
  5426   002B3E  EFA3  F015         	goto	u1930
  5427   002B42                     u1931:
  5428   002B42  EFA7  F015         	goto	l2970
  5429   002B46                     u1930:
  5430   002B46  5014               	movf	fullSpeedReverse@mR^0,w,c
  5431   002B48  6ED9               	movwf	fsr2l,c
  5432   002B4A  6ADA               	clrf	fsr2h,c
  5433   002B4C  2ADF               	incf	indf2,f,c
  5434   002B4E                     l2970:
  5435                           
  5436                           ;dc_motor.c: 170:         setMotorPWM(mL);
  5437   002B4E  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  5438   002B52  EC46  F011         	call	_setMotorPWM	;wreg free
  5439   002B56                     
  5440                           ;dc_motor.c: 171:         setMotorPWM(mR);
  5441   002B56  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  5442   002B5A  EC46  F011         	call	_setMotorPWM	;wreg free
  5443   002B5E                     
  5444                           ;dc_motor.c: 172:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5445   002B5E  0EA7               	movlw	167
  5446   002B60  6E15               	movwf	??_fullSpeedReverse^0,c
  5447   002B62  0E3A               	movlw	58
  5448   002B64                     u3327:
  5449   002B64  2EE8               	decfsz	wreg,f,c
  5450   002B66  D7FE               	bra	u3327
  5451   002B68  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  5452   002B6A  D7FC               	bra	u3327
  5453   002B6C  D000               	nop2	
  5454   002B6E                     l2976:
  5455                           
  5456                           ;dc_motor.c: 167:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  5457   002B6E  5013               	movf	fullSpeedReverse@mL^0,w,c
  5458   002B70  6ED9               	movwf	fsr2l,c
  5459   002B72  6ADA               	clrf	fsr2h,c
  5460   002B74  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  5461   002B76  5CDE               	subwf	postinc2,w,c
  5462   002B78  A0D8               	btfss	status,0,c
  5463   002B7A  EFC1  F015         	goto	u1941
  5464   002B7E  EFC3  F015         	goto	u1940
  5465   002B82                     u1941:
  5466   002B82  EF87  F015         	goto	l2964
  5467   002B86                     u1940:
  5468   002B86  5014               	movf	fullSpeedReverse@mR^0,w,c
  5469   002B88  6ED9               	movwf	fsr2l,c
  5470   002B8A  6ADA               	clrf	fsr2h,c
  5471   002B8C  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  5472   002B8E  5CDE               	subwf	postinc2,w,c
  5473   002B90  A0D8               	btfss	status,0,c
  5474   002B92  EFCD  F015         	goto	u1951
  5475   002B96  EFCF  F015         	goto	u1950
  5476   002B9A                     u1951:
  5477   002B9A  EF87  F015         	goto	l2964
  5478   002B9E                     u1950:
  5479   002B9E  0012               	return		;funcret
  5480   002BA0                     __end_of_fullSpeedReverse:
  5481                           	callstack 0
  5482                           
  5483 ;; *************** function _UTurn *****************
  5484 ;; Defined at:
  5485 ;;		line 235 in file "dc_motor.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5488 ;;		 -> main@motorL(9), 
  5489 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5490 ;;		 -> main@motorR(9), 
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;		None
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5502 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5504 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5505 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5506 ;;Total ram usage:        4 bytes
  5507 ;; Hardware stack levels used: 1
  5508 ;; Hardware stack levels required when called: 4
  5509 ;; This function calls:
  5510 ;;		_stop
  5511 ;;		_toggle_left_indicators
  5512 ;;		_toggle_right_indicators
  5513 ;;		_turnLeft
  5514 ;; This function is called by:
  5515 ;;		_card_blue
  5516 ;;		_card_white
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text34
  5521   00351A                     __ptext34:
  5522                           	callstack 0
  5523   00351A                     _UTurn:
  5524                           	callstack 23
  5525   00351A                     
  5526                           ;dc_motor.c: 235: void UTurn(DC_motor *mL, DC_motor *mR);dc_motor.c: 236: {;dc_motor.c: 
      +                          237:     toggle_left_indicators();
  5527   00351A  EC74  F01C         	call	_toggle_left_indicators	;wreg free
  5528                           
  5529                           ;dc_motor.c: 238:     toggle_right_indicators();
  5530   00351E  EC64  F01C         	call	_toggle_right_indicators	;wreg free
  5531   003522                     
  5532                           ;dc_motor.c: 240:     turnLeft(mL, mR);
  5533   003522  C018  F013         	movff	UTurn@mL,turnLeft@mL
  5534   003526  C019  F014         	movff	UTurn@mR,turnLeft@mR
  5535   00352A  EC19  F015         	call	_turnLeft	;wreg free
  5536   00352E                     
  5537                           ;dc_motor.c: 241:     _delay((unsigned long)((turn180Delay)*(64000000/4000.0)));
  5538   00352E  0E21               	movlw	33
  5539   003530  6E1B               	movwf	(??_UTurn+1)^0,c
  5540   003532  0E78               	movlw	120
  5541   003534  6E1A               	movwf	??_UTurn^0,c
  5542   003536  0E98               	movlw	152
  5543   003538                     u3337:
  5544   003538  2EE8               	decfsz	wreg,f,c
  5545   00353A  D7FE               	bra	u3337
  5546   00353C  2E1A               	decfsz	??_UTurn^0,f,c
  5547   00353E  D7FC               	bra	u3337
  5548   003540  2E1B               	decfsz	(??_UTurn+1)^0,f,c
  5549   003542  D7FA               	bra	u3337
  5550   003544  D000               	nop2	
  5551   003546                     
  5552                           ;dc_motor.c: 242:     stop(mL, mR);
  5553   003546  C018  F013         	movff	UTurn@mL,stop@mL
  5554   00354A  C019  F014         	movff	UTurn@mR,stop@mR
  5555   00354E  ECBB  F016         	call	_stop	;wreg free
  5556   003552                     
  5557                           ;dc_motor.c: 244:     toggle_left_indicators();
  5558   003552  EC74  F01C         	call	_toggle_left_indicators	;wreg free
  5559   003556                     
  5560                           ;dc_motor.c: 245:     toggle_right_indicators();
  5561   003556  EC64  F01C         	call	_toggle_right_indicators	;wreg free
  5562   00355A  0012               	return		;funcret
  5563   00355C                     __end_of_UTurn:
  5564                           	callstack 0
  5565                           
  5566 ;; *************** function _turnLeft *****************
  5567 ;; Defined at:
  5568 ;;		line 107 in file "dc_motor.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5571 ;;		 -> main@motorL(9), 
  5572 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5573 ;;		 -> main@motorR(9), 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  rightGear       1   22[COMRAM] unsigned char 
  5576 ;;  leftGear        1   21[COMRAM] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      void 
  5579 ;; Registers used:
  5580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5586 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5587 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5589 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5590 ;;Total ram usage:        5 bytes
  5591 ;; Hardware stack levels used: 1
  5592 ;; Hardware stack levels required when called: 3
  5593 ;; This function calls:
  5594 ;;		_setMotorPWM
  5595 ;; This function is called by:
  5596 ;;		_turnLeft90
  5597 ;;		_turnLeft135
  5598 ;;		_UTurn
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text35
  5603   002A32                     __ptext35:
  5604                           	callstack 0
  5605   002A32                     _turnLeft:
  5606                           	callstack 23
  5607   002A32  0E28               	movlw	40
  5608   002A34  6E16               	movwf	turnLeft@leftGear^0,c
  5609   002A36  0E28               	movlw	40
  5610   002A38  6E17               	movwf	turnLeft@rightGear^0,c
  5611   002A3A                     
  5612                           ;dc_motor.c: 111:     (mL->direction) = 0;
  5613   002A3A  5013               	movf	turnLeft@mL^0,w,c
  5614   002A3C  6ED9               	movwf	fsr2l,c
  5615   002A3E  6ADA               	clrf	fsr2h,c
  5616   002A40  0E01               	movlw	1
  5617   002A42  26D9               	addwf	fsr2l,f,c
  5618   002A44  6ADF               	clrf	indf2,c
  5619   002A46                     
  5620                           ;dc_motor.c: 112:     (mR->direction) = 1;
  5621   002A46  5014               	movf	turnLeft@mR^0,w,c
  5622   002A48  6ED9               	movwf	fsr2l,c
  5623   002A4A  6ADA               	clrf	fsr2h,c
  5624   002A4C  0E01               	movlw	1
  5625   002A4E  26D9               	addwf	fsr2l,f,c
  5626   002A50  0E01               	movlw	1
  5627   002A52  6EDF               	movwf	indf2,c
  5628                           
  5629                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  5630   002A54  EF5C  F015         	goto	l2932
  5631   002A58                     l2920:
  5632                           
  5633                           ;dc_motor.c: 114:         if (mL->power<leftGear) {mL->power++;}
  5634   002A58  5013               	movf	turnLeft@mL^0,w,c
  5635   002A5A  6ED9               	movwf	fsr2l,c
  5636   002A5C  6ADA               	clrf	fsr2h,c
  5637   002A5E  5016               	movf	turnLeft@leftGear^0,w,c
  5638   002A60  5CDE               	subwf	postinc2,w,c
  5639   002A62  B0D8               	btfsc	status,0,c
  5640   002A64  EF36  F015         	goto	u1841
  5641   002A68  EF38  F015         	goto	u1840
  5642   002A6C                     u1841:
  5643   002A6C  EF3C  F015         	goto	l242
  5644   002A70                     u1840:
  5645   002A70  5013               	movf	turnLeft@mL^0,w,c
  5646   002A72  6ED9               	movwf	fsr2l,c
  5647   002A74  6ADA               	clrf	fsr2h,c
  5648   002A76  2ADF               	incf	indf2,f,c
  5649   002A78                     l242:
  5650                           
  5651                           ;dc_motor.c: 115:         if (mR->power<rightGear) {mR->power++;}
  5652   002A78  5014               	movf	turnLeft@mR^0,w,c
  5653   002A7A  6ED9               	movwf	fsr2l,c
  5654   002A7C  6ADA               	clrf	fsr2h,c
  5655   002A7E  5017               	movf	turnLeft@rightGear^0,w,c
  5656   002A80  5CDE               	subwf	postinc2,w,c
  5657   002A82  B0D8               	btfsc	status,0,c
  5658   002A84  EF46  F015         	goto	u1851
  5659   002A88  EF48  F015         	goto	u1850
  5660   002A8C                     u1851:
  5661   002A8C  EF4C  F015         	goto	l2926
  5662   002A90                     u1850:
  5663   002A90  5014               	movf	turnLeft@mR^0,w,c
  5664   002A92  6ED9               	movwf	fsr2l,c
  5665   002A94  6ADA               	clrf	fsr2h,c
  5666   002A96  2ADF               	incf	indf2,f,c
  5667   002A98                     l2926:
  5668                           
  5669                           ;dc_motor.c: 116:         setMotorPWM(mL);
  5670   002A98  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5671   002A9C  EC46  F011         	call	_setMotorPWM	;wreg free
  5672   002AA0                     
  5673                           ;dc_motor.c: 117:         setMotorPWM(mR);
  5674   002AA0  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5675   002AA4  EC46  F011         	call	_setMotorPWM	;wreg free
  5676   002AA8                     
  5677                           ;dc_motor.c: 118:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5678   002AA8  0EA7               	movlw	167
  5679   002AAA  6E15               	movwf	??_turnLeft^0,c
  5680   002AAC  0E3A               	movlw	58
  5681   002AAE                     u3347:
  5682   002AAE  2EE8               	decfsz	wreg,f,c
  5683   002AB0  D7FE               	bra	u3347
  5684   002AB2  2E15               	decfsz	??_turnLeft^0,f,c
  5685   002AB4  D7FC               	bra	u3347
  5686   002AB6  D000               	nop2	
  5687   002AB8                     l2932:
  5688                           
  5689                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  5690   002AB8  5013               	movf	turnLeft@mL^0,w,c
  5691   002ABA  6ED9               	movwf	fsr2l,c
  5692   002ABC  6ADA               	clrf	fsr2h,c
  5693   002ABE  5016               	movf	turnLeft@leftGear^0,w,c
  5694   002AC0  5CDE               	subwf	postinc2,w,c
  5695   002AC2  A0D8               	btfss	status,0,c
  5696   002AC4  EF66  F015         	goto	u1861
  5697   002AC8  EF68  F015         	goto	u1860
  5698   002ACC                     u1861:
  5699   002ACC  EF2C  F015         	goto	l2920
  5700   002AD0                     u1860:
  5701   002AD0  5014               	movf	turnLeft@mR^0,w,c
  5702   002AD2  6ED9               	movwf	fsr2l,c
  5703   002AD4  6ADA               	clrf	fsr2h,c
  5704   002AD6  5017               	movf	turnLeft@rightGear^0,w,c
  5705   002AD8  5CDE               	subwf	postinc2,w,c
  5706   002ADA  A0D8               	btfss	status,0,c
  5707   002ADC  EF72  F015         	goto	u1871
  5708   002AE0  EF74  F015         	goto	u1870
  5709   002AE4                     u1871:
  5710   002AE4  EF2C  F015         	goto	l2920
  5711   002AE8                     u1870:
  5712   002AE8  0012               	return		;funcret
  5713   002AEA                     __end_of_turnLeft:
  5714                           	callstack 0
  5715                           
  5716 ;; *************** function _toggle_right_indicators *****************
  5717 ;; Defined at:
  5718 ;;		line 75 in file "buggy_lights.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;		None
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;		None
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5734 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5735 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5736 ;;Total ram usage:        1 bytes
  5737 ;; Hardware stack levels used: 1
  5738 ;; Hardware stack levels required when called: 1
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_turnRight90
  5743 ;;		_turnRight135
  5744 ;;		_UTurn
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           	psect	text36
  5749   0038C8                     __ptext36:
  5750                           	callstack 0
  5751   0038C8                     _toggle_right_indicators:
  5752                           	callstack 25
  5753   0038C8                     
  5754                           ;buggy_lights.c: 78:     LATHbits.LATH0 = !LATHbits.LATH0;
  5755   0038C8  A080               	btfss	128,0,c	;volatile
  5756   0038CA  EF69  F01C         	goto	u1761
  5757   0038CE  EF6D  F01C         	goto	u1760
  5758   0038D2                     u1761:
  5759   0038D2  6A01               	clrf	??_toggle_right_indicators^0,c
  5760   0038D4  2A01               	incf	??_toggle_right_indicators^0,f,c
  5761   0038D6  EF6E  F01C         	goto	u1778
  5762   0038DA                     u1760:
  5763   0038DA  6A01               	clrf	??_toggle_right_indicators^0,c
  5764   0038DC                     u1778:
  5765   0038DC  5080               	movf	128,w,c	;volatile
  5766   0038DE  1801               	xorwf	??_toggle_right_indicators^0,w,c
  5767   0038E0  0BFE               	andlw	-2
  5768   0038E2  1801               	xorwf	??_toggle_right_indicators^0,w,c
  5769   0038E4  6E80               	movwf	128,c	;volatile
  5770   0038E6  0012               	return		;funcret
  5771   0038E8                     __end_of_toggle_right_indicators:
  5772                           	callstack 0
  5773                           
  5774 ;; *************** function _toggle_left_indicators *****************
  5775 ;; Defined at:
  5776 ;;		line 66 in file "buggy_lights.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;		None
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;		None
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  1    wreg      void 
  5783 ;; Registers used:
  5784 ;;		wreg, status,2, status,0
  5785 ;; Tracked objects:
  5786 ;;		On entry : 0/0
  5787 ;;		On exit  : 0/0
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5792 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5793 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5794 ;;Total ram usage:        1 bytes
  5795 ;; Hardware stack levels used: 1
  5796 ;; Hardware stack levels required when called: 1
  5797 ;; This function calls:
  5798 ;;		Nothing
  5799 ;; This function is called by:
  5800 ;;		_turnLeft90
  5801 ;;		_turnLeft135
  5802 ;;		_UTurn
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text37
  5807   0038E8                     __ptext37:
  5808                           	callstack 0
  5809   0038E8                     _toggle_left_indicators:
  5810                           	callstack 25
  5811   0038E8                     
  5812                           ;buggy_lights.c: 69:     LATFbits.LATF0 = !LATFbits.LATF0;
  5813   0038E8  A07E               	btfss	126,0,c	;volatile
  5814   0038EA  EF79  F01C         	goto	u1741
  5815   0038EE  EF7D  F01C         	goto	u1740
  5816   0038F2                     u1741:
  5817   0038F2  6A01               	clrf	??_toggle_left_indicators^0,c
  5818   0038F4  2A01               	incf	??_toggle_left_indicators^0,f,c
  5819   0038F6  EF7E  F01C         	goto	u1758
  5820   0038FA                     u1740:
  5821   0038FA  6A01               	clrf	??_toggle_left_indicators^0,c
  5822   0038FC                     u1758:
  5823   0038FC  507E               	movf	126,w,c	;volatile
  5824   0038FE  1801               	xorwf	??_toggle_left_indicators^0,w,c
  5825   003900  0BFE               	andlw	-2
  5826   003902  1801               	xorwf	??_toggle_left_indicators^0,w,c
  5827   003904  6E7E               	movwf	126,c	;volatile
  5828   003906  0012               	return		;funcret
  5829   003908                     __end_of_toggle_left_indicators:
  5830                           	callstack 0
  5831                           
  5832 ;; *************** function _stop *****************
  5833 ;; Defined at:
  5834 ;;		line 93 in file "dc_motor.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5837 ;;		 -> main@motorL(9), 
  5838 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5839 ;;		 -> main@motorR(9), 
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;		None
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  1    wreg      void 
  5844 ;; Registers used:
  5845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5853 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5854 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5855 ;;Total ram usage:        3 bytes
  5856 ;; Hardware stack levels used: 1
  5857 ;; Hardware stack levels required when called: 3
  5858 ;; This function calls:
  5859 ;;		_setMotorPWM
  5860 ;; This function is called by:
  5861 ;;		_turnLeft90
  5862 ;;		_turnRight90
  5863 ;;		_turnLeft135
  5864 ;;		_turnRight135
  5865 ;;		_UTurn
  5866 ;;		_headbuttReverse
  5867 ;;		_squareReverse
  5868 ;;		_forward_navigation
  5869 ;;		_return_to_sender
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text38
  5874   002D76                     __ptext38:
  5875                           	callstack 0
  5876   002D76                     _stop:
  5877                           	callstack 26
  5878   002D76                     
  5879                           ;dc_motor.c: 93: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 94: {;dc_motor.c: 95:
      +                               while ((mL->power>0) || (mR->power>0)){
  5880   002D76  EFEB  F016         	goto	l2910
  5881   002D7A                     l2896:
  5882                           
  5883                           ;dc_motor.c: 96:         if (mL->power>0) {mL->power--;}
  5884   002D7A  5013               	movf	stop@mL^0,w,c
  5885   002D7C  6ED9               	movwf	fsr2l,c
  5886   002D7E  6ADA               	clrf	fsr2h,c
  5887   002D80  50DF               	movf	indf2,w,c
  5888   002D82  B4D8               	btfsc	status,2,c
  5889   002D84  EFC6  F016         	goto	u1801
  5890   002D88  EFC8  F016         	goto	u1800
  5891   002D8C                     u1801:
  5892   002D8C  EFCC  F016         	goto	l2900
  5893   002D90                     u1800:
  5894   002D90  5013               	movf	stop@mL^0,w,c
  5895   002D92  6ED9               	movwf	fsr2l,c
  5896   002D94  6ADA               	clrf	fsr2h,c
  5897   002D96  06DF               	decf	indf2,f,c
  5898   002D98                     l2900:
  5899                           
  5900                           ;dc_motor.c: 97:         if (mR->power>0) {mR->power--;}
  5901   002D98  5014               	movf	stop@mR^0,w,c
  5902   002D9A  6ED9               	movwf	fsr2l,c
  5903   002D9C  6ADA               	clrf	fsr2h,c
  5904   002D9E  50DF               	movf	indf2,w,c
  5905   002DA0  B4D8               	btfsc	status,2,c
  5906   002DA2  EFD5  F016         	goto	u1811
  5907   002DA6  EFD7  F016         	goto	u1810
  5908   002DAA                     u1811:
  5909   002DAA  EFDB  F016         	goto	l2904
  5910   002DAE                     u1810:
  5911   002DAE  5014               	movf	stop@mR^0,w,c
  5912   002DB0  6ED9               	movwf	fsr2l,c
  5913   002DB2  6ADA               	clrf	fsr2h,c
  5914   002DB4  06DF               	decf	indf2,f,c
  5915   002DB6                     l2904:
  5916                           
  5917                           ;dc_motor.c: 98:         setMotorPWM(mL);
  5918   002DB6  C013  F00E         	movff	stop@mL,setMotorPWM@m
  5919   002DBA  EC46  F011         	call	_setMotorPWM	;wreg free
  5920   002DBE                     
  5921                           ;dc_motor.c: 99:         setMotorPWM(mR);
  5922   002DBE  C014  F00E         	movff	stop@mR,setMotorPWM@m
  5923   002DC2  EC46  F011         	call	_setMotorPWM	;wreg free
  5924   002DC6                     
  5925                           ;dc_motor.c: 100:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5926   002DC6  0EA7               	movlw	167
  5927   002DC8  6E15               	movwf	??_stop^0,c
  5928   002DCA  0E3A               	movlw	58
  5929   002DCC                     u3357:
  5930   002DCC  2EE8               	decfsz	wreg,f,c
  5931   002DCE  D7FE               	bra	u3357
  5932   002DD0  2E15               	decfsz	??_stop^0,f,c
  5933   002DD2  D7FC               	bra	u3357
  5934   002DD4  D000               	nop2	
  5935   002DD6                     l2910:
  5936                           
  5937                           ;dc_motor.c: 95:     while ((mL->power>0) || (mR->power>0)){
  5938   002DD6  5013               	movf	stop@mL^0,w,c
  5939   002DD8  6ED9               	movwf	fsr2l,c
  5940   002DDA  6ADA               	clrf	fsr2h,c
  5941   002DDC  50DF               	movf	indf2,w,c
  5942   002DDE  A4D8               	btfss	status,2,c
  5943   002DE0  EFF4  F016         	goto	u1821
  5944   002DE4  EFF6  F016         	goto	u1820
  5945   002DE8                     u1821:
  5946   002DE8  EFBD  F016         	goto	l2896
  5947   002DEC                     u1820:
  5948   002DEC  5014               	movf	stop@mR^0,w,c
  5949   002DEE  6ED9               	movwf	fsr2l,c
  5950   002DF0  6ADA               	clrf	fsr2h,c
  5951   002DF2  50DF               	movf	indf2,w,c
  5952   002DF4  A4D8               	btfss	status,2,c
  5953   002DF6  EFFF  F016         	goto	u1831
  5954   002DFA  EF01  F017         	goto	u1830
  5955   002DFE                     u1831:
  5956   002DFE  EFBD  F016         	goto	l2896
  5957   002E02                     u1830:
  5958   002E02  0012               	return		;funcret
  5959   002E04                     __end_of_stop:
  5960                           	callstack 0
  5961                           
  5962 ;; *************** function _fullSpeedAhead *****************
  5963 ;; Defined at:
  5964 ;;		line 143 in file "dc_motor.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5967 ;;		 -> main@motorL(9), 
  5968 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5969 ;;		 -> main@motorR(9), 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  rightGear       1   22[COMRAM] unsigned char 
  5972 ;;  leftGear        1   21[COMRAM] unsigned char 
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  1    wreg      void 
  5975 ;; Registers used:
  5976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5985 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5986 ;;Total ram usage:        5 bytes
  5987 ;; Hardware stack levels used: 1
  5988 ;; Hardware stack levels required when called: 3
  5989 ;; This function calls:
  5990 ;;		_setMotorPWM
  5991 ;; This function is called by:
  5992 ;;		_forward_navigation
  5993 ;;		_return_to_sender
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text39
  5998   0028C0                     __ptext39:
  5999                           	callstack 0
  6000   0028C0                     _fullSpeedAhead:
  6001                           	callstack 26
  6002   0028C0  0E14               	movlw	20
  6003   0028C2  6E16               	movwf	fullSpeedAhead@leftGear^0,c
  6004   0028C4  0E14               	movlw	20
  6005   0028C6  6E17               	movwf	fullSpeedAhead@rightGear^0,c
  6006   0028C8                     
  6007                           ;dc_motor.c: 147:     (mL->direction) = 1;
  6008   0028C8  5013               	movf	fullSpeedAhead@mL^0,w,c
  6009   0028CA  6ED9               	movwf	fsr2l,c
  6010   0028CC  6ADA               	clrf	fsr2h,c
  6011   0028CE  0E01               	movlw	1
  6012   0028D0  26D9               	addwf	fsr2l,f,c
  6013   0028D2  0E01               	movlw	1
  6014   0028D4  6EDF               	movwf	indf2,c
  6015   0028D6                     
  6016                           ;dc_motor.c: 148:     (mR->direction) = 1;
  6017   0028D6  5014               	movf	fullSpeedAhead@mR^0,w,c
  6018   0028D8  6ED9               	movwf	fsr2l,c
  6019   0028DA  6ADA               	clrf	fsr2h,c
  6020   0028DC  0E01               	movlw	1
  6021   0028DE  26D9               	addwf	fsr2l,f,c
  6022   0028E0  0E01               	movlw	1
  6023   0028E2  6EDF               	movwf	indf2,c
  6024                           
  6025                           ;dc_motor.c: 149:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  6026   0028E4  EFA4  F014         	goto	l3736
  6027   0028E8                     l3724:
  6028                           
  6029                           ;dc_motor.c: 150:         if (mL->power<leftGear) {mL->power++;}
  6030   0028E8  5013               	movf	fullSpeedAhead@mL^0,w,c
  6031   0028EA  6ED9               	movwf	fsr2l,c
  6032   0028EC  6ADA               	clrf	fsr2h,c
  6033   0028EE  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  6034   0028F0  5CDE               	subwf	postinc2,w,c
  6035   0028F2  B0D8               	btfsc	status,0,c
  6036   0028F4  EF7E  F014         	goto	u3021
  6037   0028F8  EF80  F014         	goto	u3020
  6038   0028FC                     u3021:
  6039   0028FC  EF84  F014         	goto	l258
  6040   002900                     u3020:
  6041   002900  5013               	movf	fullSpeedAhead@mL^0,w,c
  6042   002902  6ED9               	movwf	fsr2l,c
  6043   002904  6ADA               	clrf	fsr2h,c
  6044   002906  2ADF               	incf	indf2,f,c
  6045   002908                     l258:
  6046                           
  6047                           ;dc_motor.c: 151:         if (mR->power<rightGear) {mR->power++;}
  6048   002908  5014               	movf	fullSpeedAhead@mR^0,w,c
  6049   00290A  6ED9               	movwf	fsr2l,c
  6050   00290C  6ADA               	clrf	fsr2h,c
  6051   00290E  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  6052   002910  5CDE               	subwf	postinc2,w,c
  6053   002912  B0D8               	btfsc	status,0,c
  6054   002914  EF8E  F014         	goto	u3031
  6055   002918  EF90  F014         	goto	u3030
  6056   00291C                     u3031:
  6057   00291C  EF94  F014         	goto	l3730
  6058   002920                     u3030:
  6059   002920  5014               	movf	fullSpeedAhead@mR^0,w,c
  6060   002922  6ED9               	movwf	fsr2l,c
  6061   002924  6ADA               	clrf	fsr2h,c
  6062   002926  2ADF               	incf	indf2,f,c
  6063   002928                     l3730:
  6064                           
  6065                           ;dc_motor.c: 152:         setMotorPWM(mL);
  6066   002928  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  6067   00292C  EC46  F011         	call	_setMotorPWM	;wreg free
  6068   002930                     
  6069                           ;dc_motor.c: 153:         setMotorPWM(mR);
  6070   002930  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  6071   002934  EC46  F011         	call	_setMotorPWM	;wreg free
  6072   002938                     
  6073                           ;dc_motor.c: 154:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  6074   002938  0EA7               	movlw	167
  6075   00293A  6E15               	movwf	??_fullSpeedAhead^0,c
  6076   00293C  0E3A               	movlw	58
  6077   00293E                     u3367:
  6078   00293E  2EE8               	decfsz	wreg,f,c
  6079   002940  D7FE               	bra	u3367
  6080   002942  2E15               	decfsz	??_fullSpeedAhead^0,f,c
  6081   002944  D7FC               	bra	u3367
  6082   002946  D000               	nop2	
  6083   002948                     l3736:
  6084                           
  6085                           ;dc_motor.c: 149:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  6086   002948  5013               	movf	fullSpeedAhead@mL^0,w,c
  6087   00294A  6ED9               	movwf	fsr2l,c
  6088   00294C  6ADA               	clrf	fsr2h,c
  6089   00294E  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  6090   002950  5CDE               	subwf	postinc2,w,c
  6091   002952  A0D8               	btfss	status,0,c
  6092   002954  EFAE  F014         	goto	u3041
  6093   002958  EFB0  F014         	goto	u3040
  6094   00295C                     u3041:
  6095   00295C  EF74  F014         	goto	l3724
  6096   002960                     u3040:
  6097   002960  5014               	movf	fullSpeedAhead@mR^0,w,c
  6098   002962  6ED9               	movwf	fsr2l,c
  6099   002964  6ADA               	clrf	fsr2h,c
  6100   002966  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  6101   002968  5CDE               	subwf	postinc2,w,c
  6102   00296A  A0D8               	btfss	status,0,c
  6103   00296C  EFBA  F014         	goto	u3051
  6104   002970  EFBC  F014         	goto	u3050
  6105   002974                     u3051:
  6106   002974  EF74  F014         	goto	l3724
  6107   002978                     u3050:
  6108   002978  0012               	return		;funcret
  6109   00297A                     __end_of_fullSpeedAhead:
  6110                           	callstack 0
  6111                           
  6112 ;; *************** function _setMotorPWM *****************
  6113 ;; Defined at:
  6114 ;;		line 68 in file "dc_motor.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;  m               1   13[COMRAM] PTR struct DC_motor
  6117 ;;		 -> main@motorR(9), main@motorL(9), 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  negDuty         1   17[COMRAM] unsigned char 
  6120 ;;  posDuty         1   16[COMRAM] unsigned char 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  1    wreg      void 
  6123 ;; Registers used:
  6124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6130 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6132 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6133 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6134 ;;Total ram usage:        5 bytes
  6135 ;; Hardware stack levels used: 1
  6136 ;; Hardware stack levels required when called: 2
  6137 ;; This function calls:
  6138 ;;		___lwdiv
  6139 ;;		___wmul
  6140 ;; This function is called by:
  6141 ;;		_stop
  6142 ;;		_turnLeft
  6143 ;;		_turnRight
  6144 ;;		_fullSpeedAhead
  6145 ;;		_fullSpeedReverse
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text40
  6150   00228C                     __ptext40:
  6151                           	callstack 0
  6152   00228C                     _setMotorPWM:
  6153                           	callstack 26
  6154   00228C                     
  6155                           ;dc_motor.c: 68: void setMotorPWM(DC_motor *m);dc_motor.c: 69: {;dc_motor.c: 70:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 72:     if(m->brakemode) {
  6156   00228C  500E               	movf	setMotorPWM@m^0,w,c
  6157   00228E  6ED9               	movwf	fsr2l,c
  6158   002290  6ADA               	clrf	fsr2h,c
  6159   002292  0E02               	movlw	2
  6160   002294  26D9               	addwf	fsr2l,f,c
  6161   002296  50DF               	movf	indf2,w,c
  6162   002298  B4D8               	btfsc	status,2,c
  6163   00229A  EF51  F011         	goto	u1681
  6164   00229E  EF53  F011         	goto	u1680
  6165   0022A2                     u1681:
  6166   0022A2  EF83  F011         	goto	l2844
  6167   0022A6                     u1680:
  6168   0022A6                     
  6169                           ;dc_motor.c: 73:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  6170   0022A6  500E               	movf	setMotorPWM@m^0,w,c
  6171   0022A8  6ED9               	movwf	fsr2l,c
  6172   0022AA  6ADA               	clrf	fsr2h,c
  6173   0022AC  50DF               	movf	indf2,w,c
  6174   0022AE  6E0F               	movwf	??_setMotorPWM^0,c
  6175   0022B0  500F               	movf	??_setMotorPWM^0,w,c
  6176   0022B2  6E01               	movwf	___wmul@multiplier^0,c
  6177   0022B4  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6178   0022B6  500E               	movf	setMotorPWM@m^0,w,c
  6179   0022B8  6ED9               	movwf	fsr2l,c
  6180   0022BA  6ADA               	clrf	fsr2h,c
  6181   0022BC  0E03               	movlw	3
  6182   0022BE  26D9               	addwf	fsr2l,f,c
  6183   0022C0  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6184   0022C4  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6185   0022C8  EC40  F01C         	call	___wmul	;wreg free
  6186   0022CC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6187   0022D0  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6188   0022D4  0E00               	movlw	0
  6189   0022D6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6190   0022D8  0E64               	movlw	100
  6191   0022DA  6E09               	movwf	___lwdiv@divisor^0,c
  6192   0022DC  ECFE  F017         	call	___lwdiv	;wreg free
  6193   0022E0  500E               	movf	setMotorPWM@m^0,w,c
  6194   0022E2  6ED9               	movwf	fsr2l,c
  6195   0022E4  6ADA               	clrf	fsr2h,c
  6196   0022E6  0E03               	movlw	3
  6197   0022E8  26D9               	addwf	fsr2l,f,c
  6198   0022EA  50DF               	movf	indf2,w,c
  6199   0022EC  6E10               	movwf	(??_setMotorPWM+1)^0,c
  6200   0022EE  5007               	movf	?___lwdiv^0,w,c
  6201   0022F0  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  6202   0022F2  6E11               	movwf	setMotorPWM@posDuty^0,c
  6203   0022F4                     
  6204                           ;dc_motor.c: 74:         negDuty=(unsigned char)(m->PWMperiod);
  6205   0022F4  500E               	movf	setMotorPWM@m^0,w,c
  6206   0022F6  6ED9               	movwf	fsr2l,c
  6207   0022F8  6ADA               	clrf	fsr2h,c
  6208   0022FA  0E03               	movlw	3
  6209   0022FC  26D9               	addwf	fsr2l,f,c
  6210   0022FE  50DF               	movf	indf2,w,c
  6211   002300  6E12               	movwf	setMotorPWM@negDuty^0,c
  6212                           
  6213                           ;dc_motor.c: 75:     }
  6214   002302  EFA4  F011         	goto	l2848
  6215   002306                     l2844:
  6216                           
  6217                           ;dc_motor.c: 77:         posDuty=0;
  6218   002306  0E00               	movlw	0
  6219   002308  6E11               	movwf	setMotorPWM@posDuty^0,c
  6220   00230A                     
  6221                           ;dc_motor.c: 78:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  6222   00230A  500E               	movf	setMotorPWM@m^0,w,c
  6223   00230C  6ED9               	movwf	fsr2l,c
  6224   00230E  6ADA               	clrf	fsr2h,c
  6225   002310  50DF               	movf	indf2,w,c
  6226   002312  6E0F               	movwf	??_setMotorPWM^0,c
  6227   002314  500F               	movf	??_setMotorPWM^0,w,c
  6228   002316  6E01               	movwf	___wmul@multiplier^0,c
  6229   002318  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6230   00231A  500E               	movf	setMotorPWM@m^0,w,c
  6231   00231C  6ED9               	movwf	fsr2l,c
  6232   00231E  6ADA               	clrf	fsr2h,c
  6233   002320  0E03               	movlw	3
  6234   002322  26D9               	addwf	fsr2l,f,c
  6235   002324  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6236   002328  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6237   00232C  EC40  F01C         	call	___wmul	;wreg free
  6238   002330  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6239   002334  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6240   002338  0E00               	movlw	0
  6241   00233A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6242   00233C  0E64               	movlw	100
  6243   00233E  6E09               	movwf	___lwdiv@divisor^0,c
  6244   002340  ECFE  F017         	call	___lwdiv	;wreg free
  6245   002344  5007               	movf	?___lwdiv^0,w,c
  6246   002346  6E12               	movwf	setMotorPWM@negDuty^0,c
  6247   002348                     l2848:
  6248                           
  6249                           ;dc_motor.c: 81:     if (m->direction) {
  6250   002348  500E               	movf	setMotorPWM@m^0,w,c
  6251   00234A  6ED9               	movwf	fsr2l,c
  6252   00234C  6ADA               	clrf	fsr2h,c
  6253   00234E  0E01               	movlw	1
  6254   002350  26D9               	addwf	fsr2l,f,c
  6255   002352  50DF               	movf	indf2,w,c
  6256   002354  B4D8               	btfsc	status,2,c
  6257   002356  EFAF  F011         	goto	u1691
  6258   00235A  EFB1  F011         	goto	u1690
  6259   00235E                     u1691:
  6260   00235E  EFD1  F011         	goto	l2852
  6261   002362                     u1690:
  6262   002362                     
  6263                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=posDuty;
  6264   002362  500E               	movf	setMotorPWM@m^0,w,c
  6265   002364  6ED9               	movwf	fsr2l,c
  6266   002366  6ADA               	clrf	fsr2h,c
  6267   002368  0E05               	movlw	5
  6268   00236A  26D9               	addwf	fsr2l,f,c
  6269   00236C  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6270   002370  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6271   002374  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6272   002378  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6273   00237C  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6274                           
  6275                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=negDuty;
  6276   002380  500E               	movf	setMotorPWM@m^0,w,c
  6277   002382  6ED9               	movwf	fsr2l,c
  6278   002384  6ADA               	clrf	fsr2h,c
  6279   002386  0E07               	movlw	7
  6280   002388  26D9               	addwf	fsr2l,f,c
  6281   00238A  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6282   00238E  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6283   002392  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6284   002396  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6285   00239A  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6286                           
  6287                           ;dc_motor.c: 84:     } else {
  6288   00239E  EFEF  F011         	goto	l229
  6289   0023A2                     l2852:
  6290                           
  6291                           ;dc_motor.c: 85:         *(m->posDutyHighByte)=negDuty;
  6292   0023A2  500E               	movf	setMotorPWM@m^0,w,c
  6293   0023A4  6ED9               	movwf	fsr2l,c
  6294   0023A6  6ADA               	clrf	fsr2h,c
  6295   0023A8  0E05               	movlw	5
  6296   0023AA  26D9               	addwf	fsr2l,f,c
  6297   0023AC  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6298   0023B0  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6299   0023B4  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6300   0023B8  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6301   0023BC  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6302                           
  6303                           ;dc_motor.c: 86:         *(m->negDutyHighByte)=posDuty;
  6304   0023C0  500E               	movf	setMotorPWM@m^0,w,c
  6305   0023C2  6ED9               	movwf	fsr2l,c
  6306   0023C4  6ADA               	clrf	fsr2h,c
  6307   0023C6  0E07               	movlw	7
  6308   0023C8  26D9               	addwf	fsr2l,f,c
  6309   0023CA  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6310   0023CE  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6311   0023D2  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6312   0023D6  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6313   0023DA  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6314   0023DE                     l229:
  6315   0023DE  0012               	return		;funcret
  6316   0023E0                     __end_of_setMotorPWM:
  6317                           	callstack 0
  6318                           
  6319 ;; *************** function ___wmul *****************
  6320 ;; Defined at:
  6321 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  6322 ;; Parameters:    Size  Location     Type
  6323 ;;  multiplier      2    0[COMRAM] unsigned int 
  6324 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  product         2    4[COMRAM] unsigned int 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  2    0[COMRAM] unsigned int 
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, status,0, prodl, prodh
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6336 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6337 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6339 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6340 ;;Total ram usage:        6 bytes
  6341 ;; Hardware stack levels used: 1
  6342 ;; Hardware stack levels required when called: 1
  6343 ;; This function calls:
  6344 ;;		Nothing
  6345 ;; This function is called by:
  6346 ;;		_setMotorPWM
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text41
  6351   003880                     __ptext41:
  6352                           	callstack 0
  6353   003880                     ___wmul:
  6354                           	callstack 26
  6355   003880  5001               	movf	___wmul@multiplier^0,w,c
  6356   003882  0203               	mulwf	___wmul@multiplicand^0,c
  6357   003884  CFF3 F005          	movff	prodl,___wmul@product
  6358   003888  CFF4 F006          	movff	prodh,___wmul@product+1
  6359   00388C  5001               	movf	___wmul@multiplier^0,w,c
  6360   00388E  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  6361   003890  50F3               	movf	243,w,c
  6362   003892  2606               	addwf	(___wmul@product+1)^0,f,c
  6363   003894  5002               	movf	(___wmul@multiplier+1)^0,w,c
  6364   003896  0203               	mulwf	___wmul@multiplicand^0,c
  6365   003898  50F3               	movf	243,w,c
  6366   00389A  2606               	addwf	(___wmul@product+1)^0,f,c
  6367   00389C  C005  F001         	movff	___wmul@product,?___wmul
  6368   0038A0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6369   0038A4  0012               	return		;funcret
  6370   0038A6                     __end_of___wmul:
  6371                           	callstack 0
  6372                           
  6373 ;; *************** function ___lwdiv *****************
  6374 ;; Defined at:
  6375 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  dividend        2    6[COMRAM] unsigned int 
  6378 ;;  divisor         2    8[COMRAM] unsigned int 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;  quotient        2   10[COMRAM] unsigned int 
  6381 ;;  counter         1   12[COMRAM] unsigned char 
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  2    6[COMRAM] unsigned int 
  6384 ;; Registers used:
  6385 ;;		wreg, status,2, status,0
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6391 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6392 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6394 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6395 ;;Total ram usage:        7 bytes
  6396 ;; Hardware stack levels used: 1
  6397 ;; Hardware stack levels required when called: 1
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		_setMotorPWM
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text42
  6406   002FFC                     __ptext42:
  6407                           	callstack 0
  6408   002FFC                     ___lwdiv:
  6409                           	callstack 26
  6410   002FFC  0E00               	movlw	0
  6411   002FFE  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6412   003000  0E00               	movlw	0
  6413   003002  6E0B               	movwf	___lwdiv@quotient^0,c
  6414   003004  5009               	movf	___lwdiv@divisor^0,w,c
  6415   003006  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6416   003008  B4D8               	btfsc	status,2,c
  6417   00300A  EF09  F018         	goto	u1651
  6418   00300E  EF0B  F018         	goto	u1650
  6419   003012                     u1651:
  6420   003012  EF33  F018         	goto	l1237
  6421   003016                     u1650:
  6422   003016  0E01               	movlw	1
  6423   003018  6E0D               	movwf	___lwdiv@counter^0,c
  6424   00301A  EF13  F018         	goto	l2824
  6425   00301E                     l2822:
  6426   00301E  90D8               	bcf	status,0,c
  6427   003020  3609               	rlcf	___lwdiv@divisor^0,f,c
  6428   003022  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6429   003024  2A0D               	incf	___lwdiv@counter^0,f,c
  6430   003026                     l2824:
  6431   003026  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6432   003028  EF18  F018         	goto	u1661
  6433   00302C  EF1A  F018         	goto	u1660
  6434   003030                     u1661:
  6435   003030  EF0F  F018         	goto	l2822
  6436   003034                     u1660:
  6437   003034                     l2826:
  6438   003034  90D8               	bcf	status,0,c
  6439   003036  360B               	rlcf	___lwdiv@quotient^0,f,c
  6440   003038  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6441   00303A  5009               	movf	___lwdiv@divisor^0,w,c
  6442   00303C  5C07               	subwf	___lwdiv@dividend^0,w,c
  6443   00303E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6444   003040  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6445   003042  A0D8               	btfss	status,0,c
  6446   003044  EF26  F018         	goto	u1671
  6447   003048  EF28  F018         	goto	u1670
  6448   00304C                     u1671:
  6449   00304C  EF2D  F018         	goto	l2834
  6450   003050                     u1670:
  6451   003050  5009               	movf	___lwdiv@divisor^0,w,c
  6452   003052  5E07               	subwf	___lwdiv@dividend^0,f,c
  6453   003054  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6454   003056  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6455   003058  800B               	bsf	___lwdiv@quotient^0,0,c
  6456   00305A                     l2834:
  6457   00305A  90D8               	bcf	status,0,c
  6458   00305C  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6459   00305E  3209               	rrcf	___lwdiv@divisor^0,f,c
  6460   003060  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6461   003062  EF1A  F018         	goto	l2826
  6462   003066                     l1237:
  6463   003066  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6464   00306A  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6465   00306E  0012               	return		;funcret
  6466   003070                     __end_of___lwdiv:
  6467                           	callstack 0
  6468                           
  6469 ;; *************** function _convert_HSV *****************
  6470 ;; Defined at:
  6471 ;;		line 209 in file "color.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  6474 ;;		 -> main@HSV_colour(6), 
  6475 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  6476 ;;		 -> main@RGBC_colour(8), 
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;  temp            4   51[COMRAM] unsigned long 
  6479 ;;  temp            4   47[COMRAM] unsigned long 
  6480 ;;  temp            4   43[COMRAM] unsigned long 
  6481 ;;  temp            4   39[COMRAM] unsigned long 
  6482 ;;  temp            4   55[COMRAM] unsigned long 
  6483 ;;  temp            4   35[COMRAM] unsigned long 
  6484 ;;  temp            4   31[COMRAM] unsigned long 
  6485 ;;  C               2   63[COMRAM] unsigned int 
  6486 ;;  M               2   61[COMRAM] unsigned int 
  6487 ;;  hue_scale       2   59[COMRAM] unsigned int 
  6488 ;;  hue             2   29[COMRAM] unsigned int 
  6489 ;;  sat             2   27[COMRAM] unsigned int 
  6490 ;;  m               2   25[COMRAM] unsigned int 
  6491 ;;  sat_scale       2   23[COMRAM] unsigned int 
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      void 
  6494 ;; Registers used:
  6495 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6502 ;;      Locals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6503 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6504 ;;      Totals:        52       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6505 ;;Total ram usage:       52 bytes
  6506 ;; Hardware stack levels used: 1
  6507 ;; Hardware stack levels required when called: 2
  6508 ;; This function calls:
  6509 ;;		___lldiv
  6510 ;;		___lmul
  6511 ;;		_max_RGB
  6512 ;;		_min_RGB
  6513 ;; This function is called by:
  6514 ;;		_forward_navigation
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           	psect	text43
  6519   000E1A                     __ptext43:
  6520                           	callstack 0
  6521   000E1A                     _convert_HSV:
  6522                           	callstack 27
  6523   000E1A                     
  6524                           ;color.c: 209: void convert_HSV(struct HSV_val *p1,struct RGBC_val *p2);color.c: 210: {;
      +                          color.c: 211:     unsigned int hue = 0;
  6525   000E1A  0E00               	movlw	0
  6526   000E1C  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  6527   000E1E  0E00               	movlw	0
  6528   000E20  6E1E               	movwf	convert_HSV@hue^0,c
  6529                           
  6530                           ;color.c: 213:     unsigned int hue_scale = 60;
  6531   000E22  0E00               	movlw	0
  6532   000E24  6E3D               	movwf	(convert_HSV@hue_scale+1)^0,c
  6533   000E26  0E3C               	movlw	60
  6534   000E28  6E3C               	movwf	convert_HSV@hue_scale^0,c
  6535                           
  6536                           ;color.c: 214:     unsigned int sat_scale = 100;
  6537   000E2A  0E00               	movlw	0
  6538   000E2C  6E19               	movwf	(convert_HSV@sat_scale+1)^0,c
  6539   000E2E  0E64               	movlw	100
  6540   000E30  6E18               	movwf	convert_HSV@sat_scale^0,c
  6541   000E32                     
  6542                           ;color.c: 216:     unsigned int M = max_RGB(p2);
  6543   000E32  C00F  F001         	movff	convert_HSV@p2,max_RGB@p
  6544   000E36  ECC0  F017         	call	_max_RGB	;wreg free
  6545   000E3A  C001  F03E         	movff	?_max_RGB,convert_HSV@M
  6546   000E3E  C002  F03F         	movff	?_max_RGB+1,convert_HSV@M+1
  6547   000E42                     
  6548                           ;color.c: 217:     unsigned int m = min_RGB(p2);
  6549   000E42  C00F  F001         	movff	convert_HSV@p2,min_RGB@p
  6550   000E46  EC82  F017         	call	_min_RGB	;wreg free
  6551   000E4A  C001  F01A         	movff	?_min_RGB,convert_HSV@m
  6552   000E4E  C002  F01B         	movff	?_min_RGB+1,convert_HSV@m+1
  6553   000E52                     
  6554                           ;color.c: 218:     unsigned int C = M - m;
  6555   000E52  501A               	movf	convert_HSV@m^0,w,c
  6556   000E54  5C3E               	subwf	convert_HSV@M^0,w,c
  6557   000E56  6E40               	movwf	convert_HSV@C^0,c
  6558   000E58  501B               	movf	(convert_HSV@m+1)^0,w,c
  6559   000E5A  583F               	subwfb	(convert_HSV@M+1)^0,w,c
  6560   000E5C  6E41               	movwf	(convert_HSV@C+1)^0,c
  6561   000E5E                     
  6562                           ;color.c: 220:     if (C == 0) {
  6563   000E5E  5040               	movf	convert_HSV@C^0,w,c
  6564   000E60  1041               	iorwf	(convert_HSV@C+1)^0,w,c
  6565   000E62  A4D8               	btfss	status,2,c
  6566   000E64  EF36  F007         	goto	u2581
  6567   000E68  EF38  F007         	goto	u2580
  6568   000E6C                     u2581:
  6569   000E6C  EF3E  F007         	goto	l3526
  6570   000E70                     u2580:
  6571   000E70                     
  6572                           ;color.c: 221:         hue = 0;
  6573   000E70  0E00               	movlw	0
  6574   000E72  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  6575   000E74  0E00               	movlw	0
  6576   000E76  6E1E               	movwf	convert_HSV@hue^0,c
  6577                           
  6578                           ;color.c: 222:     } else {
  6579   000E78  EF0E  F00A         	goto	l3610
  6580   000E7C                     l3526:
  6581                           
  6582                           ;color.c: 232:         if (M == p2->R) {
  6583   000E7C  500F               	movf	convert_HSV@p2^0,w,c
  6584   000E7E  6ED9               	movwf	fsr2l,c
  6585   000E80  6ADA               	clrf	fsr2h,c
  6586   000E82  503E               	movf	convert_HSV@M^0,w,c
  6587   000E84  18DE               	xorwf	postinc2,w,c
  6588   000E86  E107               	bnz	u2591
  6589   000E88  503F               	movf	(convert_HSV@M+1)^0,w,c
  6590   000E8A  18DE               	xorwf	postinc2,w,c
  6591   000E8C  A4D8               	btfss	status,2,c
  6592   000E8E  EF4B  F007         	goto	u2591
  6593   000E92  EF4D  F007         	goto	u2590
  6594   000E96                     u2591:
  6595   000E96  EF3A  F008         	goto	l3554
  6596   000E9A                     u2590:
  6597   000E9A                     
  6598                           ;color.c: 233:             if (p2->G >= p2->B) {
  6599   000E9A  500F               	movf	convert_HSV@p2^0,w,c
  6600   000E9C  6ED9               	movwf	fsr2l,c
  6601   000E9E  6ADA               	clrf	fsr2h,c
  6602   000EA0  0E04               	movlw	4
  6603   000EA2  26D9               	addwf	fsr2l,f,c
  6604   000EA4  500F               	movf	convert_HSV@p2^0,w,c
  6605   000EA6  6EE1               	movwf	fsr1l,c
  6606   000EA8  6AE2               	clrf	fsr1h,c
  6607   000EAA  0E02               	movlw	2
  6608   000EAC  26E1               	addwf	fsr1l,f,c
  6609   000EAE  50DE               	movf	postinc2,w,c
  6610   000EB0  5CE6               	subwf	postinc1,w,c
  6611   000EB2  50DE               	movf	postinc2,w,c
  6612   000EB4  58E6               	subwfb	postinc1,w,c
  6613   000EB6  A0D8               	btfss	status,0,c
  6614   000EB8  EF60  F007         	goto	u2601
  6615   000EBC  EF62  F007         	goto	u2600
  6616   000EC0                     u2601:
  6617   000EC0  EFC2  F007         	goto	l3542
  6618   000EC4                     u2600:
  6619   000EC4                     
  6620                           ;color.c: 237:                 temp *= 0;
  6621   000EC4  0E00               	movlw	0
  6622   000EC6  6E24               	movwf	convert_HSV@temp^0,c
  6623   000EC8  0E00               	movlw	0
  6624   000ECA  6E25               	movwf	(convert_HSV@temp+1)^0,c
  6625   000ECC  0E00               	movlw	0
  6626   000ECE  6E26               	movwf	(convert_HSV@temp+2)^0,c
  6627   000ED0  0E00               	movlw	0
  6628   000ED2  6E27               	movwf	(convert_HSV@temp+3)^0,c
  6629   000ED4                     
  6630                           ;color.c: 238:                 temp += (unsigned long)(p2->G - p2->B);
  6631   000ED4  500F               	movf	convert_HSV@p2^0,w,c
  6632   000ED6  6ED9               	movwf	fsr2l,c
  6633   000ED8  6ADA               	clrf	fsr2h,c
  6634   000EDA  0E04               	movlw	4
  6635   000EDC  26D9               	addwf	fsr2l,f,c
  6636   000EDE  CFDE F010          	movff	postinc2,??_convert_HSV
  6637   000EE2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6638   000EE6  500F               	movf	convert_HSV@p2^0,w,c
  6639   000EE8  6ED9               	movwf	fsr2l,c
  6640   000EEA  6ADA               	clrf	fsr2h,c
  6641   000EEC  0E02               	movlw	2
  6642   000EEE  26D9               	addwf	fsr2l,f,c
  6643   000EF0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6644   000EF4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6645   000EF8  5010               	movf	??_convert_HSV^0,w,c
  6646   000EFA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6647   000EFC  6E14               	movwf	(??_convert_HSV+4)^0,c
  6648   000EFE  5011               	movf	(??_convert_HSV+1)^0,w,c
  6649   000F00  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6650   000F02  6E15               	movwf	(??_convert_HSV+5)^0,c
  6651   000F04  5014               	movf	(??_convert_HSV+4)^0,w,c
  6652   000F06  2624               	addwf	convert_HSV@temp^0,f,c
  6653   000F08  5015               	movf	(??_convert_HSV+5)^0,w,c
  6654   000F0A  2225               	addwfc	(convert_HSV@temp+1)^0,f,c
  6655   000F0C  0E00               	movlw	0
  6656   000F0E  2226               	addwfc	(convert_HSV@temp+2)^0,f,c
  6657   000F10  0E00               	movlw	0
  6658   000F12  2227               	addwfc	(convert_HSV@temp+3)^0,f,c
  6659   000F14                     
  6660                           ;color.c: 239:                 temp *= (unsigned long)hue_scale;
  6661   000F14  C024  F001         	movff	convert_HSV@temp,___lmul@multiplier
  6662   000F18  C025  F002         	movff	convert_HSV@temp+1,___lmul@multiplier+1
  6663   000F1C  C026  F003         	movff	convert_HSV@temp+2,___lmul@multiplier+2
  6664   000F20  C027  F004         	movff	convert_HSV@temp+3,___lmul@multiplier+3
  6665   000F24  0E3C               	movlw	60
  6666   000F26  6E05               	movwf	___lmul@multiplicand^0,c
  6667   000F28  0E00               	movlw	0
  6668   000F2A  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6669   000F2C  0E00               	movlw	0
  6670   000F2E  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6671   000F30  0E00               	movlw	0
  6672   000F32  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6673   000F34  EC38  F018         	call	___lmul	;wreg free
  6674   000F38  C001  F024         	movff	?___lmul,convert_HSV@temp
  6675   000F3C  C002  F025         	movff	?___lmul+1,convert_HSV@temp+1
  6676   000F40  C003  F026         	movff	?___lmul+2,convert_HSV@temp+2
  6677   000F44  C004  F027         	movff	?___lmul+3,convert_HSV@temp+3
  6678   000F48                     
  6679                           ;color.c: 240:                 temp /= (unsigned long)C;
  6680   000F48  C024  F001         	movff	convert_HSV@temp,___lldiv@dividend
  6681   000F4C  C025  F002         	movff	convert_HSV@temp+1,___lldiv@dividend+1
  6682   000F50  C026  F003         	movff	convert_HSV@temp+2,___lldiv@dividend+2
  6683   000F54  C027  F004         	movff	convert_HSV@temp+3,___lldiv@dividend+3
  6684   000F58  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6685   000F5C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6686   000F60  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6687   000F62  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6688   000F64  ECD0  F015         	call	___lldiv	;wreg free
  6689   000F68  C001  F024         	movff	?___lldiv,convert_HSV@temp
  6690   000F6C  C002  F025         	movff	?___lldiv+1,convert_HSV@temp+1
  6691   000F70  C003  F026         	movff	?___lldiv+2,convert_HSV@temp+2
  6692   000F74  C004  F027         	movff	?___lldiv+3,convert_HSV@temp+3
  6693   000F78                     
  6694                           ;color.c: 241:                 hue = (unsigned int)temp;
  6695   000F78  C024  F01E         	movff	convert_HSV@temp,convert_HSV@hue
  6696   000F7C  C025  F01F         	movff	convert_HSV@temp+1,convert_HSV@hue+1
  6697                           
  6698                           ;color.c: 242:             } else {
  6699   000F80  EF3A  F008         	goto	l3554
  6700   000F84                     l3542:
  6701                           
  6702                           ;color.c: 244:                 unsigned long temp;;color.c: 245:                 temp = 
      +                          (unsigned long)C;
  6703   000F84  C040  F038         	movff	convert_HSV@C,convert_HSV@temp_609
  6704   000F88  C041  F039         	movff	convert_HSV@C+1,convert_HSV@temp_609+1
  6705   000F8C  6A3A               	clrf	(convert_HSV@temp_609+2)^0,c
  6706   000F8E  6A3B               	clrf	(convert_HSV@temp_609+3)^0,c
  6707   000F90                     
  6708                           ;color.c: 246:                 temp *= 6;
  6709   000F90  C038  F001         	movff	convert_HSV@temp_609,___lmul@multiplier
  6710   000F94  C039  F002         	movff	convert_HSV@temp_609+1,___lmul@multiplier+1
  6711   000F98  C03A  F003         	movff	convert_HSV@temp_609+2,___lmul@multiplier+2
  6712   000F9C  C03B  F004         	movff	convert_HSV@temp_609+3,___lmul@multiplier+3
  6713   000FA0  0E06               	movlw	6
  6714   000FA2  6E05               	movwf	___lmul@multiplicand^0,c
  6715   000FA4  0E00               	movlw	0
  6716   000FA6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6717   000FA8  0E00               	movlw	0
  6718   000FAA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6719   000FAC  0E00               	movlw	0
  6720   000FAE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6721   000FB0  EC38  F018         	call	___lmul	;wreg free
  6722   000FB4  C001  F038         	movff	?___lmul,convert_HSV@temp_609
  6723   000FB8  C002  F039         	movff	?___lmul+1,convert_HSV@temp_609+1
  6724   000FBC  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_609+2
  6725   000FC0  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_609+3
  6726   000FC4                     
  6727                           ;color.c: 247:                 temp -= (unsigned long)(p2->B - p2->G);
  6728   000FC4  500F               	movf	convert_HSV@p2^0,w,c
  6729   000FC6  6ED9               	movwf	fsr2l,c
  6730   000FC8  6ADA               	clrf	fsr2h,c
  6731   000FCA  0E02               	movlw	2
  6732   000FCC  26D9               	addwf	fsr2l,f,c
  6733   000FCE  CFDE F010          	movff	postinc2,??_convert_HSV
  6734   000FD2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6735   000FD6  500F               	movf	convert_HSV@p2^0,w,c
  6736   000FD8  6ED9               	movwf	fsr2l,c
  6737   000FDA  6ADA               	clrf	fsr2h,c
  6738   000FDC  0E04               	movlw	4
  6739   000FDE  26D9               	addwf	fsr2l,f,c
  6740   000FE0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6741   000FE4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6742   000FE8  5010               	movf	??_convert_HSV^0,w,c
  6743   000FEA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6744   000FEC  6E14               	movwf	(??_convert_HSV+4)^0,c
  6745   000FEE  5011               	movf	(??_convert_HSV+1)^0,w,c
  6746   000FF0  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6747   000FF2  6E15               	movwf	(??_convert_HSV+5)^0,c
  6748   000FF4  6A16               	clrf	(??_convert_HSV+6)^0,c
  6749   000FF6  6A17               	clrf	(??_convert_HSV+7)^0,c
  6750   000FF8  5014               	movf	(??_convert_HSV+4)^0,w,c
  6751   000FFA  5E38               	subwf	convert_HSV@temp_609^0,f,c
  6752   000FFC  5015               	movf	(??_convert_HSV+5)^0,w,c
  6753   000FFE  5A39               	subwfb	(convert_HSV@temp_609+1)^0,f,c
  6754   001000  5016               	movf	(??_convert_HSV+6)^0,w,c
  6755   001002  5A3A               	subwfb	(convert_HSV@temp_609+2)^0,f,c
  6756   001004  5017               	movf	(??_convert_HSV+7)^0,w,c
  6757   001006  5A3B               	subwfb	(convert_HSV@temp_609+3)^0,f,c
  6758   001008                     
  6759                           ;color.c: 248:                 temp *= (unsigned long)hue_scale;
  6760   001008  C038  F001         	movff	convert_HSV@temp_609,___lmul@multiplier
  6761   00100C  C039  F002         	movff	convert_HSV@temp_609+1,___lmul@multiplier+1
  6762   001010  C03A  F003         	movff	convert_HSV@temp_609+2,___lmul@multiplier+2
  6763   001014  C03B  F004         	movff	convert_HSV@temp_609+3,___lmul@multiplier+3
  6764   001018  0E3C               	movlw	60
  6765   00101A  6E05               	movwf	___lmul@multiplicand^0,c
  6766   00101C  0E00               	movlw	0
  6767   00101E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6768   001020  0E00               	movlw	0
  6769   001022  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6770   001024  0E00               	movlw	0
  6771   001026  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6772   001028  EC38  F018         	call	___lmul	;wreg free
  6773   00102C  C001  F038         	movff	?___lmul,convert_HSV@temp_609
  6774   001030  C002  F039         	movff	?___lmul+1,convert_HSV@temp_609+1
  6775   001034  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_609+2
  6776   001038  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_609+3
  6777   00103C                     
  6778                           ;color.c: 249:                 temp /= (unsigned long)C;
  6779   00103C  C038  F001         	movff	convert_HSV@temp_609,___lldiv@dividend
  6780   001040  C039  F002         	movff	convert_HSV@temp_609+1,___lldiv@dividend+1
  6781   001044  C03A  F003         	movff	convert_HSV@temp_609+2,___lldiv@dividend+2
  6782   001048  C03B  F004         	movff	convert_HSV@temp_609+3,___lldiv@dividend+3
  6783   00104C  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6784   001050  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6785   001054  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6786   001056  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6787   001058  ECD0  F015         	call	___lldiv	;wreg free
  6788   00105C  C001  F038         	movff	?___lldiv,convert_HSV@temp_609
  6789   001060  C002  F039         	movff	?___lldiv+1,convert_HSV@temp_609+1
  6790   001064  C003  F03A         	movff	?___lldiv+2,convert_HSV@temp_609+2
  6791   001068  C004  F03B         	movff	?___lldiv+3,convert_HSV@temp_609+3
  6792   00106C                     
  6793                           ;color.c: 250:                 hue = (unsigned int)temp;
  6794   00106C  C038  F01E         	movff	convert_HSV@temp_609,convert_HSV@hue
  6795   001070  C039  F01F         	movff	convert_HSV@temp_609+1,convert_HSV@hue+1
  6796   001074                     l3554:
  6797                           
  6798                           ;color.c: 253:         if (M == p2->G) {
  6799   001074  500F               	movf	convert_HSV@p2^0,w,c
  6800   001076  6ED9               	movwf	fsr2l,c
  6801   001078  6ADA               	clrf	fsr2h,c
  6802   00107A  0E02               	movlw	2
  6803   00107C  26D9               	addwf	fsr2l,f,c
  6804   00107E  503E               	movf	convert_HSV@M^0,w,c
  6805   001080  18DE               	xorwf	postinc2,w,c
  6806   001082  E107               	bnz	u2611
  6807   001084  503F               	movf	(convert_HSV@M+1)^0,w,c
  6808   001086  18DE               	xorwf	postinc2,w,c
  6809   001088  A4D8               	btfss	status,2,c
  6810   00108A  EF49  F008         	goto	u2611
  6811   00108E  EF4B  F008         	goto	u2610
  6812   001092                     u2611:
  6813   001092  EF20  F009         	goto	l3582
  6814   001096                     u2610:
  6815   001096                     
  6816                           ;color.c: 254:             if (p2->B >= p2->R) {
  6817   001096  500F               	movf	convert_HSV@p2^0,w,c
  6818   001098  6ED9               	movwf	fsr2l,c
  6819   00109A  6ADA               	clrf	fsr2h,c
  6820   00109C  500F               	movf	convert_HSV@p2^0,w,c
  6821   00109E  6EE1               	movwf	fsr1l,c
  6822   0010A0  6AE2               	clrf	fsr1h,c
  6823   0010A2  0E04               	movlw	4
  6824   0010A4  26E1               	addwf	fsr1l,f,c
  6825   0010A6  50DE               	movf	postinc2,w,c
  6826   0010A8  5CE6               	subwf	postinc1,w,c
  6827   0010AA  50DE               	movf	postinc2,w,c
  6828   0010AC  58E6               	subwfb	postinc1,w,c
  6829   0010AE  A0D8               	btfss	status,0,c
  6830   0010B0  EF5C  F008         	goto	u2621
  6831   0010B4  EF5E  F008         	goto	u2620
  6832   0010B8                     u2621:
  6833   0010B8  EFBF  F008         	goto	l3570
  6834   0010BC                     u2620:
  6835   0010BC                     
  6836                           ;color.c: 256:                 unsigned long temp;;color.c: 257:                 temp = 
      +                          (unsigned long)C;
  6837   0010BC  C040  F028         	movff	convert_HSV@C,convert_HSV@temp_610
  6838   0010C0  C041  F029         	movff	convert_HSV@C+1,convert_HSV@temp_610+1
  6839   0010C4  6A2A               	clrf	(convert_HSV@temp_610+2)^0,c
  6840   0010C6  6A2B               	clrf	(convert_HSV@temp_610+3)^0,c
  6841   0010C8                     
  6842                           ;color.c: 258:                 temp *= 2;
  6843   0010C8  90D8               	bcf	status,0,c
  6844   0010CA  3628               	rlcf	convert_HSV@temp_610^0,f,c
  6845   0010CC  3629               	rlcf	(convert_HSV@temp_610+1)^0,f,c
  6846   0010CE  362A               	rlcf	(convert_HSV@temp_610+2)^0,f,c
  6847   0010D0  362B               	rlcf	(convert_HSV@temp_610+3)^0,f,c
  6848   0010D2                     
  6849                           ;color.c: 259:                 temp += (unsigned long)(p2->B - p2->R);
  6850   0010D2  500F               	movf	convert_HSV@p2^0,w,c
  6851   0010D4  6ED9               	movwf	fsr2l,c
  6852   0010D6  6ADA               	clrf	fsr2h,c
  6853   0010D8  CFDE F010          	movff	postinc2,??_convert_HSV
  6854   0010DC  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6855   0010E0  500F               	movf	convert_HSV@p2^0,w,c
  6856   0010E2  6ED9               	movwf	fsr2l,c
  6857   0010E4  6ADA               	clrf	fsr2h,c
  6858   0010E6  0E04               	movlw	4
  6859   0010E8  26D9               	addwf	fsr2l,f,c
  6860   0010EA  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6861   0010EE  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6862   0010F2  5010               	movf	??_convert_HSV^0,w,c
  6863   0010F4  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6864   0010F6  6E14               	movwf	(??_convert_HSV+4)^0,c
  6865   0010F8  5011               	movf	(??_convert_HSV+1)^0,w,c
  6866   0010FA  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6867   0010FC  6E15               	movwf	(??_convert_HSV+5)^0,c
  6868   0010FE  5014               	movf	(??_convert_HSV+4)^0,w,c
  6869   001100  2628               	addwf	convert_HSV@temp_610^0,f,c
  6870   001102  5015               	movf	(??_convert_HSV+5)^0,w,c
  6871   001104  2229               	addwfc	(convert_HSV@temp_610+1)^0,f,c
  6872   001106  0E00               	movlw	0
  6873   001108  222A               	addwfc	(convert_HSV@temp_610+2)^0,f,c
  6874   00110A  0E00               	movlw	0
  6875   00110C  222B               	addwfc	(convert_HSV@temp_610+3)^0,f,c
  6876   00110E                     
  6877                           ;color.c: 260:                 temp *= (unsigned long)hue_scale;
  6878   00110E  C028  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  6879   001112  C029  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  6880   001116  C02A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  6881   00111A  C02B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  6882   00111E  0E3C               	movlw	60
  6883   001120  6E05               	movwf	___lmul@multiplicand^0,c
  6884   001122  0E00               	movlw	0
  6885   001124  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6886   001126  0E00               	movlw	0
  6887   001128  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6888   00112A  0E00               	movlw	0
  6889   00112C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6890   00112E  EC38  F018         	call	___lmul	;wreg free
  6891   001132  C001  F028         	movff	?___lmul,convert_HSV@temp_610
  6892   001136  C002  F029         	movff	?___lmul+1,convert_HSV@temp_610+1
  6893   00113A  C003  F02A         	movff	?___lmul+2,convert_HSV@temp_610+2
  6894   00113E  C004  F02B         	movff	?___lmul+3,convert_HSV@temp_610+3
  6895   001142                     
  6896                           ;color.c: 261:                 temp /= (unsigned long)C;
  6897   001142  C028  F001         	movff	convert_HSV@temp_610,___lldiv@dividend
  6898   001146  C029  F002         	movff	convert_HSV@temp_610+1,___lldiv@dividend+1
  6899   00114A  C02A  F003         	movff	convert_HSV@temp_610+2,___lldiv@dividend+2
  6900   00114E  C02B  F004         	movff	convert_HSV@temp_610+3,___lldiv@dividend+3
  6901   001152  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6902   001156  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6903   00115A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6904   00115C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6905   00115E  ECD0  F015         	call	___lldiv	;wreg free
  6906   001162  C001  F028         	movff	?___lldiv,convert_HSV@temp_610
  6907   001166  C002  F029         	movff	?___lldiv+1,convert_HSV@temp_610+1
  6908   00116A  C003  F02A         	movff	?___lldiv+2,convert_HSV@temp_610+2
  6909   00116E  C004  F02B         	movff	?___lldiv+3,convert_HSV@temp_610+3
  6910   001172                     
  6911                           ;color.c: 262:                 hue = (unsigned int)temp;
  6912   001172  C028  F01E         	movff	convert_HSV@temp_610,convert_HSV@hue
  6913   001176  C029  F01F         	movff	convert_HSV@temp_610+1,convert_HSV@hue+1
  6914                           
  6915                           ;color.c: 263:             } else {
  6916   00117A  EF20  F009         	goto	l3582
  6917   00117E                     l3570:
  6918                           
  6919                           ;color.c: 265:                 unsigned long temp;;color.c: 266:                 temp = 
      +                          (unsigned long)C;
  6920   00117E  C040  F02C         	movff	convert_HSV@C,convert_HSV@temp_611
  6921   001182  C041  F02D         	movff	convert_HSV@C+1,convert_HSV@temp_611+1
  6922   001186  6A2E               	clrf	(convert_HSV@temp_611+2)^0,c
  6923   001188  6A2F               	clrf	(convert_HSV@temp_611+3)^0,c
  6924   00118A                     
  6925                           ;color.c: 267:                 temp *= 2;
  6926   00118A  90D8               	bcf	status,0,c
  6927   00118C  362C               	rlcf	convert_HSV@temp_611^0,f,c
  6928   00118E  362D               	rlcf	(convert_HSV@temp_611+1)^0,f,c
  6929   001190  362E               	rlcf	(convert_HSV@temp_611+2)^0,f,c
  6930   001192  362F               	rlcf	(convert_HSV@temp_611+3)^0,f,c
  6931   001194                     
  6932                           ;color.c: 268:                 temp -= (unsigned long)(p2->R - p2->B);
  6933   001194  500F               	movf	convert_HSV@p2^0,w,c
  6934   001196  6ED9               	movwf	fsr2l,c
  6935   001198  6ADA               	clrf	fsr2h,c
  6936   00119A  0E04               	movlw	4
  6937   00119C  26D9               	addwf	fsr2l,f,c
  6938   00119E  CFDE F010          	movff	postinc2,??_convert_HSV
  6939   0011A2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6940   0011A6  500F               	movf	convert_HSV@p2^0,w,c
  6941   0011A8  6ED9               	movwf	fsr2l,c
  6942   0011AA  6ADA               	clrf	fsr2h,c
  6943   0011AC  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6944   0011B0  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6945   0011B4  5010               	movf	??_convert_HSV^0,w,c
  6946   0011B6  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6947   0011B8  6E14               	movwf	(??_convert_HSV+4)^0,c
  6948   0011BA  5011               	movf	(??_convert_HSV+1)^0,w,c
  6949   0011BC  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6950   0011BE  6E15               	movwf	(??_convert_HSV+5)^0,c
  6951   0011C0  6A16               	clrf	(??_convert_HSV+6)^0,c
  6952   0011C2  6A17               	clrf	(??_convert_HSV+7)^0,c
  6953   0011C4  5014               	movf	(??_convert_HSV+4)^0,w,c
  6954   0011C6  5E2C               	subwf	convert_HSV@temp_611^0,f,c
  6955   0011C8  5015               	movf	(??_convert_HSV+5)^0,w,c
  6956   0011CA  5A2D               	subwfb	(convert_HSV@temp_611+1)^0,f,c
  6957   0011CC  5016               	movf	(??_convert_HSV+6)^0,w,c
  6958   0011CE  5A2E               	subwfb	(convert_HSV@temp_611+2)^0,f,c
  6959   0011D0  5017               	movf	(??_convert_HSV+7)^0,w,c
  6960   0011D2  5A2F               	subwfb	(convert_HSV@temp_611+3)^0,f,c
  6961   0011D4                     
  6962                           ;color.c: 269:                 temp *= (unsigned long)hue_scale;
  6963   0011D4  C02C  F001         	movff	convert_HSV@temp_611,___lmul@multiplier
  6964   0011D8  C02D  F002         	movff	convert_HSV@temp_611+1,___lmul@multiplier+1
  6965   0011DC  C02E  F003         	movff	convert_HSV@temp_611+2,___lmul@multiplier+2
  6966   0011E0  C02F  F004         	movff	convert_HSV@temp_611+3,___lmul@multiplier+3
  6967   0011E4  0E3C               	movlw	60
  6968   0011E6  6E05               	movwf	___lmul@multiplicand^0,c
  6969   0011E8  0E00               	movlw	0
  6970   0011EA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6971   0011EC  0E00               	movlw	0
  6972   0011EE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6973   0011F0  0E00               	movlw	0
  6974   0011F2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6975   0011F4  EC38  F018         	call	___lmul	;wreg free
  6976   0011F8  C001  F02C         	movff	?___lmul,convert_HSV@temp_611
  6977   0011FC  C002  F02D         	movff	?___lmul+1,convert_HSV@temp_611+1
  6978   001200  C003  F02E         	movff	?___lmul+2,convert_HSV@temp_611+2
  6979   001204  C004  F02F         	movff	?___lmul+3,convert_HSV@temp_611+3
  6980   001208                     
  6981                           ;color.c: 270:                 temp /= (unsigned long)C;
  6982   001208  C02C  F001         	movff	convert_HSV@temp_611,___lldiv@dividend
  6983   00120C  C02D  F002         	movff	convert_HSV@temp_611+1,___lldiv@dividend+1
  6984   001210  C02E  F003         	movff	convert_HSV@temp_611+2,___lldiv@dividend+2
  6985   001214  C02F  F004         	movff	convert_HSV@temp_611+3,___lldiv@dividend+3
  6986   001218  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6987   00121C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6988   001220  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6989   001222  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6990   001224  ECD0  F015         	call	___lldiv	;wreg free
  6991   001228  C001  F02C         	movff	?___lldiv,convert_HSV@temp_611
  6992   00122C  C002  F02D         	movff	?___lldiv+1,convert_HSV@temp_611+1
  6993   001230  C003  F02E         	movff	?___lldiv+2,convert_HSV@temp_611+2
  6994   001234  C004  F02F         	movff	?___lldiv+3,convert_HSV@temp_611+3
  6995   001238                     
  6996                           ;color.c: 271:                 hue = (unsigned int)temp;
  6997   001238  C02C  F01E         	movff	convert_HSV@temp_611,convert_HSV@hue
  6998   00123C  C02D  F01F         	movff	convert_HSV@temp_611+1,convert_HSV@hue+1
  6999   001240                     l3582:
  7000                           
  7001                           ;color.c: 274:         if (M == p2->B) {
  7002   001240  500F               	movf	convert_HSV@p2^0,w,c
  7003   001242  6ED9               	movwf	fsr2l,c
  7004   001244  6ADA               	clrf	fsr2h,c
  7005   001246  0E04               	movlw	4
  7006   001248  26D9               	addwf	fsr2l,f,c
  7007   00124A  503E               	movf	convert_HSV@M^0,w,c
  7008   00124C  18DE               	xorwf	postinc2,w,c
  7009   00124E  E107               	bnz	u2631
  7010   001250  503F               	movf	(convert_HSV@M+1)^0,w,c
  7011   001252  18DE               	xorwf	postinc2,w,c
  7012   001254  A4D8               	btfss	status,2,c
  7013   001256  EF2F  F009         	goto	u2631
  7014   00125A  EF31  F009         	goto	u2630
  7015   00125E                     u2631:
  7016   00125E  EF0E  F00A         	goto	l3610
  7017   001262                     u2630:
  7018   001262                     
  7019                           ;color.c: 275:             if (p2->R >= p2->G) {
  7020   001262  500F               	movf	convert_HSV@p2^0,w,c
  7021   001264  6ED9               	movwf	fsr2l,c
  7022   001266  6ADA               	clrf	fsr2h,c
  7023   001268  0E02               	movlw	2
  7024   00126A  26D9               	addwf	fsr2l,f,c
  7025   00126C  500F               	movf	convert_HSV@p2^0,w,c
  7026   00126E  6EE1               	movwf	fsr1l,c
  7027   001270  6AE2               	clrf	fsr1h,c
  7028   001272  50DE               	movf	postinc2,w,c
  7029   001274  5CE6               	subwf	postinc1,w,c
  7030   001276  50DE               	movf	postinc2,w,c
  7031   001278  58E6               	subwfb	postinc1,w,c
  7032   00127A  A0D8               	btfss	status,0,c
  7033   00127C  EF42  F009         	goto	u2641
  7034   001280  EF44  F009         	goto	u2640
  7035   001284                     u2641:
  7036   001284  EFA9  F009         	goto	l3598
  7037   001288                     u2640:
  7038   001288                     
  7039                           ;color.c: 277:                 unsigned long temp;;color.c: 278:                 temp = 
      +                          (unsigned long)C;
  7040   001288  C040  F030         	movff	convert_HSV@C,convert_HSV@temp_612
  7041   00128C  C041  F031         	movff	convert_HSV@C+1,convert_HSV@temp_612+1
  7042   001290  6A32               	clrf	(convert_HSV@temp_612+2)^0,c
  7043   001292  6A33               	clrf	(convert_HSV@temp_612+3)^0,c
  7044   001294                     
  7045                           ;color.c: 279:                 temp *= 4;
  7046   001294  0E02               	movlw	2
  7047   001296                     u2655:
  7048   001296  90D8               	bcf	status,0,c
  7049   001298  3630               	rlcf	convert_HSV@temp_612^0,f,c
  7050   00129A  3631               	rlcf	(convert_HSV@temp_612+1)^0,f,c
  7051   00129C  3632               	rlcf	(convert_HSV@temp_612+2)^0,f,c
  7052   00129E  3633               	rlcf	(convert_HSV@temp_612+3)^0,f,c
  7053   0012A0  2EE8               	decfsz	wreg,f,c
  7054   0012A2  EF4B  F009         	goto	u2655
  7055   0012A6                     
  7056                           ;color.c: 280:                 temp += (unsigned long)(p2->R - p2->G);
  7057   0012A6  500F               	movf	convert_HSV@p2^0,w,c
  7058   0012A8  6ED9               	movwf	fsr2l,c
  7059   0012AA  6ADA               	clrf	fsr2h,c
  7060   0012AC  0E02               	movlw	2
  7061   0012AE  26D9               	addwf	fsr2l,f,c
  7062   0012B0  CFDE F010          	movff	postinc2,??_convert_HSV
  7063   0012B4  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7064   0012B8  500F               	movf	convert_HSV@p2^0,w,c
  7065   0012BA  6ED9               	movwf	fsr2l,c
  7066   0012BC  6ADA               	clrf	fsr2h,c
  7067   0012BE  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7068   0012C2  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7069   0012C6  5010               	movf	??_convert_HSV^0,w,c
  7070   0012C8  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7071   0012CA  6E14               	movwf	(??_convert_HSV+4)^0,c
  7072   0012CC  5011               	movf	(??_convert_HSV+1)^0,w,c
  7073   0012CE  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7074   0012D0  6E15               	movwf	(??_convert_HSV+5)^0,c
  7075   0012D2  5014               	movf	(??_convert_HSV+4)^0,w,c
  7076   0012D4  2630               	addwf	convert_HSV@temp_612^0,f,c
  7077   0012D6  5015               	movf	(??_convert_HSV+5)^0,w,c
  7078   0012D8  2231               	addwfc	(convert_HSV@temp_612+1)^0,f,c
  7079   0012DA  0E00               	movlw	0
  7080   0012DC  2232               	addwfc	(convert_HSV@temp_612+2)^0,f,c
  7081   0012DE  0E00               	movlw	0
  7082   0012E0  2233               	addwfc	(convert_HSV@temp_612+3)^0,f,c
  7083   0012E2                     
  7084                           ;color.c: 281:                 temp *= (unsigned long)hue_scale;
  7085   0012E2  C030  F001         	movff	convert_HSV@temp_612,___lmul@multiplier
  7086   0012E6  C031  F002         	movff	convert_HSV@temp_612+1,___lmul@multiplier+1
  7087   0012EA  C032  F003         	movff	convert_HSV@temp_612+2,___lmul@multiplier+2
  7088   0012EE  C033  F004         	movff	convert_HSV@temp_612+3,___lmul@multiplier+3
  7089   0012F2  0E3C               	movlw	60
  7090   0012F4  6E05               	movwf	___lmul@multiplicand^0,c
  7091   0012F6  0E00               	movlw	0
  7092   0012F8  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7093   0012FA  0E00               	movlw	0
  7094   0012FC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7095   0012FE  0E00               	movlw	0
  7096   001300  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7097   001302  EC38  F018         	call	___lmul	;wreg free
  7098   001306  C001  F030         	movff	?___lmul,convert_HSV@temp_612
  7099   00130A  C002  F031         	movff	?___lmul+1,convert_HSV@temp_612+1
  7100   00130E  C003  F032         	movff	?___lmul+2,convert_HSV@temp_612+2
  7101   001312  C004  F033         	movff	?___lmul+3,convert_HSV@temp_612+3
  7102   001316                     
  7103                           ;color.c: 282:                 temp /= (unsigned long)C;
  7104   001316  C030  F001         	movff	convert_HSV@temp_612,___lldiv@dividend
  7105   00131A  C031  F002         	movff	convert_HSV@temp_612+1,___lldiv@dividend+1
  7106   00131E  C032  F003         	movff	convert_HSV@temp_612+2,___lldiv@dividend+2
  7107   001322  C033  F004         	movff	convert_HSV@temp_612+3,___lldiv@dividend+3
  7108   001326  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7109   00132A  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7110   00132E  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7111   001330  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7112   001332  ECD0  F015         	call	___lldiv	;wreg free
  7113   001336  C001  F030         	movff	?___lldiv,convert_HSV@temp_612
  7114   00133A  C002  F031         	movff	?___lldiv+1,convert_HSV@temp_612+1
  7115   00133E  C003  F032         	movff	?___lldiv+2,convert_HSV@temp_612+2
  7116   001342  C004  F033         	movff	?___lldiv+3,convert_HSV@temp_612+3
  7117   001346                     
  7118                           ;color.c: 283:                 hue = (unsigned int)temp;
  7119   001346  C030  F01E         	movff	convert_HSV@temp_612,convert_HSV@hue
  7120   00134A  C031  F01F         	movff	convert_HSV@temp_612+1,convert_HSV@hue+1
  7121                           
  7122                           ;color.c: 284:             } else {
  7123   00134E  EF0E  F00A         	goto	l3610
  7124   001352                     l3598:
  7125                           
  7126                           ;color.c: 286:                 unsigned long temp;;color.c: 287:                 temp = 
      +                          (unsigned long)C;
  7127   001352  C040  F034         	movff	convert_HSV@C,convert_HSV@temp_613
  7128   001356  C041  F035         	movff	convert_HSV@C+1,convert_HSV@temp_613+1
  7129   00135A  6A36               	clrf	(convert_HSV@temp_613+2)^0,c
  7130   00135C  6A37               	clrf	(convert_HSV@temp_613+3)^0,c
  7131   00135E                     
  7132                           ;color.c: 288:                 temp *= 4;
  7133   00135E  0E02               	movlw	2
  7134   001360                     u2665:
  7135   001360  90D8               	bcf	status,0,c
  7136   001362  3634               	rlcf	convert_HSV@temp_613^0,f,c
  7137   001364  3635               	rlcf	(convert_HSV@temp_613+1)^0,f,c
  7138   001366  3636               	rlcf	(convert_HSV@temp_613+2)^0,f,c
  7139   001368  3637               	rlcf	(convert_HSV@temp_613+3)^0,f,c
  7140   00136A  2EE8               	decfsz	wreg,f,c
  7141   00136C  EFB0  F009         	goto	u2665
  7142   001370                     
  7143                           ;color.c: 289:                 temp -= (unsigned long)(p2->G - p2->R);
  7144   001370  500F               	movf	convert_HSV@p2^0,w,c
  7145   001372  6ED9               	movwf	fsr2l,c
  7146   001374  6ADA               	clrf	fsr2h,c
  7147   001376  CFDE F010          	movff	postinc2,??_convert_HSV
  7148   00137A  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7149   00137E  500F               	movf	convert_HSV@p2^0,w,c
  7150   001380  6ED9               	movwf	fsr2l,c
  7151   001382  6ADA               	clrf	fsr2h,c
  7152   001384  0E02               	movlw	2
  7153   001386  26D9               	addwf	fsr2l,f,c
  7154   001388  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7155   00138C  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7156   001390  5010               	movf	??_convert_HSV^0,w,c
  7157   001392  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7158   001394  6E14               	movwf	(??_convert_HSV+4)^0,c
  7159   001396  5011               	movf	(??_convert_HSV+1)^0,w,c
  7160   001398  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7161   00139A  6E15               	movwf	(??_convert_HSV+5)^0,c
  7162   00139C  6A16               	clrf	(??_convert_HSV+6)^0,c
  7163   00139E  6A17               	clrf	(??_convert_HSV+7)^0,c
  7164   0013A0  5014               	movf	(??_convert_HSV+4)^0,w,c
  7165   0013A2  5E34               	subwf	convert_HSV@temp_613^0,f,c
  7166   0013A4  5015               	movf	(??_convert_HSV+5)^0,w,c
  7167   0013A6  5A35               	subwfb	(convert_HSV@temp_613+1)^0,f,c
  7168   0013A8  5016               	movf	(??_convert_HSV+6)^0,w,c
  7169   0013AA  5A36               	subwfb	(convert_HSV@temp_613+2)^0,f,c
  7170   0013AC  5017               	movf	(??_convert_HSV+7)^0,w,c
  7171   0013AE  5A37               	subwfb	(convert_HSV@temp_613+3)^0,f,c
  7172   0013B0                     
  7173                           ;color.c: 290:                 temp *= (unsigned long)hue_scale;
  7174   0013B0  C034  F001         	movff	convert_HSV@temp_613,___lmul@multiplier
  7175   0013B4  C035  F002         	movff	convert_HSV@temp_613+1,___lmul@multiplier+1
  7176   0013B8  C036  F003         	movff	convert_HSV@temp_613+2,___lmul@multiplier+2
  7177   0013BC  C037  F004         	movff	convert_HSV@temp_613+3,___lmul@multiplier+3
  7178   0013C0  0E3C               	movlw	60
  7179   0013C2  6E05               	movwf	___lmul@multiplicand^0,c
  7180   0013C4  0E00               	movlw	0
  7181   0013C6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7182   0013C8  0E00               	movlw	0
  7183   0013CA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7184   0013CC  0E00               	movlw	0
  7185   0013CE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7186   0013D0  EC38  F018         	call	___lmul	;wreg free
  7187   0013D4  C001  F034         	movff	?___lmul,convert_HSV@temp_613
  7188   0013D8  C002  F035         	movff	?___lmul+1,convert_HSV@temp_613+1
  7189   0013DC  C003  F036         	movff	?___lmul+2,convert_HSV@temp_613+2
  7190   0013E0  C004  F037         	movff	?___lmul+3,convert_HSV@temp_613+3
  7191   0013E4                     
  7192                           ;color.c: 291:                 temp /= (unsigned long)C;
  7193   0013E4  C034  F001         	movff	convert_HSV@temp_613,___lldiv@dividend
  7194   0013E8  C035  F002         	movff	convert_HSV@temp_613+1,___lldiv@dividend+1
  7195   0013EC  C036  F003         	movff	convert_HSV@temp_613+2,___lldiv@dividend+2
  7196   0013F0  C037  F004         	movff	convert_HSV@temp_613+3,___lldiv@dividend+3
  7197   0013F4  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7198   0013F8  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7199   0013FC  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7200   0013FE  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7201   001400  ECD0  F015         	call	___lldiv	;wreg free
  7202   001404  C001  F034         	movff	?___lldiv,convert_HSV@temp_613
  7203   001408  C002  F035         	movff	?___lldiv+1,convert_HSV@temp_613+1
  7204   00140C  C003  F036         	movff	?___lldiv+2,convert_HSV@temp_613+2
  7205   001410  C004  F037         	movff	?___lldiv+3,convert_HSV@temp_613+3
  7206   001414                     
  7207                           ;color.c: 292:                 hue = (unsigned int)temp;
  7208   001414  C034  F01E         	movff	convert_HSV@temp_613,convert_HSV@hue
  7209   001418  C035  F01F         	movff	convert_HSV@temp_613+1,convert_HSV@hue+1
  7210   00141C                     l3610:
  7211                           
  7212                           ;color.c: 297:     if (M == 0) {
  7213   00141C  503E               	movf	convert_HSV@M^0,w,c
  7214   00141E  103F               	iorwf	(convert_HSV@M+1)^0,w,c
  7215   001420  A4D8               	btfss	status,2,c
  7216   001422  EF15  F00A         	goto	u2671
  7217   001426  EF17  F00A         	goto	u2670
  7218   00142A                     u2671:
  7219   00142A  EF1D  F00A         	goto	l3614
  7220   00142E                     u2670:
  7221   00142E                     
  7222                           ;color.c: 298:         sat = 0;
  7223   00142E  0E00               	movlw	0
  7224   001430  6E1D               	movwf	(convert_HSV@sat+1)^0,c
  7225   001432  0E00               	movlw	0
  7226   001434  6E1C               	movwf	convert_HSV@sat^0,c
  7227                           
  7228                           ;color.c: 299:     } else {
  7229   001436  EF59  F00A         	goto	l3622
  7230   00143A                     l3614:
  7231                           
  7232                           ;color.c: 301:         unsigned long temp;;color.c: 302:         temp = (unsigned long)C
      +                          ;
  7233   00143A  C040  F020         	movff	convert_HSV@C,convert_HSV@temp_614
  7234   00143E  C041  F021         	movff	convert_HSV@C+1,convert_HSV@temp_614+1
  7235   001442  6A22               	clrf	(convert_HSV@temp_614+2)^0,c
  7236   001444  6A23               	clrf	(convert_HSV@temp_614+3)^0,c
  7237   001446                     
  7238                           ;color.c: 303:         temp *= (unsigned long)sat_scale;
  7239   001446  C020  F001         	movff	convert_HSV@temp_614,___lmul@multiplier
  7240   00144A  C021  F002         	movff	convert_HSV@temp_614+1,___lmul@multiplier+1
  7241   00144E  C022  F003         	movff	convert_HSV@temp_614+2,___lmul@multiplier+2
  7242   001452  C023  F004         	movff	convert_HSV@temp_614+3,___lmul@multiplier+3
  7243   001456  0E64               	movlw	100
  7244   001458  6E05               	movwf	___lmul@multiplicand^0,c
  7245   00145A  0E00               	movlw	0
  7246   00145C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7247   00145E  0E00               	movlw	0
  7248   001460  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7249   001462  0E00               	movlw	0
  7250   001464  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7251   001466  EC38  F018         	call	___lmul	;wreg free
  7252   00146A  C001  F020         	movff	?___lmul,convert_HSV@temp_614
  7253   00146E  C002  F021         	movff	?___lmul+1,convert_HSV@temp_614+1
  7254   001472  C003  F022         	movff	?___lmul+2,convert_HSV@temp_614+2
  7255   001476  C004  F023         	movff	?___lmul+3,convert_HSV@temp_614+3
  7256   00147A                     
  7257                           ;color.c: 304:         temp /= (unsigned long)M;
  7258   00147A  C020  F001         	movff	convert_HSV@temp_614,___lldiv@dividend
  7259   00147E  C021  F002         	movff	convert_HSV@temp_614+1,___lldiv@dividend+1
  7260   001482  C022  F003         	movff	convert_HSV@temp_614+2,___lldiv@dividend+2
  7261   001486  C023  F004         	movff	convert_HSV@temp_614+3,___lldiv@dividend+3
  7262   00148A  C03E  F005         	movff	convert_HSV@M,___lldiv@divisor
  7263   00148E  C03F  F006         	movff	convert_HSV@M+1,___lldiv@divisor+1
  7264   001492  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7265   001494  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7266   001496  ECD0  F015         	call	___lldiv	;wreg free
  7267   00149A  C001  F020         	movff	?___lldiv,convert_HSV@temp_614
  7268   00149E  C002  F021         	movff	?___lldiv+1,convert_HSV@temp_614+1
  7269   0014A2  C003  F022         	movff	?___lldiv+2,convert_HSV@temp_614+2
  7270   0014A6  C004  F023         	movff	?___lldiv+3,convert_HSV@temp_614+3
  7271   0014AA                     
  7272                           ;color.c: 305:         sat = (unsigned int)temp;
  7273   0014AA  C020  F01C         	movff	convert_HSV@temp_614,convert_HSV@sat
  7274   0014AE  C021  F01D         	movff	convert_HSV@temp_614+1,convert_HSV@sat+1
  7275   0014B2                     l3622:
  7276                           
  7277                           ;color.c: 308:     p1->H = hue;
  7278   0014B2  500E               	movf	convert_HSV@p1^0,w,c
  7279   0014B4  6ED9               	movwf	fsr2l,c
  7280   0014B6  6ADA               	clrf	fsr2h,c
  7281   0014B8  C01E  FFDE         	movff	convert_HSV@hue,postinc2
  7282   0014BC  C01F  FFDD         	movff	convert_HSV@hue+1,postdec2
  7283   0014C0                     
  7284                           ;color.c: 309:     p1->S = sat;
  7285   0014C0  500E               	movf	convert_HSV@p1^0,w,c
  7286   0014C2  6ED9               	movwf	fsr2l,c
  7287   0014C4  6ADA               	clrf	fsr2h,c
  7288   0014C6  0E02               	movlw	2
  7289   0014C8  26D9               	addwf	fsr2l,f,c
  7290   0014CA  C01C  FFDE         	movff	convert_HSV@sat,postinc2
  7291   0014CE  C01D  FFDD         	movff	convert_HSV@sat+1,postdec2
  7292   0014D2                     
  7293                           ;color.c: 310:     p1->V = M;
  7294   0014D2  500E               	movf	convert_HSV@p1^0,w,c
  7295   0014D4  6ED9               	movwf	fsr2l,c
  7296   0014D6  6ADA               	clrf	fsr2h,c
  7297   0014D8  0E04               	movlw	4
  7298   0014DA  26D9               	addwf	fsr2l,f,c
  7299   0014DC  C03E  FFDE         	movff	convert_HSV@M,postinc2
  7300   0014E0  C03F  FFDD         	movff	convert_HSV@M+1,postdec2
  7301   0014E4  0012               	return		;funcret
  7302   0014E6                     __end_of_convert_HSV:
  7303                           	callstack 0
  7304                           
  7305 ;; *************** function _min_RGB *****************
  7306 ;; Defined at:
  7307 ;;		line 186 in file "color.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  7310 ;;		 -> main@RGBC_colour(8), 
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;  min_val         2    4[COMRAM] unsigned int 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  2    0[COMRAM] unsigned int 
  7315 ;; Registers used:
  7316 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7325 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7326 ;;Total ram usage:        6 bytes
  7327 ;; Hardware stack levels used: 1
  7328 ;; Hardware stack levels required when called: 1
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		_convert_HSV
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text44
  7337   002F04                     __ptext44:
  7338                           	callstack 0
  7339   002F04                     _min_RGB:
  7340                           	callstack 27
  7341   002F04                     
  7342                           ;color.c: 186: unsigned int min_RGB(struct RGBC_val *p);color.c: 187: {;color.c: 188:   
      +                            unsigned int min_val = p->R;
  7343   002F04  5001               	movf	min_RGB@p^0,w,c
  7344   002F06  6ED9               	movwf	fsr2l,c
  7345   002F08  6ADA               	clrf	fsr2h,c
  7346   002F0A  CFDE F005          	movff	postinc2,min_RGB@min_val
  7347   002F0E  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7348   002F12                     
  7349                           ;color.c: 189:     if (p->G < min_val) {min_val = p->G;}
  7350   002F12  5001               	movf	min_RGB@p^0,w,c
  7351   002F14  6ED9               	movwf	fsr2l,c
  7352   002F16  6ADA               	clrf	fsr2h,c
  7353   002F18  0E02               	movlw	2
  7354   002F1A  26D9               	addwf	fsr2l,f,c
  7355   002F1C  5005               	movf	min_RGB@min_val^0,w,c
  7356   002F1E  5CDE               	subwf	postinc2,w,c
  7357   002F20  5006               	movf	(min_RGB@min_val+1)^0,w,c
  7358   002F22  58DE               	subwfb	postinc2,w,c
  7359   002F24  B0D8               	btfsc	status,0,c
  7360   002F26  EF97  F017         	goto	u1981
  7361   002F2A  EF99  F017         	goto	u1980
  7362   002F2E                     u1981:
  7363   002F2E  EFA2  F017         	goto	l104
  7364   002F32                     u1980:
  7365   002F32  5001               	movf	min_RGB@p^0,w,c
  7366   002F34  6ED9               	movwf	fsr2l,c
  7367   002F36  6ADA               	clrf	fsr2h,c
  7368   002F38  0E02               	movlw	2
  7369   002F3A  26D9               	addwf	fsr2l,f,c
  7370   002F3C  CFDE F005          	movff	postinc2,min_RGB@min_val
  7371   002F40  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7372   002F44                     l104:
  7373                           
  7374                           ;color.c: 190:     if (p->B < min_val) {min_val = p->B;}
  7375   002F44  5001               	movf	min_RGB@p^0,w,c
  7376   002F46  6ED9               	movwf	fsr2l,c
  7377   002F48  6ADA               	clrf	fsr2h,c
  7378   002F4A  0E04               	movlw	4
  7379   002F4C  26D9               	addwf	fsr2l,f,c
  7380   002F4E  5005               	movf	min_RGB@min_val^0,w,c
  7381   002F50  5CDE               	subwf	postinc2,w,c
  7382   002F52  5006               	movf	(min_RGB@min_val+1)^0,w,c
  7383   002F54  58DE               	subwfb	postinc2,w,c
  7384   002F56  B0D8               	btfsc	status,0,c
  7385   002F58  EFB0  F017         	goto	u1991
  7386   002F5C  EFB2  F017         	goto	u1990
  7387   002F60                     u1991:
  7388   002F60  EFBB  F017         	goto	l3098
  7389   002F64                     u1990:
  7390   002F64  5001               	movf	min_RGB@p^0,w,c
  7391   002F66  6ED9               	movwf	fsr2l,c
  7392   002F68  6ADA               	clrf	fsr2h,c
  7393   002F6A  0E04               	movlw	4
  7394   002F6C  26D9               	addwf	fsr2l,f,c
  7395   002F6E  CFDE F005          	movff	postinc2,min_RGB@min_val
  7396   002F72  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7397   002F76                     l3098:
  7398                           
  7399                           ;color.c: 191:     return min_val;
  7400   002F76  C005  F001         	movff	min_RGB@min_val,?_min_RGB
  7401   002F7A  C006  F002         	movff	min_RGB@min_val+1,?_min_RGB+1
  7402   002F7E  0012               	return		;funcret
  7403   002F80                     __end_of_min_RGB:
  7404                           	callstack 0
  7405                           
  7406 ;; *************** function _max_RGB *****************
  7407 ;; Defined at:
  7408 ;;		line 175 in file "color.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  7411 ;;		 -> main@RGBC_colour(8), 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;  max_val         2    4[COMRAM] unsigned int 
  7414 ;; Return value:  Size  Location     Type
  7415 ;;                  2    0[COMRAM] unsigned int 
  7416 ;; Registers used:
  7417 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7425 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7427 ;;Total ram usage:        6 bytes
  7428 ;; Hardware stack levels used: 1
  7429 ;; Hardware stack levels required when called: 1
  7430 ;; This function calls:
  7431 ;;		Nothing
  7432 ;; This function is called by:
  7433 ;;		_convert_HSV
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           	psect	text45
  7438   002F80                     __ptext45:
  7439                           	callstack 0
  7440   002F80                     _max_RGB:
  7441                           	callstack 27
  7442   002F80                     
  7443                           ;color.c: 175: unsigned int max_RGB(struct RGBC_val *p);color.c: 176: {;color.c: 177:   
      +                            unsigned int max_val = p->R;
  7444   002F80  5001               	movf	max_RGB@p^0,w,c
  7445   002F82  6ED9               	movwf	fsr2l,c
  7446   002F84  6ADA               	clrf	fsr2h,c
  7447   002F86  CFDE F005          	movff	postinc2,max_RGB@max_val
  7448   002F8A  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7449   002F8E                     
  7450                           ;color.c: 178:     if (p->G > max_val) {max_val = p->G;}
  7451   002F8E  5001               	movf	max_RGB@p^0,w,c
  7452   002F90  6ED9               	movwf	fsr2l,c
  7453   002F92  6ADA               	clrf	fsr2h,c
  7454   002F94  0E02               	movlw	2
  7455   002F96  26D9               	addwf	fsr2l,f,c
  7456   002F98  50DE               	movf	postinc2,w,c
  7457   002F9A  5C05               	subwf	max_RGB@max_val^0,w,c
  7458   002F9C  50DE               	movf	postinc2,w,c
  7459   002F9E  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  7460   002FA0  B0D8               	btfsc	status,0,c
  7461   002FA2  EFD5  F017         	goto	u1961
  7462   002FA6  EFD7  F017         	goto	u1960
  7463   002FAA                     u1961:
  7464   002FAA  EFE0  F017         	goto	l99
  7465   002FAE                     u1960:
  7466   002FAE  5001               	movf	max_RGB@p^0,w,c
  7467   002FB0  6ED9               	movwf	fsr2l,c
  7468   002FB2  6ADA               	clrf	fsr2h,c
  7469   002FB4  0E02               	movlw	2
  7470   002FB6  26D9               	addwf	fsr2l,f,c
  7471   002FB8  CFDE F005          	movff	postinc2,max_RGB@max_val
  7472   002FBC  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7473   002FC0                     l99:
  7474                           
  7475                           ;color.c: 179:     if (p->B > max_val) {max_val = p->B;}
  7476   002FC0  5001               	movf	max_RGB@p^0,w,c
  7477   002FC2  6ED9               	movwf	fsr2l,c
  7478   002FC4  6ADA               	clrf	fsr2h,c
  7479   002FC6  0E04               	movlw	4
  7480   002FC8  26D9               	addwf	fsr2l,f,c
  7481   002FCA  50DE               	movf	postinc2,w,c
  7482   002FCC  5C05               	subwf	max_RGB@max_val^0,w,c
  7483   002FCE  50DE               	movf	postinc2,w,c
  7484   002FD0  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  7485   002FD2  B0D8               	btfsc	status,0,c
  7486   002FD4  EFEE  F017         	goto	u1971
  7487   002FD8  EFF0  F017         	goto	u1970
  7488   002FDC                     u1971:
  7489   002FDC  EFF9  F017         	goto	l3086
  7490   002FE0                     u1970:
  7491   002FE0  5001               	movf	max_RGB@p^0,w,c
  7492   002FE2  6ED9               	movwf	fsr2l,c
  7493   002FE4  6ADA               	clrf	fsr2h,c
  7494   002FE6  0E04               	movlw	4
  7495   002FE8  26D9               	addwf	fsr2l,f,c
  7496   002FEA  CFDE F005          	movff	postinc2,max_RGB@max_val
  7497   002FEE  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7498   002FF2                     l3086:
  7499                           
  7500                           ;color.c: 180:     return max_val;
  7501   002FF2  C005  F001         	movff	max_RGB@max_val,?_max_RGB
  7502   002FF6  C006  F002         	movff	max_RGB@max_val+1,?_max_RGB+1
  7503   002FFA  0012               	return		;funcret
  7504   002FFC                     __end_of_max_RGB:
  7505                           	callstack 0
  7506                           
  7507 ;; *************** function ___lmul *****************
  7508 ;; Defined at:
  7509 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  multiplier      4    0[COMRAM] unsigned long 
  7512 ;;  multiplicand    4    4[COMRAM] unsigned long 
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;  product         4    8[COMRAM] unsigned long 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  4    0[COMRAM] unsigned long 
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7524 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7525 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7527 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7528 ;;Total ram usage:       12 bytes
  7529 ;; Hardware stack levels used: 1
  7530 ;; Hardware stack levels required when called: 1
  7531 ;; This function calls:
  7532 ;;		Nothing
  7533 ;; This function is called by:
  7534 ;;		_convert_HSV
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           	psect	text46
  7539   003070                     __ptext46:
  7540                           	callstack 0
  7541   003070                     ___lmul:
  7542                           	callstack 27
  7543   003070  0E00               	movlw	0
  7544   003072  6E09               	movwf	___lmul@product^0,c
  7545   003074  0E00               	movlw	0
  7546   003076  6E0A               	movwf	(___lmul@product+1)^0,c
  7547   003078  0E00               	movlw	0
  7548   00307A  6E0B               	movwf	(___lmul@product+2)^0,c
  7549   00307C  0E00               	movlw	0
  7550   00307E  6E0C               	movwf	(___lmul@product+3)^0,c
  7551   003080                     l3208:
  7552   003080  A001               	btfss	___lmul@multiplier^0,0,c
  7553   003082  EF45  F018         	goto	u2001
  7554   003086  EF47  F018         	goto	u2000
  7555   00308A                     u2001:
  7556   00308A  EF4F  F018         	goto	l3212
  7557   00308E                     u2000:
  7558   00308E  5005               	movf	___lmul@multiplicand^0,w,c
  7559   003090  2609               	addwf	___lmul@product^0,f,c
  7560   003092  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  7561   003094  220A               	addwfc	(___lmul@product+1)^0,f,c
  7562   003096  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  7563   003098  220B               	addwfc	(___lmul@product+2)^0,f,c
  7564   00309A  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  7565   00309C  220C               	addwfc	(___lmul@product+3)^0,f,c
  7566   00309E                     l3212:
  7567   00309E  90D8               	bcf	status,0,c
  7568   0030A0  3605               	rlcf	___lmul@multiplicand^0,f,c
  7569   0030A2  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  7570   0030A4  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  7571   0030A6  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  7572   0030A8  90D8               	bcf	status,0,c
  7573   0030AA  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  7574   0030AC  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  7575   0030AE  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  7576   0030B0  3201               	rrcf	___lmul@multiplier^0,f,c
  7577   0030B2  5001               	movf	___lmul@multiplier^0,w,c
  7578   0030B4  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  7579   0030B6  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  7580   0030B8  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  7581   0030BA  A4D8               	btfss	status,2,c
  7582   0030BC  EF62  F018         	goto	u2011
  7583   0030C0  EF64  F018         	goto	u2010
  7584   0030C4                     u2011:
  7585   0030C4  EF40  F018         	goto	l3208
  7586   0030C8                     u2010:
  7587   0030C8  C009  F001         	movff	___lmul@product,?___lmul
  7588   0030CC  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  7589   0030D0  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  7590   0030D4  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  7591   0030D8  0012               	return		;funcret
  7592   0030DA                     __end_of___lmul:
  7593                           	callstack 0
  7594                           
  7595 ;; *************** function _colour_to_key *****************
  7596 ;; Defined at:
  7597 ;;		line 321 in file "color.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  p1              1    0[COMRAM] PTR struct HSV_val
  7600 ;;		 -> main@HSV_colour(6), 
  7601 ;;  p2              1    1[COMRAM] PTR struct RGBC_val
  7602 ;;		 -> main@RGBC_colour(8), 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;  key             1    4[COMRAM] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  1    wreg      unsigned char 
  7607 ;; Registers used:
  7608 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7614 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7616 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7617 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7618 ;;Total ram usage:        5 bytes
  7619 ;; Hardware stack levels used: 1
  7620 ;; Hardware stack levels required when called: 1
  7621 ;; This function calls:
  7622 ;;		Nothing
  7623 ;; This function is called by:
  7624 ;;		_forward_navigation
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text47
  7629   0014E6                     __ptext47:
  7630                           	callstack 0
  7631   0014E6                     _colour_to_key:
  7632                           	callstack 28
  7633   0014E6                     
  7634                           ;color.c: 321: unsigned char colour_to_key(struct HSV_val *p1, struct RGBC_val *p2);colo
      +                          r.c: 322: {;color.c: 323:     unsigned char key = 0;
  7635   0014E6  0E00               	movlw	0
  7636   0014E8  6E05               	movwf	colour_to_key@key^0,c
  7637   0014EA                     
  7638                           ;color.c: 324:     if ( ((293 <= p1->H) && (p1->H <= 360)) &&
  7639   0014EA  5001               	movf	colour_to_key@p1^0,w,c
  7640   0014EC  6ED9               	movwf	fsr2l,c
  7641   0014EE  6ADA               	clrf	fsr2h,c
  7642   0014F0  0E25               	movlw	37
  7643   0014F2  5CDE               	subwf	postinc2,w,c
  7644   0014F4  0E01               	movlw	1
  7645   0014F6  58DE               	subwfb	postinc2,w,c
  7646   0014F8  A0D8               	btfss	status,0,c
  7647   0014FA  EF81  F00A         	goto	u2681
  7648   0014FE  EF83  F00A         	goto	u2680
  7649   001502                     u2681:
  7650   001502  EFB5  F00A         	goto	l3640
  7651   001506                     u2680:
  7652   001506  5001               	movf	colour_to_key@p1^0,w,c
  7653   001508  6ED9               	movwf	fsr2l,c
  7654   00150A  6ADA               	clrf	fsr2h,c
  7655   00150C  0E69               	movlw	105
  7656   00150E  5CDE               	subwf	postinc2,w,c
  7657   001510  0E01               	movlw	1
  7658   001512  58DE               	subwfb	postinc2,w,c
  7659   001514  B0D8               	btfsc	status,0,c
  7660   001516  EF8F  F00A         	goto	u2691
  7661   00151A  EF91  F00A         	goto	u2690
  7662   00151E                     u2691:
  7663   00151E  EFB5  F00A         	goto	l3640
  7664   001522                     u2690:
  7665   001522  5001               	movf	colour_to_key@p1^0,w,c
  7666   001524  6ED9               	movwf	fsr2l,c
  7667   001526  6ADA               	clrf	fsr2h,c
  7668   001528  0E02               	movlw	2
  7669   00152A  26D9               	addwf	fsr2l,f,c
  7670   00152C  0E01               	movlw	1
  7671   00152E  50DB               	movf	plusw2,w,c
  7672   001530  E109               	bnz	u2700
  7673   001532  0E2E               	movlw	46
  7674   001534  5CDE               	subwf	postinc2,w,c
  7675   001536  A0D8               	btfss	status,0,c
  7676   001538  EFA0  F00A         	goto	u2701
  7677   00153C  EFA2  F00A         	goto	u2700
  7678   001540                     u2701:
  7679   001540  EFB5  F00A         	goto	l3640
  7680   001544                     u2700:
  7681   001544  5001               	movf	colour_to_key@p1^0,w,c
  7682   001546  6ED9               	movwf	fsr2l,c
  7683   001548  6ADA               	clrf	fsr2h,c
  7684   00154A  0E02               	movlw	2
  7685   00154C  26D9               	addwf	fsr2l,f,c
  7686   00154E  0E01               	movlw	1
  7687   001550  50DB               	movf	plusw2,w,c
  7688   001552  E107               	bnz	u2711
  7689   001554  0E5B               	movlw	91
  7690   001556  5CDE               	subwf	postinc2,w,c
  7691   001558  B0D8               	btfsc	status,0,c
  7692   00155A  EFB1  F00A         	goto	u2711
  7693   00155E  EFB3  F00A         	goto	u2710
  7694   001562                     u2711:
  7695   001562  EFB5  F00A         	goto	l3640
  7696   001566                     u2710:
  7697   001566                     
  7698                           ;color.c: 325:          ((46 <= p1->S) && (p1->S <= 90))) {;color.c: 326:         key = 
      +                          1;
  7699   001566  0E01               	movlw	1
  7700   001568  6E05               	movwf	colour_to_key@key^0,c
  7701   00156A                     l3640:
  7702                           
  7703                           ;color.c: 329:     if ( ((113 <= p1->H) && (p1->H <= 153)) &&
  7704   00156A  5001               	movf	colour_to_key@p1^0,w,c
  7705   00156C  6ED9               	movwf	fsr2l,c
  7706   00156E  6ADA               	clrf	fsr2h,c
  7707   001570  0E01               	movlw	1
  7708   001572  50DB               	movf	plusw2,w,c
  7709   001574  E109               	bnz	u2720
  7710   001576  0E71               	movlw	113
  7711   001578  5CDE               	subwf	postinc2,w,c
  7712   00157A  A0D8               	btfss	status,0,c
  7713   00157C  EFC2  F00A         	goto	u2721
  7714   001580  EFC4  F00A         	goto	u2720
  7715   001584                     u2721:
  7716   001584  EFF7  F00A         	goto	l3650
  7717   001588                     u2720:
  7718   001588  5001               	movf	colour_to_key@p1^0,w,c
  7719   00158A  6ED9               	movwf	fsr2l,c
  7720   00158C  6ADA               	clrf	fsr2h,c
  7721   00158E  0E01               	movlw	1
  7722   001590  50DB               	movf	plusw2,w,c
  7723   001592  E107               	bnz	u2731
  7724   001594  0E9A               	movlw	154
  7725   001596  5CDE               	subwf	postinc2,w,c
  7726   001598  B0D8               	btfsc	status,0,c
  7727   00159A  EFD1  F00A         	goto	u2731
  7728   00159E  EFD3  F00A         	goto	u2730
  7729   0015A2                     u2731:
  7730   0015A2  EFF7  F00A         	goto	l3650
  7731   0015A6                     u2730:
  7732   0015A6  5001               	movf	colour_to_key@p1^0,w,c
  7733   0015A8  6ED9               	movwf	fsr2l,c
  7734   0015AA  6ADA               	clrf	fsr2h,c
  7735   0015AC  0E02               	movlw	2
  7736   0015AE  26D9               	addwf	fsr2l,f,c
  7737   0015B0  0E01               	movlw	1
  7738   0015B2  50DB               	movf	plusw2,w,c
  7739   0015B4  E109               	bnz	u2740
  7740   0015B6  0E0D               	movlw	13
  7741   0015B8  5CDE               	subwf	postinc2,w,c
  7742   0015BA  A0D8               	btfss	status,0,c
  7743   0015BC  EFE2  F00A         	goto	u2741
  7744   0015C0  EFE4  F00A         	goto	u2740
  7745   0015C4                     u2741:
  7746   0015C4  EFF7  F00A         	goto	l3650
  7747   0015C8                     u2740:
  7748   0015C8  5001               	movf	colour_to_key@p1^0,w,c
  7749   0015CA  6ED9               	movwf	fsr2l,c
  7750   0015CC  6ADA               	clrf	fsr2h,c
  7751   0015CE  0E02               	movlw	2
  7752   0015D0  26D9               	addwf	fsr2l,f,c
  7753   0015D2  0E01               	movlw	1
  7754   0015D4  50DB               	movf	plusw2,w,c
  7755   0015D6  E107               	bnz	u2751
  7756   0015D8  0E2C               	movlw	44
  7757   0015DA  5CDE               	subwf	postinc2,w,c
  7758   0015DC  B0D8               	btfsc	status,0,c
  7759   0015DE  EFF3  F00A         	goto	u2751
  7760   0015E2  EFF5  F00A         	goto	u2750
  7761   0015E6                     u2751:
  7762   0015E6  EFF7  F00A         	goto	l3650
  7763   0015EA                     u2750:
  7764   0015EA                     
  7765                           ;color.c: 330:          ((13 <= p1->S) && (p1->S <= 43))) {;color.c: 331:         key = 
      +                          2;
  7766   0015EA  0E02               	movlw	2
  7767   0015EC  6E05               	movwf	colour_to_key@key^0,c
  7768   0015EE                     l3650:
  7769                           
  7770                           ;color.c: 334:     if ( ((180 <= p1->H) && (p1->H <= 244)) &&
  7771   0015EE  5001               	movf	colour_to_key@p1^0,w,c
  7772   0015F0  6ED9               	movwf	fsr2l,c
  7773   0015F2  6ADA               	clrf	fsr2h,c
  7774   0015F4  0E01               	movlw	1
  7775   0015F6  50DB               	movf	plusw2,w,c
  7776   0015F8  E109               	bnz	u2760
  7777   0015FA  0EB4               	movlw	180
  7778   0015FC  5CDE               	subwf	postinc2,w,c
  7779   0015FE  A0D8               	btfss	status,0,c
  7780   001600  EF04  F00B         	goto	u2761
  7781   001604  EF06  F00B         	goto	u2760
  7782   001608                     u2761:
  7783   001608  EF39  F00B         	goto	l3660
  7784   00160C                     u2760:
  7785   00160C  5001               	movf	colour_to_key@p1^0,w,c
  7786   00160E  6ED9               	movwf	fsr2l,c
  7787   001610  6ADA               	clrf	fsr2h,c
  7788   001612  0E01               	movlw	1
  7789   001614  50DB               	movf	plusw2,w,c
  7790   001616  E107               	bnz	u2771
  7791   001618  0EF5               	movlw	245
  7792   00161A  5CDE               	subwf	postinc2,w,c
  7793   00161C  B0D8               	btfsc	status,0,c
  7794   00161E  EF13  F00B         	goto	u2771
  7795   001622  EF15  F00B         	goto	u2770
  7796   001626                     u2771:
  7797   001626  EF39  F00B         	goto	l3660
  7798   00162A                     u2770:
  7799   00162A  5001               	movf	colour_to_key@p1^0,w,c
  7800   00162C  6ED9               	movwf	fsr2l,c
  7801   00162E  6ADA               	clrf	fsr2h,c
  7802   001630  0E02               	movlw	2
  7803   001632  26D9               	addwf	fsr2l,f,c
  7804   001634  0E01               	movlw	1
  7805   001636  50DB               	movf	plusw2,w,c
  7806   001638  E109               	bnz	u2780
  7807   00163A  0E0D               	movlw	13
  7808   00163C  5CDE               	subwf	postinc2,w,c
  7809   00163E  A0D8               	btfss	status,0,c
  7810   001640  EF24  F00B         	goto	u2781
  7811   001644  EF26  F00B         	goto	u2780
  7812   001648                     u2781:
  7813   001648  EF39  F00B         	goto	l3660
  7814   00164C                     u2780:
  7815   00164C  5001               	movf	colour_to_key@p1^0,w,c
  7816   00164E  6ED9               	movwf	fsr2l,c
  7817   001650  6ADA               	clrf	fsr2h,c
  7818   001652  0E02               	movlw	2
  7819   001654  26D9               	addwf	fsr2l,f,c
  7820   001656  0E01               	movlw	1
  7821   001658  50DB               	movf	plusw2,w,c
  7822   00165A  E107               	bnz	u2791
  7823   00165C  0E39               	movlw	57
  7824   00165E  5CDE               	subwf	postinc2,w,c
  7825   001660  B0D8               	btfsc	status,0,c
  7826   001662  EF35  F00B         	goto	u2791
  7827   001666  EF37  F00B         	goto	u2790
  7828   00166A                     u2791:
  7829   00166A  EF39  F00B         	goto	l3660
  7830   00166E                     u2790:
  7831   00166E                     
  7832                           ;color.c: 335:          ((13 <= p1->S) && (p1->S <= 56))) {;color.c: 336:         key = 
      +                          3;
  7833   00166E  0E03               	movlw	3
  7834   001670  6E05               	movwf	colour_to_key@key^0,c
  7835   001672                     l3660:
  7836                           
  7837                           ;color.c: 339:     if ( ((10 <= p1->H) && (p1->H <= 31)) &&
  7838   001672  5001               	movf	colour_to_key@p1^0,w,c
  7839   001674  6ED9               	movwf	fsr2l,c
  7840   001676  6ADA               	clrf	fsr2h,c
  7841   001678  0E01               	movlw	1
  7842   00167A  50DB               	movf	plusw2,w,c
  7843   00167C  E109               	bnz	u2800
  7844   00167E  0E0A               	movlw	10
  7845   001680  5CDE               	subwf	postinc2,w,c
  7846   001682  A0D8               	btfss	status,0,c
  7847   001684  EF46  F00B         	goto	u2801
  7848   001688  EF48  F00B         	goto	u2800
  7849   00168C                     u2801:
  7850   00168C  EF7B  F00B         	goto	l3670
  7851   001690                     u2800:
  7852   001690  5001               	movf	colour_to_key@p1^0,w,c
  7853   001692  6ED9               	movwf	fsr2l,c
  7854   001694  6ADA               	clrf	fsr2h,c
  7855   001696  0E01               	movlw	1
  7856   001698  50DB               	movf	plusw2,w,c
  7857   00169A  E107               	bnz	u2811
  7858   00169C  0E20               	movlw	32
  7859   00169E  5CDE               	subwf	postinc2,w,c
  7860   0016A0  B0D8               	btfsc	status,0,c
  7861   0016A2  EF55  F00B         	goto	u2811
  7862   0016A6  EF57  F00B         	goto	u2810
  7863   0016AA                     u2811:
  7864   0016AA  EF7B  F00B         	goto	l3670
  7865   0016AE                     u2810:
  7866   0016AE  5001               	movf	colour_to_key@p1^0,w,c
  7867   0016B0  6ED9               	movwf	fsr2l,c
  7868   0016B2  6ADA               	clrf	fsr2h,c
  7869   0016B4  0E02               	movlw	2
  7870   0016B6  26D9               	addwf	fsr2l,f,c
  7871   0016B8  0E01               	movlw	1
  7872   0016BA  50DB               	movf	plusw2,w,c
  7873   0016BC  E109               	bnz	u2820
  7874   0016BE  0E11               	movlw	17
  7875   0016C0  5CDE               	subwf	postinc2,w,c
  7876   0016C2  A0D8               	btfss	status,0,c
  7877   0016C4  EF66  F00B         	goto	u2821
  7878   0016C8  EF68  F00B         	goto	u2820
  7879   0016CC                     u2821:
  7880   0016CC  EF7B  F00B         	goto	l3670
  7881   0016D0                     u2820:
  7882   0016D0  5001               	movf	colour_to_key@p1^0,w,c
  7883   0016D2  6ED9               	movwf	fsr2l,c
  7884   0016D4  6ADA               	clrf	fsr2h,c
  7885   0016D6  0E02               	movlw	2
  7886   0016D8  26D9               	addwf	fsr2l,f,c
  7887   0016DA  0E01               	movlw	1
  7888   0016DC  50DB               	movf	plusw2,w,c
  7889   0016DE  E107               	bnz	u2831
  7890   0016E0  0E21               	movlw	33
  7891   0016E2  5CDE               	subwf	postinc2,w,c
  7892   0016E4  B0D8               	btfsc	status,0,c
  7893   0016E6  EF77  F00B         	goto	u2831
  7894   0016EA  EF79  F00B         	goto	u2830
  7895   0016EE                     u2831:
  7896   0016EE  EF7B  F00B         	goto	l3670
  7897   0016F2                     u2830:
  7898   0016F2                     
  7899                           ;color.c: 340:          ((17 <= p1->S) && (p1->S <= 32))) {;color.c: 341:         key = 
      +                          4;
  7900   0016F2  0E04               	movlw	4
  7901   0016F4  6E05               	movwf	colour_to_key@key^0,c
  7902   0016F6                     l3670:
  7903                           
  7904                           ;color.c: 344:     if ( ((279 <= p1->H) && (p1->H <= 360)) &&
  7905   0016F6  5001               	movf	colour_to_key@p1^0,w,c
  7906   0016F8  6ED9               	movwf	fsr2l,c
  7907   0016FA  6ADA               	clrf	fsr2h,c
  7908   0016FC  0E17               	movlw	23
  7909   0016FE  5CDE               	subwf	postinc2,w,c
  7910   001700  0E01               	movlw	1
  7911   001702  58DE               	subwfb	postinc2,w,c
  7912   001704  A0D8               	btfss	status,0,c
  7913   001706  EF87  F00B         	goto	u2841
  7914   00170A  EF89  F00B         	goto	u2840
  7915   00170E                     u2841:
  7916   00170E  EFBB  F00B         	goto	l3680
  7917   001712                     u2840:
  7918   001712  5001               	movf	colour_to_key@p1^0,w,c
  7919   001714  6ED9               	movwf	fsr2l,c
  7920   001716  6ADA               	clrf	fsr2h,c
  7921   001718  0E69               	movlw	105
  7922   00171A  5CDE               	subwf	postinc2,w,c
  7923   00171C  0E01               	movlw	1
  7924   00171E  58DE               	subwfb	postinc2,w,c
  7925   001720  B0D8               	btfsc	status,0,c
  7926   001722  EF95  F00B         	goto	u2851
  7927   001726  EF97  F00B         	goto	u2850
  7928   00172A                     u2851:
  7929   00172A  EFBB  F00B         	goto	l3680
  7930   00172E                     u2850:
  7931   00172E  5001               	movf	colour_to_key@p1^0,w,c
  7932   001730  6ED9               	movwf	fsr2l,c
  7933   001732  6ADA               	clrf	fsr2h,c
  7934   001734  0E02               	movlw	2
  7935   001736  26D9               	addwf	fsr2l,f,c
  7936   001738  0E01               	movlw	1
  7937   00173A  50DB               	movf	plusw2,w,c
  7938   00173C  E109               	bnz	u2860
  7939   00173E  0E0B               	movlw	11
  7940   001740  5CDE               	subwf	postinc2,w,c
  7941   001742  A0D8               	btfss	status,0,c
  7942   001744  EFA6  F00B         	goto	u2861
  7943   001748  EFA8  F00B         	goto	u2860
  7944   00174C                     u2861:
  7945   00174C  EFBB  F00B         	goto	l3680
  7946   001750                     u2860:
  7947   001750  5001               	movf	colour_to_key@p1^0,w,c
  7948   001752  6ED9               	movwf	fsr2l,c
  7949   001754  6ADA               	clrf	fsr2h,c
  7950   001756  0E02               	movlw	2
  7951   001758  26D9               	addwf	fsr2l,f,c
  7952   00175A  0E01               	movlw	1
  7953   00175C  50DB               	movf	plusw2,w,c
  7954   00175E  E107               	bnz	u2871
  7955   001760  0E10               	movlw	16
  7956   001762  5CDE               	subwf	postinc2,w,c
  7957   001764  B0D8               	btfsc	status,0,c
  7958   001766  EFB7  F00B         	goto	u2871
  7959   00176A  EFB9  F00B         	goto	u2870
  7960   00176E                     u2871:
  7961   00176E  EFBB  F00B         	goto	l3680
  7962   001772                     u2870:
  7963   001772                     
  7964                           ;color.c: 345:          ((11 <= p1->S) && (p1->S <= 15))) {;color.c: 346:         key = 
      +                          5;
  7965   001772  0E05               	movlw	5
  7966   001774  6E05               	movwf	colour_to_key@key^0,c
  7967   001776                     l3680:
  7968                           
  7969                           ;color.c: 349:     if ( ((298 <= p1->H) && (p1->H <= 360)) &&
  7970   001776  5001               	movf	colour_to_key@p1^0,w,c
  7971   001778  6ED9               	movwf	fsr2l,c
  7972   00177A  6ADA               	clrf	fsr2h,c
  7973   00177C  0E2A               	movlw	42
  7974   00177E  5CDE               	subwf	postinc2,w,c
  7975   001780  0E01               	movlw	1
  7976   001782  58DE               	subwfb	postinc2,w,c
  7977   001784  A0D8               	btfss	status,0,c
  7978   001786  EFC7  F00B         	goto	u2881
  7979   00178A  EFC9  F00B         	goto	u2880
  7980   00178E                     u2881:
  7981   00178E  EFFB  F00B         	goto	l3690
  7982   001792                     u2880:
  7983   001792  5001               	movf	colour_to_key@p1^0,w,c
  7984   001794  6ED9               	movwf	fsr2l,c
  7985   001796  6ADA               	clrf	fsr2h,c
  7986   001798  0E69               	movlw	105
  7987   00179A  5CDE               	subwf	postinc2,w,c
  7988   00179C  0E01               	movlw	1
  7989   00179E  58DE               	subwfb	postinc2,w,c
  7990   0017A0  B0D8               	btfsc	status,0,c
  7991   0017A2  EFD5  F00B         	goto	u2891
  7992   0017A6  EFD7  F00B         	goto	u2890
  7993   0017AA                     u2891:
  7994   0017AA  EFFB  F00B         	goto	l3690
  7995   0017AE                     u2890:
  7996   0017AE  5001               	movf	colour_to_key@p1^0,w,c
  7997   0017B0  6ED9               	movwf	fsr2l,c
  7998   0017B2  6ADA               	clrf	fsr2h,c
  7999   0017B4  0E02               	movlw	2
  8000   0017B6  26D9               	addwf	fsr2l,f,c
  8001   0017B8  0E01               	movlw	1
  8002   0017BA  50DB               	movf	plusw2,w,c
  8003   0017BC  E109               	bnz	u2900
  8004   0017BE  0E14               	movlw	20
  8005   0017C0  5CDE               	subwf	postinc2,w,c
  8006   0017C2  A0D8               	btfss	status,0,c
  8007   0017C4  EFE6  F00B         	goto	u2901
  8008   0017C8  EFE8  F00B         	goto	u2900
  8009   0017CC                     u2901:
  8010   0017CC  EFFB  F00B         	goto	l3690
  8011   0017D0                     u2900:
  8012   0017D0  5001               	movf	colour_to_key@p1^0,w,c
  8013   0017D2  6ED9               	movwf	fsr2l,c
  8014   0017D4  6ADA               	clrf	fsr2h,c
  8015   0017D6  0E02               	movlw	2
  8016   0017D8  26D9               	addwf	fsr2l,f,c
  8017   0017DA  0E01               	movlw	1
  8018   0017DC  50DB               	movf	plusw2,w,c
  8019   0017DE  E107               	bnz	u2911
  8020   0017E0  0E2E               	movlw	46
  8021   0017E2  5CDE               	subwf	postinc2,w,c
  8022   0017E4  B0D8               	btfsc	status,0,c
  8023   0017E6  EFF7  F00B         	goto	u2911
  8024   0017EA  EFF9  F00B         	goto	u2910
  8025   0017EE                     u2911:
  8026   0017EE  EFFB  F00B         	goto	l3690
  8027   0017F2                     u2910:
  8028   0017F2                     
  8029                           ;color.c: 350:          ((20 <= p1->S) && (p1->S <= 45))) {;color.c: 351:         key = 
      +                          6;
  8030   0017F2  0E06               	movlw	6
  8031   0017F4  6E05               	movwf	colour_to_key@key^0,c
  8032   0017F6                     l3690:
  8033                           
  8034                           ;color.c: 354:     if ( ((154 <= p1->H) && (p1->H <= 207)) &&
  8035   0017F6  5001               	movf	colour_to_key@p1^0,w,c
  8036   0017F8  6ED9               	movwf	fsr2l,c
  8037   0017FA  6ADA               	clrf	fsr2h,c
  8038   0017FC  0E01               	movlw	1
  8039   0017FE  50DB               	movf	plusw2,w,c
  8040   001800  E109               	bnz	u2920
  8041   001802  0E9A               	movlw	154
  8042   001804  5CDE               	subwf	postinc2,w,c
  8043   001806  A0D8               	btfss	status,0,c
  8044   001808  EF08  F00C         	goto	u2921
  8045   00180C  EF0A  F00C         	goto	u2920
  8046   001810                     u2921:
  8047   001810  EF3D  F00C         	goto	l3700
  8048   001814                     u2920:
  8049   001814  5001               	movf	colour_to_key@p1^0,w,c
  8050   001816  6ED9               	movwf	fsr2l,c
  8051   001818  6ADA               	clrf	fsr2h,c
  8052   00181A  0E01               	movlw	1
  8053   00181C  50DB               	movf	plusw2,w,c
  8054   00181E  E107               	bnz	u2931
  8055   001820  0ED0               	movlw	208
  8056   001822  5CDE               	subwf	postinc2,w,c
  8057   001824  B0D8               	btfsc	status,0,c
  8058   001826  EF17  F00C         	goto	u2931
  8059   00182A  EF19  F00C         	goto	u2930
  8060   00182E                     u2931:
  8061   00182E  EF3D  F00C         	goto	l3700
  8062   001832                     u2930:
  8063   001832  5001               	movf	colour_to_key@p1^0,w,c
  8064   001834  6ED9               	movwf	fsr2l,c
  8065   001836  6ADA               	clrf	fsr2h,c
  8066   001838  0E02               	movlw	2
  8067   00183A  26D9               	addwf	fsr2l,f,c
  8068   00183C  0E01               	movlw	1
  8069   00183E  50DB               	movf	plusw2,w,c
  8070   001840  E109               	bnz	u2940
  8071   001842  0E0D               	movlw	13
  8072   001844  5CDE               	subwf	postinc2,w,c
  8073   001846  A0D8               	btfss	status,0,c
  8074   001848  EF28  F00C         	goto	u2941
  8075   00184C  EF2A  F00C         	goto	u2940
  8076   001850                     u2941:
  8077   001850  EF3D  F00C         	goto	l3700
  8078   001854                     u2940:
  8079   001854  5001               	movf	colour_to_key@p1^0,w,c
  8080   001856  6ED9               	movwf	fsr2l,c
  8081   001858  6ADA               	clrf	fsr2h,c
  8082   00185A  0E02               	movlw	2
  8083   00185C  26D9               	addwf	fsr2l,f,c
  8084   00185E  0E01               	movlw	1
  8085   001860  50DB               	movf	plusw2,w,c
  8086   001862  E107               	bnz	u2951
  8087   001864  0E2E               	movlw	46
  8088   001866  5CDE               	subwf	postinc2,w,c
  8089   001868  B0D8               	btfsc	status,0,c
  8090   00186A  EF39  F00C         	goto	u2951
  8091   00186E  EF3B  F00C         	goto	u2950
  8092   001872                     u2951:
  8093   001872  EF3D  F00C         	goto	l3700
  8094   001876                     u2950:
  8095   001876                     
  8096                           ;color.c: 355:          ((13 <= p1->S) && (p1->S <= 45))) {;color.c: 356:         key = 
      +                          7;
  8097   001876  0E07               	movlw	7
  8098   001878  6E05               	movwf	colour_to_key@key^0,c
  8099   00187A                     l3700:
  8100                           
  8101                           ;color.c: 359:     if ( ((3000 <= p2->C) && (p2->C <= 40000)) &&
  8102   00187A  5002               	movf	colour_to_key@p2^0,w,c
  8103   00187C  6ED9               	movwf	fsr2l,c
  8104   00187E  6ADA               	clrf	fsr2h,c
  8105   001880  0E06               	movlw	6
  8106   001882  26D9               	addwf	fsr2l,f,c
  8107   001884  0EB8               	movlw	184
  8108   001886  5CDE               	subwf	postinc2,w,c
  8109   001888  0E0B               	movlw	11
  8110   00188A  58DE               	subwfb	postinc2,w,c
  8111   00188C  A0D8               	btfss	status,0,c
  8112   00188E  EF4B  F00C         	goto	u2961
  8113   001892  EF4D  F00C         	goto	u2960
  8114   001896                     u2961:
  8115   001896  EF70  F00C         	goto	l3708
  8116   00189A                     u2960:
  8117   00189A  5002               	movf	colour_to_key@p2^0,w,c
  8118   00189C  6ED9               	movwf	fsr2l,c
  8119   00189E  6ADA               	clrf	fsr2h,c
  8120   0018A0  0E06               	movlw	6
  8121   0018A2  26D9               	addwf	fsr2l,f,c
  8122   0018A4  0E41               	movlw	65
  8123   0018A6  5CDE               	subwf	postinc2,w,c
  8124   0018A8  0E9C               	movlw	156
  8125   0018AA  58DE               	subwfb	postinc2,w,c
  8126   0018AC  B0D8               	btfsc	status,0,c
  8127   0018AE  EF5B  F00C         	goto	u2971
  8128   0018B2  EF5D  F00C         	goto	u2970
  8129   0018B6                     u2971:
  8130   0018B6  EF70  F00C         	goto	l3708
  8131   0018BA                     u2970:
  8132   0018BA  5001               	movf	colour_to_key@p1^0,w,c
  8133   0018BC  6ED9               	movwf	fsr2l,c
  8134   0018BE  6ADA               	clrf	fsr2h,c
  8135   0018C0  0E02               	movlw	2
  8136   0018C2  26D9               	addwf	fsr2l,f,c
  8137   0018C4  0E01               	movlw	1
  8138   0018C6  50DB               	movf	plusw2,w,c
  8139   0018C8  E107               	bnz	u2981
  8140   0018CA  0E0B               	movlw	11
  8141   0018CC  5CDE               	subwf	postinc2,w,c
  8142   0018CE  B0D8               	btfsc	status,0,c
  8143   0018D0  EF6C  F00C         	goto	u2981
  8144   0018D4  EF6E  F00C         	goto	u2980
  8145   0018D8                     u2981:
  8146   0018D8  EF70  F00C         	goto	l3708
  8147   0018DC                     u2980:
  8148   0018DC                     
  8149                           ;color.c: 360:          ((p1->S <= 10))) {;color.c: 361:         key = 8;
  8150   0018DC  0E08               	movlw	8
  8151   0018DE  6E05               	movwf	colour_to_key@key^0,c
  8152   0018E0                     l3708:
  8153                           
  8154                           ;color.c: 364:     if ( ((1000 <= p2->C) && (p2->C <= 2600)) &&
  8155   0018E0  5002               	movf	colour_to_key@p2^0,w,c
  8156   0018E2  6ED9               	movwf	fsr2l,c
  8157   0018E4  6ADA               	clrf	fsr2h,c
  8158   0018E6  0E06               	movlw	6
  8159   0018E8  26D9               	addwf	fsr2l,f,c
  8160   0018EA  0EE8               	movlw	232
  8161   0018EC  5CDE               	subwf	postinc2,w,c
  8162   0018EE  0E03               	movlw	3
  8163   0018F0  58DE               	subwfb	postinc2,w,c
  8164   0018F2  A0D8               	btfss	status,0,c
  8165   0018F4  EF7E  F00C         	goto	u2991
  8166   0018F8  EF80  F00C         	goto	u2990
  8167   0018FC                     u2991:
  8168   0018FC  EFA3  F00C         	goto	l136
  8169   001900                     u2990:
  8170   001900  5002               	movf	colour_to_key@p2^0,w,c
  8171   001902  6ED9               	movwf	fsr2l,c
  8172   001904  6ADA               	clrf	fsr2h,c
  8173   001906  0E06               	movlw	6
  8174   001908  26D9               	addwf	fsr2l,f,c
  8175   00190A  0E29               	movlw	41
  8176   00190C  5CDE               	subwf	postinc2,w,c
  8177   00190E  0E0A               	movlw	10
  8178   001910  58DE               	subwfb	postinc2,w,c
  8179   001912  B0D8               	btfsc	status,0,c
  8180   001914  EF8E  F00C         	goto	u3001
  8181   001918  EF90  F00C         	goto	u3000
  8182   00191C                     u3001:
  8183   00191C  EFA3  F00C         	goto	l136
  8184   001920                     u3000:
  8185   001920  5001               	movf	colour_to_key@p1^0,w,c
  8186   001922  6ED9               	movwf	fsr2l,c
  8187   001924  6ADA               	clrf	fsr2h,c
  8188   001926  0E02               	movlw	2
  8189   001928  26D9               	addwf	fsr2l,f,c
  8190   00192A  0E01               	movlw	1
  8191   00192C  50DB               	movf	plusw2,w,c
  8192   00192E  E107               	bnz	u3011
  8193   001930  0E0D               	movlw	13
  8194   001932  5CDE               	subwf	postinc2,w,c
  8195   001934  B0D8               	btfsc	status,0,c
  8196   001936  EF9F  F00C         	goto	u3011
  8197   00193A  EFA1  F00C         	goto	u3010
  8198   00193E                     u3011:
  8199   00193E  EFA3  F00C         	goto	l136
  8200   001942                     u3010:
  8201   001942                     
  8202                           ;color.c: 365:          ((p1->S <= 12))) {;color.c: 366:         key = 9;
  8203   001942  0E09               	movlw	9
  8204   001944  6E05               	movwf	colour_to_key@key^0,c
  8205   001946                     l136:
  8206                           
  8207                           ;color.c: 369:     return key;
  8208   001946  5005               	movf	colour_to_key@key^0,w,c
  8209   001948  0012               	return		;funcret
  8210   00194A                     __end_of_colour_to_key:
  8211                           	callstack 0
  8212                           
  8213 ;; *************** function _average_RGBC *****************
  8214 ;; Defined at:
  8215 ;;		line 124 in file "color.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;  p               1   13[COMRAM] PTR struct RGBC_val
  8218 ;;		 -> main@RGBC_colour(8), 
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;  i               1   16[COMRAM] unsigned char 
  8221 ;;  temp_C          4   29[COMRAM] unsigned long 
  8222 ;;  temp_B          4   25[COMRAM] unsigned long 
  8223 ;;  temp_G          4   21[COMRAM] unsigned long 
  8224 ;;  temp_R          4   17[COMRAM] unsigned long 
  8225 ;; Return value:  Size  Location     Type
  8226 ;;                  1    wreg      void 
  8227 ;; Registers used:
  8228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8229 ;; Tracked objects:
  8230 ;;		On entry : 0/0
  8231 ;;		On exit  : 0/0
  8232 ;;		Unchanged: 0/0
  8233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8234 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8235 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8236 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8237 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8238 ;;Total ram usage:       20 bytes
  8239 ;; Hardware stack levels used: 1
  8240 ;; Hardware stack levels required when called: 5
  8241 ;; This function calls:
  8242 ;;		___lldiv
  8243 ;;		_getRGBCval
  8244 ;; This function is called by:
  8245 ;;		_forward_navigation
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text48
  8250   001D74                     __ptext48:
  8251                           	callstack 0
  8252   001D74                     _average_RGBC:
  8253                           	callstack 24
  8254   001D74                     
  8255                           ;color.c: 124: void average_RGBC(struct RGBC_val *p);color.c: 125: {;color.c: 127:     u
      +                          nsigned long temp_R = 0;
  8256   001D74  0E00               	movlw	0
  8257   001D76  6E12               	movwf	average_RGBC@temp_R^0,c
  8258   001D78  0E00               	movlw	0
  8259   001D7A  6E13               	movwf	(average_RGBC@temp_R+1)^0,c
  8260   001D7C  0E00               	movlw	0
  8261   001D7E  6E14               	movwf	(average_RGBC@temp_R+2)^0,c
  8262   001D80  0E00               	movlw	0
  8263   001D82  6E15               	movwf	(average_RGBC@temp_R+3)^0,c
  8264                           
  8265                           ;color.c: 128:     unsigned long temp_G = 0;
  8266   001D84  0E00               	movlw	0
  8267   001D86  6E16               	movwf	average_RGBC@temp_G^0,c
  8268   001D88  0E00               	movlw	0
  8269   001D8A  6E17               	movwf	(average_RGBC@temp_G+1)^0,c
  8270   001D8C  0E00               	movlw	0
  8271   001D8E  6E18               	movwf	(average_RGBC@temp_G+2)^0,c
  8272   001D90  0E00               	movlw	0
  8273   001D92  6E19               	movwf	(average_RGBC@temp_G+3)^0,c
  8274                           
  8275                           ;color.c: 129:     unsigned long temp_B = 0;
  8276   001D94  0E00               	movlw	0
  8277   001D96  6E1A               	movwf	average_RGBC@temp_B^0,c
  8278   001D98  0E00               	movlw	0
  8279   001D9A  6E1B               	movwf	(average_RGBC@temp_B+1)^0,c
  8280   001D9C  0E00               	movlw	0
  8281   001D9E  6E1C               	movwf	(average_RGBC@temp_B+2)^0,c
  8282   001DA0  0E00               	movlw	0
  8283   001DA2  6E1D               	movwf	(average_RGBC@temp_B+3)^0,c
  8284                           
  8285                           ;color.c: 130:     unsigned long temp_C = 0;
  8286   001DA4  0E00               	movlw	0
  8287   001DA6  6E1E               	movwf	average_RGBC@temp_C^0,c
  8288   001DA8  0E00               	movlw	0
  8289   001DAA  6E1F               	movwf	(average_RGBC@temp_C+1)^0,c
  8290   001DAC  0E00               	movlw	0
  8291   001DAE  6E20               	movwf	(average_RGBC@temp_C+2)^0,c
  8292   001DB0  0E00               	movlw	0
  8293   001DB2  6E21               	movwf	(average_RGBC@temp_C+3)^0,c
  8294                           
  8295                           ;color.c: 136:     for (unsigned char i = 0; i < sample_count; i++) {
  8296   001DB4  0E00               	movlw	0
  8297   001DB6  6E11               	movwf	average_RGBC@i^0,c
  8298   001DB8  EF25  F00F         	goto	l3490
  8299   001DBC                     l3478:
  8300                           
  8301                           ;color.c: 138:         getRGBCval(p);
  8302   001DBC  C00E  F00C         	movff	average_RGBC@p,getRGBCval@p
  8303   001DC0  ECA0  F019         	call	_getRGBCval	;wreg free
  8304   001DC4                     
  8305                           ;color.c: 140:         temp_R += (unsigned long)p->R;
  8306   001DC4  500E               	movf	average_RGBC@p^0,w,c
  8307   001DC6  6ED9               	movwf	fsr2l,c
  8308   001DC8  6ADA               	clrf	fsr2h,c
  8309   001DCA  CFDE F00F          	movff	postinc2,??_average_RGBC
  8310   001DCE  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8311   001DD2  500F               	movf	??_average_RGBC^0,w,c
  8312   001DD4  2612               	addwf	average_RGBC@temp_R^0,f,c
  8313   001DD6  5010               	movf	(??_average_RGBC+1)^0,w,c
  8314   001DD8  2213               	addwfc	(average_RGBC@temp_R+1)^0,f,c
  8315   001DDA  0E00               	movlw	0
  8316   001DDC  2214               	addwfc	(average_RGBC@temp_R+2)^0,f,c
  8317   001DDE  0E00               	movlw	0
  8318   001DE0  2215               	addwfc	(average_RGBC@temp_R+3)^0,f,c
  8319   001DE2                     
  8320                           ;color.c: 141:         temp_G += (unsigned long)p->G;
  8321   001DE2  500E               	movf	average_RGBC@p^0,w,c
  8322   001DE4  6ED9               	movwf	fsr2l,c
  8323   001DE6  6ADA               	clrf	fsr2h,c
  8324   001DE8  0E02               	movlw	2
  8325   001DEA  26D9               	addwf	fsr2l,f,c
  8326   001DEC  CFDE F00F          	movff	postinc2,??_average_RGBC
  8327   001DF0  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8328   001DF4  500F               	movf	??_average_RGBC^0,w,c
  8329   001DF6  2616               	addwf	average_RGBC@temp_G^0,f,c
  8330   001DF8  5010               	movf	(??_average_RGBC+1)^0,w,c
  8331   001DFA  2217               	addwfc	(average_RGBC@temp_G+1)^0,f,c
  8332   001DFC  0E00               	movlw	0
  8333   001DFE  2218               	addwfc	(average_RGBC@temp_G+2)^0,f,c
  8334   001E00  0E00               	movlw	0
  8335   001E02  2219               	addwfc	(average_RGBC@temp_G+3)^0,f,c
  8336   001E04                     
  8337                           ;color.c: 142:         temp_B += (unsigned long)p->B;
  8338   001E04  500E               	movf	average_RGBC@p^0,w,c
  8339   001E06  6ED9               	movwf	fsr2l,c
  8340   001E08  6ADA               	clrf	fsr2h,c
  8341   001E0A  0E04               	movlw	4
  8342   001E0C  26D9               	addwf	fsr2l,f,c
  8343   001E0E  CFDE F00F          	movff	postinc2,??_average_RGBC
  8344   001E12  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8345   001E16  500F               	movf	??_average_RGBC^0,w,c
  8346   001E18  261A               	addwf	average_RGBC@temp_B^0,f,c
  8347   001E1A  5010               	movf	(??_average_RGBC+1)^0,w,c
  8348   001E1C  221B               	addwfc	(average_RGBC@temp_B+1)^0,f,c
  8349   001E1E  0E00               	movlw	0
  8350   001E20  221C               	addwfc	(average_RGBC@temp_B+2)^0,f,c
  8351   001E22  0E00               	movlw	0
  8352   001E24  221D               	addwfc	(average_RGBC@temp_B+3)^0,f,c
  8353   001E26                     
  8354                           ;color.c: 143:         temp_C += (unsigned long)p->C;
  8355   001E26  500E               	movf	average_RGBC@p^0,w,c
  8356   001E28  6ED9               	movwf	fsr2l,c
  8357   001E2A  6ADA               	clrf	fsr2h,c
  8358   001E2C  0E06               	movlw	6
  8359   001E2E  26D9               	addwf	fsr2l,f,c
  8360   001E30  CFDE F00F          	movff	postinc2,??_average_RGBC
  8361   001E34  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8362   001E38  500F               	movf	??_average_RGBC^0,w,c
  8363   001E3A  261E               	addwf	average_RGBC@temp_C^0,f,c
  8364   001E3C  5010               	movf	(??_average_RGBC+1)^0,w,c
  8365   001E3E  221F               	addwfc	(average_RGBC@temp_C+1)^0,f,c
  8366   001E40  0E00               	movlw	0
  8367   001E42  2220               	addwfc	(average_RGBC@temp_C+2)^0,f,c
  8368   001E44  0E00               	movlw	0
  8369   001E46  2221               	addwfc	(average_RGBC@temp_C+3)^0,f,c
  8370   001E48                     
  8371                           ;color.c: 144:     }
  8372   001E48  2A11               	incf	average_RGBC@i^0,f,c
  8373   001E4A                     l3490:
  8374   001E4A  0E13               	movlw	19
  8375   001E4C  6411               	cpfsgt	average_RGBC@i^0,c
  8376   001E4E  EF2B  F00F         	goto	u2551
  8377   001E52  EF2D  F00F         	goto	u2550
  8378   001E56                     u2551:
  8379   001E56  EFDE  F00E         	goto	l3478
  8380   001E5A                     u2550:
  8381   001E5A  C012  F001         	movff	average_RGBC@temp_R,___lldiv@dividend
  8382   001E5E  C013  F002         	movff	average_RGBC@temp_R+1,___lldiv@dividend+1
  8383   001E62  C014  F003         	movff	average_RGBC@temp_R+2,___lldiv@dividend+2
  8384   001E66  C015  F004         	movff	average_RGBC@temp_R+3,___lldiv@dividend+3
  8385   001E6A  0E14               	movlw	20
  8386   001E6C  6E05               	movwf	___lldiv@divisor^0,c
  8387   001E6E  0E00               	movlw	0
  8388   001E70  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8389   001E72  0E00               	movlw	0
  8390   001E74  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8391   001E76  0E00               	movlw	0
  8392   001E78  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8393   001E7A  ECD0  F015         	call	___lldiv	;wreg free
  8394   001E7E  C001  F012         	movff	?___lldiv,average_RGBC@temp_R
  8395   001E82  C002  F013         	movff	?___lldiv+1,average_RGBC@temp_R+1
  8396   001E86  C003  F014         	movff	?___lldiv+2,average_RGBC@temp_R+2
  8397   001E8A  C004  F015         	movff	?___lldiv+3,average_RGBC@temp_R+3
  8398   001E8E  C016  F001         	movff	average_RGBC@temp_G,___lldiv@dividend
  8399   001E92  C017  F002         	movff	average_RGBC@temp_G+1,___lldiv@dividend+1
  8400   001E96  C018  F003         	movff	average_RGBC@temp_G+2,___lldiv@dividend+2
  8401   001E9A  C019  F004         	movff	average_RGBC@temp_G+3,___lldiv@dividend+3
  8402   001E9E  0E14               	movlw	20
  8403   001EA0  6E05               	movwf	___lldiv@divisor^0,c
  8404   001EA2  0E00               	movlw	0
  8405   001EA4  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8406   001EA6  0E00               	movlw	0
  8407   001EA8  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8408   001EAA  0E00               	movlw	0
  8409   001EAC  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8410   001EAE  ECD0  F015         	call	___lldiv	;wreg free
  8411   001EB2  C001  F016         	movff	?___lldiv,average_RGBC@temp_G
  8412   001EB6  C002  F017         	movff	?___lldiv+1,average_RGBC@temp_G+1
  8413   001EBA  C003  F018         	movff	?___lldiv+2,average_RGBC@temp_G+2
  8414   001EBE  C004  F019         	movff	?___lldiv+3,average_RGBC@temp_G+3
  8415   001EC2  C01A  F001         	movff	average_RGBC@temp_B,___lldiv@dividend
  8416   001EC6  C01B  F002         	movff	average_RGBC@temp_B+1,___lldiv@dividend+1
  8417   001ECA  C01C  F003         	movff	average_RGBC@temp_B+2,___lldiv@dividend+2
  8418   001ECE  C01D  F004         	movff	average_RGBC@temp_B+3,___lldiv@dividend+3
  8419   001ED2  0E14               	movlw	20
  8420   001ED4  6E05               	movwf	___lldiv@divisor^0,c
  8421   001ED6  0E00               	movlw	0
  8422   001ED8  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8423   001EDA  0E00               	movlw	0
  8424   001EDC  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8425   001EDE  0E00               	movlw	0
  8426   001EE0  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8427   001EE2  ECD0  F015         	call	___lldiv	;wreg free
  8428   001EE6  C001  F01A         	movff	?___lldiv,average_RGBC@temp_B
  8429   001EEA  C002  F01B         	movff	?___lldiv+1,average_RGBC@temp_B+1
  8430   001EEE  C003  F01C         	movff	?___lldiv+2,average_RGBC@temp_B+2
  8431   001EF2  C004  F01D         	movff	?___lldiv+3,average_RGBC@temp_B+3
  8432   001EF6  C01E  F001         	movff	average_RGBC@temp_C,___lldiv@dividend
  8433   001EFA  C01F  F002         	movff	average_RGBC@temp_C+1,___lldiv@dividend+1
  8434   001EFE  C020  F003         	movff	average_RGBC@temp_C+2,___lldiv@dividend+2
  8435   001F02  C021  F004         	movff	average_RGBC@temp_C+3,___lldiv@dividend+3
  8436   001F06  0E14               	movlw	20
  8437   001F08  6E05               	movwf	___lldiv@divisor^0,c
  8438   001F0A  0E00               	movlw	0
  8439   001F0C  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8440   001F0E  0E00               	movlw	0
  8441   001F10  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8442   001F12  0E00               	movlw	0
  8443   001F14  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8444   001F16  ECD0  F015         	call	___lldiv	;wreg free
  8445   001F1A  C001  F01E         	movff	?___lldiv,average_RGBC@temp_C
  8446   001F1E  C002  F01F         	movff	?___lldiv+1,average_RGBC@temp_C+1
  8447   001F22  C003  F020         	movff	?___lldiv+2,average_RGBC@temp_C+2
  8448   001F26  C004  F021         	movff	?___lldiv+3,average_RGBC@temp_C+3
  8449   001F2A                     
  8450                           ;color.c: 153:     p->R = (unsigned int)temp_R;
  8451   001F2A  500E               	movf	average_RGBC@p^0,w,c
  8452   001F2C  6ED9               	movwf	fsr2l,c
  8453   001F2E  6ADA               	clrf	fsr2h,c
  8454   001F30  C012  FFDE         	movff	average_RGBC@temp_R,postinc2
  8455   001F34  C013  FFDD         	movff	average_RGBC@temp_R+1,postdec2
  8456   001F38                     
  8457                           ;color.c: 154:     p->G = (unsigned int)temp_G;
  8458   001F38  500E               	movf	average_RGBC@p^0,w,c
  8459   001F3A  6ED9               	movwf	fsr2l,c
  8460   001F3C  6ADA               	clrf	fsr2h,c
  8461   001F3E  0E02               	movlw	2
  8462   001F40  26D9               	addwf	fsr2l,f,c
  8463   001F42  C016  FFDE         	movff	average_RGBC@temp_G,postinc2
  8464   001F46  C017  FFDD         	movff	average_RGBC@temp_G+1,postdec2
  8465   001F4A                     
  8466                           ;color.c: 155:     p->B = (unsigned int)temp_B;
  8467   001F4A  500E               	movf	average_RGBC@p^0,w,c
  8468   001F4C  6ED9               	movwf	fsr2l,c
  8469   001F4E  6ADA               	clrf	fsr2h,c
  8470   001F50  0E04               	movlw	4
  8471   001F52  26D9               	addwf	fsr2l,f,c
  8472   001F54  C01A  FFDE         	movff	average_RGBC@temp_B,postinc2
  8473   001F58  C01B  FFDD         	movff	average_RGBC@temp_B+1,postdec2
  8474   001F5C                     
  8475                           ;color.c: 156:     p->C = (unsigned int)temp_C;
  8476   001F5C  500E               	movf	average_RGBC@p^0,w,c
  8477   001F5E  6ED9               	movwf	fsr2l,c
  8478   001F60  6ADA               	clrf	fsr2h,c
  8479   001F62  0E06               	movlw	6
  8480   001F64  26D9               	addwf	fsr2l,f,c
  8481   001F66  C01E  FFDE         	movff	average_RGBC@temp_C,postinc2
  8482   001F6A  C01F  FFDD         	movff	average_RGBC@temp_C+1,postdec2
  8483   001F6E  0012               	return		;funcret
  8484   001F70                     __end_of_average_RGBC:
  8485                           	callstack 0
  8486                           
  8487 ;; *************** function _getRGBCval *****************
  8488 ;; Defined at:
  8489 ;;		line 112 in file "color.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  8492 ;;		 -> main@RGBC_colour(8), 
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;		None
  8495 ;; Return value:  Size  Location     Type
  8496 ;;                  1    wreg      void 
  8497 ;; Registers used:
  8498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8499 ;; Tracked objects:
  8500 ;;		On entry : 0/0
  8501 ;;		On exit  : 0/0
  8502 ;;		Unchanged: 0/0
  8503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8504 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8507 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8508 ;;Total ram usage:        1 bytes
  8509 ;; Hardware stack levels used: 1
  8510 ;; Hardware stack levels required when called: 4
  8511 ;; This function calls:
  8512 ;;		_color_read_Blue
  8513 ;;		_color_read_Clear
  8514 ;;		_color_read_Green
  8515 ;;		_color_read_Red
  8516 ;; This function is called by:
  8517 ;;		_average_RGBC
  8518 ;;		_wait_for_wall
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           	psect	text49
  8523   003340                     __ptext49:
  8524                           	callstack 0
  8525   003340                     _getRGBCval:
  8526                           	callstack 24
  8527   003340                     
  8528                           ;color.c: 112: void getRGBCval(struct RGBC_val *p);color.c: 113: {;color.c: 114:     p->
      +                          R = color_read_Red();
  8529   003340  ECCB  F019         	call	_color_read_Red	;wreg free
  8530   003344  500C               	movf	getRGBCval@p^0,w,c
  8531   003346  6ED9               	movwf	fsr2l,c
  8532   003348  6ADA               	clrf	fsr2h,c
  8533   00334A  C005  FFDE         	movff	?_color_read_Red,postinc2
  8534   00334E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  8535                           
  8536                           ;color.c: 115:     p->G = color_read_Green();
  8537   003352  ECF3  F019         	call	_color_read_Green	;wreg free
  8538   003356  500C               	movf	getRGBCval@p^0,w,c
  8539   003358  6ED9               	movwf	fsr2l,c
  8540   00335A  6ADA               	clrf	fsr2h,c
  8541   00335C  0E02               	movlw	2
  8542   00335E  26D9               	addwf	fsr2l,f,c
  8543   003360  C005  FFDE         	movff	?_color_read_Green,postinc2
  8544   003364  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  8545                           
  8546                           ;color.c: 116:     p->B = color_read_Blue();
  8547   003368  EC43  F01A         	call	_color_read_Blue	;wreg free
  8548   00336C  500C               	movf	getRGBCval@p^0,w,c
  8549   00336E  6ED9               	movwf	fsr2l,c
  8550   003370  6ADA               	clrf	fsr2h,c
  8551   003372  0E04               	movlw	4
  8552   003374  26D9               	addwf	fsr2l,f,c
  8553   003376  C005  FFDE         	movff	?_color_read_Blue,postinc2
  8554   00337A  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  8555                           
  8556                           ;color.c: 117:     p->C = color_read_Clear();
  8557   00337E  EC1B  F01A         	call	_color_read_Clear	;wreg free
  8558   003382  500C               	movf	getRGBCval@p^0,w,c
  8559   003384  6ED9               	movwf	fsr2l,c
  8560   003386  6ADA               	clrf	fsr2h,c
  8561   003388  0E06               	movlw	6
  8562   00338A  26D9               	addwf	fsr2l,f,c
  8563   00338C  C005  FFDE         	movff	?_color_read_Clear,postinc2
  8564   003390  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  8565   003394  0012               	return		;funcret
  8566   003396                     __end_of_getRGBCval:
  8567                           	callstack 0
  8568                           
  8569 ;; *************** function _color_read_Red *****************
  8570 ;; Defined at:
  8571 ;;		line 40 in file "color.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;		None
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;  tmp             2    9[COMRAM] unsigned int 
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  2    4[COMRAM] unsigned int 
  8578 ;; Registers used:
  8579 ;;		wreg, status,2, status,0, cstack
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8586 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8587 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8588 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8589 ;;Total ram usage:        7 bytes
  8590 ;; Hardware stack levels used: 1
  8591 ;; Hardware stack levels required when called: 3
  8592 ;; This function calls:
  8593 ;;		_I2C_2_Master_Read
  8594 ;;		_I2C_2_Master_RepStart
  8595 ;;		_I2C_2_Master_Start
  8596 ;;		_I2C_2_Master_Stop
  8597 ;;		_I2C_2_Master_Write
  8598 ;; This function is called by:
  8599 ;;		_getRGBCval
  8600 ;; This function uses a non-reentrant model
  8601 ;;
  8602                           
  8603                           	psect	text50
  8604   003396                     __ptext50:
  8605                           	callstack 0
  8606   003396                     _color_read_Red:
  8607                           	callstack 24
  8608   003396                     
  8609                           ;color.c: 42:  unsigned int tmp;;color.c: 43:  I2C_2_Master_Start();
  8610   003396  ECD8  F01C         	call	_I2C_2_Master_Start	;wreg free
  8611                           
  8612                           ;color.c: 44:  I2C_2_Master_Write(0x52 | 0x00);
  8613   00339A  0E52               	movlw	82
  8614   00339C  ECBC  F01C         	call	_I2C_2_Master_Write
  8615                           
  8616                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  8617   0033A0  0EB6               	movlw	182
  8618   0033A2  ECBC  F01C         	call	_I2C_2_Master_Write
  8619                           
  8620                           ;color.c: 46:  I2C_2_Master_RepStart();
  8621   0033A6  ECCE  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8622                           
  8623                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  8624   0033AA  0E53               	movlw	83
  8625   0033AC  ECBC  F01C         	call	_I2C_2_Master_Write
  8626                           
  8627                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  8628   0033B0  0E01               	movlw	1
  8629   0033B2  ECAE  F01A         	call	_I2C_2_Master_Read
  8630   0033B6  6E07               	movwf	??_color_read_Red^0,c
  8631   0033B8  5007               	movf	??_color_read_Red^0,w,c
  8632   0033BA  6E0A               	movwf	color_read_Red@tmp^0,c
  8633   0033BC  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  8634                           
  8635                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8636   0033BE  0E00               	movlw	0
  8637   0033C0  ECAE  F01A         	call	_I2C_2_Master_Read
  8638   0033C4  6E07               	movwf	??_color_read_Red^0,c
  8639   0033C6  5007               	movf	??_color_read_Red^0,w,c
  8640   0033C8  6E09               	movwf	(??_color_read_Red+2)^0,c
  8641   0033CA  6A08               	clrf	(??_color_read_Red+1)^0,c
  8642   0033CC  500A               	movf	color_read_Red@tmp^0,w,c
  8643   0033CE  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  8644   0033D0  6E0A               	movwf	color_read_Red@tmp^0,c
  8645   0033D2  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  8646   0033D4  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  8647   0033D6  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  8648                           
  8649                           ;color.c: 50:  I2C_2_Master_Stop();
  8650   0033D8  ECD3  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8651   0033DC                     
  8652                           ;color.c: 51:  return tmp;
  8653   0033DC  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  8654   0033E0  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8655   0033E4  0012               	return		;funcret
  8656   0033E6                     __end_of_color_read_Red:
  8657                           	callstack 0
  8658                           
  8659 ;; *************** function _color_read_Green *****************
  8660 ;; Defined at:
  8661 ;;		line 58 in file "color.c"
  8662 ;; Parameters:    Size  Location     Type
  8663 ;;		None
  8664 ;; Auto vars:     Size  Location     Type
  8665 ;;  tmp             2    9[COMRAM] unsigned int 
  8666 ;; Return value:  Size  Location     Type
  8667 ;;                  2    4[COMRAM] unsigned int 
  8668 ;; Registers used:
  8669 ;;		wreg, status,2, status,0, cstack
  8670 ;; Tracked objects:
  8671 ;;		On entry : 0/0
  8672 ;;		On exit  : 0/0
  8673 ;;		Unchanged: 0/0
  8674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8677 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8678 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8679 ;;Total ram usage:        7 bytes
  8680 ;; Hardware stack levels used: 1
  8681 ;; Hardware stack levels required when called: 3
  8682 ;; This function calls:
  8683 ;;		_I2C_2_Master_Read
  8684 ;;		_I2C_2_Master_RepStart
  8685 ;;		_I2C_2_Master_Start
  8686 ;;		_I2C_2_Master_Stop
  8687 ;;		_I2C_2_Master_Write
  8688 ;; This function is called by:
  8689 ;;		_getRGBCval
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           	psect	text51
  8694   0033E6                     __ptext51:
  8695                           	callstack 0
  8696   0033E6                     _color_read_Green:
  8697                           	callstack 24
  8698   0033E6                     
  8699                           ;color.c: 60:     unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  8700   0033E6  ECD8  F01C         	call	_I2C_2_Master_Start	;wreg free
  8701                           
  8702                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  8703   0033EA  0E52               	movlw	82
  8704   0033EC  ECBC  F01C         	call	_I2C_2_Master_Write
  8705                           
  8706                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x18);
  8707   0033F0  0EB8               	movlw	184
  8708   0033F2  ECBC  F01C         	call	_I2C_2_Master_Write
  8709                           
  8710                           ;color.c: 64:  I2C_2_Master_RepStart();
  8711   0033F6  ECCE  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8712                           
  8713                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  8714   0033FA  0E53               	movlw	83
  8715   0033FC  ECBC  F01C         	call	_I2C_2_Master_Write
  8716                           
  8717                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  8718   003400  0E01               	movlw	1
  8719   003402  ECAE  F01A         	call	_I2C_2_Master_Read
  8720   003406  6E07               	movwf	??_color_read_Green^0,c
  8721   003408  5007               	movf	??_color_read_Green^0,w,c
  8722   00340A  6E0A               	movwf	color_read_Green@tmp^0,c
  8723   00340C  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  8724                           
  8725                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8726   00340E  0E00               	movlw	0
  8727   003410  ECAE  F01A         	call	_I2C_2_Master_Read
  8728   003414  6E07               	movwf	??_color_read_Green^0,c
  8729   003416  5007               	movf	??_color_read_Green^0,w,c
  8730   003418  6E09               	movwf	(??_color_read_Green+2)^0,c
  8731   00341A  6A08               	clrf	(??_color_read_Green+1)^0,c
  8732   00341C  500A               	movf	color_read_Green@tmp^0,w,c
  8733   00341E  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  8734   003420  6E0A               	movwf	color_read_Green@tmp^0,c
  8735   003422  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  8736   003424  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  8737   003426  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  8738                           
  8739                           ;color.c: 68:  I2C_2_Master_Stop();
  8740   003428  ECD3  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8741   00342C                     
  8742                           ;color.c: 69:  return tmp;
  8743   00342C  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  8744   003430  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8745   003434  0012               	return		;funcret
  8746   003436                     __end_of_color_read_Green:
  8747                           	callstack 0
  8748                           
  8749 ;; *************** function _color_read_Clear *****************
  8750 ;; Defined at:
  8751 ;;		line 94 in file "color.c"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;		None
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;  tmp             2    9[COMRAM] unsigned int 
  8756 ;; Return value:  Size  Location     Type
  8757 ;;                  2    4[COMRAM] unsigned int 
  8758 ;; Registers used:
  8759 ;;		wreg, status,2, status,0, cstack
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8767 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8768 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8769 ;;Total ram usage:        7 bytes
  8770 ;; Hardware stack levels used: 1
  8771 ;; Hardware stack levels required when called: 3
  8772 ;; This function calls:
  8773 ;;		_I2C_2_Master_Read
  8774 ;;		_I2C_2_Master_RepStart
  8775 ;;		_I2C_2_Master_Start
  8776 ;;		_I2C_2_Master_Stop
  8777 ;;		_I2C_2_Master_Write
  8778 ;; This function is called by:
  8779 ;;		_getRGBCval
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           	psect	text52
  8784   003436                     __ptext52:
  8785                           	callstack 0
  8786   003436                     _color_read_Clear:
  8787                           	callstack 24
  8788   003436                     
  8789                           ;color.c: 96:     unsigned int tmp;;color.c: 97:  I2C_2_Master_Start();
  8790   003436  ECD8  F01C         	call	_I2C_2_Master_Start	;wreg free
  8791                           
  8792                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
  8793   00343A  0E52               	movlw	82
  8794   00343C  ECBC  F01C         	call	_I2C_2_Master_Write
  8795                           
  8796                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  8797   003440  0EB4               	movlw	180
  8798   003442  ECBC  F01C         	call	_I2C_2_Master_Write
  8799                           
  8800                           ;color.c: 100:  I2C_2_Master_RepStart();
  8801   003446  ECCE  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8802                           
  8803                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  8804   00344A  0E53               	movlw	83
  8805   00344C  ECBC  F01C         	call	_I2C_2_Master_Write
  8806                           
  8807                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  8808   003450  0E01               	movlw	1
  8809   003452  ECAE  F01A         	call	_I2C_2_Master_Read
  8810   003456  6E07               	movwf	??_color_read_Clear^0,c
  8811   003458  5007               	movf	??_color_read_Clear^0,w,c
  8812   00345A  6E0A               	movwf	color_read_Clear@tmp^0,c
  8813   00345C  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  8814                           
  8815                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8816   00345E  0E00               	movlw	0
  8817   003460  ECAE  F01A         	call	_I2C_2_Master_Read
  8818   003464  6E07               	movwf	??_color_read_Clear^0,c
  8819   003466  5007               	movf	??_color_read_Clear^0,w,c
  8820   003468  6E09               	movwf	(??_color_read_Clear+2)^0,c
  8821   00346A  6A08               	clrf	(??_color_read_Clear+1)^0,c
  8822   00346C  500A               	movf	color_read_Clear@tmp^0,w,c
  8823   00346E  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  8824   003470  6E0A               	movwf	color_read_Clear@tmp^0,c
  8825   003472  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  8826   003474  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  8827   003476  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  8828                           
  8829                           ;color.c: 104:  I2C_2_Master_Stop();
  8830   003478  ECD3  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8831   00347C                     
  8832                           ;color.c: 105:  return tmp;
  8833   00347C  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  8834   003480  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8835   003484  0012               	return		;funcret
  8836   003486                     __end_of_color_read_Clear:
  8837                           	callstack 0
  8838                           
  8839 ;; *************** function _color_read_Blue *****************
  8840 ;; Defined at:
  8841 ;;		line 76 in file "color.c"
  8842 ;; Parameters:    Size  Location     Type
  8843 ;;		None
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  tmp             2    9[COMRAM] unsigned int 
  8846 ;; Return value:  Size  Location     Type
  8847 ;;                  2    4[COMRAM] unsigned int 
  8848 ;; Registers used:
  8849 ;;		wreg, status,2, status,0, cstack
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8855 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8856 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8857 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8858 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8859 ;;Total ram usage:        7 bytes
  8860 ;; Hardware stack levels used: 1
  8861 ;; Hardware stack levels required when called: 3
  8862 ;; This function calls:
  8863 ;;		_I2C_2_Master_Read
  8864 ;;		_I2C_2_Master_RepStart
  8865 ;;		_I2C_2_Master_Start
  8866 ;;		_I2C_2_Master_Stop
  8867 ;;		_I2C_2_Master_Write
  8868 ;; This function is called by:
  8869 ;;		_getRGBCval
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           	psect	text53
  8874   003486                     __ptext53:
  8875                           	callstack 0
  8876   003486                     _color_read_Blue:
  8877                           	callstack 24
  8878   003486                     
  8879                           ;color.c: 78:     unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  8880   003486  ECD8  F01C         	call	_I2C_2_Master_Start	;wreg free
  8881                           
  8882                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  8883   00348A  0E52               	movlw	82
  8884   00348C  ECBC  F01C         	call	_I2C_2_Master_Write
  8885                           
  8886                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x1A);
  8887   003490  0EBA               	movlw	186
  8888   003492  ECBC  F01C         	call	_I2C_2_Master_Write
  8889                           
  8890                           ;color.c: 82:  I2C_2_Master_RepStart();
  8891   003496  ECCE  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8892                           
  8893                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  8894   00349A  0E53               	movlw	83
  8895   00349C  ECBC  F01C         	call	_I2C_2_Master_Write
  8896                           
  8897                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  8898   0034A0  0E01               	movlw	1
  8899   0034A2  ECAE  F01A         	call	_I2C_2_Master_Read
  8900   0034A6  6E07               	movwf	??_color_read_Blue^0,c
  8901   0034A8  5007               	movf	??_color_read_Blue^0,w,c
  8902   0034AA  6E0A               	movwf	color_read_Blue@tmp^0,c
  8903   0034AC  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  8904                           
  8905                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8906   0034AE  0E00               	movlw	0
  8907   0034B0  ECAE  F01A         	call	_I2C_2_Master_Read
  8908   0034B4  6E07               	movwf	??_color_read_Blue^0,c
  8909   0034B6  5007               	movf	??_color_read_Blue^0,w,c
  8910   0034B8  6E09               	movwf	(??_color_read_Blue+2)^0,c
  8911   0034BA  6A08               	clrf	(??_color_read_Blue+1)^0,c
  8912   0034BC  500A               	movf	color_read_Blue@tmp^0,w,c
  8913   0034BE  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  8914   0034C0  6E0A               	movwf	color_read_Blue@tmp^0,c
  8915   0034C2  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  8916   0034C4  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  8917   0034C6  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  8918                           
  8919                           ;color.c: 86:  I2C_2_Master_Stop();
  8920   0034C8  ECD3  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8921   0034CC                     
  8922                           ;color.c: 87:  return tmp;
  8923   0034CC  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  8924   0034D0  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8925   0034D4  0012               	return		;funcret
  8926   0034D6                     __end_of_color_read_Blue:
  8927                           	callstack 0
  8928                           
  8929 ;; *************** function _I2C_2_Master_RepStart *****************
  8930 ;; Defined at:
  8931 ;;		line 33 in file "i2c.c"
  8932 ;; Parameters:    Size  Location     Type
  8933 ;;		None
  8934 ;; Auto vars:     Size  Location     Type
  8935 ;;		None
  8936 ;; Return value:  Size  Location     Type
  8937 ;;                  1    wreg      void 
  8938 ;; Registers used:
  8939 ;;		wreg, status,2, status,0, cstack
  8940 ;; Tracked objects:
  8941 ;;		On entry : 0/0
  8942 ;;		On exit  : 0/0
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8949 ;;Total ram usage:        0 bytes
  8950 ;; Hardware stack levels used: 1
  8951 ;; Hardware stack levels required when called: 2
  8952 ;; This function calls:
  8953 ;;		_I2C_2_Master_Idle
  8954 ;; This function is called by:
  8955 ;;		_color_read_Red
  8956 ;;		_color_read_Green
  8957 ;;		_color_read_Blue
  8958 ;;		_color_read_Clear
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           	psect	text54
  8963   00399C                     __ptext54:
  8964                           	callstack 0
  8965   00399C                     _I2C_2_Master_RepStart:
  8966                           	callstack 24
  8967   00399C                     
  8968                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8969   00399C  ECF2  F01B         	call	_I2C_2_Master_Idle	;wreg free
  8970   0039A0                     
  8971                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8972   0039A0  010E               	movlb	14	; () banked
  8973   0039A2  83DA               	bsf	218,1,b	;volatile
  8974   0039A4                     
  8975                           ; BSR set to: 14
  8976   0039A4  0012               	return		;funcret
  8977   0039A6                     __end_of_I2C_2_Master_RepStart:
  8978                           	callstack 0
  8979                           
  8980 ;; *************** function _I2C_2_Master_Read *****************
  8981 ;; Defined at:
  8982 ;;		line 51 in file "i2c.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;  ack             1    wreg     unsigned char 
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;  ack             1    2[COMRAM] unsigned char 
  8987 ;;  tmp             1    3[COMRAM] unsigned char 
  8988 ;; Return value:  Size  Location     Type
  8989 ;;                  1    wreg      unsigned char 
  8990 ;; Registers used:
  8991 ;;		wreg, status,2, status,0, cstack
  8992 ;; Tracked objects:
  8993 ;;		On entry : 0/0
  8994 ;;		On exit  : 0/0
  8995 ;;		Unchanged: 0/0
  8996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9000 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9001 ;;Total ram usage:        3 bytes
  9002 ;; Hardware stack levels used: 1
  9003 ;; Hardware stack levels required when called: 2
  9004 ;; This function calls:
  9005 ;;		_I2C_2_Master_Idle
  9006 ;; This function is called by:
  9007 ;;		_color_read_Red
  9008 ;;		_color_read_Green
  9009 ;;		_color_read_Blue
  9010 ;;		_color_read_Clear
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           	psect	text55
  9015   00355C                     __ptext55:
  9016                           	callstack 0
  9017   00355C                     _I2C_2_Master_Read:
  9018                           	callstack 24
  9019                           
  9020                           ; BSR set to: 14
  9021                           ;incstack = 0
  9022                           ;I2C_2_Master_Read@ack stored from wreg
  9023   00355C  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  9024   00355E                     
  9025                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  9026   00355E  ECF2  F01B         	call	_I2C_2_Master_Idle	;wreg free
  9027   003562                     
  9028                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  9029   003562  010E               	movlb	14	; () banked
  9030   003564  87DA               	bsf	218,3,b	;volatile
  9031                           
  9032                           ;i2c.c: 56:   I2C_2_Master_Idle();
  9033   003566  ECF2  F01B         	call	_I2C_2_Master_Idle	;wreg free
  9034   00356A                     
  9035                           ;i2c.c: 57:   tmp = SSP2BUF;
  9036   00356A  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  9037                           
  9038                           ;i2c.c: 58:   I2C_2_Master_Idle();
  9039   00356E  ECF2  F01B         	call	_I2C_2_Master_Idle	;wreg free
  9040   003572                     
  9041                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  9042   003572  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  9043   003574  B4D8               	btfsc	status,2,c
  9044   003576  EFBF  F01A         	goto	u1781
  9045   00357A  EFC3  F01A         	goto	u1780
  9046   00357E                     u1781:
  9047   00357E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9048   003580  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  9049   003582  EFC4  F01A         	goto	u1798
  9050   003586                     u1780:
  9051   003586  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9052   003588                     u1798:
  9053   003588  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  9054   00358A  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  9055   00358C  010E               	movlb	14	; () banked
  9056   00358E  51DA               	movf	218,w,b	;volatile
  9057   003590  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9058   003592  0BDF               	andlw	-33
  9059   003594  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9060   003596  6FDA               	movwf	218,b	;volatile
  9061   003598                     
  9062                           ; BSR set to: 14
  9063                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  9064   003598  89DA               	bsf	218,4,b	;volatile
  9065   00359A                     
  9066                           ; BSR set to: 14
  9067                           ;i2c.c: 61:   return tmp;
  9068   00359A  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  9069   00359C                     
  9070                           ; BSR set to: 14
  9071   00359C  0012               	return		;funcret
  9072   00359E                     __end_of_I2C_2_Master_Read:
  9073                           	callstack 0
  9074                           
  9075 ;; *************** function ___lldiv *****************
  9076 ;; Defined at:
  9077 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  9078 ;; Parameters:    Size  Location     Type
  9079 ;;  dividend        4    0[COMRAM] unsigned long 
  9080 ;;  divisor         4    4[COMRAM] unsigned long 
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;  quotient        4    8[COMRAM] unsigned long 
  9083 ;;  counter         1   12[COMRAM] unsigned char 
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  4    0[COMRAM] unsigned long 
  9086 ;; Registers used:
  9087 ;;		wreg, status,2, status,0
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9093 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9094 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9096 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9097 ;;Total ram usage:       13 bytes
  9098 ;; Hardware stack levels used: 1
  9099 ;; Hardware stack levels required when called: 1
  9100 ;; This function calls:
  9101 ;;		Nothing
  9102 ;; This function is called by:
  9103 ;;		_average_RGBC
  9104 ;;		_convert_HSV
  9105 ;; This function uses a non-reentrant model
  9106 ;;
  9107                           
  9108                           	psect	text56
  9109   002BA0                     __ptext56:
  9110                           	callstack 0
  9111   002BA0                     ___lldiv:
  9112                           	callstack 27
  9113   002BA0  0E00               	movlw	0
  9114   002BA2  6E09               	movwf	___lldiv@quotient^0,c
  9115   002BA4  0E00               	movlw	0
  9116   002BA6  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  9117   002BA8  0E00               	movlw	0
  9118   002BAA  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  9119   002BAC  0E00               	movlw	0
  9120   002BAE  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  9121   002BB0  5005               	movf	___lldiv@divisor^0,w,c
  9122   002BB2  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  9123   002BB4  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  9124   002BB6  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  9125   002BB8  B4D8               	btfsc	status,2,c
  9126   002BBA  EFE1  F015         	goto	u2021
  9127   002BBE  EFE3  F015         	goto	u2020
  9128   002BC2                     u2021:
  9129   002BC2  EF19  F016         	goto	l773
  9130   002BC6                     u2020:
  9131   002BC6  0E01               	movlw	1
  9132   002BC8  6E0D               	movwf	___lldiv@counter^0,c
  9133   002BCA  EFED  F015         	goto	l3224
  9134   002BCE                     l3222:
  9135   002BCE  90D8               	bcf	status,0,c
  9136   002BD0  3605               	rlcf	___lldiv@divisor^0,f,c
  9137   002BD2  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  9138   002BD4  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  9139   002BD6  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  9140   002BD8  2A0D               	incf	___lldiv@counter^0,f,c
  9141   002BDA                     l3224:
  9142   002BDA  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  9143   002BDC  EFF2  F015         	goto	u2031
  9144   002BE0  EFF4  F015         	goto	u2030
  9145   002BE4                     u2031:
  9146   002BE4  EFE7  F015         	goto	l3222
  9147   002BE8                     u2030:
  9148   002BE8                     l3226:
  9149   002BE8  90D8               	bcf	status,0,c
  9150   002BEA  3609               	rlcf	___lldiv@quotient^0,f,c
  9151   002BEC  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  9152   002BEE  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  9153   002BF0  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  9154   002BF2  5005               	movf	___lldiv@divisor^0,w,c
  9155   002BF4  5C01               	subwf	___lldiv@dividend^0,w,c
  9156   002BF6  5006               	movf	(___lldiv@divisor+1)^0,w,c
  9157   002BF8  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  9158   002BFA  5007               	movf	(___lldiv@divisor+2)^0,w,c
  9159   002BFC  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  9160   002BFE  5008               	movf	(___lldiv@divisor+3)^0,w,c
  9161   002C00  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  9162   002C02  A0D8               	btfss	status,0,c
  9163   002C04  EF06  F016         	goto	u2041
  9164   002C08  EF08  F016         	goto	u2040
  9165   002C0C                     u2041:
  9166   002C0C  EF11  F016         	goto	l3234
  9167   002C10                     u2040:
  9168   002C10  5005               	movf	___lldiv@divisor^0,w,c
  9169   002C12  5E01               	subwf	___lldiv@dividend^0,f,c
  9170   002C14  5006               	movf	(___lldiv@divisor+1)^0,w,c
  9171   002C16  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  9172   002C18  5007               	movf	(___lldiv@divisor+2)^0,w,c
  9173   002C1A  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  9174   002C1C  5008               	movf	(___lldiv@divisor+3)^0,w,c
  9175   002C1E  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  9176   002C20  8009               	bsf	___lldiv@quotient^0,0,c
  9177   002C22                     l3234:
  9178   002C22  90D8               	bcf	status,0,c
  9179   002C24  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  9180   002C26  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  9181   002C28  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  9182   002C2A  3205               	rrcf	___lldiv@divisor^0,f,c
  9183   002C2C  2E0D               	decfsz	___lldiv@counter^0,f,c
  9184   002C2E  EFF4  F015         	goto	l3226
  9185   002C32                     l773:
  9186   002C32  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9187   002C36  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9188   002C3A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9189   002C3E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9190   002C42  0012               	return		;funcret
  9191   002C44                     __end_of___lldiv:
  9192                           	callstack 0
  9193                           
  9194 ;; *************** function _color_click_init *****************
  9195 ;; Defined at:
  9196 ;;		line 7 in file "color.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;		None
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;		None
  9201 ;; Return value:  Size  Location     Type
  9202 ;;                  1    wreg      void 
  9203 ;; Registers used:
  9204 ;;		wreg, status,2, status,0, cstack
  9205 ;; Tracked objects:
  9206 ;;		On entry : 0/0
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9213 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9214 ;;Total ram usage:        1 bytes
  9215 ;; Hardware stack levels used: 1
  9216 ;; Hardware stack levels required when called: 4
  9217 ;; This function calls:
  9218 ;;		_I2C_2_Master_Init
  9219 ;;		_color_writetoaddr
  9220 ;; This function is called by:
  9221 ;;		_main
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           	psect	text57
  9226   00372E                     __ptext57:
  9227                           	callstack 0
  9228   00372E                     _color_click_init:
  9229                           	callstack 26
  9230   00372E                     
  9231                           ;color.c: 10:     I2C_2_Master_Init();
  9232   00372E  ECDD  F01B         	call	_I2C_2_Master_Init	;wreg free
  9233   003732                     
  9234                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  9235   003732  0E01               	movlw	1
  9236   003734  6E03               	movwf	color_writetoaddr@value^0,c
  9237   003736  0E00               	movlw	0
  9238   003738  EC84  F01C         	call	_color_writetoaddr
  9239   00373C                     
  9240                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  9241   00373C  0E3F               	movlw	63
  9242   00373E  6E05               	movwf	??_color_click_init^0,c
  9243   003740  0E55               	movlw	85
  9244   003742                     u3377:
  9245   003742  2EE8               	decfsz	wreg,f,c
  9246   003744  D7FE               	bra	u3377
  9247   003746  2E05               	decfsz	??_color_click_init^0,f,c
  9248   003748  D7FC               	bra	u3377
  9249   00374A  0000               	nop	
  9250   00374C                     
  9251                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  9252   00374C  0E03               	movlw	3
  9253   00374E  6E03               	movwf	color_writetoaddr@value^0,c
  9254   003750  0E00               	movlw	0
  9255   003752  EC84  F01C         	call	_color_writetoaddr
  9256   003756                     
  9257                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  9258   003756  0ED5               	movlw	213
  9259   003758  6E03               	movwf	color_writetoaddr@value^0,c
  9260   00375A  0E01               	movlw	1
  9261   00375C  EC84  F01C         	call	_color_writetoaddr
  9262   003760  0012               	return		;funcret
  9263   003762                     __end_of_color_click_init:
  9264                           	callstack 0
  9265                           
  9266 ;; *************** function _color_writetoaddr *****************
  9267 ;; Defined at:
  9268 ;;		line 28 in file "color.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;  address         1    wreg     unsigned char 
  9271 ;;  value           1    2[COMRAM] unsigned char 
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;  address         1    3[COMRAM] unsigned char 
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  1    wreg      void 
  9276 ;; Registers used:
  9277 ;;		wreg, status,2, status,0, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9283 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9284 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9286 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9287 ;;Total ram usage:        2 bytes
  9288 ;; Hardware stack levels used: 1
  9289 ;; Hardware stack levels required when called: 3
  9290 ;; This function calls:
  9291 ;;		_I2C_2_Master_Start
  9292 ;;		_I2C_2_Master_Stop
  9293 ;;		_I2C_2_Master_Write
  9294 ;; This function is called by:
  9295 ;;		_color_click_init
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           	psect	text58
  9300   003908                     __ptext58:
  9301                           	callstack 0
  9302   003908                     _color_writetoaddr:
  9303                           	callstack 26
  9304                           
  9305                           ;incstack = 0
  9306                           ;color_writetoaddr@address stored from wreg
  9307   003908  6E04               	movwf	color_writetoaddr@address^0,c
  9308   00390A                     
  9309                           ;color.c: 29:     I2C_2_Master_Start();
  9310   00390A  ECD8  F01C         	call	_I2C_2_Master_Start	;wreg free
  9311                           
  9312                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  9313   00390E  0E52               	movlw	82
  9314   003910  ECBC  F01C         	call	_I2C_2_Master_Write
  9315                           
  9316                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  9317   003914  5004               	movf	color_writetoaddr@address^0,w,c
  9318   003916  0980               	iorlw	128
  9319   003918  ECBC  F01C         	call	_I2C_2_Master_Write
  9320                           
  9321                           ;color.c: 32:     I2C_2_Master_Write(value);
  9322   00391C  5003               	movf	color_writetoaddr@value^0,w,c
  9323   00391E  ECBC  F01C         	call	_I2C_2_Master_Write
  9324                           
  9325                           ;color.c: 33:     I2C_2_Master_Stop();
  9326   003922  ECD3  F01C         	call	_I2C_2_Master_Stop	;wreg free
  9327   003926  0012               	return		;funcret
  9328   003928                     __end_of_color_writetoaddr:
  9329                           	callstack 0
  9330                           
  9331 ;; *************** function _I2C_2_Master_Write *****************
  9332 ;; Defined at:
  9333 ;;		line 45 in file "i2c.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  data_byte       1    wreg     unsigned char 
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;  data_byte       1    1[COMRAM] unsigned char 
  9338 ;; Return value:  Size  Location     Type
  9339 ;;                  1    wreg      void 
  9340 ;; Registers used:
  9341 ;;		wreg, status,2, status,0, cstack
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9350 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9351 ;;Total ram usage:        1 bytes
  9352 ;; Hardware stack levels used: 1
  9353 ;; Hardware stack levels required when called: 2
  9354 ;; This function calls:
  9355 ;;		_I2C_2_Master_Idle
  9356 ;; This function is called by:
  9357 ;;		_color_writetoaddr
  9358 ;;		_color_read_Red
  9359 ;;		_color_read_Green
  9360 ;;		_color_read_Blue
  9361 ;;		_color_read_Clear
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           
  9365                           	psect	text59
  9366   003978                     __ptext59:
  9367                           	callstack 0
  9368   003978                     _I2C_2_Master_Write:
  9369                           	callstack 24
  9370                           
  9371                           ;incstack = 0
  9372                           ;I2C_2_Master_Write@data_byte stored from wreg
  9373   003978  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  9374   00397A                     
  9375                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  9376   00397A  ECF2  F01B         	call	_I2C_2_Master_Idle	;wreg free
  9377   00397E                     
  9378                           ;i2c.c: 48:   SSP2BUF = data_byte;
  9379   00397E  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  9380   003982  0012               	return		;funcret
  9381   003984                     __end_of_I2C_2_Master_Write:
  9382                           	callstack 0
  9383                           
  9384 ;; *************** function _I2C_2_Master_Stop *****************
  9385 ;; Defined at:
  9386 ;;		line 39 in file "i2c.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;		None
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;		None
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  1    wreg      void 
  9393 ;; Registers used:
  9394 ;;		wreg, status,2, status,0, cstack
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9404 ;;Total ram usage:        0 bytes
  9405 ;; Hardware stack levels used: 1
  9406 ;; Hardware stack levels required when called: 2
  9407 ;; This function calls:
  9408 ;;		_I2C_2_Master_Idle
  9409 ;; This function is called by:
  9410 ;;		_color_writetoaddr
  9411 ;;		_color_read_Red
  9412 ;;		_color_read_Green
  9413 ;;		_color_read_Blue
  9414 ;;		_color_read_Clear
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           	psect	text60
  9419   0039A6                     __ptext60:
  9420                           	callstack 0
  9421   0039A6                     _I2C_2_Master_Stop:
  9422                           	callstack 24
  9423   0039A6                     
  9424                           ;i2c.c: 41:   I2C_2_Master_Idle();
  9425   0039A6  ECF2  F01B         	call	_I2C_2_Master_Idle	;wreg free
  9426   0039AA                     
  9427                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  9428   0039AA  010E               	movlb	14	; () banked
  9429   0039AC  85DA               	bsf	218,2,b	;volatile
  9430   0039AE                     
  9431                           ; BSR set to: 14
  9432   0039AE  0012               	return		;funcret
  9433   0039B0                     __end_of_I2C_2_Master_Stop:
  9434                           	callstack 0
  9435                           
  9436 ;; *************** function _I2C_2_Master_Start *****************
  9437 ;; Defined at:
  9438 ;;		line 27 in file "i2c.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;		None
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;		None
  9443 ;; Return value:  Size  Location     Type
  9444 ;;                  1    wreg      void 
  9445 ;; Registers used:
  9446 ;;		wreg, status,2, status,0, cstack
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9456 ;;Total ram usage:        0 bytes
  9457 ;; Hardware stack levels used: 1
  9458 ;; Hardware stack levels required when called: 2
  9459 ;; This function calls:
  9460 ;;		_I2C_2_Master_Idle
  9461 ;; This function is called by:
  9462 ;;		_color_writetoaddr
  9463 ;;		_color_read_Red
  9464 ;;		_color_read_Green
  9465 ;;		_color_read_Blue
  9466 ;;		_color_read_Clear
  9467 ;; This function uses a non-reentrant model
  9468 ;;
  9469                           
  9470                           	psect	text61
  9471   0039B0                     __ptext61:
  9472                           	callstack 0
  9473   0039B0                     _I2C_2_Master_Start:
  9474                           	callstack 24
  9475   0039B0                     
  9476                           ;i2c.c: 29:   I2C_2_Master_Idle();
  9477   0039B0  ECF2  F01B         	call	_I2C_2_Master_Idle	;wreg free
  9478   0039B4                     
  9479                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  9480   0039B4  010E               	movlb	14	; () banked
  9481   0039B6  81DA               	bsf	218,0,b	;volatile
  9482   0039B8                     
  9483                           ; BSR set to: 14
  9484   0039B8  0012               	return		;funcret
  9485   0039BA                     __end_of_I2C_2_Master_Start:
  9486                           	callstack 0
  9487                           
  9488 ;; *************** function _I2C_2_Master_Idle *****************
  9489 ;; Defined at:
  9490 ;;		line 22 in file "i2c.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;		None
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;		None
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  1    wreg      void 
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, status,0
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9506 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9507 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9508 ;;Total ram usage:        1 bytes
  9509 ;; Hardware stack levels used: 1
  9510 ;; Hardware stack levels required when called: 1
  9511 ;; This function calls:
  9512 ;;		Nothing
  9513 ;; This function is called by:
  9514 ;;		_I2C_2_Master_Start
  9515 ;;		_I2C_2_Master_RepStart
  9516 ;;		_I2C_2_Master_Stop
  9517 ;;		_I2C_2_Master_Write
  9518 ;;		_I2C_2_Master_Read
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           	psect	text62
  9523   0037E4                     __ptext62:
  9524                           	callstack 0
  9525   0037E4                     _I2C_2_Master_Idle:
  9526                           	callstack 24
  9527   0037E4                     l320:
  9528   0037E4  010E               	movlb	14	; () banked
  9529   0037E6  B5D8               	btfsc	216,2,b	;volatile
  9530   0037E8  EFF8  F01B         	goto	u1701
  9531   0037EC  EFFA  F01B         	goto	u1700
  9532   0037F0                     u1701:
  9533   0037F0  EFF2  F01B         	goto	l320
  9534   0037F4                     u1700:
  9535   0037F4                     
  9536                           ; BSR set to: 14
  9537   0037F4  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9538   0037F8  0E1F               	movlw	31
  9539   0037FA  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  9540   0037FC  A4D8               	btfss	status,2,c
  9541   0037FE  EF03  F01C         	goto	u1711
  9542   003802  EF05  F01C         	goto	u1710
  9543   003806                     u1711:
  9544   003806  EFF2  F01B         	goto	l320
  9545   00380A                     u1710:
  9546   00380A                     
  9547                           ; BSR set to: 14
  9548   00380A  0012               	return		;funcret
  9549   00380C                     __end_of_I2C_2_Master_Idle:
  9550                           	callstack 0
  9551                           
  9552 ;; *************** function _I2C_2_Master_Init *****************
  9553 ;; Defined at:
  9554 ;;		line 4 in file "i2c.c"
  9555 ;; Parameters:    Size  Location     Type
  9556 ;;		None
  9557 ;; Auto vars:     Size  Location     Type
  9558 ;;		None
  9559 ;; Return value:  Size  Location     Type
  9560 ;;                  1    wreg      void 
  9561 ;; Registers used:
  9562 ;;		wreg, status,2
  9563 ;; Tracked objects:
  9564 ;;		On entry : 0/0
  9565 ;;		On exit  : 0/0
  9566 ;;		Unchanged: 0/0
  9567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9572 ;;Total ram usage:        0 bytes
  9573 ;; Hardware stack levels used: 1
  9574 ;; Hardware stack levels required when called: 1
  9575 ;; This function calls:
  9576 ;;		Nothing
  9577 ;; This function is called by:
  9578 ;;		_color_click_init
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           	psect	text63
  9583   0037BA                     __ptext63:
  9584                           	callstack 0
  9585   0037BA                     _I2C_2_Master_Init:
  9586                           	callstack 28
  9587   0037BA                     
  9588                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9589   0037BA  010E               	movlb	14	; () banked
  9590   0037BC  51D9               	movf	217,w,b	;volatile
  9591   0037BE  0BF0               	andlw	-16
  9592   0037C0  0908               	iorlw	8
  9593   0037C2  6FD9               	movwf	217,b	;volatile
  9594   0037C4                     
  9595                           ; BSR set to: 14
  9596                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9597   0037C4  8BD9               	bsf	217,5,b	;volatile
  9598                           
  9599                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9600   0037C6  0E9F               	movlw	159
  9601   0037C8  6FD6               	movwf	214,b	;volatile
  9602   0037CA                     
  9603                           ; BSR set to: 14
  9604                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9605   0037CA  8A84               	bsf	132,5,c	;volatile
  9606   0037CC                     
  9607                           ; BSR set to: 14
  9608                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9609   0037CC  8C84               	bsf	132,6,c	;volatile
  9610   0037CE                     
  9611                           ; BSR set to: 14
  9612                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9613   0037CE  9BA7               	bcf	167,5,b	;volatile
  9614   0037D0                     
  9615                           ; BSR set to: 14
  9616                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9617   0037D0  9DA7               	bcf	167,6,b	;volatile
  9618                           
  9619                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9620   0037D2  0E1D               	movlw	29
  9621   0037D4  6F1D               	movwf	29,b	;volatile
  9622                           
  9623                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9624   0037D6  0E1E               	movlw	30
  9625   0037D8  6F1C               	movwf	28,b	;volatile
  9626                           
  9627                           ;i2c.c: 18:   RD5PPS=0x1C;
  9628   0037DA  0E1C               	movlw	28
  9629   0037DC  6F6F               	movwf	111,b	;volatile
  9630                           
  9631                           ;i2c.c: 19:   RD6PPS=0x1B;
  9632   0037DE  0E1B               	movlw	27
  9633   0037E0  6F70               	movwf	112,b	;volatile
  9634   0037E2                     
  9635                           ; BSR set to: 14
  9636   0037E2  0012               	return		;funcret
  9637   0037E4                     __end_of_I2C_2_Master_Init:
  9638                           	callstack 0
  9639                           
  9640 ;; *************** function _buggy_lights_init *****************
  9641 ;; Defined at:
  9642 ;;		line 7 in file "buggy_lights.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;		None
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;		None
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  1    wreg      void 
  9649 ;; Registers used:
  9650 ;;		None
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9660 ;;Total ram usage:        0 bytes
  9661 ;; Hardware stack levels used: 1
  9662 ;; Hardware stack levels required when called: 1
  9663 ;; This function calls:
  9664 ;;		Nothing
  9665 ;; This function is called by:
  9666 ;;		_main
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           	psect	text64
  9671   003762                     __ptext64:
  9672                           	callstack 0
  9673   003762                     _buggy_lights_init:
  9674                           	callstack 29
  9675   003762                     
  9676                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
  9677   003762  9884               	bcf	132,4,c	;volatile
  9678                           
  9679                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
  9680   003764  9288               	bcf	136,1,c	;volatile
  9681                           
  9682                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
  9683   003766  9684               	bcf	132,3,c	;volatile
  9684                           
  9685                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
  9686   003768  9086               	bcf	134,0,c	;volatile
  9687                           
  9688                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
  9689   00376A  9088               	bcf	136,0,c	;volatile
  9690                           
  9691                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
  9692   00376C  987C               	bcf	124,4,c	;volatile
  9693                           
  9694                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
  9695   00376E  9280               	bcf	128,1,c	;volatile
  9696                           
  9697                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
  9698   003770  967C               	bcf	124,3,c	;volatile
  9699                           
  9700                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
  9701   003772  907E               	bcf	126,0,c	;volatile
  9702                           
  9703                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
  9704   003774  9080               	bcf	128,0,c	;volatile
  9705                           
  9706                           ;buggy_lights.c: 26:             TRISGbits.TRISG1 = 0;
  9707   003776  9287               	bcf	135,1,c	;volatile
  9708                           
  9709                           ;buggy_lights.c: 27:             TRISAbits.TRISA4 = 0;
  9710   003778  9881               	bcf	129,4,c	;volatile
  9711                           
  9712                           ;buggy_lights.c: 28:             TRISFbits.TRISF7 = 0;
  9713   00377A  9E86               	bcf	134,7,c	;volatile
  9714                           
  9715                           ;buggy_lights.c: 30:             LATGbits.LATG1 = 0;
  9716   00377C  927F               	bcf	127,1,c	;volatile
  9717                           
  9718                           ;buggy_lights.c: 31:             LATAbits.LATA4 = 0;
  9719   00377E  9879               	bcf	121,4,c	;volatile
  9720                           
  9721                           ;buggy_lights.c: 32:             LATFbits.LATF7 = 0;
  9722   003780  9E7E               	bcf	126,7,c	;volatile
  9723                           
  9724                           ;buggy_lights.c: 36:             TRISGbits.TRISG0 = 0;
  9725   003782  9087               	bcf	135,0,c	;volatile
  9726                           
  9727                           ;buggy_lights.c: 37:             TRISEbits.TRISE7 = 0;
  9728   003784  9E85               	bcf	133,7,c	;volatile
  9729                           
  9730                           ;buggy_lights.c: 38:             TRISAbits.TRISA3 = 0;
  9731   003786  9681               	bcf	129,3,c	;volatile
  9732                           
  9733                           ;buggy_lights.c: 40:             LATGbits.LATG0 = 0;
  9734   003788  907F               	bcf	127,0,c	;volatile
  9735                           
  9736                           ;buggy_lights.c: 41:             LATEbits.LATE7 = 0;
  9737   00378A  9E7D               	bcf	125,7,c	;volatile
  9738                           
  9739                           ;buggy_lights.c: 42:             LATAbits.LATA3 = 0;
  9740   00378C  9679               	bcf	121,3,c	;volatile
  9741   00378E  0012               	return		;funcret
  9742   003790                     __end_of_buggy_lights_init:
  9743                           	callstack 0
  9744                           
  9745 ;; *************** function _Timer0_init *****************
  9746 ;; Defined at:
  9747 ;;		line 7 in file "timers.c"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;		None
  9750 ;; Auto vars:     Size  Location     Type
  9751 ;;		None
  9752 ;; Return value:  Size  Location     Type
  9753 ;;                  1    wreg      void 
  9754 ;; Registers used:
  9755 ;;		wreg, status,2, cstack
  9756 ;; Tracked objects:
  9757 ;;		On entry : 0/0
  9758 ;;		On exit  : 0/0
  9759 ;;		Unchanged: 0/0
  9760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9765 ;;Total ram usage:        0 bytes
  9766 ;; Hardware stack levels used: 1
  9767 ;; Hardware stack levels required when called: 3
  9768 ;; This function calls:
  9769 ;;		_reset_timer
  9770 ;;		_start_timer
  9771 ;; This function is called by:
  9772 ;;		_main
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           	psect	text65
  9777   00380C                     __ptext65:
  9778                           	callstack 0
  9779   00380C                     _Timer0_init:
  9780                           	callstack 27
  9781   00380C                     
  9782                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  9783   00380C  50D6               	movf	214,w,c	;volatile
  9784   00380E  0B1F               	andlw	-225
  9785   003810  0940               	iorlw	64
  9786   003812  6ED6               	movwf	214,c	;volatile
  9787   003814                     
  9788                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  9789   003814  88D6               	bsf	214,4,c	;volatile
  9790   003816                     
  9791                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  9792   003816  88D5               	bsf	213,4,c	;volatile
  9793                           
  9794                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  9795   003818  50D6               	movf	214,w,c	;volatile
  9796   00381A  0BF0               	andlw	-16
  9797   00381C  090E               	iorlw	14
  9798   00381E  6ED6               	movwf	214,c	;volatile
  9799   003820                     
  9800                           ;timers.c: 18:     reset_timer();
  9801   003820  ECC2  F01C         	call	_reset_timer	;wreg free
  9802   003824                     
  9803                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  9804   003824  8ED5               	bsf	213,7,c	;volatile
  9805                           
  9806                           ;timers.c: 21:     start_timer();
  9807   003826  ECDF  F01C         	call	_start_timer	;wreg free
  9808   00382A                     
  9809                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
  9810   00382A  010E               	movlb	14	; () banked
  9811   00382C  8B29               	bsf	41,5,b	;volatile
  9812   00382E                     
  9813                           ; BSR set to: 14
  9814                           ;timers.c: 23:     INTCONbits.PEIE = 1;
  9815   00382E  8CF2               	bsf	242,6,c	;volatile
  9816   003830                     
  9817                           ; BSR set to: 14
  9818                           ;timers.c: 24:     INTCONbits.GIE = 1;
  9819   003830  8EF2               	bsf	242,7,c	;volatile
  9820   003832                     
  9821                           ; BSR set to: 14
  9822   003832  0012               	return		;funcret
  9823   003834                     __end_of_Timer0_init:
  9824                           	callstack 0
  9825                           
  9826 ;; *************** function _start_timer *****************
  9827 ;; Defined at:
  9828 ;;		line 30 in file "timers.c"
  9829 ;; Parameters:    Size  Location     Type
  9830 ;;		None
  9831 ;; Auto vars:     Size  Location     Type
  9832 ;;		None
  9833 ;; Return value:  Size  Location     Type
  9834 ;;                  1    wreg      void 
  9835 ;; Registers used:
  9836 ;;		None
  9837 ;; Tracked objects:
  9838 ;;		On entry : 0/0
  9839 ;;		On exit  : 0/0
  9840 ;;		Unchanged: 0/0
  9841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9846 ;;Total ram usage:        0 bytes
  9847 ;; Hardware stack levels used: 1
  9848 ;; Hardware stack levels required when called: 1
  9849 ;; This function calls:
  9850 ;;		Nothing
  9851 ;; This function is called by:
  9852 ;;		_Timer0_init
  9853 ;;		_forward_navigation
  9854 ;;		_return_to_sender
  9855 ;; This function uses a non-reentrant model
  9856 ;;
  9857                           
  9858                           	psect	text66
  9859   0039BE                     __ptext66:
  9860                           	callstack 0
  9861   0039BE                     _start_timer:
  9862                           	callstack 28
  9863   0039BE                     
  9864                           ;timers.c: 32:     T0CON0bits.T0EN=1;
  9865   0039BE  8ED5               	bsf	213,7,c	;volatile
  9866   0039C0  0012               	return		;funcret
  9867   0039C2                     __end_of_start_timer:
  9868                           	callstack 0
  9869                           
  9870 ;; *************** function _reset_timer *****************
  9871 ;; Defined at:
  9872 ;;		line 70 in file "timers.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;		None
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;		None
  9877 ;; Return value:  Size  Location     Type
  9878 ;;                  1    wreg      void 
  9879 ;; Registers used:
  9880 ;;		wreg, status,2, cstack
  9881 ;; Tracked objects:
  9882 ;;		On entry : 0/0
  9883 ;;		On exit  : 0/0
  9884 ;;		Unchanged: 0/0
  9885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9890 ;;Total ram usage:        0 bytes
  9891 ;; Hardware stack levels used: 1
  9892 ;; Hardware stack levels required when called: 2
  9893 ;; This function calls:
  9894 ;;		_write_timer
  9895 ;; This function is called by:
  9896 ;;		_Timer0_init
  9897 ;;		_forward_navigation
  9898 ;; This function uses a non-reentrant model
  9899 ;;
  9900                           
  9901                           	psect	text67
  9902   003984                     __ptext67:
  9903                           	callstack 0
  9904   003984                     _reset_timer:
  9905                           	callstack 27
  9906   003984                     
  9907                           ;timers.c: 72:     write_timer(0, 0);
  9908   003984  0E00               	movlw	0
  9909   003986  6E01               	movwf	write_timer@tL^0,c
  9910   003988  0E00               	movlw	0
  9911   00398A  ECC8  F01C         	call	_write_timer
  9912   00398E  0012               	return		;funcret
  9913   003990                     __end_of_reset_timer:
  9914                           	callstack 0
  9915                           
  9916 ;; *************** function _write_timer *****************
  9917 ;; Defined at:
  9918 ;;		line 58 in file "timers.c"
  9919 ;; Parameters:    Size  Location     Type
  9920 ;;  tH              1    wreg     unsigned char 
  9921 ;;  tL              1    0[COMRAM] unsigned char 
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;  tH              1    1[COMRAM] unsigned char 
  9924 ;; Return value:  Size  Location     Type
  9925 ;;                  1    wreg      void 
  9926 ;; Registers used:
  9927 ;;		wreg
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9933 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9936 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9937 ;;Total ram usage:        2 bytes
  9938 ;; Hardware stack levels used: 1
  9939 ;; Hardware stack levels required when called: 1
  9940 ;; This function calls:
  9941 ;;		Nothing
  9942 ;; This function is called by:
  9943 ;;		_reset_timer
  9944 ;;		_return_to_sender
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           	psect	text68
  9949   003990                     __ptext68:
  9950                           	callstack 0
  9951   003990                     _write_timer:
  9952                           	callstack 28
  9953                           
  9954                           ;incstack = 0
  9955                           ;write_timer@tH stored from wreg
  9956   003990  6E02               	movwf	write_timer@tH^0,c
  9957   003992                     
  9958                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
  9959   003992  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  9960   003996                     
  9961                           ;timers.c: 64:     TMR0L = tL;
  9962   003996  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  9963   00399A  0012               	return		;funcret
  9964   00399C                     __end_of_write_timer:
  9965                           	callstack 0
  9966                           
  9967 ;; *************** function _ISR *****************
  9968 ;; Defined at:
  9969 ;;		line 212 in file "timers.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;		None
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;		None
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  1    wreg      void 
  9976 ;; Registers used:
  9977 ;;		wreg, status,2
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9987 ;;Total ram usage:        0 bytes
  9988 ;; Hardware stack levels used: 1
  9989 ;; This function calls:
  9990 ;;		Nothing
  9991 ;; This function is called by:
  9992 ;;		Interrupt level 2
  9993 ;; This function uses a non-reentrant model
  9994 ;;
  9995                           
  9996                           	psect	intcode
  9997   000008                     __pintcode:
  9998                           	callstack 0
  9999   000008                     _ISR:
 10000                           	callstack 23
 10001                           
 10002                           ;incstack = 0
 10003   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 10004   00000A                     
 10005                           ;timers.c: 214:     if (PIR0bits.TMR0IF) {
 10006   00000A  010E               	movlb	14	; () banked
 10007   00000C  AB33               	btfss	51,5,b	;volatile
 10008   00000E  EF0B  F000         	goto	i2u163_41
 10009   000012  EF0D  F000         	goto	i2u163_40
 10010   000016                     i2u163_41:
 10011   000016  EF1C  F000         	goto	i2l743
 10012   00001A                     i2u163_40:
 10013   00001A                     
 10014                           ; BSR set to: 14
 10015                           ;timers.c: 215:         if (returning) {
 10016   00001A  505D               	movf	_returning^0,w,c
 10017   00001C  B4D8               	btfsc	status,2,c
 10018   00001E  EF13  F000         	goto	i2u164_41
 10019   000022  EF15  F000         	goto	i2u164_40
 10020   000026                     i2u164_41:
 10021   000026  EF19  F000         	goto	i2l2646
 10022   00002A                     i2u164_40:
 10023   00002A                     
 10024                           ; BSR set to: 14
 10025                           ;timers.c: 216:             return_flag = 1;
 10026   00002A  0E01               	movlw	1
 10027   00002C  6E5C               	movwf	_return_flag^0,c
 10028                           
 10029                           ;timers.c: 217:         } else {
 10030   00002E  EF1B  F000         	goto	i2l2648
 10031   000032                     i2l2646:
 10032                           
 10033                           ; BSR set to: 14
 10034                           ;timers.c: 218:             lost_flag = 1;
 10035   000032  0E01               	movlw	1
 10036   000034  6E5B               	movwf	_lost_flag^0,c
 10037   000036                     i2l2648:
 10038                           
 10039                           ; BSR set to: 14
 10040                           ;timers.c: 220:         PIR0bits.TMR0IF = 0;
 10041   000036  9B33               	bcf	51,5,b	;volatile
 10042   000038                     i2l743:
 10043                           
 10044                           ; BSR set to: 14
 10045   000038  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 10046   00003A  0011               	retfie		f
 10047   00003C                     __end_of_ISR:
 10048                           	callstack 0
 10049                           
 10050                           	psect	rparam
 10051   000000                     
 10052                           	psect	temp
 10053   00005E                     btemp:
 10054                           	callstack 0
 10055   00005E                     	ds	1
 10056   000000                     int$flags	set	btemp
 10057   000000                     wtemp8	set	btemp+1
 10058   000000                     ttemp5	set	btemp+1
 10059   000000                     ttemp6	set	btemp+4
 10060   000000                     ttemp7	set	btemp+8
 10061                           
 10062                           	psect	idloc
 10063                           
 10064                           ;Config register IDLOC0 @ 0x200000
 10065                           ;	unspecified, using default values
 10066   200000                     	org	2097152
 10067   200000  FFFF               	dw	65535
 10068                           
 10069                           ;Config register IDLOC1 @ 0x200002
 10070                           ;	unspecified, using default values
 10071   200002                     	org	2097154
 10072   200002  FFFF               	dw	65535
 10073                           
 10074                           ;Config register IDLOC2 @ 0x200004
 10075                           ;	unspecified, using default values
 10076   200004                     	org	2097156
 10077   200004  FFFF               	dw	65535
 10078                           
 10079                           ;Config register IDLOC3 @ 0x200006
 10080                           ;	unspecified, using default values
 10081   200006                     	org	2097158
 10082   200006  FFFF               	dw	65535
 10083                           
 10084                           ;Config register IDLOC4 @ 0x200008
 10085                           ;	unspecified, using default values
 10086   200008                     	org	2097160
 10087   200008  FFFF               	dw	65535
 10088                           
 10089                           ;Config register IDLOC5 @ 0x20000A
 10090                           ;	unspecified, using default values
 10091   20000A                     	org	2097162
 10092   20000A  FFFF               	dw	65535
 10093                           
 10094                           ;Config register IDLOC6 @ 0x20000C
 10095                           ;	unspecified, using default values
 10096   20000C                     	org	2097164
 10097   20000C  FFFF               	dw	65535
 10098                           
 10099                           ;Config register IDLOC7 @ 0x20000E
 10100                           ;	unspecified, using default values
 10101   20000E                     	org	2097166
 10102   20000E  FFFF               	dw	65535
 10103                           
 10104                           	psect	config
 10105                           
 10106                           ;Config register CONFIG1L @ 0x300000
 10107                           ;	External Oscillator mode Selection bits
 10108                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 10109                           ;	Power-up default value for COSC bits
 10110                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 10111   300000                     	org	3145728
 10112   300000  AA                 	db	170
 10113                           
 10114                           ;Config register CONFIG1H @ 0x300001
 10115                           ;	unspecified, using default values
 10116                           ;	Clock Out Enable bit
 10117                           ;	CLKOUTEN = 0x1, unprogrammed default
 10118                           ;	Clock Switch Enable bit
 10119                           ;	CSWEN = 0x1, unprogrammed default
 10120                           ;	Fail-Safe Clock Monitor Enable bit
 10121                           ;	FCMEN = 0x1, unprogrammed default
 10122   300001                     	org	3145729
 10123   300001  FF                 	db	255
 10124                           
 10125                           ;Config register CONFIG2L @ 0x300002
 10126                           ;	unspecified, using default values
 10127                           ;	Master Clear Enable bit
 10128                           ;	MCLRE = 0x1, unprogrammed default
 10129                           ;	Power-up Timer Enable bit
 10130                           ;	PWRTE = 0x1, unprogrammed default
 10131                           ;	Low-power BOR enable bit
 10132                           ;	LPBOREN = 0x1, unprogrammed default
 10133                           ;	Brown-out Reset Enable bits
 10134                           ;	BOREN = 0x3, unprogrammed default
 10135   300002                     	org	3145730
 10136   300002  FF                 	db	255
 10137                           
 10138                           ;Config register CONFIG2H @ 0x300003
 10139                           ;	unspecified, using default values
 10140                           ;	Brown Out Reset Voltage selection bits
 10141                           ;	BORV = 0x3, unprogrammed default
 10142                           ;	ZCD Disable bit
 10143                           ;	ZCD = 0x1, unprogrammed default
 10144                           ;	PPSLOCK bit One-Way Set Enable bit
 10145                           ;	PPS1WAY = 0x1, unprogrammed default
 10146                           ;	Stack Full/Underflow Reset Enable bit
 10147                           ;	STVREN = 0x1, unprogrammed default
 10148                           ;	Debugger Enable bit
 10149                           ;	DEBUG = 0x1, unprogrammed default
 10150                           ;	Extended Instruction Set Enable bit
 10151                           ;	XINST = 0x1, unprogrammed default
 10152   300003                     	org	3145731
 10153   300003  FF                 	db	255
 10154                           
 10155                           ;Config register CONFIG3L @ 0x300004
 10156                           ;	WDT Period Select bits
 10157                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 10158                           ;	WDT operating mode
 10159                           ;	WDTE = OFF, WDT Disabled
 10160   300004                     	org	3145732
 10161   300004  9F                 	db	159
 10162                           
 10163                           ;Config register CONFIG3H @ 0x300005
 10164                           ;	unspecified, using default values
 10165                           ;	WDT Window Select bits
 10166                           ;	WDTCWS = 0x7, unprogrammed default
 10167                           ;	WDT input clock selector
 10168                           ;	WDTCCS = 0x7, unprogrammed default
 10169   300005                     	org	3145733
 10170   300005  FF                 	db	255
 10171                           
 10172                           ;Config register CONFIG4L @ 0x300006
 10173                           ;	unspecified, using default values
 10174                           ;	Write Protection Block 0
 10175                           ;	WRT0 = 0x1, unprogrammed default
 10176                           ;	Write Protection Block 1
 10177                           ;	WRT1 = 0x1, unprogrammed default
 10178                           ;	Write Protection Block 2
 10179                           ;	WRT2 = 0x1, unprogrammed default
 10180                           ;	Write Protection Block 3
 10181                           ;	WRT3 = 0x1, unprogrammed default
 10182                           ;	Write Protection Block 3
 10183                           ;	WRT4 = 0x1, unprogrammed default
 10184                           ;	Write Protection Block 3
 10185                           ;	WRT5 = 0x1, unprogrammed default
 10186                           ;	Write Protection Block 3
 10187                           ;	WRT6 = 0x1, unprogrammed default
 10188                           ;	Write Protection Block 3
 10189                           ;	WRT7 = 0x1, unprogrammed default
 10190   300006                     	org	3145734
 10191   300006  FF                 	db	255
 10192                           
 10193                           ;Config register CONFIG4H @ 0x300007
 10194                           ;	unspecified, using default values
 10195                           ;	Configuration Register Write Protection bit
 10196                           ;	WRTC = 0x1, unprogrammed default
 10197                           ;	Boot Block Write Protection bit
 10198                           ;	WRTB = 0x1, unprogrammed default
 10199                           ;	Data EEPROM Write Protection bit
 10200                           ;	WRTD = 0x1, unprogrammed default
 10201                           ;	Scanner Enable bit
 10202                           ;	SCANE = 0x1, unprogrammed default
 10203                           ;	Low Voltage Programming Enable bit
 10204                           ;	LVP = 0x1, unprogrammed default
 10205   300007                     	org	3145735
 10206   300007  FF                 	db	255
 10207                           
 10208                           ;Config register CONFIG5L @ 0x300008
 10209                           ;	unspecified, using default values
 10210                           ;	UserNVM Program Memory Code Protection bit
 10211                           ;	CP = 0x1, unprogrammed default
 10212                           ;	DataNVM Memory Code Protection bit
 10213                           ;	CPD = 0x1, unprogrammed default
 10214   300008                     	org	3145736
 10215   300008  FF                 	db	255
 10216                           
 10217                           ;Config register CONFIG5H @ 0x300009
 10218                           ;	unspecified, using default values
 10219   300009                     	org	3145737
 10220   300009  FF                 	db	255
 10221                           
 10222                           ;Config register CONFIG6L @ 0x30000A
 10223                           ;	unspecified, using default values
 10224                           ;	Table Read Protection Block 0
 10225                           ;	EBTR0 = 0x1, unprogrammed default
 10226                           ;	Table Read Protection Block 1
 10227                           ;	EBTR1 = 0x1, unprogrammed default
 10228                           ;	Table Read Protection Block 2
 10229                           ;	EBTR2 = 0x1, unprogrammed default
 10230                           ;	Table Read Protection Block 3
 10231                           ;	EBTR3 = 0x1, unprogrammed default
 10232                           ;	Table Read Protection Block 4
 10233                           ;	EBTR4 = 0x1, unprogrammed default
 10234                           ;	Table Read Protection Block 5
 10235                           ;	EBTR5 = 0x1, unprogrammed default
 10236                           ;	Table Read Protection Block 6
 10237                           ;	EBTR6 = 0x1, unprogrammed default
 10238                           ;	Table Read Protection Block 7
 10239                           ;	EBTR7 = 0x1, unprogrammed default
 10240   30000A                     	org	3145738
 10241   30000A  FF                 	db	255
 10242                           
 10243                           ;Config register CONFIG6H @ 0x30000B
 10244                           ;	unspecified, using default values
 10245                           ;	Boot Block Table Read Protection bit
 10246                           ;	EBTRB = 0x1, unprogrammed default
 10247   30000B                     	org	3145739
 10248   30000B  FF                 	db	255
 10249                           tosu	equ	0xFFF
 10250                           tosh	equ	0xFFE
 10251                           tosl	equ	0xFFD
 10252                           stkptr	equ	0xFFC
 10253                           pclatu	equ	0xFFB
 10254                           pclath	equ	0xFFA
 10255                           pcl	equ	0xFF9
 10256                           tblptru	equ	0xFF8
 10257                           tblptrh	equ	0xFF7
 10258                           tblptrl	equ	0xFF6
 10259                           tablat	equ	0xFF5
 10260                           prodh	equ	0xFF4
 10261                           prodl	equ	0xFF3
 10262                           indf0	equ	0xFEF
 10263                           postinc0	equ	0xFEE
 10264                           postdec0	equ	0xFED
 10265                           preinc0	equ	0xFEC
 10266                           plusw0	equ	0xFEB
 10267                           fsr0h	equ	0xFEA
 10268                           fsr0l	equ	0xFE9
 10269                           wreg	equ	0xFE8
 10270                           indf1	equ	0xFE7
 10271                           postinc1	equ	0xFE6
 10272                           postdec1	equ	0xFE5
 10273                           preinc1	equ	0xFE4
 10274                           plusw1	equ	0xFE3
 10275                           fsr1h	equ	0xFE2
 10276                           fsr1l	equ	0xFE1
 10277                           bsr	equ	0xFE0
 10278                           indf2	equ	0xFDF
 10279                           postinc2	equ	0xFDE
 10280                           postdec2	equ	0xFDD
 10281                           preinc2	equ	0xFDC
 10282                           plusw2	equ	0xFDB
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        27
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      93
    BANK0           160     32     106
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    average_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    card_blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_cyan@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_cyan@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_white@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_white@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    colour_to_key@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    colour_to_key@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    convert_HSV@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    convert_HSV@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    forward_navigation@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward_navigation@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    forward_navigation@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    forward_navigation@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    manoeuvre_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_manoeuvre(BANK0[20]), 

    max_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    min_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    pick_card@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    pick_card@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    read_timer@tH	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerH(COMRAM[1]), 

    read_timer@tL	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerL(COMRAM[1]), 

    read_trail@man	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@mann(COMRAM[1]), 

    read_trail@tH	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerH(COMRAM[1]), 

    read_trail@tL	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerL(COMRAM[1]), 

    return_to_sender@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    return_to_sender@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    S1143DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2829$buffer	PTR unsigned char  size(2) Largest target is 0

    S2829$source	PTR const unsigned char  size(2) Largest target is 0

    scale_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    squareReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    squareReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_high(BANK0[20]), 

    timer_low_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_low(BANK0[20]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    UTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    UTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    wait_for_wall@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_forward_navigation
    _return_to_sender->_pick_card
    _forward_navigation->_convert_HSV
    _wait_for_wall->_getRGBCval
    _scale_RGB->___fltol
    ___fltol->___flmul
    ___flmul->___xxtofl
    _pick_card->_card_blue
    _pick_card->_card_cyan
    _pick_card->_card_green
    _pick_card->_card_orange
    _pick_card->_card_pink
    _pick_card->_card_red
    _pick_card->_card_yellow
    _card_yellow->_headbuttReverse
    _card_yellow->_squareReverse
    _card_yellow->_turnLeft90
    _card_yellow->_turnRight90
    _card_white->_UTurn
    _card_white->_headbuttReverse
    _card_red->_headbuttReverse
    _card_red->_turnLeft90
    _card_red->_turnRight90
    _card_pink->_headbuttReverse
    _card_pink->_squareReverse
    _card_pink->_turnLeft90
    _card_pink->_turnRight90
    _squareReverse->_fullSpeedReverse
    _card_orange->_headbuttReverse
    _card_orange->_turnLeft135
    _card_orange->_turnRight135
    _card_green->_headbuttReverse
    _card_green->_turnLeft90
    _card_green->_turnRight90
    _turnRight90->_turnRight
    _turnLeft90->_turnLeft
    _card_cyan->_headbuttReverse
    _card_cyan->_turnLeft135
    _card_cyan->_turnRight135
    _turnRight135->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft135->_turnLeft
    _card_blue->_UTurn
    _card_blue->_headbuttReverse
    _headbuttReverse->_fullSpeedReverse
    _fullSpeedReverse->_setMotorPWM
    _UTurn->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _convert_HSV->___lldiv
    _average_RGBC->___lldiv
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  382106
                                             74 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                 _forward_navigation
                    _initDCmotorsPWM
                         _initUSART4
                   _return_to_sender
 ---------------------------------------------------------------------------------
 (1) _return_to_sender                                     5     3      2  181907
                                             38 COMRAM     5     3      2
                     _fullSpeedAhead
                          _pick_card
                         _read_trail
                        _start_timer
                               _stop
                         _stop_timer
                   _toggle_main_beam
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _toggle_main_beam                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_trail                                           3     0      3     294
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward_navigation                                   9     5      4  198870
                                             65 COMRAM     9     5      4
                       _average_RGBC
                      _colour_to_key
                        _convert_HSV
                     _fullSpeedAhead
                          _pick_card
                         _read_timer
                        _reset_timer
                          _scale_RGB
                        _start_timer
                               _stop
                         _stop_timer
               _toggle_tricolour_LED
                      _wait_for_wall
                        _write_trail
 ---------------------------------------------------------------------------------
 (2) _write_trail                                          3     1      2     218
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _wait_for_wall                                        4     2      2     910
                                             12 COMRAM     4     2      2
                         _getRGBCval
 ---------------------------------------------------------------------------------
 (2) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _scale_RGB                                            3     2      1    5963
                                             49 COMRAM     3     2      1
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1236
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1143
                                             39 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3420
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_timer                                           2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _pick_card                                            6     2      4  175154
                                             32 COMRAM     6     2      4
                          _card_blue
                          _card_cyan
                         _card_green
                        _card_orange
                          _card_pink
                           _card_red
                         _card_white
                        _card_yellow
 ---------------------------------------------------------------------------------
 (3) _card_yellow                                          5     2      3   28538
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_white                                           2     0      2   15132
                                             27 COMRAM     2     0      2
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (3) _card_red                                             5     2      3   21938
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_pink                                            5     2      3   28538
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _squareReverse                                        4     2      2    6512
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (3) _card_orange                                          5     2      3   21330
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _card_green                                           5     2      3   21938
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _turnRight90                                          4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnLeft90                                           4     2      2    6664
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_cyan                                            5     2      3   21330
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                         4     2      2    6208
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (5) _turnRight                                            5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                          4     2      2    6360
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_blue                                            5     2      3   15274
                                             27 COMRAM     5     2      3
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (4) _headbuttReverse                                      4     2      2    8336
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (5) _toggle_brake_lights                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _fullSpeedReverse                                     5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _UTurn                                                4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
            _toggle_right_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (5) _turnLeft                                             5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _toggle_right_indicators                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _toggle_left_indicators                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    3373
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    1829
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _convert_HSV                                         52    50      2    5717
                                             13 COMRAM    52    50      2
                            ___lldiv
                             ___lmul
                            _max_RGB
                            _min_RGB
 ---------------------------------------------------------------------------------
 (3) _min_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _max_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1434
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _colour_to_key                                        5     3      2     932
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _average_RGBC                                        20    19      1    3012
                                             13 COMRAM    20    19      1
                            ___lldiv
                         _getRGBCval
 ---------------------------------------------------------------------------------
 (3) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (4) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1834
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (6) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
     _start_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _forward_navigation
     _average_RGBC
       ___lldiv
       _getRGBCval
         _color_read_Blue
           _I2C_2_Master_Read
             _I2C_2_Master_Idle
           _I2C_2_Master_RepStart
             _I2C_2_Master_Idle
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Clear
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Green
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Red
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
     _colour_to_key
     _convert_HSV
       ___lldiv
       ___lmul
       _max_RGB
       _min_RGB
     _fullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _pick_card
       _card_blue
         _UTurn
           _stop
             _setMotorPWM
           _toggle_left_indicators
           _toggle_right_indicators
           _turnLeft
             _setMotorPWM
         _headbuttReverse
           _fullSpeedReverse
             _setMotorPWM
           _stop
           _toggle_brake_lights
       _card_cyan
         _headbuttReverse
         _turnLeft135
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight135
           _stop
           _toggle_right_indicators
           _turnRight
             _setMotorPWM
       _card_green
         _headbuttReverse
         _turnLeft90
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight90
           _stop
           _toggle_right_indicators
           _turnRight
       _card_orange
         _headbuttReverse
         _turnLeft135
         _turnRight135
       _card_pink
         _headbuttReverse
         _squareReverse
           _fullSpeedReverse
           _stop
           _toggle_brake_lights
         _turnLeft90
         _turnRight90
       _card_red
         _headbuttReverse
         _turnLeft90
         _turnRight90
       _card_white
         _UTurn
         _headbuttReverse
       _card_yellow
         _headbuttReverse
         _squareReverse
         _turnLeft90
         _turnRight90
     _read_timer
     _reset_timer
     _scale_RGB
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _start_timer
     _stop
     _stop_timer
     _toggle_tricolour_LED
     _wait_for_wall
       _getRGBCval
     _write_trail
   _initDCmotorsPWM
   _initUSART4
   _return_to_sender
     _fullSpeedAhead
     _pick_card
     _read_trail
     _start_timer
     _stop
     _stop_timer
     _toggle_main_beam
     _write_timer

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      6A       5       66.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5D       1       98.9%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      9      0       0      57        0.0%
BITBIGSFRlllhhh      9      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C7      61        0.0%
DATA                 0      0      C7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 14 11:31:30 2024

                   _turn180Delay 00C0                  ??_wait_for_wall 000F                   _color_read_Red 3396  
                _color_read_Blue 3486                  _trail_timer_low 0074              card_green@backtrack 001E  
                             l30 38C6                               l33 3858                               l42 28BE  
                             l27 378E                               l36 3906                               l71 33E4  
                             l39 38E6                               l80 3484                               l65 3760  
                             l74 3434                               l83 3394                               l68 3926  
                             l77 34D4                               l96 3518                               l89 1F6E  
                             l99 2FC0              ___wmul@multiplicand 0003                 _trail_timer_high 0088  
               _color_read_Clear 3436                 _color_read_Green 33E6                              l101 2FFA  
                            l104 2F44                              l106 2F7E                              l125 14E4  
                            l109 27F6                              l222 2D74                              l320 37E4  
                            l136 1946                              l137 1948                              l242 2A78  
                            l250 29C0                              l323 380A                              l332 39AE  
                            l317 37E2                              l229 23DE                              l261 2978  
                            l237 2E02                              l245 2AE8                              l253 2A30  
                            l326 39B8                              l335 3982                              l272 36F4  
                            l329 39A4                              l281 364A                              l433 2490  
                            l338 359C                              l258 2908                              l266 2B2E  
                            l290 3610                              l275 36BC                              l284 355A  
                            l436 251C                              l269 2B9E                              l701 39BC  
                            l710 398E                              l278 3684                              l287 372C  
                            l463 3944                              l552 32E0                              l704 395A  
                            l545 3210                              l713 35D6                              l538 3140  
                            l707 399A                              l580 3278                              l716 37B8  
                            l573 31A8                              l725 228A                              l566 2F02  
                            l583 387E                              l559 2E82                              l735 2CE4  
                            l746 38A4                              l780 2C42                              l596 2720  
                            l773 2C32                              l757 30C8                              l758 30D8  
                            l695 3832                              l698 39C0                              _ISR 0008  
         ??_toggle_tricolour_LED 0001                      _start_timer 39BE                              wreg 0FE8  
       __end_of_toggle_main_beam 385A                     ___flmul@aexp 0020                     ___flmul@bexp 0021  
                   ?_convert_HSV 000E                     ___flmul@sign 001B                     ___flmul@temp 0026  
                   ___flmul@prod 0022                   min_RGB@min_val 0005                      _squareDelay 00BC  
                           ?_ISR 0001                     ___fltol@exp1 0031                             l1043 2624  
                           l3000 347C                             l1401 1FC6                             l3010 36E4  
                           l1244 306E                             l3012 36F0                             l3004 36BE  
                           l3020 36AC                             l1404 2122                             l1237 3066  
                           l3030 3674                             l3006 36C2                             l3022 36B8  
                           l3014 3686                             l3110 3116                             l3102 30DA  
                           l1415 20BA                             l3032 3680                             l3024 364C  
                           l3040 363A                             l3008 36CE                             l3016 368A  
                           l3120 31CA                             l3104 30DE                             l3200 385A  
                           l1360 1A0E                             l1408 205E                             l3202 3992  
                           l3210 308E                             l3050 3546                             l3130 327A  
                           l3026 3650                             l3042 3646                             l3034 3612  
                           l3018 3696                             l3106 30FA                             l1370 1C6A  
                           l3204 3996                             l3220 2BC6                             l3212 309E  
                           l3052 3552                             l3044 351A                             l3060 3706  
                           l3132 327E                             l3028 365C                             l3036 3616  
                           l3124 31E6                             l3116 31AA                             l3300 1AE0  
                           l1364 1D72                             l3230 2C10                             l3222 2BCE  
                           l3214 30A8                             l3206 3070                             l3054 3556  
                           l3046 3522                             l3062 371C                             l3134 329A  
                           l3038 3622                             l3118 31AE                             l3070 35E8  
                           l3310 1B42                             l3302 1AF0                             l1367 1C04  
                           l3232 2C20                             l3224 2BDA                             l3216 2BA0  
                           l3208 3080                             l3080 2F8E                             l3048 352E  
                           l3064 3728                             l3056 36F6                             l3072 3600  
                           l3160 2E88                             l3152 2E58                             l3144 2E04  
                           l3320 1BEA                             l3312 1B5E                             l3304 1B0A  
                           l3240 1956                             l3400 25D8                             l1377 1D34  
                           l1369 1C7C                             l3234 2C22                             l3226 2BE8  
                           l3218 2BB0                             l3082 2FAE                             l3090 2F04  
                           l3058 36FA                             l3138 32B6                             l3074 360C  
                           l3066 35D8                             l3162 2EB0                             l3146 2E08  
                           l3330 1C26                             l3322 1BF4                             l3314 1B88  
                           l3306 1B1A                             l3250 1996                             l3242 1964  
                           l3402 25E4                             l3236 2C2C                             l3228 2BF2  
                           l3076 3340                             l3500 1F5C                             l3084 2FE0  
                           l3092 2F12                             l3180 317E                             l3172 3142  
                           l3068 35DC                             l3148 2E30                             l3340 1C98  
                           l3332 1C34                             l3324 1C02                             l3316 1BBE  
                           l3308 1B36                             l3260 19C6                             l3252 199C  
                           l3244 1966                             l3404 25F4                             l3420 1FEC  
                           l3412 1F72                             l3086 2FF2                             l3078 2F80  
                           l3094 2F32                             l3190 3232                             l3174 3146  
                           l3166 2ED8                             l3158 2E84                             l4150 312A  
                           l3350 1D02                             l3342 1CA6                             l3334 1C62  
                           l3326 1C14                             l3318 1BCC                             l3270 19FE  
                           l3262 19C8                             l3254 19AC                             l3246 1976  
                           l3238 194A                             l3406 2604                             l3430 2046  
                           l3414 1F82                             l3510 3508                             l3502 34D6  
                           l3096 2F64                             l3600 135E                             l3520 0E52  
                           l4160 32CA                             l3176 3162                             l4152 2EEC  
                           l3360 1D58                             l3352 1D1C                             l3344 1CD0  
                           l3328 1C22                             l3280 1A4E                             l3272 1A1E  
                           l3264 19D8                             l3256 19B2                             l3248 1986  
                           l3408 2614                             l3440 20AA                             l3432 2048  
                           l3424 2000                             l3416 1F90                             l3512 2722  
                           l3504 34DA                             l3098 2F76                             l3602 1370  
                           l3530 0EC4                             l3610 141C                             l3522 0E5E  
                           l3514 0E1A                             l2810 3880                             l3194 324E  
                           l3186 3212                             l4154 3192                             l4146 26DA  
                           l3354 1D38                             l3362 1D5E                             l3338 1C8C  
                           l3346 1CD4                             l3290 1A9E                             l3282 1A58  
                           l3274 1A2E                             l3266 19E8                             l3258 19B8  
                           l3370 2536                             l3450 2102                             l3442 20C8  
                           l3434 2054                             l3426 2008                             l3418 1FD6  
                           l3506 34E2                             l3700 187A                             l3620 14AA  
                           l3612 142E                             l3604 13B0                             l3540 0F78  
                           l3532 0EC4                             l3524 0E70                             l3516 0E32  
                           l2820 3016                             l2812 389C                             l2900 2D98  
                           l3188 3216                             l4156 31FA                             l4148 2E6C  
                           l3364 1D62                             l3356 1D48                             l3348 1CEE  
                           l3292 1AAA                             l3284 1A6E                             l3268 19F8  
                           l3380 2586                             l3452 2110                             l3444 20CA  
                           l3436 2090                             l3428 2014                             l3460 27F8  
                           l3470 37CE                             l3462 37BA                             l3710 1900  
                           l3702 189A                             l3630 14EA                             l3622 14B2  
                           l3614 143A                             l3606 13E4                             l3550 103C  
                           l3534 0ED4                             l3542 0F84                             l3526 0E7C  
                           l3518 0E42                             l2830 3050                             l2822 301E  
                           l2902 2DAE                             l2910 2DD6                             l4158 3262  
                           l3358 1D56                             l3294 1AB8                             l3286 1A7A  
                           l3278 1A42                             l3390 25B0                             l3382 258A  
                           l3374 254A                             l3454 2112                             l3446 20CE  
                           l3438 209C                             l3472 37D0                             l3464 37C4  
                           l3800 374C                             l3480 1DC4                             l3712 1920  
                           l3704 18BA                             l3632 1506                             l3640 156A  
                           l3624 14C0                             l3616 1446                             l3608 1414  
                           l3560 10C8                             l3552 106C                             l3544 0F90  
                           l3536 0F14                             l3528 0E9A                             l2832 3058  
                           l2824 3026                             l2816 2FFC                             l2840 22A6  
                           l3720 28C8                             l2912 2DEC                             l2904 2DB6  
                           l2920 2A58                             l3296 1AC4                             l3288 1A92  
                           l3392 25BA                             l3384 2598                             l3376 2574  
                           l3368 2520                             l3448 20F2                             l3466 37CA  
                           l3474 390A                             l3802 3756                             l3482 1DE2  
                           l3490 1E4A                             l3714 1942                             l3706 18DC  
                           l3642 1588                             l3650 15EE                             l3634 1522  
                           l3626 14D2                             l3618 147A                             l3562 10D2  
                           l3570 117E                             l3546 0FC4                             l3538 0F48  
                           l3554 1074                             l2834 305A                             l2826 3034  
                           l2818 3004                             l2850 2362                             l2842 22F4  
                           l3730 2928                             l3722 28D6                             l2906 2DBE  
                           l2930 2AA8                             l2922 2A70                             l2914 2A32  
                           l3298 1AD4                             l3394 25C4                             l3378 2576  
                           l3810 2D20                             l3458 3834                             l3468 37CC  
                           l3492 1E5A                             l3484 1E04                             l3476 1D74  
                           l3708 18E0                             l3652 160C                             l3660 1672  
                           l3644 15A6                             l3636 1544                             l3628 14E6  
                           l3580 1238                             l3572 118A                             l3564 110E  
                           l3556 1096                             l3548 1008                             l2836 3060  
                           l2828 303A                             l2852 23A2                             l2844 2306  
                           l3732 2930                             l3724 28E8                             l2908 2DC6  
                           l2860 38E8                             l2924 2A90                             l2932 2AB8  
                           l2916 2A3A                             l2940 2990                             l3740 2626  
                           l3900 222C                             l3820 2D5C                             l3812 2D44  
                           l3804 2CE6                             l2854 37E4                             l2870 397E  
                           l3494 1F2A                             l3486 1E26                             l3478 1DBC  
                           l3662 1690                             l3670 16F6                             l3654 162A  
                           l3646 15C8                             l3638 1566                             l3590 12A6  
                           l3574 1194                             l3566 1142                             l3558 10BC  
                           l3582 1240                             l2846 230A                             l2838 228C  
                           l3734 2938                             l3726 2900                             l3718 28C0  
                           l2862 38C8                             l2934 2AD0                             l2926 2A98  
                           l2918 2A46                             l2950 29E8                             l2942 29A0  
                           l3750 267A                             l3742 262A                             l3902 2240  
                           l3822 2D66                             l3814 2D4E                             l3806 2CF6  
                           l3830 3932                             l3910 2C44                             l3840 380C  
                           l2856 37F4                             l2864 39B0                             l2872 39A6  
                           l2880 355E                             l3496 1F38                             l3488 1E48  
                           l3672 1712                             l3680 1776                             l3664 16AE  
                           l3656 164C                             l3648 15EA                             l3592 12E2  
                           l3584 1262                             l3576 11D4                             l3568 1172  
                           l2848 2348                             l3728 2920                             l3736 2948  
                           l2928 2AA0                             l2960 2AF2                             l2952 29F0  
                           l2944 29B8                             l2936 297A                             l3752 268E  
                           l3744 263E                             l3760 26C6                             l3904 2252  
                           l3824 2D68                             l3816 2D50                             l3808 2D1C  
                           l3832 3934                             l3920 2C8A                             l3912 2C48  
                           l3850 382A                             l3842 3814                             l2866 39B4  
                           l2874 39AA                             l2890 359A                             l2882 3562  
                           l3498 1F4A                             l3682 1792                             l3690 17F6  
                           l3674 172E                             l3666 16D0                             l3658 166E  
                           l3594 1316                             l3586 1288                             l3578 1208  
                           l3738 2960                             l2970 2B4E                             l2962 2AFE  
                           l2858 38A6                             l2946 29D8                             l2954 2A00  
                           l2938 2982                             l3754 26A2                             l3746 2652  
                           l3770 39BA                             l3906 2256                             l3826 2D72  
                           l3818 2D5A                             l3834 393E                             l3930 2CBC  
                           l3922 2C8E                             l3914 2C54                             l3852 382E  
                           l3844 3816                             l2868 397A                             l2884 356A  
                           l2876 399C                             l2980 3396                             l3692 1814  
                           l3684 17AE                             l3676 1750                             l3668 16F2  
                           l3596 1346                             l3588 1294                             l2972 2B56  
                           l2964 2B0E                             l2956 2A18                             l2948 29E0  
                           l3756 26B6                             l3748 2666                             l3772 3946  
                           l3860 2130                             l3908 227A                             l3836 3940  
                           l3828 3928                             l3780 35C6                             l3932 2CC8  
                           l3924 2C9C                             l3916 2C64                             l3940 23E0  
                           l3766 3984                             l3854 3830                             l3846 3820  
                           l2886 3572                             l2878 39A0                             l2982 33DC  
                           l3694 1832                             l3686 17D0                             l3678 1772  
                           l3598 1352                             l2894 2D76                             l2974 2B5E  
                           l2966 2B26                             l2958 2AEA                             l3790 37B6  
                           l3782 3792                             l3870 216C                             l3862 2138  
                           l3838 3942                             l3774 359E                             l3934 2CCC  
                           l3926 2CA0                             l3918 2C76                             l3950 2452  
                           l3942 2426                             l3768 39BE                             l3848 3824  
                           l3792 3762                             l2888 3598                             l2992 3486  
                           l3696 1854                             l3688 17F2                             l2896 2D7A  
                           l2968 2B46                             l2976 2B6E                             l3784 37B0  
                           l3880 21A4                             l3872 2170                             l3864 2144  
                           l3856 2124                             l3776 35A6                             l3936 2CD0  
                           l3928 2CAC                             l3960 247A                             l3952 245A  
                           l3944 242E                             l3794 372E                             l2994 34CC  
                           l2986 33E6                             l3698 1876                             l2898 2D90  
                           l2978 2B86                             l3786 37B2                             l3890 21E2  
                           l3882 21B2                             l3874 2188                             l3866 2150  
                           l3858 2128                             l3778 35B6                             l3938 2CD4  
                           l3970 2486                             l3962 247E                             l3954 2462  
                           l3946 2436                             l3796 3732                             l2988 342C  
                           l3788 37B4                             l3892 21E6                             l3884 21B6  
                           l3876 2190                             l3868 215C                             l3980 24E4  
                           l3972 2488                             l3964 2480                             l3956 2472  
                           l3948 244A                             l3798 373C                             l2998 3436  
                           l3894 2208                             l3886 21CE                             l3878 2198  
                           l3982 24FC                             l3974 248A                             l3966 2482  
                           l3958 2476                             l3896 221A                             l3888 21DE  
                           l3984 2510                             l3976 248E                             l3968 2484  
                           l3898 221E                             l3978 249E                             STR_1 0E0F  
                           STR_2 0E14                             STR_5 0E01                             u2000 308E  
                           u2001 308A                             u2010 30C8                             u2011 30C4  
                           u2020 2BC6                             u2100 19E8                             u2021 2BC2  
                           u2101 19E4                             u2030 2BE8                             u2110 1A1E  
                           u2031 2BE4                             u2111 1A1A                             u2040 2C10  
                           u3000 1920                             u2200 1CA6                             u2120 1A2E  
                           u2041 2C0C                             u3001 191C                             u2201 1CA2  
                           u2121 1A2A                             u3010 1942                             u2210 1CEE  
                           u2130 1BA8                             u2050 1964                             u3011 193E  
                           u2211 1CEA                             u2051 1960                             u3020 2900  
                           u2220 1D1C                             u2140 1C02                             u2060 1976  
                           u2300 2604                             u3100 2252                             u3021 28FC  
                           u2221 1D18                             u2141 1BFE                             u2061 1972  
                           u2301 2600                             u3101 224E                             u3030 2920  
                           u2230 1D56                             u2150 1C22                             u2070 1986  
                           u2310 1F82                             u3110 2268                             u3031 291C  
                           u2231 1D52                             u2151 1C1E                             u2135 1B9E  
                           u2071 1982                             u2311 1F7E                             u3111 2260  
                           u3040 2960                             u2160 1C34                             u2080 19C6  
                           u2240 2536                             u2400 2110                             u2320 1F90  
                           u3200 24D2                     _BAUD4CONbits 0EE9                             u3041 295C  
                           u2161 1C30                             u2081 19C2                             u2241 2532  
                           u2401 210C                             u2321 1F8C                             u3201 24CA  
                           u3050 2978                             u2170 1C62                             u2090 19D8  
                           u2250 256A                             u2330 1FEC                             u3130 228A  
                           u2410 3846                             u3051 2974                             u2171 1C5E  
                           u2091 19D4                             u2331 1FE8                             u3131 2286  
                           u2411 383E                             u1700 37F4                             u2180 1C78  
                           u2260 2598                             u2340 2042                             u3060 21DE  
                           u3140 2C76                             u1701 37F0                             u2181 1C74  
                           u2261 2594                             u2341 203E                             u3061 21DA  
                           u3141 2C72                             u1710 380A                             u2190 1C8C  
                           u2270 25AC                             u2350 208C                             u2510 288A  
                           u2430 280A                             u3070 21F8                             u3150 2CBC  
                           u1711 3806                             u2191 1C88                             u2271 25A8  
                           u2255 2560                             u2351 2088                             u2511 2882  
                           u2431 2802                             u3071 21F0                             u3151 2CB8  
                           u2600 0EC4                             u1800 2D90                             u1720 38B8  
                           u2280 25D4                             u2360 20AA                             u3128 226A  
                           u3160 2CE4                             u2601 0EC0                             u1801 2D8C  
                           u1721 38B0                             u2281 25D0                             u2361 20A6  
                           u3161 2CE0                             u2610 1096                             u1650 3016  
                           u1810 2DAE                             u2290 25F4                             u2370 20BA  
                           u2530 28AC                             u2450 282A                             u3090 221A  
                           u3218 24D4                             u3170 249E                             _T2PR 0FBC  
                           u2611 1092                             u1651 3012                             u1811 2DAA  
                           u3307 3666                             u2291 25F0                             u2371 20B6  
                           u2531 28A4                             u2451 2822                             u3091 2216  
                           u3227 24EE                             u3171 249A                             u2700 1544  
                           u2620 10BC                             u1660 3034                             u1820 2DEC  
                           u1740 38FA                             u1900 2A18                             u2380 20C8  
                           u2508 286E                             u2428 3848                             u3180 24B0  
                           u2701 1540                             u2621 10B8                             u1661 3030  
                           u1821 2DE8                             u1741 38F2                             u3317 3710  
                           u1901 2A14                             u2381 20C4                             u3237 217A  
                           u3181 24A8                             u2550 1E5A                             u2710 1566  
                           u2630 1262                             u1670 3050                             u1830 2E02  
                           u1910 2A30                             u2390 2102                             u2470 284A  
                           u2551 1E56                             u2711 1562                             u2631 125E  
                           u1671 304C                             u1831 2DFE                             u3327 2B64  
                           u1911 2A2C                             u2391 20FE                             u2471 2842  
                           u3247 21C0                             u2800 1690                             u2720 1588  
                           u2640 1288                             u1680 22A6                             u1760 38DA  
                           u1840 2A70                             u1920 2B26                             u2528 288C  
                           u2448 280C                             u2560 3504                             u3088 21FA  
                           u2801 168C                             u2721 1584                             u2641 1284  
                           u1681 22A2                             u1761 38D2                             u1841 2A6C  
                           u3337 3538                             u1921 2B22                             u3257 35F2  
                           u2561 3500                             u2810 16AE                             u2730 15A6  
                           u1690 2362                             u1850 2A90                             u1930 2B46  
                           u1738 38BA                             u2490 286C                             u2570 3518  
                           u2811 16AA                             u2731 15A2                             u1691 235E  
                           u3347 2AAE                             u1851 2A8C                             u1931 2B42  
                           u3267 36A0                             u2491 2864                             u2571 3514  
                           u1780 3586                             u2900 17D0                             u2820 16D0  
                           u2740 15C8                             u2580 0E70                             u1860 2AD0  
                           u1940 2B86                             u2548 28AE                             u2468 282C  
                           u1781 357E                             u2901 17CC                             u2821 16CC  
                           u2741 15C4                             u2581 0E6C                             u3357 2DCC  
                           u1861 2ACC                             u1941 2B82                             u3277 36D8  
                           u2910 17F2                             u2830 16F2                             u2750 15EA  
                           u2670 142E                             u2590 0E9A                             u1758 38FC  
                           u1870 2AE8                             u1950 2B9E                             u3198 24B2  
                           u2911 17EE                             u2831 16EE                             u2751 15E6  
                           u2671 142A                             u2655 1296                             u2591 0E96  
                           u3367 293E                             u1871 2AE4                             u1951 2B9A  
                           u3287 362C                             u2920 1814                             u2840 1712  
                           u2760 160C                             u2680 1506                             u1960 2FAE  
                           u1880 29B8                             u2488 284C                             u3377 3742  
                           u2921 1810                             u2841 170E                             u2761 1608  
                           u2681 1502                             u1961 2FAA                             u2665 1360  
                           u3297 29F6                             u1881 29B4                             u2930 1832  
                           u2850 172E                             u2770 162A                             u2690 1522  
                           u1970 2FE0                             u1778 38DC                             u1890 29D8  
                           u2931 182E                             u2851 172A                             u2771 1626  
                           u2691 151E                             u1971 2FDC                             u1891 29D4  
                           u2940 1854                             u2860 1750                             u2780 164C  
                           u1980 2F32                             u2941 1850                             u2861 174C  
                           u2781 1648                             u1981 2F2E                             u1798 3588  
                           u2950 1876                             u2870 1772                             u2790 166E  
                           u1990 2F64                             u2951 1872                             u2871 176E  
                           u2791 166A                             u1991 2F60                             u2960 189A  
                           u2880 1792                             u2961 1896                             u2881 178E  
                           u2970 18BA                             u2890 17AE                             u2971 18B6  
                           u2891 17AA                             u2980 18DC                             u2981 18D8  
                           u2990 1900                             u2991 18FC                    _colour_to_key 14E6  
                           _main 23E0                             fsr1h 0FE2                             fsr2h 0FDA  
                           indf1 0FE7                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             btemp 005E                             _stop 2D76  
                           prodh 0FF4                             prodl 0FF3                   ??_average_RGBC 000F  
                           start 003C               average_RGBC@temp_B 001A               average_RGBC@temp_C 001E  
             average_RGBC@temp_G 0016               average_RGBC@temp_R 0012           __end_of_color_read_Red 33E6  
              headbuttReverse@mL 0018                headbuttReverse@mR 0019                     ___param_bank 0000  
                    _turnLeft135 364C                            ??_ISR 0001                    write_timer@tH 0002  
                  write_timer@tL 0001                    write_trail@tH 0003                    write_trail@tL 0001  
                    _turnRight90 3686          _toggle_right_indicators 38C8                    ___fltol@sign1 0030  
                          ?_main 0001               _timer_high_pointer 0051                  __end_of___flmul 1D74  
                __end_of___fltol 2626                  __end_of___lldiv 2C44                            ?_stop 0013  
                __end_of___lwdiv 3070                            i2l743 0038                            _TMR0H 0FD4  
                          _TMR0L 0FD3                 ?_headbuttReverse 0018              ___lmul@multiplicand 0005  
                          _UTurn 351A       __end_of_I2C_2_Master_Start 39BA                      _write_timer 3990  
     __end_of_I2C_2_Master_Write 3984                      _write_trail 3790                  __end_of_max_RGB 2FFC  
                __end_of_min_RGB 2F80                   ?_colour_to_key 0001                _turnRight135Delay 00C2  
                          tablat 0FF5                  _turnLeft90Delay 00C8                            plusw2 0FDB  
                          ttemp5 005F                            ttemp6 0062                            ttemp7 0066  
                          status 0FD8                            wtemp8 005F                 _return_to_sender 2C44  
        __end_of_color_read_Blue 34D6                    average_RGBC@i 0011                    average_RGBC@p 000E  
          _I2C_2_Master_RepStart 399C                  ?_color_read_Red 0005                  __initialization 32E2  
                   __end_of_main 2520                     __end_of_stop 2E04                           ??_main 004B  
                         ??_stop 0015                    __activetblptr 0003                   write_trail@man 0002  
                   _turnRight135 3612                           ?_UTurn 0018                   _bottomGearLeft 0055  
                   ?_setMotorPWM 000E                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                    _squareReverse 35D8  
                         _RC0PPS 0E62                           _RE2PPS 0E74                           _RD5PPS 0E6F  
                         _RC7PPS 0E69                           _RD6PPS 0E70                           _RE4PPS 0E76  
                         i2l2640 000A                           i2l2642 001A                           i2l2644 002A  
                         i2l2646 0032                           i2l2648 0036                           _RG6PPS 0E88  
       __end_of_color_click_init 3762                           _RX4PPS 0E15                           _TX4REG 0EE4  
               __end_of_card_red 3142                 __end_of___xxtofl 2124                 _fullSpeedReverse 2AEA  
               _turnLeft135Delay 00C4                    ??_Timer0_init 0003                     ?_reset_timer 0001  
                   _CCPTMRS0bits 0FAD                     convert_HSV@C 0040                     convert_HSV@M 003E  
                         ___lmul 3070                     convert_HSV@m 001A                           ___wmul 3880  
                      ??___flmul 0017                        ??___fltol 002C                        ??___lldiv 0009  
      ??_toggle_right_indicators 0001                        ??___lwdiv 000B         ??_toggle_left_indicators 0001  
           forward_navigation@p1 0044             forward_navigation@p2 0045                           clear_0 3328  
           forward_navigation@mL 0042             forward_navigation@mR 0043               fullSpeedReverse@mL 0013  
             fullSpeedReverse@mR 0014                           isa$std 0001                        ??_max_RGB 0003  
             card_blue@backtrack 001E                        ??_min_RGB 0003                     __pdataCOMRAM 004D  
              _timer_low_pointer 0050           return_to_sender@timerH 0029           return_to_sender@timerL 002A  
           __end_of_average_RGBC 1F70                     __mediumconst 0000                           tblptrh 0FF7  
                         tblptrl 0FF6                           tblptru 0FF8              _toggle_brake_lights 38A6  
                ??_colour_to_key 0003                   ?_squareReverse 0018                           stop@mL 0013  
                         stop@mR 0014                ??_initDCmotorsPWM 0003                 __end_of_turnLeft 2AEA  
            convert_HSV@temp_610 0028              convert_HSV@temp_611 002C              convert_HSV@temp_612 0030  
            convert_HSV@temp_613 0034              convert_HSV@temp_614 0020              convert_HSV@temp_609 0038  
                   ___xxtofl@arg 000B                     ___xxtofl@exp 000A                     ___xxtofl@val 0001  
              _buggy_lights_init 3762                       __accesstop 0060          __end_of__initialization 3336  
       __end_of_color_read_Clear 3486         __end_of_color_read_Green 3436                    card_orange@mL 001C  
                  card_orange@mR 001D           ?_I2C_2_Master_RepStart 0001               ?_buggy_lights_init 0001  
                  ___rparam_used 0001                       ___fltol@f1 0028                 ?_color_read_Blue 0005  
           ?_toggle_brake_lights 0001                   __pcstackCOMRAM 0001             _wall_threshold_clear 004D  
                  __end_of_UTurn 355C                      pick_card@mL 0021                      pick_card@mR 0022  
                   __pidataBANK0 395C              ??_buggy_lights_init 0001              __end_of_Timer0_init 3834  
                  card_yellow@mL 001C                    card_yellow@mR 001D       __end_of_forward_navigation 228C  
                   ?_start_timer 0001                          ??_UTurn 001A                ?_toggle_main_beam 0001  
__end_of_toggle_right_indicators 38E8        __end_of_buggy_lights_init 3790                       _card_green 31AA  
             ??_toggle_main_beam 0001                       __pbssBANK0 0060                       _card_white 385A  
                     _getRGBCval 3340                _color_writetoaddr 3908                     _T2CLKCONbits 0FBF  
          ??_toggle_brake_lights 0001                     ?_turnLeft135 0018               ?_color_writetoaddr 0003  
                        ?___lmul 0001        fullSpeedReverse@rightGear 0017             card_yellow@backtrack 001E  
                        ?___wmul 0001                  _bottomGearRight 0054            __end_of_wait_for_wall 351A  
                   ?_turnRight90 0018                   ___lmul@product 0009              ??_color_writetoaddr 0004  
       __end_of_return_to_sender 2CE6                        ?_card_red 001C                        ?___xxtofl 0001  
                ??_squareReverse 001A                          _SP4BRGH 0EE6                          _SP4BRGL 0EE5  
                   ?_write_timer 0001                     ?_write_trail 0001                          _SSP2ADD 0ED6  
                        _SSP2BUF 0ED5                __end_of_card_blue 32E2                __end_of_card_cyan 327A  
              __end_of_card_pink 2F04           color_writetoaddr@value 0003                 ??_color_read_Red 0007  
                        UTurn@mL 0018                          UTurn@mR 0019        __end_of_color_writetoaddr 3928  
             _I2C_2_Master_Start 39B0                       _initUSART4 3928               _I2C_2_Master_Write 3978  
                        __Hparam 0000                          __Lparam 0000                color_read_Red@tmp 000A  
                    _Timer0_init 380C                       card_red@mL 001C                       card_red@mR 001D  
               _turningRightGear 0052                          ___flmul 194A                          ___fltol 2520  
                        ___lldiv 2BA0                    convert_HSV@p1 000E              ?_I2C_2_Master_Start 0001  
                  convert_HSV@p2 000F                          ___lwdiv 2FFC              ?_I2C_2_Master_Write 0001  
              wait_for_wall@loss 000E                     __psmallconst 0E00                     turnLeft90@mL 0018  
                   turnLeft90@mR 0019                          __pcinit 32E2                          __ramtop 0E00  
                      ?_turnLeft 0013                          __ptext0 23E0                          __ptext1 2C44  
                        __ptext2 3834                          __ptext3 359E                          __ptext4 3928  
                        __ptext5 2CE6                          __ptext6 2124                          __ptext7 3790  
                        __ptext8 34D6                          __ptext9 27F8                       _read_timer 3946  
                  ??_card_orange 001F                       _read_trail 359E                          _max_RGB 2F80  
                        _min_RGB 2F04                    ??_card_yellow 001F                        _T2CONbits 0FBD  
                     ??_card_red 001F                       ??___xxtofl 0005                __end_of_scale_RGB 27F8  
       __end_of_fullSpeedReverse 2BA0                        _T2HLTbits 0FBE                __end_of_pick_card 2722  
         fullSpeedAhead@leftGear 0016             ??_I2C_2_Master_Start 0002             ??_I2C_2_Master_Write 0002  
                    ?_card_green 001C             end_of_initialization 3336                      ?_card_white 001C  
         _toggle_left_indicators 38E8         forward_navigation@timerH 0048         forward_navigation@timerL 0049  
                    ?_getRGBCval 000C                ?_color_click_init 0001                  ___lldiv@divisor 0005  
                colour_to_key@p1 0001                  colour_to_key@p2 0002               ??_color_click_init 0005  
                ___lldiv@counter 000D                     _average_RGBC 1D74             convert_HSV@hue_scale 003C  
                        postdec1 0FE5                          postdec2 0FDD                  squareReverse@mL 0018  
                squareReverse@mR 0019                          postinc0 0FEE                          postinc1 0FE6  
                        postinc2 0FDE                  _initDCmotorsPWM 2CE6                       ??_turnLeft 0015  
                      _PORTFbits 0F8E               setMotorPWM@negDuty 0012                __end_of_turnRight 2A32  
           convert_HSV@sat_scale 0018                     read_timer@tH 0001                     read_timer@tL 0002  
                  ___xxtofl@sign 0009                        _TRISAbits 0F81               setMotorPWM@posDuty 0011  
                   read_trail@tH 0001                     read_trail@tL 0002                        _TRISCbits 0F83  
                      _TRISDbits 0F84                        _TRISEbits 0F85                        _TRISFbits 0F86  
                      _TRISGbits 0F87                        _TRISHbits 0F88              __end_of_card_orange 31AA  
               fullSpeedAhead@mL 0013                card_red@backtrack 001E                 fullSpeedAhead@mR 0014  
       color_writetoaddr@address 0004              __end_of_card_yellow 2E84          ??_I2C_2_Master_RepStart 0002  
           card_orange@backtrack 001E                      ___flmul@grs 001C                      _CCP1CONbits 0FAB  
              ?_color_read_Clear 0005                      _CCP2CONbits 0FA7                ?_color_read_Green 0005  
                    _CCP3CONbits 0F26                      ?_initUSART4 0001                      _CCP4CONbits 0F22  
                     main@motorL 00A2                       main@motorR 00AB               ??_color_read_Clear 0007  
             ??_color_read_Green 0007                       _stop_timer 39BA                       _turnLeft90 36BE  
                   pick_card@key 0024                   _fullSpeedAhead 28C0                   __end_of___lmul 30DA  
                 __end_of___wmul 38A6                    __pidataCOMRAM 396A                      ?_read_timer 0001  
                    ?_read_trail 0001             return_to_sender@mann 002B              color_read_Clear@tmp 000A  
            start_initialization 32E2                    ??_convert_HSV 0010                      __end_of_ISR 003C  
               _turnRight90Delay 00C6            __end_of_colour_to_key 194A               _forward_navigation 2124  
            color_read_Green@tmp 000A         ?_toggle_right_indicators 0001              ?_forward_navigation 0042  
              ??_headbuttReverse 001A          __end_of_initDCmotorsPWM 2D76           __end_of_fullSpeedAhead 297A  
                       ??___lmul 0009                         ??___wmul 0005                     card_green@mL 001C  
                   card_green@mR 001D                      __pdataBANK0 00BC                       scale_RGB@p 0032  
                    _card_orange 3142                      _card_yellow 2E04                   max_RGB@max_val 0005  
             turnRight@rightGear 0017             ??_forward_navigation 0046                ?_return_to_sender 0027  
                      ___flmul@a 0013                        ___flmul@b 000F                      __pbssCOMRAM 005A  
                  __pcstackBANK0 009C               ??_return_to_sender 0029                     card_white@mL 001C  
                   card_white@mR 001D               return_to_sender@mL 0027               return_to_sender@mR 0028  
                convert_HSV@temp 0024      __end_of_toggle_brake_lights 38C8              __end_of_convert_HSV 14E6  
              turnLeft@rightGear 0017                        _card_blue 327A                        _card_cyan 3212  
                      _card_pink 2E84     __end_of_toggle_tricolour_LED 28C0                 ___lwdiv@dividend 0007  
                   ?_Timer0_init 0001                      ?_stop_timer 0001                      ?_turnLeft90 0018  
                ?_fullSpeedAhead 0013                        __pintcode 0008                         ?___flmul 000F  
                       ?___fltol 0028                         ?___lldiv 0001                         ?___lwdiv 0007  
                _turningLeftGear 0053             I2C_2_Master_Read@ack 0003             I2C_2_Master_Read@tmp 0004  
                       ?_max_RGB 0001                         ?_min_RGB 0001                      __smallconst 0E00  
                  ?_turnRight135 0018                _I2C_2_Master_Idle 37E4                _I2C_2_Master_Init 37BA  
              _I2C_2_Master_Read 355C                _I2C_2_Master_Stop 39A6                ?_fullSpeedReverse 0013  
             ?_I2C_2_Master_Idle 0001          ?_toggle_left_indicators 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 000F            __end_of_squareReverse 3612  
             ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000B               pick_card@backtrack 0023  
                  _headbuttDelay 00BE         initDCmotorsPWM@PWMperiod 0001                     ??_card_green 001F  
             ??_fullSpeedReverse 0015                        _scale_RGB 2722                        _rampDelay 0058  
                   ??_card_white 001E                        _pick_card 2626               card_cyan@backtrack 001E  
                   ??_getRGBCval 000D              ??_I2C_2_Master_Idle 0001              ??_I2C_2_Master_Init 0001  
            ??_I2C_2_Master_Read 0002                   ___wmul@product 0005                         _LATAbits 0F79  
                     ?_card_blue 001C              ??_I2C_2_Master_Stop 0002                         _LATCbits 0F7B  
                     ?_card_cyan 001C                         _LATDbits 0F7C                         _LATEbits 0F7D  
                       _LATFbits 0F7E                         _LATGbits 0F7F                       ?_card_pink 001C  
                       _LATHbits 0F80                         _PIE0bits 0E29                    ??_reset_timer 0003  
                    turnRight@mL 0013                      turnRight@mR 0014                         i2u163_40 001A  
                      _lost_flag 005B                         i2u163_41 0016                         i2u164_40 002A  
                       i2u164_41 0026                         _PIR0bits 0E33                         _PIR4bits 0E37  
               ?_initDCmotorsPWM 0001                         _SSP2CON2 0EDA                         _SSP2STAT 0ED8  
                      _returning 005D               __end_of_card_green 3212        __end_of_I2C_2_Master_Idle 380C  
      __end_of_I2C_2_Master_Init 37E4        __end_of_I2C_2_Master_Read 359E                ___wmul@multiplier 0001  
             __end_of_card_white 3880                   ??_turnRight135 001A        __end_of_I2C_2_Master_Stop 39B0  
                   setMotorPWM@m 000E      I2C_2_Master_Write@data_byte 0002               __end_of_getRGBCval 3396  
 __end_of_toggle_left_indicators 3908                ??_color_read_Blue 0007                      _convert_HSV 0E1A  
                main@RGBC_colour 00B4                        _turnRight 297A                ___lmul@multiplier 0001  
                      copy_data0 32F6                        copy_data1 3316                       ?_scale_RGB 0032  
                     ?_pick_card 0021               card_pink@backtrack 001E    __end_of_I2C_2_Master_RepStart 39A6  
             color_read_Blue@tmp 000A              __end_of_setMotorPWM 23E0                     ??_initUSART4 0001  
              turnRight@leftGear 0016                         __Hrparam 0000                 _toggle_main_beam 3834  
                    card_blue@mL 001C                      card_blue@mR 001D                         __Lrparam 0000  
                 wait_for_wall@p 000D                      card_cyan@mL 001C                      card_cyan@mR 001D  
                   _sample_count 0059                 turnLeft@leftGear 0016                      card_pink@mL 001C  
                    card_pink@mR 001D              __end_of_reset_timer 3990                    _wait_for_wall 34D6  
                 turnRight135@mL 0018                   turnRight135@mR 0019                    turnLeft135@mL 0018  
                  turnLeft135@mR 0019                     ??_read_timer 0003                     ??_read_trail 0004  
                 convert_HSV@hue 001E                   convert_HSV@sat 001C                       _ANSELDbits 0EA7  
                     _ANSELFbits 0EB4                    ??_start_timer 0001                         _card_red 30DA  
                       ___xxtofl 1F70                       _T0CON0bits 0FD5                       _T0CON1bits 0FD6  
           _toggle_tricolour_LED 27F8                  ___lwdiv@divisor 0009               __end_of_initUSART4 3946  
                ___lwdiv@counter 000D                       ?_turnRight 0013                         __ptext10 39BA  
                       __ptext11 2722                         __ptext20 2E84                         __ptext12 1F70  
                       __ptext21 35D8                         __ptext13 2520                         __ptext30 327A  
                       __ptext22 3142                         __ptext14 194A                         __ptext31 36F6  
                       __ptext23 31AA                         __ptext15 3946                         __ptext40 228C  
                       __ptext32 38A6                         __ptext24 3686                         __ptext16 2626  
                       __ptext41 3880                         __ptext33 2AEA                         __ptext25 36BE  
                       __ptext17 2E04                         __ptext50 3396                         __ptext42 2FFC  
                       __ptext34 351A                         __ptext26 3212                         __ptext18 385A  
                       __ptext51 33E6                         __ptext43 0E1A                         __ptext35 2A32  
                       __ptext27 3612                         __ptext19 30DA                         __ptext60 39A6  
                       __ptext52 3436                         __ptext44 2F04                         __ptext36 38C8  
                       __ptext28 297A                         __ptext61 39B0                         __ptext53 3486  
                       __ptext45 2F80                         __ptext37 38E8                         __ptext29 364C  
                       __ptext62 37E4                         __ptext54 399C                         __ptext46 3070  
                       __ptext38 2D76                         __ptext63 37BA                         __ptext55 355C  
                       __ptext47 14E6                         __ptext39 28C0                         __ptext64 3762  
                       __ptext56 2BA0                         __ptext48 1D74                         __ptext65 380C  
                       __ptext57 372E                         __ptext49 3340                         __ptext66 39BE  
                       __ptext58 3908                         __ptext67 3984                         __ptext59 3978  
                       __ptext68 3990                      getRGBCval@p 000C                     _SSP2CON1bits 0ED9  
                _headbuttReverse 36F6                     _SSP2CON2bits 0EDA                      ??_card_blue 001F  
                    ??_card_cyan 001F                      ??_card_pink 001F         fullSpeedReverse@leftGear 0016  
                     turnLeft@mL 0013                       turnLeft@mR 0014           forward_navigation@mann 004A  
             __end_of_read_timer 395C               __end_of_read_trail 35D8                    ??_turnLeft135 001A  
                       isa$xinst 0000                       _RC4STAbits 0EE7                         int$flags 005E  
                  ??_turnRight90 001A                   ?_wait_for_wall 000D                         _turnLeft 2A32  
                       max_RGB@p 0001                     ?_card_orange 001C                         min_RGB@p 0001  
                   ?_card_yellow 001C                       _INTCONbits 0FF2            ?_toggle_tricolour_LED 0001  
                  ??_write_timer 0002                    ??_write_trail 0003                      _setMotorPWM 228C  
                    ??_scale_RGB 0033              __end_of_start_timer 39C2                         intlevel2 0000  
                  turnRight90@mL 0018                    turnRight90@mR 0019                      ??_pick_card 0025  
        fullSpeedAhead@rightGear 0017                     _topGearRight 0056                _manoeuvre_pointer 004F  
               ___lldiv@dividend 0001                 ??_fullSpeedAhead 0015             __end_of_turnRight135 364C  
               colour_to_key@key 0005                   main@HSV_colour 009C                      _reset_timer 3984  
                   ??_stop_timer 0001                     ??_turnLeft90 001A                 _color_click_init 372E  
            __end_of_turnLeft135 3686                      _topGearLeft 0057                       _SSP2DATPPS 0E1D  
               ___lldiv@quotient 0009          __end_of_headbuttReverse 372E                       _SSP2CLKPPS 0E1C  
            __end_of_turnRight90 36BE                  _trail_manoeuvre 0060                      ??_turnRight 0015  
                    _return_flag 005C               __end_of_stop_timer 39BE               __end_of_turnLeft90 36F6  
                _manoeuvre_count 005A                       _TX4STAbits 0EE8              __end_of_write_timer 399C  
            __end_of_write_trail 37BA                    ?_average_RGBC 000E                    read_trail@man 0003  
