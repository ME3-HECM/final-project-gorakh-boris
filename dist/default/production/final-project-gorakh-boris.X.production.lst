

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 15:24:31 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=2
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    96                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    97                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    98                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    99                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   100                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   101   000000                     
   102                           ; Generated 21/07/2023 GMT
   103                           ; 
   104                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   105                           ; All rights reserved.
   106                           ; 
   107                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   108                           ; 
   109                           ; Redistribution and use in source and binary forms, with or without modification, are
   110                           ; permitted provided that the following conditions are met:
   111                           ; 
   112                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   113                           ;        conditions and the following disclaimer.
   114                           ; 
   115                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   116                           ;        of conditions and the following disclaimer in the documentation and/or other
   117                           ;        materials provided with the distribution. Publication is not required when
   118                           ;        this file is used in an embedded application.
   119                           ; 
   120                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   121                           ;        software without specific prior written permission.
   122                           ; 
   123                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   124                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   125                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   126                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   127                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   128                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   129                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   130                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   131                           ; 
   132                           ; 
   133                           ; Code-generator required, PIC18F67K40 Definitions
   134                           ; 
   135                           ; SFR Addresses
   136   000000                     
   137                           	psect	idataBANK0
   138   0040F8                     __pidataBANK0:
   139                           	callstack 0
   140                           
   141                           ;initializer for _manoeuvre_pointer
   142   0040F8  A6                 	db	low _trail_manoeuvre
   143   0040F9  01                 	db	high _trail_manoeuvre
   144                           
   145                           ;initializer for _timer_low_pointer
   146   0040FA  BA                 	db	low _trail_timer_low
   147   0040FB  01                 	db	high _trail_timer_low
   148                           
   149                           ;initializer for _timer_high_pointer
   150   0040FC  CE                 	db	low _trail_timer_high
   151   0040FD  01                 	db	high _trail_timer_high
   152                           
   153                           ;initializer for _squareDelay
   154   0040FE  0988               	dw	2440
   155                           
   156                           ;initializer for _headbuttDelay
   157   004100  0334               	dw	820
   158                           
   159                           ;initializer for _turn180Delay
   160   004102  0190               	dw	400
   161                           
   162                           ;initializer for _turnRight135Delay
   163   004104  0106               	dw	262
   164                           
   165                           ;initializer for _turnLeft135Delay
   166   004106  00FA               	dw	250
   167                           
   168                           ;initializer for _turnRight90Delay
   169   004108  006C               	dw	108
   170                           
   171                           ;initializer for _turnLeft90Delay
   172   00410A  0054               	dw	84
   173                           
   174                           ;initializer for _wall_threshold_clear
   175   00410C  0032               	dw	50
   176                           
   177                           ;initializer for _turningRightGear
   178   00410E  28                 	db	40
   179                           
   180                           ;initializer for _turningLeftGear
   181   00410F  28                 	db	40
   182                           
   183                           ;initializer for _bottomGearRight
   184   004110  15                 	db	21
   185                           
   186                           ;initializer for _bottomGearLeft
   187   004111  14                 	db	20
   188                           
   189                           ;initializer for _topGearRight
   190   004112  14                 	db	20
   191                           
   192                           ;initializer for _topGearLeft
   193   004113  14                 	db	20
   194                           
   195                           ;initializer for _rampDelay
   196   004114  08                 	db	8
   197                           
   198                           ;initializer for _sample_count
   199   004115  14                 	db	20
   200   000000                     _TMR0H	set	4052
   201   000000                     _RC4STAbits	set	3815
   202   000000                     _SP4BRGH	set	3814
   203   000000                     _LATEbits	set	3965
   204   000000                     _TRISEbits	set	3973
   205   000000                     _LATGbits	set	3967
   206   000000                     _TRISGbits	set	3975
   207   000000                     _LATFbits	set	3966
   208   000000                     _LATHbits	set	3968
   209   000000                     _TRISFbits	set	3974
   210   000000                     _TRISHbits	set	3976
   211   000000                     _SSP2CON2bits	set	3802
   212   000000                     _RX4PPS	set	3605
   213   000000                     _SSP2CLKPPS	set	3612
   214   000000                     _SSP2DATPPS	set	3613
   215   000000                     _RC7PPS	set	3689
   216   000000                     _RE2PPS	set	3700
   217   000000                     _LATAbits	set	3961
   218   000000                     _LATDbits	set	3964
   219   000000                     _TRISDbits	set	3972
   220   000000                     _PORTFbits	set	3982
   221   000000                     _T2PR	set	4028
   222   000000                     _T2CONbits	set	4029
   223   000000                     _CCPR2H	set	4006
   224   000000                     _CCPR1H	set	4010
   225   000000                     _TRISCbits	set	3971
   226   000000                     _TRISAbits	set	3969
   227   000000                     _LATCbits	set	3963
   228   000000                     _RE4PPS	set	3702
   229   000000                     _RG6PPS	set	3720
   230   000000                     _RD5PPS	set	3695
   231   000000                     _ANSELDbits	set	3751
   232   000000                     _SSP2ADD	set	3798
   233   000000                     _SSP2CON1bits	set	3801
   234   000000                     _CCPR4H	set	3873
   235   000000                     _CCPR3H	set	3877
   236   000000                     _TMR0L	set	4051
   237   000000                     _T0CON0bits	set	4053
   238   000000                     _T0CON1bits	set	4054
   239   000000                     _T2CLKCONbits	set	4031
   240   000000                     _T2HLTbits	set	4030
   241   000000                     _CCP1CONbits	set	4011
   242   000000                     _CCPTMRS0bits	set	4013
   243   000000                     _CCP2CONbits	set	4007
   244   000000                     _CCP3CONbits	set	3878
   245   000000                     _CCP4CONbits	set	3874
   246   000000                     _TX4REG	set	3812
   247   000000                     _SP4BRGL	set	3813
   248   000000                     _TX4STAbits	set	3816
   249   000000                     _BAUD4CONbits	set	3817
   250   000000                     _SSP2CON2	set	3802
   251   000000                     _SSP2STAT	set	3800
   252   000000                     _ANSELFbits	set	3764
   253   000000                     _SSP2BUF	set	3797
   254   000000                     _PIE0bits	set	3625
   255   000000                     _PIR4bits	set	3639
   256   000000                     _RC0PPS	set	3682
   257   000000                     _RD6PPS	set	3696
   258   000000                     _INTCONbits	set	4082
   259   000000                     _PIR0bits	set	3635
   260                           
   261                           	psect	smallconst
   262   000E00                     __psmallconst:
   263                           	callstack 0
   264   000E00  00                 	db	0
   265   000E01                     STR_5:
   266                           
   267                           ; BSR set to: 14
   268   000E01  25                 	db	37
   269   000E02  75                 	db	117	;'u'
   270   000E03  20                 	db	32
   271   000E04  25                 	db	37
   272   000E05  75                 	db	117	;'u'
   273   000E06  20                 	db	32
   274   000E07  25                 	db	37
   275   000E08  75                 	db	117	;'u'
   276   000E09  20                 	db	32
   277   000E0A  25                 	db	37
   278   000E0B  75                 	db	117	;'u'
   279   000E0C  20                 	db	32
   280   000E0D  0D                 	db	13
   281   000E0E  00                 	db	0
   282   000E0F                     STR_1:
   283                           
   284                           ; BSR set to: 14
   285   000E0F  25                 	db	37
   286   000E10  64                 	db	100	;'d'
   287   000E11  20                 	db	32
   288   000E12  0D                 	db	13
   289   000E13  00                 	db	0
   290   000E14                     STR_2:
   291                           
   292                           ; BSR set to: 14
   293   000E14  25                 	db	37
   294   000E15  64                 	db	100	;'d'
   295   000E16  20                 	db	32
   296   000E17  00                 	db	0
   297   000E18  00                 	db	0	; dummy byte at the end
   298   000000                     
   299                           ; #config settings
   300                           
   301                           	psect	cinit
   302   003CFE                     __pcinit:
   303                           	callstack 0
   304   003CFE                     start_initialization:
   305                           	callstack 0
   306   003CFE                     __initialization:
   307                           	callstack 0
   308                           
   309                           ; Initialize objects allocated to BANK0 (30 bytes)
   310                           ; load TBLPTR registers with __pidataBANK0
   311   003CFE  0EF8               	movlw	low __pidataBANK0
   312   003D00  6EF6               	movwf	tblptrl,c
   313   003D02  0E40               	movlw	high __pidataBANK0
   314   003D04  6EF7               	movwf	tblptrh,c
   315   003D06  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   316   003D08  6EF8               	movwf	tblptru,c
   317   003D0A  EE00  F0AB         	lfsr	0,__pdataBANK0
   318   003D0E  EE10 F01E          	lfsr	1,30
   319   003D12                     copy_data0:
   320   003D12  0009               	tblrd		*+
   321   003D14  CFF5 FFEE          	movff	tablat,postinc0
   322   003D18  50E5               	movf	postdec1,w,c
   323   003D1A  50E1               	movf	fsr1l,w,c
   324   003D1C  E1FA               	bnz	copy_data0
   325                           
   326                           ; Clear objects allocated to BANK1 (62 bytes)
   327   003D1E  EE01  F0A4         	lfsr	0,__pbssBANK1
   328   003D22  0E3E               	movlw	62
   329   003D24                     clear_0:
   330   003D24  6AEE               	clrf	postinc0,c
   331   003D26  06E8               	decf	wreg,f,c
   332   003D28  E1FD               	bnz	clear_0
   333                           
   334                           ; Clear objects allocated to BANK0 (40 bytes)
   335   003D2A  EE00  F060         	lfsr	0,__pbssBANK0
   336   003D2E  0E28               	movlw	40
   337   003D30                     clear_1:
   338   003D30  6AEE               	clrf	postinc0,c
   339   003D32  06E8               	decf	wreg,f,c
   340   003D34  E1FD               	bnz	clear_1
   341                           
   342                           ; Clear objects allocated to COMRAM (1 bytes)
   343   003D36  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   344   003D38                     end_of_initialization:
   345                           	callstack 0
   346   003D38                     __end_of__initialization:
   347                           	callstack 0
   348   003D38  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   349   003D3A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   350   003D3C  0100               	movlb	0
   351   003D3E  EFE8  F012         	goto	_main	;jump to C main() function
   352                           
   353                           	psect	bssCOMRAM
   354   00005E                     __pbssCOMRAM:
   355                           	callstack 0
   356   00005E                     _returning:
   357                           	callstack 0
   358   00005E                     	ds	1
   359                           
   360                           	psect	bssBANK0
   361   000060                     __pbssBANK0:
   362                           	callstack 0
   363   000060                     _dbuf:
   364                           	callstack 0
   365   000060                     	ds	32
   366   000080                     _nout:
   367                           	callstack 0
   368   000080                     	ds	2
   369   000082                     _width:
   370                           	callstack 0
   371   000082                     	ds	2
   372   000084                     _prec:
   373                           	callstack 0
   374   000084                     	ds	2
   375   000086                     _flags:
   376                           	callstack 0
   377   000086                     	ds	1
   378   000087                     _return_flag:
   379                           	callstack 0
   380   000087                     	ds	1
   381                           
   382                           	psect	dataBANK0
   383   0000AB                     __pdataBANK0:
   384                           	callstack 0
   385   0000AB                     _manoeuvre_pointer:
   386                           	callstack 0
   387   0000AB                     	ds	2
   388   0000AD                     _timer_low_pointer:
   389                           	callstack 0
   390   0000AD                     	ds	2
   391   0000AF                     _timer_high_pointer:
   392                           	callstack 0
   393   0000AF                     	ds	2
   394   0000B1                     _squareDelay:
   395                           	callstack 0
   396   0000B1                     	ds	2
   397   0000B3                     _headbuttDelay:
   398                           	callstack 0
   399   0000B3                     	ds	2
   400   0000B5                     _turn180Delay:
   401                           	callstack 0
   402   0000B5                     	ds	2
   403   0000B7                     _turnRight135Delay:
   404                           	callstack 0
   405   0000B7                     	ds	2
   406   0000B9                     _turnLeft135Delay:
   407                           	callstack 0
   408   0000B9                     	ds	2
   409   0000BB                     _turnRight90Delay:
   410                           	callstack 0
   411   0000BB                     	ds	2
   412   0000BD                     _turnLeft90Delay:
   413                           	callstack 0
   414   0000BD                     	ds	2
   415   0000BF                     _wall_threshold_clear:
   416                           	callstack 0
   417   0000BF                     	ds	2
   418   0000C1                     _turningRightGear:
   419                           	callstack 0
   420   0000C1                     	ds	1
   421   0000C2                     _turningLeftGear:
   422                           	callstack 0
   423   0000C2                     	ds	1
   424   0000C3                     _bottomGearRight:
   425                           	callstack 0
   426   0000C3                     	ds	1
   427   0000C4                     _bottomGearLeft:
   428                           	callstack 0
   429   0000C4                     	ds	1
   430   0000C5                     _topGearRight:
   431                           	callstack 0
   432   0000C5                     	ds	1
   433   0000C6                     _topGearLeft:
   434                           	callstack 0
   435   0000C6                     	ds	1
   436   0000C7                     _rampDelay:
   437                           	callstack 0
   438   0000C7                     	ds	1
   439   0000C8                     _sample_count:
   440                           	callstack 0
   441   0000C8                     	ds	1
   442                           
   443                           	psect	bssBANK1
   444   0001A4                     __pbssBANK1:
   445                           	callstack 0
   446   0001A4                     _manoeuvre_count:
   447                           	callstack 0
   448   0001A4                     	ds	1
   449   0001A5                     _lost_flag:
   450                           	callstack 0
   451   0001A5                     	ds	1
   452   0001A6                     _trail_manoeuvre:
   453                           	callstack 0
   454   0001A6                     	ds	20
   455   0001BA                     _trail_timer_low:
   456                           	callstack 0
   457   0001BA                     	ds	20
   458   0001CE                     _trail_timer_high:
   459                           	callstack 0
   460   0001CE                     	ds	20
   461                           
   462                           	psect	cstackBANK1
   463   000100                     __pcstackBANK1:
   464                           	callstack 0
   465   000100                     sendArrayCharSerial4@tempStr:
   466                           	callstack 0
   467                           
   468                           ; 161 bytes @ 0x0
   469   000100                     	ds	161
   470   0001A1                     sendArrayCharSerial4@index:
   471                           	callstack 0
   472                           
   473                           ; 1 bytes @ 0xA1
   474   0001A1                     	ds	1
   475   0001A2                     sendArrayCharSerial4@i:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0xA2
   479   0001A2                     	ds	2
   480                           
   481                           	psect	cstackBANK0
   482   000088                     __pcstackBANK0:
   483                           	callstack 0
   484   000088                     ??_main:
   485                           
   486                           ; 1 bytes @ 0x0
   487   000088                     	ds	2
   488   00008A                     main@i:
   489                           	callstack 0
   490                           
   491                           ; 1 bytes @ 0x2
   492   00008A                     	ds	1
   493   00008B                     main@HSV_colour:
   494                           	callstack 0
   495                           
   496                           ; 6 bytes @ 0x3
   497   00008B                     	ds	6
   498   000091                     main@motorL:
   499                           	callstack 0
   500                           
   501                           ; 9 bytes @ 0x9
   502   000091                     	ds	9
   503   00009A                     main@motorR:
   504                           	callstack 0
   505                           
   506                           ; 9 bytes @ 0x12
   507   00009A                     	ds	9
   508   0000A3                     main@RGBC_colour:
   509                           	callstack 0
   510                           
   511                           ; 8 bytes @ 0x1B
   512   0000A3                     	ds	8
   513                           
   514                           	psect	cstackCOMRAM
   515   000001                     __pcstackCOMRAM:
   516                           	callstack 0
   517   000001                     ??_toggle_tricolour_LED:
   518   000001                     ??_I2C_2_Master_Idle:
   519   000001                     ?_max_RGB:
   520                           	callstack 0
   521   000001                     ?_min_RGB:
   522                           	callstack 0
   523   000001                     ?___wmul:
   524                           	callstack 0
   525   000001                     ?___awdiv:
   526                           	callstack 0
   527   000001                     ?___awmod:
   528                           	callstack 0
   529   000001                     ?___lwmod:
   530                           	callstack 0
   531   000001                     ?___lmul:
   532                           	callstack 0
   533   000001                     ?___lldiv:
   534                           	callstack 0
   535   000001                     ?___xxtofl:
   536                           	callstack 0
   537   000001                     max_RGB@p:
   538                           	callstack 0
   539   000001                     min_RGB@p:
   540                           	callstack 0
   541   000001                     colour_to_key@p1:
   542                           	callstack 0
   543   000001                     sendCharSerial4@charToSend:
   544                           	callstack 0
   545   000001                     read_timer@tH:
   546                           	callstack 0
   547   000001                     write_timer@tL:
   548                           	callstack 0
   549   000001                     read_trail@tH:
   550                           	callstack 0
   551   000001                     write_trail@tL:
   552                           	callstack 0
   553   000001                     initDCmotorsPWM@PWMperiod:
   554                           	callstack 0
   555   000001                     ___wmul@multiplier:
   556                           	callstack 0
   557   000001                     ___awdiv@dividend:
   558                           	callstack 0
   559   000001                     ___awmod@dividend:
   560                           	callstack 0
   561   000001                     ___lwmod@dividend:
   562                           	callstack 0
   563   000001                     fputc@c:
   564                           	callstack 0
   565   000001                     ___lmul@multiplier:
   566                           	callstack 0
   567   000001                     ___lldiv@dividend:
   568                           	callstack 0
   569   000001                     ___xxtofl@val:
   570                           	callstack 0
   571                           
   572                           ; 4 bytes @ 0x0
   573   000001                     	ds	1
   574   000002                     ??_I2C_2_Master_Read:
   575   000002                     colour_to_key@p2:
   576                           	callstack 0
   577   000002                     I2C_2_Master_Write@data_byte:
   578                           	callstack 0
   579   000002                     read_timer@tL:
   580                           	callstack 0
   581   000002                     write_timer@tH:
   582                           	callstack 0
   583   000002                     read_trail@tL:
   584                           	callstack 0
   585   000002                     write_trail@man:
   586                           	callstack 0
   587   000002                     sendStringSerial4@string:
   588                           	callstack 0
   589                           
   590                           ; 2 bytes @ 0x1
   591   000002                     	ds	1
   592   000003                     color_writetoaddr@value:
   593                           	callstack 0
   594   000003                     I2C_2_Master_Read@ack:
   595                           	callstack 0
   596   000003                     read_trail@man:
   597                           	callstack 0
   598   000003                     write_trail@tH:
   599                           	callstack 0
   600   000003                     fputc@fp:
   601                           	callstack 0
   602   000003                     ___wmul@multiplicand:
   603                           	callstack 0
   604   000003                     ___awdiv@divisor:
   605                           	callstack 0
   606   000003                     ___awmod@divisor:
   607                           	callstack 0
   608   000003                     ___lwmod@divisor:
   609                           	callstack 0
   610                           
   611                           ; 2 bytes @ 0x2
   612   000003                     	ds	1
   613   000004                     ??_fputc:
   614   000004                     color_writetoaddr@address:
   615                           	callstack 0
   616   000004                     I2C_2_Master_Read@tmp:
   617                           	callstack 0
   618                           
   619                           ; 1 bytes @ 0x3
   620   000004                     	ds	1
   621   000005                     ??_color_click_init:
   622   000005                     ??___xxtofl:
   623   000005                     ?_color_read_Red:
   624                           	callstack 0
   625   000005                     ?_color_read_Green:
   626                           	callstack 0
   627   000005                     ?_color_read_Blue:
   628                           	callstack 0
   629   000005                     ?_color_read_Clear:
   630                           	callstack 0
   631   000005                     colour_to_key@key:
   632                           	callstack 0
   633   000005                     ___awdiv@counter:
   634                           	callstack 0
   635   000005                     ___awmod@counter:
   636                           	callstack 0
   637   000005                     ___lwmod@counter:
   638                           	callstack 0
   639   000005                     max_RGB@max_val:
   640                           	callstack 0
   641   000005                     min_RGB@min_val:
   642                           	callstack 0
   643   000005                     ___wmul@product:
   644                           	callstack 0
   645   000005                     ___lmul@multiplicand:
   646                           	callstack 0
   647   000005                     ___lldiv@divisor:
   648                           	callstack 0
   649                           
   650                           ; 4 bytes @ 0x4
   651   000005                     	ds	1
   652   000006                     ___awdiv@sign:
   653                           	callstack 0
   654   000006                     ___awmod@sign:
   655                           	callstack 0
   656                           
   657                           ; 1 bytes @ 0x5
   658   000006                     	ds	1
   659   000007                     ??_color_read_Red:
   660   000007                     ??_color_read_Green:
   661   000007                     ??_color_read_Blue:
   662   000007                     ??_color_read_Clear:
   663   000007                     ?_abs:
   664                           	callstack 0
   665   000007                     ?___lwdiv:
   666                           	callstack 0
   667   000007                     ___awdiv@quotient:
   668                           	callstack 0
   669   000007                     ___lwdiv@dividend:
   670                           	callstack 0
   671   000007                     abs@a:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x6
   675   000007                     	ds	2
   676   000009                     ??_abs:
   677   000009                     ___xxtofl@sign:
   678                           	callstack 0
   679   000009                     ___lwdiv@divisor:
   680                           	callstack 0
   681   000009                     ___lmul@product:
   682                           	callstack 0
   683   000009                     ___lldiv@quotient:
   684                           	callstack 0
   685                           
   686                           ; 4 bytes @ 0x8
   687   000009                     	ds	1
   688   00000A                     ___xxtofl@exp:
   689                           	callstack 0
   690   00000A                     color_read_Red@tmp:
   691                           	callstack 0
   692   00000A                     color_read_Green@tmp:
   693                           	callstack 0
   694   00000A                     color_read_Blue@tmp:
   695                           	callstack 0
   696   00000A                     color_read_Clear@tmp:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0x9
   700   00000A                     	ds	1
   701   00000B                     ___lwdiv@quotient:
   702                           	callstack 0
   703   00000B                     ___xxtofl@arg:
   704                           	callstack 0
   705                           
   706                           ; 4 bytes @ 0xA
   707   00000B                     	ds	1
   708   00000C                     getRGBCval@p:
   709                           	callstack 0
   710                           
   711                           ; 1 bytes @ 0xB
   712   00000C                     	ds	1
   713   00000D                     wait_for_wall@p:
   714                           	callstack 0
   715   00000D                     ___lldiv@counter:
   716                           	callstack 0
   717   00000D                     ___lwdiv@counter:
   718                           	callstack 0
   719                           
   720                           ; 1 bytes @ 0xC
   721   00000D                     	ds	1
   722   00000E                     ?_vfpfcnvrt:
   723                           	callstack 0
   724   00000E                     average_RGBC@p:
   725                           	callstack 0
   726   00000E                     wait_for_wall@loss:
   727                           	callstack 0
   728   00000E                     convert_HSV@p1:
   729                           	callstack 0
   730   00000E                     setMotorPWM@m:
   731                           	callstack 0
   732   00000E                     vfpfcnvrt@fp:
   733                           	callstack 0
   734                           
   735                           ; 1 bytes @ 0xD
   736   00000E                     	ds	1
   737   00000F                     ??_average_RGBC:
   738   00000F                     ??_setMotorPWM:
   739   00000F                     ?___flmul:
   740                           	callstack 0
   741   00000F                     convert_HSV@p2:
   742                           	callstack 0
   743   00000F                     vfpfcnvrt@fmt:
   744                           	callstack 0
   745   00000F                     ___flmul@b:
   746                           	callstack 0
   747                           
   748                           ; 4 bytes @ 0xE
   749   00000F                     	ds	1
   750   000010                     ??_convert_HSV:
   751   000010                     vfpfcnvrt@ap:
   752                           	callstack 0
   753                           
   754                           ; 1 bytes @ 0xF
   755   000010                     	ds	1
   756   000011                     ??_vfpfcnvrt:
   757   000011                     average_RGBC@i:
   758                           	callstack 0
   759   000011                     setMotorPWM@posDuty:
   760                           	callstack 0
   761                           
   762                           ; 1 bytes @ 0x10
   763   000011                     	ds	1
   764   000012                     setMotorPWM@negDuty:
   765                           	callstack 0
   766   000012                     average_RGBC@temp_R:
   767                           	callstack 0
   768                           
   769                           ; 4 bytes @ 0x11
   770   000012                     	ds	1
   771   000013                     stop@mL:
   772                           	callstack 0
   773   000013                     turnLeft@mL:
   774                           	callstack 0
   775   000013                     turnRight@mL:
   776                           	callstack 0
   777   000013                     fullSpeedAhead@mL:
   778                           	callstack 0
   779   000013                     fullSpeedReverse@mL:
   780                           	callstack 0
   781   000013                     vfpfcnvrt@done:
   782                           	callstack 0
   783   000013                     ___flmul@a:
   784                           	callstack 0
   785                           
   786                           ; 4 bytes @ 0x12
   787   000013                     	ds	1
   788   000014                     stop@mR:
   789                           	callstack 0
   790   000014                     turnLeft@mR:
   791                           	callstack 0
   792   000014                     turnRight@mR:
   793                           	callstack 0
   794   000014                     fullSpeedAhead@mR:
   795                           	callstack 0
   796   000014                     fullSpeedReverse@mR:
   797                           	callstack 0
   798   000014                     vfpfcnvrt@cnt:
   799                           	callstack 0
   800                           
   801                           ; 2 bytes @ 0x13
   802   000014                     	ds	1
   803   000015                     ??_stop:
   804   000015                     ??_turnLeft:
   805   000015                     ??_turnRight:
   806   000015                     ??_fullSpeedAhead:
   807   000015                     ??_fullSpeedReverse:
   808                           
   809                           ; 1 bytes @ 0x14
   810   000015                     	ds	1
   811   000016                     turnLeft@leftGear:
   812                           	callstack 0
   813   000016                     turnRight@leftGear:
   814                           	callstack 0
   815   000016                     fullSpeedAhead@leftGear:
   816                           	callstack 0
   817   000016                     fullSpeedReverse@leftGear:
   818                           	callstack 0
   819   000016                     vfpfcnvrt@cp:
   820                           	callstack 0
   821   000016                     average_RGBC@temp_G:
   822                           	callstack 0
   823                           
   824                           ; 4 bytes @ 0x15
   825   000016                     	ds	1
   826   000017                     ??___flmul:
   827   000017                     turnLeft@rightGear:
   828                           	callstack 0
   829   000017                     turnRight@rightGear:
   830                           	callstack 0
   831   000017                     fullSpeedAhead@rightGear:
   832                           	callstack 0
   833   000017                     fullSpeedReverse@rightGear:
   834                           	callstack 0
   835   000017                     vfpfcnvrt@convarg:
   836                           	callstack 0
   837                           
   838                           ; 4 bytes @ 0x16
   839   000017                     	ds	1
   840   000018                     turnLeft90@mL:
   841                           	callstack 0
   842   000018                     turnRight90@mL:
   843                           	callstack 0
   844   000018                     turnLeft135@mL:
   845                           	callstack 0
   846   000018                     turnRight135@mL:
   847                           	callstack 0
   848   000018                     UTurn@mL:
   849                           	callstack 0
   850   000018                     headbuttReverse@mL:
   851                           	callstack 0
   852   000018                     squareReverse@mL:
   853                           	callstack 0
   854   000018                     convert_HSV@sat_scale:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x17
   858   000018                     	ds	1
   859   000019                     turnLeft90@mR:
   860                           	callstack 0
   861   000019                     turnRight90@mR:
   862                           	callstack 0
   863   000019                     turnLeft135@mR:
   864                           	callstack 0
   865   000019                     turnRight135@mR:
   866                           	callstack 0
   867   000019                     UTurn@mR:
   868                           	callstack 0
   869   000019                     headbuttReverse@mR:
   870                           	callstack 0
   871   000019                     squareReverse@mR:
   872                           	callstack 0
   873                           
   874                           ; 1 bytes @ 0x18
   875   000019                     	ds	1
   876   00001A                     ??_turnLeft90:
   877   00001A                     ??_turnRight90:
   878   00001A                     ??_turnLeft135:
   879   00001A                     ??_turnRight135:
   880   00001A                     ??_UTurn:
   881   00001A                     ??_headbuttReverse:
   882   00001A                     ??_squareReverse:
   883   00001A                     convert_HSV@m:
   884                           	callstack 0
   885   00001A                     average_RGBC@temp_B:
   886                           	callstack 0
   887                           
   888                           ; 4 bytes @ 0x19
   889   00001A                     	ds	1
   890   00001B                     ___flmul@sign:
   891                           	callstack 0
   892   00001B                     vfpfcnvrt@c:
   893                           	callstack 0
   894                           
   895                           ; 1 bytes @ 0x1A
   896   00001B                     	ds	1
   897   00001C                     ?_vfprintf:
   898                           	callstack 0
   899   00001C                     card_red@mL:
   900                           	callstack 0
   901   00001C                     card_green@mL:
   902                           	callstack 0
   903   00001C                     card_blue@mL:
   904                           	callstack 0
   905   00001C                     card_yellow@mL:
   906                           	callstack 0
   907   00001C                     card_pink@mL:
   908                           	callstack 0
   909   00001C                     card_orange@mL:
   910                           	callstack 0
   911   00001C                     card_cyan@mL:
   912                           	callstack 0
   913   00001C                     card_white@mL:
   914                           	callstack 0
   915   00001C                     vfprintf@fp:
   916                           	callstack 0
   917   00001C                     convert_HSV@sat:
   918                           	callstack 0
   919   00001C                     ___flmul@grs:
   920                           	callstack 0
   921                           
   922                           ; 4 bytes @ 0x1B
   923   00001C                     	ds	1
   924   00001D                     card_red@mR:
   925                           	callstack 0
   926   00001D                     card_green@mR:
   927                           	callstack 0
   928   00001D                     card_blue@mR:
   929                           	callstack 0
   930   00001D                     card_yellow@mR:
   931                           	callstack 0
   932   00001D                     card_pink@mR:
   933                           	callstack 0
   934   00001D                     card_orange@mR:
   935                           	callstack 0
   936   00001D                     card_cyan@mR:
   937                           	callstack 0
   938   00001D                     card_white@mR:
   939                           	callstack 0
   940   00001D                     vfprintf@fmt:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x1C
   944   00001D                     	ds	1
   945   00001E                     card_red@backtrack:
   946                           	callstack 0
   947   00001E                     card_green@backtrack:
   948                           	callstack 0
   949   00001E                     card_blue@backtrack:
   950                           	callstack 0
   951   00001E                     card_yellow@backtrack:
   952                           	callstack 0
   953   00001E                     card_pink@backtrack:
   954                           	callstack 0
   955   00001E                     card_orange@backtrack:
   956                           	callstack 0
   957   00001E                     card_cyan@backtrack:
   958                           	callstack 0
   959   00001E                     vfprintf@ap:
   960                           	callstack 0
   961   00001E                     convert_HSV@hue:
   962                           	callstack 0
   963   00001E                     average_RGBC@temp_C:
   964                           	callstack 0
   965                           
   966                           ; 4 bytes @ 0x1D
   967   00001E                     	ds	1
   968   00001F                     ??_card_red:
   969   00001F                     ??_card_green:
   970   00001F                     ??_card_blue:
   971   00001F                     ??_card_yellow:
   972   00001F                     ??_card_pink:
   973   00001F                     ??_card_orange:
   974   00001F                     ??_card_cyan:
   975   00001F                     vfprintf@cfmt:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0x1E
   979   00001F                     	ds	1
   980   000020                     ?_sprintf:
   981                           	callstack 0
   982   000020                     ___flmul@aexp:
   983                           	callstack 0
   984   000020                     sprintf@s:
   985                           	callstack 0
   986   000020                     convert_HSV@temp_614:
   987                           	callstack 0
   988                           
   989                           ; 4 bytes @ 0x1F
   990   000020                     	ds	1
   991   000021                     pick_card@mL:
   992                           	callstack 0
   993   000021                     ___flmul@bexp:
   994                           	callstack 0
   995                           
   996                           ; 1 bytes @ 0x20
   997   000021                     	ds	1
   998   000022                     pick_card@mR:
   999                           	callstack 0
  1000   000022                     sprintf@fmt:
  1001                           	callstack 0
  1002   000022                     ___flmul@prod:
  1003                           	callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x21
  1006   000022                     	ds	1
  1007   000023                     pick_card@backtrack:
  1008                           	callstack 0
  1009                           
  1010                           ; 1 bytes @ 0x22
  1011   000023                     	ds	1
  1012   000024                     pick_card@key:
  1013                           	callstack 0
  1014   000024                     convert_HSV@temp:
  1015                           	callstack 0
  1016                           
  1017                           ; 4 bytes @ 0x23
  1018   000024                     	ds	1
  1019   000025                     ??_pick_card:
  1020                           
  1021                           ; 1 bytes @ 0x24
  1022   000025                     	ds	1
  1023   000026                     ___flmul@temp:
  1024                           	callstack 0
  1025                           
  1026                           ; 2 bytes @ 0x25
  1027   000026                     	ds	2
  1028   000028                     ?___fltol:
  1029                           	callstack 0
  1030   000028                     convert_HSV@temp_610:
  1031                           	callstack 0
  1032   000028                     ___fltol@f1:
  1033                           	callstack 0
  1034                           
  1035                           ; 4 bytes @ 0x27
  1036   000028                     	ds	3
  1037   00002B                     sprintf@ret:
  1038                           	callstack 0
  1039                           
  1040                           ; 2 bytes @ 0x2A
  1041   00002B                     	ds	1
  1042   00002C                     ??___fltol:
  1043   00002C                     convert_HSV@temp_611:
  1044                           	callstack 0
  1045                           
  1046                           ; 4 bytes @ 0x2B
  1047   00002C                     	ds	1
  1048   00002D                     sprintf@ap:
  1049                           	callstack 0
  1050                           
  1051                           ; 1 bytes @ 0x2C
  1052   00002D                     	ds	1
  1053   00002E                     sprintf@f:
  1054                           	callstack 0
  1055                           
  1056                           ; 12 bytes @ 0x2D
  1057   00002E                     	ds	2
  1058   000030                     ___fltol@sign1:
  1059                           	callstack 0
  1060   000030                     convert_HSV@temp_612:
  1061                           	callstack 0
  1062                           
  1063                           ; 4 bytes @ 0x2F
  1064   000030                     	ds	1
  1065   000031                     ___fltol@exp1:
  1066                           	callstack 0
  1067                           
  1068                           ; 1 bytes @ 0x30
  1069   000031                     	ds	1
  1070   000032                     scale_RGB@p:
  1071                           	callstack 0
  1072                           
  1073                           ; 1 bytes @ 0x31
  1074   000032                     	ds	1
  1075   000033                     ??_scale_RGB:
  1076                           
  1077                           ; 1 bytes @ 0x32
  1078   000033                     	ds	1
  1079   000034                     convert_HSV@temp_613:
  1080                           	callstack 0
  1081                           
  1082                           ; 4 bytes @ 0x33
  1083   000034                     	ds	4
  1084   000038                     convert_HSV@temp_609:
  1085                           	callstack 0
  1086                           
  1087                           ; 4 bytes @ 0x37
  1088   000038                     	ds	2
  1089   00003A                     sendRGBCvalSerial4@col_val:
  1090                           	callstack 0
  1091   00003A                     sendHSVvalSerial4@col_val:
  1092                           	callstack 0
  1093   00003A                     sendIntSerial4@integer:
  1094                           	callstack 0
  1095   00003A                     sendArrayCharSerial4@arr:
  1096                           	callstack 0
  1097                           
  1098                           ; 2 bytes @ 0x39
  1099   00003A                     	ds	1
  1100   00003B                     sendHSVvalSerial4@tempStr:
  1101                           	callstack 0
  1102   00003B                     sendRGBCvalSerial4@tempStr:
  1103                           	callstack 0
  1104                           
  1105                           ; 26 bytes @ 0x3A
  1106   00003B                     	ds	1
  1107   00003C                     ??_sendArrayCharSerial4:
  1108   00003C                     convert_HSV@hue_scale:
  1109                           	callstack 0
  1110   00003C                     sendIntSerial4@string:
  1111                           	callstack 0
  1112                           
  1113                           ; 17 bytes @ 0x3B
  1114   00003C                     	ds	2
  1115   00003E                     convert_HSV@M:
  1116                           	callstack 0
  1117                           
  1118                           ; 2 bytes @ 0x3D
  1119   00003E                     	ds	2
  1120   000040                     convert_HSV@C:
  1121                           	callstack 0
  1122                           
  1123                           ; 2 bytes @ 0x3F
  1124   000040                     	ds	13
  1125   00004D                     return_to_sender@mL:
  1126                           	callstack 0
  1127                           
  1128                           ; 1 bytes @ 0x4C
  1129   00004D                     	ds	1
  1130   00004E                     return_to_sender@mR:
  1131                           	callstack 0
  1132                           
  1133                           ; 1 bytes @ 0x4D
  1134   00004E                     	ds	1
  1135   00004F                     return_to_sender@timerH:
  1136                           	callstack 0
  1137                           
  1138                           ; 1 bytes @ 0x4E
  1139   00004F                     	ds	1
  1140   000050                     return_to_sender@timerL:
  1141                           	callstack 0
  1142                           
  1143                           ; 1 bytes @ 0x4F
  1144   000050                     	ds	1
  1145   000051                     return_to_sender@mann:
  1146                           	callstack 0
  1147                           
  1148                           ; 1 bytes @ 0x50
  1149   000051                     	ds	4
  1150   000055                     forward_navigation@mL:
  1151                           	callstack 0
  1152                           
  1153                           ; 1 bytes @ 0x54
  1154   000055                     	ds	1
  1155   000056                     forward_navigation@mR:
  1156                           	callstack 0
  1157                           
  1158                           ; 1 bytes @ 0x55
  1159   000056                     	ds	1
  1160   000057                     forward_navigation@p1:
  1161                           	callstack 0
  1162                           
  1163                           ; 1 bytes @ 0x56
  1164   000057                     	ds	1
  1165   000058                     forward_navigation@p2:
  1166                           	callstack 0
  1167                           
  1168                           ; 1 bytes @ 0x57
  1169   000058                     	ds	1
  1170   000059                     ??_forward_navigation:
  1171                           
  1172                           ; 1 bytes @ 0x58
  1173   000059                     	ds	2
  1174   00005B                     forward_navigation@timerH:
  1175                           	callstack 0
  1176                           
  1177                           ; 1 bytes @ 0x5A
  1178   00005B                     	ds	1
  1179   00005C                     forward_navigation@timerL:
  1180                           	callstack 0
  1181                           
  1182                           ; 1 bytes @ 0x5B
  1183   00005C                     	ds	1
  1184   00005D                     forward_navigation@mann:
  1185                           	callstack 0
  1186                           
  1187                           ; 1 bytes @ 0x5C
  1188   00005D                     	ds	1
  1189                           
  1190 ;;
  1191 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1192 ;;
  1193 ;; *************** function _main *****************
  1194 ;; Defined at:
  1195 ;;		line 29 in file "main.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;  i               1    2[BANK0 ] unsigned char 
  1200 ;;  motorR          9   18[BANK0 ] struct DC_motor
  1201 ;;  motorL          9    9[BANK0 ] struct DC_motor
  1202 ;;  RGBC_colour     8   27[BANK0 ] struct RGBC_val
  1203 ;;  HSV_colour      6    3[BANK0 ] struct HSV_val
  1204 ;;  PWMcycle        2    0        unsigned int 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1215 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1217 ;;      Totals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1218 ;;Total ram usage:       35 bytes
  1219 ;; Hardware stack levels required when called: 8
  1220 ;; This function calls:
  1221 ;;		_Timer0_init
  1222 ;;		_buggy_lights_init
  1223 ;;		_color_click_init
  1224 ;;		_forward_navigation
  1225 ;;		_initDCmotorsPWM
  1226 ;;		_initUSART4
  1227 ;;		_return_to_sender
  1228 ;; This function is called by:
  1229 ;;		Startup code after reset
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           	psect	text0
  1234   0025D0                     __ptext0:
  1235                           	callstack 0
  1236   0025D0                     _main:
  1237                           	callstack 23
  1238   0025D0                     
  1239                           ;main.c: 30:     struct RGBC_val RGBC_colour;;main.c: 31:         RGBC_colour.R = 0;
  1240   0025D0  0E00               	movlw	0
  1241   0025D2  0100               	movlb	0	; () banked
  1242   0025D4  6FA4               	movwf	(main@RGBC_colour+1)& (0+255),b
  1243   0025D6  0E00               	movlw	0
  1244   0025D8  6FA3               	movwf	main@RGBC_colour& (0+255),b
  1245                           
  1246                           ;main.c: 32:         RGBC_colour.G = 0;
  1247   0025DA  0E00               	movlw	0
  1248   0025DC  6FA6               	movwf	(main@RGBC_colour+3)& (0+255),b
  1249   0025DE  0E00               	movlw	0
  1250   0025E0  6FA5               	movwf	(main@RGBC_colour+2)& (0+255),b
  1251                           
  1252                           ;main.c: 33:         RGBC_colour.B = 0;
  1253   0025E2  0E00               	movlw	0
  1254   0025E4  6FA8               	movwf	(main@RGBC_colour+5)& (0+255),b
  1255   0025E6  0E00               	movlw	0
  1256   0025E8  6FA7               	movwf	(main@RGBC_colour+4)& (0+255),b
  1257                           
  1258                           ;main.c: 34:         RGBC_colour.C = 0;
  1259   0025EA  0E00               	movlw	0
  1260   0025EC  6FAA               	movwf	(main@RGBC_colour+7)& (0+255),b
  1261   0025EE  0E00               	movlw	0
  1262   0025F0  6FA9               	movwf	(main@RGBC_colour+6)& (0+255),b
  1263                           
  1264                           ;main.c: 36:     struct HSV_val HSV_colour;;main.c: 37:         HSV_colour.H = 0;
  1265   0025F2  0E00               	movlw	0
  1266   0025F4  6F8C               	movwf	(main@HSV_colour+1)& (0+255),b
  1267   0025F6  0E00               	movlw	0
  1268   0025F8  6F8B               	movwf	main@HSV_colour& (0+255),b
  1269                           
  1270                           ;main.c: 38:         HSV_colour.S = 0;
  1271   0025FA  0E00               	movlw	0
  1272   0025FC  6F8E               	movwf	(main@HSV_colour+3)& (0+255),b
  1273   0025FE  0E00               	movlw	0
  1274   002600  6F8D               	movwf	(main@HSV_colour+2)& (0+255),b
  1275                           
  1276                           ;main.c: 39:         HSV_colour.V = 0;
  1277   002602  0E00               	movlw	0
  1278   002604  6F90               	movwf	(main@HSV_colour+5)& (0+255),b
  1279   002606  0E00               	movlw	0
  1280   002608  6F8F               	movwf	(main@HSV_colour+4)& (0+255),b
  1281                           
  1282                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 43:         motorL.power = 0;
  1283   00260A  0E00               	movlw	0
  1284   00260C  6F91               	movwf	main@motorL& (0+255),b
  1285                           
  1286                           ;main.c: 44:         motorL.direction = 1;
  1287   00260E  0E01               	movlw	1
  1288   002610  6F92               	movwf	(main@motorL+1)& (0+255),b
  1289                           
  1290                           ;main.c: 45:         motorL.brakemode = 1;
  1291   002612  0E01               	movlw	1
  1292   002614  6F93               	movwf	(main@motorL+2)& (0+255),b
  1293   002616                     
  1294                           ; BSR set to: 0
  1295                           ;main.c: 46:         motorL.PWMperiod = PWMcycle;
  1296   002616  0E00               	movlw	0
  1297   002618  6F95               	movwf	(main@motorL+4)& (0+255),b
  1298   00261A  0E63               	movlw	99
  1299   00261C  6F94               	movwf	(main@motorL+3)& (0+255),b
  1300   00261E                     
  1301                           ; BSR set to: 0
  1302                           ;main.c: 47:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1303   00261E  0EAA               	movlw	170
  1304   002620  6F96               	movwf	(main@motorL+5)& (0+255),b
  1305   002622  0E0F               	movlw	15
  1306   002624  6F97               	movwf	(main@motorL+6)& (0+255),b
  1307   002626                     
  1308                           ; BSR set to: 0
  1309                           ;main.c: 48:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1310   002626  0EA6               	movlw	166
  1311   002628  6F98               	movwf	(main@motorL+7)& (0+255),b
  1312   00262A  0E0F               	movlw	15
  1313   00262C  6F99               	movwf	(main@motorL+8)& (0+255),b
  1314                           
  1315                           ;main.c: 49:         motorR.power = 0;
  1316   00262E  0E00               	movlw	0
  1317   002630  6F9A               	movwf	main@motorR& (0+255),b
  1318                           
  1319                           ;main.c: 50:         motorR.direction = 1;
  1320   002632  0E01               	movlw	1
  1321   002634  6F9B               	movwf	(main@motorR+1)& (0+255),b
  1322                           
  1323                           ;main.c: 51:         motorR.brakemode = 1;
  1324   002636  0E01               	movlw	1
  1325   002638  6F9C               	movwf	(main@motorR+2)& (0+255),b
  1326   00263A                     
  1327                           ; BSR set to: 0
  1328                           ;main.c: 52:         motorR.PWMperiod = PWMcycle;
  1329   00263A  0E00               	movlw	0
  1330   00263C  6F9E               	movwf	(main@motorR+4)& (0+255),b
  1331   00263E  0E63               	movlw	99
  1332   002640  6F9D               	movwf	(main@motorR+3)& (0+255),b
  1333   002642                     
  1334                           ; BSR set to: 0
  1335                           ;main.c: 53:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1336   002642  0E25               	movlw	37
  1337   002644  6F9F               	movwf	(main@motorR+5)& (0+255),b
  1338   002646  0E0F               	movlw	15
  1339   002648  6FA0               	movwf	(main@motorR+6)& (0+255),b
  1340   00264A                     
  1341                           ; BSR set to: 0
  1342                           ;main.c: 54:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1343   00264A  0E21               	movlw	33
  1344   00264C  6FA1               	movwf	(main@motorR+7)& (0+255),b
  1345   00264E  0E0F               	movlw	15
  1346   002650  6FA2               	movwf	(main@motorR+8)& (0+255),b
  1347   002652                     
  1348                           ; BSR set to: 0
  1349                           ;main.c: 57:     initDCmotorsPWM(PWMcycle);
  1350   002652  0E00               	movlw	0
  1351   002654  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1352   002656  0E63               	movlw	99
  1353   002658  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1354   00265A  EC4A  F019         	call	_initDCmotorsPWM	;wreg free
  1355                           
  1356                           ;main.c: 58:     buggy_lights_init();
  1357   00265E  ECE1  F01F         	call	_buggy_lights_init	;wreg free
  1358   002662                     
  1359                           ;main.c: 59:     color_click_init();
  1360   002662  EC1B  F01F         	call	_color_click_init	;wreg free
  1361   002666                     
  1362                           ;main.c: 60:     initUSART4();
  1363   002666  EC8B  F020         	call	_initUSART4	;wreg free
  1364   00266A                     
  1365                           ;main.c: 61:     Timer0_init();
  1366   00266A  EC21  F020         	call	_Timer0_init	;wreg free
  1367   00266E                     
  1368                           ;main.c: 65:         TRISDbits.TRISD7 = 0;
  1369   00266E  9E84               	bcf	132,7,c	;volatile
  1370   002670                     
  1371                           ;main.c: 66:         TRISHbits.TRISH3 = 0;
  1372   002670  9688               	bcf	136,3,c	;volatile
  1373   002672                     
  1374                           ;main.c: 68:         LATDbits.LATD7 = 0;
  1375   002672  9E7C               	bcf	124,7,c	;volatile
  1376   002674                     
  1377                           ;main.c: 69:         LATHbits.LATH3 = 0;
  1378   002674  9680               	bcf	128,3,c	;volatile
  1379   002676                     
  1380                           ;main.c: 73:         TRISFbits.TRISF2 = 1;
  1381   002676  8486               	bsf	134,2,c	;volatile
  1382   002678                     
  1383                           ;main.c: 74:         TRISFbits.TRISF3 = 1;
  1384   002678  8686               	bsf	134,3,c	;volatile
  1385   00267A                     
  1386                           ;main.c: 76:         ANSELFbits.ANSELF2 = 0;
  1387   00267A  010E               	movlb	14	; () banked
  1388   00267C  95B4               	bcf	180,2,b	;volatile
  1389   00267E                     
  1390                           ; BSR set to: 14
  1391                           ;main.c: 77:         ANSELFbits.ANSELF3 = 0;
  1392   00267E  97B4               	bcf	180,3,b	;volatile
  1393   002680                     l427:
  1394   002680  B68E               	btfsc	142,3,c	;volatile
  1395   002682  EF45  F013         	goto	u4021
  1396   002686  EF47  F013         	goto	u4020
  1397   00268A                     u4021:
  1398   00268A  EF40  F013         	goto	l427
  1399   00268E                     u4020:
  1400   00268E                     
  1401                           ;main.c: 80:     LATDbits.LATD7 = !LATDbits.LATD7;
  1402   00268E  AE7C               	btfss	124,7,c	;volatile
  1403   002690  EF4C  F013         	goto	u4031
  1404   002694  EF51  F013         	goto	u4030
  1405   002698                     u4031:
  1406   002698  0100               	movlb	0	; () banked
  1407   00269A  6B88               	clrf	??_main& (0+255),b
  1408   00269C  2B88               	incf	??_main& (0+255),f,b
  1409   00269E  EF53  F013         	goto	u4048
  1410   0026A2                     u4030:
  1411   0026A2  0100               	movlb	0	; () banked
  1412   0026A4  6B88               	clrf	??_main& (0+255),b
  1413   0026A6                     u4048:
  1414   0026A6  3388               	rrcf	??_main& (0+255),f,b
  1415   0026A8  3388               	rrcf	??_main& (0+255),f,b
  1416   0026AA  507C               	movf	124,w,c	;volatile
  1417   0026AC  1988               	xorwf	??_main& (0+255),w,b
  1418   0026AE  0B7F               	andlw	-129
  1419   0026B0  1988               	xorwf	??_main& (0+255),w,b
  1420   0026B2  6E7C               	movwf	124,c	;volatile
  1421                           
  1422                           ;main.c: 81:     LATHbits.LATH3 = !LATHbits.LATH3;
  1423   0026B4  A680               	btfss	128,3,c	;volatile
  1424   0026B6  EF5F  F013         	goto	u4051
  1425   0026BA  EF63  F013         	goto	u4050
  1426   0026BE                     u4051:
  1427   0026BE  6B88               	clrf	??_main& (0+255),b
  1428   0026C0  2B88               	incf	??_main& (0+255),f,b
  1429   0026C2  EF65  F013         	goto	u4068
  1430   0026C6                     u4050:
  1431   0026C6  0100               	movlb	0	; () banked
  1432   0026C8  6B88               	clrf	??_main& (0+255),b
  1433   0026CA                     u4068:
  1434   0026CA  4788               	rlncf	??_main& (0+255),f,b
  1435   0026CC  4788               	rlncf	??_main& (0+255),f,b
  1436   0026CE  4788               	rlncf	??_main& (0+255),f,b
  1437   0026D0  5080               	movf	128,w,c	;volatile
  1438   0026D2  1988               	xorwf	??_main& (0+255),w,b
  1439   0026D4  0BF7               	andlw	-9
  1440   0026D6  1988               	xorwf	??_main& (0+255),w,b
  1441   0026D8  6E80               	movwf	128,c	;volatile
  1442   0026DA                     
  1443                           ; BSR set to: 0
  1444                           ;main.c: 82:      _delay((unsigned long)((1000)*(64000000/4000.0)));
  1445   0026DA  0E52               	movlw	82
  1446   0026DC  0100               	movlb	0	; () banked
  1447   0026DE  6F89               	movwf	(??_main+1)& (0+255),b
  1448   0026E0  0E2B               	movlw	43
  1449   0026E2  6F88               	movwf	??_main& (0+255),b
  1450   0026E4  0E00               	movlw	0
  1451   0026E6                     u4087:
  1452   0026E6  2EE8               	decfsz	wreg,f,c
  1453   0026E8  D7FE               	bra	u4087
  1454   0026EA  2F88               	decfsz	??_main& (0+255),f,b
  1455   0026EC  D7FC               	bra	u4087
  1456   0026EE  2F89               	decfsz	(??_main+1)& (0+255),f,b
  1457   0026F0  D7FA               	bra	u4087
  1458   0026F2  0000               	nop	
  1459   0026F4                     
  1460                           ;main.c: 84:     forward_navigation(&motorL, &motorR, &HSV_colour, &RGBC_colour);
  1461   0026F4  0E91               	movlw	low main@motorL
  1462   0026F6  6E55               	movwf	forward_navigation@mL^0,c
  1463   0026F8  0E9A               	movlw	low main@motorR
  1464   0026FA  6E56               	movwf	forward_navigation@mR^0,c
  1465   0026FC  0E8B               	movlw	low main@HSV_colour
  1466   0026FE  6E57               	movwf	forward_navigation@p1^0,c
  1467   002700  0EA3               	movlw	low main@RGBC_colour
  1468   002702  6E58               	movwf	forward_navigation@p2^0,c
  1469   002704  EC18  F012         	call	_forward_navigation	;wreg free
  1470   002708                     
  1471                           ;main.c: 85:     return_to_sender(&motorL, &motorR);
  1472   002708  0E91               	movlw	low main@motorL
  1473   00270A  6E4D               	movwf	return_to_sender@mL^0,c
  1474   00270C  0E9A               	movlw	low main@motorR
  1475   00270E  6E4E               	movwf	return_to_sender@mR^0,c
  1476   002710  EC74  F016         	call	_return_to_sender	;wreg free
  1477   002714                     
  1478                           ;main.c: 118:     for (unsigned char i = 0; i < 4; i++) {
  1479   002714  0E00               	movlw	0
  1480   002716  0100               	movlb	0	; () banked
  1481   002718  6F8A               	movwf	main@i& (0+255),b
  1482   00271A                     l4911:
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;main.c: 124:     }
  1486   00271A  2B8A               	incf	main@i& (0+255),f,b
  1487   00271C                     
  1488                           ; BSR set to: 0
  1489   00271C  0E03               	movlw	3
  1490   00271E  658A               	cpfsgt	main@i& (0+255),b
  1491   002720  EF94  F013         	goto	u4071
  1492   002724  EF96  F013         	goto	u4070
  1493   002728                     u4071:
  1494   002728  EF8D  F013         	goto	l4911
  1495   00272C                     u4070:
  1496   00272C                     
  1497                           ; BSR set to: 0
  1498   00272C  EF21  F000         	goto	start
  1499   002730                     __end_of_main:
  1500                           	callstack 0
  1501                           
  1502 ;; *************** function _return_to_sender *****************
  1503 ;; Defined at:
  1504 ;;		line 182 in file "timers.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;  mL              1   76[COMRAM] PTR struct DC_motor
  1507 ;;		 -> main@motorL(9), 
  1508 ;;  mR              1   77[COMRAM] PTR struct DC_motor
  1509 ;;		 -> main@motorR(9), 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  mann            1   80[COMRAM] unsigned char 
  1512 ;;  timerL          1   79[COMRAM] unsigned char 
  1513 ;;  timerH          1   78[COMRAM] unsigned char 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1523 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1524 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1526 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1527 ;;Total ram usage:        5 bytes
  1528 ;; Hardware stack levels used: 1
  1529 ;; Hardware stack levels required when called: 7
  1530 ;; This function calls:
  1531 ;;		_fullSpeedAhead
  1532 ;;		_pick_card
  1533 ;;		_read_trail
  1534 ;;		_sendIntSerial4
  1535 ;;		_start_timer
  1536 ;;		_stop
  1537 ;;		_stop_timer
  1538 ;;		_write_timer
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text1
  1545   002CE8                     __ptext1:
  1546                           	callstack 0
  1547   002CE8                     _return_to_sender:
  1548                           	callstack 23
  1549   002CE8                     
  1550                           ;timers.c: 182: void return_to_sender(DC_motor *mL, DC_motor *mR);timers.c: 183: {;timer
      +                          s.c: 184:     while (manoeuvre_count != 0) {
  1551   002CE8  EFC9  F016         	goto	l4523
  1552   002CEC                     l4495:
  1553                           
  1554                           ; BSR set to: 1
  1555                           ;timers.c: 185:         unsigned char timerH = 0;
  1556   002CEC  0E00               	movlw	0
  1557   002CEE  6E4F               	movwf	return_to_sender@timerH^0,c
  1558                           
  1559                           ;timers.c: 186:         unsigned char timerL = 0;
  1560   002CF0  0E00               	movlw	0
  1561   002CF2  6E50               	movwf	return_to_sender@timerL^0,c
  1562                           
  1563                           ;timers.c: 187:         unsigned char mann = 0;
  1564   002CF4  0E00               	movlw	0
  1565   002CF6  6E51               	movwf	return_to_sender@mann^0,c
  1566   002CF8                     
  1567                           ; BSR set to: 1
  1568                           ;timers.c: 189:         read_trail(&timerH, &timerL, &mann);
  1569   002CF8  0E4F               	movlw	low return_to_sender@timerH
  1570   002CFA  6E01               	movwf	read_trail@tH^0,c
  1571   002CFC  0E50               	movlw	low return_to_sender@timerL
  1572   002CFE  6E02               	movwf	read_trail@tL^0,c
  1573   002D00  0E51               	movlw	low return_to_sender@mann
  1574   002D02  6E03               	movwf	read_trail@man^0,c
  1575   002D04  EC6B  F01D         	call	_read_trail	;wreg free
  1576   002D08                     
  1577                           ;timers.c: 190:         sendIntSerial4(timerH);
  1578   002D08  C04F  F03A         	movff	return_to_sender@timerH,sendIntSerial4@integer
  1579   002D0C  6A3B               	clrf	(sendIntSerial4@integer+1)^0,c
  1580   002D0E  EC5B  F020         	call	_sendIntSerial4	;wreg free
  1581   002D12                     
  1582                           ;timers.c: 191:         sendIntSerial4(timerL);
  1583   002D12  C050  F03A         	movff	return_to_sender@timerL,sendIntSerial4@integer
  1584   002D16  6A3B               	clrf	(sendIntSerial4@integer+1)^0,c
  1585   002D18  EC5B  F020         	call	_sendIntSerial4	;wreg free
  1586   002D1C                     
  1587                           ;timers.c: 192:         sendIntSerial4(mann);
  1588   002D1C  C051  F03A         	movff	return_to_sender@mann,sendIntSerial4@integer
  1589   002D20  6A3B               	clrf	(sendIntSerial4@integer+1)^0,c
  1590   002D22  EC5B  F020         	call	_sendIntSerial4	;wreg free
  1591   002D26                     
  1592                           ;timers.c: 193:         if (mann != 8) {
  1593   002D26  0E08               	movlw	8
  1594   002D28  1851               	xorwf	return_to_sender@mann^0,w,c
  1595   002D2A  B4D8               	btfsc	status,2,c
  1596   002D2C  EF9A  F016         	goto	u3821
  1597   002D30  EF9C  F016         	goto	u3820
  1598   002D34                     u3821:
  1599   002D34  EFA6  F016         	goto	l4509
  1600   002D38                     u3820:
  1601   002D38                     
  1602                           ;timers.c: 194:             pick_card(mL, mR, returning, mann);
  1603   002D38  C04D  F021         	movff	return_to_sender@mL,pick_card@mL
  1604   002D3C  C04E  F022         	movff	return_to_sender@mR,pick_card@mR
  1605   002D40  C05E  F023         	movff	_returning,pick_card@backtrack
  1606   002D44  C051  F024         	movff	return_to_sender@mann,pick_card@key
  1607   002D48  ECC5  F014         	call	_pick_card	;wreg free
  1608   002D4C                     l4509:
  1609                           
  1610                           ;timers.c: 197:         write_timer(0b11111111 - timerH, 0b11111111 - timerL);
  1611   002D4C  5050               	movf	return_to_sender@timerL^0,w,c
  1612   002D4E  0AFF               	xorlw	255
  1613   002D50  6E01               	movwf	write_timer@tL^0,c
  1614   002D52  504F               	movf	return_to_sender@timerH^0,w,c
  1615   002D54  0AFF               	xorlw	255
  1616   002D56  ECBD  F020         	call	_write_timer
  1617   002D5A                     
  1618                           ;timers.c: 198:         start_timer();
  1619   002D5A  ECD4  F020         	call	_start_timer	;wreg free
  1620   002D5E                     
  1621                           ;timers.c: 199:         fullSpeedAhead(mL, mR);
  1622   002D5E  C04D  F013         	movff	return_to_sender@mL,fullSpeedAhead@mL
  1623   002D62  C04E  F014         	movff	return_to_sender@mR,fullSpeedAhead@mR
  1624   002D66  EC30  F017         	call	_fullSpeedAhead	;wreg free
  1625   002D6A                     l4515:
  1626   002D6A  0100               	movlb	0	; () banked
  1627   002D6C  5187               	movf	_return_flag& (0+255),w,b
  1628   002D6E  B4D8               	btfsc	status,2,c
  1629   002D70  EFBC  F016         	goto	u3831
  1630   002D74  EFBE  F016         	goto	u3830
  1631   002D78                     u3831:
  1632   002D78  EFB5  F016         	goto	l4515
  1633   002D7C                     u3830:
  1634   002D7C                     
  1635                           ; BSR set to: 0
  1636                           ;timers.c: 203:         stop(mL, mR);
  1637   002D7C  C04D  F013         	movff	return_to_sender@mL,stop@mL
  1638   002D80  C04E  F014         	movff	return_to_sender@mR,stop@mR
  1639   002D84  EC92  F019         	call	_stop	;wreg free
  1640   002D88                     
  1641                           ;timers.c: 204:         stop_timer();
  1642   002D88  ECD2  F020         	call	_stop_timer	;wreg free
  1643   002D8C                     
  1644                           ;timers.c: 205:         return_flag = 0;
  1645   002D8C  0E00               	movlw	0
  1646   002D8E  0100               	movlb	0	; () banked
  1647   002D90  6F87               	movwf	_return_flag& (0+255),b
  1648   002D92                     l4523:
  1649                           
  1650                           ;timers.c: 184:     while (manoeuvre_count != 0) {
  1651   002D92  0101               	movlb	1	; () banked
  1652   002D94  51A4               	movf	_manoeuvre_count& (0+255),w,b
  1653   002D96  A4D8               	btfss	status,2,c
  1654   002D98  EFD0  F016         	goto	u3841
  1655   002D9C  EFD2  F016         	goto	u3840
  1656   002DA0                     u3841:
  1657   002DA0  EF76  F016         	goto	l4495
  1658   002DA4                     u3840:
  1659   002DA4                     
  1660                           ; BSR set to: 1
  1661   002DA4  0012               	return		;funcret
  1662   002DA6                     __end_of_return_to_sender:
  1663                           	callstack 0
  1664                           
  1665 ;; *************** function _sendIntSerial4 *****************
  1666 ;; Defined at:
  1667 ;;		line 43 in file "serial.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  integer         2   57[COMRAM] int 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  string         17   59[COMRAM] unsigned char [17]
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1681 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1682 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1684 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1685 ;;Total ram usage:       19 bytes
  1686 ;; Hardware stack levels used: 1
  1687 ;; Hardware stack levels required when called: 6
  1688 ;; This function calls:
  1689 ;;		_sendStringSerial4
  1690 ;;		_sprintf
  1691 ;; This function is called by:
  1692 ;;		_return_to_sender
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text2
  1697   0040B6                     __ptext2:
  1698                           	callstack 0
  1699   0040B6                     _sendIntSerial4:
  1700                           	callstack 23
  1701   0040B6                     
  1702                           ;serial.c: 45:     char string[sizeof(int) * 8 + 1];;serial.c: 46:     sprintf(string, "
      +                          %d \r", integer);
  1703   0040B6  0E3C               	movlw	low sendIntSerial4@string
  1704   0040B8  6E20               	movwf	sprintf@s^0,c
  1705   0040BA  6A21               	clrf	(sprintf@s+1)^0,c
  1706   0040BC  0E0F               	movlw	low STR_1
  1707   0040BE  6E22               	movwf	sprintf@fmt^0,c
  1708   0040C0  C03A  F023         	movff	sendIntSerial4@integer,?_sprintf+3
  1709   0040C4  C03B  F024         	movff	sendIntSerial4@integer+1,?_sprintf+4
  1710   0040C8  EC59  F01E         	call	_sprintf	;wreg free
  1711   0040CC                     
  1712                           ;serial.c: 47:     sendStringSerial4(string);
  1713   0040CC  0E3C               	movlw	low sendIntSerial4@string
  1714   0040CE  6E02               	movwf	sendStringSerial4@string^0,c
  1715   0040D0  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1716   0040D2  ECB5  F01C         	call	_sendStringSerial4	;wreg free
  1717   0040D6  0012               	return		;funcret
  1718   0040D8                     __end_of_sendIntSerial4:
  1719                           	callstack 0
  1720                           
  1721 ;; *************** function _read_trail *****************
  1722 ;; Defined at:
  1723 ;;		line 81 in file "timers.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  tH              1    0[COMRAM] PTR unsigned char 
  1726 ;;		 -> return_to_sender@timerH(1), 
  1727 ;;  tL              1    1[COMRAM] PTR unsigned char 
  1728 ;;		 -> return_to_sender@timerL(1), 
  1729 ;;  man             1    2[COMRAM] PTR unsigned char 
  1730 ;;		 -> return_to_sender@mann(1), 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;		None
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1742 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1746 ;;Total ram usage:        3 bytes
  1747 ;; Hardware stack levels used: 1
  1748 ;; Hardware stack levels required when called: 1
  1749 ;; This function calls:
  1750 ;;		Nothing
  1751 ;; This function is called by:
  1752 ;;		_return_to_sender
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text3
  1757   003AD6                     __ptext3:
  1758                           	callstack 0
  1759   003AD6                     _read_trail:
  1760                           	callstack 28
  1761   003AD6                     
  1762                           ;timers.c: 81: void read_trail(unsigned char *tH, unsigned char *tL, unsigned char *man)
      +                          ;timers.c: 82: {;timers.c: 83:     timer_high_pointer --;
  1763   003AD6  0100               	movlb	0	; () banked
  1764   003AD8  07AF               	decf	_timer_high_pointer& (0+255),f,b
  1765   003ADA  A0D8               	btfss	status,0,c
  1766   003ADC  07B0               	decf	(_timer_high_pointer+1)& (0+255),f,b
  1767                           
  1768                           ;timers.c: 84:     timer_low_pointer --;
  1769   003ADE  07AD               	decf	_timer_low_pointer& (0+255),f,b
  1770   003AE0  A0D8               	btfss	status,0,c
  1771   003AE2  07AE               	decf	(_timer_low_pointer+1)& (0+255),f,b
  1772                           
  1773                           ;timers.c: 85:     manoeuvre_pointer --;
  1774   003AE4  07AB               	decf	_manoeuvre_pointer& (0+255),f,b
  1775   003AE6  A0D8               	btfss	status,0,c
  1776   003AE8  07AC               	decf	(_manoeuvre_pointer+1)& (0+255),f,b
  1777                           
  1778                           ;timers.c: 87:     manoeuvre_count --;
  1779   003AEA  0101               	movlb	1	; () banked
  1780   003AEC  07A4               	decf	_manoeuvre_count& (0+255),f,b
  1781   003AEE                     
  1782                           ; BSR set to: 1
  1783                           ;timers.c: 89:     *tH = *timer_high_pointer;
  1784   003AEE  C0AF  FFD9         	movff	_timer_high_pointer,fsr2l
  1785   003AF2  C0B0  FFDA         	movff	_timer_high_pointer+1,fsr2h
  1786   003AF6  5001               	movf	read_trail@tH^0,w,c
  1787   003AF8  6EE1               	movwf	fsr1l,c
  1788   003AFA  6AE2               	clrf	fsr1h,c
  1789   003AFC  CFDF FFE7          	movff	indf2,indf1
  1790   003B00                     
  1791                           ; BSR set to: 1
  1792                           ;timers.c: 90:     *tL = *timer_low_pointer;
  1793   003B00  C0AD  FFD9         	movff	_timer_low_pointer,fsr2l
  1794   003B04  C0AE  FFDA         	movff	_timer_low_pointer+1,fsr2h
  1795   003B08  5002               	movf	read_trail@tL^0,w,c
  1796   003B0A  6EE1               	movwf	fsr1l,c
  1797   003B0C  6AE2               	clrf	fsr1h,c
  1798   003B0E  CFDF FFE7          	movff	indf2,indf1
  1799   003B12                     
  1800                           ; BSR set to: 1
  1801                           ;timers.c: 91:     *man = *manoeuvre_pointer;
  1802   003B12  C0AB  FFD9         	movff	_manoeuvre_pointer,fsr2l
  1803   003B16  C0AC  FFDA         	movff	_manoeuvre_pointer+1,fsr2h
  1804   003B1A  5003               	movf	read_trail@man^0,w,c
  1805   003B1C  6EE1               	movwf	fsr1l,c
  1806   003B1E  6AE2               	clrf	fsr1h,c
  1807   003B20  CFDF FFE7          	movff	indf2,indf1
  1808   003B24                     
  1809                           ; BSR set to: 1
  1810   003B24  0012               	return		;funcret
  1811   003B26                     __end_of_read_trail:
  1812                           	callstack 0
  1813                           
  1814 ;; *************** function _initUSART4 *****************
  1815 ;; Defined at:
  1816 ;;		line 8 in file "serial.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, status,2
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1834 ;;Total ram usage:        0 bytes
  1835 ;; Hardware stack levels used: 1
  1836 ;; Hardware stack levels required when called: 1
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text4
  1845   004116                     __ptext4:
  1846                           	callstack 0
  1847   004116                     _initUSART4:
  1848                           	callstack 29
  1849   004116                     
  1850                           ;serial.c: 9:     RC0PPS = 0x12;
  1851   004116  0E12               	movlw	18
  1852   004118  010E               	movlb	14	; () banked
  1853   00411A  6F62               	movwf	98,b	;volatile
  1854                           
  1855                           ;serial.c: 10:     RX4PPS = 0x11;
  1856   00411C  0E11               	movlw	17
  1857   00411E  6F15               	movwf	21,b	;volatile
  1858   004120                     
  1859                           ; BSR set to: 14
  1860                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1861   004120  97E9               	bcf	233,3,b	;volatile
  1862   004122                     
  1863                           ; BSR set to: 14
  1864                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1865   004122  95E8               	bcf	232,2,b	;volatile
  1866                           
  1867                           ;serial.c: 14:     SP4BRGL = 51;
  1868   004124  0E33               	movlw	51
  1869   004126  6FE5               	movwf	229,b	;volatile
  1870                           
  1871                           ;serial.c: 15:     SP4BRGH = 0;
  1872   004128  0E00               	movlw	0
  1873   00412A  6FE6               	movwf	230,b	;volatile
  1874   00412C                     
  1875                           ; BSR set to: 14
  1876                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1877   00412C  89E7               	bsf	231,4,b	;volatile
  1878   00412E                     
  1879                           ; BSR set to: 14
  1880                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1881   00412E  8BE8               	bsf	232,5,b	;volatile
  1882   004130                     
  1883                           ; BSR set to: 14
  1884                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1885   004130  8FE7               	bsf	231,7,b	;volatile
  1886   004132                     
  1887                           ; BSR set to: 14
  1888   004132  0012               	return		;funcret
  1889   004134                     __end_of_initUSART4:
  1890                           	callstack 0
  1891                           
  1892 ;; *************** function _initDCmotorsPWM *****************
  1893 ;; Defined at:
  1894 ;;		line 7 in file "dc_motor.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;		None
  1899 ;; Return value:  Size  Location     Type
  1900 ;;                  1    wreg      void 
  1901 ;; Registers used:
  1902 ;;		wreg, status,2
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1908 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1911 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1912 ;;Total ram usage:        2 bytes
  1913 ;; Hardware stack levels used: 1
  1914 ;; Hardware stack levels required when called: 1
  1915 ;; This function calls:
  1916 ;;		Nothing
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text5
  1923   003294                     __ptext5:
  1924                           	callstack 0
  1925   003294                     _initDCmotorsPWM:
  1926                           	callstack 29
  1927   003294                     
  1928                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
  1929   003294  9485               	bcf	133,2,c	;volatile
  1930                           
  1931                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1932   003296  9885               	bcf	133,4,c	;volatile
  1933                           
  1934                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
  1935   003298  9E83               	bcf	131,7,c	;volatile
  1936                           
  1937                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
  1938   00329A  9C87               	bcf	135,6,c	;volatile
  1939                           
  1940                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
  1941   00329C  947D               	bcf	125,2,c	;volatile
  1942                           
  1943                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
  1944   00329E  987D               	bcf	125,4,c	;volatile
  1945                           
  1946                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
  1947   0032A0  9E7B               	bcf	123,7,c	;volatile
  1948                           
  1949                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
  1950   0032A2  9C7F               	bcf	127,6,c	;volatile
  1951   0032A4                     
  1952                           ;dc_motor.c: 19:     RE2PPS=0x05;
  1953   0032A4  0E05               	movlw	5
  1954   0032A6  010E               	movlb	14	; () banked
  1955   0032A8  6F74               	movwf	116,b	;volatile
  1956                           
  1957                           ;dc_motor.c: 20:     RE4PPS=0x06;
  1958   0032AA  0E06               	movlw	6
  1959   0032AC  6F76               	movwf	118,b	;volatile
  1960                           
  1961                           ;dc_motor.c: 21:     RC7PPS=0x07;
  1962   0032AE  0E07               	movlw	7
  1963   0032B0  6F69               	movwf	105,b	;volatile
  1964                           
  1965                           ;dc_motor.c: 22:     RG6PPS=0x08;
  1966   0032B2  0E08               	movlw	8
  1967   0032B4  6F88               	movwf	136,b	;volatile
  1968                           
  1969                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  1970   0032B6  50BD               	movf	189,w,c	;volatile
  1971   0032B8  0B8F               	andlw	-113
  1972   0032BA  0940               	iorlw	64
  1973   0032BC  6EBD               	movwf	189,c	;volatile
  1974                           
  1975                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  1976   0032BE  0EE0               	movlw	-32
  1977   0032C0  16BE               	andwf	190,f,c	;volatile
  1978                           
  1979                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  1980   0032C2  50BF               	movf	191,w,c	;volatile
  1981   0032C4  0BF0               	andlw	-16
  1982   0032C6  0901               	iorlw	1
  1983   0032C8  6EBF               	movwf	191,c	;volatile
  1984   0032CA                     
  1985                           ; BSR set to: 14
  1986                           ;dc_motor.c: 31:     T2PR=(unsigned char)PWMperiod;
  1987   0032CA  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1988   0032CE                     
  1989                           ; BSR set to: 14
  1990                           ;dc_motor.c: 32:     T2CONbits.ON=1;
  1991   0032CE  8EBD               	bsf	189,7,c	;volatile
  1992                           
  1993                           ;dc_motor.c: 36:         CCPR1H=0;
  1994   0032D0  0E00               	movlw	0
  1995   0032D2  6EAA               	movwf	170,c	;volatile
  1996                           
  1997                           ;dc_motor.c: 37:         CCPR2H=0;
  1998   0032D4  0E00               	movlw	0
  1999   0032D6  6EA6               	movwf	166,c	;volatile
  2000                           
  2001                           ;dc_motor.c: 38:         CCPR3H=0;
  2002   0032D8  0E00               	movlw	0
  2003   0032DA  010F               	movlb	15	; () banked
  2004   0032DC  6F25               	movwf	37,b	;volatile
  2005                           
  2006                           ;dc_motor.c: 39:         CCPR4H=0;
  2007   0032DE  0E00               	movlw	0
  2008   0032E0  6F21               	movwf	33,b	;volatile
  2009                           
  2010                           ;dc_motor.c: 42:         CCPTMRS0bits.C1TSEL=0;
  2011   0032E2  0EFC               	movlw	-4
  2012   0032E4  16AD               	andwf	173,f,c	;volatile
  2013                           
  2014                           ;dc_motor.c: 43:         CCPTMRS0bits.C2TSEL=0;
  2015   0032E6  0EF3               	movlw	-13
  2016   0032E8  16AD               	andwf	173,f,c	;volatile
  2017                           
  2018                           ;dc_motor.c: 44:         CCPTMRS0bits.C3TSEL=0;
  2019   0032EA  0ECF               	movlw	-49
  2020   0032EC  16AD               	andwf	173,f,c	;volatile
  2021                           
  2022                           ;dc_motor.c: 45:         CCPTMRS0bits.C4TSEL=0;
  2023   0032EE  0E3F               	movlw	-193
  2024   0032F0  16AD               	andwf	173,f,c	;volatile
  2025   0032F2                     
  2026                           ; BSR set to: 15
  2027                           ;dc_motor.c: 48:         CCP1CONbits.FMT=1;
  2028   0032F2  88AB               	bsf	171,4,c	;volatile
  2029                           
  2030                           ;dc_motor.c: 49:         CCP1CONbits.CCP1MODE=0b1100;
  2031   0032F4  50AB               	movf	171,w,c	;volatile
  2032   0032F6  0BF0               	andlw	-16
  2033   0032F8  090C               	iorlw	12
  2034   0032FA  6EAB               	movwf	171,c	;volatile
  2035   0032FC                     
  2036                           ; BSR set to: 15
  2037                           ;dc_motor.c: 50:         CCP1CONbits.EN=1;
  2038   0032FC  8EAB               	bsf	171,7,c	;volatile
  2039   0032FE                     
  2040                           ; BSR set to: 15
  2041                           ;dc_motor.c: 52:         CCP2CONbits.FMT=1;
  2042   0032FE  88A7               	bsf	167,4,c	;volatile
  2043                           
  2044                           ;dc_motor.c: 53:         CCP2CONbits.CCP2MODE=0b1100;
  2045   003300  50A7               	movf	167,w,c	;volatile
  2046   003302  0BF0               	andlw	-16
  2047   003304  090C               	iorlw	12
  2048   003306  6EA7               	movwf	167,c	;volatile
  2049   003308                     
  2050                           ; BSR set to: 15
  2051                           ;dc_motor.c: 54:         CCP2CONbits.EN=1;
  2052   003308  8EA7               	bsf	167,7,c	;volatile
  2053   00330A                     
  2054                           ; BSR set to: 15
  2055                           ;dc_motor.c: 56:         CCP3CONbits.FMT=1;
  2056   00330A  8926               	bsf	38,4,b	;volatile
  2057                           
  2058                           ;dc_motor.c: 57:         CCP3CONbits.CCP3MODE=0b1100;
  2059   00330C  5126               	movf	38,w,b	;volatile
  2060   00330E  0BF0               	andlw	-16
  2061   003310  090C               	iorlw	12
  2062   003312  6F26               	movwf	38,b	;volatile
  2063   003314                     
  2064                           ; BSR set to: 15
  2065                           ;dc_motor.c: 58:         CCP3CONbits.EN=1;
  2066   003314  8F26               	bsf	38,7,b	;volatile
  2067   003316                     
  2068                           ; BSR set to: 15
  2069                           ;dc_motor.c: 60:         CCP4CONbits.FMT=1;
  2070   003316  8922               	bsf	34,4,b	;volatile
  2071                           
  2072                           ;dc_motor.c: 61:         CCP4CONbits.CCP4MODE=0b1100;
  2073   003318  5122               	movf	34,w,b	;volatile
  2074   00331A  0BF0               	andlw	-16
  2075   00331C  090C               	iorlw	12
  2076   00331E  6F22               	movwf	34,b	;volatile
  2077   003320                     
  2078                           ; BSR set to: 15
  2079                           ;dc_motor.c: 62:         CCP4CONbits.EN=1;
  2080   003320  8F22               	bsf	34,7,b	;volatile
  2081   003322                     
  2082                           ; BSR set to: 15
  2083   003322  0012               	return		;funcret
  2084   003324                     __end_of_initDCmotorsPWM:
  2085                           	callstack 0
  2086                           
  2087 ;; *************** function _forward_navigation *****************
  2088 ;; Defined at:
  2089 ;;		line 116 in file "timers.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  mL              1   84[COMRAM] PTR struct DC_motor
  2092 ;;		 -> main@motorL(9), 
  2093 ;;  mR              1   85[COMRAM] PTR struct DC_motor
  2094 ;;		 -> main@motorR(9), 
  2095 ;;  p1              1   86[COMRAM] PTR struct HSV_val
  2096 ;;		 -> main@HSV_colour(6), 
  2097 ;;  p2              1   87[COMRAM] PTR struct RGBC_val
  2098 ;;		 -> main@RGBC_colour(8), 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  mann            1   92[COMRAM] unsigned char 
  2101 ;;  timerL          1   91[COMRAM] unsigned char 
  2102 ;;  timerH          1   90[COMRAM] unsigned char 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2112 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2113 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2115 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2116 ;;Total ram usage:        9 bytes
  2117 ;; Hardware stack levels used: 1
  2118 ;; Hardware stack levels required when called: 7
  2119 ;; This function calls:
  2120 ;;		_average_RGBC
  2121 ;;		_colour_to_key
  2122 ;;		_convert_HSV
  2123 ;;		_fullSpeedAhead
  2124 ;;		_pick_card
  2125 ;;		_read_timer
  2126 ;;		_reset_timer
  2127 ;;		_scale_RGB
  2128 ;;		_sendArrayCharSerial4
  2129 ;;		_sendHSVvalSerial4
  2130 ;;		_sendRGBCvalSerial4
  2131 ;;		_start_timer
  2132 ;;		_stop
  2133 ;;		_stop_timer
  2134 ;;		_toggle_tricolour_LED
  2135 ;;		_wait_for_wall
  2136 ;;		_write_trail
  2137 ;; This function is called by:
  2138 ;;		_main
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text6
  2143   002430                     __ptext6:
  2144                           	callstack 0
  2145   002430                     _forward_navigation:
  2146                           	callstack 23
  2147   002430                     
  2148                           ;timers.c: 116: void forward_navigation(DC_motor *mL, DC_motor *mR, HSV_val *p1, RGBC_va
      +                          l *p2);timers.c: 117: {;timers.c: 118:     while (!returning) {
  2149   002430  EFDF  F012         	goto	l4857
  2150   002434                     l4797:
  2151                           
  2152                           ;timers.c: 119:         unsigned char timerH = 0;
  2153   002434  0E00               	movlw	0
  2154   002436  6E5B               	movwf	forward_navigation@timerH^0,c
  2155                           
  2156                           ;timers.c: 120:         unsigned char timerL = 0;
  2157   002438  0E00               	movlw	0
  2158   00243A  6E5C               	movwf	forward_navigation@timerL^0,c
  2159   00243C                     
  2160                           ;timers.c: 123:         reset_timer();
  2161   00243C  ECB7  F020         	call	_reset_timer	;wreg free
  2162                           
  2163                           ;timers.c: 124:         start_timer();
  2164   002440  ECD4  F020         	call	_start_timer	;wreg free
  2165   002444                     
  2166                           ;timers.c: 125:         fullSpeedAhead(mL, mR);
  2167   002444  C055  F013         	movff	forward_navigation@mL,fullSpeedAhead@mL
  2168   002448  C056  F014         	movff	forward_navigation@mR,fullSpeedAhead@mR
  2169   00244C  EC30  F017         	call	_fullSpeedAhead	;wreg free
  2170   002450                     
  2171                           ;timers.c: 127:         wait_for_wall(p2, lost_flag);
  2172   002450  C058  F00D         	movff	forward_navigation@p2,wait_for_wall@p
  2173   002454  C1A5  F00E         	movff	_lost_flag,wait_for_wall@loss
  2174   002458  ECA1  F01E         	call	_wait_for_wall	;wreg free
  2175   00245C                     
  2176                           ;timers.c: 129:         read_timer(&timerH, &timerL);
  2177   00245C  0E5B               	movlw	low forward_navigation@timerH
  2178   00245E  6E01               	movwf	read_timer@tH^0,c
  2179   002460  0E5C               	movlw	low forward_navigation@timerL
  2180   002462  6E02               	movwf	read_timer@tL^0,c
  2181   002464  ECA6  F020         	call	_read_timer	;wreg free
  2182   002468                     
  2183                           ;timers.c: 130:         stop_timer();
  2184   002468  ECD2  F020         	call	_stop_timer	;wreg free
  2185                           
  2186                           ;timers.c: 131:         stop(mL, mR);
  2187   00246C  C055  F013         	movff	forward_navigation@mL,stop@mL
  2188   002470  C056  F014         	movff	forward_navigation@mR,stop@mR
  2189   002474  EC92  F019         	call	_stop	;wreg free
  2190   002478                     
  2191                           ;timers.c: 133:         toggle_tricolour_LED();
  2192   002478  ECAE  F015         	call	_toggle_tricolour_LED	;wreg free
  2193   00247C                     
  2194                           ;timers.c: 134:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2195   00247C  0E11               	movlw	17
  2196   00247E  6E5A               	movwf	(??_forward_navigation+1)^0,c
  2197   002480  0E3C               	movlw	60
  2198   002482  6E59               	movwf	??_forward_navigation^0,c
  2199   002484  0ECB               	movlw	203
  2200   002486                     u4097:
  2201   002486  2EE8               	decfsz	wreg,f,c
  2202   002488  D7FE               	bra	u4097
  2203   00248A  2E59               	decfsz	??_forward_navigation^0,f,c
  2204   00248C  D7FC               	bra	u4097
  2205   00248E  2E5A               	decfsz	(??_forward_navigation+1)^0,f,c
  2206   002490  D7FA               	bra	u4097
  2207   002492  0000               	nop	
  2208   002494                     
  2209                           ;timers.c: 136:         average_RGBC(p2);
  2210   002494  C058  F00E         	movff	forward_navigation@p2,average_RGBC@p
  2211   002498  EC40  F010         	call	_average_RGBC	;wreg free
  2212   00249C                     
  2213                           ;timers.c: 137:         scale_RGB(p2);
  2214   00249C  C058  F032         	movff	forward_navigation@p2,scale_RGB@p
  2215   0024A0  EC43  F015         	call	_scale_RGB	;wreg free
  2216   0024A4                     
  2217                           ;timers.c: 139:         convert_HSV(p1, p2);
  2218   0024A4  C057  F00E         	movff	forward_navigation@p1,convert_HSV@p1
  2219   0024A8  C058  F00F         	movff	forward_navigation@p2,convert_HSV@p2
  2220   0024AC  EC0D  F007         	call	_convert_HSV	;wreg free
  2221   0024B0                     
  2222                           ;timers.c: 140:         mann = colour_to_key(p1, p2);
  2223   0024B0  C057  F001         	movff	forward_navigation@p1,colour_to_key@p1
  2224   0024B4  C058  F002         	movff	forward_navigation@p2,colour_to_key@p2
  2225   0024B8  EC73  F00A         	call	_colour_to_key	;wreg free
  2226   0024BC  6E5D               	movwf	forward_navigation@mann^0,c
  2227   0024BE                     
  2228                           ;timers.c: 142:         toggle_tricolour_LED();
  2229   0024BE  ECAE  F015         	call	_toggle_tricolour_LED	;wreg free
  2230   0024C2                     
  2231                           ;timers.c: 143:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2232   0024C2  0E11               	movlw	17
  2233   0024C4  6E5A               	movwf	(??_forward_navigation+1)^0,c
  2234   0024C6  0E3C               	movlw	60
  2235   0024C8  6E59               	movwf	??_forward_navigation^0,c
  2236   0024CA  0ECB               	movlw	203
  2237   0024CC                     u4107:
  2238   0024CC  2EE8               	decfsz	wreg,f,c
  2239   0024CE  D7FE               	bra	u4107
  2240   0024D0  2E59               	decfsz	??_forward_navigation^0,f,c
  2241   0024D2  D7FC               	bra	u4107
  2242   0024D4  2E5A               	decfsz	(??_forward_navigation+1)^0,f,c
  2243   0024D6  D7FA               	bra	u4107
  2244   0024D8  0000               	nop	
  2245   0024DA                     
  2246                           ;timers.c: 152:         if (lost_flag) {
  2247   0024DA  0101               	movlb	1	; () banked
  2248   0024DC  51A5               	movf	_lost_flag& (0+255),w,b
  2249   0024DE  B4D8               	btfsc	status,2,c
  2250   0024E0  EF74  F012         	goto	u3941
  2251   0024E4  EF76  F012         	goto	u3940
  2252   0024E8                     u3941:
  2253   0024E8  EF8B  F012         	goto	l4833
  2254   0024EC                     u3940:
  2255   0024EC                     
  2256                           ; BSR set to: 1
  2257                           ;timers.c: 153:             timerH = 0b11111111;
  2258   0024EC  685B               	setf	forward_navigation@timerH^0,c
  2259                           
  2260                           ;timers.c: 154:             timerL = 0b11111111;
  2261   0024EE  685C               	setf	forward_navigation@timerL^0,c
  2262   0024F0                     
  2263                           ; BSR set to: 1
  2264                           ;timers.c: 155:             mann = 8;
  2265   0024F0  0E08               	movlw	8
  2266   0024F2  6E5D               	movwf	forward_navigation@mann^0,c
  2267   0024F4                     
  2268                           ; BSR set to: 1
  2269                           ;timers.c: 156:             LATDbits.LATD7 = !LATDbits.LATD7;
  2270   0024F4  AE7C               	btfss	124,7,c	;volatile
  2271   0024F6  EF7F  F012         	goto	u3951
  2272   0024FA  EF83  F012         	goto	u3950
  2273   0024FE                     u3951:
  2274   0024FE  6A59               	clrf	??_forward_navigation^0,c
  2275   002500  2A59               	incf	??_forward_navigation^0,f,c
  2276   002502  EF84  F012         	goto	u3968
  2277   002506                     u3950:
  2278   002506  6A59               	clrf	??_forward_navigation^0,c
  2279   002508                     u3968:
  2280   002508  3259               	rrcf	??_forward_navigation^0,f,c
  2281   00250A  3259               	rrcf	??_forward_navigation^0,f,c
  2282   00250C  507C               	movf	124,w,c	;volatile
  2283   00250E  1859               	xorwf	??_forward_navigation^0,w,c
  2284   002510  0B7F               	andlw	-129
  2285   002512  1859               	xorwf	??_forward_navigation^0,w,c
  2286   002514  6E7C               	movwf	124,c	;volatile
  2287   002516                     l4833:
  2288                           
  2289                           ;timers.c: 159:         if (manoeuvre_count == 19) {
  2290   002516  0E13               	movlw	19
  2291   002518  0101               	movlb	1	; () banked
  2292   00251A  19A4               	xorwf	_manoeuvre_count& (0+255),w,b
  2293   00251C  A4D8               	btfss	status,2,c
  2294   00251E  EF93  F012         	goto	u3971
  2295   002522  EF95  F012         	goto	u3970
  2296   002526                     u3971:
  2297   002526  EF97  F012         	goto	l4837
  2298   00252A                     u3970:
  2299   00252A                     
  2300                           ; BSR set to: 1
  2301                           ;timers.c: 160:             mann = 8;
  2302   00252A  0E08               	movlw	8
  2303   00252C  6E5D               	movwf	forward_navigation@mann^0,c
  2304   00252E                     l4837:
  2305                           
  2306                           ; BSR set to: 1
  2307                           ;timers.c: 163:         write_trail(timerH, timerL, mann);
  2308   00252E  C05C  F001         	movff	forward_navigation@timerL,write_trail@tL
  2309   002532  C05D  F002         	movff	forward_navigation@mann,write_trail@man
  2310   002536  505B               	movf	forward_navigation@timerH^0,w,c
  2311   002538  ECE4  F01E         	call	_write_trail
  2312   00253C                     
  2313                           ;timers.c: 164:         pick_card(mL, mR, returning, mann);
  2314   00253C  C055  F021         	movff	forward_navigation@mL,pick_card@mL
  2315   002540  C056  F022         	movff	forward_navigation@mR,pick_card@mR
  2316   002544  C05E  F023         	movff	_returning,pick_card@backtrack
  2317   002548  C05D  F024         	movff	forward_navigation@mann,pick_card@key
  2318   00254C  ECC5  F014         	call	_pick_card	;wreg free
  2319   002550                     
  2320                           ;timers.c: 166:         if (mann == 8) {
  2321   002550  0E08               	movlw	8
  2322   002552  185D               	xorwf	forward_navigation@mann^0,w,c
  2323   002554  A4D8               	btfss	status,2,c
  2324   002556  EFAF  F012         	goto	u3981
  2325   00255A  EFB1  F012         	goto	u3980
  2326   00255E                     u3981:
  2327   00255E  EFC5  F012         	goto	l4847
  2328   002562                     u3980:
  2329   002562                     
  2330                           ;timers.c: 167:             returning = 1;
  2331   002562  0E01               	movlw	1
  2332   002564  6E5E               	movwf	_returning^0,c
  2333   002566                     
  2334                           ;timers.c: 168:             LATHbits.LATH3 = !LATHbits.LATH3;
  2335   002566  A680               	btfss	128,3,c	;volatile
  2336   002568  EFB8  F012         	goto	u3991
  2337   00256C  EFBC  F012         	goto	u3990
  2338   002570                     u3991:
  2339   002570  6A59               	clrf	??_forward_navigation^0,c
  2340   002572  2A59               	incf	??_forward_navigation^0,f,c
  2341   002574  EFBD  F012         	goto	u4008
  2342   002578                     u3990:
  2343   002578  6A59               	clrf	??_forward_navigation^0,c
  2344   00257A                     u4008:
  2345   00257A  4659               	rlncf	??_forward_navigation^0,f,c
  2346   00257C  4659               	rlncf	??_forward_navigation^0,f,c
  2347   00257E  4659               	rlncf	??_forward_navigation^0,f,c
  2348   002580  5080               	movf	128,w,c	;volatile
  2349   002582  1859               	xorwf	??_forward_navigation^0,w,c
  2350   002584  0BF7               	andlw	-9
  2351   002586  1859               	xorwf	??_forward_navigation^0,w,c
  2352   002588  6E80               	movwf	128,c	;volatile
  2353   00258A                     l4847:
  2354                           
  2355                           ;timers.c: 171:         sendRGBCvalSerial4(p2);
  2356   00258A  C058  F03A         	movff	forward_navigation@p2,sendRGBCvalSerial4@col_val
  2357   00258E  ECE6  F01C         	call	_sendRGBCvalSerial4	;wreg free
  2358   002592                     
  2359                           ;timers.c: 172:         sendHSVvalSerial4(p1);
  2360   002592  C057  F03A         	movff	forward_navigation@p1,sendHSVvalSerial4@col_val
  2361   002596  EC33  F01E         	call	_sendHSVvalSerial4	;wreg free
  2362   00259A                     
  2363                           ;timers.c: 173:         sendArrayCharSerial4(trail_timer_high);
  2364   00259A  0ECE               	movlw	low _trail_timer_high
  2365   00259C  6E3A               	movwf	sendArrayCharSerial4@arr^0,c
  2366   00259E  0E01               	movlw	high _trail_timer_high
  2367   0025A0  6E3B               	movwf	(sendArrayCharSerial4@arr+1)^0,c
  2368   0025A2  ECD5  F01A         	call	_sendArrayCharSerial4	;wreg free
  2369   0025A6                     
  2370                           ;timers.c: 174:         sendArrayCharSerial4(trail_timer_low);
  2371   0025A6  0EBA               	movlw	low _trail_timer_low
  2372   0025A8  6E3A               	movwf	sendArrayCharSerial4@arr^0,c
  2373   0025AA  0E01               	movlw	high _trail_timer_low
  2374   0025AC  6E3B               	movwf	(sendArrayCharSerial4@arr+1)^0,c
  2375   0025AE  ECD5  F01A         	call	_sendArrayCharSerial4	;wreg free
  2376   0025B2                     
  2377                           ;timers.c: 175:         sendArrayCharSerial4(trail_manoeuvre);
  2378   0025B2  0EA6               	movlw	low _trail_manoeuvre
  2379   0025B4  6E3A               	movwf	sendArrayCharSerial4@arr^0,c
  2380   0025B6  0E01               	movlw	high _trail_manoeuvre
  2381   0025B8  6E3B               	movwf	(sendArrayCharSerial4@arr+1)^0,c
  2382   0025BA  ECD5  F01A         	call	_sendArrayCharSerial4	;wreg free
  2383   0025BE                     l4857:
  2384                           
  2385                           ;timers.c: 118:     while (!returning) {
  2386   0025BE  505E               	movf	_returning^0,w,c
  2387   0025C0  B4D8               	btfsc	status,2,c
  2388   0025C2  EFE5  F012         	goto	u4011
  2389   0025C6  EFE7  F012         	goto	u4010
  2390   0025CA                     u4011:
  2391   0025CA  EF1A  F012         	goto	l4797
  2392   0025CE                     u4010:
  2393   0025CE  0012               	return		;funcret
  2394   0025D0                     __end_of_forward_navigation:
  2395                           	callstack 0
  2396                           
  2397 ;; *************** function _write_trail *****************
  2398 ;; Defined at:
  2399 ;;		line 100 in file "timers.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;  tH              1    wreg     unsigned char 
  2402 ;;  tL              1    0[COMRAM] unsigned char 
  2403 ;;  man             1    1[COMRAM] unsigned char 
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  tH              1    2[COMRAM] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2415 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2418 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2419 ;;Total ram usage:        3 bytes
  2420 ;; Hardware stack levels used: 1
  2421 ;; Hardware stack levels required when called: 1
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_forward_navigation
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text7
  2430   003DC8                     __ptext7:
  2431                           	callstack 0
  2432   003DC8                     _write_trail:
  2433                           	callstack 28
  2434                           
  2435                           ;incstack = 0
  2436                           ;write_trail@tH stored from wreg
  2437   003DC8  6E03               	movwf	write_trail@tH^0,c
  2438   003DCA                     
  2439                           ;timers.c: 100: void write_trail(unsigned char tH, unsigned char tL, unsigned char man);
      +                          timers.c: 101: {;timers.c: 102:     *timer_high_pointer = tH;
  2440   003DCA  C0AF  FFD9         	movff	_timer_high_pointer,fsr2l
  2441   003DCE  C0B0  FFDA         	movff	_timer_high_pointer+1,fsr2h
  2442   003DD2  C003  FFDF         	movff	write_trail@tH,indf2
  2443   003DD6                     
  2444                           ;timers.c: 103:     *timer_low_pointer = tL;
  2445   003DD6  C0AD  FFD9         	movff	_timer_low_pointer,fsr2l
  2446   003DDA  C0AE  FFDA         	movff	_timer_low_pointer+1,fsr2h
  2447   003DDE  C001  FFDF         	movff	write_trail@tL,indf2
  2448   003DE2                     
  2449                           ;timers.c: 104:     *manoeuvre_pointer = man;
  2450   003DE2  C0AB  FFD9         	movff	_manoeuvre_pointer,fsr2l
  2451   003DE6  C0AC  FFDA         	movff	_manoeuvre_pointer+1,fsr2h
  2452   003DEA  C002  FFDF         	movff	write_trail@man,indf2
  2453   003DEE                     
  2454                           ;timers.c: 106:     timer_high_pointer ++;
  2455   003DEE  0100               	movlb	0	; () banked
  2456   003DF0  4BAF               	infsnz	_timer_high_pointer& (0+255),f,b
  2457   003DF2  2BB0               	incf	(_timer_high_pointer+1)& (0+255),f,b
  2458   003DF4                     
  2459                           ; BSR set to: 0
  2460                           ;timers.c: 107:     timer_low_pointer ++;
  2461   003DF4  4BAD               	infsnz	_timer_low_pointer& (0+255),f,b
  2462   003DF6  2BAE               	incf	(_timer_low_pointer+1)& (0+255),f,b
  2463   003DF8                     
  2464                           ; BSR set to: 0
  2465                           ;timers.c: 108:     manoeuvre_pointer ++;
  2466   003DF8  4BAB               	infsnz	_manoeuvre_pointer& (0+255),f,b
  2467   003DFA  2BAC               	incf	(_manoeuvre_pointer+1)& (0+255),f,b
  2468   003DFC                     
  2469                           ; BSR set to: 0
  2470                           ;timers.c: 110:     manoeuvre_count ++;
  2471   003DFC  0101               	movlb	1	; () banked
  2472   003DFE  2BA4               	incf	_manoeuvre_count& (0+255),f,b
  2473   003E00                     
  2474                           ; BSR set to: 1
  2475   003E00  0012               	return		;funcret
  2476   003E02                     __end_of_write_trail:
  2477                           	callstack 0
  2478                           
  2479 ;; *************** function _wait_for_wall *****************
  2480 ;; Defined at:
  2481 ;;		line 162 in file "color.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  p               1   12[COMRAM] PTR struct RGBC_val
  2484 ;;		 -> main@RGBC_colour(8), 
  2485 ;;  loss            1   13[COMRAM] unsigned char 
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;		None
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      void 
  2490 ;; Registers used:
  2491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2500 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2501 ;;Total ram usage:        4 bytes
  2502 ;; Hardware stack levels used: 1
  2503 ;; Hardware stack levels required when called: 5
  2504 ;; This function calls:
  2505 ;;		_getRGBCval
  2506 ;; This function is called by:
  2507 ;;		_forward_navigation
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text8
  2512   003D42                     __ptext8:
  2513                           	callstack 0
  2514   003D42                     _wait_for_wall:
  2515                           	callstack 24
  2516   003D42                     
  2517                           ;color.c: 162: void wait_for_wall(struct RGBC_val *p, unsigned char loss);color.c: 163: 
      +                          {;color.c: 164:     while (!loss) {
  2518   003D42  EFBA  F01E         	goto	l4053
  2519   003D46                     l4047:
  2520                           
  2521                           ;color.c: 165:         getRGBCval(p);
  2522   003D46  C00D  F00C         	movff	wait_for_wall@p,getRGBCval@p
  2523   003D4A  EC40  F01D         	call	_getRGBCval	;wreg free
  2524   003D4E  500D               	movf	wait_for_wall@p^0,w,c
  2525   003D50  6ED9               	movwf	fsr2l,c
  2526   003D52  6ADA               	clrf	fsr2h,c
  2527   003D54  0E06               	movlw	6
  2528   003D56  26D9               	addwf	fsr2l,f,c
  2529   003D58  0E01               	movlw	1
  2530   003D5A  50DB               	movf	plusw2,w,c
  2531   003D5C  E107               	bnz	u3231
  2532   003D5E  0E32               	movlw	50
  2533   003D60  5CDE               	subwf	postinc2,w,c
  2534   003D62  B0D8               	btfsc	status,0,c
  2535   003D64  EFB6  F01E         	goto	u3231
  2536   003D68  EFB8  F01E         	goto	u3230
  2537   003D6C                     u3231:
  2538   003D6C  EFBA  F01E         	goto	l4053
  2539   003D70                     u3230:
  2540   003D70  EFC2  F01E         	goto	l96
  2541   003D74                     l4053:
  2542                           
  2543                           ;color.c: 164:     while (!loss) {
  2544   003D74  500E               	movf	wait_for_wall@loss^0,w,c
  2545   003D76  B4D8               	btfsc	status,2,c
  2546   003D78  EFC0  F01E         	goto	u3241
  2547   003D7C  EFC2  F01E         	goto	u3240
  2548   003D80                     u3241:
  2549   003D80  EFA3  F01E         	goto	l4047
  2550   003D84                     u3240:
  2551   003D84                     l96:
  2552   003D84  0012               	return		;funcret
  2553   003D86                     __end_of_wait_for_wall:
  2554                           	callstack 0
  2555                           
  2556 ;; *************** function _toggle_tricolour_LED *****************
  2557 ;; Defined at:
  2558 ;;		line 84 in file "buggy_lights.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;		None
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;		None
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, status,2, status,0
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2575 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2576 ;;Total ram usage:        1 bytes
  2577 ;; Hardware stack levels used: 1
  2578 ;; Hardware stack levels required when called: 1
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_forward_navigation
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text9
  2587   002B5C                     __ptext9:
  2588                           	callstack 0
  2589   002B5C                     _toggle_tricolour_LED:
  2590                           	callstack 28
  2591   002B5C                     
  2592                           ;buggy_lights.c: 88:         LATGbits.LATG1 = !LATGbits.LATG1;
  2593   002B5C  A27F               	btfss	127,1,c	;volatile
  2594   002B5E  EFB3  F015         	goto	u3101
  2595   002B62  EFB7  F015         	goto	u3100
  2596   002B66                     u3101:
  2597   002B66  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2598   002B68  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2599   002B6A  EFB8  F015         	goto	u3118
  2600   002B6E                     u3100:
  2601   002B6E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2602   002B70                     u3118:
  2603   002B70  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2604   002B72  507F               	movf	127,w,c	;volatile
  2605   002B74  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2606   002B76  0BFD               	andlw	-3
  2607   002B78  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2608   002B7A  6E7F               	movwf	127,c	;volatile
  2609                           
  2610                           ;buggy_lights.c: 89:         LATAbits.LATA4 = !LATAbits.LATA4;
  2611   002B7C  A879               	btfss	121,4,c	;volatile
  2612   002B7E  EFC3  F015         	goto	u3121
  2613   002B82  EFC7  F015         	goto	u3120
  2614   002B86                     u3121:
  2615   002B86  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2616   002B88  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2617   002B8A  EFC8  F015         	goto	u3138
  2618   002B8E                     u3120:
  2619   002B8E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2620   002B90                     u3138:
  2621   002B90  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  2622   002B92  5079               	movf	121,w,c	;volatile
  2623   002B94  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2624   002B96  0BEF               	andlw	-17
  2625   002B98  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2626   002B9A  6E79               	movwf	121,c	;volatile
  2627                           
  2628                           ;buggy_lights.c: 90:         LATFbits.LATF7 = !LATFbits.LATF7;
  2629   002B9C  AE7E               	btfss	126,7,c	;volatile
  2630   002B9E  EFD3  F015         	goto	u3141
  2631   002BA2  EFD7  F015         	goto	u3140
  2632   002BA6                     u3141:
  2633   002BA6  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2634   002BA8  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2635   002BAA  EFD8  F015         	goto	u3158
  2636   002BAE                     u3140:
  2637   002BAE  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2638   002BB0                     u3158:
  2639   002BB0  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2640   002BB2  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2641   002BB4  507E               	movf	126,w,c	;volatile
  2642   002BB6  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2643   002BB8  0B7F               	andlw	-129
  2644   002BBA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2645   002BBC  6E7E               	movwf	126,c	;volatile
  2646                           
  2647                           ;buggy_lights.c: 93:         LATGbits.LATG0 = !LATGbits.LATG0;
  2648   002BBE  A07F               	btfss	127,0,c	;volatile
  2649   002BC0  EFE4  F015         	goto	u3161
  2650   002BC4  EFE8  F015         	goto	u3160
  2651   002BC8                     u3161:
  2652   002BC8  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2653   002BCA  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2654   002BCC  EFE9  F015         	goto	u3178
  2655   002BD0                     u3160:
  2656   002BD0  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2657   002BD2                     u3178:
  2658   002BD2  507F               	movf	127,w,c	;volatile
  2659   002BD4  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2660   002BD6  0BFE               	andlw	-2
  2661   002BD8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2662   002BDA  6E7F               	movwf	127,c	;volatile
  2663                           
  2664                           ;buggy_lights.c: 94:         LATEbits.LATE7 = !LATEbits.LATE7;
  2665   002BDC  AE7D               	btfss	125,7,c	;volatile
  2666   002BDE  EFF3  F015         	goto	u3181
  2667   002BE2  EFF7  F015         	goto	u3180
  2668   002BE6                     u3181:
  2669   002BE6  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2670   002BE8  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2671   002BEA  EFF8  F015         	goto	u3198
  2672   002BEE                     u3180:
  2673   002BEE  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2674   002BF0                     u3198:
  2675   002BF0  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2676   002BF2  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2677   002BF4  507D               	movf	125,w,c	;volatile
  2678   002BF6  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2679   002BF8  0B7F               	andlw	-129
  2680   002BFA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2681   002BFC  6E7D               	movwf	125,c	;volatile
  2682                           
  2683                           ;buggy_lights.c: 95:         LATAbits.LATA3 = !LATAbits.LATA3;
  2684   002BFE  A679               	btfss	121,3,c	;volatile
  2685   002C00  EF04  F016         	goto	u3201
  2686   002C04  EF08  F016         	goto	u3200
  2687   002C08                     u3201:
  2688   002C08  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2689   002C0A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2690   002C0C  EF09  F016         	goto	u3218
  2691   002C10                     u3200:
  2692   002C10  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2693   002C12                     u3218:
  2694   002C12  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2695   002C14  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2696   002C16  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2697   002C18  5079               	movf	121,w,c	;volatile
  2698   002C1A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2699   002C1C  0BF7               	andlw	-9
  2700   002C1E  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2701   002C20  6E79               	movwf	121,c	;volatile
  2702   002C22  0012               	return		;funcret
  2703   002C24                     __end_of_toggle_tricolour_LED:
  2704                           	callstack 0
  2705                           
  2706 ;; *************** function _stop_timer *****************
  2707 ;; Defined at:
  2708 ;;		line 38 in file "timers.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;		None
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  1    wreg      void 
  2715 ;; Registers used:
  2716 ;;		None
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2726 ;;Total ram usage:        0 bytes
  2727 ;; Hardware stack levels used: 1
  2728 ;; Hardware stack levels required when called: 1
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_forward_navigation
  2733 ;;		_return_to_sender
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text10
  2738   0041A4                     __ptext10:
  2739                           	callstack 0
  2740   0041A4                     _stop_timer:
  2741                           	callstack 28
  2742   0041A4                     
  2743                           ;timers.c: 40:     T0CON0bits.T0EN=0;
  2744   0041A4  9ED5               	bcf	213,7,c	;volatile
  2745   0041A6  0012               	return		;funcret
  2746   0041A8                     __end_of_stop_timer:
  2747                           	callstack 0
  2748                           
  2749 ;; *************** function _sendRGBCvalSerial4 *****************
  2750 ;; Defined at:
  2751 ;;		line 67 in file "serial.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  col_val         1   57[COMRAM] PTR struct RGBC_val
  2754 ;;		 -> main@RGBC_colour(8), 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  tempStr        26   58[COMRAM] unsigned char [26]
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  1    wreg      void 
  2759 ;; Registers used:
  2760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2766 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2767 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2769 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2770 ;;Total ram usage:       27 bytes
  2771 ;; Hardware stack levels used: 1
  2772 ;; Hardware stack levels required when called: 6
  2773 ;; This function calls:
  2774 ;;		_sendStringSerial4
  2775 ;;		_sprintf
  2776 ;; This function is called by:
  2777 ;;		_forward_navigation
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text11
  2782   0039CC                     __ptext11:
  2783                           	callstack 0
  2784   0039CC                     _sendRGBCvalSerial4:
  2785                           	callstack 23
  2786   0039CC                     
  2787                           ;serial.c: 68:     char tempStr[26];;serial.c: 70:     sprintf(tempStr, "%u %u %u %u \r"
      +                          , col_val->R, col_val->G, col_val->B, col_val->C);
  2788   0039CC  0E3B               	movlw	low sendRGBCvalSerial4@tempStr
  2789   0039CE  6E20               	movwf	sprintf@s^0,c
  2790   0039D0  6A21               	clrf	(sprintf@s+1)^0,c
  2791   0039D2  0E01               	movlw	low STR_5
  2792   0039D4  6E22               	movwf	sprintf@fmt^0,c
  2793   0039D6  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2794   0039D8  6ED9               	movwf	fsr2l,c
  2795   0039DA  6ADA               	clrf	fsr2h,c
  2796   0039DC  CFDE F023          	movff	postinc2,?_sprintf+3
  2797   0039E0  CFDD F024          	movff	postdec2,?_sprintf+4
  2798   0039E4  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2799   0039E6  6ED9               	movwf	fsr2l,c
  2800   0039E8  6ADA               	clrf	fsr2h,c
  2801   0039EA  0E02               	movlw	2
  2802   0039EC  26D9               	addwf	fsr2l,f,c
  2803   0039EE  CFDE F025          	movff	postinc2,?_sprintf+5
  2804   0039F2  CFDD F026          	movff	postdec2,?_sprintf+6
  2805   0039F6  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2806   0039F8  6ED9               	movwf	fsr2l,c
  2807   0039FA  6ADA               	clrf	fsr2h,c
  2808   0039FC  0E04               	movlw	4
  2809   0039FE  26D9               	addwf	fsr2l,f,c
  2810   003A00  CFDE F027          	movff	postinc2,?_sprintf+7
  2811   003A04  CFDD F028          	movff	postdec2,?_sprintf+8
  2812   003A08  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2813   003A0A  6ED9               	movwf	fsr2l,c
  2814   003A0C  6ADA               	clrf	fsr2h,c
  2815   003A0E  0E06               	movlw	6
  2816   003A10  26D9               	addwf	fsr2l,f,c
  2817   003A12  CFDE F029          	movff	postinc2,?_sprintf+9
  2818   003A16  CFDD F02A          	movff	postdec2,?_sprintf+10
  2819   003A1A  EC59  F01E         	call	_sprintf	;wreg free
  2820   003A1E                     
  2821                           ;serial.c: 71:     sendStringSerial4(tempStr);
  2822   003A1E  0E3B               	movlw	low sendRGBCvalSerial4@tempStr
  2823   003A20  6E02               	movwf	sendStringSerial4@string^0,c
  2824   003A22  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2825   003A24  ECB5  F01C         	call	_sendStringSerial4	;wreg free
  2826   003A28  0012               	return		;funcret
  2827   003A2A                     __end_of_sendRGBCvalSerial4:
  2828                           	callstack 0
  2829                           
  2830 ;; *************** function _sendHSVvalSerial4 *****************
  2831 ;; Defined at:
  2832 ;;		line 77 in file "serial.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  col_val         1   57[COMRAM] PTR struct HSV_val
  2835 ;;		 -> main@HSV_colour(6), 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  tempStr        21   58[COMRAM] unsigned char [21]
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2847 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2848 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2850 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2851 ;;Total ram usage:       22 bytes
  2852 ;; Hardware stack levels used: 1
  2853 ;; Hardware stack levels required when called: 6
  2854 ;; This function calls:
  2855 ;;		_sendStringSerial4
  2856 ;;		_sprintf
  2857 ;; This function is called by:
  2858 ;;		_forward_navigation
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text12
  2863   003C66                     __ptext12:
  2864                           	callstack 0
  2865   003C66                     _sendHSVvalSerial4:
  2866                           	callstack 23
  2867   003C66                     
  2868                           ;serial.c: 78:     char tempStr[21];;serial.c: 80:     sprintf(tempStr, "%u %u %u \r", c
      +                          ol_val->H, col_val->S, col_val->V);
  2869   003C66  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  2870   003C68  6E20               	movwf	sprintf@s^0,c
  2871   003C6A  6A21               	clrf	(sprintf@s+1)^0,c
  2872   003C6C  0E04               	movlw	low (STR_5+3)
  2873   003C6E  6E22               	movwf	sprintf@fmt^0,c
  2874   003C70  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  2875   003C72  6ED9               	movwf	fsr2l,c
  2876   003C74  6ADA               	clrf	fsr2h,c
  2877   003C76  CFDE F023          	movff	postinc2,?_sprintf+3
  2878   003C7A  CFDD F024          	movff	postdec2,?_sprintf+4
  2879   003C7E  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  2880   003C80  6ED9               	movwf	fsr2l,c
  2881   003C82  6ADA               	clrf	fsr2h,c
  2882   003C84  0E02               	movlw	2
  2883   003C86  26D9               	addwf	fsr2l,f,c
  2884   003C88  CFDE F025          	movff	postinc2,?_sprintf+5
  2885   003C8C  CFDD F026          	movff	postdec2,?_sprintf+6
  2886   003C90  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  2887   003C92  6ED9               	movwf	fsr2l,c
  2888   003C94  6ADA               	clrf	fsr2h,c
  2889   003C96  0E04               	movlw	4
  2890   003C98  26D9               	addwf	fsr2l,f,c
  2891   003C9A  CFDE F027          	movff	postinc2,?_sprintf+7
  2892   003C9E  CFDD F028          	movff	postdec2,?_sprintf+8
  2893   003CA2  EC59  F01E         	call	_sprintf	;wreg free
  2894   003CA6                     
  2895                           ;serial.c: 81:     sendStringSerial4(tempStr);
  2896   003CA6  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  2897   003CA8  6E02               	movwf	sendStringSerial4@string^0,c
  2898   003CAA  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2899   003CAC  ECB5  F01C         	call	_sendStringSerial4	;wreg free
  2900   003CB0  0012               	return		;funcret
  2901   003CB2                     __end_of_sendHSVvalSerial4:
  2902                           	callstack 0
  2903                           
  2904 ;; *************** function _sendArrayCharSerial4 *****************
  2905 ;; Defined at:
  2906 ;;		line 53 in file "serial.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  arr             2   57[COMRAM] PTR unsigned char 
  2909 ;;		 -> trail_manoeuvre(20), trail_timer_low(20), trail_timer_high(20), 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  i               2  162[BANK1 ] unsigned int 
  2912 ;;  tempStr       161    0[BANK1 ] unsigned char [161]
  2913 ;;  index           1  161[BANK1 ] unsigned char 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2923 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2924 ;;      Locals:         0       0     164       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2926 ;;      Totals:         3       0     164       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2927 ;;Total ram usage:      167 bytes
  2928 ;; Hardware stack levels used: 1
  2929 ;; Hardware stack levels required when called: 6
  2930 ;; This function calls:
  2931 ;;		_sendStringSerial4
  2932 ;;		_sprintf
  2933 ;; This function is called by:
  2934 ;;		_forward_navigation
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text13
  2939   0035AA                     __ptext13:
  2940                           	callstack 0
  2941   0035AA                     _sendArrayCharSerial4:
  2942                           	callstack 23
  2943   0035AA                     
  2944                           ;serial.c: 55:     unsigned char index = 0;
  2945   0035AA  0E00               	movlw	0
  2946   0035AC  0101               	movlb	1	; () banked
  2947   0035AE  6FA1               	movwf	sendArrayCharSerial4@index& (0+255),b
  2948                           
  2949                           ;serial.c: 56:     char tempStr[20 * 8 + 1];;serial.c: 57:     for (unsigned int i = 0; 
      +                          i < 20; i++) {
  2950   0035B0  0E00               	movlw	0
  2951   0035B2  6FA3               	movwf	(sendArrayCharSerial4@i+1)& (0+255),b
  2952   0035B4  0E00               	movlw	0
  2953   0035B6  6FA2               	movwf	sendArrayCharSerial4@i& (0+255),b
  2954   0035B8                     l4787:
  2955                           
  2956                           ; BSR set to: 1
  2957                           ;serial.c: 58:         index += sprintf(&tempStr[index], "%d ", arr[i]);
  2958   0035B8  0E00               	movlw	low sendArrayCharSerial4@tempStr
  2959   0035BA  25A1               	addwf	sendArrayCharSerial4@index& (0+255),w,b
  2960   0035BC  6E20               	movwf	sprintf@s^0,c
  2961   0035BE  6A21               	clrf	(sprintf@s+1)^0,c
  2962   0035C0  0E01               	movlw	high sendArrayCharSerial4@tempStr
  2963   0035C2  2221               	addwfc	(sprintf@s+1)^0,f,c
  2964   0035C4  0E14               	movlw	low STR_2
  2965   0035C6  6E22               	movwf	sprintf@fmt^0,c
  2966   0035C8  51A2               	movf	sendArrayCharSerial4@i& (0+255),w,b
  2967   0035CA  243A               	addwf	sendArrayCharSerial4@arr^0,w,c
  2968   0035CC  6ED9               	movwf	fsr2l,c
  2969   0035CE  51A3               	movf	(sendArrayCharSerial4@i+1)& (0+255),w,b
  2970   0035D0  203B               	addwfc	(sendArrayCharSerial4@arr+1)^0,w,c
  2971   0035D2  6EDA               	movwf	fsr2h,c
  2972   0035D4  50DF               	movf	indf2,w,c
  2973   0035D6  6E3C               	movwf	??_sendArrayCharSerial4^0,c
  2974   0035D8  503C               	movf	??_sendArrayCharSerial4^0,w,c
  2975   0035DA  6E23               	movwf	(?_sprintf+3)^0,c
  2976   0035DC  6A24               	clrf	(?_sprintf+4)^0,c
  2977   0035DE  EC59  F01E         	call	_sprintf	;wreg free
  2978   0035E2  5020               	movf	?_sprintf^0,w,c
  2979   0035E4  0101               	movlb	1	; () banked
  2980   0035E6  27A1               	addwf	sendArrayCharSerial4@index& (0+255),f,b
  2981   0035E8                     
  2982                           ; BSR set to: 1
  2983                           ;serial.c: 59:     }
  2984   0035E8  4BA2               	infsnz	sendArrayCharSerial4@i& (0+255),f,b
  2985   0035EA  2BA3               	incf	(sendArrayCharSerial4@i+1)& (0+255),f,b
  2986   0035EC                     
  2987                           ; BSR set to: 1
  2988   0035EC  51A3               	movf	(sendArrayCharSerial4@i+1)& (0+255),w,b
  2989   0035EE  E109               	bnz	u3930
  2990   0035F0  0E14               	movlw	20
  2991   0035F2  5DA2               	subwf	sendArrayCharSerial4@i& (0+255),w,b
  2992   0035F4  A0D8               	btfss	status,0,c
  2993   0035F6  EFFF  F01A         	goto	u3931
  2994   0035FA  EF01  F01B         	goto	u3930
  2995   0035FE                     u3931:
  2996   0035FE  EFDC  F01A         	goto	l4787
  2997   003602                     u3930:
  2998   003602                     
  2999                           ; BSR set to: 1
  3000                           ;serial.c: 60:     sendStringSerial4(tempStr);
  3001   003602  0E00               	movlw	low sendArrayCharSerial4@tempStr
  3002   003604  6E02               	movwf	sendStringSerial4@string^0,c
  3003   003606  0E01               	movlw	high sendArrayCharSerial4@tempStr
  3004   003608  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  3005   00360A  ECB5  F01C         	call	_sendStringSerial4	;wreg free
  3006                           
  3007                           ;serial.c: 61:     sendStringSerial4(" \r");
  3008   00360E  0E11               	movlw	low (STR_1+2)
  3009   003610  6E02               	movwf	sendStringSerial4@string^0,c
  3010   003612  5002               	movf	sendStringSerial4@string^0,w,c
  3011   003614  A4D8               	btfss	status,2,c
  3012   003616  0E0E               	movlw	high __smallconst
  3013   003618  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  3014   00361A  ECB5  F01C         	call	_sendStringSerial4	;wreg free
  3015   00361E  0012               	return		;funcret
  3016   003620                     __end_of_sendArrayCharSerial4:
  3017                           	callstack 0
  3018                           
  3019 ;; *************** function _sprintf *****************
  3020 ;; Defined at:
  3021 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;  s               2   31[COMRAM] PTR unsigned char 
  3024 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), sendArrayCharSerial4@tempStr(161), sendIntSerial4
      +@string(17), 
  3025 ;;  fmt             1   33[COMRAM] PTR const unsigned char 
  3026 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  f              12   45[COMRAM] struct _IO_FILE
  3029 ;;  ret             2   42[COMRAM] int 
  3030 ;;  ap              1   44[COMRAM] PTR void [1]
  3031 ;;		 -> ?_sprintf(2), 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  2   31[COMRAM] int 
  3034 ;; Registers used:
  3035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3041 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3042 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3044 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3045 ;;Total ram usage:       26 bytes
  3046 ;; Hardware stack levels used: 1
  3047 ;; Hardware stack levels required when called: 5
  3048 ;; This function calls:
  3049 ;;		_vfprintf
  3050 ;; This function is called by:
  3051 ;;		_sendIntSerial4
  3052 ;;		_sendArrayCharSerial4
  3053 ;;		_sendRGBCvalSerial4
  3054 ;;		_sendHSVvalSerial4
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text14
  3059   003CB2                     __ptext14:
  3060                           	callstack 0
  3061   003CB2                     _sprintf:
  3062                           	callstack 23
  3063   003CB2  0E23               	movlw	low (?_sprintf+3)
  3064   003CB4  6E2D               	movwf	sprintf@ap^0,c
  3065   003CB6  C020  F02E         	movff	sprintf@s,sprintf@f
  3066   003CBA  C021  F02F         	movff	sprintf@s+1,sprintf@f+1
  3067   003CBE  0E00               	movlw	0
  3068   003CC0  6E32               	movwf	(sprintf@f+4)^0,c
  3069   003CC2  0E00               	movlw	0
  3070   003CC4  6E31               	movwf	(sprintf@f+3)^0,c
  3071   003CC6  0E00               	movlw	0
  3072   003CC8  6E39               	movwf	(sprintf@f+11)^0,c
  3073   003CCA  0E00               	movlw	0
  3074   003CCC  6E38               	movwf	(sprintf@f+10)^0,c
  3075   003CCE  0E2E               	movlw	low sprintf@f
  3076   003CD0  6E1C               	movwf	vfprintf@fp^0,c
  3077   003CD2  C022  F01D         	movff	sprintf@fmt,vfprintf@fmt
  3078   003CD6  0E2D               	movlw	low sprintf@ap
  3079   003CD8  6E1E               	movwf	vfprintf@ap^0,c
  3080   003CDA  EC15  F01D         	call	_vfprintf	;wreg free
  3081   003CDE  C01C  F02B         	movff	?_vfprintf,sprintf@ret
  3082   003CE2  C01D  F02C         	movff	?_vfprintf+1,sprintf@ret+1
  3083   003CE6  5031               	movf	(sprintf@f+3)^0,w,c
  3084   003CE8  2420               	addwf	sprintf@s^0,w,c
  3085   003CEA  6ED9               	movwf	fsr2l,c
  3086   003CEC  5032               	movf	(sprintf@f+4)^0,w,c
  3087   003CEE  2021               	addwfc	(sprintf@s+1)^0,w,c
  3088   003CF0  6EDA               	movwf	fsr2h,c
  3089   003CF2  6ADF               	clrf	indf2,c
  3090   003CF4  C02B  F020         	movff	sprintf@ret,?_sprintf
  3091   003CF8  C02C  F021         	movff	sprintf@ret+1,?_sprintf+1
  3092   003CFC  0012               	return		;funcret
  3093   003CFE                     __end_of_sprintf:
  3094                           	callstack 0
  3095                           
  3096 ;; *************** function _vfprintf *****************
  3097 ;; Defined at:
  3098 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;  fp              1   27[COMRAM] PTR struct _IO_FILE
  3101 ;;		 -> sprintf@f(12), 
  3102 ;;  fmt             1   28[COMRAM] PTR const unsigned char 
  3103 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  3104 ;;  ap              1   29[COMRAM] PTR PTR void 
  3105 ;;		 -> sprintf@ap(1), 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  cfmt            1   30[COMRAM] PTR unsigned char 
  3108 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  2   27[COMRAM] int 
  3111 ;; Registers used:
  3112 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3118 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3119 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3121 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3122 ;;Total ram usage:        4 bytes
  3123 ;; Hardware stack levels used: 1
  3124 ;; Hardware stack levels required when called: 4
  3125 ;; This function calls:
  3126 ;;		_vfpfcnvrt
  3127 ;; This function is called by:
  3128 ;;		_sprintf
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text15
  3133   003A2A                     __ptext15:
  3134                           	callstack 0
  3135   003A2A                     _vfprintf:
  3136                           	callstack 23
  3137   003A2A                     
  3138                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  3139   003A2A  C01D  F01F         	movff	vfprintf@fmt,vfprintf@cfmt
  3140   003A2E                     
  3141                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  3142   003A2E  0E00               	movlw	0
  3143   003A30  0100               	movlb	0	; () banked
  3144   003A32  6F81               	movwf	(_nout+1)& (0+255),b
  3145   003A34  0E00               	movlw	0
  3146   003A36  6F80               	movwf	_nout& (0+255),b
  3147                           
  3148                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3149   003A38  EF2B  F01D         	goto	l3597
  3150   003A3C                     l3595:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  3154   003A3C  C01C  F00E         	movff	vfprintf@fp,vfpfcnvrt@fp
  3155   003A40  0E1F               	movlw	low vfprintf@cfmt
  3156   003A42  6E0F               	movwf	vfpfcnvrt@fmt^0,c
  3157   003A44  C01E  F010         	movff	vfprintf@ap,vfpfcnvrt@ap
  3158   003A48  ECBA  F00E         	call	_vfpfcnvrt	;wreg free
  3159   003A4C  500E               	movf	?_vfpfcnvrt^0,w,c
  3160   003A4E  0100               	movlb	0	; () banked
  3161   003A50  2780               	addwf	_nout& (0+255),f,b
  3162   003A52  500F               	movf	(?_vfpfcnvrt+1)^0,w,c
  3163   003A54  2381               	addwfc	(_nout+1)& (0+255),f,b
  3164   003A56                     l3597:
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3168   003A56  C01F  FFF6         	movff	vfprintf@cfmt,tblptrl
  3169   003A5A                     	if	1	;There is more than 1 active tblptr byte
  3170   003A5A  0E0E               	movlw	high __smallconst
  3171   003A5C  6EF7               	movwf	tblptrh,c
  3172   003A5E                     	endif
  3173   003A5E                     	if	0	;tblptru may be non-zero
  3174   003A5E                     	endif
  3175   003A5E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3176   003A5E  0E00               	movlw	low (__smallconst shr (0+16))
  3177   003A60  6EF8               	movwf	tblptru,c
  3178   003A62                     	endif
  3179   003A62  0008               	tblrd		*
  3180   003A64  50F5               	movf	tablat,w,c
  3181   003A66  0900               	iorlw	0
  3182   003A68  A4D8               	btfss	status,2,c
  3183   003A6A  EF39  F01D         	goto	u2611
  3184   003A6E  EF3B  F01D         	goto	u2610
  3185   003A72                     u2611:
  3186   003A72  EF1E  F01D         	goto	l3595
  3187   003A76                     u2610:
  3188   003A76                     
  3189                           ; BSR set to: 0
  3190                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  3191   003A76  C080  F01C         	movff	_nout,?_vfprintf
  3192   003A7A  C081  F01D         	movff	_nout+1,?_vfprintf+1
  3193   003A7E                     
  3194                           ; BSR set to: 0
  3195   003A7E  0012               	return		;funcret
  3196   003A80                     __end_of_vfprintf:
  3197                           	callstack 0
  3198                           
  3199 ;; *************** function _vfpfcnvrt *****************
  3200 ;; Defined at:
  3201 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  3204 ;;		 -> sprintf@f(12), 
  3205 ;;  fmt             1   14[COMRAM] PTR PTR unsigned char 
  3206 ;;		 -> vfprintf@cfmt(1), 
  3207 ;;  ap              1   15[COMRAM] PTR PTR void 
  3208 ;;		 -> sprintf@ap(1), 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  convarg         4   22[COMRAM] struct .
  3211 ;;  cnt             2   19[COMRAM] int 
  3212 ;;  c               1   26[COMRAM] unsigned char 
  3213 ;;  cp              1   21[COMRAM] PTR unsigned char 
  3214 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  3215 ;;  done            1   18[COMRAM] _Bool 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  2   13[COMRAM] int 
  3218 ;; Registers used:
  3219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3225 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3226 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3228 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3229 ;;Total ram usage:       14 bytes
  3230 ;; Hardware stack levels used: 1
  3231 ;; Hardware stack levels required when called: 3
  3232 ;; This function calls:
  3233 ;;		___awdiv
  3234 ;;		___awmod
  3235 ;;		___lwdiv
  3236 ;;		___lwmod
  3237 ;;		_abs
  3238 ;;		_fputc
  3239 ;; This function is called by:
  3240 ;;		_vfprintf
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text16
  3245   001D74                     __ptext16:
  3246                           	callstack 0
  3247   001D74                     _vfpfcnvrt:
  3248                           	callstack 23
  3249   001D74                     
  3250                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  3251   001D74  0E00               	movlw	0
  3252   001D76  6E15               	movwf	(vfpfcnvrt@cnt+1)^0,c
  3253   001D78  0E00               	movlw	0
  3254   001D7A  6E14               	movwf	vfpfcnvrt@cnt^0,c
  3255   001D7C                     
  3256                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  3257   001D7C  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3258   001D7E  6ED9               	movwf	fsr2l,c
  3259   001D80  6ADA               	clrf	fsr2h,c
  3260   001D82  CFDF FFF6          	movff	indf2,tblptrl
  3261   001D86                     	if	1	;There is more than 1 active tblptr byte
  3262   001D86  0E0E               	movlw	high __smallconst
  3263   001D88  6EF7               	movwf	tblptrh,c
  3264   001D8A                     	endif
  3265   001D8A                     	if	0	;tblptru may be non-zero
  3266   001D8A                     	endif
  3267   001D8A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3268   001D8A  0E00               	movlw	low (__smallconst shr (0+16))
  3269   001D8C  6EF8               	movwf	tblptru,c
  3270   001D8E                     	endif
  3271   001D8E  0008               	tblrd		*
  3272   001D90  50F5               	movf	tablat,w,c
  3273   001D92  0A25               	xorlw	37
  3274   001D94  A4D8               	btfss	status,2,c
  3275   001D96  EFCF  F00E         	goto	u2461
  3276   001D9A  EFD1  F00E         	goto	u2460
  3277   001D9E                     u2461:
  3278   001D9E  EF26  F010         	goto	l3507
  3279   001DA2                     u2460:
  3280   001DA2                     
  3281                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3282   001DA2  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3283   001DA4  6ED9               	movwf	fsr2l,c
  3284   001DA6  6ADA               	clrf	fsr2h,c
  3285   001DA8  2ADF               	incf	indf2,f,c
  3286   001DAA                     
  3287                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3288   001DAA  0E00               	movlw	0
  3289   001DAC  0100               	movlb	0	; () banked
  3290   001DAE  6F83               	movwf	(_width+1)& (0+255),b
  3291   001DB0  0E00               	movlw	0
  3292   001DB2  6F82               	movwf	_width& (0+255),b
  3293   001DB4  C082  F086         	movff	_width,_flags
  3294   001DB8                     
  3295                           ; BSR set to: 0
  3296                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3297   001DB8  6984               	setf	_prec& (0+255),b
  3298   001DBA  6985               	setf	(_prec+1)& (0+255),b
  3299   001DBC                     
  3300                           ; BSR set to: 0
  3301                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3302   001DBC  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3303   001DBE  6ED9               	movwf	fsr2l,c
  3304   001DC0  6ADA               	clrf	fsr2h,c
  3305   001DC2  50DF               	movf	indf2,w,c
  3306   001DC4  6E16               	movwf	vfpfcnvrt@cp^0,c
  3307   001DC6                     
  3308                           ; BSR set to: 0
  3309                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3310   001DC6  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3311   001DCA                     	if	1	;There is more than 1 active tblptr byte
  3312   001DCA  0E0E               	movlw	high __smallconst
  3313   001DCC  6EF7               	movwf	tblptrh,c
  3314   001DCE                     	endif
  3315   001DCE                     	if	0	;tblptru may be non-zero
  3316   001DCE                     	endif
  3317   001DCE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3318   001DCE  0E00               	movlw	low (__smallconst shr (0+16))
  3319   001DD0  6EF8               	movwf	tblptru,c
  3320   001DD2                     	endif
  3321   001DD2  0008               	tblrd		*
  3322   001DD4  50F5               	movf	tablat,w,c
  3323   001DD6  0A64               	xorlw	100
  3324   001DD8  B4D8               	btfsc	status,2,c
  3325   001DDA  EFF1  F00E         	goto	u2471
  3326   001DDE  EFF3  F00E         	goto	u2470
  3327   001DE2                     u2471:
  3328   001DE2  EF03  F00F         	goto	l3443
  3329   001DE6                     u2470:
  3330   001DE6                     
  3331                           ; BSR set to: 0
  3332   001DE6  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3333   001DEA                     	if	1	;There is more than 1 active tblptr byte
  3334   001DEA  0E0E               	movlw	high __smallconst
  3335   001DEC  6EF7               	movwf	tblptrh,c
  3336   001DEE                     	endif
  3337   001DEE                     	if	0	;tblptru may be non-zero
  3338   001DEE                     	endif
  3339   001DEE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3340   001DEE  0E00               	movlw	low (__smallconst shr (0+16))
  3341   001DF0  6EF8               	movwf	tblptru,c
  3342   001DF2                     	endif
  3343   001DF2  0008               	tblrd		*
  3344   001DF4  50F5               	movf	tablat,w,c
  3345   001DF6  0A69               	xorlw	105
  3346   001DF8  A4D8               	btfss	status,2,c
  3347   001DFA  EF01  F00F         	goto	u2481
  3348   001DFE  EF03  F00F         	goto	u2480
  3349   001E02                     u2481:
  3350   001E02  EF91  F00F         	goto	l3473
  3351   001E06                     u2480:
  3352   001E06                     l3443:
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3356   001E06  5010               	movf	vfpfcnvrt@ap^0,w,c
  3357   001E08  6ED9               	movwf	fsr2l,c
  3358   001E0A  6ADA               	clrf	fsr2h,c
  3359   001E0C  0E02               	movlw	2
  3360   001E0E  26DF               	addwf	indf2,f,c
  3361   001E10  5CDF               	subwf	indf2,w,c
  3362   001E12  6ED9               	movwf	fsr2l,c
  3363   001E14  6ADA               	clrf	fsr2h,c
  3364   001E16  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  3365   001E1A  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  3366   001E1E                     
  3367                           ; BSR set to: 0
  3368                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3369   001E1E  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3370   001E20  6ED9               	movwf	fsr2l,c
  3371   001E22  6ADA               	clrf	fsr2h,c
  3372   001E24  2816               	incf	vfpfcnvrt@cp^0,w,c
  3373   001E26  6EDF               	movwf	indf2,c
  3374   001E28                     
  3375                           ; BSR set to: 0
  3376                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  3377   001E28  0E20               	movlw	32
  3378   001E2A  6E1B               	movwf	vfpfcnvrt@c^0,c
  3379                           
  3380                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  3381   001E2C  BE18               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  3382   001E2E  EF1B  F00F         	goto	u2491
  3383   001E32  EF1E  F00F         	goto	u2490
  3384   001E36                     u2491:
  3385   001E36  0E01               	movlw	1
  3386   001E38  EF1F  F00F         	goto	u2500
  3387   001E3C                     u2490:
  3388   001E3C  0E00               	movlw	0
  3389   001E3E                     u2500:
  3390   001E3E  6E13               	movwf	vfpfcnvrt@done^0,c
  3391   001E40                     l3449:
  3392                           
  3393                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  3394   001E40  061B               	decf	vfpfcnvrt@c^0,f,c
  3395   001E42  501B               	movf	vfpfcnvrt@c^0,w,c
  3396   001E44  0F60               	addlw	low _dbuf
  3397   001E46  6ED9               	movwf	fsr2l,c
  3398   001E48  6ADA               	clrf	fsr2h,c
  3399   001E4A  C017  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  3400   001E4E  C018  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  3401   001E52  0E00               	movlw	0
  3402   001E54  6E04               	movwf	(___awmod@divisor+1)^0,c
  3403   001E56  0E0A               	movlw	10
  3404   001E58  6E03               	movwf	___awmod@divisor^0,c
  3405   001E5A  ECA0  F018         	call	___awmod	;wreg free
  3406   001E5E  C001  F007         	movff	?___awmod,abs@a
  3407   001E62  C002  F008         	movff	?___awmod+1,abs@a+1
  3408   001E66  EC01  F01F         	call	_abs	;wreg free
  3409   001E6A  5007               	movf	?_abs^0,w,c
  3410   001E6C  0F30               	addlw	48
  3411   001E6E  6EDF               	movwf	indf2,c
  3412   001E70                     
  3413                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  3414   001E70  C017  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  3415   001E74  C018  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  3416   001E78  0E00               	movlw	0
  3417   001E7A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3418   001E7C  0E0A               	movlw	10
  3419   001E7E  6E03               	movwf	___awdiv@divisor^0,c
  3420   001E80  EC12  F016         	call	___awdiv	;wreg free
  3421   001E84  C001  F017         	movff	?___awdiv,vfpfcnvrt@convarg
  3422   001E88  C002  F018         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  3423   001E8C                     
  3424                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  3425   001E8C  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  3426   001E8E  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  3427   001E90                     
  3428                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  3429   001E90  5017               	movf	vfpfcnvrt@convarg^0,w,c
  3430   001E92  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3431   001E94  B4D8               	btfsc	status,2,c
  3432   001E96  EF4F  F00F         	goto	u2511
  3433   001E9A  EF51  F00F         	goto	u2510
  3434   001E9E                     u2511:
  3435   001E9E  EF59  F00F         	goto	l3459
  3436   001EA2                     u2510:
  3437   001EA2  501B               	movf	vfpfcnvrt@c^0,w,c
  3438   001EA4  A4D8               	btfss	status,2,c
  3439   001EA6  EF57  F00F         	goto	u2521
  3440   001EAA  EF59  F00F         	goto	u2520
  3441   001EAE                     u2521:
  3442   001EAE  EF20  F00F         	goto	l3449
  3443   001EB2                     u2520:
  3444   001EB2                     l3459:
  3445                           
  3446                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  3447   001EB2  501B               	movf	vfpfcnvrt@c^0,w,c
  3448   001EB4  B4D8               	btfsc	status,2,c
  3449   001EB6  EF5F  F00F         	goto	u2531
  3450   001EBA  EF61  F00F         	goto	u2530
  3451   001EBE                     u2531:
  3452   001EBE  EF82  F00F         	goto	l3471
  3453   001EC2                     u2530:
  3454   001EC2  5013               	movf	vfpfcnvrt@done^0,w,c
  3455   001EC4  B4D8               	btfsc	status,2,c
  3456   001EC6  EF67  F00F         	goto	u2541
  3457   001ECA  EF69  F00F         	goto	u2540
  3458   001ECE                     u2541:
  3459   001ECE  EF82  F00F         	goto	l3471
  3460   001ED2                     u2540:
  3461   001ED2                     
  3462                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  3463   001ED2  061B               	decf	vfpfcnvrt@c^0,f,c
  3464   001ED4  501B               	movf	vfpfcnvrt@c^0,w,c
  3465   001ED6  0F60               	addlw	low _dbuf
  3466   001ED8  6ED9               	movwf	fsr2l,c
  3467   001EDA  6ADA               	clrf	fsr2h,c
  3468   001EDC  0E2D               	movlw	45
  3469   001EDE  6EDF               	movwf	indf2,c
  3470   001EE0                     
  3471                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  3472   001EE0  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  3473   001EE2  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  3474   001EE4  EF82  F00F         	goto	l3471
  3475   001EE8                     l3467:
  3476                           
  3477                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  3478   001EE8  501B               	movf	vfpfcnvrt@c^0,w,c
  3479   001EEA  0F60               	addlw	low _dbuf
  3480   001EEC  6ED9               	movwf	fsr2l,c
  3481   001EEE  6ADA               	clrf	fsr2h,c
  3482   001EF0  50DF               	movf	indf2,w,c
  3483   001EF2  6E11               	movwf	??_vfpfcnvrt^0,c
  3484   001EF4  5011               	movf	??_vfpfcnvrt^0,w,c
  3485   001EF6  6E01               	movwf	fputc@c^0,c
  3486   001EF8  6A02               	clrf	(fputc@c+1)^0,c
  3487   001EFA  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3488   001EFE  ECD3  F016         	call	_fputc	;wreg free
  3489   001F02  2A1B               	incf	vfpfcnvrt@c^0,f,c
  3490   001F04                     l3471:
  3491                           
  3492                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  3493   001F04  0E20               	movlw	32
  3494   001F06  181B               	xorwf	vfpfcnvrt@c^0,w,c
  3495   001F08  A4D8               	btfss	status,2,c
  3496   001F0A  EF89  F00F         	goto	u2551
  3497   001F0E  EF8B  F00F         	goto	u2550
  3498   001F12                     u2551:
  3499   001F12  EF74  F00F         	goto	l3467
  3500   001F16                     u2550:
  3501   001F16                     l1467:
  3502                           
  3503                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  3504   001F16  C014  F00E         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  3505   001F1A  C015  F00F         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  3506   001F1E  EF3F  F010         	goto	l1468
  3507   001F22                     l3473:
  3508                           
  3509                           ; BSR set to: 0
  3510   001F22  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3511   001F26                     	if	1	;There is more than 1 active tblptr byte
  3512   001F26  0E0E               	movlw	high __smallconst
  3513   001F28  6EF7               	movwf	tblptrh,c
  3514   001F2A                     	endif
  3515   001F2A                     	if	0	;tblptru may be non-zero
  3516   001F2A                     	endif
  3517   001F2A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3518   001F2A  0E00               	movlw	low (__smallconst shr (0+16))
  3519   001F2C  6EF8               	movwf	tblptru,c
  3520   001F2E                     	endif
  3521   001F2E  0008               	tblrd		*
  3522   001F30  50F5               	movf	tablat,w,c
  3523   001F32  0A75               	xorlw	117
  3524   001F34  A4D8               	btfss	status,2,c
  3525   001F36  EF9F  F00F         	goto	u2561
  3526   001F3A  EFA1  F00F         	goto	u2560
  3527   001F3E                     u2561:
  3528   001F3E  EF1C  F010         	goto	l3501
  3529   001F42                     u2560:
  3530   001F42                     
  3531                           ; BSR set to: 0
  3532                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  3533   001F42  5010               	movf	vfpfcnvrt@ap^0,w,c
  3534   001F44  6ED9               	movwf	fsr2l,c
  3535   001F46  6ADA               	clrf	fsr2h,c
  3536   001F48  0E02               	movlw	2
  3537   001F4A  26DF               	addwf	indf2,f,c
  3538   001F4C  5CDF               	subwf	indf2,w,c
  3539   001F4E  6ED9               	movwf	fsr2l,c
  3540   001F50  6ADA               	clrf	fsr2h,c
  3541   001F52  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  3542   001F56  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  3543   001F5A                     
  3544                           ; BSR set to: 0
  3545                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  3546   001F5A  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3547   001F5C  6ED9               	movwf	fsr2l,c
  3548   001F5E  6ADA               	clrf	fsr2h,c
  3549   001F60  2816               	incf	vfpfcnvrt@cp^0,w,c
  3550   001F62  6EDF               	movwf	indf2,c
  3551                           
  3552                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  3553   001F64  EF04  F010         	goto	l3499
  3554   001F68                     l3479:
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  3558   001F68  0E20               	movlw	32
  3559   001F6A  6E1B               	movwf	vfpfcnvrt@c^0,c
  3560   001F6C                     l3481:
  3561                           
  3562                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  3563   001F6C  061B               	decf	vfpfcnvrt@c^0,f,c
  3564   001F6E  501B               	movf	vfpfcnvrt@c^0,w,c
  3565   001F70  0F60               	addlw	low _dbuf
  3566   001F72  6ED9               	movwf	fsr2l,c
  3567   001F74  6ADA               	clrf	fsr2h,c
  3568   001F76  C017  F001         	movff	vfpfcnvrt@convarg,___lwmod@dividend
  3569   001F7A  C018  F002         	movff	vfpfcnvrt@convarg+1,___lwmod@dividend+1
  3570   001F7E  0E00               	movlw	0
  3571   001F80  6E04               	movwf	(___lwmod@divisor+1)^0,c
  3572   001F82  0E0A               	movlw	10
  3573   001F84  6E03               	movwf	___lwmod@divisor^0,c
  3574   001F86  EC83  F01C         	call	___lwmod	;wreg free
  3575   001F8A  5001               	movf	?___lwmod^0,w,c
  3576   001F8C  0F30               	addlw	48
  3577   001F8E  6EDF               	movwf	indf2,c
  3578   001F90                     
  3579                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  3580   001F90  C017  F007         	movff	vfpfcnvrt@convarg,___lwdiv@dividend
  3581   001F94  C018  F008         	movff	vfpfcnvrt@convarg+1,___lwdiv@dividend+1
  3582   001F98  0E00               	movlw	0
  3583   001F9A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3584   001F9C  0E0A               	movlw	10
  3585   001F9E  6E09               	movwf	___lwdiv@divisor^0,c
  3586   001FA0  EC10  F01B         	call	___lwdiv	;wreg free
  3587   001FA4  C007  F017         	movff	?___lwdiv,vfpfcnvrt@convarg
  3588   001FA8  C008  F018         	movff	?___lwdiv+1,vfpfcnvrt@convarg+1
  3589   001FAC                     
  3590                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1530:       cnt++
      +                          ;
  3591   001FAC  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  3592   001FAE  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  3593   001FB0                     
  3594                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  3595   001FB0  5017               	movf	vfpfcnvrt@convarg^0,w,c
  3596   001FB2  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3597   001FB4  B4D8               	btfsc	status,2,c
  3598   001FB6  EFDF  F00F         	goto	u2571
  3599   001FBA  EFE1  F00F         	goto	u2570
  3600   001FBE                     u2571:
  3601   001FBE  EFF9  F00F         	goto	l3495
  3602   001FC2                     u2570:
  3603   001FC2  501B               	movf	vfpfcnvrt@c^0,w,c
  3604   001FC4  A4D8               	btfss	status,2,c
  3605   001FC6  EFE7  F00F         	goto	u2581
  3606   001FCA  EFE9  F00F         	goto	u2580
  3607   001FCE                     u2581:
  3608   001FCE  EFB6  F00F         	goto	l3481
  3609   001FD2                     u2580:
  3610   001FD2  EFF9  F00F         	goto	l3495
  3611   001FD6                     l3491:
  3612                           
  3613                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  3614   001FD6  501B               	movf	vfpfcnvrt@c^0,w,c
  3615   001FD8  0F60               	addlw	low _dbuf
  3616   001FDA  6ED9               	movwf	fsr2l,c
  3617   001FDC  6ADA               	clrf	fsr2h,c
  3618   001FDE  50DF               	movf	indf2,w,c
  3619   001FE0  6E11               	movwf	??_vfpfcnvrt^0,c
  3620   001FE2  5011               	movf	??_vfpfcnvrt^0,w,c
  3621   001FE4  6E01               	movwf	fputc@c^0,c
  3622   001FE6  6A02               	clrf	(fputc@c+1)^0,c
  3623   001FE8  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3624   001FEC  ECD3  F016         	call	_fputc	;wreg free
  3625   001FF0  2A1B               	incf	vfpfcnvrt@c^0,f,c
  3626   001FF2                     l3495:
  3627                           
  3628                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  3629   001FF2  0E20               	movlw	32
  3630   001FF4  181B               	xorwf	vfpfcnvrt@c^0,w,c
  3631   001FF6  A4D8               	btfss	status,2,c
  3632   001FF8  EF00  F010         	goto	u2591
  3633   001FFC  EF02  F010         	goto	u2590
  3634   002000                     u2591:
  3635   002000  EFEB  F00F         	goto	l3491
  3636   002004                     u2590:
  3637   002004  EF8B  F00F         	goto	l1467
  3638   002008                     l3499:
  3639                           
  3640                           ; BSR set to: 0
  3641   002008  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3642   00200C                     	if	1	;There is more than 1 active tblptr byte
  3643   00200C  0E0E               	movlw	high __smallconst
  3644   00200E  6EF7               	movwf	tblptrh,c
  3645   002010                     	endif
  3646   002010                     	if	0	;tblptru may be non-zero
  3647   002010                     	endif
  3648   002010                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3649   002010  0E00               	movlw	low (__smallconst shr (0+16))
  3650   002012  6EF8               	movwf	tblptru,c
  3651   002014                     	endif
  3652   002014  0008               	tblrd		*
  3653   002016  50F5               	movf	tablat,w,c
  3654   002018  6E11               	movwf	??_vfpfcnvrt^0,c
  3655   00201A  6A12               	clrf	(??_vfpfcnvrt+1)^0,c
  3656                           
  3657                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3658                           ; Switch size 1, requested type "simple"
  3659                           ; Number of cases is 1, Range of values is 0 to 0
  3660                           ; switch strategies available:
  3661                           ; Name         Instructions Cycles
  3662                           ; simple_byte            4     3 (average)
  3663                           ;	Chosen strategy is simple_byte
  3664   00201C  5012               	movf	(??_vfpfcnvrt+1)^0,w,c
  3665   00201E  0A00               	xorlw	0	; case 0
  3666   002020  B4D8               	btfsc	status,2,c
  3667   002022  EF15  F010         	goto	l5105
  3668   002026  EF1C  F010         	goto	l3501
  3669   00202A                     l5105:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ; Switch size 1, requested type "simple"
  3673                           ; Number of cases is 1, Range of values is 117 to 117
  3674                           ; switch strategies available:
  3675                           ; Name         Instructions Cycles
  3676                           ; simple_byte            4     3 (average)
  3677                           ;	Chosen strategy is simple_byte
  3678   00202A  5011               	movf	??_vfpfcnvrt^0,w,c
  3679   00202C  0A75               	xorlw	117	; case 117
  3680   00202E  B4D8               	btfsc	status,2,c
  3681   002030  EFB4  F00F         	goto	l3479
  3682   002034  EF1C  F010         	goto	l3501
  3683   002038                     l3501:
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3687   002038  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3688   00203A  6ED9               	movwf	fsr2l,c
  3689   00203C  6ADA               	clrf	fsr2h,c
  3690   00203E  2ADF               	incf	indf2,f,c
  3691   002040                     
  3692                           ; BSR set to: 0
  3693                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  3694   002040  0E00               	movlw	0
  3695   002042  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  3696   002044  0E00               	movlw	0
  3697   002046  6E0E               	movwf	?_vfpfcnvrt^0,c
  3698   002048  EF3F  F010         	goto	l1468
  3699   00204C                     l3507:
  3700                           
  3701                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3702   00204C  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3703   00204E  6ED9               	movwf	fsr2l,c
  3704   002050  6ADA               	clrf	fsr2h,c
  3705   002052  CFDF FFF6          	movff	indf2,tblptrl
  3706   002056                     	if	1	;There is more than 1 active tblptr byte
  3707   002056  0E0E               	movlw	high __smallconst
  3708   002058  6EF7               	movwf	tblptrh,c
  3709   00205A                     	endif
  3710   00205A                     	if	0	;tblptru may be non-zero
  3711   00205A                     	endif
  3712   00205A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3713   00205A  0E00               	movlw	low (__smallconst shr (0+16))
  3714   00205C  6EF8               	movwf	tblptru,c
  3715   00205E                     	endif
  3716   00205E  0008               	tblrd		*
  3717   002060  50F5               	movf	tablat,w,c
  3718   002062  6E01               	movwf	fputc@c^0,c
  3719   002064  6A02               	clrf	(fputc@c+1)^0,c
  3720   002066  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3721   00206A  ECD3  F016         	call	_fputc	;wreg free
  3722   00206E                     
  3723                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  3724   00206E  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3725   002070  6ED9               	movwf	fsr2l,c
  3726   002072  6ADA               	clrf	fsr2h,c
  3727   002074  2ADF               	incf	indf2,f,c
  3728   002076                     
  3729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  3730   002076  0E00               	movlw	0
  3731   002078  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  3732   00207A  0E01               	movlw	1
  3733   00207C  6E0E               	movwf	?_vfpfcnvrt^0,c
  3734   00207E                     l1468:
  3735   00207E  0012               	return		;funcret
  3736   002080                     __end_of_vfpfcnvrt:
  3737                           	callstack 0
  3738                           
  3739 ;; *************** function _fputc *****************
  3740 ;; Defined at:
  3741 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  c               2    0[COMRAM] int 
  3744 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  3745 ;;		 -> sprintf@f(12), 
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;		None
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  2    0[COMRAM] int 
  3750 ;; Registers used:
  3751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3757 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3759 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3760 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3761 ;;Total ram usage:        8 bytes
  3762 ;; Hardware stack levels used: 1
  3763 ;; Hardware stack levels required when called: 2
  3764 ;; This function calls:
  3765 ;;		_putch
  3766 ;; This function is called by:
  3767 ;;		_vfpfcnvrt
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text17
  3772   002DA6                     __ptext17:
  3773                           	callstack 0
  3774   002DA6                     _fputc:
  3775                           	callstack 23
  3776   002DA6  5003               	movf	fputc@fp^0,w,c
  3777   002DA8  B4D8               	btfsc	status,2,c
  3778   002DAA  EFD9  F016         	goto	u2231
  3779   002DAE  EFDB  F016         	goto	u2230
  3780   002DB2                     u2231:
  3781   002DB2  EFE3  F016         	goto	l3297
  3782   002DB6                     u2230:
  3783   002DB6  5003               	movf	fputc@fp^0,w,c
  3784   002DB8  A4D8               	btfss	status,2,c
  3785   002DBA  EFE1  F016         	goto	u2241
  3786   002DBE  EFE3  F016         	goto	u2240
  3787   002DC2                     u2241:
  3788   002DC2  EFE8  F016         	goto	l3299
  3789   002DC6                     u2240:
  3790   002DC6                     l3297:
  3791   002DC6  5001               	movf	fputc@c^0,w,c
  3792   002DC8  ECD6  F020         	call	_putch
  3793   002DCC  EF2F  F017         	goto	l1506
  3794   002DD0                     l3299:
  3795   002DD0  5003               	movf	fputc@fp^0,w,c
  3796   002DD2  6ED9               	movwf	fsr2l,c
  3797   002DD4  6ADA               	clrf	fsr2h,c
  3798   002DD6  0E0A               	movlw	10
  3799   002DD8  26D9               	addwf	fsr2l,f,c
  3800   002DDA  50DE               	movf	postinc2,w,c
  3801   002DDC  10DE               	iorwf	postinc2,w,c
  3802   002DDE  B4D8               	btfsc	status,2,c
  3803   002DE0  EFF4  F016         	goto	u2251
  3804   002DE4  EFF6  F016         	goto	u2250
  3805   002DE8                     u2251:
  3806   002DE8  EF0F  F017         	goto	l3303
  3807   002DEC                     u2250:
  3808   002DEC  5003               	movf	fputc@fp^0,w,c
  3809   002DEE  6ED9               	movwf	fsr2l,c
  3810   002DF0  6ADA               	clrf	fsr2h,c
  3811   002DF2  0E0A               	movlw	10
  3812   002DF4  26D9               	addwf	fsr2l,f,c
  3813   002DF6  5003               	movf	fputc@fp^0,w,c
  3814   002DF8  6EE1               	movwf	fsr1l,c
  3815   002DFA  6AE2               	clrf	fsr1h,c
  3816   002DFC  0E03               	movlw	3
  3817   002DFE  26E1               	addwf	fsr1l,f,c
  3818   002E00  50DE               	movf	postinc2,w,c
  3819   002E02  5CE6               	subwf	postinc1,w,c
  3820   002E04  50E6               	movf	postinc1,w,c
  3821   002E06  0A80               	xorlw	128
  3822   002E08  6E08               	movwf	(??_fputc+4)^0,c
  3823   002E0A  50DE               	movf	postinc2,w,c
  3824   002E0C  0A80               	xorlw	128
  3825   002E0E  5808               	subwfb	(??_fputc+4)^0,w,c
  3826   002E10  B0D8               	btfsc	status,0,c
  3827   002E12  EF0D  F017         	goto	u2261
  3828   002E16  EF0F  F017         	goto	u2260
  3829   002E1A                     u2261:
  3830   002E1A  EF2F  F017         	goto	l1506
  3831   002E1E                     u2260:
  3832   002E1E                     l3303:
  3833   002E1E  5003               	movf	fputc@fp^0,w,c
  3834   002E20  6ED9               	movwf	fsr2l,c
  3835   002E22  6ADA               	clrf	fsr2h,c
  3836   002E24  0E03               	movlw	3
  3837   002E26  26D9               	addwf	fsr2l,f,c
  3838   002E28  CFDE F004          	movff	postinc2,??_fputc
  3839   002E2C  CFDD F005          	movff	postdec2,??_fputc+1
  3840   002E30  5003               	movf	fputc@fp^0,w,c
  3841   002E32  6ED9               	movwf	fsr2l,c
  3842   002E34  6ADA               	clrf	fsr2h,c
  3843   002E36  CFDE F006          	movff	postinc2,??_fputc+2
  3844   002E3A  CFDD F007          	movff	postdec2,??_fputc+3
  3845   002E3E  5004               	movf	??_fputc^0,w,c
  3846   002E40  2406               	addwf	(??_fputc+2)^0,w,c
  3847   002E42  6ED9               	movwf	fsr2l,c
  3848   002E44  5005               	movf	(??_fputc+1)^0,w,c
  3849   002E46  2007               	addwfc	(??_fputc+3)^0,w,c
  3850   002E48  6EDA               	movwf	fsr2h,c
  3851   002E4A  C001  FFDF         	movff	fputc@c,indf2
  3852   002E4E  5003               	movf	fputc@fp^0,w,c
  3853   002E50  6ED9               	movwf	fsr2l,c
  3854   002E52  6ADA               	clrf	fsr2h,c
  3855   002E54  0E03               	movlw	3
  3856   002E56  26D9               	addwf	fsr2l,f,c
  3857   002E58  2ADE               	incf	postinc2,f,c
  3858   002E5A  0E00               	movlw	0
  3859   002E5C  22DD               	addwfc	postdec2,f,c
  3860   002E5E                     l1506:
  3861   002E5E  0012               	return		;funcret
  3862   002E60                     __end_of_fputc:
  3863                           	callstack 0
  3864                           
  3865 ;; *************** function _putch *****************
  3866 ;; Defined at:
  3867 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  c               1    wreg     unsigned char 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  c               1    0[COMRAM] unsigned char 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  1    wreg      void 
  3874 ;; Registers used:
  3875 ;;		wreg
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3885 ;;Total ram usage:        0 bytes
  3886 ;; Hardware stack levels used: 1
  3887 ;; Hardware stack levels required when called: 1
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_fputc
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text18
  3896   0041AC                     __ptext18:
  3897                           	callstack 0
  3898   0041AC                     _putch:
  3899                           	callstack 23
  3900   0041AC  0012               	return		;funcret
  3901   0041AE                     __end_of_putch:
  3902                           	callstack 0
  3903                           
  3904 ;; *************** function _abs *****************
  3905 ;; Defined at:
  3906 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  a               2    6[COMRAM] int 
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;		None
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  2    6[COMRAM] int 
  3913 ;; Registers used:
  3914 ;;		wreg, status,2, status,0
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3920 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3922 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3923 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3924 ;;Total ram usage:        4 bytes
  3925 ;; Hardware stack levels used: 1
  3926 ;; Hardware stack levels required when called: 1
  3927 ;; This function calls:
  3928 ;;		Nothing
  3929 ;; This function is called by:
  3930 ;;		_vfpfcnvrt
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	text19
  3935   003E02                     __ptext19:
  3936                           	callstack 0
  3937   003E02                     _abs:
  3938                           	callstack 24
  3939   003E02  BE08               	btfsc	(abs@a+1)^0,7,c
  3940   003E04  EF06  F01F         	goto	u2271
  3941   003E08  EF08  F01F         	goto	u2270
  3942   003E0C                     u2271:
  3943   003E0C  EF0E  F01F         	goto	l1491
  3944   003E10                     u2270:
  3945   003E10  C007  F007         	movff	abs@a,?_abs
  3946   003E14  C008  F008         	movff	abs@a+1,?_abs+1
  3947   003E18  EF1A  F01F         	goto	l1494
  3948   003E1C                     l1491:
  3949   003E1C  C007  F009         	movff	abs@a,??_abs
  3950   003E20  C008  F00A         	movff	abs@a+1,??_abs+1
  3951   003E24  1E09               	comf	??_abs^0,f,c
  3952   003E26  1E0A               	comf	(??_abs+1)^0,f,c
  3953   003E28  4A09               	infsnz	??_abs^0,f,c
  3954   003E2A  2A0A               	incf	(??_abs+1)^0,f,c
  3955   003E2C  C009  F007         	movff	??_abs,?_abs
  3956   003E30  C00A  F008         	movff	??_abs+1,?_abs+1
  3957   003E34                     l1494:
  3958   003E34  0012               	return		;funcret
  3959   003E36                     __end_of_abs:
  3960                           	callstack 0
  3961                           
  3962 ;; *************** function ___lwmod *****************
  3963 ;; Defined at:
  3964 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  dividend        2    0[COMRAM] unsigned int 
  3967 ;;  divisor         2    2[COMRAM] unsigned int 
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;  counter         1    4[COMRAM] unsigned char 
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  2    0[COMRAM] unsigned int 
  3972 ;; Registers used:
  3973 ;;		wreg, status,2, status,0
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3982 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3983 ;;Total ram usage:        5 bytes
  3984 ;; Hardware stack levels used: 1
  3985 ;; Hardware stack levels required when called: 1
  3986 ;; This function calls:
  3987 ;;		Nothing
  3988 ;; This function is called by:
  3989 ;;		_vfpfcnvrt
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text20
  3994   003906                     __ptext20:
  3995                           	callstack 0
  3996   003906                     ___lwmod:
  3997                           	callstack 24
  3998   003906  5003               	movf	___lwmod@divisor^0,w,c
  3999   003908  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  4000   00390A  B4D8               	btfsc	status,2,c
  4001   00390C  EF8A  F01C         	goto	u2201
  4002   003910  EF8C  F01C         	goto	u2200
  4003   003914                     u2201:
  4004   003914  EFB0  F01C         	goto	l1249
  4005   003918                     u2200:
  4006   003918  0E01               	movlw	1
  4007   00391A  6E05               	movwf	___lwmod@counter^0,c
  4008   00391C  EF94  F01C         	goto	l3283
  4009   003920                     l3281:
  4010   003920  90D8               	bcf	status,0,c
  4011   003922  3603               	rlcf	___lwmod@divisor^0,f,c
  4012   003924  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  4013   003926  2A05               	incf	___lwmod@counter^0,f,c
  4014   003928                     l3283:
  4015   003928  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  4016   00392A  EF99  F01C         	goto	u2211
  4017   00392E  EF9B  F01C         	goto	u2210
  4018   003932                     u2211:
  4019   003932  EF90  F01C         	goto	l3281
  4020   003936                     u2210:
  4021   003936                     l3285:
  4022   003936  5003               	movf	___lwmod@divisor^0,w,c
  4023   003938  5C01               	subwf	___lwmod@dividend^0,w,c
  4024   00393A  5004               	movf	(___lwmod@divisor+1)^0,w,c
  4025   00393C  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  4026   00393E  A0D8               	btfss	status,0,c
  4027   003940  EFA4  F01C         	goto	u2221
  4028   003944  EFA6  F01C         	goto	u2220
  4029   003948                     u2221:
  4030   003948  EFAA  F01C         	goto	l3289
  4031   00394C                     u2220:
  4032   00394C  5003               	movf	___lwmod@divisor^0,w,c
  4033   00394E  5E01               	subwf	___lwmod@dividend^0,f,c
  4034   003950  5004               	movf	(___lwmod@divisor+1)^0,w,c
  4035   003952  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  4036   003954                     l3289:
  4037   003954  90D8               	bcf	status,0,c
  4038   003956  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  4039   003958  3203               	rrcf	___lwmod@divisor^0,f,c
  4040   00395A  2E05               	decfsz	___lwmod@counter^0,f,c
  4041   00395C  EF9B  F01C         	goto	l3285
  4042   003960                     l1249:
  4043   003960  C001  F001         	movff	___lwmod@dividend,?___lwmod
  4044   003964  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  4045   003968  0012               	return		;funcret
  4046   00396A                     __end_of___lwmod:
  4047                           	callstack 0
  4048                           
  4049 ;; *************** function ___awmod *****************
  4050 ;; Defined at:
  4051 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  dividend        2    0[COMRAM] int 
  4054 ;;  divisor         2    2[COMRAM] int 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  sign            1    5[COMRAM] unsigned char 
  4057 ;;  counter         1    4[COMRAM] unsigned char 
  4058 ;; Return value:  Size  Location     Type
  4059 ;;                  2    0[COMRAM] int 
  4060 ;; Registers used:
  4061 ;;		wreg, status,2, status,0
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4067 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4068 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4070 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4071 ;;Total ram usage:        6 bytes
  4072 ;; Hardware stack levels used: 1
  4073 ;; Hardware stack levels required when called: 1
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_vfpfcnvrt
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text21
  4082   003140                     __ptext21:
  4083                           	callstack 0
  4084   003140                     ___awmod:
  4085                           	callstack 24
  4086   003140  0E00               	movlw	0
  4087   003142  6E06               	movwf	___awmod@sign^0,c
  4088   003144  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  4089   003146  EFA9  F018         	goto	u2140
  4090   00314A  EFA7  F018         	goto	u2141
  4091   00314E                     u2141:
  4092   00314E  EFAF  F018         	goto	l3249
  4093   003152                     u2140:
  4094   003152  6C01               	negf	___awmod@dividend^0,c
  4095   003154  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4096   003156  B0D8               	btfsc	status,0,c
  4097   003158  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4098   00315A  0E01               	movlw	1
  4099   00315C  6E06               	movwf	___awmod@sign^0,c
  4100   00315E                     l3249:
  4101   00315E  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  4102   003160  EFB6  F018         	goto	u2150
  4103   003164  EFB4  F018         	goto	u2151
  4104   003168                     u2151:
  4105   003168  EFBA  F018         	goto	l3253
  4106   00316C                     u2150:
  4107   00316C  6C03               	negf	___awmod@divisor^0,c
  4108   00316E  1E04               	comf	(___awmod@divisor+1)^0,f,c
  4109   003170  B0D8               	btfsc	status,0,c
  4110   003172  2A04               	incf	(___awmod@divisor+1)^0,f,c
  4111   003174                     l3253:
  4112   003174  5003               	movf	___awmod@divisor^0,w,c
  4113   003176  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  4114   003178  B4D8               	btfsc	status,2,c
  4115   00317A  EFC1  F018         	goto	u2161
  4116   00317E  EFC3  F018         	goto	u2160
  4117   003182                     u2161:
  4118   003182  EFE7  F018         	goto	l3269
  4119   003186                     u2160:
  4120   003186  0E01               	movlw	1
  4121   003188  6E05               	movwf	___awmod@counter^0,c
  4122   00318A  EFCB  F018         	goto	l3259
  4123   00318E                     l3257:
  4124   00318E  90D8               	bcf	status,0,c
  4125   003190  3603               	rlcf	___awmod@divisor^0,f,c
  4126   003192  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  4127   003194  2A05               	incf	___awmod@counter^0,f,c
  4128   003196                     l3259:
  4129   003196  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  4130   003198  EFD0  F018         	goto	u2171
  4131   00319C  EFD2  F018         	goto	u2170
  4132   0031A0                     u2171:
  4133   0031A0  EFC7  F018         	goto	l3257
  4134   0031A4                     u2170:
  4135   0031A4                     l3261:
  4136   0031A4  5003               	movf	___awmod@divisor^0,w,c
  4137   0031A6  5C01               	subwf	___awmod@dividend^0,w,c
  4138   0031A8  5004               	movf	(___awmod@divisor+1)^0,w,c
  4139   0031AA  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  4140   0031AC  A0D8               	btfss	status,0,c
  4141   0031AE  EFDB  F018         	goto	u2181
  4142   0031B2  EFDD  F018         	goto	u2180
  4143   0031B6                     u2181:
  4144   0031B6  EFE1  F018         	goto	l3265
  4145   0031BA                     u2180:
  4146   0031BA  5003               	movf	___awmod@divisor^0,w,c
  4147   0031BC  5E01               	subwf	___awmod@dividend^0,f,c
  4148   0031BE  5004               	movf	(___awmod@divisor+1)^0,w,c
  4149   0031C0  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  4150   0031C2                     l3265:
  4151   0031C2  90D8               	bcf	status,0,c
  4152   0031C4  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  4153   0031C6  3203               	rrcf	___awmod@divisor^0,f,c
  4154   0031C8  2E05               	decfsz	___awmod@counter^0,f,c
  4155   0031CA  EFD2  F018         	goto	l3261
  4156   0031CE                     l3269:
  4157   0031CE  5006               	movf	___awmod@sign^0,w,c
  4158   0031D0  B4D8               	btfsc	status,2,c
  4159   0031D2  EFED  F018         	goto	u2191
  4160   0031D6  EFEF  F018         	goto	u2190
  4161   0031DA                     u2191:
  4162   0031DA  EFF3  F018         	goto	l3273
  4163   0031DE                     u2190:
  4164   0031DE  6C01               	negf	___awmod@dividend^0,c
  4165   0031E0  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4166   0031E2  B0D8               	btfsc	status,0,c
  4167   0031E4  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4168   0031E6                     l3273:
  4169   0031E6  C001  F001         	movff	___awmod@dividend,?___awmod
  4170   0031EA  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4171   0031EE  0012               	return		;funcret
  4172   0031F0                     __end_of___awmod:
  4173                           	callstack 0
  4174                           
  4175 ;; *************** function ___awdiv *****************
  4176 ;; Defined at:
  4177 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  dividend        2    0[COMRAM] int 
  4180 ;;  divisor         2    2[COMRAM] int 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  quotient        2    6[COMRAM] int 
  4183 ;;  sign            1    5[COMRAM] unsigned char 
  4184 ;;  counter         1    4[COMRAM] unsigned char 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  2    0[COMRAM] int 
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4195 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4197 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4198 ;;Total ram usage:        8 bytes
  4199 ;; Hardware stack levels used: 1
  4200 ;; Hardware stack levels required when called: 1
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		_vfpfcnvrt
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text22
  4209   002C24                     __ptext22:
  4210                           	callstack 0
  4211   002C24                     ___awdiv:
  4212                           	callstack 24
  4213   002C24  0E00               	movlw	0
  4214   002C26  6E06               	movwf	___awdiv@sign^0,c
  4215   002C28  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  4216   002C2A  EF1B  F016         	goto	u2080
  4217   002C2E  EF19  F016         	goto	u2081
  4218   002C32                     u2081:
  4219   002C32  EF21  F016         	goto	l3205
  4220   002C36                     u2080:
  4221   002C36  6C03               	negf	___awdiv@divisor^0,c
  4222   002C38  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  4223   002C3A  B0D8               	btfsc	status,0,c
  4224   002C3C  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  4225   002C3E  0E01               	movlw	1
  4226   002C40  6E06               	movwf	___awdiv@sign^0,c
  4227   002C42                     l3205:
  4228   002C42  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  4229   002C44  EF28  F016         	goto	u2090
  4230   002C48  EF26  F016         	goto	u2091
  4231   002C4C                     u2091:
  4232   002C4C  EF2E  F016         	goto	l3211
  4233   002C50                     u2090:
  4234   002C50  6C01               	negf	___awdiv@dividend^0,c
  4235   002C52  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  4236   002C54  B0D8               	btfsc	status,0,c
  4237   002C56  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  4238   002C58  0E01               	movlw	1
  4239   002C5A  1A06               	xorwf	___awdiv@sign^0,f,c
  4240   002C5C                     l3211:
  4241   002C5C  0E00               	movlw	0
  4242   002C5E  6E08               	movwf	(___awdiv@quotient+1)^0,c
  4243   002C60  0E00               	movlw	0
  4244   002C62  6E07               	movwf	___awdiv@quotient^0,c
  4245   002C64  5003               	movf	___awdiv@divisor^0,w,c
  4246   002C66  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  4247   002C68  B4D8               	btfsc	status,2,c
  4248   002C6A  EF39  F016         	goto	u2101
  4249   002C6E  EF3B  F016         	goto	u2100
  4250   002C72                     u2101:
  4251   002C72  EF63  F016         	goto	l3233
  4252   002C76                     u2100:
  4253   002C76  0E01               	movlw	1
  4254   002C78  6E05               	movwf	___awdiv@counter^0,c
  4255   002C7A  EF43  F016         	goto	l3219
  4256   002C7E                     l3217:
  4257   002C7E  90D8               	bcf	status,0,c
  4258   002C80  3603               	rlcf	___awdiv@divisor^0,f,c
  4259   002C82  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  4260   002C84  2A05               	incf	___awdiv@counter^0,f,c
  4261   002C86                     l3219:
  4262   002C86  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4263   002C88  EF48  F016         	goto	u2111
  4264   002C8C  EF4A  F016         	goto	u2110
  4265   002C90                     u2111:
  4266   002C90  EF3F  F016         	goto	l3217
  4267   002C94                     u2110:
  4268   002C94                     l3221:
  4269   002C94  90D8               	bcf	status,0,c
  4270   002C96  3607               	rlcf	___awdiv@quotient^0,f,c
  4271   002C98  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  4272   002C9A  5003               	movf	___awdiv@divisor^0,w,c
  4273   002C9C  5C01               	subwf	___awdiv@dividend^0,w,c
  4274   002C9E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4275   002CA0  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  4276   002CA2  A0D8               	btfss	status,0,c
  4277   002CA4  EF56  F016         	goto	u2121
  4278   002CA8  EF58  F016         	goto	u2120
  4279   002CAC                     u2121:
  4280   002CAC  EF5D  F016         	goto	l3229
  4281   002CB0                     u2120:
  4282   002CB0  5003               	movf	___awdiv@divisor^0,w,c
  4283   002CB2  5E01               	subwf	___awdiv@dividend^0,f,c
  4284   002CB4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4285   002CB6  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  4286   002CB8  8007               	bsf	___awdiv@quotient^0,0,c
  4287   002CBA                     l3229:
  4288   002CBA  90D8               	bcf	status,0,c
  4289   002CBC  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  4290   002CBE  3203               	rrcf	___awdiv@divisor^0,f,c
  4291   002CC0  2E05               	decfsz	___awdiv@counter^0,f,c
  4292   002CC2  EF4A  F016         	goto	l3221
  4293   002CC6                     l3233:
  4294   002CC6  5006               	movf	___awdiv@sign^0,w,c
  4295   002CC8  B4D8               	btfsc	status,2,c
  4296   002CCA  EF69  F016         	goto	u2131
  4297   002CCE  EF6B  F016         	goto	u2130
  4298   002CD2                     u2131:
  4299   002CD2  EF6F  F016         	goto	l3237
  4300   002CD6                     u2130:
  4301   002CD6  6C07               	negf	___awdiv@quotient^0,c
  4302   002CD8  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  4303   002CDA  B0D8               	btfsc	status,0,c
  4304   002CDC  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  4305   002CDE                     l3237:
  4306   002CDE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4307   002CE2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4308   002CE6  0012               	return		;funcret
  4309   002CE8                     __end_of___awdiv:
  4310                           	callstack 0
  4311                           
  4312 ;; *************** function _sendStringSerial4 *****************
  4313 ;; Defined at:
  4314 ;;		line 33 in file "serial.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  string          2    1[COMRAM] PTR unsigned char 
  4317 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), STR_4(3), sendArrayCharSerial4@tempStr(161), 
  4318 ;;		 -> sendIntSerial4@string(17), 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4330 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4333 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4334 ;;Total ram usage:        2 bytes
  4335 ;; Hardware stack levels used: 1
  4336 ;; Hardware stack levels required when called: 2
  4337 ;; This function calls:
  4338 ;;		_sendCharSerial4
  4339 ;; This function is called by:
  4340 ;;		_sendIntSerial4
  4341 ;;		_sendArrayCharSerial4
  4342 ;;		_sendRGBCvalSerial4
  4343 ;;		_sendHSVvalSerial4
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text23
  4348   00396A                     __ptext23:
  4349                           	callstack 0
  4350   00396A                     _sendStringSerial4:
  4351                           	callstack 26
  4352   00396A                     
  4353                           ;serial.c: 35:     while(*string != 0){
  4354   00396A  EFCC  F01C         	goto	l3631
  4355   00396E                     l3627:
  4356                           
  4357                           ;serial.c: 36:   sendCharSerial4(*string++);
  4358   00396E  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  4359   003972  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  4360   003976  0E00               	movlw	low (__smallconst shr (0+16))
  4361   003978  6EF8               	movwf	tblptru,c
  4362   00397A  0E0D               	movlw	(high __ramtop+-1)
  4363   00397C  64F7               	cpfsgt	tblptrh,c
  4364   00397E  D003               	bra	u2667
  4365   003980  0008               	tblrd		*
  4366   003982  50F5               	movf	tablat,w,c
  4367   003984  D005               	bra	u2660
  4368   003986                     u2667:
  4369   003986  CFF6 FFE1          	movff	tblptrl,fsr1l
  4370   00398A  CFF7 FFE2          	movff	tblptrh,fsr1h
  4371   00398E  50E7               	movf	indf1,w,c
  4372   003990                     u2660:
  4373   003990  EC9A  F020         	call	_sendCharSerial4
  4374   003994  4A02               	infsnz	sendStringSerial4@string^0,f,c
  4375   003996  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  4376   003998                     l3631:
  4377                           
  4378                           ;serial.c: 35:     while(*string != 0){
  4379   003998  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  4380   00399C  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  4381   0039A0  0E00               	movlw	low (__smallconst shr (0+16))
  4382   0039A2  6EF8               	movwf	tblptru,c
  4383   0039A4  0E0D               	movlw	(high __ramtop+-1)
  4384   0039A6  64F7               	cpfsgt	tblptrh,c
  4385   0039A8  D003               	bra	u2677
  4386   0039AA  0008               	tblrd		*
  4387   0039AC  50F5               	movf	tablat,w,c
  4388   0039AE  D005               	bra	u2670
  4389   0039B0                     u2677:
  4390   0039B0  CFF6 FFE1          	movff	tblptrl,fsr1l
  4391   0039B4  CFF7 FFE2          	movff	tblptrh,fsr1h
  4392   0039B8  50E7               	movf	indf1,w,c
  4393   0039BA                     u2670:
  4394   0039BA  0900               	iorlw	0
  4395   0039BC  A4D8               	btfss	status,2,c
  4396   0039BE  EFE3  F01C         	goto	u2681
  4397   0039C2  EFE5  F01C         	goto	u2680
  4398   0039C6                     u2681:
  4399   0039C6  EFB7  F01C         	goto	l3627
  4400   0039CA                     u2680:
  4401   0039CA  0012               	return		;funcret
  4402   0039CC                     __end_of_sendStringSerial4:
  4403                           	callstack 0
  4404                           
  4405 ;; *************** function _sendCharSerial4 *****************
  4406 ;; Defined at:
  4407 ;;		line 25 in file "serial.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;  charToSend      1    wreg     unsigned char 
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  charToSend      1    0[COMRAM] unsigned char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  1    wreg      void 
  4414 ;; Registers used:
  4415 ;;		wreg
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4422 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4424 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4425 ;;Total ram usage:        1 bytes
  4426 ;; Hardware stack levels used: 1
  4427 ;; Hardware stack levels required when called: 1
  4428 ;; This function calls:
  4429 ;;		Nothing
  4430 ;; This function is called by:
  4431 ;;		_sendStringSerial4
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text24
  4436   004134                     __ptext24:
  4437                           	callstack 0
  4438   004134                     _sendCharSerial4:
  4439                           	callstack 26
  4440                           
  4441                           ;incstack = 0
  4442                           ;sendCharSerial4@charToSend stored from wreg
  4443   004134  6E01               	movwf	sendCharSerial4@charToSend^0,c
  4444   004136                     l462:
  4445   004136  010E               	movlb	14	; () banked
  4446   004138  A537               	btfss	55,2,b	;volatile
  4447   00413A  EFA1  F020         	goto	u2601
  4448   00413E  EFA3  F020         	goto	u2600
  4449   004142                     u2601:
  4450   004142  EF9B  F020         	goto	l462
  4451   004146                     u2600:
  4452   004146                     
  4453                           ; BSR set to: 14
  4454                           ;serial.c: 27:     TX4REG = charToSend;
  4455   004146  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4456   00414A                     
  4457                           ; BSR set to: 14
  4458   00414A  0012               	return		;funcret
  4459   00414C                     __end_of_sendCharSerial4:
  4460                           	callstack 0
  4461                           
  4462 ;; *************** function _scale_RGB *****************
  4463 ;; Defined at:
  4464 ;;		line 197 in file "color.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;  p               1   49[COMRAM] PTR struct RGBC_val
  4467 ;;		 -> main@RGBC_colour(8), 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;		None
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  1    wreg      void 
  4472 ;; Registers used:
  4473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4479 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4481 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4482 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4483 ;;Total ram usage:        3 bytes
  4484 ;; Hardware stack levels used: 1
  4485 ;; Hardware stack levels required when called: 2
  4486 ;; This function calls:
  4487 ;;		___flmul
  4488 ;;		___fltol
  4489 ;;		___xxtofl
  4490 ;; This function is called by:
  4491 ;;		_forward_navigation
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text25
  4496   002A86                     __ptext25:
  4497                           	callstack 0
  4498   002A86                     _scale_RGB:
  4499                           	callstack 27
  4500   002A86                     
  4501                           ;color.c: 197: void scale_RGB(struct RGBC_val *p);color.c: 198: {;color.c: 199:     p->R
      +                           *= 0.5;
  4502   002A86  0E00               	movlw	0
  4503   002A88  6E13               	movwf	___flmul@a^0,c
  4504   002A8A  0E00               	movlw	0
  4505   002A8C  6E14               	movwf	(___flmul@a+1)^0,c
  4506   002A8E  0E00               	movlw	0
  4507   002A90  6E15               	movwf	(___flmul@a+2)^0,c
  4508   002A92  0E3F               	movlw	63
  4509   002A94  6E16               	movwf	(___flmul@a+3)^0,c
  4510   002A96  5032               	movf	scale_RGB@p^0,w,c
  4511   002A98  6ED9               	movwf	fsr2l,c
  4512   002A9A  6ADA               	clrf	fsr2h,c
  4513   002A9C  CFDE F033          	movff	postinc2,??_scale_RGB
  4514   002AA0  CFDD F034          	movff	postdec2,??_scale_RGB+1
  4515   002AA4  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  4516   002AA8  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  4517   002AAC  6A03               	clrf	(___xxtofl@val+2)^0,c
  4518   002AAE  6A04               	clrf	(___xxtofl@val+3)^0,c
  4519   002AB0  0E00               	movlw	0
  4520   002AB2  EC3E  F011         	call	___xxtofl
  4521   002AB6  C001  F00F         	movff	?___xxtofl,___flmul@b
  4522   002ABA  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  4523   002ABE  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  4524   002AC2  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  4525   002AC6  ECA5  F00C         	call	___flmul	;wreg free
  4526   002ACA  C00F  F028         	movff	?___flmul,___fltol@f1
  4527   002ACE  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  4528   002AD2  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  4529   002AD6  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  4530   002ADA  EC42  F014         	call	___fltol	;wreg free
  4531   002ADE  5032               	movf	scale_RGB@p^0,w,c
  4532   002AE0  6ED9               	movwf	fsr2l,c
  4533   002AE2  6ADA               	clrf	fsr2h,c
  4534   002AE4  C028  FFDE         	movff	?___fltol,postinc2
  4535   002AE8  C029  FFDD         	movff	?___fltol+1,postdec2
  4536                           
  4537                           ;color.c: 200:     p->G *= 0.7;
  4538   002AEC  0E33               	movlw	51
  4539   002AEE  6E13               	movwf	___flmul@a^0,c
  4540   002AF0  0E33               	movlw	51
  4541   002AF2  6E14               	movwf	(___flmul@a+1)^0,c
  4542   002AF4  0E33               	movlw	51
  4543   002AF6  6E15               	movwf	(___flmul@a+2)^0,c
  4544   002AF8  0E3F               	movlw	63
  4545   002AFA  6E16               	movwf	(___flmul@a+3)^0,c
  4546   002AFC  5032               	movf	scale_RGB@p^0,w,c
  4547   002AFE  6ED9               	movwf	fsr2l,c
  4548   002B00  6ADA               	clrf	fsr2h,c
  4549   002B02  0E02               	movlw	2
  4550   002B04  26D9               	addwf	fsr2l,f,c
  4551   002B06  CFDE F033          	movff	postinc2,??_scale_RGB
  4552   002B0A  CFDD F034          	movff	postdec2,??_scale_RGB+1
  4553   002B0E  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  4554   002B12  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  4555   002B16  6A03               	clrf	(___xxtofl@val+2)^0,c
  4556   002B18  6A04               	clrf	(___xxtofl@val+3)^0,c
  4557   002B1A  0E00               	movlw	0
  4558   002B1C  EC3E  F011         	call	___xxtofl
  4559   002B20  C001  F00F         	movff	?___xxtofl,___flmul@b
  4560   002B24  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  4561   002B28  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  4562   002B2C  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  4563   002B30  ECA5  F00C         	call	___flmul	;wreg free
  4564   002B34  C00F  F028         	movff	?___flmul,___fltol@f1
  4565   002B38  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  4566   002B3C  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  4567   002B40  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  4568   002B44  EC42  F014         	call	___fltol	;wreg free
  4569   002B48  5032               	movf	scale_RGB@p^0,w,c
  4570   002B4A  6ED9               	movwf	fsr2l,c
  4571   002B4C  6ADA               	clrf	fsr2h,c
  4572   002B4E  0E02               	movlw	2
  4573   002B50  26D9               	addwf	fsr2l,f,c
  4574   002B52  C028  FFDE         	movff	?___fltol,postinc2
  4575   002B56  C029  FFDD         	movff	?___fltol+1,postdec2
  4576   002B5A  0012               	return		;funcret
  4577   002B5C                     __end_of_scale_RGB:
  4578                           	callstack 0
  4579                           
  4580 ;; *************** function ___xxtofl *****************
  4581 ;; Defined at:
  4582 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  sign            1    wreg     unsigned char 
  4585 ;;  val             4    0[COMRAM] long 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  sign            1    8[COMRAM] unsigned char 
  4588 ;;  arg             4   10[COMRAM] unsigned long 
  4589 ;;  exp             1    9[COMRAM] unsigned char 
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  4    0[COMRAM] unsigned char 
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4600 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4601 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4602 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4603 ;;Total ram usage:       14 bytes
  4604 ;; Hardware stack levels used: 1
  4605 ;; Hardware stack levels required when called: 1
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_scale_RGB
  4610 ;;		_stop
  4611 ;;		_turnLeft
  4612 ;;		_turnRight
  4613 ;;		_fullSpeedAhead
  4614 ;;		_fullSpeedReverse
  4615 ;;		_turnLeft90
  4616 ;;		_turnRight90
  4617 ;;		_turnLeft135
  4618 ;;		_turnRight135
  4619 ;;		_UTurn
  4620 ;;		_headbuttReverse
  4621 ;;		_squareReverse
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text26
  4626   00227C                     __ptext26:
  4627                           	callstack 0
  4628   00227C                     ___xxtofl:
  4629                           	callstack 27
  4630                           
  4631                           ;incstack = 0
  4632                           ;___xxtofl@sign stored from wreg
  4633   00227C  6E09               	movwf	___xxtofl@sign^0,c
  4634   00227E  5009               	movf	___xxtofl@sign^0,w,c
  4635   002280  B4D8               	btfsc	status,2,c
  4636   002282  EF45  F011         	goto	u3001
  4637   002286  EF47  F011         	goto	u3000
  4638   00228A                     u3001:
  4639   00228A  EF69  F011         	goto	l1403
  4640   00228E                     u3000:
  4641   00228E  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  4642   002290  EF4E  F011         	goto	u3010
  4643   002294  EF4C  F011         	goto	u3011
  4644   002298                     u3011:
  4645   002298  EF69  F011         	goto	l1403
  4646   00229C                     u3010:
  4647   00229C  C001  F005         	movff	___xxtofl@val,??___xxtofl
  4648   0022A0  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  4649   0022A4  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  4650   0022A8  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  4651   0022AC  1E05               	comf	??___xxtofl^0,f,c
  4652   0022AE  1E06               	comf	(??___xxtofl+1)^0,f,c
  4653   0022B0  1E07               	comf	(??___xxtofl+2)^0,f,c
  4654   0022B2  1E08               	comf	(??___xxtofl+3)^0,f,c
  4655   0022B4  2A05               	incf	??___xxtofl^0,f,c
  4656   0022B6  0E00               	movlw	0
  4657   0022B8  2206               	addwfc	(??___xxtofl+1)^0,f,c
  4658   0022BA  2207               	addwfc	(??___xxtofl+2)^0,f,c
  4659   0022BC  2208               	addwfc	(??___xxtofl+3)^0,f,c
  4660   0022BE  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  4661   0022C2  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  4662   0022C6  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  4663   0022CA  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  4664   0022CE  EF71  F011         	goto	l3963
  4665   0022D2                     l1403:
  4666   0022D2  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  4667   0022D6  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4668   0022DA  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4669   0022DE  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4670   0022E2                     l3963:
  4671   0022E2  5001               	movf	___xxtofl@val^0,w,c
  4672   0022E4  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  4673   0022E6  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  4674   0022E8  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  4675   0022EA  A4D8               	btfss	status,2,c
  4676   0022EC  EF7A  F011         	goto	u3021
  4677   0022F0  EF7C  F011         	goto	u3020
  4678   0022F4                     u3021:
  4679   0022F4  EF86  F011         	goto	l3969
  4680   0022F8                     u3020:
  4681   0022F8  0E00               	movlw	0
  4682   0022FA  6E01               	movwf	?___xxtofl^0,c
  4683   0022FC  0E00               	movlw	0
  4684   0022FE  6E02               	movwf	(?___xxtofl+1)^0,c
  4685   002300  0E00               	movlw	0
  4686   002302  6E03               	movwf	(?___xxtofl+2)^0,c
  4687   002304  0E00               	movlw	0
  4688   002306  6E04               	movwf	(?___xxtofl+3)^0,c
  4689   002308  EF17  F012         	goto	l1406
  4690   00230C                     l3969:
  4691   00230C  0E96               	movlw	150
  4692   00230E  6E0A               	movwf	___xxtofl@exp^0,c
  4693   002310  EF90  F011         	goto	l3973
  4694   002314                     l3971:
  4695   002314  2A0A               	incf	___xxtofl@exp^0,f,c
  4696   002316  90D8               	bcf	status,0,c
  4697   002318  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4698   00231A  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4699   00231C  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4700   00231E  320B               	rrcf	___xxtofl@arg^0,f,c
  4701   002320                     l3973:
  4702   002320  0E00               	movlw	0
  4703   002322  140B               	andwf	___xxtofl@arg^0,w,c
  4704   002324  6E05               	movwf	??___xxtofl^0,c
  4705   002326  0E00               	movlw	0
  4706   002328  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4707   00232A  6E06               	movwf	(??___xxtofl+1)^0,c
  4708   00232C  0E00               	movlw	0
  4709   00232E  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4710   002330  6E07               	movwf	(??___xxtofl+2)^0,c
  4711   002332  0EFE               	movlw	254
  4712   002334  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4713   002336  6E08               	movwf	(??___xxtofl+3)^0,c
  4714   002338  5005               	movf	??___xxtofl^0,w,c
  4715   00233A  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4716   00233C  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4717   00233E  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4718   002340  A4D8               	btfss	status,2,c
  4719   002342  EFA5  F011         	goto	u3031
  4720   002346  EFA7  F011         	goto	u3030
  4721   00234A                     u3031:
  4722   00234A  EF8A  F011         	goto	l3971
  4723   00234E                     u3030:
  4724   00234E  EFB5  F011         	goto	l1410
  4725   002352                     l3975:
  4726   002352  2A0A               	incf	___xxtofl@exp^0,f,c
  4727   002354  0E01               	movlw	1
  4728   002356  260B               	addwf	___xxtofl@arg^0,f,c
  4729   002358  0E00               	movlw	0
  4730   00235A  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  4731   00235C  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  4732   00235E  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  4733   002360  90D8               	bcf	status,0,c
  4734   002362  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4735   002364  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4736   002366  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4737   002368  320B               	rrcf	___xxtofl@arg^0,f,c
  4738   00236A                     l1410:
  4739   00236A  0E00               	movlw	0
  4740   00236C  140B               	andwf	___xxtofl@arg^0,w,c
  4741   00236E  6E05               	movwf	??___xxtofl^0,c
  4742   002370  0E00               	movlw	0
  4743   002372  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4744   002374  6E06               	movwf	(??___xxtofl+1)^0,c
  4745   002376  0E00               	movlw	0
  4746   002378  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4747   00237A  6E07               	movwf	(??___xxtofl+2)^0,c
  4748   00237C  0EFF               	movlw	255
  4749   00237E  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4750   002380  6E08               	movwf	(??___xxtofl+3)^0,c
  4751   002382  5005               	movf	??___xxtofl^0,w,c
  4752   002384  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4753   002386  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4754   002388  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4755   00238A  A4D8               	btfss	status,2,c
  4756   00238C  EFCA  F011         	goto	u3041
  4757   002390  EFCC  F011         	goto	u3040
  4758   002394                     u3041:
  4759   002394  EFA9  F011         	goto	l3975
  4760   002398                     u3040:
  4761   002398  EFD4  F011         	goto	l3983
  4762   00239C                     l3981:
  4763   00239C  060A               	decf	___xxtofl@exp^0,f,c
  4764   00239E  90D8               	bcf	status,0,c
  4765   0023A0  360B               	rlcf	___xxtofl@arg^0,f,c
  4766   0023A2  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  4767   0023A4  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  4768   0023A6  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  4769   0023A8                     l3983:
  4770   0023A8  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  4771   0023AA  EFD9  F011         	goto	u3051
  4772   0023AE  EFDB  F011         	goto	u3050
  4773   0023B2                     u3051:
  4774   0023B2  EFE3  F011         	goto	l1417
  4775   0023B6                     u3050:
  4776   0023B6  0E02               	movlw	2
  4777   0023B8  600A               	cpfslt	___xxtofl@exp^0,c
  4778   0023BA  EFE1  F011         	goto	u3061
  4779   0023BE  EFE3  F011         	goto	u3060
  4780   0023C2                     u3061:
  4781   0023C2  EFCE  F011         	goto	l3981
  4782   0023C6                     u3060:
  4783   0023C6                     l1417:
  4784   0023C6  B00A               	btfsc	___xxtofl@exp^0,0,c
  4785   0023C8  EFE8  F011         	goto	u3071
  4786   0023CC  EFEA  F011         	goto	u3070
  4787   0023D0                     u3071:
  4788   0023D0  EFEB  F011         	goto	l3989
  4789   0023D4                     u3070:
  4790   0023D4  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  4791   0023D6                     l3989:
  4792   0023D6  90D8               	bcf	status,0,c
  4793   0023D8  320A               	rrcf	___xxtofl@exp^0,f,c
  4794   0023DA  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  4795   0023DE  6A06               	clrf	(??___xxtofl+1)^0,c
  4796   0023E0  6A07               	clrf	(??___xxtofl+2)^0,c
  4797   0023E2  6A08               	clrf	(??___xxtofl+3)^0,c
  4798   0023E4  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  4799   0023E8  6A07               	clrf	(??___xxtofl+2)^0,c
  4800   0023EA  6A06               	clrf	(??___xxtofl+1)^0,c
  4801   0023EC  6A05               	clrf	??___xxtofl^0,c
  4802   0023EE  5005               	movf	??___xxtofl^0,w,c
  4803   0023F0  120B               	iorwf	___xxtofl@arg^0,f,c
  4804   0023F2  5006               	movf	(??___xxtofl+1)^0,w,c
  4805   0023F4  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  4806   0023F6  5007               	movf	(??___xxtofl+2)^0,w,c
  4807   0023F8  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  4808   0023FA  5008               	movf	(??___xxtofl+3)^0,w,c
  4809   0023FC  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  4810   0023FE  5009               	movf	___xxtofl@sign^0,w,c
  4811   002400  B4D8               	btfsc	status,2,c
  4812   002402  EF05  F012         	goto	u3081
  4813   002406  EF07  F012         	goto	u3080
  4814   00240A                     u3081:
  4815   00240A  EF0F  F012         	goto	l3999
  4816   00240E                     u3080:
  4817   00240E  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  4818   002410  EF0E  F012         	goto	u3090
  4819   002414  EF0C  F012         	goto	u3091
  4820   002418                     u3091:
  4821   002418  EF0F  F012         	goto	l3999
  4822   00241C                     u3090:
  4823   00241C  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  4824   00241E                     l3999:
  4825   00241E  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  4826   002422  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  4827   002426  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  4828   00242A  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  4829   00242E                     l1406:
  4830   00242E  0012               	return		;funcret
  4831   002430                     __end_of___xxtofl:
  4832                           	callstack 0
  4833                           
  4834 ;; *************** function ___fltol *****************
  4835 ;; Defined at:
  4836 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  f1              4   39[COMRAM] unsigned char 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  exp1            1   48[COMRAM] unsigned char 
  4841 ;;  sign1           1   47[COMRAM] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  4   39[COMRAM] long 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4851 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4852 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4853 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4854 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4855 ;;Total ram usage:       10 bytes
  4856 ;; Hardware stack levels used: 1
  4857 ;; Hardware stack levels required when called: 1
  4858 ;; This function calls:
  4859 ;;		Nothing
  4860 ;; This function is called by:
  4861 ;;		_scale_RGB
  4862 ;;		_stop
  4863 ;;		_turnLeft
  4864 ;;		_turnRight
  4865 ;;		_fullSpeedAhead
  4866 ;;		_fullSpeedReverse
  4867 ;;		_turnLeft90
  4868 ;;		_turnRight90
  4869 ;;		_turnLeft135
  4870 ;;		_turnRight135
  4871 ;;		_UTurn
  4872 ;;		_headbuttReverse
  4873 ;;		_squareReverse
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text27
  4878   002884                     __ptext27:
  4879                           	callstack 0
  4880   002884                     ___fltol:
  4881                           	callstack 27
  4882   002884  342A               	rlcf	(___fltol@f1+2)^0,w,c
  4883   002886  342B               	rlcf	(___fltol@f1+3)^0,w,c
  4884   002888  6E31               	movwf	___fltol@exp1^0,c
  4885   00288A  5031               	movf	___fltol@exp1^0,w,c
  4886   00288C  A4D8               	btfss	status,2,c
  4887   00288E  EF4B  F014         	goto	u2931
  4888   002892  EF4D  F014         	goto	u2930
  4889   002896                     u2931:
  4890   002896  EF57  F014         	goto	l3919
  4891   00289A                     u2930:
  4892   00289A                     l3915:
  4893   00289A  0E00               	movlw	0
  4894   00289C  6E28               	movwf	?___fltol^0,c
  4895   00289E  0E00               	movlw	0
  4896   0028A0  6E29               	movwf	(?___fltol+1)^0,c
  4897   0028A2  0E00               	movlw	0
  4898   0028A4  6E2A               	movwf	(?___fltol+2)^0,c
  4899   0028A6  0E00               	movlw	0
  4900   0028A8  6E2B               	movwf	(?___fltol+3)^0,c
  4901   0028AA  EFC4  F014         	goto	l1045
  4902   0028AE                     l3919:
  4903   0028AE  C028  F02C         	movff	___fltol@f1,??___fltol
  4904   0028B2  C029  F02D         	movff	___fltol@f1+1,??___fltol+1
  4905   0028B6  C02A  F02E         	movff	___fltol@f1+2,??___fltol+2
  4906   0028BA  C02B  F02F         	movff	___fltol@f1+3,??___fltol+3
  4907   0028BE  0E20               	movlw	32
  4908   0028C0  EF67  F014         	goto	u2940
  4909   0028C4                     u2945:
  4910   0028C4  90D8               	bcf	status,0,c
  4911   0028C6  322F               	rrcf	(??___fltol+3)^0,f,c
  4912   0028C8  322E               	rrcf	(??___fltol+2)^0,f,c
  4913   0028CA  322D               	rrcf	(??___fltol+1)^0,f,c
  4914   0028CC  322C               	rrcf	??___fltol^0,f,c
  4915   0028CE                     u2940:
  4916   0028CE  2EE8               	decfsz	wreg,f,c
  4917   0028D0  EF62  F014         	goto	u2945
  4918   0028D4  502C               	movf	??___fltol^0,w,c
  4919   0028D6  6E30               	movwf	___fltol@sign1^0,c
  4920   0028D8  8E2A               	bsf	(___fltol@f1+2)^0,7,c
  4921   0028DA  0EFF               	movlw	255
  4922   0028DC  1628               	andwf	___fltol@f1^0,f,c
  4923   0028DE  0EFF               	movlw	255
  4924   0028E0  1629               	andwf	(___fltol@f1+1)^0,f,c
  4925   0028E2  0EFF               	movlw	255
  4926   0028E4  162A               	andwf	(___fltol@f1+2)^0,f,c
  4927   0028E6  0E00               	movlw	0
  4928   0028E8  162B               	andwf	(___fltol@f1+3)^0,f,c
  4929   0028EA  0E96               	movlw	150
  4930   0028EC  5E31               	subwf	___fltol@exp1^0,f,c
  4931   0028EE  BE31               	btfsc	___fltol@exp1^0,7,c
  4932   0028F0  EF7E  F014         	goto	u2950
  4933   0028F4  EF7C  F014         	goto	u2951
  4934   0028F8                     u2951:
  4935   0028F8  EF94  F014         	goto	l3939
  4936   0028FC                     u2950:
  4937   0028FC  5031               	movf	___fltol@exp1^0,w,c
  4938   0028FE  0A80               	xorlw	128
  4939   002900  0F97               	addlw	151
  4940   002902  B0D8               	btfsc	status,0,c
  4941   002904  EF86  F014         	goto	u2961
  4942   002908  EF88  F014         	goto	u2960
  4943   00290C                     u2961:
  4944   00290C  EF8A  F014         	goto	l3935
  4945   002910                     u2960:
  4946   002910  EF4D  F014         	goto	l3915
  4947   002914                     l3935:
  4948   002914  90D8               	bcf	status,0,c
  4949   002916  322B               	rrcf	(___fltol@f1+3)^0,f,c
  4950   002918  322A               	rrcf	(___fltol@f1+2)^0,f,c
  4951   00291A  3229               	rrcf	(___fltol@f1+1)^0,f,c
  4952   00291C  3228               	rrcf	___fltol@f1^0,f,c
  4953   00291E  3E31               	incfsz	___fltol@exp1^0,f,c
  4954   002920  EF8A  F014         	goto	l3935
  4955   002924  EFAC  F014         	goto	l3949
  4956   002928                     l3939:
  4957   002928  0E1F               	movlw	31
  4958   00292A  6431               	cpfsgt	___fltol@exp1^0,c
  4959   00292C  EF9A  F014         	goto	u2971
  4960   002930  EF9C  F014         	goto	u2970
  4961   002934                     u2971:
  4962   002934  EFA4  F014         	goto	l3947
  4963   002938                     u2970:
  4964   002938  EF4D  F014         	goto	l3915
  4965   00293C                     l3945:
  4966   00293C  90D8               	bcf	status,0,c
  4967   00293E  3628               	rlcf	___fltol@f1^0,f,c
  4968   002940  3629               	rlcf	(___fltol@f1+1)^0,f,c
  4969   002942  362A               	rlcf	(___fltol@f1+2)^0,f,c
  4970   002944  362B               	rlcf	(___fltol@f1+3)^0,f,c
  4971   002946  0631               	decf	___fltol@exp1^0,f,c
  4972   002948                     l3947:
  4973   002948  5031               	movf	___fltol@exp1^0,w,c
  4974   00294A  A4D8               	btfss	status,2,c
  4975   00294C  EFAA  F014         	goto	u2981
  4976   002950  EFAC  F014         	goto	u2980
  4977   002954                     u2981:
  4978   002954  EF9E  F014         	goto	l3945
  4979   002958                     u2980:
  4980   002958                     l3949:
  4981   002958  5030               	movf	___fltol@sign1^0,w,c
  4982   00295A  B4D8               	btfsc	status,2,c
  4983   00295C  EFB2  F014         	goto	u2991
  4984   002960  EFB4  F014         	goto	u2990
  4985   002964                     u2991:
  4986   002964  EFBC  F014         	goto	l3953
  4987   002968                     u2990:
  4988   002968  1E2B               	comf	(___fltol@f1+3)^0,f,c
  4989   00296A  1E2A               	comf	(___fltol@f1+2)^0,f,c
  4990   00296C  1E29               	comf	(___fltol@f1+1)^0,f,c
  4991   00296E  6C28               	negf	___fltol@f1^0,c
  4992   002970  0E00               	movlw	0
  4993   002972  2229               	addwfc	(___fltol@f1+1)^0,f,c
  4994   002974  222A               	addwfc	(___fltol@f1+2)^0,f,c
  4995   002976  222B               	addwfc	(___fltol@f1+3)^0,f,c
  4996   002978                     l3953:
  4997   002978  C028  F028         	movff	___fltol@f1,?___fltol
  4998   00297C  C029  F029         	movff	___fltol@f1+1,?___fltol+1
  4999   002980  C02A  F02A         	movff	___fltol@f1+2,?___fltol+2
  5000   002984  C02B  F02B         	movff	___fltol@f1+3,?___fltol+3
  5001   002988                     l1045:
  5002   002988  0012               	return		;funcret
  5003   00298A                     __end_of___fltol:
  5004                           	callstack 0
  5005                           
  5006 ;; *************** function ___flmul *****************
  5007 ;; Defined at:
  5008 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  b               4   14[COMRAM] long 
  5011 ;;  a               4   18[COMRAM] long 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  prod            4   33[COMRAM] struct .
  5014 ;;  grs             4   27[COMRAM] unsigned long 
  5015 ;;  temp            2   37[COMRAM] struct .
  5016 ;;  bexp            1   32[COMRAM] unsigned char 
  5017 ;;  aexp            1   31[COMRAM] unsigned char 
  5018 ;;  sign            1   26[COMRAM] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;                  4   14[COMRAM] unsigned char 
  5021 ;; Registers used:
  5022 ;;		wreg, status,2, status,0, prodl, prodh
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5028 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5029 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5030 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5031 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5032 ;;Total ram usage:       25 bytes
  5033 ;; Hardware stack levels used: 1
  5034 ;; Hardware stack levels required when called: 1
  5035 ;; This function calls:
  5036 ;;		Nothing
  5037 ;; This function is called by:
  5038 ;;		_scale_RGB
  5039 ;;		_stop
  5040 ;;		_turnLeft
  5041 ;;		_turnRight
  5042 ;;		_fullSpeedAhead
  5043 ;;		_fullSpeedReverse
  5044 ;;		_turnLeft90
  5045 ;;		_turnRight90
  5046 ;;		_turnLeft135
  5047 ;;		_turnRight135
  5048 ;;		_UTurn
  5049 ;;		_headbuttReverse
  5050 ;;		_squareReverse
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text28
  5055   00194A                     __ptext28:
  5056                           	callstack 0
  5057   00194A                     ___flmul:
  5058                           	callstack 27
  5059   00194A  5012               	movf	(___flmul@b+3)^0,w,c
  5060   00194C  0B80               	andlw	128
  5061   00194E  6E1B               	movwf	___flmul@sign^0,c
  5062   001950  5012               	movf	(___flmul@b+3)^0,w,c
  5063   001952  2412               	addwf	(___flmul@b+3)^0,w,c
  5064   001954  6E21               	movwf	___flmul@bexp^0,c
  5065   001956  AE11               	btfss	(___flmul@b+2)^0,7,c
  5066   001958  EFB0  F00C         	goto	u2741
  5067   00195C  EFB2  F00C         	goto	u2740
  5068   001960                     u2741:
  5069   001960  EFB3  F00C         	goto	l3789
  5070   001964                     u2740:
  5071   001964  8021               	bsf	___flmul@bexp^0,0,c
  5072   001966                     l3789:
  5073   001966  5021               	movf	___flmul@bexp^0,w,c
  5074   001968  B4D8               	btfsc	status,2,c
  5075   00196A  EFB9  F00C         	goto	u2751
  5076   00196E  EFBB  F00C         	goto	u2750
  5077   001972                     u2751:
  5078   001972  EFCE  F00C         	goto	l3797
  5079   001976                     u2750:
  5080   001976  2821               	incf	___flmul@bexp^0,w,c
  5081   001978  A4D8               	btfss	status,2,c
  5082   00197A  EFC1  F00C         	goto	u2761
  5083   00197E  EFC3  F00C         	goto	u2760
  5084   001982                     u2761:
  5085   001982  EFCB  F00C         	goto	l3795
  5086   001986                     u2760:
  5087   001986  0E00               	movlw	0
  5088   001988  6E0F               	movwf	___flmul@b^0,c
  5089   00198A  0E00               	movlw	0
  5090   00198C  6E10               	movwf	(___flmul@b+1)^0,c
  5091   00198E  0E00               	movlw	0
  5092   001990  6E11               	movwf	(___flmul@b+2)^0,c
  5093   001992  0E00               	movlw	0
  5094   001994  6E12               	movwf	(___flmul@b+3)^0,c
  5095   001996                     l3795:
  5096   001996  8E11               	bsf	(___flmul@b+2)^0,7,c
  5097   001998  EFD6  F00C         	goto	l3799
  5098   00199C                     l3797:
  5099   00199C  0E00               	movlw	0
  5100   00199E  6E0F               	movwf	___flmul@b^0,c
  5101   0019A0  0E00               	movlw	0
  5102   0019A2  6E10               	movwf	(___flmul@b+1)^0,c
  5103   0019A4  0E00               	movlw	0
  5104   0019A6  6E11               	movwf	(___flmul@b+2)^0,c
  5105   0019A8  0E00               	movlw	0
  5106   0019AA  6E12               	movwf	(___flmul@b+3)^0,c
  5107   0019AC                     l3799:
  5108   0019AC  5016               	movf	(___flmul@a+3)^0,w,c
  5109   0019AE  0B80               	andlw	128
  5110   0019B0  1A1B               	xorwf	___flmul@sign^0,f,c
  5111   0019B2  5016               	movf	(___flmul@a+3)^0,w,c
  5112   0019B4  2416               	addwf	(___flmul@a+3)^0,w,c
  5113   0019B6  6E20               	movwf	___flmul@aexp^0,c
  5114   0019B8  AE15               	btfss	(___flmul@a+2)^0,7,c
  5115   0019BA  EFE1  F00C         	goto	u2771
  5116   0019BE  EFE3  F00C         	goto	u2770
  5117   0019C2                     u2771:
  5118   0019C2  EFE4  F00C         	goto	l3807
  5119   0019C6                     u2770:
  5120   0019C6  8020               	bsf	___flmul@aexp^0,0,c
  5121   0019C8                     l3807:
  5122   0019C8  5020               	movf	___flmul@aexp^0,w,c
  5123   0019CA  B4D8               	btfsc	status,2,c
  5124   0019CC  EFEA  F00C         	goto	u2781
  5125   0019D0  EFEC  F00C         	goto	u2780
  5126   0019D4                     u2781:
  5127   0019D4  EFFF  F00C         	goto	l3815
  5128   0019D8                     u2780:
  5129   0019D8  2820               	incf	___flmul@aexp^0,w,c
  5130   0019DA  A4D8               	btfss	status,2,c
  5131   0019DC  EFF2  F00C         	goto	u2791
  5132   0019E0  EFF4  F00C         	goto	u2790
  5133   0019E4                     u2791:
  5134   0019E4  EFFC  F00C         	goto	l3813
  5135   0019E8                     u2790:
  5136   0019E8  0E00               	movlw	0
  5137   0019EA  6E13               	movwf	___flmul@a^0,c
  5138   0019EC  0E00               	movlw	0
  5139   0019EE  6E14               	movwf	(___flmul@a+1)^0,c
  5140   0019F0  0E00               	movlw	0
  5141   0019F2  6E15               	movwf	(___flmul@a+2)^0,c
  5142   0019F4  0E00               	movlw	0
  5143   0019F6  6E16               	movwf	(___flmul@a+3)^0,c
  5144   0019F8                     l3813:
  5145   0019F8  8E15               	bsf	(___flmul@a+2)^0,7,c
  5146   0019FA  EF07  F00D         	goto	l1362
  5147   0019FE                     l3815:
  5148   0019FE  0E00               	movlw	0
  5149   001A00  6E13               	movwf	___flmul@a^0,c
  5150   001A02  0E00               	movlw	0
  5151   001A04  6E14               	movwf	(___flmul@a+1)^0,c
  5152   001A06  0E00               	movlw	0
  5153   001A08  6E15               	movwf	(___flmul@a+2)^0,c
  5154   001A0A  0E00               	movlw	0
  5155   001A0C  6E16               	movwf	(___flmul@a+3)^0,c
  5156   001A0E                     l1362:
  5157   001A0E  5020               	movf	___flmul@aexp^0,w,c
  5158   001A10  B4D8               	btfsc	status,2,c
  5159   001A12  EF0D  F00D         	goto	u2801
  5160   001A16  EF0F  F00D         	goto	u2800
  5161   001A1A                     u2801:
  5162   001A1A  EF17  F00D         	goto	l3819
  5163   001A1E                     u2800:
  5164   001A1E  5021               	movf	___flmul@bexp^0,w,c
  5165   001A20  A4D8               	btfss	status,2,c
  5166   001A22  EF15  F00D         	goto	u2811
  5167   001A26  EF17  F00D         	goto	u2810
  5168   001A2A                     u2811:
  5169   001A2A  EF21  F00D         	goto	l3823
  5170   001A2E                     u2810:
  5171   001A2E                     l3819:
  5172   001A2E  0E00               	movlw	0
  5173   001A30  6E0F               	movwf	?___flmul^0,c
  5174   001A32  0E00               	movlw	0
  5175   001A34  6E10               	movwf	(?___flmul+1)^0,c
  5176   001A36  0E00               	movlw	0
  5177   001A38  6E11               	movwf	(?___flmul+2)^0,c
  5178   001A3A  0E00               	movlw	0
  5179   001A3C  6E12               	movwf	(?___flmul+3)^0,c
  5180   001A3E  EFB9  F00E         	goto	l1366
  5181   001A42                     l3823:
  5182   001A42  5015               	movf	(___flmul@a+2)^0,w,c
  5183   001A44  020F               	mulwf	___flmul@b^0,c
  5184   001A46  CFF3 F026          	movff	prodl,___flmul@temp
  5185   001A4A  CFF4 F027          	movff	prodh,___flmul@temp+1
  5186   001A4E  5026               	movf	___flmul@temp^0,w,c
  5187   001A50  6E1C               	movwf	___flmul@grs^0,c
  5188   001A52  6A1D               	clrf	(___flmul@grs+1)^0,c
  5189   001A54  6A1E               	clrf	(___flmul@grs+2)^0,c
  5190   001A56  6A1F               	clrf	(___flmul@grs+3)^0,c
  5191   001A58  5027               	movf	(___flmul@temp+1)^0,w,c
  5192   001A5A  6E22               	movwf	___flmul@prod^0,c
  5193   001A5C  6A23               	clrf	(___flmul@prod+1)^0,c
  5194   001A5E  6A24               	clrf	(___flmul@prod+2)^0,c
  5195   001A60  6A25               	clrf	(___flmul@prod+3)^0,c
  5196   001A62  5014               	movf	(___flmul@a+1)^0,w,c
  5197   001A64  0210               	mulwf	(___flmul@b+1)^0,c
  5198   001A66  CFF3 F026          	movff	prodl,___flmul@temp
  5199   001A6A  CFF4 F027          	movff	prodh,___flmul@temp+1
  5200   001A6E  5026               	movf	___flmul@temp^0,w,c
  5201   001A70  261C               	addwf	___flmul@grs^0,f,c
  5202   001A72  0E00               	movlw	0
  5203   001A74  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5204   001A76  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5205   001A78  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5206   001A7A  5027               	movf	(___flmul@temp+1)^0,w,c
  5207   001A7C  2622               	addwf	___flmul@prod^0,f,c
  5208   001A7E  0E00               	movlw	0
  5209   001A80  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5210   001A82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5211   001A84  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5212   001A86  5013               	movf	___flmul@a^0,w,c
  5213   001A88  0211               	mulwf	(___flmul@b+2)^0,c
  5214   001A8A  CFF3 F026          	movff	prodl,___flmul@temp
  5215   001A8E  CFF4 F027          	movff	prodh,___flmul@temp+1
  5216   001A92  5026               	movf	___flmul@temp^0,w,c
  5217   001A94  261C               	addwf	___flmul@grs^0,f,c
  5218   001A96  0E00               	movlw	0
  5219   001A98  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5220   001A9A  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5221   001A9C  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5222   001A9E  5027               	movf	(___flmul@temp+1)^0,w,c
  5223   001AA0  2622               	addwf	___flmul@prod^0,f,c
  5224   001AA2  0E00               	movlw	0
  5225   001AA4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5226   001AA6  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5227   001AA8  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5228   001AAA  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  5229   001AAE  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  5230   001AB2  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  5231   001AB6  6A1C               	clrf	___flmul@grs^0,c
  5232   001AB8  5013               	movf	___flmul@a^0,w,c
  5233   001ABA  0210               	mulwf	(___flmul@b+1)^0,c
  5234   001ABC  CFF3 F026          	movff	prodl,___flmul@temp
  5235   001AC0  CFF4 F027          	movff	prodh,___flmul@temp+1
  5236   001AC4  5026               	movf	___flmul@temp^0,w,c
  5237   001AC6  261C               	addwf	___flmul@grs^0,f,c
  5238   001AC8  5027               	movf	(___flmul@temp+1)^0,w,c
  5239   001ACA  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5240   001ACC  0E00               	movlw	0
  5241   001ACE  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5242   001AD0  0E00               	movlw	0
  5243   001AD2  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5244   001AD4  5014               	movf	(___flmul@a+1)^0,w,c
  5245   001AD6  020F               	mulwf	___flmul@b^0,c
  5246   001AD8  CFF3 F026          	movff	prodl,___flmul@temp
  5247   001ADC  CFF4 F027          	movff	prodh,___flmul@temp+1
  5248   001AE0  5026               	movf	___flmul@temp^0,w,c
  5249   001AE2  261C               	addwf	___flmul@grs^0,f,c
  5250   001AE4  5027               	movf	(___flmul@temp+1)^0,w,c
  5251   001AE6  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5252   001AE8  0E00               	movlw	0
  5253   001AEA  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5254   001AEC  0E00               	movlw	0
  5255   001AEE  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5256   001AF0  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  5257   001AF4  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  5258   001AF8  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  5259   001AFC  6A1C               	clrf	___flmul@grs^0,c
  5260   001AFE  5013               	movf	___flmul@a^0,w,c
  5261   001B00  020F               	mulwf	___flmul@b^0,c
  5262   001B02  CFF3 F026          	movff	prodl,___flmul@temp
  5263   001B06  CFF4 F027          	movff	prodh,___flmul@temp+1
  5264   001B0A  5026               	movf	___flmul@temp^0,w,c
  5265   001B0C  261C               	addwf	___flmul@grs^0,f,c
  5266   001B0E  5027               	movf	(___flmul@temp+1)^0,w,c
  5267   001B10  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5268   001B12  0E00               	movlw	0
  5269   001B14  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5270   001B16  0E00               	movlw	0
  5271   001B18  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5272   001B1A  5015               	movf	(___flmul@a+2)^0,w,c
  5273   001B1C  0210               	mulwf	(___flmul@b+1)^0,c
  5274   001B1E  CFF3 F026          	movff	prodl,___flmul@temp
  5275   001B22  CFF4 F027          	movff	prodh,___flmul@temp+1
  5276   001B26  5026               	movf	___flmul@temp^0,w,c
  5277   001B28  2622               	addwf	___flmul@prod^0,f,c
  5278   001B2A  5027               	movf	(___flmul@temp+1)^0,w,c
  5279   001B2C  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5280   001B2E  0E00               	movlw	0
  5281   001B30  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5282   001B32  0E00               	movlw	0
  5283   001B34  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5284   001B36  5014               	movf	(___flmul@a+1)^0,w,c
  5285   001B38  0211               	mulwf	(___flmul@b+2)^0,c
  5286   001B3A  CFF3 F026          	movff	prodl,___flmul@temp
  5287   001B3E  CFF4 F027          	movff	prodh,___flmul@temp+1
  5288   001B42  5026               	movf	___flmul@temp^0,w,c
  5289   001B44  2622               	addwf	___flmul@prod^0,f,c
  5290   001B46  5027               	movf	(___flmul@temp+1)^0,w,c
  5291   001B48  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5292   001B4A  0E00               	movlw	0
  5293   001B4C  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5294   001B4E  0E00               	movlw	0
  5295   001B50  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5296   001B52  5015               	movf	(___flmul@a+2)^0,w,c
  5297   001B54  0211               	mulwf	(___flmul@b+2)^0,c
  5298   001B56  CFF3 F026          	movff	prodl,___flmul@temp
  5299   001B5A  CFF4 F027          	movff	prodh,___flmul@temp+1
  5300   001B5E  5026               	movf	___flmul@temp^0,w,c
  5301   001B60  6E17               	movwf	??___flmul^0,c
  5302   001B62  5027               	movf	(___flmul@temp+1)^0,w,c
  5303   001B64  6E18               	movwf	(??___flmul+1)^0,c
  5304   001B66  6A19               	clrf	(??___flmul+2)^0,c
  5305   001B68  6A1A               	clrf	(??___flmul+3)^0,c
  5306   001B6A  C019  F01A         	movff	??___flmul+2,??___flmul+3
  5307   001B6E  C018  F019         	movff	??___flmul+1,??___flmul+2
  5308   001B72  C017  F018         	movff	??___flmul,??___flmul+1
  5309   001B76  6A17               	clrf	??___flmul^0,c
  5310   001B78  5017               	movf	??___flmul^0,w,c
  5311   001B7A  2622               	addwf	___flmul@prod^0,f,c
  5312   001B7C  5018               	movf	(??___flmul+1)^0,w,c
  5313   001B7E  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5314   001B80  5019               	movf	(??___flmul+2)^0,w,c
  5315   001B82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5316   001B84  501A               	movf	(??___flmul+3)^0,w,c
  5317   001B86  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5318   001B88  C01C  F017         	movff	___flmul@grs,??___flmul
  5319   001B8C  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  5320   001B90  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  5321   001B94  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  5322   001B98  0E19               	movlw	25
  5323   001B9A  EFD4  F00D         	goto	u2820
  5324   001B9E                     u2825:
  5325   001B9E  90D8               	bcf	status,0,c
  5326   001BA0  321A               	rrcf	(??___flmul+3)^0,f,c
  5327   001BA2  3219               	rrcf	(??___flmul+2)^0,f,c
  5328   001BA4  3218               	rrcf	(??___flmul+1)^0,f,c
  5329   001BA6  3217               	rrcf	??___flmul^0,f,c
  5330   001BA8                     u2820:
  5331   001BA8  2EE8               	decfsz	wreg,f,c
  5332   001BAA  EFCF  F00D         	goto	u2825
  5333   001BAE  5017               	movf	??___flmul^0,w,c
  5334   001BB0  2622               	addwf	___flmul@prod^0,f,c
  5335   001BB2  5018               	movf	(??___flmul+1)^0,w,c
  5336   001BB4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5337   001BB6  5019               	movf	(??___flmul+2)^0,w,c
  5338   001BB8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5339   001BBA  501A               	movf	(??___flmul+3)^0,w,c
  5340   001BBC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5341   001BBE  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  5342   001BC2  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  5343   001BC6  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  5344   001BCA  6A1C               	clrf	___flmul@grs^0,c
  5345   001BCC  5020               	movf	___flmul@aexp^0,w,c
  5346   001BCE  C021  F017         	movff	___flmul@bexp,??___flmul
  5347   001BD2  6A18               	clrf	(??___flmul+1)^0,c
  5348   001BD4  2617               	addwf	??___flmul^0,f,c
  5349   001BD6  0E00               	movlw	0
  5350   001BD8  2218               	addwfc	(??___flmul+1)^0,f,c
  5351   001BDA  0E82               	movlw	130
  5352   001BDC  2417               	addwf	??___flmul^0,w,c
  5353   001BDE  6E26               	movwf	___flmul@temp^0,c
  5354   001BE0  0EFF               	movlw	255
  5355   001BE2  2018               	addwfc	(??___flmul+1)^0,w,c
  5356   001BE4  6E27               	movwf	(___flmul@temp+1)^0,c
  5357   001BE6  EF0A  F00E         	goto	l3871
  5358   001BEA                     l3865:
  5359   001BEA  90D8               	bcf	status,0,c
  5360   001BEC  3622               	rlcf	___flmul@prod^0,f,c
  5361   001BEE  3623               	rlcf	(___flmul@prod+1)^0,f,c
  5362   001BF0  3624               	rlcf	(___flmul@prod+2)^0,f,c
  5363   001BF2  3625               	rlcf	(___flmul@prod+3)^0,f,c
  5364   001BF4  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  5365   001BF6  EFFF  F00D         	goto	u2831
  5366   001BFA  EF01  F00E         	goto	u2830
  5367   001BFE                     u2831:
  5368   001BFE  EF02  F00E         	goto	l1369
  5369   001C02                     u2830:
  5370   001C02  8022               	bsf	___flmul@prod^0,0,c
  5371   001C04                     l1369:
  5372   001C04  90D8               	bcf	status,0,c
  5373   001C06  361C               	rlcf	___flmul@grs^0,f,c
  5374   001C08  361D               	rlcf	(___flmul@grs+1)^0,f,c
  5375   001C0A  361E               	rlcf	(___flmul@grs+2)^0,f,c
  5376   001C0C  361F               	rlcf	(___flmul@grs+3)^0,f,c
  5377   001C0E  0626               	decf	___flmul@temp^0,f,c
  5378   001C10  A0D8               	btfss	status,0,c
  5379   001C12  0627               	decf	(___flmul@temp+1)^0,f,c
  5380   001C14                     l3871:
  5381   001C14  AE24               	btfss	(___flmul@prod+2)^0,7,c
  5382   001C16  EF0F  F00E         	goto	u2841
  5383   001C1A  EF11  F00E         	goto	u2840
  5384   001C1E                     u2841:
  5385   001C1E  EFF5  F00D         	goto	l3865
  5386   001C22                     u2840:
  5387   001C22  0E00               	movlw	0
  5388   001C24  6E20               	movwf	___flmul@aexp^0,c
  5389   001C26  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  5390   001C28  EF18  F00E         	goto	u2851
  5391   001C2C  EF1A  F00E         	goto	u2850
  5392   001C30                     u2851:
  5393   001C30  EF3E  F00E         	goto	l1371
  5394   001C34                     u2850:
  5395   001C34  0EFF               	movlw	255
  5396   001C36  141C               	andwf	___flmul@grs^0,w,c
  5397   001C38  6E17               	movwf	??___flmul^0,c
  5398   001C3A  0EFF               	movlw	255
  5399   001C3C  141D               	andwf	(___flmul@grs+1)^0,w,c
  5400   001C3E  6E18               	movwf	(??___flmul+1)^0,c
  5401   001C40  0EFF               	movlw	255
  5402   001C42  141E               	andwf	(___flmul@grs+2)^0,w,c
  5403   001C44  6E19               	movwf	(??___flmul+2)^0,c
  5404   001C46  0E7F               	movlw	127
  5405   001C48  141F               	andwf	(___flmul@grs+3)^0,w,c
  5406   001C4A  6E1A               	movwf	(??___flmul+3)^0,c
  5407   001C4C  5017               	movf	??___flmul^0,w,c
  5408   001C4E  1018               	iorwf	(??___flmul+1)^0,w,c
  5409   001C50  1019               	iorwf	(??___flmul+2)^0,w,c
  5410   001C52  101A               	iorwf	(??___flmul+3)^0,w,c
  5411   001C54  B4D8               	btfsc	status,2,c
  5412   001C56  EF2F  F00E         	goto	u2861
  5413   001C5A  EF31  F00E         	goto	u2860
  5414   001C5E                     u2861:
  5415   001C5E  EF35  F00E         	goto	l1372
  5416   001C62                     u2860:
  5417   001C62                     l3879:
  5418   001C62  0E01               	movlw	1
  5419   001C64  6E20               	movwf	___flmul@aexp^0,c
  5420   001C66  EF3E  F00E         	goto	l1371
  5421   001C6A                     l1372:
  5422   001C6A  A022               	btfss	___flmul@prod^0,0,c
  5423   001C6C  EF3A  F00E         	goto	u2871
  5424   001C70  EF3C  F00E         	goto	u2870
  5425   001C74                     u2871:
  5426   001C74  EF3E  F00E         	goto	l1371
  5427   001C78                     u2870:
  5428   001C78  EF31  F00E         	goto	l3879
  5429   001C7C                     l1371:
  5430   001C7C  5020               	movf	___flmul@aexp^0,w,c
  5431   001C7E  B4D8               	btfsc	status,2,c
  5432   001C80  EF44  F00E         	goto	u2881
  5433   001C84  EF46  F00E         	goto	u2880
  5434   001C88                     u2881:
  5435   001C88  EF6A  F00E         	goto	l3891
  5436   001C8C                     u2880:
  5437   001C8C  0E01               	movlw	1
  5438   001C8E  2622               	addwf	___flmul@prod^0,f,c
  5439   001C90  0E00               	movlw	0
  5440   001C92  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5441   001C94  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5442   001C96  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5443   001C98  A025               	btfss	(___flmul@prod+3)^0,0,c
  5444   001C9A  EF51  F00E         	goto	u2891
  5445   001C9E  EF53  F00E         	goto	u2890
  5446   001CA2                     u2891:
  5447   001CA2  EF6A  F00E         	goto	l3891
  5448   001CA6                     u2890:
  5449   001CA6  C022  F017         	movff	___flmul@prod,??___flmul
  5450   001CAA  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  5451   001CAE  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  5452   001CB2  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  5453   001CB6  341A               	rlcf	(??___flmul+3)^0,w,c
  5454   001CB8  321A               	rrcf	(??___flmul+3)^0,f,c
  5455   001CBA  3219               	rrcf	(??___flmul+2)^0,f,c
  5456   001CBC  3218               	rrcf	(??___flmul+1)^0,f,c
  5457   001CBE  3217               	rrcf	??___flmul^0,f,c
  5458   001CC0  C017  F022         	movff	??___flmul,___flmul@prod
  5459   001CC4  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  5460   001CC8  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  5461   001CCC  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  5462   001CD0  4A26               	infsnz	___flmul@temp^0,f,c
  5463   001CD2  2A27               	incf	(___flmul@temp+1)^0,f,c
  5464   001CD4                     l3891:
  5465   001CD4  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  5466   001CD6  EF75  F00E         	goto	u2901
  5467   001CDA  5027               	movf	(___flmul@temp+1)^0,w,c
  5468   001CDC  E108               	bnz	u2900
  5469   001CDE  2826               	incf	___flmul@temp^0,w,c
  5470   001CE0  A0D8               	btfss	status,0,c
  5471   001CE2  EF75  F00E         	goto	u2901
  5472   001CE6  EF77  F00E         	goto	u2900
  5473   001CEA                     u2901:
  5474   001CEA  EF81  F00E         	goto	l3895
  5475   001CEE                     u2900:
  5476   001CEE  0E00               	movlw	0
  5477   001CF0  6E22               	movwf	___flmul@prod^0,c
  5478   001CF2  0E00               	movlw	0
  5479   001CF4  6E23               	movwf	(___flmul@prod+1)^0,c
  5480   001CF6  0E80               	movlw	128
  5481   001CF8  6E24               	movwf	(___flmul@prod+2)^0,c
  5482   001CFA  0E7F               	movlw	127
  5483   001CFC  6E25               	movwf	(___flmul@prod+3)^0,c
  5484   001CFE  EFAF  F00E         	goto	l3907
  5485   001D02                     l3895:
  5486   001D02  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  5487   001D04  EF8E  F00E         	goto	u2910
  5488   001D08  5027               	movf	(___flmul@temp+1)^0,w,c
  5489   001D0A  E106               	bnz	u2911
  5490   001D0C  0426               	decf	___flmul@temp^0,w,c
  5491   001D0E  B0D8               	btfsc	status,0,c
  5492   001D10  EF8C  F00E         	goto	u2911
  5493   001D14  EF8E  F00E         	goto	u2910
  5494   001D18                     u2911:
  5495   001D18  EF9A  F00E         	goto	l1379
  5496   001D1C                     u2910:
  5497   001D1C  0E00               	movlw	0
  5498   001D1E  6E22               	movwf	___flmul@prod^0,c
  5499   001D20  0E00               	movlw	0
  5500   001D22  6E23               	movwf	(___flmul@prod+1)^0,c
  5501   001D24  0E00               	movlw	0
  5502   001D26  6E24               	movwf	(___flmul@prod+2)^0,c
  5503   001D28  0E00               	movlw	0
  5504   001D2A  6E25               	movwf	(___flmul@prod+3)^0,c
  5505   001D2C  0E00               	movlw	0
  5506   001D2E  6E1B               	movwf	___flmul@sign^0,c
  5507   001D30  EFAF  F00E         	goto	l3907
  5508   001D34                     l1379:
  5509   001D34  C026  F021         	movff	___flmul@temp,___flmul@bexp
  5510   001D38  0EFF               	movlw	255
  5511   001D3A  1622               	andwf	___flmul@prod^0,f,c
  5512   001D3C  0EFF               	movlw	255
  5513   001D3E  1623               	andwf	(___flmul@prod+1)^0,f,c
  5514   001D40  0E7F               	movlw	127
  5515   001D42  1624               	andwf	(___flmul@prod+2)^0,f,c
  5516   001D44  0E00               	movlw	0
  5517   001D46  1625               	andwf	(___flmul@prod+3)^0,f,c
  5518   001D48  A021               	btfss	___flmul@bexp^0,0,c
  5519   001D4A  EFA9  F00E         	goto	u2921
  5520   001D4E  EFAB  F00E         	goto	u2920
  5521   001D52                     u2921:
  5522   001D52  EFAC  F00E         	goto	l3905
  5523   001D56                     u2920:
  5524   001D56  8E24               	bsf	(___flmul@prod+2)^0,7,c
  5525   001D58                     l3905:
  5526   001D58  90D8               	bcf	status,0,c
  5527   001D5A  3021               	rrcf	___flmul@bexp^0,w,c
  5528   001D5C  6E25               	movwf	(___flmul@prod+3)^0,c
  5529   001D5E                     l3907:
  5530   001D5E  501B               	movf	___flmul@sign^0,w,c
  5531   001D60  1225               	iorwf	(___flmul@prod+3)^0,f,c
  5532   001D62  C022  F00F         	movff	___flmul@prod,?___flmul
  5533   001D66  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  5534   001D6A  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  5535   001D6E  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  5536   001D72                     l1366:
  5537   001D72  0012               	return		;funcret
  5538   001D74                     __end_of___flmul:
  5539                           	callstack 0
  5540                           
  5541 ;; *************** function _read_timer *****************
  5542 ;; Defined at:
  5543 ;;		line 46 in file "timers.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;  tH              1    0[COMRAM] PTR unsigned char 
  5546 ;;		 -> forward_navigation@timerH(1), 
  5547 ;;  tL              1    1[COMRAM] PTR unsigned char 
  5548 ;;		 -> forward_navigation@timerL(1), 
  5549 ;; Auto vars:     Size  Location     Type
  5550 ;;		None
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  1    wreg      void 
  5553 ;; Registers used:
  5554 ;;		wreg, fsr2l, fsr2h, status,2
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5560 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5564 ;;Total ram usage:        2 bytes
  5565 ;; Hardware stack levels used: 1
  5566 ;; Hardware stack levels required when called: 1
  5567 ;; This function calls:
  5568 ;;		Nothing
  5569 ;; This function is called by:
  5570 ;;		_forward_navigation
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           	psect	text29
  5575   00414C                     __ptext29:
  5576                           	callstack 0
  5577   00414C                     _read_timer:
  5578                           	callstack 28
  5579   00414C                     
  5580                           ;timers.c: 46: void read_timer(unsigned char *tH, unsigned char *tL);timers.c: 47: {;tim
      +                          ers.c: 51:     *tL = TMR0L;
  5581   00414C  5002               	movf	read_timer@tL^0,w,c
  5582   00414E  6ED9               	movwf	fsr2l,c
  5583   004150  6ADA               	clrf	fsr2h,c
  5584   004152  CFD3 FFDF          	movff	4051,indf2	;volatile
  5585                           
  5586                           ;timers.c: 52:     *tH = TMR0H;
  5587   004156  5001               	movf	read_timer@tH^0,w,c
  5588   004158  6ED9               	movwf	fsr2l,c
  5589   00415A  6ADA               	clrf	fsr2h,c
  5590   00415C  CFD4 FFDF          	movff	4052,indf2	;volatile
  5591   004160  0012               	return		;funcret
  5592   004162                     __end_of_read_timer:
  5593                           	callstack 0
  5594                           
  5595 ;; *************** function _pick_card *****************
  5596 ;; Defined at:
  5597 ;;		line 141 in file "manoeuvres.c"
  5598 ;; Parameters:    Size  Location     Type
  5599 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  5600 ;;		 -> main@motorL(9), 
  5601 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  5602 ;;		 -> main@motorR(9), 
  5603 ;;  backtrack       1   34[COMRAM] unsigned char 
  5604 ;;  key             1   35[COMRAM] unsigned char 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;		None
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  1    wreg      void 
  5609 ;; Registers used:
  5610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5619 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5620 ;;Total ram usage:        6 bytes
  5621 ;; Hardware stack levels used: 1
  5622 ;; Hardware stack levels required when called: 6
  5623 ;; This function calls:
  5624 ;;		_card_blue
  5625 ;;		_card_cyan
  5626 ;;		_card_green
  5627 ;;		_card_orange
  5628 ;;		_card_pink
  5629 ;;		_card_red
  5630 ;;		_card_white
  5631 ;;		_card_yellow
  5632 ;; This function is called by:
  5633 ;;		_forward_navigation
  5634 ;;		_return_to_sender
  5635 ;; This function uses a non-reentrant model
  5636 ;;
  5637                           
  5638                           	psect	text30
  5639   00298A                     __ptext30:
  5640                           	callstack 0
  5641   00298A                     _pick_card:
  5642                           	callstack 23
  5643   00298A                     
  5644                           ;manoeuvres.c: 141: void pick_card(DC_motor *mL, DC_motor *mR, unsigned char backtrack, 
      +                          unsigned char key);manoeuvres.c: 142: {;manoeuvres.c: 143:     switch (key) {
  5645   00298A  EF15  F015         	goto	l4329
  5646   00298E                     l4311:
  5647                           
  5648                           ;manoeuvres.c: 145:             card_red(mL, mR, backtrack);
  5649   00298E  C021  F01C         	movff	pick_card@mL,card_red@mL
  5650   002992  C022  F01D         	movff	pick_card@mR,card_red@mR
  5651   002996  C023  F01E         	movff	pick_card@backtrack,card_red@backtrack
  5652   00299A  EC7F  F01B         	call	_card_red	;wreg free
  5653                           
  5654                           ;manoeuvres.c: 146:             break;
  5655   00299E  EF42  F015         	goto	l592
  5656   0029A2                     l4313:
  5657                           
  5658                           ;manoeuvres.c: 148:             card_green(mL, mR, backtrack);
  5659   0029A2  C021  F01C         	movff	pick_card@mL,card_green@mL
  5660   0029A6  C022  F01D         	movff	pick_card@mR,card_green@mR
  5661   0029AA  C023  F01E         	movff	pick_card@backtrack,card_green@backtrack
  5662   0029AE  ECE7  F01B         	call	_card_green	;wreg free
  5663                           
  5664                           ;manoeuvres.c: 149:             break;
  5665   0029B2  EF42  F015         	goto	l592
  5666   0029B6                     l4315:
  5667                           
  5668                           ;manoeuvres.c: 151:             card_blue(mL, mR, backtrack);
  5669   0029B6  C021  F01C         	movff	pick_card@mL,card_blue@mL
  5670   0029BA  C022  F01D         	movff	pick_card@mR,card_blue@mR
  5671   0029BE  C023  F01E         	movff	pick_card@backtrack,card_blue@backtrack
  5672   0029C2  EC4F  F01C         	call	_card_blue	;wreg free
  5673                           
  5674                           ;manoeuvres.c: 152:             break;
  5675   0029C6  EF42  F015         	goto	l592
  5676   0029CA                     l4317:
  5677                           
  5678                           ;manoeuvres.c: 154:             card_yellow(mL, mR, backtrack);
  5679   0029CA  C021  F01C         	movff	pick_card@mL,card_yellow@mL
  5680   0029CE  C022  F01D         	movff	pick_card@mR,card_yellow@mR
  5681   0029D2  C023  F01E         	movff	pick_card@backtrack,card_yellow@backtrack
  5682   0029D6  ECD9  F019         	call	_card_yellow	;wreg free
  5683                           
  5684                           ;manoeuvres.c: 155:             break;
  5685   0029DA  EF42  F015         	goto	l592
  5686   0029DE                     l4319:
  5687                           
  5688                           ;manoeuvres.c: 157:             card_pink(mL, mR, backtrack);
  5689   0029DE  C021  F01C         	movff	pick_card@mL,card_pink@mL
  5690   0029E2  C022  F01D         	movff	pick_card@mR,card_pink@mR
  5691   0029E6  C023  F01E         	movff	pick_card@backtrack,card_pink@backtrack
  5692   0029EA  EC19  F01A         	call	_card_pink	;wreg free
  5693                           
  5694                           ;manoeuvres.c: 158:             break;
  5695   0029EE  EF42  F015         	goto	l592
  5696   0029F2                     l4321:
  5697                           
  5698                           ;manoeuvres.c: 160:             card_orange(mL, mR, backtrack);
  5699   0029F2  C021  F01C         	movff	pick_card@mL,card_orange@mL
  5700   0029F6  C022  F01D         	movff	pick_card@mR,card_orange@mR
  5701   0029FA  C023  F01E         	movff	pick_card@backtrack,card_orange@backtrack
  5702   0029FE  ECB3  F01B         	call	_card_orange	;wreg free
  5703                           
  5704                           ;manoeuvres.c: 161:             break;
  5705   002A02  EF42  F015         	goto	l592
  5706   002A06                     l4323:
  5707                           
  5708                           ;manoeuvres.c: 163:             card_cyan(mL, mR, backtrack);
  5709   002A06  C021  F01C         	movff	pick_card@mL,card_cyan@mL
  5710   002A0A  C022  F01D         	movff	pick_card@mR,card_cyan@mR
  5711   002A0E  C023  F01E         	movff	pick_card@backtrack,card_cyan@backtrack
  5712   002A12  EC1B  F01C         	call	_card_cyan	;wreg free
  5713                           
  5714                           ;manoeuvres.c: 164:             break;
  5715   002A16  EF42  F015         	goto	l592
  5716   002A1A                     l4325:
  5717                           
  5718                           ;manoeuvres.c: 166:             card_white(mL, mR);
  5719   002A1A  C021  F01C         	movff	pick_card@mL,card_white@mL
  5720   002A1E  C022  F01D         	movff	pick_card@mR,card_white@mR
  5721   002A22  EC35  F020         	call	_card_white	;wreg free
  5722                           
  5723                           ;manoeuvres.c: 167:             break;
  5724   002A26  EF42  F015         	goto	l592
  5725   002A2A                     l4329:
  5726   002A2A  5024               	movf	pick_card@key^0,w,c
  5727   002A2C  6E25               	movwf	??_pick_card^0,c
  5728   002A2E  6A26               	clrf	(??_pick_card+1)^0,c
  5729                           
  5730                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5731                           ; Switch size 1, requested type "simple"
  5732                           ; Number of cases is 1, Range of values is 0 to 0
  5733                           ; switch strategies available:
  5734                           ; Name         Instructions Cycles
  5735                           ; simple_byte            4     3 (average)
  5736                           ;	Chosen strategy is simple_byte
  5737   002A30  5026               	movf	(??_pick_card+1)^0,w,c
  5738   002A32  0A00               	xorlw	0	; case 0
  5739   002A34  B4D8               	btfsc	status,2,c
  5740   002A36  EF1F  F015         	goto	l5107
  5741   002A3A  EF42  F015         	goto	l592
  5742   002A3E                     l5107:
  5743                           
  5744                           ; Switch size 1, requested type "simple"
  5745                           ; Number of cases is 8, Range of values is 1 to 8
  5746                           ; switch strategies available:
  5747                           ; Name         Instructions Cycles
  5748                           ; simple_byte           25    13 (average)
  5749                           ;	Chosen strategy is simple_byte
  5750   002A3E  5025               	movf	??_pick_card^0,w,c
  5751   002A40  0A01               	xorlw	1	; case 1
  5752   002A42  B4D8               	btfsc	status,2,c
  5753   002A44  EFC7  F014         	goto	l4311
  5754   002A48  0A03               	xorlw	3	; case 2
  5755   002A4A  B4D8               	btfsc	status,2,c
  5756   002A4C  EFD1  F014         	goto	l4313
  5757   002A50  0A01               	xorlw	1	; case 3
  5758   002A52  B4D8               	btfsc	status,2,c
  5759   002A54  EFDB  F014         	goto	l4315
  5760   002A58  0A07               	xorlw	7	; case 4
  5761   002A5A  B4D8               	btfsc	status,2,c
  5762   002A5C  EFE5  F014         	goto	l4317
  5763   002A60  0A01               	xorlw	1	; case 5
  5764   002A62  B4D8               	btfsc	status,2,c
  5765   002A64  EFEF  F014         	goto	l4319
  5766   002A68  0A03               	xorlw	3	; case 6
  5767   002A6A  B4D8               	btfsc	status,2,c
  5768   002A6C  EFF9  F014         	goto	l4321
  5769   002A70  0A01               	xorlw	1	; case 7
  5770   002A72  B4D8               	btfsc	status,2,c
  5771   002A74  EF03  F015         	goto	l4323
  5772   002A78  0A0F               	xorlw	15	; case 8
  5773   002A7A  B4D8               	btfsc	status,2,c
  5774   002A7C  EF0D  F015         	goto	l4325
  5775   002A80  EF42  F015         	goto	l592
  5776   002A84                     l592:
  5777   002A84  0012               	return		;funcret
  5778   002A86                     __end_of_pick_card:
  5779                           	callstack 0
  5780                           
  5781 ;; *************** function _card_yellow *****************
  5782 ;; Defined at:
  5783 ;;		line 58 in file "manoeuvres.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5786 ;;		 -> main@motorL(9), 
  5787 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5788 ;;		 -> main@motorR(9), 
  5789 ;;  backtrack       1   29[COMRAM] unsigned char 
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;		None
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  1    wreg      void 
  5794 ;; Registers used:
  5795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5801 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5803 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5804 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5805 ;;Total ram usage:        5 bytes
  5806 ;; Hardware stack levels used: 1
  5807 ;; Hardware stack levels required when called: 5
  5808 ;; This function calls:
  5809 ;;		_headbuttReverse
  5810 ;;		_squareReverse
  5811 ;;		_turnLeft90
  5812 ;;		_turnRight90
  5813 ;; This function is called by:
  5814 ;;		_pick_card
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text31
  5819   0033B2                     __ptext31:
  5820                           	callstack 0
  5821   0033B2                     _card_yellow:
  5822                           	callstack 23
  5823   0033B2                     
  5824                           ;manoeuvres.c: 58: void card_yellow(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 59: {;manoeuvres.c: 60:     switch (backtrack) {
  5825   0033B2  EF03  F01A         	goto	l3697
  5826   0033B6                     l3691:
  5827                           
  5828                           ;manoeuvres.c: 62:             headbuttReverse(mL, mR);
  5829   0033B6  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  5830   0033BA  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  5831   0033BE  ECC9  F01F         	call	_headbuttReverse	;wreg free
  5832                           
  5833                           ;manoeuvres.c: 63:             squareReverse(mL, mR);
  5834   0033C2  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  5835   0033C6  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  5836   0033CA  EC35  F01F         	call	_squareReverse	;wreg free
  5837                           
  5838                           ;manoeuvres.c: 64:             turnRight90(mL, mR);
  5839   0033CE  C01C  F018         	movff	card_yellow@mL,turnRight90@mL
  5840   0033D2  C01D  F019         	movff	card_yellow@mR,turnRight90@mR
  5841   0033D6  EC99  F01F         	call	_turnRight90	;wreg free
  5842                           
  5843                           ;manoeuvres.c: 65:             break;
  5844   0033DA  EF18  F01A         	goto	l555
  5845   0033DE                     l3693:
  5846                           
  5847                           ;manoeuvres.c: 67:             turnLeft90(mL, mR);
  5848   0033DE  C01C  F018         	movff	card_yellow@mL,turnLeft90@mL
  5849   0033E2  C01D  F019         	movff	card_yellow@mR,turnLeft90@mR
  5850   0033E6  ECB1  F01F         	call	_turnLeft90	;wreg free
  5851                           
  5852                           ;manoeuvres.c: 68:             squareReverse(mL, mR);
  5853   0033EA  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  5854   0033EE  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  5855   0033F2  EC35  F01F         	call	_squareReverse	;wreg free
  5856                           
  5857                           ;manoeuvres.c: 69:             headbuttReverse(mL, mR);
  5858   0033F6  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  5859   0033FA  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  5860   0033FE  ECC9  F01F         	call	_headbuttReverse	;wreg free
  5861                           
  5862                           ;manoeuvres.c: 70:             break;
  5863   003402  EF18  F01A         	goto	l555
  5864   003406                     l3697:
  5865   003406  501E               	movf	card_yellow@backtrack^0,w,c
  5866   003408  6E1F               	movwf	??_card_yellow^0,c
  5867   00340A  6A20               	clrf	(??_card_yellow+1)^0,c
  5868                           
  5869                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5870                           ; Switch size 1, requested type "simple"
  5871                           ; Number of cases is 1, Range of values is 0 to 0
  5872                           ; switch strategies available:
  5873                           ; Name         Instructions Cycles
  5874                           ; simple_byte            4     3 (average)
  5875                           ;	Chosen strategy is simple_byte
  5876   00340C  5020               	movf	(??_card_yellow+1)^0,w,c
  5877   00340E  0A00               	xorlw	0	; case 0
  5878   003410  B4D8               	btfsc	status,2,c
  5879   003412  EF0D  F01A         	goto	l5109
  5880   003416  EF18  F01A         	goto	l555
  5881   00341A                     l5109:
  5882                           
  5883                           ; Switch size 1, requested type "simple"
  5884                           ; Number of cases is 2, Range of values is 0 to 1
  5885                           ; switch strategies available:
  5886                           ; Name         Instructions Cycles
  5887                           ; simple_byte            7     4 (average)
  5888                           ;	Chosen strategy is simple_byte
  5889   00341A  501F               	movf	??_card_yellow^0,w,c
  5890   00341C  0A00               	xorlw	0	; case 0
  5891   00341E  B4D8               	btfsc	status,2,c
  5892   003420  EFDB  F019         	goto	l3691
  5893   003424  0A01               	xorlw	1	; case 1
  5894   003426  B4D8               	btfsc	status,2,c
  5895   003428  EFEF  F019         	goto	l3693
  5896   00342C  EF18  F01A         	goto	l555
  5897   003430                     l555:
  5898   003430  0012               	return		;funcret
  5899   003432                     __end_of_card_yellow:
  5900                           	callstack 0
  5901                           
  5902 ;; *************** function _card_white *****************
  5903 ;; Defined at:
  5904 ;;		line 131 in file "manoeuvres.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5907 ;;		 -> main@motorL(9), 
  5908 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5909 ;;		 -> main@motorR(9), 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;		None
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5921 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5924 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5925 ;;Total ram usage:        2 bytes
  5926 ;; Hardware stack levels used: 1
  5927 ;; Hardware stack levels required when called: 5
  5928 ;; This function calls:
  5929 ;;		_UTurn
  5930 ;;		_headbuttReverse
  5931 ;; This function is called by:
  5932 ;;		_pick_card
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           	psect	text32
  5937   00406A                     __ptext32:
  5938                           	callstack 0
  5939   00406A                     _card_white:
  5940                           	callstack 23
  5941   00406A                     
  5942                           ;manoeuvres.c: 131: void card_white(DC_motor *mL, DC_motor *mR);manoeuvres.c: 132: {;man
      +                          oeuvres.c: 133:     headbuttReverse(mL, mR);
  5943   00406A  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  5944   00406E  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  5945   004072  ECC9  F01F         	call	_headbuttReverse	;wreg free
  5946                           
  5947                           ;manoeuvres.c: 134:     UTurn(mL, mR);
  5948   004076  C01C  F018         	movff	card_white@mL,UTurn@mL
  5949   00407A  C01D  F019         	movff	card_white@mR,UTurn@mR
  5950   00407E  EC80  F01F         	call	_UTurn	;wreg free
  5951                           
  5952                           ;manoeuvres.c: 135:     headbuttReverse(mL, mR);
  5953   004082  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  5954   004086  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  5955   00408A  ECC9  F01F         	call	_headbuttReverse	;wreg free
  5956   00408E  0012               	return		;funcret
  5957   004090                     __end_of_card_white:
  5958                           	callstack 0
  5959                           
  5960 ;; *************** function _card_red *****************
  5961 ;; Defined at:
  5962 ;;		line 7 in file "manoeuvres.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5965 ;;		 -> main@motorL(9), 
  5966 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5967 ;;		 -> main@motorR(9), 
  5968 ;;  backtrack       1   29[COMRAM] unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;		None
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      void 
  5973 ;; Registers used:
  5974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5980 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5982 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5983 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5984 ;;Total ram usage:        5 bytes
  5985 ;; Hardware stack levels used: 1
  5986 ;; Hardware stack levels required when called: 5
  5987 ;; This function calls:
  5988 ;;		_headbuttReverse
  5989 ;;		_turnLeft90
  5990 ;;		_turnRight90
  5991 ;; This function is called by:
  5992 ;;		_pick_card
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           	psect	text33
  5997   0036FE                     __ptext33:
  5998                           	callstack 0
  5999   0036FE                     _card_red:
  6000                           	callstack 23
  6001   0036FE                     
  6002                           ;manoeuvres.c: 7: void card_red(DC_motor *mL, DC_motor *mR, unsigned char backtrack);man
      +                          oeuvres.c: 8: {;manoeuvres.c: 9:     switch (backtrack) {
  6003   0036FE  EF9D  F01B         	goto	l3655
  6004   003702                     l3649:
  6005                           
  6006                           ;manoeuvres.c: 11:             headbuttReverse(mL, mR);
  6007   003702  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  6008   003706  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  6009   00370A  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6010                           
  6011                           ;manoeuvres.c: 12:             turnRight90(mL, mR);
  6012   00370E  C01C  F018         	movff	card_red@mL,turnRight90@mL
  6013   003712  C01D  F019         	movff	card_red@mR,turnRight90@mR
  6014   003716  EC99  F01F         	call	_turnRight90	;wreg free
  6015                           
  6016                           ;manoeuvres.c: 13:             break;
  6017   00371A  EFB2  F01B         	goto	l534
  6018   00371E                     l3651:
  6019                           
  6020                           ;manoeuvres.c: 15:             turnLeft90(mL, mR);
  6021   00371E  C01C  F018         	movff	card_red@mL,turnLeft90@mL
  6022   003722  C01D  F019         	movff	card_red@mR,turnLeft90@mR
  6023   003726  ECB1  F01F         	call	_turnLeft90	;wreg free
  6024                           
  6025                           ;manoeuvres.c: 16:             headbuttReverse(mL, mR);
  6026   00372A  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  6027   00372E  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  6028   003732  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6029                           
  6030                           ;manoeuvres.c: 17:             break;
  6031   003736  EFB2  F01B         	goto	l534
  6032   00373A                     l3655:
  6033   00373A  501E               	movf	card_red@backtrack^0,w,c
  6034   00373C  6E1F               	movwf	??_card_red^0,c
  6035   00373E  6A20               	clrf	(??_card_red+1)^0,c
  6036                           
  6037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6038                           ; Switch size 1, requested type "simple"
  6039                           ; Number of cases is 1, Range of values is 0 to 0
  6040                           ; switch strategies available:
  6041                           ; Name         Instructions Cycles
  6042                           ; simple_byte            4     3 (average)
  6043                           ;	Chosen strategy is simple_byte
  6044   003740  5020               	movf	(??_card_red+1)^0,w,c
  6045   003742  0A00               	xorlw	0	; case 0
  6046   003744  B4D8               	btfsc	status,2,c
  6047   003746  EFA7  F01B         	goto	l5111
  6048   00374A  EFB2  F01B         	goto	l534
  6049   00374E                     l5111:
  6050                           
  6051                           ; Switch size 1, requested type "simple"
  6052                           ; Number of cases is 2, Range of values is 0 to 1
  6053                           ; switch strategies available:
  6054                           ; Name         Instructions Cycles
  6055                           ; simple_byte            7     4 (average)
  6056                           ;	Chosen strategy is simple_byte
  6057   00374E  501F               	movf	??_card_red^0,w,c
  6058   003750  0A00               	xorlw	0	; case 0
  6059   003752  B4D8               	btfsc	status,2,c
  6060   003754  EF81  F01B         	goto	l3649
  6061   003758  0A01               	xorlw	1	; case 1
  6062   00375A  B4D8               	btfsc	status,2,c
  6063   00375C  EF8F  F01B         	goto	l3651
  6064   003760  EFB2  F01B         	goto	l534
  6065   003764                     l534:
  6066   003764  0012               	return		;funcret
  6067   003766                     __end_of_card_red:
  6068                           	callstack 0
  6069                           
  6070 ;; *************** function _card_pink *****************
  6071 ;; Defined at:
  6072 ;;		line 77 in file "manoeuvres.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6075 ;;		 -> main@motorL(9), 
  6076 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6077 ;;		 -> main@motorR(9), 
  6078 ;;  backtrack       1   29[COMRAM] unsigned char 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;		None
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      void 
  6083 ;; Registers used:
  6084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6090 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6092 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6093 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6094 ;;Total ram usage:        5 bytes
  6095 ;; Hardware stack levels used: 1
  6096 ;; Hardware stack levels required when called: 5
  6097 ;; This function calls:
  6098 ;;		_headbuttReverse
  6099 ;;		_squareReverse
  6100 ;;		_turnLeft90
  6101 ;;		_turnRight90
  6102 ;; This function is called by:
  6103 ;;		_pick_card
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text34
  6108   003432                     __ptext34:
  6109                           	callstack 0
  6110   003432                     _card_pink:
  6111                           	callstack 23
  6112   003432                     
  6113                           ;manoeuvres.c: 77: void card_pink(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 78: {;manoeuvres.c: 79:     switch (backtrack) {
  6114   003432  EF43  F01A         	goto	l3711
  6115   003436                     l3705:
  6116                           
  6117                           ;manoeuvres.c: 81:             headbuttReverse(mL, mR);
  6118   003436  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  6119   00343A  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  6120   00343E  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6121                           
  6122                           ;manoeuvres.c: 82:             squareReverse(mL, mR);
  6123   003442  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  6124   003446  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  6125   00344A  EC35  F01F         	call	_squareReverse	;wreg free
  6126                           
  6127                           ;manoeuvres.c: 83:             turnLeft90(mL, mR);
  6128   00344E  C01C  F018         	movff	card_pink@mL,turnLeft90@mL
  6129   003452  C01D  F019         	movff	card_pink@mR,turnLeft90@mR
  6130   003456  ECB1  F01F         	call	_turnLeft90	;wreg free
  6131                           
  6132                           ;manoeuvres.c: 84:             break;
  6133   00345A  EF58  F01A         	goto	l562
  6134   00345E                     l3707:
  6135                           
  6136                           ;manoeuvres.c: 86:             turnRight90(mL, mR);
  6137   00345E  C01C  F018         	movff	card_pink@mL,turnRight90@mL
  6138   003462  C01D  F019         	movff	card_pink@mR,turnRight90@mR
  6139   003466  EC99  F01F         	call	_turnRight90	;wreg free
  6140                           
  6141                           ;manoeuvres.c: 87:             squareReverse(mL, mR);
  6142   00346A  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  6143   00346E  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  6144   003472  EC35  F01F         	call	_squareReverse	;wreg free
  6145                           
  6146                           ;manoeuvres.c: 88:             headbuttReverse(mL, mR);
  6147   003476  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  6148   00347A  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  6149   00347E  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6150                           
  6151                           ;manoeuvres.c: 89:             break;
  6152   003482  EF58  F01A         	goto	l562
  6153   003486                     l3711:
  6154   003486  501E               	movf	card_pink@backtrack^0,w,c
  6155   003488  6E1F               	movwf	??_card_pink^0,c
  6156   00348A  6A20               	clrf	(??_card_pink+1)^0,c
  6157                           
  6158                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6159                           ; Switch size 1, requested type "simple"
  6160                           ; Number of cases is 1, Range of values is 0 to 0
  6161                           ; switch strategies available:
  6162                           ; Name         Instructions Cycles
  6163                           ; simple_byte            4     3 (average)
  6164                           ;	Chosen strategy is simple_byte
  6165   00348C  5020               	movf	(??_card_pink+1)^0,w,c
  6166   00348E  0A00               	xorlw	0	; case 0
  6167   003490  B4D8               	btfsc	status,2,c
  6168   003492  EF4D  F01A         	goto	l5113
  6169   003496  EF58  F01A         	goto	l562
  6170   00349A                     l5113:
  6171                           
  6172                           ; Switch size 1, requested type "simple"
  6173                           ; Number of cases is 2, Range of values is 0 to 1
  6174                           ; switch strategies available:
  6175                           ; Name         Instructions Cycles
  6176                           ; simple_byte            7     4 (average)
  6177                           ;	Chosen strategy is simple_byte
  6178   00349A  501F               	movf	??_card_pink^0,w,c
  6179   00349C  0A00               	xorlw	0	; case 0
  6180   00349E  B4D8               	btfsc	status,2,c
  6181   0034A0  EF1B  F01A         	goto	l3705
  6182   0034A4  0A01               	xorlw	1	; case 1
  6183   0034A6  B4D8               	btfsc	status,2,c
  6184   0034A8  EF2F  F01A         	goto	l3707
  6185   0034AC  EF58  F01A         	goto	l562
  6186   0034B0                     l562:
  6187   0034B0  0012               	return		;funcret
  6188   0034B2                     __end_of_card_pink:
  6189                           	callstack 0
  6190                           
  6191 ;; *************** function _squareReverse *****************
  6192 ;; Defined at:
  6193 ;;		line 239 in file "dc_motor.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6196 ;;		 -> main@motorL(9), 
  6197 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6198 ;;		 -> main@motorR(9), 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6210 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6212 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6213 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6214 ;;Total ram usage:        4 bytes
  6215 ;; Hardware stack levels used: 1
  6216 ;; Hardware stack levels required when called: 4
  6217 ;; This function calls:
  6218 ;;		_fullSpeedReverse
  6219 ;;		_stop
  6220 ;; This function is called by:
  6221 ;;		_card_yellow
  6222 ;;		_card_pink
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text35
  6227   003E6A                     __ptext35:
  6228                           	callstack 0
  6229   003E6A                     _squareReverse:
  6230                           	callstack 23
  6231   003E6A                     
  6232                           ;dc_motor.c: 239: void squareReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 240: {;dc_m
      +                          otor.c: 241:     fullSpeedReverse(mL, mR);
  6233   003E6A  C018  F013         	movff	squareReverse@mL,fullSpeedReverse@mL
  6234   003E6E  C019  F014         	movff	squareReverse@mR,fullSpeedReverse@mR
  6235   003E72  EC45  F018         	call	_fullSpeedReverse	;wreg free
  6236   003E76                     
  6237                           ;dc_motor.c: 242:     _delay((unsigned long)((squareDelay)*(64000000/4000.0)));
  6238   003E76  0EC7               	movlw	199
  6239   003E78  6E1B               	movwf	(??_squareReverse+1)^0,c
  6240   003E7A  0E0D               	movlw	13
  6241   003E7C  6E1A               	movwf	??_squareReverse^0,c
  6242   003E7E  0EC6               	movlw	198
  6243   003E80                     u4117:
  6244   003E80  2EE8               	decfsz	wreg,f,c
  6245   003E82  D7FE               	bra	u4117
  6246   003E84  2E1A               	decfsz	??_squareReverse^0,f,c
  6247   003E86  D7FC               	bra	u4117
  6248   003E88  2E1B               	decfsz	(??_squareReverse+1)^0,f,c
  6249   003E8A  D7FA               	bra	u4117
  6250   003E8C  D000               	nop2	
  6251   003E8E                     
  6252                           ;dc_motor.c: 243:     stop(mL, mR);
  6253   003E8E  C018  F013         	movff	squareReverse@mL,stop@mL
  6254   003E92  C019  F014         	movff	squareReverse@mR,stop@mR
  6255   003E96  EC92  F019         	call	_stop	;wreg free
  6256   003E9A  0012               	return		;funcret
  6257   003E9C                     __end_of_squareReverse:
  6258                           	callstack 0
  6259                           
  6260 ;; *************** function _card_orange *****************
  6261 ;; Defined at:
  6262 ;;		line 96 in file "manoeuvres.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6265 ;;		 -> main@motorL(9), 
  6266 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6267 ;;		 -> main@motorR(9), 
  6268 ;;  backtrack       1   29[COMRAM] unsigned char 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;		None
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6280 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6283 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6284 ;;Total ram usage:        5 bytes
  6285 ;; Hardware stack levels used: 1
  6286 ;; Hardware stack levels required when called: 5
  6287 ;; This function calls:
  6288 ;;		_headbuttReverse
  6289 ;;		_turnLeft135
  6290 ;;		_turnRight135
  6291 ;; This function is called by:
  6292 ;;		_pick_card
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text36
  6297   003766                     __ptext36:
  6298                           	callstack 0
  6299   003766                     _card_orange:
  6300                           	callstack 23
  6301   003766                     
  6302                           ;manoeuvres.c: 96: void card_orange(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 97: {;manoeuvres.c: 98:     switch (backtrack) {
  6303   003766  EFD1  F01B         	goto	l3725
  6304   00376A                     l3719:
  6305                           
  6306                           ;manoeuvres.c: 100:             headbuttReverse(mL, mR);
  6307   00376A  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  6308   00376E  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  6309   003772  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6310                           
  6311                           ;manoeuvres.c: 101:             turnRight135(mL, mR);
  6312   003776  C01C  F018         	movff	card_orange@mL,turnRight135@mL
  6313   00377A  C01D  F019         	movff	card_orange@mR,turnRight135@mR
  6314   00377E  EC4E  F01F         	call	_turnRight135	;wreg free
  6315                           
  6316                           ;manoeuvres.c: 102:             break;
  6317   003782  EFE6  F01B         	goto	l569
  6318   003786                     l3721:
  6319                           
  6320                           ;manoeuvres.c: 104:             turnLeft135(mL, mR);
  6321   003786  C01C  F018         	movff	card_orange@mL,turnLeft135@mL
  6322   00378A  C01D  F019         	movff	card_orange@mR,turnLeft135@mR
  6323   00378E  EC67  F01F         	call	_turnLeft135	;wreg free
  6324                           
  6325                           ;manoeuvres.c: 105:             headbuttReverse(mL, mR);
  6326   003792  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  6327   003796  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  6328   00379A  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6329                           
  6330                           ;manoeuvres.c: 106:             break;
  6331   00379E  EFE6  F01B         	goto	l569
  6332   0037A2                     l3725:
  6333   0037A2  501E               	movf	card_orange@backtrack^0,w,c
  6334   0037A4  6E1F               	movwf	??_card_orange^0,c
  6335   0037A6  6A20               	clrf	(??_card_orange+1)^0,c
  6336                           
  6337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6338                           ; Switch size 1, requested type "simple"
  6339                           ; Number of cases is 1, Range of values is 0 to 0
  6340                           ; switch strategies available:
  6341                           ; Name         Instructions Cycles
  6342                           ; simple_byte            4     3 (average)
  6343                           ;	Chosen strategy is simple_byte
  6344   0037A8  5020               	movf	(??_card_orange+1)^0,w,c
  6345   0037AA  0A00               	xorlw	0	; case 0
  6346   0037AC  B4D8               	btfsc	status,2,c
  6347   0037AE  EFDB  F01B         	goto	l5115
  6348   0037B2  EFE6  F01B         	goto	l569
  6349   0037B6                     l5115:
  6350                           
  6351                           ; Switch size 1, requested type "simple"
  6352                           ; Number of cases is 2, Range of values is 0 to 1
  6353                           ; switch strategies available:
  6354                           ; Name         Instructions Cycles
  6355                           ; simple_byte            7     4 (average)
  6356                           ;	Chosen strategy is simple_byte
  6357   0037B6  501F               	movf	??_card_orange^0,w,c
  6358   0037B8  0A00               	xorlw	0	; case 0
  6359   0037BA  B4D8               	btfsc	status,2,c
  6360   0037BC  EFB5  F01B         	goto	l3719
  6361   0037C0  0A01               	xorlw	1	; case 1
  6362   0037C2  B4D8               	btfsc	status,2,c
  6363   0037C4  EFC3  F01B         	goto	l3721
  6364   0037C8  EFE6  F01B         	goto	l569
  6365   0037CC                     l569:
  6366   0037CC  0012               	return		;funcret
  6367   0037CE                     __end_of_card_orange:
  6368                           	callstack 0
  6369                           
  6370 ;; *************** function _card_green *****************
  6371 ;; Defined at:
  6372 ;;		line 24 in file "manoeuvres.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6375 ;;		 -> main@motorL(9), 
  6376 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6377 ;;		 -> main@motorR(9), 
  6378 ;;  backtrack       1   29[COMRAM] unsigned char 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;		None
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  1    wreg      void 
  6383 ;; Registers used:
  6384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6390 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6392 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6393 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6394 ;;Total ram usage:        5 bytes
  6395 ;; Hardware stack levels used: 1
  6396 ;; Hardware stack levels required when called: 5
  6397 ;; This function calls:
  6398 ;;		_headbuttReverse
  6399 ;;		_turnLeft90
  6400 ;;		_turnRight90
  6401 ;; This function is called by:
  6402 ;;		_pick_card
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text37
  6407   0037CE                     __ptext37:
  6408                           	callstack 0
  6409   0037CE                     _card_green:
  6410                           	callstack 23
  6411   0037CE                     
  6412                           ;manoeuvres.c: 24: void card_green(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 25: {;manoeuvres.c: 26:     switch (backtrack) {
  6413   0037CE  EF05  F01C         	goto	l3669
  6414   0037D2                     l3663:
  6415                           
  6416                           ;manoeuvres.c: 28:             headbuttReverse(mL, mR);
  6417   0037D2  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  6418   0037D6  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  6419   0037DA  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6420                           
  6421                           ;manoeuvres.c: 29:             turnLeft90(mL, mR);
  6422   0037DE  C01C  F018         	movff	card_green@mL,turnLeft90@mL
  6423   0037E2  C01D  F019         	movff	card_green@mR,turnLeft90@mR
  6424   0037E6  ECB1  F01F         	call	_turnLeft90	;wreg free
  6425                           
  6426                           ;manoeuvres.c: 30:             break;
  6427   0037EA  EF1A  F01C         	goto	l541
  6428   0037EE                     l3665:
  6429                           
  6430                           ;manoeuvres.c: 32:             turnRight90(mL, mR);
  6431   0037EE  C01C  F018         	movff	card_green@mL,turnRight90@mL
  6432   0037F2  C01D  F019         	movff	card_green@mR,turnRight90@mR
  6433   0037F6  EC99  F01F         	call	_turnRight90	;wreg free
  6434                           
  6435                           ;manoeuvres.c: 33:             headbuttReverse(mL, mR);
  6436   0037FA  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  6437   0037FE  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  6438   003802  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6439                           
  6440                           ;manoeuvres.c: 34:             break;
  6441   003806  EF1A  F01C         	goto	l541
  6442   00380A                     l3669:
  6443   00380A  501E               	movf	card_green@backtrack^0,w,c
  6444   00380C  6E1F               	movwf	??_card_green^0,c
  6445   00380E  6A20               	clrf	(??_card_green+1)^0,c
  6446                           
  6447                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6448                           ; Switch size 1, requested type "simple"
  6449                           ; Number of cases is 1, Range of values is 0 to 0
  6450                           ; switch strategies available:
  6451                           ; Name         Instructions Cycles
  6452                           ; simple_byte            4     3 (average)
  6453                           ;	Chosen strategy is simple_byte
  6454   003810  5020               	movf	(??_card_green+1)^0,w,c
  6455   003812  0A00               	xorlw	0	; case 0
  6456   003814  B4D8               	btfsc	status,2,c
  6457   003816  EF0F  F01C         	goto	l5117
  6458   00381A  EF1A  F01C         	goto	l541
  6459   00381E                     l5117:
  6460                           
  6461                           ; Switch size 1, requested type "simple"
  6462                           ; Number of cases is 2, Range of values is 0 to 1
  6463                           ; switch strategies available:
  6464                           ; Name         Instructions Cycles
  6465                           ; simple_byte            7     4 (average)
  6466                           ;	Chosen strategy is simple_byte
  6467   00381E  501F               	movf	??_card_green^0,w,c
  6468   003820  0A00               	xorlw	0	; case 0
  6469   003822  B4D8               	btfsc	status,2,c
  6470   003824  EFE9  F01B         	goto	l3663
  6471   003828  0A01               	xorlw	1	; case 1
  6472   00382A  B4D8               	btfsc	status,2,c
  6473   00382C  EFF7  F01B         	goto	l3665
  6474   003830  EF1A  F01C         	goto	l541
  6475   003834                     l541:
  6476   003834  0012               	return		;funcret
  6477   003836                     __end_of_card_green:
  6478                           	callstack 0
  6479                           
  6480 ;; *************** function _turnRight90 *****************
  6481 ;; Defined at:
  6482 ;;		line 189 in file "dc_motor.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6485 ;;		 -> main@motorL(9), 
  6486 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6487 ;;		 -> main@motorR(9), 
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      void 
  6492 ;; Registers used:
  6493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6499 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6502 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6503 ;;Total ram usage:        4 bytes
  6504 ;; Hardware stack levels used: 1
  6505 ;; Hardware stack levels required when called: 4
  6506 ;; This function calls:
  6507 ;;		_stop
  6508 ;;		_turnRight
  6509 ;; This function is called by:
  6510 ;;		_card_red
  6511 ;;		_card_green
  6512 ;;		_card_yellow
  6513 ;;		_card_pink
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	text38
  6518   003F32                     __ptext38:
  6519                           	callstack 0
  6520   003F32                     _turnRight90:
  6521                           	callstack 23
  6522   003F32                     
  6523                           ;dc_motor.c: 189: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 190: {;dc_mot
      +                          or.c: 191:     turnRight(mL, mR);
  6524   003F32  C018  F013         	movff	turnRight90@mL,turnRight@mL
  6525   003F36  C019  F014         	movff	turnRight90@mR,turnRight@mR
  6526   003F3A  EC8D  F017         	call	_turnRight	;wreg free
  6527   003F3E                     
  6528                           ;dc_motor.c: 192:     _delay((unsigned long)((turnRight90Delay)*(64000000/4000.0)));
  6529   003F3E  0E09               	movlw	9
  6530   003F40  6E1B               	movwf	(??_turnRight90+1)^0,c
  6531   003F42  0EC5               	movlw	197
  6532   003F44  6E1A               	movwf	??_turnRight90^0,c
  6533   003F46  0E20               	movlw	32
  6534   003F48                     u4127:
  6535   003F48  2EE8               	decfsz	wreg,f,c
  6536   003F4A  D7FE               	bra	u4127
  6537   003F4C  2E1A               	decfsz	??_turnRight90^0,f,c
  6538   003F4E  D7FC               	bra	u4127
  6539   003F50  2E1B               	decfsz	(??_turnRight90+1)^0,f,c
  6540   003F52  D7FA               	bra	u4127
  6541   003F54                     
  6542                           ;dc_motor.c: 193:     stop(mL, mR);
  6543   003F54  C018  F013         	movff	turnRight90@mL,stop@mL
  6544   003F58  C019  F014         	movff	turnRight90@mR,stop@mR
  6545   003F5C  EC92  F019         	call	_stop	;wreg free
  6546   003F60  0012               	return		;funcret
  6547   003F62                     __end_of_turnRight90:
  6548                           	callstack 0
  6549                           
  6550 ;; *************** function _turnLeft90 *****************
  6551 ;; Defined at:
  6552 ;;		line 179 in file "dc_motor.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6555 ;;		 -> main@motorL(9), 
  6556 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6557 ;;		 -> main@motorR(9), 
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6569 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6571 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6572 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6573 ;;Total ram usage:        4 bytes
  6574 ;; Hardware stack levels used: 1
  6575 ;; Hardware stack levels required when called: 4
  6576 ;; This function calls:
  6577 ;;		_stop
  6578 ;;		_turnLeft
  6579 ;; This function is called by:
  6580 ;;		_card_red
  6581 ;;		_card_green
  6582 ;;		_card_yellow
  6583 ;;		_card_pink
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           	psect	text39
  6588   003F62                     __ptext39:
  6589                           	callstack 0
  6590   003F62                     _turnLeft90:
  6591                           	callstack 23
  6592   003F62                     
  6593                           ;dc_motor.c: 179: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 180: {;dc_moto
      +                          r.c: 181:     turnLeft(mL, mR);
  6594   003F62  C018  F013         	movff	turnLeft90@mL,turnLeft@mL
  6595   003F66  C019  F014         	movff	turnLeft90@mR,turnLeft@mR
  6596   003F6A  ECE9  F017         	call	_turnLeft	;wreg free
  6597   003F6E                     
  6598                           ;dc_motor.c: 182:     _delay((unsigned long)((turnLeft90Delay)*(64000000/4000.0)));
  6599   003F6E  0E07               	movlw	7
  6600   003F70  6E1B               	movwf	(??_turnLeft90+1)^0,c
  6601   003F72  0ED2               	movlw	210
  6602   003F74  6E1A               	movwf	??_turnLeft90^0,c
  6603   003F76  0E6E               	movlw	110
  6604   003F78                     u4137:
  6605   003F78  2EE8               	decfsz	wreg,f,c
  6606   003F7A  D7FE               	bra	u4137
  6607   003F7C  2E1A               	decfsz	??_turnLeft90^0,f,c
  6608   003F7E  D7FC               	bra	u4137
  6609   003F80  2E1B               	decfsz	(??_turnLeft90+1)^0,f,c
  6610   003F82  D7FA               	bra	u4137
  6611   003F84                     
  6612                           ;dc_motor.c: 183:     stop(mL, mR);
  6613   003F84  C018  F013         	movff	turnLeft90@mL,stop@mL
  6614   003F88  C019  F014         	movff	turnLeft90@mR,stop@mR
  6615   003F8C  EC92  F019         	call	_stop	;wreg free
  6616   003F90  0012               	return		;funcret
  6617   003F92                     __end_of_turnLeft90:
  6618                           	callstack 0
  6619                           
  6620 ;; *************** function _card_cyan *****************
  6621 ;; Defined at:
  6622 ;;		line 113 in file "manoeuvres.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6625 ;;		 -> main@motorL(9), 
  6626 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6627 ;;		 -> main@motorR(9), 
  6628 ;;  backtrack       1   29[COMRAM] unsigned char 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      void 
  6633 ;; Registers used:
  6634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6640 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6643 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6644 ;;Total ram usage:        5 bytes
  6645 ;; Hardware stack levels used: 1
  6646 ;; Hardware stack levels required when called: 5
  6647 ;; This function calls:
  6648 ;;		_headbuttReverse
  6649 ;;		_turnLeft135
  6650 ;;		_turnRight135
  6651 ;; This function is called by:
  6652 ;;		_pick_card
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text40
  6657   003836                     __ptext40:
  6658                           	callstack 0
  6659   003836                     _card_cyan:
  6660                           	callstack 23
  6661   003836                     
  6662                           ;manoeuvres.c: 113: void card_cyan(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 114: {;manoeuvres.c: 115:     switch (backtrack) {
  6663   003836  EF39  F01C         	goto	l3739
  6664   00383A                     l3733:
  6665                           
  6666                           ;manoeuvres.c: 117:             headbuttReverse(mL, mR);
  6667   00383A  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  6668   00383E  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  6669   003842  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6670                           
  6671                           ;manoeuvres.c: 118:             turnLeft135(mL, mR);
  6672   003846  C01C  F018         	movff	card_cyan@mL,turnLeft135@mL
  6673   00384A  C01D  F019         	movff	card_cyan@mR,turnLeft135@mR
  6674   00384E  EC67  F01F         	call	_turnLeft135	;wreg free
  6675                           
  6676                           ;manoeuvres.c: 119:             break;
  6677   003852  EF4E  F01C         	goto	l576
  6678   003856                     l3735:
  6679                           
  6680                           ;manoeuvres.c: 121:             turnRight135(mL, mR);
  6681   003856  C01C  F018         	movff	card_cyan@mL,turnRight135@mL
  6682   00385A  C01D  F019         	movff	card_cyan@mR,turnRight135@mR
  6683   00385E  EC4E  F01F         	call	_turnRight135	;wreg free
  6684                           
  6685                           ;manoeuvres.c: 122:             headbuttReverse(mL, mR);
  6686   003862  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  6687   003866  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  6688   00386A  ECC9  F01F         	call	_headbuttReverse	;wreg free
  6689                           
  6690                           ;manoeuvres.c: 123:             break;
  6691   00386E  EF4E  F01C         	goto	l576
  6692   003872                     l3739:
  6693   003872  501E               	movf	card_cyan@backtrack^0,w,c
  6694   003874  6E1F               	movwf	??_card_cyan^0,c
  6695   003876  6A20               	clrf	(??_card_cyan+1)^0,c
  6696                           
  6697                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6698                           ; Switch size 1, requested type "simple"
  6699                           ; Number of cases is 1, Range of values is 0 to 0
  6700                           ; switch strategies available:
  6701                           ; Name         Instructions Cycles
  6702                           ; simple_byte            4     3 (average)
  6703                           ;	Chosen strategy is simple_byte
  6704   003878  5020               	movf	(??_card_cyan+1)^0,w,c
  6705   00387A  0A00               	xorlw	0	; case 0
  6706   00387C  B4D8               	btfsc	status,2,c
  6707   00387E  EF43  F01C         	goto	l5119
  6708   003882  EF4E  F01C         	goto	l576
  6709   003886                     l5119:
  6710                           
  6711                           ; Switch size 1, requested type "simple"
  6712                           ; Number of cases is 2, Range of values is 0 to 1
  6713                           ; switch strategies available:
  6714                           ; Name         Instructions Cycles
  6715                           ; simple_byte            7     4 (average)
  6716                           ;	Chosen strategy is simple_byte
  6717   003886  501F               	movf	??_card_cyan^0,w,c
  6718   003888  0A00               	xorlw	0	; case 0
  6719   00388A  B4D8               	btfsc	status,2,c
  6720   00388C  EF1D  F01C         	goto	l3733
  6721   003890  0A01               	xorlw	1	; case 1
  6722   003892  B4D8               	btfsc	status,2,c
  6723   003894  EF2B  F01C         	goto	l3735
  6724   003898  EF4E  F01C         	goto	l576
  6725   00389C                     l576:
  6726   00389C  0012               	return		;funcret
  6727   00389E                     __end_of_card_cyan:
  6728                           	callstack 0
  6729                           
  6730 ;; *************** function _turnRight135 *****************
  6731 ;; Defined at:
  6732 ;;		line 209 in file "dc_motor.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6735 ;;		 -> main@motorL(9), 
  6736 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6737 ;;		 -> main@motorR(9), 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;		None
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      void 
  6742 ;; Registers used:
  6743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6749 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6751 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6752 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6753 ;;Total ram usage:        4 bytes
  6754 ;; Hardware stack levels used: 1
  6755 ;; Hardware stack levels required when called: 4
  6756 ;; This function calls:
  6757 ;;		_stop
  6758 ;;		_turnRight
  6759 ;; This function is called by:
  6760 ;;		_card_orange
  6761 ;;		_card_cyan
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           	psect	text41
  6766   003E9C                     __ptext41:
  6767                           	callstack 0
  6768   003E9C                     _turnRight135:
  6769                           	callstack 23
  6770   003E9C                     
  6771                           ;dc_motor.c: 209: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 210: {;dc_mo
      +                          tor.c: 211:     turnRight(mL, mR);
  6772   003E9C  C018  F013         	movff	turnRight135@mL,turnRight@mL
  6773   003EA0  C019  F014         	movff	turnRight135@mR,turnRight@mR
  6774   003EA4  EC8D  F017         	call	_turnRight	;wreg free
  6775   003EA8                     
  6776                           ;dc_motor.c: 212:     _delay((unsigned long)((turnRight135Delay)*(64000000/4000.0)));
  6777   003EA8  0E16               	movlw	22
  6778   003EAA  6E1B               	movwf	(??_turnRight135+1)^0,c
  6779   003EAC  0E45               	movlw	69
  6780   003EAE  6E1A               	movwf	??_turnRight135^0,c
  6781   003EB0  0E17               	movlw	23
  6782   003EB2                     u4147:
  6783   003EB2  2EE8               	decfsz	wreg,f,c
  6784   003EB4  D7FE               	bra	u4147
  6785   003EB6  2E1A               	decfsz	??_turnRight135^0,f,c
  6786   003EB8  D7FC               	bra	u4147
  6787   003EBA  2E1B               	decfsz	(??_turnRight135+1)^0,f,c
  6788   003EBC  D7FA               	bra	u4147
  6789   003EBE  0000               	nop	
  6790   003EC0                     
  6791                           ;dc_motor.c: 213:     stop(mL, mR);
  6792   003EC0  C018  F013         	movff	turnRight135@mL,stop@mL
  6793   003EC4  C019  F014         	movff	turnRight135@mR,stop@mR
  6794   003EC8  EC92  F019         	call	_stop	;wreg free
  6795   003ECC  0012               	return		;funcret
  6796   003ECE                     __end_of_turnRight135:
  6797                           	callstack 0
  6798                           
  6799 ;; *************** function _turnRight *****************
  6800 ;; Defined at:
  6801 ;;		line 125 in file "dc_motor.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6804 ;;		 -> main@motorL(9), 
  6805 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6806 ;;		 -> main@motorR(9), 
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  rightGear       1   22[COMRAM] unsigned char 
  6809 ;;  leftGear        1   21[COMRAM] unsigned char 
  6810 ;; Return value:  Size  Location     Type
  6811 ;;                  1    wreg      void 
  6812 ;; Registers used:
  6813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6819 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6820 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6821 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6822 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6823 ;;Total ram usage:        5 bytes
  6824 ;; Hardware stack levels used: 1
  6825 ;; Hardware stack levels required when called: 3
  6826 ;; This function calls:
  6827 ;;		_setMotorPWM
  6828 ;; This function is called by:
  6829 ;;		_turnRight90
  6830 ;;		_turnRight135
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text42
  6835   002F1A                     __ptext42:
  6836                           	callstack 0
  6837   002F1A                     _turnRight:
  6838                           	callstack 23
  6839   002F1A  0E28               	movlw	40
  6840   002F1C  6E16               	movwf	turnRight@leftGear^0,c
  6841   002F1E  0E28               	movlw	40
  6842   002F20  6E17               	movwf	turnRight@rightGear^0,c
  6843   002F22                     
  6844                           ;dc_motor.c: 129:     (mL->direction) = 1;
  6845   002F22  5013               	movf	turnRight@mL^0,w,c
  6846   002F24  6ED9               	movwf	fsr2l,c
  6847   002F26  6ADA               	clrf	fsr2h,c
  6848   002F28  0E01               	movlw	1
  6849   002F2A  26D9               	addwf	fsr2l,f,c
  6850   002F2C  0E01               	movlw	1
  6851   002F2E  6EDF               	movwf	indf2,c
  6852   002F30                     
  6853                           ;dc_motor.c: 130:     (mR->direction) = 0;
  6854   002F30  5014               	movf	turnRight@mR^0,w,c
  6855   002F32  6ED9               	movwf	fsr2l,c
  6856   002F34  6ADA               	clrf	fsr2h,c
  6857   002F36  0E01               	movlw	1
  6858   002F38  26D9               	addwf	fsr2l,f,c
  6859   002F3A  6ADF               	clrf	indf2,c
  6860                           
  6861                           ;dc_motor.c: 131:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  6862   002F3C  EFD0  F017         	goto	l3401
  6863   002F40                     l3389:
  6864                           
  6865                           ;dc_motor.c: 132:         if (mL->power<leftGear) {mL->power++;}
  6866   002F40  5013               	movf	turnRight@mL^0,w,c
  6867   002F42  6ED9               	movwf	fsr2l,c
  6868   002F44  6ADA               	clrf	fsr2h,c
  6869   002F46  5016               	movf	turnRight@leftGear^0,w,c
  6870   002F48  5CDE               	subwf	postinc2,w,c
  6871   002F4A  B0D8               	btfsc	status,0,c
  6872   002F4C  EFAA  F017         	goto	u2381
  6873   002F50  EFAC  F017         	goto	u2380
  6874   002F54                     u2381:
  6875   002F54  EFB0  F017         	goto	l244
  6876   002F58                     u2380:
  6877   002F58  5013               	movf	turnRight@mL^0,w,c
  6878   002F5A  6ED9               	movwf	fsr2l,c
  6879   002F5C  6ADA               	clrf	fsr2h,c
  6880   002F5E  2ADF               	incf	indf2,f,c
  6881   002F60                     l244:
  6882                           
  6883                           ;dc_motor.c: 133:         if (mR->power<rightGear) {mR->power++;}
  6884   002F60  5014               	movf	turnRight@mR^0,w,c
  6885   002F62  6ED9               	movwf	fsr2l,c
  6886   002F64  6ADA               	clrf	fsr2h,c
  6887   002F66  5017               	movf	turnRight@rightGear^0,w,c
  6888   002F68  5CDE               	subwf	postinc2,w,c
  6889   002F6A  B0D8               	btfsc	status,0,c
  6890   002F6C  EFBA  F017         	goto	u2391
  6891   002F70  EFBC  F017         	goto	u2390
  6892   002F74                     u2391:
  6893   002F74  EFC0  F017         	goto	l3395
  6894   002F78                     u2390:
  6895   002F78  5014               	movf	turnRight@mR^0,w,c
  6896   002F7A  6ED9               	movwf	fsr2l,c
  6897   002F7C  6ADA               	clrf	fsr2h,c
  6898   002F7E  2ADF               	incf	indf2,f,c
  6899   002F80                     l3395:
  6900                           
  6901                           ;dc_motor.c: 134:         setMotorPWM(mL);
  6902   002F80  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  6903   002F84  EC98  F013         	call	_setMotorPWM	;wreg free
  6904   002F88                     
  6905                           ;dc_motor.c: 135:         setMotorPWM(mR);
  6906   002F88  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  6907   002F8C  EC98  F013         	call	_setMotorPWM	;wreg free
  6908   002F90                     
  6909                           ;dc_motor.c: 136:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  6910   002F90  0EA7               	movlw	167
  6911   002F92  6E15               	movwf	??_turnRight^0,c
  6912   002F94  0E3A               	movlw	58
  6913   002F96                     u4157:
  6914   002F96  2EE8               	decfsz	wreg,f,c
  6915   002F98  D7FE               	bra	u4157
  6916   002F9A  2E15               	decfsz	??_turnRight^0,f,c
  6917   002F9C  D7FC               	bra	u4157
  6918   002F9E  D000               	nop2	
  6919   002FA0                     l3401:
  6920                           
  6921                           ;dc_motor.c: 131:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  6922   002FA0  5013               	movf	turnRight@mL^0,w,c
  6923   002FA2  6ED9               	movwf	fsr2l,c
  6924   002FA4  6ADA               	clrf	fsr2h,c
  6925   002FA6  5016               	movf	turnRight@leftGear^0,w,c
  6926   002FA8  5CDE               	subwf	postinc2,w,c
  6927   002FAA  A0D8               	btfss	status,0,c
  6928   002FAC  EFDA  F017         	goto	u2401
  6929   002FB0  EFDC  F017         	goto	u2400
  6930   002FB4                     u2401:
  6931   002FB4  EFA0  F017         	goto	l3389
  6932   002FB8                     u2400:
  6933   002FB8  5014               	movf	turnRight@mR^0,w,c
  6934   002FBA  6ED9               	movwf	fsr2l,c
  6935   002FBC  6ADA               	clrf	fsr2h,c
  6936   002FBE  5017               	movf	turnRight@rightGear^0,w,c
  6937   002FC0  5CDE               	subwf	postinc2,w,c
  6938   002FC2  A0D8               	btfss	status,0,c
  6939   002FC4  EFE6  F017         	goto	u2411
  6940   002FC8  EFE8  F017         	goto	u2410
  6941   002FCC                     u2411:
  6942   002FCC  EFA0  F017         	goto	l3389
  6943   002FD0                     u2410:
  6944   002FD0  0012               	return		;funcret
  6945   002FD2                     __end_of_turnRight:
  6946                           	callstack 0
  6947                           
  6948 ;; *************** function _turnLeft135 *****************
  6949 ;; Defined at:
  6950 ;;		line 199 in file "dc_motor.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6953 ;;		 -> main@motorL(9), 
  6954 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6955 ;;		 -> main@motorR(9), 
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;		None
  6958 ;; Return value:  Size  Location     Type
  6959 ;;                  1    wreg      void 
  6960 ;; Registers used:
  6961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6962 ;; Tracked objects:
  6963 ;;		On entry : 0/0
  6964 ;;		On exit  : 0/0
  6965 ;;		Unchanged: 0/0
  6966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6969 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6970 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6971 ;;Total ram usage:        4 bytes
  6972 ;; Hardware stack levels used: 1
  6973 ;; Hardware stack levels required when called: 4
  6974 ;; This function calls:
  6975 ;;		_stop
  6976 ;;		_turnLeft
  6977 ;; This function is called by:
  6978 ;;		_card_orange
  6979 ;;		_card_cyan
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           	psect	text43
  6984   003ECE                     __ptext43:
  6985                           	callstack 0
  6986   003ECE                     _turnLeft135:
  6987                           	callstack 23
  6988   003ECE                     
  6989                           ;dc_motor.c: 199: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 200: {;dc_mot
      +                          or.c: 201:     turnLeft(mL, mR);
  6990   003ECE  C018  F013         	movff	turnLeft135@mL,turnLeft@mL
  6991   003ED2  C019  F014         	movff	turnLeft135@mR,turnLeft@mR
  6992   003ED6  ECE9  F017         	call	_turnLeft	;wreg free
  6993   003EDA                     
  6994                           ;dc_motor.c: 202:     _delay((unsigned long)((turnLeft135Delay)*(64000000/4000.0)));
  6995   003EDA  0E15               	movlw	21
  6996   003EDC  6E1B               	movwf	(??_turnLeft135+1)^0,c
  6997   003EDE  0E4B               	movlw	75
  6998   003EE0  6E1A               	movwf	??_turnLeft135^0,c
  6999   003EE2  0EBE               	movlw	190
  7000   003EE4                     u4167:
  7001   003EE4  2EE8               	decfsz	wreg,f,c
  7002   003EE6  D7FE               	bra	u4167
  7003   003EE8  2E1A               	decfsz	??_turnLeft135^0,f,c
  7004   003EEA  D7FC               	bra	u4167
  7005   003EEC  2E1B               	decfsz	(??_turnLeft135+1)^0,f,c
  7006   003EEE  D7FA               	bra	u4167
  7007   003EF0  D000               	nop2	
  7008   003EF2                     
  7009                           ;dc_motor.c: 203:     stop(mL, mR);
  7010   003EF2  C018  F013         	movff	turnLeft135@mL,stop@mL
  7011   003EF6  C019  F014         	movff	turnLeft135@mR,stop@mR
  7012   003EFA  EC92  F019         	call	_stop	;wreg free
  7013   003EFE  0012               	return		;funcret
  7014   003F00                     __end_of_turnLeft135:
  7015                           	callstack 0
  7016                           
  7017 ;; *************** function _card_blue *****************
  7018 ;; Defined at:
  7019 ;;		line 41 in file "manoeuvres.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  7022 ;;		 -> main@motorL(9), 
  7023 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  7024 ;;		 -> main@motorR(9), 
  7025 ;;  backtrack       1   29[COMRAM] unsigned char 
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;		None
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  1    wreg      void 
  7030 ;; Registers used:
  7031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7037 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7039 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7040 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7041 ;;Total ram usage:        5 bytes
  7042 ;; Hardware stack levels used: 1
  7043 ;; Hardware stack levels required when called: 5
  7044 ;; This function calls:
  7045 ;;		_UTurn
  7046 ;;		_headbuttReverse
  7047 ;; This function is called by:
  7048 ;;		_pick_card
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text44
  7053   00389E                     __ptext44:
  7054                           	callstack 0
  7055   00389E                     _card_blue:
  7056                           	callstack 23
  7057   00389E                     
  7058                           ;manoeuvres.c: 41: void card_blue(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 42: {;manoeuvres.c: 43:     switch (backtrack) {
  7059   00389E  EF6D  F01C         	goto	l3683
  7060   0038A2                     l3677:
  7061                           
  7062                           ;manoeuvres.c: 45:             headbuttReverse(mL, mR);
  7063   0038A2  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  7064   0038A6  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  7065   0038AA  ECC9  F01F         	call	_headbuttReverse	;wreg free
  7066                           
  7067                           ;manoeuvres.c: 46:             UTurn(mL, mR);
  7068   0038AE  C01C  F018         	movff	card_blue@mL,UTurn@mL
  7069   0038B2  C01D  F019         	movff	card_blue@mR,UTurn@mR
  7070   0038B6  EC80  F01F         	call	_UTurn	;wreg free
  7071                           
  7072                           ;manoeuvres.c: 47:             break;
  7073   0038BA  EF82  F01C         	goto	l548
  7074   0038BE                     l3679:
  7075                           
  7076                           ;manoeuvres.c: 49:             UTurn(mL, mR);
  7077   0038BE  C01C  F018         	movff	card_blue@mL,UTurn@mL
  7078   0038C2  C01D  F019         	movff	card_blue@mR,UTurn@mR
  7079   0038C6  EC80  F01F         	call	_UTurn	;wreg free
  7080                           
  7081                           ;manoeuvres.c: 50:             headbuttReverse(mL, mR);
  7082   0038CA  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  7083   0038CE  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  7084   0038D2  ECC9  F01F         	call	_headbuttReverse	;wreg free
  7085                           
  7086                           ;manoeuvres.c: 51:             break;
  7087   0038D6  EF82  F01C         	goto	l548
  7088   0038DA                     l3683:
  7089   0038DA  501E               	movf	card_blue@backtrack^0,w,c
  7090   0038DC  6E1F               	movwf	??_card_blue^0,c
  7091   0038DE  6A20               	clrf	(??_card_blue+1)^0,c
  7092                           
  7093                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7094                           ; Switch size 1, requested type "simple"
  7095                           ; Number of cases is 1, Range of values is 0 to 0
  7096                           ; switch strategies available:
  7097                           ; Name         Instructions Cycles
  7098                           ; simple_byte            4     3 (average)
  7099                           ;	Chosen strategy is simple_byte
  7100   0038E0  5020               	movf	(??_card_blue+1)^0,w,c
  7101   0038E2  0A00               	xorlw	0	; case 0
  7102   0038E4  B4D8               	btfsc	status,2,c
  7103   0038E6  EF77  F01C         	goto	l5121
  7104   0038EA  EF82  F01C         	goto	l548
  7105   0038EE                     l5121:
  7106                           
  7107                           ; Switch size 1, requested type "simple"
  7108                           ; Number of cases is 2, Range of values is 0 to 1
  7109                           ; switch strategies available:
  7110                           ; Name         Instructions Cycles
  7111                           ; simple_byte            7     4 (average)
  7112                           ;	Chosen strategy is simple_byte
  7113   0038EE  501F               	movf	??_card_blue^0,w,c
  7114   0038F0  0A00               	xorlw	0	; case 0
  7115   0038F2  B4D8               	btfsc	status,2,c
  7116   0038F4  EF51  F01C         	goto	l3677
  7117   0038F8  0A01               	xorlw	1	; case 1
  7118   0038FA  B4D8               	btfsc	status,2,c
  7119   0038FC  EF5F  F01C         	goto	l3679
  7120   003900  EF82  F01C         	goto	l548
  7121   003904                     l548:
  7122   003904  0012               	return		;funcret
  7123   003906                     __end_of_card_blue:
  7124                           	callstack 0
  7125                           
  7126 ;; *************** function _headbuttReverse *****************
  7127 ;; Defined at:
  7128 ;;		line 229 in file "dc_motor.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7131 ;;		 -> main@motorL(9), 
  7132 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7133 ;;		 -> main@motorR(9), 
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;		None
  7136 ;; Return value:  Size  Location     Type
  7137 ;;                  1    wreg      void 
  7138 ;; Registers used:
  7139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7145 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7147 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7148 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7149 ;;Total ram usage:        4 bytes
  7150 ;; Hardware stack levels used: 1
  7151 ;; Hardware stack levels required when called: 4
  7152 ;; This function calls:
  7153 ;;		_fullSpeedReverse
  7154 ;;		_stop
  7155 ;; This function is called by:
  7156 ;;		_card_red
  7157 ;;		_card_green
  7158 ;;		_card_blue
  7159 ;;		_card_yellow
  7160 ;;		_card_pink
  7161 ;;		_card_orange
  7162 ;;		_card_cyan
  7163 ;;		_card_white
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           	psect	text45
  7168   003F92                     __ptext45:
  7169                           	callstack 0
  7170   003F92                     _headbuttReverse:
  7171                           	callstack 23
  7172   003F92                     
  7173                           ;dc_motor.c: 229: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 230: {;dc
      +                          _motor.c: 231:     fullSpeedReverse(mL, mR);
  7174   003F92  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
  7175   003F96  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
  7176   003F9A  EC45  F018         	call	_fullSpeedReverse	;wreg free
  7177   003F9E                     
  7178                           ;dc_motor.c: 232:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
  7179   003F9E  0E43               	movlw	67
  7180   003FA0  6E1B               	movwf	(??_headbuttReverse+1)^0,c
  7181   003FA2  0E8F               	movlw	143
  7182   003FA4  6E1A               	movwf	??_headbuttReverse^0,c
  7183   003FA6  0EC8               	movlw	200
  7184   003FA8                     u4177:
  7185   003FA8  2EE8               	decfsz	wreg,f,c
  7186   003FAA  D7FE               	bra	u4177
  7187   003FAC  2E1A               	decfsz	??_headbuttReverse^0,f,c
  7188   003FAE  D7FC               	bra	u4177
  7189   003FB0  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
  7190   003FB2  D7FA               	bra	u4177
  7191   003FB4                     
  7192                           ;dc_motor.c: 233:     stop(mL, mR);
  7193   003FB4  C018  F013         	movff	headbuttReverse@mL,stop@mL
  7194   003FB8  C019  F014         	movff	headbuttReverse@mR,stop@mR
  7195   003FBC  EC92  F019         	call	_stop	;wreg free
  7196   003FC0  0012               	return		;funcret
  7197   003FC2                     __end_of_headbuttReverse:
  7198                           	callstack 0
  7199                           
  7200 ;; *************** function _fullSpeedReverse *****************
  7201 ;; Defined at:
  7202 ;;		line 161 in file "dc_motor.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7205 ;;		 -> main@motorL(9), 
  7206 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7207 ;;		 -> main@motorR(9), 
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  rightGear       1   22[COMRAM] unsigned char 
  7210 ;;  leftGear        1   21[COMRAM] unsigned char 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      void 
  7213 ;; Registers used:
  7214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7220 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7222 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7223 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7224 ;;Total ram usage:        5 bytes
  7225 ;; Hardware stack levels used: 1
  7226 ;; Hardware stack levels required when called: 3
  7227 ;; This function calls:
  7228 ;;		_setMotorPWM
  7229 ;; This function is called by:
  7230 ;;		_headbuttReverse
  7231 ;;		_squareReverse
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text46
  7236   00308A                     __ptext46:
  7237                           	callstack 0
  7238   00308A                     _fullSpeedReverse:
  7239                           	callstack 23
  7240   00308A  0E14               	movlw	20
  7241   00308C  6E16               	movwf	fullSpeedReverse@leftGear^0,c
  7242   00308E  0E15               	movlw	21
  7243   003090  6E17               	movwf	fullSpeedReverse@rightGear^0,c
  7244   003092                     
  7245                           ;dc_motor.c: 165:     (mL->direction) = 0;
  7246   003092  5013               	movf	fullSpeedReverse@mL^0,w,c
  7247   003094  6ED9               	movwf	fsr2l,c
  7248   003096  6ADA               	clrf	fsr2h,c
  7249   003098  0E01               	movlw	1
  7250   00309A  26D9               	addwf	fsr2l,f,c
  7251   00309C  6ADF               	clrf	indf2,c
  7252   00309E                     
  7253                           ;dc_motor.c: 166:     (mR->direction) = 0;
  7254   00309E  5014               	movf	fullSpeedReverse@mR^0,w,c
  7255   0030A0  6ED9               	movwf	fsr2l,c
  7256   0030A2  6ADA               	clrf	fsr2h,c
  7257   0030A4  0E01               	movlw	1
  7258   0030A6  26D9               	addwf	fsr2l,f,c
  7259   0030A8  6ADF               	clrf	indf2,c
  7260                           
  7261                           ;dc_motor.c: 167:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7262   0030AA  EF87  F018         	goto	l3423
  7263   0030AE                     l3411:
  7264                           
  7265                           ;dc_motor.c: 168:         if (mL->power<leftGear) {mL->power++;}
  7266   0030AE  5013               	movf	fullSpeedReverse@mL^0,w,c
  7267   0030B0  6ED9               	movwf	fsr2l,c
  7268   0030B2  6ADA               	clrf	fsr2h,c
  7269   0030B4  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  7270   0030B6  5CDE               	subwf	postinc2,w,c
  7271   0030B8  B0D8               	btfsc	status,0,c
  7272   0030BA  EF61  F018         	goto	u2421
  7273   0030BE  EF63  F018         	goto	u2420
  7274   0030C2                     u2421:
  7275   0030C2  EF67  F018         	goto	l260
  7276   0030C6                     u2420:
  7277   0030C6  5013               	movf	fullSpeedReverse@mL^0,w,c
  7278   0030C8  6ED9               	movwf	fsr2l,c
  7279   0030CA  6ADA               	clrf	fsr2h,c
  7280   0030CC  2ADF               	incf	indf2,f,c
  7281   0030CE                     l260:
  7282                           
  7283                           ;dc_motor.c: 169:         if (mR->power<rightGear) {mR->power++;}
  7284   0030CE  5014               	movf	fullSpeedReverse@mR^0,w,c
  7285   0030D0  6ED9               	movwf	fsr2l,c
  7286   0030D2  6ADA               	clrf	fsr2h,c
  7287   0030D4  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  7288   0030D6  5CDE               	subwf	postinc2,w,c
  7289   0030D8  B0D8               	btfsc	status,0,c
  7290   0030DA  EF71  F018         	goto	u2431
  7291   0030DE  EF73  F018         	goto	u2430
  7292   0030E2                     u2431:
  7293   0030E2  EF77  F018         	goto	l3417
  7294   0030E6                     u2430:
  7295   0030E6  5014               	movf	fullSpeedReverse@mR^0,w,c
  7296   0030E8  6ED9               	movwf	fsr2l,c
  7297   0030EA  6ADA               	clrf	fsr2h,c
  7298   0030EC  2ADF               	incf	indf2,f,c
  7299   0030EE                     l3417:
  7300                           
  7301                           ;dc_motor.c: 170:         setMotorPWM(mL);
  7302   0030EE  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  7303   0030F2  EC98  F013         	call	_setMotorPWM	;wreg free
  7304   0030F6                     
  7305                           ;dc_motor.c: 171:         setMotorPWM(mR);
  7306   0030F6  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  7307   0030FA  EC98  F013         	call	_setMotorPWM	;wreg free
  7308   0030FE                     
  7309                           ;dc_motor.c: 172:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7310   0030FE  0EA7               	movlw	167
  7311   003100  6E15               	movwf	??_fullSpeedReverse^0,c
  7312   003102  0E3A               	movlw	58
  7313   003104                     u4187:
  7314   003104  2EE8               	decfsz	wreg,f,c
  7315   003106  D7FE               	bra	u4187
  7316   003108  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  7317   00310A  D7FC               	bra	u4187
  7318   00310C  D000               	nop2	
  7319   00310E                     l3423:
  7320                           
  7321                           ;dc_motor.c: 167:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7322   00310E  5013               	movf	fullSpeedReverse@mL^0,w,c
  7323   003110  6ED9               	movwf	fsr2l,c
  7324   003112  6ADA               	clrf	fsr2h,c
  7325   003114  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  7326   003116  5CDE               	subwf	postinc2,w,c
  7327   003118  A0D8               	btfss	status,0,c
  7328   00311A  EF91  F018         	goto	u2441
  7329   00311E  EF93  F018         	goto	u2440
  7330   003122                     u2441:
  7331   003122  EF57  F018         	goto	l3411
  7332   003126                     u2440:
  7333   003126  5014               	movf	fullSpeedReverse@mR^0,w,c
  7334   003128  6ED9               	movwf	fsr2l,c
  7335   00312A  6ADA               	clrf	fsr2h,c
  7336   00312C  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  7337   00312E  5CDE               	subwf	postinc2,w,c
  7338   003130  A0D8               	btfss	status,0,c
  7339   003132  EF9D  F018         	goto	u2451
  7340   003136  EF9F  F018         	goto	u2450
  7341   00313A                     u2451:
  7342   00313A  EF57  F018         	goto	l3411
  7343   00313E                     u2450:
  7344   00313E  0012               	return		;funcret
  7345   003140                     __end_of_fullSpeedReverse:
  7346                           	callstack 0
  7347                           
  7348 ;; *************** function _UTurn *****************
  7349 ;; Defined at:
  7350 ;;		line 219 in file "dc_motor.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7353 ;;		 -> main@motorL(9), 
  7354 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7355 ;;		 -> main@motorR(9), 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;		None
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  1    wreg      void 
  7360 ;; Registers used:
  7361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7367 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7369 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7370 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7371 ;;Total ram usage:        4 bytes
  7372 ;; Hardware stack levels used: 1
  7373 ;; Hardware stack levels required when called: 4
  7374 ;; This function calls:
  7375 ;;		_stop
  7376 ;;		_turnLeft
  7377 ;; This function is called by:
  7378 ;;		_card_blue
  7379 ;;		_card_white
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text47
  7384   003F00                     __ptext47:
  7385                           	callstack 0
  7386   003F00                     _UTurn:
  7387                           	callstack 23
  7388   003F00                     
  7389                           ;dc_motor.c: 219: void UTurn(DC_motor *mL, DC_motor *mR);dc_motor.c: 220: {;dc_motor.c: 
      +                          221:     turnLeft(mL, mR);
  7390   003F00  C018  F013         	movff	UTurn@mL,turnLeft@mL
  7391   003F04  C019  F014         	movff	UTurn@mR,turnLeft@mR
  7392   003F08  ECE9  F017         	call	_turnLeft	;wreg free
  7393   003F0C                     
  7394                           ;dc_motor.c: 222:     _delay((unsigned long)((turn180Delay)*(64000000/4000.0)));
  7395   003F0C  0E21               	movlw	33
  7396   003F0E  6E1B               	movwf	(??_UTurn+1)^0,c
  7397   003F10  0E78               	movlw	120
  7398   003F12  6E1A               	movwf	??_UTurn^0,c
  7399   003F14  0E98               	movlw	152
  7400   003F16                     u4197:
  7401   003F16  2EE8               	decfsz	wreg,f,c
  7402   003F18  D7FE               	bra	u4197
  7403   003F1A  2E1A               	decfsz	??_UTurn^0,f,c
  7404   003F1C  D7FC               	bra	u4197
  7405   003F1E  2E1B               	decfsz	(??_UTurn+1)^0,f,c
  7406   003F20  D7FA               	bra	u4197
  7407   003F22  D000               	nop2	
  7408   003F24                     
  7409                           ;dc_motor.c: 223:     stop(mL, mR);
  7410   003F24  C018  F013         	movff	UTurn@mL,stop@mL
  7411   003F28  C019  F014         	movff	UTurn@mR,stop@mR
  7412   003F2C  EC92  F019         	call	_stop	;wreg free
  7413   003F30  0012               	return		;funcret
  7414   003F32                     __end_of_UTurn:
  7415                           	callstack 0
  7416                           
  7417 ;; *************** function _turnLeft *****************
  7418 ;; Defined at:
  7419 ;;		line 107 in file "dc_motor.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7422 ;;		 -> main@motorL(9), 
  7423 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7424 ;;		 -> main@motorR(9), 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  rightGear       1   22[COMRAM] unsigned char 
  7427 ;;  leftGear        1   21[COMRAM] unsigned char 
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      void 
  7430 ;; Registers used:
  7431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7440 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7441 ;;Total ram usage:        5 bytes
  7442 ;; Hardware stack levels used: 1
  7443 ;; Hardware stack levels required when called: 3
  7444 ;; This function calls:
  7445 ;;		_setMotorPWM
  7446 ;; This function is called by:
  7447 ;;		_turnLeft90
  7448 ;;		_turnLeft135
  7449 ;;		_UTurn
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           	psect	text48
  7454   002FD2                     __ptext48:
  7455                           	callstack 0
  7456   002FD2                     _turnLeft:
  7457                           	callstack 23
  7458   002FD2  0E28               	movlw	40
  7459   002FD4  6E16               	movwf	turnLeft@leftGear^0,c
  7460   002FD6  0E28               	movlw	40
  7461   002FD8  6E17               	movwf	turnLeft@rightGear^0,c
  7462   002FDA                     
  7463                           ;dc_motor.c: 111:     (mL->direction) = 0;
  7464   002FDA  5013               	movf	turnLeft@mL^0,w,c
  7465   002FDC  6ED9               	movwf	fsr2l,c
  7466   002FDE  6ADA               	clrf	fsr2h,c
  7467   002FE0  0E01               	movlw	1
  7468   002FE2  26D9               	addwf	fsr2l,f,c
  7469   002FE4  6ADF               	clrf	indf2,c
  7470   002FE6                     
  7471                           ;dc_motor.c: 112:     (mR->direction) = 1;
  7472   002FE6  5014               	movf	turnLeft@mR^0,w,c
  7473   002FE8  6ED9               	movwf	fsr2l,c
  7474   002FEA  6ADA               	clrf	fsr2h,c
  7475   002FEC  0E01               	movlw	1
  7476   002FEE  26D9               	addwf	fsr2l,f,c
  7477   002FF0  0E01               	movlw	1
  7478   002FF2  6EDF               	movwf	indf2,c
  7479                           
  7480                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7481   002FF4  EF2C  F018         	goto	l3379
  7482   002FF8                     l3367:
  7483                           
  7484                           ;dc_motor.c: 114:         if (mL->power<leftGear) {mL->power++;}
  7485   002FF8  5013               	movf	turnLeft@mL^0,w,c
  7486   002FFA  6ED9               	movwf	fsr2l,c
  7487   002FFC  6ADA               	clrf	fsr2h,c
  7488   002FFE  5016               	movf	turnLeft@leftGear^0,w,c
  7489   003000  5CDE               	subwf	postinc2,w,c
  7490   003002  B0D8               	btfsc	status,0,c
  7491   003004  EF06  F018         	goto	u2341
  7492   003008  EF08  F018         	goto	u2340
  7493   00300C                     u2341:
  7494   00300C  EF0C  F018         	goto	l236
  7495   003010                     u2340:
  7496   003010  5013               	movf	turnLeft@mL^0,w,c
  7497   003012  6ED9               	movwf	fsr2l,c
  7498   003014  6ADA               	clrf	fsr2h,c
  7499   003016  2ADF               	incf	indf2,f,c
  7500   003018                     l236:
  7501                           
  7502                           ;dc_motor.c: 115:         if (mR->power<rightGear) {mR->power++;}
  7503   003018  5014               	movf	turnLeft@mR^0,w,c
  7504   00301A  6ED9               	movwf	fsr2l,c
  7505   00301C  6ADA               	clrf	fsr2h,c
  7506   00301E  5017               	movf	turnLeft@rightGear^0,w,c
  7507   003020  5CDE               	subwf	postinc2,w,c
  7508   003022  B0D8               	btfsc	status,0,c
  7509   003024  EF16  F018         	goto	u2351
  7510   003028  EF18  F018         	goto	u2350
  7511   00302C                     u2351:
  7512   00302C  EF1C  F018         	goto	l3373
  7513   003030                     u2350:
  7514   003030  5014               	movf	turnLeft@mR^0,w,c
  7515   003032  6ED9               	movwf	fsr2l,c
  7516   003034  6ADA               	clrf	fsr2h,c
  7517   003036  2ADF               	incf	indf2,f,c
  7518   003038                     l3373:
  7519                           
  7520                           ;dc_motor.c: 116:         setMotorPWM(mL);
  7521   003038  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  7522   00303C  EC98  F013         	call	_setMotorPWM	;wreg free
  7523   003040                     
  7524                           ;dc_motor.c: 117:         setMotorPWM(mR);
  7525   003040  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  7526   003044  EC98  F013         	call	_setMotorPWM	;wreg free
  7527   003048                     
  7528                           ;dc_motor.c: 118:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7529   003048  0EA7               	movlw	167
  7530   00304A  6E15               	movwf	??_turnLeft^0,c
  7531   00304C  0E3A               	movlw	58
  7532   00304E                     u4207:
  7533   00304E  2EE8               	decfsz	wreg,f,c
  7534   003050  D7FE               	bra	u4207
  7535   003052  2E15               	decfsz	??_turnLeft^0,f,c
  7536   003054  D7FC               	bra	u4207
  7537   003056  D000               	nop2	
  7538   003058                     l3379:
  7539                           
  7540                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7541   003058  5013               	movf	turnLeft@mL^0,w,c
  7542   00305A  6ED9               	movwf	fsr2l,c
  7543   00305C  6ADA               	clrf	fsr2h,c
  7544   00305E  5016               	movf	turnLeft@leftGear^0,w,c
  7545   003060  5CDE               	subwf	postinc2,w,c
  7546   003062  A0D8               	btfss	status,0,c
  7547   003064  EF36  F018         	goto	u2361
  7548   003068  EF38  F018         	goto	u2360
  7549   00306C                     u2361:
  7550   00306C  EFFC  F017         	goto	l3367
  7551   003070                     u2360:
  7552   003070  5014               	movf	turnLeft@mR^0,w,c
  7553   003072  6ED9               	movwf	fsr2l,c
  7554   003074  6ADA               	clrf	fsr2h,c
  7555   003076  5017               	movf	turnLeft@rightGear^0,w,c
  7556   003078  5CDE               	subwf	postinc2,w,c
  7557   00307A  A0D8               	btfss	status,0,c
  7558   00307C  EF42  F018         	goto	u2371
  7559   003080  EF44  F018         	goto	u2370
  7560   003084                     u2371:
  7561   003084  EFFC  F017         	goto	l3367
  7562   003088                     u2370:
  7563   003088  0012               	return		;funcret
  7564   00308A                     __end_of_turnLeft:
  7565                           	callstack 0
  7566                           
  7567 ;; *************** function _stop *****************
  7568 ;; Defined at:
  7569 ;;		line 93 in file "dc_motor.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7572 ;;		 -> main@motorL(9), 
  7573 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7574 ;;		 -> main@motorR(9), 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7586 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7589 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7590 ;;Total ram usage:        3 bytes
  7591 ;; Hardware stack levels used: 1
  7592 ;; Hardware stack levels required when called: 3
  7593 ;; This function calls:
  7594 ;;		_setMotorPWM
  7595 ;; This function is called by:
  7596 ;;		_turnLeft90
  7597 ;;		_turnRight90
  7598 ;;		_turnLeft135
  7599 ;;		_turnRight135
  7600 ;;		_UTurn
  7601 ;;		_headbuttReverse
  7602 ;;		_squareReverse
  7603 ;;		_forward_navigation
  7604 ;;		_return_to_sender
  7605 ;; This function uses a non-reentrant model
  7606 ;;
  7607                           
  7608                           	psect	text49
  7609   003324                     __ptext49:
  7610                           	callstack 0
  7611   003324                     _stop:
  7612                           	callstack 26
  7613   003324                     
  7614                           ;dc_motor.c: 93: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 94: {;dc_motor.c: 95:
      +                               while ((mL->power>0) || (mR->power>0)){
  7615   003324  EFC2  F019         	goto	l3357
  7616   003328                     l3343:
  7617                           
  7618                           ;dc_motor.c: 96:         if (mL->power>0) {mL->power--;}
  7619   003328  5013               	movf	stop@mL^0,w,c
  7620   00332A  6ED9               	movwf	fsr2l,c
  7621   00332C  6ADA               	clrf	fsr2h,c
  7622   00332E  50DF               	movf	indf2,w,c
  7623   003330  B4D8               	btfsc	status,2,c
  7624   003332  EF9D  F019         	goto	u2301
  7625   003336  EF9F  F019         	goto	u2300
  7626   00333A                     u2301:
  7627   00333A  EFA3  F019         	goto	l3347
  7628   00333E                     u2300:
  7629   00333E  5013               	movf	stop@mL^0,w,c
  7630   003340  6ED9               	movwf	fsr2l,c
  7631   003342  6ADA               	clrf	fsr2h,c
  7632   003344  06DF               	decf	indf2,f,c
  7633   003346                     l3347:
  7634                           
  7635                           ;dc_motor.c: 97:         if (mR->power>0) {mR->power--;}
  7636   003346  5014               	movf	stop@mR^0,w,c
  7637   003348  6ED9               	movwf	fsr2l,c
  7638   00334A  6ADA               	clrf	fsr2h,c
  7639   00334C  50DF               	movf	indf2,w,c
  7640   00334E  B4D8               	btfsc	status,2,c
  7641   003350  EFAC  F019         	goto	u2311
  7642   003354  EFAE  F019         	goto	u2310
  7643   003358                     u2311:
  7644   003358  EFB2  F019         	goto	l3351
  7645   00335C                     u2310:
  7646   00335C  5014               	movf	stop@mR^0,w,c
  7647   00335E  6ED9               	movwf	fsr2l,c
  7648   003360  6ADA               	clrf	fsr2h,c
  7649   003362  06DF               	decf	indf2,f,c
  7650   003364                     l3351:
  7651                           
  7652                           ;dc_motor.c: 98:         setMotorPWM(mL);
  7653   003364  C013  F00E         	movff	stop@mL,setMotorPWM@m
  7654   003368  EC98  F013         	call	_setMotorPWM	;wreg free
  7655   00336C                     
  7656                           ;dc_motor.c: 99:         setMotorPWM(mR);
  7657   00336C  C014  F00E         	movff	stop@mR,setMotorPWM@m
  7658   003370  EC98  F013         	call	_setMotorPWM	;wreg free
  7659   003374                     
  7660                           ;dc_motor.c: 100:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7661   003374  0EA7               	movlw	167
  7662   003376  6E15               	movwf	??_stop^0,c
  7663   003378  0E3A               	movlw	58
  7664   00337A                     u4217:
  7665   00337A  2EE8               	decfsz	wreg,f,c
  7666   00337C  D7FE               	bra	u4217
  7667   00337E  2E15               	decfsz	??_stop^0,f,c
  7668   003380  D7FC               	bra	u4217
  7669   003382  D000               	nop2	
  7670   003384                     l3357:
  7671                           
  7672                           ;dc_motor.c: 95:     while ((mL->power>0) || (mR->power>0)){
  7673   003384  5013               	movf	stop@mL^0,w,c
  7674   003386  6ED9               	movwf	fsr2l,c
  7675   003388  6ADA               	clrf	fsr2h,c
  7676   00338A  50DF               	movf	indf2,w,c
  7677   00338C  A4D8               	btfss	status,2,c
  7678   00338E  EFCB  F019         	goto	u2321
  7679   003392  EFCD  F019         	goto	u2320
  7680   003396                     u2321:
  7681   003396  EF94  F019         	goto	l3343
  7682   00339A                     u2320:
  7683   00339A  5014               	movf	stop@mR^0,w,c
  7684   00339C  6ED9               	movwf	fsr2l,c
  7685   00339E  6ADA               	clrf	fsr2h,c
  7686   0033A0  50DF               	movf	indf2,w,c
  7687   0033A2  A4D8               	btfss	status,2,c
  7688   0033A4  EFD6  F019         	goto	u2331
  7689   0033A8  EFD8  F019         	goto	u2330
  7690   0033AC                     u2331:
  7691   0033AC  EF94  F019         	goto	l3343
  7692   0033B0                     u2330:
  7693   0033B0  0012               	return		;funcret
  7694   0033B2                     __end_of_stop:
  7695                           	callstack 0
  7696                           
  7697 ;; *************** function _fullSpeedAhead *****************
  7698 ;; Defined at:
  7699 ;;		line 143 in file "dc_motor.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7702 ;;		 -> main@motorL(9), 
  7703 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7704 ;;		 -> main@motorR(9), 
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;  rightGear       1   22[COMRAM] unsigned char 
  7707 ;;  leftGear        1   21[COMRAM] unsigned char 
  7708 ;; Return value:  Size  Location     Type
  7709 ;;                  1    wreg      void 
  7710 ;; Registers used:
  7711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7712 ;; Tracked objects:
  7713 ;;		On entry : 0/0
  7714 ;;		On exit  : 0/0
  7715 ;;		Unchanged: 0/0
  7716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7717 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7718 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7719 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7720 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7721 ;;Total ram usage:        5 bytes
  7722 ;; Hardware stack levels used: 1
  7723 ;; Hardware stack levels required when called: 3
  7724 ;; This function calls:
  7725 ;;		_setMotorPWM
  7726 ;; This function is called by:
  7727 ;;		_forward_navigation
  7728 ;;		_return_to_sender
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           	psect	text50
  7733   002E60                     __ptext50:
  7734                           	callstack 0
  7735   002E60                     _fullSpeedAhead:
  7736                           	callstack 26
  7737   002E60  0E14               	movlw	20
  7738   002E62  6E16               	movwf	fullSpeedAhead@leftGear^0,c
  7739   002E64  0E14               	movlw	20
  7740   002E66  6E17               	movwf	fullSpeedAhead@rightGear^0,c
  7741   002E68                     
  7742                           ;dc_motor.c: 147:     (mL->direction) = 1;
  7743   002E68  5013               	movf	fullSpeedAhead@mL^0,w,c
  7744   002E6A  6ED9               	movwf	fsr2l,c
  7745   002E6C  6ADA               	clrf	fsr2h,c
  7746   002E6E  0E01               	movlw	1
  7747   002E70  26D9               	addwf	fsr2l,f,c
  7748   002E72  0E01               	movlw	1
  7749   002E74  6EDF               	movwf	indf2,c
  7750   002E76                     
  7751                           ;dc_motor.c: 148:     (mR->direction) = 1;
  7752   002E76  5014               	movf	fullSpeedAhead@mR^0,w,c
  7753   002E78  6ED9               	movwf	fsr2l,c
  7754   002E7A  6ADA               	clrf	fsr2h,c
  7755   002E7C  0E01               	movlw	1
  7756   002E7E  26D9               	addwf	fsr2l,f,c
  7757   002E80  0E01               	movlw	1
  7758   002E82  6EDF               	movwf	indf2,c
  7759                           
  7760                           ;dc_motor.c: 149:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7761   002E84  EF74  F017         	goto	l4279
  7762   002E88                     l4267:
  7763                           
  7764                           ;dc_motor.c: 150:         if (mL->power<leftGear) {mL->power++;}
  7765   002E88  5013               	movf	fullSpeedAhead@mL^0,w,c
  7766   002E8A  6ED9               	movwf	fsr2l,c
  7767   002E8C  6ADA               	clrf	fsr2h,c
  7768   002E8E  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  7769   002E90  5CDE               	subwf	postinc2,w,c
  7770   002E92  B0D8               	btfsc	status,0,c
  7771   002E94  EF4E  F017         	goto	u3691
  7772   002E98  EF50  F017         	goto	u3690
  7773   002E9C                     u3691:
  7774   002E9C  EF54  F017         	goto	l252
  7775   002EA0                     u3690:
  7776   002EA0  5013               	movf	fullSpeedAhead@mL^0,w,c
  7777   002EA2  6ED9               	movwf	fsr2l,c
  7778   002EA4  6ADA               	clrf	fsr2h,c
  7779   002EA6  2ADF               	incf	indf2,f,c
  7780   002EA8                     l252:
  7781                           
  7782                           ;dc_motor.c: 151:         if (mR->power<rightGear) {mR->power++;}
  7783   002EA8  5014               	movf	fullSpeedAhead@mR^0,w,c
  7784   002EAA  6ED9               	movwf	fsr2l,c
  7785   002EAC  6ADA               	clrf	fsr2h,c
  7786   002EAE  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  7787   002EB0  5CDE               	subwf	postinc2,w,c
  7788   002EB2  B0D8               	btfsc	status,0,c
  7789   002EB4  EF5E  F017         	goto	u3701
  7790   002EB8  EF60  F017         	goto	u3700
  7791   002EBC                     u3701:
  7792   002EBC  EF64  F017         	goto	l4273
  7793   002EC0                     u3700:
  7794   002EC0  5014               	movf	fullSpeedAhead@mR^0,w,c
  7795   002EC2  6ED9               	movwf	fsr2l,c
  7796   002EC4  6ADA               	clrf	fsr2h,c
  7797   002EC6  2ADF               	incf	indf2,f,c
  7798   002EC8                     l4273:
  7799                           
  7800                           ;dc_motor.c: 152:         setMotorPWM(mL);
  7801   002EC8  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  7802   002ECC  EC98  F013         	call	_setMotorPWM	;wreg free
  7803   002ED0                     
  7804                           ;dc_motor.c: 153:         setMotorPWM(mR);
  7805   002ED0  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  7806   002ED4  EC98  F013         	call	_setMotorPWM	;wreg free
  7807   002ED8                     
  7808                           ;dc_motor.c: 154:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7809   002ED8  0EA7               	movlw	167
  7810   002EDA  6E15               	movwf	??_fullSpeedAhead^0,c
  7811   002EDC  0E3A               	movlw	58
  7812   002EDE                     u4227:
  7813   002EDE  2EE8               	decfsz	wreg,f,c
  7814   002EE0  D7FE               	bra	u4227
  7815   002EE2  2E15               	decfsz	??_fullSpeedAhead^0,f,c
  7816   002EE4  D7FC               	bra	u4227
  7817   002EE6  D000               	nop2	
  7818   002EE8                     l4279:
  7819                           
  7820                           ;dc_motor.c: 149:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7821   002EE8  5013               	movf	fullSpeedAhead@mL^0,w,c
  7822   002EEA  6ED9               	movwf	fsr2l,c
  7823   002EEC  6ADA               	clrf	fsr2h,c
  7824   002EEE  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  7825   002EF0  5CDE               	subwf	postinc2,w,c
  7826   002EF2  A0D8               	btfss	status,0,c
  7827   002EF4  EF7E  F017         	goto	u3711
  7828   002EF8  EF80  F017         	goto	u3710
  7829   002EFC                     u3711:
  7830   002EFC  EF44  F017         	goto	l4267
  7831   002F00                     u3710:
  7832   002F00  5014               	movf	fullSpeedAhead@mR^0,w,c
  7833   002F02  6ED9               	movwf	fsr2l,c
  7834   002F04  6ADA               	clrf	fsr2h,c
  7835   002F06  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  7836   002F08  5CDE               	subwf	postinc2,w,c
  7837   002F0A  A0D8               	btfss	status,0,c
  7838   002F0C  EF8A  F017         	goto	u3721
  7839   002F10  EF8C  F017         	goto	u3720
  7840   002F14                     u3721:
  7841   002F14  EF44  F017         	goto	l4267
  7842   002F18                     u3720:
  7843   002F18  0012               	return		;funcret
  7844   002F1A                     __end_of_fullSpeedAhead:
  7845                           	callstack 0
  7846                           
  7847 ;; *************** function _setMotorPWM *****************
  7848 ;; Defined at:
  7849 ;;		line 68 in file "dc_motor.c"
  7850 ;; Parameters:    Size  Location     Type
  7851 ;;  m               1   13[COMRAM] PTR struct DC_motor
  7852 ;;		 -> main@motorR(9), main@motorL(9), 
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;  negDuty         1   17[COMRAM] unsigned char 
  7855 ;;  posDuty         1   16[COMRAM] unsigned char 
  7856 ;; Return value:  Size  Location     Type
  7857 ;;                  1    wreg      void 
  7858 ;; Registers used:
  7859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7860 ;; Tracked objects:
  7861 ;;		On entry : 0/0
  7862 ;;		On exit  : 0/0
  7863 ;;		Unchanged: 0/0
  7864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7865 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7868 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7869 ;;Total ram usage:        5 bytes
  7870 ;; Hardware stack levels used: 1
  7871 ;; Hardware stack levels required when called: 2
  7872 ;; This function calls:
  7873 ;;		___lwdiv
  7874 ;;		___wmul
  7875 ;; This function is called by:
  7876 ;;		_stop
  7877 ;;		_turnLeft
  7878 ;;		_turnRight
  7879 ;;		_fullSpeedAhead
  7880 ;;		_fullSpeedReverse
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           	psect	text51
  7885   002730                     __ptext51:
  7886                           	callstack 0
  7887   002730                     _setMotorPWM:
  7888                           	callstack 26
  7889   002730                     
  7890                           ;dc_motor.c: 68: void setMotorPWM(DC_motor *m);dc_motor.c: 69: {;dc_motor.c: 70:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 72:     if(m->brakemode) {
  7891   002730  500E               	movf	setMotorPWM@m^0,w,c
  7892   002732  6ED9               	movwf	fsr2l,c
  7893   002734  6ADA               	clrf	fsr2h,c
  7894   002736  0E02               	movlw	2
  7895   002738  26D9               	addwf	fsr2l,f,c
  7896   00273A  50DF               	movf	indf2,w,c
  7897   00273C  B4D8               	btfsc	status,2,c
  7898   00273E  EFA3  F013         	goto	u2041
  7899   002742  EFA5  F013         	goto	u2040
  7900   002746                     u2041:
  7901   002746  EFD5  F013         	goto	l3183
  7902   00274A                     u2040:
  7903   00274A                     
  7904                           ;dc_motor.c: 73:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  7905   00274A  500E               	movf	setMotorPWM@m^0,w,c
  7906   00274C  6ED9               	movwf	fsr2l,c
  7907   00274E  6ADA               	clrf	fsr2h,c
  7908   002750  50DF               	movf	indf2,w,c
  7909   002752  6E0F               	movwf	??_setMotorPWM^0,c
  7910   002754  500F               	movf	??_setMotorPWM^0,w,c
  7911   002756  6E01               	movwf	___wmul@multiplier^0,c
  7912   002758  6A02               	clrf	(___wmul@multiplier+1)^0,c
  7913   00275A  500E               	movf	setMotorPWM@m^0,w,c
  7914   00275C  6ED9               	movwf	fsr2l,c
  7915   00275E  6ADA               	clrf	fsr2h,c
  7916   002760  0E03               	movlw	3
  7917   002762  26D9               	addwf	fsr2l,f,c
  7918   002764  CFDE F003          	movff	postinc2,___wmul@multiplicand
  7919   002768  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  7920   00276C  EC48  F020         	call	___wmul	;wreg free
  7921   002770  C001  F007         	movff	?___wmul,___lwdiv@dividend
  7922   002774  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  7923   002778  0E00               	movlw	0
  7924   00277A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  7925   00277C  0E64               	movlw	100
  7926   00277E  6E09               	movwf	___lwdiv@divisor^0,c
  7927   002780  EC10  F01B         	call	___lwdiv	;wreg free
  7928   002784  500E               	movf	setMotorPWM@m^0,w,c
  7929   002786  6ED9               	movwf	fsr2l,c
  7930   002788  6ADA               	clrf	fsr2h,c
  7931   00278A  0E03               	movlw	3
  7932   00278C  26D9               	addwf	fsr2l,f,c
  7933   00278E  50DF               	movf	indf2,w,c
  7934   002790  6E10               	movwf	(??_setMotorPWM+1)^0,c
  7935   002792  5007               	movf	?___lwdiv^0,w,c
  7936   002794  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  7937   002796  6E11               	movwf	setMotorPWM@posDuty^0,c
  7938   002798                     
  7939                           ;dc_motor.c: 74:         negDuty=(unsigned char)(m->PWMperiod);
  7940   002798  500E               	movf	setMotorPWM@m^0,w,c
  7941   00279A  6ED9               	movwf	fsr2l,c
  7942   00279C  6ADA               	clrf	fsr2h,c
  7943   00279E  0E03               	movlw	3
  7944   0027A0  26D9               	addwf	fsr2l,f,c
  7945   0027A2  50DF               	movf	indf2,w,c
  7946   0027A4  6E12               	movwf	setMotorPWM@negDuty^0,c
  7947                           
  7948                           ;dc_motor.c: 75:     }
  7949   0027A6  EFF6  F013         	goto	l3187
  7950   0027AA                     l3183:
  7951                           
  7952                           ;dc_motor.c: 77:         posDuty=0;
  7953   0027AA  0E00               	movlw	0
  7954   0027AC  6E11               	movwf	setMotorPWM@posDuty^0,c
  7955   0027AE                     
  7956                           ;dc_motor.c: 78:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  7957   0027AE  500E               	movf	setMotorPWM@m^0,w,c
  7958   0027B0  6ED9               	movwf	fsr2l,c
  7959   0027B2  6ADA               	clrf	fsr2h,c
  7960   0027B4  50DF               	movf	indf2,w,c
  7961   0027B6  6E0F               	movwf	??_setMotorPWM^0,c
  7962   0027B8  500F               	movf	??_setMotorPWM^0,w,c
  7963   0027BA  6E01               	movwf	___wmul@multiplier^0,c
  7964   0027BC  6A02               	clrf	(___wmul@multiplier+1)^0,c
  7965   0027BE  500E               	movf	setMotorPWM@m^0,w,c
  7966   0027C0  6ED9               	movwf	fsr2l,c
  7967   0027C2  6ADA               	clrf	fsr2h,c
  7968   0027C4  0E03               	movlw	3
  7969   0027C6  26D9               	addwf	fsr2l,f,c
  7970   0027C8  CFDE F003          	movff	postinc2,___wmul@multiplicand
  7971   0027CC  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  7972   0027D0  EC48  F020         	call	___wmul	;wreg free
  7973   0027D4  C001  F007         	movff	?___wmul,___lwdiv@dividend
  7974   0027D8  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  7975   0027DC  0E00               	movlw	0
  7976   0027DE  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  7977   0027E0  0E64               	movlw	100
  7978   0027E2  6E09               	movwf	___lwdiv@divisor^0,c
  7979   0027E4  EC10  F01B         	call	___lwdiv	;wreg free
  7980   0027E8  5007               	movf	?___lwdiv^0,w,c
  7981   0027EA  6E12               	movwf	setMotorPWM@negDuty^0,c
  7982   0027EC                     l3187:
  7983                           
  7984                           ;dc_motor.c: 81:     if (m->direction) {
  7985   0027EC  500E               	movf	setMotorPWM@m^0,w,c
  7986   0027EE  6ED9               	movwf	fsr2l,c
  7987   0027F0  6ADA               	clrf	fsr2h,c
  7988   0027F2  0E01               	movlw	1
  7989   0027F4  26D9               	addwf	fsr2l,f,c
  7990   0027F6  50DF               	movf	indf2,w,c
  7991   0027F8  B4D8               	btfsc	status,2,c
  7992   0027FA  EF01  F014         	goto	u2051
  7993   0027FE  EF03  F014         	goto	u2050
  7994   002802                     u2051:
  7995   002802  EF23  F014         	goto	l3191
  7996   002806                     u2050:
  7997   002806                     
  7998                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=posDuty;
  7999   002806  500E               	movf	setMotorPWM@m^0,w,c
  8000   002808  6ED9               	movwf	fsr2l,c
  8001   00280A  6ADA               	clrf	fsr2h,c
  8002   00280C  0E05               	movlw	5
  8003   00280E  26D9               	addwf	fsr2l,f,c
  8004   002810  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8005   002814  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8006   002818  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8007   00281C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8008   002820  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  8009                           
  8010                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=negDuty;
  8011   002824  500E               	movf	setMotorPWM@m^0,w,c
  8012   002826  6ED9               	movwf	fsr2l,c
  8013   002828  6ADA               	clrf	fsr2h,c
  8014   00282A  0E07               	movlw	7
  8015   00282C  26D9               	addwf	fsr2l,f,c
  8016   00282E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8017   002832  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8018   002836  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8019   00283A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8020   00283E  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  8021                           
  8022                           ;dc_motor.c: 84:     } else {
  8023   002842  EF41  F014         	goto	l223
  8024   002846                     l3191:
  8025                           
  8026                           ;dc_motor.c: 85:         *(m->posDutyHighByte)=negDuty;
  8027   002846  500E               	movf	setMotorPWM@m^0,w,c
  8028   002848  6ED9               	movwf	fsr2l,c
  8029   00284A  6ADA               	clrf	fsr2h,c
  8030   00284C  0E05               	movlw	5
  8031   00284E  26D9               	addwf	fsr2l,f,c
  8032   002850  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8033   002854  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8034   002858  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8035   00285C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8036   002860  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  8037                           
  8038                           ;dc_motor.c: 86:         *(m->negDutyHighByte)=posDuty;
  8039   002864  500E               	movf	setMotorPWM@m^0,w,c
  8040   002866  6ED9               	movwf	fsr2l,c
  8041   002868  6ADA               	clrf	fsr2h,c
  8042   00286A  0E07               	movlw	7
  8043   00286C  26D9               	addwf	fsr2l,f,c
  8044   00286E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8045   002872  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8046   002876  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8047   00287A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8048   00287E  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  8049   002882                     l223:
  8050   002882  0012               	return		;funcret
  8051   002884                     __end_of_setMotorPWM:
  8052                           	callstack 0
  8053                           
  8054 ;; *************** function ___wmul *****************
  8055 ;; Defined at:
  8056 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;  multiplier      2    0[COMRAM] unsigned int 
  8059 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;  product         2    4[COMRAM] unsigned int 
  8062 ;; Return value:  Size  Location     Type
  8063 ;;                  2    0[COMRAM] unsigned int 
  8064 ;; Registers used:
  8065 ;;		wreg, status,2, status,0, prodl, prodh
  8066 ;; Tracked objects:
  8067 ;;		On entry : 0/0
  8068 ;;		On exit  : 0/0
  8069 ;;		Unchanged: 0/0
  8070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8072 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8074 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8075 ;;Total ram usage:        6 bytes
  8076 ;; Hardware stack levels used: 1
  8077 ;; Hardware stack levels required when called: 1
  8078 ;; This function calls:
  8079 ;;		Nothing
  8080 ;; This function is called by:
  8081 ;;		_setMotorPWM
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           	psect	text52
  8086   004090                     __ptext52:
  8087                           	callstack 0
  8088   004090                     ___wmul:
  8089                           	callstack 26
  8090   004090  5001               	movf	___wmul@multiplier^0,w,c
  8091   004092  0203               	mulwf	___wmul@multiplicand^0,c
  8092   004094  CFF3 F005          	movff	prodl,___wmul@product
  8093   004098  CFF4 F006          	movff	prodh,___wmul@product+1
  8094   00409C  5001               	movf	___wmul@multiplier^0,w,c
  8095   00409E  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  8096   0040A0  50F3               	movf	243,w,c
  8097   0040A2  2606               	addwf	(___wmul@product+1)^0,f,c
  8098   0040A4  5002               	movf	(___wmul@multiplier+1)^0,w,c
  8099   0040A6  0203               	mulwf	___wmul@multiplicand^0,c
  8100   0040A8  50F3               	movf	243,w,c
  8101   0040AA  2606               	addwf	(___wmul@product+1)^0,f,c
  8102   0040AC  C005  F001         	movff	___wmul@product,?___wmul
  8103   0040B0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8104   0040B4  0012               	return		;funcret
  8105   0040B6                     __end_of___wmul:
  8106                           	callstack 0
  8107                           
  8108 ;; *************** function ___lwdiv *****************
  8109 ;; Defined at:
  8110 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;  dividend        2    6[COMRAM] unsigned int 
  8113 ;;  divisor         2    8[COMRAM] unsigned int 
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;  quotient        2   10[COMRAM] unsigned int 
  8116 ;;  counter         1   12[COMRAM] unsigned char 
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  2    6[COMRAM] unsigned int 
  8119 ;; Registers used:
  8120 ;;		wreg, status,2, status,0
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : 0/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8126 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8127 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8129 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8130 ;;Total ram usage:        7 bytes
  8131 ;; Hardware stack levels used: 1
  8132 ;; Hardware stack levels required when called: 1
  8133 ;; This function calls:
  8134 ;;		Nothing
  8135 ;; This function is called by:
  8136 ;;		_setMotorPWM
  8137 ;;		_vfpfcnvrt
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           	psect	text53
  8142   003620                     __ptext53:
  8143                           	callstack 0
  8144   003620                     ___lwdiv:
  8145                           	callstack 26
  8146   003620  0E00               	movlw	0
  8147   003622  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  8148   003624  0E00               	movlw	0
  8149   003626  6E0B               	movwf	___lwdiv@quotient^0,c
  8150   003628  5009               	movf	___lwdiv@divisor^0,w,c
  8151   00362A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8152   00362C  B4D8               	btfsc	status,2,c
  8153   00362E  EF1B  F01B         	goto	u2011
  8154   003632  EF1D  F01B         	goto	u2010
  8155   003636                     u2011:
  8156   003636  EF45  F01B         	goto	l1239
  8157   00363A                     u2010:
  8158   00363A  0E01               	movlw	1
  8159   00363C  6E0D               	movwf	___lwdiv@counter^0,c
  8160   00363E  EF25  F01B         	goto	l3163
  8161   003642                     l3161:
  8162   003642  90D8               	bcf	status,0,c
  8163   003644  3609               	rlcf	___lwdiv@divisor^0,f,c
  8164   003646  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8165   003648  2A0D               	incf	___lwdiv@counter^0,f,c
  8166   00364A                     l3163:
  8167   00364A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  8168   00364C  EF2A  F01B         	goto	u2021
  8169   003650  EF2C  F01B         	goto	u2020
  8170   003654                     u2021:
  8171   003654  EF21  F01B         	goto	l3161
  8172   003658                     u2020:
  8173   003658                     l3165:
  8174   003658  90D8               	bcf	status,0,c
  8175   00365A  360B               	rlcf	___lwdiv@quotient^0,f,c
  8176   00365C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8177   00365E  5009               	movf	___lwdiv@divisor^0,w,c
  8178   003660  5C07               	subwf	___lwdiv@dividend^0,w,c
  8179   003662  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  8180   003664  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8181   003666  A0D8               	btfss	status,0,c
  8182   003668  EF38  F01B         	goto	u2031
  8183   00366C  EF3A  F01B         	goto	u2030
  8184   003670                     u2031:
  8185   003670  EF3F  F01B         	goto	l3173
  8186   003674                     u2030:
  8187   003674  5009               	movf	___lwdiv@divisor^0,w,c
  8188   003676  5E07               	subwf	___lwdiv@dividend^0,f,c
  8189   003678  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  8190   00367A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8191   00367C  800B               	bsf	___lwdiv@quotient^0,0,c
  8192   00367E                     l3173:
  8193   00367E  90D8               	bcf	status,0,c
  8194   003680  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8195   003682  3209               	rrcf	___lwdiv@divisor^0,f,c
  8196   003684  2E0D               	decfsz	___lwdiv@counter^0,f,c
  8197   003686  EF2C  F01B         	goto	l3165
  8198   00368A                     l1239:
  8199   00368A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  8200   00368E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8201   003692  0012               	return		;funcret
  8202   003694                     __end_of___lwdiv:
  8203                           	callstack 0
  8204                           
  8205 ;; *************** function _convert_HSV *****************
  8206 ;; Defined at:
  8207 ;;		line 209 in file "color.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  8210 ;;		 -> main@HSV_colour(6), 
  8211 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  8212 ;;		 -> main@RGBC_colour(8), 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  temp            4   51[COMRAM] unsigned long 
  8215 ;;  temp            4   47[COMRAM] unsigned long 
  8216 ;;  temp            4   43[COMRAM] unsigned long 
  8217 ;;  temp            4   39[COMRAM] unsigned long 
  8218 ;;  temp            4   55[COMRAM] unsigned long 
  8219 ;;  temp            4   35[COMRAM] unsigned long 
  8220 ;;  temp            4   31[COMRAM] unsigned long 
  8221 ;;  C               2   63[COMRAM] unsigned int 
  8222 ;;  M               2   61[COMRAM] unsigned int 
  8223 ;;  hue_scale       2   59[COMRAM] unsigned int 
  8224 ;;  hue             2   29[COMRAM] unsigned int 
  8225 ;;  sat             2   27[COMRAM] unsigned int 
  8226 ;;  m               2   25[COMRAM] unsigned int 
  8227 ;;  sat_scale       2   23[COMRAM] unsigned int 
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  1    wreg      void 
  8230 ;; Registers used:
  8231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8237 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8238 ;;      Locals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8239 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8240 ;;      Totals:        52       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8241 ;;Total ram usage:       52 bytes
  8242 ;; Hardware stack levels used: 1
  8243 ;; Hardware stack levels required when called: 2
  8244 ;; This function calls:
  8245 ;;		___lldiv
  8246 ;;		___lmul
  8247 ;;		_max_RGB
  8248 ;;		_min_RGB
  8249 ;; This function is called by:
  8250 ;;		_forward_navigation
  8251 ;; This function uses a non-reentrant model
  8252 ;;
  8253                           
  8254                           	psect	text54
  8255   000E1A                     __ptext54:
  8256                           	callstack 0
  8257   000E1A                     _convert_HSV:
  8258                           	callstack 27
  8259   000E1A                     
  8260                           ;color.c: 209: void convert_HSV(struct HSV_val *p1,struct RGBC_val *p2);color.c: 210: {;
      +                          color.c: 211:     unsigned int hue = 0;
  8261   000E1A  0E00               	movlw	0
  8262   000E1C  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  8263   000E1E  0E00               	movlw	0
  8264   000E20  6E1E               	movwf	convert_HSV@hue^0,c
  8265                           
  8266                           ;color.c: 213:     unsigned int hue_scale = 60;
  8267   000E22  0E00               	movlw	0
  8268   000E24  6E3D               	movwf	(convert_HSV@hue_scale+1)^0,c
  8269   000E26  0E3C               	movlw	60
  8270   000E28  6E3C               	movwf	convert_HSV@hue_scale^0,c
  8271                           
  8272                           ;color.c: 214:     unsigned int sat_scale = 100;
  8273   000E2A  0E00               	movlw	0
  8274   000E2C  6E19               	movwf	(convert_HSV@sat_scale+1)^0,c
  8275   000E2E  0E64               	movlw	100
  8276   000E30  6E18               	movwf	convert_HSV@sat_scale^0,c
  8277   000E32                     
  8278                           ;color.c: 216:     unsigned int M = max_RGB(p2);
  8279   000E32  C00F  F001         	movff	convert_HSV@p2,max_RGB@p
  8280   000E36  EC97  F01A         	call	_max_RGB	;wreg free
  8281   000E3A  C001  F03E         	movff	?_max_RGB,convert_HSV@M
  8282   000E3E  C002  F03F         	movff	?_max_RGB+1,convert_HSV@M+1
  8283   000E42                     
  8284                           ;color.c: 217:     unsigned int m = min_RGB(p2);
  8285   000E42  C00F  F001         	movff	convert_HSV@p2,min_RGB@p
  8286   000E46  EC59  F01A         	call	_min_RGB	;wreg free
  8287   000E4A  C001  F01A         	movff	?_min_RGB,convert_HSV@m
  8288   000E4E  C002  F01B         	movff	?_min_RGB+1,convert_HSV@m+1
  8289   000E52                     
  8290                           ;color.c: 218:     unsigned int C = M - m;
  8291   000E52  501A               	movf	convert_HSV@m^0,w,c
  8292   000E54  5C3E               	subwf	convert_HSV@M^0,w,c
  8293   000E56  6E40               	movwf	convert_HSV@C^0,c
  8294   000E58  501B               	movf	(convert_HSV@m+1)^0,w,c
  8295   000E5A  583F               	subwfb	(convert_HSV@M+1)^0,w,c
  8296   000E5C  6E41               	movwf	(convert_HSV@C+1)^0,c
  8297   000E5E                     
  8298                           ;color.c: 220:     if (C == 0) {
  8299   000E5E  5040               	movf	convert_HSV@C^0,w,c
  8300   000E60  1041               	iorwf	(convert_HSV@C+1)^0,w,c
  8301   000E62  A4D8               	btfss	status,2,c
  8302   000E64  EF36  F007         	goto	u3251
  8303   000E68  EF38  F007         	goto	u3250
  8304   000E6C                     u3251:
  8305   000E6C  EF3E  F007         	goto	l4069
  8306   000E70                     u3250:
  8307   000E70                     
  8308                           ;color.c: 221:         hue = 0;
  8309   000E70  0E00               	movlw	0
  8310   000E72  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  8311   000E74  0E00               	movlw	0
  8312   000E76  6E1E               	movwf	convert_HSV@hue^0,c
  8313                           
  8314                           ;color.c: 222:     } else {
  8315   000E78  EF0E  F00A         	goto	l4153
  8316   000E7C                     l4069:
  8317                           
  8318                           ;color.c: 232:         if (M == p2->R) {
  8319   000E7C  500F               	movf	convert_HSV@p2^0,w,c
  8320   000E7E  6ED9               	movwf	fsr2l,c
  8321   000E80  6ADA               	clrf	fsr2h,c
  8322   000E82  503E               	movf	convert_HSV@M^0,w,c
  8323   000E84  18DE               	xorwf	postinc2,w,c
  8324   000E86  E107               	bnz	u3261
  8325   000E88  503F               	movf	(convert_HSV@M+1)^0,w,c
  8326   000E8A  18DE               	xorwf	postinc2,w,c
  8327   000E8C  A4D8               	btfss	status,2,c
  8328   000E8E  EF4B  F007         	goto	u3261
  8329   000E92  EF4D  F007         	goto	u3260
  8330   000E96                     u3261:
  8331   000E96  EF3A  F008         	goto	l4097
  8332   000E9A                     u3260:
  8333   000E9A                     
  8334                           ;color.c: 233:             if (p2->G >= p2->B) {
  8335   000E9A  500F               	movf	convert_HSV@p2^0,w,c
  8336   000E9C  6ED9               	movwf	fsr2l,c
  8337   000E9E  6ADA               	clrf	fsr2h,c
  8338   000EA0  0E04               	movlw	4
  8339   000EA2  26D9               	addwf	fsr2l,f,c
  8340   000EA4  500F               	movf	convert_HSV@p2^0,w,c
  8341   000EA6  6EE1               	movwf	fsr1l,c
  8342   000EA8  6AE2               	clrf	fsr1h,c
  8343   000EAA  0E02               	movlw	2
  8344   000EAC  26E1               	addwf	fsr1l,f,c
  8345   000EAE  50DE               	movf	postinc2,w,c
  8346   000EB0  5CE6               	subwf	postinc1,w,c
  8347   000EB2  50DE               	movf	postinc2,w,c
  8348   000EB4  58E6               	subwfb	postinc1,w,c
  8349   000EB6  A0D8               	btfss	status,0,c
  8350   000EB8  EF60  F007         	goto	u3271
  8351   000EBC  EF62  F007         	goto	u3270
  8352   000EC0                     u3271:
  8353   000EC0  EFC2  F007         	goto	l4085
  8354   000EC4                     u3270:
  8355   000EC4                     
  8356                           ;color.c: 237:                 temp *= 0;
  8357   000EC4  0E00               	movlw	0
  8358   000EC6  6E24               	movwf	convert_HSV@temp^0,c
  8359   000EC8  0E00               	movlw	0
  8360   000ECA  6E25               	movwf	(convert_HSV@temp+1)^0,c
  8361   000ECC  0E00               	movlw	0
  8362   000ECE  6E26               	movwf	(convert_HSV@temp+2)^0,c
  8363   000ED0  0E00               	movlw	0
  8364   000ED2  6E27               	movwf	(convert_HSV@temp+3)^0,c
  8365   000ED4                     
  8366                           ;color.c: 238:                 temp += (unsigned long)(p2->G - p2->B);
  8367   000ED4  500F               	movf	convert_HSV@p2^0,w,c
  8368   000ED6  6ED9               	movwf	fsr2l,c
  8369   000ED8  6ADA               	clrf	fsr2h,c
  8370   000EDA  0E04               	movlw	4
  8371   000EDC  26D9               	addwf	fsr2l,f,c
  8372   000EDE  CFDE F010          	movff	postinc2,??_convert_HSV
  8373   000EE2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8374   000EE6  500F               	movf	convert_HSV@p2^0,w,c
  8375   000EE8  6ED9               	movwf	fsr2l,c
  8376   000EEA  6ADA               	clrf	fsr2h,c
  8377   000EEC  0E02               	movlw	2
  8378   000EEE  26D9               	addwf	fsr2l,f,c
  8379   000EF0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8380   000EF4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8381   000EF8  5010               	movf	??_convert_HSV^0,w,c
  8382   000EFA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8383   000EFC  6E14               	movwf	(??_convert_HSV+4)^0,c
  8384   000EFE  5011               	movf	(??_convert_HSV+1)^0,w,c
  8385   000F00  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8386   000F02  6E15               	movwf	(??_convert_HSV+5)^0,c
  8387   000F04  5014               	movf	(??_convert_HSV+4)^0,w,c
  8388   000F06  2624               	addwf	convert_HSV@temp^0,f,c
  8389   000F08  5015               	movf	(??_convert_HSV+5)^0,w,c
  8390   000F0A  2225               	addwfc	(convert_HSV@temp+1)^0,f,c
  8391   000F0C  0E00               	movlw	0
  8392   000F0E  2226               	addwfc	(convert_HSV@temp+2)^0,f,c
  8393   000F10  0E00               	movlw	0
  8394   000F12  2227               	addwfc	(convert_HSV@temp+3)^0,f,c
  8395   000F14                     
  8396                           ;color.c: 239:                 temp *= (unsigned long)hue_scale;
  8397   000F14  C024  F001         	movff	convert_HSV@temp,___lmul@multiplier
  8398   000F18  C025  F002         	movff	convert_HSV@temp+1,___lmul@multiplier+1
  8399   000F1C  C026  F003         	movff	convert_HSV@temp+2,___lmul@multiplier+2
  8400   000F20  C027  F004         	movff	convert_HSV@temp+3,___lmul@multiplier+3
  8401   000F24  0E3C               	movlw	60
  8402   000F26  6E05               	movwf	___lmul@multiplicand^0,c
  8403   000F28  0E00               	movlw	0
  8404   000F2A  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8405   000F2C  0E00               	movlw	0
  8406   000F2E  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8407   000F30  0E00               	movlw	0
  8408   000F32  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8409   000F34  EC4A  F01B         	call	___lmul	;wreg free
  8410   000F38  C001  F024         	movff	?___lmul,convert_HSV@temp
  8411   000F3C  C002  F025         	movff	?___lmul+1,convert_HSV@temp+1
  8412   000F40  C003  F026         	movff	?___lmul+2,convert_HSV@temp+2
  8413   000F44  C004  F027         	movff	?___lmul+3,convert_HSV@temp+3
  8414   000F48                     
  8415                           ;color.c: 240:                 temp /= (unsigned long)C;
  8416   000F48  C024  F001         	movff	convert_HSV@temp,___lldiv@dividend
  8417   000F4C  C025  F002         	movff	convert_HSV@temp+1,___lldiv@dividend+1
  8418   000F50  C026  F003         	movff	convert_HSV@temp+2,___lldiv@dividend+2
  8419   000F54  C027  F004         	movff	convert_HSV@temp+3,___lldiv@dividend+3
  8420   000F58  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  8421   000F5C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  8422   000F60  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8423   000F62  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8424   000F64  ECF8  F018         	call	___lldiv	;wreg free
  8425   000F68  C001  F024         	movff	?___lldiv,convert_HSV@temp
  8426   000F6C  C002  F025         	movff	?___lldiv+1,convert_HSV@temp+1
  8427   000F70  C003  F026         	movff	?___lldiv+2,convert_HSV@temp+2
  8428   000F74  C004  F027         	movff	?___lldiv+3,convert_HSV@temp+3
  8429   000F78                     
  8430                           ;color.c: 241:                 hue = (unsigned int)temp;
  8431   000F78  C024  F01E         	movff	convert_HSV@temp,convert_HSV@hue
  8432   000F7C  C025  F01F         	movff	convert_HSV@temp+1,convert_HSV@hue+1
  8433                           
  8434                           ;color.c: 242:             } else {
  8435   000F80  EF3A  F008         	goto	l4097
  8436   000F84                     l4085:
  8437                           
  8438                           ;color.c: 244:                 unsigned long temp;;color.c: 245:                 temp = 
      +                          (unsigned long)C;
  8439   000F84  C040  F038         	movff	convert_HSV@C,convert_HSV@temp_609
  8440   000F88  C041  F039         	movff	convert_HSV@C+1,convert_HSV@temp_609+1
  8441   000F8C  6A3A               	clrf	(convert_HSV@temp_609+2)^0,c
  8442   000F8E  6A3B               	clrf	(convert_HSV@temp_609+3)^0,c
  8443   000F90                     
  8444                           ;color.c: 246:                 temp *= 6;
  8445   000F90  C038  F001         	movff	convert_HSV@temp_609,___lmul@multiplier
  8446   000F94  C039  F002         	movff	convert_HSV@temp_609+1,___lmul@multiplier+1
  8447   000F98  C03A  F003         	movff	convert_HSV@temp_609+2,___lmul@multiplier+2
  8448   000F9C  C03B  F004         	movff	convert_HSV@temp_609+3,___lmul@multiplier+3
  8449   000FA0  0E06               	movlw	6
  8450   000FA2  6E05               	movwf	___lmul@multiplicand^0,c
  8451   000FA4  0E00               	movlw	0
  8452   000FA6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8453   000FA8  0E00               	movlw	0
  8454   000FAA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8455   000FAC  0E00               	movlw	0
  8456   000FAE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8457   000FB0  EC4A  F01B         	call	___lmul	;wreg free
  8458   000FB4  C001  F038         	movff	?___lmul,convert_HSV@temp_609
  8459   000FB8  C002  F039         	movff	?___lmul+1,convert_HSV@temp_609+1
  8460   000FBC  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_609+2
  8461   000FC0  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_609+3
  8462   000FC4                     
  8463                           ;color.c: 247:                 temp -= (unsigned long)(p2->B - p2->G);
  8464   000FC4  500F               	movf	convert_HSV@p2^0,w,c
  8465   000FC6  6ED9               	movwf	fsr2l,c
  8466   000FC8  6ADA               	clrf	fsr2h,c
  8467   000FCA  0E02               	movlw	2
  8468   000FCC  26D9               	addwf	fsr2l,f,c
  8469   000FCE  CFDE F010          	movff	postinc2,??_convert_HSV
  8470   000FD2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8471   000FD6  500F               	movf	convert_HSV@p2^0,w,c
  8472   000FD8  6ED9               	movwf	fsr2l,c
  8473   000FDA  6ADA               	clrf	fsr2h,c
  8474   000FDC  0E04               	movlw	4
  8475   000FDE  26D9               	addwf	fsr2l,f,c
  8476   000FE0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8477   000FE4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8478   000FE8  5010               	movf	??_convert_HSV^0,w,c
  8479   000FEA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8480   000FEC  6E14               	movwf	(??_convert_HSV+4)^0,c
  8481   000FEE  5011               	movf	(??_convert_HSV+1)^0,w,c
  8482   000FF0  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8483   000FF2  6E15               	movwf	(??_convert_HSV+5)^0,c
  8484   000FF4  6A16               	clrf	(??_convert_HSV+6)^0,c
  8485   000FF6  6A17               	clrf	(??_convert_HSV+7)^0,c
  8486   000FF8  5014               	movf	(??_convert_HSV+4)^0,w,c
  8487   000FFA  5E38               	subwf	convert_HSV@temp_609^0,f,c
  8488   000FFC  5015               	movf	(??_convert_HSV+5)^0,w,c
  8489   000FFE  5A39               	subwfb	(convert_HSV@temp_609+1)^0,f,c
  8490   001000  5016               	movf	(??_convert_HSV+6)^0,w,c
  8491   001002  5A3A               	subwfb	(convert_HSV@temp_609+2)^0,f,c
  8492   001004  5017               	movf	(??_convert_HSV+7)^0,w,c
  8493   001006  5A3B               	subwfb	(convert_HSV@temp_609+3)^0,f,c
  8494   001008                     
  8495                           ;color.c: 248:                 temp *= (unsigned long)hue_scale;
  8496   001008  C038  F001         	movff	convert_HSV@temp_609,___lmul@multiplier
  8497   00100C  C039  F002         	movff	convert_HSV@temp_609+1,___lmul@multiplier+1
  8498   001010  C03A  F003         	movff	convert_HSV@temp_609+2,___lmul@multiplier+2
  8499   001014  C03B  F004         	movff	convert_HSV@temp_609+3,___lmul@multiplier+3
  8500   001018  0E3C               	movlw	60
  8501   00101A  6E05               	movwf	___lmul@multiplicand^0,c
  8502   00101C  0E00               	movlw	0
  8503   00101E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8504   001020  0E00               	movlw	0
  8505   001022  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8506   001024  0E00               	movlw	0
  8507   001026  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8508   001028  EC4A  F01B         	call	___lmul	;wreg free
  8509   00102C  C001  F038         	movff	?___lmul,convert_HSV@temp_609
  8510   001030  C002  F039         	movff	?___lmul+1,convert_HSV@temp_609+1
  8511   001034  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_609+2
  8512   001038  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_609+3
  8513   00103C                     
  8514                           ;color.c: 249:                 temp /= (unsigned long)C;
  8515   00103C  C038  F001         	movff	convert_HSV@temp_609,___lldiv@dividend
  8516   001040  C039  F002         	movff	convert_HSV@temp_609+1,___lldiv@dividend+1
  8517   001044  C03A  F003         	movff	convert_HSV@temp_609+2,___lldiv@dividend+2
  8518   001048  C03B  F004         	movff	convert_HSV@temp_609+3,___lldiv@dividend+3
  8519   00104C  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  8520   001050  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  8521   001054  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8522   001056  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8523   001058  ECF8  F018         	call	___lldiv	;wreg free
  8524   00105C  C001  F038         	movff	?___lldiv,convert_HSV@temp_609
  8525   001060  C002  F039         	movff	?___lldiv+1,convert_HSV@temp_609+1
  8526   001064  C003  F03A         	movff	?___lldiv+2,convert_HSV@temp_609+2
  8527   001068  C004  F03B         	movff	?___lldiv+3,convert_HSV@temp_609+3
  8528   00106C                     
  8529                           ;color.c: 250:                 hue = (unsigned int)temp;
  8530   00106C  C038  F01E         	movff	convert_HSV@temp_609,convert_HSV@hue
  8531   001070  C039  F01F         	movff	convert_HSV@temp_609+1,convert_HSV@hue+1
  8532   001074                     l4097:
  8533                           
  8534                           ;color.c: 253:         if (M == p2->G) {
  8535   001074  500F               	movf	convert_HSV@p2^0,w,c
  8536   001076  6ED9               	movwf	fsr2l,c
  8537   001078  6ADA               	clrf	fsr2h,c
  8538   00107A  0E02               	movlw	2
  8539   00107C  26D9               	addwf	fsr2l,f,c
  8540   00107E  503E               	movf	convert_HSV@M^0,w,c
  8541   001080  18DE               	xorwf	postinc2,w,c
  8542   001082  E107               	bnz	u3281
  8543   001084  503F               	movf	(convert_HSV@M+1)^0,w,c
  8544   001086  18DE               	xorwf	postinc2,w,c
  8545   001088  A4D8               	btfss	status,2,c
  8546   00108A  EF49  F008         	goto	u3281
  8547   00108E  EF4B  F008         	goto	u3280
  8548   001092                     u3281:
  8549   001092  EF20  F009         	goto	l4125
  8550   001096                     u3280:
  8551   001096                     
  8552                           ;color.c: 254:             if (p2->B >= p2->R) {
  8553   001096  500F               	movf	convert_HSV@p2^0,w,c
  8554   001098  6ED9               	movwf	fsr2l,c
  8555   00109A  6ADA               	clrf	fsr2h,c
  8556   00109C  500F               	movf	convert_HSV@p2^0,w,c
  8557   00109E  6EE1               	movwf	fsr1l,c
  8558   0010A0  6AE2               	clrf	fsr1h,c
  8559   0010A2  0E04               	movlw	4
  8560   0010A4  26E1               	addwf	fsr1l,f,c
  8561   0010A6  50DE               	movf	postinc2,w,c
  8562   0010A8  5CE6               	subwf	postinc1,w,c
  8563   0010AA  50DE               	movf	postinc2,w,c
  8564   0010AC  58E6               	subwfb	postinc1,w,c
  8565   0010AE  A0D8               	btfss	status,0,c
  8566   0010B0  EF5C  F008         	goto	u3291
  8567   0010B4  EF5E  F008         	goto	u3290
  8568   0010B8                     u3291:
  8569   0010B8  EFBF  F008         	goto	l4113
  8570   0010BC                     u3290:
  8571   0010BC                     
  8572                           ;color.c: 256:                 unsigned long temp;;color.c: 257:                 temp = 
      +                          (unsigned long)C;
  8573   0010BC  C040  F028         	movff	convert_HSV@C,convert_HSV@temp_610
  8574   0010C0  C041  F029         	movff	convert_HSV@C+1,convert_HSV@temp_610+1
  8575   0010C4  6A2A               	clrf	(convert_HSV@temp_610+2)^0,c
  8576   0010C6  6A2B               	clrf	(convert_HSV@temp_610+3)^0,c
  8577   0010C8                     
  8578                           ;color.c: 258:                 temp *= 2;
  8579   0010C8  90D8               	bcf	status,0,c
  8580   0010CA  3628               	rlcf	convert_HSV@temp_610^0,f,c
  8581   0010CC  3629               	rlcf	(convert_HSV@temp_610+1)^0,f,c
  8582   0010CE  362A               	rlcf	(convert_HSV@temp_610+2)^0,f,c
  8583   0010D0  362B               	rlcf	(convert_HSV@temp_610+3)^0,f,c
  8584   0010D2                     
  8585                           ;color.c: 259:                 temp += (unsigned long)(p2->B - p2->R);
  8586   0010D2  500F               	movf	convert_HSV@p2^0,w,c
  8587   0010D4  6ED9               	movwf	fsr2l,c
  8588   0010D6  6ADA               	clrf	fsr2h,c
  8589   0010D8  CFDE F010          	movff	postinc2,??_convert_HSV
  8590   0010DC  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8591   0010E0  500F               	movf	convert_HSV@p2^0,w,c
  8592   0010E2  6ED9               	movwf	fsr2l,c
  8593   0010E4  6ADA               	clrf	fsr2h,c
  8594   0010E6  0E04               	movlw	4
  8595   0010E8  26D9               	addwf	fsr2l,f,c
  8596   0010EA  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8597   0010EE  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8598   0010F2  5010               	movf	??_convert_HSV^0,w,c
  8599   0010F4  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8600   0010F6  6E14               	movwf	(??_convert_HSV+4)^0,c
  8601   0010F8  5011               	movf	(??_convert_HSV+1)^0,w,c
  8602   0010FA  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8603   0010FC  6E15               	movwf	(??_convert_HSV+5)^0,c
  8604   0010FE  5014               	movf	(??_convert_HSV+4)^0,w,c
  8605   001100  2628               	addwf	convert_HSV@temp_610^0,f,c
  8606   001102  5015               	movf	(??_convert_HSV+5)^0,w,c
  8607   001104  2229               	addwfc	(convert_HSV@temp_610+1)^0,f,c
  8608   001106  0E00               	movlw	0
  8609   001108  222A               	addwfc	(convert_HSV@temp_610+2)^0,f,c
  8610   00110A  0E00               	movlw	0
  8611   00110C  222B               	addwfc	(convert_HSV@temp_610+3)^0,f,c
  8612   00110E                     
  8613                           ;color.c: 260:                 temp *= (unsigned long)hue_scale;
  8614   00110E  C028  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  8615   001112  C029  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  8616   001116  C02A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  8617   00111A  C02B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  8618   00111E  0E3C               	movlw	60
  8619   001120  6E05               	movwf	___lmul@multiplicand^0,c
  8620   001122  0E00               	movlw	0
  8621   001124  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8622   001126  0E00               	movlw	0
  8623   001128  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8624   00112A  0E00               	movlw	0
  8625   00112C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8626   00112E  EC4A  F01B         	call	___lmul	;wreg free
  8627   001132  C001  F028         	movff	?___lmul,convert_HSV@temp_610
  8628   001136  C002  F029         	movff	?___lmul+1,convert_HSV@temp_610+1
  8629   00113A  C003  F02A         	movff	?___lmul+2,convert_HSV@temp_610+2
  8630   00113E  C004  F02B         	movff	?___lmul+3,convert_HSV@temp_610+3
  8631   001142                     
  8632                           ;color.c: 261:                 temp /= (unsigned long)C;
  8633   001142  C028  F001         	movff	convert_HSV@temp_610,___lldiv@dividend
  8634   001146  C029  F002         	movff	convert_HSV@temp_610+1,___lldiv@dividend+1
  8635   00114A  C02A  F003         	movff	convert_HSV@temp_610+2,___lldiv@dividend+2
  8636   00114E  C02B  F004         	movff	convert_HSV@temp_610+3,___lldiv@dividend+3
  8637   001152  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  8638   001156  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  8639   00115A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8640   00115C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8641   00115E  ECF8  F018         	call	___lldiv	;wreg free
  8642   001162  C001  F028         	movff	?___lldiv,convert_HSV@temp_610
  8643   001166  C002  F029         	movff	?___lldiv+1,convert_HSV@temp_610+1
  8644   00116A  C003  F02A         	movff	?___lldiv+2,convert_HSV@temp_610+2
  8645   00116E  C004  F02B         	movff	?___lldiv+3,convert_HSV@temp_610+3
  8646   001172                     
  8647                           ;color.c: 262:                 hue = (unsigned int)temp;
  8648   001172  C028  F01E         	movff	convert_HSV@temp_610,convert_HSV@hue
  8649   001176  C029  F01F         	movff	convert_HSV@temp_610+1,convert_HSV@hue+1
  8650                           
  8651                           ;color.c: 263:             } else {
  8652   00117A  EF20  F009         	goto	l4125
  8653   00117E                     l4113:
  8654                           
  8655                           ;color.c: 265:                 unsigned long temp;;color.c: 266:                 temp = 
      +                          (unsigned long)C;
  8656   00117E  C040  F02C         	movff	convert_HSV@C,convert_HSV@temp_611
  8657   001182  C041  F02D         	movff	convert_HSV@C+1,convert_HSV@temp_611+1
  8658   001186  6A2E               	clrf	(convert_HSV@temp_611+2)^0,c
  8659   001188  6A2F               	clrf	(convert_HSV@temp_611+3)^0,c
  8660   00118A                     
  8661                           ;color.c: 267:                 temp *= 2;
  8662   00118A  90D8               	bcf	status,0,c
  8663   00118C  362C               	rlcf	convert_HSV@temp_611^0,f,c
  8664   00118E  362D               	rlcf	(convert_HSV@temp_611+1)^0,f,c
  8665   001190  362E               	rlcf	(convert_HSV@temp_611+2)^0,f,c
  8666   001192  362F               	rlcf	(convert_HSV@temp_611+3)^0,f,c
  8667   001194                     
  8668                           ;color.c: 268:                 temp -= (unsigned long)(p2->R - p2->B);
  8669   001194  500F               	movf	convert_HSV@p2^0,w,c
  8670   001196  6ED9               	movwf	fsr2l,c
  8671   001198  6ADA               	clrf	fsr2h,c
  8672   00119A  0E04               	movlw	4
  8673   00119C  26D9               	addwf	fsr2l,f,c
  8674   00119E  CFDE F010          	movff	postinc2,??_convert_HSV
  8675   0011A2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8676   0011A6  500F               	movf	convert_HSV@p2^0,w,c
  8677   0011A8  6ED9               	movwf	fsr2l,c
  8678   0011AA  6ADA               	clrf	fsr2h,c
  8679   0011AC  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8680   0011B0  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8681   0011B4  5010               	movf	??_convert_HSV^0,w,c
  8682   0011B6  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8683   0011B8  6E14               	movwf	(??_convert_HSV+4)^0,c
  8684   0011BA  5011               	movf	(??_convert_HSV+1)^0,w,c
  8685   0011BC  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8686   0011BE  6E15               	movwf	(??_convert_HSV+5)^0,c
  8687   0011C0  6A16               	clrf	(??_convert_HSV+6)^0,c
  8688   0011C2  6A17               	clrf	(??_convert_HSV+7)^0,c
  8689   0011C4  5014               	movf	(??_convert_HSV+4)^0,w,c
  8690   0011C6  5E2C               	subwf	convert_HSV@temp_611^0,f,c
  8691   0011C8  5015               	movf	(??_convert_HSV+5)^0,w,c
  8692   0011CA  5A2D               	subwfb	(convert_HSV@temp_611+1)^0,f,c
  8693   0011CC  5016               	movf	(??_convert_HSV+6)^0,w,c
  8694   0011CE  5A2E               	subwfb	(convert_HSV@temp_611+2)^0,f,c
  8695   0011D0  5017               	movf	(??_convert_HSV+7)^0,w,c
  8696   0011D2  5A2F               	subwfb	(convert_HSV@temp_611+3)^0,f,c
  8697   0011D4                     
  8698                           ;color.c: 269:                 temp *= (unsigned long)hue_scale;
  8699   0011D4  C02C  F001         	movff	convert_HSV@temp_611,___lmul@multiplier
  8700   0011D8  C02D  F002         	movff	convert_HSV@temp_611+1,___lmul@multiplier+1
  8701   0011DC  C02E  F003         	movff	convert_HSV@temp_611+2,___lmul@multiplier+2
  8702   0011E0  C02F  F004         	movff	convert_HSV@temp_611+3,___lmul@multiplier+3
  8703   0011E4  0E3C               	movlw	60
  8704   0011E6  6E05               	movwf	___lmul@multiplicand^0,c
  8705   0011E8  0E00               	movlw	0
  8706   0011EA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8707   0011EC  0E00               	movlw	0
  8708   0011EE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8709   0011F0  0E00               	movlw	0
  8710   0011F2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8711   0011F4  EC4A  F01B         	call	___lmul	;wreg free
  8712   0011F8  C001  F02C         	movff	?___lmul,convert_HSV@temp_611
  8713   0011FC  C002  F02D         	movff	?___lmul+1,convert_HSV@temp_611+1
  8714   001200  C003  F02E         	movff	?___lmul+2,convert_HSV@temp_611+2
  8715   001204  C004  F02F         	movff	?___lmul+3,convert_HSV@temp_611+3
  8716   001208                     
  8717                           ;color.c: 270:                 temp /= (unsigned long)C;
  8718   001208  C02C  F001         	movff	convert_HSV@temp_611,___lldiv@dividend
  8719   00120C  C02D  F002         	movff	convert_HSV@temp_611+1,___lldiv@dividend+1
  8720   001210  C02E  F003         	movff	convert_HSV@temp_611+2,___lldiv@dividend+2
  8721   001214  C02F  F004         	movff	convert_HSV@temp_611+3,___lldiv@dividend+3
  8722   001218  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  8723   00121C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  8724   001220  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8725   001222  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8726   001224  ECF8  F018         	call	___lldiv	;wreg free
  8727   001228  C001  F02C         	movff	?___lldiv,convert_HSV@temp_611
  8728   00122C  C002  F02D         	movff	?___lldiv+1,convert_HSV@temp_611+1
  8729   001230  C003  F02E         	movff	?___lldiv+2,convert_HSV@temp_611+2
  8730   001234  C004  F02F         	movff	?___lldiv+3,convert_HSV@temp_611+3
  8731   001238                     
  8732                           ;color.c: 271:                 hue = (unsigned int)temp;
  8733   001238  C02C  F01E         	movff	convert_HSV@temp_611,convert_HSV@hue
  8734   00123C  C02D  F01F         	movff	convert_HSV@temp_611+1,convert_HSV@hue+1
  8735   001240                     l4125:
  8736                           
  8737                           ;color.c: 274:         if (M == p2->B) {
  8738   001240  500F               	movf	convert_HSV@p2^0,w,c
  8739   001242  6ED9               	movwf	fsr2l,c
  8740   001244  6ADA               	clrf	fsr2h,c
  8741   001246  0E04               	movlw	4
  8742   001248  26D9               	addwf	fsr2l,f,c
  8743   00124A  503E               	movf	convert_HSV@M^0,w,c
  8744   00124C  18DE               	xorwf	postinc2,w,c
  8745   00124E  E107               	bnz	u3301
  8746   001250  503F               	movf	(convert_HSV@M+1)^0,w,c
  8747   001252  18DE               	xorwf	postinc2,w,c
  8748   001254  A4D8               	btfss	status,2,c
  8749   001256  EF2F  F009         	goto	u3301
  8750   00125A  EF31  F009         	goto	u3300
  8751   00125E                     u3301:
  8752   00125E  EF0E  F00A         	goto	l4153
  8753   001262                     u3300:
  8754   001262                     
  8755                           ;color.c: 275:             if (p2->R >= p2->G) {
  8756   001262  500F               	movf	convert_HSV@p2^0,w,c
  8757   001264  6ED9               	movwf	fsr2l,c
  8758   001266  6ADA               	clrf	fsr2h,c
  8759   001268  0E02               	movlw	2
  8760   00126A  26D9               	addwf	fsr2l,f,c
  8761   00126C  500F               	movf	convert_HSV@p2^0,w,c
  8762   00126E  6EE1               	movwf	fsr1l,c
  8763   001270  6AE2               	clrf	fsr1h,c
  8764   001272  50DE               	movf	postinc2,w,c
  8765   001274  5CE6               	subwf	postinc1,w,c
  8766   001276  50DE               	movf	postinc2,w,c
  8767   001278  58E6               	subwfb	postinc1,w,c
  8768   00127A  A0D8               	btfss	status,0,c
  8769   00127C  EF42  F009         	goto	u3311
  8770   001280  EF44  F009         	goto	u3310
  8771   001284                     u3311:
  8772   001284  EFA9  F009         	goto	l4141
  8773   001288                     u3310:
  8774   001288                     
  8775                           ;color.c: 277:                 unsigned long temp;;color.c: 278:                 temp = 
      +                          (unsigned long)C;
  8776   001288  C040  F030         	movff	convert_HSV@C,convert_HSV@temp_612
  8777   00128C  C041  F031         	movff	convert_HSV@C+1,convert_HSV@temp_612+1
  8778   001290  6A32               	clrf	(convert_HSV@temp_612+2)^0,c
  8779   001292  6A33               	clrf	(convert_HSV@temp_612+3)^0,c
  8780   001294                     
  8781                           ;color.c: 279:                 temp *= 4;
  8782   001294  0E02               	movlw	2
  8783   001296                     u3325:
  8784   001296  90D8               	bcf	status,0,c
  8785   001298  3630               	rlcf	convert_HSV@temp_612^0,f,c
  8786   00129A  3631               	rlcf	(convert_HSV@temp_612+1)^0,f,c
  8787   00129C  3632               	rlcf	(convert_HSV@temp_612+2)^0,f,c
  8788   00129E  3633               	rlcf	(convert_HSV@temp_612+3)^0,f,c
  8789   0012A0  2EE8               	decfsz	wreg,f,c
  8790   0012A2  EF4B  F009         	goto	u3325
  8791   0012A6                     
  8792                           ;color.c: 280:                 temp += (unsigned long)(p2->R - p2->G);
  8793   0012A6  500F               	movf	convert_HSV@p2^0,w,c
  8794   0012A8  6ED9               	movwf	fsr2l,c
  8795   0012AA  6ADA               	clrf	fsr2h,c
  8796   0012AC  0E02               	movlw	2
  8797   0012AE  26D9               	addwf	fsr2l,f,c
  8798   0012B0  CFDE F010          	movff	postinc2,??_convert_HSV
  8799   0012B4  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8800   0012B8  500F               	movf	convert_HSV@p2^0,w,c
  8801   0012BA  6ED9               	movwf	fsr2l,c
  8802   0012BC  6ADA               	clrf	fsr2h,c
  8803   0012BE  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8804   0012C2  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8805   0012C6  5010               	movf	??_convert_HSV^0,w,c
  8806   0012C8  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8807   0012CA  6E14               	movwf	(??_convert_HSV+4)^0,c
  8808   0012CC  5011               	movf	(??_convert_HSV+1)^0,w,c
  8809   0012CE  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8810   0012D0  6E15               	movwf	(??_convert_HSV+5)^0,c
  8811   0012D2  5014               	movf	(??_convert_HSV+4)^0,w,c
  8812   0012D4  2630               	addwf	convert_HSV@temp_612^0,f,c
  8813   0012D6  5015               	movf	(??_convert_HSV+5)^0,w,c
  8814   0012D8  2231               	addwfc	(convert_HSV@temp_612+1)^0,f,c
  8815   0012DA  0E00               	movlw	0
  8816   0012DC  2232               	addwfc	(convert_HSV@temp_612+2)^0,f,c
  8817   0012DE  0E00               	movlw	0
  8818   0012E0  2233               	addwfc	(convert_HSV@temp_612+3)^0,f,c
  8819   0012E2                     
  8820                           ;color.c: 281:                 temp *= (unsigned long)hue_scale;
  8821   0012E2  C030  F001         	movff	convert_HSV@temp_612,___lmul@multiplier
  8822   0012E6  C031  F002         	movff	convert_HSV@temp_612+1,___lmul@multiplier+1
  8823   0012EA  C032  F003         	movff	convert_HSV@temp_612+2,___lmul@multiplier+2
  8824   0012EE  C033  F004         	movff	convert_HSV@temp_612+3,___lmul@multiplier+3
  8825   0012F2  0E3C               	movlw	60
  8826   0012F4  6E05               	movwf	___lmul@multiplicand^0,c
  8827   0012F6  0E00               	movlw	0
  8828   0012F8  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8829   0012FA  0E00               	movlw	0
  8830   0012FC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8831   0012FE  0E00               	movlw	0
  8832   001300  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8833   001302  EC4A  F01B         	call	___lmul	;wreg free
  8834   001306  C001  F030         	movff	?___lmul,convert_HSV@temp_612
  8835   00130A  C002  F031         	movff	?___lmul+1,convert_HSV@temp_612+1
  8836   00130E  C003  F032         	movff	?___lmul+2,convert_HSV@temp_612+2
  8837   001312  C004  F033         	movff	?___lmul+3,convert_HSV@temp_612+3
  8838   001316                     
  8839                           ;color.c: 282:                 temp /= (unsigned long)C;
  8840   001316  C030  F001         	movff	convert_HSV@temp_612,___lldiv@dividend
  8841   00131A  C031  F002         	movff	convert_HSV@temp_612+1,___lldiv@dividend+1
  8842   00131E  C032  F003         	movff	convert_HSV@temp_612+2,___lldiv@dividend+2
  8843   001322  C033  F004         	movff	convert_HSV@temp_612+3,___lldiv@dividend+3
  8844   001326  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  8845   00132A  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  8846   00132E  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8847   001330  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8848   001332  ECF8  F018         	call	___lldiv	;wreg free
  8849   001336  C001  F030         	movff	?___lldiv,convert_HSV@temp_612
  8850   00133A  C002  F031         	movff	?___lldiv+1,convert_HSV@temp_612+1
  8851   00133E  C003  F032         	movff	?___lldiv+2,convert_HSV@temp_612+2
  8852   001342  C004  F033         	movff	?___lldiv+3,convert_HSV@temp_612+3
  8853   001346                     
  8854                           ;color.c: 283:                 hue = (unsigned int)temp;
  8855   001346  C030  F01E         	movff	convert_HSV@temp_612,convert_HSV@hue
  8856   00134A  C031  F01F         	movff	convert_HSV@temp_612+1,convert_HSV@hue+1
  8857                           
  8858                           ;color.c: 284:             } else {
  8859   00134E  EF0E  F00A         	goto	l4153
  8860   001352                     l4141:
  8861                           
  8862                           ;color.c: 286:                 unsigned long temp;;color.c: 287:                 temp = 
      +                          (unsigned long)C;
  8863   001352  C040  F034         	movff	convert_HSV@C,convert_HSV@temp_613
  8864   001356  C041  F035         	movff	convert_HSV@C+1,convert_HSV@temp_613+1
  8865   00135A  6A36               	clrf	(convert_HSV@temp_613+2)^0,c
  8866   00135C  6A37               	clrf	(convert_HSV@temp_613+3)^0,c
  8867   00135E                     
  8868                           ;color.c: 288:                 temp *= 4;
  8869   00135E  0E02               	movlw	2
  8870   001360                     u3335:
  8871   001360  90D8               	bcf	status,0,c
  8872   001362  3634               	rlcf	convert_HSV@temp_613^0,f,c
  8873   001364  3635               	rlcf	(convert_HSV@temp_613+1)^0,f,c
  8874   001366  3636               	rlcf	(convert_HSV@temp_613+2)^0,f,c
  8875   001368  3637               	rlcf	(convert_HSV@temp_613+3)^0,f,c
  8876   00136A  2EE8               	decfsz	wreg,f,c
  8877   00136C  EFB0  F009         	goto	u3335
  8878   001370                     
  8879                           ;color.c: 289:                 temp -= (unsigned long)(p2->G - p2->R);
  8880   001370  500F               	movf	convert_HSV@p2^0,w,c
  8881   001372  6ED9               	movwf	fsr2l,c
  8882   001374  6ADA               	clrf	fsr2h,c
  8883   001376  CFDE F010          	movff	postinc2,??_convert_HSV
  8884   00137A  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8885   00137E  500F               	movf	convert_HSV@p2^0,w,c
  8886   001380  6ED9               	movwf	fsr2l,c
  8887   001382  6ADA               	clrf	fsr2h,c
  8888   001384  0E02               	movlw	2
  8889   001386  26D9               	addwf	fsr2l,f,c
  8890   001388  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8891   00138C  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8892   001390  5010               	movf	??_convert_HSV^0,w,c
  8893   001392  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8894   001394  6E14               	movwf	(??_convert_HSV+4)^0,c
  8895   001396  5011               	movf	(??_convert_HSV+1)^0,w,c
  8896   001398  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8897   00139A  6E15               	movwf	(??_convert_HSV+5)^0,c
  8898   00139C  6A16               	clrf	(??_convert_HSV+6)^0,c
  8899   00139E  6A17               	clrf	(??_convert_HSV+7)^0,c
  8900   0013A0  5014               	movf	(??_convert_HSV+4)^0,w,c
  8901   0013A2  5E34               	subwf	convert_HSV@temp_613^0,f,c
  8902   0013A4  5015               	movf	(??_convert_HSV+5)^0,w,c
  8903   0013A6  5A35               	subwfb	(convert_HSV@temp_613+1)^0,f,c
  8904   0013A8  5016               	movf	(??_convert_HSV+6)^0,w,c
  8905   0013AA  5A36               	subwfb	(convert_HSV@temp_613+2)^0,f,c
  8906   0013AC  5017               	movf	(??_convert_HSV+7)^0,w,c
  8907   0013AE  5A37               	subwfb	(convert_HSV@temp_613+3)^0,f,c
  8908   0013B0                     
  8909                           ;color.c: 290:                 temp *= (unsigned long)hue_scale;
  8910   0013B0  C034  F001         	movff	convert_HSV@temp_613,___lmul@multiplier
  8911   0013B4  C035  F002         	movff	convert_HSV@temp_613+1,___lmul@multiplier+1
  8912   0013B8  C036  F003         	movff	convert_HSV@temp_613+2,___lmul@multiplier+2
  8913   0013BC  C037  F004         	movff	convert_HSV@temp_613+3,___lmul@multiplier+3
  8914   0013C0  0E3C               	movlw	60
  8915   0013C2  6E05               	movwf	___lmul@multiplicand^0,c
  8916   0013C4  0E00               	movlw	0
  8917   0013C6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8918   0013C8  0E00               	movlw	0
  8919   0013CA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8920   0013CC  0E00               	movlw	0
  8921   0013CE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8922   0013D0  EC4A  F01B         	call	___lmul	;wreg free
  8923   0013D4  C001  F034         	movff	?___lmul,convert_HSV@temp_613
  8924   0013D8  C002  F035         	movff	?___lmul+1,convert_HSV@temp_613+1
  8925   0013DC  C003  F036         	movff	?___lmul+2,convert_HSV@temp_613+2
  8926   0013E0  C004  F037         	movff	?___lmul+3,convert_HSV@temp_613+3
  8927   0013E4                     
  8928                           ;color.c: 291:                 temp /= (unsigned long)C;
  8929   0013E4  C034  F001         	movff	convert_HSV@temp_613,___lldiv@dividend
  8930   0013E8  C035  F002         	movff	convert_HSV@temp_613+1,___lldiv@dividend+1
  8931   0013EC  C036  F003         	movff	convert_HSV@temp_613+2,___lldiv@dividend+2
  8932   0013F0  C037  F004         	movff	convert_HSV@temp_613+3,___lldiv@dividend+3
  8933   0013F4  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  8934   0013F8  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  8935   0013FC  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8936   0013FE  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8937   001400  ECF8  F018         	call	___lldiv	;wreg free
  8938   001404  C001  F034         	movff	?___lldiv,convert_HSV@temp_613
  8939   001408  C002  F035         	movff	?___lldiv+1,convert_HSV@temp_613+1
  8940   00140C  C003  F036         	movff	?___lldiv+2,convert_HSV@temp_613+2
  8941   001410  C004  F037         	movff	?___lldiv+3,convert_HSV@temp_613+3
  8942   001414                     
  8943                           ;color.c: 292:                 hue = (unsigned int)temp;
  8944   001414  C034  F01E         	movff	convert_HSV@temp_613,convert_HSV@hue
  8945   001418  C035  F01F         	movff	convert_HSV@temp_613+1,convert_HSV@hue+1
  8946   00141C                     l4153:
  8947                           
  8948                           ;color.c: 297:     if (M == 0) {
  8949   00141C  503E               	movf	convert_HSV@M^0,w,c
  8950   00141E  103F               	iorwf	(convert_HSV@M+1)^0,w,c
  8951   001420  A4D8               	btfss	status,2,c
  8952   001422  EF15  F00A         	goto	u3341
  8953   001426  EF17  F00A         	goto	u3340
  8954   00142A                     u3341:
  8955   00142A  EF1D  F00A         	goto	l4157
  8956   00142E                     u3340:
  8957   00142E                     
  8958                           ;color.c: 298:         sat = 0;
  8959   00142E  0E00               	movlw	0
  8960   001430  6E1D               	movwf	(convert_HSV@sat+1)^0,c
  8961   001432  0E00               	movlw	0
  8962   001434  6E1C               	movwf	convert_HSV@sat^0,c
  8963                           
  8964                           ;color.c: 299:     } else {
  8965   001436  EF59  F00A         	goto	l4165
  8966   00143A                     l4157:
  8967                           
  8968                           ;color.c: 301:         unsigned long temp;;color.c: 302:         temp = (unsigned long)C
      +                          ;
  8969   00143A  C040  F020         	movff	convert_HSV@C,convert_HSV@temp_614
  8970   00143E  C041  F021         	movff	convert_HSV@C+1,convert_HSV@temp_614+1
  8971   001442  6A22               	clrf	(convert_HSV@temp_614+2)^0,c
  8972   001444  6A23               	clrf	(convert_HSV@temp_614+3)^0,c
  8973   001446                     
  8974                           ;color.c: 303:         temp *= (unsigned long)sat_scale;
  8975   001446  C020  F001         	movff	convert_HSV@temp_614,___lmul@multiplier
  8976   00144A  C021  F002         	movff	convert_HSV@temp_614+1,___lmul@multiplier+1
  8977   00144E  C022  F003         	movff	convert_HSV@temp_614+2,___lmul@multiplier+2
  8978   001452  C023  F004         	movff	convert_HSV@temp_614+3,___lmul@multiplier+3
  8979   001456  0E64               	movlw	100
  8980   001458  6E05               	movwf	___lmul@multiplicand^0,c
  8981   00145A  0E00               	movlw	0
  8982   00145C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8983   00145E  0E00               	movlw	0
  8984   001460  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8985   001462  0E00               	movlw	0
  8986   001464  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8987   001466  EC4A  F01B         	call	___lmul	;wreg free
  8988   00146A  C001  F020         	movff	?___lmul,convert_HSV@temp_614
  8989   00146E  C002  F021         	movff	?___lmul+1,convert_HSV@temp_614+1
  8990   001472  C003  F022         	movff	?___lmul+2,convert_HSV@temp_614+2
  8991   001476  C004  F023         	movff	?___lmul+3,convert_HSV@temp_614+3
  8992   00147A                     
  8993                           ;color.c: 304:         temp /= (unsigned long)M;
  8994   00147A  C020  F001         	movff	convert_HSV@temp_614,___lldiv@dividend
  8995   00147E  C021  F002         	movff	convert_HSV@temp_614+1,___lldiv@dividend+1
  8996   001482  C022  F003         	movff	convert_HSV@temp_614+2,___lldiv@dividend+2
  8997   001486  C023  F004         	movff	convert_HSV@temp_614+3,___lldiv@dividend+3
  8998   00148A  C03E  F005         	movff	convert_HSV@M,___lldiv@divisor
  8999   00148E  C03F  F006         	movff	convert_HSV@M+1,___lldiv@divisor+1
  9000   001492  6A07               	clrf	(___lldiv@divisor+2)^0,c
  9001   001494  6A08               	clrf	(___lldiv@divisor+3)^0,c
  9002   001496  ECF8  F018         	call	___lldiv	;wreg free
  9003   00149A  C001  F020         	movff	?___lldiv,convert_HSV@temp_614
  9004   00149E  C002  F021         	movff	?___lldiv+1,convert_HSV@temp_614+1
  9005   0014A2  C003  F022         	movff	?___lldiv+2,convert_HSV@temp_614+2
  9006   0014A6  C004  F023         	movff	?___lldiv+3,convert_HSV@temp_614+3
  9007   0014AA                     
  9008                           ;color.c: 305:         sat = (unsigned int)temp;
  9009   0014AA  C020  F01C         	movff	convert_HSV@temp_614,convert_HSV@sat
  9010   0014AE  C021  F01D         	movff	convert_HSV@temp_614+1,convert_HSV@sat+1
  9011   0014B2                     l4165:
  9012                           
  9013                           ;color.c: 308:     p1->H = hue;
  9014   0014B2  500E               	movf	convert_HSV@p1^0,w,c
  9015   0014B4  6ED9               	movwf	fsr2l,c
  9016   0014B6  6ADA               	clrf	fsr2h,c
  9017   0014B8  C01E  FFDE         	movff	convert_HSV@hue,postinc2
  9018   0014BC  C01F  FFDD         	movff	convert_HSV@hue+1,postdec2
  9019   0014C0                     
  9020                           ;color.c: 309:     p1->S = sat;
  9021   0014C0  500E               	movf	convert_HSV@p1^0,w,c
  9022   0014C2  6ED9               	movwf	fsr2l,c
  9023   0014C4  6ADA               	clrf	fsr2h,c
  9024   0014C6  0E02               	movlw	2
  9025   0014C8  26D9               	addwf	fsr2l,f,c
  9026   0014CA  C01C  FFDE         	movff	convert_HSV@sat,postinc2
  9027   0014CE  C01D  FFDD         	movff	convert_HSV@sat+1,postdec2
  9028   0014D2                     
  9029                           ;color.c: 310:     p1->V = M;
  9030   0014D2  500E               	movf	convert_HSV@p1^0,w,c
  9031   0014D4  6ED9               	movwf	fsr2l,c
  9032   0014D6  6ADA               	clrf	fsr2h,c
  9033   0014D8  0E04               	movlw	4
  9034   0014DA  26D9               	addwf	fsr2l,f,c
  9035   0014DC  C03E  FFDE         	movff	convert_HSV@M,postinc2
  9036   0014E0  C03F  FFDD         	movff	convert_HSV@M+1,postdec2
  9037   0014E4  0012               	return		;funcret
  9038   0014E6                     __end_of_convert_HSV:
  9039                           	callstack 0
  9040                           
  9041 ;; *************** function _min_RGB *****************
  9042 ;; Defined at:
  9043 ;;		line 186 in file "color.c"
  9044 ;; Parameters:    Size  Location     Type
  9045 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  9046 ;;		 -> main@RGBC_colour(8), 
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;  min_val         2    4[COMRAM] unsigned int 
  9049 ;; Return value:  Size  Location     Type
  9050 ;;                  2    0[COMRAM] unsigned int 
  9051 ;; Registers used:
  9052 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9058 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9060 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9061 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9062 ;;Total ram usage:        6 bytes
  9063 ;; Hardware stack levels used: 1
  9064 ;; Hardware stack levels required when called: 1
  9065 ;; This function calls:
  9066 ;;		Nothing
  9067 ;; This function is called by:
  9068 ;;		_convert_HSV
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text55
  9073   0034B2                     __ptext55:
  9074                           	callstack 0
  9075   0034B2                     _min_RGB:
  9076                           	callstack 27
  9077   0034B2                     
  9078                           ;color.c: 186: unsigned int min_RGB(struct RGBC_val *p);color.c: 187: {;color.c: 188:   
      +                            unsigned int min_val = p->R;
  9079   0034B2  5001               	movf	min_RGB@p^0,w,c
  9080   0034B4  6ED9               	movwf	fsr2l,c
  9081   0034B6  6ADA               	clrf	fsr2h,c
  9082   0034B8  CFDE F005          	movff	postinc2,min_RGB@min_val
  9083   0034BC  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  9084   0034C0                     
  9085                           ;color.c: 189:     if (p->G < min_val) {min_val = p->G;}
  9086   0034C0  5001               	movf	min_RGB@p^0,w,c
  9087   0034C2  6ED9               	movwf	fsr2l,c
  9088   0034C4  6ADA               	clrf	fsr2h,c
  9089   0034C6  0E02               	movlw	2
  9090   0034C8  26D9               	addwf	fsr2l,f,c
  9091   0034CA  5005               	movf	min_RGB@min_val^0,w,c
  9092   0034CC  5CDE               	subwf	postinc2,w,c
  9093   0034CE  5006               	movf	(min_RGB@min_val+1)^0,w,c
  9094   0034D0  58DE               	subwfb	postinc2,w,c
  9095   0034D2  B0D8               	btfsc	status,0,c
  9096   0034D4  EF6E  F01A         	goto	u2641
  9097   0034D8  EF70  F01A         	goto	u2640
  9098   0034DC                     u2641:
  9099   0034DC  EF79  F01A         	goto	l104
  9100   0034E0                     u2640:
  9101   0034E0  5001               	movf	min_RGB@p^0,w,c
  9102   0034E2  6ED9               	movwf	fsr2l,c
  9103   0034E4  6ADA               	clrf	fsr2h,c
  9104   0034E6  0E02               	movlw	2
  9105   0034E8  26D9               	addwf	fsr2l,f,c
  9106   0034EA  CFDE F005          	movff	postinc2,min_RGB@min_val
  9107   0034EE  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  9108   0034F2                     l104:
  9109                           
  9110                           ;color.c: 190:     if (p->B < min_val) {min_val = p->B;}
  9111   0034F2  5001               	movf	min_RGB@p^0,w,c
  9112   0034F4  6ED9               	movwf	fsr2l,c
  9113   0034F6  6ADA               	clrf	fsr2h,c
  9114   0034F8  0E04               	movlw	4
  9115   0034FA  26D9               	addwf	fsr2l,f,c
  9116   0034FC  5005               	movf	min_RGB@min_val^0,w,c
  9117   0034FE  5CDE               	subwf	postinc2,w,c
  9118   003500  5006               	movf	(min_RGB@min_val+1)^0,w,c
  9119   003502  58DE               	subwfb	postinc2,w,c
  9120   003504  B0D8               	btfsc	status,0,c
  9121   003506  EF87  F01A         	goto	u2651
  9122   00350A  EF89  F01A         	goto	u2650
  9123   00350E                     u2651:
  9124   00350E  EF92  F01A         	goto	l3621
  9125   003512                     u2650:
  9126   003512  5001               	movf	min_RGB@p^0,w,c
  9127   003514  6ED9               	movwf	fsr2l,c
  9128   003516  6ADA               	clrf	fsr2h,c
  9129   003518  0E04               	movlw	4
  9130   00351A  26D9               	addwf	fsr2l,f,c
  9131   00351C  CFDE F005          	movff	postinc2,min_RGB@min_val
  9132   003520  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  9133   003524                     l3621:
  9134                           
  9135                           ;color.c: 191:     return min_val;
  9136   003524  C005  F001         	movff	min_RGB@min_val,?_min_RGB
  9137   003528  C006  F002         	movff	min_RGB@min_val+1,?_min_RGB+1
  9138   00352C  0012               	return		;funcret
  9139   00352E                     __end_of_min_RGB:
  9140                           	callstack 0
  9141                           
  9142 ;; *************** function _max_RGB *****************
  9143 ;; Defined at:
  9144 ;;		line 175 in file "color.c"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  9147 ;;		 -> main@RGBC_colour(8), 
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;  max_val         2    4[COMRAM] unsigned int 
  9150 ;; Return value:  Size  Location     Type
  9151 ;;                  2    0[COMRAM] unsigned int 
  9152 ;; Registers used:
  9153 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9154 ;; Tracked objects:
  9155 ;;		On entry : 0/0
  9156 ;;		On exit  : 0/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9159 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9160 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9161 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9162 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9163 ;;Total ram usage:        6 bytes
  9164 ;; Hardware stack levels used: 1
  9165 ;; Hardware stack levels required when called: 1
  9166 ;; This function calls:
  9167 ;;		Nothing
  9168 ;; This function is called by:
  9169 ;;		_convert_HSV
  9170 ;; This function uses a non-reentrant model
  9171 ;;
  9172                           
  9173                           	psect	text56
  9174   00352E                     __ptext56:
  9175                           	callstack 0
  9176   00352E                     _max_RGB:
  9177                           	callstack 27
  9178   00352E                     
  9179                           ;color.c: 175: unsigned int max_RGB(struct RGBC_val *p);color.c: 176: {;color.c: 177:   
      +                            unsigned int max_val = p->R;
  9180   00352E  5001               	movf	max_RGB@p^0,w,c
  9181   003530  6ED9               	movwf	fsr2l,c
  9182   003532  6ADA               	clrf	fsr2h,c
  9183   003534  CFDE F005          	movff	postinc2,max_RGB@max_val
  9184   003538  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  9185   00353C                     
  9186                           ;color.c: 178:     if (p->G > max_val) {max_val = p->G;}
  9187   00353C  5001               	movf	max_RGB@p^0,w,c
  9188   00353E  6ED9               	movwf	fsr2l,c
  9189   003540  6ADA               	clrf	fsr2h,c
  9190   003542  0E02               	movlw	2
  9191   003544  26D9               	addwf	fsr2l,f,c
  9192   003546  50DE               	movf	postinc2,w,c
  9193   003548  5C05               	subwf	max_RGB@max_val^0,w,c
  9194   00354A  50DE               	movf	postinc2,w,c
  9195   00354C  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  9196   00354E  B0D8               	btfsc	status,0,c
  9197   003550  EFAC  F01A         	goto	u2621
  9198   003554  EFAE  F01A         	goto	u2620
  9199   003558                     u2621:
  9200   003558  EFB7  F01A         	goto	l99
  9201   00355C                     u2620:
  9202   00355C  5001               	movf	max_RGB@p^0,w,c
  9203   00355E  6ED9               	movwf	fsr2l,c
  9204   003560  6ADA               	clrf	fsr2h,c
  9205   003562  0E02               	movlw	2
  9206   003564  26D9               	addwf	fsr2l,f,c
  9207   003566  CFDE F005          	movff	postinc2,max_RGB@max_val
  9208   00356A  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  9209   00356E                     l99:
  9210                           
  9211                           ;color.c: 179:     if (p->B > max_val) {max_val = p->B;}
  9212   00356E  5001               	movf	max_RGB@p^0,w,c
  9213   003570  6ED9               	movwf	fsr2l,c
  9214   003572  6ADA               	clrf	fsr2h,c
  9215   003574  0E04               	movlw	4
  9216   003576  26D9               	addwf	fsr2l,f,c
  9217   003578  50DE               	movf	postinc2,w,c
  9218   00357A  5C05               	subwf	max_RGB@max_val^0,w,c
  9219   00357C  50DE               	movf	postinc2,w,c
  9220   00357E  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  9221   003580  B0D8               	btfsc	status,0,c
  9222   003582  EFC5  F01A         	goto	u2631
  9223   003586  EFC7  F01A         	goto	u2630
  9224   00358A                     u2631:
  9225   00358A  EFD0  F01A         	goto	l3609
  9226   00358E                     u2630:
  9227   00358E  5001               	movf	max_RGB@p^0,w,c
  9228   003590  6ED9               	movwf	fsr2l,c
  9229   003592  6ADA               	clrf	fsr2h,c
  9230   003594  0E04               	movlw	4
  9231   003596  26D9               	addwf	fsr2l,f,c
  9232   003598  CFDE F005          	movff	postinc2,max_RGB@max_val
  9233   00359C  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  9234   0035A0                     l3609:
  9235                           
  9236                           ;color.c: 180:     return max_val;
  9237   0035A0  C005  F001         	movff	max_RGB@max_val,?_max_RGB
  9238   0035A4  C006  F002         	movff	max_RGB@max_val+1,?_max_RGB+1
  9239   0035A8  0012               	return		;funcret
  9240   0035AA                     __end_of_max_RGB:
  9241                           	callstack 0
  9242                           
  9243 ;; *************** function ___lmul *****************
  9244 ;; Defined at:
  9245 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;  multiplier      4    0[COMRAM] unsigned long 
  9248 ;;  multiplicand    4    4[COMRAM] unsigned long 
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;  product         4    8[COMRAM] unsigned long 
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  4    0[COMRAM] unsigned long 
  9253 ;; Registers used:
  9254 ;;		wreg, status,2, status,0
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9260 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9261 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9263 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9264 ;;Total ram usage:       12 bytes
  9265 ;; Hardware stack levels used: 1
  9266 ;; Hardware stack levels required when called: 1
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		_convert_HSV
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           	psect	text57
  9275   003694                     __ptext57:
  9276                           	callstack 0
  9277   003694                     ___lmul:
  9278                           	callstack 27
  9279   003694  0E00               	movlw	0
  9280   003696  6E09               	movwf	___lmul@product^0,c
  9281   003698  0E00               	movlw	0
  9282   00369A  6E0A               	movwf	(___lmul@product+1)^0,c
  9283   00369C  0E00               	movlw	0
  9284   00369E  6E0B               	movwf	(___lmul@product+2)^0,c
  9285   0036A0  0E00               	movlw	0
  9286   0036A2  6E0C               	movwf	(___lmul@product+3)^0,c
  9287   0036A4                     l3753:
  9288   0036A4  A001               	btfss	___lmul@multiplier^0,0,c
  9289   0036A6  EF57  F01B         	goto	u2691
  9290   0036AA  EF59  F01B         	goto	u2690
  9291   0036AE                     u2691:
  9292   0036AE  EF61  F01B         	goto	l3757
  9293   0036B2                     u2690:
  9294   0036B2  5005               	movf	___lmul@multiplicand^0,w,c
  9295   0036B4  2609               	addwf	___lmul@product^0,f,c
  9296   0036B6  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  9297   0036B8  220A               	addwfc	(___lmul@product+1)^0,f,c
  9298   0036BA  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  9299   0036BC  220B               	addwfc	(___lmul@product+2)^0,f,c
  9300   0036BE  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  9301   0036C0  220C               	addwfc	(___lmul@product+3)^0,f,c
  9302   0036C2                     l3757:
  9303   0036C2  90D8               	bcf	status,0,c
  9304   0036C4  3605               	rlcf	___lmul@multiplicand^0,f,c
  9305   0036C6  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  9306   0036C8  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  9307   0036CA  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  9308   0036CC  90D8               	bcf	status,0,c
  9309   0036CE  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  9310   0036D0  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  9311   0036D2  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  9312   0036D4  3201               	rrcf	___lmul@multiplier^0,f,c
  9313   0036D6  5001               	movf	___lmul@multiplier^0,w,c
  9314   0036D8  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  9315   0036DA  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  9316   0036DC  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  9317   0036DE  A4D8               	btfss	status,2,c
  9318   0036E0  EF74  F01B         	goto	u2701
  9319   0036E4  EF76  F01B         	goto	u2700
  9320   0036E8                     u2701:
  9321   0036E8  EF52  F01B         	goto	l3753
  9322   0036EC                     u2700:
  9323   0036EC  C009  F001         	movff	___lmul@product,?___lmul
  9324   0036F0  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  9325   0036F4  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  9326   0036F8  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  9327   0036FC  0012               	return		;funcret
  9328   0036FE                     __end_of___lmul:
  9329                           	callstack 0
  9330                           
  9331 ;; *************** function _colour_to_key *****************
  9332 ;; Defined at:
  9333 ;;		line 321 in file "color.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  p1              1    0[COMRAM] PTR struct HSV_val
  9336 ;;		 -> main@HSV_colour(6), 
  9337 ;;  p2              1    1[COMRAM] PTR struct RGBC_val
  9338 ;;		 -> main@RGBC_colour(8), 
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;  key             1    4[COMRAM] unsigned char 
  9341 ;; Return value:  Size  Location     Type
  9342 ;;                  1    wreg      unsigned char 
  9343 ;; Registers used:
  9344 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9352 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9353 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9354 ;;Total ram usage:        5 bytes
  9355 ;; Hardware stack levels used: 1
  9356 ;; Hardware stack levels required when called: 1
  9357 ;; This function calls:
  9358 ;;		Nothing
  9359 ;; This function is called by:
  9360 ;;		_forward_navigation
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           	psect	text58
  9365   0014E6                     __ptext58:
  9366                           	callstack 0
  9367   0014E6                     _colour_to_key:
  9368                           	callstack 28
  9369   0014E6                     
  9370                           ;color.c: 321: unsigned char colour_to_key(struct HSV_val *p1, struct RGBC_val *p2);colo
      +                          r.c: 322: {;color.c: 323:     unsigned char key = 0;
  9371   0014E6  0E00               	movlw	0
  9372   0014E8  6E05               	movwf	colour_to_key@key^0,c
  9373   0014EA                     
  9374                           ;color.c: 324:     if ( ((293 <= p1->H) && (p1->H <= 360)) &&
  9375   0014EA  5001               	movf	colour_to_key@p1^0,w,c
  9376   0014EC  6ED9               	movwf	fsr2l,c
  9377   0014EE  6ADA               	clrf	fsr2h,c
  9378   0014F0  0E25               	movlw	37
  9379   0014F2  5CDE               	subwf	postinc2,w,c
  9380   0014F4  0E01               	movlw	1
  9381   0014F6  58DE               	subwfb	postinc2,w,c
  9382   0014F8  A0D8               	btfss	status,0,c
  9383   0014FA  EF81  F00A         	goto	u3351
  9384   0014FE  EF83  F00A         	goto	u3350
  9385   001502                     u3351:
  9386   001502  EFB5  F00A         	goto	l4183
  9387   001506                     u3350:
  9388   001506  5001               	movf	colour_to_key@p1^0,w,c
  9389   001508  6ED9               	movwf	fsr2l,c
  9390   00150A  6ADA               	clrf	fsr2h,c
  9391   00150C  0E69               	movlw	105
  9392   00150E  5CDE               	subwf	postinc2,w,c
  9393   001510  0E01               	movlw	1
  9394   001512  58DE               	subwfb	postinc2,w,c
  9395   001514  B0D8               	btfsc	status,0,c
  9396   001516  EF8F  F00A         	goto	u3361
  9397   00151A  EF91  F00A         	goto	u3360
  9398   00151E                     u3361:
  9399   00151E  EFB5  F00A         	goto	l4183
  9400   001522                     u3360:
  9401   001522  5001               	movf	colour_to_key@p1^0,w,c
  9402   001524  6ED9               	movwf	fsr2l,c
  9403   001526  6ADA               	clrf	fsr2h,c
  9404   001528  0E02               	movlw	2
  9405   00152A  26D9               	addwf	fsr2l,f,c
  9406   00152C  0E01               	movlw	1
  9407   00152E  50DB               	movf	plusw2,w,c
  9408   001530  E109               	bnz	u3370
  9409   001532  0E2E               	movlw	46
  9410   001534  5CDE               	subwf	postinc2,w,c
  9411   001536  A0D8               	btfss	status,0,c
  9412   001538  EFA0  F00A         	goto	u3371
  9413   00153C  EFA2  F00A         	goto	u3370
  9414   001540                     u3371:
  9415   001540  EFB5  F00A         	goto	l4183
  9416   001544                     u3370:
  9417   001544  5001               	movf	colour_to_key@p1^0,w,c
  9418   001546  6ED9               	movwf	fsr2l,c
  9419   001548  6ADA               	clrf	fsr2h,c
  9420   00154A  0E02               	movlw	2
  9421   00154C  26D9               	addwf	fsr2l,f,c
  9422   00154E  0E01               	movlw	1
  9423   001550  50DB               	movf	plusw2,w,c
  9424   001552  E107               	bnz	u3381
  9425   001554  0E5B               	movlw	91
  9426   001556  5CDE               	subwf	postinc2,w,c
  9427   001558  B0D8               	btfsc	status,0,c
  9428   00155A  EFB1  F00A         	goto	u3381
  9429   00155E  EFB3  F00A         	goto	u3380
  9430   001562                     u3381:
  9431   001562  EFB5  F00A         	goto	l4183
  9432   001566                     u3380:
  9433   001566                     
  9434                           ;color.c: 325:          ((46 <= p1->S) && (p1->S <= 90))) {;color.c: 326:         key = 
      +                          1;
  9435   001566  0E01               	movlw	1
  9436   001568  6E05               	movwf	colour_to_key@key^0,c
  9437   00156A                     l4183:
  9438                           
  9439                           ;color.c: 329:     if ( ((113 <= p1->H) && (p1->H <= 153)) &&
  9440   00156A  5001               	movf	colour_to_key@p1^0,w,c
  9441   00156C  6ED9               	movwf	fsr2l,c
  9442   00156E  6ADA               	clrf	fsr2h,c
  9443   001570  0E01               	movlw	1
  9444   001572  50DB               	movf	plusw2,w,c
  9445   001574  E109               	bnz	u3390
  9446   001576  0E71               	movlw	113
  9447   001578  5CDE               	subwf	postinc2,w,c
  9448   00157A  A0D8               	btfss	status,0,c
  9449   00157C  EFC2  F00A         	goto	u3391
  9450   001580  EFC4  F00A         	goto	u3390
  9451   001584                     u3391:
  9452   001584  EFF7  F00A         	goto	l4193
  9453   001588                     u3390:
  9454   001588  5001               	movf	colour_to_key@p1^0,w,c
  9455   00158A  6ED9               	movwf	fsr2l,c
  9456   00158C  6ADA               	clrf	fsr2h,c
  9457   00158E  0E01               	movlw	1
  9458   001590  50DB               	movf	plusw2,w,c
  9459   001592  E107               	bnz	u3401
  9460   001594  0E9A               	movlw	154
  9461   001596  5CDE               	subwf	postinc2,w,c
  9462   001598  B0D8               	btfsc	status,0,c
  9463   00159A  EFD1  F00A         	goto	u3401
  9464   00159E  EFD3  F00A         	goto	u3400
  9465   0015A2                     u3401:
  9466   0015A2  EFF7  F00A         	goto	l4193
  9467   0015A6                     u3400:
  9468   0015A6  5001               	movf	colour_to_key@p1^0,w,c
  9469   0015A8  6ED9               	movwf	fsr2l,c
  9470   0015AA  6ADA               	clrf	fsr2h,c
  9471   0015AC  0E02               	movlw	2
  9472   0015AE  26D9               	addwf	fsr2l,f,c
  9473   0015B0  0E01               	movlw	1
  9474   0015B2  50DB               	movf	plusw2,w,c
  9475   0015B4  E109               	bnz	u3410
  9476   0015B6  0E0D               	movlw	13
  9477   0015B8  5CDE               	subwf	postinc2,w,c
  9478   0015BA  A0D8               	btfss	status,0,c
  9479   0015BC  EFE2  F00A         	goto	u3411
  9480   0015C0  EFE4  F00A         	goto	u3410
  9481   0015C4                     u3411:
  9482   0015C4  EFF7  F00A         	goto	l4193
  9483   0015C8                     u3410:
  9484   0015C8  5001               	movf	colour_to_key@p1^0,w,c
  9485   0015CA  6ED9               	movwf	fsr2l,c
  9486   0015CC  6ADA               	clrf	fsr2h,c
  9487   0015CE  0E02               	movlw	2
  9488   0015D0  26D9               	addwf	fsr2l,f,c
  9489   0015D2  0E01               	movlw	1
  9490   0015D4  50DB               	movf	plusw2,w,c
  9491   0015D6  E107               	bnz	u3421
  9492   0015D8  0E2C               	movlw	44
  9493   0015DA  5CDE               	subwf	postinc2,w,c
  9494   0015DC  B0D8               	btfsc	status,0,c
  9495   0015DE  EFF3  F00A         	goto	u3421
  9496   0015E2  EFF5  F00A         	goto	u3420
  9497   0015E6                     u3421:
  9498   0015E6  EFF7  F00A         	goto	l4193
  9499   0015EA                     u3420:
  9500   0015EA                     
  9501                           ;color.c: 330:          ((13 <= p1->S) && (p1->S <= 43))) {;color.c: 331:         key = 
      +                          2;
  9502   0015EA  0E02               	movlw	2
  9503   0015EC  6E05               	movwf	colour_to_key@key^0,c
  9504   0015EE                     l4193:
  9505                           
  9506                           ;color.c: 334:     if ( ((180 <= p1->H) && (p1->H <= 244)) &&
  9507   0015EE  5001               	movf	colour_to_key@p1^0,w,c
  9508   0015F0  6ED9               	movwf	fsr2l,c
  9509   0015F2  6ADA               	clrf	fsr2h,c
  9510   0015F4  0E01               	movlw	1
  9511   0015F6  50DB               	movf	plusw2,w,c
  9512   0015F8  E109               	bnz	u3430
  9513   0015FA  0EB4               	movlw	180
  9514   0015FC  5CDE               	subwf	postinc2,w,c
  9515   0015FE  A0D8               	btfss	status,0,c
  9516   001600  EF04  F00B         	goto	u3431
  9517   001604  EF06  F00B         	goto	u3430
  9518   001608                     u3431:
  9519   001608  EF39  F00B         	goto	l4203
  9520   00160C                     u3430:
  9521   00160C  5001               	movf	colour_to_key@p1^0,w,c
  9522   00160E  6ED9               	movwf	fsr2l,c
  9523   001610  6ADA               	clrf	fsr2h,c
  9524   001612  0E01               	movlw	1
  9525   001614  50DB               	movf	plusw2,w,c
  9526   001616  E107               	bnz	u3441
  9527   001618  0EF5               	movlw	245
  9528   00161A  5CDE               	subwf	postinc2,w,c
  9529   00161C  B0D8               	btfsc	status,0,c
  9530   00161E  EF13  F00B         	goto	u3441
  9531   001622  EF15  F00B         	goto	u3440
  9532   001626                     u3441:
  9533   001626  EF39  F00B         	goto	l4203
  9534   00162A                     u3440:
  9535   00162A  5001               	movf	colour_to_key@p1^0,w,c
  9536   00162C  6ED9               	movwf	fsr2l,c
  9537   00162E  6ADA               	clrf	fsr2h,c
  9538   001630  0E02               	movlw	2
  9539   001632  26D9               	addwf	fsr2l,f,c
  9540   001634  0E01               	movlw	1
  9541   001636  50DB               	movf	plusw2,w,c
  9542   001638  E109               	bnz	u3450
  9543   00163A  0E0D               	movlw	13
  9544   00163C  5CDE               	subwf	postinc2,w,c
  9545   00163E  A0D8               	btfss	status,0,c
  9546   001640  EF24  F00B         	goto	u3451
  9547   001644  EF26  F00B         	goto	u3450
  9548   001648                     u3451:
  9549   001648  EF39  F00B         	goto	l4203
  9550   00164C                     u3450:
  9551   00164C  5001               	movf	colour_to_key@p1^0,w,c
  9552   00164E  6ED9               	movwf	fsr2l,c
  9553   001650  6ADA               	clrf	fsr2h,c
  9554   001652  0E02               	movlw	2
  9555   001654  26D9               	addwf	fsr2l,f,c
  9556   001656  0E01               	movlw	1
  9557   001658  50DB               	movf	plusw2,w,c
  9558   00165A  E107               	bnz	u3461
  9559   00165C  0E39               	movlw	57
  9560   00165E  5CDE               	subwf	postinc2,w,c
  9561   001660  B0D8               	btfsc	status,0,c
  9562   001662  EF35  F00B         	goto	u3461
  9563   001666  EF37  F00B         	goto	u3460
  9564   00166A                     u3461:
  9565   00166A  EF39  F00B         	goto	l4203
  9566   00166E                     u3460:
  9567   00166E                     
  9568                           ;color.c: 335:          ((13 <= p1->S) && (p1->S <= 56))) {;color.c: 336:         key = 
      +                          3;
  9569   00166E  0E03               	movlw	3
  9570   001670  6E05               	movwf	colour_to_key@key^0,c
  9571   001672                     l4203:
  9572                           
  9573                           ;color.c: 339:     if ( ((10 <= p1->H) && (p1->H <= 31)) &&
  9574   001672  5001               	movf	colour_to_key@p1^0,w,c
  9575   001674  6ED9               	movwf	fsr2l,c
  9576   001676  6ADA               	clrf	fsr2h,c
  9577   001678  0E01               	movlw	1
  9578   00167A  50DB               	movf	plusw2,w,c
  9579   00167C  E109               	bnz	u3470
  9580   00167E  0E0A               	movlw	10
  9581   001680  5CDE               	subwf	postinc2,w,c
  9582   001682  A0D8               	btfss	status,0,c
  9583   001684  EF46  F00B         	goto	u3471
  9584   001688  EF48  F00B         	goto	u3470
  9585   00168C                     u3471:
  9586   00168C  EF7B  F00B         	goto	l4213
  9587   001690                     u3470:
  9588   001690  5001               	movf	colour_to_key@p1^0,w,c
  9589   001692  6ED9               	movwf	fsr2l,c
  9590   001694  6ADA               	clrf	fsr2h,c
  9591   001696  0E01               	movlw	1
  9592   001698  50DB               	movf	plusw2,w,c
  9593   00169A  E107               	bnz	u3481
  9594   00169C  0E20               	movlw	32
  9595   00169E  5CDE               	subwf	postinc2,w,c
  9596   0016A0  B0D8               	btfsc	status,0,c
  9597   0016A2  EF55  F00B         	goto	u3481
  9598   0016A6  EF57  F00B         	goto	u3480
  9599   0016AA                     u3481:
  9600   0016AA  EF7B  F00B         	goto	l4213
  9601   0016AE                     u3480:
  9602   0016AE  5001               	movf	colour_to_key@p1^0,w,c
  9603   0016B0  6ED9               	movwf	fsr2l,c
  9604   0016B2  6ADA               	clrf	fsr2h,c
  9605   0016B4  0E02               	movlw	2
  9606   0016B6  26D9               	addwf	fsr2l,f,c
  9607   0016B8  0E01               	movlw	1
  9608   0016BA  50DB               	movf	plusw2,w,c
  9609   0016BC  E109               	bnz	u3490
  9610   0016BE  0E11               	movlw	17
  9611   0016C0  5CDE               	subwf	postinc2,w,c
  9612   0016C2  A0D8               	btfss	status,0,c
  9613   0016C4  EF66  F00B         	goto	u3491
  9614   0016C8  EF68  F00B         	goto	u3490
  9615   0016CC                     u3491:
  9616   0016CC  EF7B  F00B         	goto	l4213
  9617   0016D0                     u3490:
  9618   0016D0  5001               	movf	colour_to_key@p1^0,w,c
  9619   0016D2  6ED9               	movwf	fsr2l,c
  9620   0016D4  6ADA               	clrf	fsr2h,c
  9621   0016D6  0E02               	movlw	2
  9622   0016D8  26D9               	addwf	fsr2l,f,c
  9623   0016DA  0E01               	movlw	1
  9624   0016DC  50DB               	movf	plusw2,w,c
  9625   0016DE  E107               	bnz	u3501
  9626   0016E0  0E21               	movlw	33
  9627   0016E2  5CDE               	subwf	postinc2,w,c
  9628   0016E4  B0D8               	btfsc	status,0,c
  9629   0016E6  EF77  F00B         	goto	u3501
  9630   0016EA  EF79  F00B         	goto	u3500
  9631   0016EE                     u3501:
  9632   0016EE  EF7B  F00B         	goto	l4213
  9633   0016F2                     u3500:
  9634   0016F2                     
  9635                           ;color.c: 340:          ((17 <= p1->S) && (p1->S <= 32))) {;color.c: 341:         key = 
      +                          4;
  9636   0016F2  0E04               	movlw	4
  9637   0016F4  6E05               	movwf	colour_to_key@key^0,c
  9638   0016F6                     l4213:
  9639                           
  9640                           ;color.c: 344:     if ( ((279 <= p1->H) && (p1->H <= 360)) &&
  9641   0016F6  5001               	movf	colour_to_key@p1^0,w,c
  9642   0016F8  6ED9               	movwf	fsr2l,c
  9643   0016FA  6ADA               	clrf	fsr2h,c
  9644   0016FC  0E17               	movlw	23
  9645   0016FE  5CDE               	subwf	postinc2,w,c
  9646   001700  0E01               	movlw	1
  9647   001702  58DE               	subwfb	postinc2,w,c
  9648   001704  A0D8               	btfss	status,0,c
  9649   001706  EF87  F00B         	goto	u3511
  9650   00170A  EF89  F00B         	goto	u3510
  9651   00170E                     u3511:
  9652   00170E  EFBB  F00B         	goto	l4223
  9653   001712                     u3510:
  9654   001712  5001               	movf	colour_to_key@p1^0,w,c
  9655   001714  6ED9               	movwf	fsr2l,c
  9656   001716  6ADA               	clrf	fsr2h,c
  9657   001718  0E69               	movlw	105
  9658   00171A  5CDE               	subwf	postinc2,w,c
  9659   00171C  0E01               	movlw	1
  9660   00171E  58DE               	subwfb	postinc2,w,c
  9661   001720  B0D8               	btfsc	status,0,c
  9662   001722  EF95  F00B         	goto	u3521
  9663   001726  EF97  F00B         	goto	u3520
  9664   00172A                     u3521:
  9665   00172A  EFBB  F00B         	goto	l4223
  9666   00172E                     u3520:
  9667   00172E  5001               	movf	colour_to_key@p1^0,w,c
  9668   001730  6ED9               	movwf	fsr2l,c
  9669   001732  6ADA               	clrf	fsr2h,c
  9670   001734  0E02               	movlw	2
  9671   001736  26D9               	addwf	fsr2l,f,c
  9672   001738  0E01               	movlw	1
  9673   00173A  50DB               	movf	plusw2,w,c
  9674   00173C  E109               	bnz	u3530
  9675   00173E  0E0B               	movlw	11
  9676   001740  5CDE               	subwf	postinc2,w,c
  9677   001742  A0D8               	btfss	status,0,c
  9678   001744  EFA6  F00B         	goto	u3531
  9679   001748  EFA8  F00B         	goto	u3530
  9680   00174C                     u3531:
  9681   00174C  EFBB  F00B         	goto	l4223
  9682   001750                     u3530:
  9683   001750  5001               	movf	colour_to_key@p1^0,w,c
  9684   001752  6ED9               	movwf	fsr2l,c
  9685   001754  6ADA               	clrf	fsr2h,c
  9686   001756  0E02               	movlw	2
  9687   001758  26D9               	addwf	fsr2l,f,c
  9688   00175A  0E01               	movlw	1
  9689   00175C  50DB               	movf	plusw2,w,c
  9690   00175E  E107               	bnz	u3541
  9691   001760  0E10               	movlw	16
  9692   001762  5CDE               	subwf	postinc2,w,c
  9693   001764  B0D8               	btfsc	status,0,c
  9694   001766  EFB7  F00B         	goto	u3541
  9695   00176A  EFB9  F00B         	goto	u3540
  9696   00176E                     u3541:
  9697   00176E  EFBB  F00B         	goto	l4223
  9698   001772                     u3540:
  9699   001772                     
  9700                           ;color.c: 345:          ((11 <= p1->S) && (p1->S <= 15))) {;color.c: 346:         key = 
      +                          5;
  9701   001772  0E05               	movlw	5
  9702   001774  6E05               	movwf	colour_to_key@key^0,c
  9703   001776                     l4223:
  9704                           
  9705                           ;color.c: 349:     if ( ((298 <= p1->H) && (p1->H <= 360)) &&
  9706   001776  5001               	movf	colour_to_key@p1^0,w,c
  9707   001778  6ED9               	movwf	fsr2l,c
  9708   00177A  6ADA               	clrf	fsr2h,c
  9709   00177C  0E2A               	movlw	42
  9710   00177E  5CDE               	subwf	postinc2,w,c
  9711   001780  0E01               	movlw	1
  9712   001782  58DE               	subwfb	postinc2,w,c
  9713   001784  A0D8               	btfss	status,0,c
  9714   001786  EFC7  F00B         	goto	u3551
  9715   00178A  EFC9  F00B         	goto	u3550
  9716   00178E                     u3551:
  9717   00178E  EFFB  F00B         	goto	l4233
  9718   001792                     u3550:
  9719   001792  5001               	movf	colour_to_key@p1^0,w,c
  9720   001794  6ED9               	movwf	fsr2l,c
  9721   001796  6ADA               	clrf	fsr2h,c
  9722   001798  0E69               	movlw	105
  9723   00179A  5CDE               	subwf	postinc2,w,c
  9724   00179C  0E01               	movlw	1
  9725   00179E  58DE               	subwfb	postinc2,w,c
  9726   0017A0  B0D8               	btfsc	status,0,c
  9727   0017A2  EFD5  F00B         	goto	u3561
  9728   0017A6  EFD7  F00B         	goto	u3560
  9729   0017AA                     u3561:
  9730   0017AA  EFFB  F00B         	goto	l4233
  9731   0017AE                     u3560:
  9732   0017AE  5001               	movf	colour_to_key@p1^0,w,c
  9733   0017B0  6ED9               	movwf	fsr2l,c
  9734   0017B2  6ADA               	clrf	fsr2h,c
  9735   0017B4  0E02               	movlw	2
  9736   0017B6  26D9               	addwf	fsr2l,f,c
  9737   0017B8  0E01               	movlw	1
  9738   0017BA  50DB               	movf	plusw2,w,c
  9739   0017BC  E109               	bnz	u3570
  9740   0017BE  0E14               	movlw	20
  9741   0017C0  5CDE               	subwf	postinc2,w,c
  9742   0017C2  A0D8               	btfss	status,0,c
  9743   0017C4  EFE6  F00B         	goto	u3571
  9744   0017C8  EFE8  F00B         	goto	u3570
  9745   0017CC                     u3571:
  9746   0017CC  EFFB  F00B         	goto	l4233
  9747   0017D0                     u3570:
  9748   0017D0  5001               	movf	colour_to_key@p1^0,w,c
  9749   0017D2  6ED9               	movwf	fsr2l,c
  9750   0017D4  6ADA               	clrf	fsr2h,c
  9751   0017D6  0E02               	movlw	2
  9752   0017D8  26D9               	addwf	fsr2l,f,c
  9753   0017DA  0E01               	movlw	1
  9754   0017DC  50DB               	movf	plusw2,w,c
  9755   0017DE  E107               	bnz	u3581
  9756   0017E0  0E2E               	movlw	46
  9757   0017E2  5CDE               	subwf	postinc2,w,c
  9758   0017E4  B0D8               	btfsc	status,0,c
  9759   0017E6  EFF7  F00B         	goto	u3581
  9760   0017EA  EFF9  F00B         	goto	u3580
  9761   0017EE                     u3581:
  9762   0017EE  EFFB  F00B         	goto	l4233
  9763   0017F2                     u3580:
  9764   0017F2                     
  9765                           ;color.c: 350:          ((20 <= p1->S) && (p1->S <= 45))) {;color.c: 351:         key = 
      +                          6;
  9766   0017F2  0E06               	movlw	6
  9767   0017F4  6E05               	movwf	colour_to_key@key^0,c
  9768   0017F6                     l4233:
  9769                           
  9770                           ;color.c: 354:     if ( ((154 <= p1->H) && (p1->H <= 207)) &&
  9771   0017F6  5001               	movf	colour_to_key@p1^0,w,c
  9772   0017F8  6ED9               	movwf	fsr2l,c
  9773   0017FA  6ADA               	clrf	fsr2h,c
  9774   0017FC  0E01               	movlw	1
  9775   0017FE  50DB               	movf	plusw2,w,c
  9776   001800  E109               	bnz	u3590
  9777   001802  0E9A               	movlw	154
  9778   001804  5CDE               	subwf	postinc2,w,c
  9779   001806  A0D8               	btfss	status,0,c
  9780   001808  EF08  F00C         	goto	u3591
  9781   00180C  EF0A  F00C         	goto	u3590
  9782   001810                     u3591:
  9783   001810  EF3D  F00C         	goto	l4243
  9784   001814                     u3590:
  9785   001814  5001               	movf	colour_to_key@p1^0,w,c
  9786   001816  6ED9               	movwf	fsr2l,c
  9787   001818  6ADA               	clrf	fsr2h,c
  9788   00181A  0E01               	movlw	1
  9789   00181C  50DB               	movf	plusw2,w,c
  9790   00181E  E107               	bnz	u3601
  9791   001820  0ED0               	movlw	208
  9792   001822  5CDE               	subwf	postinc2,w,c
  9793   001824  B0D8               	btfsc	status,0,c
  9794   001826  EF17  F00C         	goto	u3601
  9795   00182A  EF19  F00C         	goto	u3600
  9796   00182E                     u3601:
  9797   00182E  EF3D  F00C         	goto	l4243
  9798   001832                     u3600:
  9799   001832  5001               	movf	colour_to_key@p1^0,w,c
  9800   001834  6ED9               	movwf	fsr2l,c
  9801   001836  6ADA               	clrf	fsr2h,c
  9802   001838  0E02               	movlw	2
  9803   00183A  26D9               	addwf	fsr2l,f,c
  9804   00183C  0E01               	movlw	1
  9805   00183E  50DB               	movf	plusw2,w,c
  9806   001840  E109               	bnz	u3610
  9807   001842  0E0D               	movlw	13
  9808   001844  5CDE               	subwf	postinc2,w,c
  9809   001846  A0D8               	btfss	status,0,c
  9810   001848  EF28  F00C         	goto	u3611
  9811   00184C  EF2A  F00C         	goto	u3610
  9812   001850                     u3611:
  9813   001850  EF3D  F00C         	goto	l4243
  9814   001854                     u3610:
  9815   001854  5001               	movf	colour_to_key@p1^0,w,c
  9816   001856  6ED9               	movwf	fsr2l,c
  9817   001858  6ADA               	clrf	fsr2h,c
  9818   00185A  0E02               	movlw	2
  9819   00185C  26D9               	addwf	fsr2l,f,c
  9820   00185E  0E01               	movlw	1
  9821   001860  50DB               	movf	plusw2,w,c
  9822   001862  E107               	bnz	u3621
  9823   001864  0E2E               	movlw	46
  9824   001866  5CDE               	subwf	postinc2,w,c
  9825   001868  B0D8               	btfsc	status,0,c
  9826   00186A  EF39  F00C         	goto	u3621
  9827   00186E  EF3B  F00C         	goto	u3620
  9828   001872                     u3621:
  9829   001872  EF3D  F00C         	goto	l4243
  9830   001876                     u3620:
  9831   001876                     
  9832                           ;color.c: 355:          ((13 <= p1->S) && (p1->S <= 45))) {;color.c: 356:         key = 
      +                          7;
  9833   001876  0E07               	movlw	7
  9834   001878  6E05               	movwf	colour_to_key@key^0,c
  9835   00187A                     l4243:
  9836                           
  9837                           ;color.c: 359:     if ( ((3000 <= p2->C) && (p2->C <= 40000)) &&
  9838   00187A  5002               	movf	colour_to_key@p2^0,w,c
  9839   00187C  6ED9               	movwf	fsr2l,c
  9840   00187E  6ADA               	clrf	fsr2h,c
  9841   001880  0E06               	movlw	6
  9842   001882  26D9               	addwf	fsr2l,f,c
  9843   001884  0EB8               	movlw	184
  9844   001886  5CDE               	subwf	postinc2,w,c
  9845   001888  0E0B               	movlw	11
  9846   00188A  58DE               	subwfb	postinc2,w,c
  9847   00188C  A0D8               	btfss	status,0,c
  9848   00188E  EF4B  F00C         	goto	u3631
  9849   001892  EF4D  F00C         	goto	u3630
  9850   001896                     u3631:
  9851   001896  EF70  F00C         	goto	l4251
  9852   00189A                     u3630:
  9853   00189A  5002               	movf	colour_to_key@p2^0,w,c
  9854   00189C  6ED9               	movwf	fsr2l,c
  9855   00189E  6ADA               	clrf	fsr2h,c
  9856   0018A0  0E06               	movlw	6
  9857   0018A2  26D9               	addwf	fsr2l,f,c
  9858   0018A4  0E41               	movlw	65
  9859   0018A6  5CDE               	subwf	postinc2,w,c
  9860   0018A8  0E9C               	movlw	156
  9861   0018AA  58DE               	subwfb	postinc2,w,c
  9862   0018AC  B0D8               	btfsc	status,0,c
  9863   0018AE  EF5B  F00C         	goto	u3641
  9864   0018B2  EF5D  F00C         	goto	u3640
  9865   0018B6                     u3641:
  9866   0018B6  EF70  F00C         	goto	l4251
  9867   0018BA                     u3640:
  9868   0018BA  5001               	movf	colour_to_key@p1^0,w,c
  9869   0018BC  6ED9               	movwf	fsr2l,c
  9870   0018BE  6ADA               	clrf	fsr2h,c
  9871   0018C0  0E02               	movlw	2
  9872   0018C2  26D9               	addwf	fsr2l,f,c
  9873   0018C4  0E01               	movlw	1
  9874   0018C6  50DB               	movf	plusw2,w,c
  9875   0018C8  E107               	bnz	u3651
  9876   0018CA  0E0B               	movlw	11
  9877   0018CC  5CDE               	subwf	postinc2,w,c
  9878   0018CE  B0D8               	btfsc	status,0,c
  9879   0018D0  EF6C  F00C         	goto	u3651
  9880   0018D4  EF6E  F00C         	goto	u3650
  9881   0018D8                     u3651:
  9882   0018D8  EF70  F00C         	goto	l4251
  9883   0018DC                     u3650:
  9884   0018DC                     
  9885                           ;color.c: 360:          ((p1->S <= 10))) {;color.c: 361:         key = 8;
  9886   0018DC  0E08               	movlw	8
  9887   0018DE  6E05               	movwf	colour_to_key@key^0,c
  9888   0018E0                     l4251:
  9889                           
  9890                           ;color.c: 364:     if ( ((1000 <= p2->C) && (p2->C <= 2600)) &&
  9891   0018E0  5002               	movf	colour_to_key@p2^0,w,c
  9892   0018E2  6ED9               	movwf	fsr2l,c
  9893   0018E4  6ADA               	clrf	fsr2h,c
  9894   0018E6  0E06               	movlw	6
  9895   0018E8  26D9               	addwf	fsr2l,f,c
  9896   0018EA  0EE8               	movlw	232
  9897   0018EC  5CDE               	subwf	postinc2,w,c
  9898   0018EE  0E03               	movlw	3
  9899   0018F0  58DE               	subwfb	postinc2,w,c
  9900   0018F2  A0D8               	btfss	status,0,c
  9901   0018F4  EF7E  F00C         	goto	u3661
  9902   0018F8  EF80  F00C         	goto	u3660
  9903   0018FC                     u3661:
  9904   0018FC  EFA3  F00C         	goto	l136
  9905   001900                     u3660:
  9906   001900  5002               	movf	colour_to_key@p2^0,w,c
  9907   001902  6ED9               	movwf	fsr2l,c
  9908   001904  6ADA               	clrf	fsr2h,c
  9909   001906  0E06               	movlw	6
  9910   001908  26D9               	addwf	fsr2l,f,c
  9911   00190A  0E29               	movlw	41
  9912   00190C  5CDE               	subwf	postinc2,w,c
  9913   00190E  0E0A               	movlw	10
  9914   001910  58DE               	subwfb	postinc2,w,c
  9915   001912  B0D8               	btfsc	status,0,c
  9916   001914  EF8E  F00C         	goto	u3671
  9917   001918  EF90  F00C         	goto	u3670
  9918   00191C                     u3671:
  9919   00191C  EFA3  F00C         	goto	l136
  9920   001920                     u3670:
  9921   001920  5001               	movf	colour_to_key@p1^0,w,c
  9922   001922  6ED9               	movwf	fsr2l,c
  9923   001924  6ADA               	clrf	fsr2h,c
  9924   001926  0E02               	movlw	2
  9925   001928  26D9               	addwf	fsr2l,f,c
  9926   00192A  0E01               	movlw	1
  9927   00192C  50DB               	movf	plusw2,w,c
  9928   00192E  E107               	bnz	u3681
  9929   001930  0E0D               	movlw	13
  9930   001932  5CDE               	subwf	postinc2,w,c
  9931   001934  B0D8               	btfsc	status,0,c
  9932   001936  EF9F  F00C         	goto	u3681
  9933   00193A  EFA1  F00C         	goto	u3680
  9934   00193E                     u3681:
  9935   00193E  EFA3  F00C         	goto	l136
  9936   001942                     u3680:
  9937   001942                     
  9938                           ;color.c: 365:          ((p1->S <= 12))) {;color.c: 366:         key = 9;
  9939   001942  0E09               	movlw	9
  9940   001944  6E05               	movwf	colour_to_key@key^0,c
  9941   001946                     l136:
  9942                           
  9943                           ;color.c: 369:     return key;
  9944   001946  5005               	movf	colour_to_key@key^0,w,c
  9945   001948  0012               	return		;funcret
  9946   00194A                     __end_of_colour_to_key:
  9947                           	callstack 0
  9948                           
  9949 ;; *************** function _average_RGBC *****************
  9950 ;; Defined at:
  9951 ;;		line 124 in file "color.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;  p               1   13[COMRAM] PTR struct RGBC_val
  9954 ;;		 -> main@RGBC_colour(8), 
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;  i               1   16[COMRAM] unsigned char 
  9957 ;;  temp_C          4   29[COMRAM] unsigned long 
  9958 ;;  temp_B          4   25[COMRAM] unsigned long 
  9959 ;;  temp_G          4   21[COMRAM] unsigned long 
  9960 ;;  temp_R          4   17[COMRAM] unsigned long 
  9961 ;; Return value:  Size  Location     Type
  9962 ;;                  1    wreg      void 
  9963 ;; Registers used:
  9964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9965 ;; Tracked objects:
  9966 ;;		On entry : 0/0
  9967 ;;		On exit  : 0/0
  9968 ;;		Unchanged: 0/0
  9969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9970 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9971 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9972 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9973 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9974 ;;Total ram usage:       20 bytes
  9975 ;; Hardware stack levels used: 1
  9976 ;; Hardware stack levels required when called: 5
  9977 ;; This function calls:
  9978 ;;		___lldiv
  9979 ;;		_getRGBCval
  9980 ;; This function is called by:
  9981 ;;		_forward_navigation
  9982 ;; This function uses a non-reentrant model
  9983 ;;
  9984                           
  9985                           	psect	text59
  9986   002080                     __ptext59:
  9987                           	callstack 0
  9988   002080                     _average_RGBC:
  9989                           	callstack 24
  9990   002080                     
  9991                           ;color.c: 124: void average_RGBC(struct RGBC_val *p);color.c: 125: {;color.c: 127:     u
      +                          nsigned long temp_R = 0;
  9992   002080  0E00               	movlw	0
  9993   002082  6E12               	movwf	average_RGBC@temp_R^0,c
  9994   002084  0E00               	movlw	0
  9995   002086  6E13               	movwf	(average_RGBC@temp_R+1)^0,c
  9996   002088  0E00               	movlw	0
  9997   00208A  6E14               	movwf	(average_RGBC@temp_R+2)^0,c
  9998   00208C  0E00               	movlw	0
  9999   00208E  6E15               	movwf	(average_RGBC@temp_R+3)^0,c
 10000                           
 10001                           ;color.c: 128:     unsigned long temp_G = 0;
 10002   002090  0E00               	movlw	0
 10003   002092  6E16               	movwf	average_RGBC@temp_G^0,c
 10004   002094  0E00               	movlw	0
 10005   002096  6E17               	movwf	(average_RGBC@temp_G+1)^0,c
 10006   002098  0E00               	movlw	0
 10007   00209A  6E18               	movwf	(average_RGBC@temp_G+2)^0,c
 10008   00209C  0E00               	movlw	0
 10009   00209E  6E19               	movwf	(average_RGBC@temp_G+3)^0,c
 10010                           
 10011                           ;color.c: 129:     unsigned long temp_B = 0;
 10012   0020A0  0E00               	movlw	0
 10013   0020A2  6E1A               	movwf	average_RGBC@temp_B^0,c
 10014   0020A4  0E00               	movlw	0
 10015   0020A6  6E1B               	movwf	(average_RGBC@temp_B+1)^0,c
 10016   0020A8  0E00               	movlw	0
 10017   0020AA  6E1C               	movwf	(average_RGBC@temp_B+2)^0,c
 10018   0020AC  0E00               	movlw	0
 10019   0020AE  6E1D               	movwf	(average_RGBC@temp_B+3)^0,c
 10020                           
 10021                           ;color.c: 130:     unsigned long temp_C = 0;
 10022   0020B0  0E00               	movlw	0
 10023   0020B2  6E1E               	movwf	average_RGBC@temp_C^0,c
 10024   0020B4  0E00               	movlw	0
 10025   0020B6  6E1F               	movwf	(average_RGBC@temp_C+1)^0,c
 10026   0020B8  0E00               	movlw	0
 10027   0020BA  6E20               	movwf	(average_RGBC@temp_C+2)^0,c
 10028   0020BC  0E00               	movlw	0
 10029   0020BE  6E21               	movwf	(average_RGBC@temp_C+3)^0,c
 10030                           
 10031                           ;color.c: 136:     for (unsigned char i = 0; i < sample_count; i++) {
 10032   0020C0  0E00               	movlw	0
 10033   0020C2  6E11               	movwf	average_RGBC@i^0,c
 10034   0020C4  EFAB  F010         	goto	l4033
 10035   0020C8                     l4021:
 10036                           
 10037                           ;color.c: 138:         getRGBCval(p);
 10038   0020C8  C00E  F00C         	movff	average_RGBC@p,getRGBCval@p
 10039   0020CC  EC40  F01D         	call	_getRGBCval	;wreg free
 10040   0020D0                     
 10041                           ;color.c: 140:         temp_R += (unsigned long)p->R;
 10042   0020D0  500E               	movf	average_RGBC@p^0,w,c
 10043   0020D2  6ED9               	movwf	fsr2l,c
 10044   0020D4  6ADA               	clrf	fsr2h,c
 10045   0020D6  CFDE F00F          	movff	postinc2,??_average_RGBC
 10046   0020DA  CFDD F010          	movff	postdec2,??_average_RGBC+1
 10047   0020DE  500F               	movf	??_average_RGBC^0,w,c
 10048   0020E0  2612               	addwf	average_RGBC@temp_R^0,f,c
 10049   0020E2  5010               	movf	(??_average_RGBC+1)^0,w,c
 10050   0020E4  2213               	addwfc	(average_RGBC@temp_R+1)^0,f,c
 10051   0020E6  0E00               	movlw	0
 10052   0020E8  2214               	addwfc	(average_RGBC@temp_R+2)^0,f,c
 10053   0020EA  0E00               	movlw	0
 10054   0020EC  2215               	addwfc	(average_RGBC@temp_R+3)^0,f,c
 10055   0020EE                     
 10056                           ;color.c: 141:         temp_G += (unsigned long)p->G;
 10057   0020EE  500E               	movf	average_RGBC@p^0,w,c
 10058   0020F0  6ED9               	movwf	fsr2l,c
 10059   0020F2  6ADA               	clrf	fsr2h,c
 10060   0020F4  0E02               	movlw	2
 10061   0020F6  26D9               	addwf	fsr2l,f,c
 10062   0020F8  CFDE F00F          	movff	postinc2,??_average_RGBC
 10063   0020FC  CFDD F010          	movff	postdec2,??_average_RGBC+1
 10064   002100  500F               	movf	??_average_RGBC^0,w,c
 10065   002102  2616               	addwf	average_RGBC@temp_G^0,f,c
 10066   002104  5010               	movf	(??_average_RGBC+1)^0,w,c
 10067   002106  2217               	addwfc	(average_RGBC@temp_G+1)^0,f,c
 10068   002108  0E00               	movlw	0
 10069   00210A  2218               	addwfc	(average_RGBC@temp_G+2)^0,f,c
 10070   00210C  0E00               	movlw	0
 10071   00210E  2219               	addwfc	(average_RGBC@temp_G+3)^0,f,c
 10072   002110                     
 10073                           ;color.c: 142:         temp_B += (unsigned long)p->B;
 10074   002110  500E               	movf	average_RGBC@p^0,w,c
 10075   002112  6ED9               	movwf	fsr2l,c
 10076   002114  6ADA               	clrf	fsr2h,c
 10077   002116  0E04               	movlw	4
 10078   002118  26D9               	addwf	fsr2l,f,c
 10079   00211A  CFDE F00F          	movff	postinc2,??_average_RGBC
 10080   00211E  CFDD F010          	movff	postdec2,??_average_RGBC+1
 10081   002122  500F               	movf	??_average_RGBC^0,w,c
 10082   002124  261A               	addwf	average_RGBC@temp_B^0,f,c
 10083   002126  5010               	movf	(??_average_RGBC+1)^0,w,c
 10084   002128  221B               	addwfc	(average_RGBC@temp_B+1)^0,f,c
 10085   00212A  0E00               	movlw	0
 10086   00212C  221C               	addwfc	(average_RGBC@temp_B+2)^0,f,c
 10087   00212E  0E00               	movlw	0
 10088   002130  221D               	addwfc	(average_RGBC@temp_B+3)^0,f,c
 10089   002132                     
 10090                           ;color.c: 143:         temp_C += (unsigned long)p->C;
 10091   002132  500E               	movf	average_RGBC@p^0,w,c
 10092   002134  6ED9               	movwf	fsr2l,c
 10093   002136  6ADA               	clrf	fsr2h,c
 10094   002138  0E06               	movlw	6
 10095   00213A  26D9               	addwf	fsr2l,f,c
 10096   00213C  CFDE F00F          	movff	postinc2,??_average_RGBC
 10097   002140  CFDD F010          	movff	postdec2,??_average_RGBC+1
 10098   002144  500F               	movf	??_average_RGBC^0,w,c
 10099   002146  261E               	addwf	average_RGBC@temp_C^0,f,c
 10100   002148  5010               	movf	(??_average_RGBC+1)^0,w,c
 10101   00214A  221F               	addwfc	(average_RGBC@temp_C+1)^0,f,c
 10102   00214C  0E00               	movlw	0
 10103   00214E  2220               	addwfc	(average_RGBC@temp_C+2)^0,f,c
 10104   002150  0E00               	movlw	0
 10105   002152  2221               	addwfc	(average_RGBC@temp_C+3)^0,f,c
 10106   002154                     
 10107                           ;color.c: 144:     }
 10108   002154  2A11               	incf	average_RGBC@i^0,f,c
 10109   002156                     l4033:
 10110   002156  0E13               	movlw	19
 10111   002158  6411               	cpfsgt	average_RGBC@i^0,c
 10112   00215A  EFB1  F010         	goto	u3221
 10113   00215E  EFB3  F010         	goto	u3220
 10114   002162                     u3221:
 10115   002162  EF64  F010         	goto	l4021
 10116   002166                     u3220:
 10117   002166  C012  F001         	movff	average_RGBC@temp_R,___lldiv@dividend
 10118   00216A  C013  F002         	movff	average_RGBC@temp_R+1,___lldiv@dividend+1
 10119   00216E  C014  F003         	movff	average_RGBC@temp_R+2,___lldiv@dividend+2
 10120   002172  C015  F004         	movff	average_RGBC@temp_R+3,___lldiv@dividend+3
 10121   002176  0E14               	movlw	20
 10122   002178  6E05               	movwf	___lldiv@divisor^0,c
 10123   00217A  0E00               	movlw	0
 10124   00217C  6E06               	movwf	(___lldiv@divisor+1)^0,c
 10125   00217E  0E00               	movlw	0
 10126   002180  6E07               	movwf	(___lldiv@divisor+2)^0,c
 10127   002182  0E00               	movlw	0
 10128   002184  6E08               	movwf	(___lldiv@divisor+3)^0,c
 10129   002186  ECF8  F018         	call	___lldiv	;wreg free
 10130   00218A  C001  F012         	movff	?___lldiv,average_RGBC@temp_R
 10131   00218E  C002  F013         	movff	?___lldiv+1,average_RGBC@temp_R+1
 10132   002192  C003  F014         	movff	?___lldiv+2,average_RGBC@temp_R+2
 10133   002196  C004  F015         	movff	?___lldiv+3,average_RGBC@temp_R+3
 10134   00219A  C016  F001         	movff	average_RGBC@temp_G,___lldiv@dividend
 10135   00219E  C017  F002         	movff	average_RGBC@temp_G+1,___lldiv@dividend+1
 10136   0021A2  C018  F003         	movff	average_RGBC@temp_G+2,___lldiv@dividend+2
 10137   0021A6  C019  F004         	movff	average_RGBC@temp_G+3,___lldiv@dividend+3
 10138   0021AA  0E14               	movlw	20
 10139   0021AC  6E05               	movwf	___lldiv@divisor^0,c
 10140   0021AE  0E00               	movlw	0
 10141   0021B0  6E06               	movwf	(___lldiv@divisor+1)^0,c
 10142   0021B2  0E00               	movlw	0
 10143   0021B4  6E07               	movwf	(___lldiv@divisor+2)^0,c
 10144   0021B6  0E00               	movlw	0
 10145   0021B8  6E08               	movwf	(___lldiv@divisor+3)^0,c
 10146   0021BA  ECF8  F018         	call	___lldiv	;wreg free
 10147   0021BE  C001  F016         	movff	?___lldiv,average_RGBC@temp_G
 10148   0021C2  C002  F017         	movff	?___lldiv+1,average_RGBC@temp_G+1
 10149   0021C6  C003  F018         	movff	?___lldiv+2,average_RGBC@temp_G+2
 10150   0021CA  C004  F019         	movff	?___lldiv+3,average_RGBC@temp_G+3
 10151   0021CE  C01A  F001         	movff	average_RGBC@temp_B,___lldiv@dividend
 10152   0021D2  C01B  F002         	movff	average_RGBC@temp_B+1,___lldiv@dividend+1
 10153   0021D6  C01C  F003         	movff	average_RGBC@temp_B+2,___lldiv@dividend+2
 10154   0021DA  C01D  F004         	movff	average_RGBC@temp_B+3,___lldiv@dividend+3
 10155   0021DE  0E14               	movlw	20
 10156   0021E0  6E05               	movwf	___lldiv@divisor^0,c
 10157   0021E2  0E00               	movlw	0
 10158   0021E4  6E06               	movwf	(___lldiv@divisor+1)^0,c
 10159   0021E6  0E00               	movlw	0
 10160   0021E8  6E07               	movwf	(___lldiv@divisor+2)^0,c
 10161   0021EA  0E00               	movlw	0
 10162   0021EC  6E08               	movwf	(___lldiv@divisor+3)^0,c
 10163   0021EE  ECF8  F018         	call	___lldiv	;wreg free
 10164   0021F2  C001  F01A         	movff	?___lldiv,average_RGBC@temp_B
 10165   0021F6  C002  F01B         	movff	?___lldiv+1,average_RGBC@temp_B+1
 10166   0021FA  C003  F01C         	movff	?___lldiv+2,average_RGBC@temp_B+2
 10167   0021FE  C004  F01D         	movff	?___lldiv+3,average_RGBC@temp_B+3
 10168   002202  C01E  F001         	movff	average_RGBC@temp_C,___lldiv@dividend
 10169   002206  C01F  F002         	movff	average_RGBC@temp_C+1,___lldiv@dividend+1
 10170   00220A  C020  F003         	movff	average_RGBC@temp_C+2,___lldiv@dividend+2
 10171   00220E  C021  F004         	movff	average_RGBC@temp_C+3,___lldiv@dividend+3
 10172   002212  0E14               	movlw	20
 10173   002214  6E05               	movwf	___lldiv@divisor^0,c
 10174   002216  0E00               	movlw	0
 10175   002218  6E06               	movwf	(___lldiv@divisor+1)^0,c
 10176   00221A  0E00               	movlw	0
 10177   00221C  6E07               	movwf	(___lldiv@divisor+2)^0,c
 10178   00221E  0E00               	movlw	0
 10179   002220  6E08               	movwf	(___lldiv@divisor+3)^0,c
 10180   002222  ECF8  F018         	call	___lldiv	;wreg free
 10181   002226  C001  F01E         	movff	?___lldiv,average_RGBC@temp_C
 10182   00222A  C002  F01F         	movff	?___lldiv+1,average_RGBC@temp_C+1
 10183   00222E  C003  F020         	movff	?___lldiv+2,average_RGBC@temp_C+2
 10184   002232  C004  F021         	movff	?___lldiv+3,average_RGBC@temp_C+3
 10185   002236                     
 10186                           ;color.c: 153:     p->R = (unsigned int)temp_R;
 10187   002236  500E               	movf	average_RGBC@p^0,w,c
 10188   002238  6ED9               	movwf	fsr2l,c
 10189   00223A  6ADA               	clrf	fsr2h,c
 10190   00223C  C012  FFDE         	movff	average_RGBC@temp_R,postinc2
 10191   002240  C013  FFDD         	movff	average_RGBC@temp_R+1,postdec2
 10192   002244                     
 10193                           ;color.c: 154:     p->G = (unsigned int)temp_G;
 10194   002244  500E               	movf	average_RGBC@p^0,w,c
 10195   002246  6ED9               	movwf	fsr2l,c
 10196   002248  6ADA               	clrf	fsr2h,c
 10197   00224A  0E02               	movlw	2
 10198   00224C  26D9               	addwf	fsr2l,f,c
 10199   00224E  C016  FFDE         	movff	average_RGBC@temp_G,postinc2
 10200   002252  C017  FFDD         	movff	average_RGBC@temp_G+1,postdec2
 10201   002256                     
 10202                           ;color.c: 155:     p->B = (unsigned int)temp_B;
 10203   002256  500E               	movf	average_RGBC@p^0,w,c
 10204   002258  6ED9               	movwf	fsr2l,c
 10205   00225A  6ADA               	clrf	fsr2h,c
 10206   00225C  0E04               	movlw	4
 10207   00225E  26D9               	addwf	fsr2l,f,c
 10208   002260  C01A  FFDE         	movff	average_RGBC@temp_B,postinc2
 10209   002264  C01B  FFDD         	movff	average_RGBC@temp_B+1,postdec2
 10210   002268                     
 10211                           ;color.c: 156:     p->C = (unsigned int)temp_C;
 10212   002268  500E               	movf	average_RGBC@p^0,w,c
 10213   00226A  6ED9               	movwf	fsr2l,c
 10214   00226C  6ADA               	clrf	fsr2h,c
 10215   00226E  0E06               	movlw	6
 10216   002270  26D9               	addwf	fsr2l,f,c
 10217   002272  C01E  FFDE         	movff	average_RGBC@temp_C,postinc2
 10218   002276  C01F  FFDD         	movff	average_RGBC@temp_C+1,postdec2
 10219   00227A  0012               	return		;funcret
 10220   00227C                     __end_of_average_RGBC:
 10221                           	callstack 0
 10222                           
 10223 ;; *************** function _getRGBCval *****************
 10224 ;; Defined at:
 10225 ;;		line 112 in file "color.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;  p               1   11[COMRAM] PTR struct RGBC_val
 10228 ;;		 -> main@RGBC_colour(8), 
 10229 ;; Auto vars:     Size  Location     Type
 10230 ;;		None
 10231 ;; Return value:  Size  Location     Type
 10232 ;;                  1    wreg      void 
 10233 ;; Registers used:
 10234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10235 ;; Tracked objects:
 10236 ;;		On entry : 0/0
 10237 ;;		On exit  : 0/0
 10238 ;;		Unchanged: 0/0
 10239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10240 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10244 ;;Total ram usage:        1 bytes
 10245 ;; Hardware stack levels used: 1
 10246 ;; Hardware stack levels required when called: 4
 10247 ;; This function calls:
 10248 ;;		_color_read_Blue
 10249 ;;		_color_read_Clear
 10250 ;;		_color_read_Green
 10251 ;;		_color_read_Red
 10252 ;; This function is called by:
 10253 ;;		_average_RGBC
 10254 ;;		_wait_for_wall
 10255 ;; This function uses a non-reentrant model
 10256 ;;
 10257                           
 10258                           	psect	text60
 10259   003A80                     __ptext60:
 10260                           	callstack 0
 10261   003A80                     _getRGBCval:
 10262                           	callstack 24
 10263   003A80                     
 10264                           ;color.c: 112: void getRGBCval(struct RGBC_val *p);color.c: 113: {;color.c: 114:     p->
      +                          R = color_read_Red();
 10265   003A80  EC93  F01D         	call	_color_read_Red	;wreg free
 10266   003A84  500C               	movf	getRGBCval@p^0,w,c
 10267   003A86  6ED9               	movwf	fsr2l,c
 10268   003A88  6ADA               	clrf	fsr2h,c
 10269   003A8A  C005  FFDE         	movff	?_color_read_Red,postinc2
 10270   003A8E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
 10271                           
 10272                           ;color.c: 115:     p->G = color_read_Green();
 10273   003A92  ECBB  F01D         	call	_color_read_Green	;wreg free
 10274   003A96  500C               	movf	getRGBCval@p^0,w,c
 10275   003A98  6ED9               	movwf	fsr2l,c
 10276   003A9A  6ADA               	clrf	fsr2h,c
 10277   003A9C  0E02               	movlw	2
 10278   003A9E  26D9               	addwf	fsr2l,f,c
 10279   003AA0  C005  FFDE         	movff	?_color_read_Green,postinc2
 10280   003AA4  C006  FFDD         	movff	?_color_read_Green+1,postdec2
 10281                           
 10282                           ;color.c: 116:     p->B = color_read_Blue();
 10283   003AA8  EC0B  F01E         	call	_color_read_Blue	;wreg free
 10284   003AAC  500C               	movf	getRGBCval@p^0,w,c
 10285   003AAE  6ED9               	movwf	fsr2l,c
 10286   003AB0  6ADA               	clrf	fsr2h,c
 10287   003AB2  0E04               	movlw	4
 10288   003AB4  26D9               	addwf	fsr2l,f,c
 10289   003AB6  C005  FFDE         	movff	?_color_read_Blue,postinc2
 10290   003ABA  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
 10291                           
 10292                           ;color.c: 117:     p->C = color_read_Clear();
 10293   003ABE  ECE3  F01D         	call	_color_read_Clear	;wreg free
 10294   003AC2  500C               	movf	getRGBCval@p^0,w,c
 10295   003AC4  6ED9               	movwf	fsr2l,c
 10296   003AC6  6ADA               	clrf	fsr2h,c
 10297   003AC8  0E06               	movlw	6
 10298   003ACA  26D9               	addwf	fsr2l,f,c
 10299   003ACC  C005  FFDE         	movff	?_color_read_Clear,postinc2
 10300   003AD0  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
 10301   003AD4  0012               	return		;funcret
 10302   003AD6                     __end_of_getRGBCval:
 10303                           	callstack 0
 10304                           
 10305 ;; *************** function _color_read_Red *****************
 10306 ;; Defined at:
 10307 ;;		line 40 in file "color.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;		None
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;  tmp             2    9[COMRAM] unsigned int 
 10312 ;; Return value:  Size  Location     Type
 10313 ;;                  2    4[COMRAM] unsigned int 
 10314 ;; Registers used:
 10315 ;;		wreg, status,2, status,0, cstack
 10316 ;; Tracked objects:
 10317 ;;		On entry : 0/0
 10318 ;;		On exit  : 0/0
 10319 ;;		Unchanged: 0/0
 10320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10321 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10322 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10323 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10324 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10325 ;;Total ram usage:        7 bytes
 10326 ;; Hardware stack levels used: 1
 10327 ;; Hardware stack levels required when called: 3
 10328 ;; This function calls:
 10329 ;;		_I2C_2_Master_Read
 10330 ;;		_I2C_2_Master_RepStart
 10331 ;;		_I2C_2_Master_Start
 10332 ;;		_I2C_2_Master_Stop
 10333 ;;		_I2C_2_Master_Write
 10334 ;; This function is called by:
 10335 ;;		_getRGBCval
 10336 ;; This function uses a non-reentrant model
 10337 ;;
 10338                           
 10339                           	psect	text61
 10340   003B26                     __ptext61:
 10341                           	callstack 0
 10342   003B26                     _color_read_Red:
 10343                           	callstack 24
 10344   003B26                     
 10345                           ;color.c: 42:  unsigned int tmp;;color.c: 43:  I2C_2_Master_Start();
 10346   003B26  ECCD  F020         	call	_I2C_2_Master_Start	;wreg free
 10347                           
 10348                           ;color.c: 44:  I2C_2_Master_Write(0x52 | 0x00);
 10349   003B2A  0E52               	movlw	82
 10350   003B2C  ECB1  F020         	call	_I2C_2_Master_Write
 10351                           
 10352                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
 10353   003B30  0EB6               	movlw	182
 10354   003B32  ECB1  F020         	call	_I2C_2_Master_Write
 10355                           
 10356                           ;color.c: 46:  I2C_2_Master_RepStart();
 10357   003B36  ECC3  F020         	call	_I2C_2_Master_RepStart	;wreg free
 10358                           
 10359                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
 10360   003B3A  0E53               	movlw	83
 10361   003B3C  ECB1  F020         	call	_I2C_2_Master_Write
 10362                           
 10363                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
 10364   003B40  0E01               	movlw	1
 10365   003B42  ECC3  F01E         	call	_I2C_2_Master_Read
 10366   003B46  6E07               	movwf	??_color_read_Red^0,c
 10367   003B48  5007               	movf	??_color_read_Red^0,w,c
 10368   003B4A  6E0A               	movwf	color_read_Red@tmp^0,c
 10369   003B4C  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
 10370                           
 10371                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10372   003B4E  0E00               	movlw	0
 10373   003B50  ECC3  F01E         	call	_I2C_2_Master_Read
 10374   003B54  6E07               	movwf	??_color_read_Red^0,c
 10375   003B56  5007               	movf	??_color_read_Red^0,w,c
 10376   003B58  6E09               	movwf	(??_color_read_Red+2)^0,c
 10377   003B5A  6A08               	clrf	(??_color_read_Red+1)^0,c
 10378   003B5C  500A               	movf	color_read_Red@tmp^0,w,c
 10379   003B5E  1008               	iorwf	(??_color_read_Red+1)^0,w,c
 10380   003B60  6E0A               	movwf	color_read_Red@tmp^0,c
 10381   003B62  500B               	movf	(color_read_Red@tmp+1)^0,w,c
 10382   003B64  1009               	iorwf	(??_color_read_Red+2)^0,w,c
 10383   003B66  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
 10384                           
 10385                           ;color.c: 50:  I2C_2_Master_Stop();
 10386   003B68  ECC8  F020         	call	_I2C_2_Master_Stop	;wreg free
 10387   003B6C                     
 10388                           ;color.c: 51:  return tmp;
 10389   003B6C  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
 10390   003B70  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10391   003B74  0012               	return		;funcret
 10392   003B76                     __end_of_color_read_Red:
 10393                           	callstack 0
 10394                           
 10395 ;; *************** function _color_read_Green *****************
 10396 ;; Defined at:
 10397 ;;		line 58 in file "color.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;		None
 10400 ;; Auto vars:     Size  Location     Type
 10401 ;;  tmp             2    9[COMRAM] unsigned int 
 10402 ;; Return value:  Size  Location     Type
 10403 ;;                  2    4[COMRAM] unsigned int 
 10404 ;; Registers used:
 10405 ;;		wreg, status,2, status,0, cstack
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10411 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10412 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10413 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10414 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10415 ;;Total ram usage:        7 bytes
 10416 ;; Hardware stack levels used: 1
 10417 ;; Hardware stack levels required when called: 3
 10418 ;; This function calls:
 10419 ;;		_I2C_2_Master_Read
 10420 ;;		_I2C_2_Master_RepStart
 10421 ;;		_I2C_2_Master_Start
 10422 ;;		_I2C_2_Master_Stop
 10423 ;;		_I2C_2_Master_Write
 10424 ;; This function is called by:
 10425 ;;		_getRGBCval
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           	psect	text62
 10430   003B76                     __ptext62:
 10431                           	callstack 0
 10432   003B76                     _color_read_Green:
 10433                           	callstack 24
 10434   003B76                     
 10435                           ;color.c: 60:     unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
 10436   003B76  ECCD  F020         	call	_I2C_2_Master_Start	;wreg free
 10437                           
 10438                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
 10439   003B7A  0E52               	movlw	82
 10440   003B7C  ECB1  F020         	call	_I2C_2_Master_Write
 10441                           
 10442                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x18);
 10443   003B80  0EB8               	movlw	184
 10444   003B82  ECB1  F020         	call	_I2C_2_Master_Write
 10445                           
 10446                           ;color.c: 64:  I2C_2_Master_RepStart();
 10447   003B86  ECC3  F020         	call	_I2C_2_Master_RepStart	;wreg free
 10448                           
 10449                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
 10450   003B8A  0E53               	movlw	83
 10451   003B8C  ECB1  F020         	call	_I2C_2_Master_Write
 10452                           
 10453                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
 10454   003B90  0E01               	movlw	1
 10455   003B92  ECC3  F01E         	call	_I2C_2_Master_Read
 10456   003B96  6E07               	movwf	??_color_read_Green^0,c
 10457   003B98  5007               	movf	??_color_read_Green^0,w,c
 10458   003B9A  6E0A               	movwf	color_read_Green@tmp^0,c
 10459   003B9C  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
 10460                           
 10461                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10462   003B9E  0E00               	movlw	0
 10463   003BA0  ECC3  F01E         	call	_I2C_2_Master_Read
 10464   003BA4  6E07               	movwf	??_color_read_Green^0,c
 10465   003BA6  5007               	movf	??_color_read_Green^0,w,c
 10466   003BA8  6E09               	movwf	(??_color_read_Green+2)^0,c
 10467   003BAA  6A08               	clrf	(??_color_read_Green+1)^0,c
 10468   003BAC  500A               	movf	color_read_Green@tmp^0,w,c
 10469   003BAE  1008               	iorwf	(??_color_read_Green+1)^0,w,c
 10470   003BB0  6E0A               	movwf	color_read_Green@tmp^0,c
 10471   003BB2  500B               	movf	(color_read_Green@tmp+1)^0,w,c
 10472   003BB4  1009               	iorwf	(??_color_read_Green+2)^0,w,c
 10473   003BB6  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
 10474                           
 10475                           ;color.c: 68:  I2C_2_Master_Stop();
 10476   003BB8  ECC8  F020         	call	_I2C_2_Master_Stop	;wreg free
 10477   003BBC                     
 10478                           ;color.c: 69:  return tmp;
 10479   003BBC  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
 10480   003BC0  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10481   003BC4  0012               	return		;funcret
 10482   003BC6                     __end_of_color_read_Green:
 10483                           	callstack 0
 10484                           
 10485 ;; *************** function _color_read_Clear *****************
 10486 ;; Defined at:
 10487 ;;		line 94 in file "color.c"
 10488 ;; Parameters:    Size  Location     Type
 10489 ;;		None
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;  tmp             2    9[COMRAM] unsigned int 
 10492 ;; Return value:  Size  Location     Type
 10493 ;;                  2    4[COMRAM] unsigned int 
 10494 ;; Registers used:
 10495 ;;		wreg, status,2, status,0, cstack
 10496 ;; Tracked objects:
 10497 ;;		On entry : 0/0
 10498 ;;		On exit  : 0/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10503 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10504 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10505 ;;Total ram usage:        7 bytes
 10506 ;; Hardware stack levels used: 1
 10507 ;; Hardware stack levels required when called: 3
 10508 ;; This function calls:
 10509 ;;		_I2C_2_Master_Read
 10510 ;;		_I2C_2_Master_RepStart
 10511 ;;		_I2C_2_Master_Start
 10512 ;;		_I2C_2_Master_Stop
 10513 ;;		_I2C_2_Master_Write
 10514 ;; This function is called by:
 10515 ;;		_getRGBCval
 10516 ;; This function uses a non-reentrant model
 10517 ;;
 10518                           
 10519                           	psect	text63
 10520   003BC6                     __ptext63:
 10521                           	callstack 0
 10522   003BC6                     _color_read_Clear:
 10523                           	callstack 24
 10524   003BC6                     
 10525                           ;color.c: 96:     unsigned int tmp;;color.c: 97:  I2C_2_Master_Start();
 10526   003BC6  ECCD  F020         	call	_I2C_2_Master_Start	;wreg free
 10527                           
 10528                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
 10529   003BCA  0E52               	movlw	82
 10530   003BCC  ECB1  F020         	call	_I2C_2_Master_Write
 10531                           
 10532                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
 10533   003BD0  0EB4               	movlw	180
 10534   003BD2  ECB1  F020         	call	_I2C_2_Master_Write
 10535                           
 10536                           ;color.c: 100:  I2C_2_Master_RepStart();
 10537   003BD6  ECC3  F020         	call	_I2C_2_Master_RepStart	;wreg free
 10538                           
 10539                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
 10540   003BDA  0E53               	movlw	83
 10541   003BDC  ECB1  F020         	call	_I2C_2_Master_Write
 10542                           
 10543                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
 10544   003BE0  0E01               	movlw	1
 10545   003BE2  ECC3  F01E         	call	_I2C_2_Master_Read
 10546   003BE6  6E07               	movwf	??_color_read_Clear^0,c
 10547   003BE8  5007               	movf	??_color_read_Clear^0,w,c
 10548   003BEA  6E0A               	movwf	color_read_Clear@tmp^0,c
 10549   003BEC  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
 10550                           
 10551                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10552   003BEE  0E00               	movlw	0
 10553   003BF0  ECC3  F01E         	call	_I2C_2_Master_Read
 10554   003BF4  6E07               	movwf	??_color_read_Clear^0,c
 10555   003BF6  5007               	movf	??_color_read_Clear^0,w,c
 10556   003BF8  6E09               	movwf	(??_color_read_Clear+2)^0,c
 10557   003BFA  6A08               	clrf	(??_color_read_Clear+1)^0,c
 10558   003BFC  500A               	movf	color_read_Clear@tmp^0,w,c
 10559   003BFE  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
 10560   003C00  6E0A               	movwf	color_read_Clear@tmp^0,c
 10561   003C02  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
 10562   003C04  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
 10563   003C06  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
 10564                           
 10565                           ;color.c: 104:  I2C_2_Master_Stop();
 10566   003C08  ECC8  F020         	call	_I2C_2_Master_Stop	;wreg free
 10567   003C0C                     
 10568                           ;color.c: 105:  return tmp;
 10569   003C0C  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
 10570   003C10  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10571   003C14  0012               	return		;funcret
 10572   003C16                     __end_of_color_read_Clear:
 10573                           	callstack 0
 10574                           
 10575 ;; *************** function _color_read_Blue *****************
 10576 ;; Defined at:
 10577 ;;		line 76 in file "color.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;		None
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  tmp             2    9[COMRAM] unsigned int 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;                  2    4[COMRAM] unsigned int 
 10584 ;; Registers used:
 10585 ;;		wreg, status,2, status,0, cstack
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10591 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10593 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10594 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10595 ;;Total ram usage:        7 bytes
 10596 ;; Hardware stack levels used: 1
 10597 ;; Hardware stack levels required when called: 3
 10598 ;; This function calls:
 10599 ;;		_I2C_2_Master_Read
 10600 ;;		_I2C_2_Master_RepStart
 10601 ;;		_I2C_2_Master_Start
 10602 ;;		_I2C_2_Master_Stop
 10603 ;;		_I2C_2_Master_Write
 10604 ;; This function is called by:
 10605 ;;		_getRGBCval
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           	psect	text64
 10610   003C16                     __ptext64:
 10611                           	callstack 0
 10612   003C16                     _color_read_Blue:
 10613                           	callstack 24
 10614   003C16                     
 10615                           ;color.c: 78:     unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 10616   003C16  ECCD  F020         	call	_I2C_2_Master_Start	;wreg free
 10617                           
 10618                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 10619   003C1A  0E52               	movlw	82
 10620   003C1C  ECB1  F020         	call	_I2C_2_Master_Write
 10621                           
 10622                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x1A);
 10623   003C20  0EBA               	movlw	186
 10624   003C22  ECB1  F020         	call	_I2C_2_Master_Write
 10625                           
 10626                           ;color.c: 82:  I2C_2_Master_RepStart();
 10627   003C26  ECC3  F020         	call	_I2C_2_Master_RepStart	;wreg free
 10628                           
 10629                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 10630   003C2A  0E53               	movlw	83
 10631   003C2C  ECB1  F020         	call	_I2C_2_Master_Write
 10632                           
 10633                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 10634   003C30  0E01               	movlw	1
 10635   003C32  ECC3  F01E         	call	_I2C_2_Master_Read
 10636   003C36  6E07               	movwf	??_color_read_Blue^0,c
 10637   003C38  5007               	movf	??_color_read_Blue^0,w,c
 10638   003C3A  6E0A               	movwf	color_read_Blue@tmp^0,c
 10639   003C3C  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
 10640                           
 10641                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10642   003C3E  0E00               	movlw	0
 10643   003C40  ECC3  F01E         	call	_I2C_2_Master_Read
 10644   003C44  6E07               	movwf	??_color_read_Blue^0,c
 10645   003C46  5007               	movf	??_color_read_Blue^0,w,c
 10646   003C48  6E09               	movwf	(??_color_read_Blue+2)^0,c
 10647   003C4A  6A08               	clrf	(??_color_read_Blue+1)^0,c
 10648   003C4C  500A               	movf	color_read_Blue@tmp^0,w,c
 10649   003C4E  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
 10650   003C50  6E0A               	movwf	color_read_Blue@tmp^0,c
 10651   003C52  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
 10652   003C54  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
 10653   003C56  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
 10654                           
 10655                           ;color.c: 86:  I2C_2_Master_Stop();
 10656   003C58  ECC8  F020         	call	_I2C_2_Master_Stop	;wreg free
 10657   003C5C                     
 10658                           ;color.c: 87:  return tmp;
 10659   003C5C  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
 10660   003C60  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10661   003C64  0012               	return		;funcret
 10662   003C66                     __end_of_color_read_Blue:
 10663                           	callstack 0
 10664                           
 10665 ;; *************** function _I2C_2_Master_RepStart *****************
 10666 ;; Defined at:
 10667 ;;		line 33 in file "i2c.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;		None
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;		None
 10672 ;; Return value:  Size  Location     Type
 10673 ;;                  1    wreg      void 
 10674 ;; Registers used:
 10675 ;;		wreg, status,2, status,0, cstack
 10676 ;; Tracked objects:
 10677 ;;		On entry : 0/0
 10678 ;;		On exit  : 0/0
 10679 ;;		Unchanged: 0/0
 10680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10685 ;;Total ram usage:        0 bytes
 10686 ;; Hardware stack levels used: 1
 10687 ;; Hardware stack levels required when called: 2
 10688 ;; This function calls:
 10689 ;;		_I2C_2_Master_Idle
 10690 ;; This function is called by:
 10691 ;;		_color_read_Red
 10692 ;;		_color_read_Green
 10693 ;;		_color_read_Blue
 10694 ;;		_color_read_Clear
 10695 ;; This function uses a non-reentrant model
 10696 ;;
 10697                           
 10698                           	psect	text65
 10699   004186                     __ptext65:
 10700                           	callstack 0
 10701   004186                     _I2C_2_Master_RepStart:
 10702                           	callstack 24
 10703   004186                     
 10704                           ;i2c.c: 35:   I2C_2_Master_Idle();
 10705   004186  EC0D  F020         	call	_I2C_2_Master_Idle	;wreg free
 10706   00418A                     
 10707                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 10708   00418A  010E               	movlb	14	; () banked
 10709   00418C  83DA               	bsf	218,1,b	;volatile
 10710   00418E                     
 10711                           ; BSR set to: 14
 10712   00418E  0012               	return		;funcret
 10713   004190                     __end_of_I2C_2_Master_RepStart:
 10714                           	callstack 0
 10715                           
 10716 ;; *************** function _I2C_2_Master_Read *****************
 10717 ;; Defined at:
 10718 ;;		line 51 in file "i2c.c"
 10719 ;; Parameters:    Size  Location     Type
 10720 ;;  ack             1    wreg     unsigned char 
 10721 ;; Auto vars:     Size  Location     Type
 10722 ;;  ack             1    2[COMRAM] unsigned char 
 10723 ;;  tmp             1    3[COMRAM] unsigned char 
 10724 ;; Return value:  Size  Location     Type
 10725 ;;                  1    wreg      unsigned char 
 10726 ;; Registers used:
 10727 ;;		wreg, status,2, status,0, cstack
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10736 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10737 ;;Total ram usage:        3 bytes
 10738 ;; Hardware stack levels used: 1
 10739 ;; Hardware stack levels required when called: 2
 10740 ;; This function calls:
 10741 ;;		_I2C_2_Master_Idle
 10742 ;; This function is called by:
 10743 ;;		_color_read_Red
 10744 ;;		_color_read_Green
 10745 ;;		_color_read_Blue
 10746 ;;		_color_read_Clear
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           	psect	text66
 10751   003D86                     __ptext66:
 10752                           	callstack 0
 10753   003D86                     _I2C_2_Master_Read:
 10754                           	callstack 24
 10755                           
 10756                           ; BSR set to: 14
 10757                           ;incstack = 0
 10758                           ;I2C_2_Master_Read@ack stored from wreg
 10759   003D86  6E03               	movwf	I2C_2_Master_Read@ack^0,c
 10760   003D88                     
 10761                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 10762   003D88  EC0D  F020         	call	_I2C_2_Master_Idle	;wreg free
 10763   003D8C                     
 10764                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 10765   003D8C  010E               	movlb	14	; () banked
 10766   003D8E  87DA               	bsf	218,3,b	;volatile
 10767                           
 10768                           ;i2c.c: 56:   I2C_2_Master_Idle();
 10769   003D90  EC0D  F020         	call	_I2C_2_Master_Idle	;wreg free
 10770   003D94                     
 10771                           ;i2c.c: 57:   tmp = SSP2BUF;
 10772   003D94  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 10773                           
 10774                           ;i2c.c: 58:   I2C_2_Master_Idle();
 10775   003D98  EC0D  F020         	call	_I2C_2_Master_Idle	;wreg free
 10776   003D9C                     
 10777                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 10778   003D9C  5003               	movf	I2C_2_Master_Read@ack^0,w,c
 10779   003D9E  B4D8               	btfsc	status,2,c
 10780   003DA0  EFD4  F01E         	goto	u2281
 10781   003DA4  EFD8  F01E         	goto	u2280
 10782   003DA8                     u2281:
 10783   003DA8  6A02               	clrf	??_I2C_2_Master_Read^0,c
 10784   003DAA  2A02               	incf	??_I2C_2_Master_Read^0,f,c
 10785   003DAC  EFD9  F01E         	goto	u2298
 10786   003DB0                     u2280:
 10787   003DB0  6A02               	clrf	??_I2C_2_Master_Read^0,c
 10788   003DB2                     u2298:
 10789   003DB2  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
 10790   003DB4  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
 10791   003DB6  010E               	movlb	14	; () banked
 10792   003DB8  51DA               	movf	218,w,b	;volatile
 10793   003DBA  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 10794   003DBC  0BDF               	andlw	-33
 10795   003DBE  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 10796   003DC0  6FDA               	movwf	218,b	;volatile
 10797   003DC2                     
 10798                           ; BSR set to: 14
 10799                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 10800   003DC2  89DA               	bsf	218,4,b	;volatile
 10801   003DC4                     
 10802                           ; BSR set to: 14
 10803                           ;i2c.c: 61:   return tmp;
 10804   003DC4  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
 10805   003DC6                     
 10806                           ; BSR set to: 14
 10807   003DC6  0012               	return		;funcret
 10808   003DC8                     __end_of_I2C_2_Master_Read:
 10809                           	callstack 0
 10810                           
 10811 ;; *************** function ___lldiv *****************
 10812 ;; Defined at:
 10813 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
 10814 ;; Parameters:    Size  Location     Type
 10815 ;;  dividend        4    0[COMRAM] unsigned long 
 10816 ;;  divisor         4    4[COMRAM] unsigned long 
 10817 ;; Auto vars:     Size  Location     Type
 10818 ;;  quotient        4    8[COMRAM] unsigned long 
 10819 ;;  counter         1   12[COMRAM] unsigned char 
 10820 ;; Return value:  Size  Location     Type
 10821 ;;                  4    0[COMRAM] unsigned long 
 10822 ;; Registers used:
 10823 ;;		wreg, status,2, status,0
 10824 ;; Tracked objects:
 10825 ;;		On entry : 0/0
 10826 ;;		On exit  : 0/0
 10827 ;;		Unchanged: 0/0
 10828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10829 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10830 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10832 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10833 ;;Total ram usage:       13 bytes
 10834 ;; Hardware stack levels used: 1
 10835 ;; Hardware stack levels required when called: 1
 10836 ;; This function calls:
 10837 ;;		Nothing
 10838 ;; This function is called by:
 10839 ;;		_average_RGBC
 10840 ;;		_convert_HSV
 10841 ;; This function uses a non-reentrant model
 10842 ;;
 10843                           
 10844                           	psect	text67
 10845   0031F0                     __ptext67:
 10846                           	callstack 0
 10847   0031F0                     ___lldiv:
 10848                           	callstack 27
 10849   0031F0  0E00               	movlw	0
 10850   0031F2  6E09               	movwf	___lldiv@quotient^0,c
 10851   0031F4  0E00               	movlw	0
 10852   0031F6  6E0A               	movwf	(___lldiv@quotient+1)^0,c
 10853   0031F8  0E00               	movlw	0
 10854   0031FA  6E0B               	movwf	(___lldiv@quotient+2)^0,c
 10855   0031FC  0E00               	movlw	0
 10856   0031FE  6E0C               	movwf	(___lldiv@quotient+3)^0,c
 10857   003200  5005               	movf	___lldiv@divisor^0,w,c
 10858   003202  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
 10859   003204  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
 10860   003206  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
 10861   003208  B4D8               	btfsc	status,2,c
 10862   00320A  EF09  F019         	goto	u2711
 10863   00320E  EF0B  F019         	goto	u2710
 10864   003212                     u2711:
 10865   003212  EF41  F019         	goto	l775
 10866   003216                     u2710:
 10867   003216  0E01               	movlw	1
 10868   003218  6E0D               	movwf	___lldiv@counter^0,c
 10869   00321A  EF15  F019         	goto	l3769
 10870   00321E                     l3767:
 10871   00321E  90D8               	bcf	status,0,c
 10872   003220  3605               	rlcf	___lldiv@divisor^0,f,c
 10873   003222  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
 10874   003224  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
 10875   003226  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
 10876   003228  2A0D               	incf	___lldiv@counter^0,f,c
 10877   00322A                     l3769:
 10878   00322A  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
 10879   00322C  EF1A  F019         	goto	u2721
 10880   003230  EF1C  F019         	goto	u2720
 10881   003234                     u2721:
 10882   003234  EF0F  F019         	goto	l3767
 10883   003238                     u2720:
 10884   003238                     l3771:
 10885   003238  90D8               	bcf	status,0,c
 10886   00323A  3609               	rlcf	___lldiv@quotient^0,f,c
 10887   00323C  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
 10888   00323E  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
 10889   003240  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
 10890   003242  5005               	movf	___lldiv@divisor^0,w,c
 10891   003244  5C01               	subwf	___lldiv@dividend^0,w,c
 10892   003246  5006               	movf	(___lldiv@divisor+1)^0,w,c
 10893   003248  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
 10894   00324A  5007               	movf	(___lldiv@divisor+2)^0,w,c
 10895   00324C  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
 10896   00324E  5008               	movf	(___lldiv@divisor+3)^0,w,c
 10897   003250  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
 10898   003252  A0D8               	btfss	status,0,c
 10899   003254  EF2E  F019         	goto	u2731
 10900   003258  EF30  F019         	goto	u2730
 10901   00325C                     u2731:
 10902   00325C  EF39  F019         	goto	l3779
 10903   003260                     u2730:
 10904   003260  5005               	movf	___lldiv@divisor^0,w,c
 10905   003262  5E01               	subwf	___lldiv@dividend^0,f,c
 10906   003264  5006               	movf	(___lldiv@divisor+1)^0,w,c
 10907   003266  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
 10908   003268  5007               	movf	(___lldiv@divisor+2)^0,w,c
 10909   00326A  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
 10910   00326C  5008               	movf	(___lldiv@divisor+3)^0,w,c
 10911   00326E  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
 10912   003270  8009               	bsf	___lldiv@quotient^0,0,c
 10913   003272                     l3779:
 10914   003272  90D8               	bcf	status,0,c
 10915   003274  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
 10916   003276  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
 10917   003278  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
 10918   00327A  3205               	rrcf	___lldiv@divisor^0,f,c
 10919   00327C  2E0D               	decfsz	___lldiv@counter^0,f,c
 10920   00327E  EF1C  F019         	goto	l3771
 10921   003282                     l775:
 10922   003282  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10923   003286  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10924   00328A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10925   00328E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10926   003292  0012               	return		;funcret
 10927   003294                     __end_of___lldiv:
 10928                           	callstack 0
 10929                           
 10930 ;; *************** function _color_click_init *****************
 10931 ;; Defined at:
 10932 ;;		line 7 in file "color.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;                  1    wreg      void 
 10939 ;; Registers used:
 10940 ;;		wreg, status,2, status,0, cstack
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10948 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10949 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10950 ;;Total ram usage:        1 bytes
 10951 ;; Hardware stack levels used: 1
 10952 ;; Hardware stack levels required when called: 4
 10953 ;; This function calls:
 10954 ;;		_I2C_2_Master_Init
 10955 ;;		_color_writetoaddr
 10956 ;; This function is called by:
 10957 ;;		_main
 10958 ;; This function uses a non-reentrant model
 10959 ;;
 10960                           
 10961                           	psect	text68
 10962   003E36                     __ptext68:
 10963                           	callstack 0
 10964   003E36                     _color_click_init:
 10965                           	callstack 26
 10966   003E36                     
 10967                           ;color.c: 10:     I2C_2_Master_Init();
 10968   003E36  ECF8  F01F         	call	_I2C_2_Master_Init	;wreg free
 10969   003E3A                     
 10970                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
 10971   003E3A  0E01               	movlw	1
 10972   003E3C  6E03               	movwf	color_writetoaddr@value^0,c
 10973   003E3E  0E00               	movlw	0
 10974   003E40  EC6C  F020         	call	_color_writetoaddr
 10975   003E44                     
 10976                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
 10977   003E44  0E3F               	movlw	63
 10978   003E46  6E05               	movwf	??_color_click_init^0,c
 10979   003E48  0E55               	movlw	85
 10980   003E4A                     u4237:
 10981   003E4A  2EE8               	decfsz	wreg,f,c
 10982   003E4C  D7FE               	bra	u4237
 10983   003E4E  2E05               	decfsz	??_color_click_init^0,f,c
 10984   003E50  D7FC               	bra	u4237
 10985   003E52  0000               	nop	
 10986   003E54                     
 10987                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
 10988   003E54  0E03               	movlw	3
 10989   003E56  6E03               	movwf	color_writetoaddr@value^0,c
 10990   003E58  0E00               	movlw	0
 10991   003E5A  EC6C  F020         	call	_color_writetoaddr
 10992   003E5E                     
 10993                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
 10994   003E5E  0ED5               	movlw	213
 10995   003E60  6E03               	movwf	color_writetoaddr@value^0,c
 10996   003E62  0E01               	movlw	1
 10997   003E64  EC6C  F020         	call	_color_writetoaddr
 10998   003E68  0012               	return		;funcret
 10999   003E6A                     __end_of_color_click_init:
 11000                           	callstack 0
 11001                           
 11002 ;; *************** function _color_writetoaddr *****************
 11003 ;; Defined at:
 11004 ;;		line 28 in file "color.c"
 11005 ;; Parameters:    Size  Location     Type
 11006 ;;  address         1    wreg     unsigned char 
 11007 ;;  value           1    2[COMRAM] unsigned char 
 11008 ;; Auto vars:     Size  Location     Type
 11009 ;;  address         1    3[COMRAM] unsigned char 
 11010 ;; Return value:  Size  Location     Type
 11011 ;;                  1    wreg      void 
 11012 ;; Registers used:
 11013 ;;		wreg, status,2, status,0, cstack
 11014 ;; Tracked objects:
 11015 ;;		On entry : 0/0
 11016 ;;		On exit  : 0/0
 11017 ;;		Unchanged: 0/0
 11018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11019 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11022 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11023 ;;Total ram usage:        2 bytes
 11024 ;; Hardware stack levels used: 1
 11025 ;; Hardware stack levels required when called: 3
 11026 ;; This function calls:
 11027 ;;		_I2C_2_Master_Start
 11028 ;;		_I2C_2_Master_Stop
 11029 ;;		_I2C_2_Master_Write
 11030 ;; This function is called by:
 11031 ;;		_color_click_init
 11032 ;; This function uses a non-reentrant model
 11033 ;;
 11034                           
 11035                           	psect	text69
 11036   0040D8                     __ptext69:
 11037                           	callstack 0
 11038   0040D8                     _color_writetoaddr:
 11039                           	callstack 26
 11040                           
 11041                           ;incstack = 0
 11042                           ;color_writetoaddr@address stored from wreg
 11043   0040D8  6E04               	movwf	color_writetoaddr@address^0,c
 11044   0040DA                     
 11045                           ;color.c: 29:     I2C_2_Master_Start();
 11046   0040DA  ECCD  F020         	call	_I2C_2_Master_Start	;wreg free
 11047                           
 11048                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
 11049   0040DE  0E52               	movlw	82
 11050   0040E0  ECB1  F020         	call	_I2C_2_Master_Write
 11051                           
 11052                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
 11053   0040E4  5004               	movf	color_writetoaddr@address^0,w,c
 11054   0040E6  0980               	iorlw	128
 11055   0040E8  ECB1  F020         	call	_I2C_2_Master_Write
 11056                           
 11057                           ;color.c: 32:     I2C_2_Master_Write(value);
 11058   0040EC  5003               	movf	color_writetoaddr@value^0,w,c
 11059   0040EE  ECB1  F020         	call	_I2C_2_Master_Write
 11060                           
 11061                           ;color.c: 33:     I2C_2_Master_Stop();
 11062   0040F2  ECC8  F020         	call	_I2C_2_Master_Stop	;wreg free
 11063   0040F6  0012               	return		;funcret
 11064   0040F8                     __end_of_color_writetoaddr:
 11065                           	callstack 0
 11066                           
 11067 ;; *************** function _I2C_2_Master_Write *****************
 11068 ;; Defined at:
 11069 ;;		line 45 in file "i2c.c"
 11070 ;; Parameters:    Size  Location     Type
 11071 ;;  data_byte       1    wreg     unsigned char 
 11072 ;; Auto vars:     Size  Location     Type
 11073 ;;  data_byte       1    1[COMRAM] unsigned char 
 11074 ;; Return value:  Size  Location     Type
 11075 ;;                  1    wreg      void 
 11076 ;; Registers used:
 11077 ;;		wreg, status,2, status,0, cstack
 11078 ;; Tracked objects:
 11079 ;;		On entry : 0/0
 11080 ;;		On exit  : 0/0
 11081 ;;		Unchanged: 0/0
 11082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11087 ;;Total ram usage:        1 bytes
 11088 ;; Hardware stack levels used: 1
 11089 ;; Hardware stack levels required when called: 2
 11090 ;; This function calls:
 11091 ;;		_I2C_2_Master_Idle
 11092 ;; This function is called by:
 11093 ;;		_color_writetoaddr
 11094 ;;		_color_read_Red
 11095 ;;		_color_read_Green
 11096 ;;		_color_read_Blue
 11097 ;;		_color_read_Clear
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           	psect	text70
 11102   004162                     __ptext70:
 11103                           	callstack 0
 11104   004162                     _I2C_2_Master_Write:
 11105                           	callstack 24
 11106                           
 11107                           ;incstack = 0
 11108                           ;I2C_2_Master_Write@data_byte stored from wreg
 11109   004162  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
 11110   004164                     
 11111                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11112   004164  EC0D  F020         	call	_I2C_2_Master_Idle	;wreg free
 11113   004168                     
 11114                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11115   004168  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11116   00416C  0012               	return		;funcret
 11117   00416E                     __end_of_I2C_2_Master_Write:
 11118                           	callstack 0
 11119                           
 11120 ;; *************** function _I2C_2_Master_Stop *****************
 11121 ;; Defined at:
 11122 ;;		line 39 in file "i2c.c"
 11123 ;; Parameters:    Size  Location     Type
 11124 ;;		None
 11125 ;; Auto vars:     Size  Location     Type
 11126 ;;		None
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  1    wreg      void 
 11129 ;; Registers used:
 11130 ;;		wreg, status,2, status,0, cstack
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11140 ;;Total ram usage:        0 bytes
 11141 ;; Hardware stack levels used: 1
 11142 ;; Hardware stack levels required when called: 2
 11143 ;; This function calls:
 11144 ;;		_I2C_2_Master_Idle
 11145 ;; This function is called by:
 11146 ;;		_color_writetoaddr
 11147 ;;		_color_read_Red
 11148 ;;		_color_read_Green
 11149 ;;		_color_read_Blue
 11150 ;;		_color_read_Clear
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           	psect	text71
 11155   004190                     __ptext71:
 11156                           	callstack 0
 11157   004190                     _I2C_2_Master_Stop:
 11158                           	callstack 24
 11159   004190                     
 11160                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11161   004190  EC0D  F020         	call	_I2C_2_Master_Idle	;wreg free
 11162   004194                     
 11163                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11164   004194  010E               	movlb	14	; () banked
 11165   004196  85DA               	bsf	218,2,b	;volatile
 11166   004198                     
 11167                           ; BSR set to: 14
 11168   004198  0012               	return		;funcret
 11169   00419A                     __end_of_I2C_2_Master_Stop:
 11170                           	callstack 0
 11171                           
 11172 ;; *************** function _I2C_2_Master_Start *****************
 11173 ;; Defined at:
 11174 ;;		line 27 in file "i2c.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;		None
 11177 ;; Auto vars:     Size  Location     Type
 11178 ;;		None
 11179 ;; Return value:  Size  Location     Type
 11180 ;;                  1    wreg      void 
 11181 ;; Registers used:
 11182 ;;		wreg, status,2, status,0, cstack
 11183 ;; Tracked objects:
 11184 ;;		On entry : 0/0
 11185 ;;		On exit  : 0/0
 11186 ;;		Unchanged: 0/0
 11187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11192 ;;Total ram usage:        0 bytes
 11193 ;; Hardware stack levels used: 1
 11194 ;; Hardware stack levels required when called: 2
 11195 ;; This function calls:
 11196 ;;		_I2C_2_Master_Idle
 11197 ;; This function is called by:
 11198 ;;		_color_writetoaddr
 11199 ;;		_color_read_Red
 11200 ;;		_color_read_Green
 11201 ;;		_color_read_Blue
 11202 ;;		_color_read_Clear
 11203 ;; This function uses a non-reentrant model
 11204 ;;
 11205                           
 11206                           	psect	text72
 11207   00419A                     __ptext72:
 11208                           	callstack 0
 11209   00419A                     _I2C_2_Master_Start:
 11210                           	callstack 24
 11211   00419A                     
 11212                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11213   00419A  EC0D  F020         	call	_I2C_2_Master_Idle	;wreg free
 11214   00419E                     
 11215                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11216   00419E  010E               	movlb	14	; () banked
 11217   0041A0  81DA               	bsf	218,0,b	;volatile
 11218   0041A2                     
 11219                           ; BSR set to: 14
 11220   0041A2  0012               	return		;funcret
 11221   0041A4                     __end_of_I2C_2_Master_Start:
 11222                           	callstack 0
 11223                           
 11224 ;; *************** function _I2C_2_Master_Idle *****************
 11225 ;; Defined at:
 11226 ;;		line 22 in file "i2c.c"
 11227 ;; Parameters:    Size  Location     Type
 11228 ;;		None
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;		None
 11231 ;; Return value:  Size  Location     Type
 11232 ;;                  1    wreg      void 
 11233 ;; Registers used:
 11234 ;;		wreg, status,2, status,0
 11235 ;; Tracked objects:
 11236 ;;		On entry : 0/0
 11237 ;;		On exit  : 0/0
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11244 ;;Total ram usage:        1 bytes
 11245 ;; Hardware stack levels used: 1
 11246 ;; Hardware stack levels required when called: 1
 11247 ;; This function calls:
 11248 ;;		Nothing
 11249 ;; This function is called by:
 11250 ;;		_I2C_2_Master_Start
 11251 ;;		_I2C_2_Master_RepStart
 11252 ;;		_I2C_2_Master_Stop
 11253 ;;		_I2C_2_Master_Write
 11254 ;;		_I2C_2_Master_Read
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text73
 11259   00401A                     __ptext73:
 11260                           	callstack 0
 11261   00401A                     _I2C_2_Master_Idle:
 11262                           	callstack 24
 11263   00401A                     l314:
 11264   00401A  010E               	movlb	14	; () banked
 11265   00401C  B5D8               	btfsc	216,2,b	;volatile
 11266   00401E  EF13  F020         	goto	u2061
 11267   004022  EF15  F020         	goto	u2060
 11268   004026                     u2061:
 11269   004026  EF0D  F020         	goto	l314
 11270   00402A                     u2060:
 11271   00402A                     
 11272                           ; BSR set to: 14
 11273   00402A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11274   00402E  0E1F               	movlw	31
 11275   004030  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
 11276   004032  A4D8               	btfss	status,2,c
 11277   004034  EF1E  F020         	goto	u2071
 11278   004038  EF20  F020         	goto	u2070
 11279   00403C                     u2071:
 11280   00403C  EF0D  F020         	goto	l314
 11281   004040                     u2070:
 11282   004040                     
 11283                           ; BSR set to: 14
 11284   004040  0012               	return		;funcret
 11285   004042                     __end_of_I2C_2_Master_Idle:
 11286                           	callstack 0
 11287                           
 11288 ;; *************** function _I2C_2_Master_Init *****************
 11289 ;; Defined at:
 11290 ;;		line 4 in file "i2c.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;		None
 11293 ;; Auto vars:     Size  Location     Type
 11294 ;;		None
 11295 ;; Return value:  Size  Location     Type
 11296 ;;                  1    wreg      void 
 11297 ;; Registers used:
 11298 ;;		wreg, status,2
 11299 ;; Tracked objects:
 11300 ;;		On entry : 0/0
 11301 ;;		On exit  : 0/0
 11302 ;;		Unchanged: 0/0
 11303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11308 ;;Total ram usage:        0 bytes
 11309 ;; Hardware stack levels used: 1
 11310 ;; Hardware stack levels required when called: 1
 11311 ;; This function calls:
 11312 ;;		Nothing
 11313 ;; This function is called by:
 11314 ;;		_color_click_init
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           	psect	text74
 11319   003FF0                     __ptext74:
 11320                           	callstack 0
 11321   003FF0                     _I2C_2_Master_Init:
 11322                           	callstack 28
 11323   003FF0                     
 11324                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
 11325   003FF0  010E               	movlb	14	; () banked
 11326   003FF2  51D9               	movf	217,w,b	;volatile
 11327   003FF4  0BF0               	andlw	-16
 11328   003FF6  0908               	iorlw	8
 11329   003FF8  6FD9               	movwf	217,b	;volatile
 11330   003FFA                     
 11331                           ; BSR set to: 14
 11332                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
 11333   003FFA  8BD9               	bsf	217,5,b	;volatile
 11334                           
 11335                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
 11336   003FFC  0E9F               	movlw	159
 11337   003FFE  6FD6               	movwf	214,b	;volatile
 11338   004000                     
 11339                           ; BSR set to: 14
 11340                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
 11341   004000  8A84               	bsf	132,5,c	;volatile
 11342   004002                     
 11343                           ; BSR set to: 14
 11344                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
 11345   004002  8C84               	bsf	132,6,c	;volatile
 11346   004004                     
 11347                           ; BSR set to: 14
 11348                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
 11349   004004  9BA7               	bcf	167,5,b	;volatile
 11350   004006                     
 11351                           ; BSR set to: 14
 11352                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
 11353   004006  9DA7               	bcf	167,6,b	;volatile
 11354                           
 11355                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
 11356   004008  0E1D               	movlw	29
 11357   00400A  6F1D               	movwf	29,b	;volatile
 11358                           
 11359                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
 11360   00400C  0E1E               	movlw	30
 11361   00400E  6F1C               	movwf	28,b	;volatile
 11362                           
 11363                           ;i2c.c: 18:   RD5PPS=0x1C;
 11364   004010  0E1C               	movlw	28
 11365   004012  6F6F               	movwf	111,b	;volatile
 11366                           
 11367                           ;i2c.c: 19:   RD6PPS=0x1B;
 11368   004014  0E1B               	movlw	27
 11369   004016  6F70               	movwf	112,b	;volatile
 11370   004018                     
 11371                           ; BSR set to: 14
 11372   004018  0012               	return		;funcret
 11373   00401A                     __end_of_I2C_2_Master_Init:
 11374                           	callstack 0
 11375                           
 11376 ;; *************** function _buggy_lights_init *****************
 11377 ;; Defined at:
 11378 ;;		line 7 in file "buggy_lights.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;		None
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;		None
 11383 ;; Return value:  Size  Location     Type
 11384 ;;                  1    wreg      void 
 11385 ;; Registers used:
 11386 ;;		None
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11396 ;;Total ram usage:        0 bytes
 11397 ;; Hardware stack levels used: 1
 11398 ;; Hardware stack levels required when called: 1
 11399 ;; This function calls:
 11400 ;;		Nothing
 11401 ;; This function is called by:
 11402 ;;		_main
 11403 ;; This function uses a non-reentrant model
 11404 ;;
 11405                           
 11406                           	psect	text75
 11407   003FC2                     __ptext75:
 11408                           	callstack 0
 11409   003FC2                     _buggy_lights_init:
 11410                           	callstack 29
 11411   003FC2                     
 11412                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
 11413   003FC2  9884               	bcf	132,4,c	;volatile
 11414                           
 11415                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
 11416   003FC4  9288               	bcf	136,1,c	;volatile
 11417                           
 11418                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
 11419   003FC6  9684               	bcf	132,3,c	;volatile
 11420                           
 11421                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
 11422   003FC8  9086               	bcf	134,0,c	;volatile
 11423                           
 11424                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
 11425   003FCA  9088               	bcf	136,0,c	;volatile
 11426                           
 11427                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
 11428   003FCC  987C               	bcf	124,4,c	;volatile
 11429                           
 11430                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
 11431   003FCE  9280               	bcf	128,1,c	;volatile
 11432                           
 11433                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
 11434   003FD0  967C               	bcf	124,3,c	;volatile
 11435                           
 11436                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
 11437   003FD2  907E               	bcf	126,0,c	;volatile
 11438                           
 11439                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
 11440   003FD4  9080               	bcf	128,0,c	;volatile
 11441                           
 11442                           ;buggy_lights.c: 26:             TRISGbits.TRISG1 = 0;
 11443   003FD6  9287               	bcf	135,1,c	;volatile
 11444                           
 11445                           ;buggy_lights.c: 27:             TRISAbits.TRISA4 = 0;
 11446   003FD8  9881               	bcf	129,4,c	;volatile
 11447                           
 11448                           ;buggy_lights.c: 28:             TRISFbits.TRISF7 = 0;
 11449   003FDA  9E86               	bcf	134,7,c	;volatile
 11450                           
 11451                           ;buggy_lights.c: 30:             LATGbits.LATG1 = 0;
 11452   003FDC  927F               	bcf	127,1,c	;volatile
 11453                           
 11454                           ;buggy_lights.c: 31:             LATAbits.LATA4 = 0;
 11455   003FDE  9879               	bcf	121,4,c	;volatile
 11456                           
 11457                           ;buggy_lights.c: 32:             LATFbits.LATF7 = 0;
 11458   003FE0  9E7E               	bcf	126,7,c	;volatile
 11459                           
 11460                           ;buggy_lights.c: 36:             TRISGbits.TRISG0 = 0;
 11461   003FE2  9087               	bcf	135,0,c	;volatile
 11462                           
 11463                           ;buggy_lights.c: 37:             TRISEbits.TRISE7 = 0;
 11464   003FE4  9E85               	bcf	133,7,c	;volatile
 11465                           
 11466                           ;buggy_lights.c: 38:             TRISAbits.TRISA3 = 0;
 11467   003FE6  9681               	bcf	129,3,c	;volatile
 11468                           
 11469                           ;buggy_lights.c: 40:             LATGbits.LATG0 = 0;
 11470   003FE8  907F               	bcf	127,0,c	;volatile
 11471                           
 11472                           ;buggy_lights.c: 41:             LATEbits.LATE7 = 0;
 11473   003FEA  9E7D               	bcf	125,7,c	;volatile
 11474                           
 11475                           ;buggy_lights.c: 42:             LATAbits.LATA3 = 0;
 11476   003FEC  9679               	bcf	121,3,c	;volatile
 11477   003FEE  0012               	return		;funcret
 11478   003FF0                     __end_of_buggy_lights_init:
 11479                           	callstack 0
 11480                           
 11481 ;; *************** function _Timer0_init *****************
 11482 ;; Defined at:
 11483 ;;		line 7 in file "timers.c"
 11484 ;; Parameters:    Size  Location     Type
 11485 ;;		None
 11486 ;; Auto vars:     Size  Location     Type
 11487 ;;		None
 11488 ;; Return value:  Size  Location     Type
 11489 ;;                  1    wreg      void 
 11490 ;; Registers used:
 11491 ;;		wreg, status,2, cstack
 11492 ;; Tracked objects:
 11493 ;;		On entry : 0/0
 11494 ;;		On exit  : 0/0
 11495 ;;		Unchanged: 0/0
 11496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11501 ;;Total ram usage:        0 bytes
 11502 ;; Hardware stack levels used: 1
 11503 ;; Hardware stack levels required when called: 3
 11504 ;; This function calls:
 11505 ;;		_reset_timer
 11506 ;;		_start_timer
 11507 ;; This function is called by:
 11508 ;;		_main
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           	psect	text76
 11513   004042                     __ptext76:
 11514                           	callstack 0
 11515   004042                     _Timer0_init:
 11516                           	callstack 27
 11517   004042                     
 11518                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
 11519   004042  50D6               	movf	214,w,c	;volatile
 11520   004044  0B1F               	andlw	-225
 11521   004046  0940               	iorlw	64
 11522   004048  6ED6               	movwf	214,c	;volatile
 11523   00404A                     
 11524                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
 11525   00404A  88D6               	bsf	214,4,c	;volatile
 11526   00404C                     
 11527                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
 11528   00404C  88D5               	bsf	213,4,c	;volatile
 11529                           
 11530                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
 11531   00404E  50D6               	movf	214,w,c	;volatile
 11532   004050  0BF0               	andlw	-16
 11533   004052  090E               	iorlw	14
 11534   004054  6ED6               	movwf	214,c	;volatile
 11535   004056                     
 11536                           ;timers.c: 18:     reset_timer();
 11537   004056  ECB7  F020         	call	_reset_timer	;wreg free
 11538   00405A                     
 11539                           ;timers.c: 19:     T0CON0bits.T0EN=1;
 11540   00405A  8ED5               	bsf	213,7,c	;volatile
 11541                           
 11542                           ;timers.c: 21:     start_timer();
 11543   00405C  ECD4  F020         	call	_start_timer	;wreg free
 11544   004060                     
 11545                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
 11546   004060  010E               	movlb	14	; () banked
 11547   004062  8B29               	bsf	41,5,b	;volatile
 11548   004064                     
 11549                           ; BSR set to: 14
 11550                           ;timers.c: 23:     INTCONbits.PEIE = 1;
 11551   004064  8CF2               	bsf	242,6,c	;volatile
 11552   004066                     
 11553                           ; BSR set to: 14
 11554                           ;timers.c: 24:     INTCONbits.GIE = 1;
 11555   004066  8EF2               	bsf	242,7,c	;volatile
 11556   004068                     
 11557                           ; BSR set to: 14
 11558   004068  0012               	return		;funcret
 11559   00406A                     __end_of_Timer0_init:
 11560                           	callstack 0
 11561                           
 11562 ;; *************** function _start_timer *****************
 11563 ;; Defined at:
 11564 ;;		line 30 in file "timers.c"
 11565 ;; Parameters:    Size  Location     Type
 11566 ;;		None
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;		None
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  1    wreg      void 
 11571 ;; Registers used:
 11572 ;;		None
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11582 ;;Total ram usage:        0 bytes
 11583 ;; Hardware stack levels used: 1
 11584 ;; Hardware stack levels required when called: 1
 11585 ;; This function calls:
 11586 ;;		Nothing
 11587 ;; This function is called by:
 11588 ;;		_Timer0_init
 11589 ;;		_forward_navigation
 11590 ;;		_return_to_sender
 11591 ;; This function uses a non-reentrant model
 11592 ;;
 11593                           
 11594                           	psect	text77
 11595   0041A8                     __ptext77:
 11596                           	callstack 0
 11597   0041A8                     _start_timer:
 11598                           	callstack 28
 11599   0041A8                     
 11600                           ;timers.c: 32:     T0CON0bits.T0EN=1;
 11601   0041A8  8ED5               	bsf	213,7,c	;volatile
 11602   0041AA  0012               	return		;funcret
 11603   0041AC                     __end_of_start_timer:
 11604                           	callstack 0
 11605                           
 11606 ;; *************** function _reset_timer *****************
 11607 ;; Defined at:
 11608 ;;		line 70 in file "timers.c"
 11609 ;; Parameters:    Size  Location     Type
 11610 ;;		None
 11611 ;; Auto vars:     Size  Location     Type
 11612 ;;		None
 11613 ;; Return value:  Size  Location     Type
 11614 ;;                  1    wreg      void 
 11615 ;; Registers used:
 11616 ;;		wreg, status,2, cstack
 11617 ;; Tracked objects:
 11618 ;;		On entry : 0/0
 11619 ;;		On exit  : 0/0
 11620 ;;		Unchanged: 0/0
 11621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11626 ;;Total ram usage:        0 bytes
 11627 ;; Hardware stack levels used: 1
 11628 ;; Hardware stack levels required when called: 2
 11629 ;; This function calls:
 11630 ;;		_write_timer
 11631 ;; This function is called by:
 11632 ;;		_Timer0_init
 11633 ;;		_forward_navigation
 11634 ;; This function uses a non-reentrant model
 11635 ;;
 11636                           
 11637                           	psect	text78
 11638   00416E                     __ptext78:
 11639                           	callstack 0
 11640   00416E                     _reset_timer:
 11641                           	callstack 27
 11642   00416E                     
 11643                           ;timers.c: 72:     write_timer(0, 0);
 11644   00416E  0E00               	movlw	0
 11645   004170  6E01               	movwf	write_timer@tL^0,c
 11646   004172  0E00               	movlw	0
 11647   004174  ECBD  F020         	call	_write_timer
 11648   004178  0012               	return		;funcret
 11649   00417A                     __end_of_reset_timer:
 11650                           	callstack 0
 11651                           
 11652 ;; *************** function _write_timer *****************
 11653 ;; Defined at:
 11654 ;;		line 58 in file "timers.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;  tH              1    wreg     unsigned char 
 11657 ;;  tL              1    0[COMRAM] unsigned char 
 11658 ;; Auto vars:     Size  Location     Type
 11659 ;;  tH              1    1[COMRAM] unsigned char 
 11660 ;; Return value:  Size  Location     Type
 11661 ;;                  1    wreg      void 
 11662 ;; Registers used:
 11663 ;;		wreg
 11664 ;; Tracked objects:
 11665 ;;		On entry : 0/0
 11666 ;;		On exit  : 0/0
 11667 ;;		Unchanged: 0/0
 11668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11669 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11670 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11672 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11673 ;;Total ram usage:        2 bytes
 11674 ;; Hardware stack levels used: 1
 11675 ;; Hardware stack levels required when called: 1
 11676 ;; This function calls:
 11677 ;;		Nothing
 11678 ;; This function is called by:
 11679 ;;		_reset_timer
 11680 ;;		_return_to_sender
 11681 ;; This function uses a non-reentrant model
 11682 ;;
 11683                           
 11684                           	psect	text79
 11685   00417A                     __ptext79:
 11686                           	callstack 0
 11687   00417A                     _write_timer:
 11688                           	callstack 28
 11689                           
 11690                           ;incstack = 0
 11691                           ;write_timer@tH stored from wreg
 11692   00417A  6E02               	movwf	write_timer@tH^0,c
 11693   00417C                     
 11694                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
 11695   00417C  C002  FFD4         	movff	write_timer@tH,4052	;volatile
 11696   004180                     
 11697                           ;timers.c: 64:     TMR0L = tL;
 11698   004180  C001  FFD3         	movff	write_timer@tL,4051	;volatile
 11699   004184  0012               	return		;funcret
 11700   004186                     __end_of_write_timer:
 11701                           	callstack 0
 11702                           
 11703 ;; *************** function _ISR *****************
 11704 ;; Defined at:
 11705 ;;		line 212 in file "timers.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;		None
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;		None
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  1    wreg      void 
 11712 ;; Registers used:
 11713 ;;		wreg, status,2
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11723 ;;Total ram usage:        0 bytes
 11724 ;; Hardware stack levels used: 1
 11725 ;; This function calls:
 11726 ;;		Nothing
 11727 ;; This function is called by:
 11728 ;;		Interrupt level 2
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           	psect	intcode
 11733   000008                     __pintcode:
 11734                           	callstack 0
 11735   000008                     _ISR:
 11736                           	callstack 23
 11737                           
 11738                           ;incstack = 0
 11739   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 11740   00000A                     
 11741                           ;timers.c: 214:     if (PIR0bits.TMR0IF) {
 11742   00000A  010E               	movlb	14	; () banked
 11743   00000C  AB33               	btfss	51,5,b	;volatile
 11744   00000E  EF0B  F000         	goto	i2u391_41
 11745   000012  EF0D  F000         	goto	i2u391_40
 11746   000016                     i2u391_41:
 11747   000016  EF1F  F000         	goto	i2l745
 11748   00001A                     i2u391_40:
 11749   00001A                     
 11750                           ; BSR set to: 14
 11751                           ;timers.c: 215:         if (returning) {
 11752   00001A  505E               	movf	_returning^0,w,c
 11753   00001C  B4D8               	btfsc	status,2,c
 11754   00001E  EF13  F000         	goto	i2u392_41
 11755   000022  EF15  F000         	goto	i2u392_40
 11756   000026                     i2u392_41:
 11757   000026  EF1A  F000         	goto	i2l4587
 11758   00002A                     i2u392_40:
 11759   00002A                     
 11760                           ; BSR set to: 14
 11761                           ;timers.c: 216:             return_flag = 1;
 11762   00002A  0E01               	movlw	1
 11763   00002C  0100               	movlb	0	; () banked
 11764   00002E  6F87               	movwf	_return_flag& (0+255),b
 11765                           
 11766                           ;timers.c: 217:         } else {
 11767   000030  EF1D  F000         	goto	i2l4589
 11768   000034                     i2l4587:
 11769                           
 11770                           ; BSR set to: 14
 11771                           ;timers.c: 218:             lost_flag = 1;
 11772   000034  0E01               	movlw	1
 11773   000036  0101               	movlb	1	; () banked
 11774   000038  6FA5               	movwf	_lost_flag& (0+255),b
 11775   00003A                     i2l4589:
 11776                           
 11777                           ;timers.c: 220:         PIR0bits.TMR0IF = 0;
 11778   00003A  010E               	movlb	14	; () banked
 11779   00003C  9B33               	bcf	51,5,b	;volatile
 11780   00003E                     i2l745:
 11781                           
 11782                           ; BSR set to: 14
 11783   00003E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 11784   000040  0011               	retfie		f
 11785   000042                     __end_of_ISR:
 11786                           	callstack 0
 11787                           
 11788                           	psect	rparam
 11789   000000                     
 11790                           	psect	temp
 11791   00005F                     btemp:
 11792                           	callstack 0
 11793   00005F                     	ds	1
 11794   000000                     int$flags	set	btemp
 11795   000000                     wtemp8	set	btemp+1
 11796   000000                     ttemp5	set	btemp+1
 11797   000000                     ttemp6	set	btemp+4
 11798   000000                     ttemp7	set	btemp+8
 11799                           
 11800                           	psect	idloc
 11801                           
 11802                           ;Config register IDLOC0 @ 0x200000
 11803                           ;	unspecified, using default values
 11804   200000                     	org	2097152
 11805   200000  FFFF               	dw	65535
 11806                           
 11807                           ;Config register IDLOC1 @ 0x200002
 11808                           ;	unspecified, using default values
 11809   200002                     	org	2097154
 11810   200002  FFFF               	dw	65535
 11811                           
 11812                           ;Config register IDLOC2 @ 0x200004
 11813                           ;	unspecified, using default values
 11814   200004                     	org	2097156
 11815   200004  FFFF               	dw	65535
 11816                           
 11817                           ;Config register IDLOC3 @ 0x200006
 11818                           ;	unspecified, using default values
 11819   200006                     	org	2097158
 11820   200006  FFFF               	dw	65535
 11821                           
 11822                           ;Config register IDLOC4 @ 0x200008
 11823                           ;	unspecified, using default values
 11824   200008                     	org	2097160
 11825   200008  FFFF               	dw	65535
 11826                           
 11827                           ;Config register IDLOC5 @ 0x20000A
 11828                           ;	unspecified, using default values
 11829   20000A                     	org	2097162
 11830   20000A  FFFF               	dw	65535
 11831                           
 11832                           ;Config register IDLOC6 @ 0x20000C
 11833                           ;	unspecified, using default values
 11834   20000C                     	org	2097164
 11835   20000C  FFFF               	dw	65535
 11836                           
 11837                           ;Config register IDLOC7 @ 0x20000E
 11838                           ;	unspecified, using default values
 11839   20000E                     	org	2097166
 11840   20000E  FFFF               	dw	65535
 11841                           
 11842                           	psect	config
 11843                           
 11844                           ;Config register CONFIG1L @ 0x300000
 11845                           ;	External Oscillator mode Selection bits
 11846                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11847                           ;	Power-up default value for COSC bits
 11848                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11849   300000                     	org	3145728
 11850   300000  AA                 	db	170
 11851                           
 11852                           ;Config register CONFIG1H @ 0x300001
 11853                           ;	unspecified, using default values
 11854                           ;	Clock Out Enable bit
 11855                           ;	CLKOUTEN = 0x1, unprogrammed default
 11856                           ;	Clock Switch Enable bit
 11857                           ;	CSWEN = 0x1, unprogrammed default
 11858                           ;	Fail-Safe Clock Monitor Enable bit
 11859                           ;	FCMEN = 0x1, unprogrammed default
 11860   300001                     	org	3145729
 11861   300001  FF                 	db	255
 11862                           
 11863                           ;Config register CONFIG2L @ 0x300002
 11864                           ;	unspecified, using default values
 11865                           ;	Master Clear Enable bit
 11866                           ;	MCLRE = 0x1, unprogrammed default
 11867                           ;	Power-up Timer Enable bit
 11868                           ;	PWRTE = 0x1, unprogrammed default
 11869                           ;	Low-power BOR enable bit
 11870                           ;	LPBOREN = 0x1, unprogrammed default
 11871                           ;	Brown-out Reset Enable bits
 11872                           ;	BOREN = 0x3, unprogrammed default
 11873   300002                     	org	3145730
 11874   300002  FF                 	db	255
 11875                           
 11876                           ;Config register CONFIG2H @ 0x300003
 11877                           ;	unspecified, using default values
 11878                           ;	Brown Out Reset Voltage selection bits
 11879                           ;	BORV = 0x3, unprogrammed default
 11880                           ;	ZCD Disable bit
 11881                           ;	ZCD = 0x1, unprogrammed default
 11882                           ;	PPSLOCK bit One-Way Set Enable bit
 11883                           ;	PPS1WAY = 0x1, unprogrammed default
 11884                           ;	Stack Full/Underflow Reset Enable bit
 11885                           ;	STVREN = 0x1, unprogrammed default
 11886                           ;	Debugger Enable bit
 11887                           ;	DEBUG = 0x1, unprogrammed default
 11888                           ;	Extended Instruction Set Enable bit
 11889                           ;	XINST = 0x1, unprogrammed default
 11890   300003                     	org	3145731
 11891   300003  FF                 	db	255
 11892                           
 11893                           ;Config register CONFIG3L @ 0x300004
 11894                           ;	WDT Period Select bits
 11895                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11896                           ;	WDT operating mode
 11897                           ;	WDTE = OFF, WDT Disabled
 11898   300004                     	org	3145732
 11899   300004  9F                 	db	159
 11900                           
 11901                           ;Config register CONFIG3H @ 0x300005
 11902                           ;	unspecified, using default values
 11903                           ;	WDT Window Select bits
 11904                           ;	WDTCWS = 0x7, unprogrammed default
 11905                           ;	WDT input clock selector
 11906                           ;	WDTCCS = 0x7, unprogrammed default
 11907   300005                     	org	3145733
 11908   300005  FF                 	db	255
 11909                           
 11910                           ;Config register CONFIG4L @ 0x300006
 11911                           ;	unspecified, using default values
 11912                           ;	Write Protection Block 0
 11913                           ;	WRT0 = 0x1, unprogrammed default
 11914                           ;	Write Protection Block 1
 11915                           ;	WRT1 = 0x1, unprogrammed default
 11916                           ;	Write Protection Block 2
 11917                           ;	WRT2 = 0x1, unprogrammed default
 11918                           ;	Write Protection Block 3
 11919                           ;	WRT3 = 0x1, unprogrammed default
 11920                           ;	Write Protection Block 3
 11921                           ;	WRT4 = 0x1, unprogrammed default
 11922                           ;	Write Protection Block 3
 11923                           ;	WRT5 = 0x1, unprogrammed default
 11924                           ;	Write Protection Block 3
 11925                           ;	WRT6 = 0x1, unprogrammed default
 11926                           ;	Write Protection Block 3
 11927                           ;	WRT7 = 0x1, unprogrammed default
 11928   300006                     	org	3145734
 11929   300006  FF                 	db	255
 11930                           
 11931                           ;Config register CONFIG4H @ 0x300007
 11932                           ;	unspecified, using default values
 11933                           ;	Configuration Register Write Protection bit
 11934                           ;	WRTC = 0x1, unprogrammed default
 11935                           ;	Boot Block Write Protection bit
 11936                           ;	WRTB = 0x1, unprogrammed default
 11937                           ;	Data EEPROM Write Protection bit
 11938                           ;	WRTD = 0x1, unprogrammed default
 11939                           ;	Scanner Enable bit
 11940                           ;	SCANE = 0x1, unprogrammed default
 11941                           ;	Low Voltage Programming Enable bit
 11942                           ;	LVP = 0x1, unprogrammed default
 11943   300007                     	org	3145735
 11944   300007  FF                 	db	255
 11945                           
 11946                           ;Config register CONFIG5L @ 0x300008
 11947                           ;	unspecified, using default values
 11948                           ;	UserNVM Program Memory Code Protection bit
 11949                           ;	CP = 0x1, unprogrammed default
 11950                           ;	DataNVM Memory Code Protection bit
 11951                           ;	CPD = 0x1, unprogrammed default
 11952   300008                     	org	3145736
 11953   300008  FF                 	db	255
 11954                           
 11955                           ;Config register CONFIG5H @ 0x300009
 11956                           ;	unspecified, using default values
 11957   300009                     	org	3145737
 11958   300009  FF                 	db	255
 11959                           
 11960                           ;Config register CONFIG6L @ 0x30000A
 11961                           ;	unspecified, using default values
 11962                           ;	Table Read Protection Block 0
 11963                           ;	EBTR0 = 0x1, unprogrammed default
 11964                           ;	Table Read Protection Block 1
 11965                           ;	EBTR1 = 0x1, unprogrammed default
 11966                           ;	Table Read Protection Block 2
 11967                           ;	EBTR2 = 0x1, unprogrammed default
 11968                           ;	Table Read Protection Block 3
 11969                           ;	EBTR3 = 0x1, unprogrammed default
 11970                           ;	Table Read Protection Block 4
 11971                           ;	EBTR4 = 0x1, unprogrammed default
 11972                           ;	Table Read Protection Block 5
 11973                           ;	EBTR5 = 0x1, unprogrammed default
 11974                           ;	Table Read Protection Block 6
 11975                           ;	EBTR6 = 0x1, unprogrammed default
 11976                           ;	Table Read Protection Block 7
 11977                           ;	EBTR7 = 0x1, unprogrammed default
 11978   30000A                     	org	3145738
 11979   30000A  FF                 	db	255
 11980                           
 11981                           ;Config register CONFIG6H @ 0x30000B
 11982                           ;	unspecified, using default values
 11983                           ;	Boot Block Table Read Protection bit
 11984                           ;	EBTRB = 0x1, unprogrammed default
 11985   30000B                     	org	3145739
 11986   30000B  FF                 	db	255
 11987                           tosu	equ	0xFFF
 11988                           tosh	equ	0xFFE
 11989                           tosl	equ	0xFFD
 11990                           stkptr	equ	0xFFC
 11991                           pclatu	equ	0xFFB
 11992                           pclath	equ	0xFFA
 11993                           pcl	equ	0xFF9
 11994                           tblptru	equ	0xFF8
 11995                           tblptrh	equ	0xFF7
 11996                           tblptrl	equ	0xFF6
 11997                           tablat	equ	0xFF5
 11998                           prodh	equ	0xFF4
 11999                           prodl	equ	0xFF3
 12000                           indf0	equ	0xFEF
 12001                           postinc0	equ	0xFEE
 12002                           postdec0	equ	0xFED
 12003                           preinc0	equ	0xFEC
 12004                           plusw0	equ	0xFEB
 12005                           fsr0h	equ	0xFEA
 12006                           fsr0l	equ	0xFE9
 12007                           wreg	equ	0xFE8
 12008                           indf1	equ	0xFE7
 12009                           postinc1	equ	0xFE6
 12010                           postdec1	equ	0xFE5
 12011                           preinc1	equ	0xFE4
 12012                           plusw1	equ	0xFE3
 12013                           fsr1h	equ	0xFE2
 12014                           fsr1l	equ	0xFE1
 12015                           bsr	equ	0xFE0
 12016                           indf2	equ	0xFDF
 12017                           postinc2	equ	0xFDE
 12018                           postdec2	equ	0xFDD
 12019                           preinc2	equ	0xFDC
 12020                           plusw2	equ	0xFDB
 12021                           fsr2h	equ	0xFDA
 12022                           fsr2l	equ	0xFD9
 12023                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        30
    BSS         103
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     93      94
    BANK0           160     35     105
    BANK1           256    164     226
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    average_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    card_blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_cyan@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_cyan@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_white@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_white@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    colour_to_key@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    colour_to_key@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    convert_HSV@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    convert_HSV@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    forward_navigation@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward_navigation@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    forward_navigation@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    forward_navigation@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    max_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    min_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    pick_card@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    pick_card@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    read_timer@tH	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerH(COMRAM[1]), 

    read_timer@tL	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerL(COMRAM[1]), 

    read_trail@man	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@mann(COMRAM[1]), 

    read_trail@tH	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerH(COMRAM[1]), 

    read_trail@tL	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerL(COMRAM[1]), 

    return_to_sender@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    return_to_sender@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    S1143DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2830$buffer	PTR unsigned char  size(2) Largest target is 0

    S2830$source	PTR const unsigned char  size(2) Largest target is 0

    scale_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    sendArrayCharSerial4@arr	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), trail_timer_high(BANK1[20]), trail_timer_low(BANK1[20]), 

    sendHSVvalSerial4@col_val	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    sendRGBCvalSerial4@col_val	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 
		 -> STR_4(CODE[3]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 

    squareReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    squareReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    UTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    UTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    wait_for_wall@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_forward_navigation
    _return_to_sender->_sendIntSerial4
    _sendIntSerial4->_sprintf
    _forward_navigation->_sendRGBCvalSerial4
    _wait_for_wall->_getRGBCval
    _sendRGBCvalSerial4->_sprintf
    _sendHSVvalSerial4->_sprintf
    _sendArrayCharSerial4->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___lwdiv
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _scale_RGB->___fltol
    ___fltol->___flmul
    ___flmul->___xxtofl
    _pick_card->_card_blue
    _pick_card->_card_cyan
    _pick_card->_card_green
    _pick_card->_card_orange
    _pick_card->_card_pink
    _pick_card->_card_red
    _pick_card->_card_yellow
    _card_yellow->_headbuttReverse
    _card_yellow->_squareReverse
    _card_yellow->_turnLeft90
    _card_yellow->_turnRight90
    _card_white->_UTurn
    _card_white->_headbuttReverse
    _card_red->_headbuttReverse
    _card_red->_turnLeft90
    _card_red->_turnRight90
    _card_pink->_headbuttReverse
    _card_pink->_squareReverse
    _card_pink->_turnLeft90
    _card_pink->_turnRight90
    _squareReverse->_fullSpeedReverse
    _card_orange->_headbuttReverse
    _card_orange->_turnLeft135
    _card_orange->_turnRight135
    _card_green->_headbuttReverse
    _card_green->_turnLeft90
    _card_green->_turnRight90
    _turnRight90->_turnRight
    _turnLeft90->_turnLeft
    _card_cyan->_headbuttReverse
    _card_cyan->_turnLeft135
    _card_cyan->_turnRight135
    _turnRight135->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft135->_turnLeft
    _card_blue->_UTurn
    _card_blue->_headbuttReverse
    _headbuttReverse->_fullSpeedReverse
    _fullSpeedReverse->_setMotorPWM
    _UTurn->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _convert_HSV->___lldiv
    _average_RGBC->___lldiv
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _forward_navigation->_sendArrayCharSerial4

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0  421732
                                              0 BANK0     35    35      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                 _forward_navigation
                    _initDCmotorsPWM
                         _initUSART4
                   _return_to_sender
 ---------------------------------------------------------------------------------
 (1) _return_to_sender                                     5     3      2  195394
                                             76 COMRAM     5     3      2
                     _fullSpeedAhead
                          _pick_card
                         _read_trail
                     _sendIntSerial4
                        _start_timer
                               _stop
                         _stop_timer
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _sendIntSerial4                                      19    17      2    5821
                                             57 COMRAM    19    17      2
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _read_trail                                           3     0      3     294
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward_navigation                                   9     5      4  224278
                                             84 COMRAM     9     5      4
                       _average_RGBC
                      _colour_to_key
                        _convert_HSV
                     _fullSpeedAhead
                          _pick_card
                         _read_timer
                        _reset_timer
                          _scale_RGB
               _sendArrayCharSerial4
                  _sendHSVvalSerial4
                 _sendRGBCvalSerial4
                        _start_timer
                               _stop
                         _stop_timer
               _toggle_tricolour_LED
                      _wait_for_wall
                        _write_trail
 ---------------------------------------------------------------------------------
 (2) _write_trail                                          3     1      2     218
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _wait_for_wall                                        4     2      2     910
                                             12 COMRAM     4     2      2
                         _getRGBCval
 ---------------------------------------------------------------------------------
 (2) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendRGBCvalSerial4                                  27    26      1    5735
                                             57 COMRAM    27    26      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sendHSVvalSerial4                                   22    21      1    5713
                                             57 COMRAM    22    21      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sendArrayCharSerial4                               167   165      2    6038
                                             57 COMRAM     3     1      2
                                              0 BANK1    164   164      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             26    15     11    5074
                                             31 COMRAM    26    15     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             4     1      3    4249
                                             27 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           14    11      3    3897
                                             13 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3     934
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _sendStringSerial4                                    2     0      2     447
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (4) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _scale_RGB                                            3     2      1    5963
                                             49 COMRAM     3     2      1
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1236
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1143
                                             39 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3420
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_timer                                           2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _pick_card                                            6     2      4  182450
                                             32 COMRAM     6     2      4
                          _card_blue
                          _card_cyan
                         _card_green
                        _card_orange
                          _card_pink
                           _card_red
                         _card_white
                        _card_yellow
 ---------------------------------------------------------------------------------
 (3) _card_yellow                                          5     2      3   29754
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_white                                           2     0      2   15740
                                             27 COMRAM     2     0      2
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (3) _card_red                                             5     2      3   22850
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_pink                                            5     2      3   29754
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _squareReverse                                        4     2      2    6816
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _card_orange                                          5     2      3   22242
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _card_green                                           5     2      3   22850
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _turnRight90                                          4     2      2    6816
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnLeft90                                           4     2      2    6968
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_cyan                                            5     2      3   22242
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                         4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (5) _turnRight                                            5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                          4     2      2    6664
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_blue                                            5     2      3   15882
                                             27 COMRAM     5     2      3
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (4) _headbuttReverse                                      4     2      2    8640
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (5) _fullSpeedReverse                                     5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _UTurn                                                4     2      2    6816
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (5) _turnLeft                                             5     3      2    2747
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    3525
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    1981
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     510
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _convert_HSV                                         52    50      2    5717
                                             13 COMRAM    52    50      2
                            ___lldiv
                             ___lmul
                            _max_RGB
                            _min_RGB
 ---------------------------------------------------------------------------------
 (3) _min_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _max_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1434
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _colour_to_key                                        5     3      2     932
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _average_RGBC                                        20    19      1    3012
                                             13 COMRAM    20    19      1
                            ___lldiv
                         _getRGBCval
 ---------------------------------------------------------------------------------
 (3) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (4) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1834
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (6) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
     _start_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _forward_navigation
     _average_RGBC
       ___lldiv
       _getRGBCval
         _color_read_Blue
           _I2C_2_Master_Read
             _I2C_2_Master_Idle
           _I2C_2_Master_RepStart
             _I2C_2_Master_Idle
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Clear
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Green
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Red
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
     _colour_to_key
     _convert_HSV
       ___lldiv
       ___lmul
       _max_RGB
       _min_RGB
     _fullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _pick_card
       _card_blue
         _UTurn
           _stop
             _setMotorPWM
           _turnLeft
             _setMotorPWM
         _headbuttReverse
           _fullSpeedReverse
             _setMotorPWM
           _stop
       _card_cyan
         _headbuttReverse
         _turnLeft135
           _stop
           _turnLeft
         _turnRight135
           _stop
           _turnRight
             _setMotorPWM
       _card_green
         _headbuttReverse
         _turnLeft90
           _stop
           _turnLeft
         _turnRight90
           _stop
           _turnRight
       _card_orange
         _headbuttReverse
         _turnLeft135
         _turnRight135
       _card_pink
         _headbuttReverse
         _squareReverse
           _fullSpeedReverse
           _stop
         _turnLeft90
         _turnRight90
       _card_red
         _headbuttReverse
         _turnLeft90
         _turnRight90
       _card_white
         _UTurn
         _headbuttReverse
       _card_yellow
         _headbuttReverse
         _squareReverse
         _turnLeft90
         _turnRight90
     _read_timer
     _reset_timer
     _scale_RGB
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _sendArrayCharSerial4
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             ___lwdiv
             ___lwmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _sendHSVvalSerial4
       _sendStringSerial4
       _sprintf
     _sendRGBCvalSerial4
       _sendStringSerial4
       _sprintf
     _start_timer
     _stop
     _stop_timer
     _toggle_tricolour_LED
     _wait_for_wall
       _getRGBCval
     _write_trail
   _initDCmotorsPWM
   _initUSART4
   _return_to_sender
     _fullSpeedAhead
     _pick_card
     _read_trail
     _sendIntSerial4
       _sendStringSerial4
       _sprintf
     _start_timer
     _stop
     _stop_timer
     _write_timer

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     A4      E2       7       88.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     23      69       5       65.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5D      5E       1      100.0%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      9      0       0      57        0.0%
BITBIGSFRlllhhh      9      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A9      61        0.0%
DATA                 0      0     1A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 15:24:31 2024

                 _turn180Delay 00B5                ??_wait_for_wall 000F                 _color_read_Red 3B26  
              _color_read_Blue 3C16                _trail_timer_low 01BA         ??_sendArrayCharSerial4 003C  
          card_green@backtrack 001E                             l42 2C22                             l27 3FEE  
                           l71 3B74                             l80 3C14                             l65 3E68  
                           l74 3BC4                             l83 3AD4                             l68 40F6  
                           l77 3C64                             l96 3D84                             l89 227A  
                           l99 356E                   ___awdiv@sign 0006            ___wmul@multiplicand 0003  
             _trail_timer_high 01CE               _color_read_Clear 3BC6               _color_read_Green 3B76  
                          l101 35A8                            l104 34F2                            l106 352C  
                          l125 14E4                            l109 2B5A                            l311 4018  
                          l223 2882                            l231 33B0                            l320 41A2  
                          l136 1946                            l216 3322                            l137 1948  
                          l314 401A                            l323 418E                            l332 3DC6  
                          l252 2EA8                            l236 3018                            l260 30CE  
                          l244 2F60                            l317 4040                            l326 4198  
                          l255 2F18                            l239 3088                            l263 313E  
                          l247 2FD0                            l272 3EFE                            l432 272C  
                          l329 416C                            l281 3FC0                            l266 3F90  
                          l275 3ECC                            l427 2680                            l700 41AA  
                          l284 3E9A                            l269 3F60                            l541 3834  
                          l278 3F30                            l534 3764                            l462 4136  
                          l471 39CA                            l703 41A6                            l712 4178  
                          l465 414A                            l562 34B0                            l706 4160  
                          l482 3A28                            l474 40D6                            l555 3430  
                          l459 4132                            l715 3B24                            l548 3904  
                          l709 4184                            l485 3CB0                            l718 3E00  
                          l479 361E                            l727 25CE                            l760 36FC  
                          l576 389C                            l592 2A84                            l569 37CC  
                          l737 2DA4                            l579 408E                            l748 40B4  
                          l782 3292                            l775 3282                            l759 36EC  
                          l697 4068                            l992 31EE                            l979 2CE6  
                          _ISR 0008         ??_toggle_tricolour_LED 0001                            _abs 3E02  
                  _start_timer 41A8                   ___awmod@sign 0006                            wreg 0FE8  
                 ___flmul@aexp 0020                   ___flmul@bexp 0021                   ?_convert_HSV 000E  
                 ___flmul@sign 001B                   ___flmul@temp 0026                   ___flmul@prod 0022  
               min_RGB@min_val 0005                    _squareDelay 00B1                           ?_ISR 0001  
                 ___fltol@exp1 0031                           ?_abs 0007                           l1045 2988  
                         l1410 236A                           l1403 22D2                           l1246 3692  
                         l1406 242E                           l1239 368A                           l1256 3968  
                         l1417 23C6                           l3201 2C36                           l1249 3960  
                         l1362 1A0E                           l1506 2E5E                           l1426 3CFC  
                         l4011 4002                           l1371 1C7C                           l3211 2C5C  
                         l3203 2C3E                           l4003 2B5C                           l1372 1C6A  
                         l4013 4004                           l4005 3FF0                           l4021 20C8  
                         l4101 10BC                           l3221 2C94                           l3213 2C64  
                         l3205 2C42                           l1517 41AC                           l3301 2DEC  
                         l1366 1D72                           l4015 4006                           l4007 3FFA  
                         l3311 419A                           l4031 2154                           l4023 20D0  
                         l4111 1172                           l4103 10C8                           l3151 40AC  
                         l3231 2CC0                           l3223 2C9A                           l3215 2C76  
                         l3207 2C50                           l3303 2E1E                           l4009 4000  
                         l3313 419E                           l3321 4194                           l4017 40DA  
                         l4041 2256                           l4025 20EE                           l4033 2156  
                         l4201 166E                           l4121 1208                           l4105 10D2  
                         l4113 117E                           l3161 3642                           l3401 2FA0  
                         l1369 1C04                           l3225 2CB0                           l3217 2C7E  
                         l3233 2CC6                           l3209 2C58                           l3241 3140  
                         l3315 4164                           l3331 3D94                           l3323 4186  
                         l4043 2268                           l4035 2166                           l4027 2110  
                         l4019 2080                           l4211 16F2                           l4203 1672  
                         l4131 1294                           l4123 1238                           l4115 118A  
                         l4107 110E                           l3171 367C                           l3163 364A  
                         l3155 3620                           l3411 30AE                           l3403 2FB8  
                         l1379 1D34                           l3235 2CD6                           l3227 2CB8  
                         l3219 2C86                           l3251 316C                           l3243 3144  
                         l1491 3E1C                           l3307 3E02                           l1467 1F16  
                         l1468 207E                           l3317 4168                           l3333 3D9C  
                         l3325 418A                           l4037 2236                           l4029 2132  
                         l4221 1772                           l4205 1690                           l4213 16F6  
                         l4133 12A6                           l4141 1352                           l4117 1194  
                         l4109 1142                           l4125 1240                           l4061 0E42  
                         l3173 367E                           l3165 3658                           l3157 3628  
                         l3149 4090                           l3181 2798                           l3341 3324  
                         l3421 30FE                           l3413 30C6                           l3405 308A  
                         l3237 2CDE                           l3229 2CBA                           l3261 31A4  
                         l3253 3174                           l3245 3152                           l3309 3E10  
                         l3501 2038                           l4301 39CC                           l4053 3D74  
                         l4045 3D42                           l1494 3E34                           l1486 3A76  
                         l3319 4190                           l3335 3DC2                           l3327 3D88  
                         l4039 2244                           l4231 17F2                           l4215 1712  
                         l4223 1776                           l4207 16AE                           l4151 1414  
                         l4143 135E                           l4135 12E2                           l4127 1262  
                         l4119 11D4                           l4071 0E9A                           l4063 0E52  
                         l3175 3684                           l3167 365E                           l3159 363A  
                         l3191 2846                           l3183 27AA                           l3351 3364  
                         l3343 3328                           l3415 30E6                           l3423 310E  
                         l3407 3092                           l5111 374E                           l4311 298E  
                         l4055 2A86                           l3271 31DE                           l3263 31BA  
                         l3255 3186                           l3247 315A                           l3511 2076  
                         l3503 2040                           l3431 1DA2                           l1487 3A7E  
                         l4303 3A1E                           l4047 3D46                           l3193 401A  
                         l3337 3DC4                           l3329 3D8C                           l3521 3B26  
                         l4241 1876                           l4225 1792                           l4233 17F6  
                         l4217 172E                           l4209 16D0                           l3601 352E  
                         l4161 147A                           l4145 1370                           l4137 1316  
                         l4129 1288                           l4081 0F48                           l4073 0EC4  
                         l4153 141C                           l4065 0E5E                           l4057 0E1A  
                         l3169 3674                           l3185 27AE                           l3177 2730  
                         l3353 336C                           l3345 333E                           l3361 2FD2  
                         l3425 3126                           l3417 30EE                           l3409 309E  
                         l5121 38EE                           l5113 349A                           l4321 29F2  
                         l4313 29A2                           l3273 31E6                           l3265 31C2  
                         l3257 318E                           l3249 315E                           l3281 3920  
                         l5105 202A                           l3441 1DE6                           l3433 1DAA  
                         l4305 3C66                           l4049 3D4E                           l4401 4116  
                         l3195 402A                           l3523 3B6C                           l4251 18E0  
                         l4235 1814                           l4243 187A                           l4227 17AE  
                         l4219 1750                           l4171 14E6                           l3603 353C  
                         l4163 14AA                           l4155 142E                           l4147 13B0  
                         l4139 1346                           l4091 1008                           l4083 0F78  
                         l4075 0EC4                           l4067 0E70                           l4059 0E32  
                         l3187 27EC                           l3179 274A                           l3355 3374  
                         l3347 3346                           l3371 3030                           l3363 2FDA  
                         l3419 30F6                           l5115 37B6                           l5107 2A3E  
                         l4323 2A06                           l4315 29B6                           l3267 31C8  
                         l3259 3196                           l3291 395A                           l3283 3928  
                         l3451 1E70                           l3443 1E06                           l3435 1DB8  
                         l3507 204C                           l3427 1D74                           l4307 3CA6  
                         l4411 4130                           l4403 4120                           l4421 405A  
                         l4413 4042                           l3533 3C16                           l3541 3C0C  
                         l4253 1900                           l4245 189A                           l4237 1832  
                         l4229 17D0                           l4181 1566                           l4173 14EA  
                         l3605 355C                           l3621 3524                           l3613 34B2  
                         l4165 14B2                           l4157 143A                           l4149 13E4  
                         l4093 103C                           l4077 0ED4                           l4085 0F84  
                         l4069 0E7C                           l3189 2806                           l4261 2E60  
                         l3349 335C                           l3357 3384                           l3381 3070  
                         l3373 3038                           l3365 2FE6                           l5117 381E  
                         l5109 341A                           l4325 2A1A                           l4317 29CA  
                         l4309 298A                           l4341 414C                           l3197 2C24  
                         l3269 31CE                           l3285 3936                           l3277 3906  
                         l3293 2DA6                           l3509 206E                           l3461 1EC2  
                         l3453 1E8C                           l3445 1E1E                           l3437 1DBC  
                         l3429 1D7C                           l4405 4122                           l4501 2D12  
                         l4335 416E                           l4423 4060                           l4415 404A  
                         l3535 3C5C                           l3527 3B76                           l4255 1920  
                         l4247 18BA                           l4239 1854                           l4191 15EA  
                         l4175 1506                           l4183 156A                           l3607 358E  
                         l3615 34C0                           l4167 14C0                           l4159 1446  
                         l4095 106C                           l4087 0F90                           l4079 0F14  
                         l4271 2EC0                           l4263 2E68                           l3359 339A  
                         l3375 3040                           l3367 2FF8                           l3391 2F58  
                         l3383 2F1A                           l5119 3886                           l3551 3F32  
                         l3711 3486                           l3703 3432                           l4319 29DE  
                         l3631 3998                           l3199 2C28                           l3287 394C  
                         l3279 3918                           l3295 2DB6                           l3463 1ED2  
                         l3471 1F04                           l3455 1E90                           l3447 1E28  
                         l3439 1DC6                           l4351 3DCA                           l4407 412C  
                         l4343 3AD6                           l4511 2D5A                           l4503 2D1C  
                         l4337 41A8                           l4425 4064                           l4417 404C  
                         l3529 3BBC                           l4257 1942                           l4249 18DC  
                         l4185 1588                           l4193 15EE                           l4177 1522  
                         l3609 35A0                           l3617 34E0                           l4169 14D2  
                         l4089 0FC4                           l4097 1074                           l4281 2F00  
                         l4273 2EC8                           l4265 2E76                           l3377 3048  
                         l3369 3010                           l3561 3EF2                           l3393 2F78  
                         l3385 2F22                           l3545 3F62                           l3553 3F3E  
                         l3721 3786                           l3705 3436                           l4329 2A2A  
                         l3801 19B2                           l3625 396A                           l3289 3954  
                         l3297 2DC6                           l3481 1F6C                           l3465 1EE0  
                         l3457 1EA2                           l3449 1E40                           l3473 1F22  
                         l3641 3CE6                           l3633 3CB2                           l4361 3DF8  
                         l4353 3DD6                           l4409 412E                           l4345 3AEE  
                         l4521 2D8C                           l4513 2D5E                           l4505 2D26  
                         l4427 4066                           l4419 4056                           l4371 3E44  
                         l3539 3BC6                           l4195 160C                           l4187 15A6  
                         l4179 1544                           l3619 3512                           l4099 1096  
                         l4275 2ED0                           l4267 2E88                           l3379 3058  
                         l3571 3F0C                           l3395 2F80                           l3387 2F30  
                         l3563 3E9C                           l3731 3836                           l3547 3F6E  
                         l3555 3F54                           l3707 345E                           l3651 371E  
                         l3811 19E8                           l3803 19B8                           l3627 396E  
                         l3299 2DD0                           l3491 1FD6                           l3483 1F90  
                         l3475 1F42                           l3467 1EE8                           l3459 1EB2  
                         l3643 3CF4                           l3635 3CBE                           l4339 41A4  
                         l4363 3DFC                           l4355 3DE2                           l4347 3B00  
                         l4283 40B6                           l4515 2D6A                           l4507 2D38  
                         l4523 2D92                           l4365 3FC2                           l4373 3E54  
                         l4197 162A                           l4189 15C8                           l4277 2ED8  
                         l4269 2EA0                           l3573 3F24                           l3557 3ECE  
                         l3397 2F88                           l3389 2F40                           l3565 3EA8  
                         l3733 383A                           l3549 3F84                           l3661 37CE  
                         l3725 37A2                           l3717 3766                           l3581 3E6A  
                         l3901 1D48                           l3813 19F8                           l3805 19C6  
                         l3629 3994                           l3493 1FF0                           l3485 1FAC  
                         l3477 1F5A                           l3469 1F02                           l3637 3CC6  
                         l4357 3DEE                           l4381 32CA                           l4349 3B12  
                         l4285 40CC                           l4517 2D7C                           l4509 2D4C  
                         l4375 3E5E                           l4367 3E36                           l4199 164C  
                         l3751 3694                           l4279 2EE8                           l3575 3F92  
                         l3559 3EDA                           l3399 2F90                           l3567 3EC0  
                         l3735 3856                           l3663 37D2                           l3719 376A  
                         l3583 3E76                           l3655 373A                           l3647 36FE  
                         l3903 1D56                           l3831 1A7A                           l3823 1A42  
                         l3815 19FE                           l3807 19C8                           l3495 1FF2  
                         l3487 1FB0                           l3479 1F68                           l3591 3A2A  
                         l3639 3CCE                           l4359 3DF4                           l4391 3308  
                         l4383 32CE                           l4519 2D88                           l4369 3E3A  
                         l3761 31F0                           l3753 36A4                           l3569 3F00  
                         l3577 3F9E                           l3665 37EE                           l3585 3E8E  
                         l3649 3702                           l3745 406A                           l3905 1D58  
                         l3841 1AC4                           l3833 1A92                           l3825 1A4E  
                         l3817 1A1E                           l3809 19D8                           l3921 28D8  
                         l3913 2884                           l3489 1FC2                           l3593 3A2E  
                         l4801 2444                           l4393 330A                           l4385 32F2  
                         l4377 3294                           l3747 417C                           l3771 3238  
                         l3763 3200                           l3755 36B2                           l3579 3FB4  
                         l3683 38DA                           l3675 389E                           l3739 3872  
                         l3691 33B6                           l3907 1D5E                           l3851 1B1A  
                         l3843 1AD4                           l3835 1A9E                           l3827 1A58  
                         l3819 1A2E                           l3923 28DA                           l3915 289A  
                         l3587 4136                           l3499 2008                           l3595 3A3C  
                         l4811 247C                           l4803 2450                           l4395 3314  
                         l4387 32FC                           l4379 32A4                           l3749 4180  
                         l3781 327C                           l3773 3242                           l3765 3216  
                         l3757 36C2                           l3677 38A2                           l3669 380A  
                         l3693 33DE                           l3909 1D62                           l3861 1BBE  
                         l3853 1B36                           l3845 1AE0                           l3837 1AAA  
                         l3829 1A6E                           l3925 28EA                           l3589 4146  
                         l3597 3A56                           l4821 24BE                           l4813 2494  
                         l4805 245C                           l4397 3316                           l4389 32FE  
                         l4493 2CE8                           l4901 26F4                           l3775 3260  
                         l3767 321E                           l3599 3A80                           l3759 36CC  
                         l3679 38BE                           l3871 1C14                           l3863 1BCC  
                         l3855 1B42                           l3847 1AF0                           l3839 1AB8  
                         l3791 1976                           l3783 194A                           l3951 2968  
                         l3935 2914                           l3927 28EE                           l3919 28AE  
                         l4831 24F4                           l4823 24C2                           l4815 249C  
                         l4807 2468                           l4399 3320                           l4495 2CEC  
                         l4911 271A                           l4903 2708                           l3777 3270  
                         l3769 322A                           l3697 3406                           l3689 33B2  
                         l3873 1C22                           l3865 1BEA                           l3857 1B5E  
                         l3849 1B0A                           l3793 1986                           l3785 1956  
                         l3953 2978                           l3945 293C                           l3937 291E  
                         l3929 28FC                           l3961 229C                           l4841 2550  
                         l4833 2516                           l4825 24DA                           l4817 24A4  
                         l4809 2478                           l4497 2CF8                           l4913 271C  
                         l4905 2714                           l3779 3272                           l3883 1C8C  
                         l3891 1CD4                           l3875 1C26                           l3867 1BF4  
                         l3859 1B88                           l3795 1996                           l3787 1964  
                         l3947 2948                           l3939 2928                           l3971 2314  
                         l3963 22E2                           l4851 259A                           l4843 2562  
                         l4835 252A                           l4827 24EC                           l4819 24B0  
                         l4499 2D08                           l3893 1CEE                           l3885 1C98  
                         l3877 1C34                           l3869 1C02                           l3797 199C  
                         l3789 1966                           l3949 2958                           l3981 239C  
                         l3973 2320                           l3965 22F8                           l3957 227E  
                         l4781 35AA                           l4853 25A6                           l4845 2566  
                         l4837 252E                           l4829 24F0                           l4861 2616  
                         l3895 1D02                           l3887 1CA6                           l3879 1C62  
                         l3799 19AC                           l3991 23DA                           l3983 23A8  
                         l3975 2352                           l3959 228E                           l4791 35EC  
                         l4855 25B2                           l4847 258A                           l4839 253C  
                         l4871 264A                           l4863 261E                           l3897 1D1C  
                         l3889 1CD0                           l3993 23FE                           l3985 23B6  
                         l3977 2354                           l3969 230C                           l4793 3602  
                         l4849 2592                           l4857 25BE                           l4881 266E  
                         l4873 2652                           l4865 2626                           l3899 1D38  
                         l3995 240E                           l3987 23D4                           l3979 2360  
                         l4787 35B8                           l4795 2430                           l4891 2678  
                         l4883 2670                           l4875 2662                           l4867 263A  
                         l4859 25D0                           l3997 241C                           l3989 23D6  
                         l4789 35E8                           l4797 2434                           l4893 267A  
                         l4885 2672                           l4877 2666                           l4869 2642  
                         l3999 241E                           l4799 243C                           l4895 267E  
                         l4887 2674                           l4879 266A                           l4897 268E  
                         l4889 2676                           l4899 26DA                           STR_1 0E0F  
                         STR_2 0E14                           STR_3 0E14                           STR_4 0E11  
                         STR_5 0E01                           STR_6 0E04                           u2010 363A  
                         u2011 3636                           u2020 3658                           u2100 2C76  
                         u2021 3654                           u2101 2C72                           u2030 3674  
                         u2110 2C94                           u2031 3670                           u2111 2C90  
                         u2040 274A                           u3000 228E                           u2120 2CB0  
                         u2200 3918                           u2041 2746                           u3001 228A  
                         u2121 2CAC                           u2201 3914                           u2050 2806  
                         u3010 229C                           u2130 2CD6                           u2210 3936  
                         u2051 2802                           u3011 2298                           u2131 2CD2  
                         u2211 3932                           u2060 402A                           u2300 333E  
                         u3020 22F8                           u2140 3152                           u2220 394C  
                         u3100 2B6E                           u2061 4026                           u2301 333A  
                         u3021 22F4                           u2141 314E                           u2221 3948  
                         u3101 2B66                           u2070 4040                           u2310 335C  
                         u3030 234E                           u2150 316C                           u2230 2DB6  
                         u2071 403C                           u2311 3358                           u3031 234A  
                         u2151 3168                           u2231 2DB2                           u2320 339A  
                         u2400 2FB8                           u3040 2398                           u2080 2C36  
                         u2160 3186                           u2240 2DC6                           u3200 2C10  
                         u3120 2B8E                   _BAUD4CONbits 0EE9                           u2321 3396  
                         u2401 2FB4                           u3041 2394                           u2081 2C32  
                         u2161 3182                           u2241 2DC2                           u3201 2C08  
                         u3121 2B86                           u2330 33B0                           u2410 2FD0  
                         u3050 23B6                           u2090 2C50                           u2170 31A4  
                         u2250 2DEC                           u4010 25CE                           u2331 33AC  
                         u2411 2FCC                           u3051 23B2                           u2091 2C4C  
                         u2171 31A0                           u2251 2DE8                           u4011 25CA  
                         u3220 2166                           u3300 1262                           u2340 3010  
                         u2420 30C6                           u3060 23C6                           u2180 31BA  
                         u2260 2E1E                           u2500 1E3E                           u3140 2BAE  
                         u4020 268E                           u3221 2162                           u3301 125E  
                         u2341 300C                           u2421 30C2                           u3061 23C2  
                         u2181 31B6                           u2261 2E1A                           u3141 2BA6  
                         u4021 268A                           u3310 1288                           u2350 3030  
                         u2430 30E6                           u3070 23D4                           u2190 31DE  
                         u2270 3E10                           u2510 1EA2                           u3118 2B70  
                         u3230 3D70                           u4030 26A2                           u3311 1284  
                         u2351 302C                           u2431 30E2                           u3071 23D0  
                         u2191 31DA                           u2271 3E0C                           u2511 1E9E  
                         u3231 3D6C                           u4031 2698                           u2280 3DB0  
                         u3400 15A6                           u2360 3070                           u2440 3126  
                         u3080 240E                           u2600 4146                           u2520 1EB2  
                         u3160 2BD0                           u3240 3D84                           u4008 257A  
                         u2281 3DA8                           u3401 15A2                           u2361 306C  
                         u2441 3122                           u3081 240A                           u2601 4142  
                         u2521 1EAE                           u3161 2BC8                           u3241 3D80  
                         u3410 15C8                           u3250 0E70                           u2370 3088  
                         u2450 313E                           u3090 241C                           u2530 1EC2  
                         u2610 3A76                           u3218 2C12                           u3138 2B90  
                         u4050 26C6                           _T2PR 0FBC                           u3411 15C4  
                         u3251 0E6C                           u2371 3084                           u2451 313A  
                         u3091 2418                           u2531 1EBE                           u2611 3A72  
                         u4107 24CC                           u4051 26BE                           u3500 16F2  
                         u3420 15EA                           u2700 36EC                           u2620 355C  
                         u3340 142E                           u3260 0E9A                           u2380 2F58  
                         u2540 1ED2                           u2460 1DA2                           u3180 2BEE  
                         u3501 16EE                           u3421 15E6                           u2701 36E8  
                         u2621 3558                           u3341 142A                           u3325 1296  
                         u3261 0E96                           u2381 2F54                           u4117 3E80  
                         u2541 1ECE                           u2461 1D9E                           u3181 2BE6  
                         u2710 3216                           u3510 1712                           u3430 160C  
                         u3350 1506                           u2630 358E                           u3270 0EC4  
                         u2390 2F78                           u2550 1F16                           u2470 1DE6  
                         u3158 2BB0                           u4070 272C                           u2711 3212  
                         u3511 170E                           u3431 1608                           u3351 1502  
                         u2631 358A                           u3335 1360                           u3271 0EC0  
                         u4207 304E                           u2391 2F74                           u4127 3F48  
                         u2551 1F12                           u2471 1DE2                           u4071 2728  
                         u2720 3238                           u3600 1832                           u3520 172E  
                         u3440 162A                           u3360 1522                           u2640 34E0  
                         u3280 1096                           u2800 1A1E                           u2560 1F42  
                         u2480 1E06                           u4048 26A6                           u2721 3234  
                         u3601 182E                           u3521 172A                           u3441 1626  
                         u3361 151E                           u2641 34DC                           u3281 1092  
                         u4217 337A                           u4137 3F78                           u2801 1A1A  
                         u2561 1F3E                           u2481 1E02                           u2730 3260  
                         u2298 3DB2                           u3610 1854                           u3530 1750  
                         u3450 164C                           u3370 1544                           u2650 3512  
                         u3290 10BC                           u2810 1A2E                           u2570 1FC2  
                         u2490 1E3C                           u3178 2BD2                           u2731 325C  
                         u3611 1850                           u3531 174C                           u3451 1648  
                         u3371 1540                           u2651 350E                           u3291 10B8  
                         u4227 2EDE                           u4147 3EB2                           u2811 1A2A  
                         u2571 1FBE                           u2491 1E36                           u3620 1876  
                         u3540 1772                           u3460 166E                           u3380 1566  
                         u3700 2EC0                           u2900 1CEE                           u2820 1BA8  
                         u2740 1964                           u2660 3990                           u2580 1FD2  
                         u4068 26CA                           u4237 3E4A                           u3621 1872  
                         u3541 176E                           u3461 166A                           u3381 1562  
                         u3701 2EBC                           u4157 2F96                           u2901 1CEA  
                         u2741 1960                           u2581 1FCE                           u3630 189A  
                         u3550 1792                           u3470 1690                           u3390 1588  
                         u3710 2F00                           u2910 1D1C                           u2830 1C02  
                         u2750 1976                           u2670 39BA                           u2590 2004  
                         u3198 2BF0                           u3631 1896                           u3551 178E  
                         u3471 168C                           u3391 1584                           u3711 2EFC  
                         u4167 3EE4                           u2911 1D18                           u2831 1BFE  
                         u2751 1972                           u2591 2000                           u4087 26E6  
                         u3640 18BA                           u3560 17AE                           u3480 16AE  
                         u3720 2F18                           u2920 1D56                           u2840 1C22  
                         u2760 1986                           u2680 39CA                           u3641 18B6  
                         u3561 17AA                           u3481 16AA                           u3721 2F14  
                         u4177 3FA8                           u2921 1D52                           u2841 1C1E  
                         u2825 1B9E                           u2761 1982                           u2681 39C6  
                         u4097 2486                           u3650 18DC                           u3570 17D0  
                         u3490 16D0                           u2690 36B2                           u2850 1C34  
                         u2770 19C6                           u2930 289A                           u3651 18D8  
                         u3571 17CC                           u3491 16CC                           u2691 36AE  
                         u4187 3104                           u2851 1C30                           u2771 19C2  
                         u2931 2896                           u2667 3986                           u3660 1900  
                         u3580 17F2                           u2860 1C62                           u2780 19D8  
                         u2940 28CE                           u3820 2D38                           u3661 18FC  
                         u3581 17EE                           u4197 3F16                           u2861 1C5E  
                         u2781 19D4                           u2677 39B0                           u3821 2D34  
                         u3670 1920                           u3590 1814                           u2870 1C78  
                         u2790 19E8                           u2950 28FC                           u3830 2D7C  
                         u3671 191C                           u3591 1810                           u2871 1C74  
                         u2791 19E4                           u2951 28F8                           u3831 2D78  
                         u3680 1942                           u2880 1C8C                           u2960 2910  
                         u3840 2DA4                           u3681 193E                           u2881 1C88  
                         u2961 290C                           u2945 28C4                           u3841 2DA0  
                         u3690 2EA0                           u2890 1CA6                           u2970 2938  
                         u3930 3602                           u3691 2E9C                           u2891 1CA2  
                         u2971 2934                           u3931 35FE                           u2980 2958  
                         u3940 24EC                           u2981 2954                           u3941 24E8  
                         u2990 2968                           u3950 2506                           u2991 2964  
                         u3951 24FE                           u3970 252A                           u3971 2526  
                         u3980 2562                           u3981 255E                           u3990 2578  
                         u3991 2570                           u3968 2508                  _colour_to_key 14E6  
                         abs@a 0007                           _dbuf 0060                           _main 25D0  
                         _prec 0084                           _nout 0080                           fsr1h 0FE2  
                         fsr2h 0FDA                           indf1 0FE7                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 005F  
                         _stop 3324             _sendRGBCvalSerial4 39CC                           prodh 0FF4  
                         prodl 0FF3                 ??_average_RGBC 000F                           start 0042  
           average_RGBC@temp_B 001A             average_RGBC@temp_C 001E             average_RGBC@temp_G 0016  
           average_RGBC@temp_R 0012         __end_of_color_read_Red 3B76              headbuttReverse@mL 0018  
            headbuttReverse@mR 0019                   ___param_bank 0000                    _turnLeft135 3ECE  
                        ??_ISR 0001            ?_sendRGBCvalSerial4 003A                          ??_abs 0009  
                write_timer@tH 0002                  write_timer@tL 0001                  write_trail@tH 0003  
                write_trail@tL 0001                    _turnRight90 3F32                 _sendIntSerial4 40B6  
                ___fltol@sign1 0030                          ?_main 0001             _timer_high_pointer 00AF  
              __end_of___awdiv 2CE8                __end_of___awmod 31F0                __end_of___flmul 1D74  
              __end_of___fltol 298A                __end_of___lldiv 3294                          ?_stop 0013  
              ___awdiv@divisor 0003                __end_of___lwdiv 3694                __end_of___lwmod 396A  
                        i2l745 003E                ___awdiv@counter 0005                   vfpfcnvrt@cnt 0014  
                 vfpfcnvrt@fmt 000F                          _TMR0H 0FD4                          _TMR0L 0FD3  
             ?_headbuttReverse 0018            ___lmul@multiplicand 0005        __end_of_sendCharSerial4 414C  
                        _UTurn 3F00     __end_of_I2C_2_Master_Start 41A4                    _write_timer 417A  
   __end_of_I2C_2_Master_Write 416E                    _write_trail 3DC8                __end_of_max_RGB 35AA  
              __end_of_min_RGB 352E                          _flags 0086           ??_sendRGBCvalSerial4 003B  
                        _fputc 2DA6                          _width 0082                          _putch 41AC  
                        main@i 008A                 ?_colour_to_key 0001              _turnRight135Delay 00B7  
                        tablat 0FF5                _turnLeft90Delay 00BD                          plusw2 0FDB  
                        ttemp5 0060                          ttemp6 0063                          ttemp7 0067  
                        status 0FD8                          wtemp8 0060                __end_of_sprintf 3CFE  
             _return_to_sender 2CE8        __end_of_color_read_Blue 3C66                  average_RGBC@i 0011  
                average_RGBC@p 000E          _I2C_2_Master_RepStart 4186                ?_color_read_Red 0005  
              __initialization 3CFE                   __end_of_main 2730                   __end_of_stop 33B2  
       __end_of_sendIntSerial4 40D8                         ??_main 0088                         ??_stop 0015  
                __activetblptr 0003                 write_trail@man 0002                   _turnRight135 3E9C  
                       ?_UTurn 0018                 _bottomGearLeft 00C4                   ?_setMotorPWM 000E  
                       ?_fputc 0001                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21                  _squareReverse 3E6A  
             ___awdiv@dividend 0001                         ?_putch 0001                         _RC0PPS 0E62  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       _RD6PPS 0E70                         _RE4PPS 0E76                         _RG6PPS 0E88  
                       i2l4581 000A                         i2l4583 001A                         i2l4585 002A  
                       i2l4587 0034                         i2l4589 003A                  vfpfcnvrt@done 0013  
     __end_of_color_click_init 3E6A                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of_card_red 3766               __end_of___xxtofl 2430               _fullSpeedReverse 308A  
             _turnLeft135Delay 00B9                  ??_Timer0_init 0003                   ?_reset_timer 0001  
                 _CCPTMRS0bits 0FAD      sendArrayCharSerial4@index 01A1                   vfprintf@cfmt 001F  
                 convert_HSV@C 0040                   convert_HSV@M 003E                         ___lmul 3694  
                 convert_HSV@m 001A                         ___wmul 4090                      ??___awdiv 0005  
                    ??___awmod 0005                      ??___flmul 0017                      ??___fltol 002C  
                    ??___lldiv 0009                      ??___lwdiv 000B                      ??___lwmod 0005  
              ?_sendIntSerial4 003A           forward_navigation@p1 0057           forward_navigation@p2 0058  
                       clear_0 3D24                         clear_1 3D30           forward_navigation@mL 0055  
         forward_navigation@mR 0056               ___awdiv@quotient 0007                ___awmod@divisor 0003  
           fullSpeedReverse@mL 0013             fullSpeedReverse@mR 0014                         isa$std 0001  
              ___awmod@counter 0005                      ??_max_RGB 0003             card_blue@backtrack 001E  
                    ??_min_RGB 0003                         fputc@c 0001              _timer_low_pointer 00AD  
       return_to_sender@timerH 004F         return_to_sender@timerL 0050           __end_of_average_RGBC 227C  
                 __mediumconst 0000                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8               ?_sendCharSerial4 0001                         putch@c 0001  
              ??_colour_to_key 0003                 ?_squareReverse 0018               __end_of_vfprintf 3A80  
                       stop@mL 0013                         stop@mR 0014              ??_initDCmotorsPWM 0003  
                    ??_sprintf 002B               __end_of_turnLeft 308A            convert_HSV@temp_610 0028  
          convert_HSV@temp_611 002C            convert_HSV@temp_612 0030            convert_HSV@temp_613 0034  
          convert_HSV@temp_614 0020            convert_HSV@temp_609 0038                   ___xxtofl@arg 000B  
                 ___xxtofl@exp 000A                   ___xxtofl@val 0001              _buggy_lights_init 3FC2  
                   __accesstop 0060        __end_of__initialization 3D38       __end_of_color_read_Clear 3C16  
     __end_of_color_read_Green 3BC6                  card_orange@mL 001C                  card_orange@mR 001D  
       ?_I2C_2_Master_RepStart 0001             ?_buggy_lights_init 0001                  ___rparam_used 0001  
                   ___fltol@f1 0028               ?_color_read_Blue 0005                 __pcstackCOMRAM 0001  
         _wall_threshold_clear 00BF                  __end_of_UTurn 3F32                    pick_card@mL 0021  
                  pick_card@mR 0022                   __pidataBANK0 40F8            ??_buggy_lights_init 0001  
                __end_of_fputc 2E60                  __end_of_putch 41AE            __end_of_Timer0_init 406A  
                card_yellow@mL 001C                  card_yellow@mR 001D     __end_of_forward_navigation 25D0  
                 ?_start_timer 0001                        ??_UTurn 001A                        ??_fputc 0004  
    __end_of_buggy_lights_init 3FF0                     _card_green 37CE                        ??_putch 0001  
                   __pbssBANK0 0060                     __pbssBANK1 01A4                     _card_white 406A  
                   _getRGBCval 3A80              _color_writetoaddr 40D8                   _T2CLKCONbits 0FBF  
                 ?_turnLeft135 0018             ?_color_writetoaddr 0003                        ?___lmul 0001  
    fullSpeedReverse@rightGear 0017           card_yellow@backtrack 001E                        ?___wmul 0001  
              _bottomGearRight 00C3          __end_of_wait_for_wall 3D86                   ?_turnRight90 0018  
               ___lmul@product 0009            ??_color_writetoaddr 0004       __end_of_return_to_sender 2DA6  
                    ?_card_red 001C                      ?___xxtofl 0001                ??_squareReverse 001A  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                   ?_write_timer 0001  
                 ?_write_trail 0001                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
            __end_of_card_blue 3906              __end_of_card_cyan 389E              __end_of_card_pink 34B2  
       color_writetoaddr@value 0003               ??_color_read_Red 0007                        UTurn@mL 0018  
                      UTurn@mR 0019      __end_of_color_writetoaddr 40F8             _I2C_2_Master_Start 419A  
                   _initUSART4 4116             _I2C_2_Master_Write 4162                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000A                    _Timer0_init 4042  
                   card_red@mL 001C                     card_red@mR 001D        sendStringSerial4@string 0002  
             _turningRightGear 00C1                        ___awdiv 2C24                        ___awmod 3140  
                      ___flmul 194A                        ___fltol 2884                        ___lldiv 31F0  
                convert_HSV@p1 000E            ?_I2C_2_Master_Start 0001                  convert_HSV@p2 000F  
                      ___lwdiv 3620            ?_I2C_2_Master_Write 0001                        ___lwmod 3906  
                    ?_vfprintf 001C              wait_for_wall@loss 000E                   __psmallconst 0E00  
                 turnLeft90@mL 0018                   turnLeft90@mR 0019          sendArrayCharSerial4@i 01A2  
                      __pcinit 3CFE                        __ramtop 0E00                      ?_turnLeft 0013  
                      __ptext0 25D0                        __ptext1 2CE8                        __ptext2 40B6  
                      __ptext3 3AD6                        __ptext4 4116                        __ptext5 3294  
                      __ptext6 2430                        __ptext7 3DC8                        __ptext8 3D42  
                      __ptext9 2B5C                     _read_timer 414C                  ??_card_orange 001F  
                   _read_trail 3AD6                        _max_RGB 352E                        _min_RGB 34B2  
                ??_card_yellow 001F                      _T2CONbits 0FBD                     ??_card_red 001F  
                   ??___xxtofl 0005               ___awmod@dividend 0001              __end_of_scale_RGB 2B5C  
     __end_of_fullSpeedReverse 3140                      _T2HLTbits 0FBE              __end_of_pick_card 2A86  
       fullSpeedAhead@leftGear 0016                        _sprintf 3CB2           ??_I2C_2_Master_Start 0002  
         ??_I2C_2_Master_Write 0002                    ?_card_green 001C           end_of_initialization 3D38  
                  ?_card_white 001C              _sendHSVvalSerial4 3C66       forward_navigation@timerH 005B  
     forward_navigation@timerL 005C                    ?_getRGBCval 000C                        fputc@fp 0003  
            ?_color_click_init 0001             ?_sendHSVvalSerial4 003A                ___lldiv@divisor 0005  
              colour_to_key@p1 0001                colour_to_key@p2 0002             ??_color_click_init 0005  
             ??_sendIntSerial4 003C                ___lldiv@counter 000D                   _average_RGBC 2080  
            __end_of_vfpfcnvrt 2080            ??_sendHSVvalSerial4 003B           convert_HSV@hue_scale 003C  
                      postdec1 0FE5                        postdec2 0FDD                squareReverse@mL 0018  
              squareReverse@mR 0019                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0017                     ??_vfprintf 001F  
              _initDCmotorsPWM 3294                     ??_turnLeft 0015           sendIntSerial4@string 003C  
                    _PORTFbits 0F8E             setMotorPWM@negDuty 0012              __end_of_turnRight 2FD2  
         convert_HSV@sat_scale 0018                   read_timer@tH 0001                   read_timer@tL 0002  
                ___xxtofl@sign 0009                      _TRISAbits 0F81             setMotorPWM@posDuty 0011  
                 read_trail@tH 0001                   read_trail@tL 0002                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88            __end_of_card_orange 37CE  
    __end_of_sendHSVvalSerial4 3CB2               fullSpeedAhead@mL 0013              card_red@backtrack 001E  
             fullSpeedAhead@mR 0014       color_writetoaddr@address 0004            __end_of_card_yellow 3432  
      ??_I2C_2_Master_RepStart 0002           card_orange@backtrack 001E                    ___flmul@grs 001C  
                  _CCP1CONbits 0FAB              ?_color_read_Clear 0005                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0005                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001                     main@motorL 0091  
                   main@motorR 009A             ??_color_read_Clear 0007             ??_color_read_Green 0007  
                   _stop_timer 41A4                     _turnLeft90 3F62                   pick_card@key 0024  
               _fullSpeedAhead 2E60                 __end_of___lmul 36FE                    vfpfcnvrt@ap 0010  
                  vfpfcnvrt@cp 0016                    vfpfcnvrt@fp 000E                 __end_of___wmul 40B6  
                  ?_read_timer 0001                    ?_read_trail 0001           return_to_sender@mann 0051  
    sendRGBCvalSerial4@col_val 003A       sendHSVvalSerial4@col_val 003A            color_read_Clear@tmp 000A  
          start_initialization 3CFE                  ??_convert_HSV 0010                    __end_of_ISR 0042  
                  __end_of_abs 3E36               _turnRight90Delay 00BB      sendRGBCvalSerial4@tempStr 003B  
     sendHSVvalSerial4@tempStr 003B          __end_of_colour_to_key 194A             _forward_navigation 2430  
          color_read_Green@tmp 000A            ?_forward_navigation 0055              ??_headbuttReverse 001A  
      __end_of_initDCmotorsPWM 3324                    vfprintf@fmt 001D         __end_of_fullSpeedAhead 2F1A  
                     ??___lmul 0009                       ??___wmul 0005                   card_green@mL 001C  
                 card_green@mR 001D                    __pdataBANK0 00AB                     scale_RGB@p 0032  
                  _card_orange 3766                    _card_yellow 33B2                 max_RGB@max_val 0005  
           turnRight@rightGear 0017           ??_forward_navigation 0059              ?_return_to_sender 004D  
                    ___flmul@a 0013                      ___flmul@b 000F                    __pbssCOMRAM 005E  
                __pcstackBANK0 0088                  __pcstackBANK1 0100             ??_return_to_sender 004F  
                 card_white@mL 001C                   card_white@mR 001D             return_to_sender@mL 004D  
           return_to_sender@mR 004E                convert_HSV@temp 0024   __end_of_sendArrayCharSerial4 3620  
          __end_of_convert_HSV 14E6              turnLeft@rightGear 0017        sendArrayCharSerial4@arr 003A  
                    _card_blue 389E                      _card_cyan 3836                      _card_pink 3432  
 __end_of_toggle_tricolour_LED 2C24               ___lwdiv@dividend 0007                   ?_Timer0_init 0001  
                  ?_stop_timer 0001                    ?_turnLeft90 0018                ?_fullSpeedAhead 0013  
                    __pintcode 0008                       ?___awdiv 0001                       ?___awmod 0001  
                     ?___flmul 000F                       ?___fltol 0028                       ?___lldiv 0001  
                     ?___lwdiv 0007                       ?___lwmod 0001                _turningLeftGear 00C2  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004                       ?_max_RGB 0001  
                     ?_min_RGB 0001                    __smallconst 0E00                  ?_turnRight135 0018  
            _I2C_2_Master_Idle 401A              _I2C_2_Master_Init 3FF0              _I2C_2_Master_Read 3D86  
            _I2C_2_Master_Stop 4190              ?_fullSpeedReverse 0013             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 000F  
        __end_of_squareReverse 3E9C             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
           pick_card@backtrack 0023                  _headbuttDelay 00B3       initDCmotorsPWM@PWMperiod 0001  
                     ?_sprintf 0020                   ??_card_green 001F             ??_fullSpeedReverse 0015  
                    _scale_RGB 2A86                      _rampDelay 00C7                   ??_card_white 001E  
                    _pick_card 298A             card_cyan@backtrack 001E                   ??_getRGBCval 000D  
            _sendStringSerial4 396A            ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001  
          ??_I2C_2_Master_Read 0002                 ___wmul@product 0005                       _LATAbits 0F79  
                   ?_card_blue 001C            ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B  
                   ?_card_cyan 001C                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                     ?_card_pink 001C  
                     _LATHbits 0F80                       _PIE0bits 0E29             ?_sendStringSerial4 0002  
                ??_reset_timer 0003                    turnRight@mL 0013                    turnRight@mR 0014  
                    _lost_flag 01A5                       _PIR0bits 0E33                       i2u391_40 001A  
                     i2u391_41 0016                       _PIR4bits 0E37                       i2u392_40 002A  
                     i2u392_41 0026               ?_initDCmotorsPWM 0001              ??_sendCharSerial4 0001  
                     _SSP2CON2 0EDA            ??_sendStringSerial4 0004                       _SSP2STAT 0ED8  
                    _returning 005E                      _vfpfcnvrt 1D74             __end_of_card_green 3836  
    __end_of_I2C_2_Master_Idle 4042      __end_of_I2C_2_Master_Init 401A      __end_of_I2C_2_Master_Read 3DC8  
            ___wmul@multiplier 0001             __end_of_card_white 4090                 ??_turnRight135 001A  
    __end_of_I2C_2_Master_Stop 419A                   setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002  
           __end_of_getRGBCval 3AD6     __end_of_sendRGBCvalSerial4 3A2A              ??_color_read_Blue 0007  
                  _convert_HSV 0E1A                main@RGBC_colour 00A3                      _turnRight 2F1A  
                   vfpfcnvrt@c 001B              ___lmul@multiplier 0001                      copy_data0 3D12  
    __end_of_sendStringSerial4 39CC                     ?_scale_RGB 0032                     ?_pick_card 0021  
           card_pink@backtrack 001E  __end_of_I2C_2_Master_RepStart 4190             color_read_Blue@tmp 000A  
          __end_of_setMotorPWM 2884                   ??_initUSART4 0001              turnRight@leftGear 0016  
                     __Hrparam 0000                    card_blue@mL 001C                    card_blue@mR 001D  
                   vfprintf@ap 001E                       __Lrparam 0000                     vfprintf@fp 001C  
               wait_for_wall@p 000D                    card_cyan@mL 001C                    card_cyan@mR 001D  
                 _sample_count 00C8               turnLeft@leftGear 0016                    card_pink@mL 001C  
                  card_pink@mR 001D                     ?_vfpfcnvrt 000E            __end_of_reset_timer 417A  
                _wait_for_wall 3D42                 turnRight135@mL 0018                 turnRight135@mR 0019  
         _sendArrayCharSerial4 35AA                  turnLeft135@mL 0018                  turnLeft135@mR 0019  
                 ??_read_timer 0003                   ??_read_trail 0004                 convert_HSV@hue 001E  
               convert_HSV@sat 001C                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                ??_start_timer 0001                     sprintf@fmt 0022                     sprintf@ret 002B  
                     _card_red 36FE                       ___xxtofl 227C                     _T0CON0bits 0FD5  
                   _T0CON1bits 0FD6           _toggle_tricolour_LED 2B5C                ___lwdiv@divisor 0009  
           __end_of_initUSART4 4134                ___lwdiv@counter 000D                     ?_turnRight 0013  
                     __ptext10 41A4                       __ptext11 39CC                       __ptext20 3906  
                     __ptext12 3C66                       __ptext21 3140                       __ptext13 35AA  
                     __ptext30 298A                       __ptext22 2C24                       __ptext14 3CB2  
                     __ptext31 33B2                       __ptext23 396A                       __ptext15 3A2A  
                     __ptext40 3836                       __ptext32 406A                       __ptext24 4134  
                     __ptext16 1D74                       __ptext41 3E9C                       __ptext33 36FE  
                     __ptext25 2A86                       __ptext17 2DA6                       __ptext50 2E60  
                     __ptext42 2F1A                       __ptext34 3432                       __ptext26 227C  
                     __ptext18 41AC                       __ptext51 2730                       __ptext43 3ECE  
                     __ptext35 3E6A                       __ptext27 2884                       __ptext19 3E02  
                     __ptext60 3A80                       __ptext52 4090                       __ptext44 389E  
                     __ptext36 3766                       __ptext28 194A                       __ptext61 3B26  
                     __ptext53 3620                       __ptext45 3F92                       __ptext37 37CE  
                     __ptext29 414C                       __ptext70 4162                       __ptext62 3B76  
                     __ptext54 0E1A                       __ptext46 308A                       __ptext38 3F32  
                     __ptext71 4190                       __ptext63 3BC6                       __ptext55 34B2  
                     __ptext47 3F00                       __ptext39 3F62                       __ptext72 419A  
                     __ptext64 3C16                       __ptext56 352E                       __ptext48 2FD2  
                     __ptext73 401A                       __ptext65 4186                       __ptext57 3694  
                     __ptext49 3324                       __ptext74 3FF0                       __ptext66 3D86  
                     __ptext58 14E6                       __ptext75 3FC2                       __ptext67 31F0  
                     __ptext59 2080                       __ptext76 4042                       __ptext68 3E36  
                     __ptext77 41A8                       __ptext69 40D8                       __ptext78 416E  
                     __ptext79 417A                    getRGBCval@p 000C                   _SSP2CON1bits 0ED9  
              _headbuttReverse 3F92                   _SSP2CON2bits 0EDA                    ??_card_blue 001F  
                  ??_card_cyan 001F                    ??_card_pink 001F       fullSpeedReverse@leftGear 0016  
                   turnLeft@mL 0013                     turnLeft@mR 0014         forward_navigation@mann 005D  
           __end_of_read_timer 4162             __end_of_read_trail 3B26                  ??_turnLeft135 001A  
                     isa$xinst 0000                     _RC4STAbits 0EE7                       int$flags 005F  
                     _vfprintf 3A2A                  ??_turnRight90 001A                 ?_wait_for_wall 000D  
        ?_sendArrayCharSerial4 003A                       _turnLeft 2FD2                       max_RGB@p 0001  
                 ?_card_orange 001C                       min_RGB@p 0001                   ?_card_yellow 001C  
                   _INTCONbits 0FF2          ?_toggle_tricolour_LED 0001                  ??_write_timer 0002  
                ??_write_trail 0003                    _setMotorPWM 2730                    ??_scale_RGB 0033  
          __end_of_start_timer 41AC                       intlevel2 0000                  turnRight90@mL 0018  
                turnRight90@mR 0019                    ??_pick_card 0025        fullSpeedAhead@rightGear 0017  
                    sprintf@ap 002D                   _topGearRight 00C5              _manoeuvre_pointer 00AB  
             ___lwmod@dividend 0001               ___lldiv@dividend 0001               ??_fullSpeedAhead 0015  
         __end_of_turnRight135 3ECE               colour_to_key@key 0005                 main@HSV_colour 008B  
                  _reset_timer 416E                   ??_stop_timer 0001                   ??_turnLeft90 001A  
                  ??_vfpfcnvrt 0011               _color_click_init 3E36            __end_of_turnLeft135 3F00  
        sendIntSerial4@integer 003A                    _topGearLeft 00C6                       sprintf@f 002E  
                     sprintf@s 0020                     _SSP2DATPPS 0E1D               ___lldiv@quotient 0009  
      __end_of_headbuttReverse 3FC2                     _SSP2CLKPPS 0E1C                ___lwmod@divisor 0003  
              ___lwmod@counter 0005            __end_of_turnRight90 3F62                _trail_manoeuvre 01A6  
                  ??_turnRight 0015                    _return_flag 0087             __end_of_stop_timer 41A8  
           __end_of_turnLeft90 3F92                _manoeuvre_count 01A4                     _TX4STAbits 0EE8  
              _sendCharSerial4 4134            __end_of_write_timer 4186            __end_of_write_trail 3E02  
  sendArrayCharSerial4@tempStr 0100                  ?_average_RGBC 000E                  read_trail@man 0003  
