

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 07 13:33:30 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 21/07/2023 GMT
    67                           ; 
    68                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   001E5A                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _squareDelay
   106   001E5A  012C               	dw	300
   107                           
   108                           ;initializer for _headbuttDelay
   109   001E5C  0046               	dw	70
   110                           
   111                           ;initializer for _turn180Delay
   112   001E5E  01FE               	dw	510
   113                           
   114                           ;initializer for _turnRight135Delay
   115   001E60  012C               	dw	300
   116                           
   117                           ;initializer for _turnLeft135Delay
   118   001E62  012C               	dw	300
   119                           
   120                           ;initializer for _turnRight90Delay
   121   001E64  00AF               	dw	175
   122                           
   123                           ;initializer for _turnLeft90Delay
   124   001E66  00AF               	dw	175
   125                           
   126                           ;initializer for _timer_low_pointer
   127   001E68  C3                 	db	low _trail_timer_low
   128                           
   129                           ;initializer for _timer_high_pointer
   130   001E69  D7                 	db	low _trail_timer_high
   131                           
   132                           ;initializer for _turningGear
   133   001E6A  2A                 	db	42
   134                           
   135                           ;initializer for _topGearRight
   136   001E6B  14                 	db	20
   137                           
   138                           ;initializer for _topGearLeft
   139   001E6C  14                 	db	20
   140                           
   141                           ;initializer for _rampDelay
   142   001E6D  08                 	db	8
   143                           
   144                           	psect	idataBANK0
   145   001C96                     __pidataBANK0:
   146                           	callstack 0
   147                           
   148                           ;initializer for _manoeuvre_pointer
   149   001C96  5C                 	db	low _trail_manoeuvre
   150   001C97  01                 	db	high _trail_manoeuvre
   151                           
   152                           ;initializer for _trail_timer_low
   153   001C98  01                 	db	1
   154   001C99  02                 	db	2
   155   001C9A  03                 	db	3
   156   001C9B  04                 	db	4
   157   001C9C  05                 	db	5
   158   001C9D  06                 	db	6
   159   001C9E  07                 	db	7
   160   001C9F  08                 	db	8
   161   001CA0  09                 	db	9
   162   001CA1  00                 	db	0
   163   001CA2  01                 	db	1
   164   001CA3  02                 	db	2
   165   001CA4  03                 	db	3
   166   001CA5  04                 	db	4
   167   001CA6  05                 	db	5
   168   001CA7  06                 	db	6
   169   001CA8  07                 	db	7
   170   001CA9  08                 	db	8
   171   001CAA  09                 	db	9
   172   001CAB  00                 	db	0
   173                           
   174                           ;initializer for _trail_timer_high
   175   001CAC  01                 	db	1
   176   001CAD  02                 	db	2
   177   001CAE  03                 	db	3
   178   001CAF  04                 	db	4
   179   001CB0  05                 	db	5
   180   001CB1  06                 	db	6
   181   001CB2  07                 	db	7
   182   001CB3  08                 	db	8
   183   001CB4  09                 	db	9
   184   001CB5  00                 	db	0
   185   001CB6  01                 	db	1
   186   001CB7  02                 	db	2
   187   001CB8  03                 	db	3
   188   001CB9  04                 	db	4
   189   001CBA  05                 	db	5
   190   001CBB  06                 	db	6
   191   001CBC  07                 	db	7
   192   001CBD  08                 	db	8
   193   001CBE  09                 	db	9
   194   001CBF  00                 	db	0
   195                           
   196                           	psect	idataBANK1
   197   001E6E                     __pidataBANK1:
   198                           	callstack 0
   199                           
   200                           ;initializer for _trail_manoeuvre
   201   001E6E  01                 	db	1
   202   001E6F  02                 	db	2
   203   001E70  03                 	db	3
   204   001E71  04                 	db	4
   205   001E72  05                 	db	5
   206   001E73  06                 	db	6
   207   001E74  07                 	db	7
   208   001E75  08                 	db	8
   209   001E76  09                 	db	9
   210   001E77  00                 	db	0
   211   001E78  01                 	db	1
   212   001E79  02                 	db	2
   213   001E7A  03                 	db	3
   214   001E7B  04                 	db	4
   215   001E7C  05                 	db	5
   216   001E7D  06                 	db	6
   217   001E7E  07                 	db	7
   218   001E7F  08                 	db	8
   219   001E80  09                 	db	9
   220   001E81  00                 	db	0
   221   000000                     _TX4REG	set	3812
   222   000000                     _RC4STAbits	set	3815
   223   000000                     _SP4BRGH	set	3814
   224   000000                     _LATEbits	set	3965
   225   000000                     _TRISEbits	set	3973
   226   000000                     _LATGbits	set	3967
   227   000000                     _TRISGbits	set	3975
   228   000000                     _LATFbits	set	3966
   229   000000                     _LATHbits	set	3968
   230   000000                     _TRISFbits	set	3974
   231   000000                     _TRISHbits	set	3976
   232   000000                     _SSP2CON2bits	set	3802
   233   000000                     _RX4PPS	set	3605
   234   000000                     _SSP2CLKPPS	set	3612
   235   000000                     _SSP2DATPPS	set	3613
   236   000000                     _RC7PPS	set	3689
   237   000000                     _RE2PPS	set	3700
   238   000000                     _LATAbits	set	3961
   239   000000                     _LATDbits	set	3964
   240   000000                     _TRISDbits	set	3972
   241   000000                     _PORTFbits	set	3982
   242   000000                     _T2PR	set	4028
   243   000000                     _T2CONbits	set	4029
   244   000000                     _CCPR2H	set	4006
   245   000000                     _CCPR1H	set	4010
   246   000000                     _TRISCbits	set	3971
   247   000000                     _TRISAbits	set	3969
   248   000000                     _LATCbits	set	3963
   249   000000                     _RE4PPS	set	3702
   250   000000                     _RG6PPS	set	3720
   251   000000                     _RD5PPS	set	3695
   252   000000                     _ANSELDbits	set	3751
   253   000000                     _SSP2ADD	set	3798
   254   000000                     _SSP2CON1bits	set	3801
   255   000000                     _CCPR4H	set	3873
   256   000000                     _CCPR3H	set	3877
   257   000000                     _TMR0L	set	4051
   258   000000                     _TMR0H	set	4052
   259   000000                     _T0CON0bits	set	4053
   260   000000                     _T0CON1bits	set	4054
   261   000000                     _T2CLKCONbits	set	4031
   262   000000                     _T2HLTbits	set	4030
   263   000000                     _CCP1CONbits	set	4011
   264   000000                     _CCPTMRS0bits	set	4013
   265   000000                     _CCP2CONbits	set	4007
   266   000000                     _CCP3CONbits	set	3878
   267   000000                     _CCP4CONbits	set	3874
   268   000000                     _RC4REG	set	3811
   269   000000                     _SP4BRGL	set	3813
   270   000000                     _TX4STAbits	set	3816
   271   000000                     _BAUD4CONbits	set	3817
   272   000000                     _SSP2CON2	set	3802
   273   000000                     _SSP2STAT	set	3800
   274   000000                     _ANSELFbits	set	3764
   275   000000                     _SSP2BUF	set	3797
   276   000000                     _PIE0bits	set	3625
   277   000000                     _PIE4bits	set	3629
   278   000000                     _PIR4bits	set	3639
   279   000000                     _RC0PPS	set	3682
   280   000000                     _RD6PPS	set	3696
   281   000000                     _PIR0bits	set	3635
   282   000000                     _INTCONbits	set	4082
   283                           
   284                           	psect	smallconst
   285   000E00                     __psmallconst:
   286                           	callstack 0
   287   000E00  00                 	db	0
   288   000E01                     STR_1:
   289   000E01  25                 	db	37
   290   000E02  64                 	db	100	;'d'
   291   000E03  20                 	db	32
   292   000E04  25                 	db	37
   293   000E05  64                 	db	100	;'d'
   294   000E06  20                 	db	32
   295   000E07  25                 	db	37
   296   000E08  64                 	db	100	;'d'
   297   000E09  20                 	db	32
   298   000E0A  25                 	db	37
   299   000E0B  64                 	db	100	;'d'
   300   000E0C  20                 	db	32
   301   000E0D  20                 	db	32
   302   000E0E  0D                 	db	13
   303   000E0F  00                 	db	0
   304   000E10  25                 	db	37
   305   000E11  64                 	db	100	;'d'
   306   000E12  20                 	db	32
   307   000E13  0D                 	db	13
   308   000E14  00                 	db	0
   309   000E15                     STR_3:
   310   000E15  25                 	db	37
   311   000E16  64                 	db	100	;'d'
   312   000E17  00                 	db	0
   313   000E18  00                 	db	0	; dummy byte at the end
   314   000000                     
   315                           ; #config settings
   316                           
   317                           	psect	cinit
   318   001764                     __pcinit:
   319                           	callstack 0
   320   001764                     start_initialization:
   321                           	callstack 0
   322   001764                     __initialization:
   323                           	callstack 0
   324                           
   325                           ; Initialize objects allocated to BANK1 (20 bytes)
   326                           ; load TBLPTR registers with __pidataBANK1
   327   001764  0E6E               	movlw	low __pidataBANK1
   328   001766  6EF6               	movwf	tblptrl,c
   329   001768  0E1E               	movlw	high __pidataBANK1
   330   00176A  6EF7               	movwf	tblptrh,c
   331   00176C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   332   00176E  6EF8               	movwf	tblptru,c
   333   001770  EE01  F05C         	lfsr	0,__pdataBANK1
   334   001774  EE10 F014          	lfsr	1,20
   335   001778                     copy_data0:
   336   001778  0009               	tblrd		*+
   337   00177A  CFF5 FFEE          	movff	tablat,postinc0
   338   00177E  50E5               	movf	postdec1,w,c
   339   001780  50E1               	movf	fsr1l,w,c
   340   001782  E1FA               	bnz	copy_data0
   341                           
   342                           ; Initialize objects allocated to BANK0 (42 bytes)
   343                           ; load TBLPTR registers with __pidataBANK0
   344   001784  0E96               	movlw	low __pidataBANK0
   345   001786  6EF6               	movwf	tblptrl,c
   346   001788  0E1C               	movlw	high __pidataBANK0
   347   00178A  6EF7               	movwf	tblptrh,c
   348   00178C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   349   00178E  6EF8               	movwf	tblptru,c
   350   001790  EE00  F0C1         	lfsr	0,__pdataBANK0
   351   001794  EE10 F02A          	lfsr	1,42
   352   001798                     copy_data1:
   353   001798  0009               	tblrd		*+
   354   00179A  CFF5 FFEE          	movff	tablat,postinc0
   355   00179E  50E5               	movf	postdec1,w,c
   356   0017A0  50E1               	movf	fsr1l,w,c
   357   0017A2  E1FA               	bnz	copy_data1
   358                           
   359                           ; Initialize objects allocated to COMRAM (20 bytes)
   360                           ; load TBLPTR registers with __pidataCOMRAM
   361   0017A4  0E5A               	movlw	low __pidataCOMRAM
   362   0017A6  6EF6               	movwf	tblptrl,c
   363   0017A8  0E1E               	movlw	high __pidataCOMRAM
   364   0017AA  6EF7               	movwf	tblptrh,c
   365   0017AC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   366   0017AE  6EF8               	movwf	tblptru,c
   367   0017B0  EE00  F030         	lfsr	0,__pdataCOMRAM
   368   0017B4  EE10 F014          	lfsr	1,20
   369   0017B8                     copy_data2:
   370   0017B8  0009               	tblrd		*+
   371   0017BA  CFF5 FFEE          	movff	tablat,postinc0
   372   0017BE  50E5               	movf	postdec1,w,c
   373   0017C0  50E1               	movf	fsr1l,w,c
   374   0017C2  E1FA               	bnz	copy_data2
   375                           
   376                           ; Clear objects allocated to BANK1 (92 bytes)
   377   0017C4  EE01  F000         	lfsr	0,__pbssBANK1
   378   0017C8  0E5C               	movlw	92
   379   0017CA                     clear_0:
   380   0017CA  6AEE               	clrf	postinc0,c
   381   0017CC  06E8               	decf	wreg,f,c
   382   0017CE  E1FD               	bnz	clear_0
   383                           
   384                           ; Clear objects allocated to BANK0 (20 bytes)
   385   0017D0  EE00  F0EB         	lfsr	0,__pbssBANK0
   386   0017D4  0E14               	movlw	20
   387   0017D6                     clear_1:
   388   0017D6  6AEE               	clrf	postinc0,c
   389   0017D8  06E8               	decf	wreg,f,c
   390   0017DA  E1FD               	bnz	clear_1
   391                           
   392                           ; Clear objects allocated to COMRAM (12 bytes)
   393   0017DC  EE00  F044         	lfsr	0,__pbssCOMRAM
   394   0017E0  0E0C               	movlw	12
   395   0017E2                     clear_2:
   396   0017E2  6AEE               	clrf	postinc0,c
   397   0017E4  06E8               	decf	wreg,f,c
   398   0017E6  E1FD               	bnz	clear_2
   399   0017E8                     end_of_initialization:
   400                           	callstack 0
   401   0017E8                     __end_of__initialization:
   402                           	callstack 0
   403   0017E8  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   404   0017EA  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   405   0017EC  0100               	movlb	0
   406   0017EE  EFA3  F009         	goto	_main	;jump to C main() function
   407                           
   408                           	psect	bssCOMRAM
   409   000044                     __pbssCOMRAM:
   410                           	callstack 0
   411   000044                     _nout:
   412                           	callstack 0
   413   000044                     	ds	2
   414   000046                     _width:
   415                           	callstack 0
   416   000046                     	ds	2
   417   000048                     _prec:
   418                           	callstack 0
   419   000048                     	ds	2
   420   00004A                     _flags:
   421                           	callstack 0
   422   00004A                     	ds	1
   423   00004B                     _backtrack:
   424                           	callstack 0
   425   00004B                     	ds	1
   426   00004C                     _TxBufReadCnt:
   427                           	callstack 0
   428   00004C                     	ds	1
   429   00004D                     _TxBufWriteCnt:
   430                           	callstack 0
   431   00004D                     	ds	1
   432   00004E                     _RxBufReadCnt:
   433                           	callstack 0
   434   00004E                     	ds	1
   435   00004F                     _RxBufWriteCnt:
   436                           	callstack 0
   437   00004F                     	ds	1
   438                           
   439                           	psect	dataCOMRAM
   440   000030                     __pdataCOMRAM:
   441                           	callstack 0
   442   000030                     _squareDelay:
   443                           	callstack 0
   444   000030                     	ds	2
   445   000032                     _headbuttDelay:
   446                           	callstack 0
   447   000032                     	ds	2
   448   000034                     _turn180Delay:
   449                           	callstack 0
   450   000034                     	ds	2
   451   000036                     _turnRight135Delay:
   452                           	callstack 0
   453   000036                     	ds	2
   454   000038                     _turnLeft135Delay:
   455                           	callstack 0
   456   000038                     	ds	2
   457   00003A                     _turnRight90Delay:
   458                           	callstack 0
   459   00003A                     	ds	2
   460   00003C                     _turnLeft90Delay:
   461                           	callstack 0
   462   00003C                     	ds	2
   463   00003E                     _timer_low_pointer:
   464                           	callstack 0
   465   00003E                     	ds	1
   466   00003F                     _timer_high_pointer:
   467                           	callstack 0
   468   00003F                     	ds	1
   469   000040                     _turningGear:
   470                           	callstack 0
   471   000040                     	ds	1
   472   000041                     _topGearRight:
   473                           	callstack 0
   474   000041                     	ds	1
   475   000042                     _topGearLeft:
   476                           	callstack 0
   477   000042                     	ds	1
   478   000043                     _rampDelay:
   479                           	callstack 0
   480   000043                     	ds	1
   481                           
   482                           	psect	bssBANK0
   483   0000EB                     __pbssBANK0:
   484                           	callstack 0
   485   0000EB                     _EUSART4RXbuf:
   486                           	callstack 0
   487   0000EB                     	ds	20
   488                           
   489                           	psect	dataBANK0
   490   0000C1                     __pdataBANK0:
   491                           	callstack 0
   492   0000C1                     _manoeuvre_pointer:
   493                           	callstack 0
   494   0000C1                     	ds	2
   495   0000C3                     _trail_timer_low:
   496                           	callstack 0
   497   0000C3                     	ds	20
   498   0000D7                     _trail_timer_high:
   499                           	callstack 0
   500   0000D7                     	ds	20
   501                           
   502                           	psect	bssBANK1
   503   000100                     __pbssBANK1:
   504                           	callstack 0
   505   000100                     _EUSART4TXbuf:
   506                           	callstack 0
   507   000100                     	ds	60
   508   00013C                     _dbuf:
   509                           	callstack 0
   510   00013C                     	ds	32
   511                           
   512                           	psect	dataBANK1
   513   00015C                     __pdataBANK1:
   514                           	callstack 0
   515   00015C                     _trail_manoeuvre:
   516                           	callstack 0
   517   00015C                     	ds	20
   518                           
   519                           	psect	cstackBANK0
   520   000060                     __pcstackBANK0:
   521                           	callstack 0
   522   000060                     sprintf@ret:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0x0
   526   000060                     	ds	2
   527   000062                     sprintf@ap:
   528                           	callstack 0
   529                           
   530                           ; 1 bytes @ 0x2
   531   000062                     	ds	1
   532   000063                     sprintf@f:
   533                           	callstack 0
   534                           
   535                           ; 12 bytes @ 0x3
   536   000063                     	ds	12
   537   00006F                     main@display:
   538                           	callstack 0
   539                           
   540                           ; 50 bytes @ 0xF
   541   00006F                     	ds	50
   542   0000A1                     main@readHSV:
   543                           	callstack 0
   544                           
   545                           ; 6 bytes @ 0x41
   546   0000A1                     	ds	6
   547   0000A7                     main@motorL:
   548                           	callstack 0
   549                           
   550                           ; 9 bytes @ 0x47
   551   0000A7                     	ds	9
   552   0000B0                     main@motorR:
   553                           	callstack 0
   554                           
   555                           ; 9 bytes @ 0x50
   556   0000B0                     	ds	9
   557   0000B9                     main@readRGBC:
   558                           	callstack 0
   559                           
   560                           ; 8 bytes @ 0x59
   561   0000B9                     	ds	8
   562                           
   563                           	psect	cstackCOMRAM
   564   000001                     __pcstackCOMRAM:
   565                           	callstack 0
   566   000001                     ??_getCharFromTxBuf:
   567   000001                     putCharToRxBuf@byte:
   568                           	callstack 0
   569   000001                     
   570                           ; 1 bytes @ 0x0
   571   000001                     	ds	2
   572   000003                     ??_HighISR:
   573                           
   574                           ; 1 bytes @ 0x2
   575   000003                     	ds	2
   576   000005                     ??_I2C_2_Master_Idle:
   577   000005                     ?_max:
   578                           	callstack 0
   579   000005                     ?_min:
   580                           	callstack 0
   581   000005                     ?___wmul:
   582                           	callstack 0
   583   000005                     ?___awmod:
   584                           	callstack 0
   585   000005                     putCharToTxBuf@byte:
   586                           	callstack 0
   587   000005                     max@a:
   588                           	callstack 0
   589   000005                     min@a:
   590                           	callstack 0
   591   000005                     initDCmotorsPWM@PWMperiod:
   592                           	callstack 0
   593   000005                     ___wmul@multiplier:
   594                           	callstack 0
   595   000005                     ___awmod@dividend:
   596                           	callstack 0
   597   000005                     fputc@c:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0x4
   601   000005                     	ds	1
   602   000006                     ??_I2C_2_Master_Read:
   603   000006                     I2C_2_Master_Write@data_byte:
   604                           	callstack 0
   605   000006                     TxBufferedString@string:
   606                           	callstack 0
   607                           
   608                           ; 1 bytes @ 0x5
   609   000006                     	ds	1
   610   000007                     color_writetoaddr@value:
   611                           	callstack 0
   612   000007                     I2C_2_Master_Read@ack:
   613                           	callstack 0
   614   000007                     fputc@fp:
   615                           	callstack 0
   616   000007                     max@b:
   617                           	callstack 0
   618   000007                     min@b:
   619                           	callstack 0
   620   000007                     ___wmul@multiplicand:
   621                           	callstack 0
   622   000007                     ___awmod@divisor:
   623                           	callstack 0
   624                           
   625                           ; 2 bytes @ 0x6
   626   000007                     	ds	1
   627   000008                     ??_fputc:
   628   000008                     color_writetoaddr@address:
   629                           	callstack 0
   630   000008                     I2C_2_Master_Read@tmp:
   631                           	callstack 0
   632                           
   633                           ; 1 bytes @ 0x7
   634   000008                     	ds	1
   635   000009                     ??_color_click_init:
   636   000009                     ??_max:
   637   000009                     ??_min:
   638   000009                     ?_color_read_Red:
   639                           	callstack 0
   640   000009                     ?_color_read_Blue:
   641                           	callstack 0
   642   000009                     ?_color_read_Green:
   643                           	callstack 0
   644   000009                     ?_color_read_Clear:
   645                           	callstack 0
   646   000009                     ___awmod@counter:
   647                           	callstack 0
   648   000009                     ___wmul@product:
   649                           	callstack 0
   650                           
   651                           ; 2 bytes @ 0x8
   652   000009                     	ds	1
   653   00000A                     ___awmod@sign:
   654                           	callstack 0
   655   00000A                     max@max_val:
   656                           	callstack 0
   657   00000A                     min@min_val:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x9
   661   00000A                     	ds	1
   662   00000B                     ??_color_read_Red:
   663   00000B                     ??_color_read_Blue:
   664   00000B                     ??_color_read_Green:
   665   00000B                     ??_color_read_Clear:
   666   00000B                     ?_abs:
   667                           	callstack 0
   668   00000B                     ?___awdiv:
   669                           	callstack 0
   670   00000B                     ?___lwdiv:
   671                           	callstack 0
   672   00000B                     ___awdiv@dividend:
   673                           	callstack 0
   674   00000B                     ___lwdiv@dividend:
   675                           	callstack 0
   676   00000B                     abs@a:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0xA
   680   00000B                     	ds	2
   681   00000D                     ??_abs:
   682   00000D                     ___awdiv@divisor:
   683                           	callstack 0
   684   00000D                     ___lwdiv@divisor:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0xC
   688   00000D                     	ds	1
   689   00000E                     color_read_Red@tmp:
   690                           	callstack 0
   691   00000E                     color_read_Blue@tmp:
   692                           	callstack 0
   693   00000E                     color_read_Green@tmp:
   694                           	callstack 0
   695   00000E                     color_read_Clear@tmp:
   696                           	callstack 0
   697                           
   698                           ; 2 bytes @ 0xD
   699   00000E                     	ds	1
   700   00000F                     ___awdiv@counter:
   701                           	callstack 0
   702   00000F                     ___lwdiv@quotient:
   703                           	callstack 0
   704                           
   705                           ; 2 bytes @ 0xE
   706   00000F                     	ds	1
   707   000010                     getRGBCval@p:
   708                           	callstack 0
   709   000010                     ___awdiv@sign:
   710                           	callstack 0
   711                           
   712                           ; 1 bytes @ 0xF
   713   000010                     	ds	1
   714   000011                     ___lwdiv@counter:
   715                           	callstack 0
   716   000011                     ___awdiv@quotient:
   717                           	callstack 0
   718                           
   719                           ; 2 bytes @ 0x10
   720   000011                     	ds	1
   721   000012                     ?___lwmod:
   722                           	callstack 0
   723   000012                     ___lwmod@dividend:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x11
   727   000012                     	ds	1
   728   000013                     ?_vfpfcnvrt:
   729                           	callstack 0
   730   000013                     vfpfcnvrt@fp:
   731                           	callstack 0
   732                           
   733                           ; 1 bytes @ 0x12
   734   000013                     	ds	1
   735   000014                     vfpfcnvrt@fmt:
   736                           	callstack 0
   737   000014                     ___lwmod@divisor:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x13
   741   000014                     	ds	1
   742   000015                     vfpfcnvrt@ap:
   743                           	callstack 0
   744                           
   745                           ; 1 bytes @ 0x14
   746   000015                     	ds	1
   747   000016                     ??_vfpfcnvrt:
   748   000016                     ___lwmod@counter:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x15
   752   000016                     	ds	1
   753   000017                     getHSVval@p1:
   754                           	callstack 0
   755   000017                     vfpfcnvrt@done:
   756                           	callstack 0
   757                           
   758                           ; 1 bytes @ 0x16
   759   000017                     	ds	1
   760   000018                     getHSVval@p2:
   761                           	callstack 0
   762   000018                     vfpfcnvrt@cnt:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x17
   766   000018                     	ds	1
   767   000019                     ??_getHSVval:
   768                           
   769                           ; 1 bytes @ 0x18
   770   000019                     	ds	1
   771   00001A                     vfpfcnvrt@cp:
   772                           	callstack 0
   773                           
   774                           ; 1 bytes @ 0x19
   775   00001A                     	ds	1
   776   00001B                     vfpfcnvrt@convarg:
   777                           	callstack 0
   778                           
   779                           ; 4 bytes @ 0x1A
   780   00001B                     	ds	2
   781   00001D                     getHSVval@minRGB:
   782                           	callstack 0
   783                           
   784                           ; 2 bytes @ 0x1C
   785   00001D                     	ds	2
   786   00001F                     vfpfcnvrt@c:
   787                           	callstack 0
   788   00001F                     _getHSVval$3064:
   789                           	callstack 0
   790                           
   791                           ; 2 bytes @ 0x1E
   792   00001F                     	ds	1
   793   000020                     ?_vfprintf:
   794                           	callstack 0
   795   000020                     vfprintf@fp:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x1F
   799   000020                     	ds	1
   800   000021                     vfprintf@fmt:
   801                           	callstack 0
   802   000021                     _getHSVval$3065:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x20
   806   000021                     	ds	1
   807   000022                     vfprintf@ap:
   808                           	callstack 0
   809                           
   810                           ; 1 bytes @ 0x21
   811   000022                     	ds	1
   812   000023                     vfprintf@cfmt:
   813                           	callstack 0
   814   000023                     getHSVval@saturation:
   815                           	callstack 0
   816                           
   817                           ; 2 bytes @ 0x22
   818   000023                     	ds	1
   819   000024                     ?_sprintf:
   820                           	callstack 0
   821   000024                     sprintf@s:
   822                           	callstack 0
   823                           
   824                           ; 1 bytes @ 0x23
   825   000024                     	ds	1
   826   000025                     sprintf@fmt:
   827                           	callstack 0
   828   000025                     getHSVval@hue:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x24
   832   000025                     	ds	2
   833   000027                     _getHSVval$3066:
   834                           	callstack 0
   835                           
   836                           ; 2 bytes @ 0x26
   837   000027                     	ds	2
   838   000029                     getHSVval@range:
   839                           	callstack 0
   840                           
   841                           ; 2 bytes @ 0x28
   842   000029                     	ds	2
   843   00002B                     getHSVval@maxRGB:
   844                           	callstack 0
   845                           
   846                           ; 2 bytes @ 0x2A
   847   00002B                     	ds	3
   848   00002E                     ??_main:
   849                           
   850                           ; 1 bytes @ 0x2D
   851   00002E                     	ds	2
   852                           
   853 ;;
   854 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   855 ;;
   856 ;; *************** function _main *****************
   857 ;; Defined at:
   858 ;;		line 27 in file "main.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;		None
   861 ;; Auto vars:     Size  Location     Type
   862 ;;  display        50   15[BANK0 ] unsigned char [50]
   863 ;;  motorR          9   80[BANK0 ] struct DC_motor
   864 ;;  motorL          9   71[BANK0 ] struct DC_motor
   865 ;;  readRGBC        8   89[BANK0 ] struct RGBC_val
   866 ;;  readHSV         6   65[BANK0 ] struct HSV_val
   867 ;;  PWMcycle        2    0        unsigned int 
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   878 ;;      Locals:         0      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   879 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   880 ;;      Totals:         2      82       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   881 ;;Total ram usage:       84 bytes
   882 ;; Hardware stack levels required when called: 7
   883 ;; This function calls:
   884 ;;		_Interrupts_init
   885 ;;		_Timer0_init
   886 ;;		_TxBufferedString
   887 ;;		_buggy_lights_init
   888 ;;		_color_click_init
   889 ;;		_getHSVval
   890 ;;		_getRGBCval
   891 ;;		_initDCmotorsPWM
   892 ;;		_initUSART4
   893 ;;		_sendTxBuf
   894 ;;		_sprintf
   895 ;; This function is called by:
   896 ;;		Startup code after reset
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text0
   901   001346                     __ptext0:
   902                           	callstack 0
   903   001346                     _main:
   904                           	callstack 24
   905   001346                     
   906                           ;main.c: 28:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   907   001346  0E52               	movlw	82
   908   001348  6E2F               	movwf	(??_main+1)^0,c
   909   00134A  0E2B               	movlw	43
   910   00134C  6E2E               	movwf	??_main^0,c
   911   00134E  0E00               	movlw	0
   912   001350                     u2227:
   913   001350  2EE8               	decfsz	wreg,f,c
   914   001352  D7FE               	bra	u2227
   915   001354  2E2E               	decfsz	??_main^0,f,c
   916   001356  D7FC               	bra	u2227
   917   001358  2E2F               	decfsz	(??_main+1)^0,f,c
   918   00135A  D7FA               	bra	u2227
   919   00135C  D000               	nop2	
   920   00135E                     
   921                           ;main.c: 31:     initDCmotorsPWM(PWMcycle);
   922   00135E  0E00               	movlw	0
   923   001360  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   924   001362  0E63               	movlw	99
   925   001364  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   926   001366  EC6A  F00B         	call	_initDCmotorsPWM	;wreg free
   927   00136A                     
   928                           ;main.c: 33:     struct DC_motor motorL, motorR;;main.c: 35:     motorL.power = 0;
   929   00136A  0E00               	movlw	0
   930   00136C  0100               	movlb	0	; () banked
   931   00136E  6FA7               	movwf	main@motorL& (0+255),b
   932   001370                     
   933                           ; BSR set to: 0
   934                           ;main.c: 36:     motorL.direction = 1;
   935   001370  0E01               	movlw	1
   936   001372  6FA8               	movwf	(main@motorL+1)& (0+255),b
   937   001374                     
   938                           ; BSR set to: 0
   939                           ;main.c: 37:     motorL.brakemode = 1;
   940   001374  0E01               	movlw	1
   941   001376  6FA9               	movwf	(main@motorL+2)& (0+255),b
   942   001378                     
   943                           ; BSR set to: 0
   944                           ;main.c: 38:     motorL.PWMperiod = PWMcycle;
   945   001378  0E00               	movlw	0
   946   00137A  6FAB               	movwf	(main@motorL+4)& (0+255),b
   947   00137C  0E63               	movlw	99
   948   00137E  6FAA               	movwf	(main@motorL+3)& (0+255),b
   949   001380                     
   950                           ; BSR set to: 0
   951                           ;main.c: 39:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   952   001380  0EAA               	movlw	170
   953   001382  6FAC               	movwf	(main@motorL+5)& (0+255),b
   954   001384  0E0F               	movlw	15
   955   001386  6FAD               	movwf	(main@motorL+6)& (0+255),b
   956   001388                     
   957                           ; BSR set to: 0
   958                           ;main.c: 40:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   959   001388  0EA6               	movlw	166
   960   00138A  6FAE               	movwf	(main@motorL+7)& (0+255),b
   961   00138C  0E0F               	movlw	15
   962   00138E  6FAF               	movwf	(main@motorL+8)& (0+255),b
   963   001390                     
   964                           ; BSR set to: 0
   965                           ;main.c: 42:     motorR.power = 0;
   966   001390  0E00               	movlw	0
   967   001392  6FB0               	movwf	main@motorR& (0+255),b
   968   001394                     
   969                           ; BSR set to: 0
   970                           ;main.c: 43:     motorR.direction = 1;
   971   001394  0E01               	movlw	1
   972   001396  6FB1               	movwf	(main@motorR+1)& (0+255),b
   973   001398                     
   974                           ; BSR set to: 0
   975                           ;main.c: 44:     motorR.brakemode = 1;
   976   001398  0E01               	movlw	1
   977   00139A  6FB2               	movwf	(main@motorR+2)& (0+255),b
   978   00139C                     
   979                           ; BSR set to: 0
   980                           ;main.c: 45:     motorR.PWMperiod = PWMcycle;
   981   00139C  0E00               	movlw	0
   982   00139E  6FB4               	movwf	(main@motorR+4)& (0+255),b
   983   0013A0  0E63               	movlw	99
   984   0013A2  6FB3               	movwf	(main@motorR+3)& (0+255),b
   985   0013A4                     
   986                           ; BSR set to: 0
   987                           ;main.c: 46:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   988   0013A4  0E25               	movlw	37
   989   0013A6  6FB5               	movwf	(main@motorR+5)& (0+255),b
   990   0013A8  0E0F               	movlw	15
   991   0013AA  6FB6               	movwf	(main@motorR+6)& (0+255),b
   992   0013AC                     
   993                           ; BSR set to: 0
   994                           ;main.c: 47:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   995   0013AC  0E21               	movlw	33
   996   0013AE  6FB7               	movwf	(main@motorR+7)& (0+255),b
   997   0013B0  0E0F               	movlw	15
   998   0013B2  6FB8               	movwf	(main@motorR+8)& (0+255),b
   999   0013B4                     
  1000                           ; BSR set to: 0
  1001                           ;main.c: 51:     struct RGBC_val readRGBC;;main.c: 53:     readRGBC.R = 0;
  1002   0013B4  0E00               	movlw	0
  1003   0013B6  6FBA               	movwf	(main@readRGBC+1)& (0+255),b
  1004   0013B8  0E00               	movlw	0
  1005   0013BA  6FB9               	movwf	main@readRGBC& (0+255),b
  1006   0013BC                     
  1007                           ; BSR set to: 0
  1008                           ;main.c: 54:     readRGBC.B = 0;
  1009   0013BC  0E00               	movlw	0
  1010   0013BE  6FBE               	movwf	(main@readRGBC+5)& (0+255),b
  1011   0013C0  0E00               	movlw	0
  1012   0013C2  6FBD               	movwf	(main@readRGBC+4)& (0+255),b
  1013   0013C4                     
  1014                           ; BSR set to: 0
  1015                           ;main.c: 55:     readRGBC.G = 0;
  1016   0013C4  0E00               	movlw	0
  1017   0013C6  6FBC               	movwf	(main@readRGBC+3)& (0+255),b
  1018   0013C8  0E00               	movlw	0
  1019   0013CA  6FBB               	movwf	(main@readRGBC+2)& (0+255),b
  1020   0013CC                     
  1021                           ; BSR set to: 0
  1022                           ;main.c: 56:     readRGBC.C = 0;
  1023   0013CC  0E00               	movlw	0
  1024   0013CE  6FC0               	movwf	(main@readRGBC+7)& (0+255),b
  1025   0013D0  0E00               	movlw	0
  1026   0013D2  6FBF               	movwf	(main@readRGBC+6)& (0+255),b
  1027   0013D4                     
  1028                           ; BSR set to: 0
  1029                           ;main.c: 59:     struct HSV_val readHSV;;main.c: 61:     readHSV.H = 0;
  1030   0013D4  0E00               	movlw	0
  1031   0013D6  6FA2               	movwf	(main@readHSV+1)& (0+255),b
  1032   0013D8  0E00               	movlw	0
  1033   0013DA  6FA1               	movwf	main@readHSV& (0+255),b
  1034   0013DC                     
  1035                           ; BSR set to: 0
  1036                           ;main.c: 62:     readHSV.S = 0;
  1037   0013DC  0E00               	movlw	0
  1038   0013DE  6FA4               	movwf	(main@readHSV+3)& (0+255),b
  1039   0013E0  0E00               	movlw	0
  1040   0013E2  6FA3               	movwf	(main@readHSV+2)& (0+255),b
  1041   0013E4                     
  1042                           ; BSR set to: 0
  1043                           ;main.c: 63:     readHSV.V = 0;
  1044   0013E4  0E00               	movlw	0
  1045   0013E6  6FA6               	movwf	(main@readHSV+5)& (0+255),b
  1046   0013E8  0E00               	movlw	0
  1047   0013EA  6FA5               	movwf	(main@readHSV+4)& (0+255),b
  1048   0013EC                     
  1049                           ; BSR set to: 0
  1050                           ;main.c: 67:     buggy_lights_init();
  1051   0013EC  EC59  F00D         	call	_buggy_lights_init	;wreg free
  1052   0013F0                     
  1053                           ;main.c: 68:     color_click_init();
  1054   0013F0  EC1B  F00E         	call	_color_click_init	;wreg free
  1055   0013F4                     
  1056                           ;main.c: 69:     initUSART4();
  1057   0013F4  ECF9  F00E         	call	_initUSART4	;wreg free
  1058   0013F8                     
  1059                           ;main.c: 70:     Timer0_init();
  1060   0013F8  ECE9  F00E         	call	_Timer0_init	;wreg free
  1061   0013FC                     
  1062                           ;main.c: 71:     Interrupts_init();
  1063   0013FC  EC41  F00F         	call	_Interrupts_init	;wreg free
  1064   001400                     
  1065                           ;main.c: 76:     TRISFbits.TRISF2 = 1;
  1066   001400  8486               	bsf	134,2,c	;volatile
  1067   001402                     
  1068                           ;main.c: 77:     TRISFbits.TRISF3 = 1;
  1069   001402  8686               	bsf	134,3,c	;volatile
  1070   001404                     
  1071                           ;main.c: 79:     ANSELFbits.ANSELF2 = 0;
  1072   001404  010E               	movlb	14	; () banked
  1073   001406  95B4               	bcf	180,2,b	;volatile
  1074   001408                     
  1075                           ; BSR set to: 14
  1076                           ;main.c: 80:     ANSELFbits.ANSELF3 = 0;
  1077   001408  97B4               	bcf	180,3,b	;volatile
  1078   00140A                     l3389:
  1079                           
  1080                           ;main.c: 101:         if (!PORTFbits.RF2) {
  1081   00140A  B48E               	btfsc	142,2,c	;volatile
  1082   00140C  EF0A  F00A         	goto	u2181
  1083   001410  EF0C  F00A         	goto	u2180
  1084   001414                     u2181:
  1085   001414  EF25  F00A         	goto	l3397
  1086   001418                     u2180:
  1087   001418                     
  1088                           ;main.c: 102:             *manoeuvre_pointer = 0;
  1089   001418  C0C1  FFD9         	movff	_manoeuvre_pointer,fsr2l
  1090   00141C  C0C2  FFDA         	movff	_manoeuvre_pointer+1,fsr2h
  1091   001420  6ADF               	clrf	indf2,c
  1092   001422                     
  1093                           ;main.c: 103:             manoeuvre_pointer ++;
  1094   001422  0100               	movlb	0	; () banked
  1095   001424  4BC1               	infsnz	_manoeuvre_pointer& (0+255),f,b
  1096   001426  2BC2               	incf	(_manoeuvre_pointer+1)& (0+255),f,b
  1097   001428                     
  1098                           ; BSR set to: 0
  1099                           ;main.c: 104:             LATDbits.LATD7 = !LATDbits.LATD7;
  1100   001428  AE7C               	btfss	124,7,c	;volatile
  1101   00142A  EF19  F00A         	goto	u2191
  1102   00142E  EF1D  F00A         	goto	u2190
  1103   001432                     u2191:
  1104   001432  6A2E               	clrf	??_main^0,c
  1105   001434  2A2E               	incf	??_main^0,f,c
  1106   001436  EF1E  F00A         	goto	u2208
  1107   00143A                     u2190:
  1108   00143A  6A2E               	clrf	??_main^0,c
  1109   00143C                     u2208:
  1110   00143C  322E               	rrcf	??_main^0,f,c
  1111   00143E  322E               	rrcf	??_main^0,f,c
  1112   001440  507C               	movf	124,w,c	;volatile
  1113   001442  182E               	xorwf	??_main^0,w,c
  1114   001444  0B7F               	andlw	-129
  1115   001446  182E               	xorwf	??_main^0,w,c
  1116   001448  6E7C               	movwf	124,c	;volatile
  1117   00144A                     l3397:
  1118                           
  1119                           ;main.c: 106:         getRGBCval(&readRGBC);
  1120   00144A  0EB9               	movlw	low main@readRGBC
  1121   00144C  6E10               	movwf	getRGBCval@p^0,c
  1122   00144E  EC65  F00C         	call	_getRGBCval	;wreg free
  1123   001452                     
  1124                           ;main.c: 107:         getHSVval(&readHSV,&readRGBC);
  1125   001452  0EA1               	movlw	low main@readHSV
  1126   001454  6E17               	movwf	getHSVval@p1^0,c
  1127   001456  0EB9               	movlw	low main@readRGBC
  1128   001458  6E18               	movwf	getHSVval@p2^0,c
  1129   00145A  EC0D  F007         	call	_getHSVval	;wreg free
  1130   00145E                     
  1131                           ;main.c: 108:         sprintf(display, "%d %d %d %d  \r",readRGBC.R,readRGBC.G,readRGBC.
      +                          B,readRGBC.C);
  1132   00145E  0E6F               	movlw	low main@display
  1133   001460  6E24               	movwf	sprintf@s^0,c
  1134   001462  0E01               	movlw	low STR_1
  1135   001464  6E25               	movwf	sprintf@fmt^0,c
  1136   001466  C0B9  F026         	movff	main@readRGBC,?_sprintf+2
  1137   00146A  C0BA  F027         	movff	main@readRGBC+1,?_sprintf+3
  1138   00146E  C0BB  F028         	movff	main@readRGBC+2,?_sprintf+4
  1139   001472  C0BC  F029         	movff	main@readRGBC+3,?_sprintf+5
  1140   001476  C0BD  F02A         	movff	main@readRGBC+4,?_sprintf+6
  1141   00147A  C0BE  F02B         	movff	main@readRGBC+5,?_sprintf+7
  1142   00147E  C0BF  F02C         	movff	main@readRGBC+6,?_sprintf+8
  1143   001482  C0C0  F02D         	movff	main@readRGBC+7,?_sprintf+9
  1144   001486  EC80  F00D         	call	_sprintf	;wreg free
  1145   00148A                     
  1146                           ;main.c: 109:         TxBufferedString(display);
  1147   00148A  0E6F               	movlw	low main@display
  1148   00148C  6E06               	movwf	TxBufferedString@string^0,c
  1149   00148E  EC75  F00E         	call	_TxBufferedString	;wreg free
  1150   001492                     
  1151                           ;main.c: 110:         sendTxBuf();
  1152   001492  EC08  F00F         	call	_sendTxBuf	;wreg free
  1153   001496                     
  1154                           ;main.c: 113:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1155   001496  0E52               	movlw	82
  1156   001498  6E2F               	movwf	(??_main+1)^0,c
  1157   00149A  0E2B               	movlw	43
  1158   00149C  6E2E               	movwf	??_main^0,c
  1159   00149E  0E00               	movlw	0
  1160   0014A0                     u2237:
  1161   0014A0  2EE8               	decfsz	wreg,f,c
  1162   0014A2  D7FE               	bra	u2237
  1163   0014A4  2E2E               	decfsz	??_main^0,f,c
  1164   0014A6  D7FC               	bra	u2237
  1165   0014A8  2E2F               	decfsz	(??_main+1)^0,f,c
  1166   0014AA  D7FA               	bra	u2237
  1167   0014AC  D000               	nop2	
  1168   0014AE  EF05  F00A         	goto	l3389
  1169   0014B2  EF3A  F000         	goto	start
  1170   0014B6                     __end_of_main:
  1171                           	callstack 0
  1172                           
  1173 ;; *************** function _sprintf *****************
  1174 ;; Defined at:
  1175 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  s               1   35[COMRAM] PTR unsigned char 
  1178 ;;		 -> sendArraySerial4@tempStr(21), sendIntSerial4@string(17), main@display(50), 
  1179 ;;  fmt             1   36[COMRAM] PTR const unsigned char 
  1180 ;;		 -> STR_4(3), STR_2(5), STR_1(15), 
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;  f              12    3[BANK0 ] struct _IO_FILE
  1183 ;;  ret             2    0[BANK0 ] int 
  1184 ;;  ap              1    2[BANK0 ] PTR void [1]
  1185 ;;		 -> ?_sprintf(2), 
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  2   35[COMRAM] int 
  1188 ;; Registers used:
  1189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1195 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1196 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1198 ;;      Totals:        10      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1199 ;;Total ram usage:       25 bytes
  1200 ;; Hardware stack levels used: 1
  1201 ;; Hardware stack levels required when called: 6
  1202 ;; This function calls:
  1203 ;;		_vfprintf
  1204 ;; This function is called by:
  1205 ;;		_main
  1206 ;;		_sendIntSerial4
  1207 ;;		_sendArraySerial4
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text1
  1212   001B00                     __ptext1:
  1213                           	callstack 0
  1214   001B00                     _sprintf:
  1215                           	callstack 24
  1216   001B00  0E26               	movlw	low (?_sprintf+2)
  1217   001B02  0100               	movlb	0	; () banked
  1218   001B04  6F62               	movwf	sprintf@ap& (0+255),b
  1219   001B06  C024  F063         	movff	sprintf@s,sprintf@f
  1220   001B0A                     
  1221                           ; BSR set to: 0
  1222   001B0A  0E00               	movlw	0
  1223   001B0C  6F67               	movwf	(sprintf@f+4)& (0+255),b
  1224   001B0E  0E00               	movlw	0
  1225   001B10  6F66               	movwf	(sprintf@f+3)& (0+255),b
  1226   001B12                     
  1227                           ; BSR set to: 0
  1228   001B12  0E00               	movlw	0
  1229   001B14  6F6E               	movwf	(sprintf@f+11)& (0+255),b
  1230   001B16  0E00               	movlw	0
  1231   001B18  6F6D               	movwf	(sprintf@f+10)& (0+255),b
  1232   001B1A                     
  1233                           ; BSR set to: 0
  1234   001B1A  0E63               	movlw	low sprintf@f
  1235   001B1C  6E20               	movwf	vfprintf@fp^0,c
  1236   001B1E  C025  F021         	movff	sprintf@fmt,vfprintf@fmt
  1237   001B22  0E62               	movlw	low sprintf@ap
  1238   001B24  6E22               	movwf	vfprintf@ap^0,c
  1239   001B26  EC90  F00C         	call	_vfprintf	;wreg free
  1240   001B2A  C020  F060         	movff	?_vfprintf,sprintf@ret
  1241   001B2E  C021  F061         	movff	?_vfprintf+1,sprintf@ret+1
  1242   001B32  5024               	movf	sprintf@s^0,w,c
  1243   001B34  0100               	movlb	0	; () banked
  1244   001B36  2566               	addwf	(sprintf@f+3)& (0+255),w,b
  1245   001B38  6ED9               	movwf	fsr2l,c
  1246   001B3A  6ADA               	clrf	fsr2h,c
  1247   001B3C  6ADF               	clrf	indf2,c
  1248   001B3E                     
  1249                           ; BSR set to: 0
  1250   001B3E  C060  F024         	movff	sprintf@ret,?_sprintf
  1251   001B42  C061  F025         	movff	sprintf@ret+1,?_sprintf+1
  1252   001B46                     
  1253                           ; BSR set to: 0
  1254   001B46  0012               	return		;funcret
  1255   001B48                     __end_of_sprintf:
  1256                           	callstack 0
  1257                           
  1258 ;; *************** function _vfprintf *****************
  1259 ;; Defined at:
  1260 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1263 ;;		 -> sprintf@f(12), 
  1264 ;;  fmt             1   32[COMRAM] PTR const unsigned char 
  1265 ;;		 -> STR_4(3), STR_2(5), STR_1(15), 
  1266 ;;  ap              1   33[COMRAM] PTR PTR void 
  1267 ;;		 -> sprintf@ap(1), 
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;  cfmt            1   34[COMRAM] PTR unsigned char 
  1270 ;;		 -> STR_4(3), STR_2(5), STR_1(15), 
  1271 ;; Return value:  Size  Location     Type
  1272 ;;                  2   31[COMRAM] int 
  1273 ;; Registers used:
  1274 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1280 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1281 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1283 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1284 ;;Total ram usage:        4 bytes
  1285 ;; Hardware stack levels used: 1
  1286 ;; Hardware stack levels required when called: 5
  1287 ;; This function calls:
  1288 ;;		_vfpfcnvrt
  1289 ;; This function is called by:
  1290 ;;		_sprintf
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text2
  1295   001920                     __ptext2:
  1296                           	callstack 0
  1297   001920                     _vfprintf:
  1298                           	callstack 24
  1299   001920                     
  1300                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1301   001920  C021  F023         	movff	vfprintf@fmt,vfprintf@cfmt
  1302   001924                     
  1303                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  1304   001924  0E00               	movlw	0
  1305   001926  6E45               	movwf	(_nout+1)^0,c
  1306   001928  0E00               	movlw	0
  1307   00192A  6E44               	movwf	_nout^0,c
  1308                           
  1309                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1310   00192C  EFA4  F00C         	goto	l3271
  1311   001930                     l3269:
  1312                           
  1313                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  1314   001930  C020  F013         	movff	vfprintf@fp,vfpfcnvrt@fp
  1315   001934  0E23               	movlw	low vfprintf@cfmt
  1316   001936  6E14               	movwf	vfpfcnvrt@fmt^0,c
  1317   001938  C022  F015         	movff	vfprintf@ap,vfpfcnvrt@ap
  1318   00193C  ECA3  F008         	call	_vfpfcnvrt	;wreg free
  1319   001940  5013               	movf	?_vfpfcnvrt^0,w,c
  1320   001942  2644               	addwf	_nout^0,f,c
  1321   001944  5014               	movf	(?_vfpfcnvrt+1)^0,w,c
  1322   001946  2245               	addwfc	(_nout+1)^0,f,c
  1323   001948                     l3271:
  1324                           
  1325                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1326   001948  C023  FFF6         	movff	vfprintf@cfmt,tblptrl
  1327   00194C                     	if	1	;There is more than 1 active tblptr byte
  1328   00194C  0E0E               	movlw	high __smallconst
  1329   00194E  6EF7               	movwf	tblptrh,c
  1330   001950                     	endif
  1331   001950                     	if	0	;tblptru may be non-zero
  1332   001950                     	endif
  1333   001950                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1334   001950  0E00               	movlw	low (__smallconst shr (0+16))
  1335   001952  6EF8               	movwf	tblptru,c
  1336   001954                     	endif
  1337   001954  0008               	tblrd		*
  1338   001956  50F5               	movf	tablat,w,c
  1339   001958  0900               	iorlw	0
  1340   00195A  A4D8               	btfss	status,2,c
  1341   00195C  EFB2  F00C         	goto	u2111
  1342   001960  EFB4  F00C         	goto	u2110
  1343   001964                     u2111:
  1344   001964  EF98  F00C         	goto	l3269
  1345   001968                     u2110:
  1346   001968                     
  1347                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  1348   001968  C044  F020         	movff	_nout,?_vfprintf
  1349   00196C  C045  F021         	movff	_nout+1,?_vfprintf+1
  1350   001970  0012               	return		;funcret
  1351   001972                     __end_of_vfprintf:
  1352                           	callstack 0
  1353                           
  1354 ;; *************** function _vfpfcnvrt *****************
  1355 ;; Defined at:
  1356 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;  fp              1   18[COMRAM] PTR struct _IO_FILE
  1359 ;;		 -> sprintf@f(12), 
  1360 ;;  fmt             1   19[COMRAM] PTR PTR unsigned char 
  1361 ;;		 -> vfprintf@cfmt(1), 
  1362 ;;  ap              1   20[COMRAM] PTR PTR void 
  1363 ;;		 -> sprintf@ap(1), 
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  convarg         4   26[COMRAM] struct .
  1366 ;;  cnt             2   23[COMRAM] int 
  1367 ;;  c               1   30[COMRAM] unsigned char 
  1368 ;;  cp              1   25[COMRAM] PTR unsigned char 
  1369 ;;		 -> STR_4(3), STR_2(5), STR_1(15), 
  1370 ;;  done            1   22[COMRAM] _Bool 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  2   18[COMRAM] int 
  1373 ;; Registers used:
  1374 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1380 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1381 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1382 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1383 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1384 ;;Total ram usage:       13 bytes
  1385 ;; Hardware stack levels used: 1
  1386 ;; Hardware stack levels required when called: 4
  1387 ;; This function calls:
  1388 ;;		___awdiv
  1389 ;;		___awmod
  1390 ;;		_abs
  1391 ;;		_fputc
  1392 ;; This function is called by:
  1393 ;;		_vfprintf
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text3
  1398   001146                     __ptext3:
  1399                           	callstack 0
  1400   001146                     _vfpfcnvrt:
  1401                           	callstack 24
  1402   001146                     
  1403                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  1404   001146  0E00               	movlw	0
  1405   001148  6E19               	movwf	(vfpfcnvrt@cnt+1)^0,c
  1406   00114A  0E00               	movlw	0
  1407   00114C  6E18               	movwf	vfpfcnvrt@cnt^0,c
  1408   00114E                     
  1409                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  1410   00114E  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1411   001150  6ED9               	movwf	fsr2l,c
  1412   001152  6ADA               	clrf	fsr2h,c
  1413   001154  CFDF FFF6          	movff	indf2,tblptrl
  1414   001158                     	if	1	;There is more than 1 active tblptr byte
  1415   001158  0E0E               	movlw	high __smallconst
  1416   00115A  6EF7               	movwf	tblptrh,c
  1417   00115C                     	endif
  1418   00115C                     	if	0	;tblptru may be non-zero
  1419   00115C                     	endif
  1420   00115C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1421   00115C  0E00               	movlw	low (__smallconst shr (0+16))
  1422   00115E  6EF8               	movwf	tblptru,c
  1423   001160                     	endif
  1424   001160  0008               	tblrd		*
  1425   001162  50F5               	movf	tablat,w,c
  1426   001164  0A25               	xorlw	37
  1427   001166  A4D8               	btfss	status,2,c
  1428   001168  EFB8  F008         	goto	u2011
  1429   00116C  EFBA  F008         	goto	u2010
  1430   001170                     u2011:
  1431   001170  EF89  F009         	goto	l3257
  1432   001174                     u2010:
  1433   001174                     
  1434                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1435   001174  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1436   001176  6ED9               	movwf	fsr2l,c
  1437   001178  6ADA               	clrf	fsr2h,c
  1438   00117A  2ADF               	incf	indf2,f,c
  1439   00117C                     
  1440                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1441   00117C  0E00               	movlw	0
  1442   00117E  6E47               	movwf	(_width+1)^0,c
  1443   001180  0E00               	movlw	0
  1444   001182  6E46               	movwf	_width^0,c
  1445   001184  C046  F04A         	movff	_width,_flags
  1446   001188                     
  1447                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1448   001188  6848               	setf	_prec^0,c
  1449   00118A  6849               	setf	(_prec+1)^0,c
  1450   00118C                     
  1451                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1452   00118C  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1453   00118E  6ED9               	movwf	fsr2l,c
  1454   001190  6ADA               	clrf	fsr2h,c
  1455   001192  50DF               	movf	indf2,w,c
  1456   001194  6E1A               	movwf	vfpfcnvrt@cp^0,c
  1457   001196                     
  1458                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1459   001196  C01A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1460   00119A                     	if	1	;There is more than 1 active tblptr byte
  1461   00119A  0E0E               	movlw	high __smallconst
  1462   00119C  6EF7               	movwf	tblptrh,c
  1463   00119E                     	endif
  1464   00119E                     	if	0	;tblptru may be non-zero
  1465   00119E                     	endif
  1466   00119E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1467   00119E  0E00               	movlw	low (__smallconst shr (0+16))
  1468   0011A0  6EF8               	movwf	tblptru,c
  1469   0011A2                     	endif
  1470   0011A2  0008               	tblrd		*
  1471   0011A4  50F5               	movf	tablat,w,c
  1472   0011A6  0A64               	xorlw	100
  1473   0011A8  B4D8               	btfsc	status,2,c
  1474   0011AA  EFD9  F008         	goto	u2021
  1475   0011AE  EFDB  F008         	goto	u2020
  1476   0011B2                     u2021:
  1477   0011B2  EFEB  F008         	goto	l3221
  1478   0011B6                     u2020:
  1479   0011B6  C01A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1480   0011BA                     	if	1	;There is more than 1 active tblptr byte
  1481   0011BA  0E0E               	movlw	high __smallconst
  1482   0011BC  6EF7               	movwf	tblptrh,c
  1483   0011BE                     	endif
  1484   0011BE                     	if	0	;tblptru may be non-zero
  1485   0011BE                     	endif
  1486   0011BE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1487   0011BE  0E00               	movlw	low (__smallconst shr (0+16))
  1488   0011C0  6EF8               	movwf	tblptru,c
  1489   0011C2                     	endif
  1490   0011C2  0008               	tblrd		*
  1491   0011C4  50F5               	movf	tablat,w,c
  1492   0011C6  0A69               	xorlw	105
  1493   0011C8  A4D8               	btfss	status,2,c
  1494   0011CA  EFE9  F008         	goto	u2031
  1495   0011CE  EFEB  F008         	goto	u2030
  1496   0011D2                     u2031:
  1497   0011D2  EF7F  F009         	goto	l3251
  1498   0011D6                     u2030:
  1499   0011D6                     l3221:
  1500                           
  1501                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1502   0011D6  5015               	movf	vfpfcnvrt@ap^0,w,c
  1503   0011D8  6ED9               	movwf	fsr2l,c
  1504   0011DA  6ADA               	clrf	fsr2h,c
  1505   0011DC  0E02               	movlw	2
  1506   0011DE  26DF               	addwf	indf2,f,c
  1507   0011E0  5CDF               	subwf	indf2,w,c
  1508   0011E2  6ED9               	movwf	fsr2l,c
  1509   0011E4  6ADA               	clrf	fsr2h,c
  1510   0011E6  CFDE F01B          	movff	postinc2,vfpfcnvrt@convarg
  1511   0011EA  CFDE F01C          	movff	postinc2,vfpfcnvrt@convarg+1
  1512   0011EE                     
  1513                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1514   0011EE  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1515   0011F0  6ED9               	movwf	fsr2l,c
  1516   0011F2  6ADA               	clrf	fsr2h,c
  1517   0011F4  281A               	incf	vfpfcnvrt@cp^0,w,c
  1518   0011F6  6EDF               	movwf	indf2,c
  1519   0011F8                     
  1520                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1521   0011F8  0E20               	movlw	32
  1522   0011FA  6E1F               	movwf	vfpfcnvrt@c^0,c
  1523                           
  1524                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1525   0011FC  BE1C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1526   0011FE  EF03  F009         	goto	u2041
  1527   001202  EF06  F009         	goto	u2040
  1528   001206                     u2041:
  1529   001206  0E01               	movlw	1
  1530   001208  EF07  F009         	goto	u2050
  1531   00120C                     u2040:
  1532   00120C  0E00               	movlw	0
  1533   00120E                     u2050:
  1534   00120E  6E17               	movwf	vfpfcnvrt@done^0,c
  1535   001210                     l3227:
  1536                           
  1537                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1538   001210  061F               	decf	vfpfcnvrt@c^0,f,c
  1539   001212  0E3C               	movlw	low _dbuf
  1540   001214  241F               	addwf	vfpfcnvrt@c^0,w,c
  1541   001216  6ED9               	movwf	fsr2l,c
  1542   001218  6ADA               	clrf	fsr2h,c
  1543   00121A  0E01               	movlw	high _dbuf
  1544   00121C  22DA               	addwfc	fsr2h,f,c
  1545   00121E  C01B  F005         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1546   001222  C01C  F006         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1547   001226  0E00               	movlw	0
  1548   001228  6E08               	movwf	(___awmod@divisor+1)^0,c
  1549   00122A  0E0A               	movlw	10
  1550   00122C  6E07               	movwf	___awmod@divisor^0,c
  1551   00122E  ECBD  F00A         	call	___awmod	;wreg free
  1552   001232  C005  F00B         	movff	?___awmod,abs@a
  1553   001236  C006  F00C         	movff	?___awmod+1,abs@a+1
  1554   00123A  EC01  F00E         	call	_abs	;wreg free
  1555   00123E  500B               	movf	?_abs^0,w,c
  1556   001240  0F30               	addlw	48
  1557   001242  6EDF               	movwf	indf2,c
  1558   001244                     
  1559                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1560   001244  C01B  F00B         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1561   001248  C01C  F00C         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1562   00124C  0E00               	movlw	0
  1563   00124E  6E0E               	movwf	(___awdiv@divisor+1)^0,c
  1564   001250  0E0A               	movlw	10
  1565   001252  6E0D               	movwf	___awdiv@divisor^0,c
  1566   001254  EC5B  F00A         	call	___awdiv	;wreg free
  1567   001258  C00B  F01B         	movff	?___awdiv,vfpfcnvrt@convarg
  1568   00125C  C00C  F01C         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1569   001260                     
  1570                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  1571   001260  4A18               	infsnz	vfpfcnvrt@cnt^0,f,c
  1572   001262  2A19               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1573   001264                     
  1574                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1575   001264  501B               	movf	vfpfcnvrt@convarg^0,w,c
  1576   001266  101C               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1577   001268  B4D8               	btfsc	status,2,c
  1578   00126A  EF39  F009         	goto	u2061
  1579   00126E  EF3B  F009         	goto	u2060
  1580   001272                     u2061:
  1581   001272  EF43  F009         	goto	l3237
  1582   001276                     u2060:
  1583   001276  501F               	movf	vfpfcnvrt@c^0,w,c
  1584   001278  A4D8               	btfss	status,2,c
  1585   00127A  EF41  F009         	goto	u2071
  1586   00127E  EF43  F009         	goto	u2070
  1587   001282                     u2071:
  1588   001282  EF08  F009         	goto	l3227
  1589   001286                     u2070:
  1590   001286                     l3237:
  1591                           
  1592                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1593   001286  501F               	movf	vfpfcnvrt@c^0,w,c
  1594   001288  B4D8               	btfsc	status,2,c
  1595   00128A  EF49  F009         	goto	u2081
  1596   00128E  EF4B  F009         	goto	u2080
  1597   001292                     u2081:
  1598   001292  EF70  F009         	goto	l3249
  1599   001296                     u2080:
  1600   001296  5017               	movf	vfpfcnvrt@done^0,w,c
  1601   001298  B4D8               	btfsc	status,2,c
  1602   00129A  EF51  F009         	goto	u2091
  1603   00129E  EF53  F009         	goto	u2090
  1604   0012A2                     u2091:
  1605   0012A2  EF70  F009         	goto	l3249
  1606   0012A6                     u2090:
  1607   0012A6                     
  1608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1609   0012A6  061F               	decf	vfpfcnvrt@c^0,f,c
  1610   0012A8  0E3C               	movlw	low _dbuf
  1611   0012AA  241F               	addwf	vfpfcnvrt@c^0,w,c
  1612   0012AC  6ED9               	movwf	fsr2l,c
  1613   0012AE  6ADA               	clrf	fsr2h,c
  1614   0012B0  0E01               	movlw	high _dbuf
  1615   0012B2  22DA               	addwfc	fsr2h,f,c
  1616   0012B4  0E2D               	movlw	45
  1617   0012B6  6EDF               	movwf	indf2,c
  1618   0012B8                     
  1619                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  1620   0012B8  4A18               	infsnz	vfpfcnvrt@cnt^0,f,c
  1621   0012BA  2A19               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1622   0012BC  EF70  F009         	goto	l3249
  1623   0012C0                     l3245:
  1624                           
  1625                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1626   0012C0  0E3C               	movlw	low _dbuf
  1627   0012C2  241F               	addwf	vfpfcnvrt@c^0,w,c
  1628   0012C4  6ED9               	movwf	fsr2l,c
  1629   0012C6  6ADA               	clrf	fsr2h,c
  1630   0012C8  0E01               	movlw	high _dbuf
  1631   0012CA  22DA               	addwfc	fsr2h,f,c
  1632   0012CC  50DF               	movf	indf2,w,c
  1633   0012CE  6E16               	movwf	??_vfpfcnvrt^0,c
  1634   0012D0  5016               	movf	??_vfpfcnvrt^0,w,c
  1635   0012D2  6E05               	movwf	fputc@c^0,c
  1636   0012D4  6A06               	clrf	(fputc@c+1)^0,c
  1637   0012D6  C013  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1638   0012DA  EC15  F00B         	call	_fputc	;wreg free
  1639   0012DE  2A1F               	incf	vfpfcnvrt@c^0,f,c
  1640   0012E0                     l3249:
  1641                           
  1642                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1643   0012E0  0E20               	movlw	32
  1644   0012E2  181F               	xorwf	vfpfcnvrt@c^0,w,c
  1645   0012E4  A4D8               	btfss	status,2,c
  1646   0012E6  EF77  F009         	goto	u2101
  1647   0012EA  EF79  F009         	goto	u2100
  1648   0012EE                     u2101:
  1649   0012EE  EF60  F009         	goto	l3245
  1650   0012F2                     u2100:
  1651   0012F2                     
  1652                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  1653   0012F2  C018  F013         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  1654   0012F6  C019  F014         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  1655   0012FA  EFA2  F009         	goto	l1369
  1656   0012FE                     l3251:
  1657                           
  1658                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1659   0012FE  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1660   001300  6ED9               	movwf	fsr2l,c
  1661   001302  6ADA               	clrf	fsr2h,c
  1662   001304  2ADF               	incf	indf2,f,c
  1663   001306                     
  1664                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  1665   001306  0E00               	movlw	0
  1666   001308  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  1667   00130A  0E00               	movlw	0
  1668   00130C  6E13               	movwf	?_vfpfcnvrt^0,c
  1669   00130E  EFA2  F009         	goto	l1369
  1670   001312                     l3257:
  1671                           
  1672                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1673   001312  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1674   001314  6ED9               	movwf	fsr2l,c
  1675   001316  6ADA               	clrf	fsr2h,c
  1676   001318  CFDF FFF6          	movff	indf2,tblptrl
  1677   00131C                     	if	1	;There is more than 1 active tblptr byte
  1678   00131C  0E0E               	movlw	high __smallconst
  1679   00131E  6EF7               	movwf	tblptrh,c
  1680   001320                     	endif
  1681   001320                     	if	0	;tblptru may be non-zero
  1682   001320                     	endif
  1683   001320                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1684   001320  0E00               	movlw	low (__smallconst shr (0+16))
  1685   001322  6EF8               	movwf	tblptru,c
  1686   001324                     	endif
  1687   001324  0008               	tblrd		*
  1688   001326  50F5               	movf	tablat,w,c
  1689   001328  6E05               	movwf	fputc@c^0,c
  1690   00132A  6A06               	clrf	(fputc@c+1)^0,c
  1691   00132C  C013  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1692   001330  EC15  F00B         	call	_fputc	;wreg free
  1693   001334                     
  1694                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  1695   001334  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1696   001336  6ED9               	movwf	fsr2l,c
  1697   001338  6ADA               	clrf	fsr2h,c
  1698   00133A  2ADF               	incf	indf2,f,c
  1699   00133C                     
  1700                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  1701   00133C  0E00               	movlw	0
  1702   00133E  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  1703   001340  0E01               	movlw	1
  1704   001342  6E13               	movwf	?_vfpfcnvrt^0,c
  1705   001344                     l1369:
  1706   001344  0012               	return		;funcret
  1707   001346                     __end_of_vfpfcnvrt:
  1708                           	callstack 0
  1709                           
  1710 ;; *************** function _fputc *****************
  1711 ;; Defined at:
  1712 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;  c               2    4[COMRAM] int 
  1715 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  1716 ;;		 -> sprintf@f(12), 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;		None
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  2    4[COMRAM] int 
  1721 ;; Registers used:
  1722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1728 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1730 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1731 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1732 ;;Total ram usage:        8 bytes
  1733 ;; Hardware stack levels used: 1
  1734 ;; Hardware stack levels required when called: 3
  1735 ;; This function calls:
  1736 ;;		_putch
  1737 ;; This function is called by:
  1738 ;;		_vfpfcnvrt
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742                           	psect	text4
  1743   00162A                     __ptext4:
  1744                           	callstack 0
  1745   00162A                     _fputc:
  1746                           	callstack 24
  1747   00162A  5007               	movf	fputc@fp^0,w,c
  1748   00162C  B4D8               	btfsc	status,2,c
  1749   00162E  EF1B  F00B         	goto	u1961
  1750   001632  EF1D  F00B         	goto	u1960
  1751   001636                     u1961:
  1752   001636  EF25  F00B         	goto	l3191
  1753   00163A                     u1960:
  1754   00163A  5007               	movf	fputc@fp^0,w,c
  1755   00163C  A4D8               	btfss	status,2,c
  1756   00163E  EF23  F00B         	goto	u1971
  1757   001642  EF25  F00B         	goto	u1970
  1758   001646                     u1971:
  1759   001646  EF2A  F00B         	goto	l3193
  1760   00164A                     u1970:
  1761   00164A                     l3191:
  1762   00164A  5005               	movf	fputc@c^0,w,c
  1763   00164C  EC5D  F00F         	call	_putch
  1764   001650  EF69  F00B         	goto	l1394
  1765   001654                     l3193:
  1766   001654  5007               	movf	fputc@fp^0,w,c
  1767   001656  6ED9               	movwf	fsr2l,c
  1768   001658  6ADA               	clrf	fsr2h,c
  1769   00165A  0E0A               	movlw	10
  1770   00165C  26D9               	addwf	fsr2l,f,c
  1771   00165E  50DE               	movf	postinc2,w,c
  1772   001660  10DE               	iorwf	postinc2,w,c
  1773   001662  B4D8               	btfsc	status,2,c
  1774   001664  EF36  F00B         	goto	u1981
  1775   001668  EF38  F00B         	goto	u1980
  1776   00166C                     u1981:
  1777   00166C  EF51  F00B         	goto	l3197
  1778   001670                     u1980:
  1779   001670  5007               	movf	fputc@fp^0,w,c
  1780   001672  6ED9               	movwf	fsr2l,c
  1781   001674  6ADA               	clrf	fsr2h,c
  1782   001676  0E0A               	movlw	10
  1783   001678  26D9               	addwf	fsr2l,f,c
  1784   00167A  5007               	movf	fputc@fp^0,w,c
  1785   00167C  6EE1               	movwf	fsr1l,c
  1786   00167E  6AE2               	clrf	fsr1h,c
  1787   001680  0E03               	movlw	3
  1788   001682  26E1               	addwf	fsr1l,f,c
  1789   001684  50DE               	movf	postinc2,w,c
  1790   001686  5CE6               	subwf	postinc1,w,c
  1791   001688  50E6               	movf	postinc1,w,c
  1792   00168A  0A80               	xorlw	128
  1793   00168C  6E0C               	movwf	(??_fputc+4)^0,c
  1794   00168E  50DE               	movf	postinc2,w,c
  1795   001690  0A80               	xorlw	128
  1796   001692  580C               	subwfb	(??_fputc+4)^0,w,c
  1797   001694  B0D8               	btfsc	status,0,c
  1798   001696  EF4F  F00B         	goto	u1991
  1799   00169A  EF51  F00B         	goto	u1990
  1800   00169E                     u1991:
  1801   00169E  EF69  F00B         	goto	l1394
  1802   0016A2                     u1990:
  1803   0016A2                     l3197:
  1804   0016A2  5007               	movf	fputc@fp^0,w,c
  1805   0016A4  6ED9               	movwf	fsr2l,c
  1806   0016A6  6ADA               	clrf	fsr2h,c
  1807   0016A8  0E03               	movlw	3
  1808   0016AA  26D9               	addwf	fsr2l,f,c
  1809   0016AC  50DF               	movf	indf2,w,c
  1810   0016AE  6E08               	movwf	??_fputc^0,c
  1811   0016B0  5007               	movf	fputc@fp^0,w,c
  1812   0016B2  6ED9               	movwf	fsr2l,c
  1813   0016B4  6ADA               	clrf	fsr2h,c
  1814   0016B6  50DF               	movf	indf2,w,c
  1815   0016B8  2408               	addwf	??_fputc^0,w,c
  1816   0016BA  6ED9               	movwf	fsr2l,c
  1817   0016BC  6ADA               	clrf	fsr2h,c
  1818   0016BE  C005  FFDF         	movff	fputc@c,indf2
  1819   0016C2  5007               	movf	fputc@fp^0,w,c
  1820   0016C4  6ED9               	movwf	fsr2l,c
  1821   0016C6  6ADA               	clrf	fsr2h,c
  1822   0016C8  0E03               	movlw	3
  1823   0016CA  26D9               	addwf	fsr2l,f,c
  1824   0016CC  2ADE               	incf	postinc2,f,c
  1825   0016CE  0E00               	movlw	0
  1826   0016D0  22DD               	addwfc	postdec2,f,c
  1827   0016D2                     l1394:
  1828   0016D2  0012               	return		;funcret
  1829   0016D4                     __end_of_fputc:
  1830                           	callstack 0
  1831                           
  1832 ;; *************** function _putch *****************
  1833 ;; Defined at:
  1834 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  c               1    wreg     unsigned char 
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;  c               1    0[COMRAM] unsigned char 
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		wreg
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1852 ;;Total ram usage:        0 bytes
  1853 ;; Hardware stack levels used: 1
  1854 ;; Hardware stack levels required when called: 2
  1855 ;; This function calls:
  1856 ;;		Nothing
  1857 ;; This function is called by:
  1858 ;;		_fputc
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           	psect	text5
  1863   001EBA                     __ptext5:
  1864                           	callstack 0
  1865   001EBA                     _putch:
  1866                           	callstack 24
  1867   001EBA  0012               	return		;funcret
  1868   001EBC                     __end_of_putch:
  1869                           	callstack 0
  1870                           
  1871 ;; *************** function _abs *****************
  1872 ;; Defined at:
  1873 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;  a               2   10[COMRAM] int 
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;		None
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  2   10[COMRAM] int 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2, status,0
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1889 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1890 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1891 ;;Total ram usage:        4 bytes
  1892 ;; Hardware stack levels used: 1
  1893 ;; Hardware stack levels required when called: 2
  1894 ;; This function calls:
  1895 ;;		Nothing
  1896 ;; This function is called by:
  1897 ;;		_vfpfcnvrt
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text6
  1902   001C02                     __ptext6:
  1903                           	callstack 0
  1904   001C02                     _abs:
  1905                           	callstack 25
  1906   001C02  BE0C               	btfsc	(abs@a+1)^0,7,c
  1907   001C04  EF06  F00E         	goto	u2001
  1908   001C08  EF08  F00E         	goto	u2000
  1909   001C0C                     u2001:
  1910   001C0C  EF0E  F00E         	goto	l1379
  1911   001C10                     u2000:
  1912   001C10  C00B  F00B         	movff	abs@a,?_abs
  1913   001C14  C00C  F00C         	movff	abs@a+1,?_abs+1
  1914   001C18  EF1A  F00E         	goto	l1382
  1915   001C1C                     l1379:
  1916   001C1C  C00B  F00D         	movff	abs@a,??_abs
  1917   001C20  C00C  F00E         	movff	abs@a+1,??_abs+1
  1918   001C24  1E0D               	comf	??_abs^0,f,c
  1919   001C26  1E0E               	comf	(??_abs+1)^0,f,c
  1920   001C28  4A0D               	infsnz	??_abs^0,f,c
  1921   001C2A  2A0E               	incf	(??_abs+1)^0,f,c
  1922   001C2C  C00D  F00B         	movff	??_abs,?_abs
  1923   001C30  C00E  F00C         	movff	??_abs+1,?_abs+1
  1924   001C34                     l1382:
  1925   001C34  0012               	return		;funcret
  1926   001C36                     __end_of_abs:
  1927                           	callstack 0
  1928                           
  1929 ;; *************** function ___awmod *****************
  1930 ;; Defined at:
  1931 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  dividend        2    4[COMRAM] int 
  1934 ;;  divisor         2    6[COMRAM] int 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  sign            1    9[COMRAM] unsigned char 
  1937 ;;  counter         1    8[COMRAM] unsigned char 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  2    4[COMRAM] int 
  1940 ;; Registers used:
  1941 ;;		wreg, status,2, status,0
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1947 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1948 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;Total ram usage:        6 bytes
  1952 ;; Hardware stack levels used: 1
  1953 ;; Hardware stack levels required when called: 2
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		_vfpfcnvrt
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text7
  1962   00157A                     __ptext7:
  1963                           	callstack 0
  1964   00157A                     ___awmod:
  1965                           	callstack 25
  1966   00157A  0E00               	movlw	0
  1967   00157C  6E0A               	movwf	___awmod@sign^0,c
  1968   00157E  BE06               	btfsc	(___awmod@dividend+1)^0,7,c
  1969   001580  EFC6  F00A         	goto	u1900
  1970   001584  EFC4  F00A         	goto	u1901
  1971   001588                     u1901:
  1972   001588  EFCC  F00A         	goto	l3159
  1973   00158C                     u1900:
  1974   00158C  6C05               	negf	___awmod@dividend^0,c
  1975   00158E  1E06               	comf	(___awmod@dividend+1)^0,f,c
  1976   001590  B0D8               	btfsc	status,0,c
  1977   001592  2A06               	incf	(___awmod@dividend+1)^0,f,c
  1978   001594  0E01               	movlw	1
  1979   001596  6E0A               	movwf	___awmod@sign^0,c
  1980   001598                     l3159:
  1981   001598  BE08               	btfsc	(___awmod@divisor+1)^0,7,c
  1982   00159A  EFD3  F00A         	goto	u1910
  1983   00159E  EFD1  F00A         	goto	u1911
  1984   0015A2                     u1911:
  1985   0015A2  EFD7  F00A         	goto	l3163
  1986   0015A6                     u1910:
  1987   0015A6  6C07               	negf	___awmod@divisor^0,c
  1988   0015A8  1E08               	comf	(___awmod@divisor+1)^0,f,c
  1989   0015AA  B0D8               	btfsc	status,0,c
  1990   0015AC  2A08               	incf	(___awmod@divisor+1)^0,f,c
  1991   0015AE                     l3163:
  1992   0015AE  5007               	movf	___awmod@divisor^0,w,c
  1993   0015B0  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  1994   0015B2  B4D8               	btfsc	status,2,c
  1995   0015B4  EFDE  F00A         	goto	u1921
  1996   0015B8  EFE0  F00A         	goto	u1920
  1997   0015BC                     u1921:
  1998   0015BC  EF04  F00B         	goto	l3179
  1999   0015C0                     u1920:
  2000   0015C0  0E01               	movlw	1
  2001   0015C2  6E09               	movwf	___awmod@counter^0,c
  2002   0015C4  EFE8  F00A         	goto	l3169
  2003   0015C8                     l3167:
  2004   0015C8  90D8               	bcf	status,0,c
  2005   0015CA  3607               	rlcf	___awmod@divisor^0,f,c
  2006   0015CC  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  2007   0015CE  2A09               	incf	___awmod@counter^0,f,c
  2008   0015D0                     l3169:
  2009   0015D0  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  2010   0015D2  EFED  F00A         	goto	u1931
  2011   0015D6  EFEF  F00A         	goto	u1930
  2012   0015DA                     u1931:
  2013   0015DA  EFE4  F00A         	goto	l3167
  2014   0015DE                     u1930:
  2015   0015DE                     l3171:
  2016   0015DE  5007               	movf	___awmod@divisor^0,w,c
  2017   0015E0  5C05               	subwf	___awmod@dividend^0,w,c
  2018   0015E2  5008               	movf	(___awmod@divisor+1)^0,w,c
  2019   0015E4  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  2020   0015E6  A0D8               	btfss	status,0,c
  2021   0015E8  EFF8  F00A         	goto	u1941
  2022   0015EC  EFFA  F00A         	goto	u1940
  2023   0015F0                     u1941:
  2024   0015F0  EFFE  F00A         	goto	l3175
  2025   0015F4                     u1940:
  2026   0015F4  5007               	movf	___awmod@divisor^0,w,c
  2027   0015F6  5E05               	subwf	___awmod@dividend^0,f,c
  2028   0015F8  5008               	movf	(___awmod@divisor+1)^0,w,c
  2029   0015FA  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  2030   0015FC                     l3175:
  2031   0015FC  90D8               	bcf	status,0,c
  2032   0015FE  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  2033   001600  3207               	rrcf	___awmod@divisor^0,f,c
  2034   001602  2E09               	decfsz	___awmod@counter^0,f,c
  2035   001604  EFEF  F00A         	goto	l3171
  2036   001608                     l3179:
  2037   001608  500A               	movf	___awmod@sign^0,w,c
  2038   00160A  B4D8               	btfsc	status,2,c
  2039   00160C  EF0A  F00B         	goto	u1951
  2040   001610  EF0C  F00B         	goto	u1950
  2041   001614                     u1951:
  2042   001614  EF10  F00B         	goto	l3183
  2043   001618                     u1950:
  2044   001618  6C05               	negf	___awmod@dividend^0,c
  2045   00161A  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2046   00161C  B0D8               	btfsc	status,0,c
  2047   00161E  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2048   001620                     l3183:
  2049   001620  C005  F005         	movff	___awmod@dividend,?___awmod
  2050   001624  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  2051   001628  0012               	return		;funcret
  2052   00162A                     __end_of___awmod:
  2053                           	callstack 0
  2054                           
  2055 ;; *************** function _sendTxBuf *****************
  2056 ;; Defined at:
  2057 ;;		line 114 in file "serial.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;		None
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;		None
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      void 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0, cstack
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2075 ;;Total ram usage:        0 bytes
  2076 ;; Hardware stack levels used: 1
  2077 ;; Hardware stack levels required when called: 3
  2078 ;; This function calls:
  2079 ;;		_isDataInTxBuf
  2080 ;; This function is called by:
  2081 ;;		_main
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           	psect	text8
  2086   001E10                     __ptext8:
  2087                           	callstack 0
  2088   001E10                     _sendTxBuf:
  2089                           	callstack 27
  2090   001E10                     
  2091                           ;serial.c: 115:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  2092   001E10  EC15  F00F         	call	_isDataInTxBuf	;wreg free
  2093   001E14  0900               	iorlw	0
  2094   001E16  B4D8               	btfsc	status,2,c
  2095   001E18  EF10  F00F         	goto	u1681
  2096   001E1C  EF12  F00F         	goto	u1680
  2097   001E20                     u1681:
  2098   001E20  EF14  F00F         	goto	l473
  2099   001E24                     u1680:
  2100   001E24  010E               	movlb	14	; () banked
  2101   001E26  852D               	bsf	45,2,b	;volatile
  2102   001E28                     l473:
  2103   001E28  0012               	return		;funcret
  2104   001E2A                     __end_of_sendTxBuf:
  2105                           	callstack 0
  2106                           
  2107 ;; *************** function _isDataInTxBuf *****************
  2108 ;; Defined at:
  2109 ;;		line 100 in file "serial.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;		None
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      unsigned char 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2, status,0
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2127 ;;Total ram usage:        0 bytes
  2128 ;; Hardware stack levels used: 1
  2129 ;; Hardware stack levels required when called: 2
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_sendTxBuf
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text9
  2138   001E2A                     __ptext9:
  2139                           	callstack 0
  2140   001E2A                     _isDataInTxBuf:
  2141                           	callstack 27
  2142   001E2A                     
  2143                           ;serial.c: 101:     return (TxBufWriteCnt!=TxBufReadCnt);
  2144   001E2A  504C               	movf	_TxBufReadCnt^0,w,c	;volatile
  2145   001E2C  184D               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  2146   001E2E  A4D8               	btfss	status,2,c
  2147   001E30  EF1C  F00F         	goto	u1521
  2148   001E34  EF1F  F00F         	goto	u1520
  2149   001E38                     u1521:
  2150   001E38  0E01               	movlw	1
  2151   001E3A  EF20  F00F         	goto	u1530
  2152   001E3E                     u1520:
  2153   001E3E  0E00               	movlw	0
  2154   001E40                     u1530:
  2155   001E40  0012               	return		;funcret
  2156   001E42                     __end_of_isDataInTxBuf:
  2157                           	callstack 0
  2158                           
  2159 ;; *************** function _initUSART4 *****************
  2160 ;; Defined at:
  2161 ;;		line 5 in file "serial.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, status,2
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used: 1
  2181 ;; Hardware stack levels required when called: 2
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_main
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text10
  2190   001DF2                     __ptext10:
  2191                           	callstack 0
  2192   001DF2                     _initUSART4:
  2193                           	callstack 28
  2194   001DF2                     
  2195                           ;serial.c: 9:     RC0PPS = 0x12;
  2196   001DF2  0E12               	movlw	18
  2197   001DF4  010E               	movlb	14	; () banked
  2198   001DF6  6F62               	movwf	98,b	;volatile
  2199                           
  2200                           ;serial.c: 10:     RX4PPS = 0x11;
  2201   001DF8  0E11               	movlw	17
  2202   001DFA  6F15               	movwf	21,b	;volatile
  2203   001DFC                     
  2204                           ; BSR set to: 14
  2205                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  2206   001DFC  97E9               	bcf	233,3,b	;volatile
  2207   001DFE                     
  2208                           ; BSR set to: 14
  2209                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  2210   001DFE  95E8               	bcf	232,2,b	;volatile
  2211                           
  2212                           ;serial.c: 14:     SP4BRGL = 51;
  2213   001E00  0E33               	movlw	51
  2214   001E02  6FE5               	movwf	229,b	;volatile
  2215                           
  2216                           ;serial.c: 15:     SP4BRGH = 0;
  2217   001E04  0E00               	movlw	0
  2218   001E06  6FE6               	movwf	230,b	;volatile
  2219   001E08                     
  2220                           ; BSR set to: 14
  2221                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  2222   001E08  89E7               	bsf	231,4,b	;volatile
  2223   001E0A                     
  2224                           ; BSR set to: 14
  2225                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  2226   001E0A  8BE8               	bsf	232,5,b	;volatile
  2227   001E0C                     
  2228                           ; BSR set to: 14
  2229                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  2230   001E0C  8FE7               	bsf	231,7,b	;volatile
  2231   001E0E                     
  2232                           ; BSR set to: 14
  2233   001E0E  0012               	return		;funcret
  2234   001E10                     __end_of_initUSART4:
  2235                           	callstack 0
  2236                           
  2237 ;; *************** function _initDCmotorsPWM *****************
  2238 ;; Defined at:
  2239 ;;		line 5 in file "dc_motor.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  PWMperiod       2    4[COMRAM] unsigned int 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, status,2
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2253 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2256 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2257 ;;Total ram usage:        2 bytes
  2258 ;; Hardware stack levels used: 1
  2259 ;; Hardware stack levels required when called: 2
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_main
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text11
  2268   0016D4                     __ptext11:
  2269                           	callstack 0
  2270   0016D4                     _initDCmotorsPWM:
  2271                           	callstack 28
  2272   0016D4                     
  2273                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  2274   0016D4  9485               	bcf	133,2,c	;volatile
  2275                           
  2276                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  2277   0016D6  9885               	bcf	133,4,c	;volatile
  2278                           
  2279                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  2280   0016D8  9E83               	bcf	131,7,c	;volatile
  2281                           
  2282                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  2283   0016DA  9C87               	bcf	135,6,c	;volatile
  2284                           
  2285                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
  2286   0016DC  947D               	bcf	125,2,c	;volatile
  2287                           
  2288                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
  2289   0016DE  987D               	bcf	125,4,c	;volatile
  2290                           
  2291                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
  2292   0016E0  9E7B               	bcf	123,7,c	;volatile
  2293                           
  2294                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
  2295   0016E2  9C7F               	bcf	127,6,c	;volatile
  2296   0016E4                     
  2297                           ;dc_motor.c: 18:     RE2PPS=0x05;
  2298   0016E4  0E05               	movlw	5
  2299   0016E6  010E               	movlb	14	; () banked
  2300   0016E8  6F74               	movwf	116,b	;volatile
  2301                           
  2302                           ;dc_motor.c: 19:     RE4PPS=0x06;
  2303   0016EA  0E06               	movlw	6
  2304   0016EC  6F76               	movwf	118,b	;volatile
  2305                           
  2306                           ;dc_motor.c: 20:     RC7PPS=0x07;
  2307   0016EE  0E07               	movlw	7
  2308   0016F0  6F69               	movwf	105,b	;volatile
  2309                           
  2310                           ;dc_motor.c: 21:     RG6PPS=0x08;
  2311   0016F2  0E08               	movlw	8
  2312   0016F4  6F88               	movwf	136,b	;volatile
  2313                           
  2314                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  2315   0016F6  50BD               	movf	189,w,c	;volatile
  2316   0016F8  0B8F               	andlw	-113
  2317   0016FA  0940               	iorlw	64
  2318   0016FC  6EBD               	movwf	189,c	;volatile
  2319                           
  2320                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  2321   0016FE  0EE0               	movlw	-32
  2322   001700  16BE               	andwf	190,f,c	;volatile
  2323                           
  2324                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  2325   001702  50BF               	movf	191,w,c	;volatile
  2326   001704  0BF0               	andlw	-16
  2327   001706  0901               	iorlw	1
  2328   001708  6EBF               	movwf	191,c	;volatile
  2329   00170A                     
  2330                           ; BSR set to: 14
  2331                           ;dc_motor.c: 30:     T2PR=(unsigned char)PWMperiod;
  2332   00170A  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2333   00170E                     
  2334                           ; BSR set to: 14
  2335                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  2336   00170E  8EBD               	bsf	189,7,c	;volatile
  2337                           
  2338                           ;dc_motor.c: 35:     CCPR1H=0;
  2339   001710  0E00               	movlw	0
  2340   001712  6EAA               	movwf	170,c	;volatile
  2341                           
  2342                           ;dc_motor.c: 36:     CCPR2H=0;
  2343   001714  0E00               	movlw	0
  2344   001716  6EA6               	movwf	166,c	;volatile
  2345                           
  2346                           ;dc_motor.c: 37:     CCPR3H=0;
  2347   001718  0E00               	movlw	0
  2348   00171A  010F               	movlb	15	; () banked
  2349   00171C  6F25               	movwf	37,b	;volatile
  2350                           
  2351                           ;dc_motor.c: 38:     CCPR4H=0;
  2352   00171E  0E00               	movlw	0
  2353   001720  6F21               	movwf	33,b	;volatile
  2354                           
  2355                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  2356   001722  0EFC               	movlw	-4
  2357   001724  16AD               	andwf	173,f,c	;volatile
  2358                           
  2359                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  2360   001726  0EF3               	movlw	-13
  2361   001728  16AD               	andwf	173,f,c	;volatile
  2362                           
  2363                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  2364   00172A  0ECF               	movlw	-49
  2365   00172C  16AD               	andwf	173,f,c	;volatile
  2366                           
  2367                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  2368   00172E  0E3F               	movlw	-193
  2369   001730  16AD               	andwf	173,f,c	;volatile
  2370   001732                     
  2371                           ; BSR set to: 15
  2372                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  2373   001732  88AB               	bsf	171,4,c	;volatile
  2374                           
  2375                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  2376   001734  50AB               	movf	171,w,c	;volatile
  2377   001736  0BF0               	andlw	-16
  2378   001738  090C               	iorlw	12
  2379   00173A  6EAB               	movwf	171,c	;volatile
  2380   00173C                     
  2381                           ; BSR set to: 15
  2382                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  2383   00173C  8EAB               	bsf	171,7,c	;volatile
  2384   00173E                     
  2385                           ; BSR set to: 15
  2386                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  2387   00173E  88A7               	bsf	167,4,c	;volatile
  2388                           
  2389                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  2390   001740  50A7               	movf	167,w,c	;volatile
  2391   001742  0BF0               	andlw	-16
  2392   001744  090C               	iorlw	12
  2393   001746  6EA7               	movwf	167,c	;volatile
  2394   001748                     
  2395                           ; BSR set to: 15
  2396                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  2397   001748  8EA7               	bsf	167,7,c	;volatile
  2398   00174A                     
  2399                           ; BSR set to: 15
  2400                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  2401   00174A  8926               	bsf	38,4,b	;volatile
  2402                           
  2403                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  2404   00174C  5126               	movf	38,w,b	;volatile
  2405   00174E  0BF0               	andlw	-16
  2406   001750  090C               	iorlw	12
  2407   001752  6F26               	movwf	38,b	;volatile
  2408   001754                     
  2409                           ; BSR set to: 15
  2410                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  2411   001754  8F26               	bsf	38,7,b	;volatile
  2412   001756                     
  2413                           ; BSR set to: 15
  2414                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  2415   001756  8922               	bsf	34,4,b	;volatile
  2416                           
  2417                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  2418   001758  5122               	movf	34,w,b	;volatile
  2419   00175A  0BF0               	andlw	-16
  2420   00175C  090C               	iorlw	12
  2421   00175E  6F22               	movwf	34,b	;volatile
  2422   001760                     
  2423                           ; BSR set to: 15
  2424                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  2425   001760  8F22               	bsf	34,7,b	;volatile
  2426   001762                     
  2427                           ; BSR set to: 15
  2428   001762  0012               	return		;funcret
  2429   001764                     __end_of_initDCmotorsPWM:
  2430                           	callstack 0
  2431                           
  2432 ;; *************** function _getRGBCval *****************
  2433 ;; Defined at:
  2434 ;;		line 85 in file "color.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;  p               1   15[COMRAM] PTR struct RGBC_val
  2437 ;;		 -> main@readRGBC(8), 
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;		None
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  1    wreg      void 
  2442 ;; Registers used:
  2443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2449 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2452 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;Total ram usage:        1 bytes
  2454 ;; Hardware stack levels used: 1
  2455 ;; Hardware stack levels required when called: 5
  2456 ;; This function calls:
  2457 ;;		_color_read_Blue
  2458 ;;		_color_read_Clear
  2459 ;;		_color_read_Green
  2460 ;;		_color_read_Red
  2461 ;; This function is called by:
  2462 ;;		_main
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text12
  2467   0018CA                     __ptext12:
  2468                           	callstack 0
  2469   0018CA                     _getRGBCval:
  2470                           	callstack 25
  2471   0018CA                     
  2472                           ;color.c: 85: void getRGBCval(struct RGBC_val *p);color.c: 86: {;color.c: 87:     p->R =
      +                           color_read_Red();
  2473   0018CA  ECB9  F00C         	call	_color_read_Red	;wreg free
  2474   0018CE  5010               	movf	getRGBCval@p^0,w,c
  2475   0018D0  6ED9               	movwf	fsr2l,c
  2476   0018D2  6ADA               	clrf	fsr2h,c
  2477   0018D4  C009  FFDE         	movff	?_color_read_Red,postinc2
  2478   0018D8  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  2479                           
  2480                           ;color.c: 88:     p->B = color_read_Blue();
  2481   0018DC  EC31  F00D         	call	_color_read_Blue	;wreg free
  2482   0018E0  5010               	movf	getRGBCval@p^0,w,c
  2483   0018E2  6ED9               	movwf	fsr2l,c
  2484   0018E4  6ADA               	clrf	fsr2h,c
  2485   0018E6  0E04               	movlw	4
  2486   0018E8  26D9               	addwf	fsr2l,f,c
  2487   0018EA  C009  FFDE         	movff	?_color_read_Blue,postinc2
  2488   0018EE  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  2489                           
  2490                           ;color.c: 89:     p->G = color_read_Green();
  2491   0018F2  ECE1  F00C         	call	_color_read_Green	;wreg free
  2492   0018F6  5010               	movf	getRGBCval@p^0,w,c
  2493   0018F8  6ED9               	movwf	fsr2l,c
  2494   0018FA  6ADA               	clrf	fsr2h,c
  2495   0018FC  0E02               	movlw	2
  2496   0018FE  26D9               	addwf	fsr2l,f,c
  2497   001900  C009  FFDE         	movff	?_color_read_Green,postinc2
  2498   001904  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  2499                           
  2500                           ;color.c: 90:     p->C = color_read_Clear();
  2501   001908  EC09  F00D         	call	_color_read_Clear	;wreg free
  2502   00190C  5010               	movf	getRGBCval@p^0,w,c
  2503   00190E  6ED9               	movwf	fsr2l,c
  2504   001910  6ADA               	clrf	fsr2h,c
  2505   001912  0E06               	movlw	6
  2506   001914  26D9               	addwf	fsr2l,f,c
  2507   001916  C009  FFDE         	movff	?_color_read_Clear,postinc2
  2508   00191A  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  2509   00191E  0012               	return		;funcret
  2510   001920                     __end_of_getRGBCval:
  2511                           	callstack 0
  2512                           
  2513 ;; *************** function _color_read_Red *****************
  2514 ;; Defined at:
  2515 ;;		line 29 in file "color.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  tmp             2   13[COMRAM] unsigned int 
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  2    8[COMRAM] unsigned int 
  2522 ;; Registers used:
  2523 ;;		wreg, status,2, status,0, cstack
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2529 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2531 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2532 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2533 ;;Total ram usage:        7 bytes
  2534 ;; Hardware stack levels used: 1
  2535 ;; Hardware stack levels required when called: 4
  2536 ;; This function calls:
  2537 ;;		_I2C_2_Master_Read
  2538 ;;		_I2C_2_Master_RepStart
  2539 ;;		_I2C_2_Master_Start
  2540 ;;		_I2C_2_Master_Stop
  2541 ;;		_I2C_2_Master_Write
  2542 ;; This function is called by:
  2543 ;;		_getRGBCval
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text13
  2548   001972                     __ptext13:
  2549                           	callstack 0
  2550   001972                     _color_read_Red:
  2551                           	callstack 25
  2552   001972                     
  2553                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  2554   001972  EC58  F00F         	call	_I2C_2_Master_Start	;wreg free
  2555                           
  2556                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  2557   001976  0E52               	movlw	82
  2558   001978  EC48  F00F         	call	_I2C_2_Master_Write
  2559                           
  2560                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  2561   00197C  0EB6               	movlw	182
  2562   00197E  EC48  F00F         	call	_I2C_2_Master_Write
  2563                           
  2564                           ;color.c: 35:  I2C_2_Master_RepStart();
  2565   001982  EC4E  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  2566                           
  2567                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  2568   001986  0E53               	movlw	83
  2569   001988  EC48  F00F         	call	_I2C_2_Master_Write
  2570                           
  2571                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  2572   00198C  0E01               	movlw	1
  2573   00198E  ECA4  F00D         	call	_I2C_2_Master_Read
  2574   001992  6E0B               	movwf	??_color_read_Red^0,c
  2575   001994  500B               	movf	??_color_read_Red^0,w,c
  2576   001996  6E0E               	movwf	color_read_Red@tmp^0,c
  2577   001998  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  2578                           
  2579                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2580   00199A  0E00               	movlw	0
  2581   00199C  ECA4  F00D         	call	_I2C_2_Master_Read
  2582   0019A0  6E0B               	movwf	??_color_read_Red^0,c
  2583   0019A2  500B               	movf	??_color_read_Red^0,w,c
  2584   0019A4  6E0D               	movwf	(??_color_read_Red+2)^0,c
  2585   0019A6  6A0C               	clrf	(??_color_read_Red+1)^0,c
  2586   0019A8  500E               	movf	color_read_Red@tmp^0,w,c
  2587   0019AA  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  2588   0019AC  6E0E               	movwf	color_read_Red@tmp^0,c
  2589   0019AE  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  2590   0019B0  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  2591   0019B2  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  2592                           
  2593                           ;color.c: 39:  I2C_2_Master_Stop();
  2594   0019B4  EC53  F00F         	call	_I2C_2_Master_Stop	;wreg free
  2595   0019B8                     
  2596                           ;color.c: 40:  return tmp;
  2597   0019B8  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  2598   0019BC  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  2599   0019C0  0012               	return		;funcret
  2600   0019C2                     __end_of_color_read_Red:
  2601                           	callstack 0
  2602                           
  2603 ;; *************** function _color_read_Green *****************
  2604 ;; Defined at:
  2605 ;;		line 57 in file "color.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  tmp             2   13[COMRAM] unsigned int 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  2    8[COMRAM] unsigned int 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2, status,0, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;Total ram usage:        7 bytes
  2624 ;; Hardware stack levels used: 1
  2625 ;; Hardware stack levels required when called: 4
  2626 ;; This function calls:
  2627 ;;		_I2C_2_Master_Read
  2628 ;;		_I2C_2_Master_RepStart
  2629 ;;		_I2C_2_Master_Start
  2630 ;;		_I2C_2_Master_Stop
  2631 ;;		_I2C_2_Master_Write
  2632 ;; This function is called by:
  2633 ;;		_getRGBCval
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text14
  2638   0019C2                     __ptext14:
  2639                           	callstack 0
  2640   0019C2                     _color_read_Green:
  2641                           	callstack 25
  2642   0019C2                     
  2643                           ;color.c: 59:     unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  2644   0019C2  EC58  F00F         	call	_I2C_2_Master_Start	;wreg free
  2645                           
  2646                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  2647   0019C6  0E52               	movlw	82
  2648   0019C8  EC48  F00F         	call	_I2C_2_Master_Write
  2649                           
  2650                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x18);
  2651   0019CC  0EB8               	movlw	184
  2652   0019CE  EC48  F00F         	call	_I2C_2_Master_Write
  2653                           
  2654                           ;color.c: 63:  I2C_2_Master_RepStart();
  2655   0019D2  EC4E  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  2656                           
  2657                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  2658   0019D6  0E53               	movlw	83
  2659   0019D8  EC48  F00F         	call	_I2C_2_Master_Write
  2660                           
  2661                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  2662   0019DC  0E01               	movlw	1
  2663   0019DE  ECA4  F00D         	call	_I2C_2_Master_Read
  2664   0019E2  6E0B               	movwf	??_color_read_Green^0,c
  2665   0019E4  500B               	movf	??_color_read_Green^0,w,c
  2666   0019E6  6E0E               	movwf	color_read_Green@tmp^0,c
  2667   0019E8  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  2668                           
  2669                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2670   0019EA  0E00               	movlw	0
  2671   0019EC  ECA4  F00D         	call	_I2C_2_Master_Read
  2672   0019F0  6E0B               	movwf	??_color_read_Green^0,c
  2673   0019F2  500B               	movf	??_color_read_Green^0,w,c
  2674   0019F4  6E0D               	movwf	(??_color_read_Green+2)^0,c
  2675   0019F6  6A0C               	clrf	(??_color_read_Green+1)^0,c
  2676   0019F8  500E               	movf	color_read_Green@tmp^0,w,c
  2677   0019FA  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  2678   0019FC  6E0E               	movwf	color_read_Green@tmp^0,c
  2679   0019FE  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  2680   001A00  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  2681   001A02  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  2682                           
  2683                           ;color.c: 67:  I2C_2_Master_Stop();
  2684   001A04  EC53  F00F         	call	_I2C_2_Master_Stop	;wreg free
  2685   001A08                     
  2686                           ;color.c: 68:  return tmp;
  2687   001A08  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  2688   001A0C  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  2689   001A10  0012               	return		;funcret
  2690   001A12                     __end_of_color_read_Green:
  2691                           	callstack 0
  2692                           
  2693 ;; *************** function _color_read_Clear *****************
  2694 ;; Defined at:
  2695 ;;		line 71 in file "color.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;		None
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;  tmp             2   13[COMRAM] unsigned int 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  2    8[COMRAM] unsigned int 
  2702 ;; Registers used:
  2703 ;;		wreg, status,2, status,0, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2709 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2711 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2712 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2713 ;;Total ram usage:        7 bytes
  2714 ;; Hardware stack levels used: 1
  2715 ;; Hardware stack levels required when called: 4
  2716 ;; This function calls:
  2717 ;;		_I2C_2_Master_Read
  2718 ;;		_I2C_2_Master_RepStart
  2719 ;;		_I2C_2_Master_Start
  2720 ;;		_I2C_2_Master_Stop
  2721 ;;		_I2C_2_Master_Write
  2722 ;; This function is called by:
  2723 ;;		_getRGBCval
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text15
  2728   001A12                     __ptext15:
  2729                           	callstack 0
  2730   001A12                     _color_read_Clear:
  2731                           	callstack 25
  2732   001A12                     
  2733                           ;color.c: 73:     unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  2734   001A12  EC58  F00F         	call	_I2C_2_Master_Start	;wreg free
  2735                           
  2736                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  2737   001A16  0E52               	movlw	82
  2738   001A18  EC48  F00F         	call	_I2C_2_Master_Write
  2739                           
  2740                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  2741   001A1C  0EB4               	movlw	180
  2742   001A1E  EC48  F00F         	call	_I2C_2_Master_Write
  2743                           
  2744                           ;color.c: 77:  I2C_2_Master_RepStart();
  2745   001A22  EC4E  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  2746                           
  2747                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  2748   001A26  0E53               	movlw	83
  2749   001A28  EC48  F00F         	call	_I2C_2_Master_Write
  2750                           
  2751                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  2752   001A2C  0E01               	movlw	1
  2753   001A2E  ECA4  F00D         	call	_I2C_2_Master_Read
  2754   001A32  6E0B               	movwf	??_color_read_Clear^0,c
  2755   001A34  500B               	movf	??_color_read_Clear^0,w,c
  2756   001A36  6E0E               	movwf	color_read_Clear@tmp^0,c
  2757   001A38  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  2758                           
  2759                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2760   001A3A  0E00               	movlw	0
  2761   001A3C  ECA4  F00D         	call	_I2C_2_Master_Read
  2762   001A40  6E0B               	movwf	??_color_read_Clear^0,c
  2763   001A42  500B               	movf	??_color_read_Clear^0,w,c
  2764   001A44  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  2765   001A46  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  2766   001A48  500E               	movf	color_read_Clear@tmp^0,w,c
  2767   001A4A  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  2768   001A4C  6E0E               	movwf	color_read_Clear@tmp^0,c
  2769   001A4E  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  2770   001A50  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  2771   001A52  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  2772                           
  2773                           ;color.c: 81:  I2C_2_Master_Stop();
  2774   001A54  EC53  F00F         	call	_I2C_2_Master_Stop	;wreg free
  2775   001A58                     
  2776                           ;color.c: 82:  return tmp;
  2777   001A58  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  2778   001A5C  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  2779   001A60  0012               	return		;funcret
  2780   001A62                     __end_of_color_read_Clear:
  2781                           	callstack 0
  2782                           
  2783 ;; *************** function _color_read_Blue *****************
  2784 ;; Defined at:
  2785 ;;		line 43 in file "color.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  tmp             2   13[COMRAM] unsigned int 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  2    8[COMRAM] unsigned int 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, status,0, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2801 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2802 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2803 ;;Total ram usage:        7 bytes
  2804 ;; Hardware stack levels used: 1
  2805 ;; Hardware stack levels required when called: 4
  2806 ;; This function calls:
  2807 ;;		_I2C_2_Master_Read
  2808 ;;		_I2C_2_Master_RepStart
  2809 ;;		_I2C_2_Master_Start
  2810 ;;		_I2C_2_Master_Stop
  2811 ;;		_I2C_2_Master_Write
  2812 ;; This function is called by:
  2813 ;;		_getRGBCval
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text16
  2818   001A62                     __ptext16:
  2819                           	callstack 0
  2820   001A62                     _color_read_Blue:
  2821                           	callstack 25
  2822   001A62                     
  2823                           ;color.c: 45:     unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  2824   001A62  EC58  F00F         	call	_I2C_2_Master_Start	;wreg free
  2825                           
  2826                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  2827   001A66  0E52               	movlw	82
  2828   001A68  EC48  F00F         	call	_I2C_2_Master_Write
  2829                           
  2830                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x1A);
  2831   001A6C  0EBA               	movlw	186
  2832   001A6E  EC48  F00F         	call	_I2C_2_Master_Write
  2833                           
  2834                           ;color.c: 49:  I2C_2_Master_RepStart();
  2835   001A72  EC4E  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  2836                           
  2837                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  2838   001A76  0E53               	movlw	83
  2839   001A78  EC48  F00F         	call	_I2C_2_Master_Write
  2840                           
  2841                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  2842   001A7C  0E01               	movlw	1
  2843   001A7E  ECA4  F00D         	call	_I2C_2_Master_Read
  2844   001A82  6E0B               	movwf	??_color_read_Blue^0,c
  2845   001A84  500B               	movf	??_color_read_Blue^0,w,c
  2846   001A86  6E0E               	movwf	color_read_Blue@tmp^0,c
  2847   001A88  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  2848                           
  2849                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2850   001A8A  0E00               	movlw	0
  2851   001A8C  ECA4  F00D         	call	_I2C_2_Master_Read
  2852   001A90  6E0B               	movwf	??_color_read_Blue^0,c
  2853   001A92  500B               	movf	??_color_read_Blue^0,w,c
  2854   001A94  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  2855   001A96  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  2856   001A98  500E               	movf	color_read_Blue@tmp^0,w,c
  2857   001A9A  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  2858   001A9C  6E0E               	movwf	color_read_Blue@tmp^0,c
  2859   001A9E  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  2860   001AA0  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  2861   001AA2  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  2862                           
  2863                           ;color.c: 53:  I2C_2_Master_Stop();
  2864   001AA4  EC53  F00F         	call	_I2C_2_Master_Stop	;wreg free
  2865   001AA8                     
  2866                           ;color.c: 54:  return tmp;
  2867   001AA8  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  2868   001AAC  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  2869   001AB0  0012               	return		;funcret
  2870   001AB2                     __end_of_color_read_Blue:
  2871                           	callstack 0
  2872                           
  2873 ;; *************** function _I2C_2_Master_RepStart *****************
  2874 ;; Defined at:
  2875 ;;		line 33 in file "i2c.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;		None
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;		None
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, status,2, status,0, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2893 ;;Total ram usage:        0 bytes
  2894 ;; Hardware stack levels used: 1
  2895 ;; Hardware stack levels required when called: 3
  2896 ;; This function calls:
  2897 ;;		_I2C_2_Master_Idle
  2898 ;; This function is called by:
  2899 ;;		_color_read_Red
  2900 ;;		_color_read_Blue
  2901 ;;		_color_read_Green
  2902 ;;		_color_read_Clear
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text17
  2907   001E9C                     __ptext17:
  2908                           	callstack 0
  2909   001E9C                     _I2C_2_Master_RepStart:
  2910                           	callstack 25
  2911   001E9C                     
  2912                           ;i2c.c: 35:   I2C_2_Master_Idle();
  2913   001E9C  EC9F  F00E         	call	_I2C_2_Master_Idle	;wreg free
  2914   001EA0                     
  2915                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  2916   001EA0  010E               	movlb	14	; () banked
  2917   001EA2  83DA               	bsf	218,1,b	;volatile
  2918   001EA4                     
  2919                           ; BSR set to: 14
  2920   001EA4  0012               	return		;funcret
  2921   001EA6                     __end_of_I2C_2_Master_RepStart:
  2922                           	callstack 0
  2923                           
  2924 ;; *************** function _I2C_2_Master_Read *****************
  2925 ;; Defined at:
  2926 ;;		line 51 in file "i2c.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  ack             1    wreg     unsigned char 
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;  ack             1    6[COMRAM] unsigned char 
  2931 ;;  tmp             1    7[COMRAM] unsigned char 
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      unsigned char 
  2934 ;; Registers used:
  2935 ;;		wreg, status,2, status,0, cstack
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2942 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2944 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2945 ;;Total ram usage:        3 bytes
  2946 ;; Hardware stack levels used: 1
  2947 ;; Hardware stack levels required when called: 3
  2948 ;; This function calls:
  2949 ;;		_I2C_2_Master_Idle
  2950 ;; This function is called by:
  2951 ;;		_color_read_Red
  2952 ;;		_color_read_Blue
  2953 ;;		_color_read_Green
  2954 ;;		_color_read_Clear
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text18
  2959   001B48                     __ptext18:
  2960                           	callstack 0
  2961   001B48                     _I2C_2_Master_Read:
  2962                           	callstack 25
  2963                           
  2964                           ; BSR set to: 14
  2965                           ;incstack = 0
  2966                           ;I2C_2_Master_Read@ack stored from wreg
  2967   001B48  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  2968   001B4A                     
  2969                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  2970   001B4A  EC9F  F00E         	call	_I2C_2_Master_Idle	;wreg free
  2971   001B4E                     
  2972                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  2973   001B4E  010E               	movlb	14	; () banked
  2974   001B50  87DA               	bsf	218,3,b	;volatile
  2975                           
  2976                           ;i2c.c: 56:   I2C_2_Master_Idle();
  2977   001B52  EC9F  F00E         	call	_I2C_2_Master_Idle	;wreg free
  2978   001B56                     
  2979                           ;i2c.c: 57:   tmp = SSP2BUF;
  2980   001B56  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  2981                           
  2982                           ;i2c.c: 58:   I2C_2_Master_Idle();
  2983   001B5A  EC9F  F00E         	call	_I2C_2_Master_Idle	;wreg free
  2984   001B5E                     
  2985                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  2986   001B5E  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  2987   001B60  B4D8               	btfsc	status,2,c
  2988   001B62  EFB5  F00D         	goto	u1191
  2989   001B66  EFB9  F00D         	goto	u1190
  2990   001B6A                     u1191:
  2991   001B6A  6A06               	clrf	??_I2C_2_Master_Read^0,c
  2992   001B6C  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  2993   001B6E  EFBA  F00D         	goto	u1208
  2994   001B72                     u1190:
  2995   001B72  6A06               	clrf	??_I2C_2_Master_Read^0,c
  2996   001B74                     u1208:
  2997   001B74  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  2998   001B76  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  2999   001B78  010E               	movlb	14	; () banked
  3000   001B7A  51DA               	movf	218,w,b	;volatile
  3001   001B7C  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  3002   001B7E  0BDF               	andlw	-33
  3003   001B80  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  3004   001B82  6FDA               	movwf	218,b	;volatile
  3005   001B84                     
  3006                           ; BSR set to: 14
  3007                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3008   001B84  89DA               	bsf	218,4,b	;volatile
  3009   001B86                     
  3010                           ; BSR set to: 14
  3011                           ;i2c.c: 61:   return tmp;
  3012   001B86  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  3013   001B88                     
  3014                           ; BSR set to: 14
  3015   001B88  0012               	return		;funcret
  3016   001B8A                     __end_of_I2C_2_Master_Read:
  3017                           	callstack 0
  3018                           
  3019 ;; *************** function _getHSVval *****************
  3020 ;; Defined at:
  3021 ;;		line 143 in file "color.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;  p1              1   22[COMRAM] PTR struct HSV_val
  3024 ;;		 -> main@readHSV(6), 
  3025 ;;  p2              1   23[COMRAM] PTR struct RGBC_val
  3026 ;;		 -> main@readRGBC(8), 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  maxRGB          2   42[COMRAM] int 
  3029 ;;  range           2   40[COMRAM] int 
  3030 ;;  hue             2   36[COMRAM] int 
  3031 ;;  saturation      2   34[COMRAM] int 
  3032 ;;  minRGB          2   28[COMRAM] int 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3043 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3044 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3045 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3046 ;;Total ram usage:       22 bytes
  3047 ;; Hardware stack levels used: 1
  3048 ;; Hardware stack levels required when called: 3
  3049 ;; This function calls:
  3050 ;;		___awdiv
  3051 ;;		___lwdiv
  3052 ;;		___lwmod
  3053 ;;		___wmul
  3054 ;;		_max
  3055 ;;		_min
  3056 ;; This function is called by:
  3057 ;;		_main
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text19
  3062   000E1A                     __ptext19:
  3063                           	callstack 0
  3064   000E1A                     _getHSVval:
  3065                           	callstack 27
  3066   000E1A                     
  3067                           ;color.c: 143: void getHSVval(struct HSV_val *p1,struct RGBC_val *p2);color.c: 144: {;co
      +                          lor.c: 145:     int maxRGB;;color.c: 146:     int minRGB;;color.c: 147:     int range;;c
      +                          olor.c: 148:     int hue;;color.c: 149:     int saturation;;color.c: 153:     maxRGB = m
      +                          ax(max(p2->R,p2->G),p2->B);
  3068   000E1A  5018               	movf	getHSVval@p2^0,w,c
  3069   000E1C  6ED9               	movwf	fsr2l,c
  3070   000E1E  6ADA               	clrf	fsr2h,c
  3071   000E20  CFDE F005          	movff	postinc2,max@a
  3072   000E24  CFDD F006          	movff	postdec2,max@a+1
  3073   000E28  5018               	movf	getHSVval@p2^0,w,c
  3074   000E2A  6ED9               	movwf	fsr2l,c
  3075   000E2C  6ADA               	clrf	fsr2h,c
  3076   000E2E  0E02               	movlw	2
  3077   000E30  26D9               	addwf	fsr2l,f,c
  3078   000E32  CFDE F007          	movff	postinc2,max@b
  3079   000E36  CFDD F008          	movff	postdec2,max@b+1
  3080   000E3A  ECE3  F00D         	call	_max	;wreg free
  3081   000E3E  C005  F01F         	movff	?_max,_getHSVval$3064
  3082   000E42  C006  F020         	movff	?_max+1,_getHSVval$3064+1
  3083                           
  3084                           ;color.c: 143: void getHSVval(struct HSV_val *p1,struct RGBC_val *p2);color.c: 144: {;co
      +                          lor.c: 145:     int maxRGB;;color.c: 146:     int minRGB;;color.c: 147:     int range;;c
      +                          olor.c: 148:     int hue;;color.c: 149:     int saturation;;color.c: 153:     maxRGB = m
      +                          ax(max(p2->R,p2->G),p2->B);
  3085   000E46  C01F  F005         	movff	_getHSVval$3064,max@a
  3086   000E4A  C020  F006         	movff	_getHSVval$3064+1,max@a+1
  3087   000E4E  5018               	movf	getHSVval@p2^0,w,c
  3088   000E50  6ED9               	movwf	fsr2l,c
  3089   000E52  6ADA               	clrf	fsr2h,c
  3090   000E54  0E04               	movlw	4
  3091   000E56  26D9               	addwf	fsr2l,f,c
  3092   000E58  CFDE F007          	movff	postinc2,max@b
  3093   000E5C  CFDD F008          	movff	postdec2,max@b+1
  3094   000E60  ECE3  F00D         	call	_max	;wreg free
  3095   000E64  C005  F02B         	movff	?_max,getHSVval@maxRGB
  3096   000E68  C006  F02C         	movff	?_max+1,getHSVval@maxRGB+1
  3097                           
  3098                           ;color.c: 154:     minRGB = min(min(p2->R,p2->G),p2->B);
  3099   000E6C  5018               	movf	getHSVval@p2^0,w,c
  3100   000E6E  6ED9               	movwf	fsr2l,c
  3101   000E70  6ADA               	clrf	fsr2h,c
  3102   000E72  CFDE F005          	movff	postinc2,min@a
  3103   000E76  CFDD F006          	movff	postdec2,min@a+1
  3104   000E7A  5018               	movf	getHSVval@p2^0,w,c
  3105   000E7C  6ED9               	movwf	fsr2l,c
  3106   000E7E  6ADA               	clrf	fsr2h,c
  3107   000E80  0E02               	movlw	2
  3108   000E82  26D9               	addwf	fsr2l,f,c
  3109   000E84  CFDE F007          	movff	postinc2,min@b
  3110   000E88  CFDD F008          	movff	postdec2,min@b+1
  3111   000E8C  ECC5  F00D         	call	_min	;wreg free
  3112   000E90  C005  F021         	movff	?_min,_getHSVval$3065
  3113   000E94  C006  F022         	movff	?_min+1,_getHSVval$3065+1
  3114                           
  3115                           ;color.c: 154:     minRGB = min(min(p2->R,p2->G),p2->B);
  3116   000E98  C021  F005         	movff	_getHSVval$3065,min@a
  3117   000E9C  C022  F006         	movff	_getHSVval$3065+1,min@a+1
  3118   000EA0  5018               	movf	getHSVval@p2^0,w,c
  3119   000EA2  6ED9               	movwf	fsr2l,c
  3120   000EA4  6ADA               	clrf	fsr2h,c
  3121   000EA6  0E04               	movlw	4
  3122   000EA8  26D9               	addwf	fsr2l,f,c
  3123   000EAA  CFDE F007          	movff	postinc2,min@b
  3124   000EAE  CFDD F008          	movff	postdec2,min@b+1
  3125   000EB2  ECC5  F00D         	call	_min	;wreg free
  3126   000EB6  C005  F01D         	movff	?_min,getHSVval@minRGB
  3127   000EBA  C006  F01E         	movff	?_min+1,getHSVval@minRGB+1
  3128   000EBE                     
  3129                           ;color.c: 155:     range = maxRGB - minRGB;
  3130   000EBE  501D               	movf	getHSVval@minRGB^0,w,c
  3131   000EC0  5C2B               	subwf	getHSVval@maxRGB^0,w,c
  3132   000EC2  6E29               	movwf	getHSVval@range^0,c
  3133   000EC4  501E               	movf	(getHSVval@minRGB+1)^0,w,c
  3134   000EC6  582C               	subwfb	(getHSVval@maxRGB+1)^0,w,c
  3135   000EC8  6E2A               	movwf	(getHSVval@range+1)^0,c
  3136   000ECA                     
  3137                           ;color.c: 157:     if (range == 0) {
  3138   000ECA  5029               	movf	getHSVval@range^0,w,c
  3139   000ECC  102A               	iorwf	(getHSVval@range+1)^0,w,c
  3140   000ECE  A4D8               	btfss	status,2,c
  3141   000ED0  EF6C  F007         	goto	u2121
  3142   000ED4  EF6E  F007         	goto	u2120
  3143   000ED8                     u2121:
  3144   000ED8  EF72  F007         	goto	l3281
  3145   000EDC                     u2120:
  3146   000EDC                     
  3147                           ;color.c: 158:         hue = 0;
  3148   000EDC  0E00               	movlw	0
  3149   000EDE  6E26               	movwf	(getHSVval@hue+1)^0,c
  3150   000EE0  0E00               	movlw	0
  3151   000EE2  6E25               	movwf	getHSVval@hue^0,c
  3152   000EE4                     l3281:
  3153                           
  3154                           ;color.c: 161:     if (maxRGB == (p2->R)) {
  3155   000EE4  5018               	movf	getHSVval@p2^0,w,c
  3156   000EE6  6ED9               	movwf	fsr2l,c
  3157   000EE8  6ADA               	clrf	fsr2h,c
  3158   000EEA  502B               	movf	getHSVval@maxRGB^0,w,c
  3159   000EEC  18DE               	xorwf	postinc2,w,c
  3160   000EEE  E107               	bnz	u2131
  3161   000EF0  502C               	movf	(getHSVval@maxRGB+1)^0,w,c
  3162   000EF2  18DE               	xorwf	postinc2,w,c
  3163   000EF4  A4D8               	btfss	status,2,c
  3164   000EF6  EF7F  F007         	goto	u2131
  3165   000EFA  EF81  F007         	goto	u2130
  3166   000EFE                     u2131:
  3167   000EFE  EFC5  F007         	goto	l3287
  3168   000F02                     u2130:
  3169   000F02                     
  3170                           ;color.c: 162:         hue = 60*(((((p2->G)-(p2->B))*10)/range)%600);
  3171   000F02  0E02               	movlw	2
  3172   000F04  6E15               	movwf	(___lwmod@divisor+1)^0,c
  3173   000F06  0E58               	movlw	88
  3174   000F08  6E14               	movwf	___lwmod@divisor^0,c
  3175   000F0A  C029  F00D         	movff	getHSVval@range,___lwdiv@divisor
  3176   000F0E  C02A  F00E         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3177   000F12  5018               	movf	getHSVval@p2^0,w,c
  3178   000F14  6ED9               	movwf	fsr2l,c
  3179   000F16  6ADA               	clrf	fsr2h,c
  3180   000F18  0E04               	movlw	4
  3181   000F1A  26D9               	addwf	fsr2l,f,c
  3182   000F1C  CFDE F019          	movff	postinc2,??_getHSVval
  3183   000F20  CFDD F01A          	movff	postdec2,??_getHSVval+1
  3184   000F24  5018               	movf	getHSVval@p2^0,w,c
  3185   000F26  6ED9               	movwf	fsr2l,c
  3186   000F28  6ADA               	clrf	fsr2h,c
  3187   000F2A  0E02               	movlw	2
  3188   000F2C  26D9               	addwf	fsr2l,f,c
  3189   000F2E  CFDE F01B          	movff	postinc2,??_getHSVval+2
  3190   000F32  CFDD F01C          	movff	postdec2,??_getHSVval+3
  3191   000F36  5019               	movf	??_getHSVval^0,w,c
  3192   000F38  5C1B               	subwf	(??_getHSVval+2)^0,w,c
  3193   000F3A  6E05               	movwf	___wmul@multiplier^0,c
  3194   000F3C  501A               	movf	(??_getHSVval+1)^0,w,c
  3195   000F3E  581C               	subwfb	(??_getHSVval+3)^0,w,c
  3196   000F40  6E06               	movwf	(___wmul@multiplier+1)^0,c
  3197   000F42  0E00               	movlw	0
  3198   000F44  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3199   000F46  0E0A               	movlw	10
  3200   000F48  6E07               	movwf	___wmul@multiplicand^0,c
  3201   000F4A  ECB3  F00E         	call	___wmul	;wreg free
  3202   000F4E  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3203   000F52  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3204   000F56  ECF9  F00B         	call	___lwdiv	;wreg free
  3205   000F5A  C00B  F012         	movff	?___lwdiv,___lwmod@dividend
  3206   000F5E  C00C  F013         	movff	?___lwdiv+1,___lwmod@dividend+1
  3207   000F62  EC33  F00C         	call	___lwmod	;wreg free
  3208   000F66  C012  F027         	movff	?___lwmod,_getHSVval$3066
  3209   000F6A  C013  F028         	movff	?___lwmod+1,_getHSVval$3066+1
  3210   000F6E                     
  3211                           ;color.c: 162:         hue = 60*(((((p2->G)-(p2->B))*10)/range)%600);
  3212   000F6E  C027  F005         	movff	_getHSVval$3066,___wmul@multiplier
  3213   000F72  C028  F006         	movff	_getHSVval$3066+1,___wmul@multiplier+1
  3214   000F76  0E00               	movlw	0
  3215   000F78  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3216   000F7A  0E3C               	movlw	60
  3217   000F7C  6E07               	movwf	___wmul@multiplicand^0,c
  3218   000F7E  ECB3  F00E         	call	___wmul	;wreg free
  3219   000F82  C005  F025         	movff	?___wmul,getHSVval@hue
  3220   000F86  C006  F026         	movff	?___wmul+1,getHSVval@hue+1
  3221   000F8A                     l3287:
  3222                           
  3223                           ;color.c: 165:     if (maxRGB == (p2->G)){
  3224   000F8A  5018               	movf	getHSVval@p2^0,w,c
  3225   000F8C  6ED9               	movwf	fsr2l,c
  3226   000F8E  6ADA               	clrf	fsr2h,c
  3227   000F90  0E02               	movlw	2
  3228   000F92  26D9               	addwf	fsr2l,f,c
  3229   000F94  502B               	movf	getHSVval@maxRGB^0,w,c
  3230   000F96  18DE               	xorwf	postinc2,w,c
  3231   000F98  E107               	bnz	u2141
  3232   000F9A  502C               	movf	(getHSVval@maxRGB+1)^0,w,c
  3233   000F9C  18DE               	xorwf	postinc2,w,c
  3234   000F9E  A4D8               	btfss	status,2,c
  3235   000FA0  EFD4  F007         	goto	u2141
  3236   000FA4  EFD6  F007         	goto	u2140
  3237   000FA8                     u2141:
  3238   000FA8  EF10  F008         	goto	l3293
  3239   000FAC                     u2140:
  3240   000FAC                     
  3241                           ;color.c: 166:         hue = 60*(((((p2->B)-(p2->R))*10)/range)+200);
  3242   000FAC  C029  F00D         	movff	getHSVval@range,___lwdiv@divisor
  3243   000FB0  C02A  F00E         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3244   000FB4  5018               	movf	getHSVval@p2^0,w,c
  3245   000FB6  6ED9               	movwf	fsr2l,c
  3246   000FB8  6ADA               	clrf	fsr2h,c
  3247   000FBA  CFDE F019          	movff	postinc2,??_getHSVval
  3248   000FBE  CFDD F01A          	movff	postdec2,??_getHSVval+1
  3249   000FC2  5018               	movf	getHSVval@p2^0,w,c
  3250   000FC4  6ED9               	movwf	fsr2l,c
  3251   000FC6  6ADA               	clrf	fsr2h,c
  3252   000FC8  0E04               	movlw	4
  3253   000FCA  26D9               	addwf	fsr2l,f,c
  3254   000FCC  CFDE F01B          	movff	postinc2,??_getHSVval+2
  3255   000FD0  CFDD F01C          	movff	postdec2,??_getHSVval+3
  3256   000FD4  5019               	movf	??_getHSVval^0,w,c
  3257   000FD6  5C1B               	subwf	(??_getHSVval+2)^0,w,c
  3258   000FD8  6E05               	movwf	___wmul@multiplier^0,c
  3259   000FDA  501A               	movf	(??_getHSVval+1)^0,w,c
  3260   000FDC  581C               	subwfb	(??_getHSVval+3)^0,w,c
  3261   000FDE  6E06               	movwf	(___wmul@multiplier+1)^0,c
  3262   000FE0  0E00               	movlw	0
  3263   000FE2  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3264   000FE4  0E0A               	movlw	10
  3265   000FE6  6E07               	movwf	___wmul@multiplicand^0,c
  3266   000FE8  ECB3  F00E         	call	___wmul	;wreg free
  3267   000FEC  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3268   000FF0  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3269   000FF4  ECF9  F00B         	call	___lwdiv	;wreg free
  3270   000FF8  0EC8               	movlw	200
  3271   000FFA  240B               	addwf	?___lwdiv^0,w,c
  3272   000FFC  6E27               	movwf	_getHSVval$3066^0,c
  3273   000FFE  0E00               	movlw	0
  3274   001000  200C               	addwfc	(?___lwdiv+1)^0,w,c
  3275   001002  6E28               	movwf	(_getHSVval$3066+1)^0,c
  3276   001004                     
  3277                           ;color.c: 166:         hue = 60*(((((p2->B)-(p2->R))*10)/range)+200);
  3278   001004  C027  F005         	movff	_getHSVval$3066,___wmul@multiplier
  3279   001008  C028  F006         	movff	_getHSVval$3066+1,___wmul@multiplier+1
  3280   00100C  0E00               	movlw	0
  3281   00100E  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3282   001010  0E3C               	movlw	60
  3283   001012  6E07               	movwf	___wmul@multiplicand^0,c
  3284   001014  ECB3  F00E         	call	___wmul	;wreg free
  3285   001018  C005  F025         	movff	?___wmul,getHSVval@hue
  3286   00101C  C006  F026         	movff	?___wmul+1,getHSVval@hue+1
  3287   001020                     l3293:
  3288                           
  3289                           ;color.c: 169:     if (maxRGB == (p2->G)){
  3290   001020  5018               	movf	getHSVval@p2^0,w,c
  3291   001022  6ED9               	movwf	fsr2l,c
  3292   001024  6ADA               	clrf	fsr2h,c
  3293   001026  0E02               	movlw	2
  3294   001028  26D9               	addwf	fsr2l,f,c
  3295   00102A  502B               	movf	getHSVval@maxRGB^0,w,c
  3296   00102C  18DE               	xorwf	postinc2,w,c
  3297   00102E  E107               	bnz	u2151
  3298   001030  502C               	movf	(getHSVval@maxRGB+1)^0,w,c
  3299   001032  18DE               	xorwf	postinc2,w,c
  3300   001034  A4D8               	btfss	status,2,c
  3301   001036  EF1F  F008         	goto	u2151
  3302   00103A  EF21  F008         	goto	u2150
  3303   00103E                     u2151:
  3304   00103E  EF5B  F008         	goto	l3299
  3305   001042                     u2150:
  3306   001042                     
  3307                           ;color.c: 170:         hue = 60*(((((p2->R)-(p2->G))*10)/range)+400);
  3308   001042  C029  F00D         	movff	getHSVval@range,___lwdiv@divisor
  3309   001046  C02A  F00E         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3310   00104A  5018               	movf	getHSVval@p2^0,w,c
  3311   00104C  6ED9               	movwf	fsr2l,c
  3312   00104E  6ADA               	clrf	fsr2h,c
  3313   001050  0E02               	movlw	2
  3314   001052  26D9               	addwf	fsr2l,f,c
  3315   001054  CFDE F019          	movff	postinc2,??_getHSVval
  3316   001058  CFDD F01A          	movff	postdec2,??_getHSVval+1
  3317   00105C  5018               	movf	getHSVval@p2^0,w,c
  3318   00105E  6ED9               	movwf	fsr2l,c
  3319   001060  6ADA               	clrf	fsr2h,c
  3320   001062  CFDE F01B          	movff	postinc2,??_getHSVval+2
  3321   001066  CFDD F01C          	movff	postdec2,??_getHSVval+3
  3322   00106A  5019               	movf	??_getHSVval^0,w,c
  3323   00106C  5C1B               	subwf	(??_getHSVval+2)^0,w,c
  3324   00106E  6E05               	movwf	___wmul@multiplier^0,c
  3325   001070  501A               	movf	(??_getHSVval+1)^0,w,c
  3326   001072  581C               	subwfb	(??_getHSVval+3)^0,w,c
  3327   001074  6E06               	movwf	(___wmul@multiplier+1)^0,c
  3328   001076  0E00               	movlw	0
  3329   001078  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3330   00107A  0E0A               	movlw	10
  3331   00107C  6E07               	movwf	___wmul@multiplicand^0,c
  3332   00107E  ECB3  F00E         	call	___wmul	;wreg free
  3333   001082  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3334   001086  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3335   00108A  ECF9  F00B         	call	___lwdiv	;wreg free
  3336   00108E  0E90               	movlw	144
  3337   001090  240B               	addwf	?___lwdiv^0,w,c
  3338   001092  6E27               	movwf	_getHSVval$3066^0,c
  3339   001094  0E01               	movlw	1
  3340   001096  200C               	addwfc	(?___lwdiv+1)^0,w,c
  3341   001098  6E28               	movwf	(_getHSVval$3066+1)^0,c
  3342   00109A                     
  3343                           ;color.c: 170:         hue = 60*(((((p2->R)-(p2->G))*10)/range)+400);
  3344   00109A  C027  F005         	movff	_getHSVval$3066,___wmul@multiplier
  3345   00109E  C028  F006         	movff	_getHSVval$3066+1,___wmul@multiplier+1
  3346   0010A2  0E00               	movlw	0
  3347   0010A4  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3348   0010A6  0E3C               	movlw	60
  3349   0010A8  6E07               	movwf	___wmul@multiplicand^0,c
  3350   0010AA  ECB3  F00E         	call	___wmul	;wreg free
  3351   0010AE  C005  F025         	movff	?___wmul,getHSVval@hue
  3352   0010B2  C006  F026         	movff	?___wmul+1,getHSVval@hue+1
  3353   0010B6                     l3299:
  3354                           
  3355                           ;color.c: 173:     if (maxRGB == 0) {saturation = 0;}
  3356   0010B6  502B               	movf	getHSVval@maxRGB^0,w,c
  3357   0010B8  102C               	iorwf	(getHSVval@maxRGB+1)^0,w,c
  3358   0010BA  A4D8               	btfss	status,2,c
  3359   0010BC  EF62  F008         	goto	u2161
  3360   0010C0  EF64  F008         	goto	u2160
  3361   0010C4                     u2161:
  3362   0010C4  EF68  F008         	goto	l3303
  3363   0010C8                     u2160:
  3364   0010C8  0E00               	movlw	0
  3365   0010CA  6E24               	movwf	(getHSVval@saturation+1)^0,c
  3366   0010CC  0E00               	movlw	0
  3367   0010CE  6E23               	movwf	getHSVval@saturation^0,c
  3368   0010D0                     l3303:
  3369                           
  3370                           ;color.c: 175:     if (maxRGB != 0) {saturation = (range*10)/maxRGB;}
  3371   0010D0  502B               	movf	getHSVval@maxRGB^0,w,c
  3372   0010D2  102C               	iorwf	(getHSVval@maxRGB+1)^0,w,c
  3373   0010D4  B4D8               	btfsc	status,2,c
  3374   0010D6  EF6F  F008         	goto	u2171
  3375   0010DA  EF71  F008         	goto	u2170
  3376   0010DE                     u2171:
  3377   0010DE  EF89  F008         	goto	l3307
  3378   0010E2                     u2170:
  3379   0010E2  C029  F005         	movff	getHSVval@range,___wmul@multiplier
  3380   0010E6  C02A  F006         	movff	getHSVval@range+1,___wmul@multiplier+1
  3381   0010EA  0E00               	movlw	0
  3382   0010EC  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3383   0010EE  0E0A               	movlw	10
  3384   0010F0  6E07               	movwf	___wmul@multiplicand^0,c
  3385   0010F2  ECB3  F00E         	call	___wmul	;wreg free
  3386   0010F6  C005  F00B         	movff	?___wmul,___awdiv@dividend
  3387   0010FA  C006  F00C         	movff	?___wmul+1,___awdiv@dividend+1
  3388   0010FE  C02B  F00D         	movff	getHSVval@maxRGB,___awdiv@divisor
  3389   001102  C02C  F00E         	movff	getHSVval@maxRGB+1,___awdiv@divisor+1
  3390   001106  EC5B  F00A         	call	___awdiv	;wreg free
  3391   00110A  C00B  F023         	movff	?___awdiv,getHSVval@saturation
  3392   00110E  C00C  F024         	movff	?___awdiv+1,getHSVval@saturation+1
  3393   001112                     l3307:
  3394                           
  3395                           ;color.c: 177:     p1->H = hue;
  3396   001112  5017               	movf	getHSVval@p1^0,w,c
  3397   001114  6ED9               	movwf	fsr2l,c
  3398   001116  6ADA               	clrf	fsr2h,c
  3399   001118  C025  FFDE         	movff	getHSVval@hue,postinc2
  3400   00111C  C026  FFDD         	movff	getHSVval@hue+1,postdec2
  3401   001120                     
  3402                           ;color.c: 178:     p1->S = saturation;
  3403   001120  5017               	movf	getHSVval@p1^0,w,c
  3404   001122  6ED9               	movwf	fsr2l,c
  3405   001124  6ADA               	clrf	fsr2h,c
  3406   001126  0E02               	movlw	2
  3407   001128  26D9               	addwf	fsr2l,f,c
  3408   00112A  C023  FFDE         	movff	getHSVval@saturation,postinc2
  3409   00112E  C024  FFDD         	movff	getHSVval@saturation+1,postdec2
  3410   001132                     
  3411                           ;color.c: 179:     p1->V = maxRGB;
  3412   001132  5017               	movf	getHSVval@p1^0,w,c
  3413   001134  6ED9               	movwf	fsr2l,c
  3414   001136  6ADA               	clrf	fsr2h,c
  3415   001138  0E04               	movlw	4
  3416   00113A  26D9               	addwf	fsr2l,f,c
  3417   00113C  C02B  FFDE         	movff	getHSVval@maxRGB,postinc2
  3418   001140  C02C  FFDD         	movff	getHSVval@maxRGB+1,postdec2
  3419   001144  0012               	return		;funcret
  3420   001146                     __end_of_getHSVval:
  3421                           	callstack 0
  3422                           
  3423 ;; *************** function _min *****************
  3424 ;; Defined at:
  3425 ;;		line 116 in file "color.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  a               2    4[COMRAM] int 
  3428 ;;  b               2    6[COMRAM] int 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  min_val         2    9[COMRAM] int 
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  2    4[COMRAM] int 
  3433 ;; Registers used:
  3434 ;;		wreg, status,2, status,0
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3440 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3441 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3442 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3443 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3444 ;;Total ram usage:        7 bytes
  3445 ;; Hardware stack levels used: 1
  3446 ;; Hardware stack levels required when called: 2
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_getHSVval
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text20
  3455   001B8A                     __ptext20:
  3456                           	callstack 0
  3457   001B8A                     _min:
  3458                           	callstack 27
  3459   001B8A                     
  3460                           ;color.c: 116: int min(int a, int b);color.c: 117: {;color.c: 118:     int min_val;;colo
      +                          r.c: 120:     if (a < b) {min_val = a;}
  3461   001B8A  5007               	movf	min@b^0,w,c
  3462   001B8C  5C05               	subwf	min@a^0,w,c
  3463   001B8E  5006               	movf	(min@a+1)^0,w,c
  3464   001B90  0A80               	xorlw	128
  3465   001B92  6E09               	movwf	??_min^0,c
  3466   001B94  5008               	movf	(min@b+1)^0,w,c
  3467   001B96  0A80               	xorlw	128
  3468   001B98  5809               	subwfb	??_min^0,w,c
  3469   001B9A  B0D8               	btfsc	status,0,c
  3470   001B9C  EFD2  F00D         	goto	u1341
  3471   001BA0  EFD4  F00D         	goto	u1340
  3472   001BA4                     u1341:
  3473   001BA4  EFDA  F00D         	goto	l79
  3474   001BA8                     u1340:
  3475   001BA8  C005  F00A         	movff	min@a,min@min_val
  3476   001BAC  C006  F00B         	movff	min@a+1,min@min_val+1
  3477   001BB0  EFDE  F00D         	goto	l80
  3478   001BB4                     l79:
  3479   001BB4  C007  F00A         	movff	min@b,min@min_val
  3480   001BB8  C008  F00B         	movff	min@b+1,min@min_val+1
  3481   001BBC                     l80:
  3482                           
  3483                           ;color.c: 124:     return min_val;
  3484   001BBC  C00A  F005         	movff	min@min_val,?_min
  3485   001BC0  C00B  F006         	movff	min@min_val+1,?_min+1
  3486   001BC4  0012               	return		;funcret
  3487   001BC6                     __end_of_min:
  3488                           	callstack 0
  3489                           
  3490 ;; *************** function _max *****************
  3491 ;; Defined at:
  3492 ;;		line 99 in file "color.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  a               2    4[COMRAM] int 
  3495 ;;  b               2    6[COMRAM] int 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;  max_val         2    9[COMRAM] int 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  2    4[COMRAM] int 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3507 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3509 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3510 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3511 ;;Total ram usage:        7 bytes
  3512 ;; Hardware stack levels used: 1
  3513 ;; Hardware stack levels required when called: 2
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_getHSVval
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text21
  3522   001BC6                     __ptext21:
  3523                           	callstack 0
  3524   001BC6                     _max:
  3525                           	callstack 27
  3526   001BC6                     
  3527                           ;color.c: 99: int max(int a, int b);color.c: 100: {;color.c: 101:     int max_val;;color
      +                          .c: 103:     if (a > b) {max_val = a;}
  3528   001BC6  5005               	movf	max@a^0,w,c
  3529   001BC8  5C07               	subwf	max@b^0,w,c
  3530   001BCA  5008               	movf	(max@b+1)^0,w,c
  3531   001BCC  0A80               	xorlw	128
  3532   001BCE  6E09               	movwf	??_max^0,c
  3533   001BD0  5006               	movf	(max@a+1)^0,w,c
  3534   001BD2  0A80               	xorlw	128
  3535   001BD4  5809               	subwfb	??_max^0,w,c
  3536   001BD6  B0D8               	btfsc	status,0,c
  3537   001BD8  EFF0  F00D         	goto	u1331
  3538   001BDC  EFF2  F00D         	goto	u1330
  3539   001BE0                     u1331:
  3540   001BE0  EFF8  F00D         	goto	l74
  3541   001BE4                     u1330:
  3542   001BE4  C005  F00A         	movff	max@a,max@max_val
  3543   001BE8  C006  F00B         	movff	max@a+1,max@max_val+1
  3544   001BEC  EFFC  F00D         	goto	l75
  3545   001BF0                     l74:
  3546   001BF0  C007  F00A         	movff	max@b,max@max_val
  3547   001BF4  C008  F00B         	movff	max@b+1,max@max_val+1
  3548   001BF8                     l75:
  3549                           
  3550                           ;color.c: 107:     return max_val;
  3551   001BF8  C00A  F005         	movff	max@max_val,?_max
  3552   001BFC  C00B  F006         	movff	max@max_val+1,?_max+1
  3553   001C00  0012               	return		;funcret
  3554   001C02                     __end_of_max:
  3555                           	callstack 0
  3556                           
  3557 ;; *************** function ___wmul *****************
  3558 ;; Defined at:
  3559 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  multiplier      2    4[COMRAM] unsigned int 
  3562 ;;  multiplicand    2    6[COMRAM] unsigned int 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  product         2    8[COMRAM] unsigned int 
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  2    4[COMRAM] unsigned int 
  3567 ;; Registers used:
  3568 ;;		wreg, status,2, status,0, prodl, prodh
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3574 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3575 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3577 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3578 ;;Total ram usage:        6 bytes
  3579 ;; Hardware stack levels used: 1
  3580 ;; Hardware stack levels required when called: 2
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_getHSVval
  3585 ;;		_setMotorPWM
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text22
  3590   001D66                     __ptext22:
  3591                           	callstack 0
  3592   001D66                     ___wmul:
  3593                           	callstack 27
  3594   001D66  5005               	movf	___wmul@multiplier^0,w,c
  3595   001D68  0207               	mulwf	___wmul@multiplicand^0,c
  3596   001D6A  CFF3 F009          	movff	prodl,___wmul@product
  3597   001D6E  CFF4 F00A          	movff	prodh,___wmul@product+1
  3598   001D72  5005               	movf	___wmul@multiplier^0,w,c
  3599   001D74  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  3600   001D76  50F3               	movf	243,w,c
  3601   001D78  260A               	addwf	(___wmul@product+1)^0,f,c
  3602   001D7A  5006               	movf	(___wmul@multiplier+1)^0,w,c
  3603   001D7C  0207               	mulwf	___wmul@multiplicand^0,c
  3604   001D7E  50F3               	movf	243,w,c
  3605   001D80  260A               	addwf	(___wmul@product+1)^0,f,c
  3606   001D82  C009  F005         	movff	___wmul@product,?___wmul
  3607   001D86  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  3608   001D8A  0012               	return		;funcret
  3609   001D8C                     __end_of___wmul:
  3610                           	callstack 0
  3611                           
  3612 ;; *************** function ___lwmod *****************
  3613 ;; Defined at:
  3614 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  dividend        2   17[COMRAM] unsigned int 
  3617 ;;  divisor         2   19[COMRAM] unsigned int 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  counter         1   21[COMRAM] unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  2   17[COMRAM] unsigned int 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2, status,0
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3629 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3630 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3632 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3633 ;;Total ram usage:        5 bytes
  3634 ;; Hardware stack levels used: 1
  3635 ;; Hardware stack levels required when called: 2
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_getHSVval
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text23
  3644   001866                     __ptext23:
  3645                           	callstack 0
  3646   001866                     ___lwmod:
  3647                           	callstack 27
  3648   001866  5014               	movf	___lwmod@divisor^0,w,c
  3649   001868  1015               	iorwf	(___lwmod@divisor+1)^0,w,c
  3650   00186A  B4D8               	btfsc	status,2,c
  3651   00186C  EF3A  F00C         	goto	u1571
  3652   001870  EF3C  F00C         	goto	u1570
  3653   001874                     u1571:
  3654   001874  EF60  F00C         	goto	l1150
  3655   001878                     u1570:
  3656   001878  0E01               	movlw	1
  3657   00187A  6E16               	movwf	___lwmod@counter^0,c
  3658   00187C  EF44  F00C         	goto	l2659
  3659   001880                     l2657:
  3660   001880  90D8               	bcf	status,0,c
  3661   001882  3614               	rlcf	___lwmod@divisor^0,f,c
  3662   001884  3615               	rlcf	(___lwmod@divisor+1)^0,f,c
  3663   001886  2A16               	incf	___lwmod@counter^0,f,c
  3664   001888                     l2659:
  3665   001888  AE15               	btfss	(___lwmod@divisor+1)^0,7,c
  3666   00188A  EF49  F00C         	goto	u1581
  3667   00188E  EF4B  F00C         	goto	u1580
  3668   001892                     u1581:
  3669   001892  EF40  F00C         	goto	l2657
  3670   001896                     u1580:
  3671   001896                     l2661:
  3672   001896  5014               	movf	___lwmod@divisor^0,w,c
  3673   001898  5C12               	subwf	___lwmod@dividend^0,w,c
  3674   00189A  5015               	movf	(___lwmod@divisor+1)^0,w,c
  3675   00189C  5813               	subwfb	(___lwmod@dividend+1)^0,w,c
  3676   00189E  A0D8               	btfss	status,0,c
  3677   0018A0  EF54  F00C         	goto	u1591
  3678   0018A4  EF56  F00C         	goto	u1590
  3679   0018A8                     u1591:
  3680   0018A8  EF5A  F00C         	goto	l2665
  3681   0018AC                     u1590:
  3682   0018AC  5014               	movf	___lwmod@divisor^0,w,c
  3683   0018AE  5E12               	subwf	___lwmod@dividend^0,f,c
  3684   0018B0  5015               	movf	(___lwmod@divisor+1)^0,w,c
  3685   0018B2  5A13               	subwfb	(___lwmod@dividend+1)^0,f,c
  3686   0018B4                     l2665:
  3687   0018B4  90D8               	bcf	status,0,c
  3688   0018B6  3215               	rrcf	(___lwmod@divisor+1)^0,f,c
  3689   0018B8  3214               	rrcf	___lwmod@divisor^0,f,c
  3690   0018BA  2E16               	decfsz	___lwmod@counter^0,f,c
  3691   0018BC  EF4B  F00C         	goto	l2661
  3692   0018C0                     l1150:
  3693   0018C0  C012  F012         	movff	___lwmod@dividend,?___lwmod
  3694   0018C4  C013  F013         	movff	___lwmod@dividend+1,?___lwmod+1
  3695   0018C8  0012               	return		;funcret
  3696   0018CA                     __end_of___lwmod:
  3697                           	callstack 0
  3698                           
  3699 ;; *************** function ___lwdiv *****************
  3700 ;; Defined at:
  3701 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  dividend        2   10[COMRAM] unsigned int 
  3704 ;;  divisor         2   12[COMRAM] unsigned int 
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;  quotient        2   14[COMRAM] unsigned int 
  3707 ;;  counter         1   16[COMRAM] unsigned char 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  2   10[COMRAM] unsigned int 
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, status,0
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3717 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3718 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3720 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3721 ;;Total ram usage:        7 bytes
  3722 ;; Hardware stack levels used: 1
  3723 ;; Hardware stack levels required when called: 2
  3724 ;; This function calls:
  3725 ;;		Nothing
  3726 ;; This function is called by:
  3727 ;;		_getHSVval
  3728 ;;		_setMotorPWM
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text24
  3733   0017F2                     __ptext24:
  3734                           	callstack 0
  3735   0017F2                     ___lwdiv:
  3736                           	callstack 27
  3737   0017F2  0E00               	movlw	0
  3738   0017F4  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  3739   0017F6  0E00               	movlw	0
  3740   0017F8  6E0F               	movwf	___lwdiv@quotient^0,c
  3741   0017FA  500D               	movf	___lwdiv@divisor^0,w,c
  3742   0017FC  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3743   0017FE  B4D8               	btfsc	status,2,c
  3744   001800  EF04  F00C         	goto	u1541
  3745   001804  EF06  F00C         	goto	u1540
  3746   001808                     u1541:
  3747   001808  EF2E  F00C         	goto	l1140
  3748   00180C                     u1540:
  3749   00180C  0E01               	movlw	1
  3750   00180E  6E11               	movwf	___lwdiv@counter^0,c
  3751   001810  EF0E  F00C         	goto	l2639
  3752   001814                     l2637:
  3753   001814  90D8               	bcf	status,0,c
  3754   001816  360D               	rlcf	___lwdiv@divisor^0,f,c
  3755   001818  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3756   00181A  2A11               	incf	___lwdiv@counter^0,f,c
  3757   00181C                     l2639:
  3758   00181C  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  3759   00181E  EF13  F00C         	goto	u1551
  3760   001822  EF15  F00C         	goto	u1550
  3761   001826                     u1551:
  3762   001826  EF0A  F00C         	goto	l2637
  3763   00182A                     u1550:
  3764   00182A                     l2641:
  3765   00182A  90D8               	bcf	status,0,c
  3766   00182C  360F               	rlcf	___lwdiv@quotient^0,f,c
  3767   00182E  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3768   001830  500D               	movf	___lwdiv@divisor^0,w,c
  3769   001832  5C0B               	subwf	___lwdiv@dividend^0,w,c
  3770   001834  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  3771   001836  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3772   001838  A0D8               	btfss	status,0,c
  3773   00183A  EF21  F00C         	goto	u1561
  3774   00183E  EF23  F00C         	goto	u1560
  3775   001842                     u1561:
  3776   001842  EF28  F00C         	goto	l2649
  3777   001846                     u1560:
  3778   001846  500D               	movf	___lwdiv@divisor^0,w,c
  3779   001848  5E0B               	subwf	___lwdiv@dividend^0,f,c
  3780   00184A  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  3781   00184C  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3782   00184E  800F               	bsf	___lwdiv@quotient^0,0,c
  3783   001850                     l2649:
  3784   001850  90D8               	bcf	status,0,c
  3785   001852  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3786   001854  320D               	rrcf	___lwdiv@divisor^0,f,c
  3787   001856  2E11               	decfsz	___lwdiv@counter^0,f,c
  3788   001858  EF15  F00C         	goto	l2641
  3789   00185C                     l1140:
  3790   00185C  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  3791   001860  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3792   001864  0012               	return		;funcret
  3793   001866                     __end_of___lwdiv:
  3794                           	callstack 0
  3795                           
  3796 ;; *************** function ___awdiv *****************
  3797 ;; Defined at:
  3798 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  dividend        2   10[COMRAM] int 
  3801 ;;  divisor         2   12[COMRAM] int 
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;  quotient        2   16[COMRAM] int 
  3804 ;;  sign            1   15[COMRAM] unsigned char 
  3805 ;;  counter         1   14[COMRAM] unsigned char 
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  2   10[COMRAM] int 
  3808 ;; Registers used:
  3809 ;;		wreg, status,2, status,0
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3815 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3816 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3818 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3819 ;;Total ram usage:        8 bytes
  3820 ;; Hardware stack levels used: 1
  3821 ;; Hardware stack levels required when called: 2
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_getHSVval
  3826 ;;		_vfpfcnvrt
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text25
  3831   0014B6                     __ptext25:
  3832                           	callstack 0
  3833   0014B6                     ___awdiv:
  3834                           	callstack 25
  3835   0014B6  0E00               	movlw	0
  3836   0014B8  6E10               	movwf	___awdiv@sign^0,c
  3837   0014BA  BE0E               	btfsc	(___awdiv@divisor+1)^0,7,c
  3838   0014BC  EF64  F00A         	goto	u1840
  3839   0014C0  EF62  F00A         	goto	u1841
  3840   0014C4                     u1841:
  3841   0014C4  EF6A  F00A         	goto	l3115
  3842   0014C8                     u1840:
  3843   0014C8  6C0D               	negf	___awdiv@divisor^0,c
  3844   0014CA  1E0E               	comf	(___awdiv@divisor+1)^0,f,c
  3845   0014CC  B0D8               	btfsc	status,0,c
  3846   0014CE  2A0E               	incf	(___awdiv@divisor+1)^0,f,c
  3847   0014D0  0E01               	movlw	1
  3848   0014D2  6E10               	movwf	___awdiv@sign^0,c
  3849   0014D4                     l3115:
  3850   0014D4  BE0C               	btfsc	(___awdiv@dividend+1)^0,7,c
  3851   0014D6  EF71  F00A         	goto	u1850
  3852   0014DA  EF6F  F00A         	goto	u1851
  3853   0014DE                     u1851:
  3854   0014DE  EF77  F00A         	goto	l3121
  3855   0014E2                     u1850:
  3856   0014E2  6C0B               	negf	___awdiv@dividend^0,c
  3857   0014E4  1E0C               	comf	(___awdiv@dividend+1)^0,f,c
  3858   0014E6  B0D8               	btfsc	status,0,c
  3859   0014E8  2A0C               	incf	(___awdiv@dividend+1)^0,f,c
  3860   0014EA  0E01               	movlw	1
  3861   0014EC  1A10               	xorwf	___awdiv@sign^0,f,c
  3862   0014EE                     l3121:
  3863   0014EE  0E00               	movlw	0
  3864   0014F0  6E12               	movwf	(___awdiv@quotient+1)^0,c
  3865   0014F2  0E00               	movlw	0
  3866   0014F4  6E11               	movwf	___awdiv@quotient^0,c
  3867   0014F6  500D               	movf	___awdiv@divisor^0,w,c
  3868   0014F8  100E               	iorwf	(___awdiv@divisor+1)^0,w,c
  3869   0014FA  B4D8               	btfsc	status,2,c
  3870   0014FC  EF82  F00A         	goto	u1861
  3871   001500  EF84  F00A         	goto	u1860
  3872   001504                     u1861:
  3873   001504  EFAC  F00A         	goto	l3143
  3874   001508                     u1860:
  3875   001508  0E01               	movlw	1
  3876   00150A  6E0F               	movwf	___awdiv@counter^0,c
  3877   00150C  EF8C  F00A         	goto	l3129
  3878   001510                     l3127:
  3879   001510  90D8               	bcf	status,0,c
  3880   001512  360D               	rlcf	___awdiv@divisor^0,f,c
  3881   001514  360E               	rlcf	(___awdiv@divisor+1)^0,f,c
  3882   001516  2A0F               	incf	___awdiv@counter^0,f,c
  3883   001518                     l3129:
  3884   001518  AE0E               	btfss	(___awdiv@divisor+1)^0,7,c
  3885   00151A  EF91  F00A         	goto	u1871
  3886   00151E  EF93  F00A         	goto	u1870
  3887   001522                     u1871:
  3888   001522  EF88  F00A         	goto	l3127
  3889   001526                     u1870:
  3890   001526                     l3131:
  3891   001526  90D8               	bcf	status,0,c
  3892   001528  3611               	rlcf	___awdiv@quotient^0,f,c
  3893   00152A  3612               	rlcf	(___awdiv@quotient+1)^0,f,c
  3894   00152C  500D               	movf	___awdiv@divisor^0,w,c
  3895   00152E  5C0B               	subwf	___awdiv@dividend^0,w,c
  3896   001530  500E               	movf	(___awdiv@divisor+1)^0,w,c
  3897   001532  580C               	subwfb	(___awdiv@dividend+1)^0,w,c
  3898   001534  A0D8               	btfss	status,0,c
  3899   001536  EF9F  F00A         	goto	u1881
  3900   00153A  EFA1  F00A         	goto	u1880
  3901   00153E                     u1881:
  3902   00153E  EFA6  F00A         	goto	l3139
  3903   001542                     u1880:
  3904   001542  500D               	movf	___awdiv@divisor^0,w,c
  3905   001544  5E0B               	subwf	___awdiv@dividend^0,f,c
  3906   001546  500E               	movf	(___awdiv@divisor+1)^0,w,c
  3907   001548  5A0C               	subwfb	(___awdiv@dividend+1)^0,f,c
  3908   00154A  8011               	bsf	___awdiv@quotient^0,0,c
  3909   00154C                     l3139:
  3910   00154C  90D8               	bcf	status,0,c
  3911   00154E  320E               	rrcf	(___awdiv@divisor+1)^0,f,c
  3912   001550  320D               	rrcf	___awdiv@divisor^0,f,c
  3913   001552  2E0F               	decfsz	___awdiv@counter^0,f,c
  3914   001554  EF93  F00A         	goto	l3131
  3915   001558                     l3143:
  3916   001558  5010               	movf	___awdiv@sign^0,w,c
  3917   00155A  B4D8               	btfsc	status,2,c
  3918   00155C  EFB2  F00A         	goto	u1891
  3919   001560  EFB4  F00A         	goto	u1890
  3920   001564                     u1891:
  3921   001564  EFB8  F00A         	goto	l3147
  3922   001568                     u1890:
  3923   001568  6C11               	negf	___awdiv@quotient^0,c
  3924   00156A  1E12               	comf	(___awdiv@quotient+1)^0,f,c
  3925   00156C  B0D8               	btfsc	status,0,c
  3926   00156E  2A12               	incf	(___awdiv@quotient+1)^0,f,c
  3927   001570                     l3147:
  3928   001570  C011  F00B         	movff	___awdiv@quotient,?___awdiv
  3929   001574  C012  F00C         	movff	___awdiv@quotient+1,?___awdiv+1
  3930   001578  0012               	return		;funcret
  3931   00157A                     __end_of___awdiv:
  3932                           	callstack 0
  3933                           
  3934 ;; *************** function _color_click_init *****************
  3935 ;; Defined at:
  3936 ;;		line 5 in file "color.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2, status,0, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3952 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3953 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3954 ;;Total ram usage:        1 bytes
  3955 ;; Hardware stack levels used: 1
  3956 ;; Hardware stack levels required when called: 5
  3957 ;; This function calls:
  3958 ;;		_I2C_2_Master_Init
  3959 ;;		_color_writetoaddr
  3960 ;; This function is called by:
  3961 ;;		_main
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text26
  3966   001C36                     __ptext26:
  3967                           	callstack 0
  3968   001C36                     _color_click_init:
  3969                           	callstack 25
  3970   001C36                     
  3971                           ;color.c: 8:     I2C_2_Master_Init();
  3972   001C36  EC60  F00E         	call	_I2C_2_Master_Init	;wreg free
  3973   001C3A                     
  3974                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  3975   001C3A  0E01               	movlw	1
  3976   001C3C  6E07               	movwf	color_writetoaddr@value^0,c
  3977   001C3E  0E00               	movlw	0
  3978   001C40  ECD9  F00E         	call	_color_writetoaddr
  3979   001C44                     
  3980                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3981   001C44  0E3F               	movlw	63
  3982   001C46  6E09               	movwf	??_color_click_init^0,c
  3983   001C48  0E55               	movlw	85
  3984   001C4A                     u2247:
  3985   001C4A  2EE8               	decfsz	wreg,f,c
  3986   001C4C  D7FE               	bra	u2247
  3987   001C4E  2E09               	decfsz	??_color_click_init^0,f,c
  3988   001C50  D7FC               	bra	u2247
  3989   001C52  0000               	nop	
  3990   001C54                     
  3991                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  3992   001C54  0E03               	movlw	3
  3993   001C56  6E07               	movwf	color_writetoaddr@value^0,c
  3994   001C58  0E00               	movlw	0
  3995   001C5A  ECD9  F00E         	call	_color_writetoaddr
  3996   001C5E                     
  3997                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  3998   001C5E  0ED5               	movlw	213
  3999   001C60  6E07               	movwf	color_writetoaddr@value^0,c
  4000   001C62  0E01               	movlw	1
  4001   001C64  ECD9  F00E         	call	_color_writetoaddr
  4002   001C68  0012               	return		;funcret
  4003   001C6A                     __end_of_color_click_init:
  4004                           	callstack 0
  4005                           
  4006 ;; *************** function _color_writetoaddr *****************
  4007 ;; Defined at:
  4008 ;;		line 21 in file "color.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;  address         1    wreg     unsigned char 
  4011 ;;  value           1    6[COMRAM] unsigned char 
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  address         1    7[COMRAM] unsigned char 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  1    wreg      void 
  4016 ;; Registers used:
  4017 ;;		wreg, status,2, status,0, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4023 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4024 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4026 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4027 ;;Total ram usage:        2 bytes
  4028 ;; Hardware stack levels used: 1
  4029 ;; Hardware stack levels required when called: 4
  4030 ;; This function calls:
  4031 ;;		_I2C_2_Master_Start
  4032 ;;		_I2C_2_Master_Stop
  4033 ;;		_I2C_2_Master_Write
  4034 ;; This function is called by:
  4035 ;;		_color_click_init
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text27
  4040   001DB2                     __ptext27:
  4041                           	callstack 0
  4042   001DB2                     _color_writetoaddr:
  4043                           	callstack 25
  4044                           
  4045                           ;incstack = 0
  4046                           ;color_writetoaddr@address stored from wreg
  4047   001DB2  6E08               	movwf	color_writetoaddr@address^0,c
  4048   001DB4                     
  4049                           ;color.c: 22:     I2C_2_Master_Start();
  4050   001DB4  EC58  F00F         	call	_I2C_2_Master_Start	;wreg free
  4051                           
  4052                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  4053   001DB8  0E52               	movlw	82
  4054   001DBA  EC48  F00F         	call	_I2C_2_Master_Write
  4055                           
  4056                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  4057   001DBE  5008               	movf	color_writetoaddr@address^0,w,c
  4058   001DC0  0980               	iorlw	128
  4059   001DC2  EC48  F00F         	call	_I2C_2_Master_Write
  4060                           
  4061                           ;color.c: 25:     I2C_2_Master_Write(value);
  4062   001DC6  5007               	movf	color_writetoaddr@value^0,w,c
  4063   001DC8  EC48  F00F         	call	_I2C_2_Master_Write
  4064                           
  4065                           ;color.c: 26:     I2C_2_Master_Stop();
  4066   001DCC  EC53  F00F         	call	_I2C_2_Master_Stop	;wreg free
  4067   001DD0  0012               	return		;funcret
  4068   001DD2                     __end_of_color_writetoaddr:
  4069                           	callstack 0
  4070                           
  4071 ;; *************** function _I2C_2_Master_Write *****************
  4072 ;; Defined at:
  4073 ;;		line 45 in file "i2c.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  data_byte       1    wreg     unsigned char 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  data_byte       1    5[COMRAM] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4088 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4090 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4091 ;;Total ram usage:        1 bytes
  4092 ;; Hardware stack levels used: 1
  4093 ;; Hardware stack levels required when called: 3
  4094 ;; This function calls:
  4095 ;;		_I2C_2_Master_Idle
  4096 ;; This function is called by:
  4097 ;;		_color_writetoaddr
  4098 ;;		_color_read_Red
  4099 ;;		_color_read_Blue
  4100 ;;		_color_read_Green
  4101 ;;		_color_read_Clear
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text28
  4106   001E90                     __ptext28:
  4107                           	callstack 0
  4108   001E90                     _I2C_2_Master_Write:
  4109                           	callstack 25
  4110                           
  4111                           ;incstack = 0
  4112                           ;I2C_2_Master_Write@data_byte stored from wreg
  4113   001E90  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  4114   001E92                     
  4115                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4116   001E92  EC9F  F00E         	call	_I2C_2_Master_Idle	;wreg free
  4117   001E96                     
  4118                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4119   001E96  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4120   001E9A  0012               	return		;funcret
  4121   001E9C                     __end_of_I2C_2_Master_Write:
  4122                           	callstack 0
  4123                           
  4124 ;; *************** function _I2C_2_Master_Stop *****************
  4125 ;; Defined at:
  4126 ;;		line 39 in file "i2c.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;		None
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;		None
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      void 
  4133 ;; Registers used:
  4134 ;;		wreg, status,2, status,0, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4144 ;;Total ram usage:        0 bytes
  4145 ;; Hardware stack levels used: 1
  4146 ;; Hardware stack levels required when called: 3
  4147 ;; This function calls:
  4148 ;;		_I2C_2_Master_Idle
  4149 ;; This function is called by:
  4150 ;;		_color_writetoaddr
  4151 ;;		_color_read_Red
  4152 ;;		_color_read_Blue
  4153 ;;		_color_read_Green
  4154 ;;		_color_read_Clear
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text29
  4159   001EA6                     __ptext29:
  4160                           	callstack 0
  4161   001EA6                     _I2C_2_Master_Stop:
  4162                           	callstack 25
  4163   001EA6                     
  4164                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4165   001EA6  EC9F  F00E         	call	_I2C_2_Master_Idle	;wreg free
  4166   001EAA                     
  4167                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4168   001EAA  010E               	movlb	14	; () banked
  4169   001EAC  85DA               	bsf	218,2,b	;volatile
  4170   001EAE                     
  4171                           ; BSR set to: 14
  4172   001EAE  0012               	return		;funcret
  4173   001EB0                     __end_of_I2C_2_Master_Stop:
  4174                           	callstack 0
  4175                           
  4176 ;; *************** function _I2C_2_Master_Start *****************
  4177 ;; Defined at:
  4178 ;;		line 27 in file "i2c.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;		None
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;		None
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      void 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4196 ;;Total ram usage:        0 bytes
  4197 ;; Hardware stack levels used: 1
  4198 ;; Hardware stack levels required when called: 3
  4199 ;; This function calls:
  4200 ;;		_I2C_2_Master_Idle
  4201 ;; This function is called by:
  4202 ;;		_color_writetoaddr
  4203 ;;		_color_read_Red
  4204 ;;		_color_read_Blue
  4205 ;;		_color_read_Green
  4206 ;;		_color_read_Clear
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text30
  4211   001EB0                     __ptext30:
  4212                           	callstack 0
  4213   001EB0                     _I2C_2_Master_Start:
  4214                           	callstack 25
  4215   001EB0                     
  4216                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4217   001EB0  EC9F  F00E         	call	_I2C_2_Master_Idle	;wreg free
  4218   001EB4                     
  4219                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4220   001EB4  010E               	movlb	14	; () banked
  4221   001EB6  81DA               	bsf	218,0,b	;volatile
  4222   001EB8                     
  4223                           ; BSR set to: 14
  4224   001EB8  0012               	return		;funcret
  4225   001EBA                     __end_of_I2C_2_Master_Start:
  4226                           	callstack 0
  4227                           
  4228 ;; *************** function _I2C_2_Master_Idle *****************
  4229 ;; Defined at:
  4230 ;;		line 22 in file "i2c.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      void 
  4237 ;; Registers used:
  4238 ;;		wreg, status,2, status,0
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4247 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4248 ;;Total ram usage:        1 bytes
  4249 ;; Hardware stack levels used: 1
  4250 ;; Hardware stack levels required when called: 2
  4251 ;; This function calls:
  4252 ;;		Nothing
  4253 ;; This function is called by:
  4254 ;;		_I2C_2_Master_Start
  4255 ;;		_I2C_2_Master_RepStart
  4256 ;;		_I2C_2_Master_Stop
  4257 ;;		_I2C_2_Master_Write
  4258 ;;		_I2C_2_Master_Read
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text31
  4263   001D3E                     __ptext31:
  4264                           	callstack 0
  4265   001D3E                     _I2C_2_Master_Idle:
  4266                           	callstack 25
  4267   001D3E                     l261:
  4268   001D3E  010E               	movlb	14	; () banked
  4269   001D40  B5D8               	btfsc	216,2,b	;volatile
  4270   001D42  EFA5  F00E         	goto	u1001
  4271   001D46  EFA7  F00E         	goto	u1000
  4272   001D4A                     u1001:
  4273   001D4A  EF9F  F00E         	goto	l261
  4274   001D4E                     u1000:
  4275   001D4E                     
  4276                           ; BSR set to: 14
  4277   001D4E  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4278   001D52  0E1F               	movlw	31
  4279   001D54  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  4280   001D56  A4D8               	btfss	status,2,c
  4281   001D58  EFB0  F00E         	goto	u1011
  4282   001D5C  EFB2  F00E         	goto	u1010
  4283   001D60                     u1011:
  4284   001D60  EF9F  F00E         	goto	l261
  4285   001D64                     u1010:
  4286   001D64                     
  4287                           ; BSR set to: 14
  4288   001D64  0012               	return		;funcret
  4289   001D66                     __end_of_I2C_2_Master_Idle:
  4290                           	callstack 0
  4291                           
  4292 ;; *************** function _I2C_2_Master_Init *****************
  4293 ;; Defined at:
  4294 ;;		line 4 in file "i2c.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1    wreg      void 
  4301 ;; Registers used:
  4302 ;;		wreg, status,2
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4312 ;;Total ram usage:        0 bytes
  4313 ;; Hardware stack levels used: 1
  4314 ;; Hardware stack levels required when called: 2
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_color_click_init
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           	psect	text32
  4323   001CC0                     __ptext32:
  4324                           	callstack 0
  4325   001CC0                     _I2C_2_Master_Init:
  4326                           	callstack 27
  4327   001CC0                     
  4328                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4329   001CC0  010E               	movlb	14	; () banked
  4330   001CC2  51D9               	movf	217,w,b	;volatile
  4331   001CC4  0BF0               	andlw	-16
  4332   001CC6  0908               	iorlw	8
  4333   001CC8  6FD9               	movwf	217,b	;volatile
  4334   001CCA                     
  4335                           ; BSR set to: 14
  4336                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4337   001CCA  8BD9               	bsf	217,5,b	;volatile
  4338                           
  4339                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4340   001CCC  0E9F               	movlw	159
  4341   001CCE  6FD6               	movwf	214,b	;volatile
  4342   001CD0                     
  4343                           ; BSR set to: 14
  4344                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4345   001CD0  8A84               	bsf	132,5,c	;volatile
  4346   001CD2                     
  4347                           ; BSR set to: 14
  4348                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4349   001CD2  8C84               	bsf	132,6,c	;volatile
  4350   001CD4                     
  4351                           ; BSR set to: 14
  4352                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4353   001CD4  9BA7               	bcf	167,5,b	;volatile
  4354   001CD6                     
  4355                           ; BSR set to: 14
  4356                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4357   001CD6  9DA7               	bcf	167,6,b	;volatile
  4358                           
  4359                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4360   001CD8  0E1D               	movlw	29
  4361   001CDA  6F1D               	movwf	29,b	;volatile
  4362                           
  4363                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4364   001CDC  0E1E               	movlw	30
  4365   001CDE  6F1C               	movwf	28,b	;volatile
  4366                           
  4367                           ;i2c.c: 18:   RD5PPS=0x1C;
  4368   001CE0  0E1C               	movlw	28
  4369   001CE2  6F6F               	movwf	111,b	;volatile
  4370                           
  4371                           ;i2c.c: 19:   RD6PPS=0x1B;
  4372   001CE4  0E1B               	movlw	27
  4373   001CE6  6F70               	movwf	112,b	;volatile
  4374   001CE8                     
  4375                           ; BSR set to: 14
  4376   001CE8  0012               	return		;funcret
  4377   001CEA                     __end_of_I2C_2_Master_Init:
  4378                           	callstack 0
  4379                           
  4380 ;; *************** function _buggy_lights_init *****************
  4381 ;; Defined at:
  4382 ;;		line 4 in file "buggy_lights.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;		None
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;		None
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      void 
  4389 ;; Registers used:
  4390 ;;		None
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4400 ;;Total ram usage:        0 bytes
  4401 ;; Hardware stack levels used: 1
  4402 ;; Hardware stack levels required when called: 2
  4403 ;; This function calls:
  4404 ;;		Nothing
  4405 ;; This function is called by:
  4406 ;;		_main
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           	psect	text33
  4411   001AB2                     __ptext33:
  4412                           	callstack 0
  4413   001AB2                     _buggy_lights_init:
  4414                           	callstack 28
  4415   001AB2                     
  4416                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
  4417   001AB2  9884               	bcf	132,4,c	;volatile
  4418                           
  4419                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
  4420   001AB4  9288               	bcf	136,1,c	;volatile
  4421                           
  4422                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
  4423   001AB6  9684               	bcf	132,3,c	;volatile
  4424                           
  4425                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
  4426   001AB8  9086               	bcf	134,0,c	;volatile
  4427                           
  4428                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
  4429   001ABA  9088               	bcf	136,0,c	;volatile
  4430                           
  4431                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
  4432   001ABC  887C               	bsf	124,4,c	;volatile
  4433                           
  4434                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
  4435   001ABE  8280               	bsf	128,1,c	;volatile
  4436                           
  4437                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
  4438   001AC0  867C               	bsf	124,3,c	;volatile
  4439                           
  4440                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
  4441   001AC2  807E               	bsf	126,0,c	;volatile
  4442                           
  4443                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
  4444   001AC4  8080               	bsf	128,0,c	;volatile
  4445                           
  4446                           ;buggy_lights.c: 22:     TRISDbits.TRISD7 = 0;
  4447   001AC6  9E84               	bcf	132,7,c	;volatile
  4448                           
  4449                           ;buggy_lights.c: 23:     TRISHbits.TRISH3 = 0;
  4450   001AC8  9688               	bcf	136,3,c	;volatile
  4451                           
  4452                           ;buggy_lights.c: 25:     LATDbits.LATD7 = 1;
  4453   001ACA  8E7C               	bsf	124,7,c	;volatile
  4454                           
  4455                           ;buggy_lights.c: 26:     LATHbits.LATH3 = 1;
  4456   001ACC  8680               	bsf	128,3,c	;volatile
  4457                           
  4458                           ;buggy_lights.c: 32:         TRISAbits.TRISA0 = 0;
  4459   001ACE  9081               	bcf	129,0,c	;volatile
  4460                           
  4461                           ;buggy_lights.c: 33:         TRISCbits.TRISC2 = 0;
  4462   001AD0  9483               	bcf	131,2,c	;volatile
  4463                           
  4464                           ;buggy_lights.c: 34:         TRISDbits.TRISD0 = 0;
  4465   001AD2  9084               	bcf	132,0,c	;volatile
  4466                           
  4467                           ;buggy_lights.c: 36:         LATAbits.LATA0 = 1;
  4468   001AD4  8079               	bsf	121,0,c	;volatile
  4469                           
  4470                           ;buggy_lights.c: 37:         LATCbits.LATC2 = 1;
  4471   001AD6  847B               	bsf	123,2,c	;volatile
  4472                           
  4473                           ;buggy_lights.c: 38:         LATDbits.LATD0 = 1;
  4474   001AD8  807C               	bsf	124,0,c	;volatile
  4475                           
  4476                           ;buggy_lights.c: 42:         TRISAbits.TRISA1 = 0;
  4477   001ADA  9281               	bcf	129,1,c	;volatile
  4478                           
  4479                           ;buggy_lights.c: 43:         TRISCbits.TRISC6 = 0;
  4480   001ADC  9C83               	bcf	131,6,c	;volatile
  4481                           
  4482                           ;buggy_lights.c: 44:         TRISHbits.TRISH2 = 0;
  4483   001ADE  9488               	bcf	136,2,c	;volatile
  4484                           
  4485                           ;buggy_lights.c: 46:         LATAbits.LATA1 = 1;
  4486   001AE0  8279               	bsf	121,1,c	;volatile
  4487                           
  4488                           ;buggy_lights.c: 47:         LATCbits.LATC6 = 1;
  4489   001AE2  8C7B               	bsf	123,6,c	;volatile
  4490                           
  4491                           ;buggy_lights.c: 48:         LATHbits.LATH2 = 1;
  4492   001AE4  8480               	bsf	128,2,c	;volatile
  4493                           
  4494                           ;buggy_lights.c: 52:         TRISGbits.TRISG1 = 0;
  4495   001AE6  9287               	bcf	135,1,c	;volatile
  4496                           
  4497                           ;buggy_lights.c: 53:         TRISAbits.TRISA4 = 0;
  4498   001AE8  9881               	bcf	129,4,c	;volatile
  4499                           
  4500                           ;buggy_lights.c: 54:         TRISFbits.TRISF7 = 0;
  4501   001AEA  9E86               	bcf	134,7,c	;volatile
  4502                           
  4503                           ;buggy_lights.c: 56:         LATGbits.LATG1 = 1;
  4504   001AEC  827F               	bsf	127,1,c	;volatile
  4505                           
  4506                           ;buggy_lights.c: 57:         LATAbits.LATA4 = 1;
  4507   001AEE  8879               	bsf	121,4,c	;volatile
  4508                           
  4509                           ;buggy_lights.c: 58:         LATFbits.LATF7 = 1;
  4510   001AF0  8E7E               	bsf	126,7,c	;volatile
  4511                           
  4512                           ;buggy_lights.c: 62:         TRISGbits.TRISG0 = 0;
  4513   001AF2  9087               	bcf	135,0,c	;volatile
  4514                           
  4515                           ;buggy_lights.c: 63:         TRISEbits.TRISE7 = 0;
  4516   001AF4  9E85               	bcf	133,7,c	;volatile
  4517                           
  4518                           ;buggy_lights.c: 64:         TRISAbits.TRISA3 = 0;
  4519   001AF6  9681               	bcf	129,3,c	;volatile
  4520                           
  4521                           ;buggy_lights.c: 66:         LATGbits.LATG0 = 1;
  4522   001AF8  807F               	bsf	127,0,c	;volatile
  4523                           
  4524                           ;buggy_lights.c: 67:         LATEbits.LATE7 = 1;
  4525   001AFA  8E7D               	bsf	125,7,c	;volatile
  4526                           
  4527                           ;buggy_lights.c: 68:         LATAbits.LATA3 = 1;
  4528   001AFC  8679               	bsf	121,3,c	;volatile
  4529   001AFE  0012               	return		;funcret
  4530   001B00                     __end_of_buggy_lights_init:
  4531                           	callstack 0
  4532                           
  4533 ;; *************** function _TxBufferedString *****************
  4534 ;; Defined at:
  4535 ;;		line 105 in file "serial.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  string          1    5[COMRAM] PTR unsigned char 
  4538 ;;		 -> main@display(50), 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;		None
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4550 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4553 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4554 ;;Total ram usage:        1 bytes
  4555 ;; Hardware stack levels used: 1
  4556 ;; Hardware stack levels required when called: 3
  4557 ;; This function calls:
  4558 ;;		_putCharToTxBuf
  4559 ;; This function is called by:
  4560 ;;		_main
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	text34
  4565   001CEA                     __ptext34:
  4566                           	callstack 0
  4567   001CEA                     _TxBufferedString:
  4568                           	callstack 27
  4569   001CEA                     
  4570                           ;serial.c: 107:     while(*string != 0) {
  4571   001CEA  EF7E  F00E         	goto	l2839
  4572   001CEE                     l2835:
  4573                           
  4574                           ;serial.c: 108:         putCharToTxBuf(*string++);
  4575   001CEE  5006               	movf	TxBufferedString@string^0,w,c
  4576   001CF0  6ED9               	movwf	fsr2l,c
  4577   001CF2  6ADA               	clrf	fsr2h,c
  4578   001CF4  50DF               	movf	indf2,w,c
  4579   001CF6  EC8A  F00E         	call	_putCharToTxBuf
  4580   001CFA  2A06               	incf	TxBufferedString@string^0,f,c
  4581   001CFC                     l2839:
  4582                           
  4583                           ;serial.c: 107:     while(*string != 0) {
  4584   001CFC  5006               	movf	TxBufferedString@string^0,w,c
  4585   001CFE  6ED9               	movwf	fsr2l,c
  4586   001D00  6ADA               	clrf	fsr2h,c
  4587   001D02  50DF               	movf	indf2,w,c
  4588   001D04  A4D8               	btfss	status,2,c
  4589   001D06  EF87  F00E         	goto	u1671
  4590   001D0A  EF89  F00E         	goto	u1670
  4591   001D0E                     u1671:
  4592   001D0E  EF77  F00E         	goto	l2835
  4593   001D12                     u1670:
  4594   001D12  0012               	return		;funcret
  4595   001D14                     __end_of_TxBufferedString:
  4596                           	callstack 0
  4597                           
  4598 ;; *************** function _putCharToTxBuf *****************
  4599 ;; Defined at:
  4600 ;;		line 92 in file "serial.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;  byte            1    wreg     unsigned char 
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;  byte            1    4[COMRAM] unsigned char 
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      void 
  4607 ;; Registers used:
  4608 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4618 ;;Total ram usage:        1 bytes
  4619 ;; Hardware stack levels used: 1
  4620 ;; Hardware stack levels required when called: 2
  4621 ;; This function calls:
  4622 ;;		Nothing
  4623 ;; This function is called by:
  4624 ;;		_TxBufferedString
  4625 ;; This function uses a non-reentrant model
  4626 ;;
  4627                           
  4628                           	psect	text35
  4629   001D14                     __ptext35:
  4630                           	callstack 0
  4631   001D14                     _putCharToTxBuf:
  4632                           	callstack 27
  4633                           
  4634                           ;incstack = 0
  4635                           ;putCharToTxBuf@byte stored from wreg
  4636   001D14  6E05               	movwf	putCharToTxBuf@byte^0,c
  4637   001D16                     
  4638                           ;serial.c: 93:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  4639   001D16  0E3B               	movlw	59
  4640   001D18  644D               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  4641   001D1A  EF91  F00E         	goto	u1511
  4642   001D1E  EF93  F00E         	goto	u1510
  4643   001D22                     u1511:
  4644   001D22  EF95  F00E         	goto	l2617
  4645   001D26                     u1510:
  4646   001D26  0E00               	movlw	0
  4647   001D28  6E4D               	movwf	_TxBufWriteCnt^0,c	;volatile
  4648   001D2A                     l2617:
  4649                           
  4650                           ;serial.c: 94:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  4651   001D2A  0E00               	movlw	low _EUSART4TXbuf
  4652   001D2C  244D               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  4653   001D2E  6ED9               	movwf	fsr2l,c
  4654   001D30  6ADA               	clrf	fsr2h,c
  4655   001D32  0E01               	movlw	high _EUSART4TXbuf
  4656   001D34  22DA               	addwfc	fsr2h,f,c
  4657   001D36  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  4658   001D3A  2A4D               	incf	_TxBufWriteCnt^0,f,c	;volatile
  4659   001D3C  0012               	return		;funcret
  4660   001D3E                     __end_of_putCharToTxBuf:
  4661                           	callstack 0
  4662                           
  4663 ;; *************** function _Timer0_init *****************
  4664 ;; Defined at:
  4665 ;;		line 7 in file "timers.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;		None
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;		None
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  1    wreg      void 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4683 ;;Total ram usage:        0 bytes
  4684 ;; Hardware stack levels used: 1
  4685 ;; Hardware stack levels required when called: 2
  4686 ;; This function calls:
  4687 ;;		Nothing
  4688 ;; This function is called by:
  4689 ;;		_main
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text36
  4694   001DD2                     __ptext36:
  4695                           	callstack 0
  4696   001DD2                     _Timer0_init:
  4697                           	callstack 28
  4698   001DD2                     
  4699                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4700   001DD2  50D6               	movf	214,w,c	;volatile
  4701   001DD4  0B1F               	andlw	-225
  4702   001DD6  0940               	iorlw	64
  4703   001DD8  6ED6               	movwf	214,c	;volatile
  4704   001DDA                     
  4705                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4706   001DDA  88D6               	bsf	214,4,c	;volatile
  4707   001DDC                     
  4708                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  4709   001DDC  88D5               	bsf	213,4,c	;volatile
  4710                           
  4711                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  4712   001DDE  50D6               	movf	214,w,c	;volatile
  4713   001DE0  0BF0               	andlw	-16
  4714   001DE2  090E               	iorlw	14
  4715   001DE4  6ED6               	movwf	214,c	;volatile
  4716                           
  4717                           ;timers.c: 20:     TMR0H = 0;
  4718   001DE6  0E00               	movlw	0
  4719   001DE8  6ED4               	movwf	212,c	;volatile
  4720                           
  4721                           ;timers.c: 21:     TMR0L = 0;
  4722   001DEA  0E00               	movlw	0
  4723   001DEC  6ED3               	movwf	211,c	;volatile
  4724   001DEE                     
  4725                           ;timers.c: 23:     T0CON0bits.T0EN=1;
  4726   001DEE  8ED5               	bsf	213,7,c	;volatile
  4727   001DF0  0012               	return		;funcret
  4728   001DF2                     __end_of_Timer0_init:
  4729                           	callstack 0
  4730                           
  4731 ;; *************** function _Interrupts_init *****************
  4732 ;; Defined at:
  4733 ;;		line 6 in file "interrupts.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;		None
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		None
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4751 ;;Total ram usage:        0 bytes
  4752 ;; Hardware stack levels used: 1
  4753 ;; Hardware stack levels required when called: 2
  4754 ;; This function calls:
  4755 ;;		Nothing
  4756 ;; This function is called by:
  4757 ;;		_main
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text37
  4762   001E82                     __ptext37:
  4763                           	callstack 0
  4764   001E82                     _Interrupts_init:
  4765                           	callstack 28
  4766   001E82                     
  4767                           ;interrupts.c: 9:     PIE4bits.RC4IE = 1;
  4768   001E82  010E               	movlb	14	; () banked
  4769   001E84  872D               	bsf	45,3,b	;volatile
  4770                           
  4771                           ;interrupts.c: 10:     PIE4bits.TX4IE = 1;
  4772   001E86  852D               	bsf	45,2,b	;volatile
  4773                           
  4774                           ;interrupts.c: 12:     PIE0bits.TMR0IE = 1;
  4775   001E88  8B29               	bsf	41,5,b	;volatile
  4776                           
  4777                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  4778   001E8A  8CF2               	bsf	242,6,c	;volatile
  4779                           
  4780                           ;interrupts.c: 14:     INTCONbits.GIE = 1;
  4781   001E8C  8EF2               	bsf	242,7,c	;volatile
  4782   001E8E                     
  4783                           ; BSR set to: 14
  4784   001E8E  0012               	return		;funcret
  4785   001E90                     __end_of_Interrupts_init:
  4786                           	callstack 0
  4787                           
  4788 ;; *************** function _HighISR *****************
  4789 ;; Defined at:
  4790 ;;		line 19 in file "interrupts.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;		None
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4806 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;Total ram usage:        2 bytes
  4809 ;; Hardware stack levels used: 1
  4810 ;; Hardware stack levels required when called: 1
  4811 ;; This function calls:
  4812 ;;		_getCharFromTxBuf
  4813 ;;		_putCharToRxBuf
  4814 ;;		i2_isDataInTxBuf
  4815 ;; This function is called by:
  4816 ;;		Interrupt level 2
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	intcode
  4821   000008                     __pintcode:
  4822                           	callstack 0
  4823   000008                     _HighISR:
  4824                           	callstack 24
  4825                           
  4826                           ; BSR set to: 14
  4827                           ;incstack = 0
  4828   000008  8250               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4829   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  4830   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  4831   000012                     
  4832                           ;interrupts.c: 22:     if (PIR0bits.TMR0IF) {
  4833   000012  010E               	movlb	14	; () banked
  4834   000014  AB33               	btfss	51,5,b	;volatile
  4835   000016  EF0F  F000         	goto	i2u180_41
  4836   00001A  EF11  F000         	goto	i2u180_40
  4837   00001E                     i2u180_41:
  4838   00001E  EF12  F000         	goto	i2l640
  4839   000022                     i2u180_40:
  4840   000022                     
  4841                           ; BSR set to: 14
  4842                           ;interrupts.c: 30:         PIR0bits.TMR0IF = 0;
  4843   000022  9B33               	bcf	51,5,b	;volatile
  4844   000024                     i2l640:
  4845                           
  4846                           ; BSR set to: 14
  4847                           ;interrupts.c: 35:     if (PIR4bits.TX4IF) {
  4848   000024  A537               	btfss	55,2,b	;volatile
  4849   000026  EF17  F000         	goto	i2u181_41
  4850   00002A  EF19  F000         	goto	i2u181_40
  4851   00002E                     i2u181_41:
  4852   00002E  EF29  F000         	goto	i2l643
  4853   000032                     i2u181_40:
  4854   000032                     
  4855                           ; BSR set to: 14
  4856                           ;interrupts.c: 36:         TX4REG = getCharFromTxBuf();
  4857   000032  EC35  F00E         	call	_getCharFromTxBuf	;wreg free
  4858   000036  010E               	movlb	14	; () banked
  4859   000038  6FE4               	movwf	228,b	;volatile
  4860   00003A                     
  4861                           ; BSR set to: 14
  4862                           ;interrupts.c: 37:         if (!isDataInTxBuf()) {PIE4bits.TX4IE = 0;}
  4863   00003A  EC21  F00F         	call	i2_isDataInTxBuf	;wreg free
  4864   00003E  0900               	iorlw	0
  4865   000040  A4D8               	btfss	status,2,c
  4866   000042  EF25  F000         	goto	i2u182_41
  4867   000046  EF27  F000         	goto	i2u182_40
  4868   00004A                     i2u182_41:
  4869   00004A  EF29  F000         	goto	i2l643
  4870   00004E                     i2u182_40:
  4871   00004E  010E               	movlb	14	; () banked
  4872   000050  952D               	bcf	45,2,b	;volatile
  4873   000052                     i2l643:
  4874                           
  4875                           ;interrupts.c: 40:     if (PIR4bits.RC4IF) {putCharToRxBuf(RC4REG);}
  4876   000052  010E               	movlb	14	; () banked
  4877   000054  A737               	btfss	55,3,b	;volatile
  4878   000056  EF2F  F000         	goto	i2u183_41
  4879   00005A  EF31  F000         	goto	i2u183_40
  4880   00005E                     i2u183_41:
  4881   00005E  EF34  F000         	goto	i2l646
  4882   000062                     i2u183_40:
  4883   000062                     
  4884                           ; BSR set to: 14
  4885   000062  51E3               	movf	227,w,b	;volatile
  4886   000064  ECC6  F00E         	call	_putCharToRxBuf
  4887   000068                     i2l646:
  4888   000068  C004  FFDA         	movff	??_HighISR+1,fsr2h
  4889   00006C  C003  FFD9         	movff	??_HighISR,fsr2l
  4890   000070  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4891   000072  0011               	retfie		f
  4892   000074                     __end_of_HighISR:
  4893                           	callstack 0
  4894                           
  4895 ;; *************** function i2_isDataInTxBuf *****************
  4896 ;; Defined at:
  4897 ;;		line 100 in file "serial.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;		None
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  1    wreg      unsigned char 
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, status,0
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4915 ;;Total ram usage:        0 bytes
  4916 ;; Hardware stack levels used: 1
  4917 ;; This function calls:
  4918 ;;		Nothing
  4919 ;; This function is called by:
  4920 ;;		_HighISR
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text39
  4925   001E42                     __ptext39:
  4926                           	callstack 0
  4927   001E42                     i2_isDataInTxBuf:
  4928                           	callstack 24
  4929   001E42                     
  4930                           ;serial.c: 101:     return (TxBufWriteCnt!=TxBufReadCnt);
  4931   001E42  504C               	movf	_TxBufReadCnt^0,w,c	;volatile
  4932   001E44  184D               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  4933   001E46  A4D8               	btfss	status,2,c
  4934   001E48  EF28  F00F         	goto	i2u76_41
  4935   001E4C  EF2B  F00F         	goto	i2u76_40
  4936   001E50                     i2u76_41:
  4937   001E50  0E01               	movlw	1
  4938   001E52  EF2C  F00F         	goto	i2u77_40
  4939   001E56                     i2u76_40:
  4940   001E56  0E00               	movlw	0
  4941   001E58                     i2u77_40:
  4942   001E58  0012               	return		;funcret
  4943   001E5A                     __end_ofi2_isDataInTxBuf:
  4944                           	callstack 0
  4945                           
  4946 ;; *************** function _putCharToRxBuf *****************
  4947 ;; Defined at:
  4948 ;;		line 72 in file "serial.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;  byte            1    wreg     unsigned char 
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;  byte            1    0[COMRAM] unsigned char 
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      void 
  4955 ;; Registers used:
  4956 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4957 ;; Tracked objects:
  4958 ;;		On entry : 0/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4966 ;;Total ram usage:        1 bytes
  4967 ;; Hardware stack levels used: 1
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_HighISR
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text40
  4976   001D8C                     __ptext40:
  4977                           	callstack 0
  4978   001D8C                     _putCharToRxBuf:
  4979                           	callstack 24
  4980                           
  4981                           ;incstack = 0
  4982                           ;putCharToRxBuf@byte stored from wreg
  4983   001D8C  6E01               	movwf	putCharToRxBuf@byte^0,c
  4984   001D8E                     
  4985                           ;serial.c: 73:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  4986   001D8E  0E13               	movlw	19
  4987   001D90  644F               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  4988   001D92  EFCD  F00E         	goto	i2u169_41
  4989   001D96  EFCF  F00E         	goto	i2u169_40
  4990   001D9A                     i2u169_41:
  4991   001D9A  EFD1  F00E         	goto	i2l2849
  4992   001D9E                     i2u169_40:
  4993   001D9E  0E00               	movlw	0
  4994   001DA0  6E4F               	movwf	_RxBufWriteCnt^0,c	;volatile
  4995   001DA2                     i2l2849:
  4996                           
  4997                           ;serial.c: 74:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  4998   001DA2  504F               	movf	_RxBufWriteCnt^0,w,c
  4999   001DA4  0FEB               	addlw	low _EUSART4RXbuf
  5000   001DA6  6ED9               	movwf	fsr2l,c
  5001   001DA8  6ADA               	clrf	fsr2h,c
  5002   001DAA  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  5003   001DAE  2A4F               	incf	_RxBufWriteCnt^0,f,c	;volatile
  5004   001DB0  0012               	return		;funcret
  5005   001DB2                     __end_of_putCharToRxBuf:
  5006                           	callstack 0
  5007                           
  5008 ;; *************** function _getCharFromTxBuf *****************
  5009 ;; Defined at:
  5010 ;;		line 86 in file "serial.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;		None
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;		None
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  1    wreg      unsigned char 
  5017 ;; Registers used:
  5018 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5026 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5027 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5028 ;;Total ram usage:        2 bytes
  5029 ;; Hardware stack levels used: 1
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_HighISR
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           	psect	text41
  5038   001C6A                     __ptext41:
  5039                           	callstack 0
  5040   001C6A                     _getCharFromTxBuf:
  5041                           	callstack 24
  5042   001C6A                     
  5043                           ;serial.c: 87:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  5044   001C6A  0E3B               	movlw	59
  5045   001C6C  644C               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  5046   001C6E  EF3B  F00E         	goto	i2u170_41
  5047   001C72  EF3D  F00E         	goto	i2u170_40
  5048   001C76                     i2u170_41:
  5049   001C76  EF3F  F00E         	goto	i2l2857
  5050   001C7A                     i2u170_40:
  5051   001C7A  0E00               	movlw	0
  5052   001C7C  6E4C               	movwf	_TxBufReadCnt^0,c	;volatile
  5053   001C7E                     i2l2857:
  5054                           
  5055                           ;serial.c: 88:     return EUSART4TXbuf[TxBufReadCnt++];
  5056   001C7E  2A4C               	incf	_TxBufReadCnt^0,f,c	;volatile
  5057   001C80  044C               	decf	_TxBufReadCnt^0,w,c	;volatile
  5058   001C82  6E01               	movwf	??_getCharFromTxBuf^0,c
  5059   001C84  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  5060   001C86  0E00               	movlw	low _EUSART4TXbuf
  5061   001C88  2401               	addwf	??_getCharFromTxBuf^0,w,c
  5062   001C8A  6ED9               	movwf	fsr2l,c
  5063   001C8C  0E01               	movlw	high _EUSART4TXbuf
  5064   001C8E  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  5065   001C90  6EDA               	movwf	fsr2h,c
  5066   001C92  50DF               	movf	indf2,w,c
  5067   001C94  0012               	return		;funcret
  5068   001C96                     __end_of_getCharFromTxBuf:
  5069                           	callstack 0
  5070                           
  5071                           	psect	rparam
  5072   000000                     
  5073                           	psect	temp
  5074   000050                     btemp:
  5075                           	callstack 0
  5076   000050                     	ds	1
  5077   000000                     int$flags	set	btemp
  5078   000000                     wtemp8	set	btemp+1
  5079   000000                     ttemp5	set	btemp+1
  5080   000000                     ttemp6	set	btemp+4
  5081   000000                     ttemp7	set	btemp+8
  5082                           
  5083                           	psect	idloc
  5084                           
  5085                           ;Config register IDLOC0 @ 0x200000
  5086                           ;	unspecified, using default values
  5087   200000                     	org	2097152
  5088   200000  FFFF               	dw	65535
  5089                           
  5090                           ;Config register IDLOC1 @ 0x200002
  5091                           ;	unspecified, using default values
  5092   200002                     	org	2097154
  5093   200002  FFFF               	dw	65535
  5094                           
  5095                           ;Config register IDLOC2 @ 0x200004
  5096                           ;	unspecified, using default values
  5097   200004                     	org	2097156
  5098   200004  FFFF               	dw	65535
  5099                           
  5100                           ;Config register IDLOC3 @ 0x200006
  5101                           ;	unspecified, using default values
  5102   200006                     	org	2097158
  5103   200006  FFFF               	dw	65535
  5104                           
  5105                           ;Config register IDLOC4 @ 0x200008
  5106                           ;	unspecified, using default values
  5107   200008                     	org	2097160
  5108   200008  FFFF               	dw	65535
  5109                           
  5110                           ;Config register IDLOC5 @ 0x20000A
  5111                           ;	unspecified, using default values
  5112   20000A                     	org	2097162
  5113   20000A  FFFF               	dw	65535
  5114                           
  5115                           ;Config register IDLOC6 @ 0x20000C
  5116                           ;	unspecified, using default values
  5117   20000C                     	org	2097164
  5118   20000C  FFFF               	dw	65535
  5119                           
  5120                           ;Config register IDLOC7 @ 0x20000E
  5121                           ;	unspecified, using default values
  5122   20000E                     	org	2097166
  5123   20000E  FFFF               	dw	65535
  5124                           
  5125                           	psect	config
  5126                           
  5127                           ;Config register CONFIG1L @ 0x300000
  5128                           ;	External Oscillator mode Selection bits
  5129                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5130                           ;	Power-up default value for COSC bits
  5131                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5132   300000                     	org	3145728
  5133   300000  AA                 	db	170
  5134                           
  5135                           ;Config register CONFIG1H @ 0x300001
  5136                           ;	unspecified, using default values
  5137                           ;	Clock Out Enable bit
  5138                           ;	CLKOUTEN = 0x1, unprogrammed default
  5139                           ;	Clock Switch Enable bit
  5140                           ;	CSWEN = 0x1, unprogrammed default
  5141                           ;	Fail-Safe Clock Monitor Enable bit
  5142                           ;	FCMEN = 0x1, unprogrammed default
  5143   300001                     	org	3145729
  5144   300001  FF                 	db	255
  5145                           
  5146                           ;Config register CONFIG2L @ 0x300002
  5147                           ;	unspecified, using default values
  5148                           ;	Master Clear Enable bit
  5149                           ;	MCLRE = 0x1, unprogrammed default
  5150                           ;	Power-up Timer Enable bit
  5151                           ;	PWRTE = 0x1, unprogrammed default
  5152                           ;	Low-power BOR enable bit
  5153                           ;	LPBOREN = 0x1, unprogrammed default
  5154                           ;	Brown-out Reset Enable bits
  5155                           ;	BOREN = 0x3, unprogrammed default
  5156   300002                     	org	3145730
  5157   300002  FF                 	db	255
  5158                           
  5159                           ;Config register CONFIG2H @ 0x300003
  5160                           ;	unspecified, using default values
  5161                           ;	Brown Out Reset Voltage selection bits
  5162                           ;	BORV = 0x3, unprogrammed default
  5163                           ;	ZCD Disable bit
  5164                           ;	ZCD = 0x1, unprogrammed default
  5165                           ;	PPSLOCK bit One-Way Set Enable bit
  5166                           ;	PPS1WAY = 0x1, unprogrammed default
  5167                           ;	Stack Full/Underflow Reset Enable bit
  5168                           ;	STVREN = 0x1, unprogrammed default
  5169                           ;	Debugger Enable bit
  5170                           ;	DEBUG = 0x1, unprogrammed default
  5171                           ;	Extended Instruction Set Enable bit
  5172                           ;	XINST = 0x1, unprogrammed default
  5173   300003                     	org	3145731
  5174   300003  FF                 	db	255
  5175                           
  5176                           ;Config register CONFIG3L @ 0x300004
  5177                           ;	WDT Period Select bits
  5178                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5179                           ;	WDT operating mode
  5180                           ;	WDTE = OFF, WDT Disabled
  5181   300004                     	org	3145732
  5182   300004  9F                 	db	159
  5183                           
  5184                           ;Config register CONFIG3H @ 0x300005
  5185                           ;	unspecified, using default values
  5186                           ;	WDT Window Select bits
  5187                           ;	WDTCWS = 0x7, unprogrammed default
  5188                           ;	WDT input clock selector
  5189                           ;	WDTCCS = 0x7, unprogrammed default
  5190   300005                     	org	3145733
  5191   300005  FF                 	db	255
  5192                           
  5193                           ;Config register CONFIG4L @ 0x300006
  5194                           ;	unspecified, using default values
  5195                           ;	Write Protection Block 0
  5196                           ;	WRT0 = 0x1, unprogrammed default
  5197                           ;	Write Protection Block 1
  5198                           ;	WRT1 = 0x1, unprogrammed default
  5199                           ;	Write Protection Block 2
  5200                           ;	WRT2 = 0x1, unprogrammed default
  5201                           ;	Write Protection Block 3
  5202                           ;	WRT3 = 0x1, unprogrammed default
  5203                           ;	Write Protection Block 3
  5204                           ;	WRT4 = 0x1, unprogrammed default
  5205                           ;	Write Protection Block 3
  5206                           ;	WRT5 = 0x1, unprogrammed default
  5207                           ;	Write Protection Block 3
  5208                           ;	WRT6 = 0x1, unprogrammed default
  5209                           ;	Write Protection Block 3
  5210                           ;	WRT7 = 0x1, unprogrammed default
  5211   300006                     	org	3145734
  5212   300006  FF                 	db	255
  5213                           
  5214                           ;Config register CONFIG4H @ 0x300007
  5215                           ;	unspecified, using default values
  5216                           ;	Configuration Register Write Protection bit
  5217                           ;	WRTC = 0x1, unprogrammed default
  5218                           ;	Boot Block Write Protection bit
  5219                           ;	WRTB = 0x1, unprogrammed default
  5220                           ;	Data EEPROM Write Protection bit
  5221                           ;	WRTD = 0x1, unprogrammed default
  5222                           ;	Scanner Enable bit
  5223                           ;	SCANE = 0x1, unprogrammed default
  5224                           ;	Low Voltage Programming Enable bit
  5225                           ;	LVP = 0x1, unprogrammed default
  5226   300007                     	org	3145735
  5227   300007  FF                 	db	255
  5228                           
  5229                           ;Config register CONFIG5L @ 0x300008
  5230                           ;	unspecified, using default values
  5231                           ;	UserNVM Program Memory Code Protection bit
  5232                           ;	CP = 0x1, unprogrammed default
  5233                           ;	DataNVM Memory Code Protection bit
  5234                           ;	CPD = 0x1, unprogrammed default
  5235   300008                     	org	3145736
  5236   300008  FF                 	db	255
  5237                           
  5238                           ;Config register CONFIG5H @ 0x300009
  5239                           ;	unspecified, using default values
  5240   300009                     	org	3145737
  5241   300009  FF                 	db	255
  5242                           
  5243                           ;Config register CONFIG6L @ 0x30000A
  5244                           ;	unspecified, using default values
  5245                           ;	Table Read Protection Block 0
  5246                           ;	EBTR0 = 0x1, unprogrammed default
  5247                           ;	Table Read Protection Block 1
  5248                           ;	EBTR1 = 0x1, unprogrammed default
  5249                           ;	Table Read Protection Block 2
  5250                           ;	EBTR2 = 0x1, unprogrammed default
  5251                           ;	Table Read Protection Block 3
  5252                           ;	EBTR3 = 0x1, unprogrammed default
  5253                           ;	Table Read Protection Block 4
  5254                           ;	EBTR4 = 0x1, unprogrammed default
  5255                           ;	Table Read Protection Block 5
  5256                           ;	EBTR5 = 0x1, unprogrammed default
  5257                           ;	Table Read Protection Block 6
  5258                           ;	EBTR6 = 0x1, unprogrammed default
  5259                           ;	Table Read Protection Block 7
  5260                           ;	EBTR7 = 0x1, unprogrammed default
  5261   30000A                     	org	3145738
  5262   30000A  FF                 	db	255
  5263                           
  5264                           ;Config register CONFIG6H @ 0x30000B
  5265                           ;	unspecified, using default values
  5266                           ;	Boot Block Table Read Protection bit
  5267                           ;	EBTRB = 0x1, unprogrammed default
  5268   30000B                     	org	3145739
  5269   30000B  FF                 	db	255
  5270                           tosu	equ	0xFFF
  5271                           tosh	equ	0xFFE
  5272                           tosl	equ	0xFFD
  5273                           stkptr	equ	0xFFC
  5274                           pclatu	equ	0xFFB
  5275                           pclath	equ	0xFFA
  5276                           pcl	equ	0xFF9
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           indf0	equ	0xFEF
  5284                           postinc0	equ	0xFEE
  5285                           postdec0	equ	0xFED
  5286                           preinc0	equ	0xFEC
  5287                           plusw0	equ	0xFEB
  5288                           fsr0h	equ	0xFEA
  5289                           fsr0l	equ	0xFE9
  5290                           wreg	equ	0xFE8
  5291                           indf1	equ	0xFE7
  5292                           postinc1	equ	0xFE6
  5293                           postdec1	equ	0xFE5
  5294                           preinc1	equ	0xFE4
  5295                           plusw1	equ	0xFE3
  5296                           fsr1h	equ	0xFE2
  5297                           fsr1l	equ	0xFE1
  5298                           bsr	equ	0xFE0
  5299                           indf2	equ	0xFDF
  5300                           postinc2	equ	0xFDE
  5301                           postdec2	equ	0xFDD
  5302                           preinc2	equ	0xFDC
  5303                           plusw2	equ	0xFDB
  5304                           fsr2h	equ	0xFDA
  5305                           fsr2l	equ	0xFD9
  5306                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        82
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      79
    BANK0           160     97     159
    BANK1           256      0     112
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(BANK0[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getHSVval@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@readHSV(BANK0[6]), 

    getHSVval@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@readRGBC(BANK0[8]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@readRGBC(BANK0[8]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1136DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1136DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2640$buffer	PTR unsigned char  size(2) Largest target is 0

    S2640$source	PTR const unsigned char  size(2) Largest target is 0

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), STR_2(CODE[5]), STR_4(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> main@display(BANK0[50]), sendArraySerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_high(BANK0[20]), 

    timer_low_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_low(BANK0[20]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    TxBufferedString@string	PTR unsigned char  size(1) Largest target is 50
		 -> main@display(BANK0[50]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), STR_2(CODE[5]), STR_4(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(BANK0[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), STR_2(CODE[5]), STR_4(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), STR_2(CODE[5]), STR_4(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(BANK0[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___awdiv
    _abs->___awmod
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _getHSVval->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    ___awdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _TxBufferedString->_putCharToTxBuf

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                86    86      0   12456
                                             45 COMRAM     2     2      0
                                             15 BANK0     82    82      0
                    _Interrupts_init
                        _Timer0_init
                   _TxBufferedString
                  _buggy_lights_init
                   _color_click_init
                          _getHSVval
                         _getRGBCval
                    _initDCmotorsPWM
                         _initUSART4
                          _sendTxBuf
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10    4961
                                             35 COMRAM    10     0     10
                                              0 BANK0     15    15      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    4091
                                             31 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13    10      3    3630
                                             18 COMRAM    13    10      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     957
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             10 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     613
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (2) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getRGBCval                                           1     0      1     616
                                             15 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _getHSVval                                           22    20      2    5288
                                             22 COMRAM    22    20      2
                            ___awdiv
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _max
                                _min
 ---------------------------------------------------------------------------------
 (2) _min                                                  7     3      4     416
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _max                                                  7     3      4     416
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1203
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     257
                                             17 COMRAM     5     1      4
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     760
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     805
                                             10 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TxBufferedString                                     1     0      1     143
                                              5 COMRAM     1     0      1
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (2) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (7) i2_isDataInTxBuf                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _Timer0_init
   _TxBufferedString
     _putCharToTxBuf
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _getHSVval
     ___awdiv
       ___wmul (ARG)
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul
     _max
     _min
   _getRGBCval
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendTxBuf
     _isDataInTxBuf
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      70       7       43.8%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     61      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      4F       1       84.0%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      61        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      59        0.0%
BITBIGSFRlllhhh      8      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      60        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRlllllh      5      0       0      57        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRlllllh      3      0       0      58        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15E      62        0.0%
DATA                 0      0     15E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 07 13:33:30 2024

                 _turn180Delay 0034                 _color_read_Red 1972                _color_read_Blue 1A62  
              _trail_timer_low 00C3                             l31 1AFE                             l53 1C68  
                           l62 1AB0                             l71 191E                             l56 1DD0  
                           l80 1BBC                             l81 1BC4                             l65 1A10  
                           l74 1BF0                             l90 1144                             l75 1BF8  
                           l59 19C0                             l76 1C00                             l68 1A60  
                           l79 1BB4                   ___awdiv@sign 0010            ___wmul@multiplicand 0007  
             _trail_timer_high 00D7               _color_read_Clear 1A12               _color_read_Green 19C2  
            ??_Interrupts_init 0005                            l163 1762                            l261 1D3E  
                          l270 1EA4                            l415 1E0E                            l264 1D64  
                          l273 1EAE                            l258 1CE8                            l267 1EB8  
                          l460 1D3C                            l276 1E9A                            l279 1B88  
                          l463 1E40                            l473 1E28                            l635 1E8E  
                          l469 1D12                            l649 1D8A                            l586 1DF0  
                          l880 1578                            l893 1628                            _abs 1C02  
                          _max 1BC6                            _min 1B8A                   ___awmod@sign 000A  
                          wreg 0FE8                    _squareDelay 0030                    main@display 006F  
                         ?_abs 000B                           l1140 185C                           l1150 18C0  
                         l1147 1864                           l1157 18C8                           l1405 1EBA  
                         l3111 14C8                           l1327 1B46                           l3121 14EE  
                         l3113 14D0                           l2401 1B86                           l3201 1C02  
                         l3131 1526                           l3123 14F6                           l3115 14D4  
                         l3107 14B6                           l3203 1C10                           l3211 117C  
                         l3141 1552                           l3133 152C                           l3125 1508  
                         l3117 14E2                           l3109 14BA                           l3301 10C8  
                         l2501 1A62                           l3221 11D6                           l3213 1188  
                         l3205 1146                           l1382 1C34                           l1374 1968  
                         l3135 1542                           l3127 1510                           l3143 1558  
                         l3119 14EA                           l3311 1132                           l3303 10D0  
                         l2503 1AA8                           l3151 157A                           l3231 1260  
                         l3223 11EE                           l3215 118C                           l3207 114E  
                         l1375 1970                           l1368 12F2                           l2273 1D3E  
                         l3145 1568                           l3137 154A                           l3129 1518  
                         l2521 1BE4                           l3305 10E2                           l2513 1A12  
                         l3161 15A6                           l3153 157E                           l1369 1344  
                         l3241 12A6                           l3233 1264                           l3225 11F8  
                         l3217 1196                           l3209 1174                           l3321 1B32  
                         l3313 1B00                           l3401 145E                           l1394 16D2  
                         l2275 1D4E                           l3147 1570                           l3139 154C  
                         l2523 1B8A                           l3307 1112                           l2515 1A58  
                         l2507 19C2                           l3171 15DE                           l3163 15AE  
                         l3155 158C                           l1379 1C1C                           l3243 12B8  
                         l3235 1276                           l3227 1210                           l3251 12FE  
                         l3219 11B6                           l3323 1B3E                           l3315 1B0A  
                         l3403 148A                           l3331 135E                           l2613 1D16  
                         l2381 1E96                           l2525 1BA8                           l3309 1120  
                         l2509 1A08                           l2621 1E2A                           l3181 1618  
                         l3173 15F4                           l3165 15C0                           l3157 1594  
                         l3261 133C                           l3253 1306                           l3245 12C0  
                         l3237 1286                           l3229 1244                           l3317 1B12  
                         l3405 1492                           l3341 1380                           l3333 136A  
                         l2615 1D26                           l2375 1EB0                           l2383 1EA6  
                         l2631 17F2                           l2519 1BC6                           l2391 1B4A  
                         l3183 1620                           l3175 15FC                           l3167 15C8  
                         l3159 1598                           l3191 164A                           l3247 12DE  
                         l3239 1296                           l3271 1948                           l3319 1B1A  
                         l3407 1496                           l3351 139C                           l3343 1388  
                         l3335 1370                           l3327 1346                           l2617 1D2A  
                         l2481 1CC0                           l2377 1EB4                           l2385 1EAA  
                         l2641 182A                           l2633 17FA                           l2625 1D66  
                         l3281 0EE4                           l3273 0E1A                           l2393 1B4E  
                         l2801 1DFE                           l3177 1602                           l3169 15D0  
                         l3193 1654                           l3249 12E0                           l3257 1312  
                         l3265 1920                           l3361 13C4                           l3353 13A4  
                         l3345 1390                           l3337 1374                           l3329 135E  
                         l2811 1DDA                           l2619 1D3A                           l2491 1CD6  
                         l2483 1CCA                           l2379 1E92                           l2651 1856  
                         l2643 1830                           l2635 180C                           l2627 1D82  
                         l3291 1004                           l3283 0F02                           l3275 0EBE  
                         l2395 1B56                           l2387 1E9C                           l2731 16D4  
                         l2803 1E08                           l3179 1608                           l3195 1670  
                         l3187 162A                           l3259 1334                           l3267 1924  
                         l3371 13EC                           l3363 13CC                           l3355 13AC  
                         l3347 1394                           l3339 1378                           l2813 1DDC  
                         l2485 1CD0                           l2493 1DB4                           l2645 1846  
                         l2637 1814                           l2661 1896                           l2653 1866  
                         l3293 1020                           l3285 0F6E                           l3277 0ECA  
                         l2397 1B5E                           l2389 1EA0                           l2741 173C  
                         l2733 16E4                           l2805 1E0A                           l3197 16A2  
                         l3189 163A                           l3269 1930                           l3381 1400  
                         l3373 13F0                           l3365 13D4                           l3357 13B4  
                         l3349 1398                           l2815 1DEE                           l2487 1CD2  
                         l2647 184E                           l2639 181C                           l2663 18AC  
                         l2655 1878                           l3295 1042                           l3287 0F8A  
                         l3279 0EDC                           l2399 1B84                           l2495 1972  
                         l2751 1756                           l2743 173E                           l2735 170A  
                         l2807 1E0C                           l3391 1418                           l3383 1402  
                         l3375 13F4                           l3367 13DC                           l3359 13BC  
                         l2817 1E82                           l2809 1DD2                           l2833 1CEA  
                         l2489 1CD4                           l2681 1C3A                           l2649 1850  
                         l2665 18B4                           l2657 1880                           l3297 109A  
                         l3289 0FAC                           l2497 19B8                           l2753 1760  
                         l2745 1748                           l2737 170E                           l2841 1E10  
                         l3393 1422                           l3385 1404                           l3377 13F8  
                         l3369 13E4                           l2835 1CEE                           l2683 1C44  
                         l2667 18BA                           l2659 1888                           l3299 10B6  
                         l2747 174A                           l2739 1732                           l2843 1E24  
                         l3395 1428                           l3387 1408                           l3379 13FC  
                         l2837 1CFA                           l2677 1AB2                           l2685 1C54  
                         l2749 1754                           l3397 144A                           l3389 140A  
                         l2839 1CFC                           l2687 1C5E                           l2679 1C36  
                         l3399 1452                           l2689 18CA                           l2797 1DF2  
                         ?_max 0005                           l2799 1DFC                           ?_min 0005  
                         STR_1 0E01                           STR_2 0E10                           STR_3 0E15  
                         u1000 1D4E                           u1001 1D4A                           u1010 1D64  
                         u1011 1D60                           u2000 1C10                           u2001 1C0C  
                         u2010 1174                           u2011 1170                           u2100 12F2  
                         u2020 11B6                           u2101 12EE                           u2021 11B2  
                         u2030 11D6                           u2110 1968                           u2031 11D2  
                         u2111 1964                           u2120 0EDC                           u1208 1B74  
                         u2040 120C                           u2121 0ED8                           u2041 1206  
                         u1330 1BE4                           u2130 0F02                           u2050 120E  
                         u1331 1BE0                           u2131 0EFE                           u1340 1BA8  
                         u2140 0FAC                           u2060 1276                           u1341 1BA4  
                         u2141 0FA8                           u2061 1272                           u1510 1D26  
                         u2150 1042                           u1190 1B72                           u2070 1286  
                         u1511 1D22                           u2151 103E                           u1191 1B6A  
                         u2071 1282                           u2160 10C8                           u1520 1E3E  
                         u2080 1296                           u2208 143C                   _BAUD4CONbits 0EE9  
                         u2161 10C4                           u1521 1E38                           u2081 1292  
                         u2170 10E2                           u1530 1E40                           u2090 12A6  
                         u2171 10DE                           u2091 12A2                           u2227 1350  
                         u1540 180C                           u2180 1418                           u1541 1808  
                         u2237 14A0                           u2181 1414                           u1550 182A  
                         u2190 143A                           u2247 1C4A                           u1551 1826  
                         u2191 1432                           u1560 1846                           u1561 1842  
                         u1570 1878                           _T2PR 0FBC                           u1571 1874  
                         u1580 1896                           u1900 158C                           u1581 1892  
                         u1901 1588                           u1670 1D12                           u1590 18AC  
                         u1910 15A6                           u1671 1D0E                           u1591 18A8  
                         u1911 15A2                           u1840 14C8                           u1680 1E24  
                         u1920 15C0                           u1841 14C4                           u1681 1E20  
                         u1921 15BC                    main@readHSV 00A1                           u1850 14E2  
                         u1930 15DE                           u1851 14DE                           u1931 15DA  
                         u1860 1508                           u1940 15F4                           u1861 1504  
                         u1941 15F0                           u1870 1526                           u1950 1618  
                         u1871 1522                           u1951 1614                           u1880 1542  
                         u1960 163A                           u1881 153E                           u1961 1636  
                         u1890 1568                           u1970 164A                           u1891 1564  
                         u1971 1646                           u1980 1670                           u1981 166C  
                         u1990 16A2                           u1991 169E                           abs@a 000B  
                         _dbuf 013C                           _main 1346                           _prec 0048  
                         _nout 0044                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         max@a 0005                           max@b 0007                           btemp 0050  
                         min@a 0005                           min@b 0007                           prodh 0FF4  
                         prodl 0FF3                           start 0074         __end_of_color_read_Red 19C2  
              __end_of_HighISR 0074                   ___param_bank 0000                          ??_abs 000D  
                        ??_max 0009                          ??_min 0009                          ?_main 0001  
           _timer_high_pointer 003F                __end_of___awdiv 157A                __end_of___awmod 162A  
              ___awdiv@divisor 000D                __end_of___lwdiv 1866                   main@readRGBC 00B9  
              __end_of___lwmod 18CA                          i2l463 1E58                          i2l456 1C94  
                        i2l640 0024                          i2l449 1DB0                          i2l642 0022  
                        i2l643 0052                          i2l646 0068                ___awdiv@counter 000F  
                 vfpfcnvrt@cnt 0018                   vfpfcnvrt@fmt 0014                          _TMR0H 0FD4  
                        _TMR0L 0FD3     __end_of_I2C_2_Master_Start 1EBA     __end_of_I2C_2_Master_Write 1E9C  
                  _turningGear 0040                          _flags 004A                          _fputc 162A  
                        _width 0046                          _putch 1EBA              _turnRight135Delay 0036  
                        tablat 0FF5                _turnLeft90Delay 003C                          ttemp5 0051  
                        ttemp6 0054                          ttemp7 0058                          status 0FD8  
                        wtemp8 0051                __end_of_sprintf 1B48            getHSVval@saturation 0023  
      __end_of_color_read_Blue 1AB2          _I2C_2_Master_RepStart 1E9C             putCharToRxBuf@byte 0001  
              ?_color_read_Red 0009                __initialization 1764                   __end_of_main 14B6  
              i2_isDataInTxBuf 1E42             putCharToTxBuf@byte 0005                         ??_main 002E  
                __activetblptr 0003                 _getHSVval$3064 001F                 _getHSVval$3065 0021  
               _getHSVval$3066 0027                         ?_fputc 0005                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
             ___awdiv@dividend 000B                         ?_putch 0001                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         _RD6PPS 0E70                         _RE4PPS 0E76  
                       i2l2013 1E42                         i2l3101 003A                         i2l3103 004E  
                       i2l3105 0062                         i2l3093 0012                         i2l3099 0032  
                       i2l2851 1DAE                         i2l2853 1C6A                         i2l2845 1D8E  
                       i2l2855 1C7A                         i2l2847 1D9E                         i2l2857 1C7E  
                       i2l2849 1DA2                         _RG6PPS 0E88                  vfpfcnvrt@done 0017  
                    ??_HighISR 0003       __end_of_color_click_init 1C6A                         _RX4PPS 0E15  
                       _TX4REG 0EE4               _turnLeft135Delay 0038                  ??_Timer0_init 0005  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0023               _getCharFromTxBuf 1C6A  
                       ___wmul 1D66                      ??___awdiv 000F                      ??___awmod 0009  
                    ??___lwdiv 000F                      ??___lwmod 0016                         clear_0 17CA  
                       clear_1 17D6                         clear_2 17E2               ___awdiv@quotient 0011  
              ___awmod@divisor 0007                         isa$std 0001                ___awmod@counter 0009  
                       fputc@c 0005              ?_TxBufferedString 0006                   __pdataCOMRAM 0030  
            _timer_low_pointer 003E                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8             ??_TxBufferedString 0007  
                       putch@c 0001               __end_of_vfprintf 1972              ??_initDCmotorsPWM 0007  
                    ??_sprintf 002E              _buggy_lights_init 1AB2          __end_of_isDataInTxBuf 1E42  
                   __accesstop 0060        __end_of__initialization 17E8       __end_of_color_read_Clear 1A62  
     __end_of_color_read_Green 1A12         ?_I2C_2_Master_RepStart 0001        __end_ofi2_isDataInTxBuf 1E5A  
           ?_buggy_lights_init 0001                  ___rparam_used 0001               ?_color_read_Blue 0009  
              _Interrupts_init 1E82                 __pcstackCOMRAM 0001                   __pidataBANK0 1C96  
                 __pidataBANK1 1E6E            ??_buggy_lights_init 0005                  __end_of_fputc 16D4  
                __end_of_putch 1EBC            __end_of_Timer0_init 1DF2                        ??_fputc 0008  
    __end_of_buggy_lights_init 1B00                        ??_putch 0005                     __pbssBANK0 00EB  
                   __pbssBANK1 0100                     _getRGBCval 18CA              _color_writetoaddr 1DB2  
                 _T2CLKCONbits 0FBF             ?_color_writetoaddr 0007                        ?___wmul 0005  
          ??_color_writetoaddr 0008                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
                      i2u76_40 1E56                        i2u76_41 1E50                        i2u77_40 1E58  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5        __end_of_Interrupts_init 1E90  
            __end_of_getHSVval 1146         color_writetoaddr@value 0007               ??_color_read_Red 000B  
                      _HighISR 0008      __end_of_color_writetoaddr 1DD2               ?i2_isDataInTxBuf 0001  
           _I2C_2_Master_Start 1EB0                     _initUSART4 1DF2             _I2C_2_Master_Write 1E90  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000E  
                  _Timer0_init 1DD2                        ___awdiv 14B6                        ___awmod 157A  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 17F2            ?_I2C_2_Master_Write 0001  
                      ___lwmod 1866                      ?_vfprintf 0020                   __psmallconst 0E00  
                      __pcinit 1764                        __ramtop 0E00                        __ptext0 1346  
                      __ptext1 1B00                        __ptext2 1920                        __ptext3 1146  
                      __ptext4 162A                        __ptext5 1EBA                        __ptext6 1C02  
                      __ptext7 157A                        __ptext8 1E10                        __ptext9 1E2A  
                    _T2CONbits 0FBD               ___awmod@dividend 0005                      _T2HLTbits 0FBE  
                _RxBufWriteCnt 004F       __end_of_getCharFromTxBuf 1C96                        _sprintf 1B00  
         ??_I2C_2_Master_Start 0006           ??_I2C_2_Master_Write 0006           end_of_initialization 17E8  
            __end_of_sendTxBuf 1E2A                    ?_getRGBCval 0010                        fputc@fp 0007  
            ?_color_click_init 0001             ??_color_click_init 0009              __end_of_vfpfcnvrt 1346  
                      postdec1 0FE5                        postdec2 0FDD                        postinc0 0FEE  
                      postinc1 0FE6                        postinc2 0FDE               vfpfcnvrt@convarg 001B  
                   ??_vfprintf 0023                _initDCmotorsPWM 16D4                      _PORTFbits 0F8E  
                    _TRISAbits 0F81                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
                    _TRISHbits 0F88       color_writetoaddr@address 0008        ??_I2C_2_Master_RepStart 0006  
             ?_Interrupts_init 0001                    _CCP1CONbits 0FAB              ?_color_read_Clear 0009  
                 _EUSART4RXbuf 00EB                   _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0009                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22                     main@motorL 00A7                     main@motorR 00B0  
           ??_color_read_Clear 000B             ??_color_read_Green 000B                     max@max_val 000A  
                  vfpfcnvrt@ap 0015                    vfpfcnvrt@cp 001A                    vfpfcnvrt@fp 0013  
               __end_of___wmul 1D8C                  __pidataCOMRAM 1E5A                     min@min_val 000A  
          color_read_Clear@tmp 000E            start_initialization 1764                    __end_of_abs 1C36  
                  __end_of_max 1C02                    __end_of_min 1BC6                  _TxBufWriteCnt 004D  
             _turnRight90Delay 003A            color_read_Green@tmp 000E        __end_of_initDCmotorsPWM 1764  
                  vfprintf@fmt 0021                       ??___wmul 0009                 _putCharToRxBuf 1D8C  
               _putCharToTxBuf 1D14                    __pdataBANK0 00C1                    __pdataBANK1 015C  
                  __pbssCOMRAM 0044                  __pcstackBANK0 0060                      _backtrack 004B  
                     ?_HighISR 0001                      _getHSVval 0E1A               ___lwdiv@dividend 000B  
                 ?_Timer0_init 0001         __end_of_putCharToRxBuf 1DB2         __end_of_putCharToTxBuf 1D3E  
                    __pintcode 0008                       ?___awdiv 000B                       ?___awmod 0005  
                     ?___lwdiv 000B                       ?___lwmod 0012         TxBufferedString@string 0006  
         I2C_2_Master_Read@ack 0007           I2C_2_Master_Read@tmp 0008                    __smallconst 0E00  
            _I2C_2_Master_Idle 1D3E              _I2C_2_Master_Init 1CC0              _I2C_2_Master_Read 1B48  
            _I2C_2_Master_Stop 1EA6                   _RxBufReadCnt 004E             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000F                  _headbuttDelay 0032       initDCmotorsPWM@PWMperiod 0005  
                     ?_sprintf 0024              ?_getCharFromTxBuf 0001                      _rampDelay 0043  
           ??_getCharFromTxBuf 0001                   ??_getRGBCval 0011            ??_I2C_2_Master_Idle 0005  
          ??_I2C_2_Master_Init 0005            ??_I2C_2_Master_Read 0006                 ___wmul@product 0009  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0006                       _LATCbits 0F7B  
                _isDataInTxBuf 1E2A                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E               _TxBufferedString 1CEA                       _LATGbits 0F7F  
                     _LATHbits 0F80                      _sendTxBuf 1E10                       _PIE0bits 0E29  
                     _PIE4bits 0E2D                   getHSVval@hue 0025                     ?_getHSVval 0017  
                     i2u170_40 1C7A                       i2u170_41 1C76                       i2u180_40 0022  
                     i2u180_41 001E                       i2u181_40 0032                       i2u181_41 002E  
                     i2u182_40 004E                       i2u182_41 004A                       i2u183_40 0062  
                     i2u183_41 005E                       _PIR0bits 0E33                       i2u169_40 1D9E  
                     i2u169_41 1D9A                       _PIR4bits 0E37                ?_putCharToRxBuf 0001  
             ?_initDCmotorsPWM 0005                ?_putCharToTxBuf 0001                       _SSP2CON2 0EDA  
                     _SSP2STAT 0ED8                      _vfpfcnvrt 1146      __end_of_I2C_2_Master_Idle 1D66  
    __end_of_I2C_2_Master_Init 1CEA      __end_of_I2C_2_Master_Read 1B8A              ___wmul@multiplier 0005  
    __end_of_I2C_2_Master_Stop 1EB0    I2C_2_Master_Write@data_byte 0006             __end_of_getRGBCval 1920  
            ??_color_read_Blue 000B                   _TxBufReadCnt 004C                     vfpfcnvrt@c 001F  
                    copy_data0 1778                      copy_data1 1798                      copy_data2 17B8  
               ?_isDataInTxBuf 0001  __end_of_I2C_2_Master_RepStart 1EA6             color_read_Blue@tmp 000E  
                   ?_sendTxBuf 0001                   ??_initUSART4 0005                       __Hrparam 0000  
                   vfprintf@ap 0022                       __Lrparam 0000                     vfprintf@fp 0020  
              getHSVval@maxRGB 002B                getHSVval@minRGB 001D                     ?_vfpfcnvrt 0013  
                   _ANSELDbits 0EA7                     _ANSELFbits 0EB4                     sprintf@fmt 0025  
                   sprintf@ret 0060                     _T0CON0bits 0FD5                     _T0CON1bits 0FD6  
              ___lwdiv@divisor 000D             __end_of_initUSART4 1E10                ___lwdiv@counter 0011  
                     __ptext10 1DF2                       __ptext11 16D4                       __ptext20 1B8A  
                     __ptext12 18CA                       __ptext21 1BC6                       __ptext13 1972  
                     __ptext30 1EB0                       __ptext22 1D66                       __ptext14 19C2  
                     __ptext31 1D3E                       __ptext23 1866                       __ptext15 1A12  
                     __ptext40 1D8C                       __ptext32 1CC0                       __ptext24 17F2  
                     __ptext16 1A62                       __ptext41 1C6A                       __ptext33 1AB2  
                     __ptext25 14B6                       __ptext17 1E9C                       __ptext34 1CEA  
                     __ptext26 1C36                       __ptext18 1B48                       __ptext35 1D14  
                     __ptext27 1DB2                       __ptext19 0E1A                       __ptext36 1DD2  
                     __ptext28 1E90                       __ptext37 1E82                       __ptext29 1EA6  
                     __ptext39 1E42                    getRGBCval@p 0010                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                    ??_getHSVval 0019                    getHSVval@p1 0017  
                  getHSVval@p2 0018                       isa$xinst 0000                     _RC4STAbits 0EE7  
                     int$flags 0050                       _vfprintf 1920                     _INTCONbits 0FF2  
            ??i2_isDataInTxBuf 0001                 getHSVval@range 0029                ??_isDataInTxBuf 0005  
                     intlevel2 0000                      sprintf@ap 0062                   _topGearRight 0041  
            _manoeuvre_pointer 00C1               ___lwmod@dividend 0012                    ??_sendTxBuf 0005  
                  ??_vfpfcnvrt 0016               _color_click_init 1C36                    _topGearLeft 0042  
     __end_of_TxBufferedString 1D14                       sprintf@f 0063                       sprintf@s 0024  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                ___lwmod@divisor 0014  
              ___lwmod@counter 0016                _trail_manoeuvre 015C                     _TX4STAbits 0EE8  
             ??_putCharToRxBuf 0001               ??_putCharToTxBuf 0005  
