

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 26 16:24:31 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17   000000                     
    18                           ; Generated 21/07/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F67K40 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     
    53                           	psect	idataCOMRAM
    54   000FE4                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _squareDelay
    58   000FE4  012C               	dw	300
    59                           
    60                           ;initializer for _headbuttDelay
    61   000FE6  0046               	dw	70
    62                           
    63                           ;initializer for _turn180Delay
    64   000FE8  01FE               	dw	510
    65                           
    66                           ;initializer for _turnRight135Delay
    67   000FEA  012C               	dw	300
    68                           
    69                           ;initializer for _turnLeft135Delay
    70   000FEC  012C               	dw	300
    71                           
    72                           ;initializer for _turnRight90Delay
    73   000FEE  00AF               	dw	175
    74                           
    75                           ;initializer for _turnLeft90Delay
    76   000FF0  00AF               	dw	175
    77                           
    78                           ;initializer for _turningGear
    79   000FF2  2A                 	db	42
    80                           
    81                           ;initializer for _topGearRight
    82   000FF3  20                 	db	32
    83                           
    84                           ;initializer for _topGearLeft
    85   000FF4  1E                 	db	30
    86                           
    87                           ;initializer for _rampDelay
    88   000FF5  08                 	db	8
    89   000000                     _LATGbits	set	3967
    90   000000                     _LATEbits	set	3965
    91   000000                     _TRISGbits	set	3975
    92   000000                     _TRISEbits	set	3973
    93   000000                     _LATFbits	set	3966
    94   000000                     _LATHbits	set	3968
    95   000000                     _TRISFbits	set	3974
    96   000000                     _TRISHbits	set	3976
    97   000000                     _SSP2CON2bits	set	3802
    98   000000                     _SSP2CLKPPS	set	3612
    99   000000                     _SSP2DATPPS	set	3613
   100   000000                     _RC7PPS	set	3689
   101   000000                     _RE2PPS	set	3700
   102   000000                     _LATCbits	set	3963
   103   000000                     _LATDbits	set	3964
   104   000000                     _TRISDbits	set	3972
   105   000000                     _T2PR	set	4028
   106   000000                     _T2CONbits	set	4029
   107   000000                     _CCPR2H	set	4006
   108   000000                     _CCPR1H	set	4010
   109   000000                     _TRISCbits	set	3971
   110   000000                     _RE4PPS	set	3702
   111   000000                     _RG6PPS	set	3720
   112   000000                     _RD5PPS	set	3695
   113   000000                     _ANSELDbits	set	3751
   114   000000                     _SSP2ADD	set	3798
   115   000000                     _SSP2CON1bits	set	3801
   116   000000                     _CCPR4H	set	3873
   117   000000                     _CCPR3H	set	3877
   118   000000                     _T2CLKCONbits	set	4031
   119   000000                     _T2HLTbits	set	4030
   120   000000                     _CCP1CONbits	set	4011
   121   000000                     _CCPTMRS0bits	set	4013
   122   000000                     _CCP2CONbits	set	4007
   123   000000                     _CCP3CONbits	set	3878
   124   000000                     _CCP4CONbits	set	3874
   125   000000                     _SSP2CON2	set	3802
   126   000000                     _SSP2STAT	set	3800
   127   000000                     _SSP2BUF	set	3797
   128   000000                     _RD6PPS	set	3696
   129                           
   130                           ; #config settings
   131                           
   132                           	psect	cinit
   133   000FA8                     __pcinit:
   134                           	callstack 0
   135   000FA8                     start_initialization:
   136                           	callstack 0
   137   000FA8                     __initialization:
   138                           	callstack 0
   139                           
   140                           ; Initialize objects allocated to COMRAM (18 bytes)
   141                           ; load TBLPTR registers with __pidataCOMRAM
   142   000FA8  0EE4               	movlw	low __pidataCOMRAM
   143   000FAA  6EF6               	movwf	tblptrl,c
   144   000FAC  0E0F               	movlw	high __pidataCOMRAM
   145   000FAE  6EF7               	movwf	tblptrh,c
   146   000FB0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   147   000FB2  6EF8               	movwf	tblptru,c
   148   000FB4  EE00  F017         	lfsr	0,__pdataCOMRAM
   149   000FB8  EE10 F012          	lfsr	1,18
   150   000FBC                     copy_data0:
   151   000FBC  0009               	tblrd		*+
   152   000FBE  CFF5 FFEE          	movff	tablat,postinc0
   153   000FC2  50E5               	movf	postdec1,w,c
   154   000FC4  50E1               	movf	fsr1l,w,c
   155   000FC6  E1FA               	bnz	copy_data0
   156   000FC8                     end_of_initialization:
   157                           	callstack 0
   158   000FC8                     __end_of__initialization:
   159                           	callstack 0
   160   000FC8  0100               	movlb	0
   161   000FCA  EF96  F007         	goto	_main	;jump to C main() function
   162                           
   163                           	psect	dataCOMRAM
   164   000017                     __pdataCOMRAM:
   165                           	callstack 0
   166   000017                     _squareDelay:
   167                           	callstack 0
   168   000017                     	ds	2
   169   000019                     _headbuttDelay:
   170                           	callstack 0
   171   000019                     	ds	2
   172   00001B                     _turn180Delay:
   173                           	callstack 0
   174   00001B                     	ds	2
   175   00001D                     _turnRight135Delay:
   176                           	callstack 0
   177   00001D                     	ds	2
   178   00001F                     _turnLeft135Delay:
   179                           	callstack 0
   180   00001F                     	ds	2
   181   000021                     _turnRight90Delay:
   182                           	callstack 0
   183   000021                     	ds	2
   184   000023                     _turnLeft90Delay:
   185                           	callstack 0
   186   000023                     	ds	2
   187   000025                     _turningGear:
   188                           	callstack 0
   189   000025                     	ds	1
   190   000026                     _topGearRight:
   191                           	callstack 0
   192   000026                     	ds	1
   193   000027                     _topGearLeft:
   194                           	callstack 0
   195   000027                     	ds	1
   196   000028                     _rampDelay:
   197                           	callstack 0
   198   000028                     	ds	1
   199                           
   200                           	psect	cstackCOMRAM
   201   000001                     __pcstackCOMRAM:
   202                           	callstack 0
   203   000001                     ??_lights_flashing:
   204   000001                     initDCmotorsPWM@PWMperiod:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0x0
   208   000001                     	ds	2
   209   000003                     ??_main:
   210                           
   211                           ; 1 bytes @ 0x2
   212   000003                     	ds	2
   213   000005                     main@motorL:
   214                           	callstack 0
   215                           
   216                           ; 9 bytes @ 0x4
   217   000005                     	ds	9
   218   00000E                     main@motorR:
   219                           	callstack 0
   220                           
   221                           ; 9 bytes @ 0xD
   222   00000E                     	ds	9
   223                           
   224 ;;
   225 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   226 ;;
   227 ;; *************** function _main *****************
   228 ;; Defined at:
   229 ;;		line 23 in file "main.c"
   230 ;; Parameters:    Size  Location     Type
   231 ;;		None
   232 ;; Auto vars:     Size  Location     Type
   233 ;;  motorR          9   13[COMRAM] struct DC_motor
   234 ;;  motorL          9    4[COMRAM] struct DC_motor
   235 ;;  PWMcycle        2    0        unsigned int 
   236 ;;  backtrack       1    0        unsigned char 
   237 ;; Return value:  Size  Location     Type
   238 ;;                  1    wreg      void 
   239 ;; Registers used:
   240 ;;		wreg, status,2, status,0, cstack
   241 ;; Tracked objects:
   242 ;;		On entry : 0/0
   243 ;;		On exit  : 0/0
   244 ;;		Unchanged: 0/0
   245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   247 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   248 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   249 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   250 ;;Total ram usage:       20 bytes
   251 ;; Hardware stack levels required when called: 1
   252 ;; This function calls:
   253 ;;		_buggy_lights_init
   254 ;;		_initDCmotorsPWM
   255 ;;		_lights_flashing
   256 ;; This function is called by:
   257 ;;		Startup code after reset
   258 ;; This function uses a non-reentrant model
   259 ;;
   260                           
   261                           	psect	text0
   262   000F2C                     __ptext0:
   263                           	callstack 0
   264   000F2C                     _main:
   265                           	callstack 30
   266   000F2C                     
   267                           ;main.c: 24:     _delay((unsigned long)((500)*(64000000/4000.0)));
   268   000F2C  0E29               	movlw	41
   269   000F2E  6E04               	movwf	(??_main+1)^0,c
   270   000F30  0E96               	movlw	150
   271   000F32  6E03               	movwf	??_main^0,c
   272   000F34  0E7F               	movlw	127
   273   000F36                     u357:
   274   000F36  2EE8               	decfsz	wreg,f,c
   275   000F38  D7FE               	bra	u357
   276   000F3A  2E03               	decfsz	??_main^0,f,c
   277   000F3C  D7FC               	bra	u357
   278   000F3E  2E04               	decfsz	(??_main+1)^0,f,c
   279   000F40  D7FA               	bra	u357
   280   000F42  0000               	nop	
   281   000F44                     
   282                           ;main.c: 27:     initDCmotorsPWM(PWMcycle);
   283   000F44  0E00               	movlw	0
   284   000F46  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   285   000F48  0E63               	movlw	99
   286   000F4A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   287   000F4C  EC4E  F007         	call	_initDCmotorsPWM	;wreg free
   288   000F50                     
   289                           ;main.c: 29:     struct DC_motor motorL, motorR;;main.c: 31:     motorL.power = 0;
   290   000F50  0E00               	movlw	0
   291   000F52  6E05               	movwf	main@motorL^0,c
   292   000F54                     
   293                           ;main.c: 32:     motorL.direction = 1;
   294   000F54  0E01               	movlw	1
   295   000F56  6E06               	movwf	(main@motorL+1)^0,c
   296   000F58                     
   297                           ;main.c: 33:     motorL.brakemode = 1;
   298   000F58  0E01               	movlw	1
   299   000F5A  6E07               	movwf	(main@motorL+2)^0,c
   300   000F5C                     
   301                           ;main.c: 34:     motorL.PWMperiod = PWMcycle;
   302   000F5C  0E00               	movlw	0
   303   000F5E  6E09               	movwf	(main@motorL+4)^0,c
   304   000F60  0E63               	movlw	99
   305   000F62  6E08               	movwf	(main@motorL+3)^0,c
   306   000F64                     
   307                           ;main.c: 35:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   308   000F64  0EAA               	movlw	170
   309   000F66  6E0A               	movwf	(main@motorL+5)^0,c
   310   000F68  0E0F               	movlw	15
   311   000F6A  6E0B               	movwf	(main@motorL+6)^0,c
   312   000F6C                     
   313                           ;main.c: 36:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   314   000F6C  0EA6               	movlw	166
   315   000F6E  6E0C               	movwf	(main@motorL+7)^0,c
   316   000F70  0E0F               	movlw	15
   317   000F72  6E0D               	movwf	(main@motorL+8)^0,c
   318   000F74                     
   319                           ;main.c: 38:     motorR.power = 0;
   320   000F74  0E00               	movlw	0
   321   000F76  6E0E               	movwf	main@motorR^0,c
   322   000F78                     
   323                           ;main.c: 39:     motorR.direction = 1;
   324   000F78  0E01               	movlw	1
   325   000F7A  6E0F               	movwf	(main@motorR+1)^0,c
   326   000F7C                     
   327                           ;main.c: 40:     motorR.brakemode = 1;
   328   000F7C  0E01               	movlw	1
   329   000F7E  6E10               	movwf	(main@motorR+2)^0,c
   330   000F80                     
   331                           ;main.c: 41:     motorR.PWMperiod = PWMcycle;
   332   000F80  0E00               	movlw	0
   333   000F82  6E12               	movwf	(main@motorR+4)^0,c
   334   000F84  0E63               	movlw	99
   335   000F86  6E11               	movwf	(main@motorR+3)^0,c
   336   000F88                     
   337                           ;main.c: 42:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   338   000F88  0E25               	movlw	37
   339   000F8A  6E13               	movwf	(main@motorR+5)^0,c
   340   000F8C  0E0F               	movlw	15
   341   000F8E  6E14               	movwf	(main@motorR+6)^0,c
   342   000F90                     
   343                           ;main.c: 43:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   344   000F90  0E21               	movlw	33
   345   000F92  6E15               	movwf	(main@motorR+7)^0,c
   346   000F94  0E0F               	movlw	15
   347   000F96  6E16               	movwf	(main@motorR+8)^0,c
   348   000F98                     
   349                           ;main.c: 45:     buggy_lights_init();
   350   000F98  ECE7  F007         	call	_buggy_lights_init	;wreg free
   351   000F9C                     l1504:
   352                           
   353                           ;main.c: 59:         lights_flashing();
   354   000F9C  EC01  F007         	call	_lights_flashing	;wreg free
   355   000FA0  EFCE  F007         	goto	l1504
   356   000FA4  EF00  F000         	goto	start
   357   000FA8                     __end_of_main:
   358                           	callstack 0
   359                           
   360 ;; *************** function _lights_flashing *****************
   361 ;; Defined at:
   362 ;;		line 21 in file "buggy_lights.c"
   363 ;; Parameters:    Size  Location     Type
   364 ;;		None
   365 ;; Auto vars:     Size  Location     Type
   366 ;;		None
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, status,2, status,0
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   378 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   379 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   380 ;;Total ram usage:        2 bytes
   381 ;; Hardware stack levels used: 1
   382 ;; This function calls:
   383 ;;		Nothing
   384 ;; This function is called by:
   385 ;;		_main
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           	psect	text1
   390   000E02                     __ptext1:
   391                           	callstack 0
   392   000E02                     _lights_flashing:
   393                           	callstack 30
   394   000E02                     
   395                           ;buggy_lights.c: 23:     LATDbits.LATD4 = !LATDbits.LATD4;
   396   000E02  A87C               	btfss	124,4,c	;volatile
   397   000E04  EF06  F007         	goto	u191
   398   000E08  EF0A  F007         	goto	u190
   399   000E0C                     u191:
   400   000E0C  6A01               	clrf	??_lights_flashing^0,c
   401   000E0E  2A01               	incf	??_lights_flashing^0,f,c
   402   000E10  EF0B  F007         	goto	u208
   403   000E14                     u190:
   404   000E14  6A01               	clrf	??_lights_flashing^0,c
   405   000E16                     u208:
   406   000E16  3A01               	swapf	??_lights_flashing^0,f,c
   407   000E18  507C               	movf	124,w,c	;volatile
   408   000E1A  1801               	xorwf	??_lights_flashing^0,w,c
   409   000E1C  0BEF               	andlw	-17
   410   000E1E  1801               	xorwf	??_lights_flashing^0,w,c
   411   000E20  6E7C               	movwf	124,c	;volatile
   412                           
   413                           ;buggy_lights.c: 24:     LATDbits.LATD3 = !LATDbits.LATD3;
   414   000E22  A67C               	btfss	124,3,c	;volatile
   415   000E24  EF16  F007         	goto	u211
   416   000E28  EF1A  F007         	goto	u210
   417   000E2C                     u211:
   418   000E2C  6A01               	clrf	??_lights_flashing^0,c
   419   000E2E  2A01               	incf	??_lights_flashing^0,f,c
   420   000E30  EF1B  F007         	goto	u228
   421   000E34                     u210:
   422   000E34  6A01               	clrf	??_lights_flashing^0,c
   423   000E36                     u228:
   424   000E36  4601               	rlncf	??_lights_flashing^0,f,c
   425   000E38  4601               	rlncf	??_lights_flashing^0,f,c
   426   000E3A  4601               	rlncf	??_lights_flashing^0,f,c
   427   000E3C  507C               	movf	124,w,c	;volatile
   428   000E3E  1801               	xorwf	??_lights_flashing^0,w,c
   429   000E40  0BF7               	andlw	-9
   430   000E42  1801               	xorwf	??_lights_flashing^0,w,c
   431   000E44  6E7C               	movwf	124,c	;volatile
   432   000E46                     
   433                           ;buggy_lights.c: 25:     _delay((unsigned long)((500)*(64000000/4000.0)));
   434   000E46  0E29               	movlw	41
   435   000E48  6E02               	movwf	(??_lights_flashing+1)^0,c
   436   000E4A  0E96               	movlw	150
   437   000E4C  6E01               	movwf	??_lights_flashing^0,c
   438   000E4E  0E7F               	movlw	127
   439   000E50                     u367:
   440   000E50  2EE8               	decfsz	wreg,f,c
   441   000E52  D7FE               	bra	u367
   442   000E54  2E01               	decfsz	??_lights_flashing^0,f,c
   443   000E56  D7FC               	bra	u367
   444   000E58  2E02               	decfsz	(??_lights_flashing+1)^0,f,c
   445   000E5A  D7FA               	bra	u367
   446   000E5C  0000               	nop	
   447   000E5E                     
   448                           ;buggy_lights.c: 26:     LATFbits.LATF0 = !LATFbits.LATF0;
   449   000E5E  A07E               	btfss	126,0,c	;volatile
   450   000E60  EF34  F007         	goto	u231
   451   000E64  EF38  F007         	goto	u230
   452   000E68                     u231:
   453   000E68  6A01               	clrf	??_lights_flashing^0,c
   454   000E6A  2A01               	incf	??_lights_flashing^0,f,c
   455   000E6C  EF39  F007         	goto	u248
   456   000E70                     u230:
   457   000E70  6A01               	clrf	??_lights_flashing^0,c
   458   000E72                     u248:
   459   000E72  507E               	movf	126,w,c	;volatile
   460   000E74  1801               	xorwf	??_lights_flashing^0,w,c
   461   000E76  0BFE               	andlw	-2
   462   000E78  1801               	xorwf	??_lights_flashing^0,w,c
   463   000E7A  6E7E               	movwf	126,c	;volatile
   464   000E7C                     
   465                           ;buggy_lights.c: 27:     LATHbits.LATH0 = !LATHbits.LATH0;
   466   000E7C  A080               	btfss	128,0,c	;volatile
   467   000E7E  EF43  F007         	goto	u251
   468   000E82  EF47  F007         	goto	u250
   469   000E86                     u251:
   470   000E86  6A01               	clrf	??_lights_flashing^0,c
   471   000E88  2A01               	incf	??_lights_flashing^0,f,c
   472   000E8A  EF48  F007         	goto	u268
   473   000E8E                     u250:
   474   000E8E  6A01               	clrf	??_lights_flashing^0,c
   475   000E90                     u268:
   476   000E90  5080               	movf	128,w,c	;volatile
   477   000E92  1801               	xorwf	??_lights_flashing^0,w,c
   478   000E94  0BFE               	andlw	-2
   479   000E96  1801               	xorwf	??_lights_flashing^0,w,c
   480   000E98  6E80               	movwf	128,c	;volatile
   481   000E9A  0012               	return		;funcret
   482   000E9C                     __end_of_lights_flashing:
   483                           	callstack 0
   484                           
   485 ;; *************** function _initDCmotorsPWM *****************
   486 ;; Defined at:
   487 ;;		line 5 in file "dc_motor.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   490 ;; Auto vars:     Size  Location     Type
   491 ;;		None
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, status,2
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   504 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   505 ;;Total ram usage:        2 bytes
   506 ;; Hardware stack levels used: 1
   507 ;; This function calls:
   508 ;;		Nothing
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text2
   515   000E9C                     __ptext2:
   516                           	callstack 0
   517   000E9C                     _initDCmotorsPWM:
   518                           	callstack 30
   519   000E9C                     
   520                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   521   000E9C  9485               	bcf	133,2,c	;volatile
   522                           
   523                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   524   000E9E  9885               	bcf	133,4,c	;volatile
   525                           
   526                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   527   000EA0  9E83               	bcf	131,7,c	;volatile
   528                           
   529                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   530   000EA2  9C87               	bcf	135,6,c	;volatile
   531                           
   532                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   533   000EA4  947D               	bcf	125,2,c	;volatile
   534                           
   535                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   536   000EA6  987D               	bcf	125,4,c	;volatile
   537                           
   538                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   539   000EA8  9E7B               	bcf	123,7,c	;volatile
   540                           
   541                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   542   000EAA  9C7F               	bcf	127,6,c	;volatile
   543   000EAC                     
   544                           ;dc_motor.c: 18:     RE2PPS=0x05;
   545   000EAC  0E05               	movlw	5
   546   000EAE  010E               	movlb	14	; () banked
   547   000EB0  6F74               	movwf	116,b	;volatile
   548                           
   549                           ;dc_motor.c: 19:     RE4PPS=0x06;
   550   000EB2  0E06               	movlw	6
   551   000EB4  6F76               	movwf	118,b	;volatile
   552                           
   553                           ;dc_motor.c: 20:     RC7PPS=0x07;
   554   000EB6  0E07               	movlw	7
   555   000EB8  6F69               	movwf	105,b	;volatile
   556                           
   557                           ;dc_motor.c: 21:     RG6PPS=0x08;
   558   000EBA  0E08               	movlw	8
   559   000EBC  6F88               	movwf	136,b	;volatile
   560                           
   561                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   562   000EBE  50BD               	movf	189,w,c	;volatile
   563   000EC0  0B8F               	andlw	-113
   564   000EC2  0940               	iorlw	64
   565   000EC4  6EBD               	movwf	189,c	;volatile
   566                           
   567                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   568   000EC6  0EE0               	movlw	-32
   569   000EC8  16BE               	andwf	190,f,c	;volatile
   570                           
   571                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   572   000ECA  50BF               	movf	191,w,c	;volatile
   573   000ECC  0BF0               	andlw	-16
   574   000ECE  0901               	iorlw	1
   575   000ED0  6EBF               	movwf	191,c	;volatile
   576   000ED2                     
   577                           ; BSR set to: 14
   578                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   579   000ED2  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   580   000ED6                     
   581                           ; BSR set to: 14
   582                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   583   000ED6  8EBD               	bsf	189,7,c	;volatile
   584                           
   585                           ;dc_motor.c: 35:     CCPR1H=0;
   586   000ED8  0E00               	movlw	0
   587   000EDA  6EAA               	movwf	170,c	;volatile
   588                           
   589                           ;dc_motor.c: 36:     CCPR2H=0;
   590   000EDC  0E00               	movlw	0
   591   000EDE  6EA6               	movwf	166,c	;volatile
   592                           
   593                           ;dc_motor.c: 37:     CCPR3H=0;
   594   000EE0  0E00               	movlw	0
   595   000EE2  010F               	movlb	15	; () banked
   596   000EE4  6F25               	movwf	37,b	;volatile
   597                           
   598                           ;dc_motor.c: 38:     CCPR4H=0;
   599   000EE6  0E00               	movlw	0
   600   000EE8  6F21               	movwf	33,b	;volatile
   601                           
   602                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   603   000EEA  0EFC               	movlw	-4
   604   000EEC  16AD               	andwf	173,f,c	;volatile
   605                           
   606                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   607   000EEE  0EF3               	movlw	-13
   608   000EF0  16AD               	andwf	173,f,c	;volatile
   609                           
   610                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   611   000EF2  0ECF               	movlw	-49
   612   000EF4  16AD               	andwf	173,f,c	;volatile
   613                           
   614                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   615   000EF6  0E3F               	movlw	-193
   616   000EF8  16AD               	andwf	173,f,c	;volatile
   617   000EFA                     
   618                           ; BSR set to: 15
   619                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   620   000EFA  88AB               	bsf	171,4,c	;volatile
   621                           
   622                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   623   000EFC  50AB               	movf	171,w,c	;volatile
   624   000EFE  0BF0               	andlw	-16
   625   000F00  090C               	iorlw	12
   626   000F02  6EAB               	movwf	171,c	;volatile
   627   000F04                     
   628                           ; BSR set to: 15
   629                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   630   000F04  8EAB               	bsf	171,7,c	;volatile
   631   000F06                     
   632                           ; BSR set to: 15
   633                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   634   000F06  88A7               	bsf	167,4,c	;volatile
   635                           
   636                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   637   000F08  50A7               	movf	167,w,c	;volatile
   638   000F0A  0BF0               	andlw	-16
   639   000F0C  090C               	iorlw	12
   640   000F0E  6EA7               	movwf	167,c	;volatile
   641   000F10                     
   642                           ; BSR set to: 15
   643                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   644   000F10  8EA7               	bsf	167,7,c	;volatile
   645   000F12                     
   646                           ; BSR set to: 15
   647                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   648   000F12  8926               	bsf	38,4,b	;volatile
   649                           
   650                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   651   000F14  5126               	movf	38,w,b	;volatile
   652   000F16  0BF0               	andlw	-16
   653   000F18  090C               	iorlw	12
   654   000F1A  6F26               	movwf	38,b	;volatile
   655   000F1C                     
   656                           ; BSR set to: 15
   657                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   658   000F1C  8F26               	bsf	38,7,b	;volatile
   659   000F1E                     
   660                           ; BSR set to: 15
   661                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   662   000F1E  8922               	bsf	34,4,b	;volatile
   663                           
   664                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   665   000F20  5122               	movf	34,w,b	;volatile
   666   000F22  0BF0               	andlw	-16
   667   000F24  090C               	iorlw	12
   668   000F26  6F22               	movwf	34,b	;volatile
   669   000F28                     
   670                           ; BSR set to: 15
   671                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   672   000F28  8F22               	bsf	34,7,b	;volatile
   673   000F2A                     
   674                           ; BSR set to: 15
   675   000F2A  0012               	return		;funcret
   676   000F2C                     __end_of_initDCmotorsPWM:
   677                           	callstack 0
   678                           
   679 ;; *************** function _buggy_lights_init *****************
   680 ;; Defined at:
   681 ;;		line 4 in file "buggy_lights.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		None
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels used: 1
   701 ;; This function calls:
   702 ;;		Nothing
   703 ;; This function is called by:
   704 ;;		_main
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           	psect	text3
   709   000FCE                     __ptext3:
   710                           	callstack 0
   711   000FCE                     _buggy_lights_init:
   712                           	callstack 30
   713   000FCE                     
   714                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
   715   000FCE  9884               	bcf	132,4,c	;volatile
   716                           
   717                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
   718   000FD0  9288               	bcf	136,1,c	;volatile
   719                           
   720                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
   721   000FD2  9684               	bcf	132,3,c	;volatile
   722                           
   723                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
   724   000FD4  9086               	bcf	134,0,c	;volatile
   725                           
   726                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
   727   000FD6  9088               	bcf	136,0,c	;volatile
   728                           
   729                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
   730   000FD8  887C               	bsf	124,4,c	;volatile
   731                           
   732                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
   733   000FDA  8280               	bsf	128,1,c	;volatile
   734                           
   735                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
   736   000FDC  867C               	bsf	124,3,c	;volatile
   737                           
   738                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
   739   000FDE  807E               	bsf	126,0,c	;volatile
   740                           
   741                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
   742   000FE0  8080               	bsf	128,0,c	;volatile
   743   000FE2  0012               	return		;funcret
   744   000FE4                     __end_of_buggy_lights_init:
   745                           	callstack 0
   746                           
   747                           	psect	smallconst
   748   000E00                     __psmallconst:
   749                           	callstack 0
   750   000E00  00                 	db	0
   751   000E01  00                 	db	0	; dummy byte at the end
   752   000000                     
   753                           	psect	rparam
   754   000000                     
   755                           	psect	config
   756                           
   757                           ;Config register CONFIG1L @ 0x300000
   758                           ;	External Oscillator mode Selection bits
   759                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   760                           ;	Power-up default value for COSC bits
   761                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   762   300000                     	org	3145728
   763   300000  AA                 	db	170
   764                           
   765                           ;Config register CONFIG1H @ 0x300001
   766                           ;	unspecified, using default values
   767                           ;	Clock Out Enable bit
   768                           ;	CLKOUTEN = 0x1, unprogrammed default
   769                           ;	Clock Switch Enable bit
   770                           ;	CSWEN = 0x1, unprogrammed default
   771                           ;	Fail-Safe Clock Monitor Enable bit
   772                           ;	FCMEN = 0x1, unprogrammed default
   773   300001                     	org	3145729
   774   300001  FF                 	db	255
   775                           
   776                           ;Config register CONFIG3L @ 0x300004
   777                           ;	WDT Period Select bits
   778                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   779                           ;	WDT operating mode
   780                           ;	WDTE = OFF, WDT Disabled
   781   300004                     	org	3145732
   782   300004  9F                 	db	159
   783                           
   784                           ;Config register CONFIG3H @ 0x300005
   785                           ;	unspecified, using default values
   786                           ;	WDT Window Select bits
   787                           ;	WDTCWS = 0x7, unprogrammed default
   788                           ;	WDT input clock selector
   789                           ;	WDTCCS = 0x7, unprogrammed default
   790   300005                     	org	3145733
   791   300005  FF                 	db	255
   792                           tosu	equ	0xFFF
   793                           tosh	equ	0xFFE
   794                           tosl	equ	0xFFD
   795                           stkptr	equ	0xFFC
   796                           pclatu	equ	0xFFB
   797                           pclath	equ	0xFFA
   798                           pcl	equ	0xFF9
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           prodh	equ	0xFF4
   804                           prodl	equ	0xFF3
   805                           indf0	equ	0xFEF
   806                           postinc0	equ	0xFEE
   807                           postdec0	equ	0xFED
   808                           preinc0	equ	0xFEC
   809                           plusw0	equ	0xFEB
   810                           fsr0h	equ	0xFEA
   811                           fsr0l	equ	0xFE9
   812                           wreg	equ	0xFE8
   813                           indf1	equ	0xFE7
   814                           postinc1	equ	0xFE6
   815                           postdec1	equ	0xFE5
   816                           preinc1	equ	0xFE4
   817                           plusw1	equ	0xFE3
   818                           fsr1h	equ	0xFE2
   819                           fsr1l	equ	0xFE1
   820                           bsr	equ	0xFE0
   821                           indf2	equ	0xFDF
   822                           postinc2	equ	0xFDE
   823                           postdec2	equ	0xFDD
   824                           preinc2	equ	0xFDC
   825                           plusw2	equ	0xFDB
   826                           fsr2h	equ	0xFDA
   827                           fsr2l	equ	0xFD9
   828                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      40
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    S864DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    S864DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM
    _main->_lights_flashing

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0     408
                                              2 COMRAM    20    20      0
                  _buggy_lights_init
                    _initDCmotorsPWM
                    _lights_flashing
 ---------------------------------------------------------------------------------
 (1) _lights_flashing                                      2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _initDCmotorsPWM
   _lights_flashing

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      51        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      28       1       42.1%
BITBIGSFRllhhhh     54      0       0      38        0.0%
BITBIGSFRllllh      4B      0       0      48        0.0%
BITBIGSFRllhhhl     46      0       0      40        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     2D      0       0      42        0.0%
BITBIGSFRlllll      2D      0       0      49        0.0%
BITBIGSFRllhhhl     1E      0       0      43        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      44        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRlllhl       5      0       0      47        0.0%
BITBIGSFRlllhh       3      0       0      46        0.0%
BITBIGSFRllhhhl      2      0       0      39        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRlhh         2      0       0      37        0.0%
BITBIGSFRllhhhl      1      0       0      41        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      45        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      28      50        0.0%
DATA                 0      0      28       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 26 16:24:31 2024

             _turn180Delay 001B                         l20 0E9A                         l17 0FE2  
                      l118 0F2A                        u210 0E34                        u211 0E2C  
                      u230 0E70                        u231 0E68                        u208 0E16  
                      u250 0E8E                        u251 0E86                        u228 0E36  
                      u190 0E14                        u191 0E0C                        u248 0E72  
                      u268 0E90                        u357 0F36                        u367 0E50  
                      wreg 0FE8                _squareDelay 0017                       l1150 0E46  
                     l1152 0E5E                       l1146 0FCE                       l1154 0E7C  
                     l1148 0E02                       l1500 0F98                       l1502 0F9C  
                     l1504 0F9C                       l1450 0ED2                       l1460 0F10  
                     l1452 0ED6                       l1462 0F12                       l1454 0EFA  
                     l1446 0E9C                       l1470 0F2C                       l1464 0F1C  
                     l1456 0F04                       l1448 0EAC                       l1480 0F58  
                     l1472 0F44                       l1466 0F1E                       l1458 0F06  
                     l1490 0F78                       l1482 0F5C                       l1474 0F44  
                     l1468 0F28                       l1492 0F7C                       l1484 0F64  
                     l1476 0F50                       l1494 0F80                       l1486 0F6C  
                     l1478 0F54                       l1496 0F88                       l1488 0F74  
                     l1498 0F90                       _T2PR 0FBC                       _main 0F2C  
                     fsr1l 0FE1                       start 0000               ___param_bank 0000  
                    ?_main 0001                _turningGear 0025          _turnRight135Delay 001D  
                    tablat 0FF5            _turnLeft90Delay 0023            __initialization 0FA8  
             __end_of_main 0FA8                     ??_main 0003              __activetblptr 0003  
                   _CCPR1H 0FAA                     _CCPR2H 0FA6                     _CCPR3H 0F25  
                   _CCPR4H 0F21                     _RE2PPS 0E74                     _RD5PPS 0E6F  
                   _RC7PPS 0E69                     _RD6PPS 0E70                     _RE4PPS 0E76  
                   _RG6PPS 0E88           _turnLeft135Delay 001F               _CCPTMRS0bits 0FAD  
          _lights_flashing 0E02                     isa$std 0001               __pdataCOMRAM 0017  
             __mediumconst 0000                     tblptrh 0FF7                     tblptrl 0FF6  
                   tblptru 0FF8          ??_initDCmotorsPWM 0003          _buggy_lights_init 0FCE  
               __accesstop 0060    __end_of__initialization 0FC8         ?_buggy_lights_init 0001  
            ___rparam_used 0001             __pcstackCOMRAM 0001        ??_buggy_lights_init 0001  
__end_of_buggy_lights_init 0FE4    __end_of_lights_flashing 0E9C               _T2CLKCONbits 0FBF  
                  _SSP2ADD 0ED6                    _SSP2BUF 0ED5                    __Hparam 0000  
                  __Lparam 0000               __psmallconst 0E00                    __pcinit 0FA8  
                  __ramtop 0E00                    __ptext0 0F2C                    __ptext1 0E02  
                  __ptext2 0E9C                    __ptext3 0FCE                  _T2CONbits 0FBD  
                _T2HLTbits 0FBE       end_of_initialization 0FC8           ?_lights_flashing 0001  
                  postdec1 0FE5                    postinc0 0FEE            _initDCmotorsPWM 0E9C  
                _TRISCbits 0F83                  _TRISDbits 0F84                  _TRISEbits 0F85  
                _TRISFbits 0F86                  _TRISGbits 0F87                  _TRISHbits 0F88  
              _CCP1CONbits 0FAB                _CCP2CONbits 0FA7                _CCP3CONbits 0F26  
              _CCP4CONbits 0F22                 main@motorL 0005                 main@motorR 000E  
            __pidataCOMRAM 0FE4        start_initialization 0FA8           _turnRight90Delay 0021  
  __end_of_initDCmotorsPWM 0F2C                __smallconst 0E00              _headbuttDelay 0019  
 initDCmotorsPWM@PWMperiod 0001                  _rampDelay 0028                   _LATCbits 0F7B  
                 _LATDbits 0F7C                   _LATEbits 0F7D                   _LATFbits 0F7E  
                 _LATGbits 0F7F                   _LATHbits 0F80           ?_initDCmotorsPWM 0001  
                 _SSP2CON2 0EDA                   _SSP2STAT 0ED8                  copy_data0 0FBC  
                 __Hrparam 0000                   __Lrparam 0000                 _ANSELDbits 0EA7  
             _SSP2CON1bits 0ED9               _SSP2CON2bits 0EDA                   isa$xinst 0000  
             _topGearRight 0026                _topGearLeft 0027                 _SSP2DATPPS 0E1D  
        ??_lights_flashing 0001                 _SSP2CLKPPS 0E1C  
