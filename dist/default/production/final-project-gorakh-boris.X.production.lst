

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 07 18:09:42 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    61                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    62   000000                     
    63                           ; Generated 18/08/2023 GMT
    64                           ; 
    65                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution. Publication is not required when
    79                           ;        this file is used in an embedded application.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F67K40 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97   000000                     
    98                           	psect	idataCOMRAM
    99   001FFC                     __pidataCOMRAM:
   100                           	callstack 0
   101                           
   102                           ;initializer for _timer_high_pointer
   103   001FFC  28                 	db	low _trail_timer_high
   104   001FFD  01                 	db	high _trail_timer_high
   105                           
   106                           	psect	idataBANK0
   107   001F8A                     __pidataBANK0:
   108                           	callstack 0
   109                           
   110                           ;initializer for _manoeuvre_pointer
   111   001F8A  00                 	db	low _trail_manoeuvre
   112   001F8B  01                 	db	high _trail_manoeuvre
   113                           
   114                           ;initializer for _timer_low_pointer
   115   001F8C  14                 	db	low _trail_timer_low
   116   001F8D  01                 	db	high _trail_timer_low
   117                           
   118                           ;initializer for _squareDelay
   119   001F8E  012C               	dw	300
   120                           
   121                           ;initializer for _headbuttDelay
   122   001F90  0046               	dw	70
   123                           
   124                           ;initializer for _turn180Delay
   125   001F92  01FE               	dw	510
   126                           
   127                           ;initializer for _turnRight135Delay
   128   001F94  012C               	dw	300
   129                           
   130                           ;initializer for _turnLeft135Delay
   131   001F96  012C               	dw	300
   132                           
   133                           ;initializer for _turnRight90Delay
   134   001F98  00AF               	dw	175
   135                           
   136                           ;initializer for _turnLeft90Delay
   137   001F9A  00AF               	dw	175
   138                           
   139                           ;initializer for _wall_threshold
   140   001F9C  012C               	dw	300
   141                           
   142                           ;initializer for _turningGear
   143   001F9E  2A                 	db	42
   144                           
   145                           ;initializer for _topGearRight
   146   001F9F  14                 	db	20
   147                           
   148                           ;initializer for _topGearLeft
   149   001FA0  14                 	db	20
   150                           
   151                           ;initializer for _rampDelay
   152   001FA1  08                 	db	8
   153   000000                     _TMR0H	set	4052
   154   000000                     _TX4REG	set	3812
   155   000000                     _RC4STAbits	set	3815
   156   000000                     _SP4BRGH	set	3814
   157   000000                     _LATEbits	set	3965
   158   000000                     _TRISEbits	set	3973
   159   000000                     _LATGbits	set	3967
   160   000000                     _TRISGbits	set	3975
   161   000000                     _LATFbits	set	3966
   162   000000                     _LATHbits	set	3968
   163   000000                     _TRISFbits	set	3974
   164   000000                     _TRISHbits	set	3976
   165   000000                     _SSP2CON2bits	set	3802
   166   000000                     _RX4PPS	set	3605
   167   000000                     _SSP2CLKPPS	set	3612
   168   000000                     _SSP2DATPPS	set	3613
   169   000000                     _RC7PPS	set	3689
   170   000000                     _RE2PPS	set	3700
   171   000000                     _LATAbits	set	3961
   172   000000                     _LATDbits	set	3964
   173   000000                     _TRISDbits	set	3972
   174   000000                     _T2PR	set	4028
   175   000000                     _T2CONbits	set	4029
   176   000000                     _CCPR2H	set	4006
   177   000000                     _CCPR1H	set	4010
   178   000000                     _TRISCbits	set	3971
   179   000000                     _TRISAbits	set	3969
   180   000000                     _LATCbits	set	3963
   181   000000                     _RE4PPS	set	3702
   182   000000                     _RG6PPS	set	3720
   183   000000                     _RD5PPS	set	3695
   184   000000                     _ANSELDbits	set	3751
   185   000000                     _SSP2ADD	set	3798
   186   000000                     _SSP2CON1bits	set	3801
   187   000000                     _CCPR4H	set	3873
   188   000000                     _CCPR3H	set	3877
   189   000000                     _TMR0L	set	4051
   190   000000                     _T0CON0bits	set	4053
   191   000000                     _T0CON1bits	set	4054
   192   000000                     _T2CLKCONbits	set	4031
   193   000000                     _T2HLTbits	set	4030
   194   000000                     _CCP1CONbits	set	4011
   195   000000                     _CCPTMRS0bits	set	4013
   196   000000                     _CCP2CONbits	set	4007
   197   000000                     _CCP3CONbits	set	3878
   198   000000                     _CCP4CONbits	set	3874
   199   000000                     _RC4REG	set	3811
   200   000000                     _SP4BRGL	set	3813
   201   000000                     _TX4STAbits	set	3816
   202   000000                     _BAUD4CONbits	set	3817
   203   000000                     _SSP2CON2	set	3802
   204   000000                     _SSP2STAT	set	3800
   205   000000                     _ANSELFbits	set	3764
   206   000000                     _SSP2BUF	set	3797
   207   000000                     _PIE0bits	set	3625
   208   000000                     _PIR4bits	set	3639
   209   000000                     _RC0PPS	set	3682
   210   000000                     _RD6PPS	set	3696
   211   000000                     _INTCONbits	set	4082
   212   000000                     _PIR0bits	set	3635
   213                           
   214                           	psect	smallconst
   215   000E00                     __psmallconst:
   216                           	callstack 0
   217   000E00  00                 	db	0
   218   000E01                     STR_5:
   219                           
   220                           ; BSR set to: 14
   221   000E01  25                 	db	37
   222   000E02  75                 	db	117	;'u'
   223   000E03  20                 	db	32
   224   000E04  25                 	db	37
   225   000E05  75                 	db	117	;'u'
   226   000E06  20                 	db	32
   227   000E07  25                 	db	37
   228   000E08  75                 	db	117	;'u'
   229   000E09  20                 	db	32
   230   000E0A  25                 	db	37
   231   000E0B  75                 	db	117	;'u'
   232   000E0C  20                 	db	32
   233   000E0D  0D                 	db	13
   234   000E0E  00                 	db	0
   235   000E0F                     STR_1:
   236                           
   237                           ; BSR set to: 14
   238   000E0F  25                 	db	37
   239   000E10  64                 	db	100	;'d'
   240   000E11  20                 	db	32
   241   000E12  0D                 	db	13
   242   000E13  00                 	db	0
   243   000E14                     STR_2:
   244                           
   245                           ; BSR set to: 14
   246   000E14  25                 	db	37
   247   000E15  64                 	db	100	;'d'
   248   000E16  20                 	db	32
   249   000E17  00                 	db	0
   250   000E18  00                 	db	0	; dummy byte at the end
   251   000000                     
   252                           ; #config settings
   253                           
   254                           	psect	cinit
   255   001A90                     __pcinit:
   256                           	callstack 0
   257   001A90                     start_initialization:
   258                           	callstack 0
   259   001A90                     __initialization:
   260                           	callstack 0
   261                           
   262                           ; Initialize objects allocated to BANK0 (24 bytes)
   263                           ; load TBLPTR registers with __pidataBANK0
   264   001A90  0E8A               	movlw	low __pidataBANK0
   265   001A92  6EF6               	movwf	tblptrl,c
   266   001A94  0E1F               	movlw	high __pidataBANK0
   267   001A96  6EF7               	movwf	tblptrh,c
   268   001A98  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   269   001A9A  6EF8               	movwf	tblptru,c
   270   001A9C  EE00  F0A9         	lfsr	0,__pdataBANK0
   271   001AA0  EE10 F018          	lfsr	1,24
   272   001AA4                     copy_data0:
   273   001AA4  0009               	tblrd		*+
   274   001AA6  CFF5 FFEE          	movff	tablat,postinc0
   275   001AAA  50E5               	movf	postdec1,w,c
   276   001AAC  50E1               	movf	fsr1l,w,c
   277   001AAE  E1FA               	bnz	copy_data0
   278                           
   279                           ; Initialize objects allocated to COMRAM (2 bytes)
   280                           ; load TBLPTR registers with __pidataCOMRAM
   281   001AB0  0EFC               	movlw	low __pidataCOMRAM
   282   001AB2  6EF6               	movwf	tblptrl,c
   283   001AB4  0E1F               	movlw	high __pidataCOMRAM
   284   001AB6  6EF7               	movwf	tblptrh,c
   285   001AB8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   286   001ABA  6EF8               	movwf	tblptru,c
   287   001ABC  0009               	tblrd		*+	;fetch initializer
   288   001ABE  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   289   001AC2  0009               	tblrd		*+	;fetch initializer
   290   001AC4  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
   291                           
   292                           ; Clear objects allocated to BANK1 (60 bytes)
   293   001AC8  EE01  F000         	lfsr	0,__pbssBANK1
   294   001ACC  0E3C               	movlw	60
   295   001ACE                     clear_0:
   296   001ACE  6AEE               	clrf	postinc0,c
   297   001AD0  06E8               	decf	wreg,f,c
   298   001AD2  E1FD               	bnz	clear_0
   299                           
   300                           ; Clear objects allocated to BANK0 (41 bytes)
   301   001AD4  EE00  F060         	lfsr	0,__pbssBANK0
   302   001AD8  0E29               	movlw	41
   303   001ADA                     clear_1:
   304   001ADA  6AEE               	clrf	postinc0,c
   305   001ADC  06E8               	decf	wreg,f,c
   306   001ADE  E1FD               	bnz	clear_1
   307                           
   308                           ; Clear objects allocated to COMRAM (1 bytes)
   309   001AE0  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   310   001AE2                     end_of_initialization:
   311                           	callstack 0
   312   001AE2                     __end_of__initialization:
   313                           	callstack 0
   314   001AE2  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   315   001AE4  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   316   001AE6  0100               	movlb	0
   317   001AE8  EF2B  F00A         	goto	_main	;jump to C main() function
   318                           
   319                           	psect	bssCOMRAM
   320   00005E                     __pbssCOMRAM:
   321                           	callstack 0
   322   00005E                     _returning:
   323                           	callstack 0
   324   00005E                     	ds	1
   325                           
   326                           	psect	dataCOMRAM
   327   00005C                     __pdataCOMRAM:
   328                           	callstack 0
   329   00005C                     _timer_high_pointer:
   330                           	callstack 0
   331   00005C                     	ds	2
   332                           
   333                           	psect	bssBANK0
   334   000060                     __pbssBANK0:
   335                           	callstack 0
   336   000060                     _dbuf:
   337                           	callstack 0
   338   000060                     	ds	32
   339   000080                     _nout:
   340                           	callstack 0
   341   000080                     	ds	2
   342   000082                     _width:
   343                           	callstack 0
   344   000082                     	ds	2
   345   000084                     _prec:
   346                           	callstack 0
   347   000084                     	ds	2
   348   000086                     _flags:
   349                           	callstack 0
   350   000086                     	ds	1
   351   000087                     _manoeuvre_count:
   352                           	callstack 0
   353   000087                     	ds	1
   354   000088                     _return_flag:
   355                           	callstack 0
   356   000088                     	ds	1
   357                           
   358                           	psect	dataBANK0
   359   0000A9                     __pdataBANK0:
   360                           	callstack 0
   361   0000A9                     _manoeuvre_pointer:
   362                           	callstack 0
   363   0000A9                     	ds	2
   364   0000AB                     _timer_low_pointer:
   365                           	callstack 0
   366   0000AB                     	ds	2
   367   0000AD                     _squareDelay:
   368                           	callstack 0
   369   0000AD                     	ds	2
   370   0000AF                     _headbuttDelay:
   371                           	callstack 0
   372   0000AF                     	ds	2
   373   0000B1                     _turn180Delay:
   374                           	callstack 0
   375   0000B1                     	ds	2
   376   0000B3                     _turnRight135Delay:
   377                           	callstack 0
   378   0000B3                     	ds	2
   379   0000B5                     _turnLeft135Delay:
   380                           	callstack 0
   381   0000B5                     	ds	2
   382   0000B7                     _turnRight90Delay:
   383                           	callstack 0
   384   0000B7                     	ds	2
   385   0000B9                     _turnLeft90Delay:
   386                           	callstack 0
   387   0000B9                     	ds	2
   388   0000BB                     _wall_threshold:
   389                           	callstack 0
   390   0000BB                     	ds	2
   391   0000BD                     _turningGear:
   392                           	callstack 0
   393   0000BD                     	ds	1
   394   0000BE                     _topGearRight:
   395                           	callstack 0
   396   0000BE                     	ds	1
   397   0000BF                     _topGearLeft:
   398                           	callstack 0
   399   0000BF                     	ds	1
   400   0000C0                     _rampDelay:
   401                           	callstack 0
   402   0000C0                     	ds	1
   403                           
   404                           	psect	bssBANK1
   405   000100                     __pbssBANK1:
   406                           	callstack 0
   407   000100                     _trail_manoeuvre:
   408                           	callstack 0
   409   000100                     	ds	20
   410   000114                     _trail_timer_low:
   411                           	callstack 0
   412   000114                     	ds	20
   413   000128                     _trail_timer_high:
   414                           	callstack 0
   415   000128                     	ds	20
   416                           
   417                           	psect	cstackBANK0
   418   000089                     __pcstackBANK0:
   419                           	callstack 0
   420   000089                     main@HSV_colour:
   421                           	callstack 0
   422                           
   423                           ; 6 bytes @ 0x0
   424   000089                     	ds	6
   425   00008F                     main@motorL:
   426                           	callstack 0
   427                           
   428                           ; 9 bytes @ 0x6
   429   00008F                     	ds	9
   430   000098                     main@motorR:
   431                           	callstack 0
   432                           
   433                           ; 9 bytes @ 0xF
   434   000098                     	ds	9
   435   0000A1                     main@measured_colour:
   436                           	callstack 0
   437                           
   438                           ; 8 bytes @ 0x18
   439   0000A1                     	ds	8
   440                           
   441                           	psect	cstackCOMRAM
   442   000001                     __pcstackCOMRAM:
   443                           	callstack 0
   444   000001                     ??_toggle_tricolour_LED:
   445   000001                     ??_I2C_2_Master_Idle:
   446   000001                     ?_max:
   447                           	callstack 0
   448   000001                     ?_min:
   449                           	callstack 0
   450   000001                     ?___wmul:
   451                           	callstack 0
   452   000001                     ?___awdiv:
   453                           	callstack 0
   454   000001                     ?___awmod:
   455                           	callstack 0
   456   000001                     sendCharSerial4@charToSend:
   457                           	callstack 0
   458   000001                     write_timer@tL:
   459                           	callstack 0
   460   000001                     max@a:
   461                           	callstack 0
   462   000001                     min@a:
   463                           	callstack 0
   464   000001                     initDCmotorsPWM@PWMperiod:
   465                           	callstack 0
   466   000001                     ___wmul@multiplier:
   467                           	callstack 0
   468   000001                     ___awdiv@dividend:
   469                           	callstack 0
   470   000001                     ___awmod@dividend:
   471                           	callstack 0
   472   000001                     fputc@c:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x0
   476   000001                     	ds	1
   477   000002                     ??_I2C_2_Master_Read:
   478   000002                     I2C_2_Master_Write@data_byte:
   479                           	callstack 0
   480   000002                     write_timer@tH:
   481                           	callstack 0
   482   000002                     sendStringSerial4@string:
   483                           	callstack 0
   484                           
   485                           ; 2 bytes @ 0x1
   486   000002                     	ds	1
   487   000003                     color_writetoaddr@value:
   488                           	callstack 0
   489   000003                     I2C_2_Master_Read@ack:
   490                           	callstack 0
   491   000003                     fputc@fp:
   492                           	callstack 0
   493   000003                     max@b:
   494                           	callstack 0
   495   000003                     min@b:
   496                           	callstack 0
   497   000003                     ___wmul@multiplicand:
   498                           	callstack 0
   499   000003                     ___awdiv@divisor:
   500                           	callstack 0
   501   000003                     ___awmod@divisor:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x2
   505   000003                     	ds	1
   506   000004                     ??_fputc:
   507   000004                     color_writetoaddr@address:
   508                           	callstack 0
   509   000004                     I2C_2_Master_Read@tmp:
   510                           	callstack 0
   511                           
   512                           ; 1 bytes @ 0x3
   513   000004                     	ds	1
   514   000005                     ??_color_click_init:
   515   000005                     ?_color_read_Red:
   516                           	callstack 0
   517   000005                     ?_color_read_Blue:
   518                           	callstack 0
   519   000005                     ?_color_read_Green:
   520                           	callstack 0
   521   000005                     ?_color_read_Clear:
   522                           	callstack 0
   523   000005                     ___awdiv@counter:
   524                           	callstack 0
   525   000005                     ___awmod@counter:
   526                           	callstack 0
   527   000005                     max@max_val:
   528                           	callstack 0
   529   000005                     min@min_val:
   530                           	callstack 0
   531   000005                     ___wmul@product:
   532                           	callstack 0
   533                           
   534                           ; 2 bytes @ 0x4
   535   000005                     	ds	1
   536   000006                     ___awdiv@sign:
   537                           	callstack 0
   538   000006                     ___awmod@sign:
   539                           	callstack 0
   540                           
   541                           ; 1 bytes @ 0x5
   542   000006                     	ds	1
   543   000007                     ??_color_read_Red:
   544   000007                     ??_color_read_Blue:
   545   000007                     ??_color_read_Green:
   546   000007                     ??_color_read_Clear:
   547   000007                     ?_abs:
   548                           	callstack 0
   549   000007                     ?___lwdiv:
   550                           	callstack 0
   551   000007                     ___awdiv@quotient:
   552                           	callstack 0
   553   000007                     ___lwdiv@dividend:
   554                           	callstack 0
   555   000007                     abs@a:
   556                           	callstack 0
   557                           
   558                           ; 2 bytes @ 0x6
   559   000007                     	ds	2
   560   000009                     ??_abs:
   561   000009                     ___lwdiv@divisor:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0x8
   565   000009                     	ds	1
   566   00000A                     color_read_Red@tmp:
   567                           	callstack 0
   568   00000A                     color_read_Blue@tmp:
   569                           	callstack 0
   570   00000A                     color_read_Green@tmp:
   571                           	callstack 0
   572   00000A                     color_read_Clear@tmp:
   573                           	callstack 0
   574                           
   575                           ; 2 bytes @ 0x9
   576   00000A                     	ds	1
   577   00000B                     ___lwdiv@quotient:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0xA
   581   00000B                     	ds	1
   582   00000C                     getRGBCval@p:
   583                           	callstack 0
   584                           
   585                           ; 1 bytes @ 0xB
   586   00000C                     	ds	1
   587   00000D                     ___lwdiv@counter:
   588                           	callstack 0
   589                           
   590                           ; 1 bytes @ 0xC
   591   00000D                     	ds	1
   592   00000E                     ?___lwmod:
   593                           	callstack 0
   594   00000E                     ___lwmod@dividend:
   595                           	callstack 0
   596                           
   597                           ; 2 bytes @ 0xD
   598   00000E                     	ds	2
   599   000010                     ___lwmod@divisor:
   600                           	callstack 0
   601                           
   602                           ; 2 bytes @ 0xF
   603   000010                     	ds	2
   604   000012                     ___lwmod@counter:
   605                           	callstack 0
   606                           
   607                           ; 1 bytes @ 0x11
   608   000012                     	ds	1
   609   000013                     ?_vfpfcnvrt:
   610                           	callstack 0
   611   000013                     getHSVval@p1:
   612                           	callstack 0
   613   000013                     vfpfcnvrt@fp:
   614                           	callstack 0
   615                           
   616                           ; 1 bytes @ 0x12
   617   000013                     	ds	1
   618   000014                     getHSVval@p2:
   619                           	callstack 0
   620   000014                     vfpfcnvrt@fmt:
   621                           	callstack 0
   622                           
   623                           ; 1 bytes @ 0x13
   624   000014                     	ds	1
   625   000015                     ??_getHSVval:
   626   000015                     vfpfcnvrt@ap:
   627                           	callstack 0
   628                           
   629                           ; 1 bytes @ 0x14
   630   000015                     	ds	1
   631   000016                     ??_vfpfcnvrt:
   632                           
   633                           ; 1 bytes @ 0x15
   634   000016                     	ds	2
   635   000018                     vfpfcnvrt@done:
   636                           	callstack 0
   637                           
   638                           ; 1 bytes @ 0x17
   639   000018                     	ds	1
   640   000019                     getHSVval@minRGB:
   641                           	callstack 0
   642   000019                     vfpfcnvrt@cnt:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0x18
   646   000019                     	ds	2
   647   00001B                     vfpfcnvrt@cp:
   648                           	callstack 0
   649   00001B                     _getHSVval$3127:
   650                           	callstack 0
   651                           
   652                           ; 2 bytes @ 0x1A
   653   00001B                     	ds	1
   654   00001C                     vfpfcnvrt@convarg:
   655                           	callstack 0
   656                           
   657                           ; 4 bytes @ 0x1B
   658   00001C                     	ds	1
   659   00001D                     _getHSVval$3128:
   660                           	callstack 0
   661                           
   662                           ; 2 bytes @ 0x1C
   663   00001D                     	ds	2
   664   00001F                     getHSVval@saturation:
   665                           	callstack 0
   666                           
   667                           ; 2 bytes @ 0x1E
   668   00001F                     	ds	1
   669   000020                     vfpfcnvrt@c:
   670                           	callstack 0
   671                           
   672                           ; 1 bytes @ 0x1F
   673   000020                     	ds	1
   674   000021                     ?_vfprintf:
   675                           	callstack 0
   676   000021                     vfprintf@fp:
   677                           	callstack 0
   678   000021                     getHSVval@hue:
   679                           	callstack 0
   680                           
   681                           ; 2 bytes @ 0x20
   682   000021                     	ds	1
   683   000022                     vfprintf@fmt:
   684                           	callstack 0
   685                           
   686                           ; 1 bytes @ 0x21
   687   000022                     	ds	1
   688   000023                     vfprintf@ap:
   689                           	callstack 0
   690   000023                     _getHSVval$3129:
   691                           	callstack 0
   692                           
   693                           ; 2 bytes @ 0x22
   694   000023                     	ds	1
   695   000024                     vfprintf@cfmt:
   696                           	callstack 0
   697                           
   698                           ; 1 bytes @ 0x23
   699   000024                     	ds	1
   700   000025                     ?_sprintf:
   701                           	callstack 0
   702   000025                     getHSVval@range:
   703                           	callstack 0
   704   000025                     sprintf@s:
   705                           	callstack 0
   706                           
   707                           ; 2 bytes @ 0x24
   708   000025                     	ds	2
   709   000027                     sprintf@fmt:
   710                           	callstack 0
   711   000027                     getHSVval@maxRGB:
   712                           	callstack 0
   713                           
   714                           ; 2 bytes @ 0x26
   715   000027                     	ds	9
   716   000030                     sprintf@ret:
   717                           	callstack 0
   718                           
   719                           ; 2 bytes @ 0x2F
   720   000030                     	ds	2
   721   000032                     sprintf@ap:
   722                           	callstack 0
   723                           
   724                           ; 1 bytes @ 0x31
   725   000032                     	ds	1
   726   000033                     sprintf@f:
   727                           	callstack 0
   728                           
   729                           ; 12 bytes @ 0x32
   730   000033                     	ds	12
   731   00003F                     sendRGBCvalSerial4@col_val:
   732                           	callstack 0
   733   00003F                     sendHSVvalSerial4@col_val:
   734                           	callstack 0
   735                           
   736                           ; 1 bytes @ 0x3E
   737   00003F                     	ds	1
   738   000040                     sendHSVvalSerial4@tempStr:
   739                           	callstack 0
   740   000040                     sendRGBCvalSerial4@tempStr:
   741                           	callstack 0
   742                           
   743                           ; 26 bytes @ 0x3F
   744   000040                     	ds	26
   745   00005A                     ??_main:
   746                           
   747                           ; 1 bytes @ 0x59
   748   00005A                     	ds	2
   749                           
   750 ;;
   751 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   752 ;;
   753 ;; *************** function _main *****************
   754 ;; Defined at:
   755 ;;		line 27 in file "main.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;  motorR          9   15[BANK0 ] struct DC_motor
   760 ;;  motorL          9    6[BANK0 ] struct DC_motor
   761 ;;  measured_col    8   24[BANK0 ] struct RGBC_val
   762 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
   763 ;;  PWMcycle        2    0        unsigned int 
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   774 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   775 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   776 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   777 ;;Total ram usage:       34 bytes
   778 ;; Hardware stack levels required when called: 7
   779 ;; This function calls:
   780 ;;		_Timer0_init
   781 ;;		_buggy_lights_init
   782 ;;		_color_click_init
   783 ;;		_getHSVval
   784 ;;		_getRGBCval
   785 ;;		_initDCmotorsPWM
   786 ;;		_initUSART4
   787 ;;		_sendHSVvalSerial4
   788 ;;		_sendRGBCvalSerial4
   789 ;;		_toggle_tricolour_LED
   790 ;; This function is called by:
   791 ;;		Startup code after reset
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text0
   796   001456                     __ptext0:
   797                           	callstack 0
   798   001456                     _main:
   799                           	callstack 24
   800   001456                     
   801                           ;main.c: 28:     struct RGBC_val measured_colour;;main.c: 29:         measured_colour.R 
      +                          = 0;
   802   001456  0E00               	movlw	0
   803   001458  0100               	movlb	0	; () banked
   804   00145A  6FA2               	movwf	(main@measured_colour+1)& (0+255),b
   805   00145C  0E00               	movlw	0
   806   00145E  6FA1               	movwf	main@measured_colour& (0+255),b
   807                           
   808                           ;main.c: 30:         measured_colour.G = 0;
   809   001460  0E00               	movlw	0
   810   001462  6FA4               	movwf	(main@measured_colour+3)& (0+255),b
   811   001464  0E00               	movlw	0
   812   001466  6FA3               	movwf	(main@measured_colour+2)& (0+255),b
   813                           
   814                           ;main.c: 31:         measured_colour.B = 0;
   815   001468  0E00               	movlw	0
   816   00146A  6FA6               	movwf	(main@measured_colour+5)& (0+255),b
   817   00146C  0E00               	movlw	0
   818   00146E  6FA5               	movwf	(main@measured_colour+4)& (0+255),b
   819                           
   820                           ;main.c: 32:         measured_colour.C = 0;
   821   001470  0E00               	movlw	0
   822   001472  6FA8               	movwf	(main@measured_colour+7)& (0+255),b
   823   001474  0E00               	movlw	0
   824   001476  6FA7               	movwf	(main@measured_colour+6)& (0+255),b
   825                           
   826                           ;main.c: 34:     struct HSV_val HSV_colour;;main.c: 35:         HSV_colour.H = 0;
   827   001478  0E00               	movlw	0
   828   00147A  6F8A               	movwf	(main@HSV_colour+1)& (0+255),b
   829   00147C  0E00               	movlw	0
   830   00147E  6F89               	movwf	main@HSV_colour& (0+255),b
   831                           
   832                           ;main.c: 36:         HSV_colour.S = 0;
   833   001480  0E00               	movlw	0
   834   001482  6F8C               	movwf	(main@HSV_colour+3)& (0+255),b
   835   001484  0E00               	movlw	0
   836   001486  6F8B               	movwf	(main@HSV_colour+2)& (0+255),b
   837                           
   838                           ;main.c: 37:         HSV_colour.V = 0;
   839   001488  0E00               	movlw	0
   840   00148A  6F8E               	movwf	(main@HSV_colour+5)& (0+255),b
   841   00148C  0E00               	movlw	0
   842   00148E  6F8D               	movwf	(main@HSV_colour+4)& (0+255),b
   843                           
   844                           ;main.c: 41:     struct DC_motor motorL, motorR;;main.c: 42:         motorL.power = 0;
   845   001490  0E00               	movlw	0
   846   001492  6F8F               	movwf	main@motorL& (0+255),b
   847                           
   848                           ;main.c: 43:         motorL.direction = 1;
   849   001494  0E01               	movlw	1
   850   001496  6F90               	movwf	(main@motorL+1)& (0+255),b
   851                           
   852                           ;main.c: 44:         motorL.brakemode = 1;
   853   001498  0E01               	movlw	1
   854   00149A  6F91               	movwf	(main@motorL+2)& (0+255),b
   855   00149C                     
   856                           ; BSR set to: 0
   857                           ;main.c: 45:         motorL.PWMperiod = PWMcycle;
   858   00149C  0E00               	movlw	0
   859   00149E  6F93               	movwf	(main@motorL+4)& (0+255),b
   860   0014A0  0E63               	movlw	99
   861   0014A2  6F92               	movwf	(main@motorL+3)& (0+255),b
   862   0014A4                     
   863                           ; BSR set to: 0
   864                           ;main.c: 46:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   865   0014A4  0EAA               	movlw	170
   866   0014A6  6F94               	movwf	(main@motorL+5)& (0+255),b
   867   0014A8  0E0F               	movlw	15
   868   0014AA  6F95               	movwf	(main@motorL+6)& (0+255),b
   869   0014AC                     
   870                           ; BSR set to: 0
   871                           ;main.c: 47:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   872   0014AC  0EA6               	movlw	166
   873   0014AE  6F96               	movwf	(main@motorL+7)& (0+255),b
   874   0014B0  0E0F               	movlw	15
   875   0014B2  6F97               	movwf	(main@motorL+8)& (0+255),b
   876                           
   877                           ;main.c: 48:         motorR.power = 0;
   878   0014B4  0E00               	movlw	0
   879   0014B6  6F98               	movwf	main@motorR& (0+255),b
   880                           
   881                           ;main.c: 49:         motorR.direction = 1;
   882   0014B8  0E01               	movlw	1
   883   0014BA  6F99               	movwf	(main@motorR+1)& (0+255),b
   884                           
   885                           ;main.c: 50:         motorR.brakemode = 1;
   886   0014BC  0E01               	movlw	1
   887   0014BE  6F9A               	movwf	(main@motorR+2)& (0+255),b
   888   0014C0                     
   889                           ; BSR set to: 0
   890                           ;main.c: 51:         motorR.PWMperiod = PWMcycle;
   891   0014C0  0E00               	movlw	0
   892   0014C2  6F9C               	movwf	(main@motorR+4)& (0+255),b
   893   0014C4  0E63               	movlw	99
   894   0014C6  6F9B               	movwf	(main@motorR+3)& (0+255),b
   895   0014C8                     
   896                           ; BSR set to: 0
   897                           ;main.c: 52:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   898   0014C8  0E25               	movlw	37
   899   0014CA  6F9D               	movwf	(main@motorR+5)& (0+255),b
   900   0014CC  0E0F               	movlw	15
   901   0014CE  6F9E               	movwf	(main@motorR+6)& (0+255),b
   902   0014D0                     
   903                           ; BSR set to: 0
   904                           ;main.c: 53:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   905   0014D0  0E21               	movlw	33
   906   0014D2  6F9F               	movwf	(main@motorR+7)& (0+255),b
   907   0014D4  0E0F               	movlw	15
   908   0014D6  6FA0               	movwf	(main@motorR+8)& (0+255),b
   909   0014D8                     
   910                           ; BSR set to: 0
   911                           ;main.c: 55:     initDCmotorsPWM(PWMcycle);
   912   0014D8  0E00               	movlw	0
   913   0014DA  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   914   0014DC  0E63               	movlw	99
   915   0014DE  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   916   0014E0  EC34  F00C         	call	_initDCmotorsPWM	;wreg free
   917                           
   918                           ;main.c: 56:     buggy_lights_init();
   919   0014E4  EC41  F00F         	call	_buggy_lights_init	;wreg free
   920   0014E8                     
   921                           ;main.c: 57:     color_click_init();
   922   0014E8  EC27  F00F         	call	_color_click_init	;wreg free
   923   0014EC                     
   924                           ;main.c: 58:     initUSART4();
   925   0014EC  ECB6  F00F         	call	_initUSART4	;wreg free
   926   0014F0                     
   927                           ;main.c: 59:     Timer0_init();
   928   0014F0  EC94  F00F         	call	_Timer0_init	;wreg free
   929   0014F4                     
   930                           ;main.c: 63:         TRISDbits.TRISD7 = 0;
   931   0014F4  9E84               	bcf	132,7,c	;volatile
   932   0014F6                     
   933                           ;main.c: 64:         TRISHbits.TRISH3 = 0;
   934   0014F6  9688               	bcf	136,3,c	;volatile
   935   0014F8                     
   936                           ;main.c: 66:         LATDbits.LATD7 = 0;
   937   0014F8  9E7C               	bcf	124,7,c	;volatile
   938   0014FA                     
   939                           ;main.c: 67:         LATHbits.LATH3 = 0;
   940   0014FA  9680               	bcf	128,3,c	;volatile
   941   0014FC                     
   942                           ;main.c: 71:         TRISFbits.TRISF2 = 1;
   943   0014FC  8486               	bsf	134,2,c	;volatile
   944   0014FE                     
   945                           ;main.c: 72:         TRISFbits.TRISF3 = 1;
   946   0014FE  8686               	bsf	134,3,c	;volatile
   947   001500                     
   948                           ;main.c: 74:         ANSELFbits.ANSELF2 = 0;
   949   001500  010E               	movlb	14	; () banked
   950   001502  95B4               	bcf	180,2,b	;volatile
   951   001504                     
   952                           ; BSR set to: 14
   953                           ;main.c: 75:         ANSELFbits.ANSELF3 = 0;
   954   001504  97B4               	bcf	180,3,b	;volatile
   955                           
   956                           ;main.c: 80:     LATHbits.LATH3 = !LATHbits.LATH3;
   957   001506  A680               	btfss	128,3,c	;volatile
   958   001508  EF88  F00A         	goto	u2011
   959   00150C  EF8C  F00A         	goto	u2010
   960   001510                     u2011:
   961   001510  6A5A               	clrf	??_main^0,c
   962   001512  2A5A               	incf	??_main^0,f,c
   963   001514  EF8D  F00A         	goto	u2028
   964   001518                     u2010:
   965   001518  6A5A               	clrf	??_main^0,c
   966   00151A                     u2028:
   967   00151A  465A               	rlncf	??_main^0,f,c
   968   00151C  465A               	rlncf	??_main^0,f,c
   969   00151E  465A               	rlncf	??_main^0,f,c
   970   001520  5080               	movf	128,w,c	;volatile
   971   001522  185A               	xorwf	??_main^0,w,c
   972   001524  0BF7               	andlw	-9
   973   001526  185A               	xorwf	??_main^0,w,c
   974   001528  6E80               	movwf	128,c	;volatile
   975   00152A                     
   976                           ;main.c: 81:     toggle_tricolour_LED();
   977   00152A  ECB9  F00A         	call	_toggle_tricolour_LED	;wreg free
   978   00152E                     l3257:
   979                           
   980                           ;main.c: 86:         getRGBCval(&measured_colour);
   981   00152E  0EA1               	movlw	low main@measured_colour
   982   001530  6E0C               	movwf	getRGBCval@p^0,c
   983   001532  ECA1  F00D         	call	_getRGBCval	;wreg free
   984   001536                     
   985                           ;main.c: 87:         getHSVval(&HSV_colour, &measured_colour);
   986   001536  0E89               	movlw	low main@HSV_colour
   987   001538  6E13               	movwf	getHSVval@p1^0,c
   988   00153A  0EA1               	movlw	low main@measured_colour
   989   00153C  6E14               	movwf	getHSVval@p2^0,c
   990   00153E  EC0D  F007         	call	_getHSVval	;wreg free
   991   001542                     
   992                           ;main.c: 88:         sendRGBCvalSerial4(&measured_colour);
   993   001542  0EA1               	movlw	low main@measured_colour
   994   001544  6E3F               	movwf	sendRGBCvalSerial4@col_val^0,c
   995   001546  EC19  F00D         	call	_sendRGBCvalSerial4	;wreg free
   996   00154A                     
   997                           ;main.c: 89:         sendHSVvalSerial4(&HSV_colour);
   998   00154A  0E89               	movlw	low main@HSV_colour
   999   00154C  6E3F               	movwf	sendHSVvalSerial4@col_val^0,c
  1000   00154E  EC6C  F00E         	call	_sendHSVvalSerial4	;wreg free
  1001   001552                     
  1002                           ;main.c: 90:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1003   001552  0E52               	movlw	82
  1004   001554  6E5B               	movwf	(??_main+1)^0,c
  1005   001556  0E2B               	movlw	43
  1006   001558  6E5A               	movwf	??_main^0,c
  1007   00155A  0E00               	movlw	0
  1008   00155C                     u2487:
  1009   00155C  2EE8               	decfsz	wreg,f,c
  1010   00155E  D7FE               	bra	u2487
  1011   001560  2E5A               	decfsz	??_main^0,f,c
  1012   001562  D7FC               	bra	u2487
  1013   001564  2E5B               	decfsz	(??_main+1)^0,f,c
  1014   001566  D7FA               	bra	u2487
  1015   001568  D000               	nop2	
  1016   00156A  EF97  F00A         	goto	l3257
  1017   00156E  EF1C  F000         	goto	start
  1018   001572                     __end_of_main:
  1019                           	callstack 0
  1020                           
  1021 ;; *************** function _toggle_tricolour_LED *****************
  1022 ;; Defined at:
  1023 ;;		line 86 in file "buggy_lights.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg, status,2, status,0
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1039 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1040 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1041 ;;Total ram usage:        1 bytes
  1042 ;; Hardware stack levels used: 1
  1043 ;; Hardware stack levels required when called: 1
  1044 ;; This function calls:
  1045 ;;		Nothing
  1046 ;; This function is called by:
  1047 ;;		_main
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text1
  1052   001572                     __ptext1:
  1053                           	callstack 0
  1054   001572                     _toggle_tricolour_LED:
  1055                           	callstack 29
  1056   001572                     
  1057                           ;buggy_lights.c: 91:             LATGbits.LATG1 = !LATGbits.LATG1;
  1058   001572  A27F               	btfss	127,1,c	;volatile
  1059   001574  EFBE  F00A         	goto	u1751
  1060   001578  EFC2  F00A         	goto	u1750
  1061   00157C                     u1751:
  1062   00157C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1063   00157E  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1064   001580  EFC3  F00A         	goto	u1768
  1065   001584                     u1750:
  1066   001584  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1067   001586                     u1768:
  1068   001586  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1069   001588  507F               	movf	127,w,c	;volatile
  1070   00158A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1071   00158C  0BFD               	andlw	-3
  1072   00158E  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1073   001590  6E7F               	movwf	127,c	;volatile
  1074                           
  1075                           ;buggy_lights.c: 92:             LATAbits.LATA4 = !LATAbits.LATA4;
  1076   001592  A879               	btfss	121,4,c	;volatile
  1077   001594  EFCE  F00A         	goto	u1771
  1078   001598  EFD2  F00A         	goto	u1770
  1079   00159C                     u1771:
  1080   00159C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1081   00159E  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1082   0015A0  EFD3  F00A         	goto	u1788
  1083   0015A4                     u1770:
  1084   0015A4  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1085   0015A6                     u1788:
  1086   0015A6  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  1087   0015A8  5079               	movf	121,w,c	;volatile
  1088   0015AA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1089   0015AC  0BEF               	andlw	-17
  1090   0015AE  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1091   0015B0  6E79               	movwf	121,c	;volatile
  1092                           
  1093                           ;buggy_lights.c: 93:             LATFbits.LATF7 = !LATFbits.LATF7;
  1094   0015B2  AE7E               	btfss	126,7,c	;volatile
  1095   0015B4  EFDE  F00A         	goto	u1791
  1096   0015B8  EFE2  F00A         	goto	u1790
  1097   0015BC                     u1791:
  1098   0015BC  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1099   0015BE  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1100   0015C0  EFE3  F00A         	goto	u1808
  1101   0015C4                     u1790:
  1102   0015C4  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1103   0015C6                     u1808:
  1104   0015C6  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1105   0015C8  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1106   0015CA  507E               	movf	126,w,c	;volatile
  1107   0015CC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1108   0015CE  0B7F               	andlw	-129
  1109   0015D0  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1110   0015D2  6E7E               	movwf	126,c	;volatile
  1111                           
  1112                           ;buggy_lights.c: 97:             LATGbits.LATG0 = !LATGbits.LATG0;
  1113   0015D4  A07F               	btfss	127,0,c	;volatile
  1114   0015D6  EFEF  F00A         	goto	u1811
  1115   0015DA  EFF3  F00A         	goto	u1810
  1116   0015DE                     u1811:
  1117   0015DE  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1118   0015E0  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1119   0015E2  EFF4  F00A         	goto	u1828
  1120   0015E6                     u1810:
  1121   0015E6  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1122   0015E8                     u1828:
  1123   0015E8  507F               	movf	127,w,c	;volatile
  1124   0015EA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1125   0015EC  0BFE               	andlw	-2
  1126   0015EE  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1127   0015F0  6E7F               	movwf	127,c	;volatile
  1128                           
  1129                           ;buggy_lights.c: 98:             LATEbits.LATE7 = !LATEbits.LATE7;
  1130   0015F2  AE7D               	btfss	125,7,c	;volatile
  1131   0015F4  EFFE  F00A         	goto	u1831
  1132   0015F8  EF02  F00B         	goto	u1830
  1133   0015FC                     u1831:
  1134   0015FC  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1135   0015FE  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1136   001600  EF03  F00B         	goto	u1848
  1137   001604                     u1830:
  1138   001604  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1139   001606                     u1848:
  1140   001606  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1141   001608  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1142   00160A  507D               	movf	125,w,c	;volatile
  1143   00160C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1144   00160E  0B7F               	andlw	-129
  1145   001610  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1146   001612  6E7D               	movwf	125,c	;volatile
  1147                           
  1148                           ;buggy_lights.c: 99:             LATAbits.LATA3 = !LATAbits.LATA3;
  1149   001614  A679               	btfss	121,3,c	;volatile
  1150   001616  EF0F  F00B         	goto	u1851
  1151   00161A  EF13  F00B         	goto	u1850
  1152   00161E                     u1851:
  1153   00161E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1154   001620  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1155   001622  EF14  F00B         	goto	u1868
  1156   001626                     u1850:
  1157   001626  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1158   001628                     u1868:
  1159   001628  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1160   00162A  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1161   00162C  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1162   00162E  5079               	movf	121,w,c	;volatile
  1163   001630  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1164   001632  0BF7               	andlw	-9
  1165   001634  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1166   001636  6E79               	movwf	121,c	;volatile
  1167   001638  0012               	return		;funcret
  1168   00163A                     __end_of_toggle_tricolour_LED:
  1169                           	callstack 0
  1170                           
  1171 ;; *************** function _sendRGBCvalSerial4 *****************
  1172 ;; Defined at:
  1173 ;;		line 62 in file "serial.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;  col_val         1   62[COMRAM] PTR struct RGBC_val
  1176 ;;		 -> main@measured_colour(8), 
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  tempStr        26   63[COMRAM] unsigned char [26]
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1188 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1189 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1191 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1192 ;;Total ram usage:       27 bytes
  1193 ;; Hardware stack levels used: 1
  1194 ;; Hardware stack levels required when called: 6
  1195 ;; This function calls:
  1196 ;;		_sendStringSerial4
  1197 ;;		_sprintf
  1198 ;; This function is called by:
  1199 ;;		_main
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text2
  1204   001A32                     __ptext2:
  1205                           	callstack 0
  1206   001A32                     _sendRGBCvalSerial4:
  1207                           	callstack 24
  1208   001A32                     
  1209                           ;serial.c: 63:     char tempStr[26];;serial.c: 65:     sprintf(tempStr, "%u %u %u %u \r"
      +                          , col_val->R, col_val->G, col_val->B, col_val->C);
  1210   001A32  0E40               	movlw	low sendRGBCvalSerial4@tempStr
  1211   001A34  6E25               	movwf	sprintf@s^0,c
  1212   001A36  6A26               	clrf	(sprintf@s+1)^0,c
  1213   001A38  0E01               	movlw	low STR_5
  1214   001A3A  6E27               	movwf	sprintf@fmt^0,c
  1215   001A3C  503F               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1216   001A3E  6ED9               	movwf	fsr2l,c
  1217   001A40  6ADA               	clrf	fsr2h,c
  1218   001A42  CFDE F028          	movff	postinc2,?_sprintf+3
  1219   001A46  CFDD F029          	movff	postdec2,?_sprintf+4
  1220   001A4A  503F               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1221   001A4C  6ED9               	movwf	fsr2l,c
  1222   001A4E  6ADA               	clrf	fsr2h,c
  1223   001A50  0E02               	movlw	2
  1224   001A52  26D9               	addwf	fsr2l,f,c
  1225   001A54  CFDE F02A          	movff	postinc2,?_sprintf+5
  1226   001A58  CFDD F02B          	movff	postdec2,?_sprintf+6
  1227   001A5C  503F               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1228   001A5E  6ED9               	movwf	fsr2l,c
  1229   001A60  6ADA               	clrf	fsr2h,c
  1230   001A62  0E04               	movlw	4
  1231   001A64  26D9               	addwf	fsr2l,f,c
  1232   001A66  CFDE F02C          	movff	postinc2,?_sprintf+7
  1233   001A6A  CFDD F02D          	movff	postdec2,?_sprintf+8
  1234   001A6E  503F               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1235   001A70  6ED9               	movwf	fsr2l,c
  1236   001A72  6ADA               	clrf	fsr2h,c
  1237   001A74  0E06               	movlw	6
  1238   001A76  26D9               	addwf	fsr2l,f,c
  1239   001A78  CFDE F02E          	movff	postinc2,?_sprintf+9
  1240   001A7C  CFDD F02F          	movff	postdec2,?_sprintf+10
  1241   001A80  EC92  F00E         	call	_sprintf	;wreg free
  1242   001A84                     
  1243                           ;serial.c: 66:     sendStringSerial4(tempStr);
  1244   001A84  0E40               	movlw	low sendRGBCvalSerial4@tempStr
  1245   001A86  6E02               	movwf	sendStringSerial4@string^0,c
  1246   001A88  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1247   001A8A  ECE8  F00C         	call	_sendStringSerial4	;wreg free
  1248   001A8E  0012               	return		;funcret
  1249   001A90                     __end_of_sendRGBCvalSerial4:
  1250                           	callstack 0
  1251                           
  1252 ;; *************** function _sendHSVvalSerial4 *****************
  1253 ;; Defined at:
  1254 ;;		line 70 in file "serial.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  col_val         1   62[COMRAM] PTR struct HSV_val
  1257 ;;		 -> main@HSV_colour(6), 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  tempStr        21   63[COMRAM] unsigned char [21]
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  1    wreg      void 
  1262 ;; Registers used:
  1263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1269 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1270 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1272 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1273 ;;Total ram usage:       22 bytes
  1274 ;; Hardware stack levels used: 1
  1275 ;; Hardware stack levels required when called: 6
  1276 ;; This function calls:
  1277 ;;		_sendStringSerial4
  1278 ;;		_sprintf
  1279 ;; This function is called by:
  1280 ;;		_main
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text3
  1285   001CD8                     __ptext3:
  1286                           	callstack 0
  1287   001CD8                     _sendHSVvalSerial4:
  1288                           	callstack 24
  1289   001CD8                     
  1290                           ;serial.c: 71:     char tempStr[21];;serial.c: 73:     sprintf(tempStr, "%u %u %u \r", c
      +                          ol_val->H, col_val->S, col_val->V);
  1291   001CD8  0E40               	movlw	low sendHSVvalSerial4@tempStr
  1292   001CDA  6E25               	movwf	sprintf@s^0,c
  1293   001CDC  6A26               	clrf	(sprintf@s+1)^0,c
  1294   001CDE  0E04               	movlw	low (STR_5+3)
  1295   001CE0  6E27               	movwf	sprintf@fmt^0,c
  1296   001CE2  503F               	movf	sendHSVvalSerial4@col_val^0,w,c
  1297   001CE4  6ED9               	movwf	fsr2l,c
  1298   001CE6  6ADA               	clrf	fsr2h,c
  1299   001CE8  CFDE F028          	movff	postinc2,?_sprintf+3
  1300   001CEC  CFDD F029          	movff	postdec2,?_sprintf+4
  1301   001CF0  503F               	movf	sendHSVvalSerial4@col_val^0,w,c
  1302   001CF2  6ED9               	movwf	fsr2l,c
  1303   001CF4  6ADA               	clrf	fsr2h,c
  1304   001CF6  0E02               	movlw	2
  1305   001CF8  26D9               	addwf	fsr2l,f,c
  1306   001CFA  CFDE F02A          	movff	postinc2,?_sprintf+5
  1307   001CFE  CFDD F02B          	movff	postdec2,?_sprintf+6
  1308   001D02  503F               	movf	sendHSVvalSerial4@col_val^0,w,c
  1309   001D04  6ED9               	movwf	fsr2l,c
  1310   001D06  6ADA               	clrf	fsr2h,c
  1311   001D08  0E04               	movlw	4
  1312   001D0A  26D9               	addwf	fsr2l,f,c
  1313   001D0C  CFDE F02C          	movff	postinc2,?_sprintf+7
  1314   001D10  CFDD F02D          	movff	postdec2,?_sprintf+8
  1315   001D14  EC92  F00E         	call	_sprintf	;wreg free
  1316   001D18                     
  1317                           ;serial.c: 74:     sendStringSerial4(tempStr);
  1318   001D18  0E40               	movlw	low sendHSVvalSerial4@tempStr
  1319   001D1A  6E02               	movwf	sendStringSerial4@string^0,c
  1320   001D1C  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1321   001D1E  ECE8  F00C         	call	_sendStringSerial4	;wreg free
  1322   001D22  0012               	return		;funcret
  1323   001D24                     __end_of_sendHSVvalSerial4:
  1324                           	callstack 0
  1325                           
  1326 ;; *************** function _sprintf *****************
  1327 ;; Defined at:
  1328 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  s               2   36[COMRAM] PTR unsigned char 
  1331 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), sendArrayCharSerial4@tempStr(161), sendIntSerial4
      +@string(17), 
  1332 ;;  fmt             1   38[COMRAM] PTR const unsigned char 
  1333 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;  f              12   50[COMRAM] struct _IO_FILE
  1336 ;;  ret             2   47[COMRAM] int 
  1337 ;;  ap              1   49[COMRAM] PTR void [1]
  1338 ;;		 -> ?_sprintf(2), 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  2   36[COMRAM] int 
  1341 ;; Registers used:
  1342 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1348 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1349 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1351 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1352 ;;Total ram usage:       26 bytes
  1353 ;; Hardware stack levels used: 1
  1354 ;; Hardware stack levels required when called: 5
  1355 ;; This function calls:
  1356 ;;		_vfprintf
  1357 ;; This function is called by:
  1358 ;;		_sendRGBCvalSerial4
  1359 ;;		_sendHSVvalSerial4
  1360 ;;		_sendIntSerial4
  1361 ;;		_sendArrayCharSerial4
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text4
  1366   001D24                     __ptext4:
  1367                           	callstack 0
  1368   001D24                     _sprintf:
  1369                           	callstack 24
  1370   001D24  0E28               	movlw	low (?_sprintf+3)
  1371   001D26  6E32               	movwf	sprintf@ap^0,c
  1372   001D28  C025  F033         	movff	sprintf@s,sprintf@f
  1373   001D2C  C026  F034         	movff	sprintf@s+1,sprintf@f+1
  1374   001D30  0E00               	movlw	0
  1375   001D32  6E37               	movwf	(sprintf@f+4)^0,c
  1376   001D34  0E00               	movlw	0
  1377   001D36  6E36               	movwf	(sprintf@f+3)^0,c
  1378   001D38  0E00               	movlw	0
  1379   001D3A  6E3E               	movwf	(sprintf@f+11)^0,c
  1380   001D3C  0E00               	movlw	0
  1381   001D3E  6E3D               	movwf	(sprintf@f+10)^0,c
  1382   001D40  0E33               	movlw	low sprintf@f
  1383   001D42  6E21               	movwf	vfprintf@fp^0,c
  1384   001D44  C027  F022         	movff	sprintf@fmt,vfprintf@fmt
  1385   001D48  0E32               	movlw	low sprintf@ap
  1386   001D4A  6E23               	movwf	vfprintf@ap^0,c
  1387   001D4C  EC76  F00D         	call	_vfprintf	;wreg free
  1388   001D50  C021  F030         	movff	?_vfprintf,sprintf@ret
  1389   001D54  C022  F031         	movff	?_vfprintf+1,sprintf@ret+1
  1390   001D58  5036               	movf	(sprintf@f+3)^0,w,c
  1391   001D5A  2425               	addwf	sprintf@s^0,w,c
  1392   001D5C  6ED9               	movwf	fsr2l,c
  1393   001D5E  5037               	movf	(sprintf@f+4)^0,w,c
  1394   001D60  2026               	addwfc	(sprintf@s+1)^0,w,c
  1395   001D62  6EDA               	movwf	fsr2h,c
  1396   001D64  6ADF               	clrf	indf2,c
  1397   001D66  C030  F025         	movff	sprintf@ret,?_sprintf
  1398   001D6A  C031  F026         	movff	sprintf@ret+1,?_sprintf+1
  1399   001D6E  0012               	return		;funcret
  1400   001D70                     __end_of_sprintf:
  1401                           	callstack 0
  1402                           
  1403 ;; *************** function _vfprintf *****************
  1404 ;; Defined at:
  1405 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  fp              1   32[COMRAM] PTR struct _IO_FILE
  1408 ;;		 -> sprintf@f(12), 
  1409 ;;  fmt             1   33[COMRAM] PTR const unsigned char 
  1410 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1411 ;;  ap              1   34[COMRAM] PTR PTR void 
  1412 ;;		 -> sprintf@ap(1), 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  cfmt            1   35[COMRAM] PTR unsigned char 
  1415 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  2   32[COMRAM] int 
  1418 ;; Registers used:
  1419 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1425 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1426 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1428 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1429 ;;Total ram usage:        4 bytes
  1430 ;; Hardware stack levels used: 1
  1431 ;; Hardware stack levels required when called: 4
  1432 ;; This function calls:
  1433 ;;		_vfpfcnvrt
  1434 ;; This function is called by:
  1435 ;;		_sprintf
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text5
  1440   001AEC                     __ptext5:
  1441                           	callstack 0
  1442   001AEC                     _vfprintf:
  1443                           	callstack 24
  1444   001AEC                     
  1445                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1446   001AEC  C022  F024         	movff	vfprintf@fmt,vfprintf@cfmt
  1447   001AF0                     
  1448                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  1449   001AF0  0E00               	movlw	0
  1450   001AF2  0100               	movlb	0	; () banked
  1451   001AF4  6F81               	movwf	(_nout+1)& (0+255),b
  1452   001AF6  0E00               	movlw	0
  1453   001AF8  6F80               	movwf	_nout& (0+255),b
  1454                           
  1455                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1456   001AFA  EF8C  F00D         	goto	l2827
  1457   001AFE                     l2825:
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  1461   001AFE  C021  F013         	movff	vfprintf@fp,vfpfcnvrt@fp
  1462   001B02  0E24               	movlw	low vfprintf@cfmt
  1463   001B04  6E14               	movwf	vfpfcnvrt@fmt^0,c
  1464   001B06  C023  F015         	movff	vfprintf@ap,vfpfcnvrt@ap
  1465   001B0A  ECA5  F008         	call	_vfpfcnvrt	;wreg free
  1466   001B0E  5013               	movf	?_vfpfcnvrt^0,w,c
  1467   001B10  0100               	movlb	0	; () banked
  1468   001B12  2780               	addwf	_nout& (0+255),f,b
  1469   001B14  5014               	movf	(?_vfpfcnvrt+1)^0,w,c
  1470   001B16  2381               	addwfc	(_nout+1)& (0+255),f,b
  1471   001B18                     l2827:
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1475   001B18  C024  FFF6         	movff	vfprintf@cfmt,tblptrl
  1476   001B1C                     	if	1	;There is more than 1 active tblptr byte
  1477   001B1C  0E0E               	movlw	high __smallconst
  1478   001B1E  6EF7               	movwf	tblptrh,c
  1479   001B20                     	endif
  1480   001B20                     	if	0	;tblptru may be non-zero
  1481   001B20                     	endif
  1482   001B20                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1483   001B20  0E00               	movlw	low (__smallconst shr (0+16))
  1484   001B22  6EF8               	movwf	tblptru,c
  1485   001B24                     	endif
  1486   001B24  0008               	tblrd		*
  1487   001B26  50F5               	movf	tablat,w,c
  1488   001B28  0900               	iorlw	0
  1489   001B2A  A4D8               	btfss	status,2,c
  1490   001B2C  EF9A  F00D         	goto	u1691
  1491   001B30  EF9C  F00D         	goto	u1690
  1492   001B34                     u1691:
  1493   001B34  EF7F  F00D         	goto	l2825
  1494   001B38                     u1690:
  1495   001B38                     
  1496                           ; BSR set to: 0
  1497                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  1498   001B38  C080  F021         	movff	_nout,?_vfprintf
  1499   001B3C  C081  F022         	movff	_nout+1,?_vfprintf+1
  1500   001B40                     
  1501                           ; BSR set to: 0
  1502   001B40  0012               	return		;funcret
  1503   001B42                     __end_of_vfprintf:
  1504                           	callstack 0
  1505                           
  1506 ;; *************** function _vfpfcnvrt *****************
  1507 ;; Defined at:
  1508 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  fp              1   18[COMRAM] PTR struct _IO_FILE
  1511 ;;		 -> sprintf@f(12), 
  1512 ;;  fmt             1   19[COMRAM] PTR PTR unsigned char 
  1513 ;;		 -> vfprintf@cfmt(1), 
  1514 ;;  ap              1   20[COMRAM] PTR PTR void 
  1515 ;;		 -> sprintf@ap(1), 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  convarg         4   27[COMRAM] struct .
  1518 ;;  cnt             2   24[COMRAM] int 
  1519 ;;  c               1   31[COMRAM] unsigned char 
  1520 ;;  cp              1   26[COMRAM] PTR unsigned char 
  1521 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1522 ;;  done            1   23[COMRAM] _Bool 
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  2   18[COMRAM] int 
  1525 ;; Registers used:
  1526 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1532 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1533 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1534 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1535 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1536 ;;Total ram usage:       14 bytes
  1537 ;; Hardware stack levels used: 1
  1538 ;; Hardware stack levels required when called: 3
  1539 ;; This function calls:
  1540 ;;		___awdiv
  1541 ;;		___awmod
  1542 ;;		___lwdiv
  1543 ;;		___lwmod
  1544 ;;		_abs
  1545 ;;		_fputc
  1546 ;; This function is called by:
  1547 ;;		_vfprintf
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text6
  1552   00114A                     __ptext6:
  1553                           	callstack 0
  1554   00114A                     _vfpfcnvrt:
  1555                           	callstack 24
  1556   00114A                     
  1557                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  1558   00114A  0E00               	movlw	0
  1559   00114C  6E1A               	movwf	(vfpfcnvrt@cnt+1)^0,c
  1560   00114E  0E00               	movlw	0
  1561   001150  6E19               	movwf	vfpfcnvrt@cnt^0,c
  1562   001152                     
  1563                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  1564   001152  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1565   001154  6ED9               	movwf	fsr2l,c
  1566   001156  6ADA               	clrf	fsr2h,c
  1567   001158  CFDF FFF6          	movff	indf2,tblptrl
  1568   00115C                     	if	1	;There is more than 1 active tblptr byte
  1569   00115C  0E0E               	movlw	high __smallconst
  1570   00115E  6EF7               	movwf	tblptrh,c
  1571   001160                     	endif
  1572   001160                     	if	0	;tblptru may be non-zero
  1573   001160                     	endif
  1574   001160                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1575   001160  0E00               	movlw	low (__smallconst shr (0+16))
  1576   001162  6EF8               	movwf	tblptru,c
  1577   001164                     	endif
  1578   001164  0008               	tblrd		*
  1579   001166  50F5               	movf	tablat,w,c
  1580   001168  0A25               	xorlw	37
  1581   00116A  A4D8               	btfss	status,2,c
  1582   00116C  EFBA  F008         	goto	u1521
  1583   001170  EFBC  F008         	goto	u1520
  1584   001174                     u1521:
  1585   001174  EF11  F00A         	goto	l2727
  1586   001178                     u1520:
  1587   001178                     
  1588                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1589   001178  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1590   00117A  6ED9               	movwf	fsr2l,c
  1591   00117C  6ADA               	clrf	fsr2h,c
  1592   00117E  2ADF               	incf	indf2,f,c
  1593   001180                     
  1594                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1595   001180  0E00               	movlw	0
  1596   001182  0100               	movlb	0	; () banked
  1597   001184  6F83               	movwf	(_width+1)& (0+255),b
  1598   001186  0E00               	movlw	0
  1599   001188  6F82               	movwf	_width& (0+255),b
  1600   00118A  C082  F086         	movff	_width,_flags
  1601   00118E                     
  1602                           ; BSR set to: 0
  1603                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1604   00118E  6984               	setf	_prec& (0+255),b
  1605   001190  6985               	setf	(_prec+1)& (0+255),b
  1606   001192                     
  1607                           ; BSR set to: 0
  1608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1609   001192  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1610   001194  6ED9               	movwf	fsr2l,c
  1611   001196  6ADA               	clrf	fsr2h,c
  1612   001198  50DF               	movf	indf2,w,c
  1613   00119A  6E1B               	movwf	vfpfcnvrt@cp^0,c
  1614   00119C                     
  1615                           ; BSR set to: 0
  1616                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1617   00119C  C01B  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1618   0011A0                     	if	1	;There is more than 1 active tblptr byte
  1619   0011A0  0E0E               	movlw	high __smallconst
  1620   0011A2  6EF7               	movwf	tblptrh,c
  1621   0011A4                     	endif
  1622   0011A4                     	if	0	;tblptru may be non-zero
  1623   0011A4                     	endif
  1624   0011A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1625   0011A4  0E00               	movlw	low (__smallconst shr (0+16))
  1626   0011A6  6EF8               	movwf	tblptru,c
  1627   0011A8                     	endif
  1628   0011A8  0008               	tblrd		*
  1629   0011AA  50F5               	movf	tablat,w,c
  1630   0011AC  0A64               	xorlw	100
  1631   0011AE  B4D8               	btfsc	status,2,c
  1632   0011B0  EFDC  F008         	goto	u1531
  1633   0011B4  EFDE  F008         	goto	u1530
  1634   0011B8                     u1531:
  1635   0011B8  EFEE  F008         	goto	l2663
  1636   0011BC                     u1530:
  1637   0011BC                     
  1638                           ; BSR set to: 0
  1639   0011BC  C01B  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1640   0011C0                     	if	1	;There is more than 1 active tblptr byte
  1641   0011C0  0E0E               	movlw	high __smallconst
  1642   0011C2  6EF7               	movwf	tblptrh,c
  1643   0011C4                     	endif
  1644   0011C4                     	if	0	;tblptru may be non-zero
  1645   0011C4                     	endif
  1646   0011C4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1647   0011C4  0E00               	movlw	low (__smallconst shr (0+16))
  1648   0011C6  6EF8               	movwf	tblptru,c
  1649   0011C8                     	endif
  1650   0011C8  0008               	tblrd		*
  1651   0011CA  50F5               	movf	tablat,w,c
  1652   0011CC  0A69               	xorlw	105
  1653   0011CE  A4D8               	btfss	status,2,c
  1654   0011D0  EFEC  F008         	goto	u1541
  1655   0011D4  EFEE  F008         	goto	u1540
  1656   0011D8                     u1541:
  1657   0011D8  EF7C  F009         	goto	l2693
  1658   0011DC                     u1540:
  1659   0011DC                     l2663:
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1663   0011DC  5015               	movf	vfpfcnvrt@ap^0,w,c
  1664   0011DE  6ED9               	movwf	fsr2l,c
  1665   0011E0  6ADA               	clrf	fsr2h,c
  1666   0011E2  0E02               	movlw	2
  1667   0011E4  26DF               	addwf	indf2,f,c
  1668   0011E6  5CDF               	subwf	indf2,w,c
  1669   0011E8  6ED9               	movwf	fsr2l,c
  1670   0011EA  6ADA               	clrf	fsr2h,c
  1671   0011EC  CFDE F01C          	movff	postinc2,vfpfcnvrt@convarg
  1672   0011F0  CFDE F01D          	movff	postinc2,vfpfcnvrt@convarg+1
  1673   0011F4                     
  1674                           ; BSR set to: 0
  1675                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1676   0011F4  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1677   0011F6  6ED9               	movwf	fsr2l,c
  1678   0011F8  6ADA               	clrf	fsr2h,c
  1679   0011FA  281B               	incf	vfpfcnvrt@cp^0,w,c
  1680   0011FC  6EDF               	movwf	indf2,c
  1681   0011FE                     
  1682                           ; BSR set to: 0
  1683                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1684   0011FE  0E20               	movlw	32
  1685   001200  6E20               	movwf	vfpfcnvrt@c^0,c
  1686                           
  1687                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1688   001202  BE1D               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1689   001204  EF06  F009         	goto	u1551
  1690   001208  EF09  F009         	goto	u1550
  1691   00120C                     u1551:
  1692   00120C  0E01               	movlw	1
  1693   00120E  EF0A  F009         	goto	u1560
  1694   001212                     u1550:
  1695   001212  0E00               	movlw	0
  1696   001214                     u1560:
  1697   001214  6E18               	movwf	vfpfcnvrt@done^0,c
  1698   001216                     l2669:
  1699                           
  1700                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1701   001216  0620               	decf	vfpfcnvrt@c^0,f,c
  1702   001218  5020               	movf	vfpfcnvrt@c^0,w,c
  1703   00121A  0F60               	addlw	low _dbuf
  1704   00121C  6ED9               	movwf	fsr2l,c
  1705   00121E  6ADA               	clrf	fsr2h,c
  1706   001220  C01C  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1707   001224  C01D  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1708   001228  0E00               	movlw	0
  1709   00122A  6E04               	movwf	(___awmod@divisor+1)^0,c
  1710   00122C  0E0A               	movlw	10
  1711   00122E  6E03               	movwf	___awmod@divisor^0,c
  1712   001230  ECDC  F00B         	call	___awmod	;wreg free
  1713   001234  C001  F007         	movff	?___awmod,abs@a
  1714   001238  C002  F008         	movff	?___awmod+1,abs@a+1
  1715   00123C  ECD9  F00E         	call	_abs	;wreg free
  1716   001240  5007               	movf	?_abs^0,w,c
  1717   001242  0F30               	addlw	48
  1718   001244  6EDF               	movwf	indf2,c
  1719   001246                     
  1720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1721   001246  C01C  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1722   00124A  C01D  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1723   00124E  0E00               	movlw	0
  1724   001250  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1725   001252  0E0A               	movlw	10
  1726   001254  6E03               	movwf	___awdiv@divisor^0,c
  1727   001256  EC1D  F00B         	call	___awdiv	;wreg free
  1728   00125A  C001  F01C         	movff	?___awdiv,vfpfcnvrt@convarg
  1729   00125E  C002  F01D         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1730   001262                     
  1731                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  1732   001262  4A19               	infsnz	vfpfcnvrt@cnt^0,f,c
  1733   001264  2A1A               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1734   001266                     
  1735                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1736   001266  501C               	movf	vfpfcnvrt@convarg^0,w,c
  1737   001268  101D               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1738   00126A  B4D8               	btfsc	status,2,c
  1739   00126C  EF3A  F009         	goto	u1571
  1740   001270  EF3C  F009         	goto	u1570
  1741   001274                     u1571:
  1742   001274  EF44  F009         	goto	l2679
  1743   001278                     u1570:
  1744   001278  5020               	movf	vfpfcnvrt@c^0,w,c
  1745   00127A  A4D8               	btfss	status,2,c
  1746   00127C  EF42  F009         	goto	u1581
  1747   001280  EF44  F009         	goto	u1580
  1748   001284                     u1581:
  1749   001284  EF0B  F009         	goto	l2669
  1750   001288                     u1580:
  1751   001288                     l2679:
  1752                           
  1753                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1754   001288  5020               	movf	vfpfcnvrt@c^0,w,c
  1755   00128A  B4D8               	btfsc	status,2,c
  1756   00128C  EF4A  F009         	goto	u1591
  1757   001290  EF4C  F009         	goto	u1590
  1758   001294                     u1591:
  1759   001294  EF6D  F009         	goto	l2691
  1760   001298                     u1590:
  1761   001298  5018               	movf	vfpfcnvrt@done^0,w,c
  1762   00129A  B4D8               	btfsc	status,2,c
  1763   00129C  EF52  F009         	goto	u1601
  1764   0012A0  EF54  F009         	goto	u1600
  1765   0012A4                     u1601:
  1766   0012A4  EF6D  F009         	goto	l2691
  1767   0012A8                     u1600:
  1768   0012A8                     
  1769                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1770   0012A8  0620               	decf	vfpfcnvrt@c^0,f,c
  1771   0012AA  5020               	movf	vfpfcnvrt@c^0,w,c
  1772   0012AC  0F60               	addlw	low _dbuf
  1773   0012AE  6ED9               	movwf	fsr2l,c
  1774   0012B0  6ADA               	clrf	fsr2h,c
  1775   0012B2  0E2D               	movlw	45
  1776   0012B4  6EDF               	movwf	indf2,c
  1777   0012B6                     
  1778                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  1779   0012B6  4A19               	infsnz	vfpfcnvrt@cnt^0,f,c
  1780   0012B8  2A1A               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1781   0012BA  EF6D  F009         	goto	l2691
  1782   0012BE                     l2687:
  1783                           
  1784                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1785   0012BE  5020               	movf	vfpfcnvrt@c^0,w,c
  1786   0012C0  0F60               	addlw	low _dbuf
  1787   0012C2  6ED9               	movwf	fsr2l,c
  1788   0012C4  6ADA               	clrf	fsr2h,c
  1789   0012C6  50DF               	movf	indf2,w,c
  1790   0012C8  6E16               	movwf	??_vfpfcnvrt^0,c
  1791   0012CA  5016               	movf	??_vfpfcnvrt^0,w,c
  1792   0012CC  6E01               	movwf	fputc@c^0,c
  1793   0012CE  6A02               	clrf	(fputc@c+1)^0,c
  1794   0012D0  C013  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1795   0012D4  EC7F  F00B         	call	_fputc	;wreg free
  1796   0012D8  2A20               	incf	vfpfcnvrt@c^0,f,c
  1797   0012DA                     l2691:
  1798                           
  1799                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1800   0012DA  0E20               	movlw	32
  1801   0012DC  1820               	xorwf	vfpfcnvrt@c^0,w,c
  1802   0012DE  A4D8               	btfss	status,2,c
  1803   0012E0  EF74  F009         	goto	u1611
  1804   0012E4  EF76  F009         	goto	u1610
  1805   0012E8                     u1611:
  1806   0012E8  EF5F  F009         	goto	l2687
  1807   0012EC                     u1610:
  1808   0012EC                     l1407:
  1809                           
  1810                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  1811   0012EC  C019  F013         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  1812   0012F0  C01A  F014         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  1813   0012F4  EF2A  F00A         	goto	l1408
  1814   0012F8                     l2693:
  1815                           
  1816                           ; BSR set to: 0
  1817   0012F8  C01B  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1818   0012FC                     	if	1	;There is more than 1 active tblptr byte
  1819   0012FC  0E0E               	movlw	high __smallconst
  1820   0012FE  6EF7               	movwf	tblptrh,c
  1821   001300                     	endif
  1822   001300                     	if	0	;tblptru may be non-zero
  1823   001300                     	endif
  1824   001300                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1825   001300  0E00               	movlw	low (__smallconst shr (0+16))
  1826   001302  6EF8               	movwf	tblptru,c
  1827   001304                     	endif
  1828   001304  0008               	tblrd		*
  1829   001306  50F5               	movf	tablat,w,c
  1830   001308  0A75               	xorlw	117
  1831   00130A  A4D8               	btfss	status,2,c
  1832   00130C  EF8A  F009         	goto	u1621
  1833   001310  EF8C  F009         	goto	u1620
  1834   001314                     u1621:
  1835   001314  EF07  F00A         	goto	l2721
  1836   001318                     u1620:
  1837   001318                     
  1838                           ; BSR set to: 0
  1839                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1840   001318  5015               	movf	vfpfcnvrt@ap^0,w,c
  1841   00131A  6ED9               	movwf	fsr2l,c
  1842   00131C  6ADA               	clrf	fsr2h,c
  1843   00131E  0E02               	movlw	2
  1844   001320  26DF               	addwf	indf2,f,c
  1845   001322  5CDF               	subwf	indf2,w,c
  1846   001324  6ED9               	movwf	fsr2l,c
  1847   001326  6ADA               	clrf	fsr2h,c
  1848   001328  CFDE F01C          	movff	postinc2,vfpfcnvrt@convarg
  1849   00132C  CFDE F01D          	movff	postinc2,vfpfcnvrt@convarg+1
  1850   001330                     
  1851                           ; BSR set to: 0
  1852                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1853   001330  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1854   001332  6ED9               	movwf	fsr2l,c
  1855   001334  6ADA               	clrf	fsr2h,c
  1856   001336  281B               	incf	vfpfcnvrt@cp^0,w,c
  1857   001338  6EDF               	movwf	indf2,c
  1858                           
  1859                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1860   00133A  EFEF  F009         	goto	l2719
  1861   00133E                     l2699:
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  1865   00133E  0E20               	movlw	32
  1866   001340  6E20               	movwf	vfpfcnvrt@c^0,c
  1867   001342                     l2701:
  1868                           
  1869                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  1870   001342  0620               	decf	vfpfcnvrt@c^0,f,c
  1871   001344  5020               	movf	vfpfcnvrt@c^0,w,c
  1872   001346  0F60               	addlw	low _dbuf
  1873   001348  6ED9               	movwf	fsr2l,c
  1874   00134A  6ADA               	clrf	fsr2h,c
  1875   00134C  C01C  F00E         	movff	vfpfcnvrt@convarg,___lwmod@dividend
  1876   001350  C01D  F00F         	movff	vfpfcnvrt@convarg+1,___lwmod@dividend+1
  1877   001354  0E00               	movlw	0
  1878   001356  6E11               	movwf	(___lwmod@divisor+1)^0,c
  1879   001358  0E0A               	movlw	10
  1880   00135A  6E10               	movwf	___lwmod@divisor^0,c
  1881   00135C  ECB6  F00C         	call	___lwmod	;wreg free
  1882   001360  500E               	movf	?___lwmod^0,w,c
  1883   001362  0F30               	addlw	48
  1884   001364  6EDF               	movwf	indf2,c
  1885   001366                     
  1886                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  1887   001366  C01C  F007         	movff	vfpfcnvrt@convarg,___lwdiv@dividend
  1888   00136A  C01D  F008         	movff	vfpfcnvrt@convarg+1,___lwdiv@dividend+1
  1889   00136E  0E00               	movlw	0
  1890   001370  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1891   001372  0E0A               	movlw	10
  1892   001374  6E09               	movwf	___lwdiv@divisor^0,c
  1893   001376  EC7C  F00C         	call	___lwdiv	;wreg free
  1894   00137A  C007  F01C         	movff	?___lwdiv,vfpfcnvrt@convarg
  1895   00137E  C008  F01D         	movff	?___lwdiv+1,vfpfcnvrt@convarg+1
  1896   001382                     
  1897                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1530:       cnt++
      +                          ;
  1898   001382  4A19               	infsnz	vfpfcnvrt@cnt^0,f,c
  1899   001384  2A1A               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1900   001386                     
  1901                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  1902   001386  501C               	movf	vfpfcnvrt@convarg^0,w,c
  1903   001388  101D               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1904   00138A  B4D8               	btfsc	status,2,c
  1905   00138C  EFCA  F009         	goto	u1631
  1906   001390  EFCC  F009         	goto	u1630
  1907   001394                     u1631:
  1908   001394  EFE4  F009         	goto	l2715
  1909   001398                     u1630:
  1910   001398  5020               	movf	vfpfcnvrt@c^0,w,c
  1911   00139A  A4D8               	btfss	status,2,c
  1912   00139C  EFD2  F009         	goto	u1641
  1913   0013A0  EFD4  F009         	goto	u1640
  1914   0013A4                     u1641:
  1915   0013A4  EFA1  F009         	goto	l2701
  1916   0013A8                     u1640:
  1917   0013A8  EFE4  F009         	goto	l2715
  1918   0013AC                     l2711:
  1919                           
  1920                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  1921   0013AC  5020               	movf	vfpfcnvrt@c^0,w,c
  1922   0013AE  0F60               	addlw	low _dbuf
  1923   0013B0  6ED9               	movwf	fsr2l,c
  1924   0013B2  6ADA               	clrf	fsr2h,c
  1925   0013B4  50DF               	movf	indf2,w,c
  1926   0013B6  6E16               	movwf	??_vfpfcnvrt^0,c
  1927   0013B8  5016               	movf	??_vfpfcnvrt^0,w,c
  1928   0013BA  6E01               	movwf	fputc@c^0,c
  1929   0013BC  6A02               	clrf	(fputc@c+1)^0,c
  1930   0013BE  C013  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1931   0013C2  EC7F  F00B         	call	_fputc	;wreg free
  1932   0013C6  2A20               	incf	vfpfcnvrt@c^0,f,c
  1933   0013C8                     l2715:
  1934                           
  1935                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  1936   0013C8  0E20               	movlw	32
  1937   0013CA  1820               	xorwf	vfpfcnvrt@c^0,w,c
  1938   0013CC  A4D8               	btfss	status,2,c
  1939   0013CE  EFEB  F009         	goto	u1651
  1940   0013D2  EFED  F009         	goto	u1650
  1941   0013D6                     u1651:
  1942   0013D6  EFD6  F009         	goto	l2711
  1943   0013DA                     u1650:
  1944   0013DA  EF76  F009         	goto	l1407
  1945   0013DE                     l2719:
  1946                           
  1947                           ; BSR set to: 0
  1948   0013DE  C01B  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1949   0013E2                     	if	1	;There is more than 1 active tblptr byte
  1950   0013E2  0E0E               	movlw	high __smallconst
  1951   0013E4  6EF7               	movwf	tblptrh,c
  1952   0013E6                     	endif
  1953   0013E6                     	if	0	;tblptru may be non-zero
  1954   0013E6                     	endif
  1955   0013E6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1956   0013E6  0E00               	movlw	low (__smallconst shr (0+16))
  1957   0013E8  6EF8               	movwf	tblptru,c
  1958   0013EA                     	endif
  1959   0013EA  0008               	tblrd		*
  1960   0013EC  50F5               	movf	tablat,w,c
  1961   0013EE  6E16               	movwf	??_vfpfcnvrt^0,c
  1962   0013F0  6A17               	clrf	(??_vfpfcnvrt+1)^0,c
  1963                           
  1964                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1965                           ; Switch size 1, requested type "simple"
  1966                           ; Number of cases is 1, Range of values is 0 to 0
  1967                           ; switch strategies available:
  1968                           ; Name         Instructions Cycles
  1969                           ; simple_byte            4     3 (average)
  1970                           ;	Chosen strategy is simple_byte
  1971   0013F2  5017               	movf	(??_vfpfcnvrt+1)^0,w,c
  1972   0013F4  0A00               	xorlw	0	; case 0
  1973   0013F6  B4D8               	btfsc	status,2,c
  1974   0013F8  EF00  F00A         	goto	l3673
  1975   0013FC  EF07  F00A         	goto	l2721
  1976   001400                     l3673:
  1977                           
  1978                           ; BSR set to: 0
  1979                           ; Switch size 1, requested type "simple"
  1980                           ; Number of cases is 1, Range of values is 117 to 117
  1981                           ; switch strategies available:
  1982                           ; Name         Instructions Cycles
  1983                           ; simple_byte            4     3 (average)
  1984                           ;	Chosen strategy is simple_byte
  1985   001400  5016               	movf	??_vfpfcnvrt^0,w,c
  1986   001402  0A75               	xorlw	117	; case 117
  1987   001404  B4D8               	btfsc	status,2,c
  1988   001406  EF9F  F009         	goto	l2699
  1989   00140A  EF07  F00A         	goto	l2721
  1990   00140E                     l2721:
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1994   00140E  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1995   001410  6ED9               	movwf	fsr2l,c
  1996   001412  6ADA               	clrf	fsr2h,c
  1997   001414  2ADF               	incf	indf2,f,c
  1998   001416                     
  1999                           ; BSR set to: 0
  2000                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  2001   001416  0E00               	movlw	0
  2002   001418  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  2003   00141A  0E00               	movlw	0
  2004   00141C  6E13               	movwf	?_vfpfcnvrt^0,c
  2005   00141E  EF2A  F00A         	goto	l1408
  2006   001422                     l2727:
  2007                           
  2008                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2009   001422  5014               	movf	vfpfcnvrt@fmt^0,w,c
  2010   001424  6ED9               	movwf	fsr2l,c
  2011   001426  6ADA               	clrf	fsr2h,c
  2012   001428  CFDF FFF6          	movff	indf2,tblptrl
  2013   00142C                     	if	1	;There is more than 1 active tblptr byte
  2014   00142C  0E0E               	movlw	high __smallconst
  2015   00142E  6EF7               	movwf	tblptrh,c
  2016   001430                     	endif
  2017   001430                     	if	0	;tblptru may be non-zero
  2018   001430                     	endif
  2019   001430                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2020   001430  0E00               	movlw	low (__smallconst shr (0+16))
  2021   001432  6EF8               	movwf	tblptru,c
  2022   001434                     	endif
  2023   001434  0008               	tblrd		*
  2024   001436  50F5               	movf	tablat,w,c
  2025   001438  6E01               	movwf	fputc@c^0,c
  2026   00143A  6A02               	clrf	(fputc@c+1)^0,c
  2027   00143C  C013  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2028   001440  EC7F  F00B         	call	_fputc	;wreg free
  2029   001444                     
  2030                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  2031   001444  5014               	movf	vfpfcnvrt@fmt^0,w,c
  2032   001446  6ED9               	movwf	fsr2l,c
  2033   001448  6ADA               	clrf	fsr2h,c
  2034   00144A  2ADF               	incf	indf2,f,c
  2035   00144C                     
  2036                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  2037   00144C  0E00               	movlw	0
  2038   00144E  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  2039   001450  0E01               	movlw	1
  2040   001452  6E13               	movwf	?_vfpfcnvrt^0,c
  2041   001454                     l1408:
  2042   001454  0012               	return		;funcret
  2043   001456                     __end_of_vfpfcnvrt:
  2044                           	callstack 0
  2045                           
  2046 ;; *************** function _fputc *****************
  2047 ;; Defined at:
  2048 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  c               2    0[COMRAM] int 
  2051 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2052 ;;		 -> sprintf@f(12), 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;		None
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  2    0[COMRAM] int 
  2057 ;; Registers used:
  2058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2064 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2066 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2067 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2068 ;;Total ram usage:        8 bytes
  2069 ;; Hardware stack levels used: 1
  2070 ;; Hardware stack levels required when called: 2
  2071 ;; This function calls:
  2072 ;;		_putch
  2073 ;; This function is called by:
  2074 ;;		_vfpfcnvrt
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text7
  2079   0016FE                     __ptext7:
  2080                           	callstack 0
  2081   0016FE                     _fputc:
  2082                           	callstack 24
  2083   0016FE  5003               	movf	fputc@fp^0,w,c
  2084   001700  B4D8               	btfsc	status,2,c
  2085   001702  EF85  F00B         	goto	u1291
  2086   001706  EF87  F00B         	goto	u1290
  2087   00170A                     u1291:
  2088   00170A  EF8F  F00B         	goto	l2543
  2089   00170E                     u1290:
  2090   00170E  5003               	movf	fputc@fp^0,w,c
  2091   001710  A4D8               	btfss	status,2,c
  2092   001712  EF8D  F00B         	goto	u1301
  2093   001716  EF8F  F00B         	goto	u1300
  2094   00171A                     u1301:
  2095   00171A  EF94  F00B         	goto	l2545
  2096   00171E                     u1300:
  2097   00171E                     l2543:
  2098   00171E  5001               	movf	fputc@c^0,w,c
  2099   001720  ECFF  F00F         	call	_putch
  2100   001724  EFDB  F00B         	goto	l1446
  2101   001728                     l2545:
  2102   001728  5003               	movf	fputc@fp^0,w,c
  2103   00172A  6ED9               	movwf	fsr2l,c
  2104   00172C  6ADA               	clrf	fsr2h,c
  2105   00172E  0E0A               	movlw	10
  2106   001730  26D9               	addwf	fsr2l,f,c
  2107   001732  50DE               	movf	postinc2,w,c
  2108   001734  10DE               	iorwf	postinc2,w,c
  2109   001736  B4D8               	btfsc	status,2,c
  2110   001738  EFA0  F00B         	goto	u1311
  2111   00173C  EFA2  F00B         	goto	u1310
  2112   001740                     u1311:
  2113   001740  EFBB  F00B         	goto	l2549
  2114   001744                     u1310:
  2115   001744  5003               	movf	fputc@fp^0,w,c
  2116   001746  6ED9               	movwf	fsr2l,c
  2117   001748  6ADA               	clrf	fsr2h,c
  2118   00174A  0E0A               	movlw	10
  2119   00174C  26D9               	addwf	fsr2l,f,c
  2120   00174E  5003               	movf	fputc@fp^0,w,c
  2121   001750  6EE1               	movwf	fsr1l,c
  2122   001752  6AE2               	clrf	fsr1h,c
  2123   001754  0E03               	movlw	3
  2124   001756  26E1               	addwf	fsr1l,f,c
  2125   001758  50DE               	movf	postinc2,w,c
  2126   00175A  5CE6               	subwf	postinc1,w,c
  2127   00175C  50E6               	movf	postinc1,w,c
  2128   00175E  0A80               	xorlw	128
  2129   001760  6E08               	movwf	(??_fputc+4)^0,c
  2130   001762  50DE               	movf	postinc2,w,c
  2131   001764  0A80               	xorlw	128
  2132   001766  5808               	subwfb	(??_fputc+4)^0,w,c
  2133   001768  B0D8               	btfsc	status,0,c
  2134   00176A  EFB9  F00B         	goto	u1321
  2135   00176E  EFBB  F00B         	goto	u1320
  2136   001772                     u1321:
  2137   001772  EFDB  F00B         	goto	l1446
  2138   001776                     u1320:
  2139   001776                     l2549:
  2140   001776  5003               	movf	fputc@fp^0,w,c
  2141   001778  6ED9               	movwf	fsr2l,c
  2142   00177A  6ADA               	clrf	fsr2h,c
  2143   00177C  0E03               	movlw	3
  2144   00177E  26D9               	addwf	fsr2l,f,c
  2145   001780  CFDE F004          	movff	postinc2,??_fputc
  2146   001784  CFDD F005          	movff	postdec2,??_fputc+1
  2147   001788  5003               	movf	fputc@fp^0,w,c
  2148   00178A  6ED9               	movwf	fsr2l,c
  2149   00178C  6ADA               	clrf	fsr2h,c
  2150   00178E  CFDE F006          	movff	postinc2,??_fputc+2
  2151   001792  CFDD F007          	movff	postdec2,??_fputc+3
  2152   001796  5004               	movf	??_fputc^0,w,c
  2153   001798  2406               	addwf	(??_fputc+2)^0,w,c
  2154   00179A  6ED9               	movwf	fsr2l,c
  2155   00179C  5005               	movf	(??_fputc+1)^0,w,c
  2156   00179E  2007               	addwfc	(??_fputc+3)^0,w,c
  2157   0017A0  6EDA               	movwf	fsr2h,c
  2158   0017A2  C001  FFDF         	movff	fputc@c,indf2
  2159   0017A6  5003               	movf	fputc@fp^0,w,c
  2160   0017A8  6ED9               	movwf	fsr2l,c
  2161   0017AA  6ADA               	clrf	fsr2h,c
  2162   0017AC  0E03               	movlw	3
  2163   0017AE  26D9               	addwf	fsr2l,f,c
  2164   0017B0  2ADE               	incf	postinc2,f,c
  2165   0017B2  0E00               	movlw	0
  2166   0017B4  22DD               	addwfc	postdec2,f,c
  2167   0017B6                     l1446:
  2168   0017B6  0012               	return		;funcret
  2169   0017B8                     __end_of_fputc:
  2170                           	callstack 0
  2171                           
  2172 ;; *************** function _putch *****************
  2173 ;; Defined at:
  2174 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;  c               1    wreg     unsigned char 
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;  c               1    0[COMRAM] unsigned char 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		wreg
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;Total ram usage:        0 bytes
  2193 ;; Hardware stack levels used: 1
  2194 ;; Hardware stack levels required when called: 1
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_fputc
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text8
  2203   001FFE                     __ptext8:
  2204                           	callstack 0
  2205   001FFE                     _putch:
  2206                           	callstack 24
  2207   001FFE  0012               	return		;funcret
  2208   002000                     __end_of_putch:
  2209                           	callstack 0
  2210                           
  2211 ;; *************** function _abs *****************
  2212 ;; Defined at:
  2213 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  a               2    6[COMRAM] int 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;		None
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  2    6[COMRAM] int 
  2220 ;; Registers used:
  2221 ;;		wreg, status,2, status,0
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2227 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2229 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2230 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2231 ;;Total ram usage:        4 bytes
  2232 ;; Hardware stack levels used: 1
  2233 ;; Hardware stack levels required when called: 1
  2234 ;; This function calls:
  2235 ;;		Nothing
  2236 ;; This function is called by:
  2237 ;;		_vfpfcnvrt
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text9
  2242   001DB2                     __ptext9:
  2243                           	callstack 0
  2244   001DB2                     _abs:
  2245                           	callstack 25
  2246   001DB2  BE08               	btfsc	(abs@a+1)^0,7,c
  2247   001DB4  EFDE  F00E         	goto	u1331
  2248   001DB8  EFE0  F00E         	goto	u1330
  2249   001DBC                     u1331:
  2250   001DBC  EFE6  F00E         	goto	l1431
  2251   001DC0                     u1330:
  2252   001DC0  C007  F007         	movff	abs@a,?_abs
  2253   001DC4  C008  F008         	movff	abs@a+1,?_abs+1
  2254   001DC8  EFF2  F00E         	goto	l1434
  2255   001DCC                     l1431:
  2256   001DCC  C007  F009         	movff	abs@a,??_abs
  2257   001DD0  C008  F00A         	movff	abs@a+1,??_abs+1
  2258   001DD4  1E09               	comf	??_abs^0,f,c
  2259   001DD6  1E0A               	comf	(??_abs+1)^0,f,c
  2260   001DD8  4A09               	infsnz	??_abs^0,f,c
  2261   001DDA  2A0A               	incf	(??_abs+1)^0,f,c
  2262   001DDC  C009  F007         	movff	??_abs,?_abs
  2263   001DE0  C00A  F008         	movff	??_abs+1,?_abs+1
  2264   001DE4                     l1434:
  2265   001DE4  0012               	return		;funcret
  2266   001DE6                     __end_of_abs:
  2267                           	callstack 0
  2268                           
  2269 ;; *************** function ___awmod *****************
  2270 ;; Defined at:
  2271 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;  dividend        2    0[COMRAM] int 
  2274 ;;  divisor         2    2[COMRAM] int 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  sign            1    5[COMRAM] unsigned char 
  2277 ;;  counter         1    4[COMRAM] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  2    0[COMRAM] int 
  2280 ;; Registers used:
  2281 ;;		wreg, status,2, status,0
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2287 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2288 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2290 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2291 ;;Total ram usage:        6 bytes
  2292 ;; Hardware stack levels used: 1
  2293 ;; Hardware stack levels required when called: 1
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_vfpfcnvrt
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text10
  2302   0017B8                     __ptext10:
  2303                           	callstack 0
  2304   0017B8                     ___awmod:
  2305                           	callstack 25
  2306   0017B8  0E00               	movlw	0
  2307   0017BA  6E06               	movwf	___awmod@sign^0,c
  2308   0017BC  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2309   0017BE  EFE5  F00B         	goto	u1170
  2310   0017C2  EFE3  F00B         	goto	u1171
  2311   0017C6                     u1171:
  2312   0017C6  EFEB  F00B         	goto	l2473
  2313   0017CA                     u1170:
  2314   0017CA  6C01               	negf	___awmod@dividend^0,c
  2315   0017CC  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2316   0017CE  B0D8               	btfsc	status,0,c
  2317   0017D0  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2318   0017D2  0E01               	movlw	1
  2319   0017D4  6E06               	movwf	___awmod@sign^0,c
  2320   0017D6                     l2473:
  2321   0017D6  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2322   0017D8  EFF2  F00B         	goto	u1180
  2323   0017DC  EFF0  F00B         	goto	u1181
  2324   0017E0                     u1181:
  2325   0017E0  EFF6  F00B         	goto	l2477
  2326   0017E4                     u1180:
  2327   0017E4  6C03               	negf	___awmod@divisor^0,c
  2328   0017E6  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2329   0017E8  B0D8               	btfsc	status,0,c
  2330   0017EA  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2331   0017EC                     l2477:
  2332   0017EC  5003               	movf	___awmod@divisor^0,w,c
  2333   0017EE  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2334   0017F0  B4D8               	btfsc	status,2,c
  2335   0017F2  EFFD  F00B         	goto	u1191
  2336   0017F6  EFFF  F00B         	goto	u1190
  2337   0017FA                     u1191:
  2338   0017FA  EF23  F00C         	goto	l2493
  2339   0017FE                     u1190:
  2340   0017FE  0E01               	movlw	1
  2341   001800  6E05               	movwf	___awmod@counter^0,c
  2342   001802  EF07  F00C         	goto	l2483
  2343   001806                     l2481:
  2344   001806  90D8               	bcf	status,0,c
  2345   001808  3603               	rlcf	___awmod@divisor^0,f,c
  2346   00180A  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2347   00180C  2A05               	incf	___awmod@counter^0,f,c
  2348   00180E                     l2483:
  2349   00180E  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2350   001810  EF0C  F00C         	goto	u1201
  2351   001814  EF0E  F00C         	goto	u1200
  2352   001818                     u1201:
  2353   001818  EF03  F00C         	goto	l2481
  2354   00181C                     u1200:
  2355   00181C                     l2485:
  2356   00181C  5003               	movf	___awmod@divisor^0,w,c
  2357   00181E  5C01               	subwf	___awmod@dividend^0,w,c
  2358   001820  5004               	movf	(___awmod@divisor+1)^0,w,c
  2359   001822  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2360   001824  A0D8               	btfss	status,0,c
  2361   001826  EF17  F00C         	goto	u1211
  2362   00182A  EF19  F00C         	goto	u1210
  2363   00182E                     u1211:
  2364   00182E  EF1D  F00C         	goto	l2489
  2365   001832                     u1210:
  2366   001832  5003               	movf	___awmod@divisor^0,w,c
  2367   001834  5E01               	subwf	___awmod@dividend^0,f,c
  2368   001836  5004               	movf	(___awmod@divisor+1)^0,w,c
  2369   001838  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2370   00183A                     l2489:
  2371   00183A  90D8               	bcf	status,0,c
  2372   00183C  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2373   00183E  3203               	rrcf	___awmod@divisor^0,f,c
  2374   001840  2E05               	decfsz	___awmod@counter^0,f,c
  2375   001842  EF0E  F00C         	goto	l2485
  2376   001846                     l2493:
  2377   001846  5006               	movf	___awmod@sign^0,w,c
  2378   001848  B4D8               	btfsc	status,2,c
  2379   00184A  EF29  F00C         	goto	u1221
  2380   00184E  EF2B  F00C         	goto	u1220
  2381   001852                     u1221:
  2382   001852  EF2F  F00C         	goto	l2497
  2383   001856                     u1220:
  2384   001856  6C01               	negf	___awmod@dividend^0,c
  2385   001858  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2386   00185A  B0D8               	btfsc	status,0,c
  2387   00185C  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2388   00185E                     l2497:
  2389   00185E  C001  F001         	movff	___awmod@dividend,?___awmod
  2390   001862  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2391   001866  0012               	return		;funcret
  2392   001868                     __end_of___awmod:
  2393                           	callstack 0
  2394                           
  2395 ;; *************** function ___awdiv *****************
  2396 ;; Defined at:
  2397 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  dividend        2    0[COMRAM] int 
  2400 ;;  divisor         2    2[COMRAM] int 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  quotient        2    6[COMRAM] int 
  2403 ;;  sign            1    5[COMRAM] unsigned char 
  2404 ;;  counter         1    4[COMRAM] unsigned char 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  2    0[COMRAM] int 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2, status,0
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2414 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2417 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2418 ;;Total ram usage:        8 bytes
  2419 ;; Hardware stack levels used: 1
  2420 ;; Hardware stack levels required when called: 1
  2421 ;; This function calls:
  2422 ;;		Nothing
  2423 ;; This function is called by:
  2424 ;;		_vfpfcnvrt
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text11
  2429   00163A                     __ptext11:
  2430                           	callstack 0
  2431   00163A                     ___awdiv:
  2432                           	callstack 25
  2433   00163A  0E00               	movlw	0
  2434   00163C  6E06               	movwf	___awdiv@sign^0,c
  2435   00163E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2436   001640  EF26  F00B         	goto	u1110
  2437   001644  EF24  F00B         	goto	u1111
  2438   001648                     u1111:
  2439   001648  EF2C  F00B         	goto	l2429
  2440   00164C                     u1110:
  2441   00164C  6C03               	negf	___awdiv@divisor^0,c
  2442   00164E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2443   001650  B0D8               	btfsc	status,0,c
  2444   001652  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2445   001654  0E01               	movlw	1
  2446   001656  6E06               	movwf	___awdiv@sign^0,c
  2447   001658                     l2429:
  2448   001658  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2449   00165A  EF33  F00B         	goto	u1120
  2450   00165E  EF31  F00B         	goto	u1121
  2451   001662                     u1121:
  2452   001662  EF39  F00B         	goto	l2435
  2453   001666                     u1120:
  2454   001666  6C01               	negf	___awdiv@dividend^0,c
  2455   001668  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2456   00166A  B0D8               	btfsc	status,0,c
  2457   00166C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2458   00166E  0E01               	movlw	1
  2459   001670  1A06               	xorwf	___awdiv@sign^0,f,c
  2460   001672                     l2435:
  2461   001672  0E00               	movlw	0
  2462   001674  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2463   001676  0E00               	movlw	0
  2464   001678  6E07               	movwf	___awdiv@quotient^0,c
  2465   00167A  5003               	movf	___awdiv@divisor^0,w,c
  2466   00167C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2467   00167E  B4D8               	btfsc	status,2,c
  2468   001680  EF44  F00B         	goto	u1131
  2469   001684  EF46  F00B         	goto	u1130
  2470   001688                     u1131:
  2471   001688  EF6E  F00B         	goto	l2457
  2472   00168C                     u1130:
  2473   00168C  0E01               	movlw	1
  2474   00168E  6E05               	movwf	___awdiv@counter^0,c
  2475   001690  EF4E  F00B         	goto	l2443
  2476   001694                     l2441:
  2477   001694  90D8               	bcf	status,0,c
  2478   001696  3603               	rlcf	___awdiv@divisor^0,f,c
  2479   001698  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2480   00169A  2A05               	incf	___awdiv@counter^0,f,c
  2481   00169C                     l2443:
  2482   00169C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2483   00169E  EF53  F00B         	goto	u1141
  2484   0016A2  EF55  F00B         	goto	u1140
  2485   0016A6                     u1141:
  2486   0016A6  EF4A  F00B         	goto	l2441
  2487   0016AA                     u1140:
  2488   0016AA                     l2445:
  2489   0016AA  90D8               	bcf	status,0,c
  2490   0016AC  3607               	rlcf	___awdiv@quotient^0,f,c
  2491   0016AE  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2492   0016B0  5003               	movf	___awdiv@divisor^0,w,c
  2493   0016B2  5C01               	subwf	___awdiv@dividend^0,w,c
  2494   0016B4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2495   0016B6  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2496   0016B8  A0D8               	btfss	status,0,c
  2497   0016BA  EF61  F00B         	goto	u1151
  2498   0016BE  EF63  F00B         	goto	u1150
  2499   0016C2                     u1151:
  2500   0016C2  EF68  F00B         	goto	l2453
  2501   0016C6                     u1150:
  2502   0016C6  5003               	movf	___awdiv@divisor^0,w,c
  2503   0016C8  5E01               	subwf	___awdiv@dividend^0,f,c
  2504   0016CA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2505   0016CC  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2506   0016CE  8007               	bsf	___awdiv@quotient^0,0,c
  2507   0016D0                     l2453:
  2508   0016D0  90D8               	bcf	status,0,c
  2509   0016D2  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2510   0016D4  3203               	rrcf	___awdiv@divisor^0,f,c
  2511   0016D6  2E05               	decfsz	___awdiv@counter^0,f,c
  2512   0016D8  EF55  F00B         	goto	l2445
  2513   0016DC                     l2457:
  2514   0016DC  5006               	movf	___awdiv@sign^0,w,c
  2515   0016DE  B4D8               	btfsc	status,2,c
  2516   0016E0  EF74  F00B         	goto	u1161
  2517   0016E4  EF76  F00B         	goto	u1160
  2518   0016E8                     u1161:
  2519   0016E8  EF7A  F00B         	goto	l2461
  2520   0016EC                     u1160:
  2521   0016EC  6C07               	negf	___awdiv@quotient^0,c
  2522   0016EE  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2523   0016F0  B0D8               	btfsc	status,0,c
  2524   0016F2  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2525   0016F4                     l2461:
  2526   0016F4  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2527   0016F8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2528   0016FC  0012               	return		;funcret
  2529   0016FE                     __end_of___awdiv:
  2530                           	callstack 0
  2531                           
  2532 ;; *************** function _sendStringSerial4 *****************
  2533 ;; Defined at:
  2534 ;;		line 35 in file "serial.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;  string          2    1[COMRAM] PTR unsigned char 
  2537 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), STR_4(3), sendArrayCharSerial4@tempStr(161), 
  2538 ;;		 -> sendIntSerial4@string(17), 
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2550 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2554 ;;Total ram usage:        2 bytes
  2555 ;; Hardware stack levels used: 1
  2556 ;; Hardware stack levels required when called: 2
  2557 ;; This function calls:
  2558 ;;		_sendCharSerial4
  2559 ;; This function is called by:
  2560 ;;		_sendRGBCvalSerial4
  2561 ;;		_sendHSVvalSerial4
  2562 ;;		_sendIntSerial4
  2563 ;;		_sendArrayCharSerial4
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text12
  2568   0019D0                     __ptext12:
  2569                           	callstack 0
  2570   0019D0                     _sendStringSerial4:
  2571                           	callstack 27
  2572   0019D0                     
  2573                           ;serial.c: 37:     while(*string != 0){
  2574   0019D0  EFFF  F00C         	goto	l2881
  2575   0019D4                     l2877:
  2576                           
  2577                           ;serial.c: 38:   sendCharSerial4(*string++);
  2578   0019D4  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2579   0019D8  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2580   0019DC  0E00               	movlw	low (__smallconst shr (0+16))
  2581   0019DE  6EF8               	movwf	tblptru,c
  2582   0019E0  0E0D               	movlw	(high __ramtop+-1)
  2583   0019E2  64F7               	cpfsgt	tblptrh,c
  2584   0019E4  D003               	bra	u1727
  2585   0019E6  0008               	tblrd		*
  2586   0019E8  50F5               	movf	tablat,w,c
  2587   0019EA  D005               	bra	u1720
  2588   0019EC                     u1727:
  2589   0019EC  CFF6 FFE9          	movff	tblptrl,fsr0l
  2590   0019F0  CFF7 FFEA          	movff	tblptrh,fsr0h
  2591   0019F4  50EF               	movf	indf0,w,c
  2592   0019F6                     u1720:
  2593   0019F6  ECD1  F00F         	call	_sendCharSerial4
  2594   0019FA  4A02               	infsnz	sendStringSerial4@string^0,f,c
  2595   0019FC  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  2596   0019FE                     l2881:
  2597                           
  2598                           ;serial.c: 37:     while(*string != 0){
  2599   0019FE  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2600   001A02  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2601   001A06  0E00               	movlw	low (__smallconst shr (0+16))
  2602   001A08  6EF8               	movwf	tblptru,c
  2603   001A0A  0E0D               	movlw	(high __ramtop+-1)
  2604   001A0C  64F7               	cpfsgt	tblptrh,c
  2605   001A0E  D003               	bra	u1737
  2606   001A10  0008               	tblrd		*
  2607   001A12  50F5               	movf	tablat,w,c
  2608   001A14  D005               	bra	u1730
  2609   001A16                     u1737:
  2610   001A16  CFF6 FFE9          	movff	tblptrl,fsr0l
  2611   001A1A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2612   001A1E  50EF               	movf	indf0,w,c
  2613   001A20                     u1730:
  2614   001A20  0900               	iorlw	0
  2615   001A22  A4D8               	btfss	status,2,c
  2616   001A24  EF16  F00D         	goto	u1741
  2617   001A28  EF18  F00D         	goto	u1740
  2618   001A2C                     u1741:
  2619   001A2C  EFEA  F00C         	goto	l2877
  2620   001A30                     u1740:
  2621   001A30  0012               	return		;funcret
  2622   001A32                     __end_of_sendStringSerial4:
  2623                           	callstack 0
  2624                           
  2625 ;; *************** function _sendCharSerial4 *****************
  2626 ;; Defined at:
  2627 ;;		line 29 in file "serial.c"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;  charToSend      1    wreg     unsigned char 
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;  charToSend      1    0[COMRAM] unsigned char 
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  1    wreg      void 
  2634 ;; Registers used:
  2635 ;;		wreg
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2645 ;;Total ram usage:        1 bytes
  2646 ;; Hardware stack levels used: 1
  2647 ;; Hardware stack levels required when called: 1
  2648 ;; This function calls:
  2649 ;;		Nothing
  2650 ;; This function is called by:
  2651 ;;		_sendStringSerial4
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           	psect	text13
  2656   001FA2                     __ptext13:
  2657                           	callstack 0
  2658   001FA2                     _sendCharSerial4:
  2659                           	callstack 27
  2660                           
  2661                           ;incstack = 0
  2662                           ;sendCharSerial4@charToSend stored from wreg
  2663   001FA2  6E01               	movwf	sendCharSerial4@charToSend^0,c
  2664   001FA4                     l427:
  2665   001FA4  010E               	movlb	14	; () banked
  2666   001FA6  A537               	btfss	55,2,b	;volatile
  2667   001FA8  EFD8  F00F         	goto	u1681
  2668   001FAC  EFDA  F00F         	goto	u1680
  2669   001FB0                     u1681:
  2670   001FB0  EFD2  F00F         	goto	l427
  2671   001FB4                     u1680:
  2672   001FB4                     
  2673                           ; BSR set to: 14
  2674                           ;serial.c: 31:     TX4REG = charToSend;
  2675   001FB4  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  2676   001FB8                     
  2677                           ; BSR set to: 14
  2678   001FB8  0012               	return		;funcret
  2679   001FBA                     __end_of_sendCharSerial4:
  2680                           	callstack 0
  2681                           
  2682 ;; *************** function _initUSART4 *****************
  2683 ;; Defined at:
  2684 ;;		line 5 in file "serial.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;		None
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg, status,2
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2702 ;;Total ram usage:        0 bytes
  2703 ;; Hardware stack levels used: 1
  2704 ;; Hardware stack levels required when called: 1
  2705 ;; This function calls:
  2706 ;;		Nothing
  2707 ;; This function is called by:
  2708 ;;		_main
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text14
  2713   001F6C                     __ptext14:
  2714                           	callstack 0
  2715   001F6C                     _initUSART4:
  2716                           	callstack 29
  2717   001F6C                     
  2718                           ;serial.c: 9:     RC0PPS = 0x12;
  2719   001F6C  0E12               	movlw	18
  2720   001F6E  010E               	movlb	14	; () banked
  2721   001F70  6F62               	movwf	98,b	;volatile
  2722                           
  2723                           ;serial.c: 10:     RX4PPS = 0x11;
  2724   001F72  0E11               	movlw	17
  2725   001F74  6F15               	movwf	21,b	;volatile
  2726   001F76                     
  2727                           ; BSR set to: 14
  2728                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  2729   001F76  97E9               	bcf	233,3,b	;volatile
  2730   001F78                     
  2731                           ; BSR set to: 14
  2732                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  2733   001F78  95E8               	bcf	232,2,b	;volatile
  2734                           
  2735                           ;serial.c: 14:     SP4BRGL = 51;
  2736   001F7A  0E33               	movlw	51
  2737   001F7C  6FE5               	movwf	229,b	;volatile
  2738                           
  2739                           ;serial.c: 15:     SP4BRGH = 0;
  2740   001F7E  0E00               	movlw	0
  2741   001F80  6FE6               	movwf	230,b	;volatile
  2742   001F82                     
  2743                           ; BSR set to: 14
  2744                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  2745   001F82  89E7               	bsf	231,4,b	;volatile
  2746   001F84                     
  2747                           ; BSR set to: 14
  2748                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  2749   001F84  8BE8               	bsf	232,5,b	;volatile
  2750   001F86                     
  2751                           ; BSR set to: 14
  2752                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  2753   001F86  8FE7               	bsf	231,7,b	;volatile
  2754   001F88                     
  2755                           ; BSR set to: 14
  2756   001F88  0012               	return		;funcret
  2757   001F8A                     __end_of_initUSART4:
  2758                           	callstack 0
  2759                           
  2760 ;; *************** function _initDCmotorsPWM *****************
  2761 ;; Defined at:
  2762 ;;		line 5 in file "dc_motor.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2776 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;Total ram usage:        2 bytes
  2781 ;; Hardware stack levels used: 1
  2782 ;; Hardware stack levels required when called: 1
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_main
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text15
  2791   001868                     __ptext15:
  2792                           	callstack 0
  2793   001868                     _initDCmotorsPWM:
  2794                           	callstack 29
  2795   001868                     
  2796                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  2797   001868  9485               	bcf	133,2,c	;volatile
  2798                           
  2799                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  2800   00186A  9885               	bcf	133,4,c	;volatile
  2801                           
  2802                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  2803   00186C  9E83               	bcf	131,7,c	;volatile
  2804                           
  2805                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  2806   00186E  9C87               	bcf	135,6,c	;volatile
  2807                           
  2808                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
  2809   001870  947D               	bcf	125,2,c	;volatile
  2810                           
  2811                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
  2812   001872  987D               	bcf	125,4,c	;volatile
  2813                           
  2814                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
  2815   001874  9E7B               	bcf	123,7,c	;volatile
  2816                           
  2817                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
  2818   001876  9C7F               	bcf	127,6,c	;volatile
  2819   001878                     
  2820                           ;dc_motor.c: 18:     RE2PPS=0x05;
  2821   001878  0E05               	movlw	5
  2822   00187A  010E               	movlb	14	; () banked
  2823   00187C  6F74               	movwf	116,b	;volatile
  2824                           
  2825                           ;dc_motor.c: 19:     RE4PPS=0x06;
  2826   00187E  0E06               	movlw	6
  2827   001880  6F76               	movwf	118,b	;volatile
  2828                           
  2829                           ;dc_motor.c: 20:     RC7PPS=0x07;
  2830   001882  0E07               	movlw	7
  2831   001884  6F69               	movwf	105,b	;volatile
  2832                           
  2833                           ;dc_motor.c: 21:     RG6PPS=0x08;
  2834   001886  0E08               	movlw	8
  2835   001888  6F88               	movwf	136,b	;volatile
  2836                           
  2837                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  2838   00188A  50BD               	movf	189,w,c	;volatile
  2839   00188C  0B8F               	andlw	-113
  2840   00188E  0940               	iorlw	64
  2841   001890  6EBD               	movwf	189,c	;volatile
  2842                           
  2843                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  2844   001892  0EE0               	movlw	-32
  2845   001894  16BE               	andwf	190,f,c	;volatile
  2846                           
  2847                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  2848   001896  50BF               	movf	191,w,c	;volatile
  2849   001898  0BF0               	andlw	-16
  2850   00189A  0901               	iorlw	1
  2851   00189C  6EBF               	movwf	191,c	;volatile
  2852   00189E                     
  2853                           ; BSR set to: 14
  2854                           ;dc_motor.c: 30:     T2PR=(unsigned char)PWMperiod;
  2855   00189E  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2856   0018A2                     
  2857                           ; BSR set to: 14
  2858                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  2859   0018A2  8EBD               	bsf	189,7,c	;volatile
  2860                           
  2861                           ;dc_motor.c: 35:     CCPR1H=0;
  2862   0018A4  0E00               	movlw	0
  2863   0018A6  6EAA               	movwf	170,c	;volatile
  2864                           
  2865                           ;dc_motor.c: 36:     CCPR2H=0;
  2866   0018A8  0E00               	movlw	0
  2867   0018AA  6EA6               	movwf	166,c	;volatile
  2868                           
  2869                           ;dc_motor.c: 37:     CCPR3H=0;
  2870   0018AC  0E00               	movlw	0
  2871   0018AE  010F               	movlb	15	; () banked
  2872   0018B0  6F25               	movwf	37,b	;volatile
  2873                           
  2874                           ;dc_motor.c: 38:     CCPR4H=0;
  2875   0018B2  0E00               	movlw	0
  2876   0018B4  6F21               	movwf	33,b	;volatile
  2877                           
  2878                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  2879   0018B6  0EFC               	movlw	-4
  2880   0018B8  16AD               	andwf	173,f,c	;volatile
  2881                           
  2882                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  2883   0018BA  0EF3               	movlw	-13
  2884   0018BC  16AD               	andwf	173,f,c	;volatile
  2885                           
  2886                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  2887   0018BE  0ECF               	movlw	-49
  2888   0018C0  16AD               	andwf	173,f,c	;volatile
  2889                           
  2890                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  2891   0018C2  0E3F               	movlw	-193
  2892   0018C4  16AD               	andwf	173,f,c	;volatile
  2893   0018C6                     
  2894                           ; BSR set to: 15
  2895                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  2896   0018C6  88AB               	bsf	171,4,c	;volatile
  2897                           
  2898                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  2899   0018C8  50AB               	movf	171,w,c	;volatile
  2900   0018CA  0BF0               	andlw	-16
  2901   0018CC  090C               	iorlw	12
  2902   0018CE  6EAB               	movwf	171,c	;volatile
  2903   0018D0                     
  2904                           ; BSR set to: 15
  2905                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  2906   0018D0  8EAB               	bsf	171,7,c	;volatile
  2907   0018D2                     
  2908                           ; BSR set to: 15
  2909                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  2910   0018D2  88A7               	bsf	167,4,c	;volatile
  2911                           
  2912                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  2913   0018D4  50A7               	movf	167,w,c	;volatile
  2914   0018D6  0BF0               	andlw	-16
  2915   0018D8  090C               	iorlw	12
  2916   0018DA  6EA7               	movwf	167,c	;volatile
  2917   0018DC                     
  2918                           ; BSR set to: 15
  2919                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  2920   0018DC  8EA7               	bsf	167,7,c	;volatile
  2921   0018DE                     
  2922                           ; BSR set to: 15
  2923                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  2924   0018DE  8926               	bsf	38,4,b	;volatile
  2925                           
  2926                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  2927   0018E0  5126               	movf	38,w,b	;volatile
  2928   0018E2  0BF0               	andlw	-16
  2929   0018E4  090C               	iorlw	12
  2930   0018E6  6F26               	movwf	38,b	;volatile
  2931   0018E8                     
  2932                           ; BSR set to: 15
  2933                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  2934   0018E8  8F26               	bsf	38,7,b	;volatile
  2935   0018EA                     
  2936                           ; BSR set to: 15
  2937                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  2938   0018EA  8922               	bsf	34,4,b	;volatile
  2939                           
  2940                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  2941   0018EC  5122               	movf	34,w,b	;volatile
  2942   0018EE  0BF0               	andlw	-16
  2943   0018F0  090C               	iorlw	12
  2944   0018F2  6F22               	movwf	34,b	;volatile
  2945   0018F4                     
  2946                           ; BSR set to: 15
  2947                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  2948   0018F4  8F22               	bsf	34,7,b	;volatile
  2949   0018F6                     
  2950                           ; BSR set to: 15
  2951   0018F6  0012               	return		;funcret
  2952   0018F8                     __end_of_initDCmotorsPWM:
  2953                           	callstack 0
  2954                           
  2955 ;; *************** function _getRGBCval *****************
  2956 ;; Defined at:
  2957 ;;		line 84 in file "color.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  2960 ;;		 -> main@measured_colour(8), 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;		None
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  1    wreg      void 
  2965 ;; Registers used:
  2966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2972 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2976 ;;Total ram usage:        1 bytes
  2977 ;; Hardware stack levels used: 1
  2978 ;; Hardware stack levels required when called: 4
  2979 ;; This function calls:
  2980 ;;		_color_read_Blue
  2981 ;;		_color_read_Clear
  2982 ;;		_color_read_Green
  2983 ;;		_color_read_Red
  2984 ;; This function is called by:
  2985 ;;		_main
  2986 ;;		_wait_for_wall
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text16
  2991   001B42                     __ptext16:
  2992                           	callstack 0
  2993   001B42                     _getRGBCval:
  2994                           	callstack 26
  2995   001B42                     
  2996                           ;color.c: 84: void getRGBCval(struct RGBC_val *p);color.c: 85: {;color.c: 86:     p->R =
      +                           color_read_Red();
  2997   001B42  ECCC  F00D         	call	_color_read_Red	;wreg free
  2998   001B46  500C               	movf	getRGBCval@p^0,w,c
  2999   001B48  6ED9               	movwf	fsr2l,c
  3000   001B4A  6ADA               	clrf	fsr2h,c
  3001   001B4C  C005  FFDE         	movff	?_color_read_Red,postinc2
  3002   001B50  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3003                           
  3004                           ;color.c: 87:     p->B = color_read_Blue();
  3005   001B54  EC44  F00E         	call	_color_read_Blue	;wreg free
  3006   001B58  500C               	movf	getRGBCval@p^0,w,c
  3007   001B5A  6ED9               	movwf	fsr2l,c
  3008   001B5C  6ADA               	clrf	fsr2h,c
  3009   001B5E  0E04               	movlw	4
  3010   001B60  26D9               	addwf	fsr2l,f,c
  3011   001B62  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3012   001B66  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3013                           
  3014                           ;color.c: 88:     p->G = color_read_Green();
  3015   001B6A  ECF4  F00D         	call	_color_read_Green	;wreg free
  3016   001B6E  500C               	movf	getRGBCval@p^0,w,c
  3017   001B70  6ED9               	movwf	fsr2l,c
  3018   001B72  6ADA               	clrf	fsr2h,c
  3019   001B74  0E02               	movlw	2
  3020   001B76  26D9               	addwf	fsr2l,f,c
  3021   001B78  C005  FFDE         	movff	?_color_read_Green,postinc2
  3022   001B7C  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3023                           
  3024                           ;color.c: 89:     p->C = color_read_Clear();
  3025   001B80  EC1C  F00E         	call	_color_read_Clear	;wreg free
  3026   001B84  500C               	movf	getRGBCval@p^0,w,c
  3027   001B86  6ED9               	movwf	fsr2l,c
  3028   001B88  6ADA               	clrf	fsr2h,c
  3029   001B8A  0E06               	movlw	6
  3030   001B8C  26D9               	addwf	fsr2l,f,c
  3031   001B8E  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3032   001B92  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3033   001B96  0012               	return		;funcret
  3034   001B98                     __end_of_getRGBCval:
  3035                           	callstack 0
  3036                           
  3037 ;; *************** function _color_read_Red *****************
  3038 ;; Defined at:
  3039 ;;		line 28 in file "color.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;		None
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  tmp             2    9[COMRAM] unsigned int 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  2    4[COMRAM] unsigned int 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3053 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3055 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3056 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3057 ;;Total ram usage:        7 bytes
  3058 ;; Hardware stack levels used: 1
  3059 ;; Hardware stack levels required when called: 3
  3060 ;; This function calls:
  3061 ;;		_I2C_2_Master_Read
  3062 ;;		_I2C_2_Master_RepStart
  3063 ;;		_I2C_2_Master_Start
  3064 ;;		_I2C_2_Master_Stop
  3065 ;;		_I2C_2_Master_Write
  3066 ;; This function is called by:
  3067 ;;		_getRGBCval
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text17
  3072   001B98                     __ptext17:
  3073                           	callstack 0
  3074   001B98                     _color_read_Red:
  3075                           	callstack 26
  3076   001B98                     
  3077                           ;color.c: 30:  unsigned int tmp;;color.c: 31:  I2C_2_Master_Start();
  3078   001B98  ECF9  F00F         	call	_I2C_2_Master_Start	;wreg free
  3079                           
  3080                           ;color.c: 32:  I2C_2_Master_Write(0x52 | 0x00);
  3081   001B9C  0E52               	movlw	82
  3082   001B9E  ECDD  F00F         	call	_I2C_2_Master_Write
  3083                           
  3084                           ;color.c: 33:  I2C_2_Master_Write(0xA0 | 0x16);
  3085   001BA2  0EB6               	movlw	182
  3086   001BA4  ECDD  F00F         	call	_I2C_2_Master_Write
  3087                           
  3088                           ;color.c: 34:  I2C_2_Master_RepStart();
  3089   001BA8  ECEF  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3090                           
  3091                           ;color.c: 35:  I2C_2_Master_Write(0x52 | 0x01);
  3092   001BAC  0E53               	movlw	83
  3093   001BAE  ECDD  F00F         	call	_I2C_2_Master_Write
  3094                           
  3095                           ;color.c: 36:  tmp=I2C_2_Master_Read(1);
  3096   001BB2  0E01               	movlw	1
  3097   001BB4  ECB8  F00E         	call	_I2C_2_Master_Read
  3098   001BB8  6E07               	movwf	??_color_read_Red^0,c
  3099   001BBA  5007               	movf	??_color_read_Red^0,w,c
  3100   001BBC  6E0A               	movwf	color_read_Red@tmp^0,c
  3101   001BBE  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3102                           
  3103                           ;color.c: 37:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3104   001BC0  0E00               	movlw	0
  3105   001BC2  ECB8  F00E         	call	_I2C_2_Master_Read
  3106   001BC6  6E07               	movwf	??_color_read_Red^0,c
  3107   001BC8  5007               	movf	??_color_read_Red^0,w,c
  3108   001BCA  6E09               	movwf	(??_color_read_Red+2)^0,c
  3109   001BCC  6A08               	clrf	(??_color_read_Red+1)^0,c
  3110   001BCE  500A               	movf	color_read_Red@tmp^0,w,c
  3111   001BD0  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3112   001BD2  6E0A               	movwf	color_read_Red@tmp^0,c
  3113   001BD4  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3114   001BD6  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3115   001BD8  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3116                           
  3117                           ;color.c: 38:  I2C_2_Master_Stop();
  3118   001BDA  ECF4  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3119   001BDE                     
  3120                           ;color.c: 39:  return tmp;
  3121   001BDE  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3122   001BE2  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3123   001BE6  0012               	return		;funcret
  3124   001BE8                     __end_of_color_read_Red:
  3125                           	callstack 0
  3126                           
  3127 ;; *************** function _color_read_Green *****************
  3128 ;; Defined at:
  3129 ;;		line 56 in file "color.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;		None
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  tmp             2    9[COMRAM] unsigned int 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  2    4[COMRAM] unsigned int 
  3136 ;; Registers used:
  3137 ;;		wreg, status,2, status,0, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3143 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3145 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3146 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3147 ;;Total ram usage:        7 bytes
  3148 ;; Hardware stack levels used: 1
  3149 ;; Hardware stack levels required when called: 3
  3150 ;; This function calls:
  3151 ;;		_I2C_2_Master_Read
  3152 ;;		_I2C_2_Master_RepStart
  3153 ;;		_I2C_2_Master_Start
  3154 ;;		_I2C_2_Master_Stop
  3155 ;;		_I2C_2_Master_Write
  3156 ;; This function is called by:
  3157 ;;		_getRGBCval
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text18
  3162   001BE8                     __ptext18:
  3163                           	callstack 0
  3164   001BE8                     _color_read_Green:
  3165                           	callstack 26
  3166   001BE8                     
  3167                           ;color.c: 58:     unsigned int tmp;;color.c: 59:  I2C_2_Master_Start();
  3168   001BE8  ECF9  F00F         	call	_I2C_2_Master_Start	;wreg free
  3169                           
  3170                           ;color.c: 60:  I2C_2_Master_Write(0x52 | 0x00);
  3171   001BEC  0E52               	movlw	82
  3172   001BEE  ECDD  F00F         	call	_I2C_2_Master_Write
  3173                           
  3174                           ;color.c: 61:  I2C_2_Master_Write(0xA0 | 0x18);
  3175   001BF2  0EB8               	movlw	184
  3176   001BF4  ECDD  F00F         	call	_I2C_2_Master_Write
  3177                           
  3178                           ;color.c: 62:  I2C_2_Master_RepStart();
  3179   001BF8  ECEF  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3180                           
  3181                           ;color.c: 63:  I2C_2_Master_Write(0x52 | 0x01);
  3182   001BFC  0E53               	movlw	83
  3183   001BFE  ECDD  F00F         	call	_I2C_2_Master_Write
  3184                           
  3185                           ;color.c: 64:  tmp=I2C_2_Master_Read(1);
  3186   001C02  0E01               	movlw	1
  3187   001C04  ECB8  F00E         	call	_I2C_2_Master_Read
  3188   001C08  6E07               	movwf	??_color_read_Green^0,c
  3189   001C0A  5007               	movf	??_color_read_Green^0,w,c
  3190   001C0C  6E0A               	movwf	color_read_Green@tmp^0,c
  3191   001C0E  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3192                           
  3193                           ;color.c: 65:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3194   001C10  0E00               	movlw	0
  3195   001C12  ECB8  F00E         	call	_I2C_2_Master_Read
  3196   001C16  6E07               	movwf	??_color_read_Green^0,c
  3197   001C18  5007               	movf	??_color_read_Green^0,w,c
  3198   001C1A  6E09               	movwf	(??_color_read_Green+2)^0,c
  3199   001C1C  6A08               	clrf	(??_color_read_Green+1)^0,c
  3200   001C1E  500A               	movf	color_read_Green@tmp^0,w,c
  3201   001C20  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3202   001C22  6E0A               	movwf	color_read_Green@tmp^0,c
  3203   001C24  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3204   001C26  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3205   001C28  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3206                           
  3207                           ;color.c: 66:  I2C_2_Master_Stop();
  3208   001C2A  ECF4  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3209   001C2E                     
  3210                           ;color.c: 67:  return tmp;
  3211   001C2E  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3212   001C32  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3213   001C36  0012               	return		;funcret
  3214   001C38                     __end_of_color_read_Green:
  3215                           	callstack 0
  3216                           
  3217 ;; *************** function _color_read_Clear *****************
  3218 ;; Defined at:
  3219 ;;		line 70 in file "color.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  tmp             2    9[COMRAM] unsigned int 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  2    4[COMRAM] unsigned int 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3233 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3234 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3235 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3236 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3237 ;;Total ram usage:        7 bytes
  3238 ;; Hardware stack levels used: 1
  3239 ;; Hardware stack levels required when called: 3
  3240 ;; This function calls:
  3241 ;;		_I2C_2_Master_Read
  3242 ;;		_I2C_2_Master_RepStart
  3243 ;;		_I2C_2_Master_Start
  3244 ;;		_I2C_2_Master_Stop
  3245 ;;		_I2C_2_Master_Write
  3246 ;; This function is called by:
  3247 ;;		_getRGBCval
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text19
  3252   001C38                     __ptext19:
  3253                           	callstack 0
  3254   001C38                     _color_read_Clear:
  3255                           	callstack 26
  3256   001C38                     
  3257                           ;color.c: 72:     unsigned int tmp;;color.c: 73:  I2C_2_Master_Start();
  3258   001C38  ECF9  F00F         	call	_I2C_2_Master_Start	;wreg free
  3259                           
  3260                           ;color.c: 74:  I2C_2_Master_Write(0x52 | 0x00);
  3261   001C3C  0E52               	movlw	82
  3262   001C3E  ECDD  F00F         	call	_I2C_2_Master_Write
  3263                           
  3264                           ;color.c: 75:  I2C_2_Master_Write(0xA0 | 0x14);
  3265   001C42  0EB4               	movlw	180
  3266   001C44  ECDD  F00F         	call	_I2C_2_Master_Write
  3267                           
  3268                           ;color.c: 76:  I2C_2_Master_RepStart();
  3269   001C48  ECEF  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3270                           
  3271                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x01);
  3272   001C4C  0E53               	movlw	83
  3273   001C4E  ECDD  F00F         	call	_I2C_2_Master_Write
  3274                           
  3275                           ;color.c: 78:  tmp=I2C_2_Master_Read(1);
  3276   001C52  0E01               	movlw	1
  3277   001C54  ECB8  F00E         	call	_I2C_2_Master_Read
  3278   001C58  6E07               	movwf	??_color_read_Clear^0,c
  3279   001C5A  5007               	movf	??_color_read_Clear^0,w,c
  3280   001C5C  6E0A               	movwf	color_read_Clear@tmp^0,c
  3281   001C5E  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3282                           
  3283                           ;color.c: 79:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3284   001C60  0E00               	movlw	0
  3285   001C62  ECB8  F00E         	call	_I2C_2_Master_Read
  3286   001C66  6E07               	movwf	??_color_read_Clear^0,c
  3287   001C68  5007               	movf	??_color_read_Clear^0,w,c
  3288   001C6A  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3289   001C6C  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3290   001C6E  500A               	movf	color_read_Clear@tmp^0,w,c
  3291   001C70  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3292   001C72  6E0A               	movwf	color_read_Clear@tmp^0,c
  3293   001C74  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3294   001C76  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3295   001C78  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3296                           
  3297                           ;color.c: 80:  I2C_2_Master_Stop();
  3298   001C7A  ECF4  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3299   001C7E                     
  3300                           ;color.c: 81:  return tmp;
  3301   001C7E  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3302   001C82  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3303   001C86  0012               	return		;funcret
  3304   001C88                     __end_of_color_read_Clear:
  3305                           	callstack 0
  3306                           
  3307 ;; *************** function _color_read_Blue *****************
  3308 ;; Defined at:
  3309 ;;		line 42 in file "color.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;		None
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  tmp             2    9[COMRAM] unsigned int 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  2    4[COMRAM] unsigned int 
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3323 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3324 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3325 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3326 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3327 ;;Total ram usage:        7 bytes
  3328 ;; Hardware stack levels used: 1
  3329 ;; Hardware stack levels required when called: 3
  3330 ;; This function calls:
  3331 ;;		_I2C_2_Master_Read
  3332 ;;		_I2C_2_Master_RepStart
  3333 ;;		_I2C_2_Master_Start
  3334 ;;		_I2C_2_Master_Stop
  3335 ;;		_I2C_2_Master_Write
  3336 ;; This function is called by:
  3337 ;;		_getRGBCval
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text20
  3342   001C88                     __ptext20:
  3343                           	callstack 0
  3344   001C88                     _color_read_Blue:
  3345                           	callstack 26
  3346   001C88                     
  3347                           ;color.c: 44:     unsigned int tmp;;color.c: 45:  I2C_2_Master_Start();
  3348   001C88  ECF9  F00F         	call	_I2C_2_Master_Start	;wreg free
  3349                           
  3350                           ;color.c: 46:  I2C_2_Master_Write(0x52 | 0x00);
  3351   001C8C  0E52               	movlw	82
  3352   001C8E  ECDD  F00F         	call	_I2C_2_Master_Write
  3353                           
  3354                           ;color.c: 47:  I2C_2_Master_Write(0xA0 | 0x1A);
  3355   001C92  0EBA               	movlw	186
  3356   001C94  ECDD  F00F         	call	_I2C_2_Master_Write
  3357                           
  3358                           ;color.c: 48:  I2C_2_Master_RepStart();
  3359   001C98  ECEF  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3360                           
  3361                           ;color.c: 49:  I2C_2_Master_Write(0x52 | 0x01);
  3362   001C9C  0E53               	movlw	83
  3363   001C9E  ECDD  F00F         	call	_I2C_2_Master_Write
  3364                           
  3365                           ;color.c: 50:  tmp=I2C_2_Master_Read(1);
  3366   001CA2  0E01               	movlw	1
  3367   001CA4  ECB8  F00E         	call	_I2C_2_Master_Read
  3368   001CA8  6E07               	movwf	??_color_read_Blue^0,c
  3369   001CAA  5007               	movf	??_color_read_Blue^0,w,c
  3370   001CAC  6E0A               	movwf	color_read_Blue@tmp^0,c
  3371   001CAE  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3372                           
  3373                           ;color.c: 51:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3374   001CB0  0E00               	movlw	0
  3375   001CB2  ECB8  F00E         	call	_I2C_2_Master_Read
  3376   001CB6  6E07               	movwf	??_color_read_Blue^0,c
  3377   001CB8  5007               	movf	??_color_read_Blue^0,w,c
  3378   001CBA  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3379   001CBC  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3380   001CBE  500A               	movf	color_read_Blue@tmp^0,w,c
  3381   001CC0  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3382   001CC2  6E0A               	movwf	color_read_Blue@tmp^0,c
  3383   001CC4  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3384   001CC6  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3385   001CC8  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3386                           
  3387                           ;color.c: 52:  I2C_2_Master_Stop();
  3388   001CCA  ECF4  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3389   001CCE                     
  3390                           ;color.c: 53:  return tmp;
  3391   001CCE  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3392   001CD2  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3393   001CD6  0012               	return		;funcret
  3394   001CD8                     __end_of_color_read_Blue:
  3395                           	callstack 0
  3396                           
  3397 ;; *************** function _I2C_2_Master_RepStart *****************
  3398 ;; Defined at:
  3399 ;;		line 33 in file "i2c.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;		None
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;		None
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3417 ;;Total ram usage:        0 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 2
  3420 ;; This function calls:
  3421 ;;		_I2C_2_Master_Idle
  3422 ;; This function is called by:
  3423 ;;		_color_read_Red
  3424 ;;		_color_read_Blue
  3425 ;;		_color_read_Green
  3426 ;;		_color_read_Clear
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text21
  3431   001FDE                     __ptext21:
  3432                           	callstack 0
  3433   001FDE                     _I2C_2_Master_RepStart:
  3434                           	callstack 26
  3435   001FDE                     
  3436                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3437   001FDE  EC6D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3438   001FE2                     
  3439                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3440   001FE2  010E               	movlb	14	; () banked
  3441   001FE4  83DA               	bsf	218,1,b	;volatile
  3442   001FE6                     
  3443                           ; BSR set to: 14
  3444   001FE6  0012               	return		;funcret
  3445   001FE8                     __end_of_I2C_2_Master_RepStart:
  3446                           	callstack 0
  3447                           
  3448 ;; *************** function _I2C_2_Master_Read *****************
  3449 ;; Defined at:
  3450 ;;		line 51 in file "i2c.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  ack             1    wreg     unsigned char 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  ack             1    2[COMRAM] unsigned char 
  3455 ;;  tmp             1    3[COMRAM] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      unsigned char 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3468 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3469 ;;Total ram usage:        3 bytes
  3470 ;; Hardware stack levels used: 1
  3471 ;; Hardware stack levels required when called: 2
  3472 ;; This function calls:
  3473 ;;		_I2C_2_Master_Idle
  3474 ;; This function is called by:
  3475 ;;		_color_read_Red
  3476 ;;		_color_read_Blue
  3477 ;;		_color_read_Green
  3478 ;;		_color_read_Clear
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text22
  3483   001D70                     __ptext22:
  3484                           	callstack 0
  3485   001D70                     _I2C_2_Master_Read:
  3486                           	callstack 26
  3487                           
  3488                           ; BSR set to: 14
  3489                           ;incstack = 0
  3490                           ;I2C_2_Master_Read@ack stored from wreg
  3491   001D70  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3492   001D72                     
  3493                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3494   001D72  EC6D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3495   001D76                     
  3496                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3497   001D76  010E               	movlb	14	; () banked
  3498   001D78  87DA               	bsf	218,3,b	;volatile
  3499                           
  3500                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3501   001D7A  EC6D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3502   001D7E                     
  3503                           ;i2c.c: 57:   tmp = SSP2BUF;
  3504   001D7E  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3505                           
  3506                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3507   001D82  EC6D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3508   001D86                     
  3509                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3510   001D86  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3511   001D88  B4D8               	btfsc	status,2,c
  3512   001D8A  EFC9  F00E         	goto	u1661
  3513   001D8E  EFCD  F00E         	goto	u1660
  3514   001D92                     u1661:
  3515   001D92  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3516   001D94  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3517   001D96  EFCE  F00E         	goto	u1678
  3518   001D9A                     u1660:
  3519   001D9A  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3520   001D9C                     u1678:
  3521   001D9C  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3522   001D9E  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3523   001DA0  010E               	movlb	14	; () banked
  3524   001DA2  51DA               	movf	218,w,b	;volatile
  3525   001DA4  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3526   001DA6  0BDF               	andlw	-33
  3527   001DA8  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3528   001DAA  6FDA               	movwf	218,b	;volatile
  3529   001DAC                     
  3530                           ; BSR set to: 14
  3531                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3532   001DAC  89DA               	bsf	218,4,b	;volatile
  3533   001DAE                     
  3534                           ; BSR set to: 14
  3535                           ;i2c.c: 61:   return tmp;
  3536   001DAE  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3537   001DB0                     
  3538                           ; BSR set to: 14
  3539   001DB0  0012               	return		;funcret
  3540   001DB2                     __end_of_I2C_2_Master_Read:
  3541                           	callstack 0
  3542                           
  3543 ;; *************** function _getHSVval *****************
  3544 ;; Defined at:
  3545 ;;		line 154 in file "color.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;  p1              1   18[COMRAM] PTR struct HSV_val
  3548 ;;		 -> main@HSV_colour(6), 
  3549 ;;  p2              1   19[COMRAM] PTR struct RGBC_val
  3550 ;;		 -> main@measured_colour(8), 
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  maxRGB          2   38[COMRAM] unsigned int 
  3553 ;;  range           2   36[COMRAM] unsigned int 
  3554 ;;  hue             2   32[COMRAM] unsigned int 
  3555 ;;  saturation      2   30[COMRAM] unsigned int 
  3556 ;;  minRGB          2   24[COMRAM] unsigned int 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3567 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3568 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3569 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3570 ;;Total ram usage:       22 bytes
  3571 ;; Hardware stack levels used: 1
  3572 ;; Hardware stack levels required when called: 2
  3573 ;; This function calls:
  3574 ;;		___lwdiv
  3575 ;;		___lwmod
  3576 ;;		___wmul
  3577 ;;		_max
  3578 ;;		_min
  3579 ;; This function is called by:
  3580 ;;		_main
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text23
  3585   000E1A                     __ptext23:
  3586                           	callstack 0
  3587   000E1A                     _getHSVval:
  3588                           	callstack 28
  3589   000E1A                     
  3590                           ;color.c: 154: void getHSVval(struct HSV_val *p1,struct RGBC_val *p2);color.c: 155: {;co
      +                          lor.c: 156:     unsigned int maxRGB;;color.c: 157:     unsigned int minRGB;;color.c: 158
      +                          :     unsigned int range;;color.c: 159:     unsigned int hue;;color.c: 160:     unsigned
      +                           int saturation;;color.c: 164:     maxRGB = max(max(p2->R,p2->G),p2->B);
  3591   000E1A  5014               	movf	getHSVval@p2^0,w,c
  3592   000E1C  6ED9               	movwf	fsr2l,c
  3593   000E1E  6ADA               	clrf	fsr2h,c
  3594   000E20  CFDE F001          	movff	postinc2,max@a
  3595   000E24  CFDD F002          	movff	postdec2,max@a+1
  3596   000E28  5014               	movf	getHSVval@p2^0,w,c
  3597   000E2A  6ED9               	movwf	fsr2l,c
  3598   000E2C  6ADA               	clrf	fsr2h,c
  3599   000E2E  0E02               	movlw	2
  3600   000E30  26D9               	addwf	fsr2l,f,c
  3601   000E32  CFDE F003          	movff	postinc2,max@b
  3602   000E36  CFDD F004          	movff	postdec2,max@b+1
  3603   000E3A  EC0D  F00F         	call	_max	;wreg free
  3604   000E3E  C001  F01B         	movff	?_max,_getHSVval$3127
  3605   000E42  C002  F01C         	movff	?_max+1,_getHSVval$3127+1
  3606                           
  3607                           ;color.c: 154: void getHSVval(struct HSV_val *p1,struct RGBC_val *p2);color.c: 155: {;co
      +                          lor.c: 156:     unsigned int maxRGB;;color.c: 157:     unsigned int minRGB;;color.c: 158
      +                          :     unsigned int range;;color.c: 159:     unsigned int hue;;color.c: 160:     unsigned
      +                           int saturation;;color.c: 164:     maxRGB = max(max(p2->R,p2->G),p2->B);
  3608   000E46  C01B  F001         	movff	_getHSVval$3127,max@a
  3609   000E4A  C01C  F002         	movff	_getHSVval$3127+1,max@a+1
  3610   000E4E  5014               	movf	getHSVval@p2^0,w,c
  3611   000E50  6ED9               	movwf	fsr2l,c
  3612   000E52  6ADA               	clrf	fsr2h,c
  3613   000E54  0E04               	movlw	4
  3614   000E56  26D9               	addwf	fsr2l,f,c
  3615   000E58  CFDE F003          	movff	postinc2,max@b
  3616   000E5C  CFDD F004          	movff	postdec2,max@b+1
  3617   000E60  EC0D  F00F         	call	_max	;wreg free
  3618   000E64  C001  F027         	movff	?_max,getHSVval@maxRGB
  3619   000E68  C002  F028         	movff	?_max+1,getHSVval@maxRGB+1
  3620                           
  3621                           ;color.c: 165:     minRGB = min(min(p2->R,p2->G),p2->B);
  3622   000E6C  5014               	movf	getHSVval@p2^0,w,c
  3623   000E6E  6ED9               	movwf	fsr2l,c
  3624   000E70  6ADA               	clrf	fsr2h,c
  3625   000E72  CFDE F001          	movff	postinc2,min@a
  3626   000E76  CFDD F002          	movff	postdec2,min@a+1
  3627   000E7A  5014               	movf	getHSVval@p2^0,w,c
  3628   000E7C  6ED9               	movwf	fsr2l,c
  3629   000E7E  6ADA               	clrf	fsr2h,c
  3630   000E80  0E02               	movlw	2
  3631   000E82  26D9               	addwf	fsr2l,f,c
  3632   000E84  CFDE F003          	movff	postinc2,min@b
  3633   000E88  CFDD F004          	movff	postdec2,min@b+1
  3634   000E8C  ECF3  F00E         	call	_min	;wreg free
  3635   000E90  C001  F01D         	movff	?_min,_getHSVval$3128
  3636   000E94  C002  F01E         	movff	?_min+1,_getHSVval$3128+1
  3637                           
  3638                           ;color.c: 165:     minRGB = min(min(p2->R,p2->G),p2->B);
  3639   000E98  C01D  F001         	movff	_getHSVval$3128,min@a
  3640   000E9C  C01E  F002         	movff	_getHSVval$3128+1,min@a+1
  3641   000EA0  5014               	movf	getHSVval@p2^0,w,c
  3642   000EA2  6ED9               	movwf	fsr2l,c
  3643   000EA4  6ADA               	clrf	fsr2h,c
  3644   000EA6  0E04               	movlw	4
  3645   000EA8  26D9               	addwf	fsr2l,f,c
  3646   000EAA  CFDE F003          	movff	postinc2,min@b
  3647   000EAE  CFDD F004          	movff	postdec2,min@b+1
  3648   000EB2  ECF3  F00E         	call	_min	;wreg free
  3649   000EB6  C001  F019         	movff	?_min,getHSVval@minRGB
  3650   000EBA  C002  F01A         	movff	?_min+1,getHSVval@minRGB+1
  3651   000EBE                     
  3652                           ;color.c: 166:     range = maxRGB - minRGB;
  3653   000EBE  5019               	movf	getHSVval@minRGB^0,w,c
  3654   000EC0  5C27               	subwf	getHSVval@maxRGB^0,w,c
  3655   000EC2  6E25               	movwf	getHSVval@range^0,c
  3656   000EC4  501A               	movf	(getHSVval@minRGB+1)^0,w,c
  3657   000EC6  5828               	subwfb	(getHSVval@maxRGB+1)^0,w,c
  3658   000EC8  6E26               	movwf	(getHSVval@range+1)^0,c
  3659   000ECA                     
  3660                           ;color.c: 168:     if (range == 0) {
  3661   000ECA  5025               	movf	getHSVval@range^0,w,c
  3662   000ECC  1026               	iorwf	(getHSVval@range+1)^0,w,c
  3663   000ECE  A4D8               	btfss	status,2,c
  3664   000ED0  EF6C  F007         	goto	u1901
  3665   000ED4  EF6E  F007         	goto	u1900
  3666   000ED8                     u1901:
  3667   000ED8  EF74  F007         	goto	l3037
  3668   000EDC                     u1900:
  3669   000EDC                     
  3670                           ;color.c: 169:         hue = 0;
  3671   000EDC  0E00               	movlw	0
  3672   000EDE  6E22               	movwf	(getHSVval@hue+1)^0,c
  3673   000EE0  0E00               	movlw	0
  3674   000EE2  6E21               	movwf	getHSVval@hue^0,c
  3675                           
  3676                           ;color.c: 170:     }
  3677   000EE4  EF5D  F008         	goto	l3055
  3678   000EE8                     l3037:
  3679                           
  3680                           ;color.c: 172:         if (maxRGB == (p2->R)) {
  3681   000EE8  5014               	movf	getHSVval@p2^0,w,c
  3682   000EEA  6ED9               	movwf	fsr2l,c
  3683   000EEC  6ADA               	clrf	fsr2h,c
  3684   000EEE  5027               	movf	getHSVval@maxRGB^0,w,c
  3685   000EF0  18DE               	xorwf	postinc2,w,c
  3686   000EF2  E107               	bnz	u1911
  3687   000EF4  5028               	movf	(getHSVval@maxRGB+1)^0,w,c
  3688   000EF6  18DE               	xorwf	postinc2,w,c
  3689   000EF8  A4D8               	btfss	status,2,c
  3690   000EFA  EF81  F007         	goto	u1911
  3691   000EFE  EF83  F007         	goto	u1910
  3692   000F02                     u1911:
  3693   000F02  EFC7  F007         	goto	l3043
  3694   000F06                     u1910:
  3695   000F06                     
  3696                           ;color.c: 173:             hue = 60*(((((p2->G)-(p2->B))*10)/range)%60);
  3697   000F06  0E00               	movlw	0
  3698   000F08  6E11               	movwf	(___lwmod@divisor+1)^0,c
  3699   000F0A  0E3C               	movlw	60
  3700   000F0C  6E10               	movwf	___lwmod@divisor^0,c
  3701   000F0E  C025  F009         	movff	getHSVval@range,___lwdiv@divisor
  3702   000F12  C026  F00A         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3703   000F16  5014               	movf	getHSVval@p2^0,w,c
  3704   000F18  6ED9               	movwf	fsr2l,c
  3705   000F1A  6ADA               	clrf	fsr2h,c
  3706   000F1C  0E04               	movlw	4
  3707   000F1E  26D9               	addwf	fsr2l,f,c
  3708   000F20  CFDE F015          	movff	postinc2,??_getHSVval
  3709   000F24  CFDD F016          	movff	postdec2,??_getHSVval+1
  3710   000F28  5014               	movf	getHSVval@p2^0,w,c
  3711   000F2A  6ED9               	movwf	fsr2l,c
  3712   000F2C  6ADA               	clrf	fsr2h,c
  3713   000F2E  0E02               	movlw	2
  3714   000F30  26D9               	addwf	fsr2l,f,c
  3715   000F32  CFDE F017          	movff	postinc2,??_getHSVval+2
  3716   000F36  CFDD F018          	movff	postdec2,??_getHSVval+3
  3717   000F3A  5015               	movf	??_getHSVval^0,w,c
  3718   000F3C  5C17               	subwf	(??_getHSVval+2)^0,w,c
  3719   000F3E  6E01               	movwf	___wmul@multiplier^0,c
  3720   000F40  5016               	movf	(??_getHSVval+1)^0,w,c
  3721   000F42  5818               	subwfb	(??_getHSVval+3)^0,w,c
  3722   000F44  6E02               	movwf	(___wmul@multiplier+1)^0,c
  3723   000F46  0E00               	movlw	0
  3724   000F48  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3725   000F4A  0E0A               	movlw	10
  3726   000F4C  6E03               	movwf	___wmul@multiplicand^0,c
  3727   000F4E  EC81  F00F         	call	___wmul	;wreg free
  3728   000F52  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3729   000F56  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3730   000F5A  EC7C  F00C         	call	___lwdiv	;wreg free
  3731   000F5E  C007  F00E         	movff	?___lwdiv,___lwmod@dividend
  3732   000F62  C008  F00F         	movff	?___lwdiv+1,___lwmod@dividend+1
  3733   000F66  ECB6  F00C         	call	___lwmod	;wreg free
  3734   000F6A  C00E  F023         	movff	?___lwmod,_getHSVval$3129
  3735   000F6E  C00F  F024         	movff	?___lwmod+1,_getHSVval$3129+1
  3736   000F72                     
  3737                           ;color.c: 173:             hue = 60*(((((p2->G)-(p2->B))*10)/range)%60);
  3738   000F72  C023  F001         	movff	_getHSVval$3129,___wmul@multiplier
  3739   000F76  C024  F002         	movff	_getHSVval$3129+1,___wmul@multiplier+1
  3740   000F7A  0E00               	movlw	0
  3741   000F7C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3742   000F7E  0E3C               	movlw	60
  3743   000F80  6E03               	movwf	___wmul@multiplicand^0,c
  3744   000F82  EC81  F00F         	call	___wmul	;wreg free
  3745   000F86  C001  F021         	movff	?___wmul,getHSVval@hue
  3746   000F8A  C002  F022         	movff	?___wmul+1,getHSVval@hue+1
  3747   000F8E                     l3043:
  3748                           
  3749                           ;color.c: 176:         if (maxRGB == (p2->G)){
  3750   000F8E  5014               	movf	getHSVval@p2^0,w,c
  3751   000F90  6ED9               	movwf	fsr2l,c
  3752   000F92  6ADA               	clrf	fsr2h,c
  3753   000F94  0E02               	movlw	2
  3754   000F96  26D9               	addwf	fsr2l,f,c
  3755   000F98  5027               	movf	getHSVval@maxRGB^0,w,c
  3756   000F9A  18DE               	xorwf	postinc2,w,c
  3757   000F9C  E107               	bnz	u1921
  3758   000F9E  5028               	movf	(getHSVval@maxRGB+1)^0,w,c
  3759   000FA0  18DE               	xorwf	postinc2,w,c
  3760   000FA2  A4D8               	btfss	status,2,c
  3761   000FA4  EFD6  F007         	goto	u1921
  3762   000FA8  EFD8  F007         	goto	u1920
  3763   000FAC                     u1921:
  3764   000FAC  EF12  F008         	goto	l3049
  3765   000FB0                     u1920:
  3766   000FB0                     
  3767                           ;color.c: 177:             hue = 60*(((((p2->B)-(p2->R))*10)/range)+20);
  3768   000FB0  C025  F009         	movff	getHSVval@range,___lwdiv@divisor
  3769   000FB4  C026  F00A         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3770   000FB8  5014               	movf	getHSVval@p2^0,w,c
  3771   000FBA  6ED9               	movwf	fsr2l,c
  3772   000FBC  6ADA               	clrf	fsr2h,c
  3773   000FBE  CFDE F015          	movff	postinc2,??_getHSVval
  3774   000FC2  CFDD F016          	movff	postdec2,??_getHSVval+1
  3775   000FC6  5014               	movf	getHSVval@p2^0,w,c
  3776   000FC8  6ED9               	movwf	fsr2l,c
  3777   000FCA  6ADA               	clrf	fsr2h,c
  3778   000FCC  0E04               	movlw	4
  3779   000FCE  26D9               	addwf	fsr2l,f,c
  3780   000FD0  CFDE F017          	movff	postinc2,??_getHSVval+2
  3781   000FD4  CFDD F018          	movff	postdec2,??_getHSVval+3
  3782   000FD8  5015               	movf	??_getHSVval^0,w,c
  3783   000FDA  5C17               	subwf	(??_getHSVval+2)^0,w,c
  3784   000FDC  6E01               	movwf	___wmul@multiplier^0,c
  3785   000FDE  5016               	movf	(??_getHSVval+1)^0,w,c
  3786   000FE0  5818               	subwfb	(??_getHSVval+3)^0,w,c
  3787   000FE2  6E02               	movwf	(___wmul@multiplier+1)^0,c
  3788   000FE4  0E00               	movlw	0
  3789   000FE6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3790   000FE8  0E0A               	movlw	10
  3791   000FEA  6E03               	movwf	___wmul@multiplicand^0,c
  3792   000FEC  EC81  F00F         	call	___wmul	;wreg free
  3793   000FF0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3794   000FF4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3795   000FF8  EC7C  F00C         	call	___lwdiv	;wreg free
  3796   000FFC  0E14               	movlw	20
  3797   000FFE  2407               	addwf	?___lwdiv^0,w,c
  3798   001000  6E23               	movwf	_getHSVval$3129^0,c
  3799   001002  0E00               	movlw	0
  3800   001004  2008               	addwfc	(?___lwdiv+1)^0,w,c
  3801   001006  6E24               	movwf	(_getHSVval$3129+1)^0,c
  3802   001008                     
  3803                           ;color.c: 177:             hue = 60*(((((p2->B)-(p2->R))*10)/range)+20);
  3804   001008  C023  F001         	movff	_getHSVval$3129,___wmul@multiplier
  3805   00100C  C024  F002         	movff	_getHSVval$3129+1,___wmul@multiplier+1
  3806   001010  0E00               	movlw	0
  3807   001012  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3808   001014  0E3C               	movlw	60
  3809   001016  6E03               	movwf	___wmul@multiplicand^0,c
  3810   001018  EC81  F00F         	call	___wmul	;wreg free
  3811   00101C  C001  F021         	movff	?___wmul,getHSVval@hue
  3812   001020  C002  F022         	movff	?___wmul+1,getHSVval@hue+1
  3813   001024                     l3049:
  3814                           
  3815                           ;color.c: 180:         if (maxRGB == (p2->G)){
  3816   001024  5014               	movf	getHSVval@p2^0,w,c
  3817   001026  6ED9               	movwf	fsr2l,c
  3818   001028  6ADA               	clrf	fsr2h,c
  3819   00102A  0E02               	movlw	2
  3820   00102C  26D9               	addwf	fsr2l,f,c
  3821   00102E  5027               	movf	getHSVval@maxRGB^0,w,c
  3822   001030  18DE               	xorwf	postinc2,w,c
  3823   001032  E107               	bnz	u1931
  3824   001034  5028               	movf	(getHSVval@maxRGB+1)^0,w,c
  3825   001036  18DE               	xorwf	postinc2,w,c
  3826   001038  A4D8               	btfss	status,2,c
  3827   00103A  EF21  F008         	goto	u1931
  3828   00103E  EF23  F008         	goto	u1930
  3829   001042                     u1931:
  3830   001042  EF5D  F008         	goto	l3055
  3831   001046                     u1930:
  3832   001046                     
  3833                           ;color.c: 181:             hue = 60*(((((p2->R)-(p2->G))*10)/range)+40);
  3834   001046  C025  F009         	movff	getHSVval@range,___lwdiv@divisor
  3835   00104A  C026  F00A         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3836   00104E  5014               	movf	getHSVval@p2^0,w,c
  3837   001050  6ED9               	movwf	fsr2l,c
  3838   001052  6ADA               	clrf	fsr2h,c
  3839   001054  0E02               	movlw	2
  3840   001056  26D9               	addwf	fsr2l,f,c
  3841   001058  CFDE F015          	movff	postinc2,??_getHSVval
  3842   00105C  CFDD F016          	movff	postdec2,??_getHSVval+1
  3843   001060  5014               	movf	getHSVval@p2^0,w,c
  3844   001062  6ED9               	movwf	fsr2l,c
  3845   001064  6ADA               	clrf	fsr2h,c
  3846   001066  CFDE F017          	movff	postinc2,??_getHSVval+2
  3847   00106A  CFDD F018          	movff	postdec2,??_getHSVval+3
  3848   00106E  5015               	movf	??_getHSVval^0,w,c
  3849   001070  5C17               	subwf	(??_getHSVval+2)^0,w,c
  3850   001072  6E01               	movwf	___wmul@multiplier^0,c
  3851   001074  5016               	movf	(??_getHSVval+1)^0,w,c
  3852   001076  5818               	subwfb	(??_getHSVval+3)^0,w,c
  3853   001078  6E02               	movwf	(___wmul@multiplier+1)^0,c
  3854   00107A  0E00               	movlw	0
  3855   00107C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3856   00107E  0E0A               	movlw	10
  3857   001080  6E03               	movwf	___wmul@multiplicand^0,c
  3858   001082  EC81  F00F         	call	___wmul	;wreg free
  3859   001086  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3860   00108A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3861   00108E  EC7C  F00C         	call	___lwdiv	;wreg free
  3862   001092  0E28               	movlw	40
  3863   001094  2407               	addwf	?___lwdiv^0,w,c
  3864   001096  6E23               	movwf	_getHSVval$3129^0,c
  3865   001098  0E00               	movlw	0
  3866   00109A  2008               	addwfc	(?___lwdiv+1)^0,w,c
  3867   00109C  6E24               	movwf	(_getHSVval$3129+1)^0,c
  3868   00109E                     
  3869                           ;color.c: 181:             hue = 60*(((((p2->R)-(p2->G))*10)/range)+40);
  3870   00109E  C023  F001         	movff	_getHSVval$3129,___wmul@multiplier
  3871   0010A2  C024  F002         	movff	_getHSVval$3129+1,___wmul@multiplier+1
  3872   0010A6  0E00               	movlw	0
  3873   0010A8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3874   0010AA  0E3C               	movlw	60
  3875   0010AC  6E03               	movwf	___wmul@multiplicand^0,c
  3876   0010AE  EC81  F00F         	call	___wmul	;wreg free
  3877   0010B2  C001  F021         	movff	?___wmul,getHSVval@hue
  3878   0010B6  C002  F022         	movff	?___wmul+1,getHSVval@hue+1
  3879   0010BA                     l3055:
  3880                           
  3881                           ;color.c: 184:     if (maxRGB == 0) {saturation = 0;}
  3882   0010BA  5027               	movf	getHSVval@maxRGB^0,w,c
  3883   0010BC  1028               	iorwf	(getHSVval@maxRGB+1)^0,w,c
  3884   0010BE  A4D8               	btfss	status,2,c
  3885   0010C0  EF64  F008         	goto	u1941
  3886   0010C4  EF66  F008         	goto	u1940
  3887   0010C8                     u1941:
  3888   0010C8  EF6A  F008         	goto	l3059
  3889   0010CC                     u1940:
  3890   0010CC  0E00               	movlw	0
  3891   0010CE  6E20               	movwf	(getHSVval@saturation+1)^0,c
  3892   0010D0  0E00               	movlw	0
  3893   0010D2  6E1F               	movwf	getHSVval@saturation^0,c
  3894   0010D4                     l3059:
  3895                           
  3896                           ;color.c: 186:     if (maxRGB != 0) {saturation = (range*10)/maxRGB;}
  3897   0010D4  5027               	movf	getHSVval@maxRGB^0,w,c
  3898   0010D6  1028               	iorwf	(getHSVval@maxRGB+1)^0,w,c
  3899   0010D8  B4D8               	btfsc	status,2,c
  3900   0010DA  EF71  F008         	goto	u1951
  3901   0010DE  EF73  F008         	goto	u1950
  3902   0010E2                     u1951:
  3903   0010E2  EF8B  F008         	goto	l3063
  3904   0010E6                     u1950:
  3905   0010E6  C025  F001         	movff	getHSVval@range,___wmul@multiplier
  3906   0010EA  C026  F002         	movff	getHSVval@range+1,___wmul@multiplier+1
  3907   0010EE  0E00               	movlw	0
  3908   0010F0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3909   0010F2  0E0A               	movlw	10
  3910   0010F4  6E03               	movwf	___wmul@multiplicand^0,c
  3911   0010F6  EC81  F00F         	call	___wmul	;wreg free
  3912   0010FA  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3913   0010FE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3914   001102  C027  F009         	movff	getHSVval@maxRGB,___lwdiv@divisor
  3915   001106  C028  F00A         	movff	getHSVval@maxRGB+1,___lwdiv@divisor+1
  3916   00110A  EC7C  F00C         	call	___lwdiv	;wreg free
  3917   00110E  C007  F01F         	movff	?___lwdiv,getHSVval@saturation
  3918   001112  C008  F020         	movff	?___lwdiv+1,getHSVval@saturation+1
  3919   001116                     l3063:
  3920                           
  3921                           ;color.c: 188:     p1->H = hue;
  3922   001116  5013               	movf	getHSVval@p1^0,w,c
  3923   001118  6ED9               	movwf	fsr2l,c
  3924   00111A  6ADA               	clrf	fsr2h,c
  3925   00111C  C021  FFDE         	movff	getHSVval@hue,postinc2
  3926   001120  C022  FFDD         	movff	getHSVval@hue+1,postdec2
  3927   001124                     
  3928                           ;color.c: 189:     p1->S = saturation;
  3929   001124  5013               	movf	getHSVval@p1^0,w,c
  3930   001126  6ED9               	movwf	fsr2l,c
  3931   001128  6ADA               	clrf	fsr2h,c
  3932   00112A  0E02               	movlw	2
  3933   00112C  26D9               	addwf	fsr2l,f,c
  3934   00112E  C01F  FFDE         	movff	getHSVval@saturation,postinc2
  3935   001132  C020  FFDD         	movff	getHSVval@saturation+1,postdec2
  3936   001136                     
  3937                           ;color.c: 190:     p1->V = maxRGB;
  3938   001136  5013               	movf	getHSVval@p1^0,w,c
  3939   001138  6ED9               	movwf	fsr2l,c
  3940   00113A  6ADA               	clrf	fsr2h,c
  3941   00113C  0E04               	movlw	4
  3942   00113E  26D9               	addwf	fsr2l,f,c
  3943   001140  C027  FFDE         	movff	getHSVval@maxRGB,postinc2
  3944   001144  C028  FFDD         	movff	getHSVval@maxRGB+1,postdec2
  3945   001148  0012               	return		;funcret
  3946   00114A                     __end_of_getHSVval:
  3947                           	callstack 0
  3948                           
  3949 ;; *************** function _min *****************
  3950 ;; Defined at:
  3951 ;;		line 127 in file "color.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  a               2    0[COMRAM] unsigned int 
  3954 ;;  b               2    2[COMRAM] unsigned int 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  min_val         2    4[COMRAM] unsigned int 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  2    0[COMRAM] unsigned int 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3966 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3967 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;Total ram usage:        6 bytes
  3971 ;; Hardware stack levels used: 1
  3972 ;; Hardware stack levels required when called: 1
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		_getHSVval
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text24
  3981   001DE6                     __ptext24:
  3982                           	callstack 0
  3983   001DE6                     _min:
  3984                           	callstack 28
  3985   001DE6                     
  3986                           ;color.c: 127: unsigned int min(unsigned int a, unsigned int b);color.c: 128: {;color.c:
      +                           129:     unsigned int min_val;;color.c: 131:     if (a < b) {min_val = a;}
  3987   001DE6  5003               	movf	min@b^0,w,c
  3988   001DE8  5C01               	subwf	min@a^0,w,c
  3989   001DEA  5004               	movf	(min@b+1)^0,w,c
  3990   001DEC  5802               	subwfb	(min@a+1)^0,w,c
  3991   001DEE  B0D8               	btfsc	status,0,c
  3992   001DF0  EFFC  F00E         	goto	u1711
  3993   001DF4  EFFE  F00E         	goto	u1710
  3994   001DF8                     u1711:
  3995   001DF8  EF04  F00F         	goto	l98
  3996   001DFC                     u1710:
  3997   001DFC  C001  F005         	movff	min@a,min@min_val
  3998   001E00  C002  F006         	movff	min@a+1,min@min_val+1
  3999   001E04  EF08  F00F         	goto	l99
  4000   001E08                     l98:
  4001   001E08  C003  F005         	movff	min@b,min@min_val
  4002   001E0C  C004  F006         	movff	min@b+1,min@min_val+1
  4003   001E10                     l99:
  4004                           
  4005                           ;color.c: 135:     return min_val;
  4006   001E10  C005  F001         	movff	min@min_val,?_min
  4007   001E14  C006  F002         	movff	min@min_val+1,?_min+1
  4008   001E18  0012               	return		;funcret
  4009   001E1A                     __end_of_min:
  4010                           	callstack 0
  4011                           
  4012 ;; *************** function _max *****************
  4013 ;; Defined at:
  4014 ;;		line 110 in file "color.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;  a               2    0[COMRAM] unsigned int 
  4017 ;;  b               2    2[COMRAM] unsigned int 
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  max_val         2    4[COMRAM] unsigned int 
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  2    0[COMRAM] unsigned int 
  4022 ;; Registers used:
  4023 ;;		wreg, status,2, status,0
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4029 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4032 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4033 ;;Total ram usage:        6 bytes
  4034 ;; Hardware stack levels used: 1
  4035 ;; Hardware stack levels required when called: 1
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		_getHSVval
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text25
  4044   001E1A                     __ptext25:
  4045                           	callstack 0
  4046   001E1A                     _max:
  4047                           	callstack 28
  4048   001E1A                     
  4049                           ;color.c: 110: unsigned int max(unsigned int a, unsigned int b);color.c: 111: {;color.c:
      +                           112:     unsigned int max_val;;color.c: 114:     if (a > b) {max_val = a;}
  4050   001E1A  5001               	movf	max@a^0,w,c
  4051   001E1C  5C03               	subwf	max@b^0,w,c
  4052   001E1E  5002               	movf	(max@a+1)^0,w,c
  4053   001E20  5804               	subwfb	(max@b+1)^0,w,c
  4054   001E22  B0D8               	btfsc	status,0,c
  4055   001E24  EF16  F00F         	goto	u1701
  4056   001E28  EF18  F00F         	goto	u1700
  4057   001E2C                     u1701:
  4058   001E2C  EF1E  F00F         	goto	l93
  4059   001E30                     u1700:
  4060   001E30  C001  F005         	movff	max@a,max@max_val
  4061   001E34  C002  F006         	movff	max@a+1,max@max_val+1
  4062   001E38  EF22  F00F         	goto	l94
  4063   001E3C                     l93:
  4064   001E3C  C003  F005         	movff	max@b,max@max_val
  4065   001E40  C004  F006         	movff	max@b+1,max@max_val+1
  4066   001E44                     l94:
  4067                           
  4068                           ;color.c: 118:     return max_val;
  4069   001E44  C005  F001         	movff	max@max_val,?_max
  4070   001E48  C006  F002         	movff	max@max_val+1,?_max+1
  4071   001E4C  0012               	return		;funcret
  4072   001E4E                     __end_of_max:
  4073                           	callstack 0
  4074                           
  4075 ;; *************** function ___wmul *****************
  4076 ;; Defined at:
  4077 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  multiplier      2    0[COMRAM] unsigned int 
  4080 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  product         2    4[COMRAM] unsigned int 
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  2    0[COMRAM] unsigned int 
  4085 ;; Registers used:
  4086 ;;		wreg, status,2, status,0, prodl, prodh
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4095 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4096 ;;Total ram usage:        6 bytes
  4097 ;; Hardware stack levels used: 1
  4098 ;; Hardware stack levels required when called: 1
  4099 ;; This function calls:
  4100 ;;		Nothing
  4101 ;; This function is called by:
  4102 ;;		_getHSVval
  4103 ;;		_setMotorPWM
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           	psect	text26
  4108   001F02                     __ptext26:
  4109                           	callstack 0
  4110   001F02                     ___wmul:
  4111                           	callstack 28
  4112   001F02  5001               	movf	___wmul@multiplier^0,w,c
  4113   001F04  0203               	mulwf	___wmul@multiplicand^0,c
  4114   001F06  CFF3 F005          	movff	prodl,___wmul@product
  4115   001F0A  CFF4 F006          	movff	prodh,___wmul@product+1
  4116   001F0E  5001               	movf	___wmul@multiplier^0,w,c
  4117   001F10  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4118   001F12  50F3               	movf	243,w,c
  4119   001F14  2606               	addwf	(___wmul@product+1)^0,f,c
  4120   001F16  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4121   001F18  0203               	mulwf	___wmul@multiplicand^0,c
  4122   001F1A  50F3               	movf	243,w,c
  4123   001F1C  2606               	addwf	(___wmul@product+1)^0,f,c
  4124   001F1E  C005  F001         	movff	___wmul@product,?___wmul
  4125   001F22  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4126   001F26  0012               	return		;funcret
  4127   001F28                     __end_of___wmul:
  4128                           	callstack 0
  4129                           
  4130 ;; *************** function ___lwmod *****************
  4131 ;; Defined at:
  4132 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  dividend        2   13[COMRAM] unsigned int 
  4135 ;;  divisor         2   15[COMRAM] unsigned int 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  counter         1   17[COMRAM] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  2   13[COMRAM] unsigned int 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4147 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4148 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4150 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4151 ;;Total ram usage:        5 bytes
  4152 ;; Hardware stack levels used: 1
  4153 ;; Hardware stack levels required when called: 1
  4154 ;; This function calls:
  4155 ;;		Nothing
  4156 ;; This function is called by:
  4157 ;;		_getHSVval
  4158 ;;		_vfpfcnvrt
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text27
  4163   00196C                     __ptext27:
  4164                           	callstack 0
  4165   00196C                     ___lwmod:
  4166                           	callstack 25
  4167   00196C  5010               	movf	___lwmod@divisor^0,w,c
  4168   00196E  1011               	iorwf	(___lwmod@divisor+1)^0,w,c
  4169   001970  B4D8               	btfsc	status,2,c
  4170   001972  EFBD  F00C         	goto	u1261
  4171   001976  EFBF  F00C         	goto	u1260
  4172   00197A                     u1261:
  4173   00197A  EFE3  F00C         	goto	l1189
  4174   00197E                     u1260:
  4175   00197E  0E01               	movlw	1
  4176   001980  6E12               	movwf	___lwmod@counter^0,c
  4177   001982  EFC7  F00C         	goto	l2529
  4178   001986                     l2527:
  4179   001986  90D8               	bcf	status,0,c
  4180   001988  3610               	rlcf	___lwmod@divisor^0,f,c
  4181   00198A  3611               	rlcf	(___lwmod@divisor+1)^0,f,c
  4182   00198C  2A12               	incf	___lwmod@counter^0,f,c
  4183   00198E                     l2529:
  4184   00198E  AE11               	btfss	(___lwmod@divisor+1)^0,7,c
  4185   001990  EFCC  F00C         	goto	u1271
  4186   001994  EFCE  F00C         	goto	u1270
  4187   001998                     u1271:
  4188   001998  EFC3  F00C         	goto	l2527
  4189   00199C                     u1270:
  4190   00199C                     l2531:
  4191   00199C  5010               	movf	___lwmod@divisor^0,w,c
  4192   00199E  5C0E               	subwf	___lwmod@dividend^0,w,c
  4193   0019A0  5011               	movf	(___lwmod@divisor+1)^0,w,c
  4194   0019A2  580F               	subwfb	(___lwmod@dividend+1)^0,w,c
  4195   0019A4  A0D8               	btfss	status,0,c
  4196   0019A6  EFD7  F00C         	goto	u1281
  4197   0019AA  EFD9  F00C         	goto	u1280
  4198   0019AE                     u1281:
  4199   0019AE  EFDD  F00C         	goto	l2535
  4200   0019B2                     u1280:
  4201   0019B2  5010               	movf	___lwmod@divisor^0,w,c
  4202   0019B4  5E0E               	subwf	___lwmod@dividend^0,f,c
  4203   0019B6  5011               	movf	(___lwmod@divisor+1)^0,w,c
  4204   0019B8  5A0F               	subwfb	(___lwmod@dividend+1)^0,f,c
  4205   0019BA                     l2535:
  4206   0019BA  90D8               	bcf	status,0,c
  4207   0019BC  3211               	rrcf	(___lwmod@divisor+1)^0,f,c
  4208   0019BE  3210               	rrcf	___lwmod@divisor^0,f,c
  4209   0019C0  2E12               	decfsz	___lwmod@counter^0,f,c
  4210   0019C2  EFCE  F00C         	goto	l2531
  4211   0019C6                     l1189:
  4212   0019C6  C00E  F00E         	movff	___lwmod@dividend,?___lwmod
  4213   0019CA  C00F  F00F         	movff	___lwmod@dividend+1,?___lwmod+1
  4214   0019CE  0012               	return		;funcret
  4215   0019D0                     __end_of___lwmod:
  4216                           	callstack 0
  4217                           
  4218 ;; *************** function ___lwdiv *****************
  4219 ;; Defined at:
  4220 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  dividend        2    6[COMRAM] unsigned int 
  4223 ;;  divisor         2    8[COMRAM] unsigned int 
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;  quotient        2   10[COMRAM] unsigned int 
  4226 ;;  counter         1   12[COMRAM] unsigned char 
  4227 ;; Return value:  Size  Location     Type
  4228 ;;                  2    6[COMRAM] unsigned int 
  4229 ;; Registers used:
  4230 ;;		wreg, status,2, status,0
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/0
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4237 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4239 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4240 ;;Total ram usage:        7 bytes
  4241 ;; Hardware stack levels used: 1
  4242 ;; Hardware stack levels required when called: 1
  4243 ;; This function calls:
  4244 ;;		Nothing
  4245 ;; This function is called by:
  4246 ;;		_getHSVval
  4247 ;;		_vfpfcnvrt
  4248 ;;		_setMotorPWM
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text28
  4253   0018F8                     __ptext28:
  4254                           	callstack 0
  4255   0018F8                     ___lwdiv:
  4256                           	callstack 25
  4257   0018F8  0E00               	movlw	0
  4258   0018FA  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  4259   0018FC  0E00               	movlw	0
  4260   0018FE  6E0B               	movwf	___lwdiv@quotient^0,c
  4261   001900  5009               	movf	___lwdiv@divisor^0,w,c
  4262   001902  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4263   001904  B4D8               	btfsc	status,2,c
  4264   001906  EF87  F00C         	goto	u1231
  4265   00190A  EF89  F00C         	goto	u1230
  4266   00190E                     u1231:
  4267   00190E  EFB1  F00C         	goto	l1179
  4268   001912                     u1230:
  4269   001912  0E01               	movlw	1
  4270   001914  6E0D               	movwf	___lwdiv@counter^0,c
  4271   001916  EF91  F00C         	goto	l2509
  4272   00191A                     l2507:
  4273   00191A  90D8               	bcf	status,0,c
  4274   00191C  3609               	rlcf	___lwdiv@divisor^0,f,c
  4275   00191E  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4276   001920  2A0D               	incf	___lwdiv@counter^0,f,c
  4277   001922                     l2509:
  4278   001922  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  4279   001924  EF96  F00C         	goto	u1241
  4280   001928  EF98  F00C         	goto	u1240
  4281   00192C                     u1241:
  4282   00192C  EF8D  F00C         	goto	l2507
  4283   001930                     u1240:
  4284   001930                     l2511:
  4285   001930  90D8               	bcf	status,0,c
  4286   001932  360B               	rlcf	___lwdiv@quotient^0,f,c
  4287   001934  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4288   001936  5009               	movf	___lwdiv@divisor^0,w,c
  4289   001938  5C07               	subwf	___lwdiv@dividend^0,w,c
  4290   00193A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4291   00193C  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4292   00193E  A0D8               	btfss	status,0,c
  4293   001940  EFA4  F00C         	goto	u1251
  4294   001944  EFA6  F00C         	goto	u1250
  4295   001948                     u1251:
  4296   001948  EFAB  F00C         	goto	l2519
  4297   00194C                     u1250:
  4298   00194C  5009               	movf	___lwdiv@divisor^0,w,c
  4299   00194E  5E07               	subwf	___lwdiv@dividend^0,f,c
  4300   001950  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4301   001952  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4302   001954  800B               	bsf	___lwdiv@quotient^0,0,c
  4303   001956                     l2519:
  4304   001956  90D8               	bcf	status,0,c
  4305   001958  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4306   00195A  3209               	rrcf	___lwdiv@divisor^0,f,c
  4307   00195C  2E0D               	decfsz	___lwdiv@counter^0,f,c
  4308   00195E  EF98  F00C         	goto	l2511
  4309   001962                     l1179:
  4310   001962  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  4311   001966  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4312   00196A  0012               	return		;funcret
  4313   00196C                     __end_of___lwdiv:
  4314                           	callstack 0
  4315                           
  4316 ;; *************** function _color_click_init *****************
  4317 ;; Defined at:
  4318 ;;		line 4 in file "color.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4334 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4335 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4336 ;;Total ram usage:        1 bytes
  4337 ;; Hardware stack levels used: 1
  4338 ;; Hardware stack levels required when called: 4
  4339 ;; This function calls:
  4340 ;;		_I2C_2_Master_Init
  4341 ;;		_color_writetoaddr
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text29
  4348   001E4E                     __ptext29:
  4349                           	callstack 0
  4350   001E4E                     _color_click_init:
  4351                           	callstack 26
  4352   001E4E                     
  4353                           ;color.c: 7:     I2C_2_Master_Init();
  4354   001E4E  EC58  F00F         	call	_I2C_2_Master_Init	;wreg free
  4355   001E52                     
  4356                           ;color.c: 10:   color_writetoaddr(0x00, 0x01);
  4357   001E52  0E01               	movlw	1
  4358   001E54  6E03               	movwf	color_writetoaddr@value^0,c
  4359   001E56  0E00               	movlw	0
  4360   001E58  ECA6  F00F         	call	_color_writetoaddr
  4361   001E5C                     
  4362                           ;color.c: 11:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4363   001E5C  0E3F               	movlw	63
  4364   001E5E  6E05               	movwf	??_color_click_init^0,c
  4365   001E60  0E55               	movlw	85
  4366   001E62                     u2497:
  4367   001E62  2EE8               	decfsz	wreg,f,c
  4368   001E64  D7FE               	bra	u2497
  4369   001E66  2E05               	decfsz	??_color_click_init^0,f,c
  4370   001E68  D7FC               	bra	u2497
  4371   001E6A  0000               	nop	
  4372   001E6C                     
  4373                           ;color.c: 14:  color_writetoaddr(0x00, 0x03);
  4374   001E6C  0E03               	movlw	3
  4375   001E6E  6E03               	movwf	color_writetoaddr@value^0,c
  4376   001E70  0E00               	movlw	0
  4377   001E72  ECA6  F00F         	call	_color_writetoaddr
  4378   001E76                     
  4379                           ;color.c: 17:  color_writetoaddr(0x01, 0xD5);
  4380   001E76  0ED5               	movlw	213
  4381   001E78  6E03               	movwf	color_writetoaddr@value^0,c
  4382   001E7A  0E01               	movlw	1
  4383   001E7C  ECA6  F00F         	call	_color_writetoaddr
  4384   001E80  0012               	return		;funcret
  4385   001E82                     __end_of_color_click_init:
  4386                           	callstack 0
  4387                           
  4388 ;; *************** function _color_writetoaddr *****************
  4389 ;; Defined at:
  4390 ;;		line 20 in file "color.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  address         1    wreg     unsigned char 
  4393 ;;  value           1    2[COMRAM] unsigned char 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  address         1    3[COMRAM] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4405 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4409 ;;Total ram usage:        2 bytes
  4410 ;; Hardware stack levels used: 1
  4411 ;; Hardware stack levels required when called: 3
  4412 ;; This function calls:
  4413 ;;		_I2C_2_Master_Start
  4414 ;;		_I2C_2_Master_Stop
  4415 ;;		_I2C_2_Master_Write
  4416 ;; This function is called by:
  4417 ;;		_color_click_init
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text30
  4422   001F4C                     __ptext30:
  4423                           	callstack 0
  4424   001F4C                     _color_writetoaddr:
  4425                           	callstack 26
  4426                           
  4427                           ;incstack = 0
  4428                           ;color_writetoaddr@address stored from wreg
  4429   001F4C  6E04               	movwf	color_writetoaddr@address^0,c
  4430   001F4E                     
  4431                           ;color.c: 21:     I2C_2_Master_Start();
  4432   001F4E  ECF9  F00F         	call	_I2C_2_Master_Start	;wreg free
  4433                           
  4434                           ;color.c: 22:     I2C_2_Master_Write(0x52 | 0x00);
  4435   001F52  0E52               	movlw	82
  4436   001F54  ECDD  F00F         	call	_I2C_2_Master_Write
  4437                           
  4438                           ;color.c: 23:     I2C_2_Master_Write(0x80 | address);
  4439   001F58  5004               	movf	color_writetoaddr@address^0,w,c
  4440   001F5A  0980               	iorlw	128
  4441   001F5C  ECDD  F00F         	call	_I2C_2_Master_Write
  4442                           
  4443                           ;color.c: 24:     I2C_2_Master_Write(value);
  4444   001F60  5003               	movf	color_writetoaddr@value^0,w,c
  4445   001F62  ECDD  F00F         	call	_I2C_2_Master_Write
  4446                           
  4447                           ;color.c: 25:     I2C_2_Master_Stop();
  4448   001F66  ECF4  F00F         	call	_I2C_2_Master_Stop	;wreg free
  4449   001F6A  0012               	return		;funcret
  4450   001F6C                     __end_of_color_writetoaddr:
  4451                           	callstack 0
  4452                           
  4453 ;; *************** function _I2C_2_Master_Write *****************
  4454 ;; Defined at:
  4455 ;;		line 45 in file "i2c.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;  data_byte       1    wreg     unsigned char 
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  data_byte       1    1[COMRAM] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      void 
  4462 ;; Registers used:
  4463 ;;		wreg, status,2, status,0, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4472 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4473 ;;Total ram usage:        1 bytes
  4474 ;; Hardware stack levels used: 1
  4475 ;; Hardware stack levels required when called: 2
  4476 ;; This function calls:
  4477 ;;		_I2C_2_Master_Idle
  4478 ;; This function is called by:
  4479 ;;		_color_writetoaddr
  4480 ;;		_color_read_Red
  4481 ;;		_color_read_Blue
  4482 ;;		_color_read_Green
  4483 ;;		_color_read_Clear
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text31
  4488   001FBA                     __ptext31:
  4489                           	callstack 0
  4490   001FBA                     _I2C_2_Master_Write:
  4491                           	callstack 26
  4492                           
  4493                           ;incstack = 0
  4494                           ;I2C_2_Master_Write@data_byte stored from wreg
  4495   001FBA  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  4496   001FBC                     
  4497                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4498   001FBC  EC6D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4499   001FC0                     
  4500                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4501   001FC0  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4502   001FC4  0012               	return		;funcret
  4503   001FC6                     __end_of_I2C_2_Master_Write:
  4504                           	callstack 0
  4505                           
  4506 ;; *************** function _I2C_2_Master_Stop *****************
  4507 ;; Defined at:
  4508 ;;		line 39 in file "i2c.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		wreg, status,2, status,0, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4526 ;;Total ram usage:        0 bytes
  4527 ;; Hardware stack levels used: 1
  4528 ;; Hardware stack levels required when called: 2
  4529 ;; This function calls:
  4530 ;;		_I2C_2_Master_Idle
  4531 ;; This function is called by:
  4532 ;;		_color_writetoaddr
  4533 ;;		_color_read_Red
  4534 ;;		_color_read_Blue
  4535 ;;		_color_read_Green
  4536 ;;		_color_read_Clear
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           	psect	text32
  4541   001FE8                     __ptext32:
  4542                           	callstack 0
  4543   001FE8                     _I2C_2_Master_Stop:
  4544                           	callstack 26
  4545   001FE8                     
  4546                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4547   001FE8  EC6D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4548   001FEC                     
  4549                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4550   001FEC  010E               	movlb	14	; () banked
  4551   001FEE  85DA               	bsf	218,2,b	;volatile
  4552   001FF0                     
  4553                           ; BSR set to: 14
  4554   001FF0  0012               	return		;funcret
  4555   001FF2                     __end_of_I2C_2_Master_Stop:
  4556                           	callstack 0
  4557                           
  4558 ;; *************** function _I2C_2_Master_Start *****************
  4559 ;; Defined at:
  4560 ;;		line 27 in file "i2c.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;		None
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      void 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0, cstack
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4578 ;;Total ram usage:        0 bytes
  4579 ;; Hardware stack levels used: 1
  4580 ;; Hardware stack levels required when called: 2
  4581 ;; This function calls:
  4582 ;;		_I2C_2_Master_Idle
  4583 ;; This function is called by:
  4584 ;;		_color_writetoaddr
  4585 ;;		_color_read_Red
  4586 ;;		_color_read_Blue
  4587 ;;		_color_read_Green
  4588 ;;		_color_read_Clear
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text33
  4593   001FF2                     __ptext33:
  4594                           	callstack 0
  4595   001FF2                     _I2C_2_Master_Start:
  4596                           	callstack 26
  4597   001FF2                     
  4598                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4599   001FF2  EC6D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4600   001FF6                     
  4601                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4602   001FF6  010E               	movlb	14	; () banked
  4603   001FF8  81DA               	bsf	218,0,b	;volatile
  4604   001FFA                     
  4605                           ; BSR set to: 14
  4606   001FFA  0012               	return		;funcret
  4607   001FFC                     __end_of_I2C_2_Master_Start:
  4608                           	callstack 0
  4609                           
  4610 ;; *************** function _I2C_2_Master_Idle *****************
  4611 ;; Defined at:
  4612 ;;		line 22 in file "i2c.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;		None
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, status,2, status,0
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4628 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4630 ;;Total ram usage:        1 bytes
  4631 ;; Hardware stack levels used: 1
  4632 ;; Hardware stack levels required when called: 1
  4633 ;; This function calls:
  4634 ;;		Nothing
  4635 ;; This function is called by:
  4636 ;;		_I2C_2_Master_Start
  4637 ;;		_I2C_2_Master_RepStart
  4638 ;;		_I2C_2_Master_Stop
  4639 ;;		_I2C_2_Master_Write
  4640 ;;		_I2C_2_Master_Read
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           	psect	text34
  4645   001EDA                     __ptext34:
  4646                           	callstack 0
  4647   001EDA                     _I2C_2_Master_Idle:
  4648                           	callstack 26
  4649   001EDA                     l281:
  4650   001EDA  010E               	movlb	14	; () banked
  4651   001EDC  B5D8               	btfsc	216,2,b	;volatile
  4652   001EDE  EF73  F00F         	goto	u1501
  4653   001EE2  EF75  F00F         	goto	u1500
  4654   001EE6                     u1501:
  4655   001EE6  EF6D  F00F         	goto	l281
  4656   001EEA                     u1500:
  4657   001EEA                     
  4658                           ; BSR set to: 14
  4659   001EEA  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4660   001EEE  0E1F               	movlw	31
  4661   001EF0  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4662   001EF2  A4D8               	btfss	status,2,c
  4663   001EF4  EF7E  F00F         	goto	u1511
  4664   001EF8  EF80  F00F         	goto	u1510
  4665   001EFC                     u1511:
  4666   001EFC  EF6D  F00F         	goto	l281
  4667   001F00                     u1510:
  4668   001F00                     
  4669                           ; BSR set to: 14
  4670   001F00  0012               	return		;funcret
  4671   001F02                     __end_of_I2C_2_Master_Idle:
  4672                           	callstack 0
  4673                           
  4674 ;; *************** function _I2C_2_Master_Init *****************
  4675 ;; Defined at:
  4676 ;;		line 4 in file "i2c.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;		None
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;		None
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  1    wreg      void 
  4683 ;; Registers used:
  4684 ;;		wreg, status,2
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4694 ;;Total ram usage:        0 bytes
  4695 ;; Hardware stack levels used: 1
  4696 ;; Hardware stack levels required when called: 1
  4697 ;; This function calls:
  4698 ;;		Nothing
  4699 ;; This function is called by:
  4700 ;;		_color_click_init
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           	psect	text35
  4705   001EB0                     __ptext35:
  4706                           	callstack 0
  4707   001EB0                     _I2C_2_Master_Init:
  4708                           	callstack 28
  4709   001EB0                     
  4710                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4711   001EB0  010E               	movlb	14	; () banked
  4712   001EB2  51D9               	movf	217,w,b	;volatile
  4713   001EB4  0BF0               	andlw	-16
  4714   001EB6  0908               	iorlw	8
  4715   001EB8  6FD9               	movwf	217,b	;volatile
  4716   001EBA                     
  4717                           ; BSR set to: 14
  4718                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4719   001EBA  8BD9               	bsf	217,5,b	;volatile
  4720                           
  4721                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4722   001EBC  0E9F               	movlw	159
  4723   001EBE  6FD6               	movwf	214,b	;volatile
  4724   001EC0                     
  4725                           ; BSR set to: 14
  4726                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4727   001EC0  8A84               	bsf	132,5,c	;volatile
  4728   001EC2                     
  4729                           ; BSR set to: 14
  4730                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4731   001EC2  8C84               	bsf	132,6,c	;volatile
  4732   001EC4                     
  4733                           ; BSR set to: 14
  4734                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4735   001EC4  9BA7               	bcf	167,5,b	;volatile
  4736   001EC6                     
  4737                           ; BSR set to: 14
  4738                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4739   001EC6  9DA7               	bcf	167,6,b	;volatile
  4740                           
  4741                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4742   001EC8  0E1D               	movlw	29
  4743   001ECA  6F1D               	movwf	29,b	;volatile
  4744                           
  4745                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4746   001ECC  0E1E               	movlw	30
  4747   001ECE  6F1C               	movwf	28,b	;volatile
  4748                           
  4749                           ;i2c.c: 18:   RD5PPS=0x1C;
  4750   001ED0  0E1C               	movlw	28
  4751   001ED2  6F6F               	movwf	111,b	;volatile
  4752                           
  4753                           ;i2c.c: 19:   RD6PPS=0x1B;
  4754   001ED4  0E1B               	movlw	27
  4755   001ED6  6F70               	movwf	112,b	;volatile
  4756   001ED8                     
  4757                           ; BSR set to: 14
  4758   001ED8  0012               	return		;funcret
  4759   001EDA                     __end_of_I2C_2_Master_Init:
  4760                           	callstack 0
  4761                           
  4762 ;; *************** function _buggy_lights_init *****************
  4763 ;; Defined at:
  4764 ;;		line 4 in file "buggy_lights.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;		None
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		None
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4782 ;;Total ram usage:        0 bytes
  4783 ;; Hardware stack levels used: 1
  4784 ;; Hardware stack levels required when called: 1
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           	psect	text36
  4793   001E82                     __ptext36:
  4794                           	callstack 0
  4795   001E82                     _buggy_lights_init:
  4796                           	callstack 29
  4797   001E82                     
  4798                           ;buggy_lights.c: 8:         TRISDbits.TRISD4 = 0;
  4799   001E82  9884               	bcf	132,4,c	;volatile
  4800                           
  4801                           ;buggy_lights.c: 9:         TRISHbits.TRISH1 = 0;
  4802   001E84  9288               	bcf	136,1,c	;volatile
  4803                           
  4804                           ;buggy_lights.c: 10:         TRISDbits.TRISD3 = 0;
  4805   001E86  9684               	bcf	132,3,c	;volatile
  4806                           
  4807                           ;buggy_lights.c: 11:         TRISFbits.TRISF0 = 0;
  4808   001E88  9086               	bcf	134,0,c	;volatile
  4809                           
  4810                           ;buggy_lights.c: 12:         TRISHbits.TRISH0 = 0;
  4811   001E8A  9088               	bcf	136,0,c	;volatile
  4812                           
  4813                           ;buggy_lights.c: 14:         LATDbits.LATD4 = 0;
  4814   001E8C  987C               	bcf	124,4,c	;volatile
  4815                           
  4816                           ;buggy_lights.c: 15:         LATHbits.LATH1 = 0;
  4817   001E8E  9280               	bcf	128,1,c	;volatile
  4818                           
  4819                           ;buggy_lights.c: 16:         LATDbits.LATD3 = 0;
  4820   001E90  967C               	bcf	124,3,c	;volatile
  4821                           
  4822                           ;buggy_lights.c: 17:         LATFbits.LATF0 = 0;
  4823   001E92  907E               	bcf	126,0,c	;volatile
  4824                           
  4825                           ;buggy_lights.c: 18:         LATHbits.LATH0 = 0;
  4826   001E94  9080               	bcf	128,0,c	;volatile
  4827                           
  4828                           ;buggy_lights.c: 24:             TRISGbits.TRISG1 = 0;
  4829   001E96  9287               	bcf	135,1,c	;volatile
  4830                           
  4831                           ;buggy_lights.c: 25:             TRISAbits.TRISA4 = 0;
  4832   001E98  9881               	bcf	129,4,c	;volatile
  4833                           
  4834                           ;buggy_lights.c: 26:             TRISFbits.TRISF7 = 0;
  4835   001E9A  9E86               	bcf	134,7,c	;volatile
  4836                           
  4837                           ;buggy_lights.c: 28:             LATGbits.LATG1 = 0;
  4838   001E9C  927F               	bcf	127,1,c	;volatile
  4839                           
  4840                           ;buggy_lights.c: 29:             LATAbits.LATA4 = 0;
  4841   001E9E  9879               	bcf	121,4,c	;volatile
  4842                           
  4843                           ;buggy_lights.c: 30:             LATFbits.LATF7 = 0;
  4844   001EA0  9E7E               	bcf	126,7,c	;volatile
  4845                           
  4846                           ;buggy_lights.c: 34:             TRISGbits.TRISG0 = 0;
  4847   001EA2  9087               	bcf	135,0,c	;volatile
  4848                           
  4849                           ;buggy_lights.c: 35:             TRISEbits.TRISE7 = 0;
  4850   001EA4  9E85               	bcf	133,7,c	;volatile
  4851                           
  4852                           ;buggy_lights.c: 36:             TRISAbits.TRISA3 = 0;
  4853   001EA6  9681               	bcf	129,3,c	;volatile
  4854                           
  4855                           ;buggy_lights.c: 38:             LATGbits.LATG0 = 0;
  4856   001EA8  907F               	bcf	127,0,c	;volatile
  4857                           
  4858                           ;buggy_lights.c: 39:             LATEbits.LATE7 = 0;
  4859   001EAA  9E7D               	bcf	125,7,c	;volatile
  4860                           
  4861                           ;buggy_lights.c: 40:             LATAbits.LATA3 = 0;
  4862   001EAC  9679               	bcf	121,3,c	;volatile
  4863   001EAE  0012               	return		;funcret
  4864   001EB0                     __end_of_buggy_lights_init:
  4865                           	callstack 0
  4866                           
  4867 ;; *************** function _Timer0_init *****************
  4868 ;; Defined at:
  4869 ;;		line 7 in file "timers.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;		None
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;		None
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  1    wreg      void 
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4887 ;;Total ram usage:        0 bytes
  4888 ;; Hardware stack levels used: 1
  4889 ;; Hardware stack levels required when called: 3
  4890 ;; This function calls:
  4891 ;;		_reset_timer
  4892 ;; This function is called by:
  4893 ;;		_main
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text37
  4898   001F28                     __ptext37:
  4899                           	callstack 0
  4900   001F28                     _Timer0_init:
  4901                           	callstack 27
  4902   001F28                     
  4903                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4904   001F28  50D6               	movf	214,w,c	;volatile
  4905   001F2A  0B1F               	andlw	-225
  4906   001F2C  0940               	iorlw	64
  4907   001F2E  6ED6               	movwf	214,c	;volatile
  4908   001F30                     
  4909                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4910   001F30  88D6               	bsf	214,4,c	;volatile
  4911   001F32                     
  4912                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  4913   001F32  88D5               	bsf	213,4,c	;volatile
  4914                           
  4915                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  4916   001F34  50D6               	movf	214,w,c	;volatile
  4917   001F36  0BF0               	andlw	-16
  4918   001F38  090E               	iorlw	14
  4919   001F3A  6ED6               	movwf	214,c	;volatile
  4920   001F3C                     
  4921                           ;timers.c: 18:     reset_timer();
  4922   001F3C  ECE3  F00F         	call	_reset_timer	;wreg free
  4923   001F40                     
  4924                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  4925   001F40  8ED5               	bsf	213,7,c	;volatile
  4926   001F42                     
  4927                           ;timers.c: 21:     PIE0bits.TMR0IE = 1;
  4928   001F42  010E               	movlb	14	; () banked
  4929   001F44  8B29               	bsf	41,5,b	;volatile
  4930   001F46                     
  4931                           ; BSR set to: 14
  4932                           ;timers.c: 22:     INTCONbits.PEIE = 1;
  4933   001F46  8CF2               	bsf	242,6,c	;volatile
  4934   001F48                     
  4935                           ; BSR set to: 14
  4936                           ;timers.c: 23:     INTCONbits.GIE = 1;
  4937   001F48  8EF2               	bsf	242,7,c	;volatile
  4938   001F4A                     
  4939                           ; BSR set to: 14
  4940   001F4A  0012               	return		;funcret
  4941   001F4C                     __end_of_Timer0_init:
  4942                           	callstack 0
  4943                           
  4944 ;; *************** function _reset_timer *****************
  4945 ;; Defined at:
  4946 ;;		line 44 in file "timers.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		wreg, status,2, cstack
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4964 ;;Total ram usage:        0 bytes
  4965 ;; Hardware stack levels used: 1
  4966 ;; Hardware stack levels required when called: 2
  4967 ;; This function calls:
  4968 ;;		_write_timer
  4969 ;; This function is called by:
  4970 ;;		_Timer0_init
  4971 ;;		_forward_navigation
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text38
  4976   001FC6                     __ptext38:
  4977                           	callstack 0
  4978   001FC6                     _reset_timer:
  4979                           	callstack 27
  4980   001FC6                     
  4981                           ;timers.c: 46:     write_timer(0, 0);
  4982   001FC6  0E00               	movlw	0
  4983   001FC8  6E01               	movwf	write_timer@tL^0,c
  4984   001FCA  0E00               	movlw	0
  4985   001FCC  ECE9  F00F         	call	_write_timer
  4986   001FD0  0012               	return		;funcret
  4987   001FD2                     __end_of_reset_timer:
  4988                           	callstack 0
  4989                           
  4990 ;; *************** function _write_timer *****************
  4991 ;; Defined at:
  4992 ;;		line 35 in file "timers.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;  tH              1    wreg     unsigned char 
  4995 ;;  tL              1    0[COMRAM] unsigned char 
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  tH              1    1[COMRAM] unsigned char 
  4998 ;; Return value:  Size  Location     Type
  4999 ;;                  1    wreg      void 
  5000 ;; Registers used:
  5001 ;;		wreg
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5007 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5008 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5010 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5011 ;;Total ram usage:        2 bytes
  5012 ;; Hardware stack levels used: 1
  5013 ;; Hardware stack levels required when called: 1
  5014 ;; This function calls:
  5015 ;;		Nothing
  5016 ;; This function is called by:
  5017 ;;		_reset_timer
  5018 ;;		_return_to_sender
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text39
  5023   001FD2                     __ptext39:
  5024                           	callstack 0
  5025   001FD2                     _write_timer:
  5026                           	callstack 27
  5027                           
  5028                           ;incstack = 0
  5029                           ;write_timer@tH stored from wreg
  5030   001FD2  6E02               	movwf	write_timer@tH^0,c
  5031   001FD4                     
  5032                           ;timers.c: 35: void write_timer(unsigned char tH, unsigned char tL);timers.c: 36: {;time
      +                          rs.c: 40:     TMR0H = tH;
  5033   001FD4  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  5034   001FD8                     
  5035                           ;timers.c: 41:     TMR0L = tL;
  5036   001FD8  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  5037   001FDC  0012               	return		;funcret
  5038   001FDE                     __end_of_write_timer:
  5039                           	callstack 0
  5040                           
  5041 ;; *************** function _ISR *****************
  5042 ;; Defined at:
  5043 ;;		line 116 in file "timers.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;		None
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;		None
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  1    wreg      void 
  5050 ;; Registers used:
  5051 ;;		wreg, status,2
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5061 ;;Total ram usage:        0 bytes
  5062 ;; Hardware stack levels used: 1
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		Interrupt level 2
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           	psect	intcode
  5071   000008                     __pintcode:
  5072                           	callstack 0
  5073   000008                     _ISR:
  5074                           	callstack 24
  5075                           
  5076                           ;incstack = 0
  5077   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5078   00000A                     
  5079                           ;timers.c: 119:     if (PIR0bits.TMR0IF) {
  5080   00000A  010E               	movlb	14	; () banked
  5081   00000C  AB33               	btfss	51,5,b	;volatile
  5082   00000E  EF0B  F000         	goto	i2u206_41
  5083   000012  EF0D  F000         	goto	i2u206_40
  5084   000016                     i2u206_41:
  5085   000016  EF1A  F000         	goto	i2l658
  5086   00001A                     i2u206_40:
  5087   00001A                     
  5088                           ; BSR set to: 14
  5089                           ;timers.c: 120:         if (returning) {
  5090   00001A  505E               	movf	_returning^0,w,c
  5091   00001C  B4D8               	btfsc	status,2,c
  5092   00001E  EF13  F000         	goto	i2u207_41
  5093   000022  EF15  F000         	goto	i2u207_40
  5094   000026                     i2u207_41:
  5095   000026  EF18  F000         	goto	i2l657
  5096   00002A                     i2u207_40:
  5097   00002A                     
  5098                           ; BSR set to: 14
  5099                           ;timers.c: 121:             return_flag = 1;
  5100   00002A  0E01               	movlw	1
  5101   00002C  0100               	movlb	0	; () banked
  5102   00002E  6F88               	movwf	_return_flag& (0+255),b
  5103   000030                     i2l657:
  5104                           
  5105                           ;timers.c: 126:         PIR0bits.TMR0IF = 0;
  5106   000030  010E               	movlb	14	; () banked
  5107   000032  9B33               	bcf	51,5,b	;volatile
  5108   000034                     i2l658:
  5109                           
  5110                           ; BSR set to: 14
  5111   000034  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5112   000036  0011               	retfie		f
  5113   000038                     __end_of_ISR:
  5114                           	callstack 0
  5115                           
  5116                           	psect	rparam
  5117   000000                     
  5118                           	psect	temp
  5119   00005F                     btemp:
  5120                           	callstack 0
  5121   00005F                     	ds	1
  5122   000000                     int$flags	set	btemp
  5123   000000                     wtemp8	set	btemp+1
  5124   000000                     ttemp5	set	btemp+1
  5125   000000                     ttemp6	set	btemp+4
  5126   000000                     ttemp7	set	btemp+8
  5127                           
  5128                           	psect	idloc
  5129                           
  5130                           ;Config register IDLOC0 @ 0x200000
  5131                           ;	unspecified, using default values
  5132   200000                     	org	2097152
  5133   200000  FFFF               	dw	65535
  5134                           
  5135                           ;Config register IDLOC1 @ 0x200002
  5136                           ;	unspecified, using default values
  5137   200002                     	org	2097154
  5138   200002  FFFF               	dw	65535
  5139                           
  5140                           ;Config register IDLOC2 @ 0x200004
  5141                           ;	unspecified, using default values
  5142   200004                     	org	2097156
  5143   200004  FFFF               	dw	65535
  5144                           
  5145                           ;Config register IDLOC3 @ 0x200006
  5146                           ;	unspecified, using default values
  5147   200006                     	org	2097158
  5148   200006  FFFF               	dw	65535
  5149                           
  5150                           ;Config register IDLOC4 @ 0x200008
  5151                           ;	unspecified, using default values
  5152   200008                     	org	2097160
  5153   200008  FFFF               	dw	65535
  5154                           
  5155                           ;Config register IDLOC5 @ 0x20000A
  5156                           ;	unspecified, using default values
  5157   20000A                     	org	2097162
  5158   20000A  FFFF               	dw	65535
  5159                           
  5160                           ;Config register IDLOC6 @ 0x20000C
  5161                           ;	unspecified, using default values
  5162   20000C                     	org	2097164
  5163   20000C  FFFF               	dw	65535
  5164                           
  5165                           ;Config register IDLOC7 @ 0x20000E
  5166                           ;	unspecified, using default values
  5167   20000E                     	org	2097166
  5168   20000E  FFFF               	dw	65535
  5169                           
  5170                           	psect	config
  5171                           
  5172                           ;Config register CONFIG1L @ 0x300000
  5173                           ;	External Oscillator mode Selection bits
  5174                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5175                           ;	Power-up default value for COSC bits
  5176                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5177   300000                     	org	3145728
  5178   300000  AA                 	db	170
  5179                           
  5180                           ;Config register CONFIG1H @ 0x300001
  5181                           ;	unspecified, using default values
  5182                           ;	Clock Out Enable bit
  5183                           ;	CLKOUTEN = 0x1, unprogrammed default
  5184                           ;	Clock Switch Enable bit
  5185                           ;	CSWEN = 0x1, unprogrammed default
  5186                           ;	Fail-Safe Clock Monitor Enable bit
  5187                           ;	FCMEN = 0x1, unprogrammed default
  5188   300001                     	org	3145729
  5189   300001  FF                 	db	255
  5190                           
  5191                           ;Config register CONFIG2L @ 0x300002
  5192                           ;	unspecified, using default values
  5193                           ;	Master Clear Enable bit
  5194                           ;	MCLRE = 0x1, unprogrammed default
  5195                           ;	Power-up Timer Enable bit
  5196                           ;	PWRTE = 0x1, unprogrammed default
  5197                           ;	Low-power BOR enable bit
  5198                           ;	LPBOREN = 0x1, unprogrammed default
  5199                           ;	Brown-out Reset Enable bits
  5200                           ;	BOREN = 0x3, unprogrammed default
  5201   300002                     	org	3145730
  5202   300002  FF                 	db	255
  5203                           
  5204                           ;Config register CONFIG2H @ 0x300003
  5205                           ;	unspecified, using default values
  5206                           ;	Brown Out Reset Voltage selection bits
  5207                           ;	BORV = 0x3, unprogrammed default
  5208                           ;	ZCD Disable bit
  5209                           ;	ZCD = 0x1, unprogrammed default
  5210                           ;	PPSLOCK bit One-Way Set Enable bit
  5211                           ;	PPS1WAY = 0x1, unprogrammed default
  5212                           ;	Stack Full/Underflow Reset Enable bit
  5213                           ;	STVREN = 0x1, unprogrammed default
  5214                           ;	Debugger Enable bit
  5215                           ;	DEBUG = 0x1, unprogrammed default
  5216                           ;	Extended Instruction Set Enable bit
  5217                           ;	XINST = 0x1, unprogrammed default
  5218   300003                     	org	3145731
  5219   300003  FF                 	db	255
  5220                           
  5221                           ;Config register CONFIG3L @ 0x300004
  5222                           ;	WDT Period Select bits
  5223                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5224                           ;	WDT operating mode
  5225                           ;	WDTE = OFF, WDT Disabled
  5226   300004                     	org	3145732
  5227   300004  9F                 	db	159
  5228                           
  5229                           ;Config register CONFIG3H @ 0x300005
  5230                           ;	unspecified, using default values
  5231                           ;	WDT Window Select bits
  5232                           ;	WDTCWS = 0x7, unprogrammed default
  5233                           ;	WDT input clock selector
  5234                           ;	WDTCCS = 0x7, unprogrammed default
  5235   300005                     	org	3145733
  5236   300005  FF                 	db	255
  5237                           
  5238                           ;Config register CONFIG4L @ 0x300006
  5239                           ;	unspecified, using default values
  5240                           ;	Write Protection Block 0
  5241                           ;	WRT0 = 0x1, unprogrammed default
  5242                           ;	Write Protection Block 1
  5243                           ;	WRT1 = 0x1, unprogrammed default
  5244                           ;	Write Protection Block 2
  5245                           ;	WRT2 = 0x1, unprogrammed default
  5246                           ;	Write Protection Block 3
  5247                           ;	WRT3 = 0x1, unprogrammed default
  5248                           ;	Write Protection Block 3
  5249                           ;	WRT4 = 0x1, unprogrammed default
  5250                           ;	Write Protection Block 3
  5251                           ;	WRT5 = 0x1, unprogrammed default
  5252                           ;	Write Protection Block 3
  5253                           ;	WRT6 = 0x1, unprogrammed default
  5254                           ;	Write Protection Block 3
  5255                           ;	WRT7 = 0x1, unprogrammed default
  5256   300006                     	org	3145734
  5257   300006  FF                 	db	255
  5258                           
  5259                           ;Config register CONFIG4H @ 0x300007
  5260                           ;	unspecified, using default values
  5261                           ;	Configuration Register Write Protection bit
  5262                           ;	WRTC = 0x1, unprogrammed default
  5263                           ;	Boot Block Write Protection bit
  5264                           ;	WRTB = 0x1, unprogrammed default
  5265                           ;	Data EEPROM Write Protection bit
  5266                           ;	WRTD = 0x1, unprogrammed default
  5267                           ;	Scanner Enable bit
  5268                           ;	SCANE = 0x1, unprogrammed default
  5269                           ;	Low Voltage Programming Enable bit
  5270                           ;	LVP = 0x1, unprogrammed default
  5271   300007                     	org	3145735
  5272   300007  FF                 	db	255
  5273                           
  5274                           ;Config register CONFIG5L @ 0x300008
  5275                           ;	unspecified, using default values
  5276                           ;	UserNVM Program Memory Code Protection bit
  5277                           ;	CP = 0x1, unprogrammed default
  5278                           ;	DataNVM Memory Code Protection bit
  5279                           ;	CPD = 0x1, unprogrammed default
  5280   300008                     	org	3145736
  5281   300008  FF                 	db	255
  5282                           
  5283                           ;Config register CONFIG5H @ 0x300009
  5284                           ;	unspecified, using default values
  5285   300009                     	org	3145737
  5286   300009  FF                 	db	255
  5287                           
  5288                           ;Config register CONFIG6L @ 0x30000A
  5289                           ;	unspecified, using default values
  5290                           ;	Table Read Protection Block 0
  5291                           ;	EBTR0 = 0x1, unprogrammed default
  5292                           ;	Table Read Protection Block 1
  5293                           ;	EBTR1 = 0x1, unprogrammed default
  5294                           ;	Table Read Protection Block 2
  5295                           ;	EBTR2 = 0x1, unprogrammed default
  5296                           ;	Table Read Protection Block 3
  5297                           ;	EBTR3 = 0x1, unprogrammed default
  5298                           ;	Table Read Protection Block 4
  5299                           ;	EBTR4 = 0x1, unprogrammed default
  5300                           ;	Table Read Protection Block 5
  5301                           ;	EBTR5 = 0x1, unprogrammed default
  5302                           ;	Table Read Protection Block 6
  5303                           ;	EBTR6 = 0x1, unprogrammed default
  5304                           ;	Table Read Protection Block 7
  5305                           ;	EBTR7 = 0x1, unprogrammed default
  5306   30000A                     	org	3145738
  5307   30000A  FF                 	db	255
  5308                           
  5309                           ;Config register CONFIG6H @ 0x30000B
  5310                           ;	unspecified, using default values
  5311                           ;	Boot Block Table Read Protection bit
  5312                           ;	EBTRB = 0x1, unprogrammed default
  5313   30000B                     	org	3145739
  5314   30000B  FF                 	db	255
  5315                           tosu	equ	0xFFF
  5316                           tosh	equ	0xFFE
  5317                           tosl	equ	0xFFD
  5318                           stkptr	equ	0xFFC
  5319                           pclatu	equ	0xFFB
  5320                           pclath	equ	0xFFA
  5321                           pcl	equ	0xFF9
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           indf0	equ	0xFEF
  5329                           postinc0	equ	0xFEE
  5330                           postdec0	equ	0xFED
  5331                           preinc0	equ	0xFEC
  5332                           plusw0	equ	0xFEB
  5333                           fsr0h	equ	0xFEA
  5334                           fsr0l	equ	0xFE9
  5335                           wreg	equ	0xFE8
  5336                           indf1	equ	0xFE7
  5337                           postinc1	equ	0xFE6
  5338                           postdec1	equ	0xFE5
  5339                           preinc1	equ	0xFE4
  5340                           plusw1	equ	0xFE3
  5341                           fsr1h	equ	0xFE2
  5342                           fsr1l	equ	0xFE1
  5343                           bsr	equ	0xFE0
  5344                           indf2	equ	0xFDF
  5345                           postinc2	equ	0xFDE
  5346                           postdec2	equ	0xFDD
  5347                           preinc2	equ	0xFDC
  5348                           plusw2	equ	0xFDB
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        26
    BSS         102
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     91      94
    BANK0           160     32      97
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getHSVval@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    getHSVval@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1120DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1120DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2695$buffer	PTR unsigned char  size(2) Largest target is 0

    S2695$source	PTR const unsigned char  size(2) Largest target is 0

    sendHSVvalSerial4@col_val	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    sendRGBCvalSerial4@col_val	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 
		 -> STR_4(CODE[3]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sendRGBCvalSerial4
    _sendRGBCvalSerial4->_sprintf
    _sendHSVvalSerial4->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___lwmod
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _getHSVval->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   19141
                                             89 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                          _getHSVval
                         _getRGBCval
                    _initDCmotorsPWM
                         _initUSART4
                  _sendHSVvalSerial4
                 _sendRGBCvalSerial4
               _toggle_tricolour_LED
 ---------------------------------------------------------------------------------
 (1) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sendRGBCvalSerial4                                  27    26      1    6387
                                             62 COMRAM    27    26      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sendHSVvalSerial4                                   22    21      1    6365
                                             62 COMRAM    22    21      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    15     11    5726
                                             36 COMRAM    26    15     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    4901
                                             32 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           14    11      3    4549
                                             18 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     934
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     447
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _getHSVval                                           22    20      2    4532
                                             18 COMRAM    22    20      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _max
                                _min
 ---------------------------------------------------------------------------------
 (2) _min                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _max                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     409
                                             13 COMRAM     5     1      4
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4    1064
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _getHSVval
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul
     _max
     _min
   _getRGBCval
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendHSVvalSerial4
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           ___awdiv
           ___awmod
           ___lwdiv
           ___lwmod
           _abs
             ___awmod (ARG)
           _fputc
             _putch
   _sendRGBCvalSerial4
     _sendStringSerial4
     _sprintf
   _toggle_tricolour_LED

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      61       5       60.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5B      5E       1      100.0%
BITBIGSFRlllhhh     52      0       0      41        0.0%
BITBIGSFRlllhhh     37      0       0      43        0.0%
BITBIGSFRlllllh     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      59        0.0%
BITBIGSFRlllhhh     20      0       0      46        0.0%
BITBIGSFRlllhhh     1E      0       0      48        0.0%
BITBIGSFRhhlll      1D      0       0      38        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      49        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      47        0.0%
BITBIGSFRlllllh      B      0       0      57        0.0%
BITBIGSFRlllllh      9      0       0      56        0.0%
BITBIGSFRlllhhh      8      0       0      44        0.0%
BITBIGSFRllllll      6      0       0      58        0.0%
BITBIGSFRlllllh      6      0       0      53        0.0%
BITBIGSFRllllhl      5      0       0      52        0.0%
BITBIGSFRlllllh      3      0       0      55        0.0%
BITBIGSFRllllhh      3      0       0      51        0.0%
BITBIGSFRlllhhh      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      50        0.0%
BITBIGSFRllh         1      0       0      40        0.0%
BITBIGSFRlhh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FB      60        0.0%
DATA                 0      0      FB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 07 18:09:42 2024

                 _turn180Delay 00B1                 _color_read_Red 1B98                _color_read_Blue 1C88  
              _trail_timer_low 0114                             l42 1638                             l27 1EAE  
                           l71 1BE6                             l80 1C86                             l65 1E80  
                           l74 1CD6                             l83 1B96                             l68 1F6A  
                           l93 1E3C                             l77 1C36                             l94 1E44  
                           l95 1E4C                             l98 1E08                             l99 1E10  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003               _trail_timer_high 0128  
             _color_read_Clear 1C38               _color_read_Green 1BE8                            l100 1E18  
                          l110 1148                            l430 1FB8                            l183 18F6  
                          l281 1EDA                            l290 1FE6                            l418 1F88  
                          l450 1D22                            l427 1FA4                            l284 1F00  
                          l436 1A30                            l293 1FF0                            l622 1F4A  
                          l278 1ED8                            l631 1FD0                            l287 1FFA  
                          l447 1A8E                            l296 1FC4                            l299 1DB0  
                          l628 1FDC                            l932 1866                            l919 16FC  
                          l688 1F26                            _ISR 0008         ??_toggle_tricolour_LED 0001  
                          _abs 1DB2                            _max 1E1A                            _min 1DE6  
                 ___awmod@sign 0006                            wreg 0FE8                    _squareDelay 00AD  
                         ?_ISR 0001                           ?_abs 0007                           l3001 1F1E  
                         l3011 1E52                           l3005 1E82                           l3013 1E5C  
                         l3015 1E6C                           l3031 0EBE                           l1431 1DCC  
                         l1407 12EC                           l3007 1572                           l1408 1454  
                         l3017 1E76                           l3009 1E4E                           l3041 0F72  
                         l3033 0ECA                           l3121 1F82                           l1186 196A  
                         l1434 1DE4                           l1426 1B38                           l3131 1F32  
                         l1179 1962                           l3051 1046                           l3043 0F8E  
                         l3035 0EDC                           l3019 1B42                           l3123 1F84  
                         l3115 1F6C                           l1427 1B40                           l1196 19CE  
                         l3141 1F48                           l3133 1F3C                           l2501 18F8  
                         l1189 19C6                           l3061 10E6                           l3053 109E  
                         l3045 0FB0                           l3037 0EE8                           l3029 0E1A  
                         l3125 1F86                           l3117 1F76                           l2421 163A  
                         l3221 14A4                           l1446 17B6                           l1366 1D6E  
                         l3135 1F40                           l3127 1F28                           l2511 1930  
                         l2503 1900                           l3063 1116                           l3047 1008  
                         l3039 0F06                           l3055 10BA                           l3071 1878  
                         l3119 1F78                           l2431 1666                           l2423 163E  
                         l3143 1A32                           l3231 14D8                           l3223 14AC  
                         l3137 1F42                           l3129 1F30                           l2521 195C  
                         l2513 1936                           l2505 1912                           l3065 1124  
                         l3057 10CC                           l3049 1024                           l3081 18D2  
                         l3073 189E                           l2441 1694                           l2433 166E  
                         l2425 164C                           l1457 1FFE                           l3145 1A84  
                         l3241 14F6                           l3233 14E8                           l3225 14C0  
                         l3217 1456                           l3139 1F46                           l2515 194C  
                         l2507 191A                           l2531 199C                           l2523 196C  
                         l3067 1136                           l3059 10D4                           l3091 18F4  
                         l3083 18DC                           l3075 18A2                           l2451 16CE  
                         l2443 169C                           l2435 1672                           l2427 1654  
                         l3147 1CD8                           l3251 1500                           l3243 14F8  
                         l3235 14EC                           l3227 14C8                           l3219 149C  
                         l2517 1954                           l2509 1922                           l2533 19B2  
                         l2525 197E                           l3085 18DE                           l3077 18C6  
                         l3069 1868                           l2461 16F4                           l2453 16D0  
                         l2445 16AA                           l2437 167A                           l2429 1658  
                         l2541 170E                           l2701 1342                           l3149 1D18  
                         l3261 1542                           l3253 1504                           l3245 14FA  
                         l3237 14F0                           l3229 14D0                           l2519 1956  
                         l2535 19BA                           l2527 1986                           l3087 18E8  
                         l3079 18D0                           l2455 16D6                           l2447 16B0  
                         l2439 168C                           l2471 17D2                           l2543 171E  
                         l2711 13AC                           l2703 1366                           l3263 154A  
                         l3255 152A                           l3247 14FC                           l3239 14F4  
                         l2537 19C0                           l2529 198E                           l3089 18EA  
                         l2449 16C6                           l2457 16DC                           l2481 1806  
                         l2473 17D6                           l2465 17B8                           l2553 1DB2  
                         l2545 1728                           l2713 13C6                           l2705 1382  
                         l2721 140E                           l3265 1552                           l3257 152E  
                         l3249 14FE                           l2643 1EDA                           l2459 16EC  
                         l2491 1840                           l2483 180E                           l2475 17E4  
                         l2467 17BC                           l2555 1DC0                           l2547 1744  
                         l2539 16FE                           l2731 144C                           l2723 1416  
                         l2715 13C8                           l2707 1386                           l2651 1178  
                         l3259 1536                           l2645 1EEA                           l2741 1FF2  
                         l2813 1FA4                           l2485 181C                           l2493 1846  
                         l2477 17EC                           l2469 17CA                           l2549 1776  
                         l2709 1398                           l2661 11BC                           l2653 1180  
                         l2821 1AEC                           l2831 1EBA                           l2743 1FF6  
                         l2751 1FEC                           l2815 1FB4                           l2495 1856  
                         l2487 1832                           l2479 17FE                           l2719 13DE  
                         l2671 1246                           l2663 11DC                           l2655 118E  
                         l2727 1422                           l2647 114A                           l2823 1AF0  
                         l2817 1FD4                           l2833 1EC0                           l2745 1FBC  
                         l2841 1F4E                           l2761 1D7E                           l2753 1FDE  
                         l2497 185E                           l2489 183A                           l2729 1444  
                         l2681 1298                           l2673 1262                           l2665 11F4  
                         l2657 1192                           l2649 1152                           l2825 1AFE  
                         l2819 1FD8                           l2835 1EC2                           l2747 1FC0  
                         l2763 1D86                           l2755 1FE2                           l2851 1CCE  
                         l2843 1B98                           l2683 12A8                           l2691 12DA  
                         l2675 1266                           l2667 11FE                           l2659 119C  
                         l2827 1B18                           l2837 1EC4                           l2829 1EB0  
                         l2749 1FE8                           l2765 1DAC                           l2757 1D72  
                         l2861 1C38                           l2845 1BDE                           l2685 12B6  
                         l2677 1278                           l2669 1216                           l2693 12F8  
                         l2839 1EC6                           l2871 1DE6                           l2767 1DAE  
                         l2759 1D76                           l2863 1C7E                           l2855 1BE8  
                         l2695 1318                           l2687 12BE                           l2679 1288  
                         l2873 1DFC                           l2849 1C88                           l2857 1C2E  
                         l2881 19FE                           l3673 1400                           l2697 1330  
                         l2689 12D8                           l2867 1E1A                           l2875 19D0  
                         l2699 133E                           l2891 1D58                           l2883 1D24  
                         l2869 1E30                           l2877 19D4                           l2893 1D66  
                         l2885 1D30                           ?_max 0001                           l2879 19FA  
                         l2887 1D38                           l2889 1D40                           ?_min 0001  
                         l2997 1FC6                           l2999 1F02                           STR_1 0E0F  
                         STR_2 0E14                           STR_5 0E01                           STR_6 0E04  
                         u1110 164C                           u1111 1648                           u1120 1666  
                         u1200 181C                           u1121 1662                           u1201 1818  
                         u1130 168C                           u1210 1832                           u2010 1518  
                         u1131 1688                           u1211 182E                           u2011 1510  
                         u1140 16AA                           u1220 1856                           u1300 171E  
                         u1141 16A6                           u1221 1852                           u1301 171A  
                         u1230 1912                           u1150 16C6                           u1310 1744  
                         u1231 190E                           u1151 16C2                           u1311 1740  
                         u1240 1930                           u1160 16EC                           u1320 1776  
                         u1241 192C                           u1161 16E8                           u1321 1772  
                         u1250 194C                           u1170 17CA                           u1330 1DC0  
                         u1251 1948                           u1171 17C6                           u1331 1DBC  
                         u1500 1EEA                           u1260 197E                           u1180 17E4  
                         u2028 151A                           u1501 1EE6                           u1261 197A  
                         u1181 17E0                           u1510 1F00                           u1270 199C  
                         u1190 17FE                           u1511 1EFC                           u1271 1998  
                         u1191 17FA                           u1280 19B2                           u1600 12A8  
                         u1520 1178                   _BAUD4CONbits 0EE9                           u1281 19AE  
                         u1601 12A4                           u1521 1174                           u1290 170E  
                         u1610 12EC                           u1530 11BC                           u1291 170A  
                         u1611 12E8                           u1531 11B8                           u1700 1E30  
                         u1620 1318                           u1540 11DC                           u1701 1E2C  
                         u1621 1314                           u1541 11D8                           u1710 1DFC  
                         u1630 1398                           u1550 1212                           u1711 1DF8  
                         u1631 1394                           u1551 120C                           u1720 19F6  
                         u1640 13A8                           u1560 1214                           u1641 13A4  
                         u1730 1A20                           u1650 13DA                           u1570 1278  
                         u1810 15E6                           _T2PR 0FBC                           u1651 13D6  
                         u1571 1274                           u1811 15DE                           u1900 0EDC  
                         u1660 1D9A                           u1740 1A30                           u1580 1288  
                         u1901 0ED8                           u1661 1D92                           u1741 1A2C  
                         u1581 1284                           u1910 0F06                           u1590 1298  
                         u1830 1604                           u1750 1584                           u1911 0F02  
                         u1727 19EC                           u1591 1294                           u1831 15FC  
                         u1751 157C                           u1920 0FB0                           u1680 1FB4  
                         u1808 15C6                           u1921 0FAC                           u1681 1FB0  
                         u1737 1A16                           u1930 1046                           u1690 1B38  
                         u1850 1626                           u1770 15A4                           u1931 1042  
                         u1691 1B34                           u1851 161E                           u1771 159C  
                         u1940 10CC                           u1828 15E8                           u1941 10C8  
                         u1950 10E6                           u1678 1D9C                           u1790 15C4  
                         u1951 10E2                           u1791 15BC                           u2487 155C  
                         u1848 1606                           u1768 1586                           u2497 1E62  
                         u1868 1628                           u1788 15A6                           abs@a 0007  
                         _dbuf 0060                           _main 1456                           _prec 0084  
                         _nout 0080                           fsr0h 0FEA                           fsr1h 0FE2  
                         indf0 0FEF                           fsr2h 0FDA                           fsr0l 0FE9  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         max@a 0001                           max@b 0003                           btemp 005F  
                         min@a 0001                           min@b 0003             _sendRGBCvalSerial4 1A32  
                         prodh 0FF4                           prodl 0FF3                           start 0038  
       __end_of_color_read_Red 1BE8                   ___param_bank 0000                          ??_ISR 0001  
          ?_sendRGBCvalSerial4 003F                          ??_abs 0009                  write_timer@tH 0002  
                write_timer@tL 0001                          ??_max 0005                          ??_min 0005  
                        ?_main 0001             _timer_high_pointer 005C                __end_of___awdiv 16FE  
              __end_of___awmod 1868                ___awdiv@divisor 0003                __end_of___lwdiv 196C  
              __end_of___lwmod 19D0                          i2l657 0030                          i2l658 0034  
              ___awdiv@counter 0005                   vfpfcnvrt@cnt 0019                   vfpfcnvrt@fmt 0014  
                        _TMR0H 0FD4                          _TMR0L 0FD3        __end_of_sendCharSerial4 1FBA  
   __end_of_I2C_2_Master_Start 1FFC                    _write_timer 1FD2     __end_of_I2C_2_Master_Write 1FC6  
                  _turningGear 00BD                          _flags 0086           ??_sendRGBCvalSerial4 0040  
                        _fputc 16FE                          _width 0082                          _putch 1FFE  
            _turnRight135Delay 00B3                          tablat 0FF5                _turnLeft90Delay 00B9  
                        ttemp5 0060                          ttemp6 0063                          ttemp7 0067  
                        status 0FD8                          wtemp8 0060                __end_of_sprintf 1D70  
          getHSVval@saturation 001F        __end_of_color_read_Blue 1CD8          _I2C_2_Master_RepStart 1FDE  
              ?_color_read_Red 0005                __initialization 1A90                   __end_of_main 1572  
                       ??_main 005A                  __activetblptr 0003                 _getHSVval$3127 001B  
               _getHSVval$3128 001D                 _getHSVval$3129 0023                         ?_fputc 0001  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0001                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       _RD5PPS 0E6F                         _RC7PPS 0E69                         _RD6PPS 0E70  
                       _RE4PPS 0E76                         i2l3311 001A                         i2l3313 002A  
                       i2l3309 000A                         _RG6PPS 0E88                  vfpfcnvrt@done 0018  
     __end_of_color_click_init 1E82                         _RX4PPS 0E15                         _TX4REG 0EE4  
             _turnLeft135Delay 00B5                  ??_Timer0_init 0003                   ?_reset_timer 0001  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 0024                         ___wmul 1F02  
                    ??___awdiv 0005                      ??___awmod 0005                      ??___lwdiv 000B  
                    ??___lwmod 0012                         clear_0 1ACE                         clear_1 1ADA  
             ___awdiv@quotient 0007                ___awmod@divisor 0003                         isa$std 0001  
              ___awmod@counter 0005                         fputc@c 0001                   __pdataCOMRAM 005C  
            _timer_low_pointer 00AB                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8               ?_sendCharSerial4 0001  
                       putch@c 0001               __end_of_vfprintf 1B42              ??_initDCmotorsPWM 0003  
                    ??_sprintf 0030              _buggy_lights_init 1E82                     __accesstop 0060  
      __end_of__initialization 1AE2       __end_of_color_read_Clear 1C88       __end_of_color_read_Green 1C38  
       ?_I2C_2_Master_RepStart 0001             ?_buggy_lights_init 0001                  ___rparam_used 0001  
             ?_color_read_Blue 0005                 __pcstackCOMRAM 0001                   __pidataBANK0 1F8A  
          ??_buggy_lights_init 0001                  __end_of_fputc 17B8                  __end_of_putch 2000  
          __end_of_Timer0_init 1F4C                        ??_fputc 0004      __end_of_buggy_lights_init 1EB0  
                      ??_putch 0001                     __pbssBANK0 0060                     __pbssBANK1 0100  
                   _getRGBCval 1B42              _color_writetoaddr 1F4C                   _T2CLKCONbits 0FBF  
           ?_color_writetoaddr 0003                        ?___wmul 0001            ??_color_writetoaddr 0004  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                   ?_write_timer 0001  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5              __end_of_getHSVval 114A  
       color_writetoaddr@value 0003               ??_color_read_Red 0007      __end_of_color_writetoaddr 1F6C  
           _I2C_2_Master_Start 1FF2                     _initUSART4 1F6C             _I2C_2_Master_Write 1FBA  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000A  
                  _Timer0_init 1F28        sendStringSerial4@string 0002                        ___awdiv 163A  
                      ___awmod 17B8            ?_I2C_2_Master_Start 0001                        ___lwdiv 18F8  
          ?_I2C_2_Master_Write 0001                        ___lwmod 196C                      ?_vfprintf 0021  
                 __psmallconst 0E00                        __pcinit 1A90                        __ramtop 0E00  
                      __ptext0 1456                        __ptext1 1572                        __ptext2 1A32  
                      __ptext3 1CD8                        __ptext4 1D24                        __ptext5 1AEC  
                      __ptext6 114A                        __ptext7 16FE                        __ptext8 1FFE  
                      __ptext9 1DB2                      _T2CONbits 0FBD               ___awmod@dividend 0001  
                    _T2HLTbits 0FBE                        _sprintf 1D24           ??_I2C_2_Master_Start 0002  
         ??_I2C_2_Master_Write 0002           end_of_initialization 1AE2              _sendHSVvalSerial4 1CD8  
                  ?_getRGBCval 000C                        fputc@fp 0003              ?_color_click_init 0001  
           ?_sendHSVvalSerial4 003F             ??_color_click_init 0005              __end_of_vfpfcnvrt 1456  
          ??_sendHSVvalSerial4 0040                        postdec1 0FE5                        postdec2 0FDD  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 001C                     ??_vfprintf 0024                _initDCmotorsPWM 1868  
                    _TRISAbits 0F81                      _TRISCbits 0F83                      _TRISDbits 0F84  
                    _TRISEbits 0F85                      _TRISFbits 0F86                      _TRISGbits 0F87  
                    _TRISHbits 0F88      __end_of_sendHSVvalSerial4 1D24       color_writetoaddr@address 0004  
      ??_I2C_2_Master_RepStart 0002                    _CCP1CONbits 0FAB              ?_color_read_Clear 0005  
                  _CCP2CONbits 0FA7              ?_color_read_Green 0005                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001  
                   main@motorL 008F                     main@motorR 0098             ??_color_read_Clear 0007  
           ??_color_read_Green 0007                     max@max_val 0005                    vfpfcnvrt@ap 0015  
                  vfpfcnvrt@cp 001B                    vfpfcnvrt@fp 0013                 __end_of___wmul 1F28  
                __pidataCOMRAM 1FFC      sendRGBCvalSerial4@col_val 003F       sendHSVvalSerial4@col_val 003F  
                   min@min_val 0005            color_read_Clear@tmp 000A            start_initialization 1A90  
                  __end_of_ISR 0038                    __end_of_abs 1DE6                    __end_of_max 1E4E  
                  __end_of_min 1E1A               _turnRight90Delay 00B7      sendRGBCvalSerial4@tempStr 0040  
     sendHSVvalSerial4@tempStr 0040            color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 18F8  
                  vfprintf@fmt 0022                       ??___wmul 0005                    __pdataBANK0 00A9  
                  __pbssCOMRAM 005E                  __pcstackBANK0 0089                 _wall_threshold 00BB  
 __end_of_toggle_tricolour_LED 163A                      _getHSVval 0E1A               ___lwdiv@dividend 0007  
                 ?_Timer0_init 0001                      __pintcode 0008                       ?___awdiv 0001  
                     ?___awmod 0001                       ?___lwdiv 0007                       ?___lwmod 000E  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004                    __smallconst 0E00  
            _I2C_2_Master_Idle 1EDA              _I2C_2_Master_Init 1EB0              _I2C_2_Master_Read 1D70  
            _I2C_2_Master_Stop 1FE8             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
                _headbuttDelay 00AF       initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 0025  
                    _rampDelay 00C0                   ??_getRGBCval 000D              _sendStringSerial4 19D0  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 0F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 0F7B                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E                       _LATGbits 0F7F                       _LATHbits 0F80  
                     _PIE0bits 0E29             ?_sendStringSerial4 0002                   getHSVval@hue 0021  
                   ?_getHSVval 0013                  ??_reset_timer 0003                       i2u206_40 001A  
                     i2u206_41 0016                       i2u207_40 002A                       i2u207_41 0026  
                     _PIR0bits 0E33                       _PIR4bits 0E37               ?_initDCmotorsPWM 0001  
            ??_sendCharSerial4 0001                       _SSP2CON2 0EDA            ??_sendStringSerial4 0004  
                     _SSP2STAT 0ED8                      _returning 005E                      _vfpfcnvrt 114A  
    __end_of_I2C_2_Master_Idle 1F02      __end_of_I2C_2_Master_Init 1EDA      __end_of_I2C_2_Master_Read 1DB2  
            ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 1FF2    I2C_2_Master_Write@data_byte 0002  
           __end_of_getRGBCval 1B98     __end_of_sendRGBCvalSerial4 1A90              ??_color_read_Blue 0007  
                   vfpfcnvrt@c 0020                      copy_data0 1AA4      __end_of_sendStringSerial4 1A32  
__end_of_I2C_2_Master_RepStart 1FE8             color_read_Blue@tmp 000A                   ??_initUSART4 0001  
                     __Hrparam 0000                     vfprintf@ap 0023                       __Lrparam 0000  
                   vfprintf@fp 0021                getHSVval@maxRGB 0027                getHSVval@minRGB 0019  
                   ?_vfpfcnvrt 0013            __end_of_reset_timer 1FD2                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                     sprintf@fmt 0027                     sprintf@ret 0030  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6           _toggle_tricolour_LED 1572  
              ___lwdiv@divisor 0009             __end_of_initUSART4 1F8A                ___lwdiv@counter 000D  
                     __ptext10 17B8                       __ptext11 163A                       __ptext20 1C88  
                     __ptext12 19D0                       __ptext21 1FDE                       __ptext13 1FA2  
                     __ptext30 1F4C                       __ptext22 1D70                       __ptext14 1F6C  
                     __ptext31 1FBA                       __ptext23 0E1A                       __ptext15 1868  
                     __ptext32 1FE8                       __ptext24 1DE6                       __ptext16 1B42  
                     __ptext33 1FF2                       __ptext25 1E1A                       __ptext17 1B98  
                     __ptext34 1EDA                       __ptext26 1F02                       __ptext18 1BE8  
                     __ptext35 1EB0                       __ptext27 196C                       __ptext19 1C38  
                     __ptext36 1E82                       __ptext28 18F8                       __ptext37 1F28  
                     __ptext29 1E4E                       __ptext38 1FC6                       __ptext39 1FD2  
                  getRGBCval@p 000C            main@measured_colour 00A1                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                    ??_getHSVval 0015                    getHSVval@p1 0013  
                  getHSVval@p2 0014                       isa$xinst 0000                     _RC4STAbits 0EE7  
                     int$flags 005F                       _vfprintf 1AEC                     _INTCONbits 0FF2  
        ?_toggle_tricolour_LED 0001                  ??_write_timer 0002                 getHSVval@range 0025  
                     intlevel2 0000                      sprintf@ap 0032                   _topGearRight 00BE  
            _manoeuvre_pointer 00A9               ___lwmod@dividend 000E                 main@HSV_colour 0089  
                  _reset_timer 1FC6                    ??_vfpfcnvrt 0016               _color_click_init 1E4E  
                  _topGearLeft 00BF                       sprintf@f 0033                       sprintf@s 0025  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                ___lwmod@divisor 0010  
              ___lwmod@counter 0012                _trail_manoeuvre 0100                    _return_flag 0088  
              _manoeuvre_count 0087                     _TX4STAbits 0EE8                _sendCharSerial4 1FA2  
          __end_of_write_timer 1FDE  
