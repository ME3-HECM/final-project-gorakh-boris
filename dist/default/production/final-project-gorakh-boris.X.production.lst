

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Mar 12 12:35:38 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    78                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    79   000000                     
    80                           ; Generated 18/08/2023 GMT
    81                           ; 
    82                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution. Publication is not required when
    96                           ;        this file is used in an embedded application.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F67K40 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114   000000                     
   115                           	psect	idataBANK0
   116   003754                     __pidataBANK0:
   117                           	callstack 0
   118                           
   119                           ;initializer for _manoeuvre_pointer
   120   003754  A6                 	db	low _trail_manoeuvre
   121   003755  01                 	db	high _trail_manoeuvre
   122                           
   123                           ;initializer for _timer_low_pointer
   124   003756  BA                 	db	low _trail_timer_low
   125   003757  01                 	db	high _trail_timer_low
   126                           
   127                           ;initializer for _timer_high_pointer
   128   003758  CE                 	db	low _trail_timer_high
   129   003759  01                 	db	high _trail_timer_high
   130                           
   131                           ;initializer for _squareDelay
   132   00375A  012C               	dw	300
   133                           
   134                           ;initializer for _headbuttDelay
   135   00375C  0046               	dw	70
   136                           
   137                           ;initializer for _turn180Delay
   138   00375E  01FE               	dw	510
   139                           
   140                           ;initializer for _turnRight135Delay
   141   003760  012C               	dw	300
   142                           
   143                           ;initializer for _turnLeft135Delay
   144   003762  012C               	dw	300
   145                           
   146                           ;initializer for _turnRight90Delay
   147   003764  00AF               	dw	175
   148                           
   149                           ;initializer for _turnLeft90Delay
   150   003766  00AF               	dw	175
   151                           
   152                           ;initializer for _wall_threshold_blue
   153   003768  001E               	dw	30
   154                           
   155                           ;initializer for _turningGear
   156   00376A  2A                 	db	42
   157                           
   158                           ;initializer for _topGearRight
   159   00376B  14                 	db	20
   160                           
   161                           ;initializer for _topGearLeft
   162   00376C  14                 	db	20
   163                           
   164                           ;initializer for _rampDelay
   165   00376D  08                 	db	8
   166                           
   167                           ;initializer for _sample_count
   168   00376E  14                 	db	20
   169   000000                     _TMR0H	set	4052
   170   000000                     _TX4REG	set	3812
   171   000000                     _RC4STAbits	set	3815
   172   000000                     _SP4BRGH	set	3814
   173   000000                     _LATEbits	set	3965
   174   000000                     _TRISEbits	set	3973
   175   000000                     _LATGbits	set	3967
   176   000000                     _TRISGbits	set	3975
   177   000000                     _LATFbits	set	3966
   178   000000                     _LATHbits	set	3968
   179   000000                     _TRISFbits	set	3974
   180   000000                     _TRISHbits	set	3976
   181   000000                     _SSP2CON2bits	set	3802
   182   000000                     _RX4PPS	set	3605
   183   000000                     _SSP2CLKPPS	set	3612
   184   000000                     _SSP2DATPPS	set	3613
   185   000000                     _RC7PPS	set	3689
   186   000000                     _RE2PPS	set	3700
   187   000000                     _LATAbits	set	3961
   188   000000                     _LATDbits	set	3964
   189   000000                     _TRISDbits	set	3972
   190   000000                     _T2PR	set	4028
   191   000000                     _T2CONbits	set	4029
   192   000000                     _CCPR2H	set	4006
   193   000000                     _CCPR1H	set	4010
   194   000000                     _TRISCbits	set	3971
   195   000000                     _TRISAbits	set	3969
   196   000000                     _LATCbits	set	3963
   197   000000                     _RE4PPS	set	3702
   198   000000                     _RG6PPS	set	3720
   199   000000                     _RD5PPS	set	3695
   200   000000                     _ANSELDbits	set	3751
   201   000000                     _SSP2ADD	set	3798
   202   000000                     _SSP2CON1bits	set	3801
   203   000000                     _CCPR4H	set	3873
   204   000000                     _CCPR3H	set	3877
   205   000000                     _TMR0L	set	4051
   206   000000                     _T0CON0bits	set	4053
   207   000000                     _T0CON1bits	set	4054
   208   000000                     _T2CLKCONbits	set	4031
   209   000000                     _T2HLTbits	set	4030
   210   000000                     _CCP1CONbits	set	4011
   211   000000                     _CCPTMRS0bits	set	4013
   212   000000                     _CCP2CONbits	set	4007
   213   000000                     _CCP3CONbits	set	3878
   214   000000                     _CCP4CONbits	set	3874
   215   000000                     _RC4REG	set	3811
   216   000000                     _SP4BRGL	set	3813
   217   000000                     _TX4STAbits	set	3816
   218   000000                     _BAUD4CONbits	set	3817
   219   000000                     _SSP2CON2	set	3802
   220   000000                     _SSP2STAT	set	3800
   221   000000                     _ANSELFbits	set	3764
   222   000000                     _SSP2BUF	set	3797
   223   000000                     _PIE0bits	set	3625
   224   000000                     _PIR4bits	set	3639
   225   000000                     _RC0PPS	set	3682
   226   000000                     _RD6PPS	set	3696
   227   000000                     _INTCONbits	set	4082
   228   000000                     _PIR0bits	set	3635
   229                           
   230                           	psect	smallconst
   231   000E00                     __psmallconst:
   232                           	callstack 0
   233   000E00  00                 	db	0
   234   000E01                     STR_5:
   235                           
   236                           ; BSR set to: 14
   237   000E01  25                 	db	37
   238   000E02  75                 	db	117	;'u'
   239   000E03  20                 	db	32
   240   000E04  25                 	db	37
   241   000E05  75                 	db	117	;'u'
   242   000E06  20                 	db	32
   243   000E07  25                 	db	37
   244   000E08  75                 	db	117	;'u'
   245   000E09  20                 	db	32
   246   000E0A  25                 	db	37
   247   000E0B  75                 	db	117	;'u'
   248   000E0C  20                 	db	32
   249   000E0D  0D                 	db	13
   250   000E0E  00                 	db	0
   251   000E0F                     STR_1:
   252                           
   253                           ; BSR set to: 14
   254   000E0F  25                 	db	37
   255   000E10  64                 	db	100	;'d'
   256   000E11  20                 	db	32
   257   000E12  0D                 	db	13
   258   000E13  00                 	db	0
   259   000E14                     STR_2:
   260                           
   261                           ; BSR set to: 14
   262   000E14  25                 	db	37
   263   000E15  64                 	db	100	;'d'
   264   000E16  20                 	db	32
   265   000E17  00                 	db	0
   266   000E18  00                 	db	0	; dummy byte at the end
   267   000000                     
   268                           ; #config settings
   269                           
   270                           	psect	cinit
   271   0034BA                     __pcinit:
   272                           	callstack 0
   273   0034BA                     start_initialization:
   274                           	callstack 0
   275   0034BA                     __initialization:
   276                           	callstack 0
   277                           
   278                           ; Initialize objects allocated to BANK0 (27 bytes)
   279                           ; load TBLPTR registers with __pidataBANK0
   280   0034BA  0E54               	movlw	low __pidataBANK0
   281   0034BC  6EF6               	movwf	tblptrl,c
   282   0034BE  0E37               	movlw	high __pidataBANK0
   283   0034C0  6EF7               	movwf	tblptrh,c
   284   0034C2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   285   0034C4  6EF8               	movwf	tblptru,c
   286   0034C6  EE00  F0AB         	lfsr	0,__pdataBANK0
   287   0034CA  EE10 F01B          	lfsr	1,27
   288   0034CE                     copy_data0:
   289   0034CE  0009               	tblrd		*+
   290   0034D0  CFF5 FFEE          	movff	tablat,postinc0
   291   0034D4  50E5               	movf	postdec1,w,c
   292   0034D6  50E1               	movf	fsr1l,w,c
   293   0034D8  E1FA               	bnz	copy_data0
   294                           
   295                           ; Clear objects allocated to BANK1 (62 bytes)
   296   0034DA  EE01  F0A4         	lfsr	0,__pbssBANK1
   297   0034DE  0E3E               	movlw	62
   298   0034E0                     clear_0:
   299   0034E0  6AEE               	clrf	postinc0,c
   300   0034E2  06E8               	decf	wreg,f,c
   301   0034E4  E1FD               	bnz	clear_0
   302                           
   303                           ; Clear objects allocated to BANK0 (40 bytes)
   304   0034E6  EE00  F060         	lfsr	0,__pbssBANK0
   305   0034EA  0E28               	movlw	40
   306   0034EC                     clear_1:
   307   0034EC  6AEE               	clrf	postinc0,c
   308   0034EE  06E8               	decf	wreg,f,c
   309   0034F0  E1FD               	bnz	clear_1
   310                           
   311                           ; Clear objects allocated to COMRAM (1 bytes)
   312   0034F2  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   313   0034F4                     end_of_initialization:
   314                           	callstack 0
   315   0034F4                     __end_of__initialization:
   316                           	callstack 0
   317   0034F4  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   318   0034F6  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   319   0034F8  0100               	movlb	0
   320   0034FA  EF18  F012         	goto	_main	;jump to C main() function
   321                           
   322                           	psect	bssCOMRAM
   323   00005E                     __pbssCOMRAM:
   324                           	callstack 0
   325   00005E                     _returning:
   326                           	callstack 0
   327   00005E                     	ds	1
   328                           
   329                           	psect	bssBANK0
   330   000060                     __pbssBANK0:
   331                           	callstack 0
   332   000060                     _dbuf:
   333                           	callstack 0
   334   000060                     	ds	32
   335   000080                     _nout:
   336                           	callstack 0
   337   000080                     	ds	2
   338   000082                     _width:
   339                           	callstack 0
   340   000082                     	ds	2
   341   000084                     _prec:
   342                           	callstack 0
   343   000084                     	ds	2
   344   000086                     _flags:
   345                           	callstack 0
   346   000086                     	ds	1
   347   000087                     _return_flag:
   348                           	callstack 0
   349   000087                     	ds	1
   350                           
   351                           	psect	dataBANK0
   352   0000AB                     __pdataBANK0:
   353                           	callstack 0
   354   0000AB                     _manoeuvre_pointer:
   355                           	callstack 0
   356   0000AB                     	ds	2
   357   0000AD                     _timer_low_pointer:
   358                           	callstack 0
   359   0000AD                     	ds	2
   360   0000AF                     _timer_high_pointer:
   361                           	callstack 0
   362   0000AF                     	ds	2
   363   0000B1                     _squareDelay:
   364                           	callstack 0
   365   0000B1                     	ds	2
   366   0000B3                     _headbuttDelay:
   367                           	callstack 0
   368   0000B3                     	ds	2
   369   0000B5                     _turn180Delay:
   370                           	callstack 0
   371   0000B5                     	ds	2
   372   0000B7                     _turnRight135Delay:
   373                           	callstack 0
   374   0000B7                     	ds	2
   375   0000B9                     _turnLeft135Delay:
   376                           	callstack 0
   377   0000B9                     	ds	2
   378   0000BB                     _turnRight90Delay:
   379                           	callstack 0
   380   0000BB                     	ds	2
   381   0000BD                     _turnLeft90Delay:
   382                           	callstack 0
   383   0000BD                     	ds	2
   384   0000BF                     _wall_threshold_blue:
   385                           	callstack 0
   386   0000BF                     	ds	2
   387   0000C1                     _turningGear:
   388                           	callstack 0
   389   0000C1                     	ds	1
   390   0000C2                     _topGearRight:
   391                           	callstack 0
   392   0000C2                     	ds	1
   393   0000C3                     _topGearLeft:
   394                           	callstack 0
   395   0000C3                     	ds	1
   396   0000C4                     _rampDelay:
   397                           	callstack 0
   398   0000C4                     	ds	1
   399   0000C5                     _sample_count:
   400                           	callstack 0
   401   0000C5                     	ds	1
   402                           
   403                           	psect	bssBANK1
   404   0001A4                     __pbssBANK1:
   405                           	callstack 0
   406   0001A4                     _manoeuvre_count:
   407                           	callstack 0
   408   0001A4                     	ds	1
   409   0001A5                     _lost_flag:
   410                           	callstack 0
   411   0001A5                     	ds	1
   412   0001A6                     _trail_manoeuvre:
   413                           	callstack 0
   414   0001A6                     	ds	20
   415   0001BA                     _trail_timer_low:
   416                           	callstack 0
   417   0001BA                     	ds	20
   418   0001CE                     _trail_timer_high:
   419                           	callstack 0
   420   0001CE                     	ds	20
   421                           
   422                           	psect	cstackBANK1
   423   000100                     __pcstackBANK1:
   424                           	callstack 0
   425   000100                     sendArrayCharSerial4@tempStr:
   426                           	callstack 0
   427                           
   428                           ; 161 bytes @ 0x0
   429   000100                     	ds	161
   430   0001A1                     sendArrayCharSerial4@index:
   431                           	callstack 0
   432                           
   433                           ; 1 bytes @ 0xA1
   434   0001A1                     	ds	1
   435   0001A2                     sendArrayCharSerial4@i:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0xA2
   439   0001A2                     	ds	2
   440                           
   441                           	psect	cstackBANK0
   442   000088                     __pcstackBANK0:
   443                           	callstack 0
   444   000088                     ??_main:
   445                           
   446                           ; 1 bytes @ 0x0
   447   000088                     	ds	2
   448   00008A                     main@k:
   449                           	callstack 0
   450                           
   451                           ; 1 bytes @ 0x2
   452   00008A                     	ds	1
   453   00008B                     main@motorL:
   454                           	callstack 0
   455                           
   456                           ; 9 bytes @ 0x3
   457   00008B                     	ds	9
   458   000094                     main@motorR:
   459                           	callstack 0
   460                           
   461                           ; 9 bytes @ 0xC
   462   000094                     	ds	9
   463   00009D                     main@HSV_colour:
   464                           	callstack 0
   465                           
   466                           ; 6 bytes @ 0x15
   467   00009D                     	ds	6
   468   0000A3                     main@RGBC_colour:
   469                           	callstack 0
   470                           
   471                           ; 8 bytes @ 0x1B
   472   0000A3                     	ds	8
   473                           
   474                           	psect	cstackCOMRAM
   475   000001                     __pcstackCOMRAM:
   476                           	callstack 0
   477   000001                     ??_toggle_tricolour_LED:
   478   000001                     ??_I2C_2_Master_Idle:
   479   000001                     ?_max_RGB:
   480                           	callstack 0
   481   000001                     ?_min_RGB:
   482                           	callstack 0
   483   000001                     ?___wmul:
   484                           	callstack 0
   485   000001                     ?___awdiv:
   486                           	callstack 0
   487   000001                     ?___awmod:
   488                           	callstack 0
   489   000001                     ?___lwmod:
   490                           	callstack 0
   491   000001                     ?___lmul:
   492                           	callstack 0
   493   000001                     ?___lldiv:
   494                           	callstack 0
   495   000001                     ?___xxtofl:
   496                           	callstack 0
   497   000001                     max_RGB@p:
   498                           	callstack 0
   499   000001                     min_RGB@p:
   500                           	callstack 0
   501   000001                     colour_to_key@p1:
   502                           	callstack 0
   503   000001                     sendCharSerial4@charToSend:
   504                           	callstack 0
   505   000001                     read_timer@tH:
   506                           	callstack 0
   507   000001                     write_timer@tL:
   508                           	callstack 0
   509   000001                     write_trail@tL:
   510                           	callstack 0
   511   000001                     initDCmotorsPWM@PWMperiod:
   512                           	callstack 0
   513   000001                     ___wmul@multiplier:
   514                           	callstack 0
   515   000001                     ___awdiv@dividend:
   516                           	callstack 0
   517   000001                     ___awmod@dividend:
   518                           	callstack 0
   519   000001                     ___lwmod@dividend:
   520                           	callstack 0
   521   000001                     fputc@c:
   522                           	callstack 0
   523   000001                     ___lmul@multiplier:
   524                           	callstack 0
   525   000001                     ___lldiv@dividend:
   526                           	callstack 0
   527   000001                     ___xxtofl@val:
   528                           	callstack 0
   529                           
   530                           ; 4 bytes @ 0x0
   531   000001                     	ds	1
   532   000002                     ??_I2C_2_Master_Read:
   533   000002                     colour_to_key@p2:
   534                           	callstack 0
   535   000002                     I2C_2_Master_Write@data_byte:
   536                           	callstack 0
   537   000002                     read_timer@tL:
   538                           	callstack 0
   539   000002                     write_timer@tH:
   540                           	callstack 0
   541   000002                     write_trail@man:
   542                           	callstack 0
   543   000002                     sendStringSerial4@string:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x1
   547   000002                     	ds	1
   548   000003                     color_writetoaddr@value:
   549                           	callstack 0
   550   000003                     I2C_2_Master_Read@ack:
   551                           	callstack 0
   552   000003                     write_trail@tH:
   553                           	callstack 0
   554   000003                     fputc@fp:
   555                           	callstack 0
   556   000003                     ___wmul@multiplicand:
   557                           	callstack 0
   558   000003                     ___awdiv@divisor:
   559                           	callstack 0
   560   000003                     ___awmod@divisor:
   561                           	callstack 0
   562   000003                     ___lwmod@divisor:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0x2
   566   000003                     	ds	1
   567   000004                     ??_fputc:
   568   000004                     color_writetoaddr@address:
   569                           	callstack 0
   570   000004                     I2C_2_Master_Read@tmp:
   571                           	callstack 0
   572                           
   573                           ; 1 bytes @ 0x3
   574   000004                     	ds	1
   575   000005                     ??_color_click_init:
   576   000005                     ??___xxtofl:
   577   000005                     ?_color_read_Red:
   578                           	callstack 0
   579   000005                     ?_color_read_Green:
   580                           	callstack 0
   581   000005                     ?_color_read_Blue:
   582                           	callstack 0
   583   000005                     ?_color_read_Clear:
   584                           	callstack 0
   585   000005                     colour_to_key@key:
   586                           	callstack 0
   587   000005                     ___awdiv@counter:
   588                           	callstack 0
   589   000005                     ___awmod@counter:
   590                           	callstack 0
   591   000005                     ___lwmod@counter:
   592                           	callstack 0
   593   000005                     max_RGB@max_val:
   594                           	callstack 0
   595   000005                     min_RGB@min_val:
   596                           	callstack 0
   597   000005                     ___wmul@product:
   598                           	callstack 0
   599   000005                     ___lmul@multiplicand:
   600                           	callstack 0
   601   000005                     ___lldiv@divisor:
   602                           	callstack 0
   603                           
   604                           ; 4 bytes @ 0x4
   605   000005                     	ds	1
   606   000006                     ___awdiv@sign:
   607                           	callstack 0
   608   000006                     ___awmod@sign:
   609                           	callstack 0
   610                           
   611                           ; 1 bytes @ 0x5
   612   000006                     	ds	1
   613   000007                     ??_color_read_Red:
   614   000007                     ??_color_read_Green:
   615   000007                     ??_color_read_Blue:
   616   000007                     ??_color_read_Clear:
   617   000007                     ?_abs:
   618                           	callstack 0
   619   000007                     ?___lwdiv:
   620                           	callstack 0
   621   000007                     ___awdiv@quotient:
   622                           	callstack 0
   623   000007                     ___lwdiv@dividend:
   624                           	callstack 0
   625   000007                     abs@a:
   626                           	callstack 0
   627                           
   628                           ; 2 bytes @ 0x6
   629   000007                     	ds	2
   630   000009                     ??_abs:
   631   000009                     ___xxtofl@sign:
   632                           	callstack 0
   633   000009                     ___lwdiv@divisor:
   634                           	callstack 0
   635   000009                     ___lmul@product:
   636                           	callstack 0
   637   000009                     ___lldiv@quotient:
   638                           	callstack 0
   639                           
   640                           ; 4 bytes @ 0x8
   641   000009                     	ds	1
   642   00000A                     ___xxtofl@exp:
   643                           	callstack 0
   644   00000A                     color_read_Red@tmp:
   645                           	callstack 0
   646   00000A                     color_read_Green@tmp:
   647                           	callstack 0
   648   00000A                     color_read_Blue@tmp:
   649                           	callstack 0
   650   00000A                     color_read_Clear@tmp:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x9
   654   00000A                     	ds	1
   655   00000B                     ___lwdiv@quotient:
   656                           	callstack 0
   657   00000B                     ___xxtofl@arg:
   658                           	callstack 0
   659                           
   660                           ; 4 bytes @ 0xA
   661   00000B                     	ds	1
   662   00000C                     getRGBCval@p:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0xB
   666   00000C                     	ds	1
   667   00000D                     wait_for_wall@p:
   668                           	callstack 0
   669   00000D                     ___lldiv@counter:
   670                           	callstack 0
   671   00000D                     ___lwdiv@counter:
   672                           	callstack 0
   673                           
   674                           ; 1 bytes @ 0xC
   675   00000D                     	ds	1
   676   00000E                     ?_vfpfcnvrt:
   677                           	callstack 0
   678   00000E                     average_RGBC@p:
   679                           	callstack 0
   680   00000E                     wait_for_wall@loss:
   681                           	callstack 0
   682   00000E                     convert_HSV@p1:
   683                           	callstack 0
   684   00000E                     setMotorPWM@m:
   685                           	callstack 0
   686   00000E                     vfpfcnvrt@fp:
   687                           	callstack 0
   688                           
   689                           ; 1 bytes @ 0xD
   690   00000E                     	ds	1
   691   00000F                     ??_average_RGBC:
   692   00000F                     ??_setMotorPWM:
   693   00000F                     ?___flmul:
   694                           	callstack 0
   695   00000F                     convert_HSV@p2:
   696                           	callstack 0
   697   00000F                     vfpfcnvrt@fmt:
   698                           	callstack 0
   699   00000F                     ___flmul@b:
   700                           	callstack 0
   701                           
   702                           ; 4 bytes @ 0xE
   703   00000F                     	ds	1
   704   000010                     ??_convert_HSV:
   705   000010                     vfpfcnvrt@ap:
   706                           	callstack 0
   707                           
   708                           ; 1 bytes @ 0xF
   709   000010                     	ds	1
   710   000011                     ??_vfpfcnvrt:
   711   000011                     average_RGBC@i:
   712                           	callstack 0
   713   000011                     setMotorPWM@posDuty:
   714                           	callstack 0
   715                           
   716                           ; 1 bytes @ 0x10
   717   000011                     	ds	1
   718   000012                     setMotorPWM@negDuty:
   719                           	callstack 0
   720   000012                     average_RGBC@temp_R:
   721                           	callstack 0
   722                           
   723                           ; 4 bytes @ 0x11
   724   000012                     	ds	1
   725   000013                     stop@mL:
   726                           	callstack 0
   727   000013                     vfpfcnvrt@done:
   728                           	callstack 0
   729   000013                     ___flmul@a:
   730                           	callstack 0
   731                           
   732                           ; 4 bytes @ 0x12
   733   000013                     	ds	1
   734   000014                     stop@mR:
   735                           	callstack 0
   736   000014                     vfpfcnvrt@cnt:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x13
   740   000014                     	ds	1
   741   000015                     ??_stop:
   742                           
   743                           ; 1 bytes @ 0x14
   744   000015                     	ds	1
   745   000016                     vfpfcnvrt@cp:
   746                           	callstack 0
   747   000016                     average_RGBC@temp_G:
   748                           	callstack 0
   749                           
   750                           ; 4 bytes @ 0x15
   751   000016                     	ds	1
   752   000017                     ??___flmul:
   753   000017                     vfpfcnvrt@convarg:
   754                           	callstack 0
   755                           
   756                           ; 4 bytes @ 0x16
   757   000017                     	ds	1
   758   000018                     convert_HSV@sat_scale:
   759                           	callstack 0
   760                           
   761                           ; 2 bytes @ 0x17
   762   000018                     	ds	2
   763   00001A                     convert_HSV@m:
   764                           	callstack 0
   765   00001A                     average_RGBC@temp_B:
   766                           	callstack 0
   767                           
   768                           ; 4 bytes @ 0x19
   769   00001A                     	ds	1
   770   00001B                     ___flmul@sign:
   771                           	callstack 0
   772   00001B                     vfpfcnvrt@c:
   773                           	callstack 0
   774                           
   775                           ; 1 bytes @ 0x1A
   776   00001B                     	ds	1
   777   00001C                     ?_vfprintf:
   778                           	callstack 0
   779   00001C                     vfprintf@fp:
   780                           	callstack 0
   781   00001C                     convert_HSV@sat:
   782                           	callstack 0
   783   00001C                     ___flmul@grs:
   784                           	callstack 0
   785                           
   786                           ; 4 bytes @ 0x1B
   787   00001C                     	ds	1
   788   00001D                     vfprintf@fmt:
   789                           	callstack 0
   790                           
   791                           ; 1 bytes @ 0x1C
   792   00001D                     	ds	1
   793   00001E                     vfprintf@ap:
   794                           	callstack 0
   795   00001E                     convert_HSV@hue:
   796                           	callstack 0
   797   00001E                     average_RGBC@temp_C:
   798                           	callstack 0
   799                           
   800                           ; 4 bytes @ 0x1D
   801   00001E                     	ds	1
   802   00001F                     vfprintf@cfmt:
   803                           	callstack 0
   804                           
   805                           ; 1 bytes @ 0x1E
   806   00001F                     	ds	1
   807   000020                     ?_sprintf:
   808                           	callstack 0
   809   000020                     ___flmul@aexp:
   810                           	callstack 0
   811   000020                     sprintf@s:
   812                           	callstack 0
   813   000020                     convert_HSV@temp_614:
   814                           	callstack 0
   815                           
   816                           ; 4 bytes @ 0x1F
   817   000020                     	ds	1
   818   000021                     ___flmul@bexp:
   819                           	callstack 0
   820                           
   821                           ; 1 bytes @ 0x20
   822   000021                     	ds	1
   823   000022                     sprintf@fmt:
   824                           	callstack 0
   825   000022                     ___flmul@prod:
   826                           	callstack 0
   827                           
   828                           ; 4 bytes @ 0x21
   829   000022                     	ds	2
   830   000024                     convert_HSV@temp:
   831                           	callstack 0
   832                           
   833                           ; 4 bytes @ 0x23
   834   000024                     	ds	2
   835   000026                     ___flmul@temp:
   836                           	callstack 0
   837                           
   838                           ; 2 bytes @ 0x25
   839   000026                     	ds	2
   840   000028                     ?___fltol:
   841                           	callstack 0
   842   000028                     convert_HSV@temp_610:
   843                           	callstack 0
   844   000028                     ___fltol@f1:
   845                           	callstack 0
   846                           
   847                           ; 4 bytes @ 0x27
   848   000028                     	ds	3
   849   00002B                     sprintf@ret:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x2A
   853   00002B                     	ds	1
   854   00002C                     ??___fltol:
   855   00002C                     convert_HSV@temp_611:
   856                           	callstack 0
   857                           
   858                           ; 4 bytes @ 0x2B
   859   00002C                     	ds	1
   860   00002D                     sprintf@ap:
   861                           	callstack 0
   862                           
   863                           ; 1 bytes @ 0x2C
   864   00002D                     	ds	1
   865   00002E                     sprintf@f:
   866                           	callstack 0
   867                           
   868                           ; 12 bytes @ 0x2D
   869   00002E                     	ds	2
   870   000030                     ___fltol@sign1:
   871                           	callstack 0
   872   000030                     convert_HSV@temp_612:
   873                           	callstack 0
   874                           
   875                           ; 4 bytes @ 0x2F
   876   000030                     	ds	1
   877   000031                     ___fltol@exp1:
   878                           	callstack 0
   879                           
   880                           ; 1 bytes @ 0x30
   881   000031                     	ds	1
   882   000032                     scale_RGB@p:
   883                           	callstack 0
   884                           
   885                           ; 1 bytes @ 0x31
   886   000032                     	ds	1
   887   000033                     ??_scale_RGB:
   888                           
   889                           ; 1 bytes @ 0x32
   890   000033                     	ds	1
   891   000034                     convert_HSV@temp_613:
   892                           	callstack 0
   893                           
   894                           ; 4 bytes @ 0x33
   895   000034                     	ds	4
   896   000038                     convert_HSV@temp_609:
   897                           	callstack 0
   898                           
   899                           ; 4 bytes @ 0x37
   900   000038                     	ds	2
   901   00003A                     sendRGBCvalSerial4@col_val:
   902                           	callstack 0
   903   00003A                     sendHSVvalSerial4@col_val:
   904                           	callstack 0
   905   00003A                     sendIntSerial4@integer:
   906                           	callstack 0
   907   00003A                     sendArrayCharSerial4@arr:
   908                           	callstack 0
   909                           
   910                           ; 2 bytes @ 0x39
   911   00003A                     	ds	1
   912   00003B                     sendHSVvalSerial4@tempStr:
   913                           	callstack 0
   914   00003B                     sendRGBCvalSerial4@tempStr:
   915                           	callstack 0
   916                           
   917                           ; 26 bytes @ 0x3A
   918   00003B                     	ds	1
   919   00003C                     ??_sendArrayCharSerial4:
   920   00003C                     convert_HSV@hue_scale:
   921                           	callstack 0
   922   00003C                     sendIntSerial4@string:
   923                           	callstack 0
   924                           
   925                           ; 17 bytes @ 0x3B
   926   00003C                     	ds	2
   927   00003E                     convert_HSV@M:
   928                           	callstack 0
   929                           
   930                           ; 2 bytes @ 0x3D
   931   00003E                     	ds	2
   932   000040                     convert_HSV@C:
   933                           	callstack 0
   934                           
   935                           ; 2 bytes @ 0x3F
   936   000040                     	ds	21
   937   000055                     forward_navigation@mL:
   938                           	callstack 0
   939                           
   940                           ; 1 bytes @ 0x54
   941   000055                     	ds	1
   942   000056                     forward_navigation@mR:
   943                           	callstack 0
   944                           
   945                           ; 1 bytes @ 0x55
   946   000056                     	ds	1
   947   000057                     forward_navigation@p1:
   948                           	callstack 0
   949                           
   950                           ; 1 bytes @ 0x56
   951   000057                     	ds	1
   952   000058                     forward_navigation@p2:
   953                           	callstack 0
   954                           
   955                           ; 1 bytes @ 0x57
   956   000058                     	ds	1
   957   000059                     ??_forward_navigation:
   958                           
   959                           ; 1 bytes @ 0x58
   960   000059                     	ds	2
   961   00005B                     forward_navigation@timerH:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x5A
   965   00005B                     	ds	1
   966   00005C                     forward_navigation@timerL:
   967                           	callstack 0
   968                           
   969                           ; 1 bytes @ 0x5B
   970   00005C                     	ds	1
   971   00005D                     forward_navigation@mann:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x5C
   975   00005D                     	ds	1
   976                           
   977 ;;
   978 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   979 ;;
   980 ;; *************** function _main *****************
   981 ;; Defined at:
   982 ;;		line 27 in file "main.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;		None
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  k               1    2[BANK0 ] unsigned char 
   987 ;;  motorR          9   12[BANK0 ] struct DC_motor
   988 ;;  motorL          9    3[BANK0 ] struct DC_motor
   989 ;;  RGBC_colour     8   27[BANK0 ] struct RGBC_val
   990 ;;  HSV_colour      6   21[BANK0 ] struct HSV_val
   991 ;;  PWMcycle        2    0        unsigned int 
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1002 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1004 ;;      Totals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1005 ;;Total ram usage:       35 bytes
  1006 ;; Hardware stack levels required when called: 8
  1007 ;; This function calls:
  1008 ;;		_Timer0_init
  1009 ;;		_average_RGBC
  1010 ;;		_buggy_lights_init
  1011 ;;		_color_click_init
  1012 ;;		_colour_to_key
  1013 ;;		_convert_HSV
  1014 ;;		_forward_navigation
  1015 ;;		_initDCmotorsPWM
  1016 ;;		_initUSART4
  1017 ;;		_scale_RGB
  1018 ;;		_sendHSVvalSerial4
  1019 ;;		_sendIntSerial4
  1020 ;;		_sendRGBCvalSerial4
  1021 ;; This function is called by:
  1022 ;;		Startup code after reset
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text0
  1027   002430                     __ptext0:
  1028                           	callstack 0
  1029   002430                     _main:
  1030                           	callstack 23
  1031   002430                     
  1032                           ;main.c: 28:     struct RGBC_val RGBC_colour;;main.c: 29:         RGBC_colour.R = 0;
  1033   002430  0E00               	movlw	0
  1034   002432  0100               	movlb	0	; () banked
  1035   002434  6FA4               	movwf	(main@RGBC_colour+1)& (0+255),b
  1036   002436  0E00               	movlw	0
  1037   002438  6FA3               	movwf	main@RGBC_colour& (0+255),b
  1038                           
  1039                           ;main.c: 30:         RGBC_colour.G = 0;
  1040   00243A  0E00               	movlw	0
  1041   00243C  6FA6               	movwf	(main@RGBC_colour+3)& (0+255),b
  1042   00243E  0E00               	movlw	0
  1043   002440  6FA5               	movwf	(main@RGBC_colour+2)& (0+255),b
  1044                           
  1045                           ;main.c: 31:         RGBC_colour.B = 0;
  1046   002442  0E00               	movlw	0
  1047   002444  6FA8               	movwf	(main@RGBC_colour+5)& (0+255),b
  1048   002446  0E00               	movlw	0
  1049   002448  6FA7               	movwf	(main@RGBC_colour+4)& (0+255),b
  1050                           
  1051                           ;main.c: 32:         RGBC_colour.C = 0;
  1052   00244A  0E00               	movlw	0
  1053   00244C  6FAA               	movwf	(main@RGBC_colour+7)& (0+255),b
  1054   00244E  0E00               	movlw	0
  1055   002450  6FA9               	movwf	(main@RGBC_colour+6)& (0+255),b
  1056                           
  1057                           ;main.c: 34:     struct HSV_val HSV_colour;;main.c: 35:         HSV_colour.H = 0;
  1058   002452  0E00               	movlw	0
  1059   002454  6F9E               	movwf	(main@HSV_colour+1)& (0+255),b
  1060   002456  0E00               	movlw	0
  1061   002458  6F9D               	movwf	main@HSV_colour& (0+255),b
  1062                           
  1063                           ;main.c: 36:         HSV_colour.S = 0;
  1064   00245A  0E00               	movlw	0
  1065   00245C  6FA0               	movwf	(main@HSV_colour+3)& (0+255),b
  1066   00245E  0E00               	movlw	0
  1067   002460  6F9F               	movwf	(main@HSV_colour+2)& (0+255),b
  1068                           
  1069                           ;main.c: 37:         HSV_colour.V = 0;
  1070   002462  0E00               	movlw	0
  1071   002464  6FA2               	movwf	(main@HSV_colour+5)& (0+255),b
  1072   002466  0E00               	movlw	0
  1073   002468  6FA1               	movwf	(main@HSV_colour+4)& (0+255),b
  1074                           
  1075                           ;main.c: 40:     struct DC_motor motorL, motorR;;main.c: 41:         motorL.power = 0;
  1076   00246A  0E00               	movlw	0
  1077   00246C  6F8B               	movwf	main@motorL& (0+255),b
  1078                           
  1079                           ;main.c: 42:         motorL.direction = 1;
  1080   00246E  0E01               	movlw	1
  1081   002470  6F8C               	movwf	(main@motorL+1)& (0+255),b
  1082                           
  1083                           ;main.c: 43:         motorL.brakemode = 1;
  1084   002472  0E01               	movlw	1
  1085   002474  6F8D               	movwf	(main@motorL+2)& (0+255),b
  1086   002476                     
  1087                           ; BSR set to: 0
  1088                           ;main.c: 44:         motorL.PWMperiod = PWMcycle;
  1089   002476  0E00               	movlw	0
  1090   002478  6F8F               	movwf	(main@motorL+4)& (0+255),b
  1091   00247A  0E63               	movlw	99
  1092   00247C  6F8E               	movwf	(main@motorL+3)& (0+255),b
  1093   00247E                     
  1094                           ; BSR set to: 0
  1095                           ;main.c: 45:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1096   00247E  0EAA               	movlw	170
  1097   002480  6F90               	movwf	(main@motorL+5)& (0+255),b
  1098   002482  0E0F               	movlw	15
  1099   002484  6F91               	movwf	(main@motorL+6)& (0+255),b
  1100   002486                     
  1101                           ; BSR set to: 0
  1102                           ;main.c: 46:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1103   002486  0EA6               	movlw	166
  1104   002488  6F92               	movwf	(main@motorL+7)& (0+255),b
  1105   00248A  0E0F               	movlw	15
  1106   00248C  6F93               	movwf	(main@motorL+8)& (0+255),b
  1107                           
  1108                           ;main.c: 47:         motorR.power = 0;
  1109   00248E  0E00               	movlw	0
  1110   002490  6F94               	movwf	main@motorR& (0+255),b
  1111                           
  1112                           ;main.c: 48:         motorR.direction = 1;
  1113   002492  0E01               	movlw	1
  1114   002494  6F95               	movwf	(main@motorR+1)& (0+255),b
  1115                           
  1116                           ;main.c: 49:         motorR.brakemode = 1;
  1117   002496  0E01               	movlw	1
  1118   002498  6F96               	movwf	(main@motorR+2)& (0+255),b
  1119   00249A                     
  1120                           ; BSR set to: 0
  1121                           ;main.c: 50:         motorR.PWMperiod = PWMcycle;
  1122   00249A  0E00               	movlw	0
  1123   00249C  6F98               	movwf	(main@motorR+4)& (0+255),b
  1124   00249E  0E63               	movlw	99
  1125   0024A0  6F97               	movwf	(main@motorR+3)& (0+255),b
  1126   0024A2                     
  1127                           ; BSR set to: 0
  1128                           ;main.c: 51:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1129   0024A2  0E25               	movlw	37
  1130   0024A4  6F99               	movwf	(main@motorR+5)& (0+255),b
  1131   0024A6  0E0F               	movlw	15
  1132   0024A8  6F9A               	movwf	(main@motorR+6)& (0+255),b
  1133   0024AA                     
  1134                           ; BSR set to: 0
  1135                           ;main.c: 52:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1136   0024AA  0E21               	movlw	33
  1137   0024AC  6F9B               	movwf	(main@motorR+7)& (0+255),b
  1138   0024AE  0E0F               	movlw	15
  1139   0024B0  6F9C               	movwf	(main@motorR+8)& (0+255),b
  1140   0024B2                     
  1141                           ; BSR set to: 0
  1142                           ;main.c: 55:     initDCmotorsPWM(PWMcycle);
  1143   0024B2  0E00               	movlw	0
  1144   0024B4  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1145   0024B6  0E63               	movlw	99
  1146   0024B8  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1147   0024BA  ECD4  F016         	call	_initDCmotorsPWM	;wreg free
  1148                           
  1149                           ;main.c: 56:     buggy_lights_init();
  1150   0024BE  EC13  F01B         	call	_buggy_lights_init	;wreg free
  1151   0024C2                     
  1152                           ;main.c: 57:     color_click_init();
  1153   0024C2  ECF9  F01A         	call	_color_click_init	;wreg free
  1154   0024C6                     
  1155                           ;main.c: 58:     initUSART4();
  1156   0024C6  EC9B  F01B         	call	_initUSART4	;wreg free
  1157   0024CA                     
  1158                           ;main.c: 59:     Timer0_init();
  1159   0024CA  EC53  F01B         	call	_Timer0_init	;wreg free
  1160   0024CE                     
  1161                           ;main.c: 63:         TRISDbits.TRISD7 = 0;
  1162   0024CE  9E84               	bcf	132,7,c	;volatile
  1163   0024D0                     
  1164                           ;main.c: 64:         TRISHbits.TRISH3 = 0;
  1165   0024D0  9688               	bcf	136,3,c	;volatile
  1166   0024D2                     
  1167                           ;main.c: 66:         LATDbits.LATD7 = 0;
  1168   0024D2  9E7C               	bcf	124,7,c	;volatile
  1169   0024D4                     
  1170                           ;main.c: 67:         LATHbits.LATH3 = 0;
  1171   0024D4  9680               	bcf	128,3,c	;volatile
  1172   0024D6                     
  1173                           ;main.c: 71:         TRISFbits.TRISF2 = 1;
  1174   0024D6  8486               	bsf	134,2,c	;volatile
  1175   0024D8                     
  1176                           ;main.c: 72:         TRISFbits.TRISF3 = 1;
  1177   0024D8  8686               	bsf	134,3,c	;volatile
  1178   0024DA                     
  1179                           ;main.c: 74:         ANSELFbits.ANSELF2 = 0;
  1180   0024DA  010E               	movlb	14	; () banked
  1181   0024DC  95B4               	bcf	180,2,b	;volatile
  1182   0024DE                     
  1183                           ; BSR set to: 14
  1184                           ;main.c: 75:         ANSELFbits.ANSELF3 = 0;
  1185   0024DE  97B4               	bcf	180,3,b	;volatile
  1186                           
  1187                           ;main.c: 80:     LATDbits.LATD7 = !LATDbits.LATD7;
  1188   0024E0  AE7C               	btfss	124,7,c	;volatile
  1189   0024E2  EF75  F012         	goto	u3871
  1190   0024E6  EF7A  F012         	goto	u3870
  1191   0024EA                     u3871:
  1192   0024EA  0100               	movlb	0	; () banked
  1193   0024EC  6B88               	clrf	??_main& (0+255),b
  1194   0024EE  2B88               	incf	??_main& (0+255),f,b
  1195   0024F0  EF7C  F012         	goto	u3888
  1196   0024F4                     u3870:
  1197   0024F4  0100               	movlb	0	; () banked
  1198   0024F6  6B88               	clrf	??_main& (0+255),b
  1199   0024F8                     u3888:
  1200   0024F8  3388               	rrcf	??_main& (0+255),f,b
  1201   0024FA  3388               	rrcf	??_main& (0+255),f,b
  1202   0024FC  507C               	movf	124,w,c	;volatile
  1203   0024FE  1988               	xorwf	??_main& (0+255),w,b
  1204   002500  0B7F               	andlw	-129
  1205   002502  1988               	xorwf	??_main& (0+255),w,b
  1206   002504  6E7C               	movwf	124,c	;volatile
  1207                           
  1208                           ;main.c: 81:     LATHbits.LATH3 = !LATHbits.LATH3;
  1209   002506  A680               	btfss	128,3,c	;volatile
  1210   002508  EF88  F012         	goto	u3891
  1211   00250C  EF8C  F012         	goto	u3890
  1212   002510                     u3891:
  1213   002510  6B88               	clrf	??_main& (0+255),b
  1214   002512  2B88               	incf	??_main& (0+255),f,b
  1215   002514  EF8E  F012         	goto	u3908
  1216   002518                     u3890:
  1217   002518  0100               	movlb	0	; () banked
  1218   00251A  6B88               	clrf	??_main& (0+255),b
  1219   00251C                     u3908:
  1220   00251C  4788               	rlncf	??_main& (0+255),f,b
  1221   00251E  4788               	rlncf	??_main& (0+255),f,b
  1222   002520  4788               	rlncf	??_main& (0+255),f,b
  1223   002522  5080               	movf	128,w,c	;volatile
  1224   002524  1988               	xorwf	??_main& (0+255),w,b
  1225   002526  0BF7               	andlw	-9
  1226   002528  1988               	xorwf	??_main& (0+255),w,b
  1227   00252A  6E80               	movwf	128,c	;volatile
  1228   00252C                     
  1229                           ; BSR set to: 0
  1230                           ;main.c: 83:     forward_navigation(&motorL, &motorR, &HSV_colour, &RGBC_colour);
  1231   00252C  0E8B               	movlw	low main@motorL
  1232   00252E  6E55               	movwf	forward_navigation@mL^0,c
  1233   002530  0E94               	movlw	low main@motorR
  1234   002532  6E56               	movwf	forward_navigation@mR^0,c
  1235   002534  0E9D               	movlw	low main@HSV_colour
  1236   002536  6E57               	movwf	forward_navigation@p1^0,c
  1237   002538  0EA3               	movlw	low main@RGBC_colour
  1238   00253A  6E58               	movwf	forward_navigation@p2^0,c
  1239   00253C  EC7D  F013         	call	_forward_navigation	;wreg free
  1240   002540                     l4580:
  1241                           
  1242                           ;main.c: 86:         average_RGBC(&RGBC_colour);
  1243   002540  0EA3               	movlw	low main@RGBC_colour
  1244   002542  6E0E               	movwf	average_RGBC@p^0,c
  1245   002544  EC40  F010         	call	_average_RGBC	;wreg free
  1246   002548                     
  1247                           ;main.c: 87:         scale_RGB(&RGBC_colour);
  1248   002548  0EA3               	movlw	low main@RGBC_colour
  1249   00254A  6E32               	movwf	scale_RGB@p^0,c
  1250   00254C  EC9C  F014         	call	_scale_RGB	;wreg free
  1251   002550                     
  1252                           ;main.c: 88:         convert_HSV(&HSV_colour, &RGBC_colour);
  1253   002550  0E9D               	movlw	low main@HSV_colour
  1254   002552  6E0E               	movwf	convert_HSV@p1^0,c
  1255   002554  0EA3               	movlw	low main@RGBC_colour
  1256   002556  6E0F               	movwf	convert_HSV@p2^0,c
  1257   002558  EC0D  F007         	call	_convert_HSV	;wreg free
  1258   00255C                     
  1259                           ;main.c: 90:         unsigned char k = colour_to_key(&HSV_colour, &RGBC_colour);
  1260   00255C  0E9D               	movlw	low main@HSV_colour
  1261   00255E  6E01               	movwf	colour_to_key@p1^0,c
  1262   002560  0EA3               	movlw	low main@RGBC_colour
  1263   002562  6E02               	movwf	colour_to_key@p2^0,c
  1264   002564  EC73  F00A         	call	_colour_to_key	;wreg free
  1265   002568  0100               	movlb	0	; () banked
  1266   00256A  6F8A               	movwf	main@k& (0+255),b
  1267   00256C                     
  1268                           ; BSR set to: 0
  1269                           ;main.c: 92:         sendRGBCvalSerial4(&RGBC_colour);
  1270   00256C  0EA3               	movlw	low main@RGBC_colour
  1271   00256E  6E3A               	movwf	sendRGBCvalSerial4@col_val^0,c
  1272   002570  ECEC  F018         	call	_sendRGBCvalSerial4	;wreg free
  1273   002574                     
  1274                           ;main.c: 93:         sendHSVvalSerial4(&HSV_colour);
  1275   002574  0E9D               	movlw	low main@HSV_colour
  1276   002576  6E3A               	movwf	sendHSVvalSerial4@col_val^0,c
  1277   002578  EC11  F01A         	call	_sendHSVvalSerial4	;wreg free
  1278   00257C                     
  1279                           ;main.c: 94:         sendIntSerial4((int)k);
  1280   00257C  C08A  F03A         	movff	main@k,sendIntSerial4@integer
  1281   002580  6A3B               	clrf	(sendIntSerial4@integer+1)^0,c
  1282   002582  EC7A  F01B         	call	_sendIntSerial4	;wreg free
  1283   002586                     
  1284                           ;main.c: 96:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1285   002586  0E29               	movlw	41
  1286   002588  0100               	movlb	0	; () banked
  1287   00258A  6F89               	movwf	(??_main+1)& (0+255),b
  1288   00258C  0E96               	movlw	150
  1289   00258E  6F88               	movwf	??_main& (0+255),b
  1290   002590  0E7F               	movlw	127
  1291   002592                     u3917:
  1292   002592  2EE8               	decfsz	wreg,f,c
  1293   002594  D7FE               	bra	u3917
  1294   002596  2F88               	decfsz	??_main& (0+255),f,b
  1295   002598  D7FC               	bra	u3917
  1296   00259A  2F89               	decfsz	(??_main+1)& (0+255),f,b
  1297   00259C  D7FA               	bra	u3917
  1298   00259E  EFA0  F012         	goto	l4580
  1299   0025A2  EF21  F000         	goto	start
  1300   0025A6                     __end_of_main:
  1301                           	callstack 0
  1302                           
  1303 ;; *************** function _sendIntSerial4 *****************
  1304 ;; Defined at:
  1305 ;;		line 51 in file "serial.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  integer         2   57[COMRAM] int 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  string         17   59[COMRAM] unsigned char [17]
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1319 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1320 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1322 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1323 ;;Total ram usage:       19 bytes
  1324 ;; Hardware stack levels used: 1
  1325 ;; Hardware stack levels required when called: 6
  1326 ;; This function calls:
  1327 ;;		_sendStringSerial4
  1328 ;;		_sprintf
  1329 ;; This function is called by:
  1330 ;;		_main
  1331 ;;		_return_to_sender
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text1
  1336   0036F4                     __ptext1:
  1337                           	callstack 0
  1338   0036F4                     _sendIntSerial4:
  1339                           	callstack 24
  1340   0036F4                     
  1341                           ;serial.c: 53:     char string[sizeof(int) * 8 + 1];;serial.c: 54:     sprintf(string, "
      +                          %d \r", integer);
  1342   0036F4  0E3C               	movlw	low sendIntSerial4@string
  1343   0036F6  6E20               	movwf	sprintf@s^0,c
  1344   0036F8  6A21               	clrf	(sprintf@s+1)^0,c
  1345   0036FA  0E0F               	movlw	low STR_1
  1346   0036FC  6E22               	movwf	sprintf@fmt^0,c
  1347   0036FE  C03A  F023         	movff	sendIntSerial4@integer,?_sprintf+3
  1348   003702  C03B  F024         	movff	sendIntSerial4@integer+1,?_sprintf+4
  1349   003706  EC37  F01A         	call	_sprintf	;wreg free
  1350   00370A                     
  1351                           ;serial.c: 55:     sendStringSerial4(string);
  1352   00370A  0E3C               	movlw	low sendIntSerial4@string
  1353   00370C  6E02               	movwf	sendStringSerial4@string^0,c
  1354   00370E  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1355   003710  ECBB  F018         	call	_sendStringSerial4	;wreg free
  1356   003714  0012               	return		;funcret
  1357   003716                     __end_of_sendIntSerial4:
  1358                           	callstack 0
  1359                           
  1360 ;; *************** function _initUSART4 *****************
  1361 ;; Defined at:
  1362 ;;		line 8 in file "serial.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;		None
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;		None
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, status,2
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1380 ;;Total ram usage:        0 bytes
  1381 ;; Hardware stack levels used: 1
  1382 ;; Hardware stack levels required when called: 1
  1383 ;; This function calls:
  1384 ;;		Nothing
  1385 ;; This function is called by:
  1386 ;;		_main
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           	psect	text2
  1391   003736                     __ptext2:
  1392                           	callstack 0
  1393   003736                     _initUSART4:
  1394                           	callstack 29
  1395   003736                     
  1396                           ;serial.c: 9:     RC0PPS = 0x12;
  1397   003736  0E12               	movlw	18
  1398   003738  010E               	movlb	14	; () banked
  1399   00373A  6F62               	movwf	98,b	;volatile
  1400                           
  1401                           ;serial.c: 10:     RX4PPS = 0x11;
  1402   00373C  0E11               	movlw	17
  1403   00373E  6F15               	movwf	21,b	;volatile
  1404   003740                     
  1405                           ; BSR set to: 14
  1406                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1407   003740  97E9               	bcf	233,3,b	;volatile
  1408   003742                     
  1409                           ; BSR set to: 14
  1410                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1411   003742  95E8               	bcf	232,2,b	;volatile
  1412                           
  1413                           ;serial.c: 14:     SP4BRGL = 51;
  1414   003744  0E33               	movlw	51
  1415   003746  6FE5               	movwf	229,b	;volatile
  1416                           
  1417                           ;serial.c: 15:     SP4BRGH = 0;
  1418   003748  0E00               	movlw	0
  1419   00374A  6FE6               	movwf	230,b	;volatile
  1420   00374C                     
  1421                           ; BSR set to: 14
  1422                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1423   00374C  89E7               	bsf	231,4,b	;volatile
  1424   00374E                     
  1425                           ; BSR set to: 14
  1426                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1427   00374E  8BE8               	bsf	232,5,b	;volatile
  1428   003750                     
  1429                           ; BSR set to: 14
  1430                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1431   003750  8FE7               	bsf	231,7,b	;volatile
  1432   003752                     
  1433                           ; BSR set to: 14
  1434   003752  0012               	return		;funcret
  1435   003754                     __end_of_initUSART4:
  1436                           	callstack 0
  1437                           
  1438 ;; *************** function _initDCmotorsPWM *****************
  1439 ;; Defined at:
  1440 ;;		line 7 in file "dc_motor.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;		None
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  1    wreg      void 
  1447 ;; Registers used:
  1448 ;;		wreg, status,2
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1454 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1457 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1458 ;;Total ram usage:        2 bytes
  1459 ;; Hardware stack levels used: 1
  1460 ;; Hardware stack levels required when called: 1
  1461 ;; This function calls:
  1462 ;;		Nothing
  1463 ;; This function is called by:
  1464 ;;		_main
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           	psect	text3
  1469   002DA8                     __ptext3:
  1470                           	callstack 0
  1471   002DA8                     _initDCmotorsPWM:
  1472                           	callstack 29
  1473   002DA8                     
  1474                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
  1475   002DA8  9485               	bcf	133,2,c	;volatile
  1476                           
  1477                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1478   002DAA  9885               	bcf	133,4,c	;volatile
  1479                           
  1480                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
  1481   002DAC  9E83               	bcf	131,7,c	;volatile
  1482                           
  1483                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
  1484   002DAE  9C87               	bcf	135,6,c	;volatile
  1485                           
  1486                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
  1487   002DB0  947D               	bcf	125,2,c	;volatile
  1488                           
  1489                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
  1490   002DB2  987D               	bcf	125,4,c	;volatile
  1491                           
  1492                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
  1493   002DB4  9E7B               	bcf	123,7,c	;volatile
  1494                           
  1495                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
  1496   002DB6  9C7F               	bcf	127,6,c	;volatile
  1497   002DB8                     
  1498                           ;dc_motor.c: 19:     RE2PPS=0x05;
  1499   002DB8  0E05               	movlw	5
  1500   002DBA  010E               	movlb	14	; () banked
  1501   002DBC  6F74               	movwf	116,b	;volatile
  1502                           
  1503                           ;dc_motor.c: 20:     RE4PPS=0x06;
  1504   002DBE  0E06               	movlw	6
  1505   002DC0  6F76               	movwf	118,b	;volatile
  1506                           
  1507                           ;dc_motor.c: 21:     RC7PPS=0x07;
  1508   002DC2  0E07               	movlw	7
  1509   002DC4  6F69               	movwf	105,b	;volatile
  1510                           
  1511                           ;dc_motor.c: 22:     RG6PPS=0x08;
  1512   002DC6  0E08               	movlw	8
  1513   002DC8  6F88               	movwf	136,b	;volatile
  1514                           
  1515                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  1516   002DCA  50BD               	movf	189,w,c	;volatile
  1517   002DCC  0B8F               	andlw	-113
  1518   002DCE  0940               	iorlw	64
  1519   002DD0  6EBD               	movwf	189,c	;volatile
  1520                           
  1521                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  1522   002DD2  0EE0               	movlw	-32
  1523   002DD4  16BE               	andwf	190,f,c	;volatile
  1524                           
  1525                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  1526   002DD6  50BF               	movf	191,w,c	;volatile
  1527   002DD8  0BF0               	andlw	-16
  1528   002DDA  0901               	iorlw	1
  1529   002DDC  6EBF               	movwf	191,c	;volatile
  1530   002DDE                     
  1531                           ; BSR set to: 14
  1532                           ;dc_motor.c: 31:     T2PR=(unsigned char)PWMperiod;
  1533   002DDE  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1534   002DE2                     
  1535                           ; BSR set to: 14
  1536                           ;dc_motor.c: 32:     T2CONbits.ON=1;
  1537   002DE2  8EBD               	bsf	189,7,c	;volatile
  1538                           
  1539                           ;dc_motor.c: 36:         CCPR1H=0;
  1540   002DE4  0E00               	movlw	0
  1541   002DE6  6EAA               	movwf	170,c	;volatile
  1542                           
  1543                           ;dc_motor.c: 37:         CCPR2H=0;
  1544   002DE8  0E00               	movlw	0
  1545   002DEA  6EA6               	movwf	166,c	;volatile
  1546                           
  1547                           ;dc_motor.c: 38:         CCPR3H=0;
  1548   002DEC  0E00               	movlw	0
  1549   002DEE  010F               	movlb	15	; () banked
  1550   002DF0  6F25               	movwf	37,b	;volatile
  1551                           
  1552                           ;dc_motor.c: 39:         CCPR4H=0;
  1553   002DF2  0E00               	movlw	0
  1554   002DF4  6F21               	movwf	33,b	;volatile
  1555                           
  1556                           ;dc_motor.c: 42:         CCPTMRS0bits.C1TSEL=0;
  1557   002DF6  0EFC               	movlw	-4
  1558   002DF8  16AD               	andwf	173,f,c	;volatile
  1559                           
  1560                           ;dc_motor.c: 43:         CCPTMRS0bits.C2TSEL=0;
  1561   002DFA  0EF3               	movlw	-13
  1562   002DFC  16AD               	andwf	173,f,c	;volatile
  1563                           
  1564                           ;dc_motor.c: 44:         CCPTMRS0bits.C3TSEL=0;
  1565   002DFE  0ECF               	movlw	-49
  1566   002E00  16AD               	andwf	173,f,c	;volatile
  1567                           
  1568                           ;dc_motor.c: 45:         CCPTMRS0bits.C4TSEL=0;
  1569   002E02  0E3F               	movlw	-193
  1570   002E04  16AD               	andwf	173,f,c	;volatile
  1571   002E06                     
  1572                           ; BSR set to: 15
  1573                           ;dc_motor.c: 48:         CCP1CONbits.FMT=1;
  1574   002E06  88AB               	bsf	171,4,c	;volatile
  1575                           
  1576                           ;dc_motor.c: 49:         CCP1CONbits.CCP1MODE=0b1100;
  1577   002E08  50AB               	movf	171,w,c	;volatile
  1578   002E0A  0BF0               	andlw	-16
  1579   002E0C  090C               	iorlw	12
  1580   002E0E  6EAB               	movwf	171,c	;volatile
  1581   002E10                     
  1582                           ; BSR set to: 15
  1583                           ;dc_motor.c: 50:         CCP1CONbits.EN=1;
  1584   002E10  8EAB               	bsf	171,7,c	;volatile
  1585   002E12                     
  1586                           ; BSR set to: 15
  1587                           ;dc_motor.c: 52:         CCP2CONbits.FMT=1;
  1588   002E12  88A7               	bsf	167,4,c	;volatile
  1589                           
  1590                           ;dc_motor.c: 53:         CCP2CONbits.CCP2MODE=0b1100;
  1591   002E14  50A7               	movf	167,w,c	;volatile
  1592   002E16  0BF0               	andlw	-16
  1593   002E18  090C               	iorlw	12
  1594   002E1A  6EA7               	movwf	167,c	;volatile
  1595   002E1C                     
  1596                           ; BSR set to: 15
  1597                           ;dc_motor.c: 54:         CCP2CONbits.EN=1;
  1598   002E1C  8EA7               	bsf	167,7,c	;volatile
  1599   002E1E                     
  1600                           ; BSR set to: 15
  1601                           ;dc_motor.c: 56:         CCP3CONbits.FMT=1;
  1602   002E1E  8926               	bsf	38,4,b	;volatile
  1603                           
  1604                           ;dc_motor.c: 57:         CCP3CONbits.CCP3MODE=0b1100;
  1605   002E20  5126               	movf	38,w,b	;volatile
  1606   002E22  0BF0               	andlw	-16
  1607   002E24  090C               	iorlw	12
  1608   002E26  6F26               	movwf	38,b	;volatile
  1609   002E28                     
  1610                           ; BSR set to: 15
  1611                           ;dc_motor.c: 58:         CCP3CONbits.EN=1;
  1612   002E28  8F26               	bsf	38,7,b	;volatile
  1613   002E2A                     
  1614                           ; BSR set to: 15
  1615                           ;dc_motor.c: 60:         CCP4CONbits.FMT=1;
  1616   002E2A  8922               	bsf	34,4,b	;volatile
  1617                           
  1618                           ;dc_motor.c: 61:         CCP4CONbits.CCP4MODE=0b1100;
  1619   002E2C  5122               	movf	34,w,b	;volatile
  1620   002E2E  0BF0               	andlw	-16
  1621   002E30  090C               	iorlw	12
  1622   002E32  6F22               	movwf	34,b	;volatile
  1623   002E34                     
  1624                           ; BSR set to: 15
  1625                           ;dc_motor.c: 62:         CCP4CONbits.EN=1;
  1626   002E34  8F22               	bsf	34,7,b	;volatile
  1627   002E36                     
  1628                           ; BSR set to: 15
  1629   002E36  0012               	return		;funcret
  1630   002E38                     __end_of_initDCmotorsPWM:
  1631                           	callstack 0
  1632                           
  1633 ;; *************** function _forward_navigation *****************
  1634 ;; Defined at:
  1635 ;;		line 116 in file "timers.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;  mL              1   84[COMRAM] PTR struct DC_motor
  1638 ;;		 -> main@motorL(9), 
  1639 ;;  mR              1   85[COMRAM] PTR struct DC_motor
  1640 ;;		 -> main@motorR(9), 
  1641 ;;  p1              1   86[COMRAM] PTR struct HSV_val
  1642 ;;		 -> main@HSV_colour(6), 
  1643 ;;  p2              1   87[COMRAM] PTR struct RGBC_val
  1644 ;;		 -> main@RGBC_colour(8), 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  mann            1   92[COMRAM] unsigned char 
  1647 ;;  timerL          1   91[COMRAM] unsigned char 
  1648 ;;  timerH          1   90[COMRAM] unsigned char 
  1649 ;; Return value:  Size  Location     Type
  1650 ;;                  1    wreg      void 
  1651 ;; Registers used:
  1652 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1653 ;; Tracked objects:
  1654 ;;		On entry : 0/0
  1655 ;;		On exit  : 0/0
  1656 ;;		Unchanged: 0/0
  1657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1658 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1659 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1660 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1661 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1662 ;;Total ram usage:        9 bytes
  1663 ;; Hardware stack levels used: 1
  1664 ;; Hardware stack levels required when called: 7
  1665 ;; This function calls:
  1666 ;;		_average_RGBC
  1667 ;;		_colour_to_key
  1668 ;;		_convert_HSV
  1669 ;;		_read_timer
  1670 ;;		_reset_timer
  1671 ;;		_scale_RGB
  1672 ;;		_sendArrayCharSerial4
  1673 ;;		_sendHSVvalSerial4
  1674 ;;		_sendRGBCvalSerial4
  1675 ;;		_start_timer
  1676 ;;		_stop
  1677 ;;		_stop_timer
  1678 ;;		_toggle_tricolour_LED
  1679 ;;		_wait_for_wall
  1680 ;;		_write_trail
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           	psect	text4
  1687   0026FA                     __ptext4:
  1688                           	callstack 0
  1689   0026FA                     _forward_navigation:
  1690                           	callstack 23
  1691   0026FA                     
  1692                           ;timers.c: 116: void forward_navigation(DC_motor *mL, DC_motor *mR, HSV_val *p1, RGBC_va
      +                          l *p2);timers.c: 117: {;timers.c: 118:     while (!returning) {
  1693   0026FA  EF10  F014         	goto	l4538
  1694   0026FE                     l4486:
  1695                           
  1696                           ;timers.c: 119:         unsigned char timerH = 0;
  1697   0026FE  0E00               	movlw	0
  1698   002700  6E5B               	movwf	forward_navigation@timerH^0,c
  1699                           
  1700                           ;timers.c: 120:         unsigned char timerL = 0;
  1701   002702  0E00               	movlw	0
  1702   002704  6E5C               	movwf	forward_navigation@timerL^0,c
  1703   002706                     
  1704                           ;timers.c: 123:         reset_timer();
  1705   002706  ECD5  F01B         	call	_reset_timer	;wreg free
  1706                           
  1707                           ;timers.c: 124:         start_timer();
  1708   00270A  ECF2  F01B         	call	_start_timer	;wreg free
  1709   00270E                     
  1710                           ;timers.c: 127:         wait_for_wall(p2, lost_flag);
  1711   00270E  C058  F00D         	movff	forward_navigation@p2,wait_for_wall@p
  1712   002712  C1A5  F00E         	movff	_lost_flag,wait_for_wall@loss
  1713   002716  EC7F  F01A         	call	_wait_for_wall	;wreg free
  1714   00271A                     
  1715                           ;timers.c: 129:         read_timer(&timerH, &timerL);
  1716   00271A  0E5B               	movlw	low forward_navigation@timerH
  1717   00271C  6E01               	movwf	read_timer@tH^0,c
  1718   00271E  0E5C               	movlw	low forward_navigation@timerL
  1719   002720  6E02               	movwf	read_timer@tL^0,c
  1720   002722  ECC4  F01B         	call	_read_timer	;wreg free
  1721                           
  1722                           ;timers.c: 130:         stop_timer();
  1723   002726  ECF0  F01B         	call	_stop_timer	;wreg free
  1724   00272A                     
  1725                           ;timers.c: 131:         stop(mL, mR);
  1726   00272A  C055  F013         	movff	forward_navigation@mL,stop@mL
  1727   00272E  C056  F014         	movff	forward_navigation@mR,stop@mR
  1728   002732  EC1C  F017         	call	_stop	;wreg free
  1729   002736                     
  1730                           ;timers.c: 133:         toggle_tricolour_LED();
  1731   002736  EC07  F015         	call	_toggle_tricolour_LED	;wreg free
  1732   00273A                     
  1733                           ;timers.c: 134:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1734   00273A  0E11               	movlw	17
  1735   00273C  6E5A               	movwf	(??_forward_navigation+1)^0,c
  1736   00273E  0E3C               	movlw	60
  1737   002740  6E59               	movwf	??_forward_navigation^0,c
  1738   002742  0ECB               	movlw	203
  1739   002744                     u3927:
  1740   002744  2EE8               	decfsz	wreg,f,c
  1741   002746  D7FE               	bra	u3927
  1742   002748  2E59               	decfsz	??_forward_navigation^0,f,c
  1743   00274A  D7FC               	bra	u3927
  1744   00274C  2E5A               	decfsz	(??_forward_navigation+1)^0,f,c
  1745   00274E  D7FA               	bra	u3927
  1746   002750  0000               	nop	
  1747   002752                     
  1748                           ;timers.c: 136:         average_RGBC(p2);
  1749   002752  C058  F00E         	movff	forward_navigation@p2,average_RGBC@p
  1750   002756  EC40  F010         	call	_average_RGBC	;wreg free
  1751   00275A                     
  1752                           ;timers.c: 137:         scale_RGB(p2);
  1753   00275A  C058  F032         	movff	forward_navigation@p2,scale_RGB@p
  1754   00275E  EC9C  F014         	call	_scale_RGB	;wreg free
  1755   002762                     
  1756                           ;timers.c: 139:         convert_HSV(p1, p2);
  1757   002762  C057  F00E         	movff	forward_navigation@p1,convert_HSV@p1
  1758   002766  C058  F00F         	movff	forward_navigation@p2,convert_HSV@p2
  1759   00276A  EC0D  F007         	call	_convert_HSV	;wreg free
  1760   00276E                     
  1761                           ;timers.c: 140:         mann = colour_to_key(p1, p2);
  1762   00276E  C057  F001         	movff	forward_navigation@p1,colour_to_key@p1
  1763   002772  C058  F002         	movff	forward_navigation@p2,colour_to_key@p2
  1764   002776  EC73  F00A         	call	_colour_to_key	;wreg free
  1765   00277A  6E5D               	movwf	forward_navigation@mann^0,c
  1766   00277C                     
  1767                           ;timers.c: 142:         toggle_tricolour_LED();
  1768   00277C  EC07  F015         	call	_toggle_tricolour_LED	;wreg free
  1769   002780                     
  1770                           ;timers.c: 143:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1771   002780  0E11               	movlw	17
  1772   002782  6E5A               	movwf	(??_forward_navigation+1)^0,c
  1773   002784  0E3C               	movlw	60
  1774   002786  6E59               	movwf	??_forward_navigation^0,c
  1775   002788  0ECB               	movlw	203
  1776   00278A                     u3937:
  1777   00278A  2EE8               	decfsz	wreg,f,c
  1778   00278C  D7FE               	bra	u3937
  1779   00278E  2E59               	decfsz	??_forward_navigation^0,f,c
  1780   002790  D7FC               	bra	u3937
  1781   002792  2E5A               	decfsz	(??_forward_navigation+1)^0,f,c
  1782   002794  D7FA               	bra	u3937
  1783   002796  0000               	nop	
  1784   002798                     
  1785                           ;timers.c: 152:         if (lost_flag) {
  1786   002798  0101               	movlb	1	; () banked
  1787   00279A  51A5               	movf	_lost_flag& (0+255),w,b
  1788   00279C  B4D8               	btfsc	status,2,c
  1789   00279E  EFD3  F013         	goto	u3831
  1790   0027A2  EFD5  F013         	goto	u3830
  1791   0027A6                     u3831:
  1792   0027A6  EFD9  F013         	goto	l4518
  1793   0027AA                     u3830:
  1794   0027AA                     
  1795                           ; BSR set to: 1
  1796                           ;timers.c: 153:             timerH = 0b11111111;
  1797   0027AA  685B               	setf	forward_navigation@timerH^0,c
  1798                           
  1799                           ;timers.c: 154:             timerL = 0b11111111;
  1800   0027AC  685C               	setf	forward_navigation@timerL^0,c
  1801   0027AE                     
  1802                           ; BSR set to: 1
  1803                           ;timers.c: 155:             mann = 8;
  1804   0027AE  0E08               	movlw	8
  1805   0027B0  6E5D               	movwf	forward_navigation@mann^0,c
  1806   0027B2                     l4518:
  1807                           
  1808                           ; BSR set to: 1
  1809                           ;timers.c: 158:         if (manoeuvre_count == 19) {
  1810   0027B2  0E13               	movlw	19
  1811   0027B4  19A4               	xorwf	_manoeuvre_count& (0+255),w,b
  1812   0027B6  A4D8               	btfss	status,2,c
  1813   0027B8  EFE0  F013         	goto	u3841
  1814   0027BC  EFE2  F013         	goto	u3840
  1815   0027C0                     u3841:
  1816   0027C0  EFE4  F013         	goto	l4522
  1817   0027C4                     u3840:
  1818   0027C4                     
  1819                           ; BSR set to: 1
  1820                           ;timers.c: 159:             mann = 8;
  1821   0027C4  0E08               	movlw	8
  1822   0027C6  6E5D               	movwf	forward_navigation@mann^0,c
  1823   0027C8                     l4522:
  1824                           
  1825                           ; BSR set to: 1
  1826                           ;timers.c: 162:         write_trail(timerH, timerL, mann);
  1827   0027C8  C05C  F001         	movff	forward_navigation@timerL,write_trail@tL
  1828   0027CC  C05D  F002         	movff	forward_navigation@mann,write_trail@man
  1829   0027D0  505B               	movf	forward_navigation@timerH^0,w,c
  1830   0027D2  ECC2  F01A         	call	_write_trail
  1831   0027D6                     
  1832                           ;timers.c: 165:         if (mann == 8) {
  1833   0027D6  0E08               	movlw	8
  1834   0027D8  185D               	xorwf	forward_navigation@mann^0,w,c
  1835   0027DA  A4D8               	btfss	status,2,c
  1836   0027DC  EFF2  F013         	goto	u3851
  1837   0027E0  EFF4  F013         	goto	u3850
  1838   0027E4                     u3851:
  1839   0027E4  EFF6  F013         	goto	l4528
  1840   0027E8                     u3850:
  1841   0027E8                     
  1842                           ;timers.c: 166:             returning = 1;
  1843   0027E8  0E01               	movlw	1
  1844   0027EA  6E5E               	movwf	_returning^0,c
  1845   0027EC                     l4528:
  1846                           
  1847                           ;timers.c: 169:         sendRGBCvalSerial4(p2);
  1848   0027EC  C058  F03A         	movff	forward_navigation@p2,sendRGBCvalSerial4@col_val
  1849   0027F0  ECEC  F018         	call	_sendRGBCvalSerial4	;wreg free
  1850   0027F4                     
  1851                           ;timers.c: 170:         sendHSVvalSerial4(p1);
  1852   0027F4  C057  F03A         	movff	forward_navigation@p1,sendHSVvalSerial4@col_val
  1853   0027F8  EC11  F01A         	call	_sendHSVvalSerial4	;wreg free
  1854   0027FC                     
  1855                           ;timers.c: 171:         sendArrayCharSerial4(trail_timer_high);
  1856   0027FC  0ECE               	movlw	low _trail_timer_high
  1857   0027FE  6E3A               	movwf	sendArrayCharSerial4@arr^0,c
  1858   002800  0E01               	movlw	high _trail_timer_high
  1859   002802  6E3B               	movwf	(sendArrayCharSerial4@arr+1)^0,c
  1860   002804  ECDF  F017         	call	_sendArrayCharSerial4	;wreg free
  1861   002808                     
  1862                           ;timers.c: 172:         sendArrayCharSerial4(trail_timer_low);
  1863   002808  0EBA               	movlw	low _trail_timer_low
  1864   00280A  6E3A               	movwf	sendArrayCharSerial4@arr^0,c
  1865   00280C  0E01               	movlw	high _trail_timer_low
  1866   00280E  6E3B               	movwf	(sendArrayCharSerial4@arr+1)^0,c
  1867   002810  ECDF  F017         	call	_sendArrayCharSerial4	;wreg free
  1868   002814                     
  1869                           ;timers.c: 173:         sendArrayCharSerial4(trail_manoeuvre);
  1870   002814  0EA6               	movlw	low _trail_manoeuvre
  1871   002816  6E3A               	movwf	sendArrayCharSerial4@arr^0,c
  1872   002818  0E01               	movlw	high _trail_manoeuvre
  1873   00281A  6E3B               	movwf	(sendArrayCharSerial4@arr+1)^0,c
  1874   00281C  ECDF  F017         	call	_sendArrayCharSerial4	;wreg free
  1875   002820                     l4538:
  1876                           
  1877                           ;timers.c: 118:     while (!returning) {
  1878   002820  505E               	movf	_returning^0,w,c
  1879   002822  B4D8               	btfsc	status,2,c
  1880   002824  EF16  F014         	goto	u3861
  1881   002828  EF18  F014         	goto	u3860
  1882   00282C                     u3861:
  1883   00282C  EF7F  F013         	goto	l4486
  1884   002830                     u3860:
  1885   002830  0012               	return		;funcret
  1886   002832                     __end_of_forward_navigation:
  1887                           	callstack 0
  1888                           
  1889 ;; *************** function _write_trail *****************
  1890 ;; Defined at:
  1891 ;;		line 100 in file "timers.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;  tH              1    wreg     unsigned char 
  1894 ;;  tL              1    0[COMRAM] unsigned char 
  1895 ;;  man             1    1[COMRAM] unsigned char 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  tH              1    2[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1911 ;;Total ram usage:        3 bytes
  1912 ;; Hardware stack levels used: 1
  1913 ;; Hardware stack levels required when called: 1
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_forward_navigation
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text5
  1922   003584                     __ptext5:
  1923                           	callstack 0
  1924   003584                     _write_trail:
  1925                           	callstack 28
  1926                           
  1927                           ;incstack = 0
  1928                           ;write_trail@tH stored from wreg
  1929   003584  6E03               	movwf	write_trail@tH^0,c
  1930   003586                     
  1931                           ;timers.c: 100: void write_trail(unsigned char tH, unsigned char tL, unsigned char man);
      +                          timers.c: 101: {;timers.c: 102:     *timer_high_pointer = tH;
  1932   003586  C0AF  FFD9         	movff	_timer_high_pointer,fsr2l
  1933   00358A  C0B0  FFDA         	movff	_timer_high_pointer+1,fsr2h
  1934   00358E  C003  FFDF         	movff	write_trail@tH,indf2
  1935   003592                     
  1936                           ;timers.c: 103:     *timer_low_pointer = tL;
  1937   003592  C0AD  FFD9         	movff	_timer_low_pointer,fsr2l
  1938   003596  C0AE  FFDA         	movff	_timer_low_pointer+1,fsr2h
  1939   00359A  C001  FFDF         	movff	write_trail@tL,indf2
  1940   00359E                     
  1941                           ;timers.c: 104:     *manoeuvre_pointer = man;
  1942   00359E  C0AB  FFD9         	movff	_manoeuvre_pointer,fsr2l
  1943   0035A2  C0AC  FFDA         	movff	_manoeuvre_pointer+1,fsr2h
  1944   0035A6  C002  FFDF         	movff	write_trail@man,indf2
  1945   0035AA                     
  1946                           ;timers.c: 106:     timer_high_pointer ++;
  1947   0035AA  0100               	movlb	0	; () banked
  1948   0035AC  4BAF               	infsnz	_timer_high_pointer& (0+255),f,b
  1949   0035AE  2BB0               	incf	(_timer_high_pointer+1)& (0+255),f,b
  1950   0035B0                     
  1951                           ; BSR set to: 0
  1952                           ;timers.c: 107:     timer_low_pointer ++;
  1953   0035B0  4BAD               	infsnz	_timer_low_pointer& (0+255),f,b
  1954   0035B2  2BAE               	incf	(_timer_low_pointer+1)& (0+255),f,b
  1955   0035B4                     
  1956                           ; BSR set to: 0
  1957                           ;timers.c: 108:     manoeuvre_pointer ++;
  1958   0035B4  4BAB               	infsnz	_manoeuvre_pointer& (0+255),f,b
  1959   0035B6  2BAC               	incf	(_manoeuvre_pointer+1)& (0+255),f,b
  1960   0035B8                     
  1961                           ; BSR set to: 0
  1962                           ;timers.c: 110:     manoeuvre_count ++;
  1963   0035B8  0101               	movlb	1	; () banked
  1964   0035BA  2BA4               	incf	_manoeuvre_count& (0+255),f,b
  1965   0035BC                     
  1966                           ; BSR set to: 1
  1967   0035BC  0012               	return		;funcret
  1968   0035BE                     __end_of_write_trail:
  1969                           	callstack 0
  1970                           
  1971 ;; *************** function _wait_for_wall *****************
  1972 ;; Defined at:
  1973 ;;		line 162 in file "color.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;  p               1   12[COMRAM] PTR struct RGBC_val
  1976 ;;		 -> main@RGBC_colour(8), 
  1977 ;;  loss            1   13[COMRAM] unsigned char 
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1989 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1991 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1992 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1993 ;;Total ram usage:        4 bytes
  1994 ;; Hardware stack levels used: 1
  1995 ;; Hardware stack levels required when called: 5
  1996 ;; This function calls:
  1997 ;;		_getRGBCval
  1998 ;; This function is called by:
  1999 ;;		_forward_navigation
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text6
  2004   0034FE                     __ptext6:
  2005                           	callstack 0
  2006   0034FE                     _wait_for_wall:
  2007                           	callstack 24
  2008   0034FE                     
  2009                           ;color.c: 162: void wait_for_wall(struct RGBC_val *p, unsigned char loss);color.c: 163: 
      +                          {;color.c: 164:     while (!loss) {
  2010   0034FE  EF98  F01A         	goto	l3788
  2011   003502                     l3782:
  2012                           
  2013                           ;color.c: 165:         getRGBCval(p);
  2014   003502  C00D  F00C         	movff	wait_for_wall@p,getRGBCval@p
  2015   003506  EC46  F019         	call	_getRGBCval	;wreg free
  2016   00350A  500D               	movf	wait_for_wall@p^0,w,c
  2017   00350C  6ED9               	movwf	fsr2l,c
  2018   00350E  6ADA               	clrf	fsr2h,c
  2019   003510  0E04               	movlw	4
  2020   003512  26D9               	addwf	fsr2l,f,c
  2021   003514  0E01               	movlw	1
  2022   003516  50DB               	movf	plusw2,w,c
  2023   003518  E107               	bnz	u3141
  2024   00351A  0E1E               	movlw	30
  2025   00351C  5CDE               	subwf	postinc2,w,c
  2026   00351E  B0D8               	btfsc	status,0,c
  2027   003520  EF94  F01A         	goto	u3141
  2028   003524  EF96  F01A         	goto	u3140
  2029   003528                     u3141:
  2030   003528  EF98  F01A         	goto	l3788
  2031   00352C                     u3140:
  2032   00352C  EFA0  F01A         	goto	l96
  2033   003530                     l3788:
  2034                           
  2035                           ;color.c: 164:     while (!loss) {
  2036   003530  500E               	movf	wait_for_wall@loss^0,w,c
  2037   003532  B4D8               	btfsc	status,2,c
  2038   003534  EF9E  F01A         	goto	u3151
  2039   003538  EFA0  F01A         	goto	u3150
  2040   00353C                     u3151:
  2041   00353C  EF81  F01A         	goto	l3782
  2042   003540                     u3150:
  2043   003540                     l96:
  2044   003540  0012               	return		;funcret
  2045   003542                     __end_of_wait_for_wall:
  2046                           	callstack 0
  2047                           
  2048 ;; *************** function _toggle_tricolour_LED *****************
  2049 ;; Defined at:
  2050 ;;		line 84 in file "buggy_lights.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;		None
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;		None
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      void 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2067 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2068 ;;Total ram usage:        1 bytes
  2069 ;; Hardware stack levels used: 1
  2070 ;; Hardware stack levels required when called: 1
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_forward_navigation
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text7
  2079   002A0E                     __ptext7:
  2080                           	callstack 0
  2081   002A0E                     _toggle_tricolour_LED:
  2082                           	callstack 28
  2083   002A0E                     
  2084                           ;buggy_lights.c: 88:         LATGbits.LATG1 = !LATGbits.LATG1;
  2085   002A0E  A27F               	btfss	127,1,c	;volatile
  2086   002A10  EF0C  F015         	goto	u3011
  2087   002A14  EF10  F015         	goto	u3010
  2088   002A18                     u3011:
  2089   002A18  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2090   002A1A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2091   002A1C  EF11  F015         	goto	u3028
  2092   002A20                     u3010:
  2093   002A20  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2094   002A22                     u3028:
  2095   002A22  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2096   002A24  507F               	movf	127,w,c	;volatile
  2097   002A26  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2098   002A28  0BFD               	andlw	-3
  2099   002A2A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2100   002A2C  6E7F               	movwf	127,c	;volatile
  2101                           
  2102                           ;buggy_lights.c: 89:         LATAbits.LATA4 = !LATAbits.LATA4;
  2103   002A2E  A879               	btfss	121,4,c	;volatile
  2104   002A30  EF1C  F015         	goto	u3031
  2105   002A34  EF20  F015         	goto	u3030
  2106   002A38                     u3031:
  2107   002A38  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2108   002A3A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2109   002A3C  EF21  F015         	goto	u3048
  2110   002A40                     u3030:
  2111   002A40  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2112   002A42                     u3048:
  2113   002A42  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  2114   002A44  5079               	movf	121,w,c	;volatile
  2115   002A46  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2116   002A48  0BEF               	andlw	-17
  2117   002A4A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2118   002A4C  6E79               	movwf	121,c	;volatile
  2119                           
  2120                           ;buggy_lights.c: 90:         LATFbits.LATF7 = !LATFbits.LATF7;
  2121   002A4E  AE7E               	btfss	126,7,c	;volatile
  2122   002A50  EF2C  F015         	goto	u3051
  2123   002A54  EF30  F015         	goto	u3050
  2124   002A58                     u3051:
  2125   002A58  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2126   002A5A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2127   002A5C  EF31  F015         	goto	u3068
  2128   002A60                     u3050:
  2129   002A60  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2130   002A62                     u3068:
  2131   002A62  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2132   002A64  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2133   002A66  507E               	movf	126,w,c	;volatile
  2134   002A68  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2135   002A6A  0B7F               	andlw	-129
  2136   002A6C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2137   002A6E  6E7E               	movwf	126,c	;volatile
  2138                           
  2139                           ;buggy_lights.c: 93:         LATGbits.LATG0 = !LATGbits.LATG0;
  2140   002A70  A07F               	btfss	127,0,c	;volatile
  2141   002A72  EF3D  F015         	goto	u3071
  2142   002A76  EF41  F015         	goto	u3070
  2143   002A7A                     u3071:
  2144   002A7A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2145   002A7C  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2146   002A7E  EF42  F015         	goto	u3088
  2147   002A82                     u3070:
  2148   002A82  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2149   002A84                     u3088:
  2150   002A84  507F               	movf	127,w,c	;volatile
  2151   002A86  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2152   002A88  0BFE               	andlw	-2
  2153   002A8A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2154   002A8C  6E7F               	movwf	127,c	;volatile
  2155                           
  2156                           ;buggy_lights.c: 94:         LATEbits.LATE7 = !LATEbits.LATE7;
  2157   002A8E  AE7D               	btfss	125,7,c	;volatile
  2158   002A90  EF4C  F015         	goto	u3091
  2159   002A94  EF50  F015         	goto	u3090
  2160   002A98                     u3091:
  2161   002A98  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2162   002A9A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2163   002A9C  EF51  F015         	goto	u3108
  2164   002AA0                     u3090:
  2165   002AA0  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2166   002AA2                     u3108:
  2167   002AA2  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2168   002AA4  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2169   002AA6  507D               	movf	125,w,c	;volatile
  2170   002AA8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2171   002AAA  0B7F               	andlw	-129
  2172   002AAC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2173   002AAE  6E7D               	movwf	125,c	;volatile
  2174                           
  2175                           ;buggy_lights.c: 95:         LATAbits.LATA3 = !LATAbits.LATA3;
  2176   002AB0  A679               	btfss	121,3,c	;volatile
  2177   002AB2  EF5D  F015         	goto	u3111
  2178   002AB6  EF61  F015         	goto	u3110
  2179   002ABA                     u3111:
  2180   002ABA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2181   002ABC  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2182   002ABE  EF62  F015         	goto	u3128
  2183   002AC2                     u3110:
  2184   002AC2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2185   002AC4                     u3128:
  2186   002AC4  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2187   002AC6  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2188   002AC8  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2189   002ACA  5079               	movf	121,w,c	;volatile
  2190   002ACC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2191   002ACE  0BF7               	andlw	-9
  2192   002AD0  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2193   002AD2  6E79               	movwf	121,c	;volatile
  2194   002AD4  0012               	return		;funcret
  2195   002AD6                     __end_of_toggle_tricolour_LED:
  2196                           	callstack 0
  2197                           
  2198 ;; *************** function _stop_timer *****************
  2199 ;; Defined at:
  2200 ;;		line 38 in file "timers.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;		None
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;		None
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      void 
  2207 ;; Registers used:
  2208 ;;		None
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2218 ;;Total ram usage:        0 bytes
  2219 ;; Hardware stack levels used: 1
  2220 ;; Hardware stack levels required when called: 1
  2221 ;; This function calls:
  2222 ;;		Nothing
  2223 ;; This function is called by:
  2224 ;;		_forward_navigation
  2225 ;;		_return_to_sender
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           	psect	text8
  2230   0037E0                     __ptext8:
  2231                           	callstack 0
  2232   0037E0                     _stop_timer:
  2233                           	callstack 28
  2234   0037E0                     
  2235                           ;timers.c: 40:     T0CON0bits.T0EN=0;
  2236   0037E0  9ED5               	bcf	213,7,c	;volatile
  2237   0037E2  0012               	return		;funcret
  2238   0037E4                     __end_of_stop_timer:
  2239                           	callstack 0
  2240                           
  2241 ;; *************** function _stop *****************
  2242 ;; Defined at:
  2243 ;;		line 93 in file "dc_motor.c"
  2244 ;; Parameters:    Size  Location     Type
  2245 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  2246 ;;		 -> main@motorL(9), 
  2247 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  2248 ;;		 -> main@motorR(9), 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      void 
  2253 ;; Registers used:
  2254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2262 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2263 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2264 ;;Total ram usage:        3 bytes
  2265 ;; Hardware stack levels used: 1
  2266 ;; Hardware stack levels required when called: 3
  2267 ;; This function calls:
  2268 ;;		_setMotorPWM
  2269 ;; This function is called by:
  2270 ;;		_forward_navigation
  2271 ;;		_turnLeft90
  2272 ;;		_turnRight90
  2273 ;;		_turnLeft135
  2274 ;;		_turnRight135
  2275 ;;		_UTurn
  2276 ;;		_headbuttReverse
  2277 ;;		_squareReverse
  2278 ;;		_return_to_sender
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           	psect	text9
  2283   002E38                     __ptext9:
  2284                           	callstack 0
  2285   002E38                     _stop:
  2286                           	callstack 26
  2287   002E38                     
  2288                           ;dc_motor.c: 93: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 94: {;dc_motor.c: 95:
      +                               while ((mL->power>0) || (mR->power>0)){
  2289   002E38  EF4C  F017         	goto	l4012
  2290   002E3C                     l3998:
  2291                           
  2292                           ;dc_motor.c: 96:         if (mL->power>0) {mL->power--;}
  2293   002E3C  5013               	movf	stop@mL^0,w,c
  2294   002E3E  6ED9               	movwf	fsr2l,c
  2295   002E40  6ADA               	clrf	fsr2h,c
  2296   002E42  50DF               	movf	indf2,w,c
  2297   002E44  B4D8               	btfsc	status,2,c
  2298   002E46  EF27  F017         	goto	u3601
  2299   002E4A  EF29  F017         	goto	u3600
  2300   002E4E                     u3601:
  2301   002E4E  EF2D  F017         	goto	l4002
  2302   002E52                     u3600:
  2303   002E52  5013               	movf	stop@mL^0,w,c
  2304   002E54  6ED9               	movwf	fsr2l,c
  2305   002E56  6ADA               	clrf	fsr2h,c
  2306   002E58  06DF               	decf	indf2,f,c
  2307   002E5A                     l4002:
  2308                           
  2309                           ;dc_motor.c: 97:         if (mR->power>0) {mR->power--;}
  2310   002E5A  5014               	movf	stop@mR^0,w,c
  2311   002E5C  6ED9               	movwf	fsr2l,c
  2312   002E5E  6ADA               	clrf	fsr2h,c
  2313   002E60  50DF               	movf	indf2,w,c
  2314   002E62  B4D8               	btfsc	status,2,c
  2315   002E64  EF36  F017         	goto	u3611
  2316   002E68  EF38  F017         	goto	u3610
  2317   002E6C                     u3611:
  2318   002E6C  EF3C  F017         	goto	l4006
  2319   002E70                     u3610:
  2320   002E70  5014               	movf	stop@mR^0,w,c
  2321   002E72  6ED9               	movwf	fsr2l,c
  2322   002E74  6ADA               	clrf	fsr2h,c
  2323   002E76  06DF               	decf	indf2,f,c
  2324   002E78                     l4006:
  2325                           
  2326                           ;dc_motor.c: 98:         setMotorPWM(mL);
  2327   002E78  C013  F00E         	movff	stop@mL,setMotorPWM@m
  2328   002E7C  ECD3  F012         	call	_setMotorPWM	;wreg free
  2329   002E80                     
  2330                           ;dc_motor.c: 99:         setMotorPWM(mR);
  2331   002E80  C014  F00E         	movff	stop@mR,setMotorPWM@m
  2332   002E84  ECD3  F012         	call	_setMotorPWM	;wreg free
  2333   002E88                     
  2334                           ;dc_motor.c: 100:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  2335   002E88  0EA7               	movlw	167
  2336   002E8A  6E15               	movwf	??_stop^0,c
  2337   002E8C  0E3A               	movlw	58
  2338   002E8E                     u3947:
  2339   002E8E  2EE8               	decfsz	wreg,f,c
  2340   002E90  D7FE               	bra	u3947
  2341   002E92  2E15               	decfsz	??_stop^0,f,c
  2342   002E94  D7FC               	bra	u3947
  2343   002E96  D000               	nop2	
  2344   002E98                     l4012:
  2345                           
  2346                           ;dc_motor.c: 95:     while ((mL->power>0) || (mR->power>0)){
  2347   002E98  5013               	movf	stop@mL^0,w,c
  2348   002E9A  6ED9               	movwf	fsr2l,c
  2349   002E9C  6ADA               	clrf	fsr2h,c
  2350   002E9E  50DF               	movf	indf2,w,c
  2351   002EA0  A4D8               	btfss	status,2,c
  2352   002EA2  EF55  F017         	goto	u3621
  2353   002EA6  EF57  F017         	goto	u3620
  2354   002EAA                     u3621:
  2355   002EAA  EF1E  F017         	goto	l3998
  2356   002EAE                     u3620:
  2357   002EAE  5014               	movf	stop@mR^0,w,c
  2358   002EB0  6ED9               	movwf	fsr2l,c
  2359   002EB2  6ADA               	clrf	fsr2h,c
  2360   002EB4  50DF               	movf	indf2,w,c
  2361   002EB6  A4D8               	btfss	status,2,c
  2362   002EB8  EF60  F017         	goto	u3631
  2363   002EBC  EF62  F017         	goto	u3630
  2364   002EC0                     u3631:
  2365   002EC0  EF1E  F017         	goto	l3998
  2366   002EC4                     u3630:
  2367   002EC4  0012               	return		;funcret
  2368   002EC6                     __end_of_stop:
  2369                           	callstack 0
  2370                           
  2371 ;; *************** function _setMotorPWM *****************
  2372 ;; Defined at:
  2373 ;;		line 68 in file "dc_motor.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;  m               1   13[COMRAM] PTR struct DC_motor
  2376 ;;		 -> main@motorR(9), main@motorL(9), 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  negDuty         1   17[COMRAM] unsigned char 
  2379 ;;  posDuty         1   16[COMRAM] unsigned char 
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  1    wreg      void 
  2382 ;; Registers used:
  2383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2389 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2390 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2391 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2392 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2393 ;;Total ram usage:        5 bytes
  2394 ;; Hardware stack levels used: 1
  2395 ;; Hardware stack levels required when called: 2
  2396 ;; This function calls:
  2397 ;;		___lwdiv
  2398 ;;		___wmul
  2399 ;; This function is called by:
  2400 ;;		_stop
  2401 ;;		_turnLeft
  2402 ;;		_turnRight
  2403 ;;		_fullSpeedAhead
  2404 ;;		_fullSpeedReverse
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text10
  2409   0025A6                     __ptext10:
  2410                           	callstack 0
  2411   0025A6                     _setMotorPWM:
  2412                           	callstack 26
  2413   0025A6                     
  2414                           ;dc_motor.c: 68: void setMotorPWM(DC_motor *m);dc_motor.c: 69: {;dc_motor.c: 70:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 72:     if(m->brakemode) {
  2415   0025A6  500E               	movf	setMotorPWM@m^0,w,c
  2416   0025A8  6ED9               	movwf	fsr2l,c
  2417   0025AA  6ADA               	clrf	fsr2h,c
  2418   0025AC  0E02               	movlw	2
  2419   0025AE  26D9               	addwf	fsr2l,f,c
  2420   0025B0  50DF               	movf	indf2,w,c
  2421   0025B2  B4D8               	btfsc	status,2,c
  2422   0025B4  EFDE  F012         	goto	u2551
  2423   0025B8  EFE0  F012         	goto	u2550
  2424   0025BC                     u2551:
  2425   0025BC  EF10  F013         	goto	l3408
  2426   0025C0                     u2550:
  2427   0025C0                     
  2428                           ;dc_motor.c: 73:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  2429   0025C0  500E               	movf	setMotorPWM@m^0,w,c
  2430   0025C2  6ED9               	movwf	fsr2l,c
  2431   0025C4  6ADA               	clrf	fsr2h,c
  2432   0025C6  50DF               	movf	indf2,w,c
  2433   0025C8  6E0F               	movwf	??_setMotorPWM^0,c
  2434   0025CA  500F               	movf	??_setMotorPWM^0,w,c
  2435   0025CC  6E01               	movwf	___wmul@multiplier^0,c
  2436   0025CE  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2437   0025D0  500E               	movf	setMotorPWM@m^0,w,c
  2438   0025D2  6ED9               	movwf	fsr2l,c
  2439   0025D4  6ADA               	clrf	fsr2h,c
  2440   0025D6  0E03               	movlw	3
  2441   0025D8  26D9               	addwf	fsr2l,f,c
  2442   0025DA  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2443   0025DE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2444   0025E2  EC67  F01B         	call	___wmul	;wreg free
  2445   0025E6  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2446   0025EA  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2447   0025EE  0E00               	movlw	0
  2448   0025F0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2449   0025F2  0E64               	movlw	100
  2450   0025F4  6E09               	movwf	___lwdiv@divisor^0,c
  2451   0025F6  EC1A  F018         	call	___lwdiv	;wreg free
  2452   0025FA  500E               	movf	setMotorPWM@m^0,w,c
  2453   0025FC  6ED9               	movwf	fsr2l,c
  2454   0025FE  6ADA               	clrf	fsr2h,c
  2455   002600  0E03               	movlw	3
  2456   002602  26D9               	addwf	fsr2l,f,c
  2457   002604  50DF               	movf	indf2,w,c
  2458   002606  6E10               	movwf	(??_setMotorPWM+1)^0,c
  2459   002608  5007               	movf	?___lwdiv^0,w,c
  2460   00260A  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  2461   00260C  6E11               	movwf	setMotorPWM@posDuty^0,c
  2462   00260E                     
  2463                           ;dc_motor.c: 74:         negDuty=(unsigned char)(m->PWMperiod);
  2464   00260E  500E               	movf	setMotorPWM@m^0,w,c
  2465   002610  6ED9               	movwf	fsr2l,c
  2466   002612  6ADA               	clrf	fsr2h,c
  2467   002614  0E03               	movlw	3
  2468   002616  26D9               	addwf	fsr2l,f,c
  2469   002618  50DF               	movf	indf2,w,c
  2470   00261A  6E12               	movwf	setMotorPWM@negDuty^0,c
  2471                           
  2472                           ;dc_motor.c: 75:     }
  2473   00261C  EF31  F013         	goto	l3412
  2474   002620                     l3408:
  2475                           
  2476                           ;dc_motor.c: 77:         posDuty=0;
  2477   002620  0E00               	movlw	0
  2478   002622  6E11               	movwf	setMotorPWM@posDuty^0,c
  2479   002624                     
  2480                           ;dc_motor.c: 78:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  2481   002624  500E               	movf	setMotorPWM@m^0,w,c
  2482   002626  6ED9               	movwf	fsr2l,c
  2483   002628  6ADA               	clrf	fsr2h,c
  2484   00262A  50DF               	movf	indf2,w,c
  2485   00262C  6E0F               	movwf	??_setMotorPWM^0,c
  2486   00262E  500F               	movf	??_setMotorPWM^0,w,c
  2487   002630  6E01               	movwf	___wmul@multiplier^0,c
  2488   002632  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2489   002634  500E               	movf	setMotorPWM@m^0,w,c
  2490   002636  6ED9               	movwf	fsr2l,c
  2491   002638  6ADA               	clrf	fsr2h,c
  2492   00263A  0E03               	movlw	3
  2493   00263C  26D9               	addwf	fsr2l,f,c
  2494   00263E  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2495   002642  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2496   002646  EC67  F01B         	call	___wmul	;wreg free
  2497   00264A  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2498   00264E  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2499   002652  0E00               	movlw	0
  2500   002654  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2501   002656  0E64               	movlw	100
  2502   002658  6E09               	movwf	___lwdiv@divisor^0,c
  2503   00265A  EC1A  F018         	call	___lwdiv	;wreg free
  2504   00265E  5007               	movf	?___lwdiv^0,w,c
  2505   002660  6E12               	movwf	setMotorPWM@negDuty^0,c
  2506   002662                     l3412:
  2507                           
  2508                           ;dc_motor.c: 81:     if (m->direction) {
  2509   002662  500E               	movf	setMotorPWM@m^0,w,c
  2510   002664  6ED9               	movwf	fsr2l,c
  2511   002666  6ADA               	clrf	fsr2h,c
  2512   002668  0E01               	movlw	1
  2513   00266A  26D9               	addwf	fsr2l,f,c
  2514   00266C  50DF               	movf	indf2,w,c
  2515   00266E  B4D8               	btfsc	status,2,c
  2516   002670  EF3C  F013         	goto	u2561
  2517   002674  EF3E  F013         	goto	u2560
  2518   002678                     u2561:
  2519   002678  EF5E  F013         	goto	l3416
  2520   00267C                     u2560:
  2521   00267C                     
  2522                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=posDuty;
  2523   00267C  500E               	movf	setMotorPWM@m^0,w,c
  2524   00267E  6ED9               	movwf	fsr2l,c
  2525   002680  6ADA               	clrf	fsr2h,c
  2526   002682  0E05               	movlw	5
  2527   002684  26D9               	addwf	fsr2l,f,c
  2528   002686  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2529   00268A  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2530   00268E  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2531   002692  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2532   002696  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2533                           
  2534                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=negDuty;
  2535   00269A  500E               	movf	setMotorPWM@m^0,w,c
  2536   00269C  6ED9               	movwf	fsr2l,c
  2537   00269E  6ADA               	clrf	fsr2h,c
  2538   0026A0  0E07               	movlw	7
  2539   0026A2  26D9               	addwf	fsr2l,f,c
  2540   0026A4  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2541   0026A8  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2542   0026AC  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2543   0026B0  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2544   0026B4  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2545                           
  2546                           ;dc_motor.c: 84:     } else {
  2547   0026B8  EF7C  F013         	goto	l217
  2548   0026BC                     l3416:
  2549                           
  2550                           ;dc_motor.c: 85:         *(m->posDutyHighByte)=negDuty;
  2551   0026BC  500E               	movf	setMotorPWM@m^0,w,c
  2552   0026BE  6ED9               	movwf	fsr2l,c
  2553   0026C0  6ADA               	clrf	fsr2h,c
  2554   0026C2  0E05               	movlw	5
  2555   0026C4  26D9               	addwf	fsr2l,f,c
  2556   0026C6  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2557   0026CA  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2558   0026CE  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2559   0026D2  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2560   0026D6  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  2561                           
  2562                           ;dc_motor.c: 86:         *(m->negDutyHighByte)=posDuty;
  2563   0026DA  500E               	movf	setMotorPWM@m^0,w,c
  2564   0026DC  6ED9               	movwf	fsr2l,c
  2565   0026DE  6ADA               	clrf	fsr2h,c
  2566   0026E0  0E07               	movlw	7
  2567   0026E2  26D9               	addwf	fsr2l,f,c
  2568   0026E4  CFDE F00F          	movff	postinc2,??_setMotorPWM
  2569   0026E8  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  2570   0026EC  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  2571   0026F0  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2572   0026F4  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  2573   0026F8                     l217:
  2574   0026F8  0012               	return		;funcret
  2575   0026FA                     __end_of_setMotorPWM:
  2576                           	callstack 0
  2577                           
  2578 ;; *************** function ___wmul *****************
  2579 ;; Defined at:
  2580 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  multiplier      2    0[COMRAM] unsigned int 
  2583 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  product         2    4[COMRAM] unsigned int 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  2    0[COMRAM] unsigned int 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, status,0, prodl, prodh
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2595 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2598 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2599 ;;Total ram usage:        6 bytes
  2600 ;; Hardware stack levels used: 1
  2601 ;; Hardware stack levels required when called: 1
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_setMotorPWM
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text11
  2610   0036CE                     __ptext11:
  2611                           	callstack 0
  2612   0036CE                     ___wmul:
  2613                           	callstack 26
  2614   0036CE  5001               	movf	___wmul@multiplier^0,w,c
  2615   0036D0  0203               	mulwf	___wmul@multiplicand^0,c
  2616   0036D2  CFF3 F005          	movff	prodl,___wmul@product
  2617   0036D6  CFF4 F006          	movff	prodh,___wmul@product+1
  2618   0036DA  5001               	movf	___wmul@multiplier^0,w,c
  2619   0036DC  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2620   0036DE  50F3               	movf	243,w,c
  2621   0036E0  2606               	addwf	(___wmul@product+1)^0,f,c
  2622   0036E2  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2623   0036E4  0203               	mulwf	___wmul@multiplicand^0,c
  2624   0036E6  50F3               	movf	243,w,c
  2625   0036E8  2606               	addwf	(___wmul@product+1)^0,f,c
  2626   0036EA  C005  F001         	movff	___wmul@product,?___wmul
  2627   0036EE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2628   0036F2  0012               	return		;funcret
  2629   0036F4                     __end_of___wmul:
  2630                           	callstack 0
  2631                           
  2632 ;; *************** function _sendRGBCvalSerial4 *****************
  2633 ;; Defined at:
  2634 ;;		line 75 in file "serial.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  col_val         1   57[COMRAM] PTR struct RGBC_val
  2637 ;;		 -> main@RGBC_colour(8), 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  tempStr        26   58[COMRAM] unsigned char [26]
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2649 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2650 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2652 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;Total ram usage:       27 bytes
  2654 ;; Hardware stack levels used: 1
  2655 ;; Hardware stack levels required when called: 6
  2656 ;; This function calls:
  2657 ;;		_sendStringSerial4
  2658 ;;		_sprintf
  2659 ;; This function is called by:
  2660 ;;		_main
  2661 ;;		_forward_navigation
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text12
  2666   0031D8                     __ptext12:
  2667                           	callstack 0
  2668   0031D8                     _sendRGBCvalSerial4:
  2669                           	callstack 24
  2670   0031D8                     
  2671                           ;serial.c: 76:     char tempStr[26];;serial.c: 78:     sprintf(tempStr, "%u %u %u %u \r"
      +                          , col_val->R, col_val->G, col_val->B, col_val->C);
  2672   0031D8  0E3B               	movlw	low sendRGBCvalSerial4@tempStr
  2673   0031DA  6E20               	movwf	sprintf@s^0,c
  2674   0031DC  6A21               	clrf	(sprintf@s+1)^0,c
  2675   0031DE  0E01               	movlw	low STR_5
  2676   0031E0  6E22               	movwf	sprintf@fmt^0,c
  2677   0031E2  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2678   0031E4  6ED9               	movwf	fsr2l,c
  2679   0031E6  6ADA               	clrf	fsr2h,c
  2680   0031E8  CFDE F023          	movff	postinc2,?_sprintf+3
  2681   0031EC  CFDD F024          	movff	postdec2,?_sprintf+4
  2682   0031F0  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2683   0031F2  6ED9               	movwf	fsr2l,c
  2684   0031F4  6ADA               	clrf	fsr2h,c
  2685   0031F6  0E02               	movlw	2
  2686   0031F8  26D9               	addwf	fsr2l,f,c
  2687   0031FA  CFDE F025          	movff	postinc2,?_sprintf+5
  2688   0031FE  CFDD F026          	movff	postdec2,?_sprintf+6
  2689   003202  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2690   003204  6ED9               	movwf	fsr2l,c
  2691   003206  6ADA               	clrf	fsr2h,c
  2692   003208  0E04               	movlw	4
  2693   00320A  26D9               	addwf	fsr2l,f,c
  2694   00320C  CFDE F027          	movff	postinc2,?_sprintf+7
  2695   003210  CFDD F028          	movff	postdec2,?_sprintf+8
  2696   003214  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2697   003216  6ED9               	movwf	fsr2l,c
  2698   003218  6ADA               	clrf	fsr2h,c
  2699   00321A  0E06               	movlw	6
  2700   00321C  26D9               	addwf	fsr2l,f,c
  2701   00321E  CFDE F029          	movff	postinc2,?_sprintf+9
  2702   003222  CFDD F02A          	movff	postdec2,?_sprintf+10
  2703   003226  EC37  F01A         	call	_sprintf	;wreg free
  2704   00322A                     
  2705                           ;serial.c: 79:     sendStringSerial4(tempStr);
  2706   00322A  0E3B               	movlw	low sendRGBCvalSerial4@tempStr
  2707   00322C  6E02               	movwf	sendStringSerial4@string^0,c
  2708   00322E  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2709   003230  ECBB  F018         	call	_sendStringSerial4	;wreg free
  2710   003234  0012               	return		;funcret
  2711   003236                     __end_of_sendRGBCvalSerial4:
  2712                           	callstack 0
  2713                           
  2714 ;; *************** function _sendHSVvalSerial4 *****************
  2715 ;; Defined at:
  2716 ;;		line 85 in file "serial.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  col_val         1   57[COMRAM] PTR struct HSV_val
  2719 ;;		 -> main@HSV_colour(6), 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  tempStr        21   58[COMRAM] unsigned char [21]
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2731 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2732 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2734 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2735 ;;Total ram usage:       22 bytes
  2736 ;; Hardware stack levels used: 1
  2737 ;; Hardware stack levels required when called: 6
  2738 ;; This function calls:
  2739 ;;		_sendStringSerial4
  2740 ;;		_sprintf
  2741 ;; This function is called by:
  2742 ;;		_main
  2743 ;;		_forward_navigation
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text13
  2748   003422                     __ptext13:
  2749                           	callstack 0
  2750   003422                     _sendHSVvalSerial4:
  2751                           	callstack 24
  2752   003422                     
  2753                           ;serial.c: 86:     char tempStr[21];;serial.c: 88:     sprintf(tempStr, "%u %u %u \r", c
      +                          ol_val->H, col_val->S, col_val->V);
  2754   003422  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  2755   003424  6E20               	movwf	sprintf@s^0,c
  2756   003426  6A21               	clrf	(sprintf@s+1)^0,c
  2757   003428  0E04               	movlw	low (STR_5+3)
  2758   00342A  6E22               	movwf	sprintf@fmt^0,c
  2759   00342C  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  2760   00342E  6ED9               	movwf	fsr2l,c
  2761   003430  6ADA               	clrf	fsr2h,c
  2762   003432  CFDE F023          	movff	postinc2,?_sprintf+3
  2763   003436  CFDD F024          	movff	postdec2,?_sprintf+4
  2764   00343A  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  2765   00343C  6ED9               	movwf	fsr2l,c
  2766   00343E  6ADA               	clrf	fsr2h,c
  2767   003440  0E02               	movlw	2
  2768   003442  26D9               	addwf	fsr2l,f,c
  2769   003444  CFDE F025          	movff	postinc2,?_sprintf+5
  2770   003448  CFDD F026          	movff	postdec2,?_sprintf+6
  2771   00344C  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  2772   00344E  6ED9               	movwf	fsr2l,c
  2773   003450  6ADA               	clrf	fsr2h,c
  2774   003452  0E04               	movlw	4
  2775   003454  26D9               	addwf	fsr2l,f,c
  2776   003456  CFDE F027          	movff	postinc2,?_sprintf+7
  2777   00345A  CFDD F028          	movff	postdec2,?_sprintf+8
  2778   00345E  EC37  F01A         	call	_sprintf	;wreg free
  2779   003462                     
  2780                           ;serial.c: 89:     sendStringSerial4(tempStr);
  2781   003462  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  2782   003464  6E02               	movwf	sendStringSerial4@string^0,c
  2783   003466  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2784   003468  ECBB  F018         	call	_sendStringSerial4	;wreg free
  2785   00346C  0012               	return		;funcret
  2786   00346E                     __end_of_sendHSVvalSerial4:
  2787                           	callstack 0
  2788                           
  2789 ;; *************** function _sendArrayCharSerial4 *****************
  2790 ;; Defined at:
  2791 ;;		line 61 in file "serial.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  arr             2   57[COMRAM] PTR unsigned char 
  2794 ;;		 -> trail_manoeuvre(20), trail_timer_low(20), trail_timer_high(20), 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  i               2  162[BANK1 ] unsigned int 
  2797 ;;  tempStr       161    0[BANK1 ] unsigned char [161]
  2798 ;;  index           1  161[BANK1 ] unsigned char 
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2808 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2809 ;;      Locals:         0       0     164       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2810 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2811 ;;      Totals:         3       0     164       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2812 ;;Total ram usage:      167 bytes
  2813 ;; Hardware stack levels used: 1
  2814 ;; Hardware stack levels required when called: 6
  2815 ;; This function calls:
  2816 ;;		_sendStringSerial4
  2817 ;;		_sprintf
  2818 ;; This function is called by:
  2819 ;;		_forward_navigation
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text14
  2824   002FBE                     __ptext14:
  2825                           	callstack 0
  2826   002FBE                     _sendArrayCharSerial4:
  2827                           	callstack 23
  2828   002FBE                     
  2829                           ;serial.c: 63:     unsigned char index = 0;
  2830   002FBE  0E00               	movlw	0
  2831   002FC0  0101               	movlb	1	; () banked
  2832   002FC2  6FA1               	movwf	sendArrayCharSerial4@index& (0+255),b
  2833                           
  2834                           ;serial.c: 64:     char tempStr[20 * 8 + 1];;serial.c: 65:     for (unsigned int i = 0; 
      +                          i < 20; i++) {
  2835   002FC4  0E00               	movlw	0
  2836   002FC6  6FA3               	movwf	(sendArrayCharSerial4@i+1)& (0+255),b
  2837   002FC8  0E00               	movlw	0
  2838   002FCA  6FA2               	movwf	sendArrayCharSerial4@i& (0+255),b
  2839   002FCC                     l4476:
  2840                           
  2841                           ; BSR set to: 1
  2842                           ;serial.c: 66:         index += sprintf(&tempStr[index], "%d ", arr[i]);
  2843   002FCC  0E00               	movlw	low sendArrayCharSerial4@tempStr
  2844   002FCE  25A1               	addwf	sendArrayCharSerial4@index& (0+255),w,b
  2845   002FD0  6E20               	movwf	sprintf@s^0,c
  2846   002FD2  6A21               	clrf	(sprintf@s+1)^0,c
  2847   002FD4  0E01               	movlw	high sendArrayCharSerial4@tempStr
  2848   002FD6  2221               	addwfc	(sprintf@s+1)^0,f,c
  2849   002FD8  0E14               	movlw	low STR_2
  2850   002FDA  6E22               	movwf	sprintf@fmt^0,c
  2851   002FDC  51A2               	movf	sendArrayCharSerial4@i& (0+255),w,b
  2852   002FDE  243A               	addwf	sendArrayCharSerial4@arr^0,w,c
  2853   002FE0  6ED9               	movwf	fsr2l,c
  2854   002FE2  51A3               	movf	(sendArrayCharSerial4@i+1)& (0+255),w,b
  2855   002FE4  203B               	addwfc	(sendArrayCharSerial4@arr+1)^0,w,c
  2856   002FE6  6EDA               	movwf	fsr2h,c
  2857   002FE8  50DF               	movf	indf2,w,c
  2858   002FEA  6E3C               	movwf	??_sendArrayCharSerial4^0,c
  2859   002FEC  503C               	movf	??_sendArrayCharSerial4^0,w,c
  2860   002FEE  6E23               	movwf	(?_sprintf+3)^0,c
  2861   002FF0  6A24               	clrf	(?_sprintf+4)^0,c
  2862   002FF2  EC37  F01A         	call	_sprintf	;wreg free
  2863   002FF6  5020               	movf	?_sprintf^0,w,c
  2864   002FF8  0101               	movlb	1	; () banked
  2865   002FFA  27A1               	addwf	sendArrayCharSerial4@index& (0+255),f,b
  2866   002FFC                     
  2867                           ; BSR set to: 1
  2868                           ;serial.c: 67:     }
  2869   002FFC  4BA2               	infsnz	sendArrayCharSerial4@i& (0+255),f,b
  2870   002FFE  2BA3               	incf	(sendArrayCharSerial4@i+1)& (0+255),f,b
  2871   003000                     
  2872                           ; BSR set to: 1
  2873   003000  51A3               	movf	(sendArrayCharSerial4@i+1)& (0+255),w,b
  2874   003002  E109               	bnz	u3820
  2875   003004  0E14               	movlw	20
  2876   003006  5DA2               	subwf	sendArrayCharSerial4@i& (0+255),w,b
  2877   003008  A0D8               	btfss	status,0,c
  2878   00300A  EF09  F018         	goto	u3821
  2879   00300E  EF0B  F018         	goto	u3820
  2880   003012                     u3821:
  2881   003012  EFE6  F017         	goto	l4476
  2882   003016                     u3820:
  2883   003016                     
  2884                           ; BSR set to: 1
  2885                           ;serial.c: 68:     sendStringSerial4(tempStr);
  2886   003016  0E00               	movlw	low sendArrayCharSerial4@tempStr
  2887   003018  6E02               	movwf	sendStringSerial4@string^0,c
  2888   00301A  0E01               	movlw	high sendArrayCharSerial4@tempStr
  2889   00301C  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  2890   00301E  ECBB  F018         	call	_sendStringSerial4	;wreg free
  2891                           
  2892                           ;serial.c: 69:     sendStringSerial4(" \r");
  2893   003022  0E11               	movlw	low (STR_1+2)
  2894   003024  6E02               	movwf	sendStringSerial4@string^0,c
  2895   003026  5002               	movf	sendStringSerial4@string^0,w,c
  2896   003028  A4D8               	btfss	status,2,c
  2897   00302A  0E0E               	movlw	high __smallconst
  2898   00302C  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  2899   00302E  ECBB  F018         	call	_sendStringSerial4	;wreg free
  2900   003032  0012               	return		;funcret
  2901   003034                     __end_of_sendArrayCharSerial4:
  2902                           	callstack 0
  2903                           
  2904 ;; *************** function _sprintf *****************
  2905 ;; Defined at:
  2906 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  s               2   31[COMRAM] PTR unsigned char 
  2909 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), sendArrayCharSerial4@tempStr(161), sendIntSerial4
      +@string(17), 
  2910 ;;  fmt             1   33[COMRAM] PTR const unsigned char 
  2911 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  f              12   45[COMRAM] struct _IO_FILE
  2914 ;;  ret             2   42[COMRAM] int 
  2915 ;;  ap              1   44[COMRAM] PTR void [1]
  2916 ;;		 -> ?_sprintf(2), 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  2   31[COMRAM] int 
  2919 ;; Registers used:
  2920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2926 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2927 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2929 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2930 ;;Total ram usage:       26 bytes
  2931 ;; Hardware stack levels used: 1
  2932 ;; Hardware stack levels required when called: 5
  2933 ;; This function calls:
  2934 ;;		_vfprintf
  2935 ;; This function is called by:
  2936 ;;		_sendIntSerial4
  2937 ;;		_sendArrayCharSerial4
  2938 ;;		_sendRGBCvalSerial4
  2939 ;;		_sendHSVvalSerial4
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text15
  2944   00346E                     __ptext15:
  2945                           	callstack 0
  2946   00346E                     _sprintf:
  2947                           	callstack 24
  2948   00346E  0E23               	movlw	low (?_sprintf+3)
  2949   003470  6E2D               	movwf	sprintf@ap^0,c
  2950   003472  C020  F02E         	movff	sprintf@s,sprintf@f
  2951   003476  C021  F02F         	movff	sprintf@s+1,sprintf@f+1
  2952   00347A  0E00               	movlw	0
  2953   00347C  6E32               	movwf	(sprintf@f+4)^0,c
  2954   00347E  0E00               	movlw	0
  2955   003480  6E31               	movwf	(sprintf@f+3)^0,c
  2956   003482  0E00               	movlw	0
  2957   003484  6E39               	movwf	(sprintf@f+11)^0,c
  2958   003486  0E00               	movlw	0
  2959   003488  6E38               	movwf	(sprintf@f+10)^0,c
  2960   00348A  0E2E               	movlw	low sprintf@f
  2961   00348C  6E1C               	movwf	vfprintf@fp^0,c
  2962   00348E  C022  F01D         	movff	sprintf@fmt,vfprintf@fmt
  2963   003492  0E2D               	movlw	low sprintf@ap
  2964   003494  6E1E               	movwf	vfprintf@ap^0,c
  2965   003496  EC1B  F019         	call	_vfprintf	;wreg free
  2966   00349A  C01C  F02B         	movff	?_vfprintf,sprintf@ret
  2967   00349E  C01D  F02C         	movff	?_vfprintf+1,sprintf@ret+1
  2968   0034A2  5031               	movf	(sprintf@f+3)^0,w,c
  2969   0034A4  2420               	addwf	sprintf@s^0,w,c
  2970   0034A6  6ED9               	movwf	fsr2l,c
  2971   0034A8  5032               	movf	(sprintf@f+4)^0,w,c
  2972   0034AA  2021               	addwfc	(sprintf@s+1)^0,w,c
  2973   0034AC  6EDA               	movwf	fsr2h,c
  2974   0034AE  6ADF               	clrf	indf2,c
  2975   0034B0  C02B  F020         	movff	sprintf@ret,?_sprintf
  2976   0034B4  C02C  F021         	movff	sprintf@ret+1,?_sprintf+1
  2977   0034B8  0012               	return		;funcret
  2978   0034BA                     __end_of_sprintf:
  2979                           	callstack 0
  2980                           
  2981 ;; *************** function _vfprintf *****************
  2982 ;; Defined at:
  2983 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  fp              1   27[COMRAM] PTR struct _IO_FILE
  2986 ;;		 -> sprintf@f(12), 
  2987 ;;  fmt             1   28[COMRAM] PTR const unsigned char 
  2988 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  2989 ;;  ap              1   29[COMRAM] PTR PTR void 
  2990 ;;		 -> sprintf@ap(1), 
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;  cfmt            1   30[COMRAM] PTR unsigned char 
  2993 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  2   27[COMRAM] int 
  2996 ;; Registers used:
  2997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3003 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3006 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3007 ;;Total ram usage:        4 bytes
  3008 ;; Hardware stack levels used: 1
  3009 ;; Hardware stack levels required when called: 4
  3010 ;; This function calls:
  3011 ;;		_vfpfcnvrt
  3012 ;; This function is called by:
  3013 ;;		_sprintf
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text16
  3018   003236                     __ptext16:
  3019                           	callstack 0
  3020   003236                     _vfprintf:
  3021                           	callstack 24
  3022   003236                     
  3023                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  3024   003236  C01D  F01F         	movff	vfprintf@fmt,vfprintf@cfmt
  3025   00323A                     
  3026                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  3027   00323A  0E00               	movlw	0
  3028   00323C  0100               	movlb	0	; () banked
  3029   00323E  6F81               	movwf	(_nout+1)& (0+255),b
  3030   003240  0E00               	movlw	0
  3031   003242  6F80               	movwf	_nout& (0+255),b
  3032                           
  3033                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3034   003244  EF31  F019         	goto	l3374
  3035   003248                     l3372:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  3039   003248  C01C  F00E         	movff	vfprintf@fp,vfpfcnvrt@fp
  3040   00324C  0E1F               	movlw	low vfprintf@cfmt
  3041   00324E  6E0F               	movwf	vfpfcnvrt@fmt^0,c
  3042   003250  C01E  F010         	movff	vfprintf@ap,vfpfcnvrt@ap
  3043   003254  ECBA  F00E         	call	_vfpfcnvrt	;wreg free
  3044   003258  500E               	movf	?_vfpfcnvrt^0,w,c
  3045   00325A  0100               	movlb	0	; () banked
  3046   00325C  2780               	addwf	_nout& (0+255),f,b
  3047   00325E  500F               	movf	(?_vfpfcnvrt+1)^0,w,c
  3048   003260  2381               	addwfc	(_nout+1)& (0+255),f,b
  3049   003262                     l3374:
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3053   003262  C01F  FFF6         	movff	vfprintf@cfmt,tblptrl
  3054   003266                     	if	1	;There is more than 1 active tblptr byte
  3055   003266  0E0E               	movlw	high __smallconst
  3056   003268  6EF7               	movwf	tblptrh,c
  3057   00326A                     	endif
  3058   00326A                     	if	0	;tblptru may be non-zero
  3059   00326A                     	endif
  3060   00326A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3061   00326A  0E00               	movlw	low (__smallconst shr (0+16))
  3062   00326C  6EF8               	movwf	tblptru,c
  3063   00326E                     	endif
  3064   00326E  0008               	tblrd		*
  3065   003270  50F5               	movf	tablat,w,c
  3066   003272  0900               	iorlw	0
  3067   003274  A4D8               	btfss	status,2,c
  3068   003276  EF3F  F019         	goto	u2501
  3069   00327A  EF41  F019         	goto	u2500
  3070   00327E                     u2501:
  3071   00327E  EF24  F019         	goto	l3372
  3072   003282                     u2500:
  3073   003282                     
  3074                           ; BSR set to: 0
  3075                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  3076   003282  C080  F01C         	movff	_nout,?_vfprintf
  3077   003286  C081  F01D         	movff	_nout+1,?_vfprintf+1
  3078   00328A                     
  3079                           ; BSR set to: 0
  3080   00328A  0012               	return		;funcret
  3081   00328C                     __end_of_vfprintf:
  3082                           	callstack 0
  3083                           
  3084 ;; *************** function _vfpfcnvrt *****************
  3085 ;; Defined at:
  3086 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  3089 ;;		 -> sprintf@f(12), 
  3090 ;;  fmt             1   14[COMRAM] PTR PTR unsigned char 
  3091 ;;		 -> vfprintf@cfmt(1), 
  3092 ;;  ap              1   15[COMRAM] PTR PTR void 
  3093 ;;		 -> sprintf@ap(1), 
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;  convarg         4   22[COMRAM] struct .
  3096 ;;  cnt             2   19[COMRAM] int 
  3097 ;;  c               1   26[COMRAM] unsigned char 
  3098 ;;  cp              1   21[COMRAM] PTR unsigned char 
  3099 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  3100 ;;  done            1   18[COMRAM] _Bool 
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  2   13[COMRAM] int 
  3103 ;; Registers used:
  3104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3110 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3111 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3112 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3113 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3114 ;;Total ram usage:       14 bytes
  3115 ;; Hardware stack levels used: 1
  3116 ;; Hardware stack levels required when called: 3
  3117 ;; This function calls:
  3118 ;;		___awdiv
  3119 ;;		___awmod
  3120 ;;		___lwdiv
  3121 ;;		___lwmod
  3122 ;;		_abs
  3123 ;;		_fputc
  3124 ;; This function is called by:
  3125 ;;		_vfprintf
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text17
  3130   001D74                     __ptext17:
  3131                           	callstack 0
  3132   001D74                     _vfpfcnvrt:
  3133                           	callstack 24
  3134   001D74                     
  3135                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  3136   001D74  0E00               	movlw	0
  3137   001D76  6E15               	movwf	(vfpfcnvrt@cnt+1)^0,c
  3138   001D78  0E00               	movlw	0
  3139   001D7A  6E14               	movwf	vfpfcnvrt@cnt^0,c
  3140   001D7C                     
  3141                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  3142   001D7C  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3143   001D7E  6ED9               	movwf	fsr2l,c
  3144   001D80  6ADA               	clrf	fsr2h,c
  3145   001D82  CFDF FFF6          	movff	indf2,tblptrl
  3146   001D86                     	if	1	;There is more than 1 active tblptr byte
  3147   001D86  0E0E               	movlw	high __smallconst
  3148   001D88  6EF7               	movwf	tblptrh,c
  3149   001D8A                     	endif
  3150   001D8A                     	if	0	;tblptru may be non-zero
  3151   001D8A                     	endif
  3152   001D8A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3153   001D8A  0E00               	movlw	low (__smallconst shr (0+16))
  3154   001D8C  6EF8               	movwf	tblptru,c
  3155   001D8E                     	endif
  3156   001D8E  0008               	tblrd		*
  3157   001D90  50F5               	movf	tablat,w,c
  3158   001D92  0A25               	xorlw	37
  3159   001D94  A4D8               	btfss	status,2,c
  3160   001D96  EFCF  F00E         	goto	u2231
  3161   001D9A  EFD1  F00E         	goto	u2230
  3162   001D9E                     u2231:
  3163   001D9E  EF26  F010         	goto	l3254
  3164   001DA2                     u2230:
  3165   001DA2                     
  3166                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3167   001DA2  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3168   001DA4  6ED9               	movwf	fsr2l,c
  3169   001DA6  6ADA               	clrf	fsr2h,c
  3170   001DA8  2ADF               	incf	indf2,f,c
  3171   001DAA                     
  3172                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3173   001DAA  0E00               	movlw	0
  3174   001DAC  0100               	movlb	0	; () banked
  3175   001DAE  6F83               	movwf	(_width+1)& (0+255),b
  3176   001DB0  0E00               	movlw	0
  3177   001DB2  6F82               	movwf	_width& (0+255),b
  3178   001DB4  C082  F086         	movff	_width,_flags
  3179   001DB8                     
  3180                           ; BSR set to: 0
  3181                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3182   001DB8  6984               	setf	_prec& (0+255),b
  3183   001DBA  6985               	setf	(_prec+1)& (0+255),b
  3184   001DBC                     
  3185                           ; BSR set to: 0
  3186                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3187   001DBC  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3188   001DBE  6ED9               	movwf	fsr2l,c
  3189   001DC0  6ADA               	clrf	fsr2h,c
  3190   001DC2  50DF               	movf	indf2,w,c
  3191   001DC4  6E16               	movwf	vfpfcnvrt@cp^0,c
  3192   001DC6                     
  3193                           ; BSR set to: 0
  3194                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3195   001DC6  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3196   001DCA                     	if	1	;There is more than 1 active tblptr byte
  3197   001DCA  0E0E               	movlw	high __smallconst
  3198   001DCC  6EF7               	movwf	tblptrh,c
  3199   001DCE                     	endif
  3200   001DCE                     	if	0	;tblptru may be non-zero
  3201   001DCE                     	endif
  3202   001DCE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3203   001DCE  0E00               	movlw	low (__smallconst shr (0+16))
  3204   001DD0  6EF8               	movwf	tblptru,c
  3205   001DD2                     	endif
  3206   001DD2  0008               	tblrd		*
  3207   001DD4  50F5               	movf	tablat,w,c
  3208   001DD6  0A64               	xorlw	100
  3209   001DD8  B4D8               	btfsc	status,2,c
  3210   001DDA  EFF1  F00E         	goto	u2241
  3211   001DDE  EFF3  F00E         	goto	u2240
  3212   001DE2                     u2241:
  3213   001DE2  EF03  F00F         	goto	l3190
  3214   001DE6                     u2240:
  3215   001DE6                     
  3216                           ; BSR set to: 0
  3217   001DE6  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3218   001DEA                     	if	1	;There is more than 1 active tblptr byte
  3219   001DEA  0E0E               	movlw	high __smallconst
  3220   001DEC  6EF7               	movwf	tblptrh,c
  3221   001DEE                     	endif
  3222   001DEE                     	if	0	;tblptru may be non-zero
  3223   001DEE                     	endif
  3224   001DEE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3225   001DEE  0E00               	movlw	low (__smallconst shr (0+16))
  3226   001DF0  6EF8               	movwf	tblptru,c
  3227   001DF2                     	endif
  3228   001DF2  0008               	tblrd		*
  3229   001DF4  50F5               	movf	tablat,w,c
  3230   001DF6  0A69               	xorlw	105
  3231   001DF8  A4D8               	btfss	status,2,c
  3232   001DFA  EF01  F00F         	goto	u2251
  3233   001DFE  EF03  F00F         	goto	u2250
  3234   001E02                     u2251:
  3235   001E02  EF91  F00F         	goto	l3220
  3236   001E06                     u2250:
  3237   001E06                     l3190:
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3241   001E06  5010               	movf	vfpfcnvrt@ap^0,w,c
  3242   001E08  6ED9               	movwf	fsr2l,c
  3243   001E0A  6ADA               	clrf	fsr2h,c
  3244   001E0C  0E02               	movlw	2
  3245   001E0E  26DF               	addwf	indf2,f,c
  3246   001E10  5CDF               	subwf	indf2,w,c
  3247   001E12  6ED9               	movwf	fsr2l,c
  3248   001E14  6ADA               	clrf	fsr2h,c
  3249   001E16  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  3250   001E1A  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  3251   001E1E                     
  3252                           ; BSR set to: 0
  3253                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3254   001E1E  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3255   001E20  6ED9               	movwf	fsr2l,c
  3256   001E22  6ADA               	clrf	fsr2h,c
  3257   001E24  2816               	incf	vfpfcnvrt@cp^0,w,c
  3258   001E26  6EDF               	movwf	indf2,c
  3259   001E28                     
  3260                           ; BSR set to: 0
  3261                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  3262   001E28  0E20               	movlw	32
  3263   001E2A  6E1B               	movwf	vfpfcnvrt@c^0,c
  3264                           
  3265                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  3266   001E2C  BE18               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  3267   001E2E  EF1B  F00F         	goto	u2261
  3268   001E32  EF1E  F00F         	goto	u2260
  3269   001E36                     u2261:
  3270   001E36  0E01               	movlw	1
  3271   001E38  EF1F  F00F         	goto	u2270
  3272   001E3C                     u2260:
  3273   001E3C  0E00               	movlw	0
  3274   001E3E                     u2270:
  3275   001E3E  6E13               	movwf	vfpfcnvrt@done^0,c
  3276   001E40                     l3196:
  3277                           
  3278                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  3279   001E40  061B               	decf	vfpfcnvrt@c^0,f,c
  3280   001E42  501B               	movf	vfpfcnvrt@c^0,w,c
  3281   001E44  0F60               	addlw	low _dbuf
  3282   001E46  6ED9               	movwf	fsr2l,c
  3283   001E48  6ADA               	clrf	fsr2h,c
  3284   001E4A  C017  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  3285   001E4E  C018  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  3286   001E52  0E00               	movlw	0
  3287   001E54  6E04               	movwf	(___awmod@divisor+1)^0,c
  3288   001E56  0E0A               	movlw	10
  3289   001E58  6E03               	movwf	___awmod@divisor^0,c
  3290   001E5A  EC2A  F016         	call	___awmod	;wreg free
  3291   001E5E  C001  F007         	movff	?___awmod,abs@a
  3292   001E62  C002  F008         	movff	?___awmod+1,abs@a+1
  3293   001E66  ECDF  F01A         	call	_abs	;wreg free
  3294   001E6A  5007               	movf	?_abs^0,w,c
  3295   001E6C  0F30               	addlw	48
  3296   001E6E  6EDF               	movwf	indf2,c
  3297   001E70                     
  3298                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  3299   001E70  C017  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  3300   001E74  C018  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  3301   001E78  0E00               	movlw	0
  3302   001E7A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3303   001E7C  0E0A               	movlw	10
  3304   001E7E  6E03               	movwf	___awdiv@divisor^0,c
  3305   001E80  EC6B  F015         	call	___awdiv	;wreg free
  3306   001E84  C001  F017         	movff	?___awdiv,vfpfcnvrt@convarg
  3307   001E88  C002  F018         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  3308   001E8C                     
  3309                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  3310   001E8C  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  3311   001E8E  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  3312   001E90                     
  3313                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  3314   001E90  5017               	movf	vfpfcnvrt@convarg^0,w,c
  3315   001E92  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3316   001E94  B4D8               	btfsc	status,2,c
  3317   001E96  EF4F  F00F         	goto	u2281
  3318   001E9A  EF51  F00F         	goto	u2280
  3319   001E9E                     u2281:
  3320   001E9E  EF59  F00F         	goto	l3206
  3321   001EA2                     u2280:
  3322   001EA2  501B               	movf	vfpfcnvrt@c^0,w,c
  3323   001EA4  A4D8               	btfss	status,2,c
  3324   001EA6  EF57  F00F         	goto	u2291
  3325   001EAA  EF59  F00F         	goto	u2290
  3326   001EAE                     u2291:
  3327   001EAE  EF20  F00F         	goto	l3196
  3328   001EB2                     u2290:
  3329   001EB2                     l3206:
  3330                           
  3331                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  3332   001EB2  501B               	movf	vfpfcnvrt@c^0,w,c
  3333   001EB4  B4D8               	btfsc	status,2,c
  3334   001EB6  EF5F  F00F         	goto	u2301
  3335   001EBA  EF61  F00F         	goto	u2300
  3336   001EBE                     u2301:
  3337   001EBE  EF82  F00F         	goto	l3218
  3338   001EC2                     u2300:
  3339   001EC2  5013               	movf	vfpfcnvrt@done^0,w,c
  3340   001EC4  B4D8               	btfsc	status,2,c
  3341   001EC6  EF67  F00F         	goto	u2311
  3342   001ECA  EF69  F00F         	goto	u2310
  3343   001ECE                     u2311:
  3344   001ECE  EF82  F00F         	goto	l3218
  3345   001ED2                     u2310:
  3346   001ED2                     
  3347                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  3348   001ED2  061B               	decf	vfpfcnvrt@c^0,f,c
  3349   001ED4  501B               	movf	vfpfcnvrt@c^0,w,c
  3350   001ED6  0F60               	addlw	low _dbuf
  3351   001ED8  6ED9               	movwf	fsr2l,c
  3352   001EDA  6ADA               	clrf	fsr2h,c
  3353   001EDC  0E2D               	movlw	45
  3354   001EDE  6EDF               	movwf	indf2,c
  3355   001EE0                     
  3356                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  3357   001EE0  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  3358   001EE2  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  3359   001EE4  EF82  F00F         	goto	l3218
  3360   001EE8                     l3214:
  3361                           
  3362                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  3363   001EE8  501B               	movf	vfpfcnvrt@c^0,w,c
  3364   001EEA  0F60               	addlw	low _dbuf
  3365   001EEC  6ED9               	movwf	fsr2l,c
  3366   001EEE  6ADA               	clrf	fsr2h,c
  3367   001EF0  50DF               	movf	indf2,w,c
  3368   001EF2  6E11               	movwf	??_vfpfcnvrt^0,c
  3369   001EF4  5011               	movf	??_vfpfcnvrt^0,w,c
  3370   001EF6  6E01               	movwf	fputc@c^0,c
  3371   001EF8  6A02               	clrf	(fputc@c+1)^0,c
  3372   001EFA  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3373   001EFE  ECCD  F015         	call	_fputc	;wreg free
  3374   001F02  2A1B               	incf	vfpfcnvrt@c^0,f,c
  3375   001F04                     l3218:
  3376                           
  3377                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  3378   001F04  0E20               	movlw	32
  3379   001F06  181B               	xorwf	vfpfcnvrt@c^0,w,c
  3380   001F08  A4D8               	btfss	status,2,c
  3381   001F0A  EF89  F00F         	goto	u2321
  3382   001F0E  EF8B  F00F         	goto	u2320
  3383   001F12                     u2321:
  3384   001F12  EF74  F00F         	goto	l3214
  3385   001F16                     u2320:
  3386   001F16                     l1482:
  3387                           
  3388                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  3389   001F16  C014  F00E         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  3390   001F1A  C015  F00F         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  3391   001F1E  EF3F  F010         	goto	l1483
  3392   001F22                     l3220:
  3393                           
  3394                           ; BSR set to: 0
  3395   001F22  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3396   001F26                     	if	1	;There is more than 1 active tblptr byte
  3397   001F26  0E0E               	movlw	high __smallconst
  3398   001F28  6EF7               	movwf	tblptrh,c
  3399   001F2A                     	endif
  3400   001F2A                     	if	0	;tblptru may be non-zero
  3401   001F2A                     	endif
  3402   001F2A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3403   001F2A  0E00               	movlw	low (__smallconst shr (0+16))
  3404   001F2C  6EF8               	movwf	tblptru,c
  3405   001F2E                     	endif
  3406   001F2E  0008               	tblrd		*
  3407   001F30  50F5               	movf	tablat,w,c
  3408   001F32  0A75               	xorlw	117
  3409   001F34  A4D8               	btfss	status,2,c
  3410   001F36  EF9F  F00F         	goto	u2331
  3411   001F3A  EFA1  F00F         	goto	u2330
  3412   001F3E                     u2331:
  3413   001F3E  EF1C  F010         	goto	l3248
  3414   001F42                     u2330:
  3415   001F42                     
  3416                           ; BSR set to: 0
  3417                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  3418   001F42  5010               	movf	vfpfcnvrt@ap^0,w,c
  3419   001F44  6ED9               	movwf	fsr2l,c
  3420   001F46  6ADA               	clrf	fsr2h,c
  3421   001F48  0E02               	movlw	2
  3422   001F4A  26DF               	addwf	indf2,f,c
  3423   001F4C  5CDF               	subwf	indf2,w,c
  3424   001F4E  6ED9               	movwf	fsr2l,c
  3425   001F50  6ADA               	clrf	fsr2h,c
  3426   001F52  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  3427   001F56  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  3428   001F5A                     
  3429                           ; BSR set to: 0
  3430                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  3431   001F5A  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3432   001F5C  6ED9               	movwf	fsr2l,c
  3433   001F5E  6ADA               	clrf	fsr2h,c
  3434   001F60  2816               	incf	vfpfcnvrt@cp^0,w,c
  3435   001F62  6EDF               	movwf	indf2,c
  3436                           
  3437                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  3438   001F64  EF04  F010         	goto	l3246
  3439   001F68                     l3226:
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  3443   001F68  0E20               	movlw	32
  3444   001F6A  6E1B               	movwf	vfpfcnvrt@c^0,c
  3445   001F6C                     l3228:
  3446                           
  3447                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  3448   001F6C  061B               	decf	vfpfcnvrt@c^0,f,c
  3449   001F6E  501B               	movf	vfpfcnvrt@c^0,w,c
  3450   001F70  0F60               	addlw	low _dbuf
  3451   001F72  6ED9               	movwf	fsr2l,c
  3452   001F74  6ADA               	clrf	fsr2h,c
  3453   001F76  C017  F001         	movff	vfpfcnvrt@convarg,___lwmod@dividend
  3454   001F7A  C018  F002         	movff	vfpfcnvrt@convarg+1,___lwmod@dividend+1
  3455   001F7E  0E00               	movlw	0
  3456   001F80  6E04               	movwf	(___lwmod@divisor+1)^0,c
  3457   001F82  0E0A               	movlw	10
  3458   001F84  6E03               	movwf	___lwmod@divisor^0,c
  3459   001F86  EC89  F018         	call	___lwmod	;wreg free
  3460   001F8A  5001               	movf	?___lwmod^0,w,c
  3461   001F8C  0F30               	addlw	48
  3462   001F8E  6EDF               	movwf	indf2,c
  3463   001F90                     
  3464                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  3465   001F90  C017  F007         	movff	vfpfcnvrt@convarg,___lwdiv@dividend
  3466   001F94  C018  F008         	movff	vfpfcnvrt@convarg+1,___lwdiv@dividend+1
  3467   001F98  0E00               	movlw	0
  3468   001F9A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3469   001F9C  0E0A               	movlw	10
  3470   001F9E  6E09               	movwf	___lwdiv@divisor^0,c
  3471   001FA0  EC1A  F018         	call	___lwdiv	;wreg free
  3472   001FA4  C007  F017         	movff	?___lwdiv,vfpfcnvrt@convarg
  3473   001FA8  C008  F018         	movff	?___lwdiv+1,vfpfcnvrt@convarg+1
  3474   001FAC                     
  3475                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1530:       cnt++
      +                          ;
  3476   001FAC  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  3477   001FAE  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  3478   001FB0                     
  3479                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  3480   001FB0  5017               	movf	vfpfcnvrt@convarg^0,w,c
  3481   001FB2  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3482   001FB4  B4D8               	btfsc	status,2,c
  3483   001FB6  EFDF  F00F         	goto	u2341
  3484   001FBA  EFE1  F00F         	goto	u2340
  3485   001FBE                     u2341:
  3486   001FBE  EFF9  F00F         	goto	l3242
  3487   001FC2                     u2340:
  3488   001FC2  501B               	movf	vfpfcnvrt@c^0,w,c
  3489   001FC4  A4D8               	btfss	status,2,c
  3490   001FC6  EFE7  F00F         	goto	u2351
  3491   001FCA  EFE9  F00F         	goto	u2350
  3492   001FCE                     u2351:
  3493   001FCE  EFB6  F00F         	goto	l3228
  3494   001FD2                     u2350:
  3495   001FD2  EFF9  F00F         	goto	l3242
  3496   001FD6                     l3238:
  3497                           
  3498                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  3499   001FD6  501B               	movf	vfpfcnvrt@c^0,w,c
  3500   001FD8  0F60               	addlw	low _dbuf
  3501   001FDA  6ED9               	movwf	fsr2l,c
  3502   001FDC  6ADA               	clrf	fsr2h,c
  3503   001FDE  50DF               	movf	indf2,w,c
  3504   001FE0  6E11               	movwf	??_vfpfcnvrt^0,c
  3505   001FE2  5011               	movf	??_vfpfcnvrt^0,w,c
  3506   001FE4  6E01               	movwf	fputc@c^0,c
  3507   001FE6  6A02               	clrf	(fputc@c+1)^0,c
  3508   001FE8  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3509   001FEC  ECCD  F015         	call	_fputc	;wreg free
  3510   001FF0  2A1B               	incf	vfpfcnvrt@c^0,f,c
  3511   001FF2                     l3242:
  3512                           
  3513                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  3514   001FF2  0E20               	movlw	32
  3515   001FF4  181B               	xorwf	vfpfcnvrt@c^0,w,c
  3516   001FF6  A4D8               	btfss	status,2,c
  3517   001FF8  EF00  F010         	goto	u2361
  3518   001FFC  EF02  F010         	goto	u2360
  3519   002000                     u2361:
  3520   002000  EFEB  F00F         	goto	l3238
  3521   002004                     u2360:
  3522   002004  EF8B  F00F         	goto	l1482
  3523   002008                     l3246:
  3524                           
  3525                           ; BSR set to: 0
  3526   002008  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3527   00200C                     	if	1	;There is more than 1 active tblptr byte
  3528   00200C  0E0E               	movlw	high __smallconst
  3529   00200E  6EF7               	movwf	tblptrh,c
  3530   002010                     	endif
  3531   002010                     	if	0	;tblptru may be non-zero
  3532   002010                     	endif
  3533   002010                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3534   002010  0E00               	movlw	low (__smallconst shr (0+16))
  3535   002012  6EF8               	movwf	tblptru,c
  3536   002014                     	endif
  3537   002014  0008               	tblrd		*
  3538   002016  50F5               	movf	tablat,w,c
  3539   002018  6E11               	movwf	??_vfpfcnvrt^0,c
  3540   00201A  6A12               	clrf	(??_vfpfcnvrt+1)^0,c
  3541                           
  3542                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3543                           ; Switch size 1, requested type "simple"
  3544                           ; Number of cases is 1, Range of values is 0 to 0
  3545                           ; switch strategies available:
  3546                           ; Name         Instructions Cycles
  3547                           ; simple_byte            4     3 (average)
  3548                           ;	Chosen strategy is simple_byte
  3549   00201C  5012               	movf	(??_vfpfcnvrt+1)^0,w,c
  3550   00201E  0A00               	xorlw	0	; case 0
  3551   002020  B4D8               	btfsc	status,2,c
  3552   002022  EF15  F010         	goto	l4626
  3553   002026  EF1C  F010         	goto	l3248
  3554   00202A                     l4626:
  3555                           
  3556                           ; BSR set to: 0
  3557                           ; Switch size 1, requested type "simple"
  3558                           ; Number of cases is 1, Range of values is 117 to 117
  3559                           ; switch strategies available:
  3560                           ; Name         Instructions Cycles
  3561                           ; simple_byte            4     3 (average)
  3562                           ;	Chosen strategy is simple_byte
  3563   00202A  5011               	movf	??_vfpfcnvrt^0,w,c
  3564   00202C  0A75               	xorlw	117	; case 117
  3565   00202E  B4D8               	btfsc	status,2,c
  3566   002030  EFB4  F00F         	goto	l3226
  3567   002034  EF1C  F010         	goto	l3248
  3568   002038                     l3248:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3572   002038  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3573   00203A  6ED9               	movwf	fsr2l,c
  3574   00203C  6ADA               	clrf	fsr2h,c
  3575   00203E  2ADF               	incf	indf2,f,c
  3576   002040                     
  3577                           ; BSR set to: 0
  3578                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  3579   002040  0E00               	movlw	0
  3580   002042  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  3581   002044  0E00               	movlw	0
  3582   002046  6E0E               	movwf	?_vfpfcnvrt^0,c
  3583   002048  EF3F  F010         	goto	l1483
  3584   00204C                     l3254:
  3585                           
  3586                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3587   00204C  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3588   00204E  6ED9               	movwf	fsr2l,c
  3589   002050  6ADA               	clrf	fsr2h,c
  3590   002052  CFDF FFF6          	movff	indf2,tblptrl
  3591   002056                     	if	1	;There is more than 1 active tblptr byte
  3592   002056  0E0E               	movlw	high __smallconst
  3593   002058  6EF7               	movwf	tblptrh,c
  3594   00205A                     	endif
  3595   00205A                     	if	0	;tblptru may be non-zero
  3596   00205A                     	endif
  3597   00205A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3598   00205A  0E00               	movlw	low (__smallconst shr (0+16))
  3599   00205C  6EF8               	movwf	tblptru,c
  3600   00205E                     	endif
  3601   00205E  0008               	tblrd		*
  3602   002060  50F5               	movf	tablat,w,c
  3603   002062  6E01               	movwf	fputc@c^0,c
  3604   002064  6A02               	clrf	(fputc@c+1)^0,c
  3605   002066  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3606   00206A  ECCD  F015         	call	_fputc	;wreg free
  3607   00206E                     
  3608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  3609   00206E  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3610   002070  6ED9               	movwf	fsr2l,c
  3611   002072  6ADA               	clrf	fsr2h,c
  3612   002074  2ADF               	incf	indf2,f,c
  3613   002076                     
  3614                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  3615   002076  0E00               	movlw	0
  3616   002078  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  3617   00207A  0E01               	movlw	1
  3618   00207C  6E0E               	movwf	?_vfpfcnvrt^0,c
  3619   00207E                     l1483:
  3620   00207E  0012               	return		;funcret
  3621   002080                     __end_of_vfpfcnvrt:
  3622                           	callstack 0
  3623                           
  3624 ;; *************** function _fputc *****************
  3625 ;; Defined at:
  3626 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  c               2    0[COMRAM] int 
  3629 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  3630 ;;		 -> sprintf@f(12), 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;		None
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  2    0[COMRAM] int 
  3635 ;; Registers used:
  3636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3642 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3644 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3645 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3646 ;;Total ram usage:        8 bytes
  3647 ;; Hardware stack levels used: 1
  3648 ;; Hardware stack levels required when called: 2
  3649 ;; This function calls:
  3650 ;;		_putch
  3651 ;; This function is called by:
  3652 ;;		_vfpfcnvrt
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text18
  3657   002B9A                     __ptext18:
  3658                           	callstack 0
  3659   002B9A                     _fputc:
  3660                           	callstack 24
  3661   002B9A  5003               	movf	fputc@fp^0,w,c
  3662   002B9C  B4D8               	btfsc	status,2,c
  3663   002B9E  EFD3  F015         	goto	u2161
  3664   002BA2  EFD5  F015         	goto	u2160
  3665   002BA6                     u2161:
  3666   002BA6  EFDD  F015         	goto	l3130
  3667   002BAA                     u2160:
  3668   002BAA  5003               	movf	fputc@fp^0,w,c
  3669   002BAC  A4D8               	btfss	status,2,c
  3670   002BAE  EFDB  F015         	goto	u2171
  3671   002BB2  EFDD  F015         	goto	u2170
  3672   002BB6                     u2171:
  3673   002BB6  EFE2  F015         	goto	l3132
  3674   002BBA                     u2170:
  3675   002BBA                     l3130:
  3676   002BBA  5001               	movf	fputc@c^0,w,c
  3677   002BBC  ECF4  F01B         	call	_putch
  3678   002BC0  EF29  F016         	goto	l1521
  3679   002BC4                     l3132:
  3680   002BC4  5003               	movf	fputc@fp^0,w,c
  3681   002BC6  6ED9               	movwf	fsr2l,c
  3682   002BC8  6ADA               	clrf	fsr2h,c
  3683   002BCA  0E0A               	movlw	10
  3684   002BCC  26D9               	addwf	fsr2l,f,c
  3685   002BCE  50DE               	movf	postinc2,w,c
  3686   002BD0  10DE               	iorwf	postinc2,w,c
  3687   002BD2  B4D8               	btfsc	status,2,c
  3688   002BD4  EFEE  F015         	goto	u2181
  3689   002BD8  EFF0  F015         	goto	u2180
  3690   002BDC                     u2181:
  3691   002BDC  EF09  F016         	goto	l3136
  3692   002BE0                     u2180:
  3693   002BE0  5003               	movf	fputc@fp^0,w,c
  3694   002BE2  6ED9               	movwf	fsr2l,c
  3695   002BE4  6ADA               	clrf	fsr2h,c
  3696   002BE6  0E0A               	movlw	10
  3697   002BE8  26D9               	addwf	fsr2l,f,c
  3698   002BEA  5003               	movf	fputc@fp^0,w,c
  3699   002BEC  6EE1               	movwf	fsr1l,c
  3700   002BEE  6AE2               	clrf	fsr1h,c
  3701   002BF0  0E03               	movlw	3
  3702   002BF2  26E1               	addwf	fsr1l,f,c
  3703   002BF4  50DE               	movf	postinc2,w,c
  3704   002BF6  5CE6               	subwf	postinc1,w,c
  3705   002BF8  50E6               	movf	postinc1,w,c
  3706   002BFA  0A80               	xorlw	128
  3707   002BFC  6E08               	movwf	(??_fputc+4)^0,c
  3708   002BFE  50DE               	movf	postinc2,w,c
  3709   002C00  0A80               	xorlw	128
  3710   002C02  5808               	subwfb	(??_fputc+4)^0,w,c
  3711   002C04  B0D8               	btfsc	status,0,c
  3712   002C06  EF07  F016         	goto	u2191
  3713   002C0A  EF09  F016         	goto	u2190
  3714   002C0E                     u2191:
  3715   002C0E  EF29  F016         	goto	l1521
  3716   002C12                     u2190:
  3717   002C12                     l3136:
  3718   002C12  5003               	movf	fputc@fp^0,w,c
  3719   002C14  6ED9               	movwf	fsr2l,c
  3720   002C16  6ADA               	clrf	fsr2h,c
  3721   002C18  0E03               	movlw	3
  3722   002C1A  26D9               	addwf	fsr2l,f,c
  3723   002C1C  CFDE F004          	movff	postinc2,??_fputc
  3724   002C20  CFDD F005          	movff	postdec2,??_fputc+1
  3725   002C24  5003               	movf	fputc@fp^0,w,c
  3726   002C26  6ED9               	movwf	fsr2l,c
  3727   002C28  6ADA               	clrf	fsr2h,c
  3728   002C2A  CFDE F006          	movff	postinc2,??_fputc+2
  3729   002C2E  CFDD F007          	movff	postdec2,??_fputc+3
  3730   002C32  5004               	movf	??_fputc^0,w,c
  3731   002C34  2406               	addwf	(??_fputc+2)^0,w,c
  3732   002C36  6ED9               	movwf	fsr2l,c
  3733   002C38  5005               	movf	(??_fputc+1)^0,w,c
  3734   002C3A  2007               	addwfc	(??_fputc+3)^0,w,c
  3735   002C3C  6EDA               	movwf	fsr2h,c
  3736   002C3E  C001  FFDF         	movff	fputc@c,indf2
  3737   002C42  5003               	movf	fputc@fp^0,w,c
  3738   002C44  6ED9               	movwf	fsr2l,c
  3739   002C46  6ADA               	clrf	fsr2h,c
  3740   002C48  0E03               	movlw	3
  3741   002C4A  26D9               	addwf	fsr2l,f,c
  3742   002C4C  2ADE               	incf	postinc2,f,c
  3743   002C4E  0E00               	movlw	0
  3744   002C50  22DD               	addwfc	postdec2,f,c
  3745   002C52                     l1521:
  3746   002C52  0012               	return		;funcret
  3747   002C54                     __end_of_fputc:
  3748                           	callstack 0
  3749                           
  3750 ;; *************** function _putch *****************
  3751 ;; Defined at:
  3752 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  c               1    wreg     unsigned char 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;  c               1    0[COMRAM] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3770 ;;Total ram usage:        0 bytes
  3771 ;; Hardware stack levels used: 1
  3772 ;; Hardware stack levels required when called: 1
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_fputc
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text19
  3781   0037E8                     __ptext19:
  3782                           	callstack 0
  3783   0037E8                     _putch:
  3784                           	callstack 24
  3785   0037E8  0012               	return		;funcret
  3786   0037EA                     __end_of_putch:
  3787                           	callstack 0
  3788                           
  3789 ;; *************** function _abs *****************
  3790 ;; Defined at:
  3791 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;  a               2    6[COMRAM] int 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  2    6[COMRAM] int 
  3798 ;; Registers used:
  3799 ;;		wreg, status,2, status,0
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3805 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3807 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3808 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3809 ;;Total ram usage:        4 bytes
  3810 ;; Hardware stack levels used: 1
  3811 ;; Hardware stack levels required when called: 1
  3812 ;; This function calls:
  3813 ;;		Nothing
  3814 ;; This function is called by:
  3815 ;;		_vfpfcnvrt
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text20
  3820   0035BE                     __ptext20:
  3821                           	callstack 0
  3822   0035BE                     _abs:
  3823                           	callstack 25
  3824   0035BE  BE08               	btfsc	(abs@a+1)^0,7,c
  3825   0035C0  EFE4  F01A         	goto	u2201
  3826   0035C4  EFE6  F01A         	goto	u2200
  3827   0035C8                     u2201:
  3828   0035C8  EFEC  F01A         	goto	l1506
  3829   0035CC                     u2200:
  3830   0035CC  C007  F007         	movff	abs@a,?_abs
  3831   0035D0  C008  F008         	movff	abs@a+1,?_abs+1
  3832   0035D4  EFF8  F01A         	goto	l1509
  3833   0035D8                     l1506:
  3834   0035D8  C007  F009         	movff	abs@a,??_abs
  3835   0035DC  C008  F00A         	movff	abs@a+1,??_abs+1
  3836   0035E0  1E09               	comf	??_abs^0,f,c
  3837   0035E2  1E0A               	comf	(??_abs+1)^0,f,c
  3838   0035E4  4A09               	infsnz	??_abs^0,f,c
  3839   0035E6  2A0A               	incf	(??_abs+1)^0,f,c
  3840   0035E8  C009  F007         	movff	??_abs,?_abs
  3841   0035EC  C00A  F008         	movff	??_abs+1,?_abs+1
  3842   0035F0                     l1509:
  3843   0035F0  0012               	return		;funcret
  3844   0035F2                     __end_of_abs:
  3845                           	callstack 0
  3846                           
  3847 ;; *************** function ___lwmod *****************
  3848 ;; Defined at:
  3849 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  dividend        2    0[COMRAM] unsigned int 
  3852 ;;  divisor         2    2[COMRAM] unsigned int 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  counter         1    4[COMRAM] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  2    0[COMRAM] unsigned int 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3864 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3867 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3868 ;;Total ram usage:        5 bytes
  3869 ;; Hardware stack levels used: 1
  3870 ;; Hardware stack levels required when called: 1
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_vfpfcnvrt
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text21
  3879   003112                     __ptext21:
  3880                           	callstack 0
  3881   003112                     ___lwmod:
  3882                           	callstack 25
  3883   003112  5003               	movf	___lwmod@divisor^0,w,c
  3884   003114  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  3885   003116  B4D8               	btfsc	status,2,c
  3886   003118  EF90  F018         	goto	u2131
  3887   00311C  EF92  F018         	goto	u2130
  3888   003120                     u2131:
  3889   003120  EFB6  F018         	goto	l1264
  3890   003124                     u2130:
  3891   003124  0E01               	movlw	1
  3892   003126  6E05               	movwf	___lwmod@counter^0,c
  3893   003128  EF9A  F018         	goto	l3116
  3894   00312C                     l3114:
  3895   00312C  90D8               	bcf	status,0,c
  3896   00312E  3603               	rlcf	___lwmod@divisor^0,f,c
  3897   003130  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  3898   003132  2A05               	incf	___lwmod@counter^0,f,c
  3899   003134                     l3116:
  3900   003134  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  3901   003136  EF9F  F018         	goto	u2141
  3902   00313A  EFA1  F018         	goto	u2140
  3903   00313E                     u2141:
  3904   00313E  EF96  F018         	goto	l3114
  3905   003142                     u2140:
  3906   003142                     l3118:
  3907   003142  5003               	movf	___lwmod@divisor^0,w,c
  3908   003144  5C01               	subwf	___lwmod@dividend^0,w,c
  3909   003146  5004               	movf	(___lwmod@divisor+1)^0,w,c
  3910   003148  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  3911   00314A  A0D8               	btfss	status,0,c
  3912   00314C  EFAA  F018         	goto	u2151
  3913   003150  EFAC  F018         	goto	u2150
  3914   003154                     u2151:
  3915   003154  EFB0  F018         	goto	l3122
  3916   003158                     u2150:
  3917   003158  5003               	movf	___lwmod@divisor^0,w,c
  3918   00315A  5E01               	subwf	___lwmod@dividend^0,f,c
  3919   00315C  5004               	movf	(___lwmod@divisor+1)^0,w,c
  3920   00315E  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  3921   003160                     l3122:
  3922   003160  90D8               	bcf	status,0,c
  3923   003162  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  3924   003164  3203               	rrcf	___lwmod@divisor^0,f,c
  3925   003166  2E05               	decfsz	___lwmod@counter^0,f,c
  3926   003168  EFA1  F018         	goto	l3118
  3927   00316C                     l1264:
  3928   00316C  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3929   003170  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3930   003174  0012               	return		;funcret
  3931   003176                     __end_of___lwmod:
  3932                           	callstack 0
  3933                           
  3934 ;; *************** function ___lwdiv *****************
  3935 ;; Defined at:
  3936 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  dividend        2    6[COMRAM] unsigned int 
  3939 ;;  divisor         2    8[COMRAM] unsigned int 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  quotient        2   10[COMRAM] unsigned int 
  3942 ;;  counter         1   12[COMRAM] unsigned char 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  2    6[COMRAM] unsigned int 
  3945 ;; Registers used:
  3946 ;;		wreg, status,2, status,0
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3952 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3953 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3955 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3956 ;;Total ram usage:        7 bytes
  3957 ;; Hardware stack levels used: 1
  3958 ;; Hardware stack levels required when called: 1
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_setMotorPWM
  3963 ;;		_vfpfcnvrt
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text22
  3968   003034                     __ptext22:
  3969                           	callstack 0
  3970   003034                     ___lwdiv:
  3971                           	callstack 25
  3972   003034  0E00               	movlw	0
  3973   003036  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  3974   003038  0E00               	movlw	0
  3975   00303A  6E0B               	movwf	___lwdiv@quotient^0,c
  3976   00303C  5009               	movf	___lwdiv@divisor^0,w,c
  3977   00303E  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3978   003040  B4D8               	btfsc	status,2,c
  3979   003042  EF25  F018         	goto	u2101
  3980   003046  EF27  F018         	goto	u2100
  3981   00304A                     u2101:
  3982   00304A  EF4F  F018         	goto	l1254
  3983   00304E                     u2100:
  3984   00304E  0E01               	movlw	1
  3985   003050  6E0D               	movwf	___lwdiv@counter^0,c
  3986   003052  EF2F  F018         	goto	l3096
  3987   003056                     l3094:
  3988   003056  90D8               	bcf	status,0,c
  3989   003058  3609               	rlcf	___lwdiv@divisor^0,f,c
  3990   00305A  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3991   00305C  2A0D               	incf	___lwdiv@counter^0,f,c
  3992   00305E                     l3096:
  3993   00305E  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  3994   003060  EF34  F018         	goto	u2111
  3995   003064  EF36  F018         	goto	u2110
  3996   003068                     u2111:
  3997   003068  EF2B  F018         	goto	l3094
  3998   00306C                     u2110:
  3999   00306C                     l3098:
  4000   00306C  90D8               	bcf	status,0,c
  4001   00306E  360B               	rlcf	___lwdiv@quotient^0,f,c
  4002   003070  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4003   003072  5009               	movf	___lwdiv@divisor^0,w,c
  4004   003074  5C07               	subwf	___lwdiv@dividend^0,w,c
  4005   003076  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4006   003078  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4007   00307A  A0D8               	btfss	status,0,c
  4008   00307C  EF42  F018         	goto	u2121
  4009   003080  EF44  F018         	goto	u2120
  4010   003084                     u2121:
  4011   003084  EF49  F018         	goto	l3106
  4012   003088                     u2120:
  4013   003088  5009               	movf	___lwdiv@divisor^0,w,c
  4014   00308A  5E07               	subwf	___lwdiv@dividend^0,f,c
  4015   00308C  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4016   00308E  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4017   003090  800B               	bsf	___lwdiv@quotient^0,0,c
  4018   003092                     l3106:
  4019   003092  90D8               	bcf	status,0,c
  4020   003094  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4021   003096  3209               	rrcf	___lwdiv@divisor^0,f,c
  4022   003098  2E0D               	decfsz	___lwdiv@counter^0,f,c
  4023   00309A  EF36  F018         	goto	l3098
  4024   00309E                     l1254:
  4025   00309E  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  4026   0030A2  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4027   0030A6  0012               	return		;funcret
  4028   0030A8                     __end_of___lwdiv:
  4029                           	callstack 0
  4030                           
  4031 ;; *************** function ___awmod *****************
  4032 ;; Defined at:
  4033 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  dividend        2    0[COMRAM] int 
  4036 ;;  divisor         2    2[COMRAM] int 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  sign            1    5[COMRAM] unsigned char 
  4039 ;;  counter         1    4[COMRAM] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  2    0[COMRAM] int 
  4042 ;; Registers used:
  4043 ;;		wreg, status,2, status,0
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4049 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4052 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4053 ;;Total ram usage:        6 bytes
  4054 ;; Hardware stack levels used: 1
  4055 ;; Hardware stack levels required when called: 1
  4056 ;; This function calls:
  4057 ;;		Nothing
  4058 ;; This function is called by:
  4059 ;;		_vfpfcnvrt
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text23
  4064   002C54                     __ptext23:
  4065                           	callstack 0
  4066   002C54                     ___awmod:
  4067                           	callstack 25
  4068   002C54  0E00               	movlw	0
  4069   002C56  6E06               	movwf	___awmod@sign^0,c
  4070   002C58  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  4071   002C5A  EF33  F016         	goto	u2040
  4072   002C5E  EF31  F016         	goto	u2041
  4073   002C62                     u2041:
  4074   002C62  EF39  F016         	goto	l3060
  4075   002C66                     u2040:
  4076   002C66  6C01               	negf	___awmod@dividend^0,c
  4077   002C68  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4078   002C6A  B0D8               	btfsc	status,0,c
  4079   002C6C  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4080   002C6E  0E01               	movlw	1
  4081   002C70  6E06               	movwf	___awmod@sign^0,c
  4082   002C72                     l3060:
  4083   002C72  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  4084   002C74  EF40  F016         	goto	u2050
  4085   002C78  EF3E  F016         	goto	u2051
  4086   002C7C                     u2051:
  4087   002C7C  EF44  F016         	goto	l3064
  4088   002C80                     u2050:
  4089   002C80  6C03               	negf	___awmod@divisor^0,c
  4090   002C82  1E04               	comf	(___awmod@divisor+1)^0,f,c
  4091   002C84  B0D8               	btfsc	status,0,c
  4092   002C86  2A04               	incf	(___awmod@divisor+1)^0,f,c
  4093   002C88                     l3064:
  4094   002C88  5003               	movf	___awmod@divisor^0,w,c
  4095   002C8A  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  4096   002C8C  B4D8               	btfsc	status,2,c
  4097   002C8E  EF4B  F016         	goto	u2061
  4098   002C92  EF4D  F016         	goto	u2060
  4099   002C96                     u2061:
  4100   002C96  EF71  F016         	goto	l3080
  4101   002C9A                     u2060:
  4102   002C9A  0E01               	movlw	1
  4103   002C9C  6E05               	movwf	___awmod@counter^0,c
  4104   002C9E  EF55  F016         	goto	l3070
  4105   002CA2                     l3068:
  4106   002CA2  90D8               	bcf	status,0,c
  4107   002CA4  3603               	rlcf	___awmod@divisor^0,f,c
  4108   002CA6  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  4109   002CA8  2A05               	incf	___awmod@counter^0,f,c
  4110   002CAA                     l3070:
  4111   002CAA  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  4112   002CAC  EF5A  F016         	goto	u2071
  4113   002CB0  EF5C  F016         	goto	u2070
  4114   002CB4                     u2071:
  4115   002CB4  EF51  F016         	goto	l3068
  4116   002CB8                     u2070:
  4117   002CB8                     l3072:
  4118   002CB8  5003               	movf	___awmod@divisor^0,w,c
  4119   002CBA  5C01               	subwf	___awmod@dividend^0,w,c
  4120   002CBC  5004               	movf	(___awmod@divisor+1)^0,w,c
  4121   002CBE  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  4122   002CC0  A0D8               	btfss	status,0,c
  4123   002CC2  EF65  F016         	goto	u2081
  4124   002CC6  EF67  F016         	goto	u2080
  4125   002CCA                     u2081:
  4126   002CCA  EF6B  F016         	goto	l3076
  4127   002CCE                     u2080:
  4128   002CCE  5003               	movf	___awmod@divisor^0,w,c
  4129   002CD0  5E01               	subwf	___awmod@dividend^0,f,c
  4130   002CD2  5004               	movf	(___awmod@divisor+1)^0,w,c
  4131   002CD4  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  4132   002CD6                     l3076:
  4133   002CD6  90D8               	bcf	status,0,c
  4134   002CD8  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  4135   002CDA  3203               	rrcf	___awmod@divisor^0,f,c
  4136   002CDC  2E05               	decfsz	___awmod@counter^0,f,c
  4137   002CDE  EF5C  F016         	goto	l3072
  4138   002CE2                     l3080:
  4139   002CE2  5006               	movf	___awmod@sign^0,w,c
  4140   002CE4  B4D8               	btfsc	status,2,c
  4141   002CE6  EF77  F016         	goto	u2091
  4142   002CEA  EF79  F016         	goto	u2090
  4143   002CEE                     u2091:
  4144   002CEE  EF7D  F016         	goto	l3084
  4145   002CF2                     u2090:
  4146   002CF2  6C01               	negf	___awmod@dividend^0,c
  4147   002CF4  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4148   002CF6  B0D8               	btfsc	status,0,c
  4149   002CF8  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4150   002CFA                     l3084:
  4151   002CFA  C001  F001         	movff	___awmod@dividend,?___awmod
  4152   002CFE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4153   002D02  0012               	return		;funcret
  4154   002D04                     __end_of___awmod:
  4155                           	callstack 0
  4156                           
  4157 ;; *************** function ___awdiv *****************
  4158 ;; Defined at:
  4159 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  dividend        2    0[COMRAM] int 
  4162 ;;  divisor         2    2[COMRAM] int 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  quotient        2    6[COMRAM] int 
  4165 ;;  sign            1    5[COMRAM] unsigned char 
  4166 ;;  counter         1    4[COMRAM] unsigned char 
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  2    0[COMRAM] int 
  4169 ;; Registers used:
  4170 ;;		wreg, status,2, status,0
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4176 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4177 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4179 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;Total ram usage:        8 bytes
  4181 ;; Hardware stack levels used: 1
  4182 ;; Hardware stack levels required when called: 1
  4183 ;; This function calls:
  4184 ;;		Nothing
  4185 ;; This function is called by:
  4186 ;;		_vfpfcnvrt
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text24
  4191   002AD6                     __ptext24:
  4192                           	callstack 0
  4193   002AD6                     ___awdiv:
  4194                           	callstack 25
  4195   002AD6  0E00               	movlw	0
  4196   002AD8  6E06               	movwf	___awdiv@sign^0,c
  4197   002ADA  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  4198   002ADC  EF74  F015         	goto	u1980
  4199   002AE0  EF72  F015         	goto	u1981
  4200   002AE4                     u1981:
  4201   002AE4  EF7A  F015         	goto	l3016
  4202   002AE8                     u1980:
  4203   002AE8  6C03               	negf	___awdiv@divisor^0,c
  4204   002AEA  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  4205   002AEC  B0D8               	btfsc	status,0,c
  4206   002AEE  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  4207   002AF0  0E01               	movlw	1
  4208   002AF2  6E06               	movwf	___awdiv@sign^0,c
  4209   002AF4                     l3016:
  4210   002AF4  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  4211   002AF6  EF81  F015         	goto	u1990
  4212   002AFA  EF7F  F015         	goto	u1991
  4213   002AFE                     u1991:
  4214   002AFE  EF87  F015         	goto	l3022
  4215   002B02                     u1990:
  4216   002B02  6C01               	negf	___awdiv@dividend^0,c
  4217   002B04  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  4218   002B06  B0D8               	btfsc	status,0,c
  4219   002B08  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  4220   002B0A  0E01               	movlw	1
  4221   002B0C  1A06               	xorwf	___awdiv@sign^0,f,c
  4222   002B0E                     l3022:
  4223   002B0E  0E00               	movlw	0
  4224   002B10  6E08               	movwf	(___awdiv@quotient+1)^0,c
  4225   002B12  0E00               	movlw	0
  4226   002B14  6E07               	movwf	___awdiv@quotient^0,c
  4227   002B16  5003               	movf	___awdiv@divisor^0,w,c
  4228   002B18  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  4229   002B1A  B4D8               	btfsc	status,2,c
  4230   002B1C  EF92  F015         	goto	u2001
  4231   002B20  EF94  F015         	goto	u2000
  4232   002B24                     u2001:
  4233   002B24  EFBC  F015         	goto	l3044
  4234   002B28                     u2000:
  4235   002B28  0E01               	movlw	1
  4236   002B2A  6E05               	movwf	___awdiv@counter^0,c
  4237   002B2C  EF9C  F015         	goto	l3030
  4238   002B30                     l3028:
  4239   002B30  90D8               	bcf	status,0,c
  4240   002B32  3603               	rlcf	___awdiv@divisor^0,f,c
  4241   002B34  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  4242   002B36  2A05               	incf	___awdiv@counter^0,f,c
  4243   002B38                     l3030:
  4244   002B38  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4245   002B3A  EFA1  F015         	goto	u2011
  4246   002B3E  EFA3  F015         	goto	u2010
  4247   002B42                     u2011:
  4248   002B42  EF98  F015         	goto	l3028
  4249   002B46                     u2010:
  4250   002B46                     l3032:
  4251   002B46  90D8               	bcf	status,0,c
  4252   002B48  3607               	rlcf	___awdiv@quotient^0,f,c
  4253   002B4A  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  4254   002B4C  5003               	movf	___awdiv@divisor^0,w,c
  4255   002B4E  5C01               	subwf	___awdiv@dividend^0,w,c
  4256   002B50  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4257   002B52  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  4258   002B54  A0D8               	btfss	status,0,c
  4259   002B56  EFAF  F015         	goto	u2021
  4260   002B5A  EFB1  F015         	goto	u2020
  4261   002B5E                     u2021:
  4262   002B5E  EFB6  F015         	goto	l3040
  4263   002B62                     u2020:
  4264   002B62  5003               	movf	___awdiv@divisor^0,w,c
  4265   002B64  5E01               	subwf	___awdiv@dividend^0,f,c
  4266   002B66  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4267   002B68  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  4268   002B6A  8007               	bsf	___awdiv@quotient^0,0,c
  4269   002B6C                     l3040:
  4270   002B6C  90D8               	bcf	status,0,c
  4271   002B6E  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  4272   002B70  3203               	rrcf	___awdiv@divisor^0,f,c
  4273   002B72  2E05               	decfsz	___awdiv@counter^0,f,c
  4274   002B74  EFA3  F015         	goto	l3032
  4275   002B78                     l3044:
  4276   002B78  5006               	movf	___awdiv@sign^0,w,c
  4277   002B7A  B4D8               	btfsc	status,2,c
  4278   002B7C  EFC2  F015         	goto	u2031
  4279   002B80  EFC4  F015         	goto	u2030
  4280   002B84                     u2031:
  4281   002B84  EFC8  F015         	goto	l3048
  4282   002B88                     u2030:
  4283   002B88  6C07               	negf	___awdiv@quotient^0,c
  4284   002B8A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  4285   002B8C  B0D8               	btfsc	status,0,c
  4286   002B8E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  4287   002B90                     l3048:
  4288   002B90  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4289   002B94  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4290   002B98  0012               	return		;funcret
  4291   002B9A                     __end_of___awdiv:
  4292                           	callstack 0
  4293                           
  4294 ;; *************** function _sendStringSerial4 *****************
  4295 ;; Defined at:
  4296 ;;		line 41 in file "serial.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  string          2    1[COMRAM] PTR unsigned char 
  4299 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), STR_4(3), sendArrayCharSerial4@tempStr(161), 
  4300 ;;		 -> sendIntSerial4@string(17), 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;		None
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  1    wreg      void 
  4305 ;; Registers used:
  4306 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4312 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4315 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4316 ;;Total ram usage:        2 bytes
  4317 ;; Hardware stack levels used: 1
  4318 ;; Hardware stack levels required when called: 2
  4319 ;; This function calls:
  4320 ;;		_sendCharSerial4
  4321 ;; This function is called by:
  4322 ;;		_sendIntSerial4
  4323 ;;		_sendArrayCharSerial4
  4324 ;;		_sendRGBCvalSerial4
  4325 ;;		_sendHSVvalSerial4
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text25
  4330   003176                     __ptext25:
  4331                           	callstack 0
  4332   003176                     _sendStringSerial4:
  4333                           	callstack 27
  4334   003176                     
  4335                           ;serial.c: 43:     while(*string != 0){
  4336   003176  EFD2  F018         	goto	l3466
  4337   00317A                     l3462:
  4338                           
  4339                           ;serial.c: 44:   sendCharSerial4(*string++);
  4340   00317A  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  4341   00317E  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  4342   003182  0E00               	movlw	low (__smallconst shr (0+16))
  4343   003184  6EF8               	movwf	tblptru,c
  4344   003186  0E0D               	movlw	(high __ramtop+-1)
  4345   003188  64F7               	cpfsgt	tblptrh,c
  4346   00318A  D003               	bra	u2577
  4347   00318C  0008               	tblrd		*
  4348   00318E  50F5               	movf	tablat,w,c
  4349   003190  D005               	bra	u2570
  4350   003192                     u2577:
  4351   003192  CFF6 FFE9          	movff	tblptrl,fsr0l
  4352   003196  CFF7 FFEA          	movff	tblptrh,fsr0h
  4353   00319A  50EF               	movf	indf0,w,c
  4354   00319C                     u2570:
  4355   00319C  ECB8  F01B         	call	_sendCharSerial4
  4356   0031A0  4A02               	infsnz	sendStringSerial4@string^0,f,c
  4357   0031A2  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  4358   0031A4                     l3466:
  4359                           
  4360                           ;serial.c: 43:     while(*string != 0){
  4361   0031A4  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  4362   0031A8  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  4363   0031AC  0E00               	movlw	low (__smallconst shr (0+16))
  4364   0031AE  6EF8               	movwf	tblptru,c
  4365   0031B0  0E0D               	movlw	(high __ramtop+-1)
  4366   0031B2  64F7               	cpfsgt	tblptrh,c
  4367   0031B4  D003               	bra	u2587
  4368   0031B6  0008               	tblrd		*
  4369   0031B8  50F5               	movf	tablat,w,c
  4370   0031BA  D005               	bra	u2580
  4371   0031BC                     u2587:
  4372   0031BC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4373   0031C0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4374   0031C4  50EF               	movf	indf0,w,c
  4375   0031C6                     u2580:
  4376   0031C6  0900               	iorlw	0
  4377   0031C8  A4D8               	btfss	status,2,c
  4378   0031CA  EFE9  F018         	goto	u2591
  4379   0031CE  EFEB  F018         	goto	u2590
  4380   0031D2                     u2591:
  4381   0031D2  EFBD  F018         	goto	l3462
  4382   0031D6                     u2590:
  4383   0031D6  0012               	return		;funcret
  4384   0031D8                     __end_of_sendStringSerial4:
  4385                           	callstack 0
  4386                           
  4387 ;; *************** function _sendCharSerial4 *****************
  4388 ;; Defined at:
  4389 ;;		line 33 in file "serial.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  charToSend      1    wreg     unsigned char 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  charToSend      1    0[COMRAM] unsigned char 
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4407 ;;Total ram usage:        1 bytes
  4408 ;; Hardware stack levels used: 1
  4409 ;; Hardware stack levels required when called: 1
  4410 ;; This function calls:
  4411 ;;		Nothing
  4412 ;; This function is called by:
  4413 ;;		_sendStringSerial4
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           	psect	text26
  4418   003770                     __ptext26:
  4419                           	callstack 0
  4420   003770                     _sendCharSerial4:
  4421                           	callstack 27
  4422                           
  4423                           ;incstack = 0
  4424                           ;sendCharSerial4@charToSend stored from wreg
  4425   003770  6E01               	movwf	sendCharSerial4@charToSend^0,c
  4426   003772                     l466:
  4427   003772  010E               	movlb	14	; () banked
  4428   003774  A537               	btfss	55,2,b	;volatile
  4429   003776  EFBF  F01B         	goto	u2491
  4430   00377A  EFC1  F01B         	goto	u2490
  4431   00377E                     u2491:
  4432   00377E  EFB9  F01B         	goto	l466
  4433   003782                     u2490:
  4434   003782                     
  4435                           ; BSR set to: 14
  4436                           ;serial.c: 35:     TX4REG = charToSend;
  4437   003782  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4438   003786                     
  4439                           ; BSR set to: 14
  4440   003786  0012               	return		;funcret
  4441   003788                     __end_of_sendCharSerial4:
  4442                           	callstack 0
  4443                           
  4444 ;; *************** function _scale_RGB *****************
  4445 ;; Defined at:
  4446 ;;		line 197 in file "color.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;  p               1   49[COMRAM] PTR struct RGBC_val
  4449 ;;		 -> main@RGBC_colour(8), 
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4461 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4463 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4464 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4465 ;;Total ram usage:        3 bytes
  4466 ;; Hardware stack levels used: 1
  4467 ;; Hardware stack levels required when called: 2
  4468 ;; This function calls:
  4469 ;;		___flmul
  4470 ;;		___fltol
  4471 ;;		___xxtofl
  4472 ;; This function is called by:
  4473 ;;		_main
  4474 ;;		_forward_navigation
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text27
  4479   002938                     __ptext27:
  4480                           	callstack 0
  4481   002938                     _scale_RGB:
  4482                           	callstack 28
  4483   002938                     
  4484                           ;color.c: 197: void scale_RGB(struct RGBC_val *p);color.c: 198: {;color.c: 199:     p->R
      +                           *= 0.5;
  4485   002938  0E00               	movlw	0
  4486   00293A  6E13               	movwf	___flmul@a^0,c
  4487   00293C  0E00               	movlw	0
  4488   00293E  6E14               	movwf	(___flmul@a+1)^0,c
  4489   002940  0E00               	movlw	0
  4490   002942  6E15               	movwf	(___flmul@a+2)^0,c
  4491   002944  0E3F               	movlw	63
  4492   002946  6E16               	movwf	(___flmul@a+3)^0,c
  4493   002948  5032               	movf	scale_RGB@p^0,w,c
  4494   00294A  6ED9               	movwf	fsr2l,c
  4495   00294C  6ADA               	clrf	fsr2h,c
  4496   00294E  CFDE F033          	movff	postinc2,??_scale_RGB
  4497   002952  CFDD F034          	movff	postdec2,??_scale_RGB+1
  4498   002956  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  4499   00295A  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  4500   00295E  6A03               	clrf	(___xxtofl@val+2)^0,c
  4501   002960  6A04               	clrf	(___xxtofl@val+3)^0,c
  4502   002962  0E00               	movlw	0
  4503   002964  EC3E  F011         	call	___xxtofl
  4504   002968  C001  F00F         	movff	?___xxtofl,___flmul@b
  4505   00296C  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  4506   002970  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  4507   002974  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  4508   002978  ECA5  F00C         	call	___flmul	;wreg free
  4509   00297C  C00F  F028         	movff	?___flmul,___fltol@f1
  4510   002980  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  4511   002984  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  4512   002988  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  4513   00298C  EC19  F014         	call	___fltol	;wreg free
  4514   002990  5032               	movf	scale_RGB@p^0,w,c
  4515   002992  6ED9               	movwf	fsr2l,c
  4516   002994  6ADA               	clrf	fsr2h,c
  4517   002996  C028  FFDE         	movff	?___fltol,postinc2
  4518   00299A  C029  FFDD         	movff	?___fltol+1,postdec2
  4519                           
  4520                           ;color.c: 200:     p->G *= 0.7;
  4521   00299E  0E33               	movlw	51
  4522   0029A0  6E13               	movwf	___flmul@a^0,c
  4523   0029A2  0E33               	movlw	51
  4524   0029A4  6E14               	movwf	(___flmul@a+1)^0,c
  4525   0029A6  0E33               	movlw	51
  4526   0029A8  6E15               	movwf	(___flmul@a+2)^0,c
  4527   0029AA  0E3F               	movlw	63
  4528   0029AC  6E16               	movwf	(___flmul@a+3)^0,c
  4529   0029AE  5032               	movf	scale_RGB@p^0,w,c
  4530   0029B0  6ED9               	movwf	fsr2l,c
  4531   0029B2  6ADA               	clrf	fsr2h,c
  4532   0029B4  0E02               	movlw	2
  4533   0029B6  26D9               	addwf	fsr2l,f,c
  4534   0029B8  CFDE F033          	movff	postinc2,??_scale_RGB
  4535   0029BC  CFDD F034          	movff	postdec2,??_scale_RGB+1
  4536   0029C0  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  4537   0029C4  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  4538   0029C8  6A03               	clrf	(___xxtofl@val+2)^0,c
  4539   0029CA  6A04               	clrf	(___xxtofl@val+3)^0,c
  4540   0029CC  0E00               	movlw	0
  4541   0029CE  EC3E  F011         	call	___xxtofl
  4542   0029D2  C001  F00F         	movff	?___xxtofl,___flmul@b
  4543   0029D6  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  4544   0029DA  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  4545   0029DE  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  4546   0029E2  ECA5  F00C         	call	___flmul	;wreg free
  4547   0029E6  C00F  F028         	movff	?___flmul,___fltol@f1
  4548   0029EA  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  4549   0029EE  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  4550   0029F2  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  4551   0029F6  EC19  F014         	call	___fltol	;wreg free
  4552   0029FA  5032               	movf	scale_RGB@p^0,w,c
  4553   0029FC  6ED9               	movwf	fsr2l,c
  4554   0029FE  6ADA               	clrf	fsr2h,c
  4555   002A00  0E02               	movlw	2
  4556   002A02  26D9               	addwf	fsr2l,f,c
  4557   002A04  C028  FFDE         	movff	?___fltol,postinc2
  4558   002A08  C029  FFDD         	movff	?___fltol+1,postdec2
  4559   002A0C  0012               	return		;funcret
  4560   002A0E                     __end_of_scale_RGB:
  4561                           	callstack 0
  4562                           
  4563 ;; *************** function ___xxtofl *****************
  4564 ;; Defined at:
  4565 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;  sign            1    wreg     unsigned char 
  4568 ;;  val             4    0[COMRAM] long 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  sign            1    8[COMRAM] unsigned char 
  4571 ;;  arg             4   10[COMRAM] unsigned long 
  4572 ;;  exp             1    9[COMRAM] unsigned char 
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  4    0[COMRAM] unsigned char 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4582 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4583 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4584 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4585 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4586 ;;Total ram usage:       14 bytes
  4587 ;; Hardware stack levels used: 1
  4588 ;; Hardware stack levels required when called: 1
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_scale_RGB
  4593 ;;		_stop
  4594 ;;		_turnLeft
  4595 ;;		_turnRight
  4596 ;;		_fullSpeedAhead
  4597 ;;		_fullSpeedReverse
  4598 ;;		_turnLeft90
  4599 ;;		_turnRight90
  4600 ;;		_turnLeft135
  4601 ;;		_turnRight135
  4602 ;;		_UTurn
  4603 ;;		_headbuttReverse
  4604 ;;		_squareReverse
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           	psect	text28
  4609   00227C                     __ptext28:
  4610                           	callstack 0
  4611   00227C                     ___xxtofl:
  4612                           	callstack 28
  4613                           
  4614                           ;incstack = 0
  4615                           ;___xxtofl@sign stored from wreg
  4616   00227C  6E09               	movwf	___xxtofl@sign^0,c
  4617   00227E  5009               	movf	___xxtofl@sign^0,w,c
  4618   002280  B4D8               	btfsc	status,2,c
  4619   002282  EF45  F011         	goto	u2911
  4620   002286  EF47  F011         	goto	u2910
  4621   00228A                     u2911:
  4622   00228A  EF69  F011         	goto	l1418
  4623   00228E                     u2910:
  4624   00228E  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  4625   002290  EF4E  F011         	goto	u2920
  4626   002294  EF4C  F011         	goto	u2921
  4627   002298                     u2921:
  4628   002298  EF69  F011         	goto	l1418
  4629   00229C                     u2920:
  4630   00229C  C001  F005         	movff	___xxtofl@val,??___xxtofl
  4631   0022A0  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  4632   0022A4  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  4633   0022A8  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  4634   0022AC  1E05               	comf	??___xxtofl^0,f,c
  4635   0022AE  1E06               	comf	(??___xxtofl+1)^0,f,c
  4636   0022B0  1E07               	comf	(??___xxtofl+2)^0,f,c
  4637   0022B2  1E08               	comf	(??___xxtofl+3)^0,f,c
  4638   0022B4  2A05               	incf	??___xxtofl^0,f,c
  4639   0022B6  0E00               	movlw	0
  4640   0022B8  2206               	addwfc	(??___xxtofl+1)^0,f,c
  4641   0022BA  2207               	addwfc	(??___xxtofl+2)^0,f,c
  4642   0022BC  2208               	addwfc	(??___xxtofl+3)^0,f,c
  4643   0022BE  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  4644   0022C2  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  4645   0022C6  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  4646   0022CA  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  4647   0022CE  EF71  F011         	goto	l3698
  4648   0022D2                     l1418:
  4649   0022D2  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  4650   0022D6  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4651   0022DA  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4652   0022DE  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4653   0022E2                     l3698:
  4654   0022E2  5001               	movf	___xxtofl@val^0,w,c
  4655   0022E4  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  4656   0022E6  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  4657   0022E8  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  4658   0022EA  A4D8               	btfss	status,2,c
  4659   0022EC  EF7A  F011         	goto	u2931
  4660   0022F0  EF7C  F011         	goto	u2930
  4661   0022F4                     u2931:
  4662   0022F4  EF86  F011         	goto	l3704
  4663   0022F8                     u2930:
  4664   0022F8  0E00               	movlw	0
  4665   0022FA  6E01               	movwf	?___xxtofl^0,c
  4666   0022FC  0E00               	movlw	0
  4667   0022FE  6E02               	movwf	(?___xxtofl+1)^0,c
  4668   002300  0E00               	movlw	0
  4669   002302  6E03               	movwf	(?___xxtofl+2)^0,c
  4670   002304  0E00               	movlw	0
  4671   002306  6E04               	movwf	(?___xxtofl+3)^0,c
  4672   002308  EF17  F012         	goto	l1421
  4673   00230C                     l3704:
  4674   00230C  0E96               	movlw	150
  4675   00230E  6E0A               	movwf	___xxtofl@exp^0,c
  4676   002310  EF90  F011         	goto	l3708
  4677   002314                     l3706:
  4678   002314  2A0A               	incf	___xxtofl@exp^0,f,c
  4679   002316  90D8               	bcf	status,0,c
  4680   002318  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4681   00231A  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4682   00231C  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4683   00231E  320B               	rrcf	___xxtofl@arg^0,f,c
  4684   002320                     l3708:
  4685   002320  0E00               	movlw	0
  4686   002322  140B               	andwf	___xxtofl@arg^0,w,c
  4687   002324  6E05               	movwf	??___xxtofl^0,c
  4688   002326  0E00               	movlw	0
  4689   002328  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4690   00232A  6E06               	movwf	(??___xxtofl+1)^0,c
  4691   00232C  0E00               	movlw	0
  4692   00232E  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4693   002330  6E07               	movwf	(??___xxtofl+2)^0,c
  4694   002332  0EFE               	movlw	254
  4695   002334  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4696   002336  6E08               	movwf	(??___xxtofl+3)^0,c
  4697   002338  5005               	movf	??___xxtofl^0,w,c
  4698   00233A  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4699   00233C  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4700   00233E  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4701   002340  A4D8               	btfss	status,2,c
  4702   002342  EFA5  F011         	goto	u2941
  4703   002346  EFA7  F011         	goto	u2940
  4704   00234A                     u2941:
  4705   00234A  EF8A  F011         	goto	l3706
  4706   00234E                     u2940:
  4707   00234E  EFB5  F011         	goto	l1425
  4708   002352                     l3710:
  4709   002352  2A0A               	incf	___xxtofl@exp^0,f,c
  4710   002354  0E01               	movlw	1
  4711   002356  260B               	addwf	___xxtofl@arg^0,f,c
  4712   002358  0E00               	movlw	0
  4713   00235A  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  4714   00235C  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  4715   00235E  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  4716   002360  90D8               	bcf	status,0,c
  4717   002362  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4718   002364  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4719   002366  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4720   002368  320B               	rrcf	___xxtofl@arg^0,f,c
  4721   00236A                     l1425:
  4722   00236A  0E00               	movlw	0
  4723   00236C  140B               	andwf	___xxtofl@arg^0,w,c
  4724   00236E  6E05               	movwf	??___xxtofl^0,c
  4725   002370  0E00               	movlw	0
  4726   002372  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4727   002374  6E06               	movwf	(??___xxtofl+1)^0,c
  4728   002376  0E00               	movlw	0
  4729   002378  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4730   00237A  6E07               	movwf	(??___xxtofl+2)^0,c
  4731   00237C  0EFF               	movlw	255
  4732   00237E  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4733   002380  6E08               	movwf	(??___xxtofl+3)^0,c
  4734   002382  5005               	movf	??___xxtofl^0,w,c
  4735   002384  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4736   002386  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4737   002388  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4738   00238A  A4D8               	btfss	status,2,c
  4739   00238C  EFCA  F011         	goto	u2951
  4740   002390  EFCC  F011         	goto	u2950
  4741   002394                     u2951:
  4742   002394  EFA9  F011         	goto	l3710
  4743   002398                     u2950:
  4744   002398  EFD4  F011         	goto	l3718
  4745   00239C                     l3716:
  4746   00239C  060A               	decf	___xxtofl@exp^0,f,c
  4747   00239E  90D8               	bcf	status,0,c
  4748   0023A0  360B               	rlcf	___xxtofl@arg^0,f,c
  4749   0023A2  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  4750   0023A4  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  4751   0023A6  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  4752   0023A8                     l3718:
  4753   0023A8  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  4754   0023AA  EFD9  F011         	goto	u2961
  4755   0023AE  EFDB  F011         	goto	u2960
  4756   0023B2                     u2961:
  4757   0023B2  EFE3  F011         	goto	l1432
  4758   0023B6                     u2960:
  4759   0023B6  0E02               	movlw	2
  4760   0023B8  600A               	cpfslt	___xxtofl@exp^0,c
  4761   0023BA  EFE1  F011         	goto	u2971
  4762   0023BE  EFE3  F011         	goto	u2970
  4763   0023C2                     u2971:
  4764   0023C2  EFCE  F011         	goto	l3716
  4765   0023C6                     u2970:
  4766   0023C6                     l1432:
  4767   0023C6  B00A               	btfsc	___xxtofl@exp^0,0,c
  4768   0023C8  EFE8  F011         	goto	u2981
  4769   0023CC  EFEA  F011         	goto	u2980
  4770   0023D0                     u2981:
  4771   0023D0  EFEB  F011         	goto	l3724
  4772   0023D4                     u2980:
  4773   0023D4  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  4774   0023D6                     l3724:
  4775   0023D6  90D8               	bcf	status,0,c
  4776   0023D8  320A               	rrcf	___xxtofl@exp^0,f,c
  4777   0023DA  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  4778   0023DE  6A06               	clrf	(??___xxtofl+1)^0,c
  4779   0023E0  6A07               	clrf	(??___xxtofl+2)^0,c
  4780   0023E2  6A08               	clrf	(??___xxtofl+3)^0,c
  4781   0023E4  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  4782   0023E8  6A07               	clrf	(??___xxtofl+2)^0,c
  4783   0023EA  6A06               	clrf	(??___xxtofl+1)^0,c
  4784   0023EC  6A05               	clrf	??___xxtofl^0,c
  4785   0023EE  5005               	movf	??___xxtofl^0,w,c
  4786   0023F0  120B               	iorwf	___xxtofl@arg^0,f,c
  4787   0023F2  5006               	movf	(??___xxtofl+1)^0,w,c
  4788   0023F4  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  4789   0023F6  5007               	movf	(??___xxtofl+2)^0,w,c
  4790   0023F8  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  4791   0023FA  5008               	movf	(??___xxtofl+3)^0,w,c
  4792   0023FC  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  4793   0023FE  5009               	movf	___xxtofl@sign^0,w,c
  4794   002400  B4D8               	btfsc	status,2,c
  4795   002402  EF05  F012         	goto	u2991
  4796   002406  EF07  F012         	goto	u2990
  4797   00240A                     u2991:
  4798   00240A  EF0F  F012         	goto	l3734
  4799   00240E                     u2990:
  4800   00240E  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  4801   002410  EF0E  F012         	goto	u3000
  4802   002414  EF0C  F012         	goto	u3001
  4803   002418                     u3001:
  4804   002418  EF0F  F012         	goto	l3734
  4805   00241C                     u3000:
  4806   00241C  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  4807   00241E                     l3734:
  4808   00241E  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  4809   002422  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  4810   002426  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  4811   00242A  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  4812   00242E                     l1421:
  4813   00242E  0012               	return		;funcret
  4814   002430                     __end_of___xxtofl:
  4815                           	callstack 0
  4816                           
  4817 ;; *************** function ___fltol *****************
  4818 ;; Defined at:
  4819 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  f1              4   39[COMRAM] unsigned char 
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;  exp1            1   48[COMRAM] unsigned char 
  4824 ;;  sign1           1   47[COMRAM] unsigned char 
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  4   39[COMRAM] long 
  4827 ;; Registers used:
  4828 ;;		wreg, status,2, status,0
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4834 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4836 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4837 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4838 ;;Total ram usage:       10 bytes
  4839 ;; Hardware stack levels used: 1
  4840 ;; Hardware stack levels required when called: 1
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_scale_RGB
  4845 ;;		_stop
  4846 ;;		_turnLeft
  4847 ;;		_turnRight
  4848 ;;		_fullSpeedAhead
  4849 ;;		_fullSpeedReverse
  4850 ;;		_turnLeft90
  4851 ;;		_turnRight90
  4852 ;;		_turnLeft135
  4853 ;;		_turnRight135
  4854 ;;		_UTurn
  4855 ;;		_headbuttReverse
  4856 ;;		_squareReverse
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           	psect	text29
  4861   002832                     __ptext29:
  4862                           	callstack 0
  4863   002832                     ___fltol:
  4864                           	callstack 28
  4865   002832  342A               	rlcf	(___fltol@f1+2)^0,w,c
  4866   002834  342B               	rlcf	(___fltol@f1+3)^0,w,c
  4867   002836  6E31               	movwf	___fltol@exp1^0,c
  4868   002838  5031               	movf	___fltol@exp1^0,w,c
  4869   00283A  A4D8               	btfss	status,2,c
  4870   00283C  EF22  F014         	goto	u2841
  4871   002840  EF24  F014         	goto	u2840
  4872   002844                     u2841:
  4873   002844  EF2E  F014         	goto	l3654
  4874   002848                     u2840:
  4875   002848                     l3650:
  4876   002848  0E00               	movlw	0
  4877   00284A  6E28               	movwf	?___fltol^0,c
  4878   00284C  0E00               	movlw	0
  4879   00284E  6E29               	movwf	(?___fltol+1)^0,c
  4880   002850  0E00               	movlw	0
  4881   002852  6E2A               	movwf	(?___fltol+2)^0,c
  4882   002854  0E00               	movlw	0
  4883   002856  6E2B               	movwf	(?___fltol+3)^0,c
  4884   002858  EF9B  F014         	goto	l1060
  4885   00285C                     l3654:
  4886   00285C  C028  F02C         	movff	___fltol@f1,??___fltol
  4887   002860  C029  F02D         	movff	___fltol@f1+1,??___fltol+1
  4888   002864  C02A  F02E         	movff	___fltol@f1+2,??___fltol+2
  4889   002868  C02B  F02F         	movff	___fltol@f1+3,??___fltol+3
  4890   00286C  0E20               	movlw	32
  4891   00286E  EF3E  F014         	goto	u2850
  4892   002872                     u2855:
  4893   002872  90D8               	bcf	status,0,c
  4894   002874  322F               	rrcf	(??___fltol+3)^0,f,c
  4895   002876  322E               	rrcf	(??___fltol+2)^0,f,c
  4896   002878  322D               	rrcf	(??___fltol+1)^0,f,c
  4897   00287A  322C               	rrcf	??___fltol^0,f,c
  4898   00287C                     u2850:
  4899   00287C  2EE8               	decfsz	wreg,f,c
  4900   00287E  EF39  F014         	goto	u2855
  4901   002882  502C               	movf	??___fltol^0,w,c
  4902   002884  6E30               	movwf	___fltol@sign1^0,c
  4903   002886  8E2A               	bsf	(___fltol@f1+2)^0,7,c
  4904   002888  0EFF               	movlw	255
  4905   00288A  1628               	andwf	___fltol@f1^0,f,c
  4906   00288C  0EFF               	movlw	255
  4907   00288E  1629               	andwf	(___fltol@f1+1)^0,f,c
  4908   002890  0EFF               	movlw	255
  4909   002892  162A               	andwf	(___fltol@f1+2)^0,f,c
  4910   002894  0E00               	movlw	0
  4911   002896  162B               	andwf	(___fltol@f1+3)^0,f,c
  4912   002898  0E96               	movlw	150
  4913   00289A  5E31               	subwf	___fltol@exp1^0,f,c
  4914   00289C  BE31               	btfsc	___fltol@exp1^0,7,c
  4915   00289E  EF55  F014         	goto	u2860
  4916   0028A2  EF53  F014         	goto	u2861
  4917   0028A6                     u2861:
  4918   0028A6  EF6B  F014         	goto	l3674
  4919   0028AA                     u2860:
  4920   0028AA  5031               	movf	___fltol@exp1^0,w,c
  4921   0028AC  0A80               	xorlw	128
  4922   0028AE  0F97               	addlw	151
  4923   0028B0  B0D8               	btfsc	status,0,c
  4924   0028B2  EF5D  F014         	goto	u2871
  4925   0028B6  EF5F  F014         	goto	u2870
  4926   0028BA                     u2871:
  4927   0028BA  EF61  F014         	goto	l3670
  4928   0028BE                     u2870:
  4929   0028BE  EF24  F014         	goto	l3650
  4930   0028C2                     l3670:
  4931   0028C2  90D8               	bcf	status,0,c
  4932   0028C4  322B               	rrcf	(___fltol@f1+3)^0,f,c
  4933   0028C6  322A               	rrcf	(___fltol@f1+2)^0,f,c
  4934   0028C8  3229               	rrcf	(___fltol@f1+1)^0,f,c
  4935   0028CA  3228               	rrcf	___fltol@f1^0,f,c
  4936   0028CC  3E31               	incfsz	___fltol@exp1^0,f,c
  4937   0028CE  EF61  F014         	goto	l3670
  4938   0028D2  EF83  F014         	goto	l3684
  4939   0028D6                     l3674:
  4940   0028D6  0E1F               	movlw	31
  4941   0028D8  6431               	cpfsgt	___fltol@exp1^0,c
  4942   0028DA  EF71  F014         	goto	u2881
  4943   0028DE  EF73  F014         	goto	u2880
  4944   0028E2                     u2881:
  4945   0028E2  EF7B  F014         	goto	l3682
  4946   0028E6                     u2880:
  4947   0028E6  EF24  F014         	goto	l3650
  4948   0028EA                     l3680:
  4949   0028EA  90D8               	bcf	status,0,c
  4950   0028EC  3628               	rlcf	___fltol@f1^0,f,c
  4951   0028EE  3629               	rlcf	(___fltol@f1+1)^0,f,c
  4952   0028F0  362A               	rlcf	(___fltol@f1+2)^0,f,c
  4953   0028F2  362B               	rlcf	(___fltol@f1+3)^0,f,c
  4954   0028F4  0631               	decf	___fltol@exp1^0,f,c
  4955   0028F6                     l3682:
  4956   0028F6  5031               	movf	___fltol@exp1^0,w,c
  4957   0028F8  A4D8               	btfss	status,2,c
  4958   0028FA  EF81  F014         	goto	u2891
  4959   0028FE  EF83  F014         	goto	u2890
  4960   002902                     u2891:
  4961   002902  EF75  F014         	goto	l3680
  4962   002906                     u2890:
  4963   002906                     l3684:
  4964   002906  5030               	movf	___fltol@sign1^0,w,c
  4965   002908  B4D8               	btfsc	status,2,c
  4966   00290A  EF89  F014         	goto	u2901
  4967   00290E  EF8B  F014         	goto	u2900
  4968   002912                     u2901:
  4969   002912  EF93  F014         	goto	l3688
  4970   002916                     u2900:
  4971   002916  1E2B               	comf	(___fltol@f1+3)^0,f,c
  4972   002918  1E2A               	comf	(___fltol@f1+2)^0,f,c
  4973   00291A  1E29               	comf	(___fltol@f1+1)^0,f,c
  4974   00291C  6C28               	negf	___fltol@f1^0,c
  4975   00291E  0E00               	movlw	0
  4976   002920  2229               	addwfc	(___fltol@f1+1)^0,f,c
  4977   002922  222A               	addwfc	(___fltol@f1+2)^0,f,c
  4978   002924  222B               	addwfc	(___fltol@f1+3)^0,f,c
  4979   002926                     l3688:
  4980   002926  C028  F028         	movff	___fltol@f1,?___fltol
  4981   00292A  C029  F029         	movff	___fltol@f1+1,?___fltol+1
  4982   00292E  C02A  F02A         	movff	___fltol@f1+2,?___fltol+2
  4983   002932  C02B  F02B         	movff	___fltol@f1+3,?___fltol+3
  4984   002936                     l1060:
  4985   002936  0012               	return		;funcret
  4986   002938                     __end_of___fltol:
  4987                           	callstack 0
  4988                           
  4989 ;; *************** function ___flmul *****************
  4990 ;; Defined at:
  4991 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  b               4   14[COMRAM] long 
  4994 ;;  a               4   18[COMRAM] long 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  prod            4   33[COMRAM] struct .
  4997 ;;  grs             4   27[COMRAM] unsigned long 
  4998 ;;  temp            2   37[COMRAM] struct .
  4999 ;;  bexp            1   32[COMRAM] unsigned char 
  5000 ;;  aexp            1   31[COMRAM] unsigned char 
  5001 ;;  sign            1   26[COMRAM] unsigned char 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  4   14[COMRAM] unsigned char 
  5004 ;; Registers used:
  5005 ;;		wreg, status,2, status,0, prodl, prodh
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5011 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5012 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5013 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5014 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5015 ;;Total ram usage:       25 bytes
  5016 ;; Hardware stack levels used: 1
  5017 ;; Hardware stack levels required when called: 1
  5018 ;; This function calls:
  5019 ;;		Nothing
  5020 ;; This function is called by:
  5021 ;;		_scale_RGB
  5022 ;;		_stop
  5023 ;;		_turnLeft
  5024 ;;		_turnRight
  5025 ;;		_fullSpeedAhead
  5026 ;;		_fullSpeedReverse
  5027 ;;		_turnLeft90
  5028 ;;		_turnRight90
  5029 ;;		_turnLeft135
  5030 ;;		_turnRight135
  5031 ;;		_UTurn
  5032 ;;		_headbuttReverse
  5033 ;;		_squareReverse
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           	psect	text30
  5038   00194A                     __ptext30:
  5039                           	callstack 0
  5040   00194A                     ___flmul:
  5041                           	callstack 28
  5042   00194A  5012               	movf	(___flmul@b+3)^0,w,c
  5043   00194C  0B80               	andlw	128
  5044   00194E  6E1B               	movwf	___flmul@sign^0,c
  5045   001950  5012               	movf	(___flmul@b+3)^0,w,c
  5046   001952  2412               	addwf	(___flmul@b+3)^0,w,c
  5047   001954  6E21               	movwf	___flmul@bexp^0,c
  5048   001956  AE11               	btfss	(___flmul@b+2)^0,7,c
  5049   001958  EFB0  F00C         	goto	u2651
  5050   00195C  EFB2  F00C         	goto	u2650
  5051   001960                     u2651:
  5052   001960  EFB3  F00C         	goto	l3524
  5053   001964                     u2650:
  5054   001964  8021               	bsf	___flmul@bexp^0,0,c
  5055   001966                     l3524:
  5056   001966  5021               	movf	___flmul@bexp^0,w,c
  5057   001968  B4D8               	btfsc	status,2,c
  5058   00196A  EFB9  F00C         	goto	u2661
  5059   00196E  EFBB  F00C         	goto	u2660
  5060   001972                     u2661:
  5061   001972  EFCE  F00C         	goto	l3532
  5062   001976                     u2660:
  5063   001976  2821               	incf	___flmul@bexp^0,w,c
  5064   001978  A4D8               	btfss	status,2,c
  5065   00197A  EFC1  F00C         	goto	u2671
  5066   00197E  EFC3  F00C         	goto	u2670
  5067   001982                     u2671:
  5068   001982  EFCB  F00C         	goto	l3530
  5069   001986                     u2670:
  5070   001986  0E00               	movlw	0
  5071   001988  6E0F               	movwf	___flmul@b^0,c
  5072   00198A  0E00               	movlw	0
  5073   00198C  6E10               	movwf	(___flmul@b+1)^0,c
  5074   00198E  0E00               	movlw	0
  5075   001990  6E11               	movwf	(___flmul@b+2)^0,c
  5076   001992  0E00               	movlw	0
  5077   001994  6E12               	movwf	(___flmul@b+3)^0,c
  5078   001996                     l3530:
  5079   001996  8E11               	bsf	(___flmul@b+2)^0,7,c
  5080   001998  EFD6  F00C         	goto	l3534
  5081   00199C                     l3532:
  5082   00199C  0E00               	movlw	0
  5083   00199E  6E0F               	movwf	___flmul@b^0,c
  5084   0019A0  0E00               	movlw	0
  5085   0019A2  6E10               	movwf	(___flmul@b+1)^0,c
  5086   0019A4  0E00               	movlw	0
  5087   0019A6  6E11               	movwf	(___flmul@b+2)^0,c
  5088   0019A8  0E00               	movlw	0
  5089   0019AA  6E12               	movwf	(___flmul@b+3)^0,c
  5090   0019AC                     l3534:
  5091   0019AC  5016               	movf	(___flmul@a+3)^0,w,c
  5092   0019AE  0B80               	andlw	128
  5093   0019B0  1A1B               	xorwf	___flmul@sign^0,f,c
  5094   0019B2  5016               	movf	(___flmul@a+3)^0,w,c
  5095   0019B4  2416               	addwf	(___flmul@a+3)^0,w,c
  5096   0019B6  6E20               	movwf	___flmul@aexp^0,c
  5097   0019B8  AE15               	btfss	(___flmul@a+2)^0,7,c
  5098   0019BA  EFE1  F00C         	goto	u2681
  5099   0019BE  EFE3  F00C         	goto	u2680
  5100   0019C2                     u2681:
  5101   0019C2  EFE4  F00C         	goto	l3542
  5102   0019C6                     u2680:
  5103   0019C6  8020               	bsf	___flmul@aexp^0,0,c
  5104   0019C8                     l3542:
  5105   0019C8  5020               	movf	___flmul@aexp^0,w,c
  5106   0019CA  B4D8               	btfsc	status,2,c
  5107   0019CC  EFEA  F00C         	goto	u2691
  5108   0019D0  EFEC  F00C         	goto	u2690
  5109   0019D4                     u2691:
  5110   0019D4  EFFF  F00C         	goto	l3550
  5111   0019D8                     u2690:
  5112   0019D8  2820               	incf	___flmul@aexp^0,w,c
  5113   0019DA  A4D8               	btfss	status,2,c
  5114   0019DC  EFF2  F00C         	goto	u2701
  5115   0019E0  EFF4  F00C         	goto	u2700
  5116   0019E4                     u2701:
  5117   0019E4  EFFC  F00C         	goto	l3548
  5118   0019E8                     u2700:
  5119   0019E8  0E00               	movlw	0
  5120   0019EA  6E13               	movwf	___flmul@a^0,c
  5121   0019EC  0E00               	movlw	0
  5122   0019EE  6E14               	movwf	(___flmul@a+1)^0,c
  5123   0019F0  0E00               	movlw	0
  5124   0019F2  6E15               	movwf	(___flmul@a+2)^0,c
  5125   0019F4  0E00               	movlw	0
  5126   0019F6  6E16               	movwf	(___flmul@a+3)^0,c
  5127   0019F8                     l3548:
  5128   0019F8  8E15               	bsf	(___flmul@a+2)^0,7,c
  5129   0019FA  EF07  F00D         	goto	l1377
  5130   0019FE                     l3550:
  5131   0019FE  0E00               	movlw	0
  5132   001A00  6E13               	movwf	___flmul@a^0,c
  5133   001A02  0E00               	movlw	0
  5134   001A04  6E14               	movwf	(___flmul@a+1)^0,c
  5135   001A06  0E00               	movlw	0
  5136   001A08  6E15               	movwf	(___flmul@a+2)^0,c
  5137   001A0A  0E00               	movlw	0
  5138   001A0C  6E16               	movwf	(___flmul@a+3)^0,c
  5139   001A0E                     l1377:
  5140   001A0E  5020               	movf	___flmul@aexp^0,w,c
  5141   001A10  B4D8               	btfsc	status,2,c
  5142   001A12  EF0D  F00D         	goto	u2711
  5143   001A16  EF0F  F00D         	goto	u2710
  5144   001A1A                     u2711:
  5145   001A1A  EF17  F00D         	goto	l3554
  5146   001A1E                     u2710:
  5147   001A1E  5021               	movf	___flmul@bexp^0,w,c
  5148   001A20  A4D8               	btfss	status,2,c
  5149   001A22  EF15  F00D         	goto	u2721
  5150   001A26  EF17  F00D         	goto	u2720
  5151   001A2A                     u2721:
  5152   001A2A  EF21  F00D         	goto	l3558
  5153   001A2E                     u2720:
  5154   001A2E                     l3554:
  5155   001A2E  0E00               	movlw	0
  5156   001A30  6E0F               	movwf	?___flmul^0,c
  5157   001A32  0E00               	movlw	0
  5158   001A34  6E10               	movwf	(?___flmul+1)^0,c
  5159   001A36  0E00               	movlw	0
  5160   001A38  6E11               	movwf	(?___flmul+2)^0,c
  5161   001A3A  0E00               	movlw	0
  5162   001A3C  6E12               	movwf	(?___flmul+3)^0,c
  5163   001A3E  EFB9  F00E         	goto	l1381
  5164   001A42                     l3558:
  5165   001A42  5015               	movf	(___flmul@a+2)^0,w,c
  5166   001A44  020F               	mulwf	___flmul@b^0,c
  5167   001A46  CFF3 F026          	movff	prodl,___flmul@temp
  5168   001A4A  CFF4 F027          	movff	prodh,___flmul@temp+1
  5169   001A4E  5026               	movf	___flmul@temp^0,w,c
  5170   001A50  6E1C               	movwf	___flmul@grs^0,c
  5171   001A52  6A1D               	clrf	(___flmul@grs+1)^0,c
  5172   001A54  6A1E               	clrf	(___flmul@grs+2)^0,c
  5173   001A56  6A1F               	clrf	(___flmul@grs+3)^0,c
  5174   001A58  5027               	movf	(___flmul@temp+1)^0,w,c
  5175   001A5A  6E22               	movwf	___flmul@prod^0,c
  5176   001A5C  6A23               	clrf	(___flmul@prod+1)^0,c
  5177   001A5E  6A24               	clrf	(___flmul@prod+2)^0,c
  5178   001A60  6A25               	clrf	(___flmul@prod+3)^0,c
  5179   001A62  5014               	movf	(___flmul@a+1)^0,w,c
  5180   001A64  0210               	mulwf	(___flmul@b+1)^0,c
  5181   001A66  CFF3 F026          	movff	prodl,___flmul@temp
  5182   001A6A  CFF4 F027          	movff	prodh,___flmul@temp+1
  5183   001A6E  5026               	movf	___flmul@temp^0,w,c
  5184   001A70  261C               	addwf	___flmul@grs^0,f,c
  5185   001A72  0E00               	movlw	0
  5186   001A74  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5187   001A76  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5188   001A78  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5189   001A7A  5027               	movf	(___flmul@temp+1)^0,w,c
  5190   001A7C  2622               	addwf	___flmul@prod^0,f,c
  5191   001A7E  0E00               	movlw	0
  5192   001A80  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5193   001A82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5194   001A84  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5195   001A86  5013               	movf	___flmul@a^0,w,c
  5196   001A88  0211               	mulwf	(___flmul@b+2)^0,c
  5197   001A8A  CFF3 F026          	movff	prodl,___flmul@temp
  5198   001A8E  CFF4 F027          	movff	prodh,___flmul@temp+1
  5199   001A92  5026               	movf	___flmul@temp^0,w,c
  5200   001A94  261C               	addwf	___flmul@grs^0,f,c
  5201   001A96  0E00               	movlw	0
  5202   001A98  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5203   001A9A  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5204   001A9C  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5205   001A9E  5027               	movf	(___flmul@temp+1)^0,w,c
  5206   001AA0  2622               	addwf	___flmul@prod^0,f,c
  5207   001AA2  0E00               	movlw	0
  5208   001AA4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5209   001AA6  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5210   001AA8  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5211   001AAA  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  5212   001AAE  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  5213   001AB2  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  5214   001AB6  6A1C               	clrf	___flmul@grs^0,c
  5215   001AB8  5013               	movf	___flmul@a^0,w,c
  5216   001ABA  0210               	mulwf	(___flmul@b+1)^0,c
  5217   001ABC  CFF3 F026          	movff	prodl,___flmul@temp
  5218   001AC0  CFF4 F027          	movff	prodh,___flmul@temp+1
  5219   001AC4  5026               	movf	___flmul@temp^0,w,c
  5220   001AC6  261C               	addwf	___flmul@grs^0,f,c
  5221   001AC8  5027               	movf	(___flmul@temp+1)^0,w,c
  5222   001ACA  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5223   001ACC  0E00               	movlw	0
  5224   001ACE  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5225   001AD0  0E00               	movlw	0
  5226   001AD2  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5227   001AD4  5014               	movf	(___flmul@a+1)^0,w,c
  5228   001AD6  020F               	mulwf	___flmul@b^0,c
  5229   001AD8  CFF3 F026          	movff	prodl,___flmul@temp
  5230   001ADC  CFF4 F027          	movff	prodh,___flmul@temp+1
  5231   001AE0  5026               	movf	___flmul@temp^0,w,c
  5232   001AE2  261C               	addwf	___flmul@grs^0,f,c
  5233   001AE4  5027               	movf	(___flmul@temp+1)^0,w,c
  5234   001AE6  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5235   001AE8  0E00               	movlw	0
  5236   001AEA  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5237   001AEC  0E00               	movlw	0
  5238   001AEE  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5239   001AF0  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  5240   001AF4  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  5241   001AF8  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  5242   001AFC  6A1C               	clrf	___flmul@grs^0,c
  5243   001AFE  5013               	movf	___flmul@a^0,w,c
  5244   001B00  020F               	mulwf	___flmul@b^0,c
  5245   001B02  CFF3 F026          	movff	prodl,___flmul@temp
  5246   001B06  CFF4 F027          	movff	prodh,___flmul@temp+1
  5247   001B0A  5026               	movf	___flmul@temp^0,w,c
  5248   001B0C  261C               	addwf	___flmul@grs^0,f,c
  5249   001B0E  5027               	movf	(___flmul@temp+1)^0,w,c
  5250   001B10  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5251   001B12  0E00               	movlw	0
  5252   001B14  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5253   001B16  0E00               	movlw	0
  5254   001B18  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5255   001B1A  5015               	movf	(___flmul@a+2)^0,w,c
  5256   001B1C  0210               	mulwf	(___flmul@b+1)^0,c
  5257   001B1E  CFF3 F026          	movff	prodl,___flmul@temp
  5258   001B22  CFF4 F027          	movff	prodh,___flmul@temp+1
  5259   001B26  5026               	movf	___flmul@temp^0,w,c
  5260   001B28  2622               	addwf	___flmul@prod^0,f,c
  5261   001B2A  5027               	movf	(___flmul@temp+1)^0,w,c
  5262   001B2C  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5263   001B2E  0E00               	movlw	0
  5264   001B30  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5265   001B32  0E00               	movlw	0
  5266   001B34  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5267   001B36  5014               	movf	(___flmul@a+1)^0,w,c
  5268   001B38  0211               	mulwf	(___flmul@b+2)^0,c
  5269   001B3A  CFF3 F026          	movff	prodl,___flmul@temp
  5270   001B3E  CFF4 F027          	movff	prodh,___flmul@temp+1
  5271   001B42  5026               	movf	___flmul@temp^0,w,c
  5272   001B44  2622               	addwf	___flmul@prod^0,f,c
  5273   001B46  5027               	movf	(___flmul@temp+1)^0,w,c
  5274   001B48  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5275   001B4A  0E00               	movlw	0
  5276   001B4C  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5277   001B4E  0E00               	movlw	0
  5278   001B50  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5279   001B52  5015               	movf	(___flmul@a+2)^0,w,c
  5280   001B54  0211               	mulwf	(___flmul@b+2)^0,c
  5281   001B56  CFF3 F026          	movff	prodl,___flmul@temp
  5282   001B5A  CFF4 F027          	movff	prodh,___flmul@temp+1
  5283   001B5E  5026               	movf	___flmul@temp^0,w,c
  5284   001B60  6E17               	movwf	??___flmul^0,c
  5285   001B62  5027               	movf	(___flmul@temp+1)^0,w,c
  5286   001B64  6E18               	movwf	(??___flmul+1)^0,c
  5287   001B66  6A19               	clrf	(??___flmul+2)^0,c
  5288   001B68  6A1A               	clrf	(??___flmul+3)^0,c
  5289   001B6A  C019  F01A         	movff	??___flmul+2,??___flmul+3
  5290   001B6E  C018  F019         	movff	??___flmul+1,??___flmul+2
  5291   001B72  C017  F018         	movff	??___flmul,??___flmul+1
  5292   001B76  6A17               	clrf	??___flmul^0,c
  5293   001B78  5017               	movf	??___flmul^0,w,c
  5294   001B7A  2622               	addwf	___flmul@prod^0,f,c
  5295   001B7C  5018               	movf	(??___flmul+1)^0,w,c
  5296   001B7E  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5297   001B80  5019               	movf	(??___flmul+2)^0,w,c
  5298   001B82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5299   001B84  501A               	movf	(??___flmul+3)^0,w,c
  5300   001B86  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5301   001B88  C01C  F017         	movff	___flmul@grs,??___flmul
  5302   001B8C  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  5303   001B90  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  5304   001B94  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  5305   001B98  0E19               	movlw	25
  5306   001B9A  EFD4  F00D         	goto	u2730
  5307   001B9E                     u2735:
  5308   001B9E  90D8               	bcf	status,0,c
  5309   001BA0  321A               	rrcf	(??___flmul+3)^0,f,c
  5310   001BA2  3219               	rrcf	(??___flmul+2)^0,f,c
  5311   001BA4  3218               	rrcf	(??___flmul+1)^0,f,c
  5312   001BA6  3217               	rrcf	??___flmul^0,f,c
  5313   001BA8                     u2730:
  5314   001BA8  2EE8               	decfsz	wreg,f,c
  5315   001BAA  EFCF  F00D         	goto	u2735
  5316   001BAE  5017               	movf	??___flmul^0,w,c
  5317   001BB0  2622               	addwf	___flmul@prod^0,f,c
  5318   001BB2  5018               	movf	(??___flmul+1)^0,w,c
  5319   001BB4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5320   001BB6  5019               	movf	(??___flmul+2)^0,w,c
  5321   001BB8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5322   001BBA  501A               	movf	(??___flmul+3)^0,w,c
  5323   001BBC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5324   001BBE  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  5325   001BC2  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  5326   001BC6  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  5327   001BCA  6A1C               	clrf	___flmul@grs^0,c
  5328   001BCC  5020               	movf	___flmul@aexp^0,w,c
  5329   001BCE  C021  F017         	movff	___flmul@bexp,??___flmul
  5330   001BD2  6A18               	clrf	(??___flmul+1)^0,c
  5331   001BD4  2617               	addwf	??___flmul^0,f,c
  5332   001BD6  0E00               	movlw	0
  5333   001BD8  2218               	addwfc	(??___flmul+1)^0,f,c
  5334   001BDA  0E82               	movlw	130
  5335   001BDC  2417               	addwf	??___flmul^0,w,c
  5336   001BDE  6E26               	movwf	___flmul@temp^0,c
  5337   001BE0  0EFF               	movlw	255
  5338   001BE2  2018               	addwfc	(??___flmul+1)^0,w,c
  5339   001BE4  6E27               	movwf	(___flmul@temp+1)^0,c
  5340   001BE6  EF0A  F00E         	goto	l3606
  5341   001BEA                     l3600:
  5342   001BEA  90D8               	bcf	status,0,c
  5343   001BEC  3622               	rlcf	___flmul@prod^0,f,c
  5344   001BEE  3623               	rlcf	(___flmul@prod+1)^0,f,c
  5345   001BF0  3624               	rlcf	(___flmul@prod+2)^0,f,c
  5346   001BF2  3625               	rlcf	(___flmul@prod+3)^0,f,c
  5347   001BF4  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  5348   001BF6  EFFF  F00D         	goto	u2741
  5349   001BFA  EF01  F00E         	goto	u2740
  5350   001BFE                     u2741:
  5351   001BFE  EF02  F00E         	goto	l1384
  5352   001C02                     u2740:
  5353   001C02  8022               	bsf	___flmul@prod^0,0,c
  5354   001C04                     l1384:
  5355   001C04  90D8               	bcf	status,0,c
  5356   001C06  361C               	rlcf	___flmul@grs^0,f,c
  5357   001C08  361D               	rlcf	(___flmul@grs+1)^0,f,c
  5358   001C0A  361E               	rlcf	(___flmul@grs+2)^0,f,c
  5359   001C0C  361F               	rlcf	(___flmul@grs+3)^0,f,c
  5360   001C0E  0626               	decf	___flmul@temp^0,f,c
  5361   001C10  A0D8               	btfss	status,0,c
  5362   001C12  0627               	decf	(___flmul@temp+1)^0,f,c
  5363   001C14                     l3606:
  5364   001C14  AE24               	btfss	(___flmul@prod+2)^0,7,c
  5365   001C16  EF0F  F00E         	goto	u2751
  5366   001C1A  EF11  F00E         	goto	u2750
  5367   001C1E                     u2751:
  5368   001C1E  EFF5  F00D         	goto	l3600
  5369   001C22                     u2750:
  5370   001C22  0E00               	movlw	0
  5371   001C24  6E20               	movwf	___flmul@aexp^0,c
  5372   001C26  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  5373   001C28  EF18  F00E         	goto	u2761
  5374   001C2C  EF1A  F00E         	goto	u2760
  5375   001C30                     u2761:
  5376   001C30  EF3E  F00E         	goto	l1386
  5377   001C34                     u2760:
  5378   001C34  0EFF               	movlw	255
  5379   001C36  141C               	andwf	___flmul@grs^0,w,c
  5380   001C38  6E17               	movwf	??___flmul^0,c
  5381   001C3A  0EFF               	movlw	255
  5382   001C3C  141D               	andwf	(___flmul@grs+1)^0,w,c
  5383   001C3E  6E18               	movwf	(??___flmul+1)^0,c
  5384   001C40  0EFF               	movlw	255
  5385   001C42  141E               	andwf	(___flmul@grs+2)^0,w,c
  5386   001C44  6E19               	movwf	(??___flmul+2)^0,c
  5387   001C46  0E7F               	movlw	127
  5388   001C48  141F               	andwf	(___flmul@grs+3)^0,w,c
  5389   001C4A  6E1A               	movwf	(??___flmul+3)^0,c
  5390   001C4C  5017               	movf	??___flmul^0,w,c
  5391   001C4E  1018               	iorwf	(??___flmul+1)^0,w,c
  5392   001C50  1019               	iorwf	(??___flmul+2)^0,w,c
  5393   001C52  101A               	iorwf	(??___flmul+3)^0,w,c
  5394   001C54  B4D8               	btfsc	status,2,c
  5395   001C56  EF2F  F00E         	goto	u2771
  5396   001C5A  EF31  F00E         	goto	u2770
  5397   001C5E                     u2771:
  5398   001C5E  EF35  F00E         	goto	l1387
  5399   001C62                     u2770:
  5400   001C62                     l3614:
  5401   001C62  0E01               	movlw	1
  5402   001C64  6E20               	movwf	___flmul@aexp^0,c
  5403   001C66  EF3E  F00E         	goto	l1386
  5404   001C6A                     l1387:
  5405   001C6A  A022               	btfss	___flmul@prod^0,0,c
  5406   001C6C  EF3A  F00E         	goto	u2781
  5407   001C70  EF3C  F00E         	goto	u2780
  5408   001C74                     u2781:
  5409   001C74  EF3E  F00E         	goto	l1386
  5410   001C78                     u2780:
  5411   001C78  EF31  F00E         	goto	l3614
  5412   001C7C                     l1386:
  5413   001C7C  5020               	movf	___flmul@aexp^0,w,c
  5414   001C7E  B4D8               	btfsc	status,2,c
  5415   001C80  EF44  F00E         	goto	u2791
  5416   001C84  EF46  F00E         	goto	u2790
  5417   001C88                     u2791:
  5418   001C88  EF6A  F00E         	goto	l3626
  5419   001C8C                     u2790:
  5420   001C8C  0E01               	movlw	1
  5421   001C8E  2622               	addwf	___flmul@prod^0,f,c
  5422   001C90  0E00               	movlw	0
  5423   001C92  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5424   001C94  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5425   001C96  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5426   001C98  A025               	btfss	(___flmul@prod+3)^0,0,c
  5427   001C9A  EF51  F00E         	goto	u2801
  5428   001C9E  EF53  F00E         	goto	u2800
  5429   001CA2                     u2801:
  5430   001CA2  EF6A  F00E         	goto	l3626
  5431   001CA6                     u2800:
  5432   001CA6  C022  F017         	movff	___flmul@prod,??___flmul
  5433   001CAA  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  5434   001CAE  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  5435   001CB2  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  5436   001CB6  341A               	rlcf	(??___flmul+3)^0,w,c
  5437   001CB8  321A               	rrcf	(??___flmul+3)^0,f,c
  5438   001CBA  3219               	rrcf	(??___flmul+2)^0,f,c
  5439   001CBC  3218               	rrcf	(??___flmul+1)^0,f,c
  5440   001CBE  3217               	rrcf	??___flmul^0,f,c
  5441   001CC0  C017  F022         	movff	??___flmul,___flmul@prod
  5442   001CC4  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  5443   001CC8  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  5444   001CCC  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  5445   001CD0  4A26               	infsnz	___flmul@temp^0,f,c
  5446   001CD2  2A27               	incf	(___flmul@temp+1)^0,f,c
  5447   001CD4                     l3626:
  5448   001CD4  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  5449   001CD6  EF75  F00E         	goto	u2811
  5450   001CDA  5027               	movf	(___flmul@temp+1)^0,w,c
  5451   001CDC  E108               	bnz	u2810
  5452   001CDE  2826               	incf	___flmul@temp^0,w,c
  5453   001CE0  A0D8               	btfss	status,0,c
  5454   001CE2  EF75  F00E         	goto	u2811
  5455   001CE6  EF77  F00E         	goto	u2810
  5456   001CEA                     u2811:
  5457   001CEA  EF81  F00E         	goto	l3630
  5458   001CEE                     u2810:
  5459   001CEE  0E00               	movlw	0
  5460   001CF0  6E22               	movwf	___flmul@prod^0,c
  5461   001CF2  0E00               	movlw	0
  5462   001CF4  6E23               	movwf	(___flmul@prod+1)^0,c
  5463   001CF6  0E80               	movlw	128
  5464   001CF8  6E24               	movwf	(___flmul@prod+2)^0,c
  5465   001CFA  0E7F               	movlw	127
  5466   001CFC  6E25               	movwf	(___flmul@prod+3)^0,c
  5467   001CFE  EFAF  F00E         	goto	l3642
  5468   001D02                     l3630:
  5469   001D02  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  5470   001D04  EF8E  F00E         	goto	u2820
  5471   001D08  5027               	movf	(___flmul@temp+1)^0,w,c
  5472   001D0A  E106               	bnz	u2821
  5473   001D0C  0426               	decf	___flmul@temp^0,w,c
  5474   001D0E  B0D8               	btfsc	status,0,c
  5475   001D10  EF8C  F00E         	goto	u2821
  5476   001D14  EF8E  F00E         	goto	u2820
  5477   001D18                     u2821:
  5478   001D18  EF9A  F00E         	goto	l1394
  5479   001D1C                     u2820:
  5480   001D1C  0E00               	movlw	0
  5481   001D1E  6E22               	movwf	___flmul@prod^0,c
  5482   001D20  0E00               	movlw	0
  5483   001D22  6E23               	movwf	(___flmul@prod+1)^0,c
  5484   001D24  0E00               	movlw	0
  5485   001D26  6E24               	movwf	(___flmul@prod+2)^0,c
  5486   001D28  0E00               	movlw	0
  5487   001D2A  6E25               	movwf	(___flmul@prod+3)^0,c
  5488   001D2C  0E00               	movlw	0
  5489   001D2E  6E1B               	movwf	___flmul@sign^0,c
  5490   001D30  EFAF  F00E         	goto	l3642
  5491   001D34                     l1394:
  5492   001D34  C026  F021         	movff	___flmul@temp,___flmul@bexp
  5493   001D38  0EFF               	movlw	255
  5494   001D3A  1622               	andwf	___flmul@prod^0,f,c
  5495   001D3C  0EFF               	movlw	255
  5496   001D3E  1623               	andwf	(___flmul@prod+1)^0,f,c
  5497   001D40  0E7F               	movlw	127
  5498   001D42  1624               	andwf	(___flmul@prod+2)^0,f,c
  5499   001D44  0E00               	movlw	0
  5500   001D46  1625               	andwf	(___flmul@prod+3)^0,f,c
  5501   001D48  A021               	btfss	___flmul@bexp^0,0,c
  5502   001D4A  EFA9  F00E         	goto	u2831
  5503   001D4E  EFAB  F00E         	goto	u2830
  5504   001D52                     u2831:
  5505   001D52  EFAC  F00E         	goto	l3640
  5506   001D56                     u2830:
  5507   001D56  8E24               	bsf	(___flmul@prod+2)^0,7,c
  5508   001D58                     l3640:
  5509   001D58  90D8               	bcf	status,0,c
  5510   001D5A  3021               	rrcf	___flmul@bexp^0,w,c
  5511   001D5C  6E25               	movwf	(___flmul@prod+3)^0,c
  5512   001D5E                     l3642:
  5513   001D5E  501B               	movf	___flmul@sign^0,w,c
  5514   001D60  1225               	iorwf	(___flmul@prod+3)^0,f,c
  5515   001D62  C022  F00F         	movff	___flmul@prod,?___flmul
  5516   001D66  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  5517   001D6A  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  5518   001D6E  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  5519   001D72                     l1381:
  5520   001D72  0012               	return		;funcret
  5521   001D74                     __end_of___flmul:
  5522                           	callstack 0
  5523                           
  5524 ;; *************** function _read_timer *****************
  5525 ;; Defined at:
  5526 ;;		line 46 in file "timers.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  tH              1    0[COMRAM] PTR unsigned char 
  5529 ;;		 -> forward_navigation@timerH(1), 
  5530 ;;  tL              1    1[COMRAM] PTR unsigned char 
  5531 ;;		 -> forward_navigation@timerL(1), 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, fsr2l, fsr2h, status,2
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5546 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5547 ;;Total ram usage:        2 bytes
  5548 ;; Hardware stack levels used: 1
  5549 ;; Hardware stack levels required when called: 1
  5550 ;; This function calls:
  5551 ;;		Nothing
  5552 ;; This function is called by:
  5553 ;;		_forward_navigation
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text31
  5558   003788                     __ptext31:
  5559                           	callstack 0
  5560   003788                     _read_timer:
  5561                           	callstack 28
  5562   003788                     
  5563                           ;timers.c: 46: void read_timer(unsigned char *tH, unsigned char *tL);timers.c: 47: {;tim
      +                          ers.c: 51:     *tL = TMR0L;
  5564   003788  5002               	movf	read_timer@tL^0,w,c
  5565   00378A  6ED9               	movwf	fsr2l,c
  5566   00378C  6ADA               	clrf	fsr2h,c
  5567   00378E  CFD3 FFDF          	movff	4051,indf2	;volatile
  5568                           
  5569                           ;timers.c: 52:     *tH = TMR0H;
  5570   003792  5001               	movf	read_timer@tH^0,w,c
  5571   003794  6ED9               	movwf	fsr2l,c
  5572   003796  6ADA               	clrf	fsr2h,c
  5573   003798  CFD4 FFDF          	movff	4052,indf2	;volatile
  5574   00379C  0012               	return		;funcret
  5575   00379E                     __end_of_read_timer:
  5576                           	callstack 0
  5577                           
  5578 ;; *************** function _convert_HSV *****************
  5579 ;; Defined at:
  5580 ;;		line 209 in file "color.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  5583 ;;		 -> main@HSV_colour(6), 
  5584 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  5585 ;;		 -> main@RGBC_colour(8), 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  temp            4   51[COMRAM] unsigned long 
  5588 ;;  temp            4   47[COMRAM] unsigned long 
  5589 ;;  temp            4   43[COMRAM] unsigned long 
  5590 ;;  temp            4   39[COMRAM] unsigned long 
  5591 ;;  temp            4   55[COMRAM] unsigned long 
  5592 ;;  temp            4   35[COMRAM] unsigned long 
  5593 ;;  temp            4   31[COMRAM] unsigned long 
  5594 ;;  C               2   63[COMRAM] unsigned int 
  5595 ;;  M               2   61[COMRAM] unsigned int 
  5596 ;;  hue_scale       2   59[COMRAM] unsigned int 
  5597 ;;  hue             2   29[COMRAM] unsigned int 
  5598 ;;  sat             2   27[COMRAM] unsigned int 
  5599 ;;  m               2   25[COMRAM] unsigned int 
  5600 ;;  sat_scale       2   23[COMRAM] unsigned int 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5610 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5611 ;;      Locals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5612 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5613 ;;      Totals:        52       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5614 ;;Total ram usage:       52 bytes
  5615 ;; Hardware stack levels used: 1
  5616 ;; Hardware stack levels required when called: 2
  5617 ;; This function calls:
  5618 ;;		___lldiv
  5619 ;;		___lmul
  5620 ;;		_max_RGB
  5621 ;;		_min_RGB
  5622 ;; This function is called by:
  5623 ;;		_main
  5624 ;;		_forward_navigation
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text32
  5629   000E1A                     __ptext32:
  5630                           	callstack 0
  5631   000E1A                     _convert_HSV:
  5632                           	callstack 27
  5633   000E1A                     
  5634                           ;color.c: 209: void convert_HSV(struct HSV_val *p1,struct RGBC_val *p2);color.c: 210: {;
      +                          color.c: 211:     unsigned int hue = 0;
  5635   000E1A  0E00               	movlw	0
  5636   000E1C  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  5637   000E1E  0E00               	movlw	0
  5638   000E20  6E1E               	movwf	convert_HSV@hue^0,c
  5639                           
  5640                           ;color.c: 213:     unsigned int hue_scale = 60;
  5641   000E22  0E00               	movlw	0
  5642   000E24  6E3D               	movwf	(convert_HSV@hue_scale+1)^0,c
  5643   000E26  0E3C               	movlw	60
  5644   000E28  6E3C               	movwf	convert_HSV@hue_scale^0,c
  5645                           
  5646                           ;color.c: 214:     unsigned int sat_scale = 100;
  5647   000E2A  0E00               	movlw	0
  5648   000E2C  6E19               	movwf	(convert_HSV@sat_scale+1)^0,c
  5649   000E2E  0E64               	movlw	100
  5650   000E30  6E18               	movwf	convert_HSV@sat_scale^0,c
  5651   000E32                     
  5652                           ;color.c: 216:     unsigned int M = max_RGB(p2);
  5653   000E32  C00F  F001         	movff	convert_HSV@p2,max_RGB@p
  5654   000E36  ECA1  F017         	call	_max_RGB	;wreg free
  5655   000E3A  C001  F03E         	movff	?_max_RGB,convert_HSV@M
  5656   000E3E  C002  F03F         	movff	?_max_RGB+1,convert_HSV@M+1
  5657   000E42                     
  5658                           ;color.c: 217:     unsigned int m = min_RGB(p2);
  5659   000E42  C00F  F001         	movff	convert_HSV@p2,min_RGB@p
  5660   000E46  EC63  F017         	call	_min_RGB	;wreg free
  5661   000E4A  C001  F01A         	movff	?_min_RGB,convert_HSV@m
  5662   000E4E  C002  F01B         	movff	?_min_RGB+1,convert_HSV@m+1
  5663   000E52                     
  5664                           ;color.c: 218:     unsigned int C = M - m;
  5665   000E52  501A               	movf	convert_HSV@m^0,w,c
  5666   000E54  5C3E               	subwf	convert_HSV@M^0,w,c
  5667   000E56  6E40               	movwf	convert_HSV@C^0,c
  5668   000E58  501B               	movf	(convert_HSV@m+1)^0,w,c
  5669   000E5A  583F               	subwfb	(convert_HSV@M+1)^0,w,c
  5670   000E5C  6E41               	movwf	(convert_HSV@C+1)^0,c
  5671   000E5E                     
  5672                           ;color.c: 220:     if (C == 0) {
  5673   000E5E  5040               	movf	convert_HSV@C^0,w,c
  5674   000E60  1041               	iorwf	(convert_HSV@C+1)^0,w,c
  5675   000E62  A4D8               	btfss	status,2,c
  5676   000E64  EF36  F007         	goto	u3161
  5677   000E68  EF38  F007         	goto	u3160
  5678   000E6C                     u3161:
  5679   000E6C  EF3E  F007         	goto	l3804
  5680   000E70                     u3160:
  5681   000E70                     
  5682                           ;color.c: 221:         hue = 0;
  5683   000E70  0E00               	movlw	0
  5684   000E72  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  5685   000E74  0E00               	movlw	0
  5686   000E76  6E1E               	movwf	convert_HSV@hue^0,c
  5687                           
  5688                           ;color.c: 222:     } else {
  5689   000E78  EF0E  F00A         	goto	l3888
  5690   000E7C                     l3804:
  5691                           
  5692                           ;color.c: 232:         if (M == p2->R) {
  5693   000E7C  500F               	movf	convert_HSV@p2^0,w,c
  5694   000E7E  6ED9               	movwf	fsr2l,c
  5695   000E80  6ADA               	clrf	fsr2h,c
  5696   000E82  503E               	movf	convert_HSV@M^0,w,c
  5697   000E84  18DE               	xorwf	postinc2,w,c
  5698   000E86  E107               	bnz	u3171
  5699   000E88  503F               	movf	(convert_HSV@M+1)^0,w,c
  5700   000E8A  18DE               	xorwf	postinc2,w,c
  5701   000E8C  A4D8               	btfss	status,2,c
  5702   000E8E  EF4B  F007         	goto	u3171
  5703   000E92  EF4D  F007         	goto	u3170
  5704   000E96                     u3171:
  5705   000E96  EF3A  F008         	goto	l3832
  5706   000E9A                     u3170:
  5707   000E9A                     
  5708                           ;color.c: 233:             if (p2->G >= p2->B) {
  5709   000E9A  500F               	movf	convert_HSV@p2^0,w,c
  5710   000E9C  6ED9               	movwf	fsr2l,c
  5711   000E9E  6ADA               	clrf	fsr2h,c
  5712   000EA0  0E04               	movlw	4
  5713   000EA2  26D9               	addwf	fsr2l,f,c
  5714   000EA4  500F               	movf	convert_HSV@p2^0,w,c
  5715   000EA6  6EE1               	movwf	fsr1l,c
  5716   000EA8  6AE2               	clrf	fsr1h,c
  5717   000EAA  0E02               	movlw	2
  5718   000EAC  26E1               	addwf	fsr1l,f,c
  5719   000EAE  50DE               	movf	postinc2,w,c
  5720   000EB0  5CE6               	subwf	postinc1,w,c
  5721   000EB2  50DE               	movf	postinc2,w,c
  5722   000EB4  58E6               	subwfb	postinc1,w,c
  5723   000EB6  A0D8               	btfss	status,0,c
  5724   000EB8  EF60  F007         	goto	u3181
  5725   000EBC  EF62  F007         	goto	u3180
  5726   000EC0                     u3181:
  5727   000EC0  EFC2  F007         	goto	l3820
  5728   000EC4                     u3180:
  5729   000EC4                     
  5730                           ;color.c: 237:                 temp *= 0;
  5731   000EC4  0E00               	movlw	0
  5732   000EC6  6E24               	movwf	convert_HSV@temp^0,c
  5733   000EC8  0E00               	movlw	0
  5734   000ECA  6E25               	movwf	(convert_HSV@temp+1)^0,c
  5735   000ECC  0E00               	movlw	0
  5736   000ECE  6E26               	movwf	(convert_HSV@temp+2)^0,c
  5737   000ED0  0E00               	movlw	0
  5738   000ED2  6E27               	movwf	(convert_HSV@temp+3)^0,c
  5739   000ED4                     
  5740                           ;color.c: 238:                 temp += (unsigned long)(p2->G - p2->B);
  5741   000ED4  500F               	movf	convert_HSV@p2^0,w,c
  5742   000ED6  6ED9               	movwf	fsr2l,c
  5743   000ED8  6ADA               	clrf	fsr2h,c
  5744   000EDA  0E04               	movlw	4
  5745   000EDC  26D9               	addwf	fsr2l,f,c
  5746   000EDE  CFDE F010          	movff	postinc2,??_convert_HSV
  5747   000EE2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  5748   000EE6  500F               	movf	convert_HSV@p2^0,w,c
  5749   000EE8  6ED9               	movwf	fsr2l,c
  5750   000EEA  6ADA               	clrf	fsr2h,c
  5751   000EEC  0E02               	movlw	2
  5752   000EEE  26D9               	addwf	fsr2l,f,c
  5753   000EF0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  5754   000EF4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  5755   000EF8  5010               	movf	??_convert_HSV^0,w,c
  5756   000EFA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  5757   000EFC  6E14               	movwf	(??_convert_HSV+4)^0,c
  5758   000EFE  5011               	movf	(??_convert_HSV+1)^0,w,c
  5759   000F00  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  5760   000F02  6E15               	movwf	(??_convert_HSV+5)^0,c
  5761   000F04  5014               	movf	(??_convert_HSV+4)^0,w,c
  5762   000F06  2624               	addwf	convert_HSV@temp^0,f,c
  5763   000F08  5015               	movf	(??_convert_HSV+5)^0,w,c
  5764   000F0A  2225               	addwfc	(convert_HSV@temp+1)^0,f,c
  5765   000F0C  0E00               	movlw	0
  5766   000F0E  2226               	addwfc	(convert_HSV@temp+2)^0,f,c
  5767   000F10  0E00               	movlw	0
  5768   000F12  2227               	addwfc	(convert_HSV@temp+3)^0,f,c
  5769   000F14                     
  5770                           ;color.c: 239:                 temp *= (unsigned long)hue_scale;
  5771   000F14  C024  F001         	movff	convert_HSV@temp,___lmul@multiplier
  5772   000F18  C025  F002         	movff	convert_HSV@temp+1,___lmul@multiplier+1
  5773   000F1C  C026  F003         	movff	convert_HSV@temp+2,___lmul@multiplier+2
  5774   000F20  C027  F004         	movff	convert_HSV@temp+3,___lmul@multiplier+3
  5775   000F24  0E3C               	movlw	60
  5776   000F26  6E05               	movwf	___lmul@multiplicand^0,c
  5777   000F28  0E00               	movlw	0
  5778   000F2A  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  5779   000F2C  0E00               	movlw	0
  5780   000F2E  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  5781   000F30  0E00               	movlw	0
  5782   000F32  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  5783   000F34  EC54  F018         	call	___lmul	;wreg free
  5784   000F38  C001  F024         	movff	?___lmul,convert_HSV@temp
  5785   000F3C  C002  F025         	movff	?___lmul+1,convert_HSV@temp+1
  5786   000F40  C003  F026         	movff	?___lmul+2,convert_HSV@temp+2
  5787   000F44  C004  F027         	movff	?___lmul+3,convert_HSV@temp+3
  5788   000F48                     
  5789                           ;color.c: 240:                 temp /= (unsigned long)C;
  5790   000F48  C024  F001         	movff	convert_HSV@temp,___lldiv@dividend
  5791   000F4C  C025  F002         	movff	convert_HSV@temp+1,___lldiv@dividend+1
  5792   000F50  C026  F003         	movff	convert_HSV@temp+2,___lldiv@dividend+2
  5793   000F54  C027  F004         	movff	convert_HSV@temp+3,___lldiv@dividend+3
  5794   000F58  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  5795   000F5C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  5796   000F60  6A07               	clrf	(___lldiv@divisor+2)^0,c
  5797   000F62  6A08               	clrf	(___lldiv@divisor+3)^0,c
  5798   000F64  EC82  F016         	call	___lldiv	;wreg free
  5799   000F68  C001  F024         	movff	?___lldiv,convert_HSV@temp
  5800   000F6C  C002  F025         	movff	?___lldiv+1,convert_HSV@temp+1
  5801   000F70  C003  F026         	movff	?___lldiv+2,convert_HSV@temp+2
  5802   000F74  C004  F027         	movff	?___lldiv+3,convert_HSV@temp+3
  5803   000F78                     
  5804                           ;color.c: 241:                 hue = (unsigned int)temp;
  5805   000F78  C024  F01E         	movff	convert_HSV@temp,convert_HSV@hue
  5806   000F7C  C025  F01F         	movff	convert_HSV@temp+1,convert_HSV@hue+1
  5807                           
  5808                           ;color.c: 242:             } else {
  5809   000F80  EF3A  F008         	goto	l3832
  5810   000F84                     l3820:
  5811                           
  5812                           ;color.c: 244:                 unsigned long temp;;color.c: 245:                 temp = 
      +                          (unsigned long)C;
  5813   000F84  C040  F038         	movff	convert_HSV@C,convert_HSV@temp_609
  5814   000F88  C041  F039         	movff	convert_HSV@C+1,convert_HSV@temp_609+1
  5815   000F8C  6A3A               	clrf	(convert_HSV@temp_609+2)^0,c
  5816   000F8E  6A3B               	clrf	(convert_HSV@temp_609+3)^0,c
  5817   000F90                     
  5818                           ;color.c: 246:                 temp *= 6;
  5819   000F90  C038  F001         	movff	convert_HSV@temp_609,___lmul@multiplier
  5820   000F94  C039  F002         	movff	convert_HSV@temp_609+1,___lmul@multiplier+1
  5821   000F98  C03A  F003         	movff	convert_HSV@temp_609+2,___lmul@multiplier+2
  5822   000F9C  C03B  F004         	movff	convert_HSV@temp_609+3,___lmul@multiplier+3
  5823   000FA0  0E06               	movlw	6
  5824   000FA2  6E05               	movwf	___lmul@multiplicand^0,c
  5825   000FA4  0E00               	movlw	0
  5826   000FA6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  5827   000FA8  0E00               	movlw	0
  5828   000FAA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  5829   000FAC  0E00               	movlw	0
  5830   000FAE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  5831   000FB0  EC54  F018         	call	___lmul	;wreg free
  5832   000FB4  C001  F038         	movff	?___lmul,convert_HSV@temp_609
  5833   000FB8  C002  F039         	movff	?___lmul+1,convert_HSV@temp_609+1
  5834   000FBC  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_609+2
  5835   000FC0  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_609+3
  5836   000FC4                     
  5837                           ;color.c: 247:                 temp -= (unsigned long)(p2->B - p2->G);
  5838   000FC4  500F               	movf	convert_HSV@p2^0,w,c
  5839   000FC6  6ED9               	movwf	fsr2l,c
  5840   000FC8  6ADA               	clrf	fsr2h,c
  5841   000FCA  0E02               	movlw	2
  5842   000FCC  26D9               	addwf	fsr2l,f,c
  5843   000FCE  CFDE F010          	movff	postinc2,??_convert_HSV
  5844   000FD2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  5845   000FD6  500F               	movf	convert_HSV@p2^0,w,c
  5846   000FD8  6ED9               	movwf	fsr2l,c
  5847   000FDA  6ADA               	clrf	fsr2h,c
  5848   000FDC  0E04               	movlw	4
  5849   000FDE  26D9               	addwf	fsr2l,f,c
  5850   000FE0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  5851   000FE4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  5852   000FE8  5010               	movf	??_convert_HSV^0,w,c
  5853   000FEA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  5854   000FEC  6E14               	movwf	(??_convert_HSV+4)^0,c
  5855   000FEE  5011               	movf	(??_convert_HSV+1)^0,w,c
  5856   000FF0  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  5857   000FF2  6E15               	movwf	(??_convert_HSV+5)^0,c
  5858   000FF4  6A16               	clrf	(??_convert_HSV+6)^0,c
  5859   000FF6  6A17               	clrf	(??_convert_HSV+7)^0,c
  5860   000FF8  5014               	movf	(??_convert_HSV+4)^0,w,c
  5861   000FFA  5E38               	subwf	convert_HSV@temp_609^0,f,c
  5862   000FFC  5015               	movf	(??_convert_HSV+5)^0,w,c
  5863   000FFE  5A39               	subwfb	(convert_HSV@temp_609+1)^0,f,c
  5864   001000  5016               	movf	(??_convert_HSV+6)^0,w,c
  5865   001002  5A3A               	subwfb	(convert_HSV@temp_609+2)^0,f,c
  5866   001004  5017               	movf	(??_convert_HSV+7)^0,w,c
  5867   001006  5A3B               	subwfb	(convert_HSV@temp_609+3)^0,f,c
  5868   001008                     
  5869                           ;color.c: 248:                 temp *= (unsigned long)hue_scale;
  5870   001008  C038  F001         	movff	convert_HSV@temp_609,___lmul@multiplier
  5871   00100C  C039  F002         	movff	convert_HSV@temp_609+1,___lmul@multiplier+1
  5872   001010  C03A  F003         	movff	convert_HSV@temp_609+2,___lmul@multiplier+2
  5873   001014  C03B  F004         	movff	convert_HSV@temp_609+3,___lmul@multiplier+3
  5874   001018  0E3C               	movlw	60
  5875   00101A  6E05               	movwf	___lmul@multiplicand^0,c
  5876   00101C  0E00               	movlw	0
  5877   00101E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  5878   001020  0E00               	movlw	0
  5879   001022  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  5880   001024  0E00               	movlw	0
  5881   001026  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  5882   001028  EC54  F018         	call	___lmul	;wreg free
  5883   00102C  C001  F038         	movff	?___lmul,convert_HSV@temp_609
  5884   001030  C002  F039         	movff	?___lmul+1,convert_HSV@temp_609+1
  5885   001034  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_609+2
  5886   001038  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_609+3
  5887   00103C                     
  5888                           ;color.c: 249:                 temp /= (unsigned long)C;
  5889   00103C  C038  F001         	movff	convert_HSV@temp_609,___lldiv@dividend
  5890   001040  C039  F002         	movff	convert_HSV@temp_609+1,___lldiv@dividend+1
  5891   001044  C03A  F003         	movff	convert_HSV@temp_609+2,___lldiv@dividend+2
  5892   001048  C03B  F004         	movff	convert_HSV@temp_609+3,___lldiv@dividend+3
  5893   00104C  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  5894   001050  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  5895   001054  6A07               	clrf	(___lldiv@divisor+2)^0,c
  5896   001056  6A08               	clrf	(___lldiv@divisor+3)^0,c
  5897   001058  EC82  F016         	call	___lldiv	;wreg free
  5898   00105C  C001  F038         	movff	?___lldiv,convert_HSV@temp_609
  5899   001060  C002  F039         	movff	?___lldiv+1,convert_HSV@temp_609+1
  5900   001064  C003  F03A         	movff	?___lldiv+2,convert_HSV@temp_609+2
  5901   001068  C004  F03B         	movff	?___lldiv+3,convert_HSV@temp_609+3
  5902   00106C                     
  5903                           ;color.c: 250:                 hue = (unsigned int)temp;
  5904   00106C  C038  F01E         	movff	convert_HSV@temp_609,convert_HSV@hue
  5905   001070  C039  F01F         	movff	convert_HSV@temp_609+1,convert_HSV@hue+1
  5906   001074                     l3832:
  5907                           
  5908                           ;color.c: 253:         if (M == p2->G) {
  5909   001074  500F               	movf	convert_HSV@p2^0,w,c
  5910   001076  6ED9               	movwf	fsr2l,c
  5911   001078  6ADA               	clrf	fsr2h,c
  5912   00107A  0E02               	movlw	2
  5913   00107C  26D9               	addwf	fsr2l,f,c
  5914   00107E  503E               	movf	convert_HSV@M^0,w,c
  5915   001080  18DE               	xorwf	postinc2,w,c
  5916   001082  E107               	bnz	u3191
  5917   001084  503F               	movf	(convert_HSV@M+1)^0,w,c
  5918   001086  18DE               	xorwf	postinc2,w,c
  5919   001088  A4D8               	btfss	status,2,c
  5920   00108A  EF49  F008         	goto	u3191
  5921   00108E  EF4B  F008         	goto	u3190
  5922   001092                     u3191:
  5923   001092  EF20  F009         	goto	l3860
  5924   001096                     u3190:
  5925   001096                     
  5926                           ;color.c: 254:             if (p2->B >= p2->R) {
  5927   001096  500F               	movf	convert_HSV@p2^0,w,c
  5928   001098  6ED9               	movwf	fsr2l,c
  5929   00109A  6ADA               	clrf	fsr2h,c
  5930   00109C  500F               	movf	convert_HSV@p2^0,w,c
  5931   00109E  6EE1               	movwf	fsr1l,c
  5932   0010A0  6AE2               	clrf	fsr1h,c
  5933   0010A2  0E04               	movlw	4
  5934   0010A4  26E1               	addwf	fsr1l,f,c
  5935   0010A6  50DE               	movf	postinc2,w,c
  5936   0010A8  5CE6               	subwf	postinc1,w,c
  5937   0010AA  50DE               	movf	postinc2,w,c
  5938   0010AC  58E6               	subwfb	postinc1,w,c
  5939   0010AE  A0D8               	btfss	status,0,c
  5940   0010B0  EF5C  F008         	goto	u3201
  5941   0010B4  EF5E  F008         	goto	u3200
  5942   0010B8                     u3201:
  5943   0010B8  EFBF  F008         	goto	l3848
  5944   0010BC                     u3200:
  5945   0010BC                     
  5946                           ;color.c: 256:                 unsigned long temp;;color.c: 257:                 temp = 
      +                          (unsigned long)C;
  5947   0010BC  C040  F028         	movff	convert_HSV@C,convert_HSV@temp_610
  5948   0010C0  C041  F029         	movff	convert_HSV@C+1,convert_HSV@temp_610+1
  5949   0010C4  6A2A               	clrf	(convert_HSV@temp_610+2)^0,c
  5950   0010C6  6A2B               	clrf	(convert_HSV@temp_610+3)^0,c
  5951   0010C8                     
  5952                           ;color.c: 258:                 temp *= 2;
  5953   0010C8  90D8               	bcf	status,0,c
  5954   0010CA  3628               	rlcf	convert_HSV@temp_610^0,f,c
  5955   0010CC  3629               	rlcf	(convert_HSV@temp_610+1)^0,f,c
  5956   0010CE  362A               	rlcf	(convert_HSV@temp_610+2)^0,f,c
  5957   0010D0  362B               	rlcf	(convert_HSV@temp_610+3)^0,f,c
  5958   0010D2                     
  5959                           ;color.c: 259:                 temp += (unsigned long)(p2->B - p2->R);
  5960   0010D2  500F               	movf	convert_HSV@p2^0,w,c
  5961   0010D4  6ED9               	movwf	fsr2l,c
  5962   0010D6  6ADA               	clrf	fsr2h,c
  5963   0010D8  CFDE F010          	movff	postinc2,??_convert_HSV
  5964   0010DC  CFDD F011          	movff	postdec2,??_convert_HSV+1
  5965   0010E0  500F               	movf	convert_HSV@p2^0,w,c
  5966   0010E2  6ED9               	movwf	fsr2l,c
  5967   0010E4  6ADA               	clrf	fsr2h,c
  5968   0010E6  0E04               	movlw	4
  5969   0010E8  26D9               	addwf	fsr2l,f,c
  5970   0010EA  CFDE F012          	movff	postinc2,??_convert_HSV+2
  5971   0010EE  CFDD F013          	movff	postdec2,??_convert_HSV+3
  5972   0010F2  5010               	movf	??_convert_HSV^0,w,c
  5973   0010F4  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  5974   0010F6  6E14               	movwf	(??_convert_HSV+4)^0,c
  5975   0010F8  5011               	movf	(??_convert_HSV+1)^0,w,c
  5976   0010FA  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  5977   0010FC  6E15               	movwf	(??_convert_HSV+5)^0,c
  5978   0010FE  5014               	movf	(??_convert_HSV+4)^0,w,c
  5979   001100  2628               	addwf	convert_HSV@temp_610^0,f,c
  5980   001102  5015               	movf	(??_convert_HSV+5)^0,w,c
  5981   001104  2229               	addwfc	(convert_HSV@temp_610+1)^0,f,c
  5982   001106  0E00               	movlw	0
  5983   001108  222A               	addwfc	(convert_HSV@temp_610+2)^0,f,c
  5984   00110A  0E00               	movlw	0
  5985   00110C  222B               	addwfc	(convert_HSV@temp_610+3)^0,f,c
  5986   00110E                     
  5987                           ;color.c: 260:                 temp *= (unsigned long)hue_scale;
  5988   00110E  C028  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  5989   001112  C029  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  5990   001116  C02A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  5991   00111A  C02B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  5992   00111E  0E3C               	movlw	60
  5993   001120  6E05               	movwf	___lmul@multiplicand^0,c
  5994   001122  0E00               	movlw	0
  5995   001124  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  5996   001126  0E00               	movlw	0
  5997   001128  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  5998   00112A  0E00               	movlw	0
  5999   00112C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6000   00112E  EC54  F018         	call	___lmul	;wreg free
  6001   001132  C001  F028         	movff	?___lmul,convert_HSV@temp_610
  6002   001136  C002  F029         	movff	?___lmul+1,convert_HSV@temp_610+1
  6003   00113A  C003  F02A         	movff	?___lmul+2,convert_HSV@temp_610+2
  6004   00113E  C004  F02B         	movff	?___lmul+3,convert_HSV@temp_610+3
  6005   001142                     
  6006                           ;color.c: 261:                 temp /= (unsigned long)C;
  6007   001142  C028  F001         	movff	convert_HSV@temp_610,___lldiv@dividend
  6008   001146  C029  F002         	movff	convert_HSV@temp_610+1,___lldiv@dividend+1
  6009   00114A  C02A  F003         	movff	convert_HSV@temp_610+2,___lldiv@dividend+2
  6010   00114E  C02B  F004         	movff	convert_HSV@temp_610+3,___lldiv@dividend+3
  6011   001152  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6012   001156  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6013   00115A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6014   00115C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6015   00115E  EC82  F016         	call	___lldiv	;wreg free
  6016   001162  C001  F028         	movff	?___lldiv,convert_HSV@temp_610
  6017   001166  C002  F029         	movff	?___lldiv+1,convert_HSV@temp_610+1
  6018   00116A  C003  F02A         	movff	?___lldiv+2,convert_HSV@temp_610+2
  6019   00116E  C004  F02B         	movff	?___lldiv+3,convert_HSV@temp_610+3
  6020   001172                     
  6021                           ;color.c: 262:                 hue = (unsigned int)temp;
  6022   001172  C028  F01E         	movff	convert_HSV@temp_610,convert_HSV@hue
  6023   001176  C029  F01F         	movff	convert_HSV@temp_610+1,convert_HSV@hue+1
  6024                           
  6025                           ;color.c: 263:             } else {
  6026   00117A  EF20  F009         	goto	l3860
  6027   00117E                     l3848:
  6028                           
  6029                           ;color.c: 265:                 unsigned long temp;;color.c: 266:                 temp = 
      +                          (unsigned long)C;
  6030   00117E  C040  F02C         	movff	convert_HSV@C,convert_HSV@temp_611
  6031   001182  C041  F02D         	movff	convert_HSV@C+1,convert_HSV@temp_611+1
  6032   001186  6A2E               	clrf	(convert_HSV@temp_611+2)^0,c
  6033   001188  6A2F               	clrf	(convert_HSV@temp_611+3)^0,c
  6034   00118A                     
  6035                           ;color.c: 267:                 temp *= 2;
  6036   00118A  90D8               	bcf	status,0,c
  6037   00118C  362C               	rlcf	convert_HSV@temp_611^0,f,c
  6038   00118E  362D               	rlcf	(convert_HSV@temp_611+1)^0,f,c
  6039   001190  362E               	rlcf	(convert_HSV@temp_611+2)^0,f,c
  6040   001192  362F               	rlcf	(convert_HSV@temp_611+3)^0,f,c
  6041   001194                     
  6042                           ;color.c: 268:                 temp -= (unsigned long)(p2->R - p2->B);
  6043   001194  500F               	movf	convert_HSV@p2^0,w,c
  6044   001196  6ED9               	movwf	fsr2l,c
  6045   001198  6ADA               	clrf	fsr2h,c
  6046   00119A  0E04               	movlw	4
  6047   00119C  26D9               	addwf	fsr2l,f,c
  6048   00119E  CFDE F010          	movff	postinc2,??_convert_HSV
  6049   0011A2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6050   0011A6  500F               	movf	convert_HSV@p2^0,w,c
  6051   0011A8  6ED9               	movwf	fsr2l,c
  6052   0011AA  6ADA               	clrf	fsr2h,c
  6053   0011AC  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6054   0011B0  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6055   0011B4  5010               	movf	??_convert_HSV^0,w,c
  6056   0011B6  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6057   0011B8  6E14               	movwf	(??_convert_HSV+4)^0,c
  6058   0011BA  5011               	movf	(??_convert_HSV+1)^0,w,c
  6059   0011BC  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6060   0011BE  6E15               	movwf	(??_convert_HSV+5)^0,c
  6061   0011C0  6A16               	clrf	(??_convert_HSV+6)^0,c
  6062   0011C2  6A17               	clrf	(??_convert_HSV+7)^0,c
  6063   0011C4  5014               	movf	(??_convert_HSV+4)^0,w,c
  6064   0011C6  5E2C               	subwf	convert_HSV@temp_611^0,f,c
  6065   0011C8  5015               	movf	(??_convert_HSV+5)^0,w,c
  6066   0011CA  5A2D               	subwfb	(convert_HSV@temp_611+1)^0,f,c
  6067   0011CC  5016               	movf	(??_convert_HSV+6)^0,w,c
  6068   0011CE  5A2E               	subwfb	(convert_HSV@temp_611+2)^0,f,c
  6069   0011D0  5017               	movf	(??_convert_HSV+7)^0,w,c
  6070   0011D2  5A2F               	subwfb	(convert_HSV@temp_611+3)^0,f,c
  6071   0011D4                     
  6072                           ;color.c: 269:                 temp *= (unsigned long)hue_scale;
  6073   0011D4  C02C  F001         	movff	convert_HSV@temp_611,___lmul@multiplier
  6074   0011D8  C02D  F002         	movff	convert_HSV@temp_611+1,___lmul@multiplier+1
  6075   0011DC  C02E  F003         	movff	convert_HSV@temp_611+2,___lmul@multiplier+2
  6076   0011E0  C02F  F004         	movff	convert_HSV@temp_611+3,___lmul@multiplier+3
  6077   0011E4  0E3C               	movlw	60
  6078   0011E6  6E05               	movwf	___lmul@multiplicand^0,c
  6079   0011E8  0E00               	movlw	0
  6080   0011EA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6081   0011EC  0E00               	movlw	0
  6082   0011EE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6083   0011F0  0E00               	movlw	0
  6084   0011F2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6085   0011F4  EC54  F018         	call	___lmul	;wreg free
  6086   0011F8  C001  F02C         	movff	?___lmul,convert_HSV@temp_611
  6087   0011FC  C002  F02D         	movff	?___lmul+1,convert_HSV@temp_611+1
  6088   001200  C003  F02E         	movff	?___lmul+2,convert_HSV@temp_611+2
  6089   001204  C004  F02F         	movff	?___lmul+3,convert_HSV@temp_611+3
  6090   001208                     
  6091                           ;color.c: 270:                 temp /= (unsigned long)C;
  6092   001208  C02C  F001         	movff	convert_HSV@temp_611,___lldiv@dividend
  6093   00120C  C02D  F002         	movff	convert_HSV@temp_611+1,___lldiv@dividend+1
  6094   001210  C02E  F003         	movff	convert_HSV@temp_611+2,___lldiv@dividend+2
  6095   001214  C02F  F004         	movff	convert_HSV@temp_611+3,___lldiv@dividend+3
  6096   001218  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6097   00121C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6098   001220  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6099   001222  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6100   001224  EC82  F016         	call	___lldiv	;wreg free
  6101   001228  C001  F02C         	movff	?___lldiv,convert_HSV@temp_611
  6102   00122C  C002  F02D         	movff	?___lldiv+1,convert_HSV@temp_611+1
  6103   001230  C003  F02E         	movff	?___lldiv+2,convert_HSV@temp_611+2
  6104   001234  C004  F02F         	movff	?___lldiv+3,convert_HSV@temp_611+3
  6105   001238                     
  6106                           ;color.c: 271:                 hue = (unsigned int)temp;
  6107   001238  C02C  F01E         	movff	convert_HSV@temp_611,convert_HSV@hue
  6108   00123C  C02D  F01F         	movff	convert_HSV@temp_611+1,convert_HSV@hue+1
  6109   001240                     l3860:
  6110                           
  6111                           ;color.c: 274:         if (M == p2->B) {
  6112   001240  500F               	movf	convert_HSV@p2^0,w,c
  6113   001242  6ED9               	movwf	fsr2l,c
  6114   001244  6ADA               	clrf	fsr2h,c
  6115   001246  0E04               	movlw	4
  6116   001248  26D9               	addwf	fsr2l,f,c
  6117   00124A  503E               	movf	convert_HSV@M^0,w,c
  6118   00124C  18DE               	xorwf	postinc2,w,c
  6119   00124E  E107               	bnz	u3211
  6120   001250  503F               	movf	(convert_HSV@M+1)^0,w,c
  6121   001252  18DE               	xorwf	postinc2,w,c
  6122   001254  A4D8               	btfss	status,2,c
  6123   001256  EF2F  F009         	goto	u3211
  6124   00125A  EF31  F009         	goto	u3210
  6125   00125E                     u3211:
  6126   00125E  EF0E  F00A         	goto	l3888
  6127   001262                     u3210:
  6128   001262                     
  6129                           ;color.c: 275:             if (p2->R >= p2->G) {
  6130   001262  500F               	movf	convert_HSV@p2^0,w,c
  6131   001264  6ED9               	movwf	fsr2l,c
  6132   001266  6ADA               	clrf	fsr2h,c
  6133   001268  0E02               	movlw	2
  6134   00126A  26D9               	addwf	fsr2l,f,c
  6135   00126C  500F               	movf	convert_HSV@p2^0,w,c
  6136   00126E  6EE1               	movwf	fsr1l,c
  6137   001270  6AE2               	clrf	fsr1h,c
  6138   001272  50DE               	movf	postinc2,w,c
  6139   001274  5CE6               	subwf	postinc1,w,c
  6140   001276  50DE               	movf	postinc2,w,c
  6141   001278  58E6               	subwfb	postinc1,w,c
  6142   00127A  A0D8               	btfss	status,0,c
  6143   00127C  EF42  F009         	goto	u3221
  6144   001280  EF44  F009         	goto	u3220
  6145   001284                     u3221:
  6146   001284  EFA9  F009         	goto	l3876
  6147   001288                     u3220:
  6148   001288                     
  6149                           ;color.c: 277:                 unsigned long temp;;color.c: 278:                 temp = 
      +                          (unsigned long)C;
  6150   001288  C040  F030         	movff	convert_HSV@C,convert_HSV@temp_612
  6151   00128C  C041  F031         	movff	convert_HSV@C+1,convert_HSV@temp_612+1
  6152   001290  6A32               	clrf	(convert_HSV@temp_612+2)^0,c
  6153   001292  6A33               	clrf	(convert_HSV@temp_612+3)^0,c
  6154   001294                     
  6155                           ;color.c: 279:                 temp *= 4;
  6156   001294  0E02               	movlw	2
  6157   001296                     u3235:
  6158   001296  90D8               	bcf	status,0,c
  6159   001298  3630               	rlcf	convert_HSV@temp_612^0,f,c
  6160   00129A  3631               	rlcf	(convert_HSV@temp_612+1)^0,f,c
  6161   00129C  3632               	rlcf	(convert_HSV@temp_612+2)^0,f,c
  6162   00129E  3633               	rlcf	(convert_HSV@temp_612+3)^0,f,c
  6163   0012A0  2EE8               	decfsz	wreg,f,c
  6164   0012A2  EF4B  F009         	goto	u3235
  6165   0012A6                     
  6166                           ;color.c: 280:                 temp += (unsigned long)(p2->R - p2->G);
  6167   0012A6  500F               	movf	convert_HSV@p2^0,w,c
  6168   0012A8  6ED9               	movwf	fsr2l,c
  6169   0012AA  6ADA               	clrf	fsr2h,c
  6170   0012AC  0E02               	movlw	2
  6171   0012AE  26D9               	addwf	fsr2l,f,c
  6172   0012B0  CFDE F010          	movff	postinc2,??_convert_HSV
  6173   0012B4  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6174   0012B8  500F               	movf	convert_HSV@p2^0,w,c
  6175   0012BA  6ED9               	movwf	fsr2l,c
  6176   0012BC  6ADA               	clrf	fsr2h,c
  6177   0012BE  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6178   0012C2  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6179   0012C6  5010               	movf	??_convert_HSV^0,w,c
  6180   0012C8  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6181   0012CA  6E14               	movwf	(??_convert_HSV+4)^0,c
  6182   0012CC  5011               	movf	(??_convert_HSV+1)^0,w,c
  6183   0012CE  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6184   0012D0  6E15               	movwf	(??_convert_HSV+5)^0,c
  6185   0012D2  5014               	movf	(??_convert_HSV+4)^0,w,c
  6186   0012D4  2630               	addwf	convert_HSV@temp_612^0,f,c
  6187   0012D6  5015               	movf	(??_convert_HSV+5)^0,w,c
  6188   0012D8  2231               	addwfc	(convert_HSV@temp_612+1)^0,f,c
  6189   0012DA  0E00               	movlw	0
  6190   0012DC  2232               	addwfc	(convert_HSV@temp_612+2)^0,f,c
  6191   0012DE  0E00               	movlw	0
  6192   0012E0  2233               	addwfc	(convert_HSV@temp_612+3)^0,f,c
  6193   0012E2                     
  6194                           ;color.c: 281:                 temp *= (unsigned long)hue_scale;
  6195   0012E2  C030  F001         	movff	convert_HSV@temp_612,___lmul@multiplier
  6196   0012E6  C031  F002         	movff	convert_HSV@temp_612+1,___lmul@multiplier+1
  6197   0012EA  C032  F003         	movff	convert_HSV@temp_612+2,___lmul@multiplier+2
  6198   0012EE  C033  F004         	movff	convert_HSV@temp_612+3,___lmul@multiplier+3
  6199   0012F2  0E3C               	movlw	60
  6200   0012F4  6E05               	movwf	___lmul@multiplicand^0,c
  6201   0012F6  0E00               	movlw	0
  6202   0012F8  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6203   0012FA  0E00               	movlw	0
  6204   0012FC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6205   0012FE  0E00               	movlw	0
  6206   001300  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6207   001302  EC54  F018         	call	___lmul	;wreg free
  6208   001306  C001  F030         	movff	?___lmul,convert_HSV@temp_612
  6209   00130A  C002  F031         	movff	?___lmul+1,convert_HSV@temp_612+1
  6210   00130E  C003  F032         	movff	?___lmul+2,convert_HSV@temp_612+2
  6211   001312  C004  F033         	movff	?___lmul+3,convert_HSV@temp_612+3
  6212   001316                     
  6213                           ;color.c: 282:                 temp /= (unsigned long)C;
  6214   001316  C030  F001         	movff	convert_HSV@temp_612,___lldiv@dividend
  6215   00131A  C031  F002         	movff	convert_HSV@temp_612+1,___lldiv@dividend+1
  6216   00131E  C032  F003         	movff	convert_HSV@temp_612+2,___lldiv@dividend+2
  6217   001322  C033  F004         	movff	convert_HSV@temp_612+3,___lldiv@dividend+3
  6218   001326  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6219   00132A  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6220   00132E  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6221   001330  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6222   001332  EC82  F016         	call	___lldiv	;wreg free
  6223   001336  C001  F030         	movff	?___lldiv,convert_HSV@temp_612
  6224   00133A  C002  F031         	movff	?___lldiv+1,convert_HSV@temp_612+1
  6225   00133E  C003  F032         	movff	?___lldiv+2,convert_HSV@temp_612+2
  6226   001342  C004  F033         	movff	?___lldiv+3,convert_HSV@temp_612+3
  6227   001346                     
  6228                           ;color.c: 283:                 hue = (unsigned int)temp;
  6229   001346  C030  F01E         	movff	convert_HSV@temp_612,convert_HSV@hue
  6230   00134A  C031  F01F         	movff	convert_HSV@temp_612+1,convert_HSV@hue+1
  6231                           
  6232                           ;color.c: 284:             } else {
  6233   00134E  EF0E  F00A         	goto	l3888
  6234   001352                     l3876:
  6235                           
  6236                           ;color.c: 286:                 unsigned long temp;;color.c: 287:                 temp = 
      +                          (unsigned long)C;
  6237   001352  C040  F034         	movff	convert_HSV@C,convert_HSV@temp_613
  6238   001356  C041  F035         	movff	convert_HSV@C+1,convert_HSV@temp_613+1
  6239   00135A  6A36               	clrf	(convert_HSV@temp_613+2)^0,c
  6240   00135C  6A37               	clrf	(convert_HSV@temp_613+3)^0,c
  6241   00135E                     
  6242                           ;color.c: 288:                 temp *= 4;
  6243   00135E  0E02               	movlw	2
  6244   001360                     u3245:
  6245   001360  90D8               	bcf	status,0,c
  6246   001362  3634               	rlcf	convert_HSV@temp_613^0,f,c
  6247   001364  3635               	rlcf	(convert_HSV@temp_613+1)^0,f,c
  6248   001366  3636               	rlcf	(convert_HSV@temp_613+2)^0,f,c
  6249   001368  3637               	rlcf	(convert_HSV@temp_613+3)^0,f,c
  6250   00136A  2EE8               	decfsz	wreg,f,c
  6251   00136C  EFB0  F009         	goto	u3245
  6252   001370                     
  6253                           ;color.c: 289:                 temp -= (unsigned long)(p2->G - p2->R);
  6254   001370  500F               	movf	convert_HSV@p2^0,w,c
  6255   001372  6ED9               	movwf	fsr2l,c
  6256   001374  6ADA               	clrf	fsr2h,c
  6257   001376  CFDE F010          	movff	postinc2,??_convert_HSV
  6258   00137A  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6259   00137E  500F               	movf	convert_HSV@p2^0,w,c
  6260   001380  6ED9               	movwf	fsr2l,c
  6261   001382  6ADA               	clrf	fsr2h,c
  6262   001384  0E02               	movlw	2
  6263   001386  26D9               	addwf	fsr2l,f,c
  6264   001388  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6265   00138C  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6266   001390  5010               	movf	??_convert_HSV^0,w,c
  6267   001392  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6268   001394  6E14               	movwf	(??_convert_HSV+4)^0,c
  6269   001396  5011               	movf	(??_convert_HSV+1)^0,w,c
  6270   001398  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6271   00139A  6E15               	movwf	(??_convert_HSV+5)^0,c
  6272   00139C  6A16               	clrf	(??_convert_HSV+6)^0,c
  6273   00139E  6A17               	clrf	(??_convert_HSV+7)^0,c
  6274   0013A0  5014               	movf	(??_convert_HSV+4)^0,w,c
  6275   0013A2  5E34               	subwf	convert_HSV@temp_613^0,f,c
  6276   0013A4  5015               	movf	(??_convert_HSV+5)^0,w,c
  6277   0013A6  5A35               	subwfb	(convert_HSV@temp_613+1)^0,f,c
  6278   0013A8  5016               	movf	(??_convert_HSV+6)^0,w,c
  6279   0013AA  5A36               	subwfb	(convert_HSV@temp_613+2)^0,f,c
  6280   0013AC  5017               	movf	(??_convert_HSV+7)^0,w,c
  6281   0013AE  5A37               	subwfb	(convert_HSV@temp_613+3)^0,f,c
  6282   0013B0                     
  6283                           ;color.c: 290:                 temp *= (unsigned long)hue_scale;
  6284   0013B0  C034  F001         	movff	convert_HSV@temp_613,___lmul@multiplier
  6285   0013B4  C035  F002         	movff	convert_HSV@temp_613+1,___lmul@multiplier+1
  6286   0013B8  C036  F003         	movff	convert_HSV@temp_613+2,___lmul@multiplier+2
  6287   0013BC  C037  F004         	movff	convert_HSV@temp_613+3,___lmul@multiplier+3
  6288   0013C0  0E3C               	movlw	60
  6289   0013C2  6E05               	movwf	___lmul@multiplicand^0,c
  6290   0013C4  0E00               	movlw	0
  6291   0013C6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6292   0013C8  0E00               	movlw	0
  6293   0013CA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6294   0013CC  0E00               	movlw	0
  6295   0013CE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6296   0013D0  EC54  F018         	call	___lmul	;wreg free
  6297   0013D4  C001  F034         	movff	?___lmul,convert_HSV@temp_613
  6298   0013D8  C002  F035         	movff	?___lmul+1,convert_HSV@temp_613+1
  6299   0013DC  C003  F036         	movff	?___lmul+2,convert_HSV@temp_613+2
  6300   0013E0  C004  F037         	movff	?___lmul+3,convert_HSV@temp_613+3
  6301   0013E4                     
  6302                           ;color.c: 291:                 temp /= (unsigned long)C;
  6303   0013E4  C034  F001         	movff	convert_HSV@temp_613,___lldiv@dividend
  6304   0013E8  C035  F002         	movff	convert_HSV@temp_613+1,___lldiv@dividend+1
  6305   0013EC  C036  F003         	movff	convert_HSV@temp_613+2,___lldiv@dividend+2
  6306   0013F0  C037  F004         	movff	convert_HSV@temp_613+3,___lldiv@dividend+3
  6307   0013F4  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6308   0013F8  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6309   0013FC  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6310   0013FE  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6311   001400  EC82  F016         	call	___lldiv	;wreg free
  6312   001404  C001  F034         	movff	?___lldiv,convert_HSV@temp_613
  6313   001408  C002  F035         	movff	?___lldiv+1,convert_HSV@temp_613+1
  6314   00140C  C003  F036         	movff	?___lldiv+2,convert_HSV@temp_613+2
  6315   001410  C004  F037         	movff	?___lldiv+3,convert_HSV@temp_613+3
  6316   001414                     
  6317                           ;color.c: 292:                 hue = (unsigned int)temp;
  6318   001414  C034  F01E         	movff	convert_HSV@temp_613,convert_HSV@hue
  6319   001418  C035  F01F         	movff	convert_HSV@temp_613+1,convert_HSV@hue+1
  6320   00141C                     l3888:
  6321                           
  6322                           ;color.c: 297:     if (M == 0) {
  6323   00141C  503E               	movf	convert_HSV@M^0,w,c
  6324   00141E  103F               	iorwf	(convert_HSV@M+1)^0,w,c
  6325   001420  A4D8               	btfss	status,2,c
  6326   001422  EF15  F00A         	goto	u3251
  6327   001426  EF17  F00A         	goto	u3250
  6328   00142A                     u3251:
  6329   00142A  EF1D  F00A         	goto	l3892
  6330   00142E                     u3250:
  6331   00142E                     
  6332                           ;color.c: 298:         sat = 0;
  6333   00142E  0E00               	movlw	0
  6334   001430  6E1D               	movwf	(convert_HSV@sat+1)^0,c
  6335   001432  0E00               	movlw	0
  6336   001434  6E1C               	movwf	convert_HSV@sat^0,c
  6337                           
  6338                           ;color.c: 299:     } else {
  6339   001436  EF59  F00A         	goto	l3900
  6340   00143A                     l3892:
  6341                           
  6342                           ;color.c: 301:         unsigned long temp;;color.c: 302:         temp = (unsigned long)C
      +                          ;
  6343   00143A  C040  F020         	movff	convert_HSV@C,convert_HSV@temp_614
  6344   00143E  C041  F021         	movff	convert_HSV@C+1,convert_HSV@temp_614+1
  6345   001442  6A22               	clrf	(convert_HSV@temp_614+2)^0,c
  6346   001444  6A23               	clrf	(convert_HSV@temp_614+3)^0,c
  6347   001446                     
  6348                           ;color.c: 303:         temp *= (unsigned long)sat_scale;
  6349   001446  C020  F001         	movff	convert_HSV@temp_614,___lmul@multiplier
  6350   00144A  C021  F002         	movff	convert_HSV@temp_614+1,___lmul@multiplier+1
  6351   00144E  C022  F003         	movff	convert_HSV@temp_614+2,___lmul@multiplier+2
  6352   001452  C023  F004         	movff	convert_HSV@temp_614+3,___lmul@multiplier+3
  6353   001456  0E64               	movlw	100
  6354   001458  6E05               	movwf	___lmul@multiplicand^0,c
  6355   00145A  0E00               	movlw	0
  6356   00145C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6357   00145E  0E00               	movlw	0
  6358   001460  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6359   001462  0E00               	movlw	0
  6360   001464  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6361   001466  EC54  F018         	call	___lmul	;wreg free
  6362   00146A  C001  F020         	movff	?___lmul,convert_HSV@temp_614
  6363   00146E  C002  F021         	movff	?___lmul+1,convert_HSV@temp_614+1
  6364   001472  C003  F022         	movff	?___lmul+2,convert_HSV@temp_614+2
  6365   001476  C004  F023         	movff	?___lmul+3,convert_HSV@temp_614+3
  6366   00147A                     
  6367                           ;color.c: 304:         temp /= (unsigned long)M;
  6368   00147A  C020  F001         	movff	convert_HSV@temp_614,___lldiv@dividend
  6369   00147E  C021  F002         	movff	convert_HSV@temp_614+1,___lldiv@dividend+1
  6370   001482  C022  F003         	movff	convert_HSV@temp_614+2,___lldiv@dividend+2
  6371   001486  C023  F004         	movff	convert_HSV@temp_614+3,___lldiv@dividend+3
  6372   00148A  C03E  F005         	movff	convert_HSV@M,___lldiv@divisor
  6373   00148E  C03F  F006         	movff	convert_HSV@M+1,___lldiv@divisor+1
  6374   001492  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6375   001494  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6376   001496  EC82  F016         	call	___lldiv	;wreg free
  6377   00149A  C001  F020         	movff	?___lldiv,convert_HSV@temp_614
  6378   00149E  C002  F021         	movff	?___lldiv+1,convert_HSV@temp_614+1
  6379   0014A2  C003  F022         	movff	?___lldiv+2,convert_HSV@temp_614+2
  6380   0014A6  C004  F023         	movff	?___lldiv+3,convert_HSV@temp_614+3
  6381   0014AA                     
  6382                           ;color.c: 305:         sat = (unsigned int)temp;
  6383   0014AA  C020  F01C         	movff	convert_HSV@temp_614,convert_HSV@sat
  6384   0014AE  C021  F01D         	movff	convert_HSV@temp_614+1,convert_HSV@sat+1
  6385   0014B2                     l3900:
  6386                           
  6387                           ;color.c: 308:     p1->H = hue;
  6388   0014B2  500E               	movf	convert_HSV@p1^0,w,c
  6389   0014B4  6ED9               	movwf	fsr2l,c
  6390   0014B6  6ADA               	clrf	fsr2h,c
  6391   0014B8  C01E  FFDE         	movff	convert_HSV@hue,postinc2
  6392   0014BC  C01F  FFDD         	movff	convert_HSV@hue+1,postdec2
  6393   0014C0                     
  6394                           ;color.c: 309:     p1->S = sat;
  6395   0014C0  500E               	movf	convert_HSV@p1^0,w,c
  6396   0014C2  6ED9               	movwf	fsr2l,c
  6397   0014C4  6ADA               	clrf	fsr2h,c
  6398   0014C6  0E02               	movlw	2
  6399   0014C8  26D9               	addwf	fsr2l,f,c
  6400   0014CA  C01C  FFDE         	movff	convert_HSV@sat,postinc2
  6401   0014CE  C01D  FFDD         	movff	convert_HSV@sat+1,postdec2
  6402   0014D2                     
  6403                           ;color.c: 310:     p1->V = M;
  6404   0014D2  500E               	movf	convert_HSV@p1^0,w,c
  6405   0014D4  6ED9               	movwf	fsr2l,c
  6406   0014D6  6ADA               	clrf	fsr2h,c
  6407   0014D8  0E04               	movlw	4
  6408   0014DA  26D9               	addwf	fsr2l,f,c
  6409   0014DC  C03E  FFDE         	movff	convert_HSV@M,postinc2
  6410   0014E0  C03F  FFDD         	movff	convert_HSV@M+1,postdec2
  6411   0014E4  0012               	return		;funcret
  6412   0014E6                     __end_of_convert_HSV:
  6413                           	callstack 0
  6414                           
  6415 ;; *************** function _min_RGB *****************
  6416 ;; Defined at:
  6417 ;;		line 186 in file "color.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  6420 ;;		 -> main@RGBC_colour(8), 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  min_val         2    4[COMRAM] unsigned int 
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  2    0[COMRAM] unsigned int 
  6425 ;; Registers used:
  6426 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6432 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6433 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6434 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6435 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6436 ;;Total ram usage:        6 bytes
  6437 ;; Hardware stack levels used: 1
  6438 ;; Hardware stack levels required when called: 1
  6439 ;; This function calls:
  6440 ;;		Nothing
  6441 ;; This function is called by:
  6442 ;;		_convert_HSV
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text33
  6447   002EC6                     __ptext33:
  6448                           	callstack 0
  6449   002EC6                     _min_RGB:
  6450                           	callstack 27
  6451   002EC6                     
  6452                           ;color.c: 186: unsigned int min_RGB(struct RGBC_val *p);color.c: 187: {;color.c: 188:   
      +                            unsigned int min_val = p->R;
  6453   002EC6  5001               	movf	min_RGB@p^0,w,c
  6454   002EC8  6ED9               	movwf	fsr2l,c
  6455   002ECA  6ADA               	clrf	fsr2h,c
  6456   002ECC  CFDE F005          	movff	postinc2,min_RGB@min_val
  6457   002ED0  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  6458   002ED4                     
  6459                           ;color.c: 189:     if (p->G < min_val) {min_val = p->G;}
  6460   002ED4  5001               	movf	min_RGB@p^0,w,c
  6461   002ED6  6ED9               	movwf	fsr2l,c
  6462   002ED8  6ADA               	clrf	fsr2h,c
  6463   002EDA  0E02               	movlw	2
  6464   002EDC  26D9               	addwf	fsr2l,f,c
  6465   002EDE  5005               	movf	min_RGB@min_val^0,w,c
  6466   002EE0  5CDE               	subwf	postinc2,w,c
  6467   002EE2  5006               	movf	(min_RGB@min_val+1)^0,w,c
  6468   002EE4  58DE               	subwfb	postinc2,w,c
  6469   002EE6  B0D8               	btfsc	status,0,c
  6470   002EE8  EF78  F017         	goto	u2531
  6471   002EEC  EF7A  F017         	goto	u2530
  6472   002EF0                     u2531:
  6473   002EF0  EF83  F017         	goto	l104
  6474   002EF4                     u2530:
  6475   002EF4  5001               	movf	min_RGB@p^0,w,c
  6476   002EF6  6ED9               	movwf	fsr2l,c
  6477   002EF8  6ADA               	clrf	fsr2h,c
  6478   002EFA  0E02               	movlw	2
  6479   002EFC  26D9               	addwf	fsr2l,f,c
  6480   002EFE  CFDE F005          	movff	postinc2,min_RGB@min_val
  6481   002F02  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  6482   002F06                     l104:
  6483                           
  6484                           ;color.c: 190:     if (p->B < min_val) {min_val = p->B;}
  6485   002F06  5001               	movf	min_RGB@p^0,w,c
  6486   002F08  6ED9               	movwf	fsr2l,c
  6487   002F0A  6ADA               	clrf	fsr2h,c
  6488   002F0C  0E04               	movlw	4
  6489   002F0E  26D9               	addwf	fsr2l,f,c
  6490   002F10  5005               	movf	min_RGB@min_val^0,w,c
  6491   002F12  5CDE               	subwf	postinc2,w,c
  6492   002F14  5006               	movf	(min_RGB@min_val+1)^0,w,c
  6493   002F16  58DE               	subwfb	postinc2,w,c
  6494   002F18  B0D8               	btfsc	status,0,c
  6495   002F1A  EF91  F017         	goto	u2541
  6496   002F1E  EF93  F017         	goto	u2540
  6497   002F22                     u2541:
  6498   002F22  EF9C  F017         	goto	l3398
  6499   002F26                     u2540:
  6500   002F26  5001               	movf	min_RGB@p^0,w,c
  6501   002F28  6ED9               	movwf	fsr2l,c
  6502   002F2A  6ADA               	clrf	fsr2h,c
  6503   002F2C  0E04               	movlw	4
  6504   002F2E  26D9               	addwf	fsr2l,f,c
  6505   002F30  CFDE F005          	movff	postinc2,min_RGB@min_val
  6506   002F34  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  6507   002F38                     l3398:
  6508                           
  6509                           ;color.c: 191:     return min_val;
  6510   002F38  C005  F001         	movff	min_RGB@min_val,?_min_RGB
  6511   002F3C  C006  F002         	movff	min_RGB@min_val+1,?_min_RGB+1
  6512   002F40  0012               	return		;funcret
  6513   002F42                     __end_of_min_RGB:
  6514                           	callstack 0
  6515                           
  6516 ;; *************** function _max_RGB *****************
  6517 ;; Defined at:
  6518 ;;		line 175 in file "color.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  6521 ;;		 -> main@RGBC_colour(8), 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  max_val         2    4[COMRAM] unsigned int 
  6524 ;; Return value:  Size  Location     Type
  6525 ;;                  2    0[COMRAM] unsigned int 
  6526 ;; Registers used:
  6527 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6528 ;; Tracked objects:
  6529 ;;		On entry : 0/0
  6530 ;;		On exit  : 0/0
  6531 ;;		Unchanged: 0/0
  6532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6533 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6534 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6535 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6536 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6537 ;;Total ram usage:        6 bytes
  6538 ;; Hardware stack levels used: 1
  6539 ;; Hardware stack levels required when called: 1
  6540 ;; This function calls:
  6541 ;;		Nothing
  6542 ;; This function is called by:
  6543 ;;		_convert_HSV
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text34
  6548   002F42                     __ptext34:
  6549                           	callstack 0
  6550   002F42                     _max_RGB:
  6551                           	callstack 27
  6552   002F42                     
  6553                           ;color.c: 175: unsigned int max_RGB(struct RGBC_val *p);color.c: 176: {;color.c: 177:   
      +                            unsigned int max_val = p->R;
  6554   002F42  5001               	movf	max_RGB@p^0,w,c
  6555   002F44  6ED9               	movwf	fsr2l,c
  6556   002F46  6ADA               	clrf	fsr2h,c
  6557   002F48  CFDE F005          	movff	postinc2,max_RGB@max_val
  6558   002F4C  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  6559   002F50                     
  6560                           ;color.c: 178:     if (p->G > max_val) {max_val = p->G;}
  6561   002F50  5001               	movf	max_RGB@p^0,w,c
  6562   002F52  6ED9               	movwf	fsr2l,c
  6563   002F54  6ADA               	clrf	fsr2h,c
  6564   002F56  0E02               	movlw	2
  6565   002F58  26D9               	addwf	fsr2l,f,c
  6566   002F5A  50DE               	movf	postinc2,w,c
  6567   002F5C  5C05               	subwf	max_RGB@max_val^0,w,c
  6568   002F5E  50DE               	movf	postinc2,w,c
  6569   002F60  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  6570   002F62  B0D8               	btfsc	status,0,c
  6571   002F64  EFB6  F017         	goto	u2511
  6572   002F68  EFB8  F017         	goto	u2510
  6573   002F6C                     u2511:
  6574   002F6C  EFC1  F017         	goto	l99
  6575   002F70                     u2510:
  6576   002F70  5001               	movf	max_RGB@p^0,w,c
  6577   002F72  6ED9               	movwf	fsr2l,c
  6578   002F74  6ADA               	clrf	fsr2h,c
  6579   002F76  0E02               	movlw	2
  6580   002F78  26D9               	addwf	fsr2l,f,c
  6581   002F7A  CFDE F005          	movff	postinc2,max_RGB@max_val
  6582   002F7E  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  6583   002F82                     l99:
  6584                           
  6585                           ;color.c: 179:     if (p->B > max_val) {max_val = p->B;}
  6586   002F82  5001               	movf	max_RGB@p^0,w,c
  6587   002F84  6ED9               	movwf	fsr2l,c
  6588   002F86  6ADA               	clrf	fsr2h,c
  6589   002F88  0E04               	movlw	4
  6590   002F8A  26D9               	addwf	fsr2l,f,c
  6591   002F8C  50DE               	movf	postinc2,w,c
  6592   002F8E  5C05               	subwf	max_RGB@max_val^0,w,c
  6593   002F90  50DE               	movf	postinc2,w,c
  6594   002F92  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  6595   002F94  B0D8               	btfsc	status,0,c
  6596   002F96  EFCF  F017         	goto	u2521
  6597   002F9A  EFD1  F017         	goto	u2520
  6598   002F9E                     u2521:
  6599   002F9E  EFDA  F017         	goto	l3386
  6600   002FA2                     u2520:
  6601   002FA2  5001               	movf	max_RGB@p^0,w,c
  6602   002FA4  6ED9               	movwf	fsr2l,c
  6603   002FA6  6ADA               	clrf	fsr2h,c
  6604   002FA8  0E04               	movlw	4
  6605   002FAA  26D9               	addwf	fsr2l,f,c
  6606   002FAC  CFDE F005          	movff	postinc2,max_RGB@max_val
  6607   002FB0  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  6608   002FB4                     l3386:
  6609                           
  6610                           ;color.c: 180:     return max_val;
  6611   002FB4  C005  F001         	movff	max_RGB@max_val,?_max_RGB
  6612   002FB8  C006  F002         	movff	max_RGB@max_val+1,?_max_RGB+1
  6613   002FBC  0012               	return		;funcret
  6614   002FBE                     __end_of_max_RGB:
  6615                           	callstack 0
  6616                           
  6617 ;; *************** function ___lmul *****************
  6618 ;; Defined at:
  6619 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  multiplier      4    0[COMRAM] unsigned long 
  6622 ;;  multiplicand    4    4[COMRAM] unsigned long 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  product         4    8[COMRAM] unsigned long 
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  4    0[COMRAM] unsigned long 
  6627 ;; Registers used:
  6628 ;;		wreg, status,2, status,0
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6634 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6635 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6637 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6638 ;;Total ram usage:       12 bytes
  6639 ;; Hardware stack levels used: 1
  6640 ;; Hardware stack levels required when called: 1
  6641 ;; This function calls:
  6642 ;;		Nothing
  6643 ;; This function is called by:
  6644 ;;		_convert_HSV
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           	psect	text35
  6649   0030A8                     __ptext35:
  6650                           	callstack 0
  6651   0030A8                     ___lmul:
  6652                           	callstack 27
  6653   0030A8  0E00               	movlw	0
  6654   0030AA  6E09               	movwf	___lmul@product^0,c
  6655   0030AC  0E00               	movlw	0
  6656   0030AE  6E0A               	movwf	(___lmul@product+1)^0,c
  6657   0030B0  0E00               	movlw	0
  6658   0030B2  6E0B               	movwf	(___lmul@product+2)^0,c
  6659   0030B4  0E00               	movlw	0
  6660   0030B6  6E0C               	movwf	(___lmul@product+3)^0,c
  6661   0030B8                     l3488:
  6662   0030B8  A001               	btfss	___lmul@multiplier^0,0,c
  6663   0030BA  EF61  F018         	goto	u2601
  6664   0030BE  EF63  F018         	goto	u2600
  6665   0030C2                     u2601:
  6666   0030C2  EF6B  F018         	goto	l3492
  6667   0030C6                     u2600:
  6668   0030C6  5005               	movf	___lmul@multiplicand^0,w,c
  6669   0030C8  2609               	addwf	___lmul@product^0,f,c
  6670   0030CA  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  6671   0030CC  220A               	addwfc	(___lmul@product+1)^0,f,c
  6672   0030CE  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  6673   0030D0  220B               	addwfc	(___lmul@product+2)^0,f,c
  6674   0030D2  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  6675   0030D4  220C               	addwfc	(___lmul@product+3)^0,f,c
  6676   0030D6                     l3492:
  6677   0030D6  90D8               	bcf	status,0,c
  6678   0030D8  3605               	rlcf	___lmul@multiplicand^0,f,c
  6679   0030DA  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  6680   0030DC  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  6681   0030DE  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  6682   0030E0  90D8               	bcf	status,0,c
  6683   0030E2  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  6684   0030E4  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  6685   0030E6  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  6686   0030E8  3201               	rrcf	___lmul@multiplier^0,f,c
  6687   0030EA  5001               	movf	___lmul@multiplier^0,w,c
  6688   0030EC  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  6689   0030EE  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  6690   0030F0  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  6691   0030F2  A4D8               	btfss	status,2,c
  6692   0030F4  EF7E  F018         	goto	u2611
  6693   0030F8  EF80  F018         	goto	u2610
  6694   0030FC                     u2611:
  6695   0030FC  EF5C  F018         	goto	l3488
  6696   003100                     u2610:
  6697   003100  C009  F001         	movff	___lmul@product,?___lmul
  6698   003104  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  6699   003108  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  6700   00310C  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  6701   003110  0012               	return		;funcret
  6702   003112                     __end_of___lmul:
  6703                           	callstack 0
  6704                           
  6705 ;; *************** function _colour_to_key *****************
  6706 ;; Defined at:
  6707 ;;		line 321 in file "color.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  p1              1    0[COMRAM] PTR struct HSV_val
  6710 ;;		 -> main@HSV_colour(6), 
  6711 ;;  p2              1    1[COMRAM] PTR struct RGBC_val
  6712 ;;		 -> main@RGBC_colour(8), 
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;  key             1    4[COMRAM] unsigned char 
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  1    wreg      unsigned char 
  6717 ;; Registers used:
  6718 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6724 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6726 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6727 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6728 ;;Total ram usage:        5 bytes
  6729 ;; Hardware stack levels used: 1
  6730 ;; Hardware stack levels required when called: 1
  6731 ;; This function calls:
  6732 ;;		Nothing
  6733 ;; This function is called by:
  6734 ;;		_main
  6735 ;;		_forward_navigation
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           	psect	text36
  6740   0014E6                     __ptext36:
  6741                           	callstack 0
  6742   0014E6                     _colour_to_key:
  6743                           	callstack 28
  6744   0014E6                     
  6745                           ;color.c: 321: unsigned char colour_to_key(struct HSV_val *p1, struct RGBC_val *p2);colo
      +                          r.c: 322: {;color.c: 323:     unsigned char key = 0;
  6746   0014E6  0E00               	movlw	0
  6747   0014E8  6E05               	movwf	colour_to_key@key^0,c
  6748   0014EA                     
  6749                           ;color.c: 324:     if ( ((293 <= p1->H) && (p1->H <= 360)) &&
  6750   0014EA  5001               	movf	colour_to_key@p1^0,w,c
  6751   0014EC  6ED9               	movwf	fsr2l,c
  6752   0014EE  6ADA               	clrf	fsr2h,c
  6753   0014F0  0E25               	movlw	37
  6754   0014F2  5CDE               	subwf	postinc2,w,c
  6755   0014F4  0E01               	movlw	1
  6756   0014F6  58DE               	subwfb	postinc2,w,c
  6757   0014F8  A0D8               	btfss	status,0,c
  6758   0014FA  EF81  F00A         	goto	u3261
  6759   0014FE  EF83  F00A         	goto	u3260
  6760   001502                     u3261:
  6761   001502  EFB5  F00A         	goto	l3918
  6762   001506                     u3260:
  6763   001506  5001               	movf	colour_to_key@p1^0,w,c
  6764   001508  6ED9               	movwf	fsr2l,c
  6765   00150A  6ADA               	clrf	fsr2h,c
  6766   00150C  0E69               	movlw	105
  6767   00150E  5CDE               	subwf	postinc2,w,c
  6768   001510  0E01               	movlw	1
  6769   001512  58DE               	subwfb	postinc2,w,c
  6770   001514  B0D8               	btfsc	status,0,c
  6771   001516  EF8F  F00A         	goto	u3271
  6772   00151A  EF91  F00A         	goto	u3270
  6773   00151E                     u3271:
  6774   00151E  EFB5  F00A         	goto	l3918
  6775   001522                     u3270:
  6776   001522  5001               	movf	colour_to_key@p1^0,w,c
  6777   001524  6ED9               	movwf	fsr2l,c
  6778   001526  6ADA               	clrf	fsr2h,c
  6779   001528  0E02               	movlw	2
  6780   00152A  26D9               	addwf	fsr2l,f,c
  6781   00152C  0E01               	movlw	1
  6782   00152E  50DB               	movf	plusw2,w,c
  6783   001530  E109               	bnz	u3280
  6784   001532  0E2E               	movlw	46
  6785   001534  5CDE               	subwf	postinc2,w,c
  6786   001536  A0D8               	btfss	status,0,c
  6787   001538  EFA0  F00A         	goto	u3281
  6788   00153C  EFA2  F00A         	goto	u3280
  6789   001540                     u3281:
  6790   001540  EFB5  F00A         	goto	l3918
  6791   001544                     u3280:
  6792   001544  5001               	movf	colour_to_key@p1^0,w,c
  6793   001546  6ED9               	movwf	fsr2l,c
  6794   001548  6ADA               	clrf	fsr2h,c
  6795   00154A  0E02               	movlw	2
  6796   00154C  26D9               	addwf	fsr2l,f,c
  6797   00154E  0E01               	movlw	1
  6798   001550  50DB               	movf	plusw2,w,c
  6799   001552  E107               	bnz	u3291
  6800   001554  0E5B               	movlw	91
  6801   001556  5CDE               	subwf	postinc2,w,c
  6802   001558  B0D8               	btfsc	status,0,c
  6803   00155A  EFB1  F00A         	goto	u3291
  6804   00155E  EFB3  F00A         	goto	u3290
  6805   001562                     u3291:
  6806   001562  EFB5  F00A         	goto	l3918
  6807   001566                     u3290:
  6808   001566                     
  6809                           ;color.c: 325:          ((46 <= p1->S) && (p1->S <= 90))) {;color.c: 326:         key = 
      +                          1;
  6810   001566  0E01               	movlw	1
  6811   001568  6E05               	movwf	colour_to_key@key^0,c
  6812   00156A                     l3918:
  6813                           
  6814                           ;color.c: 329:     if ( ((113 <= p1->H) && (p1->H <= 153)) &&
  6815   00156A  5001               	movf	colour_to_key@p1^0,w,c
  6816   00156C  6ED9               	movwf	fsr2l,c
  6817   00156E  6ADA               	clrf	fsr2h,c
  6818   001570  0E01               	movlw	1
  6819   001572  50DB               	movf	plusw2,w,c
  6820   001574  E109               	bnz	u3300
  6821   001576  0E71               	movlw	113
  6822   001578  5CDE               	subwf	postinc2,w,c
  6823   00157A  A0D8               	btfss	status,0,c
  6824   00157C  EFC2  F00A         	goto	u3301
  6825   001580  EFC4  F00A         	goto	u3300
  6826   001584                     u3301:
  6827   001584  EFF7  F00A         	goto	l3928
  6828   001588                     u3300:
  6829   001588  5001               	movf	colour_to_key@p1^0,w,c
  6830   00158A  6ED9               	movwf	fsr2l,c
  6831   00158C  6ADA               	clrf	fsr2h,c
  6832   00158E  0E01               	movlw	1
  6833   001590  50DB               	movf	plusw2,w,c
  6834   001592  E107               	bnz	u3311
  6835   001594  0E9A               	movlw	154
  6836   001596  5CDE               	subwf	postinc2,w,c
  6837   001598  B0D8               	btfsc	status,0,c
  6838   00159A  EFD1  F00A         	goto	u3311
  6839   00159E  EFD3  F00A         	goto	u3310
  6840   0015A2                     u3311:
  6841   0015A2  EFF7  F00A         	goto	l3928
  6842   0015A6                     u3310:
  6843   0015A6  5001               	movf	colour_to_key@p1^0,w,c
  6844   0015A8  6ED9               	movwf	fsr2l,c
  6845   0015AA  6ADA               	clrf	fsr2h,c
  6846   0015AC  0E02               	movlw	2
  6847   0015AE  26D9               	addwf	fsr2l,f,c
  6848   0015B0  0E01               	movlw	1
  6849   0015B2  50DB               	movf	plusw2,w,c
  6850   0015B4  E109               	bnz	u3320
  6851   0015B6  0E0D               	movlw	13
  6852   0015B8  5CDE               	subwf	postinc2,w,c
  6853   0015BA  A0D8               	btfss	status,0,c
  6854   0015BC  EFE2  F00A         	goto	u3321
  6855   0015C0  EFE4  F00A         	goto	u3320
  6856   0015C4                     u3321:
  6857   0015C4  EFF7  F00A         	goto	l3928
  6858   0015C8                     u3320:
  6859   0015C8  5001               	movf	colour_to_key@p1^0,w,c
  6860   0015CA  6ED9               	movwf	fsr2l,c
  6861   0015CC  6ADA               	clrf	fsr2h,c
  6862   0015CE  0E02               	movlw	2
  6863   0015D0  26D9               	addwf	fsr2l,f,c
  6864   0015D2  0E01               	movlw	1
  6865   0015D4  50DB               	movf	plusw2,w,c
  6866   0015D6  E107               	bnz	u3331
  6867   0015D8  0E2C               	movlw	44
  6868   0015DA  5CDE               	subwf	postinc2,w,c
  6869   0015DC  B0D8               	btfsc	status,0,c
  6870   0015DE  EFF3  F00A         	goto	u3331
  6871   0015E2  EFF5  F00A         	goto	u3330
  6872   0015E6                     u3331:
  6873   0015E6  EFF7  F00A         	goto	l3928
  6874   0015EA                     u3330:
  6875   0015EA                     
  6876                           ;color.c: 330:          ((13 <= p1->S) && (p1->S <= 43))) {;color.c: 331:         key = 
      +                          2;
  6877   0015EA  0E02               	movlw	2
  6878   0015EC  6E05               	movwf	colour_to_key@key^0,c
  6879   0015EE                     l3928:
  6880                           
  6881                           ;color.c: 334:     if ( ((180 <= p1->H) && (p1->H <= 244)) &&
  6882   0015EE  5001               	movf	colour_to_key@p1^0,w,c
  6883   0015F0  6ED9               	movwf	fsr2l,c
  6884   0015F2  6ADA               	clrf	fsr2h,c
  6885   0015F4  0E01               	movlw	1
  6886   0015F6  50DB               	movf	plusw2,w,c
  6887   0015F8  E109               	bnz	u3340
  6888   0015FA  0EB4               	movlw	180
  6889   0015FC  5CDE               	subwf	postinc2,w,c
  6890   0015FE  A0D8               	btfss	status,0,c
  6891   001600  EF04  F00B         	goto	u3341
  6892   001604  EF06  F00B         	goto	u3340
  6893   001608                     u3341:
  6894   001608  EF39  F00B         	goto	l3938
  6895   00160C                     u3340:
  6896   00160C  5001               	movf	colour_to_key@p1^0,w,c
  6897   00160E  6ED9               	movwf	fsr2l,c
  6898   001610  6ADA               	clrf	fsr2h,c
  6899   001612  0E01               	movlw	1
  6900   001614  50DB               	movf	plusw2,w,c
  6901   001616  E107               	bnz	u3351
  6902   001618  0EF5               	movlw	245
  6903   00161A  5CDE               	subwf	postinc2,w,c
  6904   00161C  B0D8               	btfsc	status,0,c
  6905   00161E  EF13  F00B         	goto	u3351
  6906   001622  EF15  F00B         	goto	u3350
  6907   001626                     u3351:
  6908   001626  EF39  F00B         	goto	l3938
  6909   00162A                     u3350:
  6910   00162A  5001               	movf	colour_to_key@p1^0,w,c
  6911   00162C  6ED9               	movwf	fsr2l,c
  6912   00162E  6ADA               	clrf	fsr2h,c
  6913   001630  0E02               	movlw	2
  6914   001632  26D9               	addwf	fsr2l,f,c
  6915   001634  0E01               	movlw	1
  6916   001636  50DB               	movf	plusw2,w,c
  6917   001638  E109               	bnz	u3360
  6918   00163A  0E0D               	movlw	13
  6919   00163C  5CDE               	subwf	postinc2,w,c
  6920   00163E  A0D8               	btfss	status,0,c
  6921   001640  EF24  F00B         	goto	u3361
  6922   001644  EF26  F00B         	goto	u3360
  6923   001648                     u3361:
  6924   001648  EF39  F00B         	goto	l3938
  6925   00164C                     u3360:
  6926   00164C  5001               	movf	colour_to_key@p1^0,w,c
  6927   00164E  6ED9               	movwf	fsr2l,c
  6928   001650  6ADA               	clrf	fsr2h,c
  6929   001652  0E02               	movlw	2
  6930   001654  26D9               	addwf	fsr2l,f,c
  6931   001656  0E01               	movlw	1
  6932   001658  50DB               	movf	plusw2,w,c
  6933   00165A  E107               	bnz	u3371
  6934   00165C  0E39               	movlw	57
  6935   00165E  5CDE               	subwf	postinc2,w,c
  6936   001660  B0D8               	btfsc	status,0,c
  6937   001662  EF35  F00B         	goto	u3371
  6938   001666  EF37  F00B         	goto	u3370
  6939   00166A                     u3371:
  6940   00166A  EF39  F00B         	goto	l3938
  6941   00166E                     u3370:
  6942   00166E                     
  6943                           ;color.c: 335:          ((13 <= p1->S) && (p1->S <= 56))) {;color.c: 336:         key = 
      +                          3;
  6944   00166E  0E03               	movlw	3
  6945   001670  6E05               	movwf	colour_to_key@key^0,c
  6946   001672                     l3938:
  6947                           
  6948                           ;color.c: 339:     if ( ((10 <= p1->H) && (p1->H <= 31)) &&
  6949   001672  5001               	movf	colour_to_key@p1^0,w,c
  6950   001674  6ED9               	movwf	fsr2l,c
  6951   001676  6ADA               	clrf	fsr2h,c
  6952   001678  0E01               	movlw	1
  6953   00167A  50DB               	movf	plusw2,w,c
  6954   00167C  E109               	bnz	u3380
  6955   00167E  0E0A               	movlw	10
  6956   001680  5CDE               	subwf	postinc2,w,c
  6957   001682  A0D8               	btfss	status,0,c
  6958   001684  EF46  F00B         	goto	u3381
  6959   001688  EF48  F00B         	goto	u3380
  6960   00168C                     u3381:
  6961   00168C  EF7B  F00B         	goto	l3948
  6962   001690                     u3380:
  6963   001690  5001               	movf	colour_to_key@p1^0,w,c
  6964   001692  6ED9               	movwf	fsr2l,c
  6965   001694  6ADA               	clrf	fsr2h,c
  6966   001696  0E01               	movlw	1
  6967   001698  50DB               	movf	plusw2,w,c
  6968   00169A  E107               	bnz	u3391
  6969   00169C  0E20               	movlw	32
  6970   00169E  5CDE               	subwf	postinc2,w,c
  6971   0016A0  B0D8               	btfsc	status,0,c
  6972   0016A2  EF55  F00B         	goto	u3391
  6973   0016A6  EF57  F00B         	goto	u3390
  6974   0016AA                     u3391:
  6975   0016AA  EF7B  F00B         	goto	l3948
  6976   0016AE                     u3390:
  6977   0016AE  5001               	movf	colour_to_key@p1^0,w,c
  6978   0016B0  6ED9               	movwf	fsr2l,c
  6979   0016B2  6ADA               	clrf	fsr2h,c
  6980   0016B4  0E02               	movlw	2
  6981   0016B6  26D9               	addwf	fsr2l,f,c
  6982   0016B8  0E01               	movlw	1
  6983   0016BA  50DB               	movf	plusw2,w,c
  6984   0016BC  E109               	bnz	u3400
  6985   0016BE  0E11               	movlw	17
  6986   0016C0  5CDE               	subwf	postinc2,w,c
  6987   0016C2  A0D8               	btfss	status,0,c
  6988   0016C4  EF66  F00B         	goto	u3401
  6989   0016C8  EF68  F00B         	goto	u3400
  6990   0016CC                     u3401:
  6991   0016CC  EF7B  F00B         	goto	l3948
  6992   0016D0                     u3400:
  6993   0016D0  5001               	movf	colour_to_key@p1^0,w,c
  6994   0016D2  6ED9               	movwf	fsr2l,c
  6995   0016D4  6ADA               	clrf	fsr2h,c
  6996   0016D6  0E02               	movlw	2
  6997   0016D8  26D9               	addwf	fsr2l,f,c
  6998   0016DA  0E01               	movlw	1
  6999   0016DC  50DB               	movf	plusw2,w,c
  7000   0016DE  E107               	bnz	u3411
  7001   0016E0  0E21               	movlw	33
  7002   0016E2  5CDE               	subwf	postinc2,w,c
  7003   0016E4  B0D8               	btfsc	status,0,c
  7004   0016E6  EF77  F00B         	goto	u3411
  7005   0016EA  EF79  F00B         	goto	u3410
  7006   0016EE                     u3411:
  7007   0016EE  EF7B  F00B         	goto	l3948
  7008   0016F2                     u3410:
  7009   0016F2                     
  7010                           ;color.c: 340:          ((17 <= p1->S) && (p1->S <= 32))) {;color.c: 341:         key = 
      +                          4;
  7011   0016F2  0E04               	movlw	4
  7012   0016F4  6E05               	movwf	colour_to_key@key^0,c
  7013   0016F6                     l3948:
  7014                           
  7015                           ;color.c: 344:     if ( ((279 <= p1->H) && (p1->H <= 360)) &&
  7016   0016F6  5001               	movf	colour_to_key@p1^0,w,c
  7017   0016F8  6ED9               	movwf	fsr2l,c
  7018   0016FA  6ADA               	clrf	fsr2h,c
  7019   0016FC  0E17               	movlw	23
  7020   0016FE  5CDE               	subwf	postinc2,w,c
  7021   001700  0E01               	movlw	1
  7022   001702  58DE               	subwfb	postinc2,w,c
  7023   001704  A0D8               	btfss	status,0,c
  7024   001706  EF87  F00B         	goto	u3421
  7025   00170A  EF89  F00B         	goto	u3420
  7026   00170E                     u3421:
  7027   00170E  EFBB  F00B         	goto	l3958
  7028   001712                     u3420:
  7029   001712  5001               	movf	colour_to_key@p1^0,w,c
  7030   001714  6ED9               	movwf	fsr2l,c
  7031   001716  6ADA               	clrf	fsr2h,c
  7032   001718  0E69               	movlw	105
  7033   00171A  5CDE               	subwf	postinc2,w,c
  7034   00171C  0E01               	movlw	1
  7035   00171E  58DE               	subwfb	postinc2,w,c
  7036   001720  B0D8               	btfsc	status,0,c
  7037   001722  EF95  F00B         	goto	u3431
  7038   001726  EF97  F00B         	goto	u3430
  7039   00172A                     u3431:
  7040   00172A  EFBB  F00B         	goto	l3958
  7041   00172E                     u3430:
  7042   00172E  5001               	movf	colour_to_key@p1^0,w,c
  7043   001730  6ED9               	movwf	fsr2l,c
  7044   001732  6ADA               	clrf	fsr2h,c
  7045   001734  0E02               	movlw	2
  7046   001736  26D9               	addwf	fsr2l,f,c
  7047   001738  0E01               	movlw	1
  7048   00173A  50DB               	movf	plusw2,w,c
  7049   00173C  E109               	bnz	u3440
  7050   00173E  0E0B               	movlw	11
  7051   001740  5CDE               	subwf	postinc2,w,c
  7052   001742  A0D8               	btfss	status,0,c
  7053   001744  EFA6  F00B         	goto	u3441
  7054   001748  EFA8  F00B         	goto	u3440
  7055   00174C                     u3441:
  7056   00174C  EFBB  F00B         	goto	l3958
  7057   001750                     u3440:
  7058   001750  5001               	movf	colour_to_key@p1^0,w,c
  7059   001752  6ED9               	movwf	fsr2l,c
  7060   001754  6ADA               	clrf	fsr2h,c
  7061   001756  0E02               	movlw	2
  7062   001758  26D9               	addwf	fsr2l,f,c
  7063   00175A  0E01               	movlw	1
  7064   00175C  50DB               	movf	plusw2,w,c
  7065   00175E  E107               	bnz	u3451
  7066   001760  0E10               	movlw	16
  7067   001762  5CDE               	subwf	postinc2,w,c
  7068   001764  B0D8               	btfsc	status,0,c
  7069   001766  EFB7  F00B         	goto	u3451
  7070   00176A  EFB9  F00B         	goto	u3450
  7071   00176E                     u3451:
  7072   00176E  EFBB  F00B         	goto	l3958
  7073   001772                     u3450:
  7074   001772                     
  7075                           ;color.c: 345:          ((11 <= p1->S) && (p1->S <= 15))) {;color.c: 346:         key = 
      +                          5;
  7076   001772  0E05               	movlw	5
  7077   001774  6E05               	movwf	colour_to_key@key^0,c
  7078   001776                     l3958:
  7079                           
  7080                           ;color.c: 349:     if ( ((298 <= p1->H) && (p1->H <= 360)) &&
  7081   001776  5001               	movf	colour_to_key@p1^0,w,c
  7082   001778  6ED9               	movwf	fsr2l,c
  7083   00177A  6ADA               	clrf	fsr2h,c
  7084   00177C  0E2A               	movlw	42
  7085   00177E  5CDE               	subwf	postinc2,w,c
  7086   001780  0E01               	movlw	1
  7087   001782  58DE               	subwfb	postinc2,w,c
  7088   001784  A0D8               	btfss	status,0,c
  7089   001786  EFC7  F00B         	goto	u3461
  7090   00178A  EFC9  F00B         	goto	u3460
  7091   00178E                     u3461:
  7092   00178E  EFFB  F00B         	goto	l3968
  7093   001792                     u3460:
  7094   001792  5001               	movf	colour_to_key@p1^0,w,c
  7095   001794  6ED9               	movwf	fsr2l,c
  7096   001796  6ADA               	clrf	fsr2h,c
  7097   001798  0E69               	movlw	105
  7098   00179A  5CDE               	subwf	postinc2,w,c
  7099   00179C  0E01               	movlw	1
  7100   00179E  58DE               	subwfb	postinc2,w,c
  7101   0017A0  B0D8               	btfsc	status,0,c
  7102   0017A2  EFD5  F00B         	goto	u3471
  7103   0017A6  EFD7  F00B         	goto	u3470
  7104   0017AA                     u3471:
  7105   0017AA  EFFB  F00B         	goto	l3968
  7106   0017AE                     u3470:
  7107   0017AE  5001               	movf	colour_to_key@p1^0,w,c
  7108   0017B0  6ED9               	movwf	fsr2l,c
  7109   0017B2  6ADA               	clrf	fsr2h,c
  7110   0017B4  0E02               	movlw	2
  7111   0017B6  26D9               	addwf	fsr2l,f,c
  7112   0017B8  0E01               	movlw	1
  7113   0017BA  50DB               	movf	plusw2,w,c
  7114   0017BC  E109               	bnz	u3480
  7115   0017BE  0E14               	movlw	20
  7116   0017C0  5CDE               	subwf	postinc2,w,c
  7117   0017C2  A0D8               	btfss	status,0,c
  7118   0017C4  EFE6  F00B         	goto	u3481
  7119   0017C8  EFE8  F00B         	goto	u3480
  7120   0017CC                     u3481:
  7121   0017CC  EFFB  F00B         	goto	l3968
  7122   0017D0                     u3480:
  7123   0017D0  5001               	movf	colour_to_key@p1^0,w,c
  7124   0017D2  6ED9               	movwf	fsr2l,c
  7125   0017D4  6ADA               	clrf	fsr2h,c
  7126   0017D6  0E02               	movlw	2
  7127   0017D8  26D9               	addwf	fsr2l,f,c
  7128   0017DA  0E01               	movlw	1
  7129   0017DC  50DB               	movf	plusw2,w,c
  7130   0017DE  E107               	bnz	u3491
  7131   0017E0  0E2E               	movlw	46
  7132   0017E2  5CDE               	subwf	postinc2,w,c
  7133   0017E4  B0D8               	btfsc	status,0,c
  7134   0017E6  EFF7  F00B         	goto	u3491
  7135   0017EA  EFF9  F00B         	goto	u3490
  7136   0017EE                     u3491:
  7137   0017EE  EFFB  F00B         	goto	l3968
  7138   0017F2                     u3490:
  7139   0017F2                     
  7140                           ;color.c: 350:          ((20 <= p1->S) && (p1->S <= 45))) {;color.c: 351:         key = 
      +                          6;
  7141   0017F2  0E06               	movlw	6
  7142   0017F4  6E05               	movwf	colour_to_key@key^0,c
  7143   0017F6                     l3968:
  7144                           
  7145                           ;color.c: 354:     if ( ((154 <= p1->H) && (p1->H <= 207)) &&
  7146   0017F6  5001               	movf	colour_to_key@p1^0,w,c
  7147   0017F8  6ED9               	movwf	fsr2l,c
  7148   0017FA  6ADA               	clrf	fsr2h,c
  7149   0017FC  0E01               	movlw	1
  7150   0017FE  50DB               	movf	plusw2,w,c
  7151   001800  E109               	bnz	u3500
  7152   001802  0E9A               	movlw	154
  7153   001804  5CDE               	subwf	postinc2,w,c
  7154   001806  A0D8               	btfss	status,0,c
  7155   001808  EF08  F00C         	goto	u3501
  7156   00180C  EF0A  F00C         	goto	u3500
  7157   001810                     u3501:
  7158   001810  EF3D  F00C         	goto	l3978
  7159   001814                     u3500:
  7160   001814  5001               	movf	colour_to_key@p1^0,w,c
  7161   001816  6ED9               	movwf	fsr2l,c
  7162   001818  6ADA               	clrf	fsr2h,c
  7163   00181A  0E01               	movlw	1
  7164   00181C  50DB               	movf	plusw2,w,c
  7165   00181E  E107               	bnz	u3511
  7166   001820  0ED0               	movlw	208
  7167   001822  5CDE               	subwf	postinc2,w,c
  7168   001824  B0D8               	btfsc	status,0,c
  7169   001826  EF17  F00C         	goto	u3511
  7170   00182A  EF19  F00C         	goto	u3510
  7171   00182E                     u3511:
  7172   00182E  EF3D  F00C         	goto	l3978
  7173   001832                     u3510:
  7174   001832  5001               	movf	colour_to_key@p1^0,w,c
  7175   001834  6ED9               	movwf	fsr2l,c
  7176   001836  6ADA               	clrf	fsr2h,c
  7177   001838  0E02               	movlw	2
  7178   00183A  26D9               	addwf	fsr2l,f,c
  7179   00183C  0E01               	movlw	1
  7180   00183E  50DB               	movf	plusw2,w,c
  7181   001840  E109               	bnz	u3520
  7182   001842  0E0D               	movlw	13
  7183   001844  5CDE               	subwf	postinc2,w,c
  7184   001846  A0D8               	btfss	status,0,c
  7185   001848  EF28  F00C         	goto	u3521
  7186   00184C  EF2A  F00C         	goto	u3520
  7187   001850                     u3521:
  7188   001850  EF3D  F00C         	goto	l3978
  7189   001854                     u3520:
  7190   001854  5001               	movf	colour_to_key@p1^0,w,c
  7191   001856  6ED9               	movwf	fsr2l,c
  7192   001858  6ADA               	clrf	fsr2h,c
  7193   00185A  0E02               	movlw	2
  7194   00185C  26D9               	addwf	fsr2l,f,c
  7195   00185E  0E01               	movlw	1
  7196   001860  50DB               	movf	plusw2,w,c
  7197   001862  E107               	bnz	u3531
  7198   001864  0E2E               	movlw	46
  7199   001866  5CDE               	subwf	postinc2,w,c
  7200   001868  B0D8               	btfsc	status,0,c
  7201   00186A  EF39  F00C         	goto	u3531
  7202   00186E  EF3B  F00C         	goto	u3530
  7203   001872                     u3531:
  7204   001872  EF3D  F00C         	goto	l3978
  7205   001876                     u3530:
  7206   001876                     
  7207                           ;color.c: 355:          ((13 <= p1->S) && (p1->S <= 45))) {;color.c: 356:         key = 
      +                          7;
  7208   001876  0E07               	movlw	7
  7209   001878  6E05               	movwf	colour_to_key@key^0,c
  7210   00187A                     l3978:
  7211                           
  7212                           ;color.c: 359:     if ( ((3000 <= p2->C) && (p2->C <= 40000)) &&
  7213   00187A  5002               	movf	colour_to_key@p2^0,w,c
  7214   00187C  6ED9               	movwf	fsr2l,c
  7215   00187E  6ADA               	clrf	fsr2h,c
  7216   001880  0E06               	movlw	6
  7217   001882  26D9               	addwf	fsr2l,f,c
  7218   001884  0EB8               	movlw	184
  7219   001886  5CDE               	subwf	postinc2,w,c
  7220   001888  0E0B               	movlw	11
  7221   00188A  58DE               	subwfb	postinc2,w,c
  7222   00188C  A0D8               	btfss	status,0,c
  7223   00188E  EF4B  F00C         	goto	u3541
  7224   001892  EF4D  F00C         	goto	u3540
  7225   001896                     u3541:
  7226   001896  EF70  F00C         	goto	l3986
  7227   00189A                     u3540:
  7228   00189A  5002               	movf	colour_to_key@p2^0,w,c
  7229   00189C  6ED9               	movwf	fsr2l,c
  7230   00189E  6ADA               	clrf	fsr2h,c
  7231   0018A0  0E06               	movlw	6
  7232   0018A2  26D9               	addwf	fsr2l,f,c
  7233   0018A4  0E41               	movlw	65
  7234   0018A6  5CDE               	subwf	postinc2,w,c
  7235   0018A8  0E9C               	movlw	156
  7236   0018AA  58DE               	subwfb	postinc2,w,c
  7237   0018AC  B0D8               	btfsc	status,0,c
  7238   0018AE  EF5B  F00C         	goto	u3551
  7239   0018B2  EF5D  F00C         	goto	u3550
  7240   0018B6                     u3551:
  7241   0018B6  EF70  F00C         	goto	l3986
  7242   0018BA                     u3550:
  7243   0018BA  5001               	movf	colour_to_key@p1^0,w,c
  7244   0018BC  6ED9               	movwf	fsr2l,c
  7245   0018BE  6ADA               	clrf	fsr2h,c
  7246   0018C0  0E02               	movlw	2
  7247   0018C2  26D9               	addwf	fsr2l,f,c
  7248   0018C4  0E01               	movlw	1
  7249   0018C6  50DB               	movf	plusw2,w,c
  7250   0018C8  E107               	bnz	u3561
  7251   0018CA  0E0B               	movlw	11
  7252   0018CC  5CDE               	subwf	postinc2,w,c
  7253   0018CE  B0D8               	btfsc	status,0,c
  7254   0018D0  EF6C  F00C         	goto	u3561
  7255   0018D4  EF6E  F00C         	goto	u3560
  7256   0018D8                     u3561:
  7257   0018D8  EF70  F00C         	goto	l3986
  7258   0018DC                     u3560:
  7259   0018DC                     
  7260                           ;color.c: 360:          ((p1->S <= 10))) {;color.c: 361:         key = 8;
  7261   0018DC  0E08               	movlw	8
  7262   0018DE  6E05               	movwf	colour_to_key@key^0,c
  7263   0018E0                     l3986:
  7264                           
  7265                           ;color.c: 364:     if ( ((1000 <= p2->C) && (p2->C <= 2600)) &&
  7266   0018E0  5002               	movf	colour_to_key@p2^0,w,c
  7267   0018E2  6ED9               	movwf	fsr2l,c
  7268   0018E4  6ADA               	clrf	fsr2h,c
  7269   0018E6  0E06               	movlw	6
  7270   0018E8  26D9               	addwf	fsr2l,f,c
  7271   0018EA  0EE8               	movlw	232
  7272   0018EC  5CDE               	subwf	postinc2,w,c
  7273   0018EE  0E03               	movlw	3
  7274   0018F0  58DE               	subwfb	postinc2,w,c
  7275   0018F2  A0D8               	btfss	status,0,c
  7276   0018F4  EF7E  F00C         	goto	u3571
  7277   0018F8  EF80  F00C         	goto	u3570
  7278   0018FC                     u3571:
  7279   0018FC  EFA3  F00C         	goto	l136
  7280   001900                     u3570:
  7281   001900  5002               	movf	colour_to_key@p2^0,w,c
  7282   001902  6ED9               	movwf	fsr2l,c
  7283   001904  6ADA               	clrf	fsr2h,c
  7284   001906  0E06               	movlw	6
  7285   001908  26D9               	addwf	fsr2l,f,c
  7286   00190A  0E29               	movlw	41
  7287   00190C  5CDE               	subwf	postinc2,w,c
  7288   00190E  0E0A               	movlw	10
  7289   001910  58DE               	subwfb	postinc2,w,c
  7290   001912  B0D8               	btfsc	status,0,c
  7291   001914  EF8E  F00C         	goto	u3581
  7292   001918  EF90  F00C         	goto	u3580
  7293   00191C                     u3581:
  7294   00191C  EFA3  F00C         	goto	l136
  7295   001920                     u3580:
  7296   001920  5001               	movf	colour_to_key@p1^0,w,c
  7297   001922  6ED9               	movwf	fsr2l,c
  7298   001924  6ADA               	clrf	fsr2h,c
  7299   001926  0E02               	movlw	2
  7300   001928  26D9               	addwf	fsr2l,f,c
  7301   00192A  0E01               	movlw	1
  7302   00192C  50DB               	movf	plusw2,w,c
  7303   00192E  E107               	bnz	u3591
  7304   001930  0E0D               	movlw	13
  7305   001932  5CDE               	subwf	postinc2,w,c
  7306   001934  B0D8               	btfsc	status,0,c
  7307   001936  EF9F  F00C         	goto	u3591
  7308   00193A  EFA1  F00C         	goto	u3590
  7309   00193E                     u3591:
  7310   00193E  EFA3  F00C         	goto	l136
  7311   001942                     u3590:
  7312   001942                     
  7313                           ;color.c: 365:          ((p1->S <= 12))) {;color.c: 366:         key = 9;
  7314   001942  0E09               	movlw	9
  7315   001944  6E05               	movwf	colour_to_key@key^0,c
  7316   001946                     l136:
  7317                           
  7318                           ;color.c: 369:     return key;
  7319   001946  5005               	movf	colour_to_key@key^0,w,c
  7320   001948  0012               	return		;funcret
  7321   00194A                     __end_of_colour_to_key:
  7322                           	callstack 0
  7323                           
  7324 ;; *************** function _average_RGBC *****************
  7325 ;; Defined at:
  7326 ;;		line 124 in file "color.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;  p               1   13[COMRAM] PTR struct RGBC_val
  7329 ;;		 -> main@RGBC_colour(8), 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;  i               1   16[COMRAM] unsigned char 
  7332 ;;  temp_C          4   29[COMRAM] unsigned long 
  7333 ;;  temp_B          4   25[COMRAM] unsigned long 
  7334 ;;  temp_G          4   21[COMRAM] unsigned long 
  7335 ;;  temp_R          4   17[COMRAM] unsigned long 
  7336 ;; Return value:  Size  Location     Type
  7337 ;;                  1    wreg      void 
  7338 ;; Registers used:
  7339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7345 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7346 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7347 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7348 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7349 ;;Total ram usage:       20 bytes
  7350 ;; Hardware stack levels used: 1
  7351 ;; Hardware stack levels required when called: 5
  7352 ;; This function calls:
  7353 ;;		___lldiv
  7354 ;;		_getRGBCval
  7355 ;; This function is called by:
  7356 ;;		_main
  7357 ;;		_forward_navigation
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text37
  7362   002080                     __ptext37:
  7363                           	callstack 0
  7364   002080                     _average_RGBC:
  7365                           	callstack 24
  7366   002080                     
  7367                           ;color.c: 124: void average_RGBC(struct RGBC_val *p);color.c: 125: {;color.c: 127:     u
      +                          nsigned long temp_R = 0;
  7368   002080  0E00               	movlw	0
  7369   002082  6E12               	movwf	average_RGBC@temp_R^0,c
  7370   002084  0E00               	movlw	0
  7371   002086  6E13               	movwf	(average_RGBC@temp_R+1)^0,c
  7372   002088  0E00               	movlw	0
  7373   00208A  6E14               	movwf	(average_RGBC@temp_R+2)^0,c
  7374   00208C  0E00               	movlw	0
  7375   00208E  6E15               	movwf	(average_RGBC@temp_R+3)^0,c
  7376                           
  7377                           ;color.c: 128:     unsigned long temp_G = 0;
  7378   002090  0E00               	movlw	0
  7379   002092  6E16               	movwf	average_RGBC@temp_G^0,c
  7380   002094  0E00               	movlw	0
  7381   002096  6E17               	movwf	(average_RGBC@temp_G+1)^0,c
  7382   002098  0E00               	movlw	0
  7383   00209A  6E18               	movwf	(average_RGBC@temp_G+2)^0,c
  7384   00209C  0E00               	movlw	0
  7385   00209E  6E19               	movwf	(average_RGBC@temp_G+3)^0,c
  7386                           
  7387                           ;color.c: 129:     unsigned long temp_B = 0;
  7388   0020A0  0E00               	movlw	0
  7389   0020A2  6E1A               	movwf	average_RGBC@temp_B^0,c
  7390   0020A4  0E00               	movlw	0
  7391   0020A6  6E1B               	movwf	(average_RGBC@temp_B+1)^0,c
  7392   0020A8  0E00               	movlw	0
  7393   0020AA  6E1C               	movwf	(average_RGBC@temp_B+2)^0,c
  7394   0020AC  0E00               	movlw	0
  7395   0020AE  6E1D               	movwf	(average_RGBC@temp_B+3)^0,c
  7396                           
  7397                           ;color.c: 130:     unsigned long temp_C = 0;
  7398   0020B0  0E00               	movlw	0
  7399   0020B2  6E1E               	movwf	average_RGBC@temp_C^0,c
  7400   0020B4  0E00               	movlw	0
  7401   0020B6  6E1F               	movwf	(average_RGBC@temp_C+1)^0,c
  7402   0020B8  0E00               	movlw	0
  7403   0020BA  6E20               	movwf	(average_RGBC@temp_C+2)^0,c
  7404   0020BC  0E00               	movlw	0
  7405   0020BE  6E21               	movwf	(average_RGBC@temp_C+3)^0,c
  7406                           
  7407                           ;color.c: 136:     for (unsigned char i = 0; i < sample_count; i++) {
  7408   0020C0  0E00               	movlw	0
  7409   0020C2  6E11               	movwf	average_RGBC@i^0,c
  7410   0020C4  EFAB  F010         	goto	l3768
  7411   0020C8                     l3756:
  7412                           
  7413                           ;color.c: 138:         getRGBCval(p);
  7414   0020C8  C00E  F00C         	movff	average_RGBC@p,getRGBCval@p
  7415   0020CC  EC46  F019         	call	_getRGBCval	;wreg free
  7416   0020D0                     
  7417                           ;color.c: 140:         temp_R += (unsigned long)p->R;
  7418   0020D0  500E               	movf	average_RGBC@p^0,w,c
  7419   0020D2  6ED9               	movwf	fsr2l,c
  7420   0020D4  6ADA               	clrf	fsr2h,c
  7421   0020D6  CFDE F00F          	movff	postinc2,??_average_RGBC
  7422   0020DA  CFDD F010          	movff	postdec2,??_average_RGBC+1
  7423   0020DE  500F               	movf	??_average_RGBC^0,w,c
  7424   0020E0  2612               	addwf	average_RGBC@temp_R^0,f,c
  7425   0020E2  5010               	movf	(??_average_RGBC+1)^0,w,c
  7426   0020E4  2213               	addwfc	(average_RGBC@temp_R+1)^0,f,c
  7427   0020E6  0E00               	movlw	0
  7428   0020E8  2214               	addwfc	(average_RGBC@temp_R+2)^0,f,c
  7429   0020EA  0E00               	movlw	0
  7430   0020EC  2215               	addwfc	(average_RGBC@temp_R+3)^0,f,c
  7431   0020EE                     
  7432                           ;color.c: 141:         temp_G += (unsigned long)p->G;
  7433   0020EE  500E               	movf	average_RGBC@p^0,w,c
  7434   0020F0  6ED9               	movwf	fsr2l,c
  7435   0020F2  6ADA               	clrf	fsr2h,c
  7436   0020F4  0E02               	movlw	2
  7437   0020F6  26D9               	addwf	fsr2l,f,c
  7438   0020F8  CFDE F00F          	movff	postinc2,??_average_RGBC
  7439   0020FC  CFDD F010          	movff	postdec2,??_average_RGBC+1
  7440   002100  500F               	movf	??_average_RGBC^0,w,c
  7441   002102  2616               	addwf	average_RGBC@temp_G^0,f,c
  7442   002104  5010               	movf	(??_average_RGBC+1)^0,w,c
  7443   002106  2217               	addwfc	(average_RGBC@temp_G+1)^0,f,c
  7444   002108  0E00               	movlw	0
  7445   00210A  2218               	addwfc	(average_RGBC@temp_G+2)^0,f,c
  7446   00210C  0E00               	movlw	0
  7447   00210E  2219               	addwfc	(average_RGBC@temp_G+3)^0,f,c
  7448   002110                     
  7449                           ;color.c: 142:         temp_B += (unsigned long)p->B;
  7450   002110  500E               	movf	average_RGBC@p^0,w,c
  7451   002112  6ED9               	movwf	fsr2l,c
  7452   002114  6ADA               	clrf	fsr2h,c
  7453   002116  0E04               	movlw	4
  7454   002118  26D9               	addwf	fsr2l,f,c
  7455   00211A  CFDE F00F          	movff	postinc2,??_average_RGBC
  7456   00211E  CFDD F010          	movff	postdec2,??_average_RGBC+1
  7457   002122  500F               	movf	??_average_RGBC^0,w,c
  7458   002124  261A               	addwf	average_RGBC@temp_B^0,f,c
  7459   002126  5010               	movf	(??_average_RGBC+1)^0,w,c
  7460   002128  221B               	addwfc	(average_RGBC@temp_B+1)^0,f,c
  7461   00212A  0E00               	movlw	0
  7462   00212C  221C               	addwfc	(average_RGBC@temp_B+2)^0,f,c
  7463   00212E  0E00               	movlw	0
  7464   002130  221D               	addwfc	(average_RGBC@temp_B+3)^0,f,c
  7465   002132                     
  7466                           ;color.c: 143:         temp_C += (unsigned long)p->C;
  7467   002132  500E               	movf	average_RGBC@p^0,w,c
  7468   002134  6ED9               	movwf	fsr2l,c
  7469   002136  6ADA               	clrf	fsr2h,c
  7470   002138  0E06               	movlw	6
  7471   00213A  26D9               	addwf	fsr2l,f,c
  7472   00213C  CFDE F00F          	movff	postinc2,??_average_RGBC
  7473   002140  CFDD F010          	movff	postdec2,??_average_RGBC+1
  7474   002144  500F               	movf	??_average_RGBC^0,w,c
  7475   002146  261E               	addwf	average_RGBC@temp_C^0,f,c
  7476   002148  5010               	movf	(??_average_RGBC+1)^0,w,c
  7477   00214A  221F               	addwfc	(average_RGBC@temp_C+1)^0,f,c
  7478   00214C  0E00               	movlw	0
  7479   00214E  2220               	addwfc	(average_RGBC@temp_C+2)^0,f,c
  7480   002150  0E00               	movlw	0
  7481   002152  2221               	addwfc	(average_RGBC@temp_C+3)^0,f,c
  7482   002154                     
  7483                           ;color.c: 144:     }
  7484   002154  2A11               	incf	average_RGBC@i^0,f,c
  7485   002156                     l3768:
  7486   002156  0E13               	movlw	19
  7487   002158  6411               	cpfsgt	average_RGBC@i^0,c
  7488   00215A  EFB1  F010         	goto	u3131
  7489   00215E  EFB3  F010         	goto	u3130
  7490   002162                     u3131:
  7491   002162  EF64  F010         	goto	l3756
  7492   002166                     u3130:
  7493   002166  C012  F001         	movff	average_RGBC@temp_R,___lldiv@dividend
  7494   00216A  C013  F002         	movff	average_RGBC@temp_R+1,___lldiv@dividend+1
  7495   00216E  C014  F003         	movff	average_RGBC@temp_R+2,___lldiv@dividend+2
  7496   002172  C015  F004         	movff	average_RGBC@temp_R+3,___lldiv@dividend+3
  7497   002176  0E14               	movlw	20
  7498   002178  6E05               	movwf	___lldiv@divisor^0,c
  7499   00217A  0E00               	movlw	0
  7500   00217C  6E06               	movwf	(___lldiv@divisor+1)^0,c
  7501   00217E  0E00               	movlw	0
  7502   002180  6E07               	movwf	(___lldiv@divisor+2)^0,c
  7503   002182  0E00               	movlw	0
  7504   002184  6E08               	movwf	(___lldiv@divisor+3)^0,c
  7505   002186  EC82  F016         	call	___lldiv	;wreg free
  7506   00218A  C001  F012         	movff	?___lldiv,average_RGBC@temp_R
  7507   00218E  C002  F013         	movff	?___lldiv+1,average_RGBC@temp_R+1
  7508   002192  C003  F014         	movff	?___lldiv+2,average_RGBC@temp_R+2
  7509   002196  C004  F015         	movff	?___lldiv+3,average_RGBC@temp_R+3
  7510   00219A  C016  F001         	movff	average_RGBC@temp_G,___lldiv@dividend
  7511   00219E  C017  F002         	movff	average_RGBC@temp_G+1,___lldiv@dividend+1
  7512   0021A2  C018  F003         	movff	average_RGBC@temp_G+2,___lldiv@dividend+2
  7513   0021A6  C019  F004         	movff	average_RGBC@temp_G+3,___lldiv@dividend+3
  7514   0021AA  0E14               	movlw	20
  7515   0021AC  6E05               	movwf	___lldiv@divisor^0,c
  7516   0021AE  0E00               	movlw	0
  7517   0021B0  6E06               	movwf	(___lldiv@divisor+1)^0,c
  7518   0021B2  0E00               	movlw	0
  7519   0021B4  6E07               	movwf	(___lldiv@divisor+2)^0,c
  7520   0021B6  0E00               	movlw	0
  7521   0021B8  6E08               	movwf	(___lldiv@divisor+3)^0,c
  7522   0021BA  EC82  F016         	call	___lldiv	;wreg free
  7523   0021BE  C001  F016         	movff	?___lldiv,average_RGBC@temp_G
  7524   0021C2  C002  F017         	movff	?___lldiv+1,average_RGBC@temp_G+1
  7525   0021C6  C003  F018         	movff	?___lldiv+2,average_RGBC@temp_G+2
  7526   0021CA  C004  F019         	movff	?___lldiv+3,average_RGBC@temp_G+3
  7527   0021CE  C01A  F001         	movff	average_RGBC@temp_B,___lldiv@dividend
  7528   0021D2  C01B  F002         	movff	average_RGBC@temp_B+1,___lldiv@dividend+1
  7529   0021D6  C01C  F003         	movff	average_RGBC@temp_B+2,___lldiv@dividend+2
  7530   0021DA  C01D  F004         	movff	average_RGBC@temp_B+3,___lldiv@dividend+3
  7531   0021DE  0E14               	movlw	20
  7532   0021E0  6E05               	movwf	___lldiv@divisor^0,c
  7533   0021E2  0E00               	movlw	0
  7534   0021E4  6E06               	movwf	(___lldiv@divisor+1)^0,c
  7535   0021E6  0E00               	movlw	0
  7536   0021E8  6E07               	movwf	(___lldiv@divisor+2)^0,c
  7537   0021EA  0E00               	movlw	0
  7538   0021EC  6E08               	movwf	(___lldiv@divisor+3)^0,c
  7539   0021EE  EC82  F016         	call	___lldiv	;wreg free
  7540   0021F2  C001  F01A         	movff	?___lldiv,average_RGBC@temp_B
  7541   0021F6  C002  F01B         	movff	?___lldiv+1,average_RGBC@temp_B+1
  7542   0021FA  C003  F01C         	movff	?___lldiv+2,average_RGBC@temp_B+2
  7543   0021FE  C004  F01D         	movff	?___lldiv+3,average_RGBC@temp_B+3
  7544   002202  C01E  F001         	movff	average_RGBC@temp_C,___lldiv@dividend
  7545   002206  C01F  F002         	movff	average_RGBC@temp_C+1,___lldiv@dividend+1
  7546   00220A  C020  F003         	movff	average_RGBC@temp_C+2,___lldiv@dividend+2
  7547   00220E  C021  F004         	movff	average_RGBC@temp_C+3,___lldiv@dividend+3
  7548   002212  0E14               	movlw	20
  7549   002214  6E05               	movwf	___lldiv@divisor^0,c
  7550   002216  0E00               	movlw	0
  7551   002218  6E06               	movwf	(___lldiv@divisor+1)^0,c
  7552   00221A  0E00               	movlw	0
  7553   00221C  6E07               	movwf	(___lldiv@divisor+2)^0,c
  7554   00221E  0E00               	movlw	0
  7555   002220  6E08               	movwf	(___lldiv@divisor+3)^0,c
  7556   002222  EC82  F016         	call	___lldiv	;wreg free
  7557   002226  C001  F01E         	movff	?___lldiv,average_RGBC@temp_C
  7558   00222A  C002  F01F         	movff	?___lldiv+1,average_RGBC@temp_C+1
  7559   00222E  C003  F020         	movff	?___lldiv+2,average_RGBC@temp_C+2
  7560   002232  C004  F021         	movff	?___lldiv+3,average_RGBC@temp_C+3
  7561   002236                     
  7562                           ;color.c: 153:     p->R = (unsigned int)temp_R;
  7563   002236  500E               	movf	average_RGBC@p^0,w,c
  7564   002238  6ED9               	movwf	fsr2l,c
  7565   00223A  6ADA               	clrf	fsr2h,c
  7566   00223C  C012  FFDE         	movff	average_RGBC@temp_R,postinc2
  7567   002240  C013  FFDD         	movff	average_RGBC@temp_R+1,postdec2
  7568   002244                     
  7569                           ;color.c: 154:     p->G = (unsigned int)temp_G;
  7570   002244  500E               	movf	average_RGBC@p^0,w,c
  7571   002246  6ED9               	movwf	fsr2l,c
  7572   002248  6ADA               	clrf	fsr2h,c
  7573   00224A  0E02               	movlw	2
  7574   00224C  26D9               	addwf	fsr2l,f,c
  7575   00224E  C016  FFDE         	movff	average_RGBC@temp_G,postinc2
  7576   002252  C017  FFDD         	movff	average_RGBC@temp_G+1,postdec2
  7577   002256                     
  7578                           ;color.c: 155:     p->B = (unsigned int)temp_B;
  7579   002256  500E               	movf	average_RGBC@p^0,w,c
  7580   002258  6ED9               	movwf	fsr2l,c
  7581   00225A  6ADA               	clrf	fsr2h,c
  7582   00225C  0E04               	movlw	4
  7583   00225E  26D9               	addwf	fsr2l,f,c
  7584   002260  C01A  FFDE         	movff	average_RGBC@temp_B,postinc2
  7585   002264  C01B  FFDD         	movff	average_RGBC@temp_B+1,postdec2
  7586   002268                     
  7587                           ;color.c: 156:     p->C = (unsigned int)temp_C;
  7588   002268  500E               	movf	average_RGBC@p^0,w,c
  7589   00226A  6ED9               	movwf	fsr2l,c
  7590   00226C  6ADA               	clrf	fsr2h,c
  7591   00226E  0E06               	movlw	6
  7592   002270  26D9               	addwf	fsr2l,f,c
  7593   002272  C01E  FFDE         	movff	average_RGBC@temp_C,postinc2
  7594   002276  C01F  FFDD         	movff	average_RGBC@temp_C+1,postdec2
  7595   00227A  0012               	return		;funcret
  7596   00227C                     __end_of_average_RGBC:
  7597                           	callstack 0
  7598                           
  7599 ;; *************** function _getRGBCval *****************
  7600 ;; Defined at:
  7601 ;;		line 112 in file "color.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  7604 ;;		 -> main@RGBC_colour(8), 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;		None
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  1    wreg      void 
  7609 ;; Registers used:
  7610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7616 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7620 ;;Total ram usage:        1 bytes
  7621 ;; Hardware stack levels used: 1
  7622 ;; Hardware stack levels required when called: 4
  7623 ;; This function calls:
  7624 ;;		_color_read_Blue
  7625 ;;		_color_read_Clear
  7626 ;;		_color_read_Green
  7627 ;;		_color_read_Red
  7628 ;; This function is called by:
  7629 ;;		_average_RGBC
  7630 ;;		_wait_for_wall
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           	psect	text38
  7635   00328C                     __ptext38:
  7636                           	callstack 0
  7637   00328C                     _getRGBCval:
  7638                           	callstack 24
  7639   00328C                     
  7640                           ;color.c: 112: void getRGBCval(struct RGBC_val *p);color.c: 113: {;color.c: 114:     p->
      +                          R = color_read_Red();
  7641   00328C  EC71  F019         	call	_color_read_Red	;wreg free
  7642   003290  500C               	movf	getRGBCval@p^0,w,c
  7643   003292  6ED9               	movwf	fsr2l,c
  7644   003294  6ADA               	clrf	fsr2h,c
  7645   003296  C005  FFDE         	movff	?_color_read_Red,postinc2
  7646   00329A  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  7647                           
  7648                           ;color.c: 115:     p->G = color_read_Green();
  7649   00329E  EC99  F019         	call	_color_read_Green	;wreg free
  7650   0032A2  500C               	movf	getRGBCval@p^0,w,c
  7651   0032A4  6ED9               	movwf	fsr2l,c
  7652   0032A6  6ADA               	clrf	fsr2h,c
  7653   0032A8  0E02               	movlw	2
  7654   0032AA  26D9               	addwf	fsr2l,f,c
  7655   0032AC  C005  FFDE         	movff	?_color_read_Green,postinc2
  7656   0032B0  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  7657                           
  7658                           ;color.c: 116:     p->B = color_read_Blue();
  7659   0032B4  ECE9  F019         	call	_color_read_Blue	;wreg free
  7660   0032B8  500C               	movf	getRGBCval@p^0,w,c
  7661   0032BA  6ED9               	movwf	fsr2l,c
  7662   0032BC  6ADA               	clrf	fsr2h,c
  7663   0032BE  0E04               	movlw	4
  7664   0032C0  26D9               	addwf	fsr2l,f,c
  7665   0032C2  C005  FFDE         	movff	?_color_read_Blue,postinc2
  7666   0032C6  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  7667                           
  7668                           ;color.c: 117:     p->C = color_read_Clear();
  7669   0032CA  ECC1  F019         	call	_color_read_Clear	;wreg free
  7670   0032CE  500C               	movf	getRGBCval@p^0,w,c
  7671   0032D0  6ED9               	movwf	fsr2l,c
  7672   0032D2  6ADA               	clrf	fsr2h,c
  7673   0032D4  0E06               	movlw	6
  7674   0032D6  26D9               	addwf	fsr2l,f,c
  7675   0032D8  C005  FFDE         	movff	?_color_read_Clear,postinc2
  7676   0032DC  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  7677   0032E0  0012               	return		;funcret
  7678   0032E2                     __end_of_getRGBCval:
  7679                           	callstack 0
  7680                           
  7681 ;; *************** function _color_read_Red *****************
  7682 ;; Defined at:
  7683 ;;		line 40 in file "color.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;		None
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;  tmp             2    9[COMRAM] unsigned int 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  2    4[COMRAM] unsigned int 
  7690 ;; Registers used:
  7691 ;;		wreg, status,2, status,0, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7697 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7698 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7699 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7700 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7701 ;;Total ram usage:        7 bytes
  7702 ;; Hardware stack levels used: 1
  7703 ;; Hardware stack levels required when called: 3
  7704 ;; This function calls:
  7705 ;;		_I2C_2_Master_Read
  7706 ;;		_I2C_2_Master_RepStart
  7707 ;;		_I2C_2_Master_Start
  7708 ;;		_I2C_2_Master_Stop
  7709 ;;		_I2C_2_Master_Write
  7710 ;; This function is called by:
  7711 ;;		_getRGBCval
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	text39
  7716   0032E2                     __ptext39:
  7717                           	callstack 0
  7718   0032E2                     _color_read_Red:
  7719                           	callstack 24
  7720   0032E2                     
  7721                           ;color.c: 42:  unsigned int tmp;;color.c: 43:  I2C_2_Master_Start();
  7722   0032E2  ECEB  F01B         	call	_I2C_2_Master_Start	;wreg free
  7723                           
  7724                           ;color.c: 44:  I2C_2_Master_Write(0x52 | 0x00);
  7725   0032E6  0E52               	movlw	82
  7726   0032E8  ECCF  F01B         	call	_I2C_2_Master_Write
  7727                           
  7728                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  7729   0032EC  0EB6               	movlw	182
  7730   0032EE  ECCF  F01B         	call	_I2C_2_Master_Write
  7731                           
  7732                           ;color.c: 46:  I2C_2_Master_RepStart();
  7733   0032F2  ECE1  F01B         	call	_I2C_2_Master_RepStart	;wreg free
  7734                           
  7735                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  7736   0032F6  0E53               	movlw	83
  7737   0032F8  ECCF  F01B         	call	_I2C_2_Master_Write
  7738                           
  7739                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  7740   0032FC  0E01               	movlw	1
  7741   0032FE  ECA1  F01A         	call	_I2C_2_Master_Read
  7742   003302  6E07               	movwf	??_color_read_Red^0,c
  7743   003304  5007               	movf	??_color_read_Red^0,w,c
  7744   003306  6E0A               	movwf	color_read_Red@tmp^0,c
  7745   003308  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  7746                           
  7747                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7748   00330A  0E00               	movlw	0
  7749   00330C  ECA1  F01A         	call	_I2C_2_Master_Read
  7750   003310  6E07               	movwf	??_color_read_Red^0,c
  7751   003312  5007               	movf	??_color_read_Red^0,w,c
  7752   003314  6E09               	movwf	(??_color_read_Red+2)^0,c
  7753   003316  6A08               	clrf	(??_color_read_Red+1)^0,c
  7754   003318  500A               	movf	color_read_Red@tmp^0,w,c
  7755   00331A  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  7756   00331C  6E0A               	movwf	color_read_Red@tmp^0,c
  7757   00331E  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  7758   003320  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  7759   003322  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  7760                           
  7761                           ;color.c: 50:  I2C_2_Master_Stop();
  7762   003324  ECE6  F01B         	call	_I2C_2_Master_Stop	;wreg free
  7763   003328                     
  7764                           ;color.c: 51:  return tmp;
  7765   003328  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  7766   00332C  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  7767   003330  0012               	return		;funcret
  7768   003332                     __end_of_color_read_Red:
  7769                           	callstack 0
  7770                           
  7771 ;; *************** function _color_read_Green *****************
  7772 ;; Defined at:
  7773 ;;		line 58 in file "color.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;		None
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;  tmp             2    9[COMRAM] unsigned int 
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  2    4[COMRAM] unsigned int 
  7780 ;; Registers used:
  7781 ;;		wreg, status,2, status,0, cstack
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7787 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7789 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7790 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7791 ;;Total ram usage:        7 bytes
  7792 ;; Hardware stack levels used: 1
  7793 ;; Hardware stack levels required when called: 3
  7794 ;; This function calls:
  7795 ;;		_I2C_2_Master_Read
  7796 ;;		_I2C_2_Master_RepStart
  7797 ;;		_I2C_2_Master_Start
  7798 ;;		_I2C_2_Master_Stop
  7799 ;;		_I2C_2_Master_Write
  7800 ;; This function is called by:
  7801 ;;		_getRGBCval
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           	psect	text40
  7806   003332                     __ptext40:
  7807                           	callstack 0
  7808   003332                     _color_read_Green:
  7809                           	callstack 24
  7810   003332                     
  7811                           ;color.c: 60:     unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  7812   003332  ECEB  F01B         	call	_I2C_2_Master_Start	;wreg free
  7813                           
  7814                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  7815   003336  0E52               	movlw	82
  7816   003338  ECCF  F01B         	call	_I2C_2_Master_Write
  7817                           
  7818                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x18);
  7819   00333C  0EB8               	movlw	184
  7820   00333E  ECCF  F01B         	call	_I2C_2_Master_Write
  7821                           
  7822                           ;color.c: 64:  I2C_2_Master_RepStart();
  7823   003342  ECE1  F01B         	call	_I2C_2_Master_RepStart	;wreg free
  7824                           
  7825                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  7826   003346  0E53               	movlw	83
  7827   003348  ECCF  F01B         	call	_I2C_2_Master_Write
  7828                           
  7829                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  7830   00334C  0E01               	movlw	1
  7831   00334E  ECA1  F01A         	call	_I2C_2_Master_Read
  7832   003352  6E07               	movwf	??_color_read_Green^0,c
  7833   003354  5007               	movf	??_color_read_Green^0,w,c
  7834   003356  6E0A               	movwf	color_read_Green@tmp^0,c
  7835   003358  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  7836                           
  7837                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7838   00335A  0E00               	movlw	0
  7839   00335C  ECA1  F01A         	call	_I2C_2_Master_Read
  7840   003360  6E07               	movwf	??_color_read_Green^0,c
  7841   003362  5007               	movf	??_color_read_Green^0,w,c
  7842   003364  6E09               	movwf	(??_color_read_Green+2)^0,c
  7843   003366  6A08               	clrf	(??_color_read_Green+1)^0,c
  7844   003368  500A               	movf	color_read_Green@tmp^0,w,c
  7845   00336A  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  7846   00336C  6E0A               	movwf	color_read_Green@tmp^0,c
  7847   00336E  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  7848   003370  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  7849   003372  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  7850                           
  7851                           ;color.c: 68:  I2C_2_Master_Stop();
  7852   003374  ECE6  F01B         	call	_I2C_2_Master_Stop	;wreg free
  7853   003378                     
  7854                           ;color.c: 69:  return tmp;
  7855   003378  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  7856   00337C  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  7857   003380  0012               	return		;funcret
  7858   003382                     __end_of_color_read_Green:
  7859                           	callstack 0
  7860                           
  7861 ;; *************** function _color_read_Clear *****************
  7862 ;; Defined at:
  7863 ;;		line 94 in file "color.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;		None
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;  tmp             2    9[COMRAM] unsigned int 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  2    4[COMRAM] unsigned int 
  7870 ;; Registers used:
  7871 ;;		wreg, status,2, status,0, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7878 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7879 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7880 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7881 ;;Total ram usage:        7 bytes
  7882 ;; Hardware stack levels used: 1
  7883 ;; Hardware stack levels required when called: 3
  7884 ;; This function calls:
  7885 ;;		_I2C_2_Master_Read
  7886 ;;		_I2C_2_Master_RepStart
  7887 ;;		_I2C_2_Master_Start
  7888 ;;		_I2C_2_Master_Stop
  7889 ;;		_I2C_2_Master_Write
  7890 ;; This function is called by:
  7891 ;;		_getRGBCval
  7892 ;; This function uses a non-reentrant model
  7893 ;;
  7894                           
  7895                           	psect	text41
  7896   003382                     __ptext41:
  7897                           	callstack 0
  7898   003382                     _color_read_Clear:
  7899                           	callstack 24
  7900   003382                     
  7901                           ;color.c: 96:     unsigned int tmp;;color.c: 97:  I2C_2_Master_Start();
  7902   003382  ECEB  F01B         	call	_I2C_2_Master_Start	;wreg free
  7903                           
  7904                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
  7905   003386  0E52               	movlw	82
  7906   003388  ECCF  F01B         	call	_I2C_2_Master_Write
  7907                           
  7908                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  7909   00338C  0EB4               	movlw	180
  7910   00338E  ECCF  F01B         	call	_I2C_2_Master_Write
  7911                           
  7912                           ;color.c: 100:  I2C_2_Master_RepStart();
  7913   003392  ECE1  F01B         	call	_I2C_2_Master_RepStart	;wreg free
  7914                           
  7915                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  7916   003396  0E53               	movlw	83
  7917   003398  ECCF  F01B         	call	_I2C_2_Master_Write
  7918                           
  7919                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  7920   00339C  0E01               	movlw	1
  7921   00339E  ECA1  F01A         	call	_I2C_2_Master_Read
  7922   0033A2  6E07               	movwf	??_color_read_Clear^0,c
  7923   0033A4  5007               	movf	??_color_read_Clear^0,w,c
  7924   0033A6  6E0A               	movwf	color_read_Clear@tmp^0,c
  7925   0033A8  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  7926                           
  7927                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7928   0033AA  0E00               	movlw	0
  7929   0033AC  ECA1  F01A         	call	_I2C_2_Master_Read
  7930   0033B0  6E07               	movwf	??_color_read_Clear^0,c
  7931   0033B2  5007               	movf	??_color_read_Clear^0,w,c
  7932   0033B4  6E09               	movwf	(??_color_read_Clear+2)^0,c
  7933   0033B6  6A08               	clrf	(??_color_read_Clear+1)^0,c
  7934   0033B8  500A               	movf	color_read_Clear@tmp^0,w,c
  7935   0033BA  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  7936   0033BC  6E0A               	movwf	color_read_Clear@tmp^0,c
  7937   0033BE  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  7938   0033C0  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  7939   0033C2  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  7940                           
  7941                           ;color.c: 104:  I2C_2_Master_Stop();
  7942   0033C4  ECE6  F01B         	call	_I2C_2_Master_Stop	;wreg free
  7943   0033C8                     
  7944                           ;color.c: 105:  return tmp;
  7945   0033C8  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  7946   0033CC  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  7947   0033D0  0012               	return		;funcret
  7948   0033D2                     __end_of_color_read_Clear:
  7949                           	callstack 0
  7950                           
  7951 ;; *************** function _color_read_Blue *****************
  7952 ;; Defined at:
  7953 ;;		line 76 in file "color.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;		None
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;  tmp             2    9[COMRAM] unsigned int 
  7958 ;; Return value:  Size  Location     Type
  7959 ;;                  2    4[COMRAM] unsigned int 
  7960 ;; Registers used:
  7961 ;;		wreg, status,2, status,0, cstack
  7962 ;; Tracked objects:
  7963 ;;		On entry : 0/0
  7964 ;;		On exit  : 0/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7968 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7969 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7970 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7971 ;;Total ram usage:        7 bytes
  7972 ;; Hardware stack levels used: 1
  7973 ;; Hardware stack levels required when called: 3
  7974 ;; This function calls:
  7975 ;;		_I2C_2_Master_Read
  7976 ;;		_I2C_2_Master_RepStart
  7977 ;;		_I2C_2_Master_Start
  7978 ;;		_I2C_2_Master_Stop
  7979 ;;		_I2C_2_Master_Write
  7980 ;; This function is called by:
  7981 ;;		_getRGBCval
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           	psect	text42
  7986   0033D2                     __ptext42:
  7987                           	callstack 0
  7988   0033D2                     _color_read_Blue:
  7989                           	callstack 24
  7990   0033D2                     
  7991                           ;color.c: 78:     unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  7992   0033D2  ECEB  F01B         	call	_I2C_2_Master_Start	;wreg free
  7993                           
  7994                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  7995   0033D6  0E52               	movlw	82
  7996   0033D8  ECCF  F01B         	call	_I2C_2_Master_Write
  7997                           
  7998                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x1A);
  7999   0033DC  0EBA               	movlw	186
  8000   0033DE  ECCF  F01B         	call	_I2C_2_Master_Write
  8001                           
  8002                           ;color.c: 82:  I2C_2_Master_RepStart();
  8003   0033E2  ECE1  F01B         	call	_I2C_2_Master_RepStart	;wreg free
  8004                           
  8005                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  8006   0033E6  0E53               	movlw	83
  8007   0033E8  ECCF  F01B         	call	_I2C_2_Master_Write
  8008                           
  8009                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  8010   0033EC  0E01               	movlw	1
  8011   0033EE  ECA1  F01A         	call	_I2C_2_Master_Read
  8012   0033F2  6E07               	movwf	??_color_read_Blue^0,c
  8013   0033F4  5007               	movf	??_color_read_Blue^0,w,c
  8014   0033F6  6E0A               	movwf	color_read_Blue@tmp^0,c
  8015   0033F8  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  8016                           
  8017                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8018   0033FA  0E00               	movlw	0
  8019   0033FC  ECA1  F01A         	call	_I2C_2_Master_Read
  8020   003400  6E07               	movwf	??_color_read_Blue^0,c
  8021   003402  5007               	movf	??_color_read_Blue^0,w,c
  8022   003404  6E09               	movwf	(??_color_read_Blue+2)^0,c
  8023   003406  6A08               	clrf	(??_color_read_Blue+1)^0,c
  8024   003408  500A               	movf	color_read_Blue@tmp^0,w,c
  8025   00340A  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  8026   00340C  6E0A               	movwf	color_read_Blue@tmp^0,c
  8027   00340E  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  8028   003410  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  8029   003412  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  8030                           
  8031                           ;color.c: 86:  I2C_2_Master_Stop();
  8032   003414  ECE6  F01B         	call	_I2C_2_Master_Stop	;wreg free
  8033   003418                     
  8034                           ;color.c: 87:  return tmp;
  8035   003418  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  8036   00341C  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8037   003420  0012               	return		;funcret
  8038   003422                     __end_of_color_read_Blue:
  8039                           	callstack 0
  8040                           
  8041 ;; *************** function _I2C_2_Master_RepStart *****************
  8042 ;; Defined at:
  8043 ;;		line 33 in file "i2c.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;		None
  8046 ;; Auto vars:     Size  Location     Type
  8047 ;;		None
  8048 ;; Return value:  Size  Location     Type
  8049 ;;                  1    wreg      void 
  8050 ;; Registers used:
  8051 ;;		wreg, status,2, status,0, cstack
  8052 ;; Tracked objects:
  8053 ;;		On entry : 0/0
  8054 ;;		On exit  : 0/0
  8055 ;;		Unchanged: 0/0
  8056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8061 ;;Total ram usage:        0 bytes
  8062 ;; Hardware stack levels used: 1
  8063 ;; Hardware stack levels required when called: 2
  8064 ;; This function calls:
  8065 ;;		_I2C_2_Master_Idle
  8066 ;; This function is called by:
  8067 ;;		_color_read_Red
  8068 ;;		_color_read_Green
  8069 ;;		_color_read_Blue
  8070 ;;		_color_read_Clear
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           	psect	text43
  8075   0037C2                     __ptext43:
  8076                           	callstack 0
  8077   0037C2                     _I2C_2_Master_RepStart:
  8078                           	callstack 24
  8079   0037C2                     
  8080                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8081   0037C2  EC3F  F01B         	call	_I2C_2_Master_Idle	;wreg free
  8082   0037C6                     
  8083                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8084   0037C6  010E               	movlb	14	; () banked
  8085   0037C8  83DA               	bsf	218,1,b	;volatile
  8086   0037CA                     
  8087                           ; BSR set to: 14
  8088   0037CA  0012               	return		;funcret
  8089   0037CC                     __end_of_I2C_2_Master_RepStart:
  8090                           	callstack 0
  8091                           
  8092 ;; *************** function _I2C_2_Master_Read *****************
  8093 ;; Defined at:
  8094 ;;		line 51 in file "i2c.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;  ack             1    wreg     unsigned char 
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;  ack             1    2[COMRAM] unsigned char 
  8099 ;;  tmp             1    3[COMRAM] unsigned char 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      unsigned char 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8112 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8113 ;;Total ram usage:        3 bytes
  8114 ;; Hardware stack levels used: 1
  8115 ;; Hardware stack levels required when called: 2
  8116 ;; This function calls:
  8117 ;;		_I2C_2_Master_Idle
  8118 ;; This function is called by:
  8119 ;;		_color_read_Red
  8120 ;;		_color_read_Green
  8121 ;;		_color_read_Blue
  8122 ;;		_color_read_Clear
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text44
  8127   003542                     __ptext44:
  8128                           	callstack 0
  8129   003542                     _I2C_2_Master_Read:
  8130                           	callstack 24
  8131                           
  8132                           ; BSR set to: 14
  8133                           ;incstack = 0
  8134                           ;I2C_2_Master_Read@ack stored from wreg
  8135   003542  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  8136   003544                     
  8137                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  8138   003544  EC3F  F01B         	call	_I2C_2_Master_Idle	;wreg free
  8139   003548                     
  8140                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  8141   003548  010E               	movlb	14	; () banked
  8142   00354A  87DA               	bsf	218,3,b	;volatile
  8143                           
  8144                           ;i2c.c: 56:   I2C_2_Master_Idle();
  8145   00354C  EC3F  F01B         	call	_I2C_2_Master_Idle	;wreg free
  8146   003550                     
  8147                           ;i2c.c: 57:   tmp = SSP2BUF;
  8148   003550  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  8149                           
  8150                           ;i2c.c: 58:   I2C_2_Master_Idle();
  8151   003554  EC3F  F01B         	call	_I2C_2_Master_Idle	;wreg free
  8152   003558                     
  8153                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  8154   003558  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  8155   00355A  B4D8               	btfsc	status,2,c
  8156   00355C  EFB2  F01A         	goto	u2211
  8157   003560  EFB6  F01A         	goto	u2210
  8158   003564                     u2211:
  8159   003564  6A02               	clrf	??_I2C_2_Master_Read^0,c
  8160   003566  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  8161   003568  EFB7  F01A         	goto	u2228
  8162   00356C                     u2210:
  8163   00356C  6A02               	clrf	??_I2C_2_Master_Read^0,c
  8164   00356E                     u2228:
  8165   00356E  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  8166   003570  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  8167   003572  010E               	movlb	14	; () banked
  8168   003574  51DA               	movf	218,w,b	;volatile
  8169   003576  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  8170   003578  0BDF               	andlw	-33
  8171   00357A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  8172   00357C  6FDA               	movwf	218,b	;volatile
  8173   00357E                     
  8174                           ; BSR set to: 14
  8175                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  8176   00357E  89DA               	bsf	218,4,b	;volatile
  8177   003580                     
  8178                           ; BSR set to: 14
  8179                           ;i2c.c: 61:   return tmp;
  8180   003580  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  8181   003582                     
  8182                           ; BSR set to: 14
  8183   003582  0012               	return		;funcret
  8184   003584                     __end_of_I2C_2_Master_Read:
  8185                           	callstack 0
  8186                           
  8187 ;; *************** function ___lldiv *****************
  8188 ;; Defined at:
  8189 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;  dividend        4    0[COMRAM] unsigned long 
  8192 ;;  divisor         4    4[COMRAM] unsigned long 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  quotient        4    8[COMRAM] unsigned long 
  8195 ;;  counter         1   12[COMRAM] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  4    0[COMRAM] unsigned long 
  8198 ;; Registers used:
  8199 ;;		wreg, status,2, status,0
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8205 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8206 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8208 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8209 ;;Total ram usage:       13 bytes
  8210 ;; Hardware stack levels used: 1
  8211 ;; Hardware stack levels required when called: 1
  8212 ;; This function calls:
  8213 ;;		Nothing
  8214 ;; This function is called by:
  8215 ;;		_average_RGBC
  8216 ;;		_convert_HSV
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           	psect	text45
  8221   002D04                     __ptext45:
  8222                           	callstack 0
  8223   002D04                     ___lldiv:
  8224                           	callstack 27
  8225   002D04  0E00               	movlw	0
  8226   002D06  6E09               	movwf	___lldiv@quotient^0,c
  8227   002D08  0E00               	movlw	0
  8228   002D0A  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  8229   002D0C  0E00               	movlw	0
  8230   002D0E  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  8231   002D10  0E00               	movlw	0
  8232   002D12  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  8233   002D14  5005               	movf	___lldiv@divisor^0,w,c
  8234   002D16  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  8235   002D18  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  8236   002D1A  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  8237   002D1C  B4D8               	btfsc	status,2,c
  8238   002D1E  EF93  F016         	goto	u2621
  8239   002D22  EF95  F016         	goto	u2620
  8240   002D26                     u2621:
  8241   002D26  EFCB  F016         	goto	l790
  8242   002D2A                     u2620:
  8243   002D2A  0E01               	movlw	1
  8244   002D2C  6E0D               	movwf	___lldiv@counter^0,c
  8245   002D2E  EF9F  F016         	goto	l3504
  8246   002D32                     l3502:
  8247   002D32  90D8               	bcf	status,0,c
  8248   002D34  3605               	rlcf	___lldiv@divisor^0,f,c
  8249   002D36  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  8250   002D38  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  8251   002D3A  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  8252   002D3C  2A0D               	incf	___lldiv@counter^0,f,c
  8253   002D3E                     l3504:
  8254   002D3E  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  8255   002D40  EFA4  F016         	goto	u2631
  8256   002D44  EFA6  F016         	goto	u2630
  8257   002D48                     u2631:
  8258   002D48  EF99  F016         	goto	l3502
  8259   002D4C                     u2630:
  8260   002D4C                     l3506:
  8261   002D4C  90D8               	bcf	status,0,c
  8262   002D4E  3609               	rlcf	___lldiv@quotient^0,f,c
  8263   002D50  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  8264   002D52  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  8265   002D54  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  8266   002D56  5005               	movf	___lldiv@divisor^0,w,c
  8267   002D58  5C01               	subwf	___lldiv@dividend^0,w,c
  8268   002D5A  5006               	movf	(___lldiv@divisor+1)^0,w,c
  8269   002D5C  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  8270   002D5E  5007               	movf	(___lldiv@divisor+2)^0,w,c
  8271   002D60  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  8272   002D62  5008               	movf	(___lldiv@divisor+3)^0,w,c
  8273   002D64  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  8274   002D66  A0D8               	btfss	status,0,c
  8275   002D68  EFB8  F016         	goto	u2641
  8276   002D6C  EFBA  F016         	goto	u2640
  8277   002D70                     u2641:
  8278   002D70  EFC3  F016         	goto	l3514
  8279   002D74                     u2640:
  8280   002D74  5005               	movf	___lldiv@divisor^0,w,c
  8281   002D76  5E01               	subwf	___lldiv@dividend^0,f,c
  8282   002D78  5006               	movf	(___lldiv@divisor+1)^0,w,c
  8283   002D7A  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  8284   002D7C  5007               	movf	(___lldiv@divisor+2)^0,w,c
  8285   002D7E  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  8286   002D80  5008               	movf	(___lldiv@divisor+3)^0,w,c
  8287   002D82  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  8288   002D84  8009               	bsf	___lldiv@quotient^0,0,c
  8289   002D86                     l3514:
  8290   002D86  90D8               	bcf	status,0,c
  8291   002D88  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  8292   002D8A  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  8293   002D8C  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  8294   002D8E  3205               	rrcf	___lldiv@divisor^0,f,c
  8295   002D90  2E0D               	decfsz	___lldiv@counter^0,f,c
  8296   002D92  EFA6  F016         	goto	l3506
  8297   002D96                     l790:
  8298   002D96  C009  F001         	movff	___lldiv@quotient,?___lldiv
  8299   002D9A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  8300   002D9E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  8301   002DA2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  8302   002DA6  0012               	return		;funcret
  8303   002DA8                     __end_of___lldiv:
  8304                           	callstack 0
  8305                           
  8306 ;; *************** function _color_click_init *****************
  8307 ;; Defined at:
  8308 ;;		line 7 in file "color.c"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;		None
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;		None
  8313 ;; Return value:  Size  Location     Type
  8314 ;;                  1    wreg      void 
  8315 ;; Registers used:
  8316 ;;		wreg, status,2, status,0, cstack
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8324 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8325 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8326 ;;Total ram usage:        1 bytes
  8327 ;; Hardware stack levels used: 1
  8328 ;; Hardware stack levels required when called: 4
  8329 ;; This function calls:
  8330 ;;		_I2C_2_Master_Init
  8331 ;;		_color_writetoaddr
  8332 ;; This function is called by:
  8333 ;;		_main
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text46
  8338   0035F2                     __ptext46:
  8339                           	callstack 0
  8340   0035F2                     _color_click_init:
  8341                           	callstack 26
  8342   0035F2                     
  8343                           ;color.c: 10:     I2C_2_Master_Init();
  8344   0035F2  EC2A  F01B         	call	_I2C_2_Master_Init	;wreg free
  8345   0035F6                     
  8346                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  8347   0035F6  0E01               	movlw	1
  8348   0035F8  6E03               	movwf	color_writetoaddr@value^0,c
  8349   0035FA  0E00               	movlw	0
  8350   0035FC  EC8B  F01B         	call	_color_writetoaddr
  8351   003600                     
  8352                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  8353   003600  0E3F               	movlw	63
  8354   003602  6E05               	movwf	??_color_click_init^0,c
  8355   003604  0E55               	movlw	85
  8356   003606                     u3957:
  8357   003606  2EE8               	decfsz	wreg,f,c
  8358   003608  D7FE               	bra	u3957
  8359   00360A  2E05               	decfsz	??_color_click_init^0,f,c
  8360   00360C  D7FC               	bra	u3957
  8361   00360E  0000               	nop	
  8362   003610                     
  8363                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  8364   003610  0E03               	movlw	3
  8365   003612  6E03               	movwf	color_writetoaddr@value^0,c
  8366   003614  0E00               	movlw	0
  8367   003616  EC8B  F01B         	call	_color_writetoaddr
  8368   00361A                     
  8369                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  8370   00361A  0ED5               	movlw	213
  8371   00361C  6E03               	movwf	color_writetoaddr@value^0,c
  8372   00361E  0E01               	movlw	1
  8373   003620  EC8B  F01B         	call	_color_writetoaddr
  8374   003624  0012               	return		;funcret
  8375   003626                     __end_of_color_click_init:
  8376                           	callstack 0
  8377                           
  8378 ;; *************** function _color_writetoaddr *****************
  8379 ;; Defined at:
  8380 ;;		line 28 in file "color.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;  address         1    wreg     unsigned char 
  8383 ;;  value           1    2[COMRAM] unsigned char 
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  address         1    3[COMRAM] unsigned char 
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		wreg, status,2, status,0, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8395 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8398 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8399 ;;Total ram usage:        2 bytes
  8400 ;; Hardware stack levels used: 1
  8401 ;; Hardware stack levels required when called: 3
  8402 ;; This function calls:
  8403 ;;		_I2C_2_Master_Start
  8404 ;;		_I2C_2_Master_Stop
  8405 ;;		_I2C_2_Master_Write
  8406 ;; This function is called by:
  8407 ;;		_color_click_init
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           	psect	text47
  8412   003716                     __ptext47:
  8413                           	callstack 0
  8414   003716                     _color_writetoaddr:
  8415                           	callstack 26
  8416                           
  8417                           ;incstack = 0
  8418                           ;color_writetoaddr@address stored from wreg
  8419   003716  6E04               	movwf	color_writetoaddr@address^0,c
  8420   003718                     
  8421                           ;color.c: 29:     I2C_2_Master_Start();
  8422   003718  ECEB  F01B         	call	_I2C_2_Master_Start	;wreg free
  8423                           
  8424                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  8425   00371C  0E52               	movlw	82
  8426   00371E  ECCF  F01B         	call	_I2C_2_Master_Write
  8427                           
  8428                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  8429   003722  5004               	movf	color_writetoaddr@address^0,w,c
  8430   003724  0980               	iorlw	128
  8431   003726  ECCF  F01B         	call	_I2C_2_Master_Write
  8432                           
  8433                           ;color.c: 32:     I2C_2_Master_Write(value);
  8434   00372A  5003               	movf	color_writetoaddr@value^0,w,c
  8435   00372C  ECCF  F01B         	call	_I2C_2_Master_Write
  8436                           
  8437                           ;color.c: 33:     I2C_2_Master_Stop();
  8438   003730  ECE6  F01B         	call	_I2C_2_Master_Stop	;wreg free
  8439   003734  0012               	return		;funcret
  8440   003736                     __end_of_color_writetoaddr:
  8441                           	callstack 0
  8442                           
  8443 ;; *************** function _I2C_2_Master_Write *****************
  8444 ;; Defined at:
  8445 ;;		line 45 in file "i2c.c"
  8446 ;; Parameters:    Size  Location     Type
  8447 ;;  data_byte       1    wreg     unsigned char 
  8448 ;; Auto vars:     Size  Location     Type
  8449 ;;  data_byte       1    1[COMRAM] unsigned char 
  8450 ;; Return value:  Size  Location     Type
  8451 ;;                  1    wreg      void 
  8452 ;; Registers used:
  8453 ;;		wreg, status,2, status,0, cstack
  8454 ;; Tracked objects:
  8455 ;;		On entry : 0/0
  8456 ;;		On exit  : 0/0
  8457 ;;		Unchanged: 0/0
  8458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8462 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8463 ;;Total ram usage:        1 bytes
  8464 ;; Hardware stack levels used: 1
  8465 ;; Hardware stack levels required when called: 2
  8466 ;; This function calls:
  8467 ;;		_I2C_2_Master_Idle
  8468 ;; This function is called by:
  8469 ;;		_color_writetoaddr
  8470 ;;		_color_read_Red
  8471 ;;		_color_read_Green
  8472 ;;		_color_read_Blue
  8473 ;;		_color_read_Clear
  8474 ;; This function uses a non-reentrant model
  8475 ;;
  8476                           
  8477                           	psect	text48
  8478   00379E                     __ptext48:
  8479                           	callstack 0
  8480   00379E                     _I2C_2_Master_Write:
  8481                           	callstack 24
  8482                           
  8483                           ;incstack = 0
  8484                           ;I2C_2_Master_Write@data_byte stored from wreg
  8485   00379E  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  8486   0037A0                     
  8487                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8488   0037A0  EC3F  F01B         	call	_I2C_2_Master_Idle	;wreg free
  8489   0037A4                     
  8490                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8491   0037A4  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8492   0037A8  0012               	return		;funcret
  8493   0037AA                     __end_of_I2C_2_Master_Write:
  8494                           	callstack 0
  8495                           
  8496 ;; *************** function _I2C_2_Master_Stop *****************
  8497 ;; Defined at:
  8498 ;;		line 39 in file "i2c.c"
  8499 ;; Parameters:    Size  Location     Type
  8500 ;;		None
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;		None
  8503 ;; Return value:  Size  Location     Type
  8504 ;;                  1    wreg      void 
  8505 ;; Registers used:
  8506 ;;		wreg, status,2, status,0, cstack
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8516 ;;Total ram usage:        0 bytes
  8517 ;; Hardware stack levels used: 1
  8518 ;; Hardware stack levels required when called: 2
  8519 ;; This function calls:
  8520 ;;		_I2C_2_Master_Idle
  8521 ;; This function is called by:
  8522 ;;		_color_writetoaddr
  8523 ;;		_color_read_Red
  8524 ;;		_color_read_Green
  8525 ;;		_color_read_Blue
  8526 ;;		_color_read_Clear
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text49
  8531   0037CC                     __ptext49:
  8532                           	callstack 0
  8533   0037CC                     _I2C_2_Master_Stop:
  8534                           	callstack 24
  8535   0037CC                     
  8536                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8537   0037CC  EC3F  F01B         	call	_I2C_2_Master_Idle	;wreg free
  8538   0037D0                     
  8539                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8540   0037D0  010E               	movlb	14	; () banked
  8541   0037D2  85DA               	bsf	218,2,b	;volatile
  8542   0037D4                     
  8543                           ; BSR set to: 14
  8544   0037D4  0012               	return		;funcret
  8545   0037D6                     __end_of_I2C_2_Master_Stop:
  8546                           	callstack 0
  8547                           
  8548 ;; *************** function _I2C_2_Master_Start *****************
  8549 ;; Defined at:
  8550 ;;		line 27 in file "i2c.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;		None
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;		None
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  1    wreg      void 
  8557 ;; Registers used:
  8558 ;;		wreg, status,2, status,0, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8568 ;;Total ram usage:        0 bytes
  8569 ;; Hardware stack levels used: 1
  8570 ;; Hardware stack levels required when called: 2
  8571 ;; This function calls:
  8572 ;;		_I2C_2_Master_Idle
  8573 ;; This function is called by:
  8574 ;;		_color_writetoaddr
  8575 ;;		_color_read_Red
  8576 ;;		_color_read_Green
  8577 ;;		_color_read_Blue
  8578 ;;		_color_read_Clear
  8579 ;; This function uses a non-reentrant model
  8580 ;;
  8581                           
  8582                           	psect	text50
  8583   0037D6                     __ptext50:
  8584                           	callstack 0
  8585   0037D6                     _I2C_2_Master_Start:
  8586                           	callstack 24
  8587   0037D6                     
  8588                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8589   0037D6  EC3F  F01B         	call	_I2C_2_Master_Idle	;wreg free
  8590   0037DA                     
  8591                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8592   0037DA  010E               	movlb	14	; () banked
  8593   0037DC  81DA               	bsf	218,0,b	;volatile
  8594   0037DE                     
  8595                           ; BSR set to: 14
  8596   0037DE  0012               	return		;funcret
  8597   0037E0                     __end_of_I2C_2_Master_Start:
  8598                           	callstack 0
  8599                           
  8600 ;; *************** function _I2C_2_Master_Idle *****************
  8601 ;; Defined at:
  8602 ;;		line 22 in file "i2c.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;		None
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;		None
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  1    wreg      void 
  8609 ;; Registers used:
  8610 ;;		wreg, status,2, status,0
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8620 ;;Total ram usage:        1 bytes
  8621 ;; Hardware stack levels used: 1
  8622 ;; Hardware stack levels required when called: 1
  8623 ;; This function calls:
  8624 ;;		Nothing
  8625 ;; This function is called by:
  8626 ;;		_I2C_2_Master_Start
  8627 ;;		_I2C_2_Master_RepStart
  8628 ;;		_I2C_2_Master_Stop
  8629 ;;		_I2C_2_Master_Write
  8630 ;;		_I2C_2_Master_Read
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text51
  8635   00367E                     __ptext51:
  8636                           	callstack 0
  8637   00367E                     _I2C_2_Master_Idle:
  8638                           	callstack 24
  8639   00367E                     l308:
  8640   00367E  010E               	movlb	14	; () banked
  8641   003680  B5D8               	btfsc	216,2,b	;volatile
  8642   003682  EF45  F01B         	goto	u1961
  8643   003686  EF47  F01B         	goto	u1960
  8644   00368A                     u1961:
  8645   00368A  EF3F  F01B         	goto	l308
  8646   00368E                     u1960:
  8647   00368E                     
  8648                           ; BSR set to: 14
  8649   00368E  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  8650   003692  0E1F               	movlw	31
  8651   003694  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  8652   003696  A4D8               	btfss	status,2,c
  8653   003698  EF50  F01B         	goto	u1971
  8654   00369C  EF52  F01B         	goto	u1970
  8655   0036A0                     u1971:
  8656   0036A0  EF3F  F01B         	goto	l308
  8657   0036A4                     u1970:
  8658   0036A4                     
  8659                           ; BSR set to: 14
  8660   0036A4  0012               	return		;funcret
  8661   0036A6                     __end_of_I2C_2_Master_Idle:
  8662                           	callstack 0
  8663                           
  8664 ;; *************** function _I2C_2_Master_Init *****************
  8665 ;; Defined at:
  8666 ;;		line 4 in file "i2c.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;		None
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;		None
  8671 ;; Return value:  Size  Location     Type
  8672 ;;                  1    wreg      void 
  8673 ;; Registers used:
  8674 ;;		wreg, status,2
  8675 ;; Tracked objects:
  8676 ;;		On entry : 0/0
  8677 ;;		On exit  : 0/0
  8678 ;;		Unchanged: 0/0
  8679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8684 ;;Total ram usage:        0 bytes
  8685 ;; Hardware stack levels used: 1
  8686 ;; Hardware stack levels required when called: 1
  8687 ;; This function calls:
  8688 ;;		Nothing
  8689 ;; This function is called by:
  8690 ;;		_color_click_init
  8691 ;; This function uses a non-reentrant model
  8692 ;;
  8693                           
  8694                           	psect	text52
  8695   003654                     __ptext52:
  8696                           	callstack 0
  8697   003654                     _I2C_2_Master_Init:
  8698                           	callstack 28
  8699   003654                     
  8700                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  8701   003654  010E               	movlb	14	; () banked
  8702   003656  51D9               	movf	217,w,b	;volatile
  8703   003658  0BF0               	andlw	-16
  8704   00365A  0908               	iorlw	8
  8705   00365C  6FD9               	movwf	217,b	;volatile
  8706   00365E                     
  8707                           ; BSR set to: 14
  8708                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  8709   00365E  8BD9               	bsf	217,5,b	;volatile
  8710                           
  8711                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  8712   003660  0E9F               	movlw	159
  8713   003662  6FD6               	movwf	214,b	;volatile
  8714   003664                     
  8715                           ; BSR set to: 14
  8716                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  8717   003664  8A84               	bsf	132,5,c	;volatile
  8718   003666                     
  8719                           ; BSR set to: 14
  8720                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  8721   003666  8C84               	bsf	132,6,c	;volatile
  8722   003668                     
  8723                           ; BSR set to: 14
  8724                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  8725   003668  9BA7               	bcf	167,5,b	;volatile
  8726   00366A                     
  8727                           ; BSR set to: 14
  8728                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  8729   00366A  9DA7               	bcf	167,6,b	;volatile
  8730                           
  8731                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  8732   00366C  0E1D               	movlw	29
  8733   00366E  6F1D               	movwf	29,b	;volatile
  8734                           
  8735                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  8736   003670  0E1E               	movlw	30
  8737   003672  6F1C               	movwf	28,b	;volatile
  8738                           
  8739                           ;i2c.c: 18:   RD5PPS=0x1C;
  8740   003674  0E1C               	movlw	28
  8741   003676  6F6F               	movwf	111,b	;volatile
  8742                           
  8743                           ;i2c.c: 19:   RD6PPS=0x1B;
  8744   003678  0E1B               	movlw	27
  8745   00367A  6F70               	movwf	112,b	;volatile
  8746   00367C                     
  8747                           ; BSR set to: 14
  8748   00367C  0012               	return		;funcret
  8749   00367E                     __end_of_I2C_2_Master_Init:
  8750                           	callstack 0
  8751                           
  8752 ;; *************** function _buggy_lights_init *****************
  8753 ;; Defined at:
  8754 ;;		line 7 in file "buggy_lights.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;		None
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;		None
  8759 ;; Return value:  Size  Location     Type
  8760 ;;                  1    wreg      void 
  8761 ;; Registers used:
  8762 ;;		None
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8772 ;;Total ram usage:        0 bytes
  8773 ;; Hardware stack levels used: 1
  8774 ;; Hardware stack levels required when called: 1
  8775 ;; This function calls:
  8776 ;;		Nothing
  8777 ;; This function is called by:
  8778 ;;		_main
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text53
  8783   003626                     __ptext53:
  8784                           	callstack 0
  8785   003626                     _buggy_lights_init:
  8786                           	callstack 29
  8787   003626                     
  8788                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
  8789   003626  9884               	bcf	132,4,c	;volatile
  8790                           
  8791                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
  8792   003628  9288               	bcf	136,1,c	;volatile
  8793                           
  8794                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
  8795   00362A  9684               	bcf	132,3,c	;volatile
  8796                           
  8797                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
  8798   00362C  9086               	bcf	134,0,c	;volatile
  8799                           
  8800                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
  8801   00362E  9088               	bcf	136,0,c	;volatile
  8802                           
  8803                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
  8804   003630  987C               	bcf	124,4,c	;volatile
  8805                           
  8806                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
  8807   003632  9280               	bcf	128,1,c	;volatile
  8808                           
  8809                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
  8810   003634  967C               	bcf	124,3,c	;volatile
  8811                           
  8812                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
  8813   003636  907E               	bcf	126,0,c	;volatile
  8814                           
  8815                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
  8816   003638  9080               	bcf	128,0,c	;volatile
  8817                           
  8818                           ;buggy_lights.c: 26:             TRISGbits.TRISG1 = 0;
  8819   00363A  9287               	bcf	135,1,c	;volatile
  8820                           
  8821                           ;buggy_lights.c: 27:             TRISAbits.TRISA4 = 0;
  8822   00363C  9881               	bcf	129,4,c	;volatile
  8823                           
  8824                           ;buggy_lights.c: 28:             TRISFbits.TRISF7 = 0;
  8825   00363E  9E86               	bcf	134,7,c	;volatile
  8826                           
  8827                           ;buggy_lights.c: 30:             LATGbits.LATG1 = 0;
  8828   003640  927F               	bcf	127,1,c	;volatile
  8829                           
  8830                           ;buggy_lights.c: 31:             LATAbits.LATA4 = 0;
  8831   003642  9879               	bcf	121,4,c	;volatile
  8832                           
  8833                           ;buggy_lights.c: 32:             LATFbits.LATF7 = 0;
  8834   003644  9E7E               	bcf	126,7,c	;volatile
  8835                           
  8836                           ;buggy_lights.c: 36:             TRISGbits.TRISG0 = 0;
  8837   003646  9087               	bcf	135,0,c	;volatile
  8838                           
  8839                           ;buggy_lights.c: 37:             TRISEbits.TRISE7 = 0;
  8840   003648  9E85               	bcf	133,7,c	;volatile
  8841                           
  8842                           ;buggy_lights.c: 38:             TRISAbits.TRISA3 = 0;
  8843   00364A  9681               	bcf	129,3,c	;volatile
  8844                           
  8845                           ;buggy_lights.c: 40:             LATGbits.LATG0 = 0;
  8846   00364C  907F               	bcf	127,0,c	;volatile
  8847                           
  8848                           ;buggy_lights.c: 41:             LATEbits.LATE7 = 0;
  8849   00364E  9E7D               	bcf	125,7,c	;volatile
  8850                           
  8851                           ;buggy_lights.c: 42:             LATAbits.LATA3 = 0;
  8852   003650  9679               	bcf	121,3,c	;volatile
  8853   003652  0012               	return		;funcret
  8854   003654                     __end_of_buggy_lights_init:
  8855                           	callstack 0
  8856                           
  8857 ;; *************** function _Timer0_init *****************
  8858 ;; Defined at:
  8859 ;;		line 7 in file "timers.c"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;		None
  8862 ;; Auto vars:     Size  Location     Type
  8863 ;;		None
  8864 ;; Return value:  Size  Location     Type
  8865 ;;                  1    wreg      void 
  8866 ;; Registers used:
  8867 ;;		wreg, status,2, cstack
  8868 ;; Tracked objects:
  8869 ;;		On entry : 0/0
  8870 ;;		On exit  : 0/0
  8871 ;;		Unchanged: 0/0
  8872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8877 ;;Total ram usage:        0 bytes
  8878 ;; Hardware stack levels used: 1
  8879 ;; Hardware stack levels required when called: 3
  8880 ;; This function calls:
  8881 ;;		_reset_timer
  8882 ;;		_start_timer
  8883 ;; This function is called by:
  8884 ;;		_main
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           	psect	text54
  8889   0036A6                     __ptext54:
  8890                           	callstack 0
  8891   0036A6                     _Timer0_init:
  8892                           	callstack 27
  8893   0036A6                     
  8894                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  8895   0036A6  50D6               	movf	214,w,c	;volatile
  8896   0036A8  0B1F               	andlw	-225
  8897   0036AA  0940               	iorlw	64
  8898   0036AC  6ED6               	movwf	214,c	;volatile
  8899   0036AE                     
  8900                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  8901   0036AE  88D6               	bsf	214,4,c	;volatile
  8902   0036B0                     
  8903                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  8904   0036B0  88D5               	bsf	213,4,c	;volatile
  8905                           
  8906                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  8907   0036B2  50D6               	movf	214,w,c	;volatile
  8908   0036B4  0BF0               	andlw	-16
  8909   0036B6  090E               	iorlw	14
  8910   0036B8  6ED6               	movwf	214,c	;volatile
  8911   0036BA                     
  8912                           ;timers.c: 18:     reset_timer();
  8913   0036BA  ECD5  F01B         	call	_reset_timer	;wreg free
  8914   0036BE                     
  8915                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  8916   0036BE  8ED5               	bsf	213,7,c	;volatile
  8917                           
  8918                           ;timers.c: 21:     start_timer();
  8919   0036C0  ECF2  F01B         	call	_start_timer	;wreg free
  8920   0036C4                     
  8921                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
  8922   0036C4  010E               	movlb	14	; () banked
  8923   0036C6  8B29               	bsf	41,5,b	;volatile
  8924   0036C8                     
  8925                           ; BSR set to: 14
  8926                           ;timers.c: 23:     INTCONbits.PEIE = 1;
  8927   0036C8  8CF2               	bsf	242,6,c	;volatile
  8928   0036CA                     
  8929                           ; BSR set to: 14
  8930                           ;timers.c: 24:     INTCONbits.GIE = 1;
  8931   0036CA  8EF2               	bsf	242,7,c	;volatile
  8932   0036CC                     
  8933                           ; BSR set to: 14
  8934   0036CC  0012               	return		;funcret
  8935   0036CE                     __end_of_Timer0_init:
  8936                           	callstack 0
  8937                           
  8938 ;; *************** function _start_timer *****************
  8939 ;; Defined at:
  8940 ;;		line 30 in file "timers.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;		None
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;		None
  8945 ;; Return value:  Size  Location     Type
  8946 ;;                  1    wreg      void 
  8947 ;; Registers used:
  8948 ;;		None
  8949 ;; Tracked objects:
  8950 ;;		On entry : 0/0
  8951 ;;		On exit  : 0/0
  8952 ;;		Unchanged: 0/0
  8953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8958 ;;Total ram usage:        0 bytes
  8959 ;; Hardware stack levels used: 1
  8960 ;; Hardware stack levels required when called: 1
  8961 ;; This function calls:
  8962 ;;		Nothing
  8963 ;; This function is called by:
  8964 ;;		_Timer0_init
  8965 ;;		_forward_navigation
  8966 ;;		_return_to_sender
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           	psect	text55
  8971   0037E4                     __ptext55:
  8972                           	callstack 0
  8973   0037E4                     _start_timer:
  8974                           	callstack 28
  8975   0037E4                     
  8976                           ;timers.c: 32:     T0CON0bits.T0EN=1;
  8977   0037E4  8ED5               	bsf	213,7,c	;volatile
  8978   0037E6  0012               	return		;funcret
  8979   0037E8                     __end_of_start_timer:
  8980                           	callstack 0
  8981                           
  8982 ;; *************** function _reset_timer *****************
  8983 ;; Defined at:
  8984 ;;		line 70 in file "timers.c"
  8985 ;; Parameters:    Size  Location     Type
  8986 ;;		None
  8987 ;; Auto vars:     Size  Location     Type
  8988 ;;		None
  8989 ;; Return value:  Size  Location     Type
  8990 ;;                  1    wreg      void 
  8991 ;; Registers used:
  8992 ;;		wreg, status,2, cstack
  8993 ;; Tracked objects:
  8994 ;;		On entry : 0/0
  8995 ;;		On exit  : 0/0
  8996 ;;		Unchanged: 0/0
  8997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9002 ;;Total ram usage:        0 bytes
  9003 ;; Hardware stack levels used: 1
  9004 ;; Hardware stack levels required when called: 2
  9005 ;; This function calls:
  9006 ;;		_write_timer
  9007 ;; This function is called by:
  9008 ;;		_Timer0_init
  9009 ;;		_forward_navigation
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           	psect	text56
  9014   0037AA                     __ptext56:
  9015                           	callstack 0
  9016   0037AA                     _reset_timer:
  9017                           	callstack 27
  9018   0037AA                     
  9019                           ;timers.c: 72:     write_timer(0, 0);
  9020   0037AA  0E00               	movlw	0
  9021   0037AC  6E01               	movwf	write_timer@tL^0,c
  9022   0037AE  0E00               	movlw	0
  9023   0037B0  ECDB  F01B         	call	_write_timer
  9024   0037B4  0012               	return		;funcret
  9025   0037B6                     __end_of_reset_timer:
  9026                           	callstack 0
  9027                           
  9028 ;; *************** function _write_timer *****************
  9029 ;; Defined at:
  9030 ;;		line 58 in file "timers.c"
  9031 ;; Parameters:    Size  Location     Type
  9032 ;;  tH              1    wreg     unsigned char 
  9033 ;;  tL              1    0[COMRAM] unsigned char 
  9034 ;; Auto vars:     Size  Location     Type
  9035 ;;  tH              1    1[COMRAM] unsigned char 
  9036 ;; Return value:  Size  Location     Type
  9037 ;;                  1    wreg      void 
  9038 ;; Registers used:
  9039 ;;		wreg
  9040 ;; Tracked objects:
  9041 ;;		On entry : 0/0
  9042 ;;		On exit  : 0/0
  9043 ;;		Unchanged: 0/0
  9044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9045 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9048 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9049 ;;Total ram usage:        2 bytes
  9050 ;; Hardware stack levels used: 1
  9051 ;; Hardware stack levels required when called: 1
  9052 ;; This function calls:
  9053 ;;		Nothing
  9054 ;; This function is called by:
  9055 ;;		_reset_timer
  9056 ;;		_return_to_sender
  9057 ;; This function uses a non-reentrant model
  9058 ;;
  9059                           
  9060                           	psect	text57
  9061   0037B6                     __ptext57:
  9062                           	callstack 0
  9063   0037B6                     _write_timer:
  9064                           	callstack 27
  9065                           
  9066                           ;incstack = 0
  9067                           ;write_timer@tH stored from wreg
  9068   0037B6  6E02               	movwf	write_timer@tH^0,c
  9069   0037B8                     
  9070                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
  9071   0037B8  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  9072   0037BC                     
  9073                           ;timers.c: 64:     TMR0L = tL;
  9074   0037BC  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  9075   0037C0  0012               	return		;funcret
  9076   0037C2                     __end_of_write_timer:
  9077                           	callstack 0
  9078                           
  9079 ;; *************** function _ISR *****************
  9080 ;; Defined at:
  9081 ;;		line 210 in file "timers.c"
  9082 ;; Parameters:    Size  Location     Type
  9083 ;;		None
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;		None
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  1    wreg      void 
  9088 ;; Registers used:
  9089 ;;		wreg, status,2
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9099 ;;Total ram usage:        0 bytes
  9100 ;; Hardware stack levels used: 1
  9101 ;; This function calls:
  9102 ;;		Nothing
  9103 ;; This function is called by:
  9104 ;;		Interrupt level 2
  9105 ;; This function uses a non-reentrant model
  9106 ;;
  9107                           
  9108                           	psect	intcode
  9109   000008                     __pintcode:
  9110                           	callstack 0
  9111   000008                     _ISR:
  9112                           	callstack 23
  9113                           
  9114                           ;incstack = 0
  9115   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  9116   00000A                     
  9117                           ;timers.c: 212:     if (PIR0bits.TMR0IF) {
  9118   00000A  010E               	movlb	14	; () banked
  9119   00000C  AB33               	btfss	51,5,b	;volatile
  9120   00000E  EF0B  F000         	goto	i2u380_41
  9121   000012  EF0D  F000         	goto	i2u380_40
  9122   000016                     i2u380_41:
  9123   000016  EF1F  F000         	goto	i2l733
  9124   00001A                     i2u380_40:
  9125   00001A                     
  9126                           ; BSR set to: 14
  9127                           ;timers.c: 213:         if (returning) {
  9128   00001A  505E               	movf	_returning^0,w,c
  9129   00001C  B4D8               	btfsc	status,2,c
  9130   00001E  EF13  F000         	goto	i2u381_41
  9131   000022  EF15  F000         	goto	i2u381_40
  9132   000026                     i2u381_41:
  9133   000026  EF1A  F000         	goto	i2l4434
  9134   00002A                     i2u381_40:
  9135   00002A                     
  9136                           ; BSR set to: 14
  9137                           ;timers.c: 214:             return_flag = 1;
  9138   00002A  0E01               	movlw	1
  9139   00002C  0100               	movlb	0	; () banked
  9140   00002E  6F87               	movwf	_return_flag& (0+255),b
  9141                           
  9142                           ;timers.c: 215:         } else {
  9143   000030  EF1D  F000         	goto	i2l4436
  9144   000034                     i2l4434:
  9145                           
  9146                           ; BSR set to: 14
  9147                           ;timers.c: 216:             lost_flag = 1;
  9148   000034  0E01               	movlw	1
  9149   000036  0101               	movlb	1	; () banked
  9150   000038  6FA5               	movwf	_lost_flag& (0+255),b
  9151   00003A                     i2l4436:
  9152                           
  9153                           ;timers.c: 218:         PIR0bits.TMR0IF = 0;
  9154   00003A  010E               	movlb	14	; () banked
  9155   00003C  9B33               	bcf	51,5,b	;volatile
  9156   00003E                     i2l733:
  9157                           
  9158                           ; BSR set to: 14
  9159   00003E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  9160   000040  0011               	retfie		f
  9161   000042                     __end_of_ISR:
  9162                           	callstack 0
  9163                           
  9164                           	psect	rparam
  9165   000000                     
  9166                           	psect	temp
  9167   00005F                     btemp:
  9168                           	callstack 0
  9169   00005F                     	ds	1
  9170   000000                     int$flags	set	btemp
  9171   000000                     wtemp8	set	btemp+1
  9172   000000                     ttemp5	set	btemp+1
  9173   000000                     ttemp6	set	btemp+4
  9174   000000                     ttemp7	set	btemp+8
  9175                           
  9176                           	psect	idloc
  9177                           
  9178                           ;Config register IDLOC0 @ 0x200000
  9179                           ;	unspecified, using default values
  9180   200000                     	org	2097152
  9181   200000  FFFF               	dw	65535
  9182                           
  9183                           ;Config register IDLOC1 @ 0x200002
  9184                           ;	unspecified, using default values
  9185   200002                     	org	2097154
  9186   200002  FFFF               	dw	65535
  9187                           
  9188                           ;Config register IDLOC2 @ 0x200004
  9189                           ;	unspecified, using default values
  9190   200004                     	org	2097156
  9191   200004  FFFF               	dw	65535
  9192                           
  9193                           ;Config register IDLOC3 @ 0x200006
  9194                           ;	unspecified, using default values
  9195   200006                     	org	2097158
  9196   200006  FFFF               	dw	65535
  9197                           
  9198                           ;Config register IDLOC4 @ 0x200008
  9199                           ;	unspecified, using default values
  9200   200008                     	org	2097160
  9201   200008  FFFF               	dw	65535
  9202                           
  9203                           ;Config register IDLOC5 @ 0x20000A
  9204                           ;	unspecified, using default values
  9205   20000A                     	org	2097162
  9206   20000A  FFFF               	dw	65535
  9207                           
  9208                           ;Config register IDLOC6 @ 0x20000C
  9209                           ;	unspecified, using default values
  9210   20000C                     	org	2097164
  9211   20000C  FFFF               	dw	65535
  9212                           
  9213                           ;Config register IDLOC7 @ 0x20000E
  9214                           ;	unspecified, using default values
  9215   20000E                     	org	2097166
  9216   20000E  FFFF               	dw	65535
  9217                           
  9218                           	psect	config
  9219                           
  9220                           ;Config register CONFIG1L @ 0x300000
  9221                           ;	External Oscillator mode Selection bits
  9222                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  9223                           ;	Power-up default value for COSC bits
  9224                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  9225   300000                     	org	3145728
  9226   300000  AA                 	db	170
  9227                           
  9228                           ;Config register CONFIG1H @ 0x300001
  9229                           ;	unspecified, using default values
  9230                           ;	Clock Out Enable bit
  9231                           ;	CLKOUTEN = 0x1, unprogrammed default
  9232                           ;	Clock Switch Enable bit
  9233                           ;	CSWEN = 0x1, unprogrammed default
  9234                           ;	Fail-Safe Clock Monitor Enable bit
  9235                           ;	FCMEN = 0x1, unprogrammed default
  9236   300001                     	org	3145729
  9237   300001  FF                 	db	255
  9238                           
  9239                           ;Config register CONFIG2L @ 0x300002
  9240                           ;	unspecified, using default values
  9241                           ;	Master Clear Enable bit
  9242                           ;	MCLRE = 0x1, unprogrammed default
  9243                           ;	Power-up Timer Enable bit
  9244                           ;	PWRTE = 0x1, unprogrammed default
  9245                           ;	Low-power BOR enable bit
  9246                           ;	LPBOREN = 0x1, unprogrammed default
  9247                           ;	Brown-out Reset Enable bits
  9248                           ;	BOREN = 0x3, unprogrammed default
  9249   300002                     	org	3145730
  9250   300002  FF                 	db	255
  9251                           
  9252                           ;Config register CONFIG2H @ 0x300003
  9253                           ;	unspecified, using default values
  9254                           ;	Brown Out Reset Voltage selection bits
  9255                           ;	BORV = 0x3, unprogrammed default
  9256                           ;	ZCD Disable bit
  9257                           ;	ZCD = 0x1, unprogrammed default
  9258                           ;	PPSLOCK bit One-Way Set Enable bit
  9259                           ;	PPS1WAY = 0x1, unprogrammed default
  9260                           ;	Stack Full/Underflow Reset Enable bit
  9261                           ;	STVREN = 0x1, unprogrammed default
  9262                           ;	Debugger Enable bit
  9263                           ;	DEBUG = 0x1, unprogrammed default
  9264                           ;	Extended Instruction Set Enable bit
  9265                           ;	XINST = 0x1, unprogrammed default
  9266   300003                     	org	3145731
  9267   300003  FF                 	db	255
  9268                           
  9269                           ;Config register CONFIG3L @ 0x300004
  9270                           ;	WDT Period Select bits
  9271                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  9272                           ;	WDT operating mode
  9273                           ;	WDTE = OFF, WDT Disabled
  9274   300004                     	org	3145732
  9275   300004  9F                 	db	159
  9276                           
  9277                           ;Config register CONFIG3H @ 0x300005
  9278                           ;	unspecified, using default values
  9279                           ;	WDT Window Select bits
  9280                           ;	WDTCWS = 0x7, unprogrammed default
  9281                           ;	WDT input clock selector
  9282                           ;	WDTCCS = 0x7, unprogrammed default
  9283   300005                     	org	3145733
  9284   300005  FF                 	db	255
  9285                           
  9286                           ;Config register CONFIG4L @ 0x300006
  9287                           ;	unspecified, using default values
  9288                           ;	Write Protection Block 0
  9289                           ;	WRT0 = 0x1, unprogrammed default
  9290                           ;	Write Protection Block 1
  9291                           ;	WRT1 = 0x1, unprogrammed default
  9292                           ;	Write Protection Block 2
  9293                           ;	WRT2 = 0x1, unprogrammed default
  9294                           ;	Write Protection Block 3
  9295                           ;	WRT3 = 0x1, unprogrammed default
  9296                           ;	Write Protection Block 3
  9297                           ;	WRT4 = 0x1, unprogrammed default
  9298                           ;	Write Protection Block 3
  9299                           ;	WRT5 = 0x1, unprogrammed default
  9300                           ;	Write Protection Block 3
  9301                           ;	WRT6 = 0x1, unprogrammed default
  9302                           ;	Write Protection Block 3
  9303                           ;	WRT7 = 0x1, unprogrammed default
  9304   300006                     	org	3145734
  9305   300006  FF                 	db	255
  9306                           
  9307                           ;Config register CONFIG4H @ 0x300007
  9308                           ;	unspecified, using default values
  9309                           ;	Configuration Register Write Protection bit
  9310                           ;	WRTC = 0x1, unprogrammed default
  9311                           ;	Boot Block Write Protection bit
  9312                           ;	WRTB = 0x1, unprogrammed default
  9313                           ;	Data EEPROM Write Protection bit
  9314                           ;	WRTD = 0x1, unprogrammed default
  9315                           ;	Scanner Enable bit
  9316                           ;	SCANE = 0x1, unprogrammed default
  9317                           ;	Low Voltage Programming Enable bit
  9318                           ;	LVP = 0x1, unprogrammed default
  9319   300007                     	org	3145735
  9320   300007  FF                 	db	255
  9321                           
  9322                           ;Config register CONFIG5L @ 0x300008
  9323                           ;	unspecified, using default values
  9324                           ;	UserNVM Program Memory Code Protection bit
  9325                           ;	CP = 0x1, unprogrammed default
  9326                           ;	DataNVM Memory Code Protection bit
  9327                           ;	CPD = 0x1, unprogrammed default
  9328   300008                     	org	3145736
  9329   300008  FF                 	db	255
  9330                           
  9331                           ;Config register CONFIG5H @ 0x300009
  9332                           ;	unspecified, using default values
  9333   300009                     	org	3145737
  9334   300009  FF                 	db	255
  9335                           
  9336                           ;Config register CONFIG6L @ 0x30000A
  9337                           ;	unspecified, using default values
  9338                           ;	Table Read Protection Block 0
  9339                           ;	EBTR0 = 0x1, unprogrammed default
  9340                           ;	Table Read Protection Block 1
  9341                           ;	EBTR1 = 0x1, unprogrammed default
  9342                           ;	Table Read Protection Block 2
  9343                           ;	EBTR2 = 0x1, unprogrammed default
  9344                           ;	Table Read Protection Block 3
  9345                           ;	EBTR3 = 0x1, unprogrammed default
  9346                           ;	Table Read Protection Block 4
  9347                           ;	EBTR4 = 0x1, unprogrammed default
  9348                           ;	Table Read Protection Block 5
  9349                           ;	EBTR5 = 0x1, unprogrammed default
  9350                           ;	Table Read Protection Block 6
  9351                           ;	EBTR6 = 0x1, unprogrammed default
  9352                           ;	Table Read Protection Block 7
  9353                           ;	EBTR7 = 0x1, unprogrammed default
  9354   30000A                     	org	3145738
  9355   30000A  FF                 	db	255
  9356                           
  9357                           ;Config register CONFIG6H @ 0x30000B
  9358                           ;	unspecified, using default values
  9359                           ;	Boot Block Table Read Protection bit
  9360                           ;	EBTRB = 0x1, unprogrammed default
  9361   30000B                     	org	3145739
  9362   30000B  FF                 	db	255
  9363                           tosu	equ	0xFFF
  9364                           tosh	equ	0xFFE
  9365                           tosl	equ	0xFFD
  9366                           stkptr	equ	0xFFC
  9367                           pclatu	equ	0xFFB
  9368                           pclath	equ	0xFFA
  9369                           pcl	equ	0xFF9
  9370                           tblptru	equ	0xFF8
  9371                           tblptrh	equ	0xFF7
  9372                           tblptrl	equ	0xFF6
  9373                           tablat	equ	0xFF5
  9374                           prodh	equ	0xFF4
  9375                           prodl	equ	0xFF3
  9376                           indf0	equ	0xFEF
  9377                           postinc0	equ	0xFEE
  9378                           postdec0	equ	0xFED
  9379                           preinc0	equ	0xFEC
  9380                           plusw0	equ	0xFEB
  9381                           fsr0h	equ	0xFEA
  9382                           fsr0l	equ	0xFE9
  9383                           wreg	equ	0xFE8
  9384                           indf1	equ	0xFE7
  9385                           postinc1	equ	0xFE6
  9386                           postdec1	equ	0xFE5
  9387                           preinc1	equ	0xFE4
  9388                           plusw1	equ	0xFE3
  9389                           fsr1h	equ	0xFE2
  9390                           fsr1l	equ	0xFE1
  9391                           bsr	equ	0xFE0
  9392                           indf2	equ	0xFDF
  9393                           postinc2	equ	0xFDE
  9394                           postdec2	equ	0xFDD
  9395                           preinc2	equ	0xFDC
  9396                           plusw2	equ	0xFDB
  9397                           fsr2h	equ	0xFDA
  9398                           fsr2l	equ	0xFD9
  9399                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        27
    BSS         103
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     93      94
    BANK0           160     35     102
    BANK1           256    164     226
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    average_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    colour_to_key@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    colour_to_key@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    convert_HSV@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    convert_HSV@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    forward_navigation@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward_navigation@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    forward_navigation@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    forward_navigation@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    max_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    min_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    read_timer@tH	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerH(COMRAM[1]), 

    read_timer@tL	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerL(COMRAM[1]), 

    S1143DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2763$buffer	PTR unsigned char  size(2) Largest target is 0

    S2763$source	PTR const unsigned char  size(2) Largest target is 0

    scale_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    sendArrayCharSerial4@arr	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), trail_timer_high(BANK1[20]), trail_timer_low(BANK1[20]), 

    sendHSVvalSerial4@col_val	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    sendRGBCvalSerial4@col_val	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 
		 -> STR_4(CODE[3]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    wait_for_wall@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_forward_navigation
    _sendIntSerial4->_sprintf
    _forward_navigation->_sendRGBCvalSerial4
    _wait_for_wall->_getRGBCval
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    _sendRGBCvalSerial4->_sprintf
    _sendHSVvalSerial4->_sprintf
    _sendArrayCharSerial4->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___lwdiv
    _abs->___awmod
    ___lwdiv->___wmul
    _sendStringSerial4->_sendCharSerial4
    _scale_RGB->___fltol
    ___fltol->___flmul
    ___flmul->___xxtofl
    _convert_HSV->___lldiv
    _average_RGBC->___lldiv
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _forward_navigation->_sendArrayCharSerial4

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   75331
                                              0 BANK0     35    35      0
                        _Timer0_init
                       _average_RGBC
                  _buggy_lights_init
                   _color_click_init
                      _colour_to_key
                        _convert_HSV
                 _forward_navigation
                    _initDCmotorsPWM
                         _initUSART4
                          _scale_RGB
                  _sendHSVvalSerial4
                     _sendIntSerial4
                 _sendRGBCvalSerial4
 ---------------------------------------------------------------------------------
 (1) _sendIntSerial4                                      19    17      2    5897
                                             57 COMRAM    19    17      2
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward_navigation                                   9     5      4   39686
                                             84 COMRAM     9     5      4
                       _average_RGBC
                      _colour_to_key
                        _convert_HSV
                         _read_timer
                        _reset_timer
                          _scale_RGB
               _sendArrayCharSerial4
                  _sendHSVvalSerial4
                 _sendRGBCvalSerial4
                        _start_timer
                               _stop
                         _stop_timer
               _toggle_tricolour_LED
                      _wait_for_wall
                        _write_trail
 ---------------------------------------------------------------------------------
 (2) _write_trail                                          3     1      2     218
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _wait_for_wall                                        4     2      2     910
                                             12 COMRAM     4     2      2
                         _getRGBCval
 ---------------------------------------------------------------------------------
 (2) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    3525
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    1981
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sendRGBCvalSerial4                                  27    26      1    5811
                                             57 COMRAM    27    26      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sendHSVvalSerial4                                   22    21      1    5789
                                             57 COMRAM    22    21      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sendArrayCharSerial4                               167   165      2    6038
                                             57 COMRAM     3     1      2
                                              0 BANK1    164   164      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    15     11    5074
                                             31 COMRAM    26    15     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    4249
                                             27 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           14    11      3    3897
                                             13 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     934
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     510
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     447
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scale_RGB                                            3     2      1    6039
                                             49 COMRAM     3     2      1
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1236
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1143
                                             39 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    3420
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_timer                                           2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _convert_HSV                                         52    50      2    5869
                                             13 COMRAM    52    50      2
                            ___lldiv
                             ___lmul
                            _max_RGB
                            _min_RGB
 ---------------------------------------------------------------------------------
 (3) _min_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _max_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1434
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _colour_to_key                                        5     3      2    1084
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _average_RGBC                                        20    19      1    3088
                                             13 COMRAM    20    19      1
                            ___lldiv
                         _getRGBCval
 ---------------------------------------------------------------------------------
 (3) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (4) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1834
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (6) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
     _start_timer
   _average_RGBC
     ___lldiv
     _getRGBCval
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _colour_to_key
   _convert_HSV
     ___lldiv
     ___lmul
     _max_RGB
     _min_RGB
   _forward_navigation
     _average_RGBC
     _colour_to_key
     _convert_HSV
     _read_timer
     _reset_timer
     _scale_RGB
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _sendArrayCharSerial4
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             ___lwdiv
               ___wmul (ARG)
             ___lwmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _sendHSVvalSerial4
       _sendStringSerial4
       _sprintf
     _sendRGBCvalSerial4
       _sendStringSerial4
       _sprintf
     _start_timer
     _stop
       _setMotorPWM
         ___lwdiv
         ___wmul
     _stop_timer
     _toggle_tricolour_LED
     _wait_for_wall
       _getRGBCval
     _write_trail
   _initDCmotorsPWM
   _initUSART4
   _scale_RGB
   _sendHSVvalSerial4
   _sendIntSerial4
     _sendStringSerial4
     _sprintf
   _sendRGBCvalSerial4

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     A4      E2       7       88.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     23      66       5       63.7%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5D      5E       1      100.0%
BITBIGSFRlllhhh     52      0       0      41        0.0%
BITBIGSFRlllhhh     37      0       0      43        0.0%
BITBIGSFRlllllh     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      59        0.0%
BITBIGSFRlllhhh     20      0       0      46        0.0%
BITBIGSFRlllhhh     1E      0       0      48        0.0%
BITBIGSFRhhlll      1D      0       0      38        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      49        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      47        0.0%
BITBIGSFRlllllh      B      0       0      57        0.0%
BITBIGSFRlllllh      9      0       0      56        0.0%
BITBIGSFRlllhhh      8      0       0      44        0.0%
BITBIGSFRllllll      6      0       0      58        0.0%
BITBIGSFRlllllh      6      0       0      53        0.0%
BITBIGSFRllllhl      5      0       0      52        0.0%
BITBIGSFRlllllh      3      0       0      55        0.0%
BITBIGSFRllllhh      3      0       0      51        0.0%
BITBIGSFRlllhhh      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      50        0.0%
BITBIGSFRllh         1      0       0      40        0.0%
BITBIGSFRlhh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A6      60        0.0%
DATA                 0      0     1A6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Mar 12 12:35:38 2024

                 _turn180Delay 00B5                ??_wait_for_wall 000F                 _color_read_Red 32E2  
              _color_read_Blue 33D2                _trail_timer_low 01BA         ??_sendArrayCharSerial4 003C  
                           l42 2AD4                             l27 3652                             l71 3330  
                           l80 33D0                             l65 3624                             l74 3380  
                           l83 32E0                             l68 3734                             l77 3420  
                           l96 3540                             l89 227A                             l99 2F82  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003               _trail_timer_high 01CE  
             _color_read_Clear 3382               _color_read_Green 3332                            l101 2FBC  
                          l104 2F06                            l106 2F40                            l210 2E36  
                          l125 14E4                            l109 2A0C                            l311 36A4  
                          l320 37D4                            l136 1946                            l305 367C  
                          l137 1948                            l217 26F8                            l225 2EC4  
                          l314 37DE                            l323 37A8                            l308 367E  
                          l317 37CA                            l326 3582                            l700 37B4  
                          l457 3752                            l466 3772                            l706 35BC  
                          l475 31D6                            l483 3032                            l715 2830  
                          l469 3786                            l486 3234                            l478 3714  
                          l489 346C                            l763 36F2                            l691 37E2  
                          l685 36CC                            l790 2D96                            l774 3100  
                          l694 379C                            l775 3110                            l688 37E6  
                          l697 37C0                            l797 2DA6                            l994 2B98  
                          _ISR 0008         ??_toggle_tricolour_LED 0001                            _abs 35BE  
                  _start_timer 37E4                   ___awmod@sign 0006                            wreg 0FE8  
                 ___flmul@aexp 0020                   ___flmul@bexp 0021                   ?_convert_HSV 000E  
                 ___flmul@sign 001B                   ___flmul@temp 0026                   ___flmul@prod 0022  
               min_RGB@min_val 0005                    _squareDelay 00B1                           ?_ISR 0001  
                 ___fltol@exp1 0031                           l1007 2D02                           ?_abs 0007  
                         l1060 2936                           l3010 2ADA                           l3004 367E  
                         l3020 2B0A                           l3012 2AE8                           l3100 3072  
                         l1421 242E                           l1261 30A6                           l1501 3282  
                         l3006 368E                           l3030 2B38                           l3022 2B0E  
                         l3014 2AF0                           l3102 3088                           l1254 309E  
                         l3110 3112                           l1502 328A                           l1271 3174  
                         l1432 23C6                           l3040 2B6C                           l3032 2B46  
                         l3024 2B16                           l3016 2AF4                           l3008 2AD6  
                         l3104 3090                           l3120 3158                           l3112 3124  
                         l1264 316C                           l3200 1E8C                           l4000 2E52  
                         l1425 236A                           l1521 2C52                           l1441 34B8  
                         l1418 22D2                           l3042 2B72                           l3034 2B4C  
                         l3026 2B28                           l3018 2B02                           l3106 3092  
                         l3122 3160                           l3114 312C                           l1506 35D8  
                         l3130 2BBA                           l3210 1ED2                           l3202 1E90  
                         l4010 2E88                           l4002 2E5A                           l3036 2B62  
                         l3028 2B30                           l3044 2B78                           l3060 2C72  
                         l3052 2C54                           l3108 3098                           l3124 3166  
                         l3116 3134                           l3140 35BE                           l1532 37E8  
                         l3132 2BC4                           l3212 1EE0                           l3204 1EA2  
                         l3220 1F22                           l4020 3422                           l4004 2E70  
                         l4012 2E98                           l1381 1D72                           l1509 35F0  
                         l3150 37A4                           l3046 2B88                           l3038 2B6A  
                         l3070 2CAA                           l3062 2C80                           l3054 2C58  
                         l3118 3142                           l3142 35CC                           l3134 2BE0  
                         l3126 2B9A                           l3230 1F90                           l3222 1F42  
                         l3214 1EE8                           l3206 1EB2                           l4022 3462  
                         l4014 2EAE                           l4006 2E78                           l3144 37D6  
                         l3152 37CC                           l3160 3544                           l1384 1C04  
                         l3048 2B90                           l3072 2CB8                           l3080 2CE2  
                         l3064 2C88                           l3056 2C66                           l3136 2C12  
                         l3128 2BAA                           l3240 1FF0                           l3232 1FAC  
                         l3224 1F5A                           l3216 1F02                           l3208 1EC2  
                         l4016 31D8                           l4008 2E80                           l1377 1A0E  
                         l3146 37DA                           l3154 37D0                           l3170 3580  
                         l3162 3548                           l1394 1D34                           l1386 1C7C  
                         l3082 2CF2                           l3074 2CCE                           l3066 2C9A  
                         l3058 2C6E                           l3090 303C                           l3250 2040  
                         l3242 1FF2                           l3234 1FB0                           l3226 1F68  
                         l1482 1F16                           l3218 1F04                           l4018 322A  
                         l3410 2624                           l3402 25A6                           l1387 1C6A  
                         l1483 207E                           l4140 37E4                           l3148 37A0  
                         l3500 2D2A                           l3164 3550                           l3156 37C2  
                         l3084 2CFA                           l3076 2CD6                           l3068 2CA2  
                         l3092 304E                           l3236 1FC2                           l3228 1F6C  
                         l3180 1DAA                           l3412 2662                           l3404 25C0  
                         l4220 3740                           l4230 36A6                           l3510 2D74  
                         l3502 2D32                           l3166 3558                           l3158 37C6  
                         l3270 3328                           l3078 2CDC                           l3094 3056  
                         l3238 1FD6                           l3246 2008                           l3190 1E06  
                         l3182 1DB8                           l3254 204C                           l3174 1D74  
                         l3414 267C                           l3406 260E                           l4142 37E0  
                         l4150 359E                           l4222 3742                           l4302 36F4  
                         l4240 36C4                           l4232 36AE                           l4160 3626  
                         l3512 2D84                           l3504 2D3E                           l3168 357E  
                         l3280 33D2                           l4144 3788                           l3600 1BEA  
                         l3520 1956                           l3360 3782                           l3096 305E  
                         l3088 3034                           l3256 206E                           l3248 2038  
                         l3192 1E1E                           l3184 1DBC                           l3176 1D7C  
                         l3416 26BC                           l3408 2620                           l4152 35AA  
                         l4224 374C                           l4304 370A                           l4138 37AA  
                         l4242 36C8                           l4234 36B0                           l4170 361A  
                         l4162 35F2                           l3514 2D86                           l3506 2D4C  
                         l3282 3418                           l3274 3332                           l3610 1C26  
                         l3602 1BF4                           l3530 1996                           l3522 1964  
                         l3098 306C                           l3258 2076                           l3194 1E28  
                         l3186 1DC6                           l3178 1DA2                           l3370 323A  
                         l3362 36CE                           l4154 35B0                           l4146 3586  
                         l4226 374E                           l4218 3736                           l4244 36CA  
                         l4236 36BA                           l4164 35F6                           l3516 2D90  
                         l3508 2D56                           l3276 3378                           l3268 32E2  
                         l3380 2F50                           l3620 1C98                           l3612 1C34  
                         l3604 1C02                           l3540 19C6                           l3532 199C  
                         l3524 1966                           l3700 22F8                           l3460 3176  
                         l3196 1E40                           l3188 1DE6                           l3372 3248  
                         l3364 36EA                           l4156 35B4                           l4148 3592  
                         l4500 2752                           l4180 2E06                           l4172 2DA8  
                         l4228 3750                           l4238 36BE                           l4166 3600  
                         l3286 3382                           l3382 2F70                           l3390 2EC6  
                         l3630 1D02                           l3622 1CA6                           l3614 1C62  
                         l3606 1C14                           l3550 19FE                           l3542 19C8  
                         l3534 19AC                           l3526 1976                           l3518 194A  
                         l3710 2352                           l3358 3772                           l3462 317A  
                         l3198 1E70                           l3374 3262                           l3470 347A  
                         l4158 35B8                           l4510 2780                           l4502 275A  
                         l4190 2E28                           l4182 2E10                           l4174 2DB8  
                         l4168 3610                           l3288 33C8                           l3376 328C  
                         l3384 2FA2                           l3392 2ED4                           l3800 0E5E  
                         l3640 1D58                           l3632 1D1C                           l3624 1CD0  
                         l3608 1C22                           l3560 1A4E                           l3552 1A1E  
                         l3544 19D8                           l3536 19B2                           l3528 1986  
                         l3720 23B6                           l3712 2354                           l3704 230C  
                         l3464 31A0                           l3368 3236                           l3472 3482  
                         l4520 27C4                           l4512 2798                           l4504 2762  
                         l4192 2E2A                           l4184 2E12                           l4176 2DDE  
                         l3482 37B8                           l3490 30C6                           l3386 2FB4  
                         l3378 2F42                           l3394 2EF4                           l3810 0EC4  
                         l3802 0E70                           l3634 1D38                           l3642 1D5E  
                         l3618 1C8C                           l3626 1CD4                           l3570 1A9E  
                         l3562 1A58                           l3554 1A2E                           l3546 19E8  
                         l3538 19B8                           l3650 2848                           l3730 240E  
                         l3722 23D4                           l3714 2360                           l3706 2314  
                         l3466 31A4                           l3474 348A                           l4530 27F4  
                         l4522 27C8                           l4514 27AA                           l4506 276E  
                         l4194 2E34                           l4186 2E1C                           l4178 2DE2  
                         l3484 37BC                           l3740 3654                           l3492 30D6  
                         l3396 2F26                           l3900 14B2                           l3812 0ED4  
                         l3820 0F84                           l3804 0E7C                           l3644 1D62  
                         l3636 1D48                           l3628 1CEE                           l3580 1AE0  
                         l3572 1AAA                           l3564 1A6E                           l3548 19F8  
                         l3660 2898                           l3732 241C                           l3724 23D6  
                         l3716 239C                           l3708 2320                           l3476 34A2  
                         l3468 346E                           l4532 27FC                           l4524 27D6  
                         l4516 27AE                           l4508 277C                           l4188 2E1E  
                         l4540 2430                           l3750 366A                           l3742 365E  
                         l3910 1506                           l3494 30E0                           l3486 30A8  
                         l3398 2F38                           l3902 14C0                           l3830 106C  
                         l3822 0F90                           l3814 0F14                           l3806 0E9A  
                         l3638 1D56                           l3590 1B42                           l3582 1AF0  
                         l3574 1AB8                           l3566 1A7A                           l3558 1A42  
                         l3670 28C2                           l3662 289C                           l3654 285C  
                         l3734 241E                           l3726 23DA                           l3718 23A8  
                         l3478 34B0                           l4470 2FBE                           l4534 2808  
                         l4526 27E8                           l4518 27B2                           l4550 24A2  
                         l4542 2476                           l3744 3664                           l3752 3718  
                         l3496 2D04                           l3760 20EE                           l3920 1588  
                         l3912 1522                           l3488 30B8                           l3904 14D2  
                         l3840 10D2                           l3824 0FC4                           l3816 0F48  
                         l3808 0EC4                           l3832 1074                           l3592 1B5E  
                         l3584 1B0A                           l3576 1AC4                           l3568 1A92  
                         l3680 28EA                           l3672 28CC                           l3664 28AA  
                         l3656 2886                           l3648 2832                           l3728 23FE  
                         l4480 3000                           l4536 2814                           l4528 27EC  
                         l4560 24CA                           l4552 24AA                           l4544 247E  
                         l3746 3666                           l3498 2D14                           l3770 2166  
                         l3762 2110                           l3754 2080                           l3930 160C  
                         l3922 15A6                           l3914 1544                           l3906 14E6  
                         l3850 118A                           l3842 110E                           l3834 1096  
                         l3826 1008                           l3818 0F78                           l3594 1B88  
                         l3586 1B1A                           l3578 1AD4                           l3682 28F6  
                         l3674 28D6                           l3658 2888                           l4626 202A  
                         l4482 3016                           l3738 2A0E                           l4490 270E  
                         l4538 2820                           l4570 24D6                           l4562 24CE  
                         l4554 24B2                           l4546 2486                           l3748 3668  
                         l3772 2236                           l3764 2132                           l3756 20C8  
                         l3940 1690                           l3932 162A                           l3924 15C8  
                         l3916 1566                           l3908 14EA                           l3852 1194  
                         l3844 1142                           l3836 10BC                           l3860 1240  
                         l3828 103C                           l3596 1BBE                           l3588 1B36  
                         l3684 2906                           l3692 227E                           l4476 2FCC  
                         l3780 34FE                           l4492 271A                           l4484 26FA  
                         l4580 2540                           l4572 24D8                           l4564 24D0  
                         l4556 24C2                           l4548 249A                           l3774 2244  
                         l3766 2154                           l3758 20D0                           l3950 1712  
                         l3942 16AE                           l3934 164C                           l3926 15EA  
                         l3918 156A                           l3870 12E2                           l3862 1262  
                         l3854 11D4                           l3846 1172                           l3838 10C8  
                         l3598 1BCC                           l3686 2916                           l3694 228E  
                         l3790 2938                           l4478 2FFC                           l3782 3502  
                         l4494 272A                           l4486 26FE                           l4590 2574  
                         l4582 2548                           l4574 24DA                           l4566 24D2  
                         l4558 24C6                           l3776 2256                           l3768 2156  
                         l3960 1792                           l3952 172E                           l3944 16D0  
                         l3936 166E                           l3928 15EE                           l3880 1370  
                         l3872 1316                           l3864 1288                           l3856 1208  
                         l3848 117E                           l3792 0E1A                           l3688 2926  
                         l3696 229C                           l3784 350A                           l4496 2736  
                         l4488 2706                           l4592 257C                           l4584 2550  
                         l4576 24DE                           l4568 24D4                           l3778 2268  
                         l3970 1814                           l3962 17AE                           l3954 1750  
                         l3946 16F2                           l3938 1672                           l3890 142E  
                         l3882 13B0                           l3874 1346                           l3866 1294  
                         l3858 1238                           l3794 0E32                           l3698 22E2  
                         l4498 273A                           l4594 2586                           l4586 255C  
                         l4578 252C                           l3980 189A                           l3972 1832  
                         l3964 17D0                           l3956 1772                           l3948 16F6  
                         l3892 143A                           l3884 13E4                           l3868 12A6  
                         l3876 1352                           l3796 0E42                           l3788 3530  
                         l4588 256C                           l3990 1920                           l3982 18BA  
                         l3974 1854                           l3966 17F2                           l3958 1776  
                         l3894 1446                           l3886 1414                           l3878 135E  
                         l3798 0E52                           l3992 1942                           l3984 18DC  
                         l3976 1876                           l3968 17F6                           l3896 147A  
                         l3888 141C                           l3986 18E0                           l3978 187A  
                         l3898 14AA                           l3988 1900                           l3996 2E38  
                         l3998 2E3C                           STR_1 0E0F                           STR_2 0E14  
                         STR_3 0E14                           STR_4 0E11                           STR_5 0E01  
                         STR_6 0E04                           u2000 2B28                           u2001 2B24  
                         u2010 2B46                           u2011 2B42                           u2020 2B62  
                         u2100 304E                           u2021 2B5E                           u2101 304A  
                         u2030 2B88                           u2110 306C                           u2031 2B84  
                         u2111 3068                           u3000 241C                           u2040 2C66  
                         u2120 3088                           u2200 35CC                           u3001 2418  
                         u2041 2C62                           u2121 3084                           u2201 35C8  
                         u2210 356C                           u2050 2C80                           u2130 3124  
                         u3010 2A20                           u2211 3564                           u2051 2C7C  
                         u2131 3120                           u3011 2A18                           u2060 2C9A  
                         u2140 3142                           u2300 1EC2                           u2061 2C96  
                         u2141 313E                           u2301 1EBE                           u2070 2CB8  
                         u2150 3158                           u2310 1ED2                           u2230 1DA2  
                         u3110 2AC2                           u3030 2A40                           u2071 2CB4  
                         u2151 3154                           u2311 1ECE                           u2231 1D9E  
                         u3111 2ABA                           u3031 2A38                           u3200 10BC  
                         u2080 2CCE                           u2160 2BAA                           u2320 1F16  
                         u2240 1DE6                   _BAUD4CONbits 0EE9                           u3201 10B8  
                         u2081 2CCA                           u2161 2BA6                           u2321 1F12  
                         u2241 1DE2                           u3130 2166                           u3210 1262  
                         u2090 2CF2                           u2170 2BBA                           u2330 1F42  
                         u2250 1E06                           u3050 2A60                           u3131 2162  
                         u3211 125E                           u2091 2CEE                           u2171 2BB6  
                         u2331 1F3E                           u2251 1E02                           u3051 2A58  
                         u2228 356E                           u3300 1588                           u3220 1288  
                         u2180 2BE0                           u2340 1FC2                           u2260 1E3C  
                         u2500 3282                           u3108 2AA2                           u3028 2A22  
                         u3140 352C                           u3301 1584                           u3221 1284  
                         u2181 2BDC                           u2341 1FBE                           u2261 1E36  
                         u2501 327E                           u3141 3528                           u3310 15A6  
                         u2510 2F70                           u2190 2C12                           u2350 1FD2  
                         u2270 1E3E                           u3070 2A82                           u3150 3540  
                         u3311 15A2                           u2511 2F6C                           u2191 2C0E  
                         u2351 1FCE                           u3071 2A7A                           u3151 353C  
                         u3400 16D0                           u3320 15C8                           u2600 30C6  
                         u2520 2FA2                           u3160 0E70                           u2360 2004  
                         u2280 1EA2                           u3128 2AC4                           u3048 2A42  
                         u3401 16CC                           u3321 15C4                           u2601 30C2  
                         u2521 2F9E                           u3161 0E6C                           u2361 2000  
                         u2281 1E9E                           u3410 16F2                           u3330 15EA  
                         u2610 3100                           u2530 2EF4                           u3250 142E  
                         u3170 0E9A                           u2290 1EB2                           u3090 2AA0  
                         _T2PR 0FBC                           u3411 16EE                           u3331 15E6  
                         u2611 30FC                           u2531 2EF0                           u3251 142A  
                         u3235 1296                           u3171 0E96                           u2291 1EAE  
                         u3091 2A98                           u2620 2D2A                           u3500 1814  
                         u3420 1712                           u3340 160C                           u3260 1506  
                         u2540 2F26                           u3180 0EC4                           u2700 19E8  
                         u3068 2A62                           u2621 2D26                           u3501 1810  
                         u3421 170E                           u3341 1608                           u3261 1502  
                         u2541 2F22                           u3245 1360                           u3181 0EC0  
                         u2701 19E4                           u2630 2D4C                           u3510 1832  
                         u3430 172E                           u3350 162A                           u3270 1522  
                         u3190 1096                           u2710 1A1E                           u2550 25C0  
                         u2631 2D48                           u3511 182E                           u3431 172A  
                         u3351 1626                           u3271 151E                           u3191 1092  
                         u2711 1A1A                           u2551 25BC                           u2640 2D74  
                         u3520 1854                           u3440 1750                           u3360 164C  
                         u3280 1544                           u2800 1CA6                           u2720 1A2E  
                         u2560 267C                           u3600 2E52                           u3088 2A84  
                         u2641 2D70                           u3521 1850                           u3441 174C  
                         u3361 1648                           u3281 1540                           u2801 1CA2  
                         u2721 1A2A                           u2561 2678                           u3601 2E4E  
                         u3530 1876                           u3450 1772                           u3370 166E  
                         u3290 1566                           u2810 1CEE                           u2730 1BA8  
                         u2650 1964                           u2490 3782                           u2570 319C  
                         u3610 2E70                           u3531 1872                           u3451 176E  
                         u3371 166A                           u3291 1562                           u2811 1CEA  
                         u2651 1960                           u2491 377E                           u3611 2E6C  
                         u3540 189A                           u3460 1792                           u3380 1690  
                         u2820 1D1C                           u2740 1C02                           u2660 1976  
                         u2900 2916                           u2580 31C6                           u3620 2EAE  
                         u3541 1896                           u3461 178E                           u3381 168C  
                         u2821 1D18                           u2741 1BFE                           u2661 1972  
                         u2901 2912                           u3621 2EAA                           u3550 18BA  
                         u3470 17AE                           u3390 16AE                           u2830 1D56  
                         u2750 1C22                           u2670 1986                           u2910 228E  
                         u2590 31D6                           u3630 2EC4                           u3551 18B6  
                         u3471 17AA                           u3391 16AA                           u2831 1D52  
                         u2751 1C1E                           u2735 1B9E                           u2671 1982  
                         u2911 228A                           u2591 31D2                           u3631 2EC0  
                         u1960 368E                           u3560 18DC                           u3480 17D0  
                         u2760 1C34                           u2680 19C6                           u2840 2848  
                         u2920 229C                           u1961 368A                           u3561 18D8  
                         u3481 17CC                           u2761 1C30                           u2681 19C2  
                         u2841 2844                           u2921 2298                           u2577 3192  
                         u1970 36A4                           u3570 1900                           u3490 17F2  
                         u2770 1C62                           u2690 19D8                           u2850 287C  
                         u2930 22F8                           u1971 36A0                           u3571 18FC  
                         u3491 17EE                           u2771 1C5E                           u2691 19D4  
                         u2931 22F4                           u2587 31BC                           u3580 1920  
                         u2780 1C78                           u2860 28AA                           u2940 234E  
                         u1980 2AE8                           u3820 3016                           u3581 191C  
                         u2781 1C74                           u2861 28A6                           u2941 234A  
                         u1981 2AE4                           u3821 3012                           u3590 1942  
                         u2790 1C8C                           u2870 28BE                           u2950 2398  
                         u1990 2B02                           u3830 27AA                           u3591 193E  
                         u2791 1C88                           u2871 28BA                           u2855 2872  
                         u2951 2394                           u1991 2AFE                           u3831 27A6  
                         u2880 28E6                           u2960 23B6                           u3840 27C4  
                         u2881 28E2                           u2961 23B2                           u3841 27C0  
                         u2890 2906                           u2970 23C6                           u3850 27E8  
                         u2891 2902                           u2971 23C2                           u3851 27E4  
                         u2980 23D4                           u3860 2830                           u3908 251C  
                         u2981 23D0                           u3861 282C                           u3917 2592  
                         u2990 240E                           u3870 24F4                           u2991 240A  
                         u3927 2744                           u3871 24EA                           u3937 278A  
                         u3890 2518                           u3947 2E8E                           u3891 2510  
                         u3957 3606                           u3888 24F8                  _colour_to_key 14E6  
                         abs@a 0007                           _dbuf 0060                           _main 2430  
                         _prec 0084                           _nout 0080                           fsr0h 0FEA  
                         fsr1h 0FE2                           indf0 0FEF                           fsr2h 0FDA  
                         fsr0l 0FE9                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 005F                           _stop 2E38  
           _sendRGBCvalSerial4 31D8                           prodh 0FF4                           prodl 0FF3  
               ??_average_RGBC 000F                           start 0042             average_RGBC@temp_B 001A  
           average_RGBC@temp_C 001E             average_RGBC@temp_G 0016             average_RGBC@temp_R 0012  
       __end_of_color_read_Red 3332                   ___param_bank 0000                          ??_ISR 0001  
          ?_sendRGBCvalSerial4 003A                          ??_abs 0009                  write_timer@tH 0002  
                write_timer@tL 0001                  write_trail@tH 0003                  write_trail@tL 0001  
               _sendIntSerial4 36F4                  ___fltol@sign1 0030                          ?_main 0001  
           _timer_high_pointer 00AF                __end_of___awdiv 2B9A                __end_of___awmod 2D04  
              __end_of___flmul 1D74                __end_of___fltol 2938                __end_of___lldiv 2DA8  
                        ?_stop 0013                ___awdiv@divisor 0003                __end_of___lwdiv 30A8  
              __end_of___lwmod 3176                          i2l733 003E                ___awdiv@counter 0005  
                 vfpfcnvrt@cnt 0014                   vfpfcnvrt@fmt 000F                          _TMR0H 0FD4  
                        _TMR0L 0FD3            ___lmul@multiplicand 0005        __end_of_sendCharSerial4 3788  
   __end_of_I2C_2_Master_Start 37E0                    _write_timer 37B6     __end_of_I2C_2_Master_Write 37AA  
                  _write_trail 3584                __end_of_max_RGB 2FBE                __end_of_min_RGB 2F42  
                  _turningGear 00C1                          _flags 0086           ??_sendRGBCvalSerial4 003B  
                        _fputc 2B9A                          _width 0082                          _putch 37E8  
                        main@k 008A                 ?_colour_to_key 0001              _turnRight135Delay 00B7  
                        tablat 0FF5                _turnLeft90Delay 00BD                          plusw2 0FDB  
                        ttemp5 0060                          ttemp6 0063                          ttemp7 0067  
                        status 0FD8                          wtemp8 0060                __end_of_sprintf 34BA  
      __end_of_color_read_Blue 3422                  average_RGBC@i 0011                  average_RGBC@p 000E  
        _I2C_2_Master_RepStart 37C2                ?_color_read_Red 0005                __initialization 34BA  
                 __end_of_main 25A6                   __end_of_stop 2EC6         __end_of_sendIntSerial4 3716  
                       ??_main 0088                         ??_stop 0015                  __activetblptr 0003  
               write_trail@man 0002                   ?_setMotorPWM 000E                         ?_fputc 0001  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0001                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       _RD5PPS 0E6F                         _RC7PPS 0E69                         _RD6PPS 0E70  
                       _RE4PPS 0E76                         i2l4430 001A                         i2l4432 002A  
                       i2l4434 0034                         i2l4436 003A                         i2l4428 000A  
                       _RG6PPS 0E88                  vfpfcnvrt@done 0013       __end_of_color_click_init 3626  
                       _RX4PPS 0E15                         _TX4REG 0EE4               __end_of___xxtofl 2430  
             _turnLeft135Delay 00B9                  ??_Timer0_init 0003                   ?_reset_timer 0001  
                 _CCPTMRS0bits 0FAD      sendArrayCharSerial4@index 01A1                   vfprintf@cfmt 001F  
                 convert_HSV@C 0040                   convert_HSV@M 003E                         ___lmul 30A8  
                 convert_HSV@m 001A                         ___wmul 36CE                      ??___awdiv 0005  
                    ??___awmod 0005                      ??___flmul 0017                      ??___fltol 002C  
                    ??___lldiv 0009                      ??___lwdiv 000B                      ??___lwmod 0005  
              ?_sendIntSerial4 003A           forward_navigation@p1 0057           forward_navigation@p2 0058  
                       clear_0 34E0                         clear_1 34EC           forward_navigation@mL 0055  
         forward_navigation@mR 0056               ___awdiv@quotient 0007                ___awmod@divisor 0003  
                       isa$std 0001                ___awmod@counter 0005                      ??_max_RGB 0003  
                    ??_min_RGB 0003                         fputc@c 0001              _timer_low_pointer 00AD  
         __end_of_average_RGBC 227C                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8               ?_sendCharSerial4 0001  
                       putch@c 0001                ??_colour_to_key 0003               __end_of_vfprintf 328C  
                       stop@mL 0013                         stop@mR 0014              ??_initDCmotorsPWM 0003  
                    ??_sprintf 002B            convert_HSV@temp_610 0028            convert_HSV@temp_611 002C  
          convert_HSV@temp_612 0030            convert_HSV@temp_613 0034            convert_HSV@temp_614 0020  
          convert_HSV@temp_609 0038                   ___xxtofl@arg 000B                   ___xxtofl@exp 000A  
                 ___xxtofl@val 0001              _buggy_lights_init 3626                     __accesstop 0060  
      __end_of__initialization 34F4       __end_of_color_read_Clear 33D2       __end_of_color_read_Green 3382  
       ?_I2C_2_Master_RepStart 0001             ?_buggy_lights_init 0001                  ___rparam_used 0001  
                   ___fltol@f1 0028               ?_color_read_Blue 0005                 __pcstackCOMRAM 0001  
                 __pidataBANK0 3754            ??_buggy_lights_init 0001                  __end_of_fputc 2C54  
                __end_of_putch 37EA            __end_of_Timer0_init 36CE     __end_of_forward_navigation 2832  
                 ?_start_timer 0001                        ??_fputc 0004      __end_of_buggy_lights_init 3654  
                      ??_putch 0001                     __pbssBANK0 0060                     __pbssBANK1 01A4  
                   _getRGBCval 328C              _color_writetoaddr 3716                   _T2CLKCONbits 0FBF  
           ?_color_writetoaddr 0003                        ?___lmul 0001                        ?___wmul 0001  
        __end_of_wait_for_wall 3542                 ___lmul@product 0009            ??_color_writetoaddr 0004  
                    ?___xxtofl 0001                        _SP4BRGH 0EE6                        _SP4BRGL 0EE5  
                 ?_write_timer 0001                   ?_write_trail 0001                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5         color_writetoaddr@value 0003               ??_color_read_Red 0007  
    __end_of_color_writetoaddr 3736             _I2C_2_Master_Start 37D6                     _initUSART4 3736  
           _I2C_2_Master_Write 379E                        __Hparam 0000                        __Lparam 0000  
            color_read_Red@tmp 000A                    _Timer0_init 36A6        sendStringSerial4@string 0002  
                      ___awdiv 2AD6                        ___awmod 2C54                        ___flmul 194A  
                      ___fltol 2832                        ___lldiv 2D04                  convert_HSV@p1 000E  
          ?_I2C_2_Master_Start 0001                  convert_HSV@p2 000F                        ___lwdiv 3034  
          ?_I2C_2_Master_Write 0001                        ___lwmod 3112                      ?_vfprintf 001C  
            wait_for_wall@loss 000E                   __psmallconst 0E00          sendArrayCharSerial4@i 01A2  
                      __pcinit 34BA                        __ramtop 0E00                        __ptext0 2430  
                      __ptext1 36F4                        __ptext2 3736                        __ptext3 2DA8  
                      __ptext4 26FA                        __ptext5 3584                        __ptext6 34FE  
                      __ptext7 2A0E                        __ptext8 37E0                        __ptext9 2E38  
                   _read_timer 3788                        _max_RGB 2F42                        _min_RGB 2EC6  
                    _T2CONbits 0FBD                     ??___xxtofl 0005               ___awmod@dividend 0001  
            __end_of_scale_RGB 2A0E                      _T2HLTbits 0FBE                        _sprintf 346E  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 34F4  
            _sendHSVvalSerial4 3422       forward_navigation@timerH 005B       forward_navigation@timerL 005C  
                  ?_getRGBCval 000C                        fputc@fp 0003              ?_color_click_init 0001  
           ?_sendHSVvalSerial4 003A                ___lldiv@divisor 0005                colour_to_key@p1 0001  
              colour_to_key@p2 0002             ??_color_click_init 0005               ??_sendIntSerial4 003C  
              ___lldiv@counter 000D                   _average_RGBC 2080              __end_of_vfpfcnvrt 2080  
          ??_sendHSVvalSerial4 003B           convert_HSV@hue_scale 003C                        postdec1 0FE5  
                      postdec2 0FDD                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0017                     ??_vfprintf 001F  
              _initDCmotorsPWM 2DA8           sendIntSerial4@string 003C             setMotorPWM@negDuty 0012  
         convert_HSV@sat_scale 0018                   read_timer@tH 0001                   read_timer@tL 0002  
                ___xxtofl@sign 0009                      _TRISAbits 0F81             setMotorPWM@posDuty 0011  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
    __end_of_sendHSVvalSerial4 346E       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  ___flmul@grs 001C                    _CCP1CONbits 0FAB              ?_color_read_Clear 0005  
                  _CCP2CONbits 0FA7              ?_color_read_Green 0005                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001  
                   main@motorL 008B                     main@motorR 0094             ??_color_read_Clear 0007  
           ??_color_read_Green 0007                     _stop_timer 37E0                 __end_of___lmul 3112  
                  vfpfcnvrt@ap 0010                    vfpfcnvrt@cp 0016                    vfpfcnvrt@fp 000E  
               __end_of___wmul 36F4                    ?_read_timer 0001      sendRGBCvalSerial4@col_val 003A  
     sendHSVvalSerial4@col_val 003A            color_read_Clear@tmp 000A            start_initialization 34BA  
                ??_convert_HSV 0010                    __end_of_ISR 0042                    __end_of_abs 35F2  
             _turnRight90Delay 00BB      sendRGBCvalSerial4@tempStr 003B       sendHSVvalSerial4@tempStr 003B  
        __end_of_colour_to_key 194A             _forward_navigation 26FA            color_read_Green@tmp 000A  
          ?_forward_navigation 0055        __end_of_initDCmotorsPWM 2E38                    vfprintf@fmt 001D  
                     ??___lmul 0009                       ??___wmul 0005                    __pdataBANK0 00AB  
                   scale_RGB@p 0032                 max_RGB@max_val 0005           ??_forward_navigation 0059  
                    ___flmul@a 0013                      ___flmul@b 000F                    __pbssCOMRAM 005E  
                __pcstackBANK0 0088                  __pcstackBANK1 0100            _wall_threshold_blue 00BF  
              convert_HSV@temp 0024   __end_of_sendArrayCharSerial4 3034            __end_of_convert_HSV 14E6  
      sendArrayCharSerial4@arr 003A   __end_of_toggle_tricolour_LED 2AD6               ___lwdiv@dividend 0007  
                 ?_Timer0_init 0001                    ?_stop_timer 0001                      __pintcode 0008  
                     ?___awdiv 0001                       ?___awmod 0001                       ?___flmul 000F  
                     ?___fltol 0028                       ?___lldiv 0001                       ?___lwdiv 0007  
                     ?___lwmod 0001           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
                     ?_max_RGB 0001                       ?_min_RGB 0001                    __smallconst 0E00  
            _I2C_2_Master_Idle 367E              _I2C_2_Master_Init 3654              _I2C_2_Master_Read 3542  
            _I2C_2_Master_Stop 37CC             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 000F             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000B                  _headbuttDelay 00B3       initDCmotorsPWM@PWMperiod 0001  
                     ?_sprintf 0020                      _scale_RGB 2938                      _rampDelay 00C4  
                 ??_getRGBCval 000D              _sendStringSerial4 3176            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B  
                     _LATDbits 0F7C                       _LATEbits 0F7D                       _LATFbits 0F7E  
                     _LATGbits 0F7F                       _LATHbits 0F80                       _PIE0bits 0E29  
           ?_sendStringSerial4 0002                  ??_reset_timer 0003                      _lost_flag 01A5  
                     _PIR0bits 0E33                       i2u380_40 001A                       i2u380_41 0016  
                     i2u381_40 002A                       i2u381_41 0026                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0001              ??_sendCharSerial4 0001                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0004                       _SSP2STAT 0ED8                      _returning 005E  
                    _vfpfcnvrt 1D74      __end_of_I2C_2_Master_Idle 36A6      __end_of_I2C_2_Master_Init 367E  
    __end_of_I2C_2_Master_Read 3584              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 37D6  
                 setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002             __end_of_getRGBCval 32E2  
   __end_of_sendRGBCvalSerial4 3236              ??_color_read_Blue 0007                    _convert_HSV 0E1A  
              main@RGBC_colour 00A3                     vfpfcnvrt@c 001B              ___lmul@multiplier 0001  
                    copy_data0 34CE      __end_of_sendStringSerial4 31D8                     ?_scale_RGB 0032  
__end_of_I2C_2_Master_RepStart 37CC             color_read_Blue@tmp 000A            __end_of_setMotorPWM 26FA  
                 ??_initUSART4 0001                       __Hrparam 0000                     vfprintf@ap 001E  
                     __Lrparam 0000                     vfprintf@fp 001C                 wait_for_wall@p 000D  
                 _sample_count 00C5                     ?_vfpfcnvrt 000E            __end_of_reset_timer 37B6  
                _wait_for_wall 34FE           _sendArrayCharSerial4 2FBE                   ??_read_timer 0003  
               convert_HSV@hue 001E                 convert_HSV@sat 001C                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                  ??_start_timer 0001                     sprintf@fmt 0022  
                   sprintf@ret 002B                       ___xxtofl 227C                     _T0CON0bits 0FD5  
                   _T0CON1bits 0FD6           _toggle_tricolour_LED 2A0E                ___lwdiv@divisor 0009  
           __end_of_initUSART4 3754                ___lwdiv@counter 000D                       __ptext10 25A6  
                     __ptext11 36CE                       __ptext20 35BE                       __ptext12 31D8  
                     __ptext21 3112                       __ptext13 3422                       __ptext30 194A  
                     __ptext22 3034                       __ptext14 2FBE                       __ptext31 3788  
                     __ptext23 2C54                       __ptext15 346E                       __ptext40 3332  
                     __ptext32 0E1A                       __ptext24 2AD6                       __ptext16 3236  
                     __ptext41 3382                       __ptext33 2EC6                       __ptext25 3176  
                     __ptext17 1D74                       __ptext50 37D6                       __ptext42 33D2  
                     __ptext34 2F42                       __ptext26 3770                       __ptext18 2B9A  
                     __ptext51 367E                       __ptext43 37C2                       __ptext35 30A8  
                     __ptext27 2938                       __ptext19 37E8                       __ptext52 3654  
                     __ptext44 3542                       __ptext36 14E6                       __ptext28 227C  
                     __ptext53 3626                       __ptext45 2D04                       __ptext37 2080  
                     __ptext29 2832                       __ptext54 36A6                       __ptext46 35F2  
                     __ptext38 328C                       __ptext55 37E4                       __ptext47 3716  
                     __ptext39 32E2                       __ptext56 37AA                       __ptext48 379E  
                     __ptext57 37B6                       __ptext49 37CC                    getRGBCval@p 000C  
                 _SSP2CON1bits 0ED9                   _SSP2CON2bits 0EDA         forward_navigation@mann 005D  
           __end_of_read_timer 379E                       isa$xinst 0000                     _RC4STAbits 0EE7  
                     int$flags 005F                       _vfprintf 3236                 ?_wait_for_wall 000D  
        ?_sendArrayCharSerial4 003A                       max_RGB@p 0001                       min_RGB@p 0001  
                   _INTCONbits 0FF2          ?_toggle_tricolour_LED 0001                  ??_write_timer 0002  
                ??_write_trail 0003                    _setMotorPWM 25A6                    ??_scale_RGB 0033  
          __end_of_start_timer 37E8                       intlevel2 0000                      sprintf@ap 002D  
                 _topGearRight 00C2              _manoeuvre_pointer 00AB               ___lwmod@dividend 0001  
             ___lldiv@dividend 0001               colour_to_key@key 0005                 main@HSV_colour 009D  
                  _reset_timer 37AA                   ??_stop_timer 0001                    ??_vfpfcnvrt 0011  
             _color_click_init 35F2          sendIntSerial4@integer 003A                    _topGearLeft 00C3  
                     sprintf@f 002E                       sprintf@s 0020                     _SSP2DATPPS 0E1D  
             ___lldiv@quotient 0009                     _SSP2CLKPPS 0E1C                ___lwmod@divisor 0003  
              ___lwmod@counter 0005                _trail_manoeuvre 01A6                    _return_flag 0087  
           __end_of_stop_timer 37E4                _manoeuvre_count 01A4                     _TX4STAbits 0EE8  
              _sendCharSerial4 3770            __end_of_write_timer 37C2            __end_of_write_trail 35BE  
  sendArrayCharSerial4@tempStr 0100                  ?_average_RGBC 000E  
