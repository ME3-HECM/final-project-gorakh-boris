

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 07 13:01:25 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    63                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    64                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    65                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    66   000000                     
    67                           ; Generated 21/07/2023 GMT
    68                           ; 
    69                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution. Publication is not required when
    83                           ;        this file is used in an embedded application.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F67K40 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101   000000                     
   102                           	psect	idataCOMRAM
   103   001EEA                     __pidataCOMRAM:
   104                           	callstack 0
   105                           
   106                           ;initializer for _headbuttDelay
   107   001EEA  0046               	dw	70
   108                           
   109                           ;initializer for _turn180Delay
   110   001EEC  01FE               	dw	510
   111                           
   112                           ;initializer for _turnRight135Delay
   113   001EEE  012C               	dw	300
   114                           
   115                           ;initializer for _turnLeft135Delay
   116   001EF0  012C               	dw	300
   117                           
   118                           ;initializer for _turnRight90Delay
   119   001EF2  00AF               	dw	175
   120                           
   121                           ;initializer for _turnLeft90Delay
   122   001EF4  00AF               	dw	175
   123                           
   124                           ;initializer for _timer_low_pointer
   125   001EF6  64                 	db	low _trail_timer_low
   126                           
   127                           ;initializer for _timer_high_pointer
   128   001EF7  78                 	db	low _trail_timer_high
   129                           
   130                           ;initializer for _turningGear
   131   001EF8  2A                 	db	42
   132                           
   133                           ;initializer for _topGearRight
   134   001EF9  14                 	db	20
   135                           
   136                           ;initializer for _topGearLeft
   137   001EFA  14                 	db	20
   138                           
   139                           ;initializer for _rampDelay
   140   001EFB  08                 	db	8
   141                           
   142                           	psect	idataBANK0
   143   001D0E                     __pidataBANK0:
   144                           	callstack 0
   145                           
   146                           ;initializer for _manoeuvre_pointer
   147   001D0E  AE                 	db	low _trail_manoeuvre
   148   001D0F  01                 	db	high _trail_manoeuvre
   149                           
   150                           ;initializer for _squareDelay
   151   001D10  012C               	dw	300
   152                           
   153                           ;initializer for _trail_timer_low
   154   001D12  01                 	db	1
   155   001D13  02                 	db	2
   156   001D14  03                 	db	3
   157   001D15  04                 	db	4
   158   001D16  05                 	db	5
   159   001D17  06                 	db	6
   160   001D18  07                 	db	7
   161   001D19  08                 	db	8
   162   001D1A  09                 	db	9
   163   001D1B  00                 	db	0
   164   001D1C  01                 	db	1
   165   001D1D  02                 	db	2
   166   001D1E  03                 	db	3
   167   001D1F  04                 	db	4
   168   001D20  05                 	db	5
   169   001D21  06                 	db	6
   170   001D22  07                 	db	7
   171   001D23  08                 	db	8
   172   001D24  09                 	db	9
   173   001D25  00                 	db	0
   174                           
   175                           ;initializer for _trail_timer_high
   176   001D26  01                 	db	1
   177   001D27  02                 	db	2
   178   001D28  03                 	db	3
   179   001D29  04                 	db	4
   180   001D2A  05                 	db	5
   181   001D2B  06                 	db	6
   182   001D2C  07                 	db	7
   183   001D2D  08                 	db	8
   184   001D2E  09                 	db	9
   185   001D2F  00                 	db	0
   186   001D30  01                 	db	1
   187   001D31  02                 	db	2
   188   001D32  03                 	db	3
   189   001D33  04                 	db	4
   190   001D34  05                 	db	5
   191   001D35  06                 	db	6
   192   001D36  07                 	db	7
   193   001D37  08                 	db	8
   194   001D38  09                 	db	9
   195   001D39  00                 	db	0
   196                           
   197                           	psect	idataBANK1
   198   001ED6                     __pidataBANK1:
   199                           	callstack 0
   200                           
   201                           ;initializer for _trail_manoeuvre
   202   001ED6  01                 	db	1
   203   001ED7  02                 	db	2
   204   001ED8  03                 	db	3
   205   001ED9  04                 	db	4
   206   001EDA  05                 	db	5
   207   001EDB  06                 	db	6
   208   001EDC  07                 	db	7
   209   001EDD  08                 	db	8
   210   001EDE  09                 	db	9
   211   001EDF  00                 	db	0
   212   001EE0  01                 	db	1
   213   001EE1  02                 	db	2
   214   001EE2  03                 	db	3
   215   001EE3  04                 	db	4
   216   001EE4  05                 	db	5
   217   001EE5  06                 	db	6
   218   001EE6  07                 	db	7
   219   001EE7  08                 	db	8
   220   001EE8  09                 	db	9
   221   001EE9  00                 	db	0
   222   000000                     _TX4REG	set	3812
   223   000000                     _RC4STAbits	set	3815
   224   000000                     _SP4BRGH	set	3814
   225   000000                     _LATEbits	set	3965
   226   000000                     _TRISEbits	set	3973
   227   000000                     _LATGbits	set	3967
   228   000000                     _TRISGbits	set	3975
   229   000000                     _LATFbits	set	3966
   230   000000                     _LATHbits	set	3968
   231   000000                     _TRISFbits	set	3974
   232   000000                     _TRISHbits	set	3976
   233   000000                     _SSP2CON2bits	set	3802
   234   000000                     _RX4PPS	set	3605
   235   000000                     _SSP2CLKPPS	set	3612
   236   000000                     _SSP2DATPPS	set	3613
   237   000000                     _RC7PPS	set	3689
   238   000000                     _RE2PPS	set	3700
   239   000000                     _LATAbits	set	3961
   240   000000                     _LATDbits	set	3964
   241   000000                     _TRISDbits	set	3972
   242   000000                     _PORTFbits	set	3982
   243   000000                     _T2PR	set	4028
   244   000000                     _T2CONbits	set	4029
   245   000000                     _CCPR2H	set	4006
   246   000000                     _CCPR1H	set	4010
   247   000000                     _TRISCbits	set	3971
   248   000000                     _TRISAbits	set	3969
   249   000000                     _LATCbits	set	3963
   250   000000                     _RE4PPS	set	3702
   251   000000                     _RG6PPS	set	3720
   252   000000                     _RD5PPS	set	3695
   253   000000                     _ANSELDbits	set	3751
   254   000000                     _SSP2ADD	set	3798
   255   000000                     _SSP2CON1bits	set	3801
   256   000000                     _CCPR4H	set	3873
   257   000000                     _CCPR3H	set	3877
   258   000000                     _TMR0L	set	4051
   259   000000                     _TMR0H	set	4052
   260   000000                     _T0CON0bits	set	4053
   261   000000                     _T0CON1bits	set	4054
   262   000000                     _T2CLKCONbits	set	4031
   263   000000                     _T2HLTbits	set	4030
   264   000000                     _CCP1CONbits	set	4011
   265   000000                     _CCPTMRS0bits	set	4013
   266   000000                     _CCP2CONbits	set	4007
   267   000000                     _CCP3CONbits	set	3878
   268   000000                     _CCP4CONbits	set	3874
   269   000000                     _RC4REG	set	3811
   270   000000                     _SP4BRGL	set	3813
   271   000000                     _TX4STAbits	set	3816
   272   000000                     _BAUD4CONbits	set	3817
   273   000000                     _SSP2CON2	set	3802
   274   000000                     _SSP2STAT	set	3800
   275   000000                     _ANSELFbits	set	3764
   276   000000                     _SSP2BUF	set	3797
   277   000000                     _PIE0bits	set	3625
   278   000000                     _PIE4bits	set	3629
   279   000000                     _PIR4bits	set	3639
   280   000000                     _RC0PPS	set	3682
   281   000000                     _RD6PPS	set	3696
   282   000000                     _PIR0bits	set	3635
   283   000000                     _INTCONbits	set	4082
   284                           
   285                           	psect	smallconst
   286   000E00                     __psmallconst:
   287                           	callstack 0
   288   000E00  00                 	db	0
   289   000E01                     STR_1:
   290   000E01  25                 	db	37
   291   000E02  64                 	db	100	;'d'
   292   000E03  20                 	db	32
   293   000E04  25                 	db	37
   294   000E05  64                 	db	100	;'d'
   295   000E06  20                 	db	32
   296   000E07  25                 	db	37
   297   000E08  64                 	db	100	;'d'
   298   000E09  20                 	db	32
   299   000E0A  25                 	db	37
   300   000E0B  64                 	db	100	;'d'
   301   000E0C  20                 	db	32
   302   000E0D  25                 	db	37
   303   000E0E  64                 	db	100	;'d'
   304   000E0F  20                 	db	32
   305   000E10  25                 	db	37
   306   000E11  64                 	db	100	;'d'
   307   000E12  20                 	db	32
   308   000E13  25                 	db	37
   309   000E14  64                 	db	100	;'d'
   310   000E15  20                 	db	32
   311   000E16  0D                 	db	13
   312   000E17  00                 	db	0
   313   000E18                     STR_3:
   314   000E18  25                 	db	37
   315   000E19  64                 	db	100	;'d'
   316   000E1A  00                 	db	0
   317   000E1B  00                 	db	0	; dummy byte at the end
   318   000000                     
   319                           ; #config settings
   320                           
   321                           	psect	cinit
   322   0017C8                     __pcinit:
   323                           	callstack 0
   324   0017C8                     start_initialization:
   325                           	callstack 0
   326   0017C8                     __initialization:
   327                           	callstack 0
   328                           
   329                           ; Initialize objects allocated to BANK1 (20 bytes)
   330                           ; load TBLPTR registers with __pidataBANK1
   331   0017C8  0ED6               	movlw	low __pidataBANK1
   332   0017CA  6EF6               	movwf	tblptrl,c
   333   0017CC  0E1E               	movlw	high __pidataBANK1
   334   0017CE  6EF7               	movwf	tblptrh,c
   335   0017D0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   336   0017D2  6EF8               	movwf	tblptru,c
   337   0017D4  EE01  F0AE         	lfsr	0,__pdataBANK1
   338   0017D8  EE10 F014          	lfsr	1,20
   339   0017DC                     copy_data0:
   340   0017DC  0009               	tblrd		*+
   341   0017DE  CFF5 FFEE          	movff	tablat,postinc0
   342   0017E2  50E5               	movf	postdec1,w,c
   343   0017E4  50E1               	movf	fsr1l,w,c
   344   0017E6  E1FA               	bnz	copy_data0
   345                           
   346                           ; Initialize objects allocated to BANK0 (44 bytes)
   347                           ; load TBLPTR registers with __pidataBANK0
   348   0017E8  0E0E               	movlw	low __pidataBANK0
   349   0017EA  6EF6               	movwf	tblptrl,c
   350   0017EC  0E1D               	movlw	high __pidataBANK0
   351   0017EE  6EF7               	movwf	tblptrh,c
   352   0017F0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   353   0017F2  6EF8               	movwf	tblptru,c
   354   0017F4  EE00  F060         	lfsr	0,__pdataBANK0
   355   0017F8  EE10 F02C          	lfsr	1,44
   356   0017FC                     copy_data1:
   357   0017FC  0009               	tblrd		*+
   358   0017FE  CFF5 FFEE          	movff	tablat,postinc0
   359   001802  50E5               	movf	postdec1,w,c
   360   001804  50E1               	movf	fsr1l,w,c
   361   001806  E1FA               	bnz	copy_data1
   362                           
   363                           ; Initialize objects allocated to COMRAM (18 bytes)
   364                           ; load TBLPTR registers with __pidataCOMRAM
   365   001808  0EEA               	movlw	low __pidataCOMRAM
   366   00180A  6EF6               	movwf	tblptrl,c
   367   00180C  0E1E               	movlw	high __pidataCOMRAM
   368   00180E  6EF7               	movwf	tblptrh,c
   369   001810  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   370   001812  6EF8               	movwf	tblptru,c
   371   001814  EE00  F037         	lfsr	0,__pdataCOMRAM
   372   001818  EE10 F012          	lfsr	1,18
   373   00181C                     copy_data2:
   374   00181C  0009               	tblrd		*+
   375   00181E  CFF5 FFEE          	movff	tablat,postinc0
   376   001822  50E5               	movf	postdec1,w,c
   377   001824  50E1               	movf	fsr1l,w,c
   378   001826  E1FA               	bnz	copy_data2
   379                           
   380                           ; Clear objects allocated to BANK1 (92 bytes)
   381   001828  EE01  F000         	lfsr	0,__pbssBANK1
   382   00182C  0E5C               	movlw	92
   383   00182E                     clear_0:
   384   00182E  6AEE               	clrf	postinc0,c
   385   001830  06E8               	decf	wreg,f,c
   386   001832  E1FD               	bnz	clear_0
   387                           
   388                           ; Clear objects allocated to BANK0 (24 bytes)
   389   001834  EE00  F08C         	lfsr	0,__pbssBANK0
   390   001838  0E18               	movlw	24
   391   00183A                     clear_1:
   392   00183A  6AEE               	clrf	postinc0,c
   393   00183C  06E8               	decf	wreg,f,c
   394   00183E  E1FD               	bnz	clear_1
   395                           
   396                           ; Clear objects allocated to COMRAM (8 bytes)
   397   001840  EE00  F049         	lfsr	0,__pbssCOMRAM
   398   001844  0E08               	movlw	8
   399   001846                     clear_2:
   400   001846  6AEE               	clrf	postinc0,c
   401   001848  06E8               	decf	wreg,f,c
   402   00184A  E1FD               	bnz	clear_2
   403   00184C                     end_of_initialization:
   404                           	callstack 0
   405   00184C                     __end_of__initialization:
   406                           	callstack 0
   407   00184C  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   408   00184E  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   409   001850  0100               	movlb	0
   410   001852  EFB7  F009         	goto	_main	;jump to C main() function
   411                           
   412                           	psect	bssCOMRAM
   413   000049                     __pbssCOMRAM:
   414                           	callstack 0
   415   000049                     _nout:
   416                           	callstack 0
   417   000049                     	ds	2
   418   00004B                     _flags:
   419                           	callstack 0
   420   00004B                     	ds	1
   421   00004C                     _backtrack:
   422                           	callstack 0
   423   00004C                     	ds	1
   424   00004D                     _TxBufReadCnt:
   425                           	callstack 0
   426   00004D                     	ds	1
   427   00004E                     _TxBufWriteCnt:
   428                           	callstack 0
   429   00004E                     	ds	1
   430   00004F                     _RxBufReadCnt:
   431                           	callstack 0
   432   00004F                     	ds	1
   433   000050                     _RxBufWriteCnt:
   434                           	callstack 0
   435   000050                     	ds	1
   436                           
   437                           	psect	dataCOMRAM
   438   000037                     __pdataCOMRAM:
   439                           	callstack 0
   440   000037                     _headbuttDelay:
   441                           	callstack 0
   442   000037                     	ds	2
   443   000039                     _turn180Delay:
   444                           	callstack 0
   445   000039                     	ds	2
   446   00003B                     _turnRight135Delay:
   447                           	callstack 0
   448   00003B                     	ds	2
   449   00003D                     _turnLeft135Delay:
   450                           	callstack 0
   451   00003D                     	ds	2
   452   00003F                     _turnRight90Delay:
   453                           	callstack 0
   454   00003F                     	ds	2
   455   000041                     _turnLeft90Delay:
   456                           	callstack 0
   457   000041                     	ds	2
   458   000043                     _timer_low_pointer:
   459                           	callstack 0
   460   000043                     	ds	1
   461   000044                     _timer_high_pointer:
   462                           	callstack 0
   463   000044                     	ds	1
   464   000045                     _turningGear:
   465                           	callstack 0
   466   000045                     	ds	1
   467   000046                     _topGearRight:
   468                           	callstack 0
   469   000046                     	ds	1
   470   000047                     _topGearLeft:
   471                           	callstack 0
   472   000047                     	ds	1
   473   000048                     _rampDelay:
   474                           	callstack 0
   475   000048                     	ds	1
   476                           
   477                           	psect	bssBANK0
   478   00008C                     __pbssBANK0:
   479                           	callstack 0
   480   00008C                     _EUSART4RXbuf:
   481                           	callstack 0
   482   00008C                     	ds	20
   483   0000A0                     _width:
   484                           	callstack 0
   485   0000A0                     	ds	2
   486   0000A2                     _prec:
   487                           	callstack 0
   488   0000A2                     	ds	2
   489                           
   490                           	psect	dataBANK0
   491   000060                     __pdataBANK0:
   492                           	callstack 0
   493   000060                     _manoeuvre_pointer:
   494                           	callstack 0
   495   000060                     	ds	2
   496   000062                     _squareDelay:
   497                           	callstack 0
   498   000062                     	ds	2
   499   000064                     _trail_timer_low:
   500                           	callstack 0
   501   000064                     	ds	20
   502   000078                     _trail_timer_high:
   503                           	callstack 0
   504   000078                     	ds	20
   505                           
   506                           	psect	bssBANK1
   507   000100                     __pbssBANK1:
   508                           	callstack 0
   509   000100                     _EUSART4TXbuf:
   510                           	callstack 0
   511   000100                     	ds	60
   512   00013C                     _dbuf:
   513                           	callstack 0
   514   00013C                     	ds	32
   515                           
   516                           	psect	dataBANK1
   517   0001AE                     __pdataBANK1:
   518                           	callstack 0
   519   0001AE                     _trail_manoeuvre:
   520                           	callstack 0
   521   0001AE                     	ds	20
   522                           
   523                           	psect	cstackBANK1
   524   00015C                     __pcstackBANK1:
   525                           	callstack 0
   526   00015C                     main@display:
   527                           	callstack 0
   528                           
   529                           ; 50 bytes @ 0x0
   530   00015C                     	ds	50
   531   00018E                     main@motorL:
   532                           	callstack 0
   533                           
   534                           ; 9 bytes @ 0x32
   535   00018E                     	ds	9
   536   000197                     main@motorR:
   537                           	callstack 0
   538                           
   539                           ; 9 bytes @ 0x3B
   540   000197                     	ds	9
   541   0001A0                     main@readHSV:
   542                           	callstack 0
   543                           
   544                           ; 6 bytes @ 0x44
   545   0001A0                     	ds	6
   546   0001A6                     main@readRGBC:
   547                           	callstack 0
   548                           
   549                           ; 8 bytes @ 0x4A
   550   0001A6                     	ds	8
   551                           
   552                           	psect	cstackBANK0
   553   0000A4                     __pcstackBANK0:
   554                           	callstack 0
   555   0000A4                     sprintf@ret:
   556                           	callstack 0
   557                           
   558                           ; 2 bytes @ 0x0
   559   0000A4                     	ds	2
   560   0000A6                     sprintf@ap:
   561                           	callstack 0
   562                           
   563                           ; 1 bytes @ 0x2
   564   0000A6                     	ds	1
   565   0000A7                     sprintf@f:
   566                           	callstack 0
   567                           
   568                           ; 12 bytes @ 0x3
   569   0000A7                     	ds	12
   570                           
   571                           	psect	cstackCOMRAM
   572   000001                     __pcstackCOMRAM:
   573                           	callstack 0
   574   000001                     ??_getCharFromTxBuf:
   575   000001                     putCharToRxBuf@byte:
   576                           	callstack 0
   577   000001                     
   578                           ; 1 bytes @ 0x0
   579   000001                     	ds	2
   580   000003                     ??_HighISR:
   581                           
   582                           ; 1 bytes @ 0x2
   583   000003                     	ds	2
   584   000005                     ??_I2C_2_Master_Idle:
   585   000005                     ?_max:
   586                           	callstack 0
   587   000005                     ?_min:
   588                           	callstack 0
   589   000005                     ?___wmul:
   590                           	callstack 0
   591   000005                     ?___awmod:
   592                           	callstack 0
   593   000005                     putCharToTxBuf@byte:
   594                           	callstack 0
   595   000005                     max@a:
   596                           	callstack 0
   597   000005                     min@a:
   598                           	callstack 0
   599   000005                     initDCmotorsPWM@PWMperiod:
   600                           	callstack 0
   601   000005                     ___wmul@multiplier:
   602                           	callstack 0
   603   000005                     ___awmod@dividend:
   604                           	callstack 0
   605   000005                     fputc@c:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0x4
   609   000005                     	ds	1
   610   000006                     ??_I2C_2_Master_Read:
   611   000006                     I2C_2_Master_Write@data_byte:
   612                           	callstack 0
   613   000006                     TxBufferedString@string:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0x5
   617   000006                     	ds	1
   618   000007                     color_writetoaddr@value:
   619                           	callstack 0
   620   000007                     I2C_2_Master_Read@ack:
   621                           	callstack 0
   622   000007                     fputc@fp:
   623                           	callstack 0
   624   000007                     max@b:
   625                           	callstack 0
   626   000007                     min@b:
   627                           	callstack 0
   628   000007                     ___wmul@multiplicand:
   629                           	callstack 0
   630   000007                     ___awmod@divisor:
   631                           	callstack 0
   632                           
   633                           ; 2 bytes @ 0x6
   634   000007                     	ds	1
   635   000008                     ??_fputc:
   636   000008                     color_writetoaddr@address:
   637                           	callstack 0
   638   000008                     I2C_2_Master_Read@tmp:
   639                           	callstack 0
   640                           
   641                           ; 1 bytes @ 0x7
   642   000008                     	ds	1
   643   000009                     ??_color_click_init:
   644   000009                     ??_max:
   645   000009                     ??_min:
   646   000009                     ?_color_read_Red:
   647                           	callstack 0
   648   000009                     ?_color_read_Blue:
   649                           	callstack 0
   650   000009                     ?_color_read_Green:
   651                           	callstack 0
   652   000009                     ?_color_read_Clear:
   653                           	callstack 0
   654   000009                     ___awmod@counter:
   655                           	callstack 0
   656   000009                     ___wmul@product:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x8
   660   000009                     	ds	1
   661   00000A                     ___awmod@sign:
   662                           	callstack 0
   663   00000A                     max@max_val:
   664                           	callstack 0
   665   00000A                     min@min_val:
   666                           	callstack 0
   667                           
   668                           ; 2 bytes @ 0x9
   669   00000A                     	ds	1
   670   00000B                     ??_color_read_Red:
   671   00000B                     ??_color_read_Blue:
   672   00000B                     ??_color_read_Green:
   673   00000B                     ??_color_read_Clear:
   674   00000B                     ?_abs:
   675                           	callstack 0
   676   00000B                     ?___awdiv:
   677                           	callstack 0
   678   00000B                     ?___lwdiv:
   679                           	callstack 0
   680   00000B                     ___awdiv@dividend:
   681                           	callstack 0
   682   00000B                     ___lwdiv@dividend:
   683                           	callstack 0
   684   00000B                     abs@a:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0xA
   688   00000B                     	ds	2
   689   00000D                     ??_abs:
   690   00000D                     ___awdiv@divisor:
   691                           	callstack 0
   692   00000D                     ___lwdiv@divisor:
   693                           	callstack 0
   694                           
   695                           ; 2 bytes @ 0xC
   696   00000D                     	ds	1
   697   00000E                     color_read_Red@tmp:
   698                           	callstack 0
   699   00000E                     color_read_Blue@tmp:
   700                           	callstack 0
   701   00000E                     color_read_Green@tmp:
   702                           	callstack 0
   703   00000E                     color_read_Clear@tmp:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0xD
   707   00000E                     	ds	1
   708   00000F                     ___awdiv@counter:
   709                           	callstack 0
   710   00000F                     ___lwdiv@counter:
   711                           	callstack 0
   712                           
   713                           ; 1 bytes @ 0xE
   714   00000F                     	ds	1
   715   000010                     ___awdiv@sign:
   716                           	callstack 0
   717   000010                     getRGBCval@p:
   718                           	callstack 0
   719   000010                     ___lwdiv@quotient:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0xF
   723   000010                     	ds	1
   724   000011                     ___awdiv@quotient:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x10
   728   000011                     	ds	1
   729   000012                     ?___lwmod:
   730                           	callstack 0
   731   000012                     ___lwmod@dividend:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x11
   735   000012                     	ds	1
   736   000013                     ?_vfpfcnvrt:
   737                           	callstack 0
   738   000013                     vfpfcnvrt@fp:
   739                           	callstack 0
   740                           
   741                           ; 1 bytes @ 0x12
   742   000013                     	ds	1
   743   000014                     vfpfcnvrt@fmt:
   744                           	callstack 0
   745   000014                     ___lwmod@divisor:
   746                           	callstack 0
   747                           
   748                           ; 2 bytes @ 0x13
   749   000014                     	ds	1
   750   000015                     vfpfcnvrt@ap:
   751                           	callstack 0
   752                           
   753                           ; 1 bytes @ 0x14
   754   000015                     	ds	1
   755   000016                     ??_vfpfcnvrt:
   756   000016                     ___lwmod@counter:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0x15
   760   000016                     	ds	1
   761   000017                     vfpfcnvrt@done:
   762                           	callstack 0
   763   000017                     getHSVval@p1:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0x16
   767   000017                     	ds	1
   768   000018                     vfpfcnvrt@cnt:
   769                           	callstack 0
   770                           
   771                           ; 2 bytes @ 0x17
   772   000018                     	ds	1
   773   000019                     getHSVval@p2:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x18
   777   000019                     	ds	1
   778   00001A                     vfpfcnvrt@cp:
   779                           	callstack 0
   780                           
   781                           ; 1 bytes @ 0x19
   782   00001A                     	ds	1
   783   00001B                     ??_getHSVval:
   784   00001B                     vfpfcnvrt@convarg:
   785                           	callstack 0
   786                           
   787                           ; 4 bytes @ 0x1A
   788   00001B                     	ds	4
   789   00001F                     vfpfcnvrt@c:
   790                           	callstack 0
   791   00001F                     getHSVval@minRGB:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x1E
   795   00001F                     	ds	1
   796   000020                     ?_vfprintf:
   797                           	callstack 0
   798   000020                     vfprintf@fp:
   799                           	callstack 0
   800                           
   801                           ; 1 bytes @ 0x1F
   802   000020                     	ds	1
   803   000021                     vfprintf@fmt:
   804                           	callstack 0
   805   000021                     _getHSVval$3064:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x20
   809   000021                     	ds	1
   810   000022                     vfprintf@ap:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x21
   814   000022                     	ds	1
   815   000023                     vfprintf@cfmt:
   816                           	callstack 0
   817   000023                     _getHSVval$3065:
   818                           	callstack 0
   819                           
   820                           ; 2 bytes @ 0x22
   821   000023                     	ds	1
   822   000024                     ?_sprintf:
   823                           	callstack 0
   824   000024                     sprintf@s:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0x23
   828   000024                     	ds	1
   829   000025                     getHSVval@saturation:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x24
   833   000025                     	ds	1
   834   000026                     sprintf@fmt:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x25
   838   000026                     	ds	1
   839   000027                     getHSVval@hue:
   840                           	callstack 0
   841                           
   842                           ; 2 bytes @ 0x26
   843   000027                     	ds	2
   844   000029                     _getHSVval$3066:
   845                           	callstack 0
   846                           
   847                           ; 2 bytes @ 0x28
   848   000029                     	ds	2
   849   00002B                     getHSVval@range:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x2A
   853   00002B                     	ds	2
   854   00002D                     getHSVval@maxRGB:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x2C
   858   00002D                     	ds	8
   859   000035                     ??_main:
   860                           
   861                           ; 1 bytes @ 0x34
   862   000035                     	ds	2
   863                           
   864 ;;
   865 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   866 ;;
   867 ;; *************** function _main *****************
   868 ;; Defined at:
   869 ;;		line 27 in file "main.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;		None
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  display        50    0[BANK1 ] unsigned char [50]
   874 ;;  motorR          9   59[BANK1 ] struct DC_motor
   875 ;;  motorL          9   50[BANK1 ] struct DC_motor
   876 ;;  readRGBC        8   74[BANK1 ] struct RGBC_val
   877 ;;  readHSV         6   68[BANK1 ] struct HSV_val
   878 ;;  PWMcycle        2    0        unsigned int 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   889 ;;      Locals:         0       0      82       0       0       0       0       0       0       0       0       0       
      +0       0       0
   890 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   891 ;;      Totals:         2       0      82       0       0       0       0       0       0       0       0       0       
      +0       0       0
   892 ;;Total ram usage:       84 bytes
   893 ;; Hardware stack levels required when called: 7
   894 ;; This function calls:
   895 ;;		_Interrupts_init
   896 ;;		_Timer0_init
   897 ;;		_TxBufferedString
   898 ;;		_buggy_lights_init
   899 ;;		_color_click_init
   900 ;;		_getHSVval
   901 ;;		_getRGBCval
   902 ;;		_initDCmotorsPWM
   903 ;;		_initUSART4
   904 ;;		_sendTxBuf
   905 ;;		_sprintf
   906 ;; This function is called by:
   907 ;;		Startup code after reset
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text0
   912   00136E                     __ptext0:
   913                           	callstack 0
   914   00136E                     _main:
   915                           	callstack 24
   916   00136E                     
   917                           ;main.c: 28:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   918   00136E  0E52               	movlw	82
   919   001370  6E36               	movwf	(??_main+1)^0,c
   920   001372  0E2B               	movlw	43
   921   001374  6E35               	movwf	??_main^0,c
   922   001376  0E00               	movlw	0
   923   001378                     u3117:
   924   001378  2EE8               	decfsz	wreg,f,c
   925   00137A  D7FE               	bra	u3117
   926   00137C  2E35               	decfsz	??_main^0,f,c
   927   00137E  D7FC               	bra	u3117
   928   001380  2E36               	decfsz	(??_main+1)^0,f,c
   929   001382  D7FA               	bra	u3117
   930   001384  D000               	nop2	
   931   001386                     
   932                           ;main.c: 31:     initDCmotorsPWM(PWMcycle);
   933   001386  0E00               	movlw	0
   934   001388  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   935   00138A  0E63               	movlw	99
   936   00138C  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   937   00138E  EC9C  F00B         	call	_initDCmotorsPWM	;wreg free
   938   001392                     
   939                           ;main.c: 33:     struct DC_motor motorL, motorR;;main.c: 35:     motorL.power = 0;
   940   001392  0E00               	movlw	0
   941   001394  0101               	movlb	1	; () banked
   942   001396  6F8E               	movwf	main@motorL& (0+255),b
   943   001398                     
   944                           ; BSR set to: 1
   945                           ;main.c: 36:     motorL.direction = 1;
   946   001398  0E01               	movlw	1
   947   00139A  6F8F               	movwf	(main@motorL+1)& (0+255),b
   948   00139C                     
   949                           ; BSR set to: 1
   950                           ;main.c: 37:     motorL.brakemode = 1;
   951   00139C  0E01               	movlw	1
   952   00139E  6F90               	movwf	(main@motorL+2)& (0+255),b
   953   0013A0                     
   954                           ; BSR set to: 1
   955                           ;main.c: 38:     motorL.PWMperiod = PWMcycle;
   956   0013A0  0E00               	movlw	0
   957   0013A2  6F92               	movwf	(main@motorL+4)& (0+255),b
   958   0013A4  0E63               	movlw	99
   959   0013A6  6F91               	movwf	(main@motorL+3)& (0+255),b
   960   0013A8                     
   961                           ; BSR set to: 1
   962                           ;main.c: 39:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   963   0013A8  0EAA               	movlw	170
   964   0013AA  6F93               	movwf	(main@motorL+5)& (0+255),b
   965   0013AC  0E0F               	movlw	15
   966   0013AE  6F94               	movwf	(main@motorL+6)& (0+255),b
   967   0013B0                     
   968                           ; BSR set to: 1
   969                           ;main.c: 40:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   970   0013B0  0EA6               	movlw	166
   971   0013B2  6F95               	movwf	(main@motorL+7)& (0+255),b
   972   0013B4  0E0F               	movlw	15
   973   0013B6  6F96               	movwf	(main@motorL+8)& (0+255),b
   974   0013B8                     
   975                           ; BSR set to: 1
   976                           ;main.c: 42:     motorR.power = 0;
   977   0013B8  0E00               	movlw	0
   978   0013BA  6F97               	movwf	main@motorR& (0+255),b
   979   0013BC                     
   980                           ; BSR set to: 1
   981                           ;main.c: 43:     motorR.direction = 1;
   982   0013BC  0E01               	movlw	1
   983   0013BE  6F98               	movwf	(main@motorR+1)& (0+255),b
   984   0013C0                     
   985                           ; BSR set to: 1
   986                           ;main.c: 44:     motorR.brakemode = 1;
   987   0013C0  0E01               	movlw	1
   988   0013C2  6F99               	movwf	(main@motorR+2)& (0+255),b
   989   0013C4                     
   990                           ; BSR set to: 1
   991                           ;main.c: 45:     motorR.PWMperiod = PWMcycle;
   992   0013C4  0E00               	movlw	0
   993   0013C6  6F9B               	movwf	(main@motorR+4)& (0+255),b
   994   0013C8  0E63               	movlw	99
   995   0013CA  6F9A               	movwf	(main@motorR+3)& (0+255),b
   996   0013CC                     
   997                           ; BSR set to: 1
   998                           ;main.c: 46:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   999   0013CC  0E25               	movlw	37
  1000   0013CE  6F9C               	movwf	(main@motorR+5)& (0+255),b
  1001   0013D0  0E0F               	movlw	15
  1002   0013D2  6F9D               	movwf	(main@motorR+6)& (0+255),b
  1003   0013D4                     
  1004                           ; BSR set to: 1
  1005                           ;main.c: 47:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1006   0013D4  0E21               	movlw	33
  1007   0013D6  6F9E               	movwf	(main@motorR+7)& (0+255),b
  1008   0013D8  0E0F               	movlw	15
  1009   0013DA  6F9F               	movwf	(main@motorR+8)& (0+255),b
  1010   0013DC                     
  1011                           ; BSR set to: 1
  1012                           ;main.c: 51:     struct RGBC_val readRGBC;;main.c: 53:     readRGBC.R = 0;
  1013   0013DC  0E00               	movlw	0
  1014   0013DE  6FA7               	movwf	(main@readRGBC+1)& (0+255),b
  1015   0013E0  0E00               	movlw	0
  1016   0013E2  6FA6               	movwf	main@readRGBC& (0+255),b
  1017   0013E4                     
  1018                           ; BSR set to: 1
  1019                           ;main.c: 54:     readRGBC.B = 0;
  1020   0013E4  0E00               	movlw	0
  1021   0013E6  6FAB               	movwf	(main@readRGBC+5)& (0+255),b
  1022   0013E8  0E00               	movlw	0
  1023   0013EA  6FAA               	movwf	(main@readRGBC+4)& (0+255),b
  1024   0013EC                     
  1025                           ; BSR set to: 1
  1026                           ;main.c: 55:     readRGBC.G = 0;
  1027   0013EC  0E00               	movlw	0
  1028   0013EE  6FA9               	movwf	(main@readRGBC+3)& (0+255),b
  1029   0013F0  0E00               	movlw	0
  1030   0013F2  6FA8               	movwf	(main@readRGBC+2)& (0+255),b
  1031   0013F4                     
  1032                           ; BSR set to: 1
  1033                           ;main.c: 56:     readRGBC.C = 0;
  1034   0013F4  0E00               	movlw	0
  1035   0013F6  6FAD               	movwf	(main@readRGBC+7)& (0+255),b
  1036   0013F8  0E00               	movlw	0
  1037   0013FA  6FAC               	movwf	(main@readRGBC+6)& (0+255),b
  1038   0013FC                     
  1039                           ; BSR set to: 1
  1040                           ;main.c: 59:     struct HSV_val readHSV;;main.c: 61:     readHSV.H = 0;
  1041   0013FC  0E00               	movlw	0
  1042   0013FE  6FA1               	movwf	(main@readHSV+1)& (0+255),b
  1043   001400  0E00               	movlw	0
  1044   001402  6FA0               	movwf	main@readHSV& (0+255),b
  1045   001404                     
  1046                           ; BSR set to: 1
  1047                           ;main.c: 62:     readHSV.S = 0;
  1048   001404  0E00               	movlw	0
  1049   001406  6FA3               	movwf	(main@readHSV+3)& (0+255),b
  1050   001408  0E00               	movlw	0
  1051   00140A  6FA2               	movwf	(main@readHSV+2)& (0+255),b
  1052   00140C                     
  1053                           ; BSR set to: 1
  1054                           ;main.c: 63:     readHSV.V = 0;
  1055   00140C  0E00               	movlw	0
  1056   00140E  6FA5               	movwf	(main@readHSV+5)& (0+255),b
  1057   001410  0E00               	movlw	0
  1058   001412  6FA4               	movwf	(main@readHSV+4)& (0+255),b
  1059   001414                     
  1060                           ; BSR set to: 1
  1061                           ;main.c: 67:     buggy_lights_init();
  1062   001414  ECB7  F00D         	call	_buggy_lights_init	;wreg free
  1063   001418                     
  1064                           ;main.c: 68:     color_click_init();
  1065   001418  EC55  F00E         	call	_color_click_init	;wreg free
  1066   00141C                     
  1067                           ;main.c: 69:     initUSART4();
  1068   00141C  EC37  F00F         	call	_initUSART4	;wreg free
  1069   001420                     
  1070                           ;main.c: 70:     Timer0_init();
  1071   001420  EC27  F00F         	call	_Timer0_init	;wreg free
  1072   001424                     
  1073                           ;main.c: 71:     Interrupts_init();
  1074   001424  EC7E  F00F         	call	_Interrupts_init	;wreg free
  1075   001428                     
  1076                           ;main.c: 76:     TRISFbits.TRISF2 = 1;
  1077   001428  8486               	bsf	134,2,c	;volatile
  1078   00142A                     
  1079                           ;main.c: 77:     TRISFbits.TRISF3 = 1;
  1080   00142A  8686               	bsf	134,3,c	;volatile
  1081   00142C                     
  1082                           ;main.c: 79:     ANSELFbits.ANSELF2 = 0;
  1083   00142C  010E               	movlb	14	; () banked
  1084   00142E  95B4               	bcf	180,2,b	;volatile
  1085   001430                     
  1086                           ; BSR set to: 14
  1087                           ;main.c: 80:     ANSELFbits.ANSELF3 = 0;
  1088   001430  97B4               	bcf	180,3,b	;volatile
  1089   001432                     l4245:
  1090                           
  1091                           ;main.c: 101:         if (!PORTFbits.RF2) {
  1092   001432  B48E               	btfsc	142,2,c	;volatile
  1093   001434  EF1E  F00A         	goto	u3081
  1094   001438  EF20  F00A         	goto	u3080
  1095   00143C                     u3081:
  1096   00143C  EF39  F00A         	goto	l4253
  1097   001440                     u3080:
  1098   001440                     
  1099                           ;main.c: 102:             *manoeuvre_pointer = 0;
  1100   001440  C060  FFD9         	movff	_manoeuvre_pointer,fsr2l
  1101   001444  C061  FFDA         	movff	_manoeuvre_pointer+1,fsr2h
  1102   001448  6ADF               	clrf	indf2,c
  1103   00144A                     
  1104                           ;main.c: 103:             manoeuvre_pointer ++;
  1105   00144A  0100               	movlb	0	; () banked
  1106   00144C  4B60               	infsnz	_manoeuvre_pointer& (0+255),f,b
  1107   00144E  2B61               	incf	(_manoeuvre_pointer+1)& (0+255),f,b
  1108   001450                     
  1109                           ; BSR set to: 0
  1110                           ;main.c: 104:             LATDbits.LATD7 = !LATDbits.LATD7;
  1111   001450  AE7C               	btfss	124,7,c	;volatile
  1112   001452  EF2D  F00A         	goto	u3091
  1113   001456  EF31  F00A         	goto	u3090
  1114   00145A                     u3091:
  1115   00145A  6A35               	clrf	??_main^0,c
  1116   00145C  2A35               	incf	??_main^0,f,c
  1117   00145E  EF32  F00A         	goto	u3108
  1118   001462                     u3090:
  1119   001462  6A35               	clrf	??_main^0,c
  1120   001464                     u3108:
  1121   001464  3235               	rrcf	??_main^0,f,c
  1122   001466  3235               	rrcf	??_main^0,f,c
  1123   001468  507C               	movf	124,w,c	;volatile
  1124   00146A  1835               	xorwf	??_main^0,w,c
  1125   00146C  0B7F               	andlw	-129
  1126   00146E  1835               	xorwf	??_main^0,w,c
  1127   001470  6E7C               	movwf	124,c	;volatile
  1128   001472                     l4253:
  1129                           
  1130                           ;main.c: 106:         getRGBCval(&readRGBC);
  1131   001472  0EA6               	movlw	low main@readRGBC
  1132   001474  6E10               	movwf	getRGBCval@p^0,c
  1133   001476  0E01               	movlw	high main@readRGBC
  1134   001478  6E11               	movwf	(getRGBCval@p+1)^0,c
  1135   00147A  EC97  F00C         	call	_getRGBCval	;wreg free
  1136   00147E                     
  1137                           ;main.c: 107:         getHSVval(&readHSV,&readRGBC);
  1138   00147E  0EA0               	movlw	low main@readHSV
  1139   001480  6E17               	movwf	getHSVval@p1^0,c
  1140   001482  0E01               	movlw	high main@readHSV
  1141   001484  6E18               	movwf	(getHSVval@p1+1)^0,c
  1142   001486  0EA6               	movlw	low main@readRGBC
  1143   001488  6E19               	movwf	getHSVval@p2^0,c
  1144   00148A  0E01               	movlw	high main@readRGBC
  1145   00148C  6E1A               	movwf	(getHSVval@p2+1)^0,c
  1146   00148E  EC0E  F007         	call	_getHSVval	;wreg free
  1147   001492                     
  1148                           ;main.c: 108:         sprintf(display, "%d %d %d %d %d %d %d \r",readRGBC.R,readRGBC.G,r
      +                          eadRGBC.B,readRGBC.C,readHSV.H,readHSV.S,readHSV.V);
  1149   001492  0E5C               	movlw	low main@display
  1150   001494  6E24               	movwf	sprintf@s^0,c
  1151   001496  0E01               	movlw	high main@display
  1152   001498  6E25               	movwf	(sprintf@s+1)^0,c
  1153   00149A  0E01               	movlw	low STR_1
  1154   00149C  6E26               	movwf	sprintf@fmt^0,c
  1155   00149E  C1A6  F027         	movff	main@readRGBC,?_sprintf+3
  1156   0014A2  C1A7  F028         	movff	main@readRGBC+1,?_sprintf+4
  1157   0014A6  C1A8  F029         	movff	main@readRGBC+2,?_sprintf+5
  1158   0014AA  C1A9  F02A         	movff	main@readRGBC+3,?_sprintf+6
  1159   0014AE  C1AA  F02B         	movff	main@readRGBC+4,?_sprintf+7
  1160   0014B2  C1AB  F02C         	movff	main@readRGBC+5,?_sprintf+8
  1161   0014B6  C1AC  F02D         	movff	main@readRGBC+6,?_sprintf+9
  1162   0014BA  C1AD  F02E         	movff	main@readRGBC+7,?_sprintf+10
  1163   0014BE  C1A0  F02F         	movff	main@readHSV,?_sprintf+11
  1164   0014C2  C1A1  F030         	movff	main@readHSV+1,?_sprintf+12
  1165   0014C6  C1A2  F031         	movff	main@readHSV+2,?_sprintf+13
  1166   0014CA  C1A3  F032         	movff	main@readHSV+3,?_sprintf+14
  1167   0014CE  C1A4  F033         	movff	main@readHSV+4,?_sprintf+15
  1168   0014D2  C1A5  F034         	movff	main@readHSV+5,?_sprintf+16
  1169   0014D6  ECEF  F00C         	call	_sprintf	;wreg free
  1170   0014DA                     
  1171                           ;main.c: 109:         TxBufferedString(display);
  1172   0014DA  0E5C               	movlw	low main@display
  1173   0014DC  6E06               	movwf	TxBufferedString@string^0,c
  1174   0014DE  0E01               	movlw	high main@display
  1175   0014E0  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1176   0014E2  EC6F  F00E         	call	_TxBufferedString	;wreg free
  1177   0014E6                     
  1178                           ;main.c: 110:         sendTxBuf();
  1179   0014E6  EC46  F00F         	call	_sendTxBuf	;wreg free
  1180   0014EA                     
  1181                           ;main.c: 113:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1182   0014EA  0E29               	movlw	41
  1183   0014EC  6E36               	movwf	(??_main+1)^0,c
  1184   0014EE  0E96               	movlw	150
  1185   0014F0  6E35               	movwf	??_main^0,c
  1186   0014F2  0E7F               	movlw	127
  1187   0014F4                     u3127:
  1188   0014F4  2EE8               	decfsz	wreg,f,c
  1189   0014F6  D7FE               	bra	u3127
  1190   0014F8  2E35               	decfsz	??_main^0,f,c
  1191   0014FA  D7FC               	bra	u3127
  1192   0014FC  2E36               	decfsz	(??_main+1)^0,f,c
  1193   0014FE  D7FA               	bra	u3127
  1194   001500  0000               	nop	
  1195   001502  EF19  F00A         	goto	l4245
  1196   001506  EF3A  F000         	goto	start
  1197   00150A                     __end_of_main:
  1198                           	callstack 0
  1199                           
  1200 ;; *************** function _sprintf *****************
  1201 ;; Defined at:
  1202 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;  s               2   35[COMRAM] PTR unsigned char 
  1205 ;;		 -> sendArraySerial4@tempStr(21), sendIntSerial4@string(17), main@display(50), 
  1206 ;;  fmt             1   37[COMRAM] PTR const unsigned char 
  1207 ;;		 -> STR_4(3), STR_2(5), STR_1(23), 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  f              12    3[BANK0 ] struct _IO_FILE
  1210 ;;  ret             2    0[BANK0 ] int 
  1211 ;;  ap              1    2[BANK0 ] PTR void [1]
  1212 ;;		 -> ?_sprintf(2), 
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  2   35[COMRAM] int 
  1215 ;; Registers used:
  1216 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1222 ;;      Params:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1223 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1225 ;;      Totals:        17      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1226 ;;Total ram usage:       32 bytes
  1227 ;; Hardware stack levels used: 1
  1228 ;; Hardware stack levels required when called: 6
  1229 ;; This function calls:
  1230 ;;		_vfprintf
  1231 ;; This function is called by:
  1232 ;;		_main
  1233 ;;		_sendIntSerial4
  1234 ;;		_sendArraySerial4
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           	psect	text1
  1239   0019DE                     __ptext1:
  1240                           	callstack 0
  1241   0019DE                     _sprintf:
  1242                           	callstack 24
  1243   0019DE  0E27               	movlw	low (?_sprintf+3)
  1244   0019E0  0100               	movlb	0	; () banked
  1245   0019E2  6FA6               	movwf	sprintf@ap& (0+255),b
  1246   0019E4  C024  F0A7         	movff	sprintf@s,sprintf@f
  1247   0019E8  C025  F0A8         	movff	sprintf@s+1,sprintf@f+1
  1248   0019EC                     
  1249                           ; BSR set to: 0
  1250   0019EC  0E00               	movlw	0
  1251   0019EE  6FAB               	movwf	(sprintf@f+4)& (0+255),b
  1252   0019F0  0E00               	movlw	0
  1253   0019F2  6FAA               	movwf	(sprintf@f+3)& (0+255),b
  1254   0019F4                     
  1255                           ; BSR set to: 0
  1256   0019F4  0E00               	movlw	0
  1257   0019F6  6FB2               	movwf	(sprintf@f+11)& (0+255),b
  1258   0019F8  0E00               	movlw	0
  1259   0019FA  6FB1               	movwf	(sprintf@f+10)& (0+255),b
  1260   0019FC                     
  1261                           ; BSR set to: 0
  1262   0019FC  0EA7               	movlw	low sprintf@f
  1263   0019FE  6E20               	movwf	vfprintf@fp^0,c
  1264   001A00  C026  F021         	movff	sprintf@fmt,vfprintf@fmt
  1265   001A04  0EA6               	movlw	low sprintf@ap
  1266   001A06  6E22               	movwf	vfprintf@ap^0,c
  1267   001A08  ECC6  F00C         	call	_vfprintf	;wreg free
  1268   001A0C  C020  F0A4         	movff	?_vfprintf,sprintf@ret
  1269   001A10  C021  F0A5         	movff	?_vfprintf+1,sprintf@ret+1
  1270   001A14  0100               	movlb	0	; () banked
  1271   001A16  51AA               	movf	(sprintf@f+3)& (0+255),w,b
  1272   001A18  2424               	addwf	sprintf@s^0,w,c
  1273   001A1A  6ED9               	movwf	fsr2l,c
  1274   001A1C  51AB               	movf	(sprintf@f+4)& (0+255),w,b
  1275   001A1E  2025               	addwfc	(sprintf@s+1)^0,w,c
  1276   001A20  6EDA               	movwf	fsr2h,c
  1277   001A22  6ADF               	clrf	indf2,c
  1278   001A24                     
  1279                           ; BSR set to: 0
  1280   001A24  C0A4  F024         	movff	sprintf@ret,?_sprintf
  1281   001A28  C0A5  F025         	movff	sprintf@ret+1,?_sprintf+1
  1282   001A2C                     
  1283                           ; BSR set to: 0
  1284   001A2C  0012               	return		;funcret
  1285   001A2E                     __end_of_sprintf:
  1286                           	callstack 0
  1287                           
  1288 ;; *************** function _vfprintf *****************
  1289 ;; Defined at:
  1290 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1293 ;;		 -> sprintf@f(12), 
  1294 ;;  fmt             1   32[COMRAM] PTR const unsigned char 
  1295 ;;		 -> STR_4(3), STR_2(5), STR_1(23), 
  1296 ;;  ap              1   33[COMRAM] PTR PTR void 
  1297 ;;		 -> sprintf@ap(1), 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  cfmt            1   34[COMRAM] PTR unsigned char 
  1300 ;;		 -> STR_4(3), STR_2(5), STR_1(23), 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  2   31[COMRAM] int 
  1303 ;; Registers used:
  1304 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1310 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1313 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1314 ;;Total ram usage:        4 bytes
  1315 ;; Hardware stack levels used: 1
  1316 ;; Hardware stack levels required when called: 5
  1317 ;; This function calls:
  1318 ;;		_vfpfcnvrt
  1319 ;; This function is called by:
  1320 ;;		_sprintf
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text2
  1325   00198C                     __ptext2:
  1326                           	callstack 0
  1327   00198C                     _vfprintf:
  1328                           	callstack 24
  1329   00198C                     
  1330                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1331   00198C  C021  F023         	movff	vfprintf@fmt,vfprintf@cfmt
  1332   001990                     
  1333                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  1334   001990  0E00               	movlw	0
  1335   001992  6E4A               	movwf	(_nout+1)^0,c
  1336   001994  0E00               	movlw	0
  1337   001996  6E49               	movwf	_nout^0,c
  1338                           
  1339                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1340   001998  EFDA  F00C         	goto	l3733
  1341   00199C                     l3731:
  1342                           
  1343                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  1344   00199C  C020  F013         	movff	vfprintf@fp,vfpfcnvrt@fp
  1345   0019A0  0E23               	movlw	low vfprintf@cfmt
  1346   0019A2  6E14               	movwf	vfpfcnvrt@fmt^0,c
  1347   0019A4  C022  F015         	movff	vfprintf@ap,vfpfcnvrt@ap
  1348   0019A8  ECB6  F008         	call	_vfpfcnvrt	;wreg free
  1349   0019AC  5013               	movf	?_vfpfcnvrt^0,w,c
  1350   0019AE  2649               	addwf	_nout^0,f,c
  1351   0019B0  5014               	movf	(?_vfpfcnvrt+1)^0,w,c
  1352   0019B2  224A               	addwfc	(_nout+1)^0,f,c
  1353   0019B4                     l3733:
  1354                           
  1355                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1356   0019B4  C023  FFF6         	movff	vfprintf@cfmt,tblptrl
  1357   0019B8                     	if	1	;There is more than 1 active tblptr byte
  1358   0019B8  0E0E               	movlw	high __smallconst
  1359   0019BA  6EF7               	movwf	tblptrh,c
  1360   0019BC                     	endif
  1361   0019BC                     	if	0	;tblptru may be non-zero
  1362   0019BC                     	endif
  1363   0019BC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1364   0019BC  0E00               	movlw	low (__smallconst shr (0+16))
  1365   0019BE  6EF8               	movwf	tblptru,c
  1366   0019C0                     	endif
  1367   0019C0  0008               	tblrd		*
  1368   0019C2  50F5               	movf	tablat,w,c
  1369   0019C4  0900               	iorlw	0
  1370   0019C6  A4D8               	btfss	status,2,c
  1371   0019C8  EFE8  F00C         	goto	u2811
  1372   0019CC  EFEA  F00C         	goto	u2810
  1373   0019D0                     u2811:
  1374   0019D0  EFCE  F00C         	goto	l3731
  1375   0019D4                     u2810:
  1376   0019D4                     
  1377                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  1378   0019D4  C049  F020         	movff	_nout,?_vfprintf
  1379   0019D8  C04A  F021         	movff	_nout+1,?_vfprintf+1
  1380   0019DC  0012               	return		;funcret
  1381   0019DE                     __end_of_vfprintf:
  1382                           	callstack 0
  1383                           
  1384 ;; *************** function _vfpfcnvrt *****************
  1385 ;; Defined at:
  1386 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  fp              1   18[COMRAM] PTR struct _IO_FILE
  1389 ;;		 -> sprintf@f(12), 
  1390 ;;  fmt             1   19[COMRAM] PTR PTR unsigned char 
  1391 ;;		 -> vfprintf@cfmt(1), 
  1392 ;;  ap              1   20[COMRAM] PTR PTR void 
  1393 ;;		 -> sprintf@ap(1), 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  convarg         4   26[COMRAM] struct .
  1396 ;;  cnt             2   23[COMRAM] int 
  1397 ;;  c               1   30[COMRAM] unsigned char 
  1398 ;;  cp              1   25[COMRAM] PTR unsigned char 
  1399 ;;		 -> STR_4(3), STR_2(5), STR_1(23), 
  1400 ;;  done            1   22[COMRAM] _Bool 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  2   18[COMRAM] int 
  1403 ;; Registers used:
  1404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1410 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1411 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1413 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1414 ;;Total ram usage:       13 bytes
  1415 ;; Hardware stack levels used: 1
  1416 ;; Hardware stack levels required when called: 4
  1417 ;; This function calls:
  1418 ;;		___awdiv
  1419 ;;		___awmod
  1420 ;;		_abs
  1421 ;;		_fputc
  1422 ;; This function is called by:
  1423 ;;		_vfprintf
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text3
  1428   00116C                     __ptext3:
  1429                           	callstack 0
  1430   00116C                     _vfpfcnvrt:
  1431                           	callstack 24
  1432   00116C                     
  1433                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  1434   00116C  0E00               	movlw	0
  1435   00116E  6E19               	movwf	(vfpfcnvrt@cnt+1)^0,c
  1436   001170  0E00               	movlw	0
  1437   001172  6E18               	movwf	vfpfcnvrt@cnt^0,c
  1438   001174                     
  1439                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  1440   001174  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1441   001176  6ED9               	movwf	fsr2l,c
  1442   001178  6ADA               	clrf	fsr2h,c
  1443   00117A  CFDF FFF6          	movff	indf2,tblptrl
  1444   00117E                     	if	1	;There is more than 1 active tblptr byte
  1445   00117E  0E0E               	movlw	high __smallconst
  1446   001180  6EF7               	movwf	tblptrh,c
  1447   001182                     	endif
  1448   001182                     	if	0	;tblptru may be non-zero
  1449   001182                     	endif
  1450   001182                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1451   001182  0E00               	movlw	low (__smallconst shr (0+16))
  1452   001184  6EF8               	movwf	tblptru,c
  1453   001186                     	endif
  1454   001186  0008               	tblrd		*
  1455   001188  50F5               	movf	tablat,w,c
  1456   00118A  0A25               	xorlw	37
  1457   00118C  A4D8               	btfss	status,2,c
  1458   00118E  EFCB  F008         	goto	u2431
  1459   001192  EFCD  F008         	goto	u2430
  1460   001196                     u2431:
  1461   001196  EF9D  F009         	goto	l3527
  1462   00119A                     u2430:
  1463   00119A                     
  1464                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1465   00119A  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1466   00119C  6ED9               	movwf	fsr2l,c
  1467   00119E  6ADA               	clrf	fsr2h,c
  1468   0011A0  2ADF               	incf	indf2,f,c
  1469   0011A2                     
  1470                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1471   0011A2  0E00               	movlw	0
  1472   0011A4  0100               	movlb	0	; () banked
  1473   0011A6  6FA1               	movwf	(_width+1)& (0+255),b
  1474   0011A8  0E00               	movlw	0
  1475   0011AA  6FA0               	movwf	_width& (0+255),b
  1476   0011AC  C0A0  F04B         	movff	_width,_flags
  1477   0011B0                     
  1478                           ; BSR set to: 0
  1479                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1480   0011B0  69A2               	setf	_prec& (0+255),b
  1481   0011B2  69A3               	setf	(_prec+1)& (0+255),b
  1482   0011B4                     
  1483                           ; BSR set to: 0
  1484                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1485   0011B4  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1486   0011B6  6ED9               	movwf	fsr2l,c
  1487   0011B8  6ADA               	clrf	fsr2h,c
  1488   0011BA  50DF               	movf	indf2,w,c
  1489   0011BC  6E1A               	movwf	vfpfcnvrt@cp^0,c
  1490   0011BE                     
  1491                           ; BSR set to: 0
  1492                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1493   0011BE  C01A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1494   0011C2                     	if	1	;There is more than 1 active tblptr byte
  1495   0011C2  0E0E               	movlw	high __smallconst
  1496   0011C4  6EF7               	movwf	tblptrh,c
  1497   0011C6                     	endif
  1498   0011C6                     	if	0	;tblptru may be non-zero
  1499   0011C6                     	endif
  1500   0011C6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1501   0011C6  0E00               	movlw	low (__smallconst shr (0+16))
  1502   0011C8  6EF8               	movwf	tblptru,c
  1503   0011CA                     	endif
  1504   0011CA  0008               	tblrd		*
  1505   0011CC  50F5               	movf	tablat,w,c
  1506   0011CE  0A64               	xorlw	100
  1507   0011D0  B4D8               	btfsc	status,2,c
  1508   0011D2  EFED  F008         	goto	u2441
  1509   0011D6  EFEF  F008         	goto	u2440
  1510   0011DA                     u2441:
  1511   0011DA  EFFF  F008         	goto	l3491
  1512   0011DE                     u2440:
  1513   0011DE                     
  1514                           ; BSR set to: 0
  1515   0011DE  C01A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1516   0011E2                     	if	1	;There is more than 1 active tblptr byte
  1517   0011E2  0E0E               	movlw	high __smallconst
  1518   0011E4  6EF7               	movwf	tblptrh,c
  1519   0011E6                     	endif
  1520   0011E6                     	if	0	;tblptru may be non-zero
  1521   0011E6                     	endif
  1522   0011E6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1523   0011E6  0E00               	movlw	low (__smallconst shr (0+16))
  1524   0011E8  6EF8               	movwf	tblptru,c
  1525   0011EA                     	endif
  1526   0011EA  0008               	tblrd		*
  1527   0011EC  50F5               	movf	tablat,w,c
  1528   0011EE  0A69               	xorlw	105
  1529   0011F0  A4D8               	btfss	status,2,c
  1530   0011F2  EFFD  F008         	goto	u2451
  1531   0011F6  EFFF  F008         	goto	u2450
  1532   0011FA                     u2451:
  1533   0011FA  EF93  F009         	goto	l3521
  1534   0011FE                     u2450:
  1535   0011FE                     l3491:
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1539   0011FE  5015               	movf	vfpfcnvrt@ap^0,w,c
  1540   001200  6ED9               	movwf	fsr2l,c
  1541   001202  6ADA               	clrf	fsr2h,c
  1542   001204  0E02               	movlw	2
  1543   001206  26DF               	addwf	indf2,f,c
  1544   001208  5CDF               	subwf	indf2,w,c
  1545   00120A  6ED9               	movwf	fsr2l,c
  1546   00120C  6ADA               	clrf	fsr2h,c
  1547   00120E  CFDE F01B          	movff	postinc2,vfpfcnvrt@convarg
  1548   001212  CFDE F01C          	movff	postinc2,vfpfcnvrt@convarg+1
  1549   001216                     
  1550                           ; BSR set to: 0
  1551                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1552   001216  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1553   001218  6ED9               	movwf	fsr2l,c
  1554   00121A  6ADA               	clrf	fsr2h,c
  1555   00121C  281A               	incf	vfpfcnvrt@cp^0,w,c
  1556   00121E  6EDF               	movwf	indf2,c
  1557   001220                     
  1558                           ; BSR set to: 0
  1559                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1560   001220  0E20               	movlw	32
  1561   001222  6E1F               	movwf	vfpfcnvrt@c^0,c
  1562                           
  1563                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1564   001224  BE1C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1565   001226  EF17  F009         	goto	u2461
  1566   00122A  EF1A  F009         	goto	u2460
  1567   00122E                     u2461:
  1568   00122E  0E01               	movlw	1
  1569   001230  EF1B  F009         	goto	u2470
  1570   001234                     u2460:
  1571   001234  0E00               	movlw	0
  1572   001236                     u2470:
  1573   001236  6E17               	movwf	vfpfcnvrt@done^0,c
  1574   001238                     l3497:
  1575                           
  1576                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1577   001238  061F               	decf	vfpfcnvrt@c^0,f,c
  1578   00123A  0E3C               	movlw	low _dbuf
  1579   00123C  241F               	addwf	vfpfcnvrt@c^0,w,c
  1580   00123E  6ED9               	movwf	fsr2l,c
  1581   001240  6ADA               	clrf	fsr2h,c
  1582   001242  0E01               	movlw	high _dbuf
  1583   001244  22DA               	addwfc	fsr2h,f,c
  1584   001246  C01B  F005         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1585   00124A  C01C  F006         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1586   00124E  0E00               	movlw	0
  1587   001250  6E08               	movwf	(___awmod@divisor+1)^0,c
  1588   001252  0E0A               	movlw	10
  1589   001254  6E07               	movwf	___awmod@divisor^0,c
  1590   001256  EC44  F00B         	call	___awmod	;wreg free
  1591   00125A  C005  F00B         	movff	?___awmod,abs@a
  1592   00125E  C006  F00C         	movff	?___awmod+1,abs@a+1
  1593   001262  EC3B  F00E         	call	_abs	;wreg free
  1594   001266  500B               	movf	?_abs^0,w,c
  1595   001268  0F30               	addlw	48
  1596   00126A  6EDF               	movwf	indf2,c
  1597   00126C                     
  1598                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1599   00126C  C01B  F00B         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1600   001270  C01C  F00C         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1601   001274  0E00               	movlw	0
  1602   001276  6E0E               	movwf	(___awdiv@divisor+1)^0,c
  1603   001278  0E0A               	movlw	10
  1604   00127A  6E0D               	movwf	___awdiv@divisor^0,c
  1605   00127C  EC85  F00A         	call	___awdiv	;wreg free
  1606   001280  C00B  F01B         	movff	?___awdiv,vfpfcnvrt@convarg
  1607   001284  C00C  F01C         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1608   001288                     
  1609                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  1610   001288  4A18               	infsnz	vfpfcnvrt@cnt^0,f,c
  1611   00128A  2A19               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1612   00128C                     
  1613                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1614   00128C  501B               	movf	vfpfcnvrt@convarg^0,w,c
  1615   00128E  101C               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1616   001290  B4D8               	btfsc	status,2,c
  1617   001292  EF4D  F009         	goto	u2481
  1618   001296  EF4F  F009         	goto	u2480
  1619   00129A                     u2481:
  1620   00129A  EF57  F009         	goto	l3507
  1621   00129E                     u2480:
  1622   00129E  501F               	movf	vfpfcnvrt@c^0,w,c
  1623   0012A0  A4D8               	btfss	status,2,c
  1624   0012A2  EF55  F009         	goto	u2491
  1625   0012A6  EF57  F009         	goto	u2490
  1626   0012AA                     u2491:
  1627   0012AA  EF1C  F009         	goto	l3497
  1628   0012AE                     u2490:
  1629   0012AE                     l3507:
  1630                           
  1631                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1632   0012AE  501F               	movf	vfpfcnvrt@c^0,w,c
  1633   0012B0  B4D8               	btfsc	status,2,c
  1634   0012B2  EF5D  F009         	goto	u2501
  1635   0012B6  EF5F  F009         	goto	u2500
  1636   0012BA                     u2501:
  1637   0012BA  EF84  F009         	goto	l3519
  1638   0012BE                     u2500:
  1639   0012BE  5017               	movf	vfpfcnvrt@done^0,w,c
  1640   0012C0  B4D8               	btfsc	status,2,c
  1641   0012C2  EF65  F009         	goto	u2511
  1642   0012C6  EF67  F009         	goto	u2510
  1643   0012CA                     u2511:
  1644   0012CA  EF84  F009         	goto	l3519
  1645   0012CE                     u2510:
  1646   0012CE                     
  1647                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1648   0012CE  061F               	decf	vfpfcnvrt@c^0,f,c
  1649   0012D0  0E3C               	movlw	low _dbuf
  1650   0012D2  241F               	addwf	vfpfcnvrt@c^0,w,c
  1651   0012D4  6ED9               	movwf	fsr2l,c
  1652   0012D6  6ADA               	clrf	fsr2h,c
  1653   0012D8  0E01               	movlw	high _dbuf
  1654   0012DA  22DA               	addwfc	fsr2h,f,c
  1655   0012DC  0E2D               	movlw	45
  1656   0012DE  6EDF               	movwf	indf2,c
  1657   0012E0                     
  1658                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  1659   0012E0  4A18               	infsnz	vfpfcnvrt@cnt^0,f,c
  1660   0012E2  2A19               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1661   0012E4  EF84  F009         	goto	l3519
  1662   0012E8                     l3515:
  1663                           
  1664                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1665   0012E8  0E3C               	movlw	low _dbuf
  1666   0012EA  241F               	addwf	vfpfcnvrt@c^0,w,c
  1667   0012EC  6ED9               	movwf	fsr2l,c
  1668   0012EE  6ADA               	clrf	fsr2h,c
  1669   0012F0  0E01               	movlw	high _dbuf
  1670   0012F2  22DA               	addwfc	fsr2h,f,c
  1671   0012F4  50DF               	movf	indf2,w,c
  1672   0012F6  6E16               	movwf	??_vfpfcnvrt^0,c
  1673   0012F8  5016               	movf	??_vfpfcnvrt^0,w,c
  1674   0012FA  6E05               	movwf	fputc@c^0,c
  1675   0012FC  6A06               	clrf	(fputc@c+1)^0,c
  1676   0012FE  C013  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1677   001302  ECE7  F00A         	call	_fputc	;wreg free
  1678   001306  2A1F               	incf	vfpfcnvrt@c^0,f,c
  1679   001308                     l3519:
  1680                           
  1681                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1682   001308  0E20               	movlw	32
  1683   00130A  181F               	xorwf	vfpfcnvrt@c^0,w,c
  1684   00130C  A4D8               	btfss	status,2,c
  1685   00130E  EF8B  F009         	goto	u2521
  1686   001312  EF8D  F009         	goto	u2520
  1687   001316                     u2521:
  1688   001316  EF74  F009         	goto	l3515
  1689   00131A                     u2520:
  1690   00131A                     
  1691                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  1692   00131A  C018  F013         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  1693   00131E  C019  F014         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  1694   001322  EFB6  F009         	goto	l1369
  1695   001326                     l3521:
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1699   001326  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1700   001328  6ED9               	movwf	fsr2l,c
  1701   00132A  6ADA               	clrf	fsr2h,c
  1702   00132C  2ADF               	incf	indf2,f,c
  1703   00132E                     
  1704                           ; BSR set to: 0
  1705                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  1706   00132E  0E00               	movlw	0
  1707   001330  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  1708   001332  0E00               	movlw	0
  1709   001334  6E13               	movwf	?_vfpfcnvrt^0,c
  1710   001336  EFB6  F009         	goto	l1369
  1711   00133A                     l3527:
  1712                           
  1713                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1714   00133A  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1715   00133C  6ED9               	movwf	fsr2l,c
  1716   00133E  6ADA               	clrf	fsr2h,c
  1717   001340  CFDF FFF6          	movff	indf2,tblptrl
  1718   001344                     	if	1	;There is more than 1 active tblptr byte
  1719   001344  0E0E               	movlw	high __smallconst
  1720   001346  6EF7               	movwf	tblptrh,c
  1721   001348                     	endif
  1722   001348                     	if	0	;tblptru may be non-zero
  1723   001348                     	endif
  1724   001348                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1725   001348  0E00               	movlw	low (__smallconst shr (0+16))
  1726   00134A  6EF8               	movwf	tblptru,c
  1727   00134C                     	endif
  1728   00134C  0008               	tblrd		*
  1729   00134E  50F5               	movf	tablat,w,c
  1730   001350  6E05               	movwf	fputc@c^0,c
  1731   001352  6A06               	clrf	(fputc@c+1)^0,c
  1732   001354  C013  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1733   001358  ECE7  F00A         	call	_fputc	;wreg free
  1734   00135C                     
  1735                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  1736   00135C  5014               	movf	vfpfcnvrt@fmt^0,w,c
  1737   00135E  6ED9               	movwf	fsr2l,c
  1738   001360  6ADA               	clrf	fsr2h,c
  1739   001362  2ADF               	incf	indf2,f,c
  1740   001364                     
  1741                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  1742   001364  0E00               	movlw	0
  1743   001366  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  1744   001368  0E01               	movlw	1
  1745   00136A  6E13               	movwf	?_vfpfcnvrt^0,c
  1746   00136C                     l1369:
  1747   00136C  0012               	return		;funcret
  1748   00136E                     __end_of_vfpfcnvrt:
  1749                           	callstack 0
  1750                           
  1751 ;; *************** function _fputc *****************
  1752 ;; Defined at:
  1753 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  c               2    4[COMRAM] int 
  1756 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  1757 ;;		 -> sprintf@f(12), 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  2    4[COMRAM] int 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1769 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1771 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1772 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1773 ;;Total ram usage:        8 bytes
  1774 ;; Hardware stack levels used: 1
  1775 ;; Hardware stack levels required when called: 3
  1776 ;; This function calls:
  1777 ;;		_putch
  1778 ;; This function is called by:
  1779 ;;		_vfpfcnvrt
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text4
  1784   0015CE                     __ptext4:
  1785                           	callstack 0
  1786   0015CE                     _fputc:
  1787                           	callstack 24
  1788   0015CE  5007               	movf	fputc@fp^0,w,c
  1789   0015D0  B4D8               	btfsc	status,2,c
  1790   0015D2  EFED  F00A         	goto	u2341
  1791   0015D6  EFEF  F00A         	goto	u2340
  1792   0015DA                     u2341:
  1793   0015DA  EFF7  F00A         	goto	l3415
  1794   0015DE                     u2340:
  1795   0015DE  5007               	movf	fputc@fp^0,w,c
  1796   0015E0  A4D8               	btfss	status,2,c
  1797   0015E2  EFF5  F00A         	goto	u2351
  1798   0015E6  EFF7  F00A         	goto	u2350
  1799   0015EA                     u2351:
  1800   0015EA  EFFC  F00A         	goto	l3417
  1801   0015EE                     u2350:
  1802   0015EE                     l3415:
  1803   0015EE  5005               	movf	fputc@c^0,w,c
  1804   0015F0  EC9A  F00F         	call	_putch
  1805   0015F4  EF43  F00B         	goto	l1394
  1806   0015F8                     l3417:
  1807   0015F8  5007               	movf	fputc@fp^0,w,c
  1808   0015FA  6ED9               	movwf	fsr2l,c
  1809   0015FC  6ADA               	clrf	fsr2h,c
  1810   0015FE  0E0A               	movlw	10
  1811   001600  26D9               	addwf	fsr2l,f,c
  1812   001602  50DE               	movf	postinc2,w,c
  1813   001604  10DE               	iorwf	postinc2,w,c
  1814   001606  B4D8               	btfsc	status,2,c
  1815   001608  EF08  F00B         	goto	u2361
  1816   00160C  EF0A  F00B         	goto	u2360
  1817   001610                     u2361:
  1818   001610  EF23  F00B         	goto	l3421
  1819   001614                     u2360:
  1820   001614  5007               	movf	fputc@fp^0,w,c
  1821   001616  6ED9               	movwf	fsr2l,c
  1822   001618  6ADA               	clrf	fsr2h,c
  1823   00161A  0E0A               	movlw	10
  1824   00161C  26D9               	addwf	fsr2l,f,c
  1825   00161E  5007               	movf	fputc@fp^0,w,c
  1826   001620  6EE1               	movwf	fsr1l,c
  1827   001622  6AE2               	clrf	fsr1h,c
  1828   001624  0E03               	movlw	3
  1829   001626  26E1               	addwf	fsr1l,f,c
  1830   001628  50DE               	movf	postinc2,w,c
  1831   00162A  5CE6               	subwf	postinc1,w,c
  1832   00162C  50E6               	movf	postinc1,w,c
  1833   00162E  0A80               	xorlw	128
  1834   001630  6E0C               	movwf	(??_fputc+4)^0,c
  1835   001632  50DE               	movf	postinc2,w,c
  1836   001634  0A80               	xorlw	128
  1837   001636  580C               	subwfb	(??_fputc+4)^0,w,c
  1838   001638  B0D8               	btfsc	status,0,c
  1839   00163A  EF21  F00B         	goto	u2371
  1840   00163E  EF23  F00B         	goto	u2370
  1841   001642                     u2371:
  1842   001642  EF43  F00B         	goto	l1394
  1843   001646                     u2370:
  1844   001646                     l3421:
  1845   001646  5007               	movf	fputc@fp^0,w,c
  1846   001648  6ED9               	movwf	fsr2l,c
  1847   00164A  6ADA               	clrf	fsr2h,c
  1848   00164C  0E03               	movlw	3
  1849   00164E  26D9               	addwf	fsr2l,f,c
  1850   001650  CFDE F008          	movff	postinc2,??_fputc
  1851   001654  CFDD F009          	movff	postdec2,??_fputc+1
  1852   001658  5007               	movf	fputc@fp^0,w,c
  1853   00165A  6ED9               	movwf	fsr2l,c
  1854   00165C  6ADA               	clrf	fsr2h,c
  1855   00165E  CFDE F00A          	movff	postinc2,??_fputc+2
  1856   001662  CFDD F00B          	movff	postdec2,??_fputc+3
  1857   001666  5008               	movf	??_fputc^0,w,c
  1858   001668  240A               	addwf	(??_fputc+2)^0,w,c
  1859   00166A  6ED9               	movwf	fsr2l,c
  1860   00166C  5009               	movf	(??_fputc+1)^0,w,c
  1861   00166E  200B               	addwfc	(??_fputc+3)^0,w,c
  1862   001670  6EDA               	movwf	fsr2h,c
  1863   001672  C005  FFDF         	movff	fputc@c,indf2
  1864   001676  5007               	movf	fputc@fp^0,w,c
  1865   001678  6ED9               	movwf	fsr2l,c
  1866   00167A  6ADA               	clrf	fsr2h,c
  1867   00167C  0E03               	movlw	3
  1868   00167E  26D9               	addwf	fsr2l,f,c
  1869   001680  2ADE               	incf	postinc2,f,c
  1870   001682  0E00               	movlw	0
  1871   001684  22DD               	addwfc	postdec2,f,c
  1872   001686                     l1394:
  1873   001686  0012               	return		;funcret
  1874   001688                     __end_of_fputc:
  1875                           	callstack 0
  1876                           
  1877 ;; *************** function _putch *****************
  1878 ;; Defined at:
  1879 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;  c               1    wreg     unsigned char 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  c               1    0[COMRAM] unsigned char 
  1884 ;; Return value:  Size  Location     Type
  1885 ;;                  1    wreg      void 
  1886 ;; Registers used:
  1887 ;;		wreg
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1897 ;;Total ram usage:        0 bytes
  1898 ;; Hardware stack levels used: 1
  1899 ;; Hardware stack levels required when called: 2
  1900 ;; This function calls:
  1901 ;;		Nothing
  1902 ;; This function is called by:
  1903 ;;		_fputc
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text5
  1908   001F34                     __ptext5:
  1909                           	callstack 0
  1910   001F34                     _putch:
  1911                           	callstack 24
  1912   001F34  0012               	return		;funcret
  1913   001F36                     __end_of_putch:
  1914                           	callstack 0
  1915                           
  1916 ;; *************** function _abs *****************
  1917 ;; Defined at:
  1918 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  a               2   10[COMRAM] int 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;		None
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  2   10[COMRAM] int 
  1925 ;; Registers used:
  1926 ;;		wreg, status,2, status,0
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1932 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1934 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1935 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1936 ;;Total ram usage:        4 bytes
  1937 ;; Hardware stack levels used: 1
  1938 ;; Hardware stack levels required when called: 2
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_vfpfcnvrt
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text6
  1947   001C76                     __ptext6:
  1948                           	callstack 0
  1949   001C76                     _abs:
  1950                           	callstack 25
  1951   001C76  BE0C               	btfsc	(abs@a+1)^0,7,c
  1952   001C78  EF40  F00E         	goto	u2381
  1953   001C7C  EF42  F00E         	goto	u2380
  1954   001C80                     u2381:
  1955   001C80  EF48  F00E         	goto	l1379
  1956   001C84                     u2380:
  1957   001C84  C00B  F00B         	movff	abs@a,?_abs
  1958   001C88  C00C  F00C         	movff	abs@a+1,?_abs+1
  1959   001C8C  EF54  F00E         	goto	l1382
  1960   001C90                     l1379:
  1961   001C90  C00B  F00D         	movff	abs@a,??_abs
  1962   001C94  C00C  F00E         	movff	abs@a+1,??_abs+1
  1963   001C98  1E0D               	comf	??_abs^0,f,c
  1964   001C9A  1E0E               	comf	(??_abs+1)^0,f,c
  1965   001C9C  4A0D               	infsnz	??_abs^0,f,c
  1966   001C9E  2A0E               	incf	(??_abs+1)^0,f,c
  1967   001CA0  C00D  F00B         	movff	??_abs,?_abs
  1968   001CA4  C00E  F00C         	movff	??_abs+1,?_abs+1
  1969   001CA8                     l1382:
  1970   001CA8  0012               	return		;funcret
  1971   001CAA                     __end_of_abs:
  1972                           	callstack 0
  1973                           
  1974 ;; *************** function ___awmod *****************
  1975 ;; Defined at:
  1976 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  dividend        2    4[COMRAM] int 
  1979 ;;  divisor         2    6[COMRAM] int 
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  sign            1    9[COMRAM] unsigned char 
  1982 ;;  counter         1    8[COMRAM] unsigned char 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  2    4[COMRAM] int 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1992 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1995 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1996 ;;Total ram usage:        6 bytes
  1997 ;; Hardware stack levels used: 1
  1998 ;; Hardware stack levels required when called: 2
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_vfpfcnvrt
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text7
  2007   001688                     __ptext7:
  2008                           	callstack 0
  2009   001688                     ___awmod:
  2010                           	callstack 25
  2011   001688  0E00               	movlw	0
  2012   00168A  6E0A               	movwf	___awmod@sign^0,c
  2013   00168C  BE06               	btfsc	(___awmod@dividend+1)^0,7,c
  2014   00168E  EF4D  F00B         	goto	u2280
  2015   001692  EF4B  F00B         	goto	u2281
  2016   001696                     u2281:
  2017   001696  EF53  F00B         	goto	l3383
  2018   00169A                     u2280:
  2019   00169A  6C05               	negf	___awmod@dividend^0,c
  2020   00169C  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2021   00169E  B0D8               	btfsc	status,0,c
  2022   0016A0  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2023   0016A2  0E01               	movlw	1
  2024   0016A4  6E0A               	movwf	___awmod@sign^0,c
  2025   0016A6                     l3383:
  2026   0016A6  BE08               	btfsc	(___awmod@divisor+1)^0,7,c
  2027   0016A8  EF5A  F00B         	goto	u2290
  2028   0016AC  EF58  F00B         	goto	u2291
  2029   0016B0                     u2291:
  2030   0016B0  EF5E  F00B         	goto	l3387
  2031   0016B4                     u2290:
  2032   0016B4  6C07               	negf	___awmod@divisor^0,c
  2033   0016B6  1E08               	comf	(___awmod@divisor+1)^0,f,c
  2034   0016B8  B0D8               	btfsc	status,0,c
  2035   0016BA  2A08               	incf	(___awmod@divisor+1)^0,f,c
  2036   0016BC                     l3387:
  2037   0016BC  5007               	movf	___awmod@divisor^0,w,c
  2038   0016BE  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  2039   0016C0  B4D8               	btfsc	status,2,c
  2040   0016C2  EF65  F00B         	goto	u2301
  2041   0016C6  EF67  F00B         	goto	u2300
  2042   0016CA                     u2301:
  2043   0016CA  EF8B  F00B         	goto	l3403
  2044   0016CE                     u2300:
  2045   0016CE  0E01               	movlw	1
  2046   0016D0  6E09               	movwf	___awmod@counter^0,c
  2047   0016D2  EF6F  F00B         	goto	l3393
  2048   0016D6                     l3391:
  2049   0016D6  90D8               	bcf	status,0,c
  2050   0016D8  3607               	rlcf	___awmod@divisor^0,f,c
  2051   0016DA  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  2052   0016DC  2A09               	incf	___awmod@counter^0,f,c
  2053   0016DE                     l3393:
  2054   0016DE  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  2055   0016E0  EF74  F00B         	goto	u2311
  2056   0016E4  EF76  F00B         	goto	u2310
  2057   0016E8                     u2311:
  2058   0016E8  EF6B  F00B         	goto	l3391
  2059   0016EC                     u2310:
  2060   0016EC                     l3395:
  2061   0016EC  5007               	movf	___awmod@divisor^0,w,c
  2062   0016EE  5C05               	subwf	___awmod@dividend^0,w,c
  2063   0016F0  5008               	movf	(___awmod@divisor+1)^0,w,c
  2064   0016F2  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  2065   0016F4  A0D8               	btfss	status,0,c
  2066   0016F6  EF7F  F00B         	goto	u2321
  2067   0016FA  EF81  F00B         	goto	u2320
  2068   0016FE                     u2321:
  2069   0016FE  EF85  F00B         	goto	l3399
  2070   001702                     u2320:
  2071   001702  5007               	movf	___awmod@divisor^0,w,c
  2072   001704  5E05               	subwf	___awmod@dividend^0,f,c
  2073   001706  5008               	movf	(___awmod@divisor+1)^0,w,c
  2074   001708  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  2075   00170A                     l3399:
  2076   00170A  90D8               	bcf	status,0,c
  2077   00170C  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  2078   00170E  3207               	rrcf	___awmod@divisor^0,f,c
  2079   001710  2E09               	decfsz	___awmod@counter^0,f,c
  2080   001712  EF76  F00B         	goto	l3395
  2081   001716                     l3403:
  2082   001716  500A               	movf	___awmod@sign^0,w,c
  2083   001718  B4D8               	btfsc	status,2,c
  2084   00171A  EF91  F00B         	goto	u2331
  2085   00171E  EF93  F00B         	goto	u2330
  2086   001722                     u2331:
  2087   001722  EF97  F00B         	goto	l3407
  2088   001726                     u2330:
  2089   001726  6C05               	negf	___awmod@dividend^0,c
  2090   001728  1E06               	comf	(___awmod@dividend+1)^0,f,c
  2091   00172A  B0D8               	btfsc	status,0,c
  2092   00172C  2A06               	incf	(___awmod@dividend+1)^0,f,c
  2093   00172E                     l3407:
  2094   00172E  C005  F005         	movff	___awmod@dividend,?___awmod
  2095   001732  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  2096   001736  0012               	return		;funcret
  2097   001738                     __end_of___awmod:
  2098                           	callstack 0
  2099                           
  2100 ;; *************** function _sendTxBuf *****************
  2101 ;; Defined at:
  2102 ;;		line 114 in file "serial.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		wreg, status,2, status,0, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2120 ;;Total ram usage:        0 bytes
  2121 ;; Hardware stack levels used: 1
  2122 ;; Hardware stack levels required when called: 3
  2123 ;; This function calls:
  2124 ;;		_isDataInTxBuf
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text8
  2131   001E8C                     __ptext8:
  2132                           	callstack 0
  2133   001E8C                     _sendTxBuf:
  2134                           	callstack 27
  2135   001E8C                     
  2136                           ;serial.c: 115:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  2137   001E8C  EC53  F00F         	call	_isDataInTxBuf	;wreg free
  2138   001E90  0900               	iorlw	0
  2139   001E92  B4D8               	btfsc	status,2,c
  2140   001E94  EF4E  F00F         	goto	u2891
  2141   001E98  EF50  F00F         	goto	u2890
  2142   001E9C                     u2891:
  2143   001E9C  EF52  F00F         	goto	l473
  2144   001EA0                     u2890:
  2145   001EA0  010E               	movlb	14	; () banked
  2146   001EA2  852D               	bsf	45,2,b	;volatile
  2147   001EA4                     l473:
  2148   001EA4  0012               	return		;funcret
  2149   001EA6                     __end_of_sendTxBuf:
  2150                           	callstack 0
  2151                           
  2152 ;; *************** function _isDataInTxBuf *****************
  2153 ;; Defined at:
  2154 ;;		line 100 in file "serial.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      unsigned char 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2172 ;;Total ram usage:        0 bytes
  2173 ;; Hardware stack levels used: 1
  2174 ;; Hardware stack levels required when called: 2
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_sendTxBuf
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text9
  2183   001EA6                     __ptext9:
  2184                           	callstack 0
  2185   001EA6                     _isDataInTxBuf:
  2186                           	callstack 27
  2187   001EA6                     
  2188                           ;serial.c: 101:     return (TxBufWriteCnt!=TxBufReadCnt);
  2189   001EA6  504D               	movf	_TxBufReadCnt^0,w,c	;volatile
  2190   001EA8  184E               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  2191   001EAA  A4D8               	btfss	status,2,c
  2192   001EAC  EF5A  F00F         	goto	u2731
  2193   001EB0  EF5D  F00F         	goto	u2730
  2194   001EB4                     u2731:
  2195   001EB4  0E01               	movlw	1
  2196   001EB6  EF5E  F00F         	goto	u2740
  2197   001EBA                     u2730:
  2198   001EBA  0E00               	movlw	0
  2199   001EBC                     u2740:
  2200   001EBC  0012               	return		;funcret
  2201   001EBE                     __end_of_isDataInTxBuf:
  2202                           	callstack 0
  2203                           
  2204 ;; *************** function _initUSART4 *****************
  2205 ;; Defined at:
  2206 ;;		line 5 in file "serial.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, status,2
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2224 ;;Total ram usage:        0 bytes
  2225 ;; Hardware stack levels used: 1
  2226 ;; Hardware stack levels required when called: 2
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_main
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text10
  2235   001E6E                     __ptext10:
  2236                           	callstack 0
  2237   001E6E                     _initUSART4:
  2238                           	callstack 28
  2239   001E6E                     
  2240                           ;serial.c: 9:     RC0PPS = 0x12;
  2241   001E6E  0E12               	movlw	18
  2242   001E70  010E               	movlb	14	; () banked
  2243   001E72  6F62               	movwf	98,b	;volatile
  2244                           
  2245                           ;serial.c: 10:     RX4PPS = 0x11;
  2246   001E74  0E11               	movlw	17
  2247   001E76  6F15               	movwf	21,b	;volatile
  2248   001E78                     
  2249                           ; BSR set to: 14
  2250                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  2251   001E78  97E9               	bcf	233,3,b	;volatile
  2252   001E7A                     
  2253                           ; BSR set to: 14
  2254                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  2255   001E7A  95E8               	bcf	232,2,b	;volatile
  2256                           
  2257                           ;serial.c: 14:     SP4BRGL = 51;
  2258   001E7C  0E33               	movlw	51
  2259   001E7E  6FE5               	movwf	229,b	;volatile
  2260                           
  2261                           ;serial.c: 15:     SP4BRGH = 0;
  2262   001E80  0E00               	movlw	0
  2263   001E82  6FE6               	movwf	230,b	;volatile
  2264   001E84                     
  2265                           ; BSR set to: 14
  2266                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  2267   001E84  89E7               	bsf	231,4,b	;volatile
  2268   001E86                     
  2269                           ; BSR set to: 14
  2270                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  2271   001E86  8BE8               	bsf	232,5,b	;volatile
  2272   001E88                     
  2273                           ; BSR set to: 14
  2274                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  2275   001E88  8FE7               	bsf	231,7,b	;volatile
  2276   001E8A                     
  2277                           ; BSR set to: 14
  2278   001E8A  0012               	return		;funcret
  2279   001E8C                     __end_of_initUSART4:
  2280                           	callstack 0
  2281                           
  2282 ;; *************** function _initDCmotorsPWM *****************
  2283 ;; Defined at:
  2284 ;;		line 5 in file "dc_motor.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;  PWMperiod       2    4[COMRAM] unsigned int 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;		None
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, status,2
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2301 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2302 ;;Total ram usage:        2 bytes
  2303 ;; Hardware stack levels used: 1
  2304 ;; Hardware stack levels required when called: 2
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_main
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text11
  2313   001738                     __ptext11:
  2314                           	callstack 0
  2315   001738                     _initDCmotorsPWM:
  2316                           	callstack 28
  2317   001738                     
  2318                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  2319   001738  9485               	bcf	133,2,c	;volatile
  2320                           
  2321                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  2322   00173A  9885               	bcf	133,4,c	;volatile
  2323                           
  2324                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  2325   00173C  9E83               	bcf	131,7,c	;volatile
  2326                           
  2327                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  2328   00173E  9C87               	bcf	135,6,c	;volatile
  2329                           
  2330                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
  2331   001740  947D               	bcf	125,2,c	;volatile
  2332                           
  2333                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
  2334   001742  987D               	bcf	125,4,c	;volatile
  2335                           
  2336                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
  2337   001744  9E7B               	bcf	123,7,c	;volatile
  2338                           
  2339                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
  2340   001746  9C7F               	bcf	127,6,c	;volatile
  2341   001748                     
  2342                           ;dc_motor.c: 18:     RE2PPS=0x05;
  2343   001748  0E05               	movlw	5
  2344   00174A  010E               	movlb	14	; () banked
  2345   00174C  6F74               	movwf	116,b	;volatile
  2346                           
  2347                           ;dc_motor.c: 19:     RE4PPS=0x06;
  2348   00174E  0E06               	movlw	6
  2349   001750  6F76               	movwf	118,b	;volatile
  2350                           
  2351                           ;dc_motor.c: 20:     RC7PPS=0x07;
  2352   001752  0E07               	movlw	7
  2353   001754  6F69               	movwf	105,b	;volatile
  2354                           
  2355                           ;dc_motor.c: 21:     RG6PPS=0x08;
  2356   001756  0E08               	movlw	8
  2357   001758  6F88               	movwf	136,b	;volatile
  2358                           
  2359                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  2360   00175A  50BD               	movf	189,w,c	;volatile
  2361   00175C  0B8F               	andlw	-113
  2362   00175E  0940               	iorlw	64
  2363   001760  6EBD               	movwf	189,c	;volatile
  2364                           
  2365                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  2366   001762  0EE0               	movlw	-32
  2367   001764  16BE               	andwf	190,f,c	;volatile
  2368                           
  2369                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  2370   001766  50BF               	movf	191,w,c	;volatile
  2371   001768  0BF0               	andlw	-16
  2372   00176A  0901               	iorlw	1
  2373   00176C  6EBF               	movwf	191,c	;volatile
  2374   00176E                     
  2375                           ; BSR set to: 14
  2376                           ;dc_motor.c: 30:     T2PR=(unsigned char)PWMperiod;
  2377   00176E  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2378   001772                     
  2379                           ; BSR set to: 14
  2380                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  2381   001772  8EBD               	bsf	189,7,c	;volatile
  2382                           
  2383                           ;dc_motor.c: 35:     CCPR1H=0;
  2384   001774  0E00               	movlw	0
  2385   001776  6EAA               	movwf	170,c	;volatile
  2386                           
  2387                           ;dc_motor.c: 36:     CCPR2H=0;
  2388   001778  0E00               	movlw	0
  2389   00177A  6EA6               	movwf	166,c	;volatile
  2390                           
  2391                           ;dc_motor.c: 37:     CCPR3H=0;
  2392   00177C  0E00               	movlw	0
  2393   00177E  010F               	movlb	15	; () banked
  2394   001780  6F25               	movwf	37,b	;volatile
  2395                           
  2396                           ;dc_motor.c: 38:     CCPR4H=0;
  2397   001782  0E00               	movlw	0
  2398   001784  6F21               	movwf	33,b	;volatile
  2399                           
  2400                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  2401   001786  0EFC               	movlw	-4
  2402   001788  16AD               	andwf	173,f,c	;volatile
  2403                           
  2404                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  2405   00178A  0EF3               	movlw	-13
  2406   00178C  16AD               	andwf	173,f,c	;volatile
  2407                           
  2408                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  2409   00178E  0ECF               	movlw	-49
  2410   001790  16AD               	andwf	173,f,c	;volatile
  2411                           
  2412                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  2413   001792  0E3F               	movlw	-193
  2414   001794  16AD               	andwf	173,f,c	;volatile
  2415   001796                     
  2416                           ; BSR set to: 15
  2417                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  2418   001796  88AB               	bsf	171,4,c	;volatile
  2419                           
  2420                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  2421   001798  50AB               	movf	171,w,c	;volatile
  2422   00179A  0BF0               	andlw	-16
  2423   00179C  090C               	iorlw	12
  2424   00179E  6EAB               	movwf	171,c	;volatile
  2425   0017A0                     
  2426                           ; BSR set to: 15
  2427                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  2428   0017A0  8EAB               	bsf	171,7,c	;volatile
  2429   0017A2                     
  2430                           ; BSR set to: 15
  2431                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  2432   0017A2  88A7               	bsf	167,4,c	;volatile
  2433                           
  2434                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  2435   0017A4  50A7               	movf	167,w,c	;volatile
  2436   0017A6  0BF0               	andlw	-16
  2437   0017A8  090C               	iorlw	12
  2438   0017AA  6EA7               	movwf	167,c	;volatile
  2439   0017AC                     
  2440                           ; BSR set to: 15
  2441                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  2442   0017AC  8EA7               	bsf	167,7,c	;volatile
  2443   0017AE                     
  2444                           ; BSR set to: 15
  2445                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  2446   0017AE  8926               	bsf	38,4,b	;volatile
  2447                           
  2448                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  2449   0017B0  5126               	movf	38,w,b	;volatile
  2450   0017B2  0BF0               	andlw	-16
  2451   0017B4  090C               	iorlw	12
  2452   0017B6  6F26               	movwf	38,b	;volatile
  2453   0017B8                     
  2454                           ; BSR set to: 15
  2455                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  2456   0017B8  8F26               	bsf	38,7,b	;volatile
  2457   0017BA                     
  2458                           ; BSR set to: 15
  2459                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  2460   0017BA  8922               	bsf	34,4,b	;volatile
  2461                           
  2462                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  2463   0017BC  5122               	movf	34,w,b	;volatile
  2464   0017BE  0BF0               	andlw	-16
  2465   0017C0  090C               	iorlw	12
  2466   0017C2  6F22               	movwf	34,b	;volatile
  2467   0017C4                     
  2468                           ; BSR set to: 15
  2469                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  2470   0017C4  8F22               	bsf	34,7,b	;volatile
  2471   0017C6                     
  2472                           ; BSR set to: 15
  2473   0017C6  0012               	return		;funcret
  2474   0017C8                     __end_of_initDCmotorsPWM:
  2475                           	callstack 0
  2476                           
  2477 ;; *************** function _getRGBCval *****************
  2478 ;; Defined at:
  2479 ;;		line 85 in file "color.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  p               2   15[COMRAM] PTR struct RGBC_val
  2482 ;;		 -> main@readRGBC(8), 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;		None
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2497 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2498 ;;Total ram usage:        2 bytes
  2499 ;; Hardware stack levels used: 1
  2500 ;; Hardware stack levels required when called: 5
  2501 ;; This function calls:
  2502 ;;		_color_read_Blue
  2503 ;;		_color_read_Clear
  2504 ;;		_color_read_Green
  2505 ;;		_color_read_Red
  2506 ;; This function is called by:
  2507 ;;		_main
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text12
  2512   00192E                     __ptext12:
  2513                           	callstack 0
  2514   00192E                     _getRGBCval:
  2515                           	callstack 25
  2516   00192E                     
  2517                           ;color.c: 85: void getRGBCval(struct RGBC_val *p);color.c: 86: {;color.c: 87:     p->R =
      +                           color_read_Red();
  2518   00192E  EC17  F00D         	call	_color_read_Red	;wreg free
  2519   001932  C010  FFD9         	movff	getRGBCval@p,fsr2l
  2520   001936  C011  FFDA         	movff	getRGBCval@p+1,fsr2h
  2521   00193A  C009  FFDE         	movff	?_color_read_Red,postinc2
  2522   00193E  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  2523                           
  2524                           ;color.c: 88:     p->B = color_read_Blue();
  2525   001942  EC8F  F00D         	call	_color_read_Blue	;wreg free
  2526   001946  EE20 F004          	lfsr	2,4
  2527   00194A  5010               	movf	getRGBCval@p^0,w,c
  2528   00194C  26D9               	addwf	fsr2l,f,c
  2529   00194E  5011               	movf	(getRGBCval@p+1)^0,w,c
  2530   001950  22DA               	addwfc	fsr2h,f,c
  2531   001952  C009  FFDE         	movff	?_color_read_Blue,postinc2
  2532   001956  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  2533                           
  2534                           ;color.c: 89:     p->G = color_read_Green();
  2535   00195A  EC3F  F00D         	call	_color_read_Green	;wreg free
  2536   00195E  EE20 F002          	lfsr	2,2
  2537   001962  5010               	movf	getRGBCval@p^0,w,c
  2538   001964  26D9               	addwf	fsr2l,f,c
  2539   001966  5011               	movf	(getRGBCval@p+1)^0,w,c
  2540   001968  22DA               	addwfc	fsr2h,f,c
  2541   00196A  C009  FFDE         	movff	?_color_read_Green,postinc2
  2542   00196E  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  2543                           
  2544                           ;color.c: 90:     p->C = color_read_Clear();
  2545   001972  EC67  F00D         	call	_color_read_Clear	;wreg free
  2546   001976  EE20 F006          	lfsr	2,6
  2547   00197A  5010               	movf	getRGBCval@p^0,w,c
  2548   00197C  26D9               	addwf	fsr2l,f,c
  2549   00197E  5011               	movf	(getRGBCval@p+1)^0,w,c
  2550   001980  22DA               	addwfc	fsr2h,f,c
  2551   001982  C009  FFDE         	movff	?_color_read_Clear,postinc2
  2552   001986  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  2553   00198A  0012               	return		;funcret
  2554   00198C                     __end_of_getRGBCval:
  2555                           	callstack 0
  2556                           
  2557 ;; *************** function _color_read_Red *****************
  2558 ;; Defined at:
  2559 ;;		line 29 in file "color.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;		None
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;  tmp             2   13[COMRAM] unsigned int 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  2    8[COMRAM] unsigned int 
  2566 ;; Registers used:
  2567 ;;		wreg, status,2, status,0, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2575 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2576 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2577 ;;Total ram usage:        7 bytes
  2578 ;; Hardware stack levels used: 1
  2579 ;; Hardware stack levels required when called: 4
  2580 ;; This function calls:
  2581 ;;		_I2C_2_Master_Read
  2582 ;;		_I2C_2_Master_RepStart
  2583 ;;		_I2C_2_Master_Start
  2584 ;;		_I2C_2_Master_Stop
  2585 ;;		_I2C_2_Master_Write
  2586 ;; This function is called by:
  2587 ;;		_getRGBCval
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text13
  2592   001A2E                     __ptext13:
  2593                           	callstack 0
  2594   001A2E                     _color_read_Red:
  2595                           	callstack 25
  2596   001A2E                     
  2597                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  2598   001A2E  EC95  F00F         	call	_I2C_2_Master_Start	;wreg free
  2599                           
  2600                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  2601   001A32  0E52               	movlw	82
  2602   001A34  EC85  F00F         	call	_I2C_2_Master_Write
  2603                           
  2604                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  2605   001A38  0EB6               	movlw	182
  2606   001A3A  EC85  F00F         	call	_I2C_2_Master_Write
  2607                           
  2608                           ;color.c: 35:  I2C_2_Master_RepStart();
  2609   001A3E  EC8B  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  2610                           
  2611                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  2612   001A42  0E53               	movlw	83
  2613   001A44  EC85  F00F         	call	_I2C_2_Master_Write
  2614                           
  2615                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  2616   001A48  0E01               	movlw	1
  2617   001A4A  ECDE  F00D         	call	_I2C_2_Master_Read
  2618   001A4E  6E0B               	movwf	??_color_read_Red^0,c
  2619   001A50  500B               	movf	??_color_read_Red^0,w,c
  2620   001A52  6E0E               	movwf	color_read_Red@tmp^0,c
  2621   001A54  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  2622                           
  2623                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2624   001A56  0E00               	movlw	0
  2625   001A58  ECDE  F00D         	call	_I2C_2_Master_Read
  2626   001A5C  6E0B               	movwf	??_color_read_Red^0,c
  2627   001A5E  500B               	movf	??_color_read_Red^0,w,c
  2628   001A60  6E0D               	movwf	(??_color_read_Red+2)^0,c
  2629   001A62  6A0C               	clrf	(??_color_read_Red+1)^0,c
  2630   001A64  500E               	movf	color_read_Red@tmp^0,w,c
  2631   001A66  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  2632   001A68  6E0E               	movwf	color_read_Red@tmp^0,c
  2633   001A6A  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  2634   001A6C  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  2635   001A6E  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  2636                           
  2637                           ;color.c: 39:  I2C_2_Master_Stop();
  2638   001A70  EC90  F00F         	call	_I2C_2_Master_Stop	;wreg free
  2639   001A74                     
  2640                           ;color.c: 40:  return tmp;
  2641   001A74  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  2642   001A78  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  2643   001A7C  0012               	return		;funcret
  2644   001A7E                     __end_of_color_read_Red:
  2645                           	callstack 0
  2646                           
  2647 ;; *************** function _color_read_Green *****************
  2648 ;; Defined at:
  2649 ;;		line 57 in file "color.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;		None
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  tmp             2   13[COMRAM] unsigned int 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  2    8[COMRAM] unsigned int 
  2656 ;; Registers used:
  2657 ;;		wreg, status,2, status,0, cstack
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2663 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2665 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2666 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2667 ;;Total ram usage:        7 bytes
  2668 ;; Hardware stack levels used: 1
  2669 ;; Hardware stack levels required when called: 4
  2670 ;; This function calls:
  2671 ;;		_I2C_2_Master_Read
  2672 ;;		_I2C_2_Master_RepStart
  2673 ;;		_I2C_2_Master_Start
  2674 ;;		_I2C_2_Master_Stop
  2675 ;;		_I2C_2_Master_Write
  2676 ;; This function is called by:
  2677 ;;		_getRGBCval
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text14
  2682   001A7E                     __ptext14:
  2683                           	callstack 0
  2684   001A7E                     _color_read_Green:
  2685                           	callstack 25
  2686   001A7E                     
  2687                           ;color.c: 59:     unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  2688   001A7E  EC95  F00F         	call	_I2C_2_Master_Start	;wreg free
  2689                           
  2690                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  2691   001A82  0E52               	movlw	82
  2692   001A84  EC85  F00F         	call	_I2C_2_Master_Write
  2693                           
  2694                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x18);
  2695   001A88  0EB8               	movlw	184
  2696   001A8A  EC85  F00F         	call	_I2C_2_Master_Write
  2697                           
  2698                           ;color.c: 63:  I2C_2_Master_RepStart();
  2699   001A8E  EC8B  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  2700                           
  2701                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  2702   001A92  0E53               	movlw	83
  2703   001A94  EC85  F00F         	call	_I2C_2_Master_Write
  2704                           
  2705                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  2706   001A98  0E01               	movlw	1
  2707   001A9A  ECDE  F00D         	call	_I2C_2_Master_Read
  2708   001A9E  6E0B               	movwf	??_color_read_Green^0,c
  2709   001AA0  500B               	movf	??_color_read_Green^0,w,c
  2710   001AA2  6E0E               	movwf	color_read_Green@tmp^0,c
  2711   001AA4  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  2712                           
  2713                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2714   001AA6  0E00               	movlw	0
  2715   001AA8  ECDE  F00D         	call	_I2C_2_Master_Read
  2716   001AAC  6E0B               	movwf	??_color_read_Green^0,c
  2717   001AAE  500B               	movf	??_color_read_Green^0,w,c
  2718   001AB0  6E0D               	movwf	(??_color_read_Green+2)^0,c
  2719   001AB2  6A0C               	clrf	(??_color_read_Green+1)^0,c
  2720   001AB4  500E               	movf	color_read_Green@tmp^0,w,c
  2721   001AB6  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  2722   001AB8  6E0E               	movwf	color_read_Green@tmp^0,c
  2723   001ABA  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  2724   001ABC  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  2725   001ABE  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  2726                           
  2727                           ;color.c: 67:  I2C_2_Master_Stop();
  2728   001AC0  EC90  F00F         	call	_I2C_2_Master_Stop	;wreg free
  2729   001AC4                     
  2730                           ;color.c: 68:  return tmp;
  2731   001AC4  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  2732   001AC8  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  2733   001ACC  0012               	return		;funcret
  2734   001ACE                     __end_of_color_read_Green:
  2735                           	callstack 0
  2736                           
  2737 ;; *************** function _color_read_Clear *****************
  2738 ;; Defined at:
  2739 ;;		line 71 in file "color.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;		None
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;  tmp             2   13[COMRAM] unsigned int 
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  2    8[COMRAM] unsigned int 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2, status,0, cstack
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2755 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2756 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2757 ;;Total ram usage:        7 bytes
  2758 ;; Hardware stack levels used: 1
  2759 ;; Hardware stack levels required when called: 4
  2760 ;; This function calls:
  2761 ;;		_I2C_2_Master_Read
  2762 ;;		_I2C_2_Master_RepStart
  2763 ;;		_I2C_2_Master_Start
  2764 ;;		_I2C_2_Master_Stop
  2765 ;;		_I2C_2_Master_Write
  2766 ;; This function is called by:
  2767 ;;		_getRGBCval
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text15
  2772   001ACE                     __ptext15:
  2773                           	callstack 0
  2774   001ACE                     _color_read_Clear:
  2775                           	callstack 25
  2776   001ACE                     
  2777                           ;color.c: 73:     unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  2778   001ACE  EC95  F00F         	call	_I2C_2_Master_Start	;wreg free
  2779                           
  2780                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  2781   001AD2  0E52               	movlw	82
  2782   001AD4  EC85  F00F         	call	_I2C_2_Master_Write
  2783                           
  2784                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  2785   001AD8  0EB4               	movlw	180
  2786   001ADA  EC85  F00F         	call	_I2C_2_Master_Write
  2787                           
  2788                           ;color.c: 77:  I2C_2_Master_RepStart();
  2789   001ADE  EC8B  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  2790                           
  2791                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  2792   001AE2  0E53               	movlw	83
  2793   001AE4  EC85  F00F         	call	_I2C_2_Master_Write
  2794                           
  2795                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  2796   001AE8  0E01               	movlw	1
  2797   001AEA  ECDE  F00D         	call	_I2C_2_Master_Read
  2798   001AEE  6E0B               	movwf	??_color_read_Clear^0,c
  2799   001AF0  500B               	movf	??_color_read_Clear^0,w,c
  2800   001AF2  6E0E               	movwf	color_read_Clear@tmp^0,c
  2801   001AF4  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  2802                           
  2803                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2804   001AF6  0E00               	movlw	0
  2805   001AF8  ECDE  F00D         	call	_I2C_2_Master_Read
  2806   001AFC  6E0B               	movwf	??_color_read_Clear^0,c
  2807   001AFE  500B               	movf	??_color_read_Clear^0,w,c
  2808   001B00  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  2809   001B02  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  2810   001B04  500E               	movf	color_read_Clear@tmp^0,w,c
  2811   001B06  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  2812   001B08  6E0E               	movwf	color_read_Clear@tmp^0,c
  2813   001B0A  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  2814   001B0C  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  2815   001B0E  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  2816                           
  2817                           ;color.c: 81:  I2C_2_Master_Stop();
  2818   001B10  EC90  F00F         	call	_I2C_2_Master_Stop	;wreg free
  2819   001B14                     
  2820                           ;color.c: 82:  return tmp;
  2821   001B14  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  2822   001B18  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  2823   001B1C  0012               	return		;funcret
  2824   001B1E                     __end_of_color_read_Clear:
  2825                           	callstack 0
  2826                           
  2827 ;; *************** function _color_read_Blue *****************
  2828 ;; Defined at:
  2829 ;;		line 43 in file "color.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;		None
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  tmp             2   13[COMRAM] unsigned int 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  2    8[COMRAM] unsigned int 
  2836 ;; Registers used:
  2837 ;;		wreg, status,2, status,0, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2843 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2845 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2846 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2847 ;;Total ram usage:        7 bytes
  2848 ;; Hardware stack levels used: 1
  2849 ;; Hardware stack levels required when called: 4
  2850 ;; This function calls:
  2851 ;;		_I2C_2_Master_Read
  2852 ;;		_I2C_2_Master_RepStart
  2853 ;;		_I2C_2_Master_Start
  2854 ;;		_I2C_2_Master_Stop
  2855 ;;		_I2C_2_Master_Write
  2856 ;; This function is called by:
  2857 ;;		_getRGBCval
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text16
  2862   001B1E                     __ptext16:
  2863                           	callstack 0
  2864   001B1E                     _color_read_Blue:
  2865                           	callstack 25
  2866   001B1E                     
  2867                           ;color.c: 45:     unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  2868   001B1E  EC95  F00F         	call	_I2C_2_Master_Start	;wreg free
  2869                           
  2870                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  2871   001B22  0E52               	movlw	82
  2872   001B24  EC85  F00F         	call	_I2C_2_Master_Write
  2873                           
  2874                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x1A);
  2875   001B28  0EBA               	movlw	186
  2876   001B2A  EC85  F00F         	call	_I2C_2_Master_Write
  2877                           
  2878                           ;color.c: 49:  I2C_2_Master_RepStart();
  2879   001B2E  EC8B  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  2880                           
  2881                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  2882   001B32  0E53               	movlw	83
  2883   001B34  EC85  F00F         	call	_I2C_2_Master_Write
  2884                           
  2885                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  2886   001B38  0E01               	movlw	1
  2887   001B3A  ECDE  F00D         	call	_I2C_2_Master_Read
  2888   001B3E  6E0B               	movwf	??_color_read_Blue^0,c
  2889   001B40  500B               	movf	??_color_read_Blue^0,w,c
  2890   001B42  6E0E               	movwf	color_read_Blue@tmp^0,c
  2891   001B44  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  2892                           
  2893                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2894   001B46  0E00               	movlw	0
  2895   001B48  ECDE  F00D         	call	_I2C_2_Master_Read
  2896   001B4C  6E0B               	movwf	??_color_read_Blue^0,c
  2897   001B4E  500B               	movf	??_color_read_Blue^0,w,c
  2898   001B50  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  2899   001B52  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  2900   001B54  500E               	movf	color_read_Blue@tmp^0,w,c
  2901   001B56  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  2902   001B58  6E0E               	movwf	color_read_Blue@tmp^0,c
  2903   001B5A  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  2904   001B5C  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  2905   001B5E  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  2906                           
  2907                           ;color.c: 53:  I2C_2_Master_Stop();
  2908   001B60  EC90  F00F         	call	_I2C_2_Master_Stop	;wreg free
  2909   001B64                     
  2910                           ;color.c: 54:  return tmp;
  2911   001B64  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  2912   001B68  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  2913   001B6C  0012               	return		;funcret
  2914   001B6E                     __end_of_color_read_Blue:
  2915                           	callstack 0
  2916                           
  2917 ;; *************** function _I2C_2_Master_RepStart *****************
  2918 ;; Defined at:
  2919 ;;		line 33 in file "i2c.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;		None
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0, cstack
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2937 ;;Total ram usage:        0 bytes
  2938 ;; Hardware stack levels used: 1
  2939 ;; Hardware stack levels required when called: 3
  2940 ;; This function calls:
  2941 ;;		_I2C_2_Master_Idle
  2942 ;; This function is called by:
  2943 ;;		_color_read_Red
  2944 ;;		_color_read_Blue
  2945 ;;		_color_read_Green
  2946 ;;		_color_read_Clear
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text17
  2951   001F16                     __ptext17:
  2952                           	callstack 0
  2953   001F16                     _I2C_2_Master_RepStart:
  2954                           	callstack 25
  2955   001F16                     
  2956                           ;i2c.c: 35:   I2C_2_Master_Idle();
  2957   001F16  ECDD  F00E         	call	_I2C_2_Master_Idle	;wreg free
  2958   001F1A                     
  2959                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  2960   001F1A  010E               	movlb	14	; () banked
  2961   001F1C  83DA               	bsf	218,1,b	;volatile
  2962   001F1E                     
  2963                           ; BSR set to: 14
  2964   001F1E  0012               	return		;funcret
  2965   001F20                     __end_of_I2C_2_Master_RepStart:
  2966                           	callstack 0
  2967                           
  2968 ;; *************** function _I2C_2_Master_Read *****************
  2969 ;; Defined at:
  2970 ;;		line 51 in file "i2c.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  ack             1    wreg     unsigned char 
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;  ack             1    6[COMRAM] unsigned char 
  2975 ;;  tmp             1    7[COMRAM] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      unsigned char 
  2978 ;; Registers used:
  2979 ;;		wreg, status,2, status,0, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2987 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2988 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2989 ;;Total ram usage:        3 bytes
  2990 ;; Hardware stack levels used: 1
  2991 ;; Hardware stack levels required when called: 3
  2992 ;; This function calls:
  2993 ;;		_I2C_2_Master_Idle
  2994 ;; This function is called by:
  2995 ;;		_color_read_Red
  2996 ;;		_color_read_Blue
  2997 ;;		_color_read_Green
  2998 ;;		_color_read_Clear
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text18
  3003   001BBC                     __ptext18:
  3004                           	callstack 0
  3005   001BBC                     _I2C_2_Master_Read:
  3006                           	callstack 25
  3007                           
  3008                           ; BSR set to: 14
  3009                           ;incstack = 0
  3010                           ;I2C_2_Master_Read@ack stored from wreg
  3011   001BBC  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  3012   001BBE                     
  3013                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3014   001BBE  ECDD  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3015   001BC2                     
  3016                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3017   001BC2  010E               	movlb	14	; () banked
  3018   001BC4  87DA               	bsf	218,3,b	;volatile
  3019                           
  3020                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3021   001BC6  ECDD  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3022   001BCA                     
  3023                           ;i2c.c: 57:   tmp = SSP2BUF;
  3024   001BCA  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3025                           
  3026                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3027   001BCE  ECDD  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3028   001BD2                     
  3029                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3030   001BD2  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  3031   001BD4  B4D8               	btfsc	status,2,c
  3032   001BD6  EFEF  F00D         	goto	u2391
  3033   001BDA  EFF3  F00D         	goto	u2390
  3034   001BDE                     u2391:
  3035   001BDE  6A06               	clrf	??_I2C_2_Master_Read^0,c
  3036   001BE0  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  3037   001BE2  EFF4  F00D         	goto	u2408
  3038   001BE6                     u2390:
  3039   001BE6  6A06               	clrf	??_I2C_2_Master_Read^0,c
  3040   001BE8                     u2408:
  3041   001BE8  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  3042   001BEA  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  3043   001BEC  010E               	movlb	14	; () banked
  3044   001BEE  51DA               	movf	218,w,b	;volatile
  3045   001BF0  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  3046   001BF2  0BDF               	andlw	-33
  3047   001BF4  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  3048   001BF6  6FDA               	movwf	218,b	;volatile
  3049   001BF8                     
  3050                           ; BSR set to: 14
  3051                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3052   001BF8  89DA               	bsf	218,4,b	;volatile
  3053   001BFA                     
  3054                           ; BSR set to: 14
  3055                           ;i2c.c: 61:   return tmp;
  3056   001BFA  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  3057   001BFC                     
  3058                           ; BSR set to: 14
  3059   001BFC  0012               	return		;funcret
  3060   001BFE                     __end_of_I2C_2_Master_Read:
  3061                           	callstack 0
  3062                           
  3063 ;; *************** function _getHSVval *****************
  3064 ;; Defined at:
  3065 ;;		line 143 in file "color.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  p1              2   22[COMRAM] PTR struct HSV_val
  3068 ;;		 -> main@readHSV(6), 
  3069 ;;  p2              2   24[COMRAM] PTR struct RGBC_val
  3070 ;;		 -> main@readRGBC(8), 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  maxRGB          2   44[COMRAM] int 
  3073 ;;  range           2   42[COMRAM] int 
  3074 ;;  hue             2   38[COMRAM] int 
  3075 ;;  saturation      2   36[COMRAM] int 
  3076 ;;  minRGB          2   30[COMRAM] int 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3086 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3087 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3088 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3089 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3090 ;;Total ram usage:       24 bytes
  3091 ;; Hardware stack levels used: 1
  3092 ;; Hardware stack levels required when called: 3
  3093 ;; This function calls:
  3094 ;;		___awdiv
  3095 ;;		___lwdiv
  3096 ;;		___lwmod
  3097 ;;		___wmul
  3098 ;;		_max
  3099 ;;		_min
  3100 ;; This function is called by:
  3101 ;;		_main
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text19
  3106   000E1C                     __ptext19:
  3107                           	callstack 0
  3108   000E1C                     _getHSVval:
  3109                           	callstack 27
  3110   000E1C                     
  3111                           ;color.c: 143: void getHSVval(struct HSV_val *p1,struct RGBC_val *p2);color.c: 144: {;co
      +                          lor.c: 145:     int maxRGB;;color.c: 146:     int minRGB;;color.c: 147:     int range;;c
      +                          olor.c: 148:     int hue;;color.c: 149:     int saturation;;color.c: 153:     maxRGB = m
      +                          ax(max(p2->R,p2->G),p2->B);
  3112   000E1C  C019  FFD9         	movff	getHSVval@p2,fsr2l
  3113   000E20  C01A  FFDA         	movff	getHSVval@p2+1,fsr2h
  3114   000E24  CFDE F005          	movff	postinc2,max@a
  3115   000E28  CFDD F006          	movff	postdec2,max@a+1
  3116   000E2C  EE20 F002          	lfsr	2,2
  3117   000E30  5019               	movf	getHSVval@p2^0,w,c
  3118   000E32  26D9               	addwf	fsr2l,f,c
  3119   000E34  501A               	movf	(getHSVval@p2+1)^0,w,c
  3120   000E36  22DA               	addwfc	fsr2h,f,c
  3121   000E38  CFDE F007          	movff	postinc2,max@b
  3122   000E3C  CFDD F008          	movff	postdec2,max@b+1
  3123   000E40  EC1D  F00E         	call	_max	;wreg free
  3124   000E44  C005  F021         	movff	?_max,_getHSVval$3064
  3125   000E48  C006  F022         	movff	?_max+1,_getHSVval$3064+1
  3126                           
  3127                           ;color.c: 143: void getHSVval(struct HSV_val *p1,struct RGBC_val *p2);color.c: 144: {;co
      +                          lor.c: 145:     int maxRGB;;color.c: 146:     int minRGB;;color.c: 147:     int range;;c
      +                          olor.c: 148:     int hue;;color.c: 149:     int saturation;;color.c: 153:     maxRGB = m
      +                          ax(max(p2->R,p2->G),p2->B);
  3128   000E4C  C021  F005         	movff	_getHSVval$3064,max@a
  3129   000E50  C022  F006         	movff	_getHSVval$3064+1,max@a+1
  3130   000E54  EE20 F004          	lfsr	2,4
  3131   000E58  5019               	movf	getHSVval@p2^0,w,c
  3132   000E5A  26D9               	addwf	fsr2l,f,c
  3133   000E5C  501A               	movf	(getHSVval@p2+1)^0,w,c
  3134   000E5E  22DA               	addwfc	fsr2h,f,c
  3135   000E60  CFDE F007          	movff	postinc2,max@b
  3136   000E64  CFDD F008          	movff	postdec2,max@b+1
  3137   000E68  EC1D  F00E         	call	_max	;wreg free
  3138   000E6C  C005  F02D         	movff	?_max,getHSVval@maxRGB
  3139   000E70  C006  F02E         	movff	?_max+1,getHSVval@maxRGB+1
  3140                           
  3141                           ;color.c: 154:     minRGB = min(min(p2->R,p2->G),p2->B);
  3142   000E74  C019  FFD9         	movff	getHSVval@p2,fsr2l
  3143   000E78  C01A  FFDA         	movff	getHSVval@p2+1,fsr2h
  3144   000E7C  CFDE F005          	movff	postinc2,min@a
  3145   000E80  CFDD F006          	movff	postdec2,min@a+1
  3146   000E84  EE20 F002          	lfsr	2,2
  3147   000E88  5019               	movf	getHSVval@p2^0,w,c
  3148   000E8A  26D9               	addwf	fsr2l,f,c
  3149   000E8C  501A               	movf	(getHSVval@p2+1)^0,w,c
  3150   000E8E  22DA               	addwfc	fsr2h,f,c
  3151   000E90  CFDE F007          	movff	postinc2,min@b
  3152   000E94  CFDD F008          	movff	postdec2,min@b+1
  3153   000E98  ECFF  F00D         	call	_min	;wreg free
  3154   000E9C  C005  F023         	movff	?_min,_getHSVval$3065
  3155   000EA0  C006  F024         	movff	?_min+1,_getHSVval$3065+1
  3156                           
  3157                           ;color.c: 154:     minRGB = min(min(p2->R,p2->G),p2->B);
  3158   000EA4  C023  F005         	movff	_getHSVval$3065,min@a
  3159   000EA8  C024  F006         	movff	_getHSVval$3065+1,min@a+1
  3160   000EAC  EE20 F004          	lfsr	2,4
  3161   000EB0  5019               	movf	getHSVval@p2^0,w,c
  3162   000EB2  26D9               	addwf	fsr2l,f,c
  3163   000EB4  501A               	movf	(getHSVval@p2+1)^0,w,c
  3164   000EB6  22DA               	addwfc	fsr2h,f,c
  3165   000EB8  CFDE F007          	movff	postinc2,min@b
  3166   000EBC  CFDD F008          	movff	postdec2,min@b+1
  3167   000EC0  ECFF  F00D         	call	_min	;wreg free
  3168   000EC4  C005  F01F         	movff	?_min,getHSVval@minRGB
  3169   000EC8  C006  F020         	movff	?_min+1,getHSVval@minRGB+1
  3170   000ECC                     
  3171                           ;color.c: 155:     range = maxRGB - minRGB;
  3172   000ECC  501F               	movf	getHSVval@minRGB^0,w,c
  3173   000ECE  5C2D               	subwf	getHSVval@maxRGB^0,w,c
  3174   000ED0  6E2B               	movwf	getHSVval@range^0,c
  3175   000ED2  5020               	movf	(getHSVval@minRGB+1)^0,w,c
  3176   000ED4  582E               	subwfb	(getHSVval@maxRGB+1)^0,w,c
  3177   000ED6  6E2C               	movwf	(getHSVval@range+1)^0,c
  3178   000ED8                     
  3179                           ;color.c: 157:     if (range == 0) {
  3180   000ED8  502B               	movf	getHSVval@range^0,w,c
  3181   000EDA  102C               	iorwf	(getHSVval@range+1)^0,w,c
  3182   000EDC  A4D8               	btfss	status,2,c
  3183   000EDE  EF73  F007         	goto	u3011
  3184   000EE2  EF75  F007         	goto	u3010
  3185   000EE6                     u3011:
  3186   000EE6  EF79  F007         	goto	l4143
  3187   000EEA                     u3010:
  3188   000EEA                     
  3189                           ;color.c: 158:         hue = 0;
  3190   000EEA  0E00               	movlw	0
  3191   000EEC  6E28               	movwf	(getHSVval@hue+1)^0,c
  3192   000EEE  0E00               	movlw	0
  3193   000EF0  6E27               	movwf	getHSVval@hue^0,c
  3194   000EF2                     l4143:
  3195                           
  3196                           ;color.c: 161:     if (maxRGB == (p2->R)) {
  3197   000EF2  C019  FFD9         	movff	getHSVval@p2,fsr2l
  3198   000EF6  C01A  FFDA         	movff	getHSVval@p2+1,fsr2h
  3199   000EFA  502D               	movf	getHSVval@maxRGB^0,w,c
  3200   000EFC  18DE               	xorwf	postinc2,w,c
  3201   000EFE  E107               	bnz	u3021
  3202   000F00  502E               	movf	(getHSVval@maxRGB+1)^0,w,c
  3203   000F02  18DE               	xorwf	postinc2,w,c
  3204   000F04  A4D8               	btfss	status,2,c
  3205   000F06  EF87  F007         	goto	u3021
  3206   000F0A  EF89  F007         	goto	u3020
  3207   000F0E                     u3021:
  3208   000F0E  EFCF  F007         	goto	l4149
  3209   000F12                     u3020:
  3210   000F12                     
  3211                           ;color.c: 162:         hue = 60*(((((p2->G)-(p2->B))*10)/range)%600);
  3212   000F12  0E02               	movlw	2
  3213   000F14  6E15               	movwf	(___lwmod@divisor+1)^0,c
  3214   000F16  0E58               	movlw	88
  3215   000F18  6E14               	movwf	___lwmod@divisor^0,c
  3216   000F1A  C02B  F00D         	movff	getHSVval@range,___lwdiv@divisor
  3217   000F1E  C02C  F00E         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3218   000F22  EE20 F004          	lfsr	2,4
  3219   000F26  5019               	movf	getHSVval@p2^0,w,c
  3220   000F28  26D9               	addwf	fsr2l,f,c
  3221   000F2A  501A               	movf	(getHSVval@p2+1)^0,w,c
  3222   000F2C  22DA               	addwfc	fsr2h,f,c
  3223   000F2E  CFDE F01B          	movff	postinc2,??_getHSVval
  3224   000F32  CFDD F01C          	movff	postdec2,??_getHSVval+1
  3225   000F36  EE20 F002          	lfsr	2,2
  3226   000F3A  5019               	movf	getHSVval@p2^0,w,c
  3227   000F3C  26D9               	addwf	fsr2l,f,c
  3228   000F3E  501A               	movf	(getHSVval@p2+1)^0,w,c
  3229   000F40  22DA               	addwfc	fsr2h,f,c
  3230   000F42  CFDE F01D          	movff	postinc2,??_getHSVval+2
  3231   000F46  CFDD F01E          	movff	postdec2,??_getHSVval+3
  3232   000F4A  501B               	movf	??_getHSVval^0,w,c
  3233   000F4C  5C1D               	subwf	(??_getHSVval+2)^0,w,c
  3234   000F4E  6E05               	movwf	___wmul@multiplier^0,c
  3235   000F50  501C               	movf	(??_getHSVval+1)^0,w,c
  3236   000F52  581E               	subwfb	(??_getHSVval+3)^0,w,c
  3237   000F54  6E06               	movwf	(___wmul@multiplier+1)^0,c
  3238   000F56  0E00               	movlw	0
  3239   000F58  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3240   000F5A  0E0A               	movlw	10
  3241   000F5C  6E07               	movwf	___wmul@multiplicand^0,c
  3242   000F5E  ECF1  F00E         	call	___wmul	;wreg free
  3243   000F62  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3244   000F66  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3245   000F6A  EC2B  F00C         	call	___lwdiv	;wreg free
  3246   000F6E  C00B  F012         	movff	?___lwdiv,___lwmod@dividend
  3247   000F72  C00C  F013         	movff	?___lwdiv+1,___lwmod@dividend+1
  3248   000F76  EC65  F00C         	call	___lwmod	;wreg free
  3249   000F7A  C012  F029         	movff	?___lwmod,_getHSVval$3066
  3250   000F7E  C013  F02A         	movff	?___lwmod+1,_getHSVval$3066+1
  3251   000F82                     
  3252                           ;color.c: 162:         hue = 60*(((((p2->G)-(p2->B))*10)/range)%600);
  3253   000F82  C029  F005         	movff	_getHSVval$3066,___wmul@multiplier
  3254   000F86  C02A  F006         	movff	_getHSVval$3066+1,___wmul@multiplier+1
  3255   000F8A  0E00               	movlw	0
  3256   000F8C  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3257   000F8E  0E3C               	movlw	60
  3258   000F90  6E07               	movwf	___wmul@multiplicand^0,c
  3259   000F92  ECF1  F00E         	call	___wmul	;wreg free
  3260   000F96  C005  F027         	movff	?___wmul,getHSVval@hue
  3261   000F9A  C006  F028         	movff	?___wmul+1,getHSVval@hue+1
  3262   000F9E                     l4149:
  3263                           
  3264                           ;color.c: 165:     if (maxRGB == (p2->G)){
  3265   000F9E  EE20 F002          	lfsr	2,2
  3266   000FA2  5019               	movf	getHSVval@p2^0,w,c
  3267   000FA4  26D9               	addwf	fsr2l,f,c
  3268   000FA6  501A               	movf	(getHSVval@p2+1)^0,w,c
  3269   000FA8  22DA               	addwfc	fsr2h,f,c
  3270   000FAA  502D               	movf	getHSVval@maxRGB^0,w,c
  3271   000FAC  18DE               	xorwf	postinc2,w,c
  3272   000FAE  E107               	bnz	u3031
  3273   000FB0  502E               	movf	(getHSVval@maxRGB+1)^0,w,c
  3274   000FB2  18DE               	xorwf	postinc2,w,c
  3275   000FB4  A4D8               	btfss	status,2,c
  3276   000FB6  EFDF  F007         	goto	u3031
  3277   000FBA  EFE1  F007         	goto	u3030
  3278   000FBE                     u3031:
  3279   000FBE  EF1D  F008         	goto	l4155
  3280   000FC2                     u3030:
  3281   000FC2                     
  3282                           ;color.c: 166:         hue = 60*(((((p2->B)-(p2->R))*10)/range)+200);
  3283   000FC2  C02B  F00D         	movff	getHSVval@range,___lwdiv@divisor
  3284   000FC6  C02C  F00E         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3285   000FCA  C019  FFD9         	movff	getHSVval@p2,fsr2l
  3286   000FCE  C01A  FFDA         	movff	getHSVval@p2+1,fsr2h
  3287   000FD2  CFDE F01B          	movff	postinc2,??_getHSVval
  3288   000FD6  CFDD F01C          	movff	postdec2,??_getHSVval+1
  3289   000FDA  EE20 F004          	lfsr	2,4
  3290   000FDE  5019               	movf	getHSVval@p2^0,w,c
  3291   000FE0  26D9               	addwf	fsr2l,f,c
  3292   000FE2  501A               	movf	(getHSVval@p2+1)^0,w,c
  3293   000FE4  22DA               	addwfc	fsr2h,f,c
  3294   000FE6  CFDE F01D          	movff	postinc2,??_getHSVval+2
  3295   000FEA  CFDD F01E          	movff	postdec2,??_getHSVval+3
  3296   000FEE  501B               	movf	??_getHSVval^0,w,c
  3297   000FF0  5C1D               	subwf	(??_getHSVval+2)^0,w,c
  3298   000FF2  6E05               	movwf	___wmul@multiplier^0,c
  3299   000FF4  501C               	movf	(??_getHSVval+1)^0,w,c
  3300   000FF6  581E               	subwfb	(??_getHSVval+3)^0,w,c
  3301   000FF8  6E06               	movwf	(___wmul@multiplier+1)^0,c
  3302   000FFA  0E00               	movlw	0
  3303   000FFC  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3304   000FFE  0E0A               	movlw	10
  3305   001000  6E07               	movwf	___wmul@multiplicand^0,c
  3306   001002  ECF1  F00E         	call	___wmul	;wreg free
  3307   001006  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3308   00100A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3309   00100E  EC2B  F00C         	call	___lwdiv	;wreg free
  3310   001012  0EC8               	movlw	200
  3311   001014  240B               	addwf	?___lwdiv^0,w,c
  3312   001016  6E29               	movwf	_getHSVval$3066^0,c
  3313   001018  0E00               	movlw	0
  3314   00101A  200C               	addwfc	(?___lwdiv+1)^0,w,c
  3315   00101C  6E2A               	movwf	(_getHSVval$3066+1)^0,c
  3316   00101E                     
  3317                           ;color.c: 166:         hue = 60*(((((p2->B)-(p2->R))*10)/range)+200);
  3318   00101E  C029  F005         	movff	_getHSVval$3066,___wmul@multiplier
  3319   001022  C02A  F006         	movff	_getHSVval$3066+1,___wmul@multiplier+1
  3320   001026  0E00               	movlw	0
  3321   001028  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3322   00102A  0E3C               	movlw	60
  3323   00102C  6E07               	movwf	___wmul@multiplicand^0,c
  3324   00102E  ECF1  F00E         	call	___wmul	;wreg free
  3325   001032  C005  F027         	movff	?___wmul,getHSVval@hue
  3326   001036  C006  F028         	movff	?___wmul+1,getHSVval@hue+1
  3327   00103A                     l4155:
  3328                           
  3329                           ;color.c: 169:     if (maxRGB == (p2->G)){
  3330   00103A  EE20 F002          	lfsr	2,2
  3331   00103E  5019               	movf	getHSVval@p2^0,w,c
  3332   001040  26D9               	addwf	fsr2l,f,c
  3333   001042  501A               	movf	(getHSVval@p2+1)^0,w,c
  3334   001044  22DA               	addwfc	fsr2h,f,c
  3335   001046  502D               	movf	getHSVval@maxRGB^0,w,c
  3336   001048  18DE               	xorwf	postinc2,w,c
  3337   00104A  E107               	bnz	u3041
  3338   00104C  502E               	movf	(getHSVval@maxRGB+1)^0,w,c
  3339   00104E  18DE               	xorwf	postinc2,w,c
  3340   001050  A4D8               	btfss	status,2,c
  3341   001052  EF2D  F008         	goto	u3041
  3342   001056  EF2F  F008         	goto	u3040
  3343   00105A                     u3041:
  3344   00105A  EF6B  F008         	goto	l4161
  3345   00105E                     u3040:
  3346   00105E                     
  3347                           ;color.c: 170:         hue = 60*(((((p2->R)-(p2->G))*10)/range)+400);
  3348   00105E  C02B  F00D         	movff	getHSVval@range,___lwdiv@divisor
  3349   001062  C02C  F00E         	movff	getHSVval@range+1,___lwdiv@divisor+1
  3350   001066  EE20 F002          	lfsr	2,2
  3351   00106A  5019               	movf	getHSVval@p2^0,w,c
  3352   00106C  26D9               	addwf	fsr2l,f,c
  3353   00106E  501A               	movf	(getHSVval@p2+1)^0,w,c
  3354   001070  22DA               	addwfc	fsr2h,f,c
  3355   001072  CFDE F01B          	movff	postinc2,??_getHSVval
  3356   001076  CFDD F01C          	movff	postdec2,??_getHSVval+1
  3357   00107A  C019  FFD9         	movff	getHSVval@p2,fsr2l
  3358   00107E  C01A  FFDA         	movff	getHSVval@p2+1,fsr2h
  3359   001082  CFDE F01D          	movff	postinc2,??_getHSVval+2
  3360   001086  CFDD F01E          	movff	postdec2,??_getHSVval+3
  3361   00108A  501B               	movf	??_getHSVval^0,w,c
  3362   00108C  5C1D               	subwf	(??_getHSVval+2)^0,w,c
  3363   00108E  6E05               	movwf	___wmul@multiplier^0,c
  3364   001090  501C               	movf	(??_getHSVval+1)^0,w,c
  3365   001092  581E               	subwfb	(??_getHSVval+3)^0,w,c
  3366   001094  6E06               	movwf	(___wmul@multiplier+1)^0,c
  3367   001096  0E00               	movlw	0
  3368   001098  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3369   00109A  0E0A               	movlw	10
  3370   00109C  6E07               	movwf	___wmul@multiplicand^0,c
  3371   00109E  ECF1  F00E         	call	___wmul	;wreg free
  3372   0010A2  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3373   0010A6  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3374   0010AA  EC2B  F00C         	call	___lwdiv	;wreg free
  3375   0010AE  0E90               	movlw	144
  3376   0010B0  240B               	addwf	?___lwdiv^0,w,c
  3377   0010B2  6E29               	movwf	_getHSVval$3066^0,c
  3378   0010B4  0E01               	movlw	1
  3379   0010B6  200C               	addwfc	(?___lwdiv+1)^0,w,c
  3380   0010B8  6E2A               	movwf	(_getHSVval$3066+1)^0,c
  3381   0010BA                     
  3382                           ;color.c: 170:         hue = 60*(((((p2->R)-(p2->G))*10)/range)+400);
  3383   0010BA  C029  F005         	movff	_getHSVval$3066,___wmul@multiplier
  3384   0010BE  C02A  F006         	movff	_getHSVval$3066+1,___wmul@multiplier+1
  3385   0010C2  0E00               	movlw	0
  3386   0010C4  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3387   0010C6  0E3C               	movlw	60
  3388   0010C8  6E07               	movwf	___wmul@multiplicand^0,c
  3389   0010CA  ECF1  F00E         	call	___wmul	;wreg free
  3390   0010CE  C005  F027         	movff	?___wmul,getHSVval@hue
  3391   0010D2  C006  F028         	movff	?___wmul+1,getHSVval@hue+1
  3392   0010D6                     l4161:
  3393                           
  3394                           ;color.c: 173:     if (maxRGB == 0) {saturation = 0;}
  3395   0010D6  502D               	movf	getHSVval@maxRGB^0,w,c
  3396   0010D8  102E               	iorwf	(getHSVval@maxRGB+1)^0,w,c
  3397   0010DA  A4D8               	btfss	status,2,c
  3398   0010DC  EF72  F008         	goto	u3051
  3399   0010E0  EF74  F008         	goto	u3050
  3400   0010E4                     u3051:
  3401   0010E4  EF78  F008         	goto	l4165
  3402   0010E8                     u3050:
  3403   0010E8  0E00               	movlw	0
  3404   0010EA  6E26               	movwf	(getHSVval@saturation+1)^0,c
  3405   0010EC  0E00               	movlw	0
  3406   0010EE  6E25               	movwf	getHSVval@saturation^0,c
  3407   0010F0                     l4165:
  3408                           
  3409                           ;color.c: 175:     if (maxRGB != 0) {saturation = (range*10)/maxRGB;}
  3410   0010F0  502D               	movf	getHSVval@maxRGB^0,w,c
  3411   0010F2  102E               	iorwf	(getHSVval@maxRGB+1)^0,w,c
  3412   0010F4  B4D8               	btfsc	status,2,c
  3413   0010F6  EF7F  F008         	goto	u3061
  3414   0010FA  EF81  F008         	goto	u3060
  3415   0010FE                     u3061:
  3416   0010FE  EF99  F008         	goto	l4169
  3417   001102                     u3060:
  3418   001102  C02B  F005         	movff	getHSVval@range,___wmul@multiplier
  3419   001106  C02C  F006         	movff	getHSVval@range+1,___wmul@multiplier+1
  3420   00110A  0E00               	movlw	0
  3421   00110C  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3422   00110E  0E0A               	movlw	10
  3423   001110  6E07               	movwf	___wmul@multiplicand^0,c
  3424   001112  ECF1  F00E         	call	___wmul	;wreg free
  3425   001116  C005  F00B         	movff	?___wmul,___awdiv@dividend
  3426   00111A  C006  F00C         	movff	?___wmul+1,___awdiv@dividend+1
  3427   00111E  C02D  F00D         	movff	getHSVval@maxRGB,___awdiv@divisor
  3428   001122  C02E  F00E         	movff	getHSVval@maxRGB+1,___awdiv@divisor+1
  3429   001126  EC85  F00A         	call	___awdiv	;wreg free
  3430   00112A  C00B  F025         	movff	?___awdiv,getHSVval@saturation
  3431   00112E  C00C  F026         	movff	?___awdiv+1,getHSVval@saturation+1
  3432   001132                     l4169:
  3433                           
  3434                           ;color.c: 177:     p1->H = hue;
  3435   001132  C017  FFD9         	movff	getHSVval@p1,fsr2l
  3436   001136  C018  FFDA         	movff	getHSVval@p1+1,fsr2h
  3437   00113A  C027  FFDE         	movff	getHSVval@hue,postinc2
  3438   00113E  C028  FFDD         	movff	getHSVval@hue+1,postdec2
  3439   001142                     
  3440                           ;color.c: 178:     p1->S = saturation;
  3441   001142  EE20 F002          	lfsr	2,2
  3442   001146  5017               	movf	getHSVval@p1^0,w,c
  3443   001148  26D9               	addwf	fsr2l,f,c
  3444   00114A  5018               	movf	(getHSVval@p1+1)^0,w,c
  3445   00114C  22DA               	addwfc	fsr2h,f,c
  3446   00114E  C025  FFDE         	movff	getHSVval@saturation,postinc2
  3447   001152  C026  FFDD         	movff	getHSVval@saturation+1,postdec2
  3448   001156                     
  3449                           ;color.c: 179:     p1->V = maxRGB;
  3450   001156  EE20 F004          	lfsr	2,4
  3451   00115A  5017               	movf	getHSVval@p1^0,w,c
  3452   00115C  26D9               	addwf	fsr2l,f,c
  3453   00115E  5018               	movf	(getHSVval@p1+1)^0,w,c
  3454   001160  22DA               	addwfc	fsr2h,f,c
  3455   001162  C02D  FFDE         	movff	getHSVval@maxRGB,postinc2
  3456   001166  C02E  FFDD         	movff	getHSVval@maxRGB+1,postdec2
  3457   00116A  0012               	return		;funcret
  3458   00116C                     __end_of_getHSVval:
  3459                           	callstack 0
  3460                           
  3461 ;; *************** function _min *****************
  3462 ;; Defined at:
  3463 ;;		line 116 in file "color.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;  a               2    4[COMRAM] int 
  3466 ;;  b               2    6[COMRAM] int 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  min_val         2    9[COMRAM] int 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  2    4[COMRAM] int 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, status,0
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3478 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3481 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3482 ;;Total ram usage:        7 bytes
  3483 ;; Hardware stack levels used: 1
  3484 ;; Hardware stack levels required when called: 2
  3485 ;; This function calls:
  3486 ;;		Nothing
  3487 ;; This function is called by:
  3488 ;;		_getHSVval
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text20
  3493   001BFE                     __ptext20:
  3494                           	callstack 0
  3495   001BFE                     _min:
  3496                           	callstack 27
  3497   001BFE                     
  3498                           ;color.c: 116: int min(int a, int b);color.c: 117: {;color.c: 118:     int min_val;;colo
      +                          r.c: 120:     if (a < b) {min_val = a;}
  3499   001BFE  5007               	movf	min@b^0,w,c
  3500   001C00  5C05               	subwf	min@a^0,w,c
  3501   001C02  5006               	movf	(min@a+1)^0,w,c
  3502   001C04  0A80               	xorlw	128
  3503   001C06  6E09               	movwf	??_min^0,c
  3504   001C08  5008               	movf	(min@b+1)^0,w,c
  3505   001C0A  0A80               	xorlw	128
  3506   001C0C  5809               	subwfb	??_min^0,w,c
  3507   001C0E  B0D8               	btfsc	status,0,c
  3508   001C10  EF0C  F00E         	goto	u2541
  3509   001C14  EF0E  F00E         	goto	u2540
  3510   001C18                     u2541:
  3511   001C18  EF14  F00E         	goto	l79
  3512   001C1C                     u2540:
  3513   001C1C  C005  F00A         	movff	min@a,min@min_val
  3514   001C20  C006  F00B         	movff	min@a+1,min@min_val+1
  3515   001C24  EF18  F00E         	goto	l80
  3516   001C28                     l79:
  3517   001C28  C007  F00A         	movff	min@b,min@min_val
  3518   001C2C  C008  F00B         	movff	min@b+1,min@min_val+1
  3519   001C30                     l80:
  3520                           
  3521                           ;color.c: 124:     return min_val;
  3522   001C30  C00A  F005         	movff	min@min_val,?_min
  3523   001C34  C00B  F006         	movff	min@min_val+1,?_min+1
  3524   001C38  0012               	return		;funcret
  3525   001C3A                     __end_of_min:
  3526                           	callstack 0
  3527                           
  3528 ;; *************** function _max *****************
  3529 ;; Defined at:
  3530 ;;		line 99 in file "color.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;  a               2    4[COMRAM] int 
  3533 ;;  b               2    6[COMRAM] int 
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;  max_val         2    9[COMRAM] int 
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  2    4[COMRAM] int 
  3538 ;; Registers used:
  3539 ;;		wreg, status,2, status,0
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3548 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3549 ;;Total ram usage:        7 bytes
  3550 ;; Hardware stack levels used: 1
  3551 ;; Hardware stack levels required when called: 2
  3552 ;; This function calls:
  3553 ;;		Nothing
  3554 ;; This function is called by:
  3555 ;;		_getHSVval
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           	psect	text21
  3560   001C3A                     __ptext21:
  3561                           	callstack 0
  3562   001C3A                     _max:
  3563                           	callstack 27
  3564   001C3A                     
  3565                           ;color.c: 99: int max(int a, int b);color.c: 100: {;color.c: 101:     int max_val;;color
      +                          .c: 103:     if (a > b) {max_val = a;}
  3566   001C3A  5005               	movf	max@a^0,w,c
  3567   001C3C  5C07               	subwf	max@b^0,w,c
  3568   001C3E  5008               	movf	(max@b+1)^0,w,c
  3569   001C40  0A80               	xorlw	128
  3570   001C42  6E09               	movwf	??_max^0,c
  3571   001C44  5006               	movf	(max@a+1)^0,w,c
  3572   001C46  0A80               	xorlw	128
  3573   001C48  5809               	subwfb	??_max^0,w,c
  3574   001C4A  B0D8               	btfsc	status,0,c
  3575   001C4C  EF2A  F00E         	goto	u2531
  3576   001C50  EF2C  F00E         	goto	u2530
  3577   001C54                     u2531:
  3578   001C54  EF32  F00E         	goto	l74
  3579   001C58                     u2530:
  3580   001C58  C005  F00A         	movff	max@a,max@max_val
  3581   001C5C  C006  F00B         	movff	max@a+1,max@max_val+1
  3582   001C60  EF36  F00E         	goto	l75
  3583   001C64                     l74:
  3584   001C64  C007  F00A         	movff	max@b,max@max_val
  3585   001C68  C008  F00B         	movff	max@b+1,max@max_val+1
  3586   001C6C                     l75:
  3587                           
  3588                           ;color.c: 107:     return max_val;
  3589   001C6C  C00A  F005         	movff	max@max_val,?_max
  3590   001C70  C00B  F006         	movff	max@max_val+1,?_max+1
  3591   001C74  0012               	return		;funcret
  3592   001C76                     __end_of_max:
  3593                           	callstack 0
  3594                           
  3595 ;; *************** function ___wmul *****************
  3596 ;; Defined at:
  3597 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  multiplier      2    4[COMRAM] unsigned int 
  3600 ;;  multiplicand    2    6[COMRAM] unsigned int 
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  product         2    8[COMRAM] unsigned int 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  2    4[COMRAM] unsigned int 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, status,0, prodl, prodh
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3612 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3615 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3616 ;;Total ram usage:        6 bytes
  3617 ;; Hardware stack levels used: 1
  3618 ;; Hardware stack levels required when called: 2
  3619 ;; This function calls:
  3620 ;;		Nothing
  3621 ;; This function is called by:
  3622 ;;		_getHSVval
  3623 ;;		_setMotorPWM
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text22
  3628   001DE2                     __ptext22:
  3629                           	callstack 0
  3630   001DE2                     ___wmul:
  3631                           	callstack 27
  3632   001DE2  5005               	movf	___wmul@multiplier^0,w,c
  3633   001DE4  0207               	mulwf	___wmul@multiplicand^0,c
  3634   001DE6  CFF3 F009          	movff	prodl,___wmul@product
  3635   001DEA  CFF4 F00A          	movff	prodh,___wmul@product+1
  3636   001DEE  5005               	movf	___wmul@multiplier^0,w,c
  3637   001DF0  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  3638   001DF2  50F3               	movf	243,w,c
  3639   001DF4  260A               	addwf	(___wmul@product+1)^0,f,c
  3640   001DF6  5006               	movf	(___wmul@multiplier+1)^0,w,c
  3641   001DF8  0207               	mulwf	___wmul@multiplicand^0,c
  3642   001DFA  50F3               	movf	243,w,c
  3643   001DFC  260A               	addwf	(___wmul@product+1)^0,f,c
  3644   001DFE  C009  F005         	movff	___wmul@product,?___wmul
  3645   001E02  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  3646   001E06  0012               	return		;funcret
  3647   001E08                     __end_of___wmul:
  3648                           	callstack 0
  3649                           
  3650 ;; *************** function ___lwmod *****************
  3651 ;; Defined at:
  3652 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;  dividend        2   17[COMRAM] unsigned int 
  3655 ;;  divisor         2   19[COMRAM] unsigned int 
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;  counter         1   21[COMRAM] unsigned char 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  2   17[COMRAM] unsigned int 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2, status,0
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3667 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3670 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3671 ;;Total ram usage:        5 bytes
  3672 ;; Hardware stack levels used: 1
  3673 ;; Hardware stack levels required when called: 2
  3674 ;; This function calls:
  3675 ;;		Nothing
  3676 ;; This function is called by:
  3677 ;;		_getHSVval
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           	psect	text23
  3682   0018CA                     __ptext23:
  3683                           	callstack 0
  3684   0018CA                     ___lwmod:
  3685                           	callstack 27
  3686   0018CA  5014               	movf	___lwmod@divisor^0,w,c
  3687   0018CC  1015               	iorwf	(___lwmod@divisor+1)^0,w,c
  3688   0018CE  B4D8               	btfsc	status,2,c
  3689   0018D0  EF6C  F00C         	goto	u2781
  3690   0018D4  EF6E  F00C         	goto	u2780
  3691   0018D8                     u2781:
  3692   0018D8  EF92  F00C         	goto	l1150
  3693   0018DC                     u2780:
  3694   0018DC  0E01               	movlw	1
  3695   0018DE  6E16               	movwf	___lwmod@counter^0,c
  3696   0018E0  EF76  F00C         	goto	l3717
  3697   0018E4                     l3715:
  3698   0018E4  90D8               	bcf	status,0,c
  3699   0018E6  3614               	rlcf	___lwmod@divisor^0,f,c
  3700   0018E8  3615               	rlcf	(___lwmod@divisor+1)^0,f,c
  3701   0018EA  2A16               	incf	___lwmod@counter^0,f,c
  3702   0018EC                     l3717:
  3703   0018EC  AE15               	btfss	(___lwmod@divisor+1)^0,7,c
  3704   0018EE  EF7B  F00C         	goto	u2791
  3705   0018F2  EF7D  F00C         	goto	u2790
  3706   0018F6                     u2791:
  3707   0018F6  EF72  F00C         	goto	l3715
  3708   0018FA                     u2790:
  3709   0018FA                     l3719:
  3710   0018FA  5014               	movf	___lwmod@divisor^0,w,c
  3711   0018FC  5C12               	subwf	___lwmod@dividend^0,w,c
  3712   0018FE  5015               	movf	(___lwmod@divisor+1)^0,w,c
  3713   001900  5813               	subwfb	(___lwmod@dividend+1)^0,w,c
  3714   001902  A0D8               	btfss	status,0,c
  3715   001904  EF86  F00C         	goto	u2801
  3716   001908  EF88  F00C         	goto	u2800
  3717   00190C                     u2801:
  3718   00190C  EF8C  F00C         	goto	l3723
  3719   001910                     u2800:
  3720   001910  5014               	movf	___lwmod@divisor^0,w,c
  3721   001912  5E12               	subwf	___lwmod@dividend^0,f,c
  3722   001914  5015               	movf	(___lwmod@divisor+1)^0,w,c
  3723   001916  5A13               	subwfb	(___lwmod@dividend+1)^0,f,c
  3724   001918                     l3723:
  3725   001918  90D8               	bcf	status,0,c
  3726   00191A  3215               	rrcf	(___lwmod@divisor+1)^0,f,c
  3727   00191C  3214               	rrcf	___lwmod@divisor^0,f,c
  3728   00191E  2E16               	decfsz	___lwmod@counter^0,f,c
  3729   001920  EF7D  F00C         	goto	l3719
  3730   001924                     l1150:
  3731   001924  C012  F012         	movff	___lwmod@dividend,?___lwmod
  3732   001928  C013  F013         	movff	___lwmod@dividend+1,?___lwmod+1
  3733   00192C  0012               	return		;funcret
  3734   00192E                     __end_of___lwmod:
  3735                           	callstack 0
  3736                           
  3737 ;; *************** function ___lwdiv *****************
  3738 ;; Defined at:
  3739 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;  dividend        2   10[COMRAM] unsigned int 
  3742 ;;  divisor         2   12[COMRAM] unsigned int 
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;  quotient        2   15[COMRAM] unsigned int 
  3745 ;;  counter         1   14[COMRAM] unsigned char 
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  2   10[COMRAM] unsigned int 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3755 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3756 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3758 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3759 ;;Total ram usage:        7 bytes
  3760 ;; Hardware stack levels used: 1
  3761 ;; Hardware stack levels required when called: 2
  3762 ;; This function calls:
  3763 ;;		Nothing
  3764 ;; This function is called by:
  3765 ;;		_getHSVval
  3766 ;;		_setMotorPWM
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           	psect	text24
  3771   001856                     __ptext24:
  3772                           	callstack 0
  3773   001856                     ___lwdiv:
  3774                           	callstack 27
  3775   001856  0E00               	movlw	0
  3776   001858  6E11               	movwf	(___lwdiv@quotient+1)^0,c
  3777   00185A  0E00               	movlw	0
  3778   00185C  6E10               	movwf	___lwdiv@quotient^0,c
  3779   00185E  500D               	movf	___lwdiv@divisor^0,w,c
  3780   001860  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3781   001862  B4D8               	btfsc	status,2,c
  3782   001864  EF36  F00C         	goto	u2751
  3783   001868  EF38  F00C         	goto	u2750
  3784   00186C                     u2751:
  3785   00186C  EF60  F00C         	goto	l1140
  3786   001870                     u2750:
  3787   001870  0E01               	movlw	1
  3788   001872  6E0F               	movwf	___lwdiv@counter^0,c
  3789   001874  EF40  F00C         	goto	l3697
  3790   001878                     l3695:
  3791   001878  90D8               	bcf	status,0,c
  3792   00187A  360D               	rlcf	___lwdiv@divisor^0,f,c
  3793   00187C  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3794   00187E  2A0F               	incf	___lwdiv@counter^0,f,c
  3795   001880                     l3697:
  3796   001880  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  3797   001882  EF45  F00C         	goto	u2761
  3798   001886  EF47  F00C         	goto	u2760
  3799   00188A                     u2761:
  3800   00188A  EF3C  F00C         	goto	l3695
  3801   00188E                     u2760:
  3802   00188E                     l3699:
  3803   00188E  90D8               	bcf	status,0,c
  3804   001890  3610               	rlcf	___lwdiv@quotient^0,f,c
  3805   001892  3611               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3806   001894  500D               	movf	___lwdiv@divisor^0,w,c
  3807   001896  5C0B               	subwf	___lwdiv@dividend^0,w,c
  3808   001898  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  3809   00189A  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3810   00189C  A0D8               	btfss	status,0,c
  3811   00189E  EF53  F00C         	goto	u2771
  3812   0018A2  EF55  F00C         	goto	u2770
  3813   0018A6                     u2771:
  3814   0018A6  EF5A  F00C         	goto	l3707
  3815   0018AA                     u2770:
  3816   0018AA  500D               	movf	___lwdiv@divisor^0,w,c
  3817   0018AC  5E0B               	subwf	___lwdiv@dividend^0,f,c
  3818   0018AE  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  3819   0018B0  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3820   0018B2  8010               	bsf	___lwdiv@quotient^0,0,c
  3821   0018B4                     l3707:
  3822   0018B4  90D8               	bcf	status,0,c
  3823   0018B6  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3824   0018B8  320D               	rrcf	___lwdiv@divisor^0,f,c
  3825   0018BA  2E0F               	decfsz	___lwdiv@counter^0,f,c
  3826   0018BC  EF47  F00C         	goto	l3699
  3827   0018C0                     l1140:
  3828   0018C0  C010  F00B         	movff	___lwdiv@quotient,?___lwdiv
  3829   0018C4  C011  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3830   0018C8  0012               	return		;funcret
  3831   0018CA                     __end_of___lwdiv:
  3832                           	callstack 0
  3833                           
  3834 ;; *************** function ___awdiv *****************
  3835 ;; Defined at:
  3836 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  dividend        2   10[COMRAM] int 
  3839 ;;  divisor         2   12[COMRAM] int 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  quotient        2   16[COMRAM] int 
  3842 ;;  sign            1   15[COMRAM] unsigned char 
  3843 ;;  counter         1   14[COMRAM] unsigned char 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  2   10[COMRAM] int 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3853 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3854 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3856 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3857 ;;Total ram usage:        8 bytes
  3858 ;; Hardware stack levels used: 1
  3859 ;; Hardware stack levels required when called: 2
  3860 ;; This function calls:
  3861 ;;		Nothing
  3862 ;; This function is called by:
  3863 ;;		_getHSVval
  3864 ;;		_vfpfcnvrt
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           	psect	text25
  3869   00150A                     __ptext25:
  3870                           	callstack 0
  3871   00150A                     ___awdiv:
  3872                           	callstack 25
  3873   00150A  0E00               	movlw	0
  3874   00150C  6E10               	movwf	___awdiv@sign^0,c
  3875   00150E  BE0E               	btfsc	(___awdiv@divisor+1)^0,7,c
  3876   001510  EF8E  F00A         	goto	u2220
  3877   001514  EF8C  F00A         	goto	u2221
  3878   001518                     u2221:
  3879   001518  EF94  F00A         	goto	l3339
  3880   00151C                     u2220:
  3881   00151C  6C0D               	negf	___awdiv@divisor^0,c
  3882   00151E  1E0E               	comf	(___awdiv@divisor+1)^0,f,c
  3883   001520  B0D8               	btfsc	status,0,c
  3884   001522  2A0E               	incf	(___awdiv@divisor+1)^0,f,c
  3885   001524  0E01               	movlw	1
  3886   001526  6E10               	movwf	___awdiv@sign^0,c
  3887   001528                     l3339:
  3888   001528  BE0C               	btfsc	(___awdiv@dividend+1)^0,7,c
  3889   00152A  EF9B  F00A         	goto	u2230
  3890   00152E  EF99  F00A         	goto	u2231
  3891   001532                     u2231:
  3892   001532  EFA1  F00A         	goto	l3345
  3893   001536                     u2230:
  3894   001536  6C0B               	negf	___awdiv@dividend^0,c
  3895   001538  1E0C               	comf	(___awdiv@dividend+1)^0,f,c
  3896   00153A  B0D8               	btfsc	status,0,c
  3897   00153C  2A0C               	incf	(___awdiv@dividend+1)^0,f,c
  3898   00153E  0E01               	movlw	1
  3899   001540  1A10               	xorwf	___awdiv@sign^0,f,c
  3900   001542                     l3345:
  3901   001542  0E00               	movlw	0
  3902   001544  6E12               	movwf	(___awdiv@quotient+1)^0,c
  3903   001546  0E00               	movlw	0
  3904   001548  6E11               	movwf	___awdiv@quotient^0,c
  3905   00154A  500D               	movf	___awdiv@divisor^0,w,c
  3906   00154C  100E               	iorwf	(___awdiv@divisor+1)^0,w,c
  3907   00154E  B4D8               	btfsc	status,2,c
  3908   001550  EFAC  F00A         	goto	u2241
  3909   001554  EFAE  F00A         	goto	u2240
  3910   001558                     u2241:
  3911   001558  EFD6  F00A         	goto	l3367
  3912   00155C                     u2240:
  3913   00155C  0E01               	movlw	1
  3914   00155E  6E0F               	movwf	___awdiv@counter^0,c
  3915   001560  EFB6  F00A         	goto	l3353
  3916   001564                     l3351:
  3917   001564  90D8               	bcf	status,0,c
  3918   001566  360D               	rlcf	___awdiv@divisor^0,f,c
  3919   001568  360E               	rlcf	(___awdiv@divisor+1)^0,f,c
  3920   00156A  2A0F               	incf	___awdiv@counter^0,f,c
  3921   00156C                     l3353:
  3922   00156C  AE0E               	btfss	(___awdiv@divisor+1)^0,7,c
  3923   00156E  EFBB  F00A         	goto	u2251
  3924   001572  EFBD  F00A         	goto	u2250
  3925   001576                     u2251:
  3926   001576  EFB2  F00A         	goto	l3351
  3927   00157A                     u2250:
  3928   00157A                     l3355:
  3929   00157A  90D8               	bcf	status,0,c
  3930   00157C  3611               	rlcf	___awdiv@quotient^0,f,c
  3931   00157E  3612               	rlcf	(___awdiv@quotient+1)^0,f,c
  3932   001580  500D               	movf	___awdiv@divisor^0,w,c
  3933   001582  5C0B               	subwf	___awdiv@dividend^0,w,c
  3934   001584  500E               	movf	(___awdiv@divisor+1)^0,w,c
  3935   001586  580C               	subwfb	(___awdiv@dividend+1)^0,w,c
  3936   001588  A0D8               	btfss	status,0,c
  3937   00158A  EFC9  F00A         	goto	u2261
  3938   00158E  EFCB  F00A         	goto	u2260
  3939   001592                     u2261:
  3940   001592  EFD0  F00A         	goto	l3363
  3941   001596                     u2260:
  3942   001596  500D               	movf	___awdiv@divisor^0,w,c
  3943   001598  5E0B               	subwf	___awdiv@dividend^0,f,c
  3944   00159A  500E               	movf	(___awdiv@divisor+1)^0,w,c
  3945   00159C  5A0C               	subwfb	(___awdiv@dividend+1)^0,f,c
  3946   00159E  8011               	bsf	___awdiv@quotient^0,0,c
  3947   0015A0                     l3363:
  3948   0015A0  90D8               	bcf	status,0,c
  3949   0015A2  320E               	rrcf	(___awdiv@divisor+1)^0,f,c
  3950   0015A4  320D               	rrcf	___awdiv@divisor^0,f,c
  3951   0015A6  2E0F               	decfsz	___awdiv@counter^0,f,c
  3952   0015A8  EFBD  F00A         	goto	l3355
  3953   0015AC                     l3367:
  3954   0015AC  5010               	movf	___awdiv@sign^0,w,c
  3955   0015AE  B4D8               	btfsc	status,2,c
  3956   0015B0  EFDC  F00A         	goto	u2271
  3957   0015B4  EFDE  F00A         	goto	u2270
  3958   0015B8                     u2271:
  3959   0015B8  EFE2  F00A         	goto	l3371
  3960   0015BC                     u2270:
  3961   0015BC  6C11               	negf	___awdiv@quotient^0,c
  3962   0015BE  1E12               	comf	(___awdiv@quotient+1)^0,f,c
  3963   0015C0  B0D8               	btfsc	status,0,c
  3964   0015C2  2A12               	incf	(___awdiv@quotient+1)^0,f,c
  3965   0015C4                     l3371:
  3966   0015C4  C011  F00B         	movff	___awdiv@quotient,?___awdiv
  3967   0015C8  C012  F00C         	movff	___awdiv@quotient+1,?___awdiv+1
  3968   0015CC  0012               	return		;funcret
  3969   0015CE                     __end_of___awdiv:
  3970                           	callstack 0
  3971                           
  3972 ;; *************** function _color_click_init *****************
  3973 ;; Defined at:
  3974 ;;		line 5 in file "color.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      void 
  3981 ;; Registers used:
  3982 ;;		wreg, status,2, status,0, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3990 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3991 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3992 ;;Total ram usage:        1 bytes
  3993 ;; Hardware stack levels used: 1
  3994 ;; Hardware stack levels required when called: 5
  3995 ;; This function calls:
  3996 ;;		_I2C_2_Master_Init
  3997 ;;		_color_writetoaddr
  3998 ;; This function is called by:
  3999 ;;		_main
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text26
  4004   001CAA                     __ptext26:
  4005                           	callstack 0
  4006   001CAA                     _color_click_init:
  4007                           	callstack 25
  4008   001CAA                     
  4009                           ;color.c: 8:     I2C_2_Master_Init();
  4010   001CAA  ECB3  F00E         	call	_I2C_2_Master_Init	;wreg free
  4011   001CAE                     
  4012                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  4013   001CAE  0E01               	movlw	1
  4014   001CB0  6E07               	movwf	color_writetoaddr@value^0,c
  4015   001CB2  0E00               	movlw	0
  4016   001CB4  EC17  F00F         	call	_color_writetoaddr
  4017   001CB8                     
  4018                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4019   001CB8  0E3F               	movlw	63
  4020   001CBA  6E09               	movwf	??_color_click_init^0,c
  4021   001CBC  0E55               	movlw	85
  4022   001CBE                     u3137:
  4023   001CBE  2EE8               	decfsz	wreg,f,c
  4024   001CC0  D7FE               	bra	u3137
  4025   001CC2  2E09               	decfsz	??_color_click_init^0,f,c
  4026   001CC4  D7FC               	bra	u3137
  4027   001CC6  0000               	nop	
  4028   001CC8                     
  4029                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  4030   001CC8  0E03               	movlw	3
  4031   001CCA  6E07               	movwf	color_writetoaddr@value^0,c
  4032   001CCC  0E00               	movlw	0
  4033   001CCE  EC17  F00F         	call	_color_writetoaddr
  4034   001CD2                     
  4035                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  4036   001CD2  0ED5               	movlw	213
  4037   001CD4  6E07               	movwf	color_writetoaddr@value^0,c
  4038   001CD6  0E01               	movlw	1
  4039   001CD8  EC17  F00F         	call	_color_writetoaddr
  4040   001CDC  0012               	return		;funcret
  4041   001CDE                     __end_of_color_click_init:
  4042                           	callstack 0
  4043                           
  4044 ;; *************** function _color_writetoaddr *****************
  4045 ;; Defined at:
  4046 ;;		line 21 in file "color.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  address         1    wreg     unsigned char 
  4049 ;;  value           1    6[COMRAM] unsigned char 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  address         1    7[COMRAM] unsigned char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4061 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4065 ;;Total ram usage:        2 bytes
  4066 ;; Hardware stack levels used: 1
  4067 ;; Hardware stack levels required when called: 4
  4068 ;; This function calls:
  4069 ;;		_I2C_2_Master_Start
  4070 ;;		_I2C_2_Master_Stop
  4071 ;;		_I2C_2_Master_Write
  4072 ;; This function is called by:
  4073 ;;		_color_click_init
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text27
  4078   001E2E                     __ptext27:
  4079                           	callstack 0
  4080   001E2E                     _color_writetoaddr:
  4081                           	callstack 25
  4082                           
  4083                           ;incstack = 0
  4084                           ;color_writetoaddr@address stored from wreg
  4085   001E2E  6E08               	movwf	color_writetoaddr@address^0,c
  4086   001E30                     
  4087                           ;color.c: 22:     I2C_2_Master_Start();
  4088   001E30  EC95  F00F         	call	_I2C_2_Master_Start	;wreg free
  4089                           
  4090                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  4091   001E34  0E52               	movlw	82
  4092   001E36  EC85  F00F         	call	_I2C_2_Master_Write
  4093                           
  4094                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  4095   001E3A  5008               	movf	color_writetoaddr@address^0,w,c
  4096   001E3C  0980               	iorlw	128
  4097   001E3E  EC85  F00F         	call	_I2C_2_Master_Write
  4098                           
  4099                           ;color.c: 25:     I2C_2_Master_Write(value);
  4100   001E42  5007               	movf	color_writetoaddr@value^0,w,c
  4101   001E44  EC85  F00F         	call	_I2C_2_Master_Write
  4102                           
  4103                           ;color.c: 26:     I2C_2_Master_Stop();
  4104   001E48  EC90  F00F         	call	_I2C_2_Master_Stop	;wreg free
  4105   001E4C  0012               	return		;funcret
  4106   001E4E                     __end_of_color_writetoaddr:
  4107                           	callstack 0
  4108                           
  4109 ;; *************** function _I2C_2_Master_Write *****************
  4110 ;; Defined at:
  4111 ;;		line 45 in file "i2c.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;  data_byte       1    wreg     unsigned char 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  data_byte       1    5[COMRAM] unsigned char 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      void 
  4118 ;; Registers used:
  4119 ;;		wreg, status,2, status,0, cstack
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4128 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4129 ;;Total ram usage:        1 bytes
  4130 ;; Hardware stack levels used: 1
  4131 ;; Hardware stack levels required when called: 3
  4132 ;; This function calls:
  4133 ;;		_I2C_2_Master_Idle
  4134 ;; This function is called by:
  4135 ;;		_color_writetoaddr
  4136 ;;		_color_read_Red
  4137 ;;		_color_read_Blue
  4138 ;;		_color_read_Green
  4139 ;;		_color_read_Clear
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text28
  4144   001F0A                     __ptext28:
  4145                           	callstack 0
  4146   001F0A                     _I2C_2_Master_Write:
  4147                           	callstack 25
  4148                           
  4149                           ;incstack = 0
  4150                           ;I2C_2_Master_Write@data_byte stored from wreg
  4151   001F0A  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  4152   001F0C                     
  4153                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4154   001F0C  ECDD  F00E         	call	_I2C_2_Master_Idle	;wreg free
  4155   001F10                     
  4156                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4157   001F10  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4158   001F14  0012               	return		;funcret
  4159   001F16                     __end_of_I2C_2_Master_Write:
  4160                           	callstack 0
  4161                           
  4162 ;; *************** function _I2C_2_Master_Stop *****************
  4163 ;; Defined at:
  4164 ;;		line 39 in file "i2c.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;		None
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      void 
  4171 ;; Registers used:
  4172 ;;		wreg, status,2, status,0, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4182 ;;Total ram usage:        0 bytes
  4183 ;; Hardware stack levels used: 1
  4184 ;; Hardware stack levels required when called: 3
  4185 ;; This function calls:
  4186 ;;		_I2C_2_Master_Idle
  4187 ;; This function is called by:
  4188 ;;		_color_writetoaddr
  4189 ;;		_color_read_Red
  4190 ;;		_color_read_Blue
  4191 ;;		_color_read_Green
  4192 ;;		_color_read_Clear
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           	psect	text29
  4197   001F20                     __ptext29:
  4198                           	callstack 0
  4199   001F20                     _I2C_2_Master_Stop:
  4200                           	callstack 25
  4201   001F20                     
  4202                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4203   001F20  ECDD  F00E         	call	_I2C_2_Master_Idle	;wreg free
  4204   001F24                     
  4205                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4206   001F24  010E               	movlb	14	; () banked
  4207   001F26  85DA               	bsf	218,2,b	;volatile
  4208   001F28                     
  4209                           ; BSR set to: 14
  4210   001F28  0012               	return		;funcret
  4211   001F2A                     __end_of_I2C_2_Master_Stop:
  4212                           	callstack 0
  4213                           
  4214 ;; *************** function _I2C_2_Master_Start *****************
  4215 ;; Defined at:
  4216 ;;		line 27 in file "i2c.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;		None
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;		None
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      void 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4234 ;;Total ram usage:        0 bytes
  4235 ;; Hardware stack levels used: 1
  4236 ;; Hardware stack levels required when called: 3
  4237 ;; This function calls:
  4238 ;;		_I2C_2_Master_Idle
  4239 ;; This function is called by:
  4240 ;;		_color_writetoaddr
  4241 ;;		_color_read_Red
  4242 ;;		_color_read_Blue
  4243 ;;		_color_read_Green
  4244 ;;		_color_read_Clear
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text30
  4249   001F2A                     __ptext30:
  4250                           	callstack 0
  4251   001F2A                     _I2C_2_Master_Start:
  4252                           	callstack 25
  4253   001F2A                     
  4254                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4255   001F2A  ECDD  F00E         	call	_I2C_2_Master_Idle	;wreg free
  4256   001F2E                     
  4257                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4258   001F2E  010E               	movlb	14	; () banked
  4259   001F30  81DA               	bsf	218,0,b	;volatile
  4260   001F32                     
  4261                           ; BSR set to: 14
  4262   001F32  0012               	return		;funcret
  4263   001F34                     __end_of_I2C_2_Master_Start:
  4264                           	callstack 0
  4265                           
  4266 ;; *************** function _I2C_2_Master_Idle *****************
  4267 ;; Defined at:
  4268 ;;		line 22 in file "i2c.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      void 
  4275 ;; Registers used:
  4276 ;;		wreg, status,2, status,0
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4284 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4285 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4286 ;;Total ram usage:        1 bytes
  4287 ;; Hardware stack levels used: 1
  4288 ;; Hardware stack levels required when called: 2
  4289 ;; This function calls:
  4290 ;;		Nothing
  4291 ;; This function is called by:
  4292 ;;		_I2C_2_Master_Start
  4293 ;;		_I2C_2_Master_RepStart
  4294 ;;		_I2C_2_Master_Stop
  4295 ;;		_I2C_2_Master_Write
  4296 ;;		_I2C_2_Master_Read
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text31
  4301   001DBA                     __ptext31:
  4302                           	callstack 0
  4303   001DBA                     _I2C_2_Master_Idle:
  4304                           	callstack 25
  4305   001DBA                     l261:
  4306   001DBA  010E               	movlb	14	; () banked
  4307   001DBC  B5D8               	btfsc	216,2,b	;volatile
  4308   001DBE  EFE3  F00E         	goto	u2201
  4309   001DC2  EFE5  F00E         	goto	u2200
  4310   001DC6                     u2201:
  4311   001DC6  EFDD  F00E         	goto	l261
  4312   001DCA                     u2200:
  4313   001DCA                     
  4314                           ; BSR set to: 14
  4315   001DCA  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4316   001DCE  0E1F               	movlw	31
  4317   001DD0  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  4318   001DD2  A4D8               	btfss	status,2,c
  4319   001DD4  EFEE  F00E         	goto	u2211
  4320   001DD8  EFF0  F00E         	goto	u2210
  4321   001DDC                     u2211:
  4322   001DDC  EFDD  F00E         	goto	l261
  4323   001DE0                     u2210:
  4324   001DE0                     
  4325                           ; BSR set to: 14
  4326   001DE0  0012               	return		;funcret
  4327   001DE2                     __end_of_I2C_2_Master_Idle:
  4328                           	callstack 0
  4329                           
  4330 ;; *************** function _I2C_2_Master_Init *****************
  4331 ;; Defined at:
  4332 ;;		line 4 in file "i2c.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;		None
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;		None
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  1    wreg      void 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;Total ram usage:        0 bytes
  4351 ;; Hardware stack levels used: 1
  4352 ;; Hardware stack levels required when called: 2
  4353 ;; This function calls:
  4354 ;;		Nothing
  4355 ;; This function is called by:
  4356 ;;		_color_click_init
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text32
  4361   001D66                     __ptext32:
  4362                           	callstack 0
  4363   001D66                     _I2C_2_Master_Init:
  4364                           	callstack 27
  4365   001D66                     
  4366                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4367   001D66  010E               	movlb	14	; () banked
  4368   001D68  51D9               	movf	217,w,b	;volatile
  4369   001D6A  0BF0               	andlw	-16
  4370   001D6C  0908               	iorlw	8
  4371   001D6E  6FD9               	movwf	217,b	;volatile
  4372   001D70                     
  4373                           ; BSR set to: 14
  4374                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4375   001D70  8BD9               	bsf	217,5,b	;volatile
  4376                           
  4377                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4378   001D72  0E9F               	movlw	159
  4379   001D74  6FD6               	movwf	214,b	;volatile
  4380   001D76                     
  4381                           ; BSR set to: 14
  4382                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4383   001D76  8A84               	bsf	132,5,c	;volatile
  4384   001D78                     
  4385                           ; BSR set to: 14
  4386                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4387   001D78  8C84               	bsf	132,6,c	;volatile
  4388   001D7A                     
  4389                           ; BSR set to: 14
  4390                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4391   001D7A  9BA7               	bcf	167,5,b	;volatile
  4392   001D7C                     
  4393                           ; BSR set to: 14
  4394                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4395   001D7C  9DA7               	bcf	167,6,b	;volatile
  4396                           
  4397                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4398   001D7E  0E1D               	movlw	29
  4399   001D80  6F1D               	movwf	29,b	;volatile
  4400                           
  4401                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4402   001D82  0E1E               	movlw	30
  4403   001D84  6F1C               	movwf	28,b	;volatile
  4404                           
  4405                           ;i2c.c: 18:   RD5PPS=0x1C;
  4406   001D86  0E1C               	movlw	28
  4407   001D88  6F6F               	movwf	111,b	;volatile
  4408                           
  4409                           ;i2c.c: 19:   RD6PPS=0x1B;
  4410   001D8A  0E1B               	movlw	27
  4411   001D8C  6F70               	movwf	112,b	;volatile
  4412   001D8E                     
  4413                           ; BSR set to: 14
  4414   001D8E  0012               	return		;funcret
  4415   001D90                     __end_of_I2C_2_Master_Init:
  4416                           	callstack 0
  4417                           
  4418 ;; *************** function _buggy_lights_init *****************
  4419 ;; Defined at:
  4420 ;;		line 4 in file "buggy_lights.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;		None
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;		None
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  1    wreg      void 
  4427 ;; Registers used:
  4428 ;;		None
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4438 ;;Total ram usage:        0 bytes
  4439 ;; Hardware stack levels used: 1
  4440 ;; Hardware stack levels required when called: 2
  4441 ;; This function calls:
  4442 ;;		Nothing
  4443 ;; This function is called by:
  4444 ;;		_main
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           	psect	text33
  4449   001B6E                     __ptext33:
  4450                           	callstack 0
  4451   001B6E                     _buggy_lights_init:
  4452                           	callstack 28
  4453   001B6E                     
  4454                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
  4455   001B6E  9884               	bcf	132,4,c	;volatile
  4456                           
  4457                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
  4458   001B70  9288               	bcf	136,1,c	;volatile
  4459                           
  4460                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
  4461   001B72  9684               	bcf	132,3,c	;volatile
  4462                           
  4463                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
  4464   001B74  9086               	bcf	134,0,c	;volatile
  4465                           
  4466                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
  4467   001B76  9088               	bcf	136,0,c	;volatile
  4468                           
  4469                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
  4470   001B78  887C               	bsf	124,4,c	;volatile
  4471                           
  4472                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
  4473   001B7A  8280               	bsf	128,1,c	;volatile
  4474                           
  4475                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
  4476   001B7C  867C               	bsf	124,3,c	;volatile
  4477                           
  4478                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
  4479   001B7E  807E               	bsf	126,0,c	;volatile
  4480                           
  4481                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
  4482   001B80  8080               	bsf	128,0,c	;volatile
  4483                           
  4484                           ;buggy_lights.c: 22:     TRISDbits.TRISD7 = 0;
  4485   001B82  9E84               	bcf	132,7,c	;volatile
  4486                           
  4487                           ;buggy_lights.c: 23:     TRISHbits.TRISH3 = 0;
  4488   001B84  9688               	bcf	136,3,c	;volatile
  4489                           
  4490                           ;buggy_lights.c: 25:     LATDbits.LATD7 = 1;
  4491   001B86  8E7C               	bsf	124,7,c	;volatile
  4492                           
  4493                           ;buggy_lights.c: 26:     LATHbits.LATH3 = 1;
  4494   001B88  8680               	bsf	128,3,c	;volatile
  4495                           
  4496                           ;buggy_lights.c: 32:         TRISAbits.TRISA0 = 0;
  4497   001B8A  9081               	bcf	129,0,c	;volatile
  4498                           
  4499                           ;buggy_lights.c: 33:         TRISCbits.TRISC2 = 0;
  4500   001B8C  9483               	bcf	131,2,c	;volatile
  4501                           
  4502                           ;buggy_lights.c: 34:         TRISDbits.TRISD0 = 0;
  4503   001B8E  9084               	bcf	132,0,c	;volatile
  4504                           
  4505                           ;buggy_lights.c: 36:         LATAbits.LATA0 = 1;
  4506   001B90  8079               	bsf	121,0,c	;volatile
  4507                           
  4508                           ;buggy_lights.c: 37:         LATCbits.LATC2 = 1;
  4509   001B92  847B               	bsf	123,2,c	;volatile
  4510                           
  4511                           ;buggy_lights.c: 38:         LATDbits.LATD0 = 1;
  4512   001B94  807C               	bsf	124,0,c	;volatile
  4513                           
  4514                           ;buggy_lights.c: 42:         TRISAbits.TRISA1 = 0;
  4515   001B96  9281               	bcf	129,1,c	;volatile
  4516                           
  4517                           ;buggy_lights.c: 43:         TRISCbits.TRISC6 = 0;
  4518   001B98  9C83               	bcf	131,6,c	;volatile
  4519                           
  4520                           ;buggy_lights.c: 44:         TRISHbits.TRISH2 = 0;
  4521   001B9A  9488               	bcf	136,2,c	;volatile
  4522                           
  4523                           ;buggy_lights.c: 46:         LATAbits.LATA1 = 1;
  4524   001B9C  8279               	bsf	121,1,c	;volatile
  4525                           
  4526                           ;buggy_lights.c: 47:         LATCbits.LATC6 = 1;
  4527   001B9E  8C7B               	bsf	123,6,c	;volatile
  4528                           
  4529                           ;buggy_lights.c: 48:         LATHbits.LATH2 = 1;
  4530   001BA0  8480               	bsf	128,2,c	;volatile
  4531                           
  4532                           ;buggy_lights.c: 52:         TRISGbits.TRISG1 = 0;
  4533   001BA2  9287               	bcf	135,1,c	;volatile
  4534                           
  4535                           ;buggy_lights.c: 53:         TRISAbits.TRISA4 = 0;
  4536   001BA4  9881               	bcf	129,4,c	;volatile
  4537                           
  4538                           ;buggy_lights.c: 54:         TRISFbits.TRISF7 = 0;
  4539   001BA6  9E86               	bcf	134,7,c	;volatile
  4540                           
  4541                           ;buggy_lights.c: 56:         LATGbits.LATG1 = 1;
  4542   001BA8  827F               	bsf	127,1,c	;volatile
  4543                           
  4544                           ;buggy_lights.c: 57:         LATAbits.LATA4 = 1;
  4545   001BAA  8879               	bsf	121,4,c	;volatile
  4546                           
  4547                           ;buggy_lights.c: 58:         LATFbits.LATF7 = 1;
  4548   001BAC  8E7E               	bsf	126,7,c	;volatile
  4549                           
  4550                           ;buggy_lights.c: 62:         TRISGbits.TRISG0 = 0;
  4551   001BAE  9087               	bcf	135,0,c	;volatile
  4552                           
  4553                           ;buggy_lights.c: 63:         TRISEbits.TRISE7 = 0;
  4554   001BB0  9E85               	bcf	133,7,c	;volatile
  4555                           
  4556                           ;buggy_lights.c: 64:         TRISAbits.TRISA3 = 0;
  4557   001BB2  9681               	bcf	129,3,c	;volatile
  4558                           
  4559                           ;buggy_lights.c: 66:         LATGbits.LATG0 = 1;
  4560   001BB4  807F               	bsf	127,0,c	;volatile
  4561                           
  4562                           ;buggy_lights.c: 67:         LATEbits.LATE7 = 1;
  4563   001BB6  8E7D               	bsf	125,7,c	;volatile
  4564                           
  4565                           ;buggy_lights.c: 68:         LATAbits.LATA3 = 1;
  4566   001BB8  8679               	bsf	121,3,c	;volatile
  4567   001BBA  0012               	return		;funcret
  4568   001BBC                     __end_of_buggy_lights_init:
  4569                           	callstack 0
  4570                           
  4571 ;; *************** function _TxBufferedString *****************
  4572 ;; Defined at:
  4573 ;;		line 105 in file "serial.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  string          2    5[COMRAM] PTR unsigned char 
  4576 ;;		 -> main@display(50), 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;		None
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      void 
  4581 ;; Registers used:
  4582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4588 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4591 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4592 ;;Total ram usage:        2 bytes
  4593 ;; Hardware stack levels used: 1
  4594 ;; Hardware stack levels required when called: 3
  4595 ;; This function calls:
  4596 ;;		_putCharToTxBuf
  4597 ;; This function is called by:
  4598 ;;		_main
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text34
  4603   001CDE                     __ptext34:
  4604                           	callstack 0
  4605   001CDE                     _TxBufferedString:
  4606                           	callstack 27
  4607   001CDE                     
  4608                           ;serial.c: 107:     while(*string != 0) {
  4609   001CDE  EF7A  F00E         	goto	l4181
  4610   001CE2                     l4177:
  4611                           
  4612                           ;serial.c: 108:         putCharToTxBuf(*string++);
  4613   001CE2  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4614   001CE6  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4615   001CEA  50DF               	movf	indf2,w,c
  4616   001CEC  ECC8  F00E         	call	_putCharToTxBuf
  4617   001CF0  4A06               	infsnz	TxBufferedString@string^0,f,c
  4618   001CF2  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  4619   001CF4                     l4181:
  4620                           
  4621                           ;serial.c: 107:     while(*string != 0) {
  4622   001CF4  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4623   001CF8  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4624   001CFC  50DF               	movf	indf2,w,c
  4625   001CFE  A4D8               	btfss	status,2,c
  4626   001D00  EF84  F00E         	goto	u3071
  4627   001D04  EF86  F00E         	goto	u3070
  4628   001D08                     u3071:
  4629   001D08  EF71  F00E         	goto	l4177
  4630   001D0C                     u3070:
  4631   001D0C  0012               	return		;funcret
  4632   001D0E                     __end_of_TxBufferedString:
  4633                           	callstack 0
  4634                           
  4635 ;; *************** function _putCharToTxBuf *****************
  4636 ;; Defined at:
  4637 ;;		line 92 in file "serial.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  byte            1    wreg     unsigned char 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  byte            1    4[COMRAM] unsigned char 
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4655 ;;Total ram usage:        1 bytes
  4656 ;; Hardware stack levels used: 1
  4657 ;; Hardware stack levels required when called: 2
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_TxBufferedString
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text35
  4666   001D90                     __ptext35:
  4667                           	callstack 0
  4668   001D90                     _putCharToTxBuf:
  4669                           	callstack 27
  4670                           
  4671                           ;incstack = 0
  4672                           ;putCharToTxBuf@byte stored from wreg
  4673   001D90  6E05               	movwf	putCharToTxBuf@byte^0,c
  4674   001D92                     
  4675                           ;serial.c: 93:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  4676   001D92  0E3B               	movlw	59
  4677   001D94  644E               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  4678   001D96  EFCF  F00E         	goto	u2721
  4679   001D9A  EFD1  F00E         	goto	u2720
  4680   001D9E                     u2721:
  4681   001D9E  EFD3  F00E         	goto	l3675
  4682   001DA2                     u2720:
  4683   001DA2  0E00               	movlw	0
  4684   001DA4  6E4E               	movwf	_TxBufWriteCnt^0,c	;volatile
  4685   001DA6                     l3675:
  4686                           
  4687                           ;serial.c: 94:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  4688   001DA6  0E00               	movlw	low _EUSART4TXbuf
  4689   001DA8  244E               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  4690   001DAA  6ED9               	movwf	fsr2l,c
  4691   001DAC  6ADA               	clrf	fsr2h,c
  4692   001DAE  0E01               	movlw	high _EUSART4TXbuf
  4693   001DB0  22DA               	addwfc	fsr2h,f,c
  4694   001DB2  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  4695   001DB6  2A4E               	incf	_TxBufWriteCnt^0,f,c	;volatile
  4696   001DB8  0012               	return		;funcret
  4697   001DBA                     __end_of_putCharToTxBuf:
  4698                           	callstack 0
  4699                           
  4700 ;; *************** function _Timer0_init *****************
  4701 ;; Defined at:
  4702 ;;		line 7 in file "timers.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;		None
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, status,2
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4720 ;;Total ram usage:        0 bytes
  4721 ;; Hardware stack levels used: 1
  4722 ;; Hardware stack levels required when called: 2
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_main
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text36
  4731   001E4E                     __ptext36:
  4732                           	callstack 0
  4733   001E4E                     _Timer0_init:
  4734                           	callstack 28
  4735   001E4E                     
  4736                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4737   001E4E  50D6               	movf	214,w,c	;volatile
  4738   001E50  0B1F               	andlw	-225
  4739   001E52  0940               	iorlw	64
  4740   001E54  6ED6               	movwf	214,c	;volatile
  4741   001E56                     
  4742                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4743   001E56  88D6               	bsf	214,4,c	;volatile
  4744   001E58                     
  4745                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  4746   001E58  88D5               	bsf	213,4,c	;volatile
  4747                           
  4748                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  4749   001E5A  50D6               	movf	214,w,c	;volatile
  4750   001E5C  0BF0               	andlw	-16
  4751   001E5E  090E               	iorlw	14
  4752   001E60  6ED6               	movwf	214,c	;volatile
  4753                           
  4754                           ;timers.c: 20:     TMR0H = 0;
  4755   001E62  0E00               	movlw	0
  4756   001E64  6ED4               	movwf	212,c	;volatile
  4757                           
  4758                           ;timers.c: 21:     TMR0L = 0;
  4759   001E66  0E00               	movlw	0
  4760   001E68  6ED3               	movwf	211,c	;volatile
  4761   001E6A                     
  4762                           ;timers.c: 23:     T0CON0bits.T0EN=1;
  4763   001E6A  8ED5               	bsf	213,7,c	;volatile
  4764   001E6C  0012               	return		;funcret
  4765   001E6E                     __end_of_Timer0_init:
  4766                           	callstack 0
  4767                           
  4768 ;; *************** function _Interrupts_init *****************
  4769 ;; Defined at:
  4770 ;;		line 6 in file "interrupts.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		None
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4788 ;;Total ram usage:        0 bytes
  4789 ;; Hardware stack levels used: 1
  4790 ;; Hardware stack levels required when called: 2
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_main
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	text37
  4799   001EFC                     __ptext37:
  4800                           	callstack 0
  4801   001EFC                     _Interrupts_init:
  4802                           	callstack 28
  4803   001EFC                     
  4804                           ;interrupts.c: 9:     PIE4bits.RC4IE = 1;
  4805   001EFC  010E               	movlb	14	; () banked
  4806   001EFE  872D               	bsf	45,3,b	;volatile
  4807                           
  4808                           ;interrupts.c: 10:     PIE4bits.TX4IE = 1;
  4809   001F00  852D               	bsf	45,2,b	;volatile
  4810                           
  4811                           ;interrupts.c: 12:     PIE0bits.TMR0IE = 1;
  4812   001F02  8B29               	bsf	41,5,b	;volatile
  4813                           
  4814                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  4815   001F04  8CF2               	bsf	242,6,c	;volatile
  4816                           
  4817                           ;interrupts.c: 14:     INTCONbits.GIE = 1;
  4818   001F06  8EF2               	bsf	242,7,c	;volatile
  4819   001F08                     
  4820                           ; BSR set to: 14
  4821   001F08  0012               	return		;funcret
  4822   001F0A                     __end_of_Interrupts_init:
  4823                           	callstack 0
  4824                           
  4825 ;; *************** function _HighISR *****************
  4826 ;; Defined at:
  4827 ;;		line 19 in file "interrupts.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      void 
  4834 ;; Registers used:
  4835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4843 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4844 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4845 ;;Total ram usage:        2 bytes
  4846 ;; Hardware stack levels used: 1
  4847 ;; Hardware stack levels required when called: 1
  4848 ;; This function calls:
  4849 ;;		_getCharFromTxBuf
  4850 ;;		_putCharToRxBuf
  4851 ;;		i2_isDataInTxBuf
  4852 ;; This function is called by:
  4853 ;;		Interrupt level 2
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           	psect	intcode
  4858   000008                     __pintcode:
  4859                           	callstack 0
  4860   000008                     _HighISR:
  4861                           	callstack 24
  4862                           
  4863                           ; BSR set to: 14
  4864                           ;incstack = 0
  4865   000008  8251               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4866   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  4867   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  4868   000012                     
  4869                           ;interrupts.c: 22:     if (PIR0bits.TMR0IF) {
  4870   000012  010E               	movlb	14	; () banked
  4871   000014  AB33               	btfss	51,5,b	;volatile
  4872   000016  EF0F  F000         	goto	i2u180_41
  4873   00001A  EF11  F000         	goto	i2u180_40
  4874   00001E                     i2u180_41:
  4875   00001E  EF12  F000         	goto	i2l640
  4876   000022                     i2u180_40:
  4877   000022                     
  4878                           ; BSR set to: 14
  4879                           ;interrupts.c: 30:         PIR0bits.TMR0IF = 0;
  4880   000022  9B33               	bcf	51,5,b	;volatile
  4881   000024                     i2l640:
  4882                           
  4883                           ; BSR set to: 14
  4884                           ;interrupts.c: 35:     if (PIR4bits.TX4IF) {
  4885   000024  A537               	btfss	55,2,b	;volatile
  4886   000026  EF17  F000         	goto	i2u181_41
  4887   00002A  EF19  F000         	goto	i2u181_40
  4888   00002E                     i2u181_41:
  4889   00002E  EF29  F000         	goto	i2l643
  4890   000032                     i2u181_40:
  4891   000032                     
  4892                           ; BSR set to: 14
  4893                           ;interrupts.c: 36:         TX4REG = getCharFromTxBuf();
  4894   000032  EC9D  F00E         	call	_getCharFromTxBuf	;wreg free
  4895   000036  010E               	movlb	14	; () banked
  4896   000038  6FE4               	movwf	228,b	;volatile
  4897   00003A                     
  4898                           ; BSR set to: 14
  4899                           ;interrupts.c: 37:         if (!isDataInTxBuf()) {PIE4bits.TX4IE = 0;}
  4900   00003A  EC5F  F00F         	call	i2_isDataInTxBuf	;wreg free
  4901   00003E  0900               	iorlw	0
  4902   000040  A4D8               	btfss	status,2,c
  4903   000042  EF25  F000         	goto	i2u182_41
  4904   000046  EF27  F000         	goto	i2u182_40
  4905   00004A                     i2u182_41:
  4906   00004A  EF29  F000         	goto	i2l643
  4907   00004E                     i2u182_40:
  4908   00004E  010E               	movlb	14	; () banked
  4909   000050  952D               	bcf	45,2,b	;volatile
  4910   000052                     i2l643:
  4911                           
  4912                           ;interrupts.c: 40:     if (PIR4bits.RC4IF) {putCharToRxBuf(RC4REG);}
  4913   000052  010E               	movlb	14	; () banked
  4914   000054  A737               	btfss	55,3,b	;volatile
  4915   000056  EF2F  F000         	goto	i2u183_41
  4916   00005A  EF31  F000         	goto	i2u183_40
  4917   00005E                     i2u183_41:
  4918   00005E  EF34  F000         	goto	i2l646
  4919   000062                     i2u183_40:
  4920   000062                     
  4921                           ; BSR set to: 14
  4922   000062  51E3               	movf	227,w,b	;volatile
  4923   000064  EC04  F00F         	call	_putCharToRxBuf
  4924   000068                     i2l646:
  4925   000068  C004  FFDA         	movff	??_HighISR+1,fsr2h
  4926   00006C  C003  FFD9         	movff	??_HighISR,fsr2l
  4927   000070  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4928   000072  0011               	retfie		f
  4929   000074                     __end_of_HighISR:
  4930                           	callstack 0
  4931                           
  4932 ;; *************** function i2_isDataInTxBuf *****************
  4933 ;; Defined at:
  4934 ;;		line 100 in file "serial.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  1    wreg      unsigned char 
  4941 ;; Registers used:
  4942 ;;		wreg, status,2, status,0
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4952 ;;Total ram usage:        0 bytes
  4953 ;; Hardware stack levels used: 1
  4954 ;; This function calls:
  4955 ;;		Nothing
  4956 ;; This function is called by:
  4957 ;;		_HighISR
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text39
  4962   001EBE                     __ptext39:
  4963                           	callstack 0
  4964   001EBE                     i2_isDataInTxBuf:
  4965                           	callstack 24
  4966   001EBE                     
  4967                           ;serial.c: 101:     return (TxBufWriteCnt!=TxBufReadCnt);
  4968   001EBE  504D               	movf	_TxBufReadCnt^0,w,c	;volatile
  4969   001EC0  184E               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  4970   001EC2  A4D8               	btfss	status,2,c
  4971   001EC4  EF66  F00F         	goto	i2u76_41
  4972   001EC8  EF69  F00F         	goto	i2u76_40
  4973   001ECC                     i2u76_41:
  4974   001ECC  0E01               	movlw	1
  4975   001ECE  EF6A  F00F         	goto	i2u77_40
  4976   001ED2                     i2u76_40:
  4977   001ED2  0E00               	movlw	0
  4978   001ED4                     i2u77_40:
  4979   001ED4  0012               	return		;funcret
  4980   001ED6                     __end_ofi2_isDataInTxBuf:
  4981                           	callstack 0
  4982                           
  4983 ;; *************** function _putCharToRxBuf *****************
  4984 ;; Defined at:
  4985 ;;		line 72 in file "serial.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;  byte            1    wreg     unsigned char 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  byte            1    0[COMRAM] unsigned char 
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  1    wreg      void 
  4992 ;; Registers used:
  4993 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : 0/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5000 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5002 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5003 ;;Total ram usage:        1 bytes
  5004 ;; Hardware stack levels used: 1
  5005 ;; This function calls:
  5006 ;;		Nothing
  5007 ;; This function is called by:
  5008 ;;		_HighISR
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           	psect	text40
  5013   001E08                     __ptext40:
  5014                           	callstack 0
  5015   001E08                     _putCharToRxBuf:
  5016                           	callstack 24
  5017                           
  5018                           ;incstack = 0
  5019                           ;putCharToRxBuf@byte stored from wreg
  5020   001E08  6E01               	movwf	putCharToRxBuf@byte^0,c
  5021   001E0A                     
  5022                           ;serial.c: 73:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  5023   001E0A  0E13               	movlw	19
  5024   001E0C  6450               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  5025   001E0E  EF0B  F00F         	goto	i2u169_41
  5026   001E12  EF0D  F00F         	goto	i2u169_40
  5027   001E16                     i2u169_41:
  5028   001E16  EF0F  F00F         	goto	i2l2849
  5029   001E1A                     i2u169_40:
  5030   001E1A  0E00               	movlw	0
  5031   001E1C  6E50               	movwf	_RxBufWriteCnt^0,c	;volatile
  5032   001E1E                     i2l2849:
  5033                           
  5034                           ;serial.c: 74:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  5035   001E1E  5050               	movf	_RxBufWriteCnt^0,w,c
  5036   001E20  0F8C               	addlw	low _EUSART4RXbuf
  5037   001E22  6ED9               	movwf	fsr2l,c
  5038   001E24  6ADA               	clrf	fsr2h,c
  5039   001E26  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  5040   001E2A  2A50               	incf	_RxBufWriteCnt^0,f,c	;volatile
  5041   001E2C  0012               	return		;funcret
  5042   001E2E                     __end_of_putCharToRxBuf:
  5043                           	callstack 0
  5044                           
  5045 ;; *************** function _getCharFromTxBuf *****************
  5046 ;; Defined at:
  5047 ;;		line 86 in file "serial.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      unsigned char 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5064 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5065 ;;Total ram usage:        2 bytes
  5066 ;; Hardware stack levels used: 1
  5067 ;; This function calls:
  5068 ;;		Nothing
  5069 ;; This function is called by:
  5070 ;;		_HighISR
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           	psect	text41
  5075   001D3A                     __ptext41:
  5076                           	callstack 0
  5077   001D3A                     _getCharFromTxBuf:
  5078                           	callstack 24
  5079   001D3A                     
  5080                           ;serial.c: 87:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  5081   001D3A  0E3B               	movlw	59
  5082   001D3C  644D               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  5083   001D3E  EFA3  F00E         	goto	i2u170_41
  5084   001D42  EFA5  F00E         	goto	i2u170_40
  5085   001D46                     i2u170_41:
  5086   001D46  EFA7  F00E         	goto	i2l2857
  5087   001D4A                     i2u170_40:
  5088   001D4A  0E00               	movlw	0
  5089   001D4C  6E4D               	movwf	_TxBufReadCnt^0,c	;volatile
  5090   001D4E                     i2l2857:
  5091                           
  5092                           ;serial.c: 88:     return EUSART4TXbuf[TxBufReadCnt++];
  5093   001D4E  2A4D               	incf	_TxBufReadCnt^0,f,c	;volatile
  5094   001D50  044D               	decf	_TxBufReadCnt^0,w,c	;volatile
  5095   001D52  6E01               	movwf	??_getCharFromTxBuf^0,c
  5096   001D54  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  5097   001D56  0E00               	movlw	low _EUSART4TXbuf
  5098   001D58  2401               	addwf	??_getCharFromTxBuf^0,w,c
  5099   001D5A  6ED9               	movwf	fsr2l,c
  5100   001D5C  0E01               	movlw	high _EUSART4TXbuf
  5101   001D5E  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  5102   001D60  6EDA               	movwf	fsr2h,c
  5103   001D62  50DF               	movf	indf2,w,c
  5104   001D64  0012               	return		;funcret
  5105   001D66                     __end_of_getCharFromTxBuf:
  5106                           	callstack 0
  5107                           
  5108                           	psect	rparam
  5109   000000                     
  5110                           	psect	temp
  5111   000051                     btemp:
  5112                           	callstack 0
  5113   000051                     	ds	1
  5114   000000                     int$flags	set	btemp
  5115   000000                     wtemp8	set	btemp+1
  5116   000000                     ttemp5	set	btemp+1
  5117   000000                     ttemp6	set	btemp+4
  5118   000000                     ttemp7	set	btemp+8
  5119                           
  5120                           	psect	idloc
  5121                           
  5122                           ;Config register IDLOC0 @ 0x200000
  5123                           ;	unspecified, using default values
  5124   200000                     	org	2097152
  5125   200000  FFFF               	dw	65535
  5126                           
  5127                           ;Config register IDLOC1 @ 0x200002
  5128                           ;	unspecified, using default values
  5129   200002                     	org	2097154
  5130   200002  FFFF               	dw	65535
  5131                           
  5132                           ;Config register IDLOC2 @ 0x200004
  5133                           ;	unspecified, using default values
  5134   200004                     	org	2097156
  5135   200004  FFFF               	dw	65535
  5136                           
  5137                           ;Config register IDLOC3 @ 0x200006
  5138                           ;	unspecified, using default values
  5139   200006                     	org	2097158
  5140   200006  FFFF               	dw	65535
  5141                           
  5142                           ;Config register IDLOC4 @ 0x200008
  5143                           ;	unspecified, using default values
  5144   200008                     	org	2097160
  5145   200008  FFFF               	dw	65535
  5146                           
  5147                           ;Config register IDLOC5 @ 0x20000A
  5148                           ;	unspecified, using default values
  5149   20000A                     	org	2097162
  5150   20000A  FFFF               	dw	65535
  5151                           
  5152                           ;Config register IDLOC6 @ 0x20000C
  5153                           ;	unspecified, using default values
  5154   20000C                     	org	2097164
  5155   20000C  FFFF               	dw	65535
  5156                           
  5157                           ;Config register IDLOC7 @ 0x20000E
  5158                           ;	unspecified, using default values
  5159   20000E                     	org	2097166
  5160   20000E  FFFF               	dw	65535
  5161                           
  5162                           	psect	config
  5163                           
  5164                           ;Config register CONFIG1L @ 0x300000
  5165                           ;	External Oscillator mode Selection bits
  5166                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5167                           ;	Power-up default value for COSC bits
  5168                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5169   300000                     	org	3145728
  5170   300000  AA                 	db	170
  5171                           
  5172                           ;Config register CONFIG1H @ 0x300001
  5173                           ;	unspecified, using default values
  5174                           ;	Clock Out Enable bit
  5175                           ;	CLKOUTEN = 0x1, unprogrammed default
  5176                           ;	Clock Switch Enable bit
  5177                           ;	CSWEN = 0x1, unprogrammed default
  5178                           ;	Fail-Safe Clock Monitor Enable bit
  5179                           ;	FCMEN = 0x1, unprogrammed default
  5180   300001                     	org	3145729
  5181   300001  FF                 	db	255
  5182                           
  5183                           ;Config register CONFIG2L @ 0x300002
  5184                           ;	unspecified, using default values
  5185                           ;	Master Clear Enable bit
  5186                           ;	MCLRE = 0x1, unprogrammed default
  5187                           ;	Power-up Timer Enable bit
  5188                           ;	PWRTE = 0x1, unprogrammed default
  5189                           ;	Low-power BOR enable bit
  5190                           ;	LPBOREN = 0x1, unprogrammed default
  5191                           ;	Brown-out Reset Enable bits
  5192                           ;	BOREN = 0x3, unprogrammed default
  5193   300002                     	org	3145730
  5194   300002  FF                 	db	255
  5195                           
  5196                           ;Config register CONFIG2H @ 0x300003
  5197                           ;	unspecified, using default values
  5198                           ;	Brown Out Reset Voltage selection bits
  5199                           ;	BORV = 0x3, unprogrammed default
  5200                           ;	ZCD Disable bit
  5201                           ;	ZCD = 0x1, unprogrammed default
  5202                           ;	PPSLOCK bit One-Way Set Enable bit
  5203                           ;	PPS1WAY = 0x1, unprogrammed default
  5204                           ;	Stack Full/Underflow Reset Enable bit
  5205                           ;	STVREN = 0x1, unprogrammed default
  5206                           ;	Debugger Enable bit
  5207                           ;	DEBUG = 0x1, unprogrammed default
  5208                           ;	Extended Instruction Set Enable bit
  5209                           ;	XINST = 0x1, unprogrammed default
  5210   300003                     	org	3145731
  5211   300003  FF                 	db	255
  5212                           
  5213                           ;Config register CONFIG3L @ 0x300004
  5214                           ;	WDT Period Select bits
  5215                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5216                           ;	WDT operating mode
  5217                           ;	WDTE = OFF, WDT Disabled
  5218   300004                     	org	3145732
  5219   300004  9F                 	db	159
  5220                           
  5221                           ;Config register CONFIG3H @ 0x300005
  5222                           ;	unspecified, using default values
  5223                           ;	WDT Window Select bits
  5224                           ;	WDTCWS = 0x7, unprogrammed default
  5225                           ;	WDT input clock selector
  5226                           ;	WDTCCS = 0x7, unprogrammed default
  5227   300005                     	org	3145733
  5228   300005  FF                 	db	255
  5229                           
  5230                           ;Config register CONFIG4L @ 0x300006
  5231                           ;	unspecified, using default values
  5232                           ;	Write Protection Block 0
  5233                           ;	WRT0 = 0x1, unprogrammed default
  5234                           ;	Write Protection Block 1
  5235                           ;	WRT1 = 0x1, unprogrammed default
  5236                           ;	Write Protection Block 2
  5237                           ;	WRT2 = 0x1, unprogrammed default
  5238                           ;	Write Protection Block 3
  5239                           ;	WRT3 = 0x1, unprogrammed default
  5240                           ;	Write Protection Block 3
  5241                           ;	WRT4 = 0x1, unprogrammed default
  5242                           ;	Write Protection Block 3
  5243                           ;	WRT5 = 0x1, unprogrammed default
  5244                           ;	Write Protection Block 3
  5245                           ;	WRT6 = 0x1, unprogrammed default
  5246                           ;	Write Protection Block 3
  5247                           ;	WRT7 = 0x1, unprogrammed default
  5248   300006                     	org	3145734
  5249   300006  FF                 	db	255
  5250                           
  5251                           ;Config register CONFIG4H @ 0x300007
  5252                           ;	unspecified, using default values
  5253                           ;	Configuration Register Write Protection bit
  5254                           ;	WRTC = 0x1, unprogrammed default
  5255                           ;	Boot Block Write Protection bit
  5256                           ;	WRTB = 0x1, unprogrammed default
  5257                           ;	Data EEPROM Write Protection bit
  5258                           ;	WRTD = 0x1, unprogrammed default
  5259                           ;	Scanner Enable bit
  5260                           ;	SCANE = 0x1, unprogrammed default
  5261                           ;	Low Voltage Programming Enable bit
  5262                           ;	LVP = 0x1, unprogrammed default
  5263   300007                     	org	3145735
  5264   300007  FF                 	db	255
  5265                           
  5266                           ;Config register CONFIG5L @ 0x300008
  5267                           ;	unspecified, using default values
  5268                           ;	UserNVM Program Memory Code Protection bit
  5269                           ;	CP = 0x1, unprogrammed default
  5270                           ;	DataNVM Memory Code Protection bit
  5271                           ;	CPD = 0x1, unprogrammed default
  5272   300008                     	org	3145736
  5273   300008  FF                 	db	255
  5274                           
  5275                           ;Config register CONFIG5H @ 0x300009
  5276                           ;	unspecified, using default values
  5277   300009                     	org	3145737
  5278   300009  FF                 	db	255
  5279                           
  5280                           ;Config register CONFIG6L @ 0x30000A
  5281                           ;	unspecified, using default values
  5282                           ;	Table Read Protection Block 0
  5283                           ;	EBTR0 = 0x1, unprogrammed default
  5284                           ;	Table Read Protection Block 1
  5285                           ;	EBTR1 = 0x1, unprogrammed default
  5286                           ;	Table Read Protection Block 2
  5287                           ;	EBTR2 = 0x1, unprogrammed default
  5288                           ;	Table Read Protection Block 3
  5289                           ;	EBTR3 = 0x1, unprogrammed default
  5290                           ;	Table Read Protection Block 4
  5291                           ;	EBTR4 = 0x1, unprogrammed default
  5292                           ;	Table Read Protection Block 5
  5293                           ;	EBTR5 = 0x1, unprogrammed default
  5294                           ;	Table Read Protection Block 6
  5295                           ;	EBTR6 = 0x1, unprogrammed default
  5296                           ;	Table Read Protection Block 7
  5297                           ;	EBTR7 = 0x1, unprogrammed default
  5298   30000A                     	org	3145738
  5299   30000A  FF                 	db	255
  5300                           
  5301                           ;Config register CONFIG6H @ 0x30000B
  5302                           ;	unspecified, using default values
  5303                           ;	Boot Block Table Read Protection bit
  5304                           ;	EBTRB = 0x1, unprogrammed default
  5305   30000B                     	org	3145739
  5306   30000B  FF                 	db	255
  5307                           tosu	equ	0xFFF
  5308                           tosh	equ	0xFFE
  5309                           tosl	equ	0xFFD
  5310                           stkptr	equ	0xFFC
  5311                           pclatu	equ	0xFFB
  5312                           pclath	equ	0xFFA
  5313                           pcl	equ	0xFF9
  5314                           tblptru	equ	0xFF8
  5315                           tblptrh	equ	0xFF7
  5316                           tblptrl	equ	0xFF6
  5317                           tablat	equ	0xFF5
  5318                           prodh	equ	0xFF4
  5319                           prodl	equ	0xFF3
  5320                           indf0	equ	0xFEF
  5321                           postinc0	equ	0xFEE
  5322                           postdec0	equ	0xFED
  5323                           preinc0	equ	0xFEC
  5324                           plusw0	equ	0xFEB
  5325                           fsr0h	equ	0xFEA
  5326                           fsr0l	equ	0xFE9
  5327                           wreg	equ	0xFE8
  5328                           indf1	equ	0xFE7
  5329                           postinc1	equ	0xFE6
  5330                           postdec1	equ	0xFE5
  5331                           preinc1	equ	0xFE4
  5332                           plusw1	equ	0xFE3
  5333                           fsr1h	equ	0xFE2
  5334                           fsr1l	equ	0xFE1
  5335                           bsr	equ	0xFE0
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           preinc2	equ	0xFDC
  5340                           plusw2	equ	0xFDB
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8

Data Sizes:
    Strings     26
    Constant    0
    Data        82
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      80
    BANK0           160     15      83
    BANK1           256     82     194
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(BANK0[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getHSVval@p1	PTR struct HSV_val size(2) Largest target is 6
		 -> main@readHSV(BANK1[6]), 

    getHSVval@p2	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@readRGBC(BANK1[8]), 

    getRGBCval@p	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@readRGBC(BANK1[8]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1136DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1136DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2640$buffer	PTR unsigned char  size(2) Largest target is 0

    S2640$source	PTR const unsigned char  size(2) Largest target is 0

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[23]), STR_2(CODE[5]), STR_4(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 50
		 -> main@display(BANK1[50]), sendArraySerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_high(BANK0[20]), 

    timer_low_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_low(BANK0[20]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 50
		 -> main@display(BANK1[50]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[23]), STR_2(CODE[5]), STR_4(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(BANK0[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[23]), STR_2(CODE[5]), STR_4(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[23]), STR_2(CODE[5]), STR_4(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(BANK0[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___awdiv
    _abs->___awmod
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _getHSVval->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    ___awdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _TxBufferedString->_putCharToTxBuf

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                86    86      0   14898
                                             52 COMRAM     2     2      0
                                              0 BANK1     82    82      0
                    _Interrupts_init
                        _Timer0_init
                   _TxBufferedString
                  _buggy_lights_init
                   _color_click_init
                          _getHSVval
                         _getRGBCval
                    _initDCmotorsPWM
                         _initUSART4
                          _sendTxBuf
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             32    15     17    4961
                                             35 COMRAM    17     0     17
                                              0 BANK0     15    15      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    4091
                                             31 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13    10      3    3630
                                             18 COMRAM    13    10      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     957
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             10 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     613
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (2) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getRGBCval                                           2     0      2     930
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _getHSVval                                           24    20      4    6586
                                             22 COMRAM    24    20      4
                            ___awdiv
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _max
                                _min
 ---------------------------------------------------------------------------------
 (2) _min                                                  7     3      4     521
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _max                                                  7     3      4     521
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1492
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     352
                                             17 COMRAM     5     1      4
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     961
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     805
                                             10 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TxBufferedString                                     2     0      2     227
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (2) _putCharToTxBuf                                       1     1      0      31
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (7) i2_isDataInTxBuf                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _Timer0_init
   _TxBufferedString
     _putCharToTxBuf
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _getHSVval
     ___awdiv
       ___wmul (ARG)
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul
     _max
     _min
   _getRGBCval
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendTxBuf
     _isDataInTxBuf
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     52      C2       7       75.8%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      F      53       5       51.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      50       1       85.1%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      61        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      59        0.0%
BITBIGSFRlllhhh      8      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      60        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRlllllh      5      0       0      57        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRlllllh      3      0       0      58        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     165      62        0.0%
DATA                 0      0     165       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 07 13:01:25 2024

                 _turn180Delay 0039                 _color_read_Red 1A2E                _color_read_Blue 1B1E  
              _trail_timer_low 0064                             l31 1BBA                             l53 1CDC  
                           l62 1B6C                             l71 198A                             l56 1E4C  
                           l80 1C30                             l81 1C38                             l65 1ACC  
                           l74 1C64                             l90 116A                             l75 1C6C  
                           l59 1A7C                             l76 1C74                             l68 1B1C  
                           l79 1C28                   ___awdiv@sign 0010            ___wmul@multiplicand 0007  
             _trail_timer_high 0078               _color_read_Clear 1ACE               _color_read_Green 1A7E  
            ??_Interrupts_init 0005                            l163 17C6                            l261 1DBA  
                          l270 1F1E                            l415 1E8A                            l264 1DE0  
                          l273 1F28                            l258 1D8E                            l267 1F32  
                          l460 1DB8                            l276 1F14                            l279 1BFC  
                          l463 1EBC                            l473 1EA4                            l635 1F08  
                          l469 1D0C                            l649 1E06                            l586 1E6C  
                          l880 15CC                            l893 1736                            _abs 1C76  
                          _max 1C3A                            _min 1BFE                   ___awmod@sign 000A  
                          wreg 0FE8                    _squareDelay 0062                    main@display 015C  
                         ?_abs 000B                           l1140 18C0                           l1150 1924  
                         l1147 18C8                           l1157 192C                           l1405 1F34  
                         l1327 1A2C                           l1382 1CA8                           l1374 19D4  
                         l1375 19DC                           l1368 131A                           l3401 1710  
                         l1369 136C                           l4201 13B8                           l1394 1686  
                         l3331 150A                           l3403 1716                           l1379 1C90  
                         l3411 15CE                           l4211 13D4                           l4203 13BC  
                         l3341 1536                           l3333 150E                           l4141 0EEA  
                         l4133 192E                           l3405 1726                           l3421 1646  
                         l3413 15DE                           l3501 1288                           l4221 13FC  
                         l4213 13DC                           l4205 13C0                           l3327 1DBA  
                         l3431 1F2E                           l3351 1564                           l3343 153E  
                         l3335 151C                           l4151 0FC2                           l4143 0EF2  
                         l4135 0E1C                           l3407 172E                           l3415 15EE  
                         l3511 12CE                           l3503 128C                           l4231 141C  
                         l4223 1404                           l4215 13E4                           l4207 13C4  
                         l3329 1DCA                           l3433 1F0C                           l3361 159E  
                         l3353 156C                           l3345 1542                           l3337 1524  
                         l4161 10D6                           l4153 101E                           l4145 0F12  
                         l4137 0ECC                           l3441 1F16                           l3425 1C76  
                         l3417 15F8                           l3513 12E0                           l3505 129E  
                         l3521 1326                           l4241 142C                           l4233 1420  
                         l4225 140C                           l4217 13EC                           l4209 13CC  
                         l3435 1F10                           l3371 15C4                           l3363 15A0  
                         l3355 157A                           l3347 154A                           l3339 1528  
                         l4171 1142                           l4163 10E8                           l4155 103A  
                         l4147 0F82                           l4139 0ED8                           l3451 1BD2  
                         l3443 1F1A                           l3427 1C84                           l3419 1614  
                         l3531 1364                           l3523 132E                           l3515 12E8  
                         l3507 12AE                           l4251 1450                           l4243 1430  
                         l4235 1424                           l4227 1414                           l4219 13F4  
                         l4181 1CF4                           l3541 1D78                           l3429 1F2A  
                         l3437 1F20                           l3365 15A6                           l3357 1580  
                         l3349 155C                           l3701 1894                           l4173 1156  
                         l4165 10F0                           l4157 105E                           l4149 0F9E  
                         l3453 1BF8                           l3445 1BBE                           l3381 16A2  
                         l3517 1306                           l3509 12BE                           l4261 14E6  
                         l4253 1472                           l4245 1432                           l4237 1428  
                         l4229 1418                           l4175 1CDE                           l3543 1D7A  
                         l3535 1D66                           l3439 1F24                           l3359 1596  
                         l3367 15AC                           l3703 18AA                           l3711 18CA  
                         l4167 1102                           l4159 10BA                           l3455 1BFA  
                         l3447 1BC2                           l3551 1A74                           l3391 16D6  
                         l3383 16A6                           l3375 1688                           l3519 1308  
                         l3527 133A                           l4263 14EA                           l4255 147E  
                         l4247 1440                           l4239 142A                           l4191 1398  
                         l4183 136E                           l4177 1CE2                           l3545 1D7C  
                         l3537 1D70                           l3369 15BC                           l3705 18B2  
                         l3721 1910                           l3713 18DC                           l4169 1132  
                         l3449 1BCA                           l3561 1A7E                           l3801 17A2  
                         l3393 16DE                           l3385 16B4                           l3377 168C  
                         l3529 135C                           l3481 11A2                           l4257 1492  
                         l4249 144A                           l4193 139C                           l4185 1386  
                         l4179 1CF0                           l3539 1D76                           l3547 1E30  
                         l3707 18B4                           l3723 1918                           l3715 18E4  
                         l3555 1B1E                           l3563 1AC4                           l3811 17C4  
                         l3803 17AC                           l3395 16EC                           l3387 16BC  
                         l3379 169A                           l3491 11FE                           l3483 11B0  
                         l3475 116C                           l3731 199C                           l4259 14DA  
                         l4195 13A0                           l4187 1386                           l3741 1CB8  
                         l3709 18BA                           l3725 191E                           l3717 18EC  
                         l3573 1C3A                           l3557 1B64                           l3549 1A2E  
                         l3805 17AE                           l3901 1EA0                           l3397 1702  
                         l3389 16CE                           l3493 1216                           l3485 11B4  
                         l3477 1174                           l3733 19B4                           l4197 13A8  
                         l4189 1392                           l3671 1D92                           l3735 1B6E  
                         l3743 1CC8                           l3719 18FA                           l3575 1C58  
                         l3567 1ACE                           l3807 17B8                           l3399 170A  
                         l3495 1220                           l3487 11BE                           l3479 119A  
                         l3727 198C                           l4199 13B0                           l3673 1DA2  
                         l3745 1CD2                           l3737 1CAA                           l3577 1BFE  
                         l3569 1B14                           l3809 17BA                           l3497 1238  
                         l3489 11DE                           l3729 1990                           l3675 1DA6  
                         l3739 1CAE                           l3691 185E                           l3683 1DE2  
                         l3579 1C1C                           l3499 126C                           l3677 1DB6  
                         l3693 1870                           l3685 1DFE                           l3861 1E84  
                         ?_max 0005                           l3871 1E58                           l3695 1878  
                         l3791 1748                           l3863 1E86                           l3855 1E6E  
                         l3679 1EA6                           l3873 1E6A                           l3697 1880  
                         l3689 1856                           l3793 176E                           l3865 1E88  
                         l3857 1E78                           l3881 19F4                           l3875 1EFC  
                         l3867 1E4E                           l3699 188E                           l3795 1772  
                         l3859 1E7A                           l3883 19FC                           ?_min 0005  
                         l3869 1E56                           l3797 1796                           l3789 1738  
                         l3885 1A14                           l3877 19DE                           l3799 17A0  
                         l3887 1A24                           l3879 19EC                           l3899 1E8C  
                         STR_1 0E01                           STR_3 0E18                           u2200 1DCA  
                         u2201 1DC6                           u2210 1DE0                           u3010 0EEA  
                         u2211 1DDC                           u3011 0EE6                           u2220 151C  
                         u3020 0F12                           u2300 16CE                           u2221 1518  
                         u3021 0F0E                           u2301 16CA                           u2230 1536  
                         u3030 0FC2                           u2310 16EC                           u2231 1532  
                         u3031 0FBE                           u2311 16E8                           u2240 155C  
                         u3040 105E                           u2320 1702                   _BAUD4CONbits 0EE9  
                         u2241 1558                           u3041 105A                           u2321 16FE  
                         u2250 157A                           u3050 10E8                           u2330 1726  
                         u2251 1576                           u3051 10E4                           u2331 1722  
                         u2260 1596                           u3060 1102                           u2340 15DE  
                         u2500 12BE                           u3108 1464                           u2261 1592  
                         u3061 10FE                           u2341 15DA                           u2501 12BA  
                         u3117 1378                           u3070 1D0C                           u2270 15BC  
                         u2350 15EE                           u2510 12CE                           u2430 119A  
                         u3071 1D08                           u2271 15B8                           u2351 15EA  
                         u2511 12CA                           u2431 1196                           u3127 14F4  
                         u2408 1BE8                           u2280 169A                           u2360 1614  
                         u2520 131A                           u2440 11DE                           u3080 1440  
                         u3137 1CBE                           u2281 1696                           u2361 1610  
                         u2521 1316                           u2441 11DA                           u3081 143C  
                         u2530 1C58                           u2290 16B4                           u2370 1646  
                         u2450 11FE                           u3090 1462                           _T2PR 0FBC  
                         u2531 1C54                           u2291 16B0                           u2371 1642  
                         u2451 11FA                           u3091 145A                           u2540 1C1C  
                         u2380 1C84                           u2460 1234                           u2541 1C18  
                         u2381 1C80                           u2461 122E                           u2390 1BE6  
                         u2470 1236                           u2391 1BDE                           u2720 1DA2  
                         u2800 1910                           u2480 129E                           u2721 1D9E  
                         u2801 190C                           u2481 129A                    main@readHSV 01A0  
                         u2730 1EBA                           u2490 12AE                           u2810 19D4  
                         u2731 1EB4                           u2491 12AA                           u2811 19D0  
                         u2740 1EBC                           u2750 1870                           u2751 186C  
                         u2760 188E                           u2761 188A                           u2770 18AA  
                         u2771 18A6                           u2780 18DC                           u2781 18D8  
                         u2790 18FA                           u2791 18F6                           u2890 1EA0  
                         u2891 1E9C                           abs@a 000B                           _dbuf 013C  
                         _main 136E                           _prec 00A2                           _nout 0049  
                         fsr1h 0FE2                           fsr2h 0FDA                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           max@a 0005  
                         max@b 0007                           btemp 0051                           min@a 0005  
                         min@b 0007                           prodh 0FF4                           prodl 0FF3  
                         start 0074         __end_of_color_read_Red 1A7E                __end_of_HighISR 0074  
                 ___param_bank 0000                          ??_abs 000D                          ??_max 0009  
                        ??_min 0009                          ?_main 0001             _timer_high_pointer 0044  
              __end_of___awdiv 15CE                __end_of___awmod 1738                ___awdiv@divisor 000D  
              __end_of___lwdiv 18CA                   main@readRGBC 01A6                __end_of___lwmod 192E  
                        i2l463 1ED4                          i2l456 1D64                          i2l640 0024  
                        i2l449 1E2C                          i2l642 0022                          i2l643 0052  
                        i2l646 0068                ___awdiv@counter 000F                   vfpfcnvrt@cnt 0018  
                 vfpfcnvrt@fmt 0014                          _TMR0H 0FD4                          _TMR0L 0FD3  
   __end_of_I2C_2_Master_Start 1F34     __end_of_I2C_2_Master_Write 1F16                    _turningGear 0045  
                        _flags 004B                          _fputc 15CE                          _width 00A0  
                        _putch 1F34              _turnRight135Delay 003B                          tablat 0FF5  
              _turnLeft90Delay 0041                          ttemp5 0052                          ttemp6 0055  
                        ttemp7 0059                          status 0FD8                          wtemp8 0052  
              __end_of_sprintf 1A2E            getHSVval@saturation 0025        __end_of_color_read_Blue 1B6E  
        _I2C_2_Master_RepStart 1F16             putCharToRxBuf@byte 0001                ?_color_read_Red 0009  
              __initialization 17C8                   __end_of_main 150A                i2_isDataInTxBuf 1EBE  
           putCharToTxBuf@byte 0005                         ??_main 0035                  __activetblptr 0003  
               _getHSVval$3064 0021                 _getHSVval$3065 0023                 _getHSVval$3066 0029  
                       ?_fputc 0005                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21               ___awdiv@dividend 000B  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       _RD6PPS 0E70                         _RE4PPS 0E76                         i2l2013 1EBE  
                       i2l3101 003A                         i2l3103 004E                         i2l3105 0062  
                       i2l3093 0012                         i2l3099 0032                         i2l2851 1E2A  
                       i2l2853 1D3A                         i2l2845 1E0A                         i2l2855 1D4A  
                       i2l2847 1E1A                         i2l2857 1D4E                         i2l2849 1E1E  
                       _RG6PPS 0E88                  vfpfcnvrt@done 0017                      ??_HighISR 0003  
     __end_of_color_click_init 1CDE                         _RX4PPS 0E15                         _TX4REG 0EE4  
             _turnLeft135Delay 003D                  ??_Timer0_init 0005                   _CCPTMRS0bits 0FAD  
                 vfprintf@cfmt 0023               _getCharFromTxBuf 1D3A                         ___wmul 1DE2  
                    ??___awdiv 000F                      ??___awmod 0009                      ??___lwdiv 000F  
                    ??___lwmod 0016                         clear_0 182E                         clear_1 183A  
                       clear_2 1846               ___awdiv@quotient 0011                ___awmod@divisor 0007  
                       isa$std 0001                ___awmod@counter 0009                         fputc@c 0005  
            ?_TxBufferedString 0006                   __pdataCOMRAM 0037              _timer_low_pointer 0043  
                 __mediumconst 0000                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8             ??_TxBufferedString 0008                         putch@c 0001  
             __end_of_vfprintf 19DE              ??_initDCmotorsPWM 0007                      ??_sprintf 0035  
            _buggy_lights_init 1B6E          __end_of_isDataInTxBuf 1EBE                     __accesstop 0060  
      __end_of__initialization 184C       __end_of_color_read_Clear 1B1E       __end_of_color_read_Green 1ACE  
       ?_I2C_2_Master_RepStart 0001        __end_ofi2_isDataInTxBuf 1ED6             ?_buggy_lights_init 0001  
                ___rparam_used 0001               ?_color_read_Blue 0009                _Interrupts_init 1EFC  
               __pcstackCOMRAM 0001                   __pidataBANK0 1D0E                   __pidataBANK1 1ED6  
          ??_buggy_lights_init 0005                  __end_of_fputc 1688                  __end_of_putch 1F36  
          __end_of_Timer0_init 1E6E                        ??_fputc 0008      __end_of_buggy_lights_init 1BBC  
                      ??_putch 0005                     __pbssBANK0 008C                     __pbssBANK1 0100  
                   _getRGBCval 192E              _color_writetoaddr 1E2E                   _T2CLKCONbits 0FBF  
           ?_color_writetoaddr 0007                        ?___wmul 0005            ??_color_writetoaddr 0008  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                        i2u76_40 1ED2  
                      i2u76_41 1ECC                        i2u77_40 1ED4                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5        __end_of_Interrupts_init 1F0A              __end_of_getHSVval 116C  
       color_writetoaddr@value 0007               ??_color_read_Red 000B                        _HighISR 0008  
    __end_of_color_writetoaddr 1E4E               ?i2_isDataInTxBuf 0001             _I2C_2_Master_Start 1F2A  
                   _initUSART4 1E6E             _I2C_2_Master_Write 1F0A                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000E                    _Timer0_init 1E4E  
                      ___awdiv 150A                        ___awmod 1688            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 1856            ?_I2C_2_Master_Write 0001                        ___lwmod 18CA  
                    ?_vfprintf 0020                   __psmallconst 0E00                        __pcinit 17C8  
                      __ramtop 0E00                        __ptext0 136E                        __ptext1 19DE  
                      __ptext2 198C                        __ptext3 116C                        __ptext4 15CE  
                      __ptext5 1F34                        __ptext6 1C76                        __ptext7 1688  
                      __ptext8 1E8C                        __ptext9 1EA6                      _T2CONbits 0FBD  
             ___awmod@dividend 0005                      _T2HLTbits 0FBE                  _RxBufWriteCnt 0050  
     __end_of_getCharFromTxBuf 1D66                        _sprintf 19DE           ??_I2C_2_Master_Start 0006  
         ??_I2C_2_Master_Write 0006           end_of_initialization 184C              __end_of_sendTxBuf 1EA6  
                  ?_getRGBCval 0010                        fputc@fp 0007              ?_color_click_init 0001  
           ??_color_click_init 0009              __end_of_vfpfcnvrt 136E                        postdec1 0FE5  
                      postdec2 0FDD                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 001B                     ??_vfprintf 0023  
              _initDCmotorsPWM 1738                      _PORTFbits 0F8E                      _TRISAbits 0F81  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
     color_writetoaddr@address 0008        ??_I2C_2_Master_RepStart 0006               ?_Interrupts_init 0001  
                  _CCP1CONbits 0FAB              ?_color_read_Clear 0009                   _EUSART4RXbuf 008C  
                 _EUSART4TXbuf 0100                    _CCP2CONbits 0FA7              ?_color_read_Green 0009  
                  _CCP3CONbits 0F26                    ?_initUSART4 0001                    _CCP4CONbits 0F22  
                   main@motorL 018E                     main@motorR 0197             ??_color_read_Clear 000B  
           ??_color_read_Green 000B                     max@max_val 000A                    vfpfcnvrt@ap 0015  
                  vfpfcnvrt@cp 001A                    vfpfcnvrt@fp 0013                 __end_of___wmul 1E08  
                __pidataCOMRAM 1EEA                     min@min_val 000A            color_read_Clear@tmp 000E  
          start_initialization 17C8                    __end_of_abs 1CAA                    __end_of_max 1C76  
                  __end_of_min 1C3A                  _TxBufWriteCnt 004E               _turnRight90Delay 003F  
          color_read_Green@tmp 000E        __end_of_initDCmotorsPWM 17C8                    vfprintf@fmt 0021  
                     ??___wmul 0009                 _putCharToRxBuf 1E08                 _putCharToTxBuf 1D90  
                  __pdataBANK0 0060                    __pdataBANK1 01AE                    __pbssCOMRAM 0049  
                __pcstackBANK0 00A4                  __pcstackBANK1 015C                      _backtrack 004C  
                     ?_HighISR 0001                      _getHSVval 0E1C               ___lwdiv@dividend 000B  
                 ?_Timer0_init 0001         __end_of_putCharToRxBuf 1E2E         __end_of_putCharToTxBuf 1DBA  
                    __pintcode 0008                       ?___awdiv 000B                       ?___awmod 0005  
                     ?___lwdiv 000B                       ?___lwmod 0012         TxBufferedString@string 0006  
         I2C_2_Master_Read@ack 0007           I2C_2_Master_Read@tmp 0008                    __smallconst 0E00  
            _I2C_2_Master_Idle 1DBA              _I2C_2_Master_Init 1D66              _I2C_2_Master_Read 1BBC  
            _I2C_2_Master_Stop 1F20                   _RxBufReadCnt 004F             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 0010                  _headbuttDelay 0037       initDCmotorsPWM@PWMperiod 0005  
                     ?_sprintf 0024              ?_getCharFromTxBuf 0001                      _rampDelay 0048  
           ??_getCharFromTxBuf 0001                   ??_getRGBCval 0012            ??_I2C_2_Master_Idle 0005  
          ??_I2C_2_Master_Init 0005            ??_I2C_2_Master_Read 0006                 ___wmul@product 0009  
                     _LATAbits 0F79            ??_I2C_2_Master_Stop 0006                       _LATCbits 0F7B  
                _isDataInTxBuf 1EA6                       _LATDbits 0F7C                       _LATEbits 0F7D  
                     _LATFbits 0F7E               _TxBufferedString 1CDE                       _LATGbits 0F7F  
                     _LATHbits 0F80                      _sendTxBuf 1E8C                       _PIE0bits 0E29  
                     _PIE4bits 0E2D                   getHSVval@hue 0027                     ?_getHSVval 0017  
                     i2u170_40 1D4A                       i2u170_41 1D46                       i2u180_40 0022  
                     i2u180_41 001E                       i2u181_40 0032                       i2u181_41 002E  
                     i2u182_40 004E                       i2u182_41 004A                       i2u183_40 0062  
                     i2u183_41 005E                       _PIR0bits 0E33                       i2u169_40 1E1A  
                     i2u169_41 1E16                       _PIR4bits 0E37                ?_putCharToRxBuf 0001  
             ?_initDCmotorsPWM 0005                ?_putCharToTxBuf 0001                       _SSP2CON2 0EDA  
                     _SSP2STAT 0ED8                      _vfpfcnvrt 116C      __end_of_I2C_2_Master_Idle 1DE2  
    __end_of_I2C_2_Master_Init 1D90      __end_of_I2C_2_Master_Read 1BFE              ___wmul@multiplier 0005  
    __end_of_I2C_2_Master_Stop 1F2A    I2C_2_Master_Write@data_byte 0006             __end_of_getRGBCval 198C  
            ??_color_read_Blue 000B                   _TxBufReadCnt 004D                     vfpfcnvrt@c 001F  
                    copy_data0 17DC                      copy_data1 17FC                      copy_data2 181C  
               ?_isDataInTxBuf 0001  __end_of_I2C_2_Master_RepStart 1F20             color_read_Blue@tmp 000E  
                   ?_sendTxBuf 0001                   ??_initUSART4 0005                       __Hrparam 0000  
                   vfprintf@ap 0022                       __Lrparam 0000                     vfprintf@fp 0020  
              getHSVval@maxRGB 002D                getHSVval@minRGB 001F                     ?_vfpfcnvrt 0013  
                   _ANSELDbits 0EA7                     _ANSELFbits 0EB4                     sprintf@fmt 0026  
                   sprintf@ret 00A4                     _T0CON0bits 0FD5                     _T0CON1bits 0FD6  
              ___lwdiv@divisor 000D             __end_of_initUSART4 1E8C                ___lwdiv@counter 000F  
                     __ptext10 1E6E                       __ptext11 1738                       __ptext20 1BFE  
                     __ptext12 192E                       __ptext21 1C3A                       __ptext13 1A2E  
                     __ptext30 1F2A                       __ptext22 1DE2                       __ptext14 1A7E  
                     __ptext31 1DBA                       __ptext23 18CA                       __ptext15 1ACE  
                     __ptext40 1E08                       __ptext32 1D66                       __ptext24 1856  
                     __ptext16 1B1E                       __ptext41 1D3A                       __ptext33 1B6E  
                     __ptext25 150A                       __ptext17 1F16                       __ptext34 1CDE  
                     __ptext26 1CAA                       __ptext18 1BBC                       __ptext35 1D90  
                     __ptext27 1E2E                       __ptext19 0E1C                       __ptext36 1E4E  
                     __ptext28 1F0A                       __ptext37 1EFC                       __ptext29 1F20  
                     __ptext39 1EBE                    getRGBCval@p 0010                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                    ??_getHSVval 001B                    getHSVval@p1 0017  
                  getHSVval@p2 0019                       isa$xinst 0000                     _RC4STAbits 0EE7  
                     int$flags 0051                       _vfprintf 198C                     _INTCONbits 0FF2  
            ??i2_isDataInTxBuf 0001                 getHSVval@range 002B                ??_isDataInTxBuf 0005  
                     intlevel2 0000                      sprintf@ap 00A6                   _topGearRight 0046  
            _manoeuvre_pointer 0060               ___lwmod@dividend 0012                    ??_sendTxBuf 0005  
                  ??_vfpfcnvrt 0016               _color_click_init 1CAA                    _topGearLeft 0047  
     __end_of_TxBufferedString 1D0E                       sprintf@f 00A7                       sprintf@s 0024  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C                ___lwmod@divisor 0014  
              ___lwmod@counter 0016                _trail_manoeuvre 01AE                     _TX4STAbits 0EE8  
             ??_putCharToRxBuf 0001               ??_putCharToTxBuf 0005  
