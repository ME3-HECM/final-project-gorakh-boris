

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 14 19:39:36 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    89                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    90   000000                     
    91                           ; Generated 21/07/2023 GMT
    92                           ; 
    93                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution. Publication is not required when
   107                           ;        this file is used in an embedded application.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F67K40 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125   000000                     
   126                           	psect	idataCOMRAM
   127   003998                     __pidataCOMRAM:
   128                           	callstack 0
   129                           
   130                           ;initializer for _wall_threshold_clear
   131   003998  0032               	dw	50
   132                           
   133                           ;initializer for _manoeuvre_pointer
   134   00399A  60                 	db	low _trail_manoeuvre
   135                           
   136                           ;initializer for _timer_low_pointer
   137   00399B  74                 	db	low _trail_timer_low
   138                           
   139                           ;initializer for _timer_high_pointer
   140   00399C  88                 	db	low _trail_timer_high
   141                           
   142                           ;initializer for _rampDelay
   143   00399D  08                 	db	8
   144                           
   145                           ;initializer for _turningRightGear
   146   00399E  28                 	db	40
   147                           
   148                           ;initializer for _turningLeftGear
   149   00399F  28                 	db	40
   150                           
   151                           ;initializer for _bottomGearRight
   152   0039A0  15                 	db	21
   153                           
   154                           ;initializer for _bottomGearLeft
   155   0039A1  14                 	db	20
   156                           
   157                           ;initializer for _topGearRight
   158   0039A2  14                 	db	20
   159                           
   160                           ;initializer for _topGearLeft
   161   0039A3  14                 	db	20
   162                           
   163                           ;initializer for _sample_count
   164   0039A4  14                 	db	20
   165                           
   166                           	psect	idataBANK0
   167   00398A                     __pidataBANK0:
   168                           	callstack 0
   169                           
   170                           ;initializer for _squareDelay
   171   00398A  0988               	dw	2440
   172                           
   173                           ;initializer for _headbuttDelay
   174   00398C  0334               	dw	820
   175                           
   176                           ;initializer for _turn180Delay
   177   00398E  0190               	dw	400
   178                           
   179                           ;initializer for _turnRight135Delay
   180   003990  0106               	dw	262
   181                           
   182                           ;initializer for _turnLeft135Delay
   183   003992  00FA               	dw	250
   184                           
   185                           ;initializer for _turnRight90Delay
   186   003994  006C               	dw	108
   187                           
   188                           ;initializer for _turnLeft90Delay
   189   003996  0054               	dw	84
   190   000000                     _TMR0H	set	4052
   191   000000                     _RC4STAbits	set	3815
   192   000000                     _SP4BRGH	set	3814
   193   000000                     _LATEbits	set	3965
   194   000000                     _LATGbits	set	3967
   195   000000                     _TRISEbits	set	3973
   196   000000                     _TRISGbits	set	3975
   197   000000                     _LATFbits	set	3966
   198   000000                     _LATHbits	set	3968
   199   000000                     _TRISFbits	set	3974
   200   000000                     _TRISHbits	set	3976
   201   000000                     _SSP2CON2bits	set	3802
   202   000000                     _RX4PPS	set	3605
   203   000000                     _SSP2CLKPPS	set	3612
   204   000000                     _SSP2DATPPS	set	3613
   205   000000                     _RC7PPS	set	3689
   206   000000                     _RE2PPS	set	3700
   207   000000                     _LATAbits	set	3961
   208   000000                     _LATDbits	set	3964
   209   000000                     _TRISDbits	set	3972
   210   000000                     _PORTFbits	set	3982
   211   000000                     _T2PR	set	4028
   212   000000                     _T2CONbits	set	4029
   213   000000                     _CCPR2H	set	4006
   214   000000                     _CCPR1H	set	4010
   215   000000                     _TRISCbits	set	3971
   216   000000                     _TRISAbits	set	3969
   217   000000                     _LATCbits	set	3963
   218   000000                     _RE4PPS	set	3702
   219   000000                     _RG6PPS	set	3720
   220   000000                     _RD5PPS	set	3695
   221   000000                     _ANSELDbits	set	3751
   222   000000                     _SSP2ADD	set	3798
   223   000000                     _SSP2CON1bits	set	3801
   224   000000                     _CCPR4H	set	3873
   225   000000                     _CCPR3H	set	3877
   226   000000                     _TMR0L	set	4051
   227   000000                     _T0CON0bits	set	4053
   228   000000                     _T0CON1bits	set	4054
   229   000000                     _T2CLKCONbits	set	4031
   230   000000                     _T2HLTbits	set	4030
   231   000000                     _CCP1CONbits	set	4011
   232   000000                     _CCPTMRS0bits	set	4013
   233   000000                     _CCP2CONbits	set	4007
   234   000000                     _CCP3CONbits	set	3878
   235   000000                     _CCP4CONbits	set	3874
   236   000000                     _TX4REG	set	3812
   237   000000                     _SP4BRGL	set	3813
   238   000000                     _TX4STAbits	set	3816
   239   000000                     _BAUD4CONbits	set	3817
   240   000000                     _SSP2CON2	set	3802
   241   000000                     _SSP2STAT	set	3800
   242   000000                     _ANSELFbits	set	3764
   243   000000                     _SSP2BUF	set	3797
   244   000000                     _PIE0bits	set	3625
   245   000000                     _PIR4bits	set	3639
   246   000000                     _RC0PPS	set	3682
   247   000000                     _RD6PPS	set	3696
   248   000000                     _INTCONbits	set	4082
   249   000000                     _PIR0bits	set	3635
   250                           
   251                           	psect	smallconst
   252   000E00                     __psmallconst:
   253                           	callstack 0
   254   000E00  00                 	db	0
   255   000E01                     STR_5:
   256                           
   257                           ; BSR set to: 14
   258   000E01  25                 	db	37
   259   000E02  75                 	db	117	;'u'
   260   000E03  20                 	db	32
   261   000E04  25                 	db	37
   262   000E05  75                 	db	117	;'u'
   263   000E06  20                 	db	32
   264   000E07  25                 	db	37
   265   000E08  75                 	db	117	;'u'
   266   000E09  20                 	db	32
   267   000E0A  25                 	db	37
   268   000E0B  75                 	db	117	;'u'
   269   000E0C  20                 	db	32
   270   000E0D  0D                 	db	13
   271   000E0E  00                 	db	0
   272   000E0F                     STR_1:
   273                           
   274                           ; BSR set to: 14
   275   000E0F  25                 	db	37
   276   000E10  64                 	db	100	;'d'
   277   000E11  20                 	db	32
   278   000E12  0D                 	db	13
   279   000E13  00                 	db	0
   280   000E14                     STR_2:
   281                           
   282                           ; BSR set to: 14
   283   000E14  25                 	db	37
   284   000E15  64                 	db	100	;'d'
   285   000E16  20                 	db	32
   286   000E17  00                 	db	0
   287   000E18  00                 	db	0	; dummy byte at the end
   288   000000                     
   289                           ; #config settings
   290                           
   291                           	psect	cinit
   292   003316                     __pcinit:
   293                           	callstack 0
   294   003316                     start_initialization:
   295                           	callstack 0
   296   003316                     __initialization:
   297                           	callstack 0
   298                           
   299                           ; Initialize objects allocated to BANK0 (14 bytes)
   300                           ; load TBLPTR registers with __pidataBANK0
   301   003316  0E8A               	movlw	low __pidataBANK0
   302   003318  6EF6               	movwf	tblptrl,c
   303   00331A  0E39               	movlw	high __pidataBANK0
   304   00331C  6EF7               	movwf	tblptrh,c
   305   00331E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   306   003320  6EF8               	movwf	tblptru,c
   307   003322  EE00  F0BC         	lfsr	0,__pdataBANK0
   308   003326  EE10 F00E          	lfsr	1,14
   309   00332A                     copy_data0:
   310   00332A  0009               	tblrd		*+
   311   00332C  CFF5 FFEE          	movff	tablat,postinc0
   312   003330  50E5               	movf	postdec1,w,c
   313   003332  50E1               	movf	fsr1l,w,c
   314   003334  E1FA               	bnz	copy_data0
   315                           
   316                           ; Initialize objects allocated to COMRAM (13 bytes)
   317                           ; load TBLPTR registers with __pidataCOMRAM
   318   003336  0E98               	movlw	low __pidataCOMRAM
   319   003338  6EF6               	movwf	tblptrl,c
   320   00333A  0E39               	movlw	high __pidataCOMRAM
   321   00333C  6EF7               	movwf	tblptrh,c
   322   00333E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   323   003340  6EF8               	movwf	tblptru,c
   324   003342  EE00  F04D         	lfsr	0,__pdataCOMRAM
   325   003346  EE10 F00D          	lfsr	1,13
   326   00334A                     copy_data1:
   327   00334A  0009               	tblrd		*+
   328   00334C  CFF5 FFEE          	movff	tablat,postinc0
   329   003350  50E5               	movf	postdec1,w,c
   330   003352  50E1               	movf	fsr1l,w,c
   331   003354  E1FA               	bnz	copy_data1
   332                           
   333                           ; Clear objects allocated to BANK0 (60 bytes)
   334   003356  EE00  F060         	lfsr	0,__pbssBANK0
   335   00335A  0E3C               	movlw	60
   336   00335C                     clear_0:
   337   00335C  6AEE               	clrf	postinc0,c
   338   00335E  06E8               	decf	wreg,f,c
   339   003360  E1FD               	bnz	clear_0
   340                           
   341                           ; Clear objects allocated to COMRAM (4 bytes)
   342   003362  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   343   003364  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   344   003366  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   345   003368  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   346   00336A                     end_of_initialization:
   347                           	callstack 0
   348   00336A                     __end_of__initialization:
   349                           	callstack 0
   350   00336A  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   351   00336C  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   352   00336E  0100               	movlb	0
   353   003370  EF0A  F012         	goto	_main	;jump to C main() function
   354                           
   355                           	psect	bssCOMRAM
   356   00005A                     __pbssCOMRAM:
   357                           	callstack 0
   358   00005A                     _manoeuvre_count:
   359                           	callstack 0
   360   00005A                     	ds	1
   361   00005B                     _lost_flag:
   362                           	callstack 0
   363   00005B                     	ds	1
   364   00005C                     _return_flag:
   365                           	callstack 0
   366   00005C                     	ds	1
   367   00005D                     _returning:
   368                           	callstack 0
   369   00005D                     	ds	1
   370                           
   371                           	psect	dataCOMRAM
   372   00004D                     __pdataCOMRAM:
   373                           	callstack 0
   374   00004D                     _wall_threshold_clear:
   375                           	callstack 0
   376   00004D                     	ds	2
   377   00004F                     _manoeuvre_pointer:
   378                           	callstack 0
   379   00004F                     	ds	1
   380   000050                     _timer_low_pointer:
   381                           	callstack 0
   382   000050                     	ds	1
   383   000051                     _timer_high_pointer:
   384                           	callstack 0
   385   000051                     	ds	1
   386   000052                     _rampDelay:
   387                           	callstack 0
   388   000052                     	ds	1
   389   000053                     _turningRightGear:
   390                           	callstack 0
   391   000053                     	ds	1
   392   000054                     _turningLeftGear:
   393                           	callstack 0
   394   000054                     	ds	1
   395   000055                     _bottomGearRight:
   396                           	callstack 0
   397   000055                     	ds	1
   398   000056                     _bottomGearLeft:
   399                           	callstack 0
   400   000056                     	ds	1
   401   000057                     _topGearRight:
   402                           	callstack 0
   403   000057                     	ds	1
   404   000058                     _topGearLeft:
   405                           	callstack 0
   406   000058                     	ds	1
   407   000059                     _sample_count:
   408                           	callstack 0
   409   000059                     	ds	1
   410                           
   411                           	psect	bssBANK0
   412   000060                     __pbssBANK0:
   413                           	callstack 0
   414   000060                     _trail_manoeuvre:
   415                           	callstack 0
   416   000060                     	ds	20
   417   000074                     _trail_timer_low:
   418                           	callstack 0
   419   000074                     	ds	20
   420   000088                     _trail_timer_high:
   421                           	callstack 0
   422   000088                     	ds	20
   423                           
   424                           	psect	dataBANK0
   425   0000BC                     __pdataBANK0:
   426                           	callstack 0
   427   0000BC                     _squareDelay:
   428                           	callstack 0
   429   0000BC                     	ds	2
   430   0000BE                     _headbuttDelay:
   431                           	callstack 0
   432   0000BE                     	ds	2
   433   0000C0                     _turn180Delay:
   434                           	callstack 0
   435   0000C0                     	ds	2
   436   0000C2                     _turnRight135Delay:
   437                           	callstack 0
   438   0000C2                     	ds	2
   439   0000C4                     _turnLeft135Delay:
   440                           	callstack 0
   441   0000C4                     	ds	2
   442   0000C6                     _turnRight90Delay:
   443                           	callstack 0
   444   0000C6                     	ds	2
   445   0000C8                     _turnLeft90Delay:
   446                           	callstack 0
   447   0000C8                     	ds	2
   448                           
   449                           	psect	cstackBANK0
   450   00009C                     __pcstackBANK0:
   451                           	callstack 0
   452   00009C                     main@HSV_colour:
   453                           	callstack 0
   454                           
   455                           ; 6 bytes @ 0x0
   456   00009C                     	ds	6
   457   0000A2                     main@motorL:
   458                           	callstack 0
   459                           
   460                           ; 9 bytes @ 0x6
   461   0000A2                     	ds	9
   462   0000AB                     main@motorR:
   463                           	callstack 0
   464                           
   465                           ; 9 bytes @ 0xF
   466   0000AB                     	ds	9
   467   0000B4                     main@RGBC_colour:
   468                           	callstack 0
   469                           
   470                           ; 8 bytes @ 0x18
   471   0000B4                     	ds	8
   472                           
   473                           	psect	cstackCOMRAM
   474   000001                     __pcstackCOMRAM:
   475                           	callstack 0
   476   000001                     ??_toggle_brake_lights:
   477   000001                     ??_toggle_main_beam:
   478   000001                     ??_toggle_left_indicators:
   479   000001                     ??_toggle_right_indicators:
   480   000001                     ??_toggle_tricolour_LED:
   481   000001                     ??_I2C_2_Master_Idle:
   482   000001                     ?_max_RGB:
   483                           	callstack 0
   484   000001                     ?_min_RGB:
   485                           	callstack 0
   486   000001                     ?___wmul:
   487                           	callstack 0
   488   000001                     ?___lmul:
   489                           	callstack 0
   490   000001                     ?___lldiv:
   491                           	callstack 0
   492   000001                     ?___xxtofl:
   493                           	callstack 0
   494   000001                     max_RGB@p:
   495                           	callstack 0
   496   000001                     min_RGB@p:
   497                           	callstack 0
   498   000001                     colour_to_key@p1:
   499                           	callstack 0
   500   000001                     read_timer@tH:
   501                           	callstack 0
   502   000001                     write_timer@tL:
   503                           	callstack 0
   504   000001                     read_trail@tH:
   505                           	callstack 0
   506   000001                     write_trail@tL:
   507                           	callstack 0
   508   000001                     initDCmotorsPWM@PWMperiod:
   509                           	callstack 0
   510   000001                     ___wmul@multiplier:
   511                           	callstack 0
   512   000001                     ___lmul@multiplier:
   513                           	callstack 0
   514   000001                     ___lldiv@dividend:
   515                           	callstack 0
   516   000001                     ___xxtofl@val:
   517                           	callstack 0
   518                           
   519                           ; 4 bytes @ 0x0
   520   000001                     	ds	1
   521   000002                     ??_I2C_2_Master_Read:
   522   000002                     colour_to_key@p2:
   523                           	callstack 0
   524   000002                     I2C_2_Master_Write@data_byte:
   525                           	callstack 0
   526   000002                     read_timer@tL:
   527                           	callstack 0
   528   000002                     write_timer@tH:
   529                           	callstack 0
   530   000002                     read_trail@tL:
   531                           	callstack 0
   532   000002                     write_trail@man:
   533                           	callstack 0
   534                           
   535                           ; 1 bytes @ 0x1
   536   000002                     	ds	1
   537   000003                     color_writetoaddr@value:
   538                           	callstack 0
   539   000003                     I2C_2_Master_Read@ack:
   540                           	callstack 0
   541   000003                     read_trail@man:
   542                           	callstack 0
   543   000003                     write_trail@tH:
   544                           	callstack 0
   545   000003                     ___wmul@multiplicand:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x2
   549   000003                     	ds	1
   550   000004                     color_writetoaddr@address:
   551                           	callstack 0
   552   000004                     I2C_2_Master_Read@tmp:
   553                           	callstack 0
   554                           
   555                           ; 1 bytes @ 0x3
   556   000004                     	ds	1
   557   000005                     ??_color_click_init:
   558   000005                     ??___xxtofl:
   559   000005                     ?_color_read_Red:
   560                           	callstack 0
   561   000005                     ?_color_read_Green:
   562                           	callstack 0
   563   000005                     ?_color_read_Blue:
   564                           	callstack 0
   565   000005                     ?_color_read_Clear:
   566                           	callstack 0
   567   000005                     colour_to_key@key:
   568                           	callstack 0
   569   000005                     max_RGB@max_val:
   570                           	callstack 0
   571   000005                     min_RGB@min_val:
   572                           	callstack 0
   573   000005                     ___wmul@product:
   574                           	callstack 0
   575   000005                     ___lmul@multiplicand:
   576                           	callstack 0
   577   000005                     ___lldiv@divisor:
   578                           	callstack 0
   579                           
   580                           ; 4 bytes @ 0x4
   581   000005                     	ds	2
   582   000007                     ??_color_read_Red:
   583   000007                     ??_color_read_Green:
   584   000007                     ??_color_read_Blue:
   585   000007                     ??_color_read_Clear:
   586   000007                     ?___lwdiv:
   587                           	callstack 0
   588   000007                     ___lwdiv@dividend:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x6
   592   000007                     	ds	2
   593   000009                     ___xxtofl@sign:
   594                           	callstack 0
   595   000009                     ___lwdiv@divisor:
   596                           	callstack 0
   597   000009                     ___lmul@product:
   598                           	callstack 0
   599   000009                     ___lldiv@quotient:
   600                           	callstack 0
   601                           
   602                           ; 4 bytes @ 0x8
   603   000009                     	ds	1
   604   00000A                     ___xxtofl@exp:
   605                           	callstack 0
   606   00000A                     color_read_Red@tmp:
   607                           	callstack 0
   608   00000A                     color_read_Green@tmp:
   609                           	callstack 0
   610   00000A                     color_read_Blue@tmp:
   611                           	callstack 0
   612   00000A                     color_read_Clear@tmp:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x9
   616   00000A                     	ds	1
   617   00000B                     ___lwdiv@quotient:
   618                           	callstack 0
   619   00000B                     ___xxtofl@arg:
   620                           	callstack 0
   621                           
   622                           ; 4 bytes @ 0xA
   623   00000B                     	ds	1
   624   00000C                     read_RGBC@p:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0xB
   628   00000C                     	ds	1
   629   00000D                     wait_for_wall@p:
   630                           	callstack 0
   631   00000D                     ___lldiv@counter:
   632                           	callstack 0
   633   00000D                     ___lwdiv@counter:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0xC
   637   00000D                     	ds	1
   638   00000E                     average_RGBC@p:
   639                           	callstack 0
   640   00000E                     wait_for_wall@loss:
   641                           	callstack 0
   642   00000E                     convert_HSV@p1:
   643                           	callstack 0
   644   00000E                     setMotorPWM@m:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0xD
   648   00000E                     	ds	1
   649   00000F                     ??_average_RGBC:
   650   00000F                     ??_setMotorPWM:
   651   00000F                     ?___flmul:
   652                           	callstack 0
   653   00000F                     convert_HSV@p2:
   654                           	callstack 0
   655   00000F                     ___flmul@b:
   656                           	callstack 0
   657                           
   658                           ; 4 bytes @ 0xE
   659   00000F                     	ds	1
   660   000010                     ??_convert_HSV:
   661                           
   662                           ; 1 bytes @ 0xF
   663   000010                     	ds	1
   664   000011                     average_RGBC@i:
   665                           	callstack 0
   666   000011                     setMotorPWM@posDuty:
   667                           	callstack 0
   668                           
   669                           ; 1 bytes @ 0x10
   670   000011                     	ds	1
   671   000012                     setMotorPWM@negDuty:
   672                           	callstack 0
   673   000012                     average_RGBC@temp_R:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x11
   677   000012                     	ds	1
   678   000013                     stop@mL:
   679                           	callstack 0
   680   000013                     turnLeft@mL:
   681                           	callstack 0
   682   000013                     turnRight@mL:
   683                           	callstack 0
   684   000013                     fullSpeedAhead@mL:
   685                           	callstack 0
   686   000013                     fullSpeedReverse@mL:
   687                           	callstack 0
   688   000013                     ___flmul@a:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x12
   692   000013                     	ds	1
   693   000014                     stop@mR:
   694                           	callstack 0
   695   000014                     turnLeft@mR:
   696                           	callstack 0
   697   000014                     turnRight@mR:
   698                           	callstack 0
   699   000014                     fullSpeedAhead@mR:
   700                           	callstack 0
   701   000014                     fullSpeedReverse@mR:
   702                           	callstack 0
   703                           
   704                           ; 1 bytes @ 0x13
   705   000014                     	ds	1
   706   000015                     ??_stop:
   707   000015                     ??_turnLeft:
   708   000015                     ??_turnRight:
   709   000015                     ??_fullSpeedAhead:
   710   000015                     ??_fullSpeedReverse:
   711                           
   712                           ; 1 bytes @ 0x14
   713   000015                     	ds	1
   714   000016                     turnLeft@leftGear:
   715                           	callstack 0
   716   000016                     turnRight@leftGear:
   717                           	callstack 0
   718   000016                     fullSpeedAhead@leftGear:
   719                           	callstack 0
   720   000016                     fullSpeedReverse@leftGear:
   721                           	callstack 0
   722   000016                     average_RGBC@temp_G:
   723                           	callstack 0
   724                           
   725                           ; 4 bytes @ 0x15
   726   000016                     	ds	1
   727   000017                     ??___flmul:
   728   000017                     turnLeft@rightGear:
   729                           	callstack 0
   730   000017                     turnRight@rightGear:
   731                           	callstack 0
   732   000017                     fullSpeedAhead@rightGear:
   733                           	callstack 0
   734   000017                     fullSpeedReverse@rightGear:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x16
   738   000017                     	ds	1
   739   000018                     turnLeft90@mL:
   740                           	callstack 0
   741   000018                     turnRight90@mL:
   742                           	callstack 0
   743   000018                     turnLeft135@mL:
   744                           	callstack 0
   745   000018                     turnRight135@mL:
   746                           	callstack 0
   747   000018                     UTurn@mL:
   748                           	callstack 0
   749   000018                     headbuttReverse@mL:
   750                           	callstack 0
   751   000018                     squareReverse@mL:
   752                           	callstack 0
   753   000018                     convert_HSV@sat_scale:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x17
   757   000018                     	ds	1
   758   000019                     turnLeft90@mR:
   759                           	callstack 0
   760   000019                     turnRight90@mR:
   761                           	callstack 0
   762   000019                     turnLeft135@mR:
   763                           	callstack 0
   764   000019                     turnRight135@mR:
   765                           	callstack 0
   766   000019                     UTurn@mR:
   767                           	callstack 0
   768   000019                     headbuttReverse@mR:
   769                           	callstack 0
   770   000019                     squareReverse@mR:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0x18
   774   000019                     	ds	1
   775   00001A                     ??_turnLeft90:
   776   00001A                     ??_turnRight90:
   777   00001A                     ??_turnLeft135:
   778   00001A                     ??_turnRight135:
   779   00001A                     ??_UTurn:
   780   00001A                     ??_headbuttReverse:
   781   00001A                     ??_squareReverse:
   782   00001A                     convert_HSV@m:
   783                           	callstack 0
   784   00001A                     average_RGBC@temp_B:
   785                           	callstack 0
   786                           
   787                           ; 4 bytes @ 0x19
   788   00001A                     	ds	1
   789   00001B                     ___flmul@sign:
   790                           	callstack 0
   791                           
   792                           ; 1 bytes @ 0x1A
   793   00001B                     	ds	1
   794   00001C                     card_red@mL:
   795                           	callstack 0
   796   00001C                     card_green@mL:
   797                           	callstack 0
   798   00001C                     card_blue@mL:
   799                           	callstack 0
   800   00001C                     card_yellow@mL:
   801                           	callstack 0
   802   00001C                     card_pink@mL:
   803                           	callstack 0
   804   00001C                     card_orange@mL:
   805                           	callstack 0
   806   00001C                     card_cyan@mL:
   807                           	callstack 0
   808   00001C                     card_white@mL:
   809                           	callstack 0
   810   00001C                     convert_HSV@sat:
   811                           	callstack 0
   812   00001C                     ___flmul@grs:
   813                           	callstack 0
   814                           
   815                           ; 4 bytes @ 0x1B
   816   00001C                     	ds	1
   817   00001D                     card_red@mR:
   818                           	callstack 0
   819   00001D                     card_green@mR:
   820                           	callstack 0
   821   00001D                     card_blue@mR:
   822                           	callstack 0
   823   00001D                     card_yellow@mR:
   824                           	callstack 0
   825   00001D                     card_pink@mR:
   826                           	callstack 0
   827   00001D                     card_orange@mR:
   828                           	callstack 0
   829   00001D                     card_cyan@mR:
   830                           	callstack 0
   831   00001D                     card_white@mR:
   832                           	callstack 0
   833                           
   834                           ; 1 bytes @ 0x1C
   835   00001D                     	ds	1
   836   00001E                     card_red@backtrack:
   837                           	callstack 0
   838   00001E                     card_green@backtrack:
   839                           	callstack 0
   840   00001E                     card_blue@backtrack:
   841                           	callstack 0
   842   00001E                     card_yellow@backtrack:
   843                           	callstack 0
   844   00001E                     card_pink@backtrack:
   845                           	callstack 0
   846   00001E                     card_orange@backtrack:
   847                           	callstack 0
   848   00001E                     card_cyan@backtrack:
   849                           	callstack 0
   850   00001E                     convert_HSV@hue:
   851                           	callstack 0
   852   00001E                     average_RGBC@temp_C:
   853                           	callstack 0
   854                           
   855                           ; 4 bytes @ 0x1D
   856   00001E                     	ds	1
   857   00001F                     ??_card_red:
   858   00001F                     ??_card_green:
   859   00001F                     ??_card_blue:
   860   00001F                     ??_card_yellow:
   861   00001F                     ??_card_pink:
   862   00001F                     ??_card_orange:
   863   00001F                     ??_card_cyan:
   864                           
   865                           ; 1 bytes @ 0x1E
   866   00001F                     	ds	1
   867   000020                     ___flmul@aexp:
   868                           	callstack 0
   869   000020                     convert_HSV@temp_615:
   870                           	callstack 0
   871                           
   872                           ; 4 bytes @ 0x1F
   873   000020                     	ds	1
   874   000021                     pick_card@mL:
   875                           	callstack 0
   876   000021                     ___flmul@bexp:
   877                           	callstack 0
   878                           
   879                           ; 1 bytes @ 0x20
   880   000021                     	ds	1
   881   000022                     pick_card@mR:
   882                           	callstack 0
   883   000022                     ___flmul@prod:
   884                           	callstack 0
   885                           
   886                           ; 4 bytes @ 0x21
   887   000022                     	ds	1
   888   000023                     pick_card@backtrack:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x22
   892   000023                     	ds	1
   893   000024                     pick_card@key:
   894                           	callstack 0
   895   000024                     convert_HSV@temp:
   896                           	callstack 0
   897                           
   898                           ; 4 bytes @ 0x23
   899   000024                     	ds	1
   900   000025                     ??_pick_card:
   901                           
   902                           ; 1 bytes @ 0x24
   903   000025                     	ds	1
   904   000026                     ___flmul@temp:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x25
   908   000026                     	ds	1
   909   000027                     return_to_sender@mL:
   910                           	callstack 0
   911                           
   912                           ; 1 bytes @ 0x26
   913   000027                     	ds	1
   914   000028                     ?___fltol:
   915                           	callstack 0
   916   000028                     return_to_sender@mR:
   917                           	callstack 0
   918   000028                     convert_HSV@temp_611:
   919                           	callstack 0
   920   000028                     ___fltol@f1:
   921                           	callstack 0
   922                           
   923                           ; 4 bytes @ 0x27
   924   000028                     	ds	1
   925   000029                     return_to_sender@timerH:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0x28
   929   000029                     	ds	1
   930   00002A                     return_to_sender@timerL:
   931                           	callstack 0
   932                           
   933                           ; 1 bytes @ 0x29
   934   00002A                     	ds	1
   935   00002B                     return_to_sender@mann:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x2A
   939   00002B                     	ds	1
   940   00002C                     ??___fltol:
   941   00002C                     convert_HSV@temp_612:
   942                           	callstack 0
   943                           
   944                           ; 4 bytes @ 0x2B
   945   00002C                     	ds	4
   946   000030                     ___fltol@sign1:
   947                           	callstack 0
   948   000030                     convert_HSV@temp_613:
   949                           	callstack 0
   950                           
   951                           ; 4 bytes @ 0x2F
   952   000030                     	ds	1
   953   000031                     ___fltol@exp1:
   954                           	callstack 0
   955                           
   956                           ; 1 bytes @ 0x30
   957   000031                     	ds	1
   958   000032                     scale_RGB@p:
   959                           	callstack 0
   960                           
   961                           ; 1 bytes @ 0x31
   962   000032                     	ds	1
   963   000033                     ??_scale_RGB:
   964                           
   965                           ; 1 bytes @ 0x32
   966   000033                     	ds	1
   967   000034                     convert_HSV@temp_614:
   968                           	callstack 0
   969                           
   970                           ; 4 bytes @ 0x33
   971   000034                     	ds	4
   972   000038                     convert_HSV@temp_610:
   973                           	callstack 0
   974                           
   975                           ; 4 bytes @ 0x37
   976   000038                     	ds	4
   977   00003C                     convert_HSV@hue_scale:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x3B
   981   00003C                     	ds	2
   982   00003E                     convert_HSV@M:
   983                           	callstack 0
   984                           
   985                           ; 2 bytes @ 0x3D
   986   00003E                     	ds	2
   987   000040                     convert_HSV@C:
   988                           	callstack 0
   989                           
   990                           ; 2 bytes @ 0x3F
   991   000040                     	ds	2
   992   000042                     forward_navigation@mL:
   993                           	callstack 0
   994                           
   995                           ; 1 bytes @ 0x41
   996   000042                     	ds	1
   997   000043                     forward_navigation@mR:
   998                           	callstack 0
   999                           
  1000                           ; 1 bytes @ 0x42
  1001   000043                     	ds	1
  1002   000044                     forward_navigation@p1:
  1003                           	callstack 0
  1004                           
  1005                           ; 1 bytes @ 0x43
  1006   000044                     	ds	1
  1007   000045                     forward_navigation@p2:
  1008                           	callstack 0
  1009                           
  1010                           ; 1 bytes @ 0x44
  1011   000045                     	ds	1
  1012   000046                     ??_forward_navigation:
  1013                           
  1014                           ; 1 bytes @ 0x45
  1015   000046                     	ds	2
  1016   000048                     forward_navigation@timerH:
  1017                           	callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x47
  1020   000048                     	ds	1
  1021   000049                     forward_navigation@timerL:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x48
  1025   000049                     	ds	1
  1026   00004A                     forward_navigation@mann:
  1027                           	callstack 0
  1028                           
  1029                           ; 1 bytes @ 0x49
  1030   00004A                     	ds	1
  1031   00004B                     ??_main:
  1032                           
  1033                           ; 1 bytes @ 0x4A
  1034   00004B                     	ds	2
  1035                           
  1036 ;;
  1037 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1038 ;;
  1039 ;; *************** function _main *****************
  1040 ;; Defined at:
  1041 ;;		line 31 in file "main.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;  motorR          9   15[BANK0 ] struct DC_motor
  1046 ;;  motorL          9    6[BANK0 ] struct DC_motor
  1047 ;;  RGBC_colour     8   24[BANK0 ] struct RGBC_val
  1048 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
  1049 ;;  PWMcycle        2    0        unsigned int 
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1060 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1062 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1063 ;;Total ram usage:       34 bytes
  1064 ;; Hardware stack levels required when called: 8
  1065 ;; This function calls:
  1066 ;;		_Timer0_init
  1067 ;;		_buggy_lights_init
  1068 ;;		_color_click_init
  1069 ;;		_forward_navigation
  1070 ;;		_initDCmotorsPWM
  1071 ;;		_initUSART4
  1072 ;;		_return_to_sender
  1073 ;; This function is called by:
  1074 ;;		Startup code after reset
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text0
  1079   002414                     __ptext0:
  1080                           	callstack 0
  1081   002414                     _main:
  1082                           	callstack 23
  1083   002414                     
  1084                           ;main.c: 32:     struct RGBC_val RGBC_colour;;main.c: 33:         RGBC_colour.R = 0;
  1085   002414  0E00               	movlw	0
  1086   002416  0100               	movlb	0	; () banked
  1087   002418  6FB5               	movwf	(main@RGBC_colour+1)& (0+255),b
  1088   00241A  0E00               	movlw	0
  1089   00241C  6FB4               	movwf	main@RGBC_colour& (0+255),b
  1090                           
  1091                           ;main.c: 34:         RGBC_colour.G = 0;
  1092   00241E  0E00               	movlw	0
  1093   002420  6FB7               	movwf	(main@RGBC_colour+3)& (0+255),b
  1094   002422  0E00               	movlw	0
  1095   002424  6FB6               	movwf	(main@RGBC_colour+2)& (0+255),b
  1096                           
  1097                           ;main.c: 35:         RGBC_colour.B = 0;
  1098   002426  0E00               	movlw	0
  1099   002428  6FB9               	movwf	(main@RGBC_colour+5)& (0+255),b
  1100   00242A  0E00               	movlw	0
  1101   00242C  6FB8               	movwf	(main@RGBC_colour+4)& (0+255),b
  1102                           
  1103                           ;main.c: 36:         RGBC_colour.C = 0;
  1104   00242E  0E00               	movlw	0
  1105   002430  6FBB               	movwf	(main@RGBC_colour+7)& (0+255),b
  1106   002432  0E00               	movlw	0
  1107   002434  6FBA               	movwf	(main@RGBC_colour+6)& (0+255),b
  1108                           
  1109                           ;main.c: 38:     struct HSV_val HSV_colour;;main.c: 39:         HSV_colour.H = 0;
  1110   002436  0E00               	movlw	0
  1111   002438  6F9D               	movwf	(main@HSV_colour+1)& (0+255),b
  1112   00243A  0E00               	movlw	0
  1113   00243C  6F9C               	movwf	main@HSV_colour& (0+255),b
  1114                           
  1115                           ;main.c: 40:         HSV_colour.S = 0;
  1116   00243E  0E00               	movlw	0
  1117   002440  6F9F               	movwf	(main@HSV_colour+3)& (0+255),b
  1118   002442  0E00               	movlw	0
  1119   002444  6F9E               	movwf	(main@HSV_colour+2)& (0+255),b
  1120                           
  1121                           ;main.c: 41:         HSV_colour.V = 0;
  1122   002446  0E00               	movlw	0
  1123   002448  6FA1               	movwf	(main@HSV_colour+5)& (0+255),b
  1124   00244A  0E00               	movlw	0
  1125   00244C  6FA0               	movwf	(main@HSV_colour+4)& (0+255),b
  1126                           
  1127                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 45:         motorL.power = 0;
  1128   00244E  0E00               	movlw	0
  1129   002450  6FA2               	movwf	main@motorL& (0+255),b
  1130                           
  1131                           ;main.c: 46:         motorL.direction = 1;
  1132   002452  0E01               	movlw	1
  1133   002454  6FA3               	movwf	(main@motorL+1)& (0+255),b
  1134                           
  1135                           ;main.c: 47:         motorL.brakemode = 1;
  1136   002456  0E01               	movlw	1
  1137   002458  6FA4               	movwf	(main@motorL+2)& (0+255),b
  1138   00245A                     
  1139                           ; BSR set to: 0
  1140                           ;main.c: 48:         motorL.PWMperiod = PWMcycle;
  1141   00245A  0E00               	movlw	0
  1142   00245C  6FA6               	movwf	(main@motorL+4)& (0+255),b
  1143   00245E  0E63               	movlw	99
  1144   002460  6FA5               	movwf	(main@motorL+3)& (0+255),b
  1145   002462                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 49:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1148   002462  0EAA               	movlw	170
  1149   002464  6FA7               	movwf	(main@motorL+5)& (0+255),b
  1150   002466  0E0F               	movlw	15
  1151   002468  6FA8               	movwf	(main@motorL+6)& (0+255),b
  1152   00246A                     
  1153                           ; BSR set to: 0
  1154                           ;main.c: 50:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1155   00246A  0EA6               	movlw	166
  1156   00246C  6FA9               	movwf	(main@motorL+7)& (0+255),b
  1157   00246E  0E0F               	movlw	15
  1158   002470  6FAA               	movwf	(main@motorL+8)& (0+255),b
  1159                           
  1160                           ;main.c: 51:         motorR.power = 0;
  1161   002472  0E00               	movlw	0
  1162   002474  6FAB               	movwf	main@motorR& (0+255),b
  1163                           
  1164                           ;main.c: 52:         motorR.direction = 1;
  1165   002476  0E01               	movlw	1
  1166   002478  6FAC               	movwf	(main@motorR+1)& (0+255),b
  1167                           
  1168                           ;main.c: 53:         motorR.brakemode = 1;
  1169   00247A  0E01               	movlw	1
  1170   00247C  6FAD               	movwf	(main@motorR+2)& (0+255),b
  1171   00247E                     
  1172                           ; BSR set to: 0
  1173                           ;main.c: 54:         motorR.PWMperiod = PWMcycle;
  1174   00247E  0E00               	movlw	0
  1175   002480  6FAF               	movwf	(main@motorR+4)& (0+255),b
  1176   002482  0E63               	movlw	99
  1177   002484  6FAE               	movwf	(main@motorR+3)& (0+255),b
  1178   002486                     
  1179                           ; BSR set to: 0
  1180                           ;main.c: 55:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1181   002486  0E25               	movlw	37
  1182   002488  6FB0               	movwf	(main@motorR+5)& (0+255),b
  1183   00248A  0E0F               	movlw	15
  1184   00248C  6FB1               	movwf	(main@motorR+6)& (0+255),b
  1185   00248E                     
  1186                           ; BSR set to: 0
  1187                           ;main.c: 56:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1188   00248E  0E21               	movlw	33
  1189   002490  6FB2               	movwf	(main@motorR+7)& (0+255),b
  1190   002492  0E0F               	movlw	15
  1191   002494  6FB3               	movwf	(main@motorR+8)& (0+255),b
  1192   002496                     
  1193                           ; BSR set to: 0
  1194                           ;main.c: 59:     initDCmotorsPWM(PWMcycle);
  1195   002496  0E00               	movlw	0
  1196   002498  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1197   00249A  0E63               	movlw	99
  1198   00249C  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1199   00249E  EC8D  F016         	call	_initDCmotorsPWM	;wreg free
  1200                           
  1201                           ;main.c: 60:     buggy_lights_init();
  1202   0024A2  ECCB  F01B         	call	_buggy_lights_init	;wreg free
  1203   0024A6                     
  1204                           ;main.c: 61:     color_click_init();
  1205   0024A6  ECB1  F01B         	call	_color_click_init	;wreg free
  1206   0024AA                     
  1207                           ;main.c: 62:     initUSART4();
  1208   0024AA  ECAB  F01C         	call	_initUSART4	;wreg free
  1209   0024AE                     
  1210                           ;main.c: 63:     Timer0_init();
  1211   0024AE  EC6A  F01C         	call	_Timer0_init	;wreg free
  1212   0024B2                     
  1213                           ;main.c: 67:         TRISDbits.TRISD7 = 0;
  1214   0024B2  9E84               	bcf	132,7,c	;volatile
  1215   0024B4                     
  1216                           ;main.c: 68:         TRISHbits.TRISH3 = 0;
  1217   0024B4  9688               	bcf	136,3,c	;volatile
  1218   0024B6                     
  1219                           ;main.c: 70:         LATDbits.LATD7 = 0;
  1220   0024B6  9E7C               	bcf	124,7,c	;volatile
  1221   0024B8                     
  1222                           ;main.c: 71:         LATHbits.LATH3 = 0;
  1223   0024B8  9680               	bcf	128,3,c	;volatile
  1224   0024BA                     
  1225                           ;main.c: 75:         TRISFbits.TRISF2 = 1;
  1226   0024BA  8486               	bsf	134,2,c	;volatile
  1227   0024BC                     
  1228                           ;main.c: 76:         TRISFbits.TRISF3 = 1;
  1229   0024BC  8686               	bsf	134,3,c	;volatile
  1230   0024BE                     
  1231                           ;main.c: 78:         ANSELFbits.ANSELF2 = 0;
  1232   0024BE  010E               	movlb	14	; () banked
  1233   0024C0  95B4               	bcf	180,2,b	;volatile
  1234   0024C2                     
  1235                           ; BSR set to: 14
  1236                           ;main.c: 79:         ANSELFbits.ANSELF3 = 0;
  1237   0024C2  97B4               	bcf	180,3,b	;volatile
  1238   0024C4                     l436:
  1239   0024C4  B68E               	btfsc	142,3,c	;volatile
  1240   0024C6  EF67  F012         	goto	u3251
  1241   0024CA  EF69  F012         	goto	u3250
  1242   0024CE                     u3251:
  1243   0024CE  EF62  F012         	goto	l436
  1244   0024D2                     u3250:
  1245   0024D2                     
  1246                           ;main.c: 85:     LATDbits.LATD7 = !LATDbits.LATD7;
  1247   0024D2  AE7C               	btfss	124,7,c	;volatile
  1248   0024D4  EF6E  F012         	goto	u3261
  1249   0024D8  EF72  F012         	goto	u3260
  1250   0024DC                     u3261:
  1251   0024DC  6A4B               	clrf	??_main^0,c
  1252   0024DE  2A4B               	incf	??_main^0,f,c
  1253   0024E0  EF73  F012         	goto	u3278
  1254   0024E4                     u3260:
  1255   0024E4  6A4B               	clrf	??_main^0,c
  1256   0024E6                     u3278:
  1257   0024E6  324B               	rrcf	??_main^0,f,c
  1258   0024E8  324B               	rrcf	??_main^0,f,c
  1259   0024EA  507C               	movf	124,w,c	;volatile
  1260   0024EC  184B               	xorwf	??_main^0,w,c
  1261   0024EE  0B7F               	andlw	-129
  1262   0024F0  184B               	xorwf	??_main^0,w,c
  1263   0024F2  6E7C               	movwf	124,c	;volatile
  1264                           
  1265                           ;main.c: 86:     LATHbits.LATH3 = !LATHbits.LATH3;
  1266   0024F4  A680               	btfss	128,3,c	;volatile
  1267   0024F6  EF7F  F012         	goto	u3281
  1268   0024FA  EF83  F012         	goto	u3280
  1269   0024FE                     u3281:
  1270   0024FE  6A4B               	clrf	??_main^0,c
  1271   002500  2A4B               	incf	??_main^0,f,c
  1272   002502  EF84  F012         	goto	u3298
  1273   002506                     u3280:
  1274   002506  6A4B               	clrf	??_main^0,c
  1275   002508                     u3298:
  1276   002508  464B               	rlncf	??_main^0,f,c
  1277   00250A  464B               	rlncf	??_main^0,f,c
  1278   00250C  464B               	rlncf	??_main^0,f,c
  1279   00250E  5080               	movf	128,w,c	;volatile
  1280   002510  184B               	xorwf	??_main^0,w,c
  1281   002512  0BF7               	andlw	-9
  1282   002514  184B               	xorwf	??_main^0,w,c
  1283   002516  6E80               	movwf	128,c	;volatile
  1284   002518                     
  1285                           ;main.c: 89:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1286   002518  0E52               	movlw	82
  1287   00251A  6E4C               	movwf	(??_main+1)^0,c
  1288   00251C  0E2B               	movlw	43
  1289   00251E  6E4B               	movwf	??_main^0,c
  1290   002520  0E00               	movlw	0
  1291   002522                     u3307:
  1292   002522  2EE8               	decfsz	wreg,f,c
  1293   002524  D7FE               	bra	u3307
  1294   002526  2E4B               	decfsz	??_main^0,f,c
  1295   002528  D7FC               	bra	u3307
  1296   00252A  2E4C               	decfsz	(??_main+1)^0,f,c
  1297   00252C  D7FA               	bra	u3307
  1298   00252E  D000               	nop2	
  1299   002530                     
  1300                           ;main.c: 92:     forward_navigation(&motorL, &motorR, &HSV_colour, &RGBC_colour);
  1301   002530  0EA2               	movlw	low main@motorL
  1302   002532  6E42               	movwf	forward_navigation@mL^0,c
  1303   002534  0EAB               	movlw	low main@motorR
  1304   002536  6E43               	movwf	forward_navigation@mR^0,c
  1305   002538  0E9C               	movlw	low main@HSV_colour
  1306   00253A  6E44               	movwf	forward_navigation@p1^0,c
  1307   00253C  0EB4               	movlw	low main@RGBC_colour
  1308   00253E  6E45               	movwf	forward_navigation@p2^0,c
  1309   002540  EC92  F010         	call	_forward_navigation	;wreg free
  1310   002544                     
  1311                           ;main.c: 93:     return_to_sender(&motorL, &motorR);
  1312   002544  0EA2               	movlw	low main@motorL
  1313   002546  6E27               	movwf	return_to_sender@mL^0,c
  1314   002548  0EAB               	movlw	low main@motorR
  1315   00254A  6E28               	movwf	return_to_sender@mR^0,c
  1316   00254C  EC3C  F016         	call	_return_to_sender	;wreg free
  1317   002550  EF1E  F000         	goto	start
  1318   002554                     __end_of_main:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _return_to_sender *****************
  1322 ;; Defined at:
  1323 ;;		line 206 in file "timers.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  1326 ;;		 -> main@motorL(9), 
  1327 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  1328 ;;		 -> main@motorR(9), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  mann            1   42[COMRAM] unsigned char 
  1331 ;;  timerL          1   41[COMRAM] unsigned char 
  1332 ;;  timerH          1   40[COMRAM] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1343 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1345 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1346 ;;Total ram usage:        5 bytes
  1347 ;; Hardware stack levels used: 1
  1348 ;; Hardware stack levels required when called: 7
  1349 ;; This function calls:
  1350 ;;		_fullSpeedAhead
  1351 ;;		_pick_card
  1352 ;;		_read_trail
  1353 ;;		_start_timer
  1354 ;;		_stop
  1355 ;;		_stop_timer
  1356 ;;		_toggle_main_beam
  1357 ;;		_write_timer
  1358 ;; This function is called by:
  1359 ;;		_main
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text1
  1364   002C78                     __ptext1:
  1365                           	callstack 0
  1366   002C78                     _return_to_sender:
  1367                           	callstack 23
  1368   002C78                     
  1369                           ;timers.c: 206: void return_to_sender(DC_motor *mL, DC_motor *mR);timers.c: 207: {;timer
      +                          s.c: 209:     while (manoeuvre_count != 0) {
  1370   002C78  EF84  F016         	goto	l3947
  1371   002C7C                     l3921:
  1372                           
  1373                           ;timers.c: 212:         unsigned char timerH = 0;
  1374   002C7C  0E00               	movlw	0
  1375   002C7E  6E29               	movwf	return_to_sender@timerH^0,c
  1376                           
  1377                           ;timers.c: 213:         unsigned char timerL = 0;
  1378   002C80  0E00               	movlw	0
  1379   002C82  6E2A               	movwf	return_to_sender@timerL^0,c
  1380                           
  1381                           ;timers.c: 214:         unsigned char mann = 0;
  1382   002C84  0E00               	movlw	0
  1383   002C86  6E2B               	movwf	return_to_sender@mann^0,c
  1384   002C88                     
  1385                           ;timers.c: 217:         read_trail(&timerH, &timerL, &mann);
  1386   002C88  0E29               	movlw	low return_to_sender@timerH
  1387   002C8A  6E01               	movwf	read_trail@tH^0,c
  1388   002C8C  0E2A               	movlw	low return_to_sender@timerL
  1389   002C8E  6E02               	movwf	read_trail@tL^0,c
  1390   002C90  0E2B               	movlw	low return_to_sender@mann
  1391   002C92  6E03               	movwf	read_trail@man^0,c
  1392   002C94  ECE9  F01A         	call	_read_trail	;wreg free
  1393   002C98                     
  1394                           ;timers.c: 220:         if (mann != 8) {
  1395   002C98  0E08               	movlw	8
  1396   002C9A  182B               	xorwf	return_to_sender@mann^0,w,c
  1397   002C9C  B4D8               	btfsc	status,2,c
  1398   002C9E  EF53  F016         	goto	u3221
  1399   002CA2  EF55  F016         	goto	u3220
  1400   002CA6                     u3221:
  1401   002CA6  EF5F  F016         	goto	l3929
  1402   002CAA                     u3220:
  1403   002CAA                     
  1404                           ;timers.c: 221:             pick_card(mL, mR, returning, mann);
  1405   002CAA  C027  F021         	movff	return_to_sender@mL,pick_card@mL
  1406   002CAE  C028  F022         	movff	return_to_sender@mR,pick_card@mR
  1407   002CB2  C05D  F023         	movff	_returning,pick_card@backtrack
  1408   002CB6  C02B  F024         	movff	return_to_sender@mann,pick_card@key
  1409   002CBA  EC2D  F013         	call	_pick_card	;wreg free
  1410   002CBE                     l3929:
  1411                           
  1412                           ;timers.c: 225:         toggle_main_beam();
  1413   002CBE  EC20  F01C         	call	_toggle_main_beam	;wreg free
  1414   002CC2                     
  1415                           ;timers.c: 228:         write_timer(0b11111111 - timerH, 0b11111111 - timerL);
  1416   002CC2  502A               	movf	return_to_sender@timerL^0,w,c
  1417   002CC4  0AFF               	xorlw	255
  1418   002CC6  6E01               	movwf	write_timer@tL^0,c
  1419   002CC8  5029               	movf	return_to_sender@timerH^0,w,c
  1420   002CCA  0AFF               	xorlw	255
  1421   002CCC  ECDF  F01C         	call	_write_timer
  1422   002CD0                     
  1423                           ;timers.c: 229:         start_timer();
  1424   002CD0  ECF6  F01C         	call	_start_timer	;wreg free
  1425   002CD4                     
  1426                           ;timers.c: 230:         fullSpeedAhead(mL, mR);
  1427   002CD4  C027  F013         	movff	return_to_sender@mL,fullSpeedAhead@mL
  1428   002CD8  C028  F014         	movff	return_to_sender@mR,fullSpeedAhead@mR
  1429   002CDC  EC7A  F014         	call	_fullSpeedAhead	;wreg free
  1430   002CE0                     l3937:
  1431   002CE0  505C               	movf	_return_flag^0,w,c
  1432   002CE2  B4D8               	btfsc	status,2,c
  1433   002CE4  EF76  F016         	goto	u3231
  1434   002CE8  EF78  F016         	goto	u3230
  1435   002CEC                     u3231:
  1436   002CEC  EF70  F016         	goto	l3937
  1437   002CF0                     u3230:
  1438   002CF0                     
  1439                           ;timers.c: 236:         stop(mL, mR);
  1440   002CF0  C027  F013         	movff	return_to_sender@mL,stop@mL
  1441   002CF4  C028  F014         	movff	return_to_sender@mR,stop@mR
  1442   002CF8  ECD5  F016         	call	_stop	;wreg free
  1443   002CFC                     
  1444                           ;timers.c: 237:         stop_timer();
  1445   002CFC  ECF4  F01C         	call	_stop_timer	;wreg free
  1446   002D00                     
  1447                           ;timers.c: 238:         return_flag = 0;
  1448   002D00  0E00               	movlw	0
  1449   002D02  6E5C               	movwf	_return_flag^0,c
  1450   002D04                     
  1451                           ;timers.c: 241:         toggle_main_beam();
  1452   002D04  EC20  F01C         	call	_toggle_main_beam	;wreg free
  1453   002D08                     l3947:
  1454                           
  1455                           ;timers.c: 209:     while (manoeuvre_count != 0) {
  1456   002D08  505A               	movf	_manoeuvre_count^0,w,c
  1457   002D0A  A4D8               	btfss	status,2,c
  1458   002D0C  EF8A  F016         	goto	u3241
  1459   002D10  EF8C  F016         	goto	u3240
  1460   002D14                     u3241:
  1461   002D14  EF3E  F016         	goto	l3921
  1462   002D18                     u3240:
  1463   002D18  0012               	return		;funcret
  1464   002D1A                     __end_of_return_to_sender:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _toggle_main_beam *****************
  1468 ;; Defined at:
  1469 ;;		line 66 in file "buggy_lights.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels used: 1
  1489 ;; Hardware stack levels required when called: 1
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_return_to_sender
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text2
  1498   003840                     __ptext2:
  1499                           	callstack 0
  1500   003840                     _toggle_main_beam:
  1501                           	callstack 28
  1502   003840                     
  1503                           ;buggy_lights.c: 69:     LATDbits.LATD3 = !LATDbits.LATD3;
  1504   003840  A67C               	btfss	124,3,c	;volatile
  1505   003842  EF25  F01C         	goto	u2461
  1506   003846  EF29  F01C         	goto	u2460
  1507   00384A                     u2461:
  1508   00384A  6A01               	clrf	??_toggle_main_beam^0,c
  1509   00384C  2A01               	incf	??_toggle_main_beam^0,f,c
  1510   00384E  EF2A  F01C         	goto	u2478
  1511   003852                     u2460:
  1512   003852  6A01               	clrf	??_toggle_main_beam^0,c
  1513   003854                     u2478:
  1514   003854  4601               	rlncf	??_toggle_main_beam^0,f,c
  1515   003856  4601               	rlncf	??_toggle_main_beam^0,f,c
  1516   003858  4601               	rlncf	??_toggle_main_beam^0,f,c
  1517   00385A  507C               	movf	124,w,c	;volatile
  1518   00385C  1801               	xorwf	??_toggle_main_beam^0,w,c
  1519   00385E  0BF7               	andlw	-9
  1520   003860  1801               	xorwf	??_toggle_main_beam^0,w,c
  1521   003862  6E7C               	movwf	124,c	;volatile
  1522   003864  0012               	return		;funcret
  1523   003866                     __end_of_toggle_main_beam:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _read_trail *****************
  1527 ;; Defined at:
  1528 ;;		line 81 in file "timers.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  tH              1    0[COMRAM] PTR unsigned char 
  1531 ;;		 -> return_to_sender@timerH(1), 
  1532 ;;  tL              1    1[COMRAM] PTR unsigned char 
  1533 ;;		 -> return_to_sender@timerL(1), 
  1534 ;;  man             1    2[COMRAM] PTR unsigned char 
  1535 ;;		 -> return_to_sender@mann(1), 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1547 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1550 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1551 ;;Total ram usage:        3 bytes
  1552 ;; Hardware stack levels used: 1
  1553 ;; Hardware stack levels required when called: 1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_return_to_sender
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text3
  1562   0035D2                     __ptext3:
  1563                           	callstack 0
  1564   0035D2                     _read_trail:
  1565                           	callstack 28
  1566   0035D2                     
  1567                           ;timers.c: 81: void read_trail(unsigned char *tH, unsigned char *tL, unsigned char *man)
      +                          ;timers.c: 82: {;timers.c: 83:     timer_high_pointer --;
  1568   0035D2  0651               	decf	_timer_high_pointer^0,f,c
  1569                           
  1570                           ;timers.c: 84:     timer_low_pointer --;
  1571   0035D4  0650               	decf	_timer_low_pointer^0,f,c
  1572                           
  1573                           ;timers.c: 85:     manoeuvre_pointer --;
  1574   0035D6  064F               	decf	_manoeuvre_pointer^0,f,c
  1575                           
  1576                           ;timers.c: 87:     manoeuvre_count --;
  1577   0035D8  065A               	decf	_manoeuvre_count^0,f,c
  1578   0035DA                     
  1579                           ;timers.c: 89:     *tH = *timer_high_pointer;
  1580   0035DA  5051               	movf	_timer_high_pointer^0,w,c
  1581   0035DC  6ED9               	movwf	fsr2l,c
  1582   0035DE  6ADA               	clrf	fsr2h,c
  1583   0035E0  5001               	movf	read_trail@tH^0,w,c
  1584   0035E2  6EE1               	movwf	fsr1l,c
  1585   0035E4  6AE2               	clrf	fsr1h,c
  1586   0035E6  CFDF FFE7          	movff	indf2,indf1
  1587   0035EA                     
  1588                           ;timers.c: 90:     *tL = *timer_low_pointer;
  1589   0035EA  5050               	movf	_timer_low_pointer^0,w,c
  1590   0035EC  6ED9               	movwf	fsr2l,c
  1591   0035EE  6ADA               	clrf	fsr2h,c
  1592   0035F0  5002               	movf	read_trail@tL^0,w,c
  1593   0035F2  6EE1               	movwf	fsr1l,c
  1594   0035F4  6AE2               	clrf	fsr1h,c
  1595   0035F6  CFDF FFE7          	movff	indf2,indf1
  1596   0035FA                     
  1597                           ;timers.c: 91:     *man = *manoeuvre_pointer;
  1598   0035FA  504F               	movf	_manoeuvre_pointer^0,w,c
  1599   0035FC  6ED9               	movwf	fsr2l,c
  1600   0035FE  6ADA               	clrf	fsr2h,c
  1601   003600  5003               	movf	read_trail@man^0,w,c
  1602   003602  6EE1               	movwf	fsr1l,c
  1603   003604  6AE2               	clrf	fsr1h,c
  1604   003606  CFDF FFE7          	movff	indf2,indf1
  1605   00360A  0012               	return		;funcret
  1606   00360C                     __end_of_read_trail:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _initUSART4 *****************
  1610 ;; Defined at:
  1611 ;;		line 8 in file "serial.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1629 ;;Total ram usage:        0 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text4
  1640   003956                     __ptext4:
  1641                           	callstack 0
  1642   003956                     _initUSART4:
  1643                           	callstack 29
  1644   003956                     
  1645                           ;serial.c: 9:     RC0PPS = 0x12;
  1646   003956  0E12               	movlw	18
  1647   003958  010E               	movlb	14	; () banked
  1648   00395A  6F62               	movwf	98,b	;volatile
  1649                           
  1650                           ;serial.c: 10:     RX4PPS = 0x11;
  1651   00395C  0E11               	movlw	17
  1652   00395E  6F15               	movwf	21,b	;volatile
  1653   003960                     
  1654                           ; BSR set to: 14
  1655                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1656   003960  97E9               	bcf	233,3,b	;volatile
  1657   003962                     
  1658                           ; BSR set to: 14
  1659                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1660   003962  95E8               	bcf	232,2,b	;volatile
  1661                           
  1662                           ;serial.c: 14:     SP4BRGL = 51;
  1663   003964  0E33               	movlw	51
  1664   003966  6FE5               	movwf	229,b	;volatile
  1665                           
  1666                           ;serial.c: 15:     SP4BRGH = 0;
  1667   003968  0E00               	movlw	0
  1668   00396A  6FE6               	movwf	230,b	;volatile
  1669   00396C                     
  1670                           ; BSR set to: 14
  1671                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1672   00396C  89E7               	bsf	231,4,b	;volatile
  1673   00396E                     
  1674                           ; BSR set to: 14
  1675                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1676   00396E  8BE8               	bsf	232,5,b	;volatile
  1677   003970                     
  1678                           ; BSR set to: 14
  1679                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1680   003970  8FE7               	bsf	231,7,b	;volatile
  1681   003972                     
  1682                           ; BSR set to: 14
  1683   003972  0012               	return		;funcret
  1684   003974                     __end_of_initUSART4:
  1685                           	callstack 0
  1686                           
  1687 ;; *************** function _initDCmotorsPWM *****************
  1688 ;; Defined at:
  1689 ;;		line 7 in file "dc_motor.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg, status,2
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1703 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1707 ;;Total ram usage:        2 bytes
  1708 ;; Hardware stack levels used: 1
  1709 ;; Hardware stack levels required when called: 1
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text5
  1718   002D1A                     __ptext5:
  1719                           	callstack 0
  1720   002D1A                     _initDCmotorsPWM:
  1721                           	callstack 29
  1722   002D1A                     
  1723                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
  1724   002D1A  9485               	bcf	133,2,c	;volatile
  1725                           
  1726                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1727   002D1C  9885               	bcf	133,4,c	;volatile
  1728                           
  1729                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
  1730   002D1E  9E83               	bcf	131,7,c	;volatile
  1731                           
  1732                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
  1733   002D20  9C87               	bcf	135,6,c	;volatile
  1734                           
  1735                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
  1736   002D22  947D               	bcf	125,2,c	;volatile
  1737                           
  1738                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
  1739   002D24  987D               	bcf	125,4,c	;volatile
  1740                           
  1741                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
  1742   002D26  9E7B               	bcf	123,7,c	;volatile
  1743                           
  1744                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
  1745   002D28  9C7F               	bcf	127,6,c	;volatile
  1746   002D2A                     
  1747                           ;dc_motor.c: 19:     RE2PPS=0x05;
  1748   002D2A  0E05               	movlw	5
  1749   002D2C  010E               	movlb	14	; () banked
  1750   002D2E  6F74               	movwf	116,b	;volatile
  1751                           
  1752                           ;dc_motor.c: 20:     RE4PPS=0x06;
  1753   002D30  0E06               	movlw	6
  1754   002D32  6F76               	movwf	118,b	;volatile
  1755                           
  1756                           ;dc_motor.c: 21:     RC7PPS=0x07;
  1757   002D34  0E07               	movlw	7
  1758   002D36  6F69               	movwf	105,b	;volatile
  1759                           
  1760                           ;dc_motor.c: 22:     RG6PPS=0x08;
  1761   002D38  0E08               	movlw	8
  1762   002D3A  6F88               	movwf	136,b	;volatile
  1763                           
  1764                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  1765   002D3C  50BD               	movf	189,w,c	;volatile
  1766   002D3E  0B8F               	andlw	-113
  1767   002D40  0940               	iorlw	64
  1768   002D42  6EBD               	movwf	189,c	;volatile
  1769                           
  1770                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  1771   002D44  0EE0               	movlw	-32
  1772   002D46  16BE               	andwf	190,f,c	;volatile
  1773                           
  1774                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  1775   002D48  50BF               	movf	191,w,c	;volatile
  1776   002D4A  0BF0               	andlw	-16
  1777   002D4C  0901               	iorlw	1
  1778   002D4E  6EBF               	movwf	191,c	;volatile
  1779   002D50                     
  1780                           ; BSR set to: 14
  1781                           ;dc_motor.c: 32:     T2PR=(unsigned char)PWMperiod;
  1782   002D50  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1783   002D54                     
  1784                           ; BSR set to: 14
  1785                           ;dc_motor.c: 33:     T2CONbits.ON=1;
  1786   002D54  8EBD               	bsf	189,7,c	;volatile
  1787                           
  1788                           ;dc_motor.c: 37:         CCPR1H=0;
  1789   002D56  0E00               	movlw	0
  1790   002D58  6EAA               	movwf	170,c	;volatile
  1791                           
  1792                           ;dc_motor.c: 38:         CCPR2H=0;
  1793   002D5A  0E00               	movlw	0
  1794   002D5C  6EA6               	movwf	166,c	;volatile
  1795                           
  1796                           ;dc_motor.c: 39:         CCPR3H=0;
  1797   002D5E  0E00               	movlw	0
  1798   002D60  010F               	movlb	15	; () banked
  1799   002D62  6F25               	movwf	37,b	;volatile
  1800                           
  1801                           ;dc_motor.c: 40:         CCPR4H=0;
  1802   002D64  0E00               	movlw	0
  1803   002D66  6F21               	movwf	33,b	;volatile
  1804                           
  1805                           ;dc_motor.c: 43:         CCPTMRS0bits.C1TSEL=0;
  1806   002D68  0EFC               	movlw	-4
  1807   002D6A  16AD               	andwf	173,f,c	;volatile
  1808                           
  1809                           ;dc_motor.c: 44:         CCPTMRS0bits.C2TSEL=0;
  1810   002D6C  0EF3               	movlw	-13
  1811   002D6E  16AD               	andwf	173,f,c	;volatile
  1812                           
  1813                           ;dc_motor.c: 45:         CCPTMRS0bits.C3TSEL=0;
  1814   002D70  0ECF               	movlw	-49
  1815   002D72  16AD               	andwf	173,f,c	;volatile
  1816                           
  1817                           ;dc_motor.c: 46:         CCPTMRS0bits.C4TSEL=0;
  1818   002D74  0E3F               	movlw	-193
  1819   002D76  16AD               	andwf	173,f,c	;volatile
  1820   002D78                     
  1821                           ; BSR set to: 15
  1822                           ;dc_motor.c: 49:         CCP1CONbits.FMT=1;
  1823   002D78  88AB               	bsf	171,4,c	;volatile
  1824                           
  1825                           ;dc_motor.c: 50:         CCP1CONbits.CCP1MODE=0b1100;
  1826   002D7A  50AB               	movf	171,w,c	;volatile
  1827   002D7C  0BF0               	andlw	-16
  1828   002D7E  090C               	iorlw	12
  1829   002D80  6EAB               	movwf	171,c	;volatile
  1830   002D82                     
  1831                           ; BSR set to: 15
  1832                           ;dc_motor.c: 51:         CCP1CONbits.EN=1;
  1833   002D82  8EAB               	bsf	171,7,c	;volatile
  1834   002D84                     
  1835                           ; BSR set to: 15
  1836                           ;dc_motor.c: 53:         CCP2CONbits.FMT=1;
  1837   002D84  88A7               	bsf	167,4,c	;volatile
  1838                           
  1839                           ;dc_motor.c: 54:         CCP2CONbits.CCP2MODE=0b1100;
  1840   002D86  50A7               	movf	167,w,c	;volatile
  1841   002D88  0BF0               	andlw	-16
  1842   002D8A  090C               	iorlw	12
  1843   002D8C  6EA7               	movwf	167,c	;volatile
  1844   002D8E                     
  1845                           ; BSR set to: 15
  1846                           ;dc_motor.c: 55:         CCP2CONbits.EN=1;
  1847   002D8E  8EA7               	bsf	167,7,c	;volatile
  1848   002D90                     
  1849                           ; BSR set to: 15
  1850                           ;dc_motor.c: 57:         CCP3CONbits.FMT=1;
  1851   002D90  8926               	bsf	38,4,b	;volatile
  1852                           
  1853                           ;dc_motor.c: 58:         CCP3CONbits.CCP3MODE=0b1100;
  1854   002D92  5126               	movf	38,w,b	;volatile
  1855   002D94  0BF0               	andlw	-16
  1856   002D96  090C               	iorlw	12
  1857   002D98  6F26               	movwf	38,b	;volatile
  1858   002D9A                     
  1859                           ; BSR set to: 15
  1860                           ;dc_motor.c: 59:         CCP3CONbits.EN=1;
  1861   002D9A  8F26               	bsf	38,7,b	;volatile
  1862   002D9C                     
  1863                           ; BSR set to: 15
  1864                           ;dc_motor.c: 61:         CCP4CONbits.FMT=1;
  1865   002D9C  8922               	bsf	34,4,b	;volatile
  1866                           
  1867                           ;dc_motor.c: 62:         CCP4CONbits.CCP4MODE=0b1100;
  1868   002D9E  5122               	movf	34,w,b	;volatile
  1869   002DA0  0BF0               	andlw	-16
  1870   002DA2  090C               	iorlw	12
  1871   002DA4  6F22               	movwf	34,b	;volatile
  1872   002DA6                     
  1873                           ; BSR set to: 15
  1874                           ;dc_motor.c: 63:         CCP4CONbits.EN=1;
  1875   002DA6  8F22               	bsf	34,7,b	;volatile
  1876   002DA8                     
  1877                           ; BSR set to: 15
  1878   002DA8  0012               	return		;funcret
  1879   002DAA                     __end_of_initDCmotorsPWM:
  1880                           	callstack 0
  1881                           
  1882 ;; *************** function _forward_navigation *****************
  1883 ;; Defined at:
  1884 ;;		line 116 in file "timers.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  mL              1   65[COMRAM] PTR struct DC_motor
  1887 ;;		 -> main@motorL(9), 
  1888 ;;  mR              1   66[COMRAM] PTR struct DC_motor
  1889 ;;		 -> main@motorR(9), 
  1890 ;;  p1              1   67[COMRAM] PTR struct HSV_val
  1891 ;;		 -> main@HSV_colour(6), 
  1892 ;;  p2              1   68[COMRAM] PTR struct RGBC_val
  1893 ;;		 -> main@RGBC_colour(8), 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  mann            1   73[COMRAM] unsigned char 
  1896 ;;  timerL          1   72[COMRAM] unsigned char 
  1897 ;;  timerH          1   71[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1911 ;;Total ram usage:        9 bytes
  1912 ;; Hardware stack levels used: 1
  1913 ;; Hardware stack levels required when called: 7
  1914 ;; This function calls:
  1915 ;;		_average_RGBC
  1916 ;;		_colour_to_key
  1917 ;;		_convert_HSV
  1918 ;;		_fullSpeedAhead
  1919 ;;		_pick_card
  1920 ;;		_read_timer
  1921 ;;		_reset_timer
  1922 ;;		_scale_RGB
  1923 ;;		_start_timer
  1924 ;;		_stop
  1925 ;;		_stop_timer
  1926 ;;		_toggle_tricolour_LED
  1927 ;;		_wait_for_wall
  1928 ;;		_write_trail
  1929 ;; This function is called by:
  1930 ;;		_main
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text6
  1935   002124                     __ptext6:
  1936                           	callstack 0
  1937   002124                     _forward_navigation:
  1938                           	callstack 23
  1939   002124                     
  1940                           ;timers.c: 116: void forward_navigation(DC_motor *mL, DC_motor *mR, HSV_val *p1, RGBC_va
      +                          l *p2);timers.c: 117: {;timers.c: 119:     while (!returning) {
  1941   002124  EF57  F011         	goto	l3917
  1942   002128                     l3863:
  1943                           
  1944                           ;timers.c: 122:         unsigned char timerH = 0;
  1945   002128  0E00               	movlw	0
  1946   00212A  6E48               	movwf	forward_navigation@timerH^0,c
  1947                           
  1948                           ;timers.c: 123:         unsigned char timerL = 0;
  1949   00212C  0E00               	movlw	0
  1950   00212E  6E49               	movwf	forward_navigation@timerL^0,c
  1951   002130                     
  1952                           ;timers.c: 127:         reset_timer();
  1953   002130  ECD9  F01C         	call	_reset_timer	;wreg free
  1954                           
  1955                           ;timers.c: 128:         start_timer();
  1956   002134  ECF6  F01C         	call	_start_timer	;wreg free
  1957   002138                     
  1958                           ;timers.c: 129:         fullSpeedAhead(mL, mR);
  1959   002138  C042  F013         	movff	forward_navigation@mL,fullSpeedAhead@mL
  1960   00213C  C043  F014         	movff	forward_navigation@mR,fullSpeedAhead@mR
  1961   002140  EC7A  F014         	call	_fullSpeedAhead	;wreg free
  1962   002144                     
  1963                           ;timers.c: 132:         wait_for_wall(p2, lost_flag);
  1964   002144  C045  F00D         	movff	forward_navigation@p2,wait_for_wall@p
  1965   002148  C05B  F00E         	movff	_lost_flag,wait_for_wall@loss
  1966   00214C  EC85  F01A         	call	_wait_for_wall	;wreg free
  1967   002150                     
  1968                           ;timers.c: 135:         stop_timer();
  1969   002150  ECF4  F01C         	call	_stop_timer	;wreg free
  1970   002154                     
  1971                           ;timers.c: 136:         read_timer(&timerH, &timerL);
  1972   002154  0E48               	movlw	low forward_navigation@timerH
  1973   002156  6E01               	movwf	read_timer@tH^0,c
  1974   002158  0E49               	movlw	low forward_navigation@timerL
  1975   00215A  6E02               	movwf	read_timer@tL^0,c
  1976   00215C  ECBA  F01C         	call	_read_timer	;wreg free
  1977                           
  1978                           ;timers.c: 137:         stop(mL, mR);
  1979   002160  C042  F013         	movff	forward_navigation@mL,stop@mL
  1980   002164  C043  F014         	movff	forward_navigation@mR,stop@mR
  1981   002168  ECD5  F016         	call	_stop	;wreg free
  1982   00216C                     
  1983                           ;timers.c: 140:         toggle_tricolour_LED();
  1984   00216C  EC16  F014         	call	_toggle_tricolour_LED	;wreg free
  1985   002170                     
  1986                           ;timers.c: 141:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1987   002170  0E11               	movlw	17
  1988   002172  6E47               	movwf	(??_forward_navigation+1)^0,c
  1989   002174  0E3C               	movlw	60
  1990   002176  6E46               	movwf	??_forward_navigation^0,c
  1991   002178  0ECB               	movlw	203
  1992   00217A                     u3317:
  1993   00217A  2EE8               	decfsz	wreg,f,c
  1994   00217C  D7FE               	bra	u3317
  1995   00217E  2E46               	decfsz	??_forward_navigation^0,f,c
  1996   002180  D7FC               	bra	u3317
  1997   002182  2E47               	decfsz	(??_forward_navigation+1)^0,f,c
  1998   002184  D7FA               	bra	u3317
  1999   002186  0000               	nop	
  2000   002188                     
  2001                           ;timers.c: 144:         average_RGBC(p2);
  2002   002188  C045  F00E         	movff	forward_navigation@p2,average_RGBC@p
  2003   00218C  ECBA  F00E         	call	_average_RGBC	;wreg free
  2004   002190                     
  2005                           ;timers.c: 145:         scale_RGB(p2);
  2006   002190  C045  F032         	movff	forward_navigation@p2,scale_RGB@p
  2007   002194  ECAB  F013         	call	_scale_RGB	;wreg free
  2008   002198                     
  2009                           ;timers.c: 146:         convert_HSV(p1, p2);
  2010   002198  C044  F00E         	movff	forward_navigation@p1,convert_HSV@p1
  2011   00219C  C045  F00F         	movff	forward_navigation@p2,convert_HSV@p2
  2012   0021A0  EC0D  F007         	call	_convert_HSV	;wreg free
  2013   0021A4                     
  2014                           ;timers.c: 147:         mann = colour_to_key(p1, p2);
  2015   0021A4  C044  F001         	movff	forward_navigation@p1,colour_to_key@p1
  2016   0021A8  C045  F002         	movff	forward_navigation@p2,colour_to_key@p2
  2017   0021AC  EC73  F00A         	call	_colour_to_key	;wreg free
  2018   0021B0  6E4A               	movwf	forward_navigation@mann^0,c
  2019   0021B2                     
  2020                           ;timers.c: 150:         toggle_tricolour_LED();
  2021   0021B2  EC16  F014         	call	_toggle_tricolour_LED	;wreg free
  2022   0021B6                     
  2023                           ;timers.c: 151:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2024   0021B6  0E11               	movlw	17
  2025   0021B8  6E47               	movwf	(??_forward_navigation+1)^0,c
  2026   0021BA  0E3C               	movlw	60
  2027   0021BC  6E46               	movwf	??_forward_navigation^0,c
  2028   0021BE  0ECB               	movlw	203
  2029   0021C0                     u3327:
  2030   0021C0  2EE8               	decfsz	wreg,f,c
  2031   0021C2  D7FE               	bra	u3327
  2032   0021C4  2E46               	decfsz	??_forward_navigation^0,f,c
  2033   0021C6  D7FC               	bra	u3327
  2034   0021C8  2E47               	decfsz	(??_forward_navigation+1)^0,f,c
  2035   0021CA  D7FA               	bra	u3327
  2036   0021CC  0000               	nop	
  2037   0021CE                     
  2038                           ;timers.c: 154:         if (lost_flag) {
  2039   0021CE  505B               	movf	_lost_flag^0,w,c
  2040   0021D0  B4D8               	btfsc	status,2,c
  2041   0021D2  EFED  F010         	goto	u3111
  2042   0021D6  EFEF  F010         	goto	u3110
  2043   0021DA                     u3111:
  2044   0021DA  EF04  F011         	goto	l3899
  2045   0021DE                     u3110:
  2046   0021DE                     
  2047                           ;timers.c: 157:             timerH = 0b11111111;
  2048   0021DE  6848               	setf	forward_navigation@timerH^0,c
  2049                           
  2050                           ;timers.c: 158:             timerL = 0b11111111;
  2051   0021E0  6849               	setf	forward_navigation@timerL^0,c
  2052   0021E2                     
  2053                           ;timers.c: 161:             mann = 8;
  2054   0021E2  0E08               	movlw	8
  2055   0021E4  6E4A               	movwf	forward_navigation@mann^0,c
  2056   0021E6                     
  2057                           ;timers.c: 164:             LATDbits.LATD7 = !LATDbits.LATD7;
  2058   0021E6  AE7C               	btfss	124,7,c	;volatile
  2059   0021E8  EFF8  F010         	goto	u3121
  2060   0021EC  EFFC  F010         	goto	u3120
  2061   0021F0                     u3121:
  2062   0021F0  6A46               	clrf	??_forward_navigation^0,c
  2063   0021F2  2A46               	incf	??_forward_navigation^0,f,c
  2064   0021F4  EFFD  F010         	goto	u3138
  2065   0021F8                     u3120:
  2066   0021F8  6A46               	clrf	??_forward_navigation^0,c
  2067   0021FA                     u3138:
  2068   0021FA  3246               	rrcf	??_forward_navigation^0,f,c
  2069   0021FC  3246               	rrcf	??_forward_navigation^0,f,c
  2070   0021FE  507C               	movf	124,w,c	;volatile
  2071   002200  1846               	xorwf	??_forward_navigation^0,w,c
  2072   002202  0B7F               	andlw	-129
  2073   002204  1846               	xorwf	??_forward_navigation^0,w,c
  2074   002206  6E7C               	movwf	124,c	;volatile
  2075   002208                     l3899:
  2076                           
  2077                           ;timers.c: 168:         if (manoeuvre_count == 19 || mann == 9) {
  2078   002208  0E13               	movlw	19
  2079   00220A  185A               	xorwf	_manoeuvre_count^0,w,c
  2080   00220C  B4D8               	btfsc	status,2,c
  2081   00220E  EF0B  F011         	goto	u3141
  2082   002212  EF0D  F011         	goto	u3140
  2083   002216                     u3141:
  2084   002216  EF16  F011         	goto	l3903
  2085   00221A                     u3140:
  2086   00221A  0E09               	movlw	9
  2087   00221C  184A               	xorwf	forward_navigation@mann^0,w,c
  2088   00221E  A4D8               	btfss	status,2,c
  2089   002220  EF14  F011         	goto	u3151
  2090   002224  EF16  F011         	goto	u3150
  2091   002228                     u3151:
  2092   002228  EF29  F011         	goto	l3907
  2093   00222C                     u3150:
  2094   00222C                     l3903:
  2095                           
  2096                           ;timers.c: 171:             mann = 8;
  2097   00222C  0E08               	movlw	8
  2098   00222E  6E4A               	movwf	forward_navigation@mann^0,c
  2099   002230                     
  2100                           ;timers.c: 174:             LATDbits.LATD7 = !LATDbits.LATD7;
  2101   002230  AE7C               	btfss	124,7,c	;volatile
  2102   002232  EF1D  F011         	goto	u3161
  2103   002236  EF21  F011         	goto	u3160
  2104   00223A                     u3161:
  2105   00223A  6A46               	clrf	??_forward_navigation^0,c
  2106   00223C  2A46               	incf	??_forward_navigation^0,f,c
  2107   00223E  EF22  F011         	goto	u3178
  2108   002242                     u3160:
  2109   002242  6A46               	clrf	??_forward_navigation^0,c
  2110   002244                     u3178:
  2111   002244  3246               	rrcf	??_forward_navigation^0,f,c
  2112   002246  3246               	rrcf	??_forward_navigation^0,f,c
  2113   002248  507C               	movf	124,w,c	;volatile
  2114   00224A  1846               	xorwf	??_forward_navigation^0,w,c
  2115   00224C  0B7F               	andlw	-129
  2116   00224E  1846               	xorwf	??_forward_navigation^0,w,c
  2117   002250  6E7C               	movwf	124,c	;volatile
  2118   002252                     l3907:
  2119                           
  2120                           ;timers.c: 178:         write_trail(timerH, timerL, mann);
  2121   002252  C049  F001         	movff	forward_navigation@timerL,write_trail@tL
  2122   002256  C04A  F002         	movff	forward_navigation@mann,write_trail@man
  2123   00225A  5048               	movf	forward_navigation@timerH^0,w,c
  2124   00225C  ECE2  F01B         	call	_write_trail
  2125   002260                     
  2126                           ;timers.c: 181:         pick_card(mL, mR, returning, mann);
  2127   002260  C042  F021         	movff	forward_navigation@mL,pick_card@mL
  2128   002264  C043  F022         	movff	forward_navigation@mR,pick_card@mR
  2129   002268  C05D  F023         	movff	_returning,pick_card@backtrack
  2130   00226C  C04A  F024         	movff	forward_navigation@mann,pick_card@key
  2131   002270  EC2D  F013         	call	_pick_card	;wreg free
  2132   002274                     
  2133                           ;timers.c: 184:         if (mann == 8) {
  2134   002274  0E08               	movlw	8
  2135   002276  184A               	xorwf	forward_navigation@mann^0,w,c
  2136   002278  A4D8               	btfss	status,2,c
  2137   00227A  EF41  F011         	goto	u3181
  2138   00227E  EF43  F011         	goto	u3180
  2139   002282                     u3181:
  2140   002282  EF57  F011         	goto	l3917
  2141   002286                     u3180:
  2142   002286                     
  2143                           ;timers.c: 187:             returning = 1;
  2144   002286  0E01               	movlw	1
  2145   002288  6E5D               	movwf	_returning^0,c
  2146   00228A                     
  2147                           ;timers.c: 190:             LATHbits.LATH3 = !LATHbits.LATH3;
  2148   00228A  A680               	btfss	128,3,c	;volatile
  2149   00228C  EF4A  F011         	goto	u3191
  2150   002290  EF4E  F011         	goto	u3190
  2151   002294                     u3191:
  2152   002294  6A46               	clrf	??_forward_navigation^0,c
  2153   002296  2A46               	incf	??_forward_navigation^0,f,c
  2154   002298  EF4F  F011         	goto	u3208
  2155   00229C                     u3190:
  2156   00229C  6A46               	clrf	??_forward_navigation^0,c
  2157   00229E                     u3208:
  2158   00229E  4646               	rlncf	??_forward_navigation^0,f,c
  2159   0022A0  4646               	rlncf	??_forward_navigation^0,f,c
  2160   0022A2  4646               	rlncf	??_forward_navigation^0,f,c
  2161   0022A4  5080               	movf	128,w,c	;volatile
  2162   0022A6  1846               	xorwf	??_forward_navigation^0,w,c
  2163   0022A8  0BF7               	andlw	-9
  2164   0022AA  1846               	xorwf	??_forward_navigation^0,w,c
  2165   0022AC  6E80               	movwf	128,c	;volatile
  2166   0022AE                     l3917:
  2167                           
  2168                           ;timers.c: 119:     while (!returning) {
  2169   0022AE  505D               	movf	_returning^0,w,c
  2170   0022B0  B4D8               	btfsc	status,2,c
  2171   0022B2  EF5D  F011         	goto	u3211
  2172   0022B6  EF5F  F011         	goto	u3210
  2173   0022BA                     u3211:
  2174   0022BA  EF94  F010         	goto	l3863
  2175   0022BE                     u3210:
  2176   0022BE  0012               	return		;funcret
  2177   0022C0                     __end_of_forward_navigation:
  2178                           	callstack 0
  2179                           
  2180 ;; *************** function _write_trail *****************
  2181 ;; Defined at:
  2182 ;;		line 100 in file "timers.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;  tH              1    wreg     unsigned char 
  2185 ;;  tL              1    0[COMRAM] unsigned char 
  2186 ;;  man             1    1[COMRAM] unsigned char 
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;  tH              1    2[COMRAM] unsigned char 
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2198 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2199 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2201 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2202 ;;Total ram usage:        3 bytes
  2203 ;; Hardware stack levels used: 1
  2204 ;; Hardware stack levels required when called: 1
  2205 ;; This function calls:
  2206 ;;		Nothing
  2207 ;; This function is called by:
  2208 ;;		_forward_navigation
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text7
  2213   0037C4                     __ptext7:
  2214                           	callstack 0
  2215   0037C4                     _write_trail:
  2216                           	callstack 28
  2217                           
  2218                           ;incstack = 0
  2219                           ;write_trail@tH stored from wreg
  2220   0037C4  6E03               	movwf	write_trail@tH^0,c
  2221   0037C6                     
  2222                           ;timers.c: 100: void write_trail(unsigned char tH, unsigned char tL, unsigned char man);
      +                          timers.c: 101: {;timers.c: 102:     *timer_high_pointer = tH;
  2223   0037C6  5051               	movf	_timer_high_pointer^0,w,c
  2224   0037C8  6ED9               	movwf	fsr2l,c
  2225   0037CA  6ADA               	clrf	fsr2h,c
  2226   0037CC  C003  FFDF         	movff	write_trail@tH,indf2
  2227                           
  2228                           ;timers.c: 103:     *timer_low_pointer = tL;
  2229   0037D0  5050               	movf	_timer_low_pointer^0,w,c
  2230   0037D2  6ED9               	movwf	fsr2l,c
  2231   0037D4  6ADA               	clrf	fsr2h,c
  2232   0037D6  C001  FFDF         	movff	write_trail@tL,indf2
  2233                           
  2234                           ;timers.c: 104:     *manoeuvre_pointer = man;
  2235   0037DA  504F               	movf	_manoeuvre_pointer^0,w,c
  2236   0037DC  6ED9               	movwf	fsr2l,c
  2237   0037DE  6ADA               	clrf	fsr2h,c
  2238   0037E0  C002  FFDF         	movff	write_trail@man,indf2
  2239   0037E4                     
  2240                           ;timers.c: 106:     timer_high_pointer ++;
  2241   0037E4  2A51               	incf	_timer_high_pointer^0,f,c
  2242   0037E6                     
  2243                           ;timers.c: 107:     timer_low_pointer ++;
  2244   0037E6  2A50               	incf	_timer_low_pointer^0,f,c
  2245   0037E8                     
  2246                           ;timers.c: 108:     manoeuvre_pointer ++;
  2247   0037E8  2A4F               	incf	_manoeuvre_pointer^0,f,c
  2248   0037EA                     
  2249                           ;timers.c: 110:     manoeuvre_count ++;
  2250   0037EA  2A5A               	incf	_manoeuvre_count^0,f,c
  2251   0037EC  0012               	return		;funcret
  2252   0037EE                     __end_of_write_trail:
  2253                           	callstack 0
  2254                           
  2255 ;; *************** function _wait_for_wall *****************
  2256 ;; Defined at:
  2257 ;;		line 161 in file "color.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;  p               1   12[COMRAM] PTR struct RGBC_val
  2260 ;;		 -> main@RGBC_colour(8), 
  2261 ;;  loss            1   13[COMRAM] unsigned char 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2273 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2276 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2277 ;;Total ram usage:        4 bytes
  2278 ;; Hardware stack levels used: 1
  2279 ;; Hardware stack levels required when called: 5
  2280 ;; This function calls:
  2281 ;;		_read_RGBC
  2282 ;; This function is called by:
  2283 ;;		_forward_navigation
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text8
  2288   00350A                     __ptext8:
  2289                           	callstack 0
  2290   00350A                     _wait_for_wall:
  2291                           	callstack 24
  2292   00350A                     
  2293                           ;color.c: 161: void wait_for_wall(struct RGBC_val *p, unsigned char loss);color.c: 162: 
      +                          {;color.c: 164:     while (!loss) {
  2294   00350A  EF9E  F01A         	goto	l3517
  2295   00350E                     l3511:
  2296                           
  2297                           ;color.c: 167:         read_RGBC(p);
  2298   00350E  C00D  F00C         	movff	wait_for_wall@p,read_RGBC@p
  2299   003512  ECBA  F019         	call	_read_RGBC	;wreg free
  2300   003516  500D               	movf	wait_for_wall@p^0,w,c
  2301   003518  6ED9               	movwf	fsr2l,c
  2302   00351A  6ADA               	clrf	fsr2h,c
  2303   00351C  0E06               	movlw	6
  2304   00351E  26D9               	addwf	fsr2l,f,c
  2305   003520  0E01               	movlw	1
  2306   003522  50DB               	movf	plusw2,w,c
  2307   003524  E107               	bnz	u2611
  2308   003526  0E32               	movlw	50
  2309   003528  5CDE               	subwf	postinc2,w,c
  2310   00352A  B0D8               	btfsc	status,0,c
  2311   00352C  EF9A  F01A         	goto	u2611
  2312   003530  EF9C  F01A         	goto	u2610
  2313   003534                     u2611:
  2314   003534  EF9E  F01A         	goto	l3517
  2315   003538                     u2610:
  2316   003538  EFA6  F01A         	goto	l99
  2317   00353C                     l3517:
  2318                           
  2319                           ;color.c: 164:     while (!loss) {
  2320   00353C  500E               	movf	wait_for_wall@loss^0,w,c
  2321   00353E  B4D8               	btfsc	status,2,c
  2322   003540  EFA4  F01A         	goto	u2621
  2323   003544  EFA6  F01A         	goto	u2620
  2324   003548                     u2621:
  2325   003548  EF87  F01A         	goto	l3511
  2326   00354C                     u2620:
  2327   00354C                     l99:
  2328   00354C  0012               	return		;funcret
  2329   00354E                     __end_of_wait_for_wall:
  2330                           	callstack 0
  2331                           
  2332 ;; *************** function _toggle_tricolour_LED *****************
  2333 ;; Defined at:
  2334 ;;		line 93 in file "buggy_lights.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;		None
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;		None
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2350 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2352 ;;Total ram usage:        1 bytes
  2353 ;; Hardware stack levels used: 1
  2354 ;; Hardware stack levels required when called: 1
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_forward_navigation
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text9
  2363   00282C                     __ptext9:
  2364                           	callstack 0
  2365   00282C                     _toggle_tricolour_LED:
  2366                           	callstack 28
  2367   00282C                     
  2368                           ;buggy_lights.c: 97:         LATGbits.LATG0 = !LATGbits.LATG0;
  2369   00282C  A07F               	btfss	127,0,c	;volatile
  2370   00282E  EF1B  F014         	goto	u2481
  2371   002832  EF1F  F014         	goto	u2480
  2372   002836                     u2481:
  2373   002836  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2374   002838  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2375   00283A  EF20  F014         	goto	u2498
  2376   00283E                     u2480:
  2377   00283E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2378   002840                     u2498:
  2379   002840  507F               	movf	127,w,c	;volatile
  2380   002842  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2381   002844  0BFE               	andlw	-2
  2382   002846  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2383   002848  6E7F               	movwf	127,c	;volatile
  2384                           
  2385                           ;buggy_lights.c: 98:         LATEbits.LATE7 = !LATEbits.LATE7;
  2386   00284A  AE7D               	btfss	125,7,c	;volatile
  2387   00284C  EF2A  F014         	goto	u2501
  2388   002850  EF2E  F014         	goto	u2500
  2389   002854                     u2501:
  2390   002854  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2391   002856  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2392   002858  EF2F  F014         	goto	u2518
  2393   00285C                     u2500:
  2394   00285C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2395   00285E                     u2518:
  2396   00285E  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2397   002860  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2398   002862  507D               	movf	125,w,c	;volatile
  2399   002864  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2400   002866  0B7F               	andlw	-129
  2401   002868  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2402   00286A  6E7D               	movwf	125,c	;volatile
  2403                           
  2404                           ;buggy_lights.c: 99:         LATAbits.LATA3 = !LATAbits.LATA3;
  2405   00286C  A679               	btfss	121,3,c	;volatile
  2406   00286E  EF3B  F014         	goto	u2521
  2407   002872  EF3F  F014         	goto	u2520
  2408   002876                     u2521:
  2409   002876  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2410   002878  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2411   00287A  EF40  F014         	goto	u2538
  2412   00287E                     u2520:
  2413   00287E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2414   002880                     u2538:
  2415   002880  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2416   002882  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2417   002884  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2418   002886  5079               	movf	121,w,c	;volatile
  2419   002888  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2420   00288A  0BF7               	andlw	-9
  2421   00288C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2422   00288E  6E79               	movwf	121,c	;volatile
  2423                           
  2424                           ;buggy_lights.c: 103:         LATGbits.LATG1 = !LATGbits.LATG1;
  2425   002890  A27F               	btfss	127,1,c	;volatile
  2426   002892  EF4D  F014         	goto	u2541
  2427   002896  EF51  F014         	goto	u2540
  2428   00289A                     u2541:
  2429   00289A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2430   00289C  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2431   00289E  EF52  F014         	goto	u2558
  2432   0028A2                     u2540:
  2433   0028A2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2434   0028A4                     u2558:
  2435   0028A4  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2436   0028A6  507F               	movf	127,w,c	;volatile
  2437   0028A8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2438   0028AA  0BFD               	andlw	-3
  2439   0028AC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2440   0028AE  6E7F               	movwf	127,c	;volatile
  2441                           
  2442                           ;buggy_lights.c: 104:         LATAbits.LATA4 = !LATAbits.LATA4;
  2443   0028B0  A879               	btfss	121,4,c	;volatile
  2444   0028B2  EF5D  F014         	goto	u2561
  2445   0028B6  EF61  F014         	goto	u2560
  2446   0028BA                     u2561:
  2447   0028BA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2448   0028BC  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2449   0028BE  EF62  F014         	goto	u2578
  2450   0028C2                     u2560:
  2451   0028C2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2452   0028C4                     u2578:
  2453   0028C4  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  2454   0028C6  5079               	movf	121,w,c	;volatile
  2455   0028C8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2456   0028CA  0BEF               	andlw	-17
  2457   0028CC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2458   0028CE  6E79               	movwf	121,c	;volatile
  2459                           
  2460                           ;buggy_lights.c: 105:         LATFbits.LATF7 = !LATFbits.LATF7;
  2461   0028D0  AE7E               	btfss	126,7,c	;volatile
  2462   0028D2  EF6D  F014         	goto	u2581
  2463   0028D6  EF71  F014         	goto	u2580
  2464   0028DA                     u2581:
  2465   0028DA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2466   0028DC  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2467   0028DE  EF72  F014         	goto	u2598
  2468   0028E2                     u2580:
  2469   0028E2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2470   0028E4                     u2598:
  2471   0028E4  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2472   0028E6  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2473   0028E8  507E               	movf	126,w,c	;volatile
  2474   0028EA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2475   0028EC  0B7F               	andlw	-129
  2476   0028EE  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2477   0028F0  6E7E               	movwf	126,c	;volatile
  2478   0028F2  0012               	return		;funcret
  2479   0028F4                     __end_of_toggle_tricolour_LED:
  2480                           	callstack 0
  2481                           
  2482 ;; *************** function _stop_timer *****************
  2483 ;; Defined at:
  2484 ;;		line 38 in file "timers.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		None
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used: 1
  2504 ;; Hardware stack levels required when called: 1
  2505 ;; This function calls:
  2506 ;;		Nothing
  2507 ;; This function is called by:
  2508 ;;		_forward_navigation
  2509 ;;		_return_to_sender
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           	psect	text10
  2514   0039E8                     __ptext10:
  2515                           	callstack 0
  2516   0039E8                     _stop_timer:
  2517                           	callstack 28
  2518   0039E8                     
  2519                           ;timers.c: 40:     T0CON0bits.T0EN = 0;
  2520   0039E8  9ED5               	bcf	213,7,c	;volatile
  2521   0039EA  0012               	return		;funcret
  2522   0039EC                     __end_of_stop_timer:
  2523                           	callstack 0
  2524                           
  2525 ;; *************** function _start_timer *****************
  2526 ;; Defined at:
  2527 ;;		line 30 in file "timers.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;		None
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;		None
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  1    wreg      void 
  2534 ;; Registers used:
  2535 ;;		None
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2545 ;;Total ram usage:        0 bytes
  2546 ;; Hardware stack levels used: 1
  2547 ;; Hardware stack levels required when called: 1
  2548 ;; This function calls:
  2549 ;;		Nothing
  2550 ;; This function is called by:
  2551 ;;		_forward_navigation
  2552 ;;		_return_to_sender
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           	psect	text11
  2557   0039EC                     __ptext11:
  2558                           	callstack 0
  2559   0039EC                     _start_timer:
  2560                           	callstack 28
  2561   0039EC                     
  2562                           ;timers.c: 32:     T0CON0bits.T0EN = 1;
  2563   0039EC  8ED5               	bsf	213,7,c	;volatile
  2564   0039EE  0012               	return		;funcret
  2565   0039F0                     __end_of_start_timer:
  2566                           	callstack 0
  2567                           
  2568 ;; *************** function _scale_RGB *****************
  2569 ;; Defined at:
  2570 ;;		line 199 in file "color.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;  p               1   49[COMRAM] PTR struct RGBC_val
  2573 ;;		 -> main@RGBC_colour(8), 
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;		None
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2585 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2588 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2589 ;;Total ram usage:        3 bytes
  2590 ;; Hardware stack levels used: 1
  2591 ;; Hardware stack levels required when called: 2
  2592 ;; This function calls:
  2593 ;;		___flmul
  2594 ;;		___fltol
  2595 ;;		___xxtofl
  2596 ;; This function is called by:
  2597 ;;		_forward_navigation
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text12
  2602   002756                     __ptext12:
  2603                           	callstack 0
  2604   002756                     _scale_RGB:
  2605                           	callstack 27
  2606   002756                     
  2607                           ;color.c: 199: void scale_RGB(struct RGBC_val *p);color.c: 200: {;color.c: 201:     p->R
      +                           *= 0.5;
  2608   002756  0E00               	movlw	0
  2609   002758  6E13               	movwf	___flmul@a^0,c
  2610   00275A  0E00               	movlw	0
  2611   00275C  6E14               	movwf	(___flmul@a+1)^0,c
  2612   00275E  0E00               	movlw	0
  2613   002760  6E15               	movwf	(___flmul@a+2)^0,c
  2614   002762  0E3F               	movlw	63
  2615   002764  6E16               	movwf	(___flmul@a+3)^0,c
  2616   002766  5032               	movf	scale_RGB@p^0,w,c
  2617   002768  6ED9               	movwf	fsr2l,c
  2618   00276A  6ADA               	clrf	fsr2h,c
  2619   00276C  CFDE F033          	movff	postinc2,??_scale_RGB
  2620   002770  CFDD F034          	movff	postdec2,??_scale_RGB+1
  2621   002774  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  2622   002778  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  2623   00277C  6A03               	clrf	(___xxtofl@val+2)^0,c
  2624   00277E  6A04               	clrf	(___xxtofl@val+3)^0,c
  2625   002780  0E00               	movlw	0
  2626   002782  ECB8  F00F         	call	___xxtofl
  2627   002786  C001  F00F         	movff	?___xxtofl,___flmul@b
  2628   00278A  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2629   00278E  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2630   002792  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2631   002796  ECA5  F00C         	call	___flmul	;wreg free
  2632   00279A  C00F  F028         	movff	?___flmul,___fltol@f1
  2633   00279E  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  2634   0027A2  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  2635   0027A6  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  2636   0027AA  ECAA  F012         	call	___fltol	;wreg free
  2637   0027AE  5032               	movf	scale_RGB@p^0,w,c
  2638   0027B0  6ED9               	movwf	fsr2l,c
  2639   0027B2  6ADA               	clrf	fsr2h,c
  2640   0027B4  C028  FFDE         	movff	?___fltol,postinc2
  2641   0027B8  C029  FFDD         	movff	?___fltol+1,postdec2
  2642                           
  2643                           ;color.c: 202:     p->G *= 0.7;
  2644   0027BC  0E33               	movlw	51
  2645   0027BE  6E13               	movwf	___flmul@a^0,c
  2646   0027C0  0E33               	movlw	51
  2647   0027C2  6E14               	movwf	(___flmul@a+1)^0,c
  2648   0027C4  0E33               	movlw	51
  2649   0027C6  6E15               	movwf	(___flmul@a+2)^0,c
  2650   0027C8  0E3F               	movlw	63
  2651   0027CA  6E16               	movwf	(___flmul@a+3)^0,c
  2652   0027CC  5032               	movf	scale_RGB@p^0,w,c
  2653   0027CE  6ED9               	movwf	fsr2l,c
  2654   0027D0  6ADA               	clrf	fsr2h,c
  2655   0027D2  0E02               	movlw	2
  2656   0027D4  26D9               	addwf	fsr2l,f,c
  2657   0027D6  CFDE F033          	movff	postinc2,??_scale_RGB
  2658   0027DA  CFDD F034          	movff	postdec2,??_scale_RGB+1
  2659   0027DE  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  2660   0027E2  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  2661   0027E6  6A03               	clrf	(___xxtofl@val+2)^0,c
  2662   0027E8  6A04               	clrf	(___xxtofl@val+3)^0,c
  2663   0027EA  0E00               	movlw	0
  2664   0027EC  ECB8  F00F         	call	___xxtofl
  2665   0027F0  C001  F00F         	movff	?___xxtofl,___flmul@b
  2666   0027F4  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2667   0027F8  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2668   0027FC  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2669   002800  ECA5  F00C         	call	___flmul	;wreg free
  2670   002804  C00F  F028         	movff	?___flmul,___fltol@f1
  2671   002808  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  2672   00280C  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  2673   002810  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  2674   002814  ECAA  F012         	call	___fltol	;wreg free
  2675   002818  5032               	movf	scale_RGB@p^0,w,c
  2676   00281A  6ED9               	movwf	fsr2l,c
  2677   00281C  6ADA               	clrf	fsr2h,c
  2678   00281E  0E02               	movlw	2
  2679   002820  26D9               	addwf	fsr2l,f,c
  2680   002822  C028  FFDE         	movff	?___fltol,postinc2
  2681   002826  C029  FFDD         	movff	?___fltol+1,postdec2
  2682   00282A  0012               	return		;funcret
  2683   00282C                     __end_of_scale_RGB:
  2684                           	callstack 0
  2685                           
  2686 ;; *************** function ___xxtofl *****************
  2687 ;; Defined at:
  2688 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  sign            1    wreg     unsigned char 
  2691 ;;  val             4    0[COMRAM] long 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  sign            1    8[COMRAM] unsigned char 
  2694 ;;  arg             4   10[COMRAM] unsigned long 
  2695 ;;  exp             1    9[COMRAM] unsigned char 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  4    0[COMRAM] unsigned char 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2705 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2706 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2707 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2708 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2709 ;;Total ram usage:       14 bytes
  2710 ;; Hardware stack levels used: 1
  2711 ;; Hardware stack levels required when called: 1
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_scale_RGB
  2716 ;;		_stop
  2717 ;;		_turnLeft
  2718 ;;		_turnRight
  2719 ;;		_fullSpeedAhead
  2720 ;;		_fullSpeedReverse
  2721 ;;		_turnLeft90
  2722 ;;		_turnRight90
  2723 ;;		_turnLeft135
  2724 ;;		_turnRight135
  2725 ;;		_UTurn
  2726 ;;		_headbuttReverse
  2727 ;;		_squareReverse
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text13
  2732   001F70                     __ptext13:
  2733                           	callstack 0
  2734   001F70                     ___xxtofl:
  2735                           	callstack 27
  2736                           
  2737                           ;incstack = 0
  2738                           ;___xxtofl@sign stored from wreg
  2739   001F70  6E09               	movwf	___xxtofl@sign^0,c
  2740   001F72  5009               	movf	___xxtofl@sign^0,w,c
  2741   001F74  B4D8               	btfsc	status,2,c
  2742   001F76  EFBF  F00F         	goto	u2361
  2743   001F7A  EFC1  F00F         	goto	u2360
  2744   001F7E                     u2361:
  2745   001F7E  EFE3  F00F         	goto	l1404
  2746   001F82                     u2360:
  2747   001F82  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2748   001F84  EFC8  F00F         	goto	u2370
  2749   001F88  EFC6  F00F         	goto	u2371
  2750   001F8C                     u2371:
  2751   001F8C  EFE3  F00F         	goto	l1404
  2752   001F90                     u2370:
  2753   001F90  C001  F005         	movff	___xxtofl@val,??___xxtofl
  2754   001F94  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  2755   001F98  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  2756   001F9C  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  2757   001FA0  1E05               	comf	??___xxtofl^0,f,c
  2758   001FA2  1E06               	comf	(??___xxtofl+1)^0,f,c
  2759   001FA4  1E07               	comf	(??___xxtofl+2)^0,f,c
  2760   001FA6  1E08               	comf	(??___xxtofl+3)^0,f,c
  2761   001FA8  2A05               	incf	??___xxtofl^0,f,c
  2762   001FAA  0E00               	movlw	0
  2763   001FAC  2206               	addwfc	(??___xxtofl+1)^0,f,c
  2764   001FAE  2207               	addwfc	(??___xxtofl+2)^0,f,c
  2765   001FB0  2208               	addwfc	(??___xxtofl+3)^0,f,c
  2766   001FB2  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  2767   001FB6  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  2768   001FBA  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  2769   001FBE  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  2770   001FC2  EFEB  F00F         	goto	l3425
  2771   001FC6                     l1404:
  2772   001FC6  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  2773   001FCA  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2774   001FCE  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2775   001FD2  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2776   001FD6                     l3425:
  2777   001FD6  5001               	movf	___xxtofl@val^0,w,c
  2778   001FD8  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  2779   001FDA  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  2780   001FDC  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  2781   001FDE  A4D8               	btfss	status,2,c
  2782   001FE0  EFF4  F00F         	goto	u2381
  2783   001FE4  EFF6  F00F         	goto	u2380
  2784   001FE8                     u2381:
  2785   001FE8  EF00  F010         	goto	l3431
  2786   001FEC                     u2380:
  2787   001FEC  0E00               	movlw	0
  2788   001FEE  6E01               	movwf	?___xxtofl^0,c
  2789   001FF0  0E00               	movlw	0
  2790   001FF2  6E02               	movwf	(?___xxtofl+1)^0,c
  2791   001FF4  0E00               	movlw	0
  2792   001FF6  6E03               	movwf	(?___xxtofl+2)^0,c
  2793   001FF8  0E00               	movlw	0
  2794   001FFA  6E04               	movwf	(?___xxtofl+3)^0,c
  2795   001FFC  EF91  F010         	goto	l1407
  2796   002000                     l3431:
  2797   002000  0E96               	movlw	150
  2798   002002  6E0A               	movwf	___xxtofl@exp^0,c
  2799   002004  EF0A  F010         	goto	l3435
  2800   002008                     l3433:
  2801   002008  2A0A               	incf	___xxtofl@exp^0,f,c
  2802   00200A  90D8               	bcf	status,0,c
  2803   00200C  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2804   00200E  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2805   002010  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2806   002012  320B               	rrcf	___xxtofl@arg^0,f,c
  2807   002014                     l3435:
  2808   002014  0E00               	movlw	0
  2809   002016  140B               	andwf	___xxtofl@arg^0,w,c
  2810   002018  6E05               	movwf	??___xxtofl^0,c
  2811   00201A  0E00               	movlw	0
  2812   00201C  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2813   00201E  6E06               	movwf	(??___xxtofl+1)^0,c
  2814   002020  0E00               	movlw	0
  2815   002022  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2816   002024  6E07               	movwf	(??___xxtofl+2)^0,c
  2817   002026  0EFE               	movlw	254
  2818   002028  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2819   00202A  6E08               	movwf	(??___xxtofl+3)^0,c
  2820   00202C  5005               	movf	??___xxtofl^0,w,c
  2821   00202E  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2822   002030  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2823   002032  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2824   002034  A4D8               	btfss	status,2,c
  2825   002036  EF1F  F010         	goto	u2391
  2826   00203A  EF21  F010         	goto	u2390
  2827   00203E                     u2391:
  2828   00203E  EF04  F010         	goto	l3433
  2829   002042                     u2390:
  2830   002042  EF2F  F010         	goto	l1411
  2831   002046                     l3437:
  2832   002046  2A0A               	incf	___xxtofl@exp^0,f,c
  2833   002048  0E01               	movlw	1
  2834   00204A  260B               	addwf	___xxtofl@arg^0,f,c
  2835   00204C  0E00               	movlw	0
  2836   00204E  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  2837   002050  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  2838   002052  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  2839   002054  90D8               	bcf	status,0,c
  2840   002056  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2841   002058  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2842   00205A  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2843   00205C  320B               	rrcf	___xxtofl@arg^0,f,c
  2844   00205E                     l1411:
  2845   00205E  0E00               	movlw	0
  2846   002060  140B               	andwf	___xxtofl@arg^0,w,c
  2847   002062  6E05               	movwf	??___xxtofl^0,c
  2848   002064  0E00               	movlw	0
  2849   002066  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2850   002068  6E06               	movwf	(??___xxtofl+1)^0,c
  2851   00206A  0E00               	movlw	0
  2852   00206C  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2853   00206E  6E07               	movwf	(??___xxtofl+2)^0,c
  2854   002070  0EFF               	movlw	255
  2855   002072  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2856   002074  6E08               	movwf	(??___xxtofl+3)^0,c
  2857   002076  5005               	movf	??___xxtofl^0,w,c
  2858   002078  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2859   00207A  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2860   00207C  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2861   00207E  A4D8               	btfss	status,2,c
  2862   002080  EF44  F010         	goto	u2401
  2863   002084  EF46  F010         	goto	u2400
  2864   002088                     u2401:
  2865   002088  EF23  F010         	goto	l3437
  2866   00208C                     u2400:
  2867   00208C  EF4E  F010         	goto	l3445
  2868   002090                     l3443:
  2869   002090  060A               	decf	___xxtofl@exp^0,f,c
  2870   002092  90D8               	bcf	status,0,c
  2871   002094  360B               	rlcf	___xxtofl@arg^0,f,c
  2872   002096  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  2873   002098  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  2874   00209A  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  2875   00209C                     l3445:
  2876   00209C  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  2877   00209E  EF53  F010         	goto	u2411
  2878   0020A2  EF55  F010         	goto	u2410
  2879   0020A6                     u2411:
  2880   0020A6  EF5D  F010         	goto	l1418
  2881   0020AA                     u2410:
  2882   0020AA  0E02               	movlw	2
  2883   0020AC  600A               	cpfslt	___xxtofl@exp^0,c
  2884   0020AE  EF5B  F010         	goto	u2421
  2885   0020B2  EF5D  F010         	goto	u2420
  2886   0020B6                     u2421:
  2887   0020B6  EF48  F010         	goto	l3443
  2888   0020BA                     u2420:
  2889   0020BA                     l1418:
  2890   0020BA  B00A               	btfsc	___xxtofl@exp^0,0,c
  2891   0020BC  EF62  F010         	goto	u2431
  2892   0020C0  EF64  F010         	goto	u2430
  2893   0020C4                     u2431:
  2894   0020C4  EF65  F010         	goto	l3451
  2895   0020C8                     u2430:
  2896   0020C8  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  2897   0020CA                     l3451:
  2898   0020CA  90D8               	bcf	status,0,c
  2899   0020CC  320A               	rrcf	___xxtofl@exp^0,f,c
  2900   0020CE  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  2901   0020D2  6A06               	clrf	(??___xxtofl+1)^0,c
  2902   0020D4  6A07               	clrf	(??___xxtofl+2)^0,c
  2903   0020D6  6A08               	clrf	(??___xxtofl+3)^0,c
  2904   0020D8  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  2905   0020DC  6A07               	clrf	(??___xxtofl+2)^0,c
  2906   0020DE  6A06               	clrf	(??___xxtofl+1)^0,c
  2907   0020E0  6A05               	clrf	??___xxtofl^0,c
  2908   0020E2  5005               	movf	??___xxtofl^0,w,c
  2909   0020E4  120B               	iorwf	___xxtofl@arg^0,f,c
  2910   0020E6  5006               	movf	(??___xxtofl+1)^0,w,c
  2911   0020E8  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  2912   0020EA  5007               	movf	(??___xxtofl+2)^0,w,c
  2913   0020EC  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  2914   0020EE  5008               	movf	(??___xxtofl+3)^0,w,c
  2915   0020F0  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  2916   0020F2  5009               	movf	___xxtofl@sign^0,w,c
  2917   0020F4  B4D8               	btfsc	status,2,c
  2918   0020F6  EF7F  F010         	goto	u2441
  2919   0020FA  EF81  F010         	goto	u2440
  2920   0020FE                     u2441:
  2921   0020FE  EF89  F010         	goto	l3461
  2922   002102                     u2440:
  2923   002102  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2924   002104  EF88  F010         	goto	u2450
  2925   002108  EF86  F010         	goto	u2451
  2926   00210C                     u2451:
  2927   00210C  EF89  F010         	goto	l3461
  2928   002110                     u2450:
  2929   002110  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  2930   002112                     l3461:
  2931   002112  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  2932   002116  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  2933   00211A  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  2934   00211E  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  2935   002122                     l1407:
  2936   002122  0012               	return		;funcret
  2937   002124                     __end_of___xxtofl:
  2938                           	callstack 0
  2939                           
  2940 ;; *************** function ___fltol *****************
  2941 ;; Defined at:
  2942 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  f1              4   39[COMRAM] unsigned char 
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  exp1            1   48[COMRAM] unsigned char 
  2947 ;;  sign1           1   47[COMRAM] unsigned char 
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  4   39[COMRAM] long 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, status,0
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2958 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2959 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2960 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2961 ;;Total ram usage:       10 bytes
  2962 ;; Hardware stack levels used: 1
  2963 ;; Hardware stack levels required when called: 1
  2964 ;; This function calls:
  2965 ;;		Nothing
  2966 ;; This function is called by:
  2967 ;;		_scale_RGB
  2968 ;;		_stop
  2969 ;;		_turnLeft
  2970 ;;		_turnRight
  2971 ;;		_fullSpeedAhead
  2972 ;;		_fullSpeedReverse
  2973 ;;		_turnLeft90
  2974 ;;		_turnRight90
  2975 ;;		_turnLeft135
  2976 ;;		_turnRight135
  2977 ;;		_UTurn
  2978 ;;		_headbuttReverse
  2979 ;;		_squareReverse
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text14
  2984   002554                     __ptext14:
  2985                           	callstack 0
  2986   002554                     ___fltol:
  2987                           	callstack 27
  2988   002554  342A               	rlcf	(___fltol@f1+2)^0,w,c
  2989   002556  342B               	rlcf	(___fltol@f1+3)^0,w,c
  2990   002558  6E31               	movwf	___fltol@exp1^0,c
  2991   00255A  5031               	movf	___fltol@exp1^0,w,c
  2992   00255C  A4D8               	btfss	status,2,c
  2993   00255E  EFB3  F012         	goto	u2291
  2994   002562  EFB5  F012         	goto	u2290
  2995   002566                     u2291:
  2996   002566  EFBF  F012         	goto	l3381
  2997   00256A                     u2290:
  2998   00256A                     l3377:
  2999   00256A  0E00               	movlw	0
  3000   00256C  6E28               	movwf	?___fltol^0,c
  3001   00256E  0E00               	movlw	0
  3002   002570  6E29               	movwf	(?___fltol+1)^0,c
  3003   002572  0E00               	movlw	0
  3004   002574  6E2A               	movwf	(?___fltol+2)^0,c
  3005   002576  0E00               	movlw	0
  3006   002578  6E2B               	movwf	(?___fltol+3)^0,c
  3007   00257A  EF2C  F013         	goto	l1046
  3008   00257E                     l3381:
  3009   00257E  C028  F02C         	movff	___fltol@f1,??___fltol
  3010   002582  C029  F02D         	movff	___fltol@f1+1,??___fltol+1
  3011   002586  C02A  F02E         	movff	___fltol@f1+2,??___fltol+2
  3012   00258A  C02B  F02F         	movff	___fltol@f1+3,??___fltol+3
  3013   00258E  0E20               	movlw	32
  3014   002590  EFCF  F012         	goto	u2300
  3015   002594                     u2305:
  3016   002594  90D8               	bcf	status,0,c
  3017   002596  322F               	rrcf	(??___fltol+3)^0,f,c
  3018   002598  322E               	rrcf	(??___fltol+2)^0,f,c
  3019   00259A  322D               	rrcf	(??___fltol+1)^0,f,c
  3020   00259C  322C               	rrcf	??___fltol^0,f,c
  3021   00259E                     u2300:
  3022   00259E  2EE8               	decfsz	wreg,f,c
  3023   0025A0  EFCA  F012         	goto	u2305
  3024   0025A4  502C               	movf	??___fltol^0,w,c
  3025   0025A6  6E30               	movwf	___fltol@sign1^0,c
  3026   0025A8  8E2A               	bsf	(___fltol@f1+2)^0,7,c
  3027   0025AA  0EFF               	movlw	255
  3028   0025AC  1628               	andwf	___fltol@f1^0,f,c
  3029   0025AE  0EFF               	movlw	255
  3030   0025B0  1629               	andwf	(___fltol@f1+1)^0,f,c
  3031   0025B2  0EFF               	movlw	255
  3032   0025B4  162A               	andwf	(___fltol@f1+2)^0,f,c
  3033   0025B6  0E00               	movlw	0
  3034   0025B8  162B               	andwf	(___fltol@f1+3)^0,f,c
  3035   0025BA  0E96               	movlw	150
  3036   0025BC  5E31               	subwf	___fltol@exp1^0,f,c
  3037   0025BE  BE31               	btfsc	___fltol@exp1^0,7,c
  3038   0025C0  EFE6  F012         	goto	u2310
  3039   0025C4  EFE4  F012         	goto	u2311
  3040   0025C8                     u2311:
  3041   0025C8  EFFC  F012         	goto	l3401
  3042   0025CC                     u2310:
  3043   0025CC  5031               	movf	___fltol@exp1^0,w,c
  3044   0025CE  0A80               	xorlw	128
  3045   0025D0  0F97               	addlw	151
  3046   0025D2  B0D8               	btfsc	status,0,c
  3047   0025D4  EFEE  F012         	goto	u2321
  3048   0025D8  EFF0  F012         	goto	u2320
  3049   0025DC                     u2321:
  3050   0025DC  EFF2  F012         	goto	l3397
  3051   0025E0                     u2320:
  3052   0025E0  EFB5  F012         	goto	l3377
  3053   0025E4                     l3397:
  3054   0025E4  90D8               	bcf	status,0,c
  3055   0025E6  322B               	rrcf	(___fltol@f1+3)^0,f,c
  3056   0025E8  322A               	rrcf	(___fltol@f1+2)^0,f,c
  3057   0025EA  3229               	rrcf	(___fltol@f1+1)^0,f,c
  3058   0025EC  3228               	rrcf	___fltol@f1^0,f,c
  3059   0025EE  3E31               	incfsz	___fltol@exp1^0,f,c
  3060   0025F0  EFF2  F012         	goto	l3397
  3061   0025F4  EF14  F013         	goto	l3411
  3062   0025F8                     l3401:
  3063   0025F8  0E1F               	movlw	31
  3064   0025FA  6431               	cpfsgt	___fltol@exp1^0,c
  3065   0025FC  EF02  F013         	goto	u2331
  3066   002600  EF04  F013         	goto	u2330
  3067   002604                     u2331:
  3068   002604  EF0C  F013         	goto	l3409
  3069   002608                     u2330:
  3070   002608  EFB5  F012         	goto	l3377
  3071   00260C                     l3407:
  3072   00260C  90D8               	bcf	status,0,c
  3073   00260E  3628               	rlcf	___fltol@f1^0,f,c
  3074   002610  3629               	rlcf	(___fltol@f1+1)^0,f,c
  3075   002612  362A               	rlcf	(___fltol@f1+2)^0,f,c
  3076   002614  362B               	rlcf	(___fltol@f1+3)^0,f,c
  3077   002616  0631               	decf	___fltol@exp1^0,f,c
  3078   002618                     l3409:
  3079   002618  5031               	movf	___fltol@exp1^0,w,c
  3080   00261A  A4D8               	btfss	status,2,c
  3081   00261C  EF12  F013         	goto	u2341
  3082   002620  EF14  F013         	goto	u2340
  3083   002624                     u2341:
  3084   002624  EF06  F013         	goto	l3407
  3085   002628                     u2340:
  3086   002628                     l3411:
  3087   002628  5030               	movf	___fltol@sign1^0,w,c
  3088   00262A  B4D8               	btfsc	status,2,c
  3089   00262C  EF1A  F013         	goto	u2351
  3090   002630  EF1C  F013         	goto	u2350
  3091   002634                     u2351:
  3092   002634  EF24  F013         	goto	l3415
  3093   002638                     u2350:
  3094   002638  1E2B               	comf	(___fltol@f1+3)^0,f,c
  3095   00263A  1E2A               	comf	(___fltol@f1+2)^0,f,c
  3096   00263C  1E29               	comf	(___fltol@f1+1)^0,f,c
  3097   00263E  6C28               	negf	___fltol@f1^0,c
  3098   002640  0E00               	movlw	0
  3099   002642  2229               	addwfc	(___fltol@f1+1)^0,f,c
  3100   002644  222A               	addwfc	(___fltol@f1+2)^0,f,c
  3101   002646  222B               	addwfc	(___fltol@f1+3)^0,f,c
  3102   002648                     l3415:
  3103   002648  C028  F028         	movff	___fltol@f1,?___fltol
  3104   00264C  C029  F029         	movff	___fltol@f1+1,?___fltol+1
  3105   002650  C02A  F02A         	movff	___fltol@f1+2,?___fltol+2
  3106   002654  C02B  F02B         	movff	___fltol@f1+3,?___fltol+3
  3107   002658                     l1046:
  3108   002658  0012               	return		;funcret
  3109   00265A                     __end_of___fltol:
  3110                           	callstack 0
  3111                           
  3112 ;; *************** function ___flmul *****************
  3113 ;; Defined at:
  3114 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  b               4   14[COMRAM] long 
  3117 ;;  a               4   18[COMRAM] long 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  prod            4   33[COMRAM] struct .
  3120 ;;  grs             4   27[COMRAM] unsigned long 
  3121 ;;  temp            2   37[COMRAM] struct .
  3122 ;;  bexp            1   32[COMRAM] unsigned char 
  3123 ;;  aexp            1   31[COMRAM] unsigned char 
  3124 ;;  sign            1   26[COMRAM] unsigned char 
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  4   14[COMRAM] unsigned char 
  3127 ;; Registers used:
  3128 ;;		wreg, status,2, status,0, prodl, prodh
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3134 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3135 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3136 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3137 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3138 ;;Total ram usage:       25 bytes
  3139 ;; Hardware stack levels used: 1
  3140 ;; Hardware stack levels required when called: 1
  3141 ;; This function calls:
  3142 ;;		Nothing
  3143 ;; This function is called by:
  3144 ;;		_scale_RGB
  3145 ;;		_stop
  3146 ;;		_turnLeft
  3147 ;;		_turnRight
  3148 ;;		_fullSpeedAhead
  3149 ;;		_fullSpeedReverse
  3150 ;;		_turnLeft90
  3151 ;;		_turnRight90
  3152 ;;		_turnLeft135
  3153 ;;		_turnRight135
  3154 ;;		_UTurn
  3155 ;;		_headbuttReverse
  3156 ;;		_squareReverse
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           	psect	text15
  3161   00194A                     __ptext15:
  3162                           	callstack 0
  3163   00194A                     ___flmul:
  3164                           	callstack 27
  3165   00194A  5012               	movf	(___flmul@b+3)^0,w,c
  3166   00194C  0B80               	andlw	128
  3167   00194E  6E1B               	movwf	___flmul@sign^0,c
  3168   001950  5012               	movf	(___flmul@b+3)^0,w,c
  3169   001952  2412               	addwf	(___flmul@b+3)^0,w,c
  3170   001954  6E21               	movwf	___flmul@bexp^0,c
  3171   001956  AE11               	btfss	(___flmul@b+2)^0,7,c
  3172   001958  EFB0  F00C         	goto	u2101
  3173   00195C  EFB2  F00C         	goto	u2100
  3174   001960                     u2101:
  3175   001960  EFB3  F00C         	goto	l3251
  3176   001964                     u2100:
  3177   001964  8021               	bsf	___flmul@bexp^0,0,c
  3178   001966                     l3251:
  3179   001966  5021               	movf	___flmul@bexp^0,w,c
  3180   001968  B4D8               	btfsc	status,2,c
  3181   00196A  EFB9  F00C         	goto	u2111
  3182   00196E  EFBB  F00C         	goto	u2110
  3183   001972                     u2111:
  3184   001972  EFCE  F00C         	goto	l3259
  3185   001976                     u2110:
  3186   001976  2821               	incf	___flmul@bexp^0,w,c
  3187   001978  A4D8               	btfss	status,2,c
  3188   00197A  EFC1  F00C         	goto	u2121
  3189   00197E  EFC3  F00C         	goto	u2120
  3190   001982                     u2121:
  3191   001982  EFCB  F00C         	goto	l3257
  3192   001986                     u2120:
  3193   001986  0E00               	movlw	0
  3194   001988  6E0F               	movwf	___flmul@b^0,c
  3195   00198A  0E00               	movlw	0
  3196   00198C  6E10               	movwf	(___flmul@b+1)^0,c
  3197   00198E  0E00               	movlw	0
  3198   001990  6E11               	movwf	(___flmul@b+2)^0,c
  3199   001992  0E00               	movlw	0
  3200   001994  6E12               	movwf	(___flmul@b+3)^0,c
  3201   001996                     l3257:
  3202   001996  8E11               	bsf	(___flmul@b+2)^0,7,c
  3203   001998  EFD6  F00C         	goto	l3261
  3204   00199C                     l3259:
  3205   00199C  0E00               	movlw	0
  3206   00199E  6E0F               	movwf	___flmul@b^0,c
  3207   0019A0  0E00               	movlw	0
  3208   0019A2  6E10               	movwf	(___flmul@b+1)^0,c
  3209   0019A4  0E00               	movlw	0
  3210   0019A6  6E11               	movwf	(___flmul@b+2)^0,c
  3211   0019A8  0E00               	movlw	0
  3212   0019AA  6E12               	movwf	(___flmul@b+3)^0,c
  3213   0019AC                     l3261:
  3214   0019AC  5016               	movf	(___flmul@a+3)^0,w,c
  3215   0019AE  0B80               	andlw	128
  3216   0019B0  1A1B               	xorwf	___flmul@sign^0,f,c
  3217   0019B2  5016               	movf	(___flmul@a+3)^0,w,c
  3218   0019B4  2416               	addwf	(___flmul@a+3)^0,w,c
  3219   0019B6  6E20               	movwf	___flmul@aexp^0,c
  3220   0019B8  AE15               	btfss	(___flmul@a+2)^0,7,c
  3221   0019BA  EFE1  F00C         	goto	u2131
  3222   0019BE  EFE3  F00C         	goto	u2130
  3223   0019C2                     u2131:
  3224   0019C2  EFE4  F00C         	goto	l3269
  3225   0019C6                     u2130:
  3226   0019C6  8020               	bsf	___flmul@aexp^0,0,c
  3227   0019C8                     l3269:
  3228   0019C8  5020               	movf	___flmul@aexp^0,w,c
  3229   0019CA  B4D8               	btfsc	status,2,c
  3230   0019CC  EFEA  F00C         	goto	u2141
  3231   0019D0  EFEC  F00C         	goto	u2140
  3232   0019D4                     u2141:
  3233   0019D4  EFFF  F00C         	goto	l3277
  3234   0019D8                     u2140:
  3235   0019D8  2820               	incf	___flmul@aexp^0,w,c
  3236   0019DA  A4D8               	btfss	status,2,c
  3237   0019DC  EFF2  F00C         	goto	u2151
  3238   0019E0  EFF4  F00C         	goto	u2150
  3239   0019E4                     u2151:
  3240   0019E4  EFFC  F00C         	goto	l3275
  3241   0019E8                     u2150:
  3242   0019E8  0E00               	movlw	0
  3243   0019EA  6E13               	movwf	___flmul@a^0,c
  3244   0019EC  0E00               	movlw	0
  3245   0019EE  6E14               	movwf	(___flmul@a+1)^0,c
  3246   0019F0  0E00               	movlw	0
  3247   0019F2  6E15               	movwf	(___flmul@a+2)^0,c
  3248   0019F4  0E00               	movlw	0
  3249   0019F6  6E16               	movwf	(___flmul@a+3)^0,c
  3250   0019F8                     l3275:
  3251   0019F8  8E15               	bsf	(___flmul@a+2)^0,7,c
  3252   0019FA  EF07  F00D         	goto	l1363
  3253   0019FE                     l3277:
  3254   0019FE  0E00               	movlw	0
  3255   001A00  6E13               	movwf	___flmul@a^0,c
  3256   001A02  0E00               	movlw	0
  3257   001A04  6E14               	movwf	(___flmul@a+1)^0,c
  3258   001A06  0E00               	movlw	0
  3259   001A08  6E15               	movwf	(___flmul@a+2)^0,c
  3260   001A0A  0E00               	movlw	0
  3261   001A0C  6E16               	movwf	(___flmul@a+3)^0,c
  3262   001A0E                     l1363:
  3263   001A0E  5020               	movf	___flmul@aexp^0,w,c
  3264   001A10  B4D8               	btfsc	status,2,c
  3265   001A12  EF0D  F00D         	goto	u2161
  3266   001A16  EF0F  F00D         	goto	u2160
  3267   001A1A                     u2161:
  3268   001A1A  EF17  F00D         	goto	l3281
  3269   001A1E                     u2160:
  3270   001A1E  5021               	movf	___flmul@bexp^0,w,c
  3271   001A20  A4D8               	btfss	status,2,c
  3272   001A22  EF15  F00D         	goto	u2171
  3273   001A26  EF17  F00D         	goto	u2170
  3274   001A2A                     u2171:
  3275   001A2A  EF21  F00D         	goto	l3285
  3276   001A2E                     u2170:
  3277   001A2E                     l3281:
  3278   001A2E  0E00               	movlw	0
  3279   001A30  6E0F               	movwf	?___flmul^0,c
  3280   001A32  0E00               	movlw	0
  3281   001A34  6E10               	movwf	(?___flmul+1)^0,c
  3282   001A36  0E00               	movlw	0
  3283   001A38  6E11               	movwf	(?___flmul+2)^0,c
  3284   001A3A  0E00               	movlw	0
  3285   001A3C  6E12               	movwf	(?___flmul+3)^0,c
  3286   001A3E  EFB9  F00E         	goto	l1367
  3287   001A42                     l3285:
  3288   001A42  5015               	movf	(___flmul@a+2)^0,w,c
  3289   001A44  020F               	mulwf	___flmul@b^0,c
  3290   001A46  CFF3 F026          	movff	prodl,___flmul@temp
  3291   001A4A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3292   001A4E  5026               	movf	___flmul@temp^0,w,c
  3293   001A50  6E1C               	movwf	___flmul@grs^0,c
  3294   001A52  6A1D               	clrf	(___flmul@grs+1)^0,c
  3295   001A54  6A1E               	clrf	(___flmul@grs+2)^0,c
  3296   001A56  6A1F               	clrf	(___flmul@grs+3)^0,c
  3297   001A58  5027               	movf	(___flmul@temp+1)^0,w,c
  3298   001A5A  6E22               	movwf	___flmul@prod^0,c
  3299   001A5C  6A23               	clrf	(___flmul@prod+1)^0,c
  3300   001A5E  6A24               	clrf	(___flmul@prod+2)^0,c
  3301   001A60  6A25               	clrf	(___flmul@prod+3)^0,c
  3302   001A62  5014               	movf	(___flmul@a+1)^0,w,c
  3303   001A64  0210               	mulwf	(___flmul@b+1)^0,c
  3304   001A66  CFF3 F026          	movff	prodl,___flmul@temp
  3305   001A6A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3306   001A6E  5026               	movf	___flmul@temp^0,w,c
  3307   001A70  261C               	addwf	___flmul@grs^0,f,c
  3308   001A72  0E00               	movlw	0
  3309   001A74  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3310   001A76  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3311   001A78  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3312   001A7A  5027               	movf	(___flmul@temp+1)^0,w,c
  3313   001A7C  2622               	addwf	___flmul@prod^0,f,c
  3314   001A7E  0E00               	movlw	0
  3315   001A80  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3316   001A82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3317   001A84  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3318   001A86  5013               	movf	___flmul@a^0,w,c
  3319   001A88  0211               	mulwf	(___flmul@b+2)^0,c
  3320   001A8A  CFF3 F026          	movff	prodl,___flmul@temp
  3321   001A8E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3322   001A92  5026               	movf	___flmul@temp^0,w,c
  3323   001A94  261C               	addwf	___flmul@grs^0,f,c
  3324   001A96  0E00               	movlw	0
  3325   001A98  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3326   001A9A  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3327   001A9C  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3328   001A9E  5027               	movf	(___flmul@temp+1)^0,w,c
  3329   001AA0  2622               	addwf	___flmul@prod^0,f,c
  3330   001AA2  0E00               	movlw	0
  3331   001AA4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3332   001AA6  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3333   001AA8  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3334   001AAA  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3335   001AAE  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3336   001AB2  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3337   001AB6  6A1C               	clrf	___flmul@grs^0,c
  3338   001AB8  5013               	movf	___flmul@a^0,w,c
  3339   001ABA  0210               	mulwf	(___flmul@b+1)^0,c
  3340   001ABC  CFF3 F026          	movff	prodl,___flmul@temp
  3341   001AC0  CFF4 F027          	movff	prodh,___flmul@temp+1
  3342   001AC4  5026               	movf	___flmul@temp^0,w,c
  3343   001AC6  261C               	addwf	___flmul@grs^0,f,c
  3344   001AC8  5027               	movf	(___flmul@temp+1)^0,w,c
  3345   001ACA  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3346   001ACC  0E00               	movlw	0
  3347   001ACE  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3348   001AD0  0E00               	movlw	0
  3349   001AD2  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3350   001AD4  5014               	movf	(___flmul@a+1)^0,w,c
  3351   001AD6  020F               	mulwf	___flmul@b^0,c
  3352   001AD8  CFF3 F026          	movff	prodl,___flmul@temp
  3353   001ADC  CFF4 F027          	movff	prodh,___flmul@temp+1
  3354   001AE0  5026               	movf	___flmul@temp^0,w,c
  3355   001AE2  261C               	addwf	___flmul@grs^0,f,c
  3356   001AE4  5027               	movf	(___flmul@temp+1)^0,w,c
  3357   001AE6  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3358   001AE8  0E00               	movlw	0
  3359   001AEA  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3360   001AEC  0E00               	movlw	0
  3361   001AEE  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3362   001AF0  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3363   001AF4  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3364   001AF8  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3365   001AFC  6A1C               	clrf	___flmul@grs^0,c
  3366   001AFE  5013               	movf	___flmul@a^0,w,c
  3367   001B00  020F               	mulwf	___flmul@b^0,c
  3368   001B02  CFF3 F026          	movff	prodl,___flmul@temp
  3369   001B06  CFF4 F027          	movff	prodh,___flmul@temp+1
  3370   001B0A  5026               	movf	___flmul@temp^0,w,c
  3371   001B0C  261C               	addwf	___flmul@grs^0,f,c
  3372   001B0E  5027               	movf	(___flmul@temp+1)^0,w,c
  3373   001B10  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3374   001B12  0E00               	movlw	0
  3375   001B14  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3376   001B16  0E00               	movlw	0
  3377   001B18  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3378   001B1A  5015               	movf	(___flmul@a+2)^0,w,c
  3379   001B1C  0210               	mulwf	(___flmul@b+1)^0,c
  3380   001B1E  CFF3 F026          	movff	prodl,___flmul@temp
  3381   001B22  CFF4 F027          	movff	prodh,___flmul@temp+1
  3382   001B26  5026               	movf	___flmul@temp^0,w,c
  3383   001B28  2622               	addwf	___flmul@prod^0,f,c
  3384   001B2A  5027               	movf	(___flmul@temp+1)^0,w,c
  3385   001B2C  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3386   001B2E  0E00               	movlw	0
  3387   001B30  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3388   001B32  0E00               	movlw	0
  3389   001B34  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3390   001B36  5014               	movf	(___flmul@a+1)^0,w,c
  3391   001B38  0211               	mulwf	(___flmul@b+2)^0,c
  3392   001B3A  CFF3 F026          	movff	prodl,___flmul@temp
  3393   001B3E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3394   001B42  5026               	movf	___flmul@temp^0,w,c
  3395   001B44  2622               	addwf	___flmul@prod^0,f,c
  3396   001B46  5027               	movf	(___flmul@temp+1)^0,w,c
  3397   001B48  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3398   001B4A  0E00               	movlw	0
  3399   001B4C  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3400   001B4E  0E00               	movlw	0
  3401   001B50  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3402   001B52  5015               	movf	(___flmul@a+2)^0,w,c
  3403   001B54  0211               	mulwf	(___flmul@b+2)^0,c
  3404   001B56  CFF3 F026          	movff	prodl,___flmul@temp
  3405   001B5A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3406   001B5E  5026               	movf	___flmul@temp^0,w,c
  3407   001B60  6E17               	movwf	??___flmul^0,c
  3408   001B62  5027               	movf	(___flmul@temp+1)^0,w,c
  3409   001B64  6E18               	movwf	(??___flmul+1)^0,c
  3410   001B66  6A19               	clrf	(??___flmul+2)^0,c
  3411   001B68  6A1A               	clrf	(??___flmul+3)^0,c
  3412   001B6A  C019  F01A         	movff	??___flmul+2,??___flmul+3
  3413   001B6E  C018  F019         	movff	??___flmul+1,??___flmul+2
  3414   001B72  C017  F018         	movff	??___flmul,??___flmul+1
  3415   001B76  6A17               	clrf	??___flmul^0,c
  3416   001B78  5017               	movf	??___flmul^0,w,c
  3417   001B7A  2622               	addwf	___flmul@prod^0,f,c
  3418   001B7C  5018               	movf	(??___flmul+1)^0,w,c
  3419   001B7E  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3420   001B80  5019               	movf	(??___flmul+2)^0,w,c
  3421   001B82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3422   001B84  501A               	movf	(??___flmul+3)^0,w,c
  3423   001B86  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3424   001B88  C01C  F017         	movff	___flmul@grs,??___flmul
  3425   001B8C  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  3426   001B90  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  3427   001B94  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  3428   001B98  0E19               	movlw	25
  3429   001B9A  EFD4  F00D         	goto	u2180
  3430   001B9E                     u2185:
  3431   001B9E  90D8               	bcf	status,0,c
  3432   001BA0  321A               	rrcf	(??___flmul+3)^0,f,c
  3433   001BA2  3219               	rrcf	(??___flmul+2)^0,f,c
  3434   001BA4  3218               	rrcf	(??___flmul+1)^0,f,c
  3435   001BA6  3217               	rrcf	??___flmul^0,f,c
  3436   001BA8                     u2180:
  3437   001BA8  2EE8               	decfsz	wreg,f,c
  3438   001BAA  EFCF  F00D         	goto	u2185
  3439   001BAE  5017               	movf	??___flmul^0,w,c
  3440   001BB0  2622               	addwf	___flmul@prod^0,f,c
  3441   001BB2  5018               	movf	(??___flmul+1)^0,w,c
  3442   001BB4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3443   001BB6  5019               	movf	(??___flmul+2)^0,w,c
  3444   001BB8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3445   001BBA  501A               	movf	(??___flmul+3)^0,w,c
  3446   001BBC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3447   001BBE  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3448   001BC2  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3449   001BC6  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3450   001BCA  6A1C               	clrf	___flmul@grs^0,c
  3451   001BCC  5020               	movf	___flmul@aexp^0,w,c
  3452   001BCE  C021  F017         	movff	___flmul@bexp,??___flmul
  3453   001BD2  6A18               	clrf	(??___flmul+1)^0,c
  3454   001BD4  2617               	addwf	??___flmul^0,f,c
  3455   001BD6  0E00               	movlw	0
  3456   001BD8  2218               	addwfc	(??___flmul+1)^0,f,c
  3457   001BDA  0E82               	movlw	130
  3458   001BDC  2417               	addwf	??___flmul^0,w,c
  3459   001BDE  6E26               	movwf	___flmul@temp^0,c
  3460   001BE0  0EFF               	movlw	255
  3461   001BE2  2018               	addwfc	(??___flmul+1)^0,w,c
  3462   001BE4  6E27               	movwf	(___flmul@temp+1)^0,c
  3463   001BE6  EF0A  F00E         	goto	l3333
  3464   001BEA                     l3327:
  3465   001BEA  90D8               	bcf	status,0,c
  3466   001BEC  3622               	rlcf	___flmul@prod^0,f,c
  3467   001BEE  3623               	rlcf	(___flmul@prod+1)^0,f,c
  3468   001BF0  3624               	rlcf	(___flmul@prod+2)^0,f,c
  3469   001BF2  3625               	rlcf	(___flmul@prod+3)^0,f,c
  3470   001BF4  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  3471   001BF6  EFFF  F00D         	goto	u2191
  3472   001BFA  EF01  F00E         	goto	u2190
  3473   001BFE                     u2191:
  3474   001BFE  EF02  F00E         	goto	l1370
  3475   001C02                     u2190:
  3476   001C02  8022               	bsf	___flmul@prod^0,0,c
  3477   001C04                     l1370:
  3478   001C04  90D8               	bcf	status,0,c
  3479   001C06  361C               	rlcf	___flmul@grs^0,f,c
  3480   001C08  361D               	rlcf	(___flmul@grs+1)^0,f,c
  3481   001C0A  361E               	rlcf	(___flmul@grs+2)^0,f,c
  3482   001C0C  361F               	rlcf	(___flmul@grs+3)^0,f,c
  3483   001C0E  0626               	decf	___flmul@temp^0,f,c
  3484   001C10  A0D8               	btfss	status,0,c
  3485   001C12  0627               	decf	(___flmul@temp+1)^0,f,c
  3486   001C14                     l3333:
  3487   001C14  AE24               	btfss	(___flmul@prod+2)^0,7,c
  3488   001C16  EF0F  F00E         	goto	u2201
  3489   001C1A  EF11  F00E         	goto	u2200
  3490   001C1E                     u2201:
  3491   001C1E  EFF5  F00D         	goto	l3327
  3492   001C22                     u2200:
  3493   001C22  0E00               	movlw	0
  3494   001C24  6E20               	movwf	___flmul@aexp^0,c
  3495   001C26  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  3496   001C28  EF18  F00E         	goto	u2211
  3497   001C2C  EF1A  F00E         	goto	u2210
  3498   001C30                     u2211:
  3499   001C30  EF3E  F00E         	goto	l1372
  3500   001C34                     u2210:
  3501   001C34  0EFF               	movlw	255
  3502   001C36  141C               	andwf	___flmul@grs^0,w,c
  3503   001C38  6E17               	movwf	??___flmul^0,c
  3504   001C3A  0EFF               	movlw	255
  3505   001C3C  141D               	andwf	(___flmul@grs+1)^0,w,c
  3506   001C3E  6E18               	movwf	(??___flmul+1)^0,c
  3507   001C40  0EFF               	movlw	255
  3508   001C42  141E               	andwf	(___flmul@grs+2)^0,w,c
  3509   001C44  6E19               	movwf	(??___flmul+2)^0,c
  3510   001C46  0E7F               	movlw	127
  3511   001C48  141F               	andwf	(___flmul@grs+3)^0,w,c
  3512   001C4A  6E1A               	movwf	(??___flmul+3)^0,c
  3513   001C4C  5017               	movf	??___flmul^0,w,c
  3514   001C4E  1018               	iorwf	(??___flmul+1)^0,w,c
  3515   001C50  1019               	iorwf	(??___flmul+2)^0,w,c
  3516   001C52  101A               	iorwf	(??___flmul+3)^0,w,c
  3517   001C54  B4D8               	btfsc	status,2,c
  3518   001C56  EF2F  F00E         	goto	u2221
  3519   001C5A  EF31  F00E         	goto	u2220
  3520   001C5E                     u2221:
  3521   001C5E  EF35  F00E         	goto	l1373
  3522   001C62                     u2220:
  3523   001C62                     l3341:
  3524   001C62  0E01               	movlw	1
  3525   001C64  6E20               	movwf	___flmul@aexp^0,c
  3526   001C66  EF3E  F00E         	goto	l1372
  3527   001C6A                     l1373:
  3528   001C6A  A022               	btfss	___flmul@prod^0,0,c
  3529   001C6C  EF3A  F00E         	goto	u2231
  3530   001C70  EF3C  F00E         	goto	u2230
  3531   001C74                     u2231:
  3532   001C74  EF3E  F00E         	goto	l1372
  3533   001C78                     u2230:
  3534   001C78  EF31  F00E         	goto	l3341
  3535   001C7C                     l1372:
  3536   001C7C  5020               	movf	___flmul@aexp^0,w,c
  3537   001C7E  B4D8               	btfsc	status,2,c
  3538   001C80  EF44  F00E         	goto	u2241
  3539   001C84  EF46  F00E         	goto	u2240
  3540   001C88                     u2241:
  3541   001C88  EF6A  F00E         	goto	l3353
  3542   001C8C                     u2240:
  3543   001C8C  0E01               	movlw	1
  3544   001C8E  2622               	addwf	___flmul@prod^0,f,c
  3545   001C90  0E00               	movlw	0
  3546   001C92  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3547   001C94  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3548   001C96  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3549   001C98  A025               	btfss	(___flmul@prod+3)^0,0,c
  3550   001C9A  EF51  F00E         	goto	u2251
  3551   001C9E  EF53  F00E         	goto	u2250
  3552   001CA2                     u2251:
  3553   001CA2  EF6A  F00E         	goto	l3353
  3554   001CA6                     u2250:
  3555   001CA6  C022  F017         	movff	___flmul@prod,??___flmul
  3556   001CAA  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  3557   001CAE  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  3558   001CB2  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  3559   001CB6  341A               	rlcf	(??___flmul+3)^0,w,c
  3560   001CB8  321A               	rrcf	(??___flmul+3)^0,f,c
  3561   001CBA  3219               	rrcf	(??___flmul+2)^0,f,c
  3562   001CBC  3218               	rrcf	(??___flmul+1)^0,f,c
  3563   001CBE  3217               	rrcf	??___flmul^0,f,c
  3564   001CC0  C017  F022         	movff	??___flmul,___flmul@prod
  3565   001CC4  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  3566   001CC8  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  3567   001CCC  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  3568   001CD0  4A26               	infsnz	___flmul@temp^0,f,c
  3569   001CD2  2A27               	incf	(___flmul@temp+1)^0,f,c
  3570   001CD4                     l3353:
  3571   001CD4  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  3572   001CD6  EF75  F00E         	goto	u2261
  3573   001CDA  5027               	movf	(___flmul@temp+1)^0,w,c
  3574   001CDC  E108               	bnz	u2260
  3575   001CDE  2826               	incf	___flmul@temp^0,w,c
  3576   001CE0  A0D8               	btfss	status,0,c
  3577   001CE2  EF75  F00E         	goto	u2261
  3578   001CE6  EF77  F00E         	goto	u2260
  3579   001CEA                     u2261:
  3580   001CEA  EF81  F00E         	goto	l3357
  3581   001CEE                     u2260:
  3582   001CEE  0E00               	movlw	0
  3583   001CF0  6E22               	movwf	___flmul@prod^0,c
  3584   001CF2  0E00               	movlw	0
  3585   001CF4  6E23               	movwf	(___flmul@prod+1)^0,c
  3586   001CF6  0E80               	movlw	128
  3587   001CF8  6E24               	movwf	(___flmul@prod+2)^0,c
  3588   001CFA  0E7F               	movlw	127
  3589   001CFC  6E25               	movwf	(___flmul@prod+3)^0,c
  3590   001CFE  EFAF  F00E         	goto	l3369
  3591   001D02                     l3357:
  3592   001D02  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  3593   001D04  EF8E  F00E         	goto	u2270
  3594   001D08  5027               	movf	(___flmul@temp+1)^0,w,c
  3595   001D0A  E106               	bnz	u2271
  3596   001D0C  0426               	decf	___flmul@temp^0,w,c
  3597   001D0E  B0D8               	btfsc	status,0,c
  3598   001D10  EF8C  F00E         	goto	u2271
  3599   001D14  EF8E  F00E         	goto	u2270
  3600   001D18                     u2271:
  3601   001D18  EF9A  F00E         	goto	l1380
  3602   001D1C                     u2270:
  3603   001D1C  0E00               	movlw	0
  3604   001D1E  6E22               	movwf	___flmul@prod^0,c
  3605   001D20  0E00               	movlw	0
  3606   001D22  6E23               	movwf	(___flmul@prod+1)^0,c
  3607   001D24  0E00               	movlw	0
  3608   001D26  6E24               	movwf	(___flmul@prod+2)^0,c
  3609   001D28  0E00               	movlw	0
  3610   001D2A  6E25               	movwf	(___flmul@prod+3)^0,c
  3611   001D2C  0E00               	movlw	0
  3612   001D2E  6E1B               	movwf	___flmul@sign^0,c
  3613   001D30  EFAF  F00E         	goto	l3369
  3614   001D34                     l1380:
  3615   001D34  C026  F021         	movff	___flmul@temp,___flmul@bexp
  3616   001D38  0EFF               	movlw	255
  3617   001D3A  1622               	andwf	___flmul@prod^0,f,c
  3618   001D3C  0EFF               	movlw	255
  3619   001D3E  1623               	andwf	(___flmul@prod+1)^0,f,c
  3620   001D40  0E7F               	movlw	127
  3621   001D42  1624               	andwf	(___flmul@prod+2)^0,f,c
  3622   001D44  0E00               	movlw	0
  3623   001D46  1625               	andwf	(___flmul@prod+3)^0,f,c
  3624   001D48  A021               	btfss	___flmul@bexp^0,0,c
  3625   001D4A  EFA9  F00E         	goto	u2281
  3626   001D4E  EFAB  F00E         	goto	u2280
  3627   001D52                     u2281:
  3628   001D52  EFAC  F00E         	goto	l3367
  3629   001D56                     u2280:
  3630   001D56  8E24               	bsf	(___flmul@prod+2)^0,7,c
  3631   001D58                     l3367:
  3632   001D58  90D8               	bcf	status,0,c
  3633   001D5A  3021               	rrcf	___flmul@bexp^0,w,c
  3634   001D5C  6E25               	movwf	(___flmul@prod+3)^0,c
  3635   001D5E                     l3369:
  3636   001D5E  501B               	movf	___flmul@sign^0,w,c
  3637   001D60  1225               	iorwf	(___flmul@prod+3)^0,f,c
  3638   001D62  C022  F00F         	movff	___flmul@prod,?___flmul
  3639   001D66  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  3640   001D6A  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  3641   001D6E  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  3642   001D72                     l1367:
  3643   001D72  0012               	return		;funcret
  3644   001D74                     __end_of___flmul:
  3645                           	callstack 0
  3646                           
  3647 ;; *************** function _read_timer *****************
  3648 ;; Defined at:
  3649 ;;		line 46 in file "timers.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;  tH              1    0[COMRAM] PTR unsigned char 
  3652 ;;		 -> forward_navigation@timerH(1), 
  3653 ;;  tL              1    1[COMRAM] PTR unsigned char 
  3654 ;;		 -> forward_navigation@timerL(1), 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      void 
  3659 ;; Registers used:
  3660 ;;		wreg, fsr2l, fsr2h, status,2
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3666 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3669 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3670 ;;Total ram usage:        2 bytes
  3671 ;; Hardware stack levels used: 1
  3672 ;; Hardware stack levels required when called: 1
  3673 ;; This function calls:
  3674 ;;		Nothing
  3675 ;; This function is called by:
  3676 ;;		_forward_navigation
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text16
  3681   003974                     __ptext16:
  3682                           	callstack 0
  3683   003974                     _read_timer:
  3684                           	callstack 28
  3685   003974                     
  3686                           ;timers.c: 46: void read_timer(unsigned char *tH, unsigned char *tL);timers.c: 47: {;tim
      +                          ers.c: 51:     *tL = TMR0L;
  3687   003974  5002               	movf	read_timer@tL^0,w,c
  3688   003976  6ED9               	movwf	fsr2l,c
  3689   003978  6ADA               	clrf	fsr2h,c
  3690   00397A  CFD3 FFDF          	movff	4051,indf2	;volatile
  3691                           
  3692                           ;timers.c: 52:     *tH = TMR0H;
  3693   00397E  5001               	movf	read_timer@tH^0,w,c
  3694   003980  6ED9               	movwf	fsr2l,c
  3695   003982  6ADA               	clrf	fsr2h,c
  3696   003984  CFD4 FFDF          	movff	4052,indf2	;volatile
  3697   003988  0012               	return		;funcret
  3698   00398A                     __end_of_read_timer:
  3699                           	callstack 0
  3700                           
  3701 ;; *************** function _pick_card *****************
  3702 ;; Defined at:
  3703 ;;		line 141 in file "manoeuvres.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  3706 ;;		 -> main@motorL(9), 
  3707 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  3708 ;;		 -> main@motorR(9), 
  3709 ;;  backtrack       1   34[COMRAM] unsigned char 
  3710 ;;  key             1   35[COMRAM] unsigned char 
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;		None
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      void 
  3715 ;; Registers used:
  3716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3722 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3724 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3725 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3726 ;;Total ram usage:        6 bytes
  3727 ;; Hardware stack levels used: 1
  3728 ;; Hardware stack levels required when called: 6
  3729 ;; This function calls:
  3730 ;;		_card_blue
  3731 ;;		_card_cyan
  3732 ;;		_card_green
  3733 ;;		_card_orange
  3734 ;;		_card_pink
  3735 ;;		_card_red
  3736 ;;		_card_white
  3737 ;;		_card_yellow
  3738 ;; This function is called by:
  3739 ;;		_forward_navigation
  3740 ;;		_return_to_sender
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           	psect	text17
  3745   00265A                     __ptext17:
  3746                           	callstack 0
  3747   00265A                     _pick_card:
  3748                           	callstack 23
  3749   00265A                     
  3750                           ;manoeuvres.c: 141: void pick_card(DC_motor *mL, DC_motor *mR, unsigned char backtrack, 
      +                          unsigned char key);manoeuvres.c: 142: {;manoeuvres.c: 143:     switch (key) {
  3751   00265A  EF7D  F013         	goto	l3767
  3752   00265E                     l3749:
  3753                           
  3754                           ;manoeuvres.c: 145:             card_red(mL, mR, backtrack);
  3755   00265E  C021  F01C         	movff	pick_card@mL,card_red@mL
  3756   002662  C022  F01D         	movff	pick_card@mR,card_red@mR
  3757   002666  C023  F01E         	movff	pick_card@backtrack,card_red@backtrack
  3758   00266A  EC87  F018         	call	_card_red	;wreg free
  3759                           
  3760                           ;manoeuvres.c: 146:             break;
  3761   00266E  EFAA  F013         	goto	l599
  3762   002672                     l3751:
  3763                           
  3764                           ;manoeuvres.c: 148:             card_green(mL, mR, backtrack);
  3765   002672  C021  F01C         	movff	pick_card@mL,card_green@mL
  3766   002676  C022  F01D         	movff	pick_card@mR,card_green@mR
  3767   00267A  C023  F01E         	movff	pick_card@backtrack,card_green@backtrack
  3768   00267E  ECEF  F018         	call	_card_green	;wreg free
  3769                           
  3770                           ;manoeuvres.c: 149:             break;
  3771   002682  EFAA  F013         	goto	l599
  3772   002686                     l3753:
  3773                           
  3774                           ;manoeuvres.c: 151:             card_blue(mL, mR, backtrack);
  3775   002686  C021  F01C         	movff	pick_card@mL,card_blue@mL
  3776   00268A  C022  F01D         	movff	pick_card@mR,card_blue@mR
  3777   00268E  C023  F01E         	movff	pick_card@backtrack,card_blue@backtrack
  3778   002692  EC57  F019         	call	_card_blue	;wreg free
  3779                           
  3780                           ;manoeuvres.c: 152:             break;
  3781   002696  EFAA  F013         	goto	l599
  3782   00269A                     l3755:
  3783                           
  3784                           ;manoeuvres.c: 154:             card_yellow(mL, mR, backtrack);
  3785   00269A  C021  F01C         	movff	pick_card@mL,card_yellow@mL
  3786   00269E  C022  F01D         	movff	pick_card@mR,card_yellow@mR
  3787   0026A2  C023  F01E         	movff	pick_card@backtrack,card_yellow@backtrack
  3788   0026A6  EC1C  F017         	call	_card_yellow	;wreg free
  3789                           
  3790                           ;manoeuvres.c: 155:             break;
  3791   0026AA  EFAA  F013         	goto	l599
  3792   0026AE                     l3757:
  3793                           
  3794                           ;manoeuvres.c: 157:             card_pink(mL, mR, backtrack);
  3795   0026AE  C021  F01C         	movff	pick_card@mL,card_pink@mL
  3796   0026B2  C022  F01D         	movff	pick_card@mR,card_pink@mR
  3797   0026B6  C023  F01E         	movff	pick_card@backtrack,card_pink@backtrack
  3798   0026BA  EC5C  F017         	call	_card_pink	;wreg free
  3799                           
  3800                           ;manoeuvres.c: 158:             break;
  3801   0026BE  EFAA  F013         	goto	l599
  3802   0026C2                     l3759:
  3803                           
  3804                           ;manoeuvres.c: 160:             card_orange(mL, mR, backtrack);
  3805   0026C2  C021  F01C         	movff	pick_card@mL,card_orange@mL
  3806   0026C6  C022  F01D         	movff	pick_card@mR,card_orange@mR
  3807   0026CA  C023  F01E         	movff	pick_card@backtrack,card_orange@backtrack
  3808   0026CE  ECBB  F018         	call	_card_orange	;wreg free
  3809                           
  3810                           ;manoeuvres.c: 161:             break;
  3811   0026D2  EFAA  F013         	goto	l599
  3812   0026D6                     l3761:
  3813                           
  3814                           ;manoeuvres.c: 163:             card_cyan(mL, mR, backtrack);
  3815   0026D6  C021  F01C         	movff	pick_card@mL,card_cyan@mL
  3816   0026DA  C022  F01D         	movff	pick_card@mR,card_cyan@mR
  3817   0026DE  C023  F01E         	movff	pick_card@backtrack,card_cyan@backtrack
  3818   0026E2  EC23  F019         	call	_card_cyan	;wreg free
  3819                           
  3820                           ;manoeuvres.c: 164:             break;
  3821   0026E6  EFAA  F013         	goto	l599
  3822   0026EA                     l3763:
  3823                           
  3824                           ;manoeuvres.c: 166:             card_white(mL, mR);
  3825   0026EA  C021  F01C         	movff	pick_card@mL,card_white@mL
  3826   0026EE  C022  F01D         	movff	pick_card@mR,card_white@mR
  3827   0026F2  EC33  F01C         	call	_card_white	;wreg free
  3828                           
  3829                           ;manoeuvres.c: 167:             break;
  3830   0026F6  EFAA  F013         	goto	l599
  3831   0026FA                     l3767:
  3832   0026FA  5024               	movf	pick_card@key^0,w,c
  3833   0026FC  6E25               	movwf	??_pick_card^0,c
  3834   0026FE  6A26               	clrf	(??_pick_card+1)^0,c
  3835                           
  3836                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3837                           ; Switch size 1, requested type "simple"
  3838                           ; Number of cases is 1, Range of values is 0 to 0
  3839                           ; switch strategies available:
  3840                           ; Name         Instructions Cycles
  3841                           ; simple_byte            4     3 (average)
  3842                           ;	Chosen strategy is simple_byte
  3843   002700  5026               	movf	(??_pick_card+1)^0,w,c
  3844   002702  0A00               	xorlw	0	; case 0
  3845   002704  B4D8               	btfsc	status,2,c
  3846   002706  EF87  F013         	goto	l4155
  3847   00270A  EFAA  F013         	goto	l599
  3848   00270E                     l4155:
  3849                           
  3850                           ; Switch size 1, requested type "simple"
  3851                           ; Number of cases is 8, Range of values is 1 to 8
  3852                           ; switch strategies available:
  3853                           ; Name         Instructions Cycles
  3854                           ; simple_byte           25    13 (average)
  3855                           ;	Chosen strategy is simple_byte
  3856   00270E  5025               	movf	??_pick_card^0,w,c
  3857   002710  0A01               	xorlw	1	; case 1
  3858   002712  B4D8               	btfsc	status,2,c
  3859   002714  EF2F  F013         	goto	l3749
  3860   002718  0A03               	xorlw	3	; case 2
  3861   00271A  B4D8               	btfsc	status,2,c
  3862   00271C  EF39  F013         	goto	l3751
  3863   002720  0A01               	xorlw	1	; case 3
  3864   002722  B4D8               	btfsc	status,2,c
  3865   002724  EF43  F013         	goto	l3753
  3866   002728  0A07               	xorlw	7	; case 4
  3867   00272A  B4D8               	btfsc	status,2,c
  3868   00272C  EF4D  F013         	goto	l3755
  3869   002730  0A01               	xorlw	1	; case 5
  3870   002732  B4D8               	btfsc	status,2,c
  3871   002734  EF57  F013         	goto	l3757
  3872   002738  0A03               	xorlw	3	; case 6
  3873   00273A  B4D8               	btfsc	status,2,c
  3874   00273C  EF61  F013         	goto	l3759
  3875   002740  0A01               	xorlw	1	; case 7
  3876   002742  B4D8               	btfsc	status,2,c
  3877   002744  EF6B  F013         	goto	l3761
  3878   002748  0A0F               	xorlw	15	; case 8
  3879   00274A  B4D8               	btfsc	status,2,c
  3880   00274C  EF75  F013         	goto	l3763
  3881   002750  EFAA  F013         	goto	l599
  3882   002754                     l599:
  3883   002754  0012               	return		;funcret
  3884   002756                     __end_of_pick_card:
  3885                           	callstack 0
  3886                           
  3887 ;; *************** function _card_yellow *****************
  3888 ;; Defined at:
  3889 ;;		line 58 in file "manoeuvres.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3892 ;;		 -> main@motorL(9), 
  3893 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3894 ;;		 -> main@motorR(9), 
  3895 ;;  backtrack       1   29[COMRAM] unsigned char 
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;		None
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  1    wreg      void 
  3900 ;; Registers used:
  3901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3907 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3910 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3911 ;;Total ram usage:        5 bytes
  3912 ;; Hardware stack levels used: 1
  3913 ;; Hardware stack levels required when called: 5
  3914 ;; This function calls:
  3915 ;;		_headbuttReverse
  3916 ;;		_squareReverse
  3917 ;;		_turnLeft90
  3918 ;;		_turnRight90
  3919 ;; This function is called by:
  3920 ;;		_pick_card
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text18
  3925   002E38                     __ptext18:
  3926                           	callstack 0
  3927   002E38                     _card_yellow:
  3928                           	callstack 23
  3929   002E38                     
  3930                           ;manoeuvres.c: 58: void card_yellow(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 59: {;manoeuvres.c: 60:     switch (backtrack) {
  3931   002E38  EF46  F017         	goto	l3159
  3932   002E3C                     l3153:
  3933                           
  3934                           ;manoeuvres.c: 62:             headbuttReverse(mL, mR);
  3935   002E3C  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  3936   002E40  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  3937   002E44  EC95  F01B         	call	_headbuttReverse	;wreg free
  3938                           
  3939                           ;manoeuvres.c: 63:             squareReverse(mL, mR);
  3940   002E48  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  3941   002E4C  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  3942   002E50  EC06  F01B         	call	_squareReverse	;wreg free
  3943                           
  3944                           ;manoeuvres.c: 64:             turnRight90(mL, mR);
  3945   002E54  C01C  F018         	movff	card_yellow@mL,turnRight90@mL
  3946   002E58  C01D  F019         	movff	card_yellow@mR,turnRight90@mR
  3947   002E5C  EC5D  F01B         	call	_turnRight90	;wreg free
  3948                           
  3949                           ;manoeuvres.c: 65:             break;
  3950   002E60  EF5B  F017         	goto	l562
  3951   002E64                     l3155:
  3952                           
  3953                           ;manoeuvres.c: 67:             turnLeft90(mL, mR);
  3954   002E64  C01C  F018         	movff	card_yellow@mL,turnLeft90@mL
  3955   002E68  C01D  F019         	movff	card_yellow@mR,turnLeft90@mR
  3956   002E6C  EC79  F01B         	call	_turnLeft90	;wreg free
  3957                           
  3958                           ;manoeuvres.c: 68:             squareReverse(mL, mR);
  3959   002E70  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  3960   002E74  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  3961   002E78  EC06  F01B         	call	_squareReverse	;wreg free
  3962                           
  3963                           ;manoeuvres.c: 69:             headbuttReverse(mL, mR);
  3964   002E7C  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  3965   002E80  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  3966   002E84  EC95  F01B         	call	_headbuttReverse	;wreg free
  3967                           
  3968                           ;manoeuvres.c: 70:             break;
  3969   002E88  EF5B  F017         	goto	l562
  3970   002E8C                     l3159:
  3971   002E8C  501E               	movf	card_yellow@backtrack^0,w,c
  3972   002E8E  6E1F               	movwf	??_card_yellow^0,c
  3973   002E90  6A20               	clrf	(??_card_yellow+1)^0,c
  3974                           
  3975                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3976                           ; Switch size 1, requested type "simple"
  3977                           ; Number of cases is 1, Range of values is 0 to 0
  3978                           ; switch strategies available:
  3979                           ; Name         Instructions Cycles
  3980                           ; simple_byte            4     3 (average)
  3981                           ;	Chosen strategy is simple_byte
  3982   002E92  5020               	movf	(??_card_yellow+1)^0,w,c
  3983   002E94  0A00               	xorlw	0	; case 0
  3984   002E96  B4D8               	btfsc	status,2,c
  3985   002E98  EF50  F017         	goto	l4157
  3986   002E9C  EF5B  F017         	goto	l562
  3987   002EA0                     l4157:
  3988                           
  3989                           ; Switch size 1, requested type "simple"
  3990                           ; Number of cases is 2, Range of values is 0 to 1
  3991                           ; switch strategies available:
  3992                           ; Name         Instructions Cycles
  3993                           ; simple_byte            7     4 (average)
  3994                           ;	Chosen strategy is simple_byte
  3995   002EA0  501F               	movf	??_card_yellow^0,w,c
  3996   002EA2  0A00               	xorlw	0	; case 0
  3997   002EA4  B4D8               	btfsc	status,2,c
  3998   002EA6  EF1E  F017         	goto	l3153
  3999   002EAA  0A01               	xorlw	1	; case 1
  4000   002EAC  B4D8               	btfsc	status,2,c
  4001   002EAE  EF32  F017         	goto	l3155
  4002   002EB2  EF5B  F017         	goto	l562
  4003   002EB6                     l562:
  4004   002EB6  0012               	return		;funcret
  4005   002EB8                     __end_of_card_yellow:
  4006                           	callstack 0
  4007                           
  4008 ;; *************** function _card_white *****************
  4009 ;; Defined at:
  4010 ;;		line 131 in file "manoeuvres.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4013 ;;		 -> main@motorL(9), 
  4014 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4015 ;;		 -> main@motorR(9), 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      void 
  4020 ;; Registers used:
  4021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4027 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4030 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4031 ;;Total ram usage:        2 bytes
  4032 ;; Hardware stack levels used: 1
  4033 ;; Hardware stack levels required when called: 5
  4034 ;; This function calls:
  4035 ;;		_UTurn
  4036 ;;		_headbuttReverse
  4037 ;; This function is called by:
  4038 ;;		_pick_card
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text19
  4043   003866                     __ptext19:
  4044                           	callstack 0
  4045   003866                     _card_white:
  4046                           	callstack 23
  4047   003866                     
  4048                           ;manoeuvres.c: 131: void card_white(DC_motor *mL, DC_motor *mR);manoeuvres.c: 132: {;man
      +                          oeuvres.c: 133:     headbuttReverse(mL, mR);
  4049   003866  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  4050   00386A  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  4051   00386E  EC95  F01B         	call	_headbuttReverse	;wreg free
  4052                           
  4053                           ;manoeuvres.c: 134:     UTurn(mL, mR);
  4054   003872  C01C  F018         	movff	card_white@mL,UTurn@mL
  4055   003876  C01D  F019         	movff	card_white@mR,UTurn@mR
  4056   00387A  ECA7  F01A         	call	_UTurn	;wreg free
  4057                           
  4058                           ;manoeuvres.c: 135:     headbuttReverse(mL, mR);
  4059   00387E  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  4060   003882  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  4061   003886  EC95  F01B         	call	_headbuttReverse	;wreg free
  4062   00388A  0012               	return		;funcret
  4063   00388C                     __end_of_card_white:
  4064                           	callstack 0
  4065                           
  4066 ;; *************** function _card_red *****************
  4067 ;; Defined at:
  4068 ;;		line 7 in file "manoeuvres.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4071 ;;		 -> main@motorL(9), 
  4072 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4073 ;;		 -> main@motorR(9), 
  4074 ;;  backtrack       1   29[COMRAM] unsigned char 
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;		None
  4077 ;; Return value:  Size  Location     Type
  4078 ;;                  1    wreg      void 
  4079 ;; Registers used:
  4080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4081 ;; Tracked objects:
  4082 ;;		On entry : 0/0
  4083 ;;		On exit  : 0/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4086 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4088 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4089 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4090 ;;Total ram usage:        5 bytes
  4091 ;; Hardware stack levels used: 1
  4092 ;; Hardware stack levels required when called: 5
  4093 ;; This function calls:
  4094 ;;		_headbuttReverse
  4095 ;;		_turnLeft90
  4096 ;;		_turnRight90
  4097 ;; This function is called by:
  4098 ;;		_pick_card
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text20
  4103   00310E                     __ptext20:
  4104                           	callstack 0
  4105   00310E                     _card_red:
  4106                           	callstack 23
  4107   00310E                     
  4108                           ;manoeuvres.c: 7: void card_red(DC_motor *mL, DC_motor *mR, unsigned char backtrack);man
      +                          oeuvres.c: 8: {;manoeuvres.c: 9:     switch (backtrack) {
  4109   00310E  EFA5  F018         	goto	l3117
  4110   003112                     l3111:
  4111                           
  4112                           ;manoeuvres.c: 11:             headbuttReverse(mL, mR);
  4113   003112  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  4114   003116  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  4115   00311A  EC95  F01B         	call	_headbuttReverse	;wreg free
  4116                           
  4117                           ;manoeuvres.c: 12:             turnRight90(mL, mR);
  4118   00311E  C01C  F018         	movff	card_red@mL,turnRight90@mL
  4119   003122  C01D  F019         	movff	card_red@mR,turnRight90@mR
  4120   003126  EC5D  F01B         	call	_turnRight90	;wreg free
  4121                           
  4122                           ;manoeuvres.c: 13:             break;
  4123   00312A  EFBA  F018         	goto	l541
  4124   00312E                     l3113:
  4125                           
  4126                           ;manoeuvres.c: 15:             turnLeft90(mL, mR);
  4127   00312E  C01C  F018         	movff	card_red@mL,turnLeft90@mL
  4128   003132  C01D  F019         	movff	card_red@mR,turnLeft90@mR
  4129   003136  EC79  F01B         	call	_turnLeft90	;wreg free
  4130                           
  4131                           ;manoeuvres.c: 16:             headbuttReverse(mL, mR);
  4132   00313A  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  4133   00313E  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  4134   003142  EC95  F01B         	call	_headbuttReverse	;wreg free
  4135                           
  4136                           ;manoeuvres.c: 17:             break;
  4137   003146  EFBA  F018         	goto	l541
  4138   00314A                     l3117:
  4139   00314A  501E               	movf	card_red@backtrack^0,w,c
  4140   00314C  6E1F               	movwf	??_card_red^0,c
  4141   00314E  6A20               	clrf	(??_card_red+1)^0,c
  4142                           
  4143                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4144                           ; Switch size 1, requested type "simple"
  4145                           ; Number of cases is 1, Range of values is 0 to 0
  4146                           ; switch strategies available:
  4147                           ; Name         Instructions Cycles
  4148                           ; simple_byte            4     3 (average)
  4149                           ;	Chosen strategy is simple_byte
  4150   003150  5020               	movf	(??_card_red+1)^0,w,c
  4151   003152  0A00               	xorlw	0	; case 0
  4152   003154  B4D8               	btfsc	status,2,c
  4153   003156  EFAF  F018         	goto	l4159
  4154   00315A  EFBA  F018         	goto	l541
  4155   00315E                     l4159:
  4156                           
  4157                           ; Switch size 1, requested type "simple"
  4158                           ; Number of cases is 2, Range of values is 0 to 1
  4159                           ; switch strategies available:
  4160                           ; Name         Instructions Cycles
  4161                           ; simple_byte            7     4 (average)
  4162                           ;	Chosen strategy is simple_byte
  4163   00315E  501F               	movf	??_card_red^0,w,c
  4164   003160  0A00               	xorlw	0	; case 0
  4165   003162  B4D8               	btfsc	status,2,c
  4166   003164  EF89  F018         	goto	l3111
  4167   003168  0A01               	xorlw	1	; case 1
  4168   00316A  B4D8               	btfsc	status,2,c
  4169   00316C  EF97  F018         	goto	l3113
  4170   003170  EFBA  F018         	goto	l541
  4171   003174                     l541:
  4172   003174  0012               	return		;funcret
  4173   003176                     __end_of_card_red:
  4174                           	callstack 0
  4175                           
  4176 ;; *************** function _card_pink *****************
  4177 ;; Defined at:
  4178 ;;		line 77 in file "manoeuvres.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4181 ;;		 -> main@motorL(9), 
  4182 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4183 ;;		 -> main@motorR(9), 
  4184 ;;  backtrack       1   29[COMRAM] unsigned char 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      void 
  4189 ;; Registers used:
  4190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4196 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4198 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4199 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4200 ;;Total ram usage:        5 bytes
  4201 ;; Hardware stack levels used: 1
  4202 ;; Hardware stack levels required when called: 5
  4203 ;; This function calls:
  4204 ;;		_headbuttReverse
  4205 ;;		_squareReverse
  4206 ;;		_turnLeft90
  4207 ;;		_turnRight90
  4208 ;; This function is called by:
  4209 ;;		_pick_card
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text21
  4214   002EB8                     __ptext21:
  4215                           	callstack 0
  4216   002EB8                     _card_pink:
  4217                           	callstack 23
  4218   002EB8                     
  4219                           ;manoeuvres.c: 77: void card_pink(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 78: {;manoeuvres.c: 79:     switch (backtrack) {
  4220   002EB8  EF86  F017         	goto	l3173
  4221   002EBC                     l3167:
  4222                           
  4223                           ;manoeuvres.c: 81:             headbuttReverse(mL, mR);
  4224   002EBC  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  4225   002EC0  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  4226   002EC4  EC95  F01B         	call	_headbuttReverse	;wreg free
  4227                           
  4228                           ;manoeuvres.c: 82:             squareReverse(mL, mR);
  4229   002EC8  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  4230   002ECC  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  4231   002ED0  EC06  F01B         	call	_squareReverse	;wreg free
  4232                           
  4233                           ;manoeuvres.c: 83:             turnLeft90(mL, mR);
  4234   002ED4  C01C  F018         	movff	card_pink@mL,turnLeft90@mL
  4235   002ED8  C01D  F019         	movff	card_pink@mR,turnLeft90@mR
  4236   002EDC  EC79  F01B         	call	_turnLeft90	;wreg free
  4237                           
  4238                           ;manoeuvres.c: 84:             break;
  4239   002EE0  EF9B  F017         	goto	l569
  4240   002EE4                     l3169:
  4241                           
  4242                           ;manoeuvres.c: 86:             turnRight90(mL, mR);
  4243   002EE4  C01C  F018         	movff	card_pink@mL,turnRight90@mL
  4244   002EE8  C01D  F019         	movff	card_pink@mR,turnRight90@mR
  4245   002EEC  EC5D  F01B         	call	_turnRight90	;wreg free
  4246                           
  4247                           ;manoeuvres.c: 87:             squareReverse(mL, mR);
  4248   002EF0  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  4249   002EF4  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  4250   002EF8  EC06  F01B         	call	_squareReverse	;wreg free
  4251                           
  4252                           ;manoeuvres.c: 88:             headbuttReverse(mL, mR);
  4253   002EFC  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  4254   002F00  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  4255   002F04  EC95  F01B         	call	_headbuttReverse	;wreg free
  4256                           
  4257                           ;manoeuvres.c: 89:             break;
  4258   002F08  EF9B  F017         	goto	l569
  4259   002F0C                     l3173:
  4260   002F0C  501E               	movf	card_pink@backtrack^0,w,c
  4261   002F0E  6E1F               	movwf	??_card_pink^0,c
  4262   002F10  6A20               	clrf	(??_card_pink+1)^0,c
  4263                           
  4264                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4265                           ; Switch size 1, requested type "simple"
  4266                           ; Number of cases is 1, Range of values is 0 to 0
  4267                           ; switch strategies available:
  4268                           ; Name         Instructions Cycles
  4269                           ; simple_byte            4     3 (average)
  4270                           ;	Chosen strategy is simple_byte
  4271   002F12  5020               	movf	(??_card_pink+1)^0,w,c
  4272   002F14  0A00               	xorlw	0	; case 0
  4273   002F16  B4D8               	btfsc	status,2,c
  4274   002F18  EF90  F017         	goto	l4161
  4275   002F1C  EF9B  F017         	goto	l569
  4276   002F20                     l4161:
  4277                           
  4278                           ; Switch size 1, requested type "simple"
  4279                           ; Number of cases is 2, Range of values is 0 to 1
  4280                           ; switch strategies available:
  4281                           ; Name         Instructions Cycles
  4282                           ; simple_byte            7     4 (average)
  4283                           ;	Chosen strategy is simple_byte
  4284   002F20  501F               	movf	??_card_pink^0,w,c
  4285   002F22  0A00               	xorlw	0	; case 0
  4286   002F24  B4D8               	btfsc	status,2,c
  4287   002F26  EF5E  F017         	goto	l3167
  4288   002F2A  0A01               	xorlw	1	; case 1
  4289   002F2C  B4D8               	btfsc	status,2,c
  4290   002F2E  EF72  F017         	goto	l3169
  4291   002F32  EF9B  F017         	goto	l569
  4292   002F36                     l569:
  4293   002F36  0012               	return		;funcret
  4294   002F38                     __end_of_card_pink:
  4295                           	callstack 0
  4296                           
  4297 ;; *************** function _squareReverse *****************
  4298 ;; Defined at:
  4299 ;;		line 315 in file "dc_motor.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4302 ;;		 -> main@motorL(9), 
  4303 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4304 ;;		 -> main@motorR(9), 
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;		None
  4307 ;; Return value:  Size  Location     Type
  4308 ;;                  1    wreg      void 
  4309 ;; Registers used:
  4310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4319 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4320 ;;Total ram usage:        4 bytes
  4321 ;; Hardware stack levels used: 1
  4322 ;; Hardware stack levels required when called: 4
  4323 ;; This function calls:
  4324 ;;		_fullSpeedReverse
  4325 ;;		_stop
  4326 ;;		_toggle_brake_lights
  4327 ;; This function is called by:
  4328 ;;		_card_yellow
  4329 ;;		_card_pink
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           	psect	text22
  4334   00360C                     __ptext22:
  4335                           	callstack 0
  4336   00360C                     _squareReverse:
  4337                           	callstack 23
  4338   00360C                     
  4339                           ;dc_motor.c: 315: void squareReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 316: {;dc_m
      +                          otor.c: 317:     toggle_brake_lights();
  4340   00360C  EC59  F01C         	call	_toggle_brake_lights	;wreg free
  4341   003610                     
  4342                           ;dc_motor.c: 318:     fullSpeedReverse(mL, mR);
  4343   003610  C018  F013         	movff	squareReverse@mL,fullSpeedReverse@mL
  4344   003614  C019  F014         	movff	squareReverse@mR,fullSpeedReverse@mR
  4345   003618  EC8F  F015         	call	_fullSpeedReverse	;wreg free
  4346   00361C                     
  4347                           ;dc_motor.c: 319:     _delay((unsigned long)((squareDelay)*(64000000/4000.0)));
  4348   00361C  0EC7               	movlw	199
  4349   00361E  6E1B               	movwf	(??_squareReverse+1)^0,c
  4350   003620  0E0D               	movlw	13
  4351   003622  6E1A               	movwf	??_squareReverse^0,c
  4352   003624  0EC6               	movlw	198
  4353   003626                     u3337:
  4354   003626  2EE8               	decfsz	wreg,f,c
  4355   003628  D7FE               	bra	u3337
  4356   00362A  2E1A               	decfsz	??_squareReverse^0,f,c
  4357   00362C  D7FC               	bra	u3337
  4358   00362E  2E1B               	decfsz	(??_squareReverse+1)^0,f,c
  4359   003630  D7FA               	bra	u3337
  4360   003632  D000               	nop2	
  4361   003634                     
  4362                           ;dc_motor.c: 320:     stop(mL, mR);
  4363   003634  C018  F013         	movff	squareReverse@mL,stop@mL
  4364   003638  C019  F014         	movff	squareReverse@mR,stop@mR
  4365   00363C  ECD5  F016         	call	_stop	;wreg free
  4366   003640                     
  4367                           ;dc_motor.c: 321:     toggle_brake_lights();
  4368   003640  EC59  F01C         	call	_toggle_brake_lights	;wreg free
  4369   003644  0012               	return		;funcret
  4370   003646                     __end_of_squareReverse:
  4371                           	callstack 0
  4372                           
  4373 ;; *************** function _card_orange *****************
  4374 ;; Defined at:
  4375 ;;		line 96 in file "manoeuvres.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4378 ;;		 -> main@motorL(9), 
  4379 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4380 ;;		 -> main@motorR(9), 
  4381 ;;  backtrack       1   29[COMRAM] unsigned char 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4393 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4396 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4397 ;;Total ram usage:        5 bytes
  4398 ;; Hardware stack levels used: 1
  4399 ;; Hardware stack levels required when called: 5
  4400 ;; This function calls:
  4401 ;;		_headbuttReverse
  4402 ;;		_turnLeft135
  4403 ;;		_turnRight135
  4404 ;; This function is called by:
  4405 ;;		_pick_card
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text23
  4410   003176                     __ptext23:
  4411                           	callstack 0
  4412   003176                     _card_orange:
  4413                           	callstack 23
  4414   003176                     
  4415                           ;manoeuvres.c: 96: void card_orange(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 97: {;manoeuvres.c: 98:     switch (backtrack) {
  4416   003176  EFD9  F018         	goto	l3187
  4417   00317A                     l3181:
  4418                           
  4419                           ;manoeuvres.c: 100:             headbuttReverse(mL, mR);
  4420   00317A  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  4421   00317E  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  4422   003182  EC95  F01B         	call	_headbuttReverse	;wreg free
  4423                           
  4424                           ;manoeuvres.c: 101:             turnRight135(mL, mR);
  4425   003186  C01C  F018         	movff	card_orange@mL,turnRight135@mL
  4426   00318A  C01D  F019         	movff	card_orange@mR,turnRight135@mR
  4427   00318E  EC23  F01B         	call	_turnRight135	;wreg free
  4428                           
  4429                           ;manoeuvres.c: 102:             break;
  4430   003192  EFEE  F018         	goto	l576
  4431   003196                     l3183:
  4432                           
  4433                           ;manoeuvres.c: 104:             turnLeft135(mL, mR);
  4434   003196  C01C  F018         	movff	card_orange@mL,turnLeft135@mL
  4435   00319A  C01D  F019         	movff	card_orange@mR,turnLeft135@mR
  4436   00319E  EC40  F01B         	call	_turnLeft135	;wreg free
  4437                           
  4438                           ;manoeuvres.c: 105:             headbuttReverse(mL, mR);
  4439   0031A2  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  4440   0031A6  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  4441   0031AA  EC95  F01B         	call	_headbuttReverse	;wreg free
  4442                           
  4443                           ;manoeuvres.c: 106:             break;
  4444   0031AE  EFEE  F018         	goto	l576
  4445   0031B2                     l3187:
  4446   0031B2  501E               	movf	card_orange@backtrack^0,w,c
  4447   0031B4  6E1F               	movwf	??_card_orange^0,c
  4448   0031B6  6A20               	clrf	(??_card_orange+1)^0,c
  4449                           
  4450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4451                           ; Switch size 1, requested type "simple"
  4452                           ; Number of cases is 1, Range of values is 0 to 0
  4453                           ; switch strategies available:
  4454                           ; Name         Instructions Cycles
  4455                           ; simple_byte            4     3 (average)
  4456                           ;	Chosen strategy is simple_byte
  4457   0031B8  5020               	movf	(??_card_orange+1)^0,w,c
  4458   0031BA  0A00               	xorlw	0	; case 0
  4459   0031BC  B4D8               	btfsc	status,2,c
  4460   0031BE  EFE3  F018         	goto	l4163
  4461   0031C2  EFEE  F018         	goto	l576
  4462   0031C6                     l4163:
  4463                           
  4464                           ; Switch size 1, requested type "simple"
  4465                           ; Number of cases is 2, Range of values is 0 to 1
  4466                           ; switch strategies available:
  4467                           ; Name         Instructions Cycles
  4468                           ; simple_byte            7     4 (average)
  4469                           ;	Chosen strategy is simple_byte
  4470   0031C6  501F               	movf	??_card_orange^0,w,c
  4471   0031C8  0A00               	xorlw	0	; case 0
  4472   0031CA  B4D8               	btfsc	status,2,c
  4473   0031CC  EFBD  F018         	goto	l3181
  4474   0031D0  0A01               	xorlw	1	; case 1
  4475   0031D2  B4D8               	btfsc	status,2,c
  4476   0031D4  EFCB  F018         	goto	l3183
  4477   0031D8  EFEE  F018         	goto	l576
  4478   0031DC                     l576:
  4479   0031DC  0012               	return		;funcret
  4480   0031DE                     __end_of_card_orange:
  4481                           	callstack 0
  4482                           
  4483 ;; *************** function _card_green *****************
  4484 ;; Defined at:
  4485 ;;		line 24 in file "manoeuvres.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4488 ;;		 -> main@motorL(9), 
  4489 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4490 ;;		 -> main@motorR(9), 
  4491 ;;  backtrack       1   29[COMRAM] unsigned char 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      void 
  4496 ;; Registers used:
  4497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4503 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4505 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4506 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4507 ;;Total ram usage:        5 bytes
  4508 ;; Hardware stack levels used: 1
  4509 ;; Hardware stack levels required when called: 5
  4510 ;; This function calls:
  4511 ;;		_headbuttReverse
  4512 ;;		_turnLeft90
  4513 ;;		_turnRight90
  4514 ;; This function is called by:
  4515 ;;		_pick_card
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text24
  4520   0031DE                     __ptext24:
  4521                           	callstack 0
  4522   0031DE                     _card_green:
  4523                           	callstack 23
  4524   0031DE                     
  4525                           ;manoeuvres.c: 24: void card_green(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 25: {;manoeuvres.c: 26:     switch (backtrack) {
  4526   0031DE  EF0D  F019         	goto	l3131
  4527   0031E2                     l3125:
  4528                           
  4529                           ;manoeuvres.c: 28:             headbuttReverse(mL, mR);
  4530   0031E2  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  4531   0031E6  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  4532   0031EA  EC95  F01B         	call	_headbuttReverse	;wreg free
  4533                           
  4534                           ;manoeuvres.c: 29:             turnLeft90(mL, mR);
  4535   0031EE  C01C  F018         	movff	card_green@mL,turnLeft90@mL
  4536   0031F2  C01D  F019         	movff	card_green@mR,turnLeft90@mR
  4537   0031F6  EC79  F01B         	call	_turnLeft90	;wreg free
  4538                           
  4539                           ;manoeuvres.c: 30:             break;
  4540   0031FA  EF22  F019         	goto	l548
  4541   0031FE                     l3127:
  4542                           
  4543                           ;manoeuvres.c: 32:             turnRight90(mL, mR);
  4544   0031FE  C01C  F018         	movff	card_green@mL,turnRight90@mL
  4545   003202  C01D  F019         	movff	card_green@mR,turnRight90@mR
  4546   003206  EC5D  F01B         	call	_turnRight90	;wreg free
  4547                           
  4548                           ;manoeuvres.c: 33:             headbuttReverse(mL, mR);
  4549   00320A  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  4550   00320E  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  4551   003212  EC95  F01B         	call	_headbuttReverse	;wreg free
  4552                           
  4553                           ;manoeuvres.c: 34:             break;
  4554   003216  EF22  F019         	goto	l548
  4555   00321A                     l3131:
  4556   00321A  501E               	movf	card_green@backtrack^0,w,c
  4557   00321C  6E1F               	movwf	??_card_green^0,c
  4558   00321E  6A20               	clrf	(??_card_green+1)^0,c
  4559                           
  4560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4561                           ; Switch size 1, requested type "simple"
  4562                           ; Number of cases is 1, Range of values is 0 to 0
  4563                           ; switch strategies available:
  4564                           ; Name         Instructions Cycles
  4565                           ; simple_byte            4     3 (average)
  4566                           ;	Chosen strategy is simple_byte
  4567   003220  5020               	movf	(??_card_green+1)^0,w,c
  4568   003222  0A00               	xorlw	0	; case 0
  4569   003224  B4D8               	btfsc	status,2,c
  4570   003226  EF17  F019         	goto	l4165
  4571   00322A  EF22  F019         	goto	l548
  4572   00322E                     l4165:
  4573                           
  4574                           ; Switch size 1, requested type "simple"
  4575                           ; Number of cases is 2, Range of values is 0 to 1
  4576                           ; switch strategies available:
  4577                           ; Name         Instructions Cycles
  4578                           ; simple_byte            7     4 (average)
  4579                           ;	Chosen strategy is simple_byte
  4580   00322E  501F               	movf	??_card_green^0,w,c
  4581   003230  0A00               	xorlw	0	; case 0
  4582   003232  B4D8               	btfsc	status,2,c
  4583   003234  EFF1  F018         	goto	l3125
  4584   003238  0A01               	xorlw	1	; case 1
  4585   00323A  B4D8               	btfsc	status,2,c
  4586   00323C  EFFF  F018         	goto	l3127
  4587   003240  EF22  F019         	goto	l548
  4588   003244                     l548:
  4589   003244  0012               	return		;funcret
  4590   003246                     __end_of_card_green:
  4591                           	callstack 0
  4592                           
  4593 ;; *************** function _turnRight90 *****************
  4594 ;; Defined at:
  4595 ;;		line 253 in file "dc_motor.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4598 ;;		 -> main@motorL(9), 
  4599 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4600 ;;		 -> main@motorR(9), 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;		None
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      void 
  4605 ;; Registers used:
  4606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4614 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4615 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4616 ;;Total ram usage:        4 bytes
  4617 ;; Hardware stack levels used: 1
  4618 ;; Hardware stack levels required when called: 4
  4619 ;; This function calls:
  4620 ;;		_stop
  4621 ;;		_toggle_right_indicators
  4622 ;;		_turnRight
  4623 ;; This function is called by:
  4624 ;;		_card_red
  4625 ;;		_card_green
  4626 ;;		_card_yellow
  4627 ;;		_card_pink
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text25
  4632   0036BA                     __ptext25:
  4633                           	callstack 0
  4634   0036BA                     _turnRight90:
  4635                           	callstack 23
  4636   0036BA                     
  4637                           ;dc_motor.c: 253: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 254: {;dc_mot
      +                          or.c: 255:     toggle_right_indicators();
  4638   0036BA  EC7B  F01C         	call	_toggle_right_indicators	;wreg free
  4639   0036BE                     
  4640                           ;dc_motor.c: 256:     turnRight(mL, mR);
  4641   0036BE  C018  F013         	movff	turnRight90@mL,turnRight@mL
  4642   0036C2  C019  F014         	movff	turnRight90@mR,turnRight@mR
  4643   0036C6  ECD7  F014         	call	_turnRight	;wreg free
  4644   0036CA                     
  4645                           ;dc_motor.c: 257:     _delay((unsigned long)((turnRight90Delay)*(64000000/4000.0)));
  4646   0036CA  0E09               	movlw	9
  4647   0036CC  6E1B               	movwf	(??_turnRight90+1)^0,c
  4648   0036CE  0EC5               	movlw	197
  4649   0036D0  6E1A               	movwf	??_turnRight90^0,c
  4650   0036D2  0E20               	movlw	32
  4651   0036D4                     u3347:
  4652   0036D4  2EE8               	decfsz	wreg,f,c
  4653   0036D6  D7FE               	bra	u3347
  4654   0036D8  2E1A               	decfsz	??_turnRight90^0,f,c
  4655   0036DA  D7FC               	bra	u3347
  4656   0036DC  2E1B               	decfsz	(??_turnRight90+1)^0,f,c
  4657   0036DE  D7FA               	bra	u3347
  4658   0036E0                     
  4659                           ;dc_motor.c: 258:     stop(mL, mR);
  4660   0036E0  C018  F013         	movff	turnRight90@mL,stop@mL
  4661   0036E4  C019  F014         	movff	turnRight90@mR,stop@mR
  4662   0036E8  ECD5  F016         	call	_stop	;wreg free
  4663   0036EC                     
  4664                           ;dc_motor.c: 259:     toggle_right_indicators();
  4665   0036EC  EC7B  F01C         	call	_toggle_right_indicators	;wreg free
  4666   0036F0  0012               	return		;funcret
  4667   0036F2                     __end_of_turnRight90:
  4668                           	callstack 0
  4669                           
  4670 ;; *************** function _turnLeft90 *****************
  4671 ;; Defined at:
  4672 ;;		line 241 in file "dc_motor.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4675 ;;		 -> main@motorL(9), 
  4676 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4677 ;;		 -> main@motorR(9), 
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;		None
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      void 
  4682 ;; Registers used:
  4683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4691 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4692 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4693 ;;Total ram usage:        4 bytes
  4694 ;; Hardware stack levels used: 1
  4695 ;; Hardware stack levels required when called: 4
  4696 ;; This function calls:
  4697 ;;		_stop
  4698 ;;		_toggle_left_indicators
  4699 ;;		_turnLeft
  4700 ;; This function is called by:
  4701 ;;		_card_red
  4702 ;;		_card_green
  4703 ;;		_card_yellow
  4704 ;;		_card_pink
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	text26
  4709   0036F2                     __ptext26:
  4710                           	callstack 0
  4711   0036F2                     _turnLeft90:
  4712                           	callstack 23
  4713   0036F2                     
  4714                           ;dc_motor.c: 241: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 242: {;dc_moto
      +                          r.c: 243:     toggle_left_indicators();
  4715   0036F2  EC8B  F01C         	call	_toggle_left_indicators	;wreg free
  4716   0036F6                     
  4717                           ;dc_motor.c: 244:     turnLeft(mL, mR);
  4718   0036F6  C018  F013         	movff	turnLeft90@mL,turnLeft@mL
  4719   0036FA  C019  F014         	movff	turnLeft90@mR,turnLeft@mR
  4720   0036FE  EC33  F015         	call	_turnLeft	;wreg free
  4721   003702                     
  4722                           ;dc_motor.c: 245:     _delay((unsigned long)((turnLeft90Delay)*(64000000/4000.0)));
  4723   003702  0E07               	movlw	7
  4724   003704  6E1B               	movwf	(??_turnLeft90+1)^0,c
  4725   003706  0ED2               	movlw	210
  4726   003708  6E1A               	movwf	??_turnLeft90^0,c
  4727   00370A  0E6E               	movlw	110
  4728   00370C                     u3357:
  4729   00370C  2EE8               	decfsz	wreg,f,c
  4730   00370E  D7FE               	bra	u3357
  4731   003710  2E1A               	decfsz	??_turnLeft90^0,f,c
  4732   003712  D7FC               	bra	u3357
  4733   003714  2E1B               	decfsz	(??_turnLeft90+1)^0,f,c
  4734   003716  D7FA               	bra	u3357
  4735   003718                     
  4736                           ;dc_motor.c: 246:     stop(mL, mR);
  4737   003718  C018  F013         	movff	turnLeft90@mL,stop@mL
  4738   00371C  C019  F014         	movff	turnLeft90@mR,stop@mR
  4739   003720  ECD5  F016         	call	_stop	;wreg free
  4740   003724                     
  4741                           ;dc_motor.c: 247:     toggle_left_indicators();
  4742   003724  EC8B  F01C         	call	_toggle_left_indicators	;wreg free
  4743   003728  0012               	return		;funcret
  4744   00372A                     __end_of_turnLeft90:
  4745                           	callstack 0
  4746                           
  4747 ;; *************** function _card_cyan *****************
  4748 ;; Defined at:
  4749 ;;		line 113 in file "manoeuvres.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4752 ;;		 -> main@motorL(9), 
  4753 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4754 ;;		 -> main@motorR(9), 
  4755 ;;  backtrack       1   29[COMRAM] unsigned char 
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;		None
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      void 
  4760 ;; Registers used:
  4761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4767 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4769 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4770 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4771 ;;Total ram usage:        5 bytes
  4772 ;; Hardware stack levels used: 1
  4773 ;; Hardware stack levels required when called: 5
  4774 ;; This function calls:
  4775 ;;		_headbuttReverse
  4776 ;;		_turnLeft135
  4777 ;;		_turnRight135
  4778 ;; This function is called by:
  4779 ;;		_pick_card
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text27
  4784   003246                     __ptext27:
  4785                           	callstack 0
  4786   003246                     _card_cyan:
  4787                           	callstack 23
  4788   003246                     
  4789                           ;manoeuvres.c: 113: void card_cyan(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 114: {;manoeuvres.c: 115:     switch (backtrack) {
  4790   003246  EF41  F019         	goto	l3201
  4791   00324A                     l3195:
  4792                           
  4793                           ;manoeuvres.c: 117:             headbuttReverse(mL, mR);
  4794   00324A  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  4795   00324E  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  4796   003252  EC95  F01B         	call	_headbuttReverse	;wreg free
  4797                           
  4798                           ;manoeuvres.c: 118:             turnLeft135(mL, mR);
  4799   003256  C01C  F018         	movff	card_cyan@mL,turnLeft135@mL
  4800   00325A  C01D  F019         	movff	card_cyan@mR,turnLeft135@mR
  4801   00325E  EC40  F01B         	call	_turnLeft135	;wreg free
  4802                           
  4803                           ;manoeuvres.c: 119:             break;
  4804   003262  EF56  F019         	goto	l583
  4805   003266                     l3197:
  4806                           
  4807                           ;manoeuvres.c: 121:             turnRight135(mL, mR);
  4808   003266  C01C  F018         	movff	card_cyan@mL,turnRight135@mL
  4809   00326A  C01D  F019         	movff	card_cyan@mR,turnRight135@mR
  4810   00326E  EC23  F01B         	call	_turnRight135	;wreg free
  4811                           
  4812                           ;manoeuvres.c: 122:             headbuttReverse(mL, mR);
  4813   003272  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  4814   003276  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  4815   00327A  EC95  F01B         	call	_headbuttReverse	;wreg free
  4816                           
  4817                           ;manoeuvres.c: 123:             break;
  4818   00327E  EF56  F019         	goto	l583
  4819   003282                     l3201:
  4820   003282  501E               	movf	card_cyan@backtrack^0,w,c
  4821   003284  6E1F               	movwf	??_card_cyan^0,c
  4822   003286  6A20               	clrf	(??_card_cyan+1)^0,c
  4823                           
  4824                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4825                           ; Switch size 1, requested type "simple"
  4826                           ; Number of cases is 1, Range of values is 0 to 0
  4827                           ; switch strategies available:
  4828                           ; Name         Instructions Cycles
  4829                           ; simple_byte            4     3 (average)
  4830                           ;	Chosen strategy is simple_byte
  4831   003288  5020               	movf	(??_card_cyan+1)^0,w,c
  4832   00328A  0A00               	xorlw	0	; case 0
  4833   00328C  B4D8               	btfsc	status,2,c
  4834   00328E  EF4B  F019         	goto	l4167
  4835   003292  EF56  F019         	goto	l583
  4836   003296                     l4167:
  4837                           
  4838                           ; Switch size 1, requested type "simple"
  4839                           ; Number of cases is 2, Range of values is 0 to 1
  4840                           ; switch strategies available:
  4841                           ; Name         Instructions Cycles
  4842                           ; simple_byte            7     4 (average)
  4843                           ;	Chosen strategy is simple_byte
  4844   003296  501F               	movf	??_card_cyan^0,w,c
  4845   003298  0A00               	xorlw	0	; case 0
  4846   00329A  B4D8               	btfsc	status,2,c
  4847   00329C  EF25  F019         	goto	l3195
  4848   0032A0  0A01               	xorlw	1	; case 1
  4849   0032A2  B4D8               	btfsc	status,2,c
  4850   0032A4  EF33  F019         	goto	l3197
  4851   0032A8  EF56  F019         	goto	l583
  4852   0032AC                     l583:
  4853   0032AC  0012               	return		;funcret
  4854   0032AE                     __end_of_card_cyan:
  4855                           	callstack 0
  4856                           
  4857 ;; *************** function _turnRight135 *****************
  4858 ;; Defined at:
  4859 ;;		line 277 in file "dc_motor.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4862 ;;		 -> main@motorL(9), 
  4863 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4864 ;;		 -> main@motorR(9), 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;		None
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4879 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4880 ;;Total ram usage:        4 bytes
  4881 ;; Hardware stack levels used: 1
  4882 ;; Hardware stack levels required when called: 4
  4883 ;; This function calls:
  4884 ;;		_stop
  4885 ;;		_toggle_right_indicators
  4886 ;;		_turnRight
  4887 ;; This function is called by:
  4888 ;;		_card_orange
  4889 ;;		_card_cyan
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text28
  4894   003646                     __ptext28:
  4895                           	callstack 0
  4896   003646                     _turnRight135:
  4897                           	callstack 23
  4898   003646                     
  4899                           ;dc_motor.c: 277: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 278: {;dc_mo
      +                          tor.c: 279:     toggle_right_indicators();
  4900   003646  EC7B  F01C         	call	_toggle_right_indicators	;wreg free
  4901   00364A                     
  4902                           ;dc_motor.c: 280:     turnRight(mL, mR);
  4903   00364A  C018  F013         	movff	turnRight135@mL,turnRight@mL
  4904   00364E  C019  F014         	movff	turnRight135@mR,turnRight@mR
  4905   003652  ECD7  F014         	call	_turnRight	;wreg free
  4906   003656                     
  4907                           ;dc_motor.c: 281:     _delay((unsigned long)((turnRight135Delay)*(64000000/4000.0)));
  4908   003656  0E16               	movlw	22
  4909   003658  6E1B               	movwf	(??_turnRight135+1)^0,c
  4910   00365A  0E45               	movlw	69
  4911   00365C  6E1A               	movwf	??_turnRight135^0,c
  4912   00365E  0E17               	movlw	23
  4913   003660                     u3367:
  4914   003660  2EE8               	decfsz	wreg,f,c
  4915   003662  D7FE               	bra	u3367
  4916   003664  2E1A               	decfsz	??_turnRight135^0,f,c
  4917   003666  D7FC               	bra	u3367
  4918   003668  2E1B               	decfsz	(??_turnRight135+1)^0,f,c
  4919   00366A  D7FA               	bra	u3367
  4920   00366C  0000               	nop	
  4921   00366E                     
  4922                           ;dc_motor.c: 282:     stop(mL, mR);
  4923   00366E  C018  F013         	movff	turnRight135@mL,stop@mL
  4924   003672  C019  F014         	movff	turnRight135@mR,stop@mR
  4925   003676  ECD5  F016         	call	_stop	;wreg free
  4926   00367A                     
  4927                           ;dc_motor.c: 283:     toggle_right_indicators();
  4928   00367A  EC7B  F01C         	call	_toggle_right_indicators	;wreg free
  4929   00367E  0012               	return		;funcret
  4930   003680                     __end_of_turnRight135:
  4931                           	callstack 0
  4932                           
  4933 ;; *************** function _turnRight *****************
  4934 ;; Defined at:
  4935 ;;		line 148 in file "dc_motor.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  4938 ;;		 -> main@motorL(9), 
  4939 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  4940 ;;		 -> main@motorR(9), 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  rightGear       1   22[COMRAM] unsigned char 
  4943 ;;  leftGear        1   21[COMRAM] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4956 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4957 ;;Total ram usage:        5 bytes
  4958 ;; Hardware stack levels used: 1
  4959 ;; Hardware stack levels required when called: 3
  4960 ;; This function calls:
  4961 ;;		_setMotorPWM
  4962 ;; This function is called by:
  4963 ;;		_turnRight90
  4964 ;;		_turnRight135
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text29
  4969   0029AE                     __ptext29:
  4970                           	callstack 0
  4971   0029AE                     _turnRight:
  4972                           	callstack 23
  4973   0029AE  0E28               	movlw	40
  4974   0029B0  6E16               	movwf	turnRight@leftGear^0,c
  4975   0029B2  0E28               	movlw	40
  4976   0029B4  6E17               	movwf	turnRight@rightGear^0,c
  4977   0029B6                     
  4978                           ;dc_motor.c: 155:     (mL->direction) = 1;
  4979   0029B6  5013               	movf	turnRight@mL^0,w,c
  4980   0029B8  6ED9               	movwf	fsr2l,c
  4981   0029BA  6ADA               	clrf	fsr2h,c
  4982   0029BC  0E01               	movlw	1
  4983   0029BE  26D9               	addwf	fsr2l,f,c
  4984   0029C0  0E01               	movlw	1
  4985   0029C2  6EDF               	movwf	indf2,c
  4986   0029C4                     
  4987                           ;dc_motor.c: 156:     (mR->direction) = 0;
  4988   0029C4  5014               	movf	turnRight@mR^0,w,c
  4989   0029C6  6ED9               	movwf	fsr2l,c
  4990   0029C8  6ADA               	clrf	fsr2h,c
  4991   0029CA  0E01               	movlw	1
  4992   0029CC  26D9               	addwf	fsr2l,f,c
  4993   0029CE  6ADF               	clrf	indf2,c
  4994                           
  4995                           ;dc_motor.c: 159:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  4996   0029D0  EF1A  F015         	goto	l2961
  4997   0029D4                     l2949:
  4998                           
  4999                           ;dc_motor.c: 162:         if (mL->power < leftGear) {mL->power++;}
  5000   0029D4  5013               	movf	turnRight@mL^0,w,c
  5001   0029D6  6ED9               	movwf	fsr2l,c
  5002   0029D8  6ADA               	clrf	fsr2h,c
  5003   0029DA  5016               	movf	turnRight@leftGear^0,w,c
  5004   0029DC  5CDE               	subwf	postinc2,w,c
  5005   0029DE  B0D8               	btfsc	status,0,c
  5006   0029E0  EFF4  F014         	goto	u1931
  5007   0029E4  EFF6  F014         	goto	u1930
  5008   0029E8                     u1931:
  5009   0029E8  EFFA  F014         	goto	l253
  5010   0029EC                     u1930:
  5011   0029EC  5013               	movf	turnRight@mL^0,w,c
  5012   0029EE  6ED9               	movwf	fsr2l,c
  5013   0029F0  6ADA               	clrf	fsr2h,c
  5014   0029F2  2ADF               	incf	indf2,f,c
  5015   0029F4                     l253:
  5016                           
  5017                           ;dc_motor.c: 165:         if (mR->power < rightGear) {mR->power++;}
  5018   0029F4  5014               	movf	turnRight@mR^0,w,c
  5019   0029F6  6ED9               	movwf	fsr2l,c
  5020   0029F8  6ADA               	clrf	fsr2h,c
  5021   0029FA  5017               	movf	turnRight@rightGear^0,w,c
  5022   0029FC  5CDE               	subwf	postinc2,w,c
  5023   0029FE  B0D8               	btfsc	status,0,c
  5024   002A00  EF04  F015         	goto	u1941
  5025   002A04  EF06  F015         	goto	u1940
  5026   002A08                     u1941:
  5027   002A08  EF0A  F015         	goto	l2955
  5028   002A0C                     u1940:
  5029   002A0C  5014               	movf	turnRight@mR^0,w,c
  5030   002A0E  6ED9               	movwf	fsr2l,c
  5031   002A10  6ADA               	clrf	fsr2h,c
  5032   002A12  2ADF               	incf	indf2,f,c
  5033   002A14                     l2955:
  5034                           
  5035                           ;dc_motor.c: 168:         setMotorPWM(mL);
  5036   002A14  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  5037   002A18  EC60  F011         	call	_setMotorPWM	;wreg free
  5038   002A1C                     
  5039                           ;dc_motor.c: 169:         setMotorPWM(mR);
  5040   002A1C  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  5041   002A20  EC60  F011         	call	_setMotorPWM	;wreg free
  5042   002A24                     
  5043                           ;dc_motor.c: 172:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5044   002A24  0EA7               	movlw	167
  5045   002A26  6E15               	movwf	??_turnRight^0,c
  5046   002A28  0E3A               	movlw	58
  5047   002A2A                     u3377:
  5048   002A2A  2EE8               	decfsz	wreg,f,c
  5049   002A2C  D7FE               	bra	u3377
  5050   002A2E  2E15               	decfsz	??_turnRight^0,f,c
  5051   002A30  D7FC               	bra	u3377
  5052   002A32  D000               	nop2	
  5053   002A34                     l2961:
  5054                           
  5055                           ;dc_motor.c: 159:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5056   002A34  5013               	movf	turnRight@mL^0,w,c
  5057   002A36  6ED9               	movwf	fsr2l,c
  5058   002A38  6ADA               	clrf	fsr2h,c
  5059   002A3A  5016               	movf	turnRight@leftGear^0,w,c
  5060   002A3C  5CDE               	subwf	postinc2,w,c
  5061   002A3E  A0D8               	btfss	status,0,c
  5062   002A40  EF24  F015         	goto	u1951
  5063   002A44  EF26  F015         	goto	u1950
  5064   002A48                     u1951:
  5065   002A48  EFEA  F014         	goto	l2949
  5066   002A4C                     u1950:
  5067   002A4C  5014               	movf	turnRight@mR^0,w,c
  5068   002A4E  6ED9               	movwf	fsr2l,c
  5069   002A50  6ADA               	clrf	fsr2h,c
  5070   002A52  5017               	movf	turnRight@rightGear^0,w,c
  5071   002A54  5CDE               	subwf	postinc2,w,c
  5072   002A56  A0D8               	btfss	status,0,c
  5073   002A58  EF30  F015         	goto	u1961
  5074   002A5C  EF32  F015         	goto	u1960
  5075   002A60                     u1961:
  5076   002A60  EFEA  F014         	goto	l2949
  5077   002A64                     u1960:
  5078   002A64  0012               	return		;funcret
  5079   002A66                     __end_of_turnRight:
  5080                           	callstack 0
  5081                           
  5082 ;; *************** function _turnLeft135 *****************
  5083 ;; Defined at:
  5084 ;;		line 265 in file "dc_motor.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5087 ;;		 -> main@motorL(9), 
  5088 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5089 ;;		 -> main@motorR(9), 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;		None
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  1    wreg      void 
  5094 ;; Registers used:
  5095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5101 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5104 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5105 ;;Total ram usage:        4 bytes
  5106 ;; Hardware stack levels used: 1
  5107 ;; Hardware stack levels required when called: 4
  5108 ;; This function calls:
  5109 ;;		_stop
  5110 ;;		_toggle_left_indicators
  5111 ;;		_turnLeft
  5112 ;; This function is called by:
  5113 ;;		_card_orange
  5114 ;;		_card_cyan
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           	psect	text30
  5119   003680                     __ptext30:
  5120                           	callstack 0
  5121   003680                     _turnLeft135:
  5122                           	callstack 23
  5123   003680                     
  5124                           ;dc_motor.c: 265: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 266: {;dc_mot
      +                          or.c: 267:     toggle_left_indicators();
  5125   003680  EC8B  F01C         	call	_toggle_left_indicators	;wreg free
  5126   003684                     
  5127                           ;dc_motor.c: 268:     turnLeft(mL, mR);
  5128   003684  C018  F013         	movff	turnLeft135@mL,turnLeft@mL
  5129   003688  C019  F014         	movff	turnLeft135@mR,turnLeft@mR
  5130   00368C  EC33  F015         	call	_turnLeft	;wreg free
  5131   003690                     
  5132                           ;dc_motor.c: 269:     _delay((unsigned long)((turnLeft135Delay)*(64000000/4000.0)));
  5133   003690  0E15               	movlw	21
  5134   003692  6E1B               	movwf	(??_turnLeft135+1)^0,c
  5135   003694  0E4B               	movlw	75
  5136   003696  6E1A               	movwf	??_turnLeft135^0,c
  5137   003698  0EBE               	movlw	190
  5138   00369A                     u3387:
  5139   00369A  2EE8               	decfsz	wreg,f,c
  5140   00369C  D7FE               	bra	u3387
  5141   00369E  2E1A               	decfsz	??_turnLeft135^0,f,c
  5142   0036A0  D7FC               	bra	u3387
  5143   0036A2  2E1B               	decfsz	(??_turnLeft135+1)^0,f,c
  5144   0036A4  D7FA               	bra	u3387
  5145   0036A6  D000               	nop2	
  5146   0036A8                     
  5147                           ;dc_motor.c: 270:     stop(mL, mR);
  5148   0036A8  C018  F013         	movff	turnLeft135@mL,stop@mL
  5149   0036AC  C019  F014         	movff	turnLeft135@mR,stop@mR
  5150   0036B0  ECD5  F016         	call	_stop	;wreg free
  5151   0036B4                     
  5152                           ;dc_motor.c: 271:     toggle_left_indicators();
  5153   0036B4  EC8B  F01C         	call	_toggle_left_indicators	;wreg free
  5154   0036B8  0012               	return		;funcret
  5155   0036BA                     __end_of_turnLeft135:
  5156                           	callstack 0
  5157                           
  5158 ;; *************** function _card_blue *****************
  5159 ;; Defined at:
  5160 ;;		line 41 in file "manoeuvres.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5163 ;;		 -> main@motorL(9), 
  5164 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5165 ;;		 -> main@motorR(9), 
  5166 ;;  backtrack       1   29[COMRAM] unsigned char 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;		None
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  1    wreg      void 
  5171 ;; Registers used:
  5172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5178 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5181 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5182 ;;Total ram usage:        5 bytes
  5183 ;; Hardware stack levels used: 1
  5184 ;; Hardware stack levels required when called: 5
  5185 ;; This function calls:
  5186 ;;		_UTurn
  5187 ;;		_headbuttReverse
  5188 ;; This function is called by:
  5189 ;;		_pick_card
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text31
  5194   0032AE                     __ptext31:
  5195                           	callstack 0
  5196   0032AE                     _card_blue:
  5197                           	callstack 23
  5198   0032AE                     
  5199                           ;manoeuvres.c: 41: void card_blue(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 42: {;manoeuvres.c: 43:     switch (backtrack) {
  5200   0032AE  EF75  F019         	goto	l3145
  5201   0032B2                     l3139:
  5202                           
  5203                           ;manoeuvres.c: 45:             headbuttReverse(mL, mR);
  5204   0032B2  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  5205   0032B6  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  5206   0032BA  EC95  F01B         	call	_headbuttReverse	;wreg free
  5207                           
  5208                           ;manoeuvres.c: 46:             UTurn(mL, mR);
  5209   0032BE  C01C  F018         	movff	card_blue@mL,UTurn@mL
  5210   0032C2  C01D  F019         	movff	card_blue@mR,UTurn@mR
  5211   0032C6  ECA7  F01A         	call	_UTurn	;wreg free
  5212                           
  5213                           ;manoeuvres.c: 47:             break;
  5214   0032CA  EF8A  F019         	goto	l555
  5215   0032CE                     l3141:
  5216                           
  5217                           ;manoeuvres.c: 49:             UTurn(mL, mR);
  5218   0032CE  C01C  F018         	movff	card_blue@mL,UTurn@mL
  5219   0032D2  C01D  F019         	movff	card_blue@mR,UTurn@mR
  5220   0032D6  ECA7  F01A         	call	_UTurn	;wreg free
  5221                           
  5222                           ;manoeuvres.c: 50:             headbuttReverse(mL, mR);
  5223   0032DA  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  5224   0032DE  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  5225   0032E2  EC95  F01B         	call	_headbuttReverse	;wreg free
  5226                           
  5227                           ;manoeuvres.c: 51:             break;
  5228   0032E6  EF8A  F019         	goto	l555
  5229   0032EA                     l3145:
  5230   0032EA  501E               	movf	card_blue@backtrack^0,w,c
  5231   0032EC  6E1F               	movwf	??_card_blue^0,c
  5232   0032EE  6A20               	clrf	(??_card_blue+1)^0,c
  5233                           
  5234                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5235                           ; Switch size 1, requested type "simple"
  5236                           ; Number of cases is 1, Range of values is 0 to 0
  5237                           ; switch strategies available:
  5238                           ; Name         Instructions Cycles
  5239                           ; simple_byte            4     3 (average)
  5240                           ;	Chosen strategy is simple_byte
  5241   0032F0  5020               	movf	(??_card_blue+1)^0,w,c
  5242   0032F2  0A00               	xorlw	0	; case 0
  5243   0032F4  B4D8               	btfsc	status,2,c
  5244   0032F6  EF7F  F019         	goto	l4169
  5245   0032FA  EF8A  F019         	goto	l555
  5246   0032FE                     l4169:
  5247                           
  5248                           ; Switch size 1, requested type "simple"
  5249                           ; Number of cases is 2, Range of values is 0 to 1
  5250                           ; switch strategies available:
  5251                           ; Name         Instructions Cycles
  5252                           ; simple_byte            7     4 (average)
  5253                           ;	Chosen strategy is simple_byte
  5254   0032FE  501F               	movf	??_card_blue^0,w,c
  5255   003300  0A00               	xorlw	0	; case 0
  5256   003302  B4D8               	btfsc	status,2,c
  5257   003304  EF59  F019         	goto	l3139
  5258   003308  0A01               	xorlw	1	; case 1
  5259   00330A  B4D8               	btfsc	status,2,c
  5260   00330C  EF67  F019         	goto	l3141
  5261   003310  EF8A  F019         	goto	l555
  5262   003314                     l555:
  5263   003314  0012               	return		;funcret
  5264   003316                     __end_of_card_blue:
  5265                           	callstack 0
  5266                           
  5267 ;; *************** function _headbuttReverse *****************
  5268 ;; Defined at:
  5269 ;;		line 303 in file "dc_motor.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5272 ;;		 -> main@motorL(9), 
  5273 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5274 ;;		 -> main@motorR(9), 
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;		None
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      void 
  5279 ;; Registers used:
  5280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5288 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5289 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5290 ;;Total ram usage:        4 bytes
  5291 ;; Hardware stack levels used: 1
  5292 ;; Hardware stack levels required when called: 4
  5293 ;; This function calls:
  5294 ;;		_fullSpeedReverse
  5295 ;;		_stop
  5296 ;;		_toggle_brake_lights
  5297 ;; This function is called by:
  5298 ;;		_card_red
  5299 ;;		_card_green
  5300 ;;		_card_blue
  5301 ;;		_card_yellow
  5302 ;;		_card_pink
  5303 ;;		_card_orange
  5304 ;;		_card_cyan
  5305 ;;		_card_white
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text32
  5310   00372A                     __ptext32:
  5311                           	callstack 0
  5312   00372A                     _headbuttReverse:
  5313                           	callstack 23
  5314   00372A                     
  5315                           ;dc_motor.c: 303: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 304: {;dc
      +                          _motor.c: 305:     toggle_brake_lights();
  5316   00372A  EC59  F01C         	call	_toggle_brake_lights	;wreg free
  5317   00372E                     
  5318                           ;dc_motor.c: 306:     fullSpeedReverse(mL, mR);
  5319   00372E  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
  5320   003732  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
  5321   003736  EC8F  F015         	call	_fullSpeedReverse	;wreg free
  5322   00373A                     
  5323                           ;dc_motor.c: 307:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
  5324   00373A  0E43               	movlw	67
  5325   00373C  6E1B               	movwf	(??_headbuttReverse+1)^0,c
  5326   00373E  0E8F               	movlw	143
  5327   003740  6E1A               	movwf	??_headbuttReverse^0,c
  5328   003742  0EC8               	movlw	200
  5329   003744                     u3397:
  5330   003744  2EE8               	decfsz	wreg,f,c
  5331   003746  D7FE               	bra	u3397
  5332   003748  2E1A               	decfsz	??_headbuttReverse^0,f,c
  5333   00374A  D7FC               	bra	u3397
  5334   00374C  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
  5335   00374E  D7FA               	bra	u3397
  5336   003750                     
  5337                           ;dc_motor.c: 308:     stop(mL, mR);
  5338   003750  C018  F013         	movff	headbuttReverse@mL,stop@mL
  5339   003754  C019  F014         	movff	headbuttReverse@mR,stop@mR
  5340   003758  ECD5  F016         	call	_stop	;wreg free
  5341   00375C                     
  5342                           ;dc_motor.c: 309:     toggle_brake_lights();
  5343   00375C  EC59  F01C         	call	_toggle_brake_lights	;wreg free
  5344   003760  0012               	return		;funcret
  5345   003762                     __end_of_headbuttReverse:
  5346                           	callstack 0
  5347                           
  5348 ;; *************** function _toggle_brake_lights *****************
  5349 ;; Defined at:
  5350 ;;		line 48 in file "buggy_lights.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;		None
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;		None
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  1    wreg      void 
  5357 ;; Registers used:
  5358 ;;		wreg, status,2, status,0
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5366 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5367 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5368 ;;Total ram usage:        1 bytes
  5369 ;; Hardware stack levels used: 1
  5370 ;; Hardware stack levels required when called: 1
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_headbuttReverse
  5375 ;;		_squareReverse
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text33
  5380   0038B2                     __ptext33:
  5381                           	callstack 0
  5382   0038B2                     _toggle_brake_lights:
  5383                           	callstack 25
  5384   0038B2                     
  5385                           ;buggy_lights.c: 51:     LATDbits.LATD4 = !LATDbits.LATD4;
  5386   0038B2  A87C               	btfss	124,4,c	;volatile
  5387   0038B4  EF5E  F01C         	goto	u1771
  5388   0038B8  EF62  F01C         	goto	u1770
  5389   0038BC                     u1771:
  5390   0038BC  6A01               	clrf	??_toggle_brake_lights^0,c
  5391   0038BE  2A01               	incf	??_toggle_brake_lights^0,f,c
  5392   0038C0  EF63  F01C         	goto	u1788
  5393   0038C4                     u1770:
  5394   0038C4  6A01               	clrf	??_toggle_brake_lights^0,c
  5395   0038C6                     u1788:
  5396   0038C6  3A01               	swapf	??_toggle_brake_lights^0,f,c
  5397   0038C8  507C               	movf	124,w,c	;volatile
  5398   0038CA  1801               	xorwf	??_toggle_brake_lights^0,w,c
  5399   0038CC  0BEF               	andlw	-17
  5400   0038CE  1801               	xorwf	??_toggle_brake_lights^0,w,c
  5401   0038D0  6E7C               	movwf	124,c	;volatile
  5402   0038D2  0012               	return		;funcret
  5403   0038D4                     __end_of_toggle_brake_lights:
  5404                           	callstack 0
  5405                           
  5406 ;; *************** function _fullSpeedReverse *****************
  5407 ;; Defined at:
  5408 ;;		line 210 in file "dc_motor.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5411 ;;		 -> main@motorL(9), 
  5412 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5413 ;;		 -> main@motorR(9), 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  rightGear       1   22[COMRAM] unsigned char 
  5416 ;;  leftGear        1   21[COMRAM] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      void 
  5419 ;; Registers used:
  5420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5426 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5428 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5429 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5430 ;;Total ram usage:        5 bytes
  5431 ;; Hardware stack levels used: 1
  5432 ;; Hardware stack levels required when called: 3
  5433 ;; This function calls:
  5434 ;;		_setMotorPWM
  5435 ;; This function is called by:
  5436 ;;		_headbuttReverse
  5437 ;;		_squareReverse
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text34
  5442   002B1E                     __ptext34:
  5443                           	callstack 0
  5444   002B1E                     _fullSpeedReverse:
  5445                           	callstack 23
  5446   002B1E  0E14               	movlw	20
  5447   002B20  6E16               	movwf	fullSpeedReverse@leftGear^0,c
  5448   002B22  0E15               	movlw	21
  5449   002B24  6E17               	movwf	fullSpeedReverse@rightGear^0,c
  5450   002B26                     
  5451                           ;dc_motor.c: 217:     (mL->direction) = 0;
  5452   002B26  5013               	movf	fullSpeedReverse@mL^0,w,c
  5453   002B28  6ED9               	movwf	fsr2l,c
  5454   002B2A  6ADA               	clrf	fsr2h,c
  5455   002B2C  0E01               	movlw	1
  5456   002B2E  26D9               	addwf	fsr2l,f,c
  5457   002B30  6ADF               	clrf	indf2,c
  5458   002B32                     
  5459                           ;dc_motor.c: 218:     (mR->direction) = 0;
  5460   002B32  5014               	movf	fullSpeedReverse@mR^0,w,c
  5461   002B34  6ED9               	movwf	fsr2l,c
  5462   002B36  6ADA               	clrf	fsr2h,c
  5463   002B38  0E01               	movlw	1
  5464   002B3A  26D9               	addwf	fsr2l,f,c
  5465   002B3C  6ADF               	clrf	indf2,c
  5466                           
  5467                           ;dc_motor.c: 221:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5468   002B3E  EFD1  F015         	goto	l2983
  5469   002B42                     l2971:
  5470                           
  5471                           ;dc_motor.c: 224:         if (mL->power < leftGear) {mL->power++;}
  5472   002B42  5013               	movf	fullSpeedReverse@mL^0,w,c
  5473   002B44  6ED9               	movwf	fsr2l,c
  5474   002B46  6ADA               	clrf	fsr2h,c
  5475   002B48  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  5476   002B4A  5CDE               	subwf	postinc2,w,c
  5477   002B4C  B0D8               	btfsc	status,0,c
  5478   002B4E  EFAB  F015         	goto	u1971
  5479   002B52  EFAD  F015         	goto	u1970
  5480   002B56                     u1971:
  5481   002B56  EFB1  F015         	goto	l269
  5482   002B5A                     u1970:
  5483   002B5A  5013               	movf	fullSpeedReverse@mL^0,w,c
  5484   002B5C  6ED9               	movwf	fsr2l,c
  5485   002B5E  6ADA               	clrf	fsr2h,c
  5486   002B60  2ADF               	incf	indf2,f,c
  5487   002B62                     l269:
  5488                           
  5489                           ;dc_motor.c: 227:         if (mR->power < rightGear) {mR->power++;}
  5490   002B62  5014               	movf	fullSpeedReverse@mR^0,w,c
  5491   002B64  6ED9               	movwf	fsr2l,c
  5492   002B66  6ADA               	clrf	fsr2h,c
  5493   002B68  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  5494   002B6A  5CDE               	subwf	postinc2,w,c
  5495   002B6C  B0D8               	btfsc	status,0,c
  5496   002B6E  EFBB  F015         	goto	u1981
  5497   002B72  EFBD  F015         	goto	u1980
  5498   002B76                     u1981:
  5499   002B76  EFC1  F015         	goto	l2977
  5500   002B7A                     u1980:
  5501   002B7A  5014               	movf	fullSpeedReverse@mR^0,w,c
  5502   002B7C  6ED9               	movwf	fsr2l,c
  5503   002B7E  6ADA               	clrf	fsr2h,c
  5504   002B80  2ADF               	incf	indf2,f,c
  5505   002B82                     l2977:
  5506                           
  5507                           ;dc_motor.c: 230:         setMotorPWM(mL);
  5508   002B82  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  5509   002B86  EC60  F011         	call	_setMotorPWM	;wreg free
  5510   002B8A                     
  5511                           ;dc_motor.c: 231:         setMotorPWM(mR);
  5512   002B8A  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  5513   002B8E  EC60  F011         	call	_setMotorPWM	;wreg free
  5514   002B92                     
  5515                           ;dc_motor.c: 234:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5516   002B92  0EA7               	movlw	167
  5517   002B94  6E15               	movwf	??_fullSpeedReverse^0,c
  5518   002B96  0E3A               	movlw	58
  5519   002B98                     u3407:
  5520   002B98  2EE8               	decfsz	wreg,f,c
  5521   002B9A  D7FE               	bra	u3407
  5522   002B9C  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  5523   002B9E  D7FC               	bra	u3407
  5524   002BA0  D000               	nop2	
  5525   002BA2                     l2983:
  5526                           
  5527                           ;dc_motor.c: 221:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5528   002BA2  5013               	movf	fullSpeedReverse@mL^0,w,c
  5529   002BA4  6ED9               	movwf	fsr2l,c
  5530   002BA6  6ADA               	clrf	fsr2h,c
  5531   002BA8  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  5532   002BAA  5CDE               	subwf	postinc2,w,c
  5533   002BAC  A0D8               	btfss	status,0,c
  5534   002BAE  EFDB  F015         	goto	u1991
  5535   002BB2  EFDD  F015         	goto	u1990
  5536   002BB6                     u1991:
  5537   002BB6  EFA1  F015         	goto	l2971
  5538   002BBA                     u1990:
  5539   002BBA  5014               	movf	fullSpeedReverse@mR^0,w,c
  5540   002BBC  6ED9               	movwf	fsr2l,c
  5541   002BBE  6ADA               	clrf	fsr2h,c
  5542   002BC0  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  5543   002BC2  5CDE               	subwf	postinc2,w,c
  5544   002BC4  A0D8               	btfss	status,0,c
  5545   002BC6  EFE7  F015         	goto	u2001
  5546   002BCA  EFE9  F015         	goto	u2000
  5547   002BCE                     u2001:
  5548   002BCE  EFA1  F015         	goto	l2971
  5549   002BD2                     u2000:
  5550   002BD2  0012               	return		;funcret
  5551   002BD4                     __end_of_fullSpeedReverse:
  5552                           	callstack 0
  5553                           
  5554 ;; *************** function _UTurn *****************
  5555 ;; Defined at:
  5556 ;;		line 289 in file "dc_motor.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5559 ;;		 -> main@motorL(9), 
  5560 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5561 ;;		 -> main@motorR(9), 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;		None
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5576 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5577 ;;Total ram usage:        4 bytes
  5578 ;; Hardware stack levels used: 1
  5579 ;; Hardware stack levels required when called: 4
  5580 ;; This function calls:
  5581 ;;		_stop
  5582 ;;		_toggle_left_indicators
  5583 ;;		_toggle_right_indicators
  5584 ;;		_turnLeft
  5585 ;; This function is called by:
  5586 ;;		_card_blue
  5587 ;;		_card_white
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           	psect	text35
  5592   00354E                     __ptext35:
  5593                           	callstack 0
  5594   00354E                     _UTurn:
  5595                           	callstack 23
  5596   00354E                     
  5597                           ;dc_motor.c: 289: void UTurn(DC_motor *mL, DC_motor *mR);dc_motor.c: 290: {;dc_motor.c: 
      +                          291:     toggle_left_indicators();
  5598   00354E  EC8B  F01C         	call	_toggle_left_indicators	;wreg free
  5599                           
  5600                           ;dc_motor.c: 292:     toggle_right_indicators();
  5601   003552  EC7B  F01C         	call	_toggle_right_indicators	;wreg free
  5602   003556                     
  5603                           ;dc_motor.c: 293:     turnLeft(mL, mR);
  5604   003556  C018  F013         	movff	UTurn@mL,turnLeft@mL
  5605   00355A  C019  F014         	movff	UTurn@mR,turnLeft@mR
  5606   00355E  EC33  F015         	call	_turnLeft	;wreg free
  5607   003562                     
  5608                           ;dc_motor.c: 294:     _delay((unsigned long)((turn180Delay)*(64000000/4000.0)));
  5609   003562  0E21               	movlw	33
  5610   003564  6E1B               	movwf	(??_UTurn+1)^0,c
  5611   003566  0E78               	movlw	120
  5612   003568  6E1A               	movwf	??_UTurn^0,c
  5613   00356A  0E98               	movlw	152
  5614   00356C                     u3417:
  5615   00356C  2EE8               	decfsz	wreg,f,c
  5616   00356E  D7FE               	bra	u3417
  5617   003570  2E1A               	decfsz	??_UTurn^0,f,c
  5618   003572  D7FC               	bra	u3417
  5619   003574  2E1B               	decfsz	(??_UTurn+1)^0,f,c
  5620   003576  D7FA               	bra	u3417
  5621   003578  D000               	nop2	
  5622   00357A                     
  5623                           ;dc_motor.c: 295:     stop(mL, mR);
  5624   00357A  C018  F013         	movff	UTurn@mL,stop@mL
  5625   00357E  C019  F014         	movff	UTurn@mR,stop@mR
  5626   003582  ECD5  F016         	call	_stop	;wreg free
  5627   003586                     
  5628                           ;dc_motor.c: 296:     toggle_left_indicators();
  5629   003586  EC8B  F01C         	call	_toggle_left_indicators	;wreg free
  5630   00358A                     
  5631                           ;dc_motor.c: 297:     toggle_right_indicators();
  5632   00358A  EC7B  F01C         	call	_toggle_right_indicators	;wreg free
  5633   00358E  0012               	return		;funcret
  5634   003590                     __end_of_UTurn:
  5635                           	callstack 0
  5636                           
  5637 ;; *************** function _turnLeft *****************
  5638 ;; Defined at:
  5639 ;;		line 117 in file "dc_motor.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5642 ;;		 -> main@motorL(9), 
  5643 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5644 ;;		 -> main@motorR(9), 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;  rightGear       1   22[COMRAM] unsigned char 
  5647 ;;  leftGear        1   21[COMRAM] unsigned char 
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5658 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5660 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5661 ;;Total ram usage:        5 bytes
  5662 ;; Hardware stack levels used: 1
  5663 ;; Hardware stack levels required when called: 3
  5664 ;; This function calls:
  5665 ;;		_setMotorPWM
  5666 ;; This function is called by:
  5667 ;;		_turnLeft90
  5668 ;;		_turnLeft135
  5669 ;;		_UTurn
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           	psect	text36
  5674   002A66                     __ptext36:
  5675                           	callstack 0
  5676   002A66                     _turnLeft:
  5677                           	callstack 23
  5678   002A66  0E28               	movlw	40
  5679   002A68  6E16               	movwf	turnLeft@leftGear^0,c
  5680   002A6A  0E28               	movlw	40
  5681   002A6C  6E17               	movwf	turnLeft@rightGear^0,c
  5682   002A6E                     
  5683                           ;dc_motor.c: 124:     (mL->direction) = 0;
  5684   002A6E  5013               	movf	turnLeft@mL^0,w,c
  5685   002A70  6ED9               	movwf	fsr2l,c
  5686   002A72  6ADA               	clrf	fsr2h,c
  5687   002A74  0E01               	movlw	1
  5688   002A76  26D9               	addwf	fsr2l,f,c
  5689   002A78  6ADF               	clrf	indf2,c
  5690   002A7A                     
  5691                           ;dc_motor.c: 125:     (mR->direction) = 1;
  5692   002A7A  5014               	movf	turnLeft@mR^0,w,c
  5693   002A7C  6ED9               	movwf	fsr2l,c
  5694   002A7E  6ADA               	clrf	fsr2h,c
  5695   002A80  0E01               	movlw	1
  5696   002A82  26D9               	addwf	fsr2l,f,c
  5697   002A84  0E01               	movlw	1
  5698   002A86  6EDF               	movwf	indf2,c
  5699                           
  5700                           ;dc_motor.c: 128:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5701   002A88  EF76  F015         	goto	l2939
  5702   002A8C                     l2927:
  5703                           
  5704                           ;dc_motor.c: 131:         if (mL->power < leftGear) {mL->power++;}
  5705   002A8C  5013               	movf	turnLeft@mL^0,w,c
  5706   002A8E  6ED9               	movwf	fsr2l,c
  5707   002A90  6ADA               	clrf	fsr2h,c
  5708   002A92  5016               	movf	turnLeft@leftGear^0,w,c
  5709   002A94  5CDE               	subwf	postinc2,w,c
  5710   002A96  B0D8               	btfsc	status,0,c
  5711   002A98  EF50  F015         	goto	u1891
  5712   002A9C  EF52  F015         	goto	u1890
  5713   002AA0                     u1891:
  5714   002AA0  EF56  F015         	goto	l245
  5715   002AA4                     u1890:
  5716   002AA4  5013               	movf	turnLeft@mL^0,w,c
  5717   002AA6  6ED9               	movwf	fsr2l,c
  5718   002AA8  6ADA               	clrf	fsr2h,c
  5719   002AAA  2ADF               	incf	indf2,f,c
  5720   002AAC                     l245:
  5721                           
  5722                           ;dc_motor.c: 134:         if (mR->power < rightGear) {mR->power++;}
  5723   002AAC  5014               	movf	turnLeft@mR^0,w,c
  5724   002AAE  6ED9               	movwf	fsr2l,c
  5725   002AB0  6ADA               	clrf	fsr2h,c
  5726   002AB2  5017               	movf	turnLeft@rightGear^0,w,c
  5727   002AB4  5CDE               	subwf	postinc2,w,c
  5728   002AB6  B0D8               	btfsc	status,0,c
  5729   002AB8  EF60  F015         	goto	u1901
  5730   002ABC  EF62  F015         	goto	u1900
  5731   002AC0                     u1901:
  5732   002AC0  EF66  F015         	goto	l2933
  5733   002AC4                     u1900:
  5734   002AC4  5014               	movf	turnLeft@mR^0,w,c
  5735   002AC6  6ED9               	movwf	fsr2l,c
  5736   002AC8  6ADA               	clrf	fsr2h,c
  5737   002ACA  2ADF               	incf	indf2,f,c
  5738   002ACC                     l2933:
  5739                           
  5740                           ;dc_motor.c: 137:         setMotorPWM(mL);
  5741   002ACC  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5742   002AD0  EC60  F011         	call	_setMotorPWM	;wreg free
  5743   002AD4                     
  5744                           ;dc_motor.c: 138:         setMotorPWM(mR);
  5745   002AD4  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5746   002AD8  EC60  F011         	call	_setMotorPWM	;wreg free
  5747   002ADC                     
  5748                           ;dc_motor.c: 141:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5749   002ADC  0EA7               	movlw	167
  5750   002ADE  6E15               	movwf	??_turnLeft^0,c
  5751   002AE0  0E3A               	movlw	58
  5752   002AE2                     u3427:
  5753   002AE2  2EE8               	decfsz	wreg,f,c
  5754   002AE4  D7FE               	bra	u3427
  5755   002AE6  2E15               	decfsz	??_turnLeft^0,f,c
  5756   002AE8  D7FC               	bra	u3427
  5757   002AEA  D000               	nop2	
  5758   002AEC                     l2939:
  5759                           
  5760                           ;dc_motor.c: 128:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5761   002AEC  5013               	movf	turnLeft@mL^0,w,c
  5762   002AEE  6ED9               	movwf	fsr2l,c
  5763   002AF0  6ADA               	clrf	fsr2h,c
  5764   002AF2  5016               	movf	turnLeft@leftGear^0,w,c
  5765   002AF4  5CDE               	subwf	postinc2,w,c
  5766   002AF6  A0D8               	btfss	status,0,c
  5767   002AF8  EF80  F015         	goto	u1911
  5768   002AFC  EF82  F015         	goto	u1910
  5769   002B00                     u1911:
  5770   002B00  EF46  F015         	goto	l2927
  5771   002B04                     u1910:
  5772   002B04  5014               	movf	turnLeft@mR^0,w,c
  5773   002B06  6ED9               	movwf	fsr2l,c
  5774   002B08  6ADA               	clrf	fsr2h,c
  5775   002B0A  5017               	movf	turnLeft@rightGear^0,w,c
  5776   002B0C  5CDE               	subwf	postinc2,w,c
  5777   002B0E  A0D8               	btfss	status,0,c
  5778   002B10  EF8C  F015         	goto	u1921
  5779   002B14  EF8E  F015         	goto	u1920
  5780   002B18                     u1921:
  5781   002B18  EF46  F015         	goto	l2927
  5782   002B1C                     u1920:
  5783   002B1C  0012               	return		;funcret
  5784   002B1E                     __end_of_turnLeft:
  5785                           	callstack 0
  5786                           
  5787 ;; *************** function _toggle_right_indicators *****************
  5788 ;; Defined at:
  5789 ;;		line 84 in file "buggy_lights.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;		None
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;		None
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, status,2, status,0
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5807 ;;Total ram usage:        1 bytes
  5808 ;; Hardware stack levels used: 1
  5809 ;; Hardware stack levels required when called: 1
  5810 ;; This function calls:
  5811 ;;		Nothing
  5812 ;; This function is called by:
  5813 ;;		_turnRight90
  5814 ;;		_turnRight135
  5815 ;;		_UTurn
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text37
  5820   0038F6                     __ptext37:
  5821                           	callstack 0
  5822   0038F6                     _toggle_right_indicators:
  5823                           	callstack 25
  5824   0038F6                     
  5825                           ;buggy_lights.c: 87:     LATHbits.LATH0 = !LATHbits.LATH0;
  5826   0038F6  A080               	btfss	128,0,c	;volatile
  5827   0038F8  EF80  F01C         	goto	u1811
  5828   0038FC  EF84  F01C         	goto	u1810
  5829   003900                     u1811:
  5830   003900  6A01               	clrf	??_toggle_right_indicators^0,c
  5831   003902  2A01               	incf	??_toggle_right_indicators^0,f,c
  5832   003904  EF85  F01C         	goto	u1828
  5833   003908                     u1810:
  5834   003908  6A01               	clrf	??_toggle_right_indicators^0,c
  5835   00390A                     u1828:
  5836   00390A  5080               	movf	128,w,c	;volatile
  5837   00390C  1801               	xorwf	??_toggle_right_indicators^0,w,c
  5838   00390E  0BFE               	andlw	-2
  5839   003910  1801               	xorwf	??_toggle_right_indicators^0,w,c
  5840   003912  6E80               	movwf	128,c	;volatile
  5841   003914  0012               	return		;funcret
  5842   003916                     __end_of_toggle_right_indicators:
  5843                           	callstack 0
  5844                           
  5845 ;; *************** function _toggle_left_indicators *****************
  5846 ;; Defined at:
  5847 ;;		line 75 in file "buggy_lights.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;		None
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;		None
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  1    wreg      void 
  5854 ;; Registers used:
  5855 ;;		wreg, status,2, status,0
  5856 ;; Tracked objects:
  5857 ;;		On entry : 0/0
  5858 ;;		On exit  : 0/0
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5865 ;;Total ram usage:        1 bytes
  5866 ;; Hardware stack levels used: 1
  5867 ;; Hardware stack levels required when called: 1
  5868 ;; This function calls:
  5869 ;;		Nothing
  5870 ;; This function is called by:
  5871 ;;		_turnLeft90
  5872 ;;		_turnLeft135
  5873 ;;		_UTurn
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text38
  5878   003916                     __ptext38:
  5879                           	callstack 0
  5880   003916                     _toggle_left_indicators:
  5881                           	callstack 25
  5882   003916                     
  5883                           ;buggy_lights.c: 78:     LATFbits.LATF0 = !LATFbits.LATF0;
  5884   003916  A07E               	btfss	126,0,c	;volatile
  5885   003918  EF90  F01C         	goto	u1791
  5886   00391C  EF94  F01C         	goto	u1790
  5887   003920                     u1791:
  5888   003920  6A01               	clrf	??_toggle_left_indicators^0,c
  5889   003922  2A01               	incf	??_toggle_left_indicators^0,f,c
  5890   003924  EF95  F01C         	goto	u1808
  5891   003928                     u1790:
  5892   003928  6A01               	clrf	??_toggle_left_indicators^0,c
  5893   00392A                     u1808:
  5894   00392A  507E               	movf	126,w,c	;volatile
  5895   00392C  1801               	xorwf	??_toggle_left_indicators^0,w,c
  5896   00392E  0BFE               	andlw	-2
  5897   003930  1801               	xorwf	??_toggle_left_indicators^0,w,c
  5898   003932  6E7E               	movwf	126,c	;volatile
  5899   003934  0012               	return		;funcret
  5900   003936                     __end_of_toggle_left_indicators:
  5901                           	callstack 0
  5902                           
  5903 ;; *************** function _stop *****************
  5904 ;; Defined at:
  5905 ;;		line 94 in file "dc_motor.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5908 ;;		 -> main@motorL(9), 
  5909 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5910 ;;		 -> main@motorR(9), 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5924 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5925 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5926 ;;Total ram usage:        3 bytes
  5927 ;; Hardware stack levels used: 1
  5928 ;; Hardware stack levels required when called: 3
  5929 ;; This function calls:
  5930 ;;		_setMotorPWM
  5931 ;; This function is called by:
  5932 ;;		_turnLeft90
  5933 ;;		_turnRight90
  5934 ;;		_turnLeft135
  5935 ;;		_turnRight135
  5936 ;;		_UTurn
  5937 ;;		_headbuttReverse
  5938 ;;		_squareReverse
  5939 ;;		_forward_navigation
  5940 ;;		_return_to_sender
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text39
  5945   002DAA                     __ptext39:
  5946                           	callstack 0
  5947   002DAA                     _stop:
  5948                           	callstack 26
  5949   002DAA                     
  5950                           ;dc_motor.c: 94: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 95: {;dc_motor.c: 97:
      +                               while ((mL->power > 0) || (mR->power > 0)){
  5951   002DAA  EF05  F017         	goto	l2917
  5952   002DAE                     l2903:
  5953                           
  5954                           ;dc_motor.c: 100:         if (mL->power > 0) {mL->power--;}
  5955   002DAE  5013               	movf	stop@mL^0,w,c
  5956   002DB0  6ED9               	movwf	fsr2l,c
  5957   002DB2  6ADA               	clrf	fsr2h,c
  5958   002DB4  50DF               	movf	indf2,w,c
  5959   002DB6  B4D8               	btfsc	status,2,c
  5960   002DB8  EFE0  F016         	goto	u1851
  5961   002DBC  EFE2  F016         	goto	u1850
  5962   002DC0                     u1851:
  5963   002DC0  EFE6  F016         	goto	l2907
  5964   002DC4                     u1850:
  5965   002DC4  5013               	movf	stop@mL^0,w,c
  5966   002DC6  6ED9               	movwf	fsr2l,c
  5967   002DC8  6ADA               	clrf	fsr2h,c
  5968   002DCA  06DF               	decf	indf2,f,c
  5969   002DCC                     l2907:
  5970                           
  5971                           ;dc_motor.c: 103:         if (mR->power > 0) {mR->power--;}
  5972   002DCC  5014               	movf	stop@mR^0,w,c
  5973   002DCE  6ED9               	movwf	fsr2l,c
  5974   002DD0  6ADA               	clrf	fsr2h,c
  5975   002DD2  50DF               	movf	indf2,w,c
  5976   002DD4  B4D8               	btfsc	status,2,c
  5977   002DD6  EFEF  F016         	goto	u1861
  5978   002DDA  EFF1  F016         	goto	u1860
  5979   002DDE                     u1861:
  5980   002DDE  EFF5  F016         	goto	l2911
  5981   002DE2                     u1860:
  5982   002DE2  5014               	movf	stop@mR^0,w,c
  5983   002DE4  6ED9               	movwf	fsr2l,c
  5984   002DE6  6ADA               	clrf	fsr2h,c
  5985   002DE8  06DF               	decf	indf2,f,c
  5986   002DEA                     l2911:
  5987                           
  5988                           ;dc_motor.c: 106:         setMotorPWM(mL);
  5989   002DEA  C013  F00E         	movff	stop@mL,setMotorPWM@m
  5990   002DEE  EC60  F011         	call	_setMotorPWM	;wreg free
  5991   002DF2                     
  5992                           ;dc_motor.c: 107:         setMotorPWM(mR);
  5993   002DF2  C014  F00E         	movff	stop@mR,setMotorPWM@m
  5994   002DF6  EC60  F011         	call	_setMotorPWM	;wreg free
  5995   002DFA                     
  5996                           ;dc_motor.c: 110:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5997   002DFA  0EA7               	movlw	167
  5998   002DFC  6E15               	movwf	??_stop^0,c
  5999   002DFE  0E3A               	movlw	58
  6000   002E00                     u3437:
  6001   002E00  2EE8               	decfsz	wreg,f,c
  6002   002E02  D7FE               	bra	u3437
  6003   002E04  2E15               	decfsz	??_stop^0,f,c
  6004   002E06  D7FC               	bra	u3437
  6005   002E08  D000               	nop2	
  6006   002E0A                     l2917:
  6007                           
  6008                           ;dc_motor.c: 97:     while ((mL->power > 0) || (mR->power > 0)){
  6009   002E0A  5013               	movf	stop@mL^0,w,c
  6010   002E0C  6ED9               	movwf	fsr2l,c
  6011   002E0E  6ADA               	clrf	fsr2h,c
  6012   002E10  50DF               	movf	indf2,w,c
  6013   002E12  A4D8               	btfss	status,2,c
  6014   002E14  EF0E  F017         	goto	u1871
  6015   002E18  EF10  F017         	goto	u1870
  6016   002E1C                     u1871:
  6017   002E1C  EFD7  F016         	goto	l2903
  6018   002E20                     u1870:
  6019   002E20  5014               	movf	stop@mR^0,w,c
  6020   002E22  6ED9               	movwf	fsr2l,c
  6021   002E24  6ADA               	clrf	fsr2h,c
  6022   002E26  50DF               	movf	indf2,w,c
  6023   002E28  A4D8               	btfss	status,2,c
  6024   002E2A  EF19  F017         	goto	u1881
  6025   002E2E  EF1B  F017         	goto	u1880
  6026   002E32                     u1881:
  6027   002E32  EFD7  F016         	goto	l2903
  6028   002E36                     u1880:
  6029   002E36  0012               	return		;funcret
  6030   002E38                     __end_of_stop:
  6031                           	callstack 0
  6032                           
  6033 ;; *************** function _fullSpeedAhead *****************
  6034 ;; Defined at:
  6035 ;;		line 179 in file "dc_motor.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6038 ;;		 -> main@motorL(9), 
  6039 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6040 ;;		 -> main@motorR(9), 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;  rightGear       1   22[COMRAM] unsigned char 
  6043 ;;  leftGear        1   21[COMRAM] unsigned char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      void 
  6046 ;; Registers used:
  6047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6053 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6055 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6056 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6057 ;;Total ram usage:        5 bytes
  6058 ;; Hardware stack levels used: 1
  6059 ;; Hardware stack levels required when called: 3
  6060 ;; This function calls:
  6061 ;;		_setMotorPWM
  6062 ;; This function is called by:
  6063 ;;		_forward_navigation
  6064 ;;		_return_to_sender
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text40
  6069   0028F4                     __ptext40:
  6070                           	callstack 0
  6071   0028F4                     _fullSpeedAhead:
  6072                           	callstack 26
  6073   0028F4  0E14               	movlw	20
  6074   0028F6  6E16               	movwf	fullSpeedAhead@leftGear^0,c
  6075   0028F8  0E14               	movlw	20
  6076   0028FA  6E17               	movwf	fullSpeedAhead@rightGear^0,c
  6077   0028FC                     
  6078                           ;dc_motor.c: 186:     (mL->direction) = 1;
  6079   0028FC  5013               	movf	fullSpeedAhead@mL^0,w,c
  6080   0028FE  6ED9               	movwf	fsr2l,c
  6081   002900  6ADA               	clrf	fsr2h,c
  6082   002902  0E01               	movlw	1
  6083   002904  26D9               	addwf	fsr2l,f,c
  6084   002906  0E01               	movlw	1
  6085   002908  6EDF               	movwf	indf2,c
  6086   00290A                     
  6087                           ;dc_motor.c: 187:     (mR->direction) = 1;
  6088   00290A  5014               	movf	fullSpeedAhead@mR^0,w,c
  6089   00290C  6ED9               	movwf	fsr2l,c
  6090   00290E  6ADA               	clrf	fsr2h,c
  6091   002910  0E01               	movlw	1
  6092   002912  26D9               	addwf	fsr2l,f,c
  6093   002914  0E01               	movlw	1
  6094   002916  6EDF               	movwf	indf2,c
  6095                           
  6096                           ;dc_motor.c: 190:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  6097   002918  EFBE  F014         	goto	l3743
  6098   00291C                     l3731:
  6099                           
  6100                           ;dc_motor.c: 193:         if (mL->power < leftGear) {mL->power++;}
  6101   00291C  5013               	movf	fullSpeedAhead@mL^0,w,c
  6102   00291E  6ED9               	movwf	fsr2l,c
  6103   002920  6ADA               	clrf	fsr2h,c
  6104   002922  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  6105   002924  5CDE               	subwf	postinc2,w,c
  6106   002926  B0D8               	btfsc	status,0,c
  6107   002928  EF98  F014         	goto	u3071
  6108   00292C  EF9A  F014         	goto	u3070
  6109   002930                     u3071:
  6110   002930  EF9E  F014         	goto	l261
  6111   002934                     u3070:
  6112   002934  5013               	movf	fullSpeedAhead@mL^0,w,c
  6113   002936  6ED9               	movwf	fsr2l,c
  6114   002938  6ADA               	clrf	fsr2h,c
  6115   00293A  2ADF               	incf	indf2,f,c
  6116   00293C                     l261:
  6117                           
  6118                           ;dc_motor.c: 196:         if (mR->power < rightGear) {mR->power++;}
  6119   00293C  5014               	movf	fullSpeedAhead@mR^0,w,c
  6120   00293E  6ED9               	movwf	fsr2l,c
  6121   002940  6ADA               	clrf	fsr2h,c
  6122   002942  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  6123   002944  5CDE               	subwf	postinc2,w,c
  6124   002946  B0D8               	btfsc	status,0,c
  6125   002948  EFA8  F014         	goto	u3081
  6126   00294C  EFAA  F014         	goto	u3080
  6127   002950                     u3081:
  6128   002950  EFAE  F014         	goto	l3737
  6129   002954                     u3080:
  6130   002954  5014               	movf	fullSpeedAhead@mR^0,w,c
  6131   002956  6ED9               	movwf	fsr2l,c
  6132   002958  6ADA               	clrf	fsr2h,c
  6133   00295A  2ADF               	incf	indf2,f,c
  6134   00295C                     l3737:
  6135                           
  6136                           ;dc_motor.c: 199:         setMotorPWM(mL);
  6137   00295C  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  6138   002960  EC60  F011         	call	_setMotorPWM	;wreg free
  6139   002964                     
  6140                           ;dc_motor.c: 200:         setMotorPWM(mR);
  6141   002964  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  6142   002968  EC60  F011         	call	_setMotorPWM	;wreg free
  6143   00296C                     
  6144                           ;dc_motor.c: 203:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  6145   00296C  0EA7               	movlw	167
  6146   00296E  6E15               	movwf	??_fullSpeedAhead^0,c
  6147   002970  0E3A               	movlw	58
  6148   002972                     u3447:
  6149   002972  2EE8               	decfsz	wreg,f,c
  6150   002974  D7FE               	bra	u3447
  6151   002976  2E15               	decfsz	??_fullSpeedAhead^0,f,c
  6152   002978  D7FC               	bra	u3447
  6153   00297A  D000               	nop2	
  6154   00297C                     l3743:
  6155                           
  6156                           ;dc_motor.c: 190:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  6157   00297C  5013               	movf	fullSpeedAhead@mL^0,w,c
  6158   00297E  6ED9               	movwf	fsr2l,c
  6159   002980  6ADA               	clrf	fsr2h,c
  6160   002982  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  6161   002984  5CDE               	subwf	postinc2,w,c
  6162   002986  A0D8               	btfss	status,0,c
  6163   002988  EFC8  F014         	goto	u3091
  6164   00298C  EFCA  F014         	goto	u3090
  6165   002990                     u3091:
  6166   002990  EF8E  F014         	goto	l3731
  6167   002994                     u3090:
  6168   002994  5014               	movf	fullSpeedAhead@mR^0,w,c
  6169   002996  6ED9               	movwf	fsr2l,c
  6170   002998  6ADA               	clrf	fsr2h,c
  6171   00299A  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  6172   00299C  5CDE               	subwf	postinc2,w,c
  6173   00299E  A0D8               	btfss	status,0,c
  6174   0029A0  EFD4  F014         	goto	u3101
  6175   0029A4  EFD6  F014         	goto	u3100
  6176   0029A8                     u3101:
  6177   0029A8  EF8E  F014         	goto	l3731
  6178   0029AC                     u3100:
  6179   0029AC  0012               	return		;funcret
  6180   0029AE                     __end_of_fullSpeedAhead:
  6181                           	callstack 0
  6182                           
  6183 ;; *************** function _setMotorPWM *****************
  6184 ;; Defined at:
  6185 ;;		line 69 in file "dc_motor.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  m               1   13[COMRAM] PTR struct DC_motor
  6188 ;;		 -> main@motorR(9), main@motorL(9), 
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;  negDuty         1   17[COMRAM] unsigned char 
  6191 ;;  posDuty         1   16[COMRAM] unsigned char 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      void 
  6194 ;; Registers used:
  6195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6201 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6202 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6203 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6204 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6205 ;;Total ram usage:        5 bytes
  6206 ;; Hardware stack levels used: 1
  6207 ;; Hardware stack levels required when called: 2
  6208 ;; This function calls:
  6209 ;;		___lwdiv
  6210 ;;		___wmul
  6211 ;; This function is called by:
  6212 ;;		_stop
  6213 ;;		_turnLeft
  6214 ;;		_turnRight
  6215 ;;		_fullSpeedAhead
  6216 ;;		_fullSpeedReverse
  6217 ;; This function uses a non-reentrant model
  6218 ;;
  6219                           
  6220                           	psect	text41
  6221   0022C0                     __ptext41:
  6222                           	callstack 0
  6223   0022C0                     _setMotorPWM:
  6224                           	callstack 26
  6225   0022C0                     
  6226                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6227   0022C0  500E               	movf	setMotorPWM@m^0,w,c
  6228   0022C2  6ED9               	movwf	fsr2l,c
  6229   0022C4  6ADA               	clrf	fsr2h,c
  6230   0022C6  0E02               	movlw	2
  6231   0022C8  26D9               	addwf	fsr2l,f,c
  6232   0022CA  50DF               	movf	indf2,w,c
  6233   0022CC  B4D8               	btfsc	status,2,c
  6234   0022CE  EF6B  F011         	goto	u1731
  6235   0022D2  EF6D  F011         	goto	u1730
  6236   0022D6                     u1731:
  6237   0022D6  EF9D  F011         	goto	l2851
  6238   0022DA                     u1730:
  6239   0022DA                     
  6240                           ;dc_motor.c: 74:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  6241   0022DA  500E               	movf	setMotorPWM@m^0,w,c
  6242   0022DC  6ED9               	movwf	fsr2l,c
  6243   0022DE  6ADA               	clrf	fsr2h,c
  6244   0022E0  50DF               	movf	indf2,w,c
  6245   0022E2  6E0F               	movwf	??_setMotorPWM^0,c
  6246   0022E4  500F               	movf	??_setMotorPWM^0,w,c
  6247   0022E6  6E01               	movwf	___wmul@multiplier^0,c
  6248   0022E8  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6249   0022EA  500E               	movf	setMotorPWM@m^0,w,c
  6250   0022EC  6ED9               	movwf	fsr2l,c
  6251   0022EE  6ADA               	clrf	fsr2h,c
  6252   0022F0  0E03               	movlw	3
  6253   0022F2  26D9               	addwf	fsr2l,f,c
  6254   0022F4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6255   0022F8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6256   0022FC  EC46  F01C         	call	___wmul	;wreg free
  6257   002300  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6258   002304  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6259   002308  0E00               	movlw	0
  6260   00230A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6261   00230C  0E64               	movlw	100
  6262   00230E  6E09               	movwf	___lwdiv@divisor^0,c
  6263   002310  EC18  F018         	call	___lwdiv	;wreg free
  6264   002314  500E               	movf	setMotorPWM@m^0,w,c
  6265   002316  6ED9               	movwf	fsr2l,c
  6266   002318  6ADA               	clrf	fsr2h,c
  6267   00231A  0E03               	movlw	3
  6268   00231C  26D9               	addwf	fsr2l,f,c
  6269   00231E  50DF               	movf	indf2,w,c
  6270   002320  6E10               	movwf	(??_setMotorPWM+1)^0,c
  6271   002322  5007               	movf	?___lwdiv^0,w,c
  6272   002324  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  6273   002326  6E11               	movwf	setMotorPWM@posDuty^0,c
  6274   002328                     
  6275                           ;dc_motor.c: 75:         negDuty=(unsigned char)(m->PWMperiod);
  6276   002328  500E               	movf	setMotorPWM@m^0,w,c
  6277   00232A  6ED9               	movwf	fsr2l,c
  6278   00232C  6ADA               	clrf	fsr2h,c
  6279   00232E  0E03               	movlw	3
  6280   002330  26D9               	addwf	fsr2l,f,c
  6281   002332  50DF               	movf	indf2,w,c
  6282   002334  6E12               	movwf	setMotorPWM@negDuty^0,c
  6283                           
  6284                           ;dc_motor.c: 76:     }
  6285   002336  EFBE  F011         	goto	l2855
  6286   00233A                     l2851:
  6287                           
  6288                           ;dc_motor.c: 78:         posDuty=0;
  6289   00233A  0E00               	movlw	0
  6290   00233C  6E11               	movwf	setMotorPWM@posDuty^0,c
  6291   00233E                     
  6292                           ;dc_motor.c: 79:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  6293   00233E  500E               	movf	setMotorPWM@m^0,w,c
  6294   002340  6ED9               	movwf	fsr2l,c
  6295   002342  6ADA               	clrf	fsr2h,c
  6296   002344  50DF               	movf	indf2,w,c
  6297   002346  6E0F               	movwf	??_setMotorPWM^0,c
  6298   002348  500F               	movf	??_setMotorPWM^0,w,c
  6299   00234A  6E01               	movwf	___wmul@multiplier^0,c
  6300   00234C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6301   00234E  500E               	movf	setMotorPWM@m^0,w,c
  6302   002350  6ED9               	movwf	fsr2l,c
  6303   002352  6ADA               	clrf	fsr2h,c
  6304   002354  0E03               	movlw	3
  6305   002356  26D9               	addwf	fsr2l,f,c
  6306   002358  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6307   00235C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6308   002360  EC46  F01C         	call	___wmul	;wreg free
  6309   002364  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6310   002368  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6311   00236C  0E00               	movlw	0
  6312   00236E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6313   002370  0E64               	movlw	100
  6314   002372  6E09               	movwf	___lwdiv@divisor^0,c
  6315   002374  EC18  F018         	call	___lwdiv	;wreg free
  6316   002378  5007               	movf	?___lwdiv^0,w,c
  6317   00237A  6E12               	movwf	setMotorPWM@negDuty^0,c
  6318   00237C                     l2855:
  6319                           
  6320                           ;dc_motor.c: 82:     if (m->direction) {
  6321   00237C  500E               	movf	setMotorPWM@m^0,w,c
  6322   00237E  6ED9               	movwf	fsr2l,c
  6323   002380  6ADA               	clrf	fsr2h,c
  6324   002382  0E01               	movlw	1
  6325   002384  26D9               	addwf	fsr2l,f,c
  6326   002386  50DF               	movf	indf2,w,c
  6327   002388  B4D8               	btfsc	status,2,c
  6328   00238A  EFC9  F011         	goto	u1741
  6329   00238E  EFCB  F011         	goto	u1740
  6330   002392                     u1741:
  6331   002392  EFEB  F011         	goto	l2859
  6332   002396                     u1740:
  6333   002396                     
  6334                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6335   002396  500E               	movf	setMotorPWM@m^0,w,c
  6336   002398  6ED9               	movwf	fsr2l,c
  6337   00239A  6ADA               	clrf	fsr2h,c
  6338   00239C  0E05               	movlw	5
  6339   00239E  26D9               	addwf	fsr2l,f,c
  6340   0023A0  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6341   0023A4  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6342   0023A8  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6343   0023AC  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6344   0023B0  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6345                           
  6346                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6347   0023B4  500E               	movf	setMotorPWM@m^0,w,c
  6348   0023B6  6ED9               	movwf	fsr2l,c
  6349   0023B8  6ADA               	clrf	fsr2h,c
  6350   0023BA  0E07               	movlw	7
  6351   0023BC  26D9               	addwf	fsr2l,f,c
  6352   0023BE  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6353   0023C2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6354   0023C6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6355   0023CA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6356   0023CE  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6357                           
  6358                           ;dc_motor.c: 85:     } else {
  6359   0023D2  EF09  F012         	goto	l232
  6360   0023D6                     l2859:
  6361                           
  6362                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6363   0023D6  500E               	movf	setMotorPWM@m^0,w,c
  6364   0023D8  6ED9               	movwf	fsr2l,c
  6365   0023DA  6ADA               	clrf	fsr2h,c
  6366   0023DC  0E05               	movlw	5
  6367   0023DE  26D9               	addwf	fsr2l,f,c
  6368   0023E0  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6369   0023E4  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6370   0023E8  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6371   0023EC  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6372   0023F0  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6373                           
  6374                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6375   0023F4  500E               	movf	setMotorPWM@m^0,w,c
  6376   0023F6  6ED9               	movwf	fsr2l,c
  6377   0023F8  6ADA               	clrf	fsr2h,c
  6378   0023FA  0E07               	movlw	7
  6379   0023FC  26D9               	addwf	fsr2l,f,c
  6380   0023FE  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6381   002402  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6382   002406  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6383   00240A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6384   00240E  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6385   002412                     l232:
  6386   002412  0012               	return		;funcret
  6387   002414                     __end_of_setMotorPWM:
  6388                           	callstack 0
  6389                           
  6390 ;; *************** function ___wmul *****************
  6391 ;; Defined at:
  6392 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  multiplier      2    0[COMRAM] unsigned int 
  6395 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  product         2    4[COMRAM] unsigned int 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  2    0[COMRAM] unsigned int 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0, prodl, prodh
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6407 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6410 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6411 ;;Total ram usage:        6 bytes
  6412 ;; Hardware stack levels used: 1
  6413 ;; Hardware stack levels required when called: 1
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		_setMotorPWM
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text42
  6422   00388C                     __ptext42:
  6423                           	callstack 0
  6424   00388C                     ___wmul:
  6425                           	callstack 26
  6426   00388C  5001               	movf	___wmul@multiplier^0,w,c
  6427   00388E  0203               	mulwf	___wmul@multiplicand^0,c
  6428   003890  CFF3 F005          	movff	prodl,___wmul@product
  6429   003894  CFF4 F006          	movff	prodh,___wmul@product+1
  6430   003898  5001               	movf	___wmul@multiplier^0,w,c
  6431   00389A  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  6432   00389C  50F3               	movf	243,w,c
  6433   00389E  2606               	addwf	(___wmul@product+1)^0,f,c
  6434   0038A0  5002               	movf	(___wmul@multiplier+1)^0,w,c
  6435   0038A2  0203               	mulwf	___wmul@multiplicand^0,c
  6436   0038A4  50F3               	movf	243,w,c
  6437   0038A6  2606               	addwf	(___wmul@product+1)^0,f,c
  6438   0038A8  C005  F001         	movff	___wmul@product,?___wmul
  6439   0038AC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6440   0038B0  0012               	return		;funcret
  6441   0038B2                     __end_of___wmul:
  6442                           	callstack 0
  6443                           
  6444 ;; *************** function ___lwdiv *****************
  6445 ;; Defined at:
  6446 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;  dividend        2    6[COMRAM] unsigned int 
  6449 ;;  divisor         2    8[COMRAM] unsigned int 
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;  quotient        2   10[COMRAM] unsigned int 
  6452 ;;  counter         1   12[COMRAM] unsigned char 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  2    6[COMRAM] unsigned int 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6462 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6463 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6465 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6466 ;;Total ram usage:        7 bytes
  6467 ;; Hardware stack levels used: 1
  6468 ;; Hardware stack levels required when called: 1
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_setMotorPWM
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text43
  6477   003030                     __ptext43:
  6478                           	callstack 0
  6479   003030                     ___lwdiv:
  6480                           	callstack 26
  6481   003030  0E00               	movlw	0
  6482   003032  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6483   003034  0E00               	movlw	0
  6484   003036  6E0B               	movwf	___lwdiv@quotient^0,c
  6485   003038  5009               	movf	___lwdiv@divisor^0,w,c
  6486   00303A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6487   00303C  B4D8               	btfsc	status,2,c
  6488   00303E  EF23  F018         	goto	u1701
  6489   003042  EF25  F018         	goto	u1700
  6490   003046                     u1701:
  6491   003046  EF4D  F018         	goto	l1240
  6492   00304A                     u1700:
  6493   00304A  0E01               	movlw	1
  6494   00304C  6E0D               	movwf	___lwdiv@counter^0,c
  6495   00304E  EF2D  F018         	goto	l2831
  6496   003052                     l2829:
  6497   003052  90D8               	bcf	status,0,c
  6498   003054  3609               	rlcf	___lwdiv@divisor^0,f,c
  6499   003056  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6500   003058  2A0D               	incf	___lwdiv@counter^0,f,c
  6501   00305A                     l2831:
  6502   00305A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6503   00305C  EF32  F018         	goto	u1711
  6504   003060  EF34  F018         	goto	u1710
  6505   003064                     u1711:
  6506   003064  EF29  F018         	goto	l2829
  6507   003068                     u1710:
  6508   003068                     l2833:
  6509   003068  90D8               	bcf	status,0,c
  6510   00306A  360B               	rlcf	___lwdiv@quotient^0,f,c
  6511   00306C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6512   00306E  5009               	movf	___lwdiv@divisor^0,w,c
  6513   003070  5C07               	subwf	___lwdiv@dividend^0,w,c
  6514   003072  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6515   003074  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6516   003076  A0D8               	btfss	status,0,c
  6517   003078  EF40  F018         	goto	u1721
  6518   00307C  EF42  F018         	goto	u1720
  6519   003080                     u1721:
  6520   003080  EF47  F018         	goto	l2841
  6521   003084                     u1720:
  6522   003084  5009               	movf	___lwdiv@divisor^0,w,c
  6523   003086  5E07               	subwf	___lwdiv@dividend^0,f,c
  6524   003088  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6525   00308A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6526   00308C  800B               	bsf	___lwdiv@quotient^0,0,c
  6527   00308E                     l2841:
  6528   00308E  90D8               	bcf	status,0,c
  6529   003090  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6530   003092  3209               	rrcf	___lwdiv@divisor^0,f,c
  6531   003094  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6532   003096  EF34  F018         	goto	l2833
  6533   00309A                     l1240:
  6534   00309A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6535   00309E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6536   0030A2  0012               	return		;funcret
  6537   0030A4                     __end_of___lwdiv:
  6538                           	callstack 0
  6539                           
  6540 ;; *************** function _convert_HSV *****************
  6541 ;; Defined at:
  6542 ;;		line 211 in file "color.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  6545 ;;		 -> main@HSV_colour(6), 
  6546 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  6547 ;;		 -> main@RGBC_colour(8), 
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  temp            4   51[COMRAM] unsigned long 
  6550 ;;  temp            4   47[COMRAM] unsigned long 
  6551 ;;  temp            4   43[COMRAM] unsigned long 
  6552 ;;  temp            4   39[COMRAM] unsigned long 
  6553 ;;  temp            4   55[COMRAM] unsigned long 
  6554 ;;  temp            4   35[COMRAM] unsigned long 
  6555 ;;  temp            4   31[COMRAM] unsigned long 
  6556 ;;  C               2   63[COMRAM] unsigned int 
  6557 ;;  M               2   61[COMRAM] unsigned int 
  6558 ;;  hue_scale       2   59[COMRAM] unsigned int 
  6559 ;;  hue             2   29[COMRAM] unsigned int 
  6560 ;;  sat             2   27[COMRAM] unsigned int 
  6561 ;;  m               2   25[COMRAM] unsigned int 
  6562 ;;  sat_scale       2   23[COMRAM] unsigned int 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      void 
  6565 ;; Registers used:
  6566 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6573 ;;      Locals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6574 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6575 ;;      Totals:        52       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6576 ;;Total ram usage:       52 bytes
  6577 ;; Hardware stack levels used: 1
  6578 ;; Hardware stack levels required when called: 2
  6579 ;; This function calls:
  6580 ;;		___lldiv
  6581 ;;		___lmul
  6582 ;;		_max_RGB
  6583 ;;		_min_RGB
  6584 ;; This function is called by:
  6585 ;;		_forward_navigation
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text44
  6590   000E1A                     __ptext44:
  6591                           	callstack 0
  6592   000E1A                     _convert_HSV:
  6593                           	callstack 27
  6594   000E1A                     
  6595                           ;color.c: 211: void convert_HSV(struct HSV_val *p1, struct RGBC_val *p2);color.c: 212: {
      +                          ;color.c: 213:     unsigned int hue = 0;
  6596   000E1A  0E00               	movlw	0
  6597   000E1C  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  6598   000E1E  0E00               	movlw	0
  6599   000E20  6E1E               	movwf	convert_HSV@hue^0,c
  6600                           
  6601                           ;color.c: 215:     unsigned int hue_scale = 60;
  6602   000E22  0E00               	movlw	0
  6603   000E24  6E3D               	movwf	(convert_HSV@hue_scale+1)^0,c
  6604   000E26  0E3C               	movlw	60
  6605   000E28  6E3C               	movwf	convert_HSV@hue_scale^0,c
  6606                           
  6607                           ;color.c: 216:     unsigned int sat_scale = 100;
  6608   000E2A  0E00               	movlw	0
  6609   000E2C  6E19               	movwf	(convert_HSV@sat_scale+1)^0,c
  6610   000E2E  0E64               	movlw	100
  6611   000E30  6E18               	movwf	convert_HSV@sat_scale^0,c
  6612   000E32                     
  6613                           ;color.c: 218:     unsigned int M = max_RGB(p2);
  6614   000E32  C00F  F001         	movff	convert_HSV@p2,max_RGB@p
  6615   000E36  ECDA  F017         	call	_max_RGB	;wreg free
  6616   000E3A  C001  F03E         	movff	?_max_RGB,convert_HSV@M
  6617   000E3E  C002  F03F         	movff	?_max_RGB+1,convert_HSV@M+1
  6618   000E42                     
  6619                           ;color.c: 219:     unsigned int m = min_RGB(p2);
  6620   000E42  C00F  F001         	movff	convert_HSV@p2,min_RGB@p
  6621   000E46  EC9C  F017         	call	_min_RGB	;wreg free
  6622   000E4A  C001  F01A         	movff	?_min_RGB,convert_HSV@m
  6623   000E4E  C002  F01B         	movff	?_min_RGB+1,convert_HSV@m+1
  6624   000E52                     
  6625                           ;color.c: 220:     unsigned int C = M - m;
  6626   000E52  501A               	movf	convert_HSV@m^0,w,c
  6627   000E54  5C3E               	subwf	convert_HSV@M^0,w,c
  6628   000E56  6E40               	movwf	convert_HSV@C^0,c
  6629   000E58  501B               	movf	(convert_HSV@m+1)^0,w,c
  6630   000E5A  583F               	subwfb	(convert_HSV@M+1)^0,w,c
  6631   000E5C  6E41               	movwf	(convert_HSV@C+1)^0,c
  6632   000E5E                     
  6633                           ;color.c: 222:     if (C == 0) {
  6634   000E5E  5040               	movf	convert_HSV@C^0,w,c
  6635   000E60  1041               	iorwf	(convert_HSV@C+1)^0,w,c
  6636   000E62  A4D8               	btfss	status,2,c
  6637   000E64  EF36  F007         	goto	u2631
  6638   000E68  EF38  F007         	goto	u2630
  6639   000E6C                     u2631:
  6640   000E6C  EF3E  F007         	goto	l3533
  6641   000E70                     u2630:
  6642   000E70                     
  6643                           ;color.c: 223:         hue = 0;
  6644   000E70  0E00               	movlw	0
  6645   000E72  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  6646   000E74  0E00               	movlw	0
  6647   000E76  6E1E               	movwf	convert_HSV@hue^0,c
  6648                           
  6649                           ;color.c: 224:     } else {
  6650   000E78  EF0E  F00A         	goto	l3617
  6651   000E7C                     l3533:
  6652                           
  6653                           ;color.c: 234:         if (M == p2->R) {
  6654   000E7C  500F               	movf	convert_HSV@p2^0,w,c
  6655   000E7E  6ED9               	movwf	fsr2l,c
  6656   000E80  6ADA               	clrf	fsr2h,c
  6657   000E82  503E               	movf	convert_HSV@M^0,w,c
  6658   000E84  18DE               	xorwf	postinc2,w,c
  6659   000E86  E107               	bnz	u2641
  6660   000E88  503F               	movf	(convert_HSV@M+1)^0,w,c
  6661   000E8A  18DE               	xorwf	postinc2,w,c
  6662   000E8C  A4D8               	btfss	status,2,c
  6663   000E8E  EF4B  F007         	goto	u2641
  6664   000E92  EF4D  F007         	goto	u2640
  6665   000E96                     u2641:
  6666   000E96  EF3A  F008         	goto	l3561
  6667   000E9A                     u2640:
  6668   000E9A                     
  6669                           ;color.c: 235:             if (p2->G >= p2->B) {
  6670   000E9A  500F               	movf	convert_HSV@p2^0,w,c
  6671   000E9C  6ED9               	movwf	fsr2l,c
  6672   000E9E  6ADA               	clrf	fsr2h,c
  6673   000EA0  0E04               	movlw	4
  6674   000EA2  26D9               	addwf	fsr2l,f,c
  6675   000EA4  500F               	movf	convert_HSV@p2^0,w,c
  6676   000EA6  6EE1               	movwf	fsr1l,c
  6677   000EA8  6AE2               	clrf	fsr1h,c
  6678   000EAA  0E02               	movlw	2
  6679   000EAC  26E1               	addwf	fsr1l,f,c
  6680   000EAE  50DE               	movf	postinc2,w,c
  6681   000EB0  5CE6               	subwf	postinc1,w,c
  6682   000EB2  50DE               	movf	postinc2,w,c
  6683   000EB4  58E6               	subwfb	postinc1,w,c
  6684   000EB6  A0D8               	btfss	status,0,c
  6685   000EB8  EF60  F007         	goto	u2651
  6686   000EBC  EF62  F007         	goto	u2650
  6687   000EC0                     u2651:
  6688   000EC0  EFC2  F007         	goto	l3549
  6689   000EC4                     u2650:
  6690   000EC4                     
  6691                           ;color.c: 239:                 temp *= 0;
  6692   000EC4  0E00               	movlw	0
  6693   000EC6  6E24               	movwf	convert_HSV@temp^0,c
  6694   000EC8  0E00               	movlw	0
  6695   000ECA  6E25               	movwf	(convert_HSV@temp+1)^0,c
  6696   000ECC  0E00               	movlw	0
  6697   000ECE  6E26               	movwf	(convert_HSV@temp+2)^0,c
  6698   000ED0  0E00               	movlw	0
  6699   000ED2  6E27               	movwf	(convert_HSV@temp+3)^0,c
  6700   000ED4                     
  6701                           ;color.c: 240:                 temp += (unsigned long)(p2->G - p2->B);
  6702   000ED4  500F               	movf	convert_HSV@p2^0,w,c
  6703   000ED6  6ED9               	movwf	fsr2l,c
  6704   000ED8  6ADA               	clrf	fsr2h,c
  6705   000EDA  0E04               	movlw	4
  6706   000EDC  26D9               	addwf	fsr2l,f,c
  6707   000EDE  CFDE F010          	movff	postinc2,??_convert_HSV
  6708   000EE2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6709   000EE6  500F               	movf	convert_HSV@p2^0,w,c
  6710   000EE8  6ED9               	movwf	fsr2l,c
  6711   000EEA  6ADA               	clrf	fsr2h,c
  6712   000EEC  0E02               	movlw	2
  6713   000EEE  26D9               	addwf	fsr2l,f,c
  6714   000EF0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6715   000EF4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6716   000EF8  5010               	movf	??_convert_HSV^0,w,c
  6717   000EFA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6718   000EFC  6E14               	movwf	(??_convert_HSV+4)^0,c
  6719   000EFE  5011               	movf	(??_convert_HSV+1)^0,w,c
  6720   000F00  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6721   000F02  6E15               	movwf	(??_convert_HSV+5)^0,c
  6722   000F04  5014               	movf	(??_convert_HSV+4)^0,w,c
  6723   000F06  2624               	addwf	convert_HSV@temp^0,f,c
  6724   000F08  5015               	movf	(??_convert_HSV+5)^0,w,c
  6725   000F0A  2225               	addwfc	(convert_HSV@temp+1)^0,f,c
  6726   000F0C  0E00               	movlw	0
  6727   000F0E  2226               	addwfc	(convert_HSV@temp+2)^0,f,c
  6728   000F10  0E00               	movlw	0
  6729   000F12  2227               	addwfc	(convert_HSV@temp+3)^0,f,c
  6730   000F14                     
  6731                           ;color.c: 241:                 temp *= (unsigned long)hue_scale;
  6732   000F14  C024  F001         	movff	convert_HSV@temp,___lmul@multiplier
  6733   000F18  C025  F002         	movff	convert_HSV@temp+1,___lmul@multiplier+1
  6734   000F1C  C026  F003         	movff	convert_HSV@temp+2,___lmul@multiplier+2
  6735   000F20  C027  F004         	movff	convert_HSV@temp+3,___lmul@multiplier+3
  6736   000F24  0E3C               	movlw	60
  6737   000F26  6E05               	movwf	___lmul@multiplicand^0,c
  6738   000F28  0E00               	movlw	0
  6739   000F2A  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6740   000F2C  0E00               	movlw	0
  6741   000F2E  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6742   000F30  0E00               	movlw	0
  6743   000F32  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6744   000F34  EC52  F018         	call	___lmul	;wreg free
  6745   000F38  C001  F024         	movff	?___lmul,convert_HSV@temp
  6746   000F3C  C002  F025         	movff	?___lmul+1,convert_HSV@temp+1
  6747   000F40  C003  F026         	movff	?___lmul+2,convert_HSV@temp+2
  6748   000F44  C004  F027         	movff	?___lmul+3,convert_HSV@temp+3
  6749   000F48                     
  6750                           ;color.c: 242:                 temp /= (unsigned long)C;
  6751   000F48  C024  F001         	movff	convert_HSV@temp,___lldiv@dividend
  6752   000F4C  C025  F002         	movff	convert_HSV@temp+1,___lldiv@dividend+1
  6753   000F50  C026  F003         	movff	convert_HSV@temp+2,___lldiv@dividend+2
  6754   000F54  C027  F004         	movff	convert_HSV@temp+3,___lldiv@dividend+3
  6755   000F58  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6756   000F5C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6757   000F60  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6758   000F62  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6759   000F64  ECEA  F015         	call	___lldiv	;wreg free
  6760   000F68  C001  F024         	movff	?___lldiv,convert_HSV@temp
  6761   000F6C  C002  F025         	movff	?___lldiv+1,convert_HSV@temp+1
  6762   000F70  C003  F026         	movff	?___lldiv+2,convert_HSV@temp+2
  6763   000F74  C004  F027         	movff	?___lldiv+3,convert_HSV@temp+3
  6764   000F78                     
  6765                           ;color.c: 243:                 hue = (unsigned int)temp;
  6766   000F78  C024  F01E         	movff	convert_HSV@temp,convert_HSV@hue
  6767   000F7C  C025  F01F         	movff	convert_HSV@temp+1,convert_HSV@hue+1
  6768                           
  6769                           ;color.c: 244:             } else {
  6770   000F80  EF3A  F008         	goto	l3561
  6771   000F84                     l3549:
  6772                           
  6773                           ;color.c: 246:                 unsigned long temp;;color.c: 247:                 temp = 
      +                          (unsigned long)C;
  6774   000F84  C040  F038         	movff	convert_HSV@C,convert_HSV@temp_610
  6775   000F88  C041  F039         	movff	convert_HSV@C+1,convert_HSV@temp_610+1
  6776   000F8C  6A3A               	clrf	(convert_HSV@temp_610+2)^0,c
  6777   000F8E  6A3B               	clrf	(convert_HSV@temp_610+3)^0,c
  6778   000F90                     
  6779                           ;color.c: 248:                 temp *= 6;
  6780   000F90  C038  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  6781   000F94  C039  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  6782   000F98  C03A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  6783   000F9C  C03B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  6784   000FA0  0E06               	movlw	6
  6785   000FA2  6E05               	movwf	___lmul@multiplicand^0,c
  6786   000FA4  0E00               	movlw	0
  6787   000FA6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6788   000FA8  0E00               	movlw	0
  6789   000FAA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6790   000FAC  0E00               	movlw	0
  6791   000FAE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6792   000FB0  EC52  F018         	call	___lmul	;wreg free
  6793   000FB4  C001  F038         	movff	?___lmul,convert_HSV@temp_610
  6794   000FB8  C002  F039         	movff	?___lmul+1,convert_HSV@temp_610+1
  6795   000FBC  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_610+2
  6796   000FC0  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_610+3
  6797   000FC4                     
  6798                           ;color.c: 249:                 temp -= (unsigned long)(p2->B - p2->G);
  6799   000FC4  500F               	movf	convert_HSV@p2^0,w,c
  6800   000FC6  6ED9               	movwf	fsr2l,c
  6801   000FC8  6ADA               	clrf	fsr2h,c
  6802   000FCA  0E02               	movlw	2
  6803   000FCC  26D9               	addwf	fsr2l,f,c
  6804   000FCE  CFDE F010          	movff	postinc2,??_convert_HSV
  6805   000FD2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6806   000FD6  500F               	movf	convert_HSV@p2^0,w,c
  6807   000FD8  6ED9               	movwf	fsr2l,c
  6808   000FDA  6ADA               	clrf	fsr2h,c
  6809   000FDC  0E04               	movlw	4
  6810   000FDE  26D9               	addwf	fsr2l,f,c
  6811   000FE0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6812   000FE4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6813   000FE8  5010               	movf	??_convert_HSV^0,w,c
  6814   000FEA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6815   000FEC  6E14               	movwf	(??_convert_HSV+4)^0,c
  6816   000FEE  5011               	movf	(??_convert_HSV+1)^0,w,c
  6817   000FF0  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6818   000FF2  6E15               	movwf	(??_convert_HSV+5)^0,c
  6819   000FF4  6A16               	clrf	(??_convert_HSV+6)^0,c
  6820   000FF6  6A17               	clrf	(??_convert_HSV+7)^0,c
  6821   000FF8  5014               	movf	(??_convert_HSV+4)^0,w,c
  6822   000FFA  5E38               	subwf	convert_HSV@temp_610^0,f,c
  6823   000FFC  5015               	movf	(??_convert_HSV+5)^0,w,c
  6824   000FFE  5A39               	subwfb	(convert_HSV@temp_610+1)^0,f,c
  6825   001000  5016               	movf	(??_convert_HSV+6)^0,w,c
  6826   001002  5A3A               	subwfb	(convert_HSV@temp_610+2)^0,f,c
  6827   001004  5017               	movf	(??_convert_HSV+7)^0,w,c
  6828   001006  5A3B               	subwfb	(convert_HSV@temp_610+3)^0,f,c
  6829   001008                     
  6830                           ;color.c: 250:                 temp *= (unsigned long)hue_scale;
  6831   001008  C038  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  6832   00100C  C039  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  6833   001010  C03A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  6834   001014  C03B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  6835   001018  0E3C               	movlw	60
  6836   00101A  6E05               	movwf	___lmul@multiplicand^0,c
  6837   00101C  0E00               	movlw	0
  6838   00101E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6839   001020  0E00               	movlw	0
  6840   001022  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6841   001024  0E00               	movlw	0
  6842   001026  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6843   001028  EC52  F018         	call	___lmul	;wreg free
  6844   00102C  C001  F038         	movff	?___lmul,convert_HSV@temp_610
  6845   001030  C002  F039         	movff	?___lmul+1,convert_HSV@temp_610+1
  6846   001034  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_610+2
  6847   001038  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_610+3
  6848   00103C                     
  6849                           ;color.c: 251:                 temp /= (unsigned long)C;
  6850   00103C  C038  F001         	movff	convert_HSV@temp_610,___lldiv@dividend
  6851   001040  C039  F002         	movff	convert_HSV@temp_610+1,___lldiv@dividend+1
  6852   001044  C03A  F003         	movff	convert_HSV@temp_610+2,___lldiv@dividend+2
  6853   001048  C03B  F004         	movff	convert_HSV@temp_610+3,___lldiv@dividend+3
  6854   00104C  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6855   001050  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6856   001054  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6857   001056  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6858   001058  ECEA  F015         	call	___lldiv	;wreg free
  6859   00105C  C001  F038         	movff	?___lldiv,convert_HSV@temp_610
  6860   001060  C002  F039         	movff	?___lldiv+1,convert_HSV@temp_610+1
  6861   001064  C003  F03A         	movff	?___lldiv+2,convert_HSV@temp_610+2
  6862   001068  C004  F03B         	movff	?___lldiv+3,convert_HSV@temp_610+3
  6863   00106C                     
  6864                           ;color.c: 252:                 hue = (unsigned int)temp;
  6865   00106C  C038  F01E         	movff	convert_HSV@temp_610,convert_HSV@hue
  6866   001070  C039  F01F         	movff	convert_HSV@temp_610+1,convert_HSV@hue+1
  6867   001074                     l3561:
  6868                           
  6869                           ;color.c: 255:         if (M == p2->G) {
  6870   001074  500F               	movf	convert_HSV@p2^0,w,c
  6871   001076  6ED9               	movwf	fsr2l,c
  6872   001078  6ADA               	clrf	fsr2h,c
  6873   00107A  0E02               	movlw	2
  6874   00107C  26D9               	addwf	fsr2l,f,c
  6875   00107E  503E               	movf	convert_HSV@M^0,w,c
  6876   001080  18DE               	xorwf	postinc2,w,c
  6877   001082  E107               	bnz	u2661
  6878   001084  503F               	movf	(convert_HSV@M+1)^0,w,c
  6879   001086  18DE               	xorwf	postinc2,w,c
  6880   001088  A4D8               	btfss	status,2,c
  6881   00108A  EF49  F008         	goto	u2661
  6882   00108E  EF4B  F008         	goto	u2660
  6883   001092                     u2661:
  6884   001092  EF20  F009         	goto	l3589
  6885   001096                     u2660:
  6886   001096                     
  6887                           ;color.c: 256:             if (p2->B >= p2->R) {
  6888   001096  500F               	movf	convert_HSV@p2^0,w,c
  6889   001098  6ED9               	movwf	fsr2l,c
  6890   00109A  6ADA               	clrf	fsr2h,c
  6891   00109C  500F               	movf	convert_HSV@p2^0,w,c
  6892   00109E  6EE1               	movwf	fsr1l,c
  6893   0010A0  6AE2               	clrf	fsr1h,c
  6894   0010A2  0E04               	movlw	4
  6895   0010A4  26E1               	addwf	fsr1l,f,c
  6896   0010A6  50DE               	movf	postinc2,w,c
  6897   0010A8  5CE6               	subwf	postinc1,w,c
  6898   0010AA  50DE               	movf	postinc2,w,c
  6899   0010AC  58E6               	subwfb	postinc1,w,c
  6900   0010AE  A0D8               	btfss	status,0,c
  6901   0010B0  EF5C  F008         	goto	u2671
  6902   0010B4  EF5E  F008         	goto	u2670
  6903   0010B8                     u2671:
  6904   0010B8  EFBF  F008         	goto	l3577
  6905   0010BC                     u2670:
  6906   0010BC                     
  6907                           ;color.c: 258:                 unsigned long temp;;color.c: 259:                 temp = 
      +                          (unsigned long)C;
  6908   0010BC  C040  F028         	movff	convert_HSV@C,convert_HSV@temp_611
  6909   0010C0  C041  F029         	movff	convert_HSV@C+1,convert_HSV@temp_611+1
  6910   0010C4  6A2A               	clrf	(convert_HSV@temp_611+2)^0,c
  6911   0010C6  6A2B               	clrf	(convert_HSV@temp_611+3)^0,c
  6912   0010C8                     
  6913                           ;color.c: 260:                 temp *= 2;
  6914   0010C8  90D8               	bcf	status,0,c
  6915   0010CA  3628               	rlcf	convert_HSV@temp_611^0,f,c
  6916   0010CC  3629               	rlcf	(convert_HSV@temp_611+1)^0,f,c
  6917   0010CE  362A               	rlcf	(convert_HSV@temp_611+2)^0,f,c
  6918   0010D0  362B               	rlcf	(convert_HSV@temp_611+3)^0,f,c
  6919   0010D2                     
  6920                           ;color.c: 261:                 temp += (unsigned long)(p2->B - p2->R);
  6921   0010D2  500F               	movf	convert_HSV@p2^0,w,c
  6922   0010D4  6ED9               	movwf	fsr2l,c
  6923   0010D6  6ADA               	clrf	fsr2h,c
  6924   0010D8  CFDE F010          	movff	postinc2,??_convert_HSV
  6925   0010DC  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6926   0010E0  500F               	movf	convert_HSV@p2^0,w,c
  6927   0010E2  6ED9               	movwf	fsr2l,c
  6928   0010E4  6ADA               	clrf	fsr2h,c
  6929   0010E6  0E04               	movlw	4
  6930   0010E8  26D9               	addwf	fsr2l,f,c
  6931   0010EA  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6932   0010EE  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6933   0010F2  5010               	movf	??_convert_HSV^0,w,c
  6934   0010F4  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6935   0010F6  6E14               	movwf	(??_convert_HSV+4)^0,c
  6936   0010F8  5011               	movf	(??_convert_HSV+1)^0,w,c
  6937   0010FA  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6938   0010FC  6E15               	movwf	(??_convert_HSV+5)^0,c
  6939   0010FE  5014               	movf	(??_convert_HSV+4)^0,w,c
  6940   001100  2628               	addwf	convert_HSV@temp_611^0,f,c
  6941   001102  5015               	movf	(??_convert_HSV+5)^0,w,c
  6942   001104  2229               	addwfc	(convert_HSV@temp_611+1)^0,f,c
  6943   001106  0E00               	movlw	0
  6944   001108  222A               	addwfc	(convert_HSV@temp_611+2)^0,f,c
  6945   00110A  0E00               	movlw	0
  6946   00110C  222B               	addwfc	(convert_HSV@temp_611+3)^0,f,c
  6947   00110E                     
  6948                           ;color.c: 262:                 temp *= (unsigned long)hue_scale;
  6949   00110E  C028  F001         	movff	convert_HSV@temp_611,___lmul@multiplier
  6950   001112  C029  F002         	movff	convert_HSV@temp_611+1,___lmul@multiplier+1
  6951   001116  C02A  F003         	movff	convert_HSV@temp_611+2,___lmul@multiplier+2
  6952   00111A  C02B  F004         	movff	convert_HSV@temp_611+3,___lmul@multiplier+3
  6953   00111E  0E3C               	movlw	60
  6954   001120  6E05               	movwf	___lmul@multiplicand^0,c
  6955   001122  0E00               	movlw	0
  6956   001124  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6957   001126  0E00               	movlw	0
  6958   001128  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6959   00112A  0E00               	movlw	0
  6960   00112C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6961   00112E  EC52  F018         	call	___lmul	;wreg free
  6962   001132  C001  F028         	movff	?___lmul,convert_HSV@temp_611
  6963   001136  C002  F029         	movff	?___lmul+1,convert_HSV@temp_611+1
  6964   00113A  C003  F02A         	movff	?___lmul+2,convert_HSV@temp_611+2
  6965   00113E  C004  F02B         	movff	?___lmul+3,convert_HSV@temp_611+3
  6966   001142                     
  6967                           ;color.c: 263:                 temp /= (unsigned long)C;
  6968   001142  C028  F001         	movff	convert_HSV@temp_611,___lldiv@dividend
  6969   001146  C029  F002         	movff	convert_HSV@temp_611+1,___lldiv@dividend+1
  6970   00114A  C02A  F003         	movff	convert_HSV@temp_611+2,___lldiv@dividend+2
  6971   00114E  C02B  F004         	movff	convert_HSV@temp_611+3,___lldiv@dividend+3
  6972   001152  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6973   001156  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6974   00115A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6975   00115C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6976   00115E  ECEA  F015         	call	___lldiv	;wreg free
  6977   001162  C001  F028         	movff	?___lldiv,convert_HSV@temp_611
  6978   001166  C002  F029         	movff	?___lldiv+1,convert_HSV@temp_611+1
  6979   00116A  C003  F02A         	movff	?___lldiv+2,convert_HSV@temp_611+2
  6980   00116E  C004  F02B         	movff	?___lldiv+3,convert_HSV@temp_611+3
  6981   001172                     
  6982                           ;color.c: 264:                 hue = (unsigned int)temp;
  6983   001172  C028  F01E         	movff	convert_HSV@temp_611,convert_HSV@hue
  6984   001176  C029  F01F         	movff	convert_HSV@temp_611+1,convert_HSV@hue+1
  6985                           
  6986                           ;color.c: 265:             } else {
  6987   00117A  EF20  F009         	goto	l3589
  6988   00117E                     l3577:
  6989                           
  6990                           ;color.c: 267:                 unsigned long temp;;color.c: 268:                 temp = 
      +                          (unsigned long)C;
  6991   00117E  C040  F02C         	movff	convert_HSV@C,convert_HSV@temp_612
  6992   001182  C041  F02D         	movff	convert_HSV@C+1,convert_HSV@temp_612+1
  6993   001186  6A2E               	clrf	(convert_HSV@temp_612+2)^0,c
  6994   001188  6A2F               	clrf	(convert_HSV@temp_612+3)^0,c
  6995   00118A                     
  6996                           ;color.c: 269:                 temp *= 2;
  6997   00118A  90D8               	bcf	status,0,c
  6998   00118C  362C               	rlcf	convert_HSV@temp_612^0,f,c
  6999   00118E  362D               	rlcf	(convert_HSV@temp_612+1)^0,f,c
  7000   001190  362E               	rlcf	(convert_HSV@temp_612+2)^0,f,c
  7001   001192  362F               	rlcf	(convert_HSV@temp_612+3)^0,f,c
  7002   001194                     
  7003                           ;color.c: 270:                 temp -= (unsigned long)(p2->R - p2->B);
  7004   001194  500F               	movf	convert_HSV@p2^0,w,c
  7005   001196  6ED9               	movwf	fsr2l,c
  7006   001198  6ADA               	clrf	fsr2h,c
  7007   00119A  0E04               	movlw	4
  7008   00119C  26D9               	addwf	fsr2l,f,c
  7009   00119E  CFDE F010          	movff	postinc2,??_convert_HSV
  7010   0011A2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7011   0011A6  500F               	movf	convert_HSV@p2^0,w,c
  7012   0011A8  6ED9               	movwf	fsr2l,c
  7013   0011AA  6ADA               	clrf	fsr2h,c
  7014   0011AC  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7015   0011B0  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7016   0011B4  5010               	movf	??_convert_HSV^0,w,c
  7017   0011B6  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7018   0011B8  6E14               	movwf	(??_convert_HSV+4)^0,c
  7019   0011BA  5011               	movf	(??_convert_HSV+1)^0,w,c
  7020   0011BC  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7021   0011BE  6E15               	movwf	(??_convert_HSV+5)^0,c
  7022   0011C0  6A16               	clrf	(??_convert_HSV+6)^0,c
  7023   0011C2  6A17               	clrf	(??_convert_HSV+7)^0,c
  7024   0011C4  5014               	movf	(??_convert_HSV+4)^0,w,c
  7025   0011C6  5E2C               	subwf	convert_HSV@temp_612^0,f,c
  7026   0011C8  5015               	movf	(??_convert_HSV+5)^0,w,c
  7027   0011CA  5A2D               	subwfb	(convert_HSV@temp_612+1)^0,f,c
  7028   0011CC  5016               	movf	(??_convert_HSV+6)^0,w,c
  7029   0011CE  5A2E               	subwfb	(convert_HSV@temp_612+2)^0,f,c
  7030   0011D0  5017               	movf	(??_convert_HSV+7)^0,w,c
  7031   0011D2  5A2F               	subwfb	(convert_HSV@temp_612+3)^0,f,c
  7032   0011D4                     
  7033                           ;color.c: 271:                 temp *= (unsigned long)hue_scale;
  7034   0011D4  C02C  F001         	movff	convert_HSV@temp_612,___lmul@multiplier
  7035   0011D8  C02D  F002         	movff	convert_HSV@temp_612+1,___lmul@multiplier+1
  7036   0011DC  C02E  F003         	movff	convert_HSV@temp_612+2,___lmul@multiplier+2
  7037   0011E0  C02F  F004         	movff	convert_HSV@temp_612+3,___lmul@multiplier+3
  7038   0011E4  0E3C               	movlw	60
  7039   0011E6  6E05               	movwf	___lmul@multiplicand^0,c
  7040   0011E8  0E00               	movlw	0
  7041   0011EA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7042   0011EC  0E00               	movlw	0
  7043   0011EE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7044   0011F0  0E00               	movlw	0
  7045   0011F2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7046   0011F4  EC52  F018         	call	___lmul	;wreg free
  7047   0011F8  C001  F02C         	movff	?___lmul,convert_HSV@temp_612
  7048   0011FC  C002  F02D         	movff	?___lmul+1,convert_HSV@temp_612+1
  7049   001200  C003  F02E         	movff	?___lmul+2,convert_HSV@temp_612+2
  7050   001204  C004  F02F         	movff	?___lmul+3,convert_HSV@temp_612+3
  7051   001208                     
  7052                           ;color.c: 272:                 temp /= (unsigned long)C;
  7053   001208  C02C  F001         	movff	convert_HSV@temp_612,___lldiv@dividend
  7054   00120C  C02D  F002         	movff	convert_HSV@temp_612+1,___lldiv@dividend+1
  7055   001210  C02E  F003         	movff	convert_HSV@temp_612+2,___lldiv@dividend+2
  7056   001214  C02F  F004         	movff	convert_HSV@temp_612+3,___lldiv@dividend+3
  7057   001218  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7058   00121C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7059   001220  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7060   001222  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7061   001224  ECEA  F015         	call	___lldiv	;wreg free
  7062   001228  C001  F02C         	movff	?___lldiv,convert_HSV@temp_612
  7063   00122C  C002  F02D         	movff	?___lldiv+1,convert_HSV@temp_612+1
  7064   001230  C003  F02E         	movff	?___lldiv+2,convert_HSV@temp_612+2
  7065   001234  C004  F02F         	movff	?___lldiv+3,convert_HSV@temp_612+3
  7066   001238                     
  7067                           ;color.c: 273:                 hue = (unsigned int)temp;
  7068   001238  C02C  F01E         	movff	convert_HSV@temp_612,convert_HSV@hue
  7069   00123C  C02D  F01F         	movff	convert_HSV@temp_612+1,convert_HSV@hue+1
  7070   001240                     l3589:
  7071                           
  7072                           ;color.c: 276:         if (M == p2->B) {
  7073   001240  500F               	movf	convert_HSV@p2^0,w,c
  7074   001242  6ED9               	movwf	fsr2l,c
  7075   001244  6ADA               	clrf	fsr2h,c
  7076   001246  0E04               	movlw	4
  7077   001248  26D9               	addwf	fsr2l,f,c
  7078   00124A  503E               	movf	convert_HSV@M^0,w,c
  7079   00124C  18DE               	xorwf	postinc2,w,c
  7080   00124E  E107               	bnz	u2681
  7081   001250  503F               	movf	(convert_HSV@M+1)^0,w,c
  7082   001252  18DE               	xorwf	postinc2,w,c
  7083   001254  A4D8               	btfss	status,2,c
  7084   001256  EF2F  F009         	goto	u2681
  7085   00125A  EF31  F009         	goto	u2680
  7086   00125E                     u2681:
  7087   00125E  EF0E  F00A         	goto	l3617
  7088   001262                     u2680:
  7089   001262                     
  7090                           ;color.c: 277:             if (p2->R >= p2->G) {
  7091   001262  500F               	movf	convert_HSV@p2^0,w,c
  7092   001264  6ED9               	movwf	fsr2l,c
  7093   001266  6ADA               	clrf	fsr2h,c
  7094   001268  0E02               	movlw	2
  7095   00126A  26D9               	addwf	fsr2l,f,c
  7096   00126C  500F               	movf	convert_HSV@p2^0,w,c
  7097   00126E  6EE1               	movwf	fsr1l,c
  7098   001270  6AE2               	clrf	fsr1h,c
  7099   001272  50DE               	movf	postinc2,w,c
  7100   001274  5CE6               	subwf	postinc1,w,c
  7101   001276  50DE               	movf	postinc2,w,c
  7102   001278  58E6               	subwfb	postinc1,w,c
  7103   00127A  A0D8               	btfss	status,0,c
  7104   00127C  EF42  F009         	goto	u2691
  7105   001280  EF44  F009         	goto	u2690
  7106   001284                     u2691:
  7107   001284  EFA9  F009         	goto	l3605
  7108   001288                     u2690:
  7109   001288                     
  7110                           ;color.c: 279:                 unsigned long temp;;color.c: 280:                 temp = 
      +                          (unsigned long)C;
  7111   001288  C040  F030         	movff	convert_HSV@C,convert_HSV@temp_613
  7112   00128C  C041  F031         	movff	convert_HSV@C+1,convert_HSV@temp_613+1
  7113   001290  6A32               	clrf	(convert_HSV@temp_613+2)^0,c
  7114   001292  6A33               	clrf	(convert_HSV@temp_613+3)^0,c
  7115   001294                     
  7116                           ;color.c: 281:                 temp *= 4;
  7117   001294  0E02               	movlw	2
  7118   001296                     u2705:
  7119   001296  90D8               	bcf	status,0,c
  7120   001298  3630               	rlcf	convert_HSV@temp_613^0,f,c
  7121   00129A  3631               	rlcf	(convert_HSV@temp_613+1)^0,f,c
  7122   00129C  3632               	rlcf	(convert_HSV@temp_613+2)^0,f,c
  7123   00129E  3633               	rlcf	(convert_HSV@temp_613+3)^0,f,c
  7124   0012A0  2EE8               	decfsz	wreg,f,c
  7125   0012A2  EF4B  F009         	goto	u2705
  7126   0012A6                     
  7127                           ;color.c: 282:                 temp += (unsigned long)(p2->R - p2->G);
  7128   0012A6  500F               	movf	convert_HSV@p2^0,w,c
  7129   0012A8  6ED9               	movwf	fsr2l,c
  7130   0012AA  6ADA               	clrf	fsr2h,c
  7131   0012AC  0E02               	movlw	2
  7132   0012AE  26D9               	addwf	fsr2l,f,c
  7133   0012B0  CFDE F010          	movff	postinc2,??_convert_HSV
  7134   0012B4  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7135   0012B8  500F               	movf	convert_HSV@p2^0,w,c
  7136   0012BA  6ED9               	movwf	fsr2l,c
  7137   0012BC  6ADA               	clrf	fsr2h,c
  7138   0012BE  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7139   0012C2  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7140   0012C6  5010               	movf	??_convert_HSV^0,w,c
  7141   0012C8  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7142   0012CA  6E14               	movwf	(??_convert_HSV+4)^0,c
  7143   0012CC  5011               	movf	(??_convert_HSV+1)^0,w,c
  7144   0012CE  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7145   0012D0  6E15               	movwf	(??_convert_HSV+5)^0,c
  7146   0012D2  5014               	movf	(??_convert_HSV+4)^0,w,c
  7147   0012D4  2630               	addwf	convert_HSV@temp_613^0,f,c
  7148   0012D6  5015               	movf	(??_convert_HSV+5)^0,w,c
  7149   0012D8  2231               	addwfc	(convert_HSV@temp_613+1)^0,f,c
  7150   0012DA  0E00               	movlw	0
  7151   0012DC  2232               	addwfc	(convert_HSV@temp_613+2)^0,f,c
  7152   0012DE  0E00               	movlw	0
  7153   0012E0  2233               	addwfc	(convert_HSV@temp_613+3)^0,f,c
  7154   0012E2                     
  7155                           ;color.c: 283:                 temp *= (unsigned long)hue_scale;
  7156   0012E2  C030  F001         	movff	convert_HSV@temp_613,___lmul@multiplier
  7157   0012E6  C031  F002         	movff	convert_HSV@temp_613+1,___lmul@multiplier+1
  7158   0012EA  C032  F003         	movff	convert_HSV@temp_613+2,___lmul@multiplier+2
  7159   0012EE  C033  F004         	movff	convert_HSV@temp_613+3,___lmul@multiplier+3
  7160   0012F2  0E3C               	movlw	60
  7161   0012F4  6E05               	movwf	___lmul@multiplicand^0,c
  7162   0012F6  0E00               	movlw	0
  7163   0012F8  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7164   0012FA  0E00               	movlw	0
  7165   0012FC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7166   0012FE  0E00               	movlw	0
  7167   001300  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7168   001302  EC52  F018         	call	___lmul	;wreg free
  7169   001306  C001  F030         	movff	?___lmul,convert_HSV@temp_613
  7170   00130A  C002  F031         	movff	?___lmul+1,convert_HSV@temp_613+1
  7171   00130E  C003  F032         	movff	?___lmul+2,convert_HSV@temp_613+2
  7172   001312  C004  F033         	movff	?___lmul+3,convert_HSV@temp_613+3
  7173   001316                     
  7174                           ;color.c: 284:                 temp /= (unsigned long)C;
  7175   001316  C030  F001         	movff	convert_HSV@temp_613,___lldiv@dividend
  7176   00131A  C031  F002         	movff	convert_HSV@temp_613+1,___lldiv@dividend+1
  7177   00131E  C032  F003         	movff	convert_HSV@temp_613+2,___lldiv@dividend+2
  7178   001322  C033  F004         	movff	convert_HSV@temp_613+3,___lldiv@dividend+3
  7179   001326  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7180   00132A  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7181   00132E  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7182   001330  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7183   001332  ECEA  F015         	call	___lldiv	;wreg free
  7184   001336  C001  F030         	movff	?___lldiv,convert_HSV@temp_613
  7185   00133A  C002  F031         	movff	?___lldiv+1,convert_HSV@temp_613+1
  7186   00133E  C003  F032         	movff	?___lldiv+2,convert_HSV@temp_613+2
  7187   001342  C004  F033         	movff	?___lldiv+3,convert_HSV@temp_613+3
  7188   001346                     
  7189                           ;color.c: 285:                 hue = (unsigned int)temp;
  7190   001346  C030  F01E         	movff	convert_HSV@temp_613,convert_HSV@hue
  7191   00134A  C031  F01F         	movff	convert_HSV@temp_613+1,convert_HSV@hue+1
  7192                           
  7193                           ;color.c: 286:             } else {
  7194   00134E  EF0E  F00A         	goto	l3617
  7195   001352                     l3605:
  7196                           
  7197                           ;color.c: 288:                 unsigned long temp;;color.c: 289:                 temp = 
      +                          (unsigned long)C;
  7198   001352  C040  F034         	movff	convert_HSV@C,convert_HSV@temp_614
  7199   001356  C041  F035         	movff	convert_HSV@C+1,convert_HSV@temp_614+1
  7200   00135A  6A36               	clrf	(convert_HSV@temp_614+2)^0,c
  7201   00135C  6A37               	clrf	(convert_HSV@temp_614+3)^0,c
  7202   00135E                     
  7203                           ;color.c: 290:                 temp *= 4;
  7204   00135E  0E02               	movlw	2
  7205   001360                     u2715:
  7206   001360  90D8               	bcf	status,0,c
  7207   001362  3634               	rlcf	convert_HSV@temp_614^0,f,c
  7208   001364  3635               	rlcf	(convert_HSV@temp_614+1)^0,f,c
  7209   001366  3636               	rlcf	(convert_HSV@temp_614+2)^0,f,c
  7210   001368  3637               	rlcf	(convert_HSV@temp_614+3)^0,f,c
  7211   00136A  2EE8               	decfsz	wreg,f,c
  7212   00136C  EFB0  F009         	goto	u2715
  7213   001370                     
  7214                           ;color.c: 291:                 temp -= (unsigned long)(p2->G - p2->R);
  7215   001370  500F               	movf	convert_HSV@p2^0,w,c
  7216   001372  6ED9               	movwf	fsr2l,c
  7217   001374  6ADA               	clrf	fsr2h,c
  7218   001376  CFDE F010          	movff	postinc2,??_convert_HSV
  7219   00137A  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7220   00137E  500F               	movf	convert_HSV@p2^0,w,c
  7221   001380  6ED9               	movwf	fsr2l,c
  7222   001382  6ADA               	clrf	fsr2h,c
  7223   001384  0E02               	movlw	2
  7224   001386  26D9               	addwf	fsr2l,f,c
  7225   001388  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7226   00138C  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7227   001390  5010               	movf	??_convert_HSV^0,w,c
  7228   001392  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7229   001394  6E14               	movwf	(??_convert_HSV+4)^0,c
  7230   001396  5011               	movf	(??_convert_HSV+1)^0,w,c
  7231   001398  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7232   00139A  6E15               	movwf	(??_convert_HSV+5)^0,c
  7233   00139C  6A16               	clrf	(??_convert_HSV+6)^0,c
  7234   00139E  6A17               	clrf	(??_convert_HSV+7)^0,c
  7235   0013A0  5014               	movf	(??_convert_HSV+4)^0,w,c
  7236   0013A2  5E34               	subwf	convert_HSV@temp_614^0,f,c
  7237   0013A4  5015               	movf	(??_convert_HSV+5)^0,w,c
  7238   0013A6  5A35               	subwfb	(convert_HSV@temp_614+1)^0,f,c
  7239   0013A8  5016               	movf	(??_convert_HSV+6)^0,w,c
  7240   0013AA  5A36               	subwfb	(convert_HSV@temp_614+2)^0,f,c
  7241   0013AC  5017               	movf	(??_convert_HSV+7)^0,w,c
  7242   0013AE  5A37               	subwfb	(convert_HSV@temp_614+3)^0,f,c
  7243   0013B0                     
  7244                           ;color.c: 292:                 temp *= (unsigned long)hue_scale;
  7245   0013B0  C034  F001         	movff	convert_HSV@temp_614,___lmul@multiplier
  7246   0013B4  C035  F002         	movff	convert_HSV@temp_614+1,___lmul@multiplier+1
  7247   0013B8  C036  F003         	movff	convert_HSV@temp_614+2,___lmul@multiplier+2
  7248   0013BC  C037  F004         	movff	convert_HSV@temp_614+3,___lmul@multiplier+3
  7249   0013C0  0E3C               	movlw	60
  7250   0013C2  6E05               	movwf	___lmul@multiplicand^0,c
  7251   0013C4  0E00               	movlw	0
  7252   0013C6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7253   0013C8  0E00               	movlw	0
  7254   0013CA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7255   0013CC  0E00               	movlw	0
  7256   0013CE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7257   0013D0  EC52  F018         	call	___lmul	;wreg free
  7258   0013D4  C001  F034         	movff	?___lmul,convert_HSV@temp_614
  7259   0013D8  C002  F035         	movff	?___lmul+1,convert_HSV@temp_614+1
  7260   0013DC  C003  F036         	movff	?___lmul+2,convert_HSV@temp_614+2
  7261   0013E0  C004  F037         	movff	?___lmul+3,convert_HSV@temp_614+3
  7262   0013E4                     
  7263                           ;color.c: 293:                 temp /= (unsigned long)C;
  7264   0013E4  C034  F001         	movff	convert_HSV@temp_614,___lldiv@dividend
  7265   0013E8  C035  F002         	movff	convert_HSV@temp_614+1,___lldiv@dividend+1
  7266   0013EC  C036  F003         	movff	convert_HSV@temp_614+2,___lldiv@dividend+2
  7267   0013F0  C037  F004         	movff	convert_HSV@temp_614+3,___lldiv@dividend+3
  7268   0013F4  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7269   0013F8  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7270   0013FC  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7271   0013FE  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7272   001400  ECEA  F015         	call	___lldiv	;wreg free
  7273   001404  C001  F034         	movff	?___lldiv,convert_HSV@temp_614
  7274   001408  C002  F035         	movff	?___lldiv+1,convert_HSV@temp_614+1
  7275   00140C  C003  F036         	movff	?___lldiv+2,convert_HSV@temp_614+2
  7276   001410  C004  F037         	movff	?___lldiv+3,convert_HSV@temp_614+3
  7277   001414                     
  7278                           ;color.c: 294:                 hue = (unsigned int)temp;
  7279   001414  C034  F01E         	movff	convert_HSV@temp_614,convert_HSV@hue
  7280   001418  C035  F01F         	movff	convert_HSV@temp_614+1,convert_HSV@hue+1
  7281   00141C                     l3617:
  7282                           
  7283                           ;color.c: 299:     if (M == 0) {
  7284   00141C  503E               	movf	convert_HSV@M^0,w,c
  7285   00141E  103F               	iorwf	(convert_HSV@M+1)^0,w,c
  7286   001420  A4D8               	btfss	status,2,c
  7287   001422  EF15  F00A         	goto	u2721
  7288   001426  EF17  F00A         	goto	u2720
  7289   00142A                     u2721:
  7290   00142A  EF1D  F00A         	goto	l3621
  7291   00142E                     u2720:
  7292   00142E                     
  7293                           ;color.c: 300:         sat = 0;
  7294   00142E  0E00               	movlw	0
  7295   001430  6E1D               	movwf	(convert_HSV@sat+1)^0,c
  7296   001432  0E00               	movlw	0
  7297   001434  6E1C               	movwf	convert_HSV@sat^0,c
  7298                           
  7299                           ;color.c: 301:     } else {
  7300   001436  EF59  F00A         	goto	l3629
  7301   00143A                     l3621:
  7302                           
  7303                           ;color.c: 303:         unsigned long temp;;color.c: 304:         temp = (unsigned long)C
      +                          ;
  7304   00143A  C040  F020         	movff	convert_HSV@C,convert_HSV@temp_615
  7305   00143E  C041  F021         	movff	convert_HSV@C+1,convert_HSV@temp_615+1
  7306   001442  6A22               	clrf	(convert_HSV@temp_615+2)^0,c
  7307   001444  6A23               	clrf	(convert_HSV@temp_615+3)^0,c
  7308   001446                     
  7309                           ;color.c: 305:         temp *= (unsigned long)sat_scale;
  7310   001446  C020  F001         	movff	convert_HSV@temp_615,___lmul@multiplier
  7311   00144A  C021  F002         	movff	convert_HSV@temp_615+1,___lmul@multiplier+1
  7312   00144E  C022  F003         	movff	convert_HSV@temp_615+2,___lmul@multiplier+2
  7313   001452  C023  F004         	movff	convert_HSV@temp_615+3,___lmul@multiplier+3
  7314   001456  0E64               	movlw	100
  7315   001458  6E05               	movwf	___lmul@multiplicand^0,c
  7316   00145A  0E00               	movlw	0
  7317   00145C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7318   00145E  0E00               	movlw	0
  7319   001460  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7320   001462  0E00               	movlw	0
  7321   001464  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7322   001466  EC52  F018         	call	___lmul	;wreg free
  7323   00146A  C001  F020         	movff	?___lmul,convert_HSV@temp_615
  7324   00146E  C002  F021         	movff	?___lmul+1,convert_HSV@temp_615+1
  7325   001472  C003  F022         	movff	?___lmul+2,convert_HSV@temp_615+2
  7326   001476  C004  F023         	movff	?___lmul+3,convert_HSV@temp_615+3
  7327   00147A                     
  7328                           ;color.c: 306:         temp /= (unsigned long)M;
  7329   00147A  C020  F001         	movff	convert_HSV@temp_615,___lldiv@dividend
  7330   00147E  C021  F002         	movff	convert_HSV@temp_615+1,___lldiv@dividend+1
  7331   001482  C022  F003         	movff	convert_HSV@temp_615+2,___lldiv@dividend+2
  7332   001486  C023  F004         	movff	convert_HSV@temp_615+3,___lldiv@dividend+3
  7333   00148A  C03E  F005         	movff	convert_HSV@M,___lldiv@divisor
  7334   00148E  C03F  F006         	movff	convert_HSV@M+1,___lldiv@divisor+1
  7335   001492  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7336   001494  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7337   001496  ECEA  F015         	call	___lldiv	;wreg free
  7338   00149A  C001  F020         	movff	?___lldiv,convert_HSV@temp_615
  7339   00149E  C002  F021         	movff	?___lldiv+1,convert_HSV@temp_615+1
  7340   0014A2  C003  F022         	movff	?___lldiv+2,convert_HSV@temp_615+2
  7341   0014A6  C004  F023         	movff	?___lldiv+3,convert_HSV@temp_615+3
  7342   0014AA                     
  7343                           ;color.c: 307:         sat = (unsigned int)temp;
  7344   0014AA  C020  F01C         	movff	convert_HSV@temp_615,convert_HSV@sat
  7345   0014AE  C021  F01D         	movff	convert_HSV@temp_615+1,convert_HSV@sat+1
  7346   0014B2                     l3629:
  7347                           
  7348                           ;color.c: 310:     p1->H = hue;
  7349   0014B2  500E               	movf	convert_HSV@p1^0,w,c
  7350   0014B4  6ED9               	movwf	fsr2l,c
  7351   0014B6  6ADA               	clrf	fsr2h,c
  7352   0014B8  C01E  FFDE         	movff	convert_HSV@hue,postinc2
  7353   0014BC  C01F  FFDD         	movff	convert_HSV@hue+1,postdec2
  7354   0014C0                     
  7355                           ;color.c: 311:     p1->S = sat;
  7356   0014C0  500E               	movf	convert_HSV@p1^0,w,c
  7357   0014C2  6ED9               	movwf	fsr2l,c
  7358   0014C4  6ADA               	clrf	fsr2h,c
  7359   0014C6  0E02               	movlw	2
  7360   0014C8  26D9               	addwf	fsr2l,f,c
  7361   0014CA  C01C  FFDE         	movff	convert_HSV@sat,postinc2
  7362   0014CE  C01D  FFDD         	movff	convert_HSV@sat+1,postdec2
  7363   0014D2                     
  7364                           ;color.c: 312:     p1->V = M;
  7365   0014D2  500E               	movf	convert_HSV@p1^0,w,c
  7366   0014D4  6ED9               	movwf	fsr2l,c
  7367   0014D6  6ADA               	clrf	fsr2h,c
  7368   0014D8  0E04               	movlw	4
  7369   0014DA  26D9               	addwf	fsr2l,f,c
  7370   0014DC  C03E  FFDE         	movff	convert_HSV@M,postinc2
  7371   0014E0  C03F  FFDD         	movff	convert_HSV@M+1,postdec2
  7372   0014E4  0012               	return		;funcret
  7373   0014E6                     __end_of_convert_HSV:
  7374                           	callstack 0
  7375                           
  7376 ;; *************** function _min_RGB *****************
  7377 ;; Defined at:
  7378 ;;		line 188 in file "color.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  7381 ;;		 -> main@RGBC_colour(8), 
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;  min_val         2    4[COMRAM] unsigned int 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  2    0[COMRAM] unsigned int 
  7386 ;; Registers used:
  7387 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7396 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7397 ;;Total ram usage:        6 bytes
  7398 ;; Hardware stack levels used: 1
  7399 ;; Hardware stack levels required when called: 1
  7400 ;; This function calls:
  7401 ;;		Nothing
  7402 ;; This function is called by:
  7403 ;;		_convert_HSV
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text45
  7408   002F38                     __ptext45:
  7409                           	callstack 0
  7410   002F38                     _min_RGB:
  7411                           	callstack 27
  7412   002F38                     
  7413                           ;color.c: 188: unsigned int min_RGB(struct RGBC_val *p);color.c: 189: {;color.c: 190:   
      +                            unsigned int min_val = p->R;
  7414   002F38  5001               	movf	min_RGB@p^0,w,c
  7415   002F3A  6ED9               	movwf	fsr2l,c
  7416   002F3C  6ADA               	clrf	fsr2h,c
  7417   002F3E  CFDE F005          	movff	postinc2,min_RGB@min_val
  7418   002F42  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7419   002F46                     
  7420                           ;color.c: 191:     if (p->G < min_val) {min_val = p->G;}
  7421   002F46  5001               	movf	min_RGB@p^0,w,c
  7422   002F48  6ED9               	movwf	fsr2l,c
  7423   002F4A  6ADA               	clrf	fsr2h,c
  7424   002F4C  0E02               	movlw	2
  7425   002F4E  26D9               	addwf	fsr2l,f,c
  7426   002F50  5005               	movf	min_RGB@min_val^0,w,c
  7427   002F52  5CDE               	subwf	postinc2,w,c
  7428   002F54  5006               	movf	(min_RGB@min_val+1)^0,w,c
  7429   002F56  58DE               	subwfb	postinc2,w,c
  7430   002F58  B0D8               	btfsc	status,0,c
  7431   002F5A  EFB1  F017         	goto	u2031
  7432   002F5E  EFB3  F017         	goto	u2030
  7433   002F62                     u2031:
  7434   002F62  EFBC  F017         	goto	l107
  7435   002F66                     u2030:
  7436   002F66  5001               	movf	min_RGB@p^0,w,c
  7437   002F68  6ED9               	movwf	fsr2l,c
  7438   002F6A  6ADA               	clrf	fsr2h,c
  7439   002F6C  0E02               	movlw	2
  7440   002F6E  26D9               	addwf	fsr2l,f,c
  7441   002F70  CFDE F005          	movff	postinc2,min_RGB@min_val
  7442   002F74  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7443   002F78                     l107:
  7444                           
  7445                           ;color.c: 192:     if (p->B < min_val) {min_val = p->B;}
  7446   002F78  5001               	movf	min_RGB@p^0,w,c
  7447   002F7A  6ED9               	movwf	fsr2l,c
  7448   002F7C  6ADA               	clrf	fsr2h,c
  7449   002F7E  0E04               	movlw	4
  7450   002F80  26D9               	addwf	fsr2l,f,c
  7451   002F82  5005               	movf	min_RGB@min_val^0,w,c
  7452   002F84  5CDE               	subwf	postinc2,w,c
  7453   002F86  5006               	movf	(min_RGB@min_val+1)^0,w,c
  7454   002F88  58DE               	subwfb	postinc2,w,c
  7455   002F8A  B0D8               	btfsc	status,0,c
  7456   002F8C  EFCA  F017         	goto	u2041
  7457   002F90  EFCC  F017         	goto	u2040
  7458   002F94                     u2041:
  7459   002F94  EFD5  F017         	goto	l3105
  7460   002F98                     u2040:
  7461   002F98  5001               	movf	min_RGB@p^0,w,c
  7462   002F9A  6ED9               	movwf	fsr2l,c
  7463   002F9C  6ADA               	clrf	fsr2h,c
  7464   002F9E  0E04               	movlw	4
  7465   002FA0  26D9               	addwf	fsr2l,f,c
  7466   002FA2  CFDE F005          	movff	postinc2,min_RGB@min_val
  7467   002FA6  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7468   002FAA                     l3105:
  7469                           
  7470                           ;color.c: 193:     return min_val;
  7471   002FAA  C005  F001         	movff	min_RGB@min_val,?_min_RGB
  7472   002FAE  C006  F002         	movff	min_RGB@min_val+1,?_min_RGB+1
  7473   002FB2  0012               	return		;funcret
  7474   002FB4                     __end_of_min_RGB:
  7475                           	callstack 0
  7476                           
  7477 ;; *************** function _max_RGB *****************
  7478 ;; Defined at:
  7479 ;;		line 177 in file "color.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  7482 ;;		 -> main@RGBC_colour(8), 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  max_val         2    4[COMRAM] unsigned int 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  2    0[COMRAM] unsigned int 
  7487 ;; Registers used:
  7488 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7496 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7497 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7498 ;;Total ram usage:        6 bytes
  7499 ;; Hardware stack levels used: 1
  7500 ;; Hardware stack levels required when called: 1
  7501 ;; This function calls:
  7502 ;;		Nothing
  7503 ;; This function is called by:
  7504 ;;		_convert_HSV
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           	psect	text46
  7509   002FB4                     __ptext46:
  7510                           	callstack 0
  7511   002FB4                     _max_RGB:
  7512                           	callstack 27
  7513   002FB4                     
  7514                           ;color.c: 177: unsigned int max_RGB(struct RGBC_val *p);color.c: 178: {;color.c: 179:   
      +                            unsigned int max_val = p->R;
  7515   002FB4  5001               	movf	max_RGB@p^0,w,c
  7516   002FB6  6ED9               	movwf	fsr2l,c
  7517   002FB8  6ADA               	clrf	fsr2h,c
  7518   002FBA  CFDE F005          	movff	postinc2,max_RGB@max_val
  7519   002FBE  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7520   002FC2                     
  7521                           ;color.c: 180:     if (p->G > max_val) {max_val = p->G;}
  7522   002FC2  5001               	movf	max_RGB@p^0,w,c
  7523   002FC4  6ED9               	movwf	fsr2l,c
  7524   002FC6  6ADA               	clrf	fsr2h,c
  7525   002FC8  0E02               	movlw	2
  7526   002FCA  26D9               	addwf	fsr2l,f,c
  7527   002FCC  50DE               	movf	postinc2,w,c
  7528   002FCE  5C05               	subwf	max_RGB@max_val^0,w,c
  7529   002FD0  50DE               	movf	postinc2,w,c
  7530   002FD2  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  7531   002FD4  B0D8               	btfsc	status,0,c
  7532   002FD6  EFEF  F017         	goto	u2011
  7533   002FDA  EFF1  F017         	goto	u2010
  7534   002FDE                     u2011:
  7535   002FDE  EFFA  F017         	goto	l102
  7536   002FE2                     u2010:
  7537   002FE2  5001               	movf	max_RGB@p^0,w,c
  7538   002FE4  6ED9               	movwf	fsr2l,c
  7539   002FE6  6ADA               	clrf	fsr2h,c
  7540   002FE8  0E02               	movlw	2
  7541   002FEA  26D9               	addwf	fsr2l,f,c
  7542   002FEC  CFDE F005          	movff	postinc2,max_RGB@max_val
  7543   002FF0  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7544   002FF4                     l102:
  7545                           
  7546                           ;color.c: 181:     if (p->B > max_val) {max_val = p->B;}
  7547   002FF4  5001               	movf	max_RGB@p^0,w,c
  7548   002FF6  6ED9               	movwf	fsr2l,c
  7549   002FF8  6ADA               	clrf	fsr2h,c
  7550   002FFA  0E04               	movlw	4
  7551   002FFC  26D9               	addwf	fsr2l,f,c
  7552   002FFE  50DE               	movf	postinc2,w,c
  7553   003000  5C05               	subwf	max_RGB@max_val^0,w,c
  7554   003002  50DE               	movf	postinc2,w,c
  7555   003004  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  7556   003006  B0D8               	btfsc	status,0,c
  7557   003008  EF08  F018         	goto	u2021
  7558   00300C  EF0A  F018         	goto	u2020
  7559   003010                     u2021:
  7560   003010  EF13  F018         	goto	l3093
  7561   003014                     u2020:
  7562   003014  5001               	movf	max_RGB@p^0,w,c
  7563   003016  6ED9               	movwf	fsr2l,c
  7564   003018  6ADA               	clrf	fsr2h,c
  7565   00301A  0E04               	movlw	4
  7566   00301C  26D9               	addwf	fsr2l,f,c
  7567   00301E  CFDE F005          	movff	postinc2,max_RGB@max_val
  7568   003022  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7569   003026                     l3093:
  7570                           
  7571                           ;color.c: 182:     return max_val;
  7572   003026  C005  F001         	movff	max_RGB@max_val,?_max_RGB
  7573   00302A  C006  F002         	movff	max_RGB@max_val+1,?_max_RGB+1
  7574   00302E  0012               	return		;funcret
  7575   003030                     __end_of_max_RGB:
  7576                           	callstack 0
  7577                           
  7578 ;; *************** function ___lmul *****************
  7579 ;; Defined at:
  7580 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  multiplier      4    0[COMRAM] unsigned long 
  7583 ;;  multiplicand    4    4[COMRAM] unsigned long 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;  product         4    8[COMRAM] unsigned long 
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  4    0[COMRAM] unsigned long 
  7588 ;; Registers used:
  7589 ;;		wreg, status,2, status,0
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7595 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7596 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7598 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7599 ;;Total ram usage:       12 bytes
  7600 ;; Hardware stack levels used: 1
  7601 ;; Hardware stack levels required when called: 1
  7602 ;; This function calls:
  7603 ;;		Nothing
  7604 ;; This function is called by:
  7605 ;;		_convert_HSV
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text47
  7610   0030A4                     __ptext47:
  7611                           	callstack 0
  7612   0030A4                     ___lmul:
  7613                           	callstack 27
  7614   0030A4  0E00               	movlw	0
  7615   0030A6  6E09               	movwf	___lmul@product^0,c
  7616   0030A8  0E00               	movlw	0
  7617   0030AA  6E0A               	movwf	(___lmul@product+1)^0,c
  7618   0030AC  0E00               	movlw	0
  7619   0030AE  6E0B               	movwf	(___lmul@product+2)^0,c
  7620   0030B0  0E00               	movlw	0
  7621   0030B2  6E0C               	movwf	(___lmul@product+3)^0,c
  7622   0030B4                     l3215:
  7623   0030B4  A001               	btfss	___lmul@multiplier^0,0,c
  7624   0030B6  EF5F  F018         	goto	u2051
  7625   0030BA  EF61  F018         	goto	u2050
  7626   0030BE                     u2051:
  7627   0030BE  EF69  F018         	goto	l3219
  7628   0030C2                     u2050:
  7629   0030C2  5005               	movf	___lmul@multiplicand^0,w,c
  7630   0030C4  2609               	addwf	___lmul@product^0,f,c
  7631   0030C6  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  7632   0030C8  220A               	addwfc	(___lmul@product+1)^0,f,c
  7633   0030CA  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  7634   0030CC  220B               	addwfc	(___lmul@product+2)^0,f,c
  7635   0030CE  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  7636   0030D0  220C               	addwfc	(___lmul@product+3)^0,f,c
  7637   0030D2                     l3219:
  7638   0030D2  90D8               	bcf	status,0,c
  7639   0030D4  3605               	rlcf	___lmul@multiplicand^0,f,c
  7640   0030D6  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  7641   0030D8  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  7642   0030DA  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  7643   0030DC  90D8               	bcf	status,0,c
  7644   0030DE  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  7645   0030E0  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  7646   0030E2  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  7647   0030E4  3201               	rrcf	___lmul@multiplier^0,f,c
  7648   0030E6  5001               	movf	___lmul@multiplier^0,w,c
  7649   0030E8  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  7650   0030EA  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  7651   0030EC  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  7652   0030EE  A4D8               	btfss	status,2,c
  7653   0030F0  EF7C  F018         	goto	u2061
  7654   0030F4  EF7E  F018         	goto	u2060
  7655   0030F8                     u2061:
  7656   0030F8  EF5A  F018         	goto	l3215
  7657   0030FC                     u2060:
  7658   0030FC  C009  F001         	movff	___lmul@product,?___lmul
  7659   003100  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  7660   003104  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  7661   003108  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  7662   00310C  0012               	return		;funcret
  7663   00310E                     __end_of___lmul:
  7664                           	callstack 0
  7665                           
  7666 ;; *************** function _colour_to_key *****************
  7667 ;; Defined at:
  7668 ;;		line 320 in file "color.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;  p1              1    0[COMRAM] PTR struct HSV_val
  7671 ;;		 -> main@HSV_colour(6), 
  7672 ;;  p2              1    1[COMRAM] PTR struct RGBC_val
  7673 ;;		 -> main@RGBC_colour(8), 
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;  key             1    4[COMRAM] unsigned char 
  7676 ;; Return value:  Size  Location     Type
  7677 ;;                  1    wreg      unsigned char 
  7678 ;; Registers used:
  7679 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7685 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7687 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7688 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7689 ;;Total ram usage:        5 bytes
  7690 ;; Hardware stack levels used: 1
  7691 ;; Hardware stack levels required when called: 1
  7692 ;; This function calls:
  7693 ;;		Nothing
  7694 ;; This function is called by:
  7695 ;;		_forward_navigation
  7696 ;; This function uses a non-reentrant model
  7697 ;;
  7698                           
  7699                           	psect	text48
  7700   0014E6                     __ptext48:
  7701                           	callstack 0
  7702   0014E6                     _colour_to_key:
  7703                           	callstack 28
  7704   0014E6                     
  7705                           ;color.c: 320: unsigned char colour_to_key(struct HSV_val *p1, struct RGBC_val *p2);colo
      +                          r.c: 321: {;color.c: 323:     unsigned char key = 0;
  7706   0014E6  0E00               	movlw	0
  7707   0014E8  6E05               	movwf	colour_to_key@key^0,c
  7708   0014EA                     
  7709                           ;color.c: 326:     if ( ((293 <= p1->H) && (p1->H <= 360)) &&
  7710   0014EA  5001               	movf	colour_to_key@p1^0,w,c
  7711   0014EC  6ED9               	movwf	fsr2l,c
  7712   0014EE  6ADA               	clrf	fsr2h,c
  7713   0014F0  0E25               	movlw	37
  7714   0014F2  5CDE               	subwf	postinc2,w,c
  7715   0014F4  0E01               	movlw	1
  7716   0014F6  58DE               	subwfb	postinc2,w,c
  7717   0014F8  A0D8               	btfss	status,0,c
  7718   0014FA  EF81  F00A         	goto	u2731
  7719   0014FE  EF83  F00A         	goto	u2730
  7720   001502                     u2731:
  7721   001502  EFB5  F00A         	goto	l3647
  7722   001506                     u2730:
  7723   001506  5001               	movf	colour_to_key@p1^0,w,c
  7724   001508  6ED9               	movwf	fsr2l,c
  7725   00150A  6ADA               	clrf	fsr2h,c
  7726   00150C  0E69               	movlw	105
  7727   00150E  5CDE               	subwf	postinc2,w,c
  7728   001510  0E01               	movlw	1
  7729   001512  58DE               	subwfb	postinc2,w,c
  7730   001514  B0D8               	btfsc	status,0,c
  7731   001516  EF8F  F00A         	goto	u2741
  7732   00151A  EF91  F00A         	goto	u2740
  7733   00151E                     u2741:
  7734   00151E  EFB5  F00A         	goto	l3647
  7735   001522                     u2740:
  7736   001522  5001               	movf	colour_to_key@p1^0,w,c
  7737   001524  6ED9               	movwf	fsr2l,c
  7738   001526  6ADA               	clrf	fsr2h,c
  7739   001528  0E02               	movlw	2
  7740   00152A  26D9               	addwf	fsr2l,f,c
  7741   00152C  0E01               	movlw	1
  7742   00152E  50DB               	movf	plusw2,w,c
  7743   001530  E109               	bnz	u2750
  7744   001532  0E2E               	movlw	46
  7745   001534  5CDE               	subwf	postinc2,w,c
  7746   001536  A0D8               	btfss	status,0,c
  7747   001538  EFA0  F00A         	goto	u2751
  7748   00153C  EFA2  F00A         	goto	u2750
  7749   001540                     u2751:
  7750   001540  EFB5  F00A         	goto	l3647
  7751   001544                     u2750:
  7752   001544  5001               	movf	colour_to_key@p1^0,w,c
  7753   001546  6ED9               	movwf	fsr2l,c
  7754   001548  6ADA               	clrf	fsr2h,c
  7755   00154A  0E02               	movlw	2
  7756   00154C  26D9               	addwf	fsr2l,f,c
  7757   00154E  0E01               	movlw	1
  7758   001550  50DB               	movf	plusw2,w,c
  7759   001552  E107               	bnz	u2761
  7760   001554  0E5B               	movlw	91
  7761   001556  5CDE               	subwf	postinc2,w,c
  7762   001558  B0D8               	btfsc	status,0,c
  7763   00155A  EFB1  F00A         	goto	u2761
  7764   00155E  EFB3  F00A         	goto	u2760
  7765   001562                     u2761:
  7766   001562  EFB5  F00A         	goto	l3647
  7767   001566                     u2760:
  7768   001566                     
  7769                           ;color.c: 327:          ((46 <= p1->S) && (p1->S <= 90))) {;color.c: 328:         key = 
      +                          1;
  7770   001566  0E01               	movlw	1
  7771   001568  6E05               	movwf	colour_to_key@key^0,c
  7772   00156A                     l3647:
  7773                           
  7774                           ;color.c: 332:     if ( ((113 <= p1->H) && (p1->H <= 153)) &&
  7775   00156A  5001               	movf	colour_to_key@p1^0,w,c
  7776   00156C  6ED9               	movwf	fsr2l,c
  7777   00156E  6ADA               	clrf	fsr2h,c
  7778   001570  0E01               	movlw	1
  7779   001572  50DB               	movf	plusw2,w,c
  7780   001574  E109               	bnz	u2770
  7781   001576  0E71               	movlw	113
  7782   001578  5CDE               	subwf	postinc2,w,c
  7783   00157A  A0D8               	btfss	status,0,c
  7784   00157C  EFC2  F00A         	goto	u2771
  7785   001580  EFC4  F00A         	goto	u2770
  7786   001584                     u2771:
  7787   001584  EFF7  F00A         	goto	l3657
  7788   001588                     u2770:
  7789   001588  5001               	movf	colour_to_key@p1^0,w,c
  7790   00158A  6ED9               	movwf	fsr2l,c
  7791   00158C  6ADA               	clrf	fsr2h,c
  7792   00158E  0E01               	movlw	1
  7793   001590  50DB               	movf	plusw2,w,c
  7794   001592  E107               	bnz	u2781
  7795   001594  0E9A               	movlw	154
  7796   001596  5CDE               	subwf	postinc2,w,c
  7797   001598  B0D8               	btfsc	status,0,c
  7798   00159A  EFD1  F00A         	goto	u2781
  7799   00159E  EFD3  F00A         	goto	u2780
  7800   0015A2                     u2781:
  7801   0015A2  EFF7  F00A         	goto	l3657
  7802   0015A6                     u2780:
  7803   0015A6  5001               	movf	colour_to_key@p1^0,w,c
  7804   0015A8  6ED9               	movwf	fsr2l,c
  7805   0015AA  6ADA               	clrf	fsr2h,c
  7806   0015AC  0E02               	movlw	2
  7807   0015AE  26D9               	addwf	fsr2l,f,c
  7808   0015B0  0E01               	movlw	1
  7809   0015B2  50DB               	movf	plusw2,w,c
  7810   0015B4  E109               	bnz	u2790
  7811   0015B6  0E0D               	movlw	13
  7812   0015B8  5CDE               	subwf	postinc2,w,c
  7813   0015BA  A0D8               	btfss	status,0,c
  7814   0015BC  EFE2  F00A         	goto	u2791
  7815   0015C0  EFE4  F00A         	goto	u2790
  7816   0015C4                     u2791:
  7817   0015C4  EFF7  F00A         	goto	l3657
  7818   0015C8                     u2790:
  7819   0015C8  5001               	movf	colour_to_key@p1^0,w,c
  7820   0015CA  6ED9               	movwf	fsr2l,c
  7821   0015CC  6ADA               	clrf	fsr2h,c
  7822   0015CE  0E02               	movlw	2
  7823   0015D0  26D9               	addwf	fsr2l,f,c
  7824   0015D2  0E01               	movlw	1
  7825   0015D4  50DB               	movf	plusw2,w,c
  7826   0015D6  E107               	bnz	u2801
  7827   0015D8  0E2C               	movlw	44
  7828   0015DA  5CDE               	subwf	postinc2,w,c
  7829   0015DC  B0D8               	btfsc	status,0,c
  7830   0015DE  EFF3  F00A         	goto	u2801
  7831   0015E2  EFF5  F00A         	goto	u2800
  7832   0015E6                     u2801:
  7833   0015E6  EFF7  F00A         	goto	l3657
  7834   0015EA                     u2800:
  7835   0015EA                     
  7836                           ;color.c: 333:          ((13 <= p1->S) && (p1->S <= 43))) {;color.c: 334:         key = 
      +                          2;
  7837   0015EA  0E02               	movlw	2
  7838   0015EC  6E05               	movwf	colour_to_key@key^0,c
  7839   0015EE                     l3657:
  7840                           
  7841                           ;color.c: 338:     if ( ((180 <= p1->H) && (p1->H <= 244)) &&
  7842   0015EE  5001               	movf	colour_to_key@p1^0,w,c
  7843   0015F0  6ED9               	movwf	fsr2l,c
  7844   0015F2  6ADA               	clrf	fsr2h,c
  7845   0015F4  0E01               	movlw	1
  7846   0015F6  50DB               	movf	plusw2,w,c
  7847   0015F8  E109               	bnz	u2810
  7848   0015FA  0EB4               	movlw	180
  7849   0015FC  5CDE               	subwf	postinc2,w,c
  7850   0015FE  A0D8               	btfss	status,0,c
  7851   001600  EF04  F00B         	goto	u2811
  7852   001604  EF06  F00B         	goto	u2810
  7853   001608                     u2811:
  7854   001608  EF39  F00B         	goto	l3667
  7855   00160C                     u2810:
  7856   00160C  5001               	movf	colour_to_key@p1^0,w,c
  7857   00160E  6ED9               	movwf	fsr2l,c
  7858   001610  6ADA               	clrf	fsr2h,c
  7859   001612  0E01               	movlw	1
  7860   001614  50DB               	movf	plusw2,w,c
  7861   001616  E107               	bnz	u2821
  7862   001618  0EF5               	movlw	245
  7863   00161A  5CDE               	subwf	postinc2,w,c
  7864   00161C  B0D8               	btfsc	status,0,c
  7865   00161E  EF13  F00B         	goto	u2821
  7866   001622  EF15  F00B         	goto	u2820
  7867   001626                     u2821:
  7868   001626  EF39  F00B         	goto	l3667
  7869   00162A                     u2820:
  7870   00162A  5001               	movf	colour_to_key@p1^0,w,c
  7871   00162C  6ED9               	movwf	fsr2l,c
  7872   00162E  6ADA               	clrf	fsr2h,c
  7873   001630  0E02               	movlw	2
  7874   001632  26D9               	addwf	fsr2l,f,c
  7875   001634  0E01               	movlw	1
  7876   001636  50DB               	movf	plusw2,w,c
  7877   001638  E109               	bnz	u2830
  7878   00163A  0E0D               	movlw	13
  7879   00163C  5CDE               	subwf	postinc2,w,c
  7880   00163E  A0D8               	btfss	status,0,c
  7881   001640  EF24  F00B         	goto	u2831
  7882   001644  EF26  F00B         	goto	u2830
  7883   001648                     u2831:
  7884   001648  EF39  F00B         	goto	l3667
  7885   00164C                     u2830:
  7886   00164C  5001               	movf	colour_to_key@p1^0,w,c
  7887   00164E  6ED9               	movwf	fsr2l,c
  7888   001650  6ADA               	clrf	fsr2h,c
  7889   001652  0E02               	movlw	2
  7890   001654  26D9               	addwf	fsr2l,f,c
  7891   001656  0E01               	movlw	1
  7892   001658  50DB               	movf	plusw2,w,c
  7893   00165A  E107               	bnz	u2841
  7894   00165C  0E39               	movlw	57
  7895   00165E  5CDE               	subwf	postinc2,w,c
  7896   001660  B0D8               	btfsc	status,0,c
  7897   001662  EF35  F00B         	goto	u2841
  7898   001666  EF37  F00B         	goto	u2840
  7899   00166A                     u2841:
  7900   00166A  EF39  F00B         	goto	l3667
  7901   00166E                     u2840:
  7902   00166E                     
  7903                           ;color.c: 339:          ((13 <= p1->S) && (p1->S <= 56))) {;color.c: 340:         key = 
      +                          3;
  7904   00166E  0E03               	movlw	3
  7905   001670  6E05               	movwf	colour_to_key@key^0,c
  7906   001672                     l3667:
  7907                           
  7908                           ;color.c: 344:     if ( ((10 <= p1->H) && (p1->H <= 31)) &&
  7909   001672  5001               	movf	colour_to_key@p1^0,w,c
  7910   001674  6ED9               	movwf	fsr2l,c
  7911   001676  6ADA               	clrf	fsr2h,c
  7912   001678  0E01               	movlw	1
  7913   00167A  50DB               	movf	plusw2,w,c
  7914   00167C  E109               	bnz	u2850
  7915   00167E  0E0A               	movlw	10
  7916   001680  5CDE               	subwf	postinc2,w,c
  7917   001682  A0D8               	btfss	status,0,c
  7918   001684  EF46  F00B         	goto	u2851
  7919   001688  EF48  F00B         	goto	u2850
  7920   00168C                     u2851:
  7921   00168C  EF7B  F00B         	goto	l3677
  7922   001690                     u2850:
  7923   001690  5001               	movf	colour_to_key@p1^0,w,c
  7924   001692  6ED9               	movwf	fsr2l,c
  7925   001694  6ADA               	clrf	fsr2h,c
  7926   001696  0E01               	movlw	1
  7927   001698  50DB               	movf	plusw2,w,c
  7928   00169A  E107               	bnz	u2861
  7929   00169C  0E20               	movlw	32
  7930   00169E  5CDE               	subwf	postinc2,w,c
  7931   0016A0  B0D8               	btfsc	status,0,c
  7932   0016A2  EF55  F00B         	goto	u2861
  7933   0016A6  EF57  F00B         	goto	u2860
  7934   0016AA                     u2861:
  7935   0016AA  EF7B  F00B         	goto	l3677
  7936   0016AE                     u2860:
  7937   0016AE  5001               	movf	colour_to_key@p1^0,w,c
  7938   0016B0  6ED9               	movwf	fsr2l,c
  7939   0016B2  6ADA               	clrf	fsr2h,c
  7940   0016B4  0E02               	movlw	2
  7941   0016B6  26D9               	addwf	fsr2l,f,c
  7942   0016B8  0E01               	movlw	1
  7943   0016BA  50DB               	movf	plusw2,w,c
  7944   0016BC  E109               	bnz	u2870
  7945   0016BE  0E11               	movlw	17
  7946   0016C0  5CDE               	subwf	postinc2,w,c
  7947   0016C2  A0D8               	btfss	status,0,c
  7948   0016C4  EF66  F00B         	goto	u2871
  7949   0016C8  EF68  F00B         	goto	u2870
  7950   0016CC                     u2871:
  7951   0016CC  EF7B  F00B         	goto	l3677
  7952   0016D0                     u2870:
  7953   0016D0  5001               	movf	colour_to_key@p1^0,w,c
  7954   0016D2  6ED9               	movwf	fsr2l,c
  7955   0016D4  6ADA               	clrf	fsr2h,c
  7956   0016D6  0E02               	movlw	2
  7957   0016D8  26D9               	addwf	fsr2l,f,c
  7958   0016DA  0E01               	movlw	1
  7959   0016DC  50DB               	movf	plusw2,w,c
  7960   0016DE  E107               	bnz	u2881
  7961   0016E0  0E21               	movlw	33
  7962   0016E2  5CDE               	subwf	postinc2,w,c
  7963   0016E4  B0D8               	btfsc	status,0,c
  7964   0016E6  EF77  F00B         	goto	u2881
  7965   0016EA  EF79  F00B         	goto	u2880
  7966   0016EE                     u2881:
  7967   0016EE  EF7B  F00B         	goto	l3677
  7968   0016F2                     u2880:
  7969   0016F2                     
  7970                           ;color.c: 345:          ((17 <= p1->S) && (p1->S <= 32))) {;color.c: 346:         key = 
      +                          4;
  7971   0016F2  0E04               	movlw	4
  7972   0016F4  6E05               	movwf	colour_to_key@key^0,c
  7973   0016F6                     l3677:
  7974                           
  7975                           ;color.c: 350:     if ( ((279 <= p1->H) && (p1->H <= 360)) &&
  7976   0016F6  5001               	movf	colour_to_key@p1^0,w,c
  7977   0016F8  6ED9               	movwf	fsr2l,c
  7978   0016FA  6ADA               	clrf	fsr2h,c
  7979   0016FC  0E17               	movlw	23
  7980   0016FE  5CDE               	subwf	postinc2,w,c
  7981   001700  0E01               	movlw	1
  7982   001702  58DE               	subwfb	postinc2,w,c
  7983   001704  A0D8               	btfss	status,0,c
  7984   001706  EF87  F00B         	goto	u2891
  7985   00170A  EF89  F00B         	goto	u2890
  7986   00170E                     u2891:
  7987   00170E  EFBB  F00B         	goto	l3687
  7988   001712                     u2890:
  7989   001712  5001               	movf	colour_to_key@p1^0,w,c
  7990   001714  6ED9               	movwf	fsr2l,c
  7991   001716  6ADA               	clrf	fsr2h,c
  7992   001718  0E69               	movlw	105
  7993   00171A  5CDE               	subwf	postinc2,w,c
  7994   00171C  0E01               	movlw	1
  7995   00171E  58DE               	subwfb	postinc2,w,c
  7996   001720  B0D8               	btfsc	status,0,c
  7997   001722  EF95  F00B         	goto	u2901
  7998   001726  EF97  F00B         	goto	u2900
  7999   00172A                     u2901:
  8000   00172A  EFBB  F00B         	goto	l3687
  8001   00172E                     u2900:
  8002   00172E  5001               	movf	colour_to_key@p1^0,w,c
  8003   001730  6ED9               	movwf	fsr2l,c
  8004   001732  6ADA               	clrf	fsr2h,c
  8005   001734  0E02               	movlw	2
  8006   001736  26D9               	addwf	fsr2l,f,c
  8007   001738  0E01               	movlw	1
  8008   00173A  50DB               	movf	plusw2,w,c
  8009   00173C  E109               	bnz	u2910
  8010   00173E  0E0B               	movlw	11
  8011   001740  5CDE               	subwf	postinc2,w,c
  8012   001742  A0D8               	btfss	status,0,c
  8013   001744  EFA6  F00B         	goto	u2911
  8014   001748  EFA8  F00B         	goto	u2910
  8015   00174C                     u2911:
  8016   00174C  EFBB  F00B         	goto	l3687
  8017   001750                     u2910:
  8018   001750  5001               	movf	colour_to_key@p1^0,w,c
  8019   001752  6ED9               	movwf	fsr2l,c
  8020   001754  6ADA               	clrf	fsr2h,c
  8021   001756  0E02               	movlw	2
  8022   001758  26D9               	addwf	fsr2l,f,c
  8023   00175A  0E01               	movlw	1
  8024   00175C  50DB               	movf	plusw2,w,c
  8025   00175E  E107               	bnz	u2921
  8026   001760  0E10               	movlw	16
  8027   001762  5CDE               	subwf	postinc2,w,c
  8028   001764  B0D8               	btfsc	status,0,c
  8029   001766  EFB7  F00B         	goto	u2921
  8030   00176A  EFB9  F00B         	goto	u2920
  8031   00176E                     u2921:
  8032   00176E  EFBB  F00B         	goto	l3687
  8033   001772                     u2920:
  8034   001772                     
  8035                           ;color.c: 351:          ((11 <= p1->S) && (p1->S <= 15))) {;color.c: 352:         key = 
      +                          5;
  8036   001772  0E05               	movlw	5
  8037   001774  6E05               	movwf	colour_to_key@key^0,c
  8038   001776                     l3687:
  8039                           
  8040                           ;color.c: 356:     if ( ((298 <= p1->H) && (p1->H <= 360)) &&
  8041   001776  5001               	movf	colour_to_key@p1^0,w,c
  8042   001778  6ED9               	movwf	fsr2l,c
  8043   00177A  6ADA               	clrf	fsr2h,c
  8044   00177C  0E2A               	movlw	42
  8045   00177E  5CDE               	subwf	postinc2,w,c
  8046   001780  0E01               	movlw	1
  8047   001782  58DE               	subwfb	postinc2,w,c
  8048   001784  A0D8               	btfss	status,0,c
  8049   001786  EFC7  F00B         	goto	u2931
  8050   00178A  EFC9  F00B         	goto	u2930
  8051   00178E                     u2931:
  8052   00178E  EFFB  F00B         	goto	l3697
  8053   001792                     u2930:
  8054   001792  5001               	movf	colour_to_key@p1^0,w,c
  8055   001794  6ED9               	movwf	fsr2l,c
  8056   001796  6ADA               	clrf	fsr2h,c
  8057   001798  0E69               	movlw	105
  8058   00179A  5CDE               	subwf	postinc2,w,c
  8059   00179C  0E01               	movlw	1
  8060   00179E  58DE               	subwfb	postinc2,w,c
  8061   0017A0  B0D8               	btfsc	status,0,c
  8062   0017A2  EFD5  F00B         	goto	u2941
  8063   0017A6  EFD7  F00B         	goto	u2940
  8064   0017AA                     u2941:
  8065   0017AA  EFFB  F00B         	goto	l3697
  8066   0017AE                     u2940:
  8067   0017AE  5001               	movf	colour_to_key@p1^0,w,c
  8068   0017B0  6ED9               	movwf	fsr2l,c
  8069   0017B2  6ADA               	clrf	fsr2h,c
  8070   0017B4  0E02               	movlw	2
  8071   0017B6  26D9               	addwf	fsr2l,f,c
  8072   0017B8  0E01               	movlw	1
  8073   0017BA  50DB               	movf	plusw2,w,c
  8074   0017BC  E109               	bnz	u2950
  8075   0017BE  0E14               	movlw	20
  8076   0017C0  5CDE               	subwf	postinc2,w,c
  8077   0017C2  A0D8               	btfss	status,0,c
  8078   0017C4  EFE6  F00B         	goto	u2951
  8079   0017C8  EFE8  F00B         	goto	u2950
  8080   0017CC                     u2951:
  8081   0017CC  EFFB  F00B         	goto	l3697
  8082   0017D0                     u2950:
  8083   0017D0  5001               	movf	colour_to_key@p1^0,w,c
  8084   0017D2  6ED9               	movwf	fsr2l,c
  8085   0017D4  6ADA               	clrf	fsr2h,c
  8086   0017D6  0E02               	movlw	2
  8087   0017D8  26D9               	addwf	fsr2l,f,c
  8088   0017DA  0E01               	movlw	1
  8089   0017DC  50DB               	movf	plusw2,w,c
  8090   0017DE  E107               	bnz	u2961
  8091   0017E0  0E2E               	movlw	46
  8092   0017E2  5CDE               	subwf	postinc2,w,c
  8093   0017E4  B0D8               	btfsc	status,0,c
  8094   0017E6  EFF7  F00B         	goto	u2961
  8095   0017EA  EFF9  F00B         	goto	u2960
  8096   0017EE                     u2961:
  8097   0017EE  EFFB  F00B         	goto	l3697
  8098   0017F2                     u2960:
  8099   0017F2                     
  8100                           ;color.c: 357:          ((20 <= p1->S) && (p1->S <= 45))) {;color.c: 358:         key = 
      +                          6;
  8101   0017F2  0E06               	movlw	6
  8102   0017F4  6E05               	movwf	colour_to_key@key^0,c
  8103   0017F6                     l3697:
  8104                           
  8105                           ;color.c: 362:     if ( ((154 <= p1->H) && (p1->H <= 207)) &&
  8106   0017F6  5001               	movf	colour_to_key@p1^0,w,c
  8107   0017F8  6ED9               	movwf	fsr2l,c
  8108   0017FA  6ADA               	clrf	fsr2h,c
  8109   0017FC  0E01               	movlw	1
  8110   0017FE  50DB               	movf	plusw2,w,c
  8111   001800  E109               	bnz	u2970
  8112   001802  0E9A               	movlw	154
  8113   001804  5CDE               	subwf	postinc2,w,c
  8114   001806  A0D8               	btfss	status,0,c
  8115   001808  EF08  F00C         	goto	u2971
  8116   00180C  EF0A  F00C         	goto	u2970
  8117   001810                     u2971:
  8118   001810  EF3D  F00C         	goto	l3707
  8119   001814                     u2970:
  8120   001814  5001               	movf	colour_to_key@p1^0,w,c
  8121   001816  6ED9               	movwf	fsr2l,c
  8122   001818  6ADA               	clrf	fsr2h,c
  8123   00181A  0E01               	movlw	1
  8124   00181C  50DB               	movf	plusw2,w,c
  8125   00181E  E107               	bnz	u2981
  8126   001820  0ED0               	movlw	208
  8127   001822  5CDE               	subwf	postinc2,w,c
  8128   001824  B0D8               	btfsc	status,0,c
  8129   001826  EF17  F00C         	goto	u2981
  8130   00182A  EF19  F00C         	goto	u2980
  8131   00182E                     u2981:
  8132   00182E  EF3D  F00C         	goto	l3707
  8133   001832                     u2980:
  8134   001832  5001               	movf	colour_to_key@p1^0,w,c
  8135   001834  6ED9               	movwf	fsr2l,c
  8136   001836  6ADA               	clrf	fsr2h,c
  8137   001838  0E02               	movlw	2
  8138   00183A  26D9               	addwf	fsr2l,f,c
  8139   00183C  0E01               	movlw	1
  8140   00183E  50DB               	movf	plusw2,w,c
  8141   001840  E109               	bnz	u2990
  8142   001842  0E0D               	movlw	13
  8143   001844  5CDE               	subwf	postinc2,w,c
  8144   001846  A0D8               	btfss	status,0,c
  8145   001848  EF28  F00C         	goto	u2991
  8146   00184C  EF2A  F00C         	goto	u2990
  8147   001850                     u2991:
  8148   001850  EF3D  F00C         	goto	l3707
  8149   001854                     u2990:
  8150   001854  5001               	movf	colour_to_key@p1^0,w,c
  8151   001856  6ED9               	movwf	fsr2l,c
  8152   001858  6ADA               	clrf	fsr2h,c
  8153   00185A  0E02               	movlw	2
  8154   00185C  26D9               	addwf	fsr2l,f,c
  8155   00185E  0E01               	movlw	1
  8156   001860  50DB               	movf	plusw2,w,c
  8157   001862  E107               	bnz	u3001
  8158   001864  0E2E               	movlw	46
  8159   001866  5CDE               	subwf	postinc2,w,c
  8160   001868  B0D8               	btfsc	status,0,c
  8161   00186A  EF39  F00C         	goto	u3001
  8162   00186E  EF3B  F00C         	goto	u3000
  8163   001872                     u3001:
  8164   001872  EF3D  F00C         	goto	l3707
  8165   001876                     u3000:
  8166   001876                     
  8167                           ;color.c: 363:          ((13 <= p1->S) && (p1->S <= 45))) {;color.c: 364:         key = 
      +                          7;
  8168   001876  0E07               	movlw	7
  8169   001878  6E05               	movwf	colour_to_key@key^0,c
  8170   00187A                     l3707:
  8171                           
  8172                           ;color.c: 368:     if ( ((3000 <= p2->C) && (p2->C <= 40000)) &&
  8173   00187A  5002               	movf	colour_to_key@p2^0,w,c
  8174   00187C  6ED9               	movwf	fsr2l,c
  8175   00187E  6ADA               	clrf	fsr2h,c
  8176   001880  0E06               	movlw	6
  8177   001882  26D9               	addwf	fsr2l,f,c
  8178   001884  0EB8               	movlw	184
  8179   001886  5CDE               	subwf	postinc2,w,c
  8180   001888  0E0B               	movlw	11
  8181   00188A  58DE               	subwfb	postinc2,w,c
  8182   00188C  A0D8               	btfss	status,0,c
  8183   00188E  EF4B  F00C         	goto	u3011
  8184   001892  EF4D  F00C         	goto	u3010
  8185   001896                     u3011:
  8186   001896  EF70  F00C         	goto	l3715
  8187   00189A                     u3010:
  8188   00189A  5002               	movf	colour_to_key@p2^0,w,c
  8189   00189C  6ED9               	movwf	fsr2l,c
  8190   00189E  6ADA               	clrf	fsr2h,c
  8191   0018A0  0E06               	movlw	6
  8192   0018A2  26D9               	addwf	fsr2l,f,c
  8193   0018A4  0E41               	movlw	65
  8194   0018A6  5CDE               	subwf	postinc2,w,c
  8195   0018A8  0E9C               	movlw	156
  8196   0018AA  58DE               	subwfb	postinc2,w,c
  8197   0018AC  B0D8               	btfsc	status,0,c
  8198   0018AE  EF5B  F00C         	goto	u3021
  8199   0018B2  EF5D  F00C         	goto	u3020
  8200   0018B6                     u3021:
  8201   0018B6  EF70  F00C         	goto	l3715
  8202   0018BA                     u3020:
  8203   0018BA  5001               	movf	colour_to_key@p1^0,w,c
  8204   0018BC  6ED9               	movwf	fsr2l,c
  8205   0018BE  6ADA               	clrf	fsr2h,c
  8206   0018C0  0E02               	movlw	2
  8207   0018C2  26D9               	addwf	fsr2l,f,c
  8208   0018C4  0E01               	movlw	1
  8209   0018C6  50DB               	movf	plusw2,w,c
  8210   0018C8  E107               	bnz	u3031
  8211   0018CA  0E0B               	movlw	11
  8212   0018CC  5CDE               	subwf	postinc2,w,c
  8213   0018CE  B0D8               	btfsc	status,0,c
  8214   0018D0  EF6C  F00C         	goto	u3031
  8215   0018D4  EF6E  F00C         	goto	u3030
  8216   0018D8                     u3031:
  8217   0018D8  EF70  F00C         	goto	l3715
  8218   0018DC                     u3030:
  8219   0018DC                     
  8220                           ;color.c: 369:          ((p1->S <= 10))) {;color.c: 370:         key = 8;
  8221   0018DC  0E08               	movlw	8
  8222   0018DE  6E05               	movwf	colour_to_key@key^0,c
  8223   0018E0                     l3715:
  8224                           
  8225                           ;color.c: 374:     if ( ((1000 <= p2->C) && (p2->C <= 2600)) &&
  8226   0018E0  5002               	movf	colour_to_key@p2^0,w,c
  8227   0018E2  6ED9               	movwf	fsr2l,c
  8228   0018E4  6ADA               	clrf	fsr2h,c
  8229   0018E6  0E06               	movlw	6
  8230   0018E8  26D9               	addwf	fsr2l,f,c
  8231   0018EA  0EE8               	movlw	232
  8232   0018EC  5CDE               	subwf	postinc2,w,c
  8233   0018EE  0E03               	movlw	3
  8234   0018F0  58DE               	subwfb	postinc2,w,c
  8235   0018F2  A0D8               	btfss	status,0,c
  8236   0018F4  EF7E  F00C         	goto	u3041
  8237   0018F8  EF80  F00C         	goto	u3040
  8238   0018FC                     u3041:
  8239   0018FC  EFA3  F00C         	goto	l139
  8240   001900                     u3040:
  8241   001900  5002               	movf	colour_to_key@p2^0,w,c
  8242   001902  6ED9               	movwf	fsr2l,c
  8243   001904  6ADA               	clrf	fsr2h,c
  8244   001906  0E06               	movlw	6
  8245   001908  26D9               	addwf	fsr2l,f,c
  8246   00190A  0E29               	movlw	41
  8247   00190C  5CDE               	subwf	postinc2,w,c
  8248   00190E  0E0A               	movlw	10
  8249   001910  58DE               	subwfb	postinc2,w,c
  8250   001912  B0D8               	btfsc	status,0,c
  8251   001914  EF8E  F00C         	goto	u3051
  8252   001918  EF90  F00C         	goto	u3050
  8253   00191C                     u3051:
  8254   00191C  EFA3  F00C         	goto	l139
  8255   001920                     u3050:
  8256   001920  5001               	movf	colour_to_key@p1^0,w,c
  8257   001922  6ED9               	movwf	fsr2l,c
  8258   001924  6ADA               	clrf	fsr2h,c
  8259   001926  0E02               	movlw	2
  8260   001928  26D9               	addwf	fsr2l,f,c
  8261   00192A  0E01               	movlw	1
  8262   00192C  50DB               	movf	plusw2,w,c
  8263   00192E  E107               	bnz	u3061
  8264   001930  0E0D               	movlw	13
  8265   001932  5CDE               	subwf	postinc2,w,c
  8266   001934  B0D8               	btfsc	status,0,c
  8267   001936  EF9F  F00C         	goto	u3061
  8268   00193A  EFA1  F00C         	goto	u3060
  8269   00193E                     u3061:
  8270   00193E  EFA3  F00C         	goto	l139
  8271   001942                     u3060:
  8272   001942                     
  8273                           ;color.c: 375:          ((p1->S <= 12))) {;color.c: 376:         key = 9;
  8274   001942  0E09               	movlw	9
  8275   001944  6E05               	movwf	colour_to_key@key^0,c
  8276   001946                     l139:
  8277                           
  8278                           ;color.c: 379:     return key;
  8279   001946  5005               	movf	colour_to_key@key^0,w,c
  8280   001948  0012               	return		;funcret
  8281   00194A                     __end_of_colour_to_key:
  8282                           	callstack 0
  8283                           
  8284 ;; *************** function _average_RGBC *****************
  8285 ;; Defined at:
  8286 ;;		line 124 in file "color.c"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;  p               1   13[COMRAM] PTR struct RGBC_val
  8289 ;;		 -> main@RGBC_colour(8), 
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;  i               1   16[COMRAM] unsigned char 
  8292 ;;  temp_C          4   29[COMRAM] unsigned long 
  8293 ;;  temp_B          4   25[COMRAM] unsigned long 
  8294 ;;  temp_G          4   21[COMRAM] unsigned long 
  8295 ;;  temp_R          4   17[COMRAM] unsigned long 
  8296 ;; Return value:  Size  Location     Type
  8297 ;;                  1    wreg      void 
  8298 ;; Registers used:
  8299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8300 ;; Tracked objects:
  8301 ;;		On entry : 0/0
  8302 ;;		On exit  : 0/0
  8303 ;;		Unchanged: 0/0
  8304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8305 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8306 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8308 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8309 ;;Total ram usage:       20 bytes
  8310 ;; Hardware stack levels used: 1
  8311 ;; Hardware stack levels required when called: 5
  8312 ;; This function calls:
  8313 ;;		___lldiv
  8314 ;;		_read_RGBC
  8315 ;; This function is called by:
  8316 ;;		_forward_navigation
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           	psect	text49
  8321   001D74                     __ptext49:
  8322                           	callstack 0
  8323   001D74                     _average_RGBC:
  8324                           	callstack 24
  8325   001D74                     
  8326                           ;color.c: 124: void average_RGBC(struct RGBC_val *p);color.c: 125: {;color.c: 127:     u
      +                          nsigned long temp_R = 0;
  8327   001D74  0E00               	movlw	0
  8328   001D76  6E12               	movwf	average_RGBC@temp_R^0,c
  8329   001D78  0E00               	movlw	0
  8330   001D7A  6E13               	movwf	(average_RGBC@temp_R+1)^0,c
  8331   001D7C  0E00               	movlw	0
  8332   001D7E  6E14               	movwf	(average_RGBC@temp_R+2)^0,c
  8333   001D80  0E00               	movlw	0
  8334   001D82  6E15               	movwf	(average_RGBC@temp_R+3)^0,c
  8335                           
  8336                           ;color.c: 128:     unsigned long temp_G = 0;
  8337   001D84  0E00               	movlw	0
  8338   001D86  6E16               	movwf	average_RGBC@temp_G^0,c
  8339   001D88  0E00               	movlw	0
  8340   001D8A  6E17               	movwf	(average_RGBC@temp_G+1)^0,c
  8341   001D8C  0E00               	movlw	0
  8342   001D8E  6E18               	movwf	(average_RGBC@temp_G+2)^0,c
  8343   001D90  0E00               	movlw	0
  8344   001D92  6E19               	movwf	(average_RGBC@temp_G+3)^0,c
  8345                           
  8346                           ;color.c: 129:     unsigned long temp_B = 0;
  8347   001D94  0E00               	movlw	0
  8348   001D96  6E1A               	movwf	average_RGBC@temp_B^0,c
  8349   001D98  0E00               	movlw	0
  8350   001D9A  6E1B               	movwf	(average_RGBC@temp_B+1)^0,c
  8351   001D9C  0E00               	movlw	0
  8352   001D9E  6E1C               	movwf	(average_RGBC@temp_B+2)^0,c
  8353   001DA0  0E00               	movlw	0
  8354   001DA2  6E1D               	movwf	(average_RGBC@temp_B+3)^0,c
  8355                           
  8356                           ;color.c: 130:     unsigned long temp_C = 0;
  8357   001DA4  0E00               	movlw	0
  8358   001DA6  6E1E               	movwf	average_RGBC@temp_C^0,c
  8359   001DA8  0E00               	movlw	0
  8360   001DAA  6E1F               	movwf	(average_RGBC@temp_C+1)^0,c
  8361   001DAC  0E00               	movlw	0
  8362   001DAE  6E20               	movwf	(average_RGBC@temp_C+2)^0,c
  8363   001DB0  0E00               	movlw	0
  8364   001DB2  6E21               	movwf	(average_RGBC@temp_C+3)^0,c
  8365                           
  8366                           ;color.c: 133:     for (unsigned char i = 0; i < sample_count; i++) {
  8367   001DB4  0E00               	movlw	0
  8368   001DB6  6E11               	movwf	average_RGBC@i^0,c
  8369   001DB8  EF25  F00F         	goto	l3497
  8370   001DBC                     l3485:
  8371                           
  8372                           ;color.c: 136:         read_RGBC(p);
  8373   001DBC  C00E  F00C         	movff	average_RGBC@p,read_RGBC@p
  8374   001DC0  ECBA  F019         	call	_read_RGBC	;wreg free
  8375   001DC4                     
  8376                           ;color.c: 139:         temp_R += (unsigned long)p->R;
  8377   001DC4  500E               	movf	average_RGBC@p^0,w,c
  8378   001DC6  6ED9               	movwf	fsr2l,c
  8379   001DC8  6ADA               	clrf	fsr2h,c
  8380   001DCA  CFDE F00F          	movff	postinc2,??_average_RGBC
  8381   001DCE  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8382   001DD2  500F               	movf	??_average_RGBC^0,w,c
  8383   001DD4  2612               	addwf	average_RGBC@temp_R^0,f,c
  8384   001DD6  5010               	movf	(??_average_RGBC+1)^0,w,c
  8385   001DD8  2213               	addwfc	(average_RGBC@temp_R+1)^0,f,c
  8386   001DDA  0E00               	movlw	0
  8387   001DDC  2214               	addwfc	(average_RGBC@temp_R+2)^0,f,c
  8388   001DDE  0E00               	movlw	0
  8389   001DE0  2215               	addwfc	(average_RGBC@temp_R+3)^0,f,c
  8390   001DE2                     
  8391                           ;color.c: 140:         temp_G += (unsigned long)p->G;
  8392   001DE2  500E               	movf	average_RGBC@p^0,w,c
  8393   001DE4  6ED9               	movwf	fsr2l,c
  8394   001DE6  6ADA               	clrf	fsr2h,c
  8395   001DE8  0E02               	movlw	2
  8396   001DEA  26D9               	addwf	fsr2l,f,c
  8397   001DEC  CFDE F00F          	movff	postinc2,??_average_RGBC
  8398   001DF0  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8399   001DF4  500F               	movf	??_average_RGBC^0,w,c
  8400   001DF6  2616               	addwf	average_RGBC@temp_G^0,f,c
  8401   001DF8  5010               	movf	(??_average_RGBC+1)^0,w,c
  8402   001DFA  2217               	addwfc	(average_RGBC@temp_G+1)^0,f,c
  8403   001DFC  0E00               	movlw	0
  8404   001DFE  2218               	addwfc	(average_RGBC@temp_G+2)^0,f,c
  8405   001E00  0E00               	movlw	0
  8406   001E02  2219               	addwfc	(average_RGBC@temp_G+3)^0,f,c
  8407   001E04                     
  8408                           ;color.c: 141:         temp_B += (unsigned long)p->B;
  8409   001E04  500E               	movf	average_RGBC@p^0,w,c
  8410   001E06  6ED9               	movwf	fsr2l,c
  8411   001E08  6ADA               	clrf	fsr2h,c
  8412   001E0A  0E04               	movlw	4
  8413   001E0C  26D9               	addwf	fsr2l,f,c
  8414   001E0E  CFDE F00F          	movff	postinc2,??_average_RGBC
  8415   001E12  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8416   001E16  500F               	movf	??_average_RGBC^0,w,c
  8417   001E18  261A               	addwf	average_RGBC@temp_B^0,f,c
  8418   001E1A  5010               	movf	(??_average_RGBC+1)^0,w,c
  8419   001E1C  221B               	addwfc	(average_RGBC@temp_B+1)^0,f,c
  8420   001E1E  0E00               	movlw	0
  8421   001E20  221C               	addwfc	(average_RGBC@temp_B+2)^0,f,c
  8422   001E22  0E00               	movlw	0
  8423   001E24  221D               	addwfc	(average_RGBC@temp_B+3)^0,f,c
  8424   001E26                     
  8425                           ;color.c: 142:         temp_C += (unsigned long)p->C;
  8426   001E26  500E               	movf	average_RGBC@p^0,w,c
  8427   001E28  6ED9               	movwf	fsr2l,c
  8428   001E2A  6ADA               	clrf	fsr2h,c
  8429   001E2C  0E06               	movlw	6
  8430   001E2E  26D9               	addwf	fsr2l,f,c
  8431   001E30  CFDE F00F          	movff	postinc2,??_average_RGBC
  8432   001E34  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8433   001E38  500F               	movf	??_average_RGBC^0,w,c
  8434   001E3A  261E               	addwf	average_RGBC@temp_C^0,f,c
  8435   001E3C  5010               	movf	(??_average_RGBC+1)^0,w,c
  8436   001E3E  221F               	addwfc	(average_RGBC@temp_C+1)^0,f,c
  8437   001E40  0E00               	movlw	0
  8438   001E42  2220               	addwfc	(average_RGBC@temp_C+2)^0,f,c
  8439   001E44  0E00               	movlw	0
  8440   001E46  2221               	addwfc	(average_RGBC@temp_C+3)^0,f,c
  8441   001E48                     
  8442                           ;color.c: 143:     }
  8443   001E48  2A11               	incf	average_RGBC@i^0,f,c
  8444   001E4A                     l3497:
  8445   001E4A  0E13               	movlw	19
  8446   001E4C  6411               	cpfsgt	average_RGBC@i^0,c
  8447   001E4E  EF2B  F00F         	goto	u2601
  8448   001E52  EF2D  F00F         	goto	u2600
  8449   001E56                     u2601:
  8450   001E56  EFDE  F00E         	goto	l3485
  8451   001E5A                     u2600:
  8452   001E5A  C012  F001         	movff	average_RGBC@temp_R,___lldiv@dividend
  8453   001E5E  C013  F002         	movff	average_RGBC@temp_R+1,___lldiv@dividend+1
  8454   001E62  C014  F003         	movff	average_RGBC@temp_R+2,___lldiv@dividend+2
  8455   001E66  C015  F004         	movff	average_RGBC@temp_R+3,___lldiv@dividend+3
  8456   001E6A  0E14               	movlw	20
  8457   001E6C  6E05               	movwf	___lldiv@divisor^0,c
  8458   001E6E  0E00               	movlw	0
  8459   001E70  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8460   001E72  0E00               	movlw	0
  8461   001E74  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8462   001E76  0E00               	movlw	0
  8463   001E78  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8464   001E7A  ECEA  F015         	call	___lldiv	;wreg free
  8465   001E7E  C001  F012         	movff	?___lldiv,average_RGBC@temp_R
  8466   001E82  C002  F013         	movff	?___lldiv+1,average_RGBC@temp_R+1
  8467   001E86  C003  F014         	movff	?___lldiv+2,average_RGBC@temp_R+2
  8468   001E8A  C004  F015         	movff	?___lldiv+3,average_RGBC@temp_R+3
  8469   001E8E  C016  F001         	movff	average_RGBC@temp_G,___lldiv@dividend
  8470   001E92  C017  F002         	movff	average_RGBC@temp_G+1,___lldiv@dividend+1
  8471   001E96  C018  F003         	movff	average_RGBC@temp_G+2,___lldiv@dividend+2
  8472   001E9A  C019  F004         	movff	average_RGBC@temp_G+3,___lldiv@dividend+3
  8473   001E9E  0E14               	movlw	20
  8474   001EA0  6E05               	movwf	___lldiv@divisor^0,c
  8475   001EA2  0E00               	movlw	0
  8476   001EA4  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8477   001EA6  0E00               	movlw	0
  8478   001EA8  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8479   001EAA  0E00               	movlw	0
  8480   001EAC  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8481   001EAE  ECEA  F015         	call	___lldiv	;wreg free
  8482   001EB2  C001  F016         	movff	?___lldiv,average_RGBC@temp_G
  8483   001EB6  C002  F017         	movff	?___lldiv+1,average_RGBC@temp_G+1
  8484   001EBA  C003  F018         	movff	?___lldiv+2,average_RGBC@temp_G+2
  8485   001EBE  C004  F019         	movff	?___lldiv+3,average_RGBC@temp_G+3
  8486   001EC2  C01A  F001         	movff	average_RGBC@temp_B,___lldiv@dividend
  8487   001EC6  C01B  F002         	movff	average_RGBC@temp_B+1,___lldiv@dividend+1
  8488   001ECA  C01C  F003         	movff	average_RGBC@temp_B+2,___lldiv@dividend+2
  8489   001ECE  C01D  F004         	movff	average_RGBC@temp_B+3,___lldiv@dividend+3
  8490   001ED2  0E14               	movlw	20
  8491   001ED4  6E05               	movwf	___lldiv@divisor^0,c
  8492   001ED6  0E00               	movlw	0
  8493   001ED8  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8494   001EDA  0E00               	movlw	0
  8495   001EDC  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8496   001EDE  0E00               	movlw	0
  8497   001EE0  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8498   001EE2  ECEA  F015         	call	___lldiv	;wreg free
  8499   001EE6  C001  F01A         	movff	?___lldiv,average_RGBC@temp_B
  8500   001EEA  C002  F01B         	movff	?___lldiv+1,average_RGBC@temp_B+1
  8501   001EEE  C003  F01C         	movff	?___lldiv+2,average_RGBC@temp_B+2
  8502   001EF2  C004  F01D         	movff	?___lldiv+3,average_RGBC@temp_B+3
  8503   001EF6  C01E  F001         	movff	average_RGBC@temp_C,___lldiv@dividend
  8504   001EFA  C01F  F002         	movff	average_RGBC@temp_C+1,___lldiv@dividend+1
  8505   001EFE  C020  F003         	movff	average_RGBC@temp_C+2,___lldiv@dividend+2
  8506   001F02  C021  F004         	movff	average_RGBC@temp_C+3,___lldiv@dividend+3
  8507   001F06  0E14               	movlw	20
  8508   001F08  6E05               	movwf	___lldiv@divisor^0,c
  8509   001F0A  0E00               	movlw	0
  8510   001F0C  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8511   001F0E  0E00               	movlw	0
  8512   001F10  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8513   001F12  0E00               	movlw	0
  8514   001F14  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8515   001F16  ECEA  F015         	call	___lldiv	;wreg free
  8516   001F1A  C001  F01E         	movff	?___lldiv,average_RGBC@temp_C
  8517   001F1E  C002  F01F         	movff	?___lldiv+1,average_RGBC@temp_C+1
  8518   001F22  C003  F020         	movff	?___lldiv+2,average_RGBC@temp_C+2
  8519   001F26  C004  F021         	movff	?___lldiv+3,average_RGBC@temp_C+3
  8520   001F2A                     
  8521                           ;color.c: 152:     p->R = (unsigned int)temp_R;
  8522   001F2A  500E               	movf	average_RGBC@p^0,w,c
  8523   001F2C  6ED9               	movwf	fsr2l,c
  8524   001F2E  6ADA               	clrf	fsr2h,c
  8525   001F30  C012  FFDE         	movff	average_RGBC@temp_R,postinc2
  8526   001F34  C013  FFDD         	movff	average_RGBC@temp_R+1,postdec2
  8527   001F38                     
  8528                           ;color.c: 153:     p->G = (unsigned int)temp_G;
  8529   001F38  500E               	movf	average_RGBC@p^0,w,c
  8530   001F3A  6ED9               	movwf	fsr2l,c
  8531   001F3C  6ADA               	clrf	fsr2h,c
  8532   001F3E  0E02               	movlw	2
  8533   001F40  26D9               	addwf	fsr2l,f,c
  8534   001F42  C016  FFDE         	movff	average_RGBC@temp_G,postinc2
  8535   001F46  C017  FFDD         	movff	average_RGBC@temp_G+1,postdec2
  8536   001F4A                     
  8537                           ;color.c: 154:     p->B = (unsigned int)temp_B;
  8538   001F4A  500E               	movf	average_RGBC@p^0,w,c
  8539   001F4C  6ED9               	movwf	fsr2l,c
  8540   001F4E  6ADA               	clrf	fsr2h,c
  8541   001F50  0E04               	movlw	4
  8542   001F52  26D9               	addwf	fsr2l,f,c
  8543   001F54  C01A  FFDE         	movff	average_RGBC@temp_B,postinc2
  8544   001F58  C01B  FFDD         	movff	average_RGBC@temp_B+1,postdec2
  8545   001F5C                     
  8546                           ;color.c: 155:     p->C = (unsigned int)temp_C;
  8547   001F5C  500E               	movf	average_RGBC@p^0,w,c
  8548   001F5E  6ED9               	movwf	fsr2l,c
  8549   001F60  6ADA               	clrf	fsr2h,c
  8550   001F62  0E06               	movlw	6
  8551   001F64  26D9               	addwf	fsr2l,f,c
  8552   001F66  C01E  FFDE         	movff	average_RGBC@temp_C,postinc2
  8553   001F6A  C01F  FFDD         	movff	average_RGBC@temp_C+1,postdec2
  8554   001F6E  0012               	return		;funcret
  8555   001F70                     __end_of_average_RGBC:
  8556                           	callstack 0
  8557                           
  8558 ;; *************** function _read_RGBC *****************
  8559 ;; Defined at:
  8560 ;;		line 112 in file "color.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  8563 ;;		 -> main@RGBC_colour(8), 
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      void 
  8568 ;; Registers used:
  8569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8575 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8579 ;;Total ram usage:        1 bytes
  8580 ;; Hardware stack levels used: 1
  8581 ;; Hardware stack levels required when called: 4
  8582 ;; This function calls:
  8583 ;;		_color_read_Blue
  8584 ;;		_color_read_Clear
  8585 ;;		_color_read_Green
  8586 ;;		_color_read_Red
  8587 ;; This function is called by:
  8588 ;;		_average_RGBC
  8589 ;;		_wait_for_wall
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           	psect	text50
  8594   003374                     __ptext50:
  8595                           	callstack 0
  8596   003374                     _read_RGBC:
  8597                           	callstack 24
  8598   003374                     
  8599                           ;color.c: 112: void read_RGBC(struct RGBC_val *p);color.c: 113: {;color.c: 114:     p->R
      +                           = color_read_Red();
  8600   003374  ECE5  F019         	call	_color_read_Red	;wreg free
  8601   003378  500C               	movf	read_RGBC@p^0,w,c
  8602   00337A  6ED9               	movwf	fsr2l,c
  8603   00337C  6ADA               	clrf	fsr2h,c
  8604   00337E  C005  FFDE         	movff	?_color_read_Red,postinc2
  8605   003382  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  8606                           
  8607                           ;color.c: 115:     p->G = color_read_Green();
  8608   003386  EC0D  F01A         	call	_color_read_Green	;wreg free
  8609   00338A  500C               	movf	read_RGBC@p^0,w,c
  8610   00338C  6ED9               	movwf	fsr2l,c
  8611   00338E  6ADA               	clrf	fsr2h,c
  8612   003390  0E02               	movlw	2
  8613   003392  26D9               	addwf	fsr2l,f,c
  8614   003394  C005  FFDE         	movff	?_color_read_Green,postinc2
  8615   003398  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  8616                           
  8617                           ;color.c: 116:     p->B = color_read_Blue();
  8618   00339C  EC5D  F01A         	call	_color_read_Blue	;wreg free
  8619   0033A0  500C               	movf	read_RGBC@p^0,w,c
  8620   0033A2  6ED9               	movwf	fsr2l,c
  8621   0033A4  6ADA               	clrf	fsr2h,c
  8622   0033A6  0E04               	movlw	4
  8623   0033A8  26D9               	addwf	fsr2l,f,c
  8624   0033AA  C005  FFDE         	movff	?_color_read_Blue,postinc2
  8625   0033AE  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  8626                           
  8627                           ;color.c: 117:     p->C = color_read_Clear();
  8628   0033B2  EC35  F01A         	call	_color_read_Clear	;wreg free
  8629   0033B6  500C               	movf	read_RGBC@p^0,w,c
  8630   0033B8  6ED9               	movwf	fsr2l,c
  8631   0033BA  6ADA               	clrf	fsr2h,c
  8632   0033BC  0E06               	movlw	6
  8633   0033BE  26D9               	addwf	fsr2l,f,c
  8634   0033C0  C005  FFDE         	movff	?_color_read_Clear,postinc2
  8635   0033C4  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  8636   0033C8  0012               	return		;funcret
  8637   0033CA                     __end_of_read_RGBC:
  8638                           	callstack 0
  8639                           
  8640 ;; *************** function _color_read_Red *****************
  8641 ;; Defined at:
  8642 ;;		line 40 in file "color.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;		None
  8645 ;; Auto vars:     Size  Location     Type
  8646 ;;  tmp             2    9[COMRAM] unsigned int 
  8647 ;; Return value:  Size  Location     Type
  8648 ;;                  2    4[COMRAM] unsigned int 
  8649 ;; Registers used:
  8650 ;;		wreg, status,2, status,0, cstack
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8656 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8658 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8659 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8660 ;;Total ram usage:        7 bytes
  8661 ;; Hardware stack levels used: 1
  8662 ;; Hardware stack levels required when called: 3
  8663 ;; This function calls:
  8664 ;;		_I2C_2_Master_Read
  8665 ;;		_I2C_2_Master_RepStart
  8666 ;;		_I2C_2_Master_Start
  8667 ;;		_I2C_2_Master_Stop
  8668 ;;		_I2C_2_Master_Write
  8669 ;; This function is called by:
  8670 ;;		_read_RGBC
  8671 ;; This function uses a non-reentrant model
  8672 ;;
  8673                           
  8674                           	psect	text51
  8675   0033CA                     __ptext51:
  8676                           	callstack 0
  8677   0033CA                     _color_read_Red:
  8678                           	callstack 24
  8679   0033CA                     
  8680                           ;color.c: 42:  unsigned int tmp;;color.c: 43:  I2C_2_Master_Start();
  8681   0033CA  ECEF  F01C         	call	_I2C_2_Master_Start	;wreg free
  8682                           
  8683                           ;color.c: 44:  I2C_2_Master_Write(0x52 | 0x00);
  8684   0033CE  0E52               	movlw	82
  8685   0033D0  ECD3  F01C         	call	_I2C_2_Master_Write
  8686                           
  8687                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  8688   0033D4  0EB6               	movlw	182
  8689   0033D6  ECD3  F01C         	call	_I2C_2_Master_Write
  8690                           
  8691                           ;color.c: 46:  I2C_2_Master_RepStart();
  8692   0033DA  ECE5  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8693                           
  8694                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  8695   0033DE  0E53               	movlw	83
  8696   0033E0  ECD3  F01C         	call	_I2C_2_Master_Write
  8697                           
  8698                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  8699   0033E4  0E01               	movlw	1
  8700   0033E6  ECC8  F01A         	call	_I2C_2_Master_Read
  8701   0033EA  6E07               	movwf	??_color_read_Red^0,c
  8702   0033EC  5007               	movf	??_color_read_Red^0,w,c
  8703   0033EE  6E0A               	movwf	color_read_Red@tmp^0,c
  8704   0033F0  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  8705                           
  8706                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8707   0033F2  0E00               	movlw	0
  8708   0033F4  ECC8  F01A         	call	_I2C_2_Master_Read
  8709   0033F8  6E07               	movwf	??_color_read_Red^0,c
  8710   0033FA  5007               	movf	??_color_read_Red^0,w,c
  8711   0033FC  6E09               	movwf	(??_color_read_Red+2)^0,c
  8712   0033FE  6A08               	clrf	(??_color_read_Red+1)^0,c
  8713   003400  500A               	movf	color_read_Red@tmp^0,w,c
  8714   003402  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  8715   003404  6E0A               	movwf	color_read_Red@tmp^0,c
  8716   003406  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  8717   003408  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  8718   00340A  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  8719                           
  8720                           ;color.c: 50:  I2C_2_Master_Stop();
  8721   00340C  ECEA  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8722   003410                     
  8723                           ;color.c: 51:  return tmp;
  8724   003410  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  8725   003414  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8726   003418  0012               	return		;funcret
  8727   00341A                     __end_of_color_read_Red:
  8728                           	callstack 0
  8729                           
  8730 ;; *************** function _color_read_Green *****************
  8731 ;; Defined at:
  8732 ;;		line 58 in file "color.c"
  8733 ;; Parameters:    Size  Location     Type
  8734 ;;		None
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;  tmp             2    9[COMRAM] unsigned int 
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  2    4[COMRAM] unsigned int 
  8739 ;; Registers used:
  8740 ;;		wreg, status,2, status,0, cstack
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8746 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8748 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8749 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8750 ;;Total ram usage:        7 bytes
  8751 ;; Hardware stack levels used: 1
  8752 ;; Hardware stack levels required when called: 3
  8753 ;; This function calls:
  8754 ;;		_I2C_2_Master_Read
  8755 ;;		_I2C_2_Master_RepStart
  8756 ;;		_I2C_2_Master_Start
  8757 ;;		_I2C_2_Master_Stop
  8758 ;;		_I2C_2_Master_Write
  8759 ;; This function is called by:
  8760 ;;		_read_RGBC
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           	psect	text52
  8765   00341A                     __ptext52:
  8766                           	callstack 0
  8767   00341A                     _color_read_Green:
  8768                           	callstack 24
  8769   00341A                     
  8770                           ;color.c: 60:     unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  8771   00341A  ECEF  F01C         	call	_I2C_2_Master_Start	;wreg free
  8772                           
  8773                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  8774   00341E  0E52               	movlw	82
  8775   003420  ECD3  F01C         	call	_I2C_2_Master_Write
  8776                           
  8777                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x18);
  8778   003424  0EB8               	movlw	184
  8779   003426  ECD3  F01C         	call	_I2C_2_Master_Write
  8780                           
  8781                           ;color.c: 64:  I2C_2_Master_RepStart();
  8782   00342A  ECE5  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8783                           
  8784                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  8785   00342E  0E53               	movlw	83
  8786   003430  ECD3  F01C         	call	_I2C_2_Master_Write
  8787                           
  8788                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  8789   003434  0E01               	movlw	1
  8790   003436  ECC8  F01A         	call	_I2C_2_Master_Read
  8791   00343A  6E07               	movwf	??_color_read_Green^0,c
  8792   00343C  5007               	movf	??_color_read_Green^0,w,c
  8793   00343E  6E0A               	movwf	color_read_Green@tmp^0,c
  8794   003440  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  8795                           
  8796                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8797   003442  0E00               	movlw	0
  8798   003444  ECC8  F01A         	call	_I2C_2_Master_Read
  8799   003448  6E07               	movwf	??_color_read_Green^0,c
  8800   00344A  5007               	movf	??_color_read_Green^0,w,c
  8801   00344C  6E09               	movwf	(??_color_read_Green+2)^0,c
  8802   00344E  6A08               	clrf	(??_color_read_Green+1)^0,c
  8803   003450  500A               	movf	color_read_Green@tmp^0,w,c
  8804   003452  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  8805   003454  6E0A               	movwf	color_read_Green@tmp^0,c
  8806   003456  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  8807   003458  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  8808   00345A  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  8809                           
  8810                           ;color.c: 68:  I2C_2_Master_Stop();
  8811   00345C  ECEA  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8812   003460                     
  8813                           ;color.c: 69:  return tmp;
  8814   003460  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  8815   003464  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8816   003468  0012               	return		;funcret
  8817   00346A                     __end_of_color_read_Green:
  8818                           	callstack 0
  8819                           
  8820 ;; *************** function _color_read_Clear *****************
  8821 ;; Defined at:
  8822 ;;		line 94 in file "color.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;		None
  8825 ;; Auto vars:     Size  Location     Type
  8826 ;;  tmp             2    9[COMRAM] unsigned int 
  8827 ;; Return value:  Size  Location     Type
  8828 ;;                  2    4[COMRAM] unsigned int 
  8829 ;; Registers used:
  8830 ;;		wreg, status,2, status,0, cstack
  8831 ;; Tracked objects:
  8832 ;;		On entry : 0/0
  8833 ;;		On exit  : 0/0
  8834 ;;		Unchanged: 0/0
  8835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8838 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8839 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8840 ;;Total ram usage:        7 bytes
  8841 ;; Hardware stack levels used: 1
  8842 ;; Hardware stack levels required when called: 3
  8843 ;; This function calls:
  8844 ;;		_I2C_2_Master_Read
  8845 ;;		_I2C_2_Master_RepStart
  8846 ;;		_I2C_2_Master_Start
  8847 ;;		_I2C_2_Master_Stop
  8848 ;;		_I2C_2_Master_Write
  8849 ;; This function is called by:
  8850 ;;		_read_RGBC
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           	psect	text53
  8855   00346A                     __ptext53:
  8856                           	callstack 0
  8857   00346A                     _color_read_Clear:
  8858                           	callstack 24
  8859   00346A                     
  8860                           ;color.c: 96:     unsigned int tmp;;color.c: 97:  I2C_2_Master_Start();
  8861   00346A  ECEF  F01C         	call	_I2C_2_Master_Start	;wreg free
  8862                           
  8863                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
  8864   00346E  0E52               	movlw	82
  8865   003470  ECD3  F01C         	call	_I2C_2_Master_Write
  8866                           
  8867                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  8868   003474  0EB4               	movlw	180
  8869   003476  ECD3  F01C         	call	_I2C_2_Master_Write
  8870                           
  8871                           ;color.c: 100:  I2C_2_Master_RepStart();
  8872   00347A  ECE5  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8873                           
  8874                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  8875   00347E  0E53               	movlw	83
  8876   003480  ECD3  F01C         	call	_I2C_2_Master_Write
  8877                           
  8878                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  8879   003484  0E01               	movlw	1
  8880   003486  ECC8  F01A         	call	_I2C_2_Master_Read
  8881   00348A  6E07               	movwf	??_color_read_Clear^0,c
  8882   00348C  5007               	movf	??_color_read_Clear^0,w,c
  8883   00348E  6E0A               	movwf	color_read_Clear@tmp^0,c
  8884   003490  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  8885                           
  8886                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8887   003492  0E00               	movlw	0
  8888   003494  ECC8  F01A         	call	_I2C_2_Master_Read
  8889   003498  6E07               	movwf	??_color_read_Clear^0,c
  8890   00349A  5007               	movf	??_color_read_Clear^0,w,c
  8891   00349C  6E09               	movwf	(??_color_read_Clear+2)^0,c
  8892   00349E  6A08               	clrf	(??_color_read_Clear+1)^0,c
  8893   0034A0  500A               	movf	color_read_Clear@tmp^0,w,c
  8894   0034A2  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  8895   0034A4  6E0A               	movwf	color_read_Clear@tmp^0,c
  8896   0034A6  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  8897   0034A8  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  8898   0034AA  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  8899                           
  8900                           ;color.c: 104:  I2C_2_Master_Stop();
  8901   0034AC  ECEA  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8902   0034B0                     
  8903                           ;color.c: 105:  return tmp;
  8904   0034B0  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  8905   0034B4  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8906   0034B8  0012               	return		;funcret
  8907   0034BA                     __end_of_color_read_Clear:
  8908                           	callstack 0
  8909                           
  8910 ;; *************** function _color_read_Blue *****************
  8911 ;; Defined at:
  8912 ;;		line 76 in file "color.c"
  8913 ;; Parameters:    Size  Location     Type
  8914 ;;		None
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;  tmp             2    9[COMRAM] unsigned int 
  8917 ;; Return value:  Size  Location     Type
  8918 ;;                  2    4[COMRAM] unsigned int 
  8919 ;; Registers used:
  8920 ;;		wreg, status,2, status,0, cstack
  8921 ;; Tracked objects:
  8922 ;;		On entry : 0/0
  8923 ;;		On exit  : 0/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8926 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8927 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8928 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8929 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8930 ;;Total ram usage:        7 bytes
  8931 ;; Hardware stack levels used: 1
  8932 ;; Hardware stack levels required when called: 3
  8933 ;; This function calls:
  8934 ;;		_I2C_2_Master_Read
  8935 ;;		_I2C_2_Master_RepStart
  8936 ;;		_I2C_2_Master_Start
  8937 ;;		_I2C_2_Master_Stop
  8938 ;;		_I2C_2_Master_Write
  8939 ;; This function is called by:
  8940 ;;		_read_RGBC
  8941 ;; This function uses a non-reentrant model
  8942 ;;
  8943                           
  8944                           	psect	text54
  8945   0034BA                     __ptext54:
  8946                           	callstack 0
  8947   0034BA                     _color_read_Blue:
  8948                           	callstack 24
  8949   0034BA                     
  8950                           ;color.c: 78:     unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  8951   0034BA  ECEF  F01C         	call	_I2C_2_Master_Start	;wreg free
  8952                           
  8953                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  8954   0034BE  0E52               	movlw	82
  8955   0034C0  ECD3  F01C         	call	_I2C_2_Master_Write
  8956                           
  8957                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x1A);
  8958   0034C4  0EBA               	movlw	186
  8959   0034C6  ECD3  F01C         	call	_I2C_2_Master_Write
  8960                           
  8961                           ;color.c: 82:  I2C_2_Master_RepStart();
  8962   0034CA  ECE5  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8963                           
  8964                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  8965   0034CE  0E53               	movlw	83
  8966   0034D0  ECD3  F01C         	call	_I2C_2_Master_Write
  8967                           
  8968                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  8969   0034D4  0E01               	movlw	1
  8970   0034D6  ECC8  F01A         	call	_I2C_2_Master_Read
  8971   0034DA  6E07               	movwf	??_color_read_Blue^0,c
  8972   0034DC  5007               	movf	??_color_read_Blue^0,w,c
  8973   0034DE  6E0A               	movwf	color_read_Blue@tmp^0,c
  8974   0034E0  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  8975                           
  8976                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8977   0034E2  0E00               	movlw	0
  8978   0034E4  ECC8  F01A         	call	_I2C_2_Master_Read
  8979   0034E8  6E07               	movwf	??_color_read_Blue^0,c
  8980   0034EA  5007               	movf	??_color_read_Blue^0,w,c
  8981   0034EC  6E09               	movwf	(??_color_read_Blue+2)^0,c
  8982   0034EE  6A08               	clrf	(??_color_read_Blue+1)^0,c
  8983   0034F0  500A               	movf	color_read_Blue@tmp^0,w,c
  8984   0034F2  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  8985   0034F4  6E0A               	movwf	color_read_Blue@tmp^0,c
  8986   0034F6  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  8987   0034F8  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  8988   0034FA  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  8989                           
  8990                           ;color.c: 86:  I2C_2_Master_Stop();
  8991   0034FC  ECEA  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8992   003500                     
  8993                           ;color.c: 87:  return tmp;
  8994   003500  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  8995   003504  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8996   003508  0012               	return		;funcret
  8997   00350A                     __end_of_color_read_Blue:
  8998                           	callstack 0
  8999                           
  9000 ;; *************** function _I2C_2_Master_RepStart *****************
  9001 ;; Defined at:
  9002 ;;		line 33 in file "i2c.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;		None
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;		None
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  1    wreg      void 
  9009 ;; Registers used:
  9010 ;;		wreg, status,2, status,0, cstack
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9020 ;;Total ram usage:        0 bytes
  9021 ;; Hardware stack levels used: 1
  9022 ;; Hardware stack levels required when called: 2
  9023 ;; This function calls:
  9024 ;;		_I2C_2_Master_Idle
  9025 ;; This function is called by:
  9026 ;;		_color_read_Red
  9027 ;;		_color_read_Green
  9028 ;;		_color_read_Blue
  9029 ;;		_color_read_Clear
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           	psect	text55
  9034   0039CA                     __ptext55:
  9035                           	callstack 0
  9036   0039CA                     _I2C_2_Master_RepStart:
  9037                           	callstack 24
  9038   0039CA                     
  9039                           ;i2c.c: 35:   I2C_2_Master_Idle();
  9040   0039CA  EC0C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9041   0039CE                     
  9042                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  9043   0039CE  010E               	movlb	14	; () banked
  9044   0039D0  83DA               	bsf	218,1,b	;volatile
  9045   0039D2                     
  9046                           ; BSR set to: 14
  9047   0039D2  0012               	return		;funcret
  9048   0039D4                     __end_of_I2C_2_Master_RepStart:
  9049                           	callstack 0
  9050                           
  9051 ;; *************** function _I2C_2_Master_Read *****************
  9052 ;; Defined at:
  9053 ;;		line 51 in file "i2c.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;  ack             1    wreg     unsigned char 
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;  ack             1    2[COMRAM] unsigned char 
  9058 ;;  tmp             1    3[COMRAM] unsigned char 
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  1    wreg      unsigned char 
  9061 ;; Registers used:
  9062 ;;		wreg, status,2, status,0, cstack
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9070 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9071 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9072 ;;Total ram usage:        3 bytes
  9073 ;; Hardware stack levels used: 1
  9074 ;; Hardware stack levels required when called: 2
  9075 ;; This function calls:
  9076 ;;		_I2C_2_Master_Idle
  9077 ;; This function is called by:
  9078 ;;		_color_read_Red
  9079 ;;		_color_read_Green
  9080 ;;		_color_read_Blue
  9081 ;;		_color_read_Clear
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           	psect	text56
  9086   003590                     __ptext56:
  9087                           	callstack 0
  9088   003590                     _I2C_2_Master_Read:
  9089                           	callstack 24
  9090                           
  9091                           ; BSR set to: 14
  9092                           ;incstack = 0
  9093                           ;I2C_2_Master_Read@ack stored from wreg
  9094   003590  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  9095   003592                     
  9096                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  9097   003592  EC0C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9098   003596                     
  9099                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  9100   003596  010E               	movlb	14	; () banked
  9101   003598  87DA               	bsf	218,3,b	;volatile
  9102                           
  9103                           ;i2c.c: 56:   I2C_2_Master_Idle();
  9104   00359A  EC0C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9105   00359E                     
  9106                           ;i2c.c: 57:   tmp = SSP2BUF;
  9107   00359E  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  9108                           
  9109                           ;i2c.c: 58:   I2C_2_Master_Idle();
  9110   0035A2  EC0C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9111   0035A6                     
  9112                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  9113   0035A6  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  9114   0035A8  B4D8               	btfsc	status,2,c
  9115   0035AA  EFD9  F01A         	goto	u1831
  9116   0035AE  EFDD  F01A         	goto	u1830
  9117   0035B2                     u1831:
  9118   0035B2  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9119   0035B4  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  9120   0035B6  EFDE  F01A         	goto	u1848
  9121   0035BA                     u1830:
  9122   0035BA  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9123   0035BC                     u1848:
  9124   0035BC  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  9125   0035BE  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  9126   0035C0  010E               	movlb	14	; () banked
  9127   0035C2  51DA               	movf	218,w,b	;volatile
  9128   0035C4  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9129   0035C6  0BDF               	andlw	-33
  9130   0035C8  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9131   0035CA  6FDA               	movwf	218,b	;volatile
  9132   0035CC                     
  9133                           ; BSR set to: 14
  9134                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  9135   0035CC  89DA               	bsf	218,4,b	;volatile
  9136   0035CE                     
  9137                           ; BSR set to: 14
  9138                           ;i2c.c: 61:   return tmp;
  9139   0035CE  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  9140   0035D0                     
  9141                           ; BSR set to: 14
  9142   0035D0  0012               	return		;funcret
  9143   0035D2                     __end_of_I2C_2_Master_Read:
  9144                           	callstack 0
  9145                           
  9146 ;; *************** function ___lldiv *****************
  9147 ;; Defined at:
  9148 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  9149 ;; Parameters:    Size  Location     Type
  9150 ;;  dividend        4    0[COMRAM] unsigned long 
  9151 ;;  divisor         4    4[COMRAM] unsigned long 
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;  quotient        4    8[COMRAM] unsigned long 
  9154 ;;  counter         1   12[COMRAM] unsigned char 
  9155 ;; Return value:  Size  Location     Type
  9156 ;;                  4    0[COMRAM] unsigned long 
  9157 ;; Registers used:
  9158 ;;		wreg, status,2, status,0
  9159 ;; Tracked objects:
  9160 ;;		On entry : 0/0
  9161 ;;		On exit  : 0/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9164 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9165 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9167 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9168 ;;Total ram usage:       13 bytes
  9169 ;; Hardware stack levels used: 1
  9170 ;; Hardware stack levels required when called: 1
  9171 ;; This function calls:
  9172 ;;		Nothing
  9173 ;; This function is called by:
  9174 ;;		_average_RGBC
  9175 ;;		_convert_HSV
  9176 ;; This function uses a non-reentrant model
  9177 ;;
  9178                           
  9179                           	psect	text57
  9180   002BD4                     __ptext57:
  9181                           	callstack 0
  9182   002BD4                     ___lldiv:
  9183                           	callstack 27
  9184   002BD4  0E00               	movlw	0
  9185   002BD6  6E09               	movwf	___lldiv@quotient^0,c
  9186   002BD8  0E00               	movlw	0
  9187   002BDA  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  9188   002BDC  0E00               	movlw	0
  9189   002BDE  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  9190   002BE0  0E00               	movlw	0
  9191   002BE2  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  9192   002BE4  5005               	movf	___lldiv@divisor^0,w,c
  9193   002BE6  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  9194   002BE8  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  9195   002BEA  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  9196   002BEC  B4D8               	btfsc	status,2,c
  9197   002BEE  EFFB  F015         	goto	u2071
  9198   002BF2  EFFD  F015         	goto	u2070
  9199   002BF6                     u2071:
  9200   002BF6  EF33  F016         	goto	l776
  9201   002BFA                     u2070:
  9202   002BFA  0E01               	movlw	1
  9203   002BFC  6E0D               	movwf	___lldiv@counter^0,c
  9204   002BFE  EF07  F016         	goto	l3231
  9205   002C02                     l3229:
  9206   002C02  90D8               	bcf	status,0,c
  9207   002C04  3605               	rlcf	___lldiv@divisor^0,f,c
  9208   002C06  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  9209   002C08  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  9210   002C0A  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  9211   002C0C  2A0D               	incf	___lldiv@counter^0,f,c
  9212   002C0E                     l3231:
  9213   002C0E  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  9214   002C10  EF0C  F016         	goto	u2081
  9215   002C14  EF0E  F016         	goto	u2080
  9216   002C18                     u2081:
  9217   002C18  EF01  F016         	goto	l3229
  9218   002C1C                     u2080:
  9219   002C1C                     l3233:
  9220   002C1C  90D8               	bcf	status,0,c
  9221   002C1E  3609               	rlcf	___lldiv@quotient^0,f,c
  9222   002C20  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  9223   002C22  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  9224   002C24  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  9225   002C26  5005               	movf	___lldiv@divisor^0,w,c
  9226   002C28  5C01               	subwf	___lldiv@dividend^0,w,c
  9227   002C2A  5006               	movf	(___lldiv@divisor+1)^0,w,c
  9228   002C2C  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  9229   002C2E  5007               	movf	(___lldiv@divisor+2)^0,w,c
  9230   002C30  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  9231   002C32  5008               	movf	(___lldiv@divisor+3)^0,w,c
  9232   002C34  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  9233   002C36  A0D8               	btfss	status,0,c
  9234   002C38  EF20  F016         	goto	u2091
  9235   002C3C  EF22  F016         	goto	u2090
  9236   002C40                     u2091:
  9237   002C40  EF2B  F016         	goto	l3241
  9238   002C44                     u2090:
  9239   002C44  5005               	movf	___lldiv@divisor^0,w,c
  9240   002C46  5E01               	subwf	___lldiv@dividend^0,f,c
  9241   002C48  5006               	movf	(___lldiv@divisor+1)^0,w,c
  9242   002C4A  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  9243   002C4C  5007               	movf	(___lldiv@divisor+2)^0,w,c
  9244   002C4E  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  9245   002C50  5008               	movf	(___lldiv@divisor+3)^0,w,c
  9246   002C52  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  9247   002C54  8009               	bsf	___lldiv@quotient^0,0,c
  9248   002C56                     l3241:
  9249   002C56  90D8               	bcf	status,0,c
  9250   002C58  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  9251   002C5A  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  9252   002C5C  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  9253   002C5E  3205               	rrcf	___lldiv@divisor^0,f,c
  9254   002C60  2E0D               	decfsz	___lldiv@counter^0,f,c
  9255   002C62  EF0E  F016         	goto	l3233
  9256   002C66                     l776:
  9257   002C66  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9258   002C6A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9259   002C6E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9260   002C72  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9261   002C76  0012               	return		;funcret
  9262   002C78                     __end_of___lldiv:
  9263                           	callstack 0
  9264                           
  9265 ;; *************** function _color_click_init *****************
  9266 ;; Defined at:
  9267 ;;		line 7 in file "color.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;		None
  9270 ;; Auto vars:     Size  Location     Type
  9271 ;;		None
  9272 ;; Return value:  Size  Location     Type
  9273 ;;                  1    wreg      void 
  9274 ;; Registers used:
  9275 ;;		wreg, status,2, status,0, cstack
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9283 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9284 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9285 ;;Total ram usage:        1 bytes
  9286 ;; Hardware stack levels used: 1
  9287 ;; Hardware stack levels required when called: 4
  9288 ;; This function calls:
  9289 ;;		_I2C_2_Master_Init
  9290 ;;		_color_writetoaddr
  9291 ;; This function is called by:
  9292 ;;		_main
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           	psect	text58
  9297   003762                     __ptext58:
  9298                           	callstack 0
  9299   003762                     _color_click_init:
  9300                           	callstack 26
  9301   003762                     
  9302                           ;color.c: 10:     I2C_2_Master_Init();
  9303   003762  ECF7  F01B         	call	_I2C_2_Master_Init	;wreg free
  9304   003766                     
  9305                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  9306   003766  0E01               	movlw	1
  9307   003768  6E03               	movwf	color_writetoaddr@value^0,c
  9308   00376A  0E00               	movlw	0
  9309   00376C  EC9B  F01C         	call	_color_writetoaddr
  9310   003770                     
  9311                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  9312   003770  0E3F               	movlw	63
  9313   003772  6E05               	movwf	??_color_click_init^0,c
  9314   003774  0E55               	movlw	85
  9315   003776                     u3457:
  9316   003776  2EE8               	decfsz	wreg,f,c
  9317   003778  D7FE               	bra	u3457
  9318   00377A  2E05               	decfsz	??_color_click_init^0,f,c
  9319   00377C  D7FC               	bra	u3457
  9320   00377E  0000               	nop	
  9321   003780                     
  9322                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  9323   003780  0E03               	movlw	3
  9324   003782  6E03               	movwf	color_writetoaddr@value^0,c
  9325   003784  0E00               	movlw	0
  9326   003786  EC9B  F01C         	call	_color_writetoaddr
  9327   00378A                     
  9328                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  9329   00378A  0ED5               	movlw	213
  9330   00378C  6E03               	movwf	color_writetoaddr@value^0,c
  9331   00378E  0E01               	movlw	1
  9332   003790  EC9B  F01C         	call	_color_writetoaddr
  9333   003794  0012               	return		;funcret
  9334   003796                     __end_of_color_click_init:
  9335                           	callstack 0
  9336                           
  9337 ;; *************** function _color_writetoaddr *****************
  9338 ;; Defined at:
  9339 ;;		line 28 in file "color.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  address         1    wreg     unsigned char 
  9342 ;;  value           1    2[COMRAM] unsigned char 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  address         1    3[COMRAM] unsigned char 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  1    wreg      void 
  9347 ;; Registers used:
  9348 ;;		wreg, status,2, status,0, cstack
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9354 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9357 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9358 ;;Total ram usage:        2 bytes
  9359 ;; Hardware stack levels used: 1
  9360 ;; Hardware stack levels required when called: 3
  9361 ;; This function calls:
  9362 ;;		_I2C_2_Master_Start
  9363 ;;		_I2C_2_Master_Stop
  9364 ;;		_I2C_2_Master_Write
  9365 ;; This function is called by:
  9366 ;;		_color_click_init
  9367 ;; This function uses a non-reentrant model
  9368 ;;
  9369                           
  9370                           	psect	text59
  9371   003936                     __ptext59:
  9372                           	callstack 0
  9373   003936                     _color_writetoaddr:
  9374                           	callstack 26
  9375                           
  9376                           ;incstack = 0
  9377                           ;color_writetoaddr@address stored from wreg
  9378   003936  6E04               	movwf	color_writetoaddr@address^0,c
  9379   003938                     
  9380                           ;color.c: 29:     I2C_2_Master_Start();
  9381   003938  ECEF  F01C         	call	_I2C_2_Master_Start	;wreg free
  9382                           
  9383                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  9384   00393C  0E52               	movlw	82
  9385   00393E  ECD3  F01C         	call	_I2C_2_Master_Write
  9386                           
  9387                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  9388   003942  5004               	movf	color_writetoaddr@address^0,w,c
  9389   003944  0980               	iorlw	128
  9390   003946  ECD3  F01C         	call	_I2C_2_Master_Write
  9391                           
  9392                           ;color.c: 32:     I2C_2_Master_Write(value);
  9393   00394A  5003               	movf	color_writetoaddr@value^0,w,c
  9394   00394C  ECD3  F01C         	call	_I2C_2_Master_Write
  9395                           
  9396                           ;color.c: 33:     I2C_2_Master_Stop();
  9397   003950  ECEA  F01C         	call	_I2C_2_Master_Stop	;wreg free
  9398   003954  0012               	return		;funcret
  9399   003956                     __end_of_color_writetoaddr:
  9400                           	callstack 0
  9401                           
  9402 ;; *************** function _I2C_2_Master_Write *****************
  9403 ;; Defined at:
  9404 ;;		line 45 in file "i2c.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;  data_byte       1    wreg     unsigned char 
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;  data_byte       1    1[COMRAM] unsigned char 
  9409 ;; Return value:  Size  Location     Type
  9410 ;;                  1    wreg      void 
  9411 ;; Registers used:
  9412 ;;		wreg, status,2, status,0, cstack
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9422 ;;Total ram usage:        1 bytes
  9423 ;; Hardware stack levels used: 1
  9424 ;; Hardware stack levels required when called: 2
  9425 ;; This function calls:
  9426 ;;		_I2C_2_Master_Idle
  9427 ;; This function is called by:
  9428 ;;		_color_writetoaddr
  9429 ;;		_color_read_Red
  9430 ;;		_color_read_Green
  9431 ;;		_color_read_Blue
  9432 ;;		_color_read_Clear
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           	psect	text60
  9437   0039A6                     __ptext60:
  9438                           	callstack 0
  9439   0039A6                     _I2C_2_Master_Write:
  9440                           	callstack 24
  9441                           
  9442                           ;incstack = 0
  9443                           ;I2C_2_Master_Write@data_byte stored from wreg
  9444   0039A6  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  9445   0039A8                     
  9446                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  9447   0039A8  EC0C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9448   0039AC                     
  9449                           ;i2c.c: 48:   SSP2BUF = data_byte;
  9450   0039AC  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  9451   0039B0  0012               	return		;funcret
  9452   0039B2                     __end_of_I2C_2_Master_Write:
  9453                           	callstack 0
  9454                           
  9455 ;; *************** function _I2C_2_Master_Stop *****************
  9456 ;; Defined at:
  9457 ;;		line 39 in file "i2c.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;		None
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;		None
  9462 ;; Return value:  Size  Location     Type
  9463 ;;                  1    wreg      void 
  9464 ;; Registers used:
  9465 ;;		wreg, status,2, status,0, cstack
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9475 ;;Total ram usage:        0 bytes
  9476 ;; Hardware stack levels used: 1
  9477 ;; Hardware stack levels required when called: 2
  9478 ;; This function calls:
  9479 ;;		_I2C_2_Master_Idle
  9480 ;; This function is called by:
  9481 ;;		_color_writetoaddr
  9482 ;;		_color_read_Red
  9483 ;;		_color_read_Green
  9484 ;;		_color_read_Blue
  9485 ;;		_color_read_Clear
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text61
  9490   0039D4                     __ptext61:
  9491                           	callstack 0
  9492   0039D4                     _I2C_2_Master_Stop:
  9493                           	callstack 24
  9494   0039D4                     
  9495                           ;i2c.c: 41:   I2C_2_Master_Idle();
  9496   0039D4  EC0C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9497   0039D8                     
  9498                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  9499   0039D8  010E               	movlb	14	; () banked
  9500   0039DA  85DA               	bsf	218,2,b	;volatile
  9501   0039DC                     
  9502                           ; BSR set to: 14
  9503   0039DC  0012               	return		;funcret
  9504   0039DE                     __end_of_I2C_2_Master_Stop:
  9505                           	callstack 0
  9506                           
  9507 ;; *************** function _I2C_2_Master_Start *****************
  9508 ;; Defined at:
  9509 ;;		line 27 in file "i2c.c"
  9510 ;; Parameters:    Size  Location     Type
  9511 ;;		None
  9512 ;; Auto vars:     Size  Location     Type
  9513 ;;		None
  9514 ;; Return value:  Size  Location     Type
  9515 ;;                  1    wreg      void 
  9516 ;; Registers used:
  9517 ;;		wreg, status,2, status,0, cstack
  9518 ;; Tracked objects:
  9519 ;;		On entry : 0/0
  9520 ;;		On exit  : 0/0
  9521 ;;		Unchanged: 0/0
  9522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9527 ;;Total ram usage:        0 bytes
  9528 ;; Hardware stack levels used: 1
  9529 ;; Hardware stack levels required when called: 2
  9530 ;; This function calls:
  9531 ;;		_I2C_2_Master_Idle
  9532 ;; This function is called by:
  9533 ;;		_color_writetoaddr
  9534 ;;		_color_read_Red
  9535 ;;		_color_read_Green
  9536 ;;		_color_read_Blue
  9537 ;;		_color_read_Clear
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           	psect	text62
  9542   0039DE                     __ptext62:
  9543                           	callstack 0
  9544   0039DE                     _I2C_2_Master_Start:
  9545                           	callstack 24
  9546   0039DE                     
  9547                           ;i2c.c: 29:   I2C_2_Master_Idle();
  9548   0039DE  EC0C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9549   0039E2                     
  9550                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  9551   0039E2  010E               	movlb	14	; () banked
  9552   0039E4  81DA               	bsf	218,0,b	;volatile
  9553   0039E6                     
  9554                           ; BSR set to: 14
  9555   0039E6  0012               	return		;funcret
  9556   0039E8                     __end_of_I2C_2_Master_Start:
  9557                           	callstack 0
  9558                           
  9559 ;; *************** function _I2C_2_Master_Idle *****************
  9560 ;; Defined at:
  9561 ;;		line 22 in file "i2c.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;		None
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;		None
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  1    wreg      void 
  9568 ;; Registers used:
  9569 ;;		wreg, status,2, status,0
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9577 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9579 ;;Total ram usage:        1 bytes
  9580 ;; Hardware stack levels used: 1
  9581 ;; Hardware stack levels required when called: 1
  9582 ;; This function calls:
  9583 ;;		Nothing
  9584 ;; This function is called by:
  9585 ;;		_I2C_2_Master_Start
  9586 ;;		_I2C_2_Master_RepStart
  9587 ;;		_I2C_2_Master_Stop
  9588 ;;		_I2C_2_Master_Write
  9589 ;;		_I2C_2_Master_Read
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           	psect	text63
  9594   003818                     __ptext63:
  9595                           	callstack 0
  9596   003818                     _I2C_2_Master_Idle:
  9597                           	callstack 24
  9598   003818                     l323:
  9599   003818  010E               	movlb	14	; () banked
  9600   00381A  B5D8               	btfsc	216,2,b	;volatile
  9601   00381C  EF12  F01C         	goto	u1751
  9602   003820  EF14  F01C         	goto	u1750
  9603   003824                     u1751:
  9604   003824  EF0C  F01C         	goto	l323
  9605   003828                     u1750:
  9606   003828                     
  9607                           ; BSR set to: 14
  9608   003828  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9609   00382C  0E1F               	movlw	31
  9610   00382E  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  9611   003830  A4D8               	btfss	status,2,c
  9612   003832  EF1D  F01C         	goto	u1761
  9613   003836  EF1F  F01C         	goto	u1760
  9614   00383A                     u1761:
  9615   00383A  EF0C  F01C         	goto	l323
  9616   00383E                     u1760:
  9617   00383E                     
  9618                           ; BSR set to: 14
  9619   00383E  0012               	return		;funcret
  9620   003840                     __end_of_I2C_2_Master_Idle:
  9621                           	callstack 0
  9622                           
  9623 ;; *************** function _I2C_2_Master_Init *****************
  9624 ;; Defined at:
  9625 ;;		line 4 in file "i2c.c"
  9626 ;; Parameters:    Size  Location     Type
  9627 ;;		None
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;		None
  9630 ;; Return value:  Size  Location     Type
  9631 ;;                  1    wreg      void 
  9632 ;; Registers used:
  9633 ;;		wreg, status,2
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9643 ;;Total ram usage:        0 bytes
  9644 ;; Hardware stack levels used: 1
  9645 ;; Hardware stack levels required when called: 1
  9646 ;; This function calls:
  9647 ;;		Nothing
  9648 ;; This function is called by:
  9649 ;;		_color_click_init
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           	psect	text64
  9654   0037EE                     __ptext64:
  9655                           	callstack 0
  9656   0037EE                     _I2C_2_Master_Init:
  9657                           	callstack 28
  9658   0037EE                     
  9659                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9660   0037EE  010E               	movlb	14	; () banked
  9661   0037F0  51D9               	movf	217,w,b	;volatile
  9662   0037F2  0BF0               	andlw	-16
  9663   0037F4  0908               	iorlw	8
  9664   0037F6  6FD9               	movwf	217,b	;volatile
  9665   0037F8                     
  9666                           ; BSR set to: 14
  9667                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9668   0037F8  8BD9               	bsf	217,5,b	;volatile
  9669                           
  9670                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9671   0037FA  0E9F               	movlw	159
  9672   0037FC  6FD6               	movwf	214,b	;volatile
  9673   0037FE                     
  9674                           ; BSR set to: 14
  9675                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9676   0037FE  8A84               	bsf	132,5,c	;volatile
  9677   003800                     
  9678                           ; BSR set to: 14
  9679                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9680   003800  8C84               	bsf	132,6,c	;volatile
  9681   003802                     
  9682                           ; BSR set to: 14
  9683                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9684   003802  9BA7               	bcf	167,5,b	;volatile
  9685   003804                     
  9686                           ; BSR set to: 14
  9687                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9688   003804  9DA7               	bcf	167,6,b	;volatile
  9689                           
  9690                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9691   003806  0E1D               	movlw	29
  9692   003808  6F1D               	movwf	29,b	;volatile
  9693                           
  9694                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9695   00380A  0E1E               	movlw	30
  9696   00380C  6F1C               	movwf	28,b	;volatile
  9697                           
  9698                           ;i2c.c: 18:   RD5PPS=0x1C;
  9699   00380E  0E1C               	movlw	28
  9700   003810  6F6F               	movwf	111,b	;volatile
  9701                           
  9702                           ;i2c.c: 19:   RD6PPS=0x1B;
  9703   003812  0E1B               	movlw	27
  9704   003814  6F70               	movwf	112,b	;volatile
  9705   003816                     
  9706                           ; BSR set to: 14
  9707   003816  0012               	return		;funcret
  9708   003818                     __end_of_I2C_2_Master_Init:
  9709                           	callstack 0
  9710                           
  9711 ;; *************** function _buggy_lights_init *****************
  9712 ;; Defined at:
  9713 ;;		line 7 in file "buggy_lights.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;		None
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;		None
  9718 ;; Return value:  Size  Location     Type
  9719 ;;                  1    wreg      void 
  9720 ;; Registers used:
  9721 ;;		None
  9722 ;; Tracked objects:
  9723 ;;		On entry : 0/0
  9724 ;;		On exit  : 0/0
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9731 ;;Total ram usage:        0 bytes
  9732 ;; Hardware stack levels used: 1
  9733 ;; Hardware stack levels required when called: 1
  9734 ;; This function calls:
  9735 ;;		Nothing
  9736 ;; This function is called by:
  9737 ;;		_main
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           	psect	text65
  9742   003796                     __ptext65:
  9743                           	callstack 0
  9744   003796                     _buggy_lights_init:
  9745                           	callstack 29
  9746   003796                     
  9747                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
  9748   003796  9884               	bcf	132,4,c	;volatile
  9749                           
  9750                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
  9751   003798  9288               	bcf	136,1,c	;volatile
  9752                           
  9753                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
  9754   00379A  9684               	bcf	132,3,c	;volatile
  9755                           
  9756                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
  9757   00379C  9086               	bcf	134,0,c	;volatile
  9758                           
  9759                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
  9760   00379E  9088               	bcf	136,0,c	;volatile
  9761                           
  9762                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
  9763   0037A0  987C               	bcf	124,4,c	;volatile
  9764                           
  9765                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
  9766   0037A2  9280               	bcf	128,1,c	;volatile
  9767                           
  9768                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
  9769   0037A4  967C               	bcf	124,3,c	;volatile
  9770                           
  9771                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
  9772   0037A6  907E               	bcf	126,0,c	;volatile
  9773                           
  9774                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
  9775   0037A8  9080               	bcf	128,0,c	;volatile
  9776                           
  9777                           ;buggy_lights.c: 26:             TRISGbits.TRISG0 = 0;
  9778   0037AA  9087               	bcf	135,0,c	;volatile
  9779                           
  9780                           ;buggy_lights.c: 27:             TRISEbits.TRISE7 = 0;
  9781   0037AC  9E85               	bcf	133,7,c	;volatile
  9782                           
  9783                           ;buggy_lights.c: 28:             TRISAbits.TRISA3 = 0;
  9784   0037AE  9681               	bcf	129,3,c	;volatile
  9785                           
  9786                           ;buggy_lights.c: 30:             LATGbits.LATG0 = 0;
  9787   0037B0  907F               	bcf	127,0,c	;volatile
  9788                           
  9789                           ;buggy_lights.c: 31:             LATEbits.LATE7 = 0;
  9790   0037B2  9E7D               	bcf	125,7,c	;volatile
  9791                           
  9792                           ;buggy_lights.c: 32:             LATAbits.LATA3 = 0;
  9793   0037B4  9679               	bcf	121,3,c	;volatile
  9794                           
  9795                           ;buggy_lights.c: 36:             TRISGbits.TRISG1 = 0;
  9796   0037B6  9287               	bcf	135,1,c	;volatile
  9797                           
  9798                           ;buggy_lights.c: 37:             TRISAbits.TRISA4 = 0;
  9799   0037B8  9881               	bcf	129,4,c	;volatile
  9800                           
  9801                           ;buggy_lights.c: 38:             TRISFbits.TRISF7 = 0;
  9802   0037BA  9E86               	bcf	134,7,c	;volatile
  9803                           
  9804                           ;buggy_lights.c: 40:             LATGbits.LATG1 = 0;
  9805   0037BC  927F               	bcf	127,1,c	;volatile
  9806                           
  9807                           ;buggy_lights.c: 41:             LATAbits.LATA4 = 0;
  9808   0037BE  9879               	bcf	121,4,c	;volatile
  9809                           
  9810                           ;buggy_lights.c: 42:             LATFbits.LATF7 = 0;
  9811   0037C0  9E7E               	bcf	126,7,c	;volatile
  9812   0037C2  0012               	return		;funcret
  9813   0037C4                     __end_of_buggy_lights_init:
  9814                           	callstack 0
  9815                           
  9816 ;; *************** function _Timer0_init *****************
  9817 ;; Defined at:
  9818 ;;		line 7 in file "timers.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;		None
  9823 ;; Return value:  Size  Location     Type
  9824 ;;                  1    wreg      void 
  9825 ;; Registers used:
  9826 ;;		wreg, status,2, cstack
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9836 ;;Total ram usage:        0 bytes
  9837 ;; Hardware stack levels used: 1
  9838 ;; Hardware stack levels required when called: 3
  9839 ;; This function calls:
  9840 ;;		_reset_timer
  9841 ;; This function is called by:
  9842 ;;		_main
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text66
  9847   0038D4                     __ptext66:
  9848                           	callstack 0
  9849   0038D4                     _Timer0_init:
  9850                           	callstack 27
  9851   0038D4                     
  9852                           ;timers.c: 9:     T0CON1bits.T0CS = 0b010;
  9853   0038D4  50D6               	movf	214,w,c	;volatile
  9854   0038D6  0B1F               	andlw	-225
  9855   0038D8  0940               	iorlw	64
  9856   0038DA  6ED6               	movwf	214,c	;volatile
  9857   0038DC                     
  9858                           ;timers.c: 10:     T0CON1bits.T0ASYNC = 1;
  9859   0038DC  88D6               	bsf	214,4,c	;volatile
  9860   0038DE                     
  9861                           ;timers.c: 14:     T0CON0bits.T016BIT = 1;
  9862   0038DE  88D5               	bsf	213,4,c	;volatile
  9863                           
  9864                           ;timers.c: 15:     T0CON1bits.T0CKPS = 0b1110;
  9865   0038E0  50D6               	movf	214,w,c	;volatile
  9866   0038E2  0BF0               	andlw	-16
  9867   0038E4  090E               	iorlw	14
  9868   0038E6  6ED6               	movwf	214,c	;volatile
  9869   0038E8                     
  9870                           ;timers.c: 20:     reset_timer();
  9871   0038E8  ECD9  F01C         	call	_reset_timer	;wreg free
  9872   0038EC                     
  9873                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
  9874   0038EC  010E               	movlb	14	; () banked
  9875   0038EE  8B29               	bsf	41,5,b	;volatile
  9876   0038F0                     
  9877                           ; BSR set to: 14
  9878                           ;timers.c: 23:     INTCONbits.PEIE = 1;
  9879   0038F0  8CF2               	bsf	242,6,c	;volatile
  9880   0038F2                     
  9881                           ; BSR set to: 14
  9882                           ;timers.c: 24:     INTCONbits.GIE = 1;
  9883   0038F2  8EF2               	bsf	242,7,c	;volatile
  9884   0038F4                     
  9885                           ; BSR set to: 14
  9886   0038F4  0012               	return		;funcret
  9887   0038F6                     __end_of_Timer0_init:
  9888                           	callstack 0
  9889                           
  9890 ;; *************** function _reset_timer *****************
  9891 ;; Defined at:
  9892 ;;		line 70 in file "timers.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;		None
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;		None
  9897 ;; Return value:  Size  Location     Type
  9898 ;;                  1    wreg      void 
  9899 ;; Registers used:
  9900 ;;		wreg, status,2, cstack
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9910 ;;Total ram usage:        0 bytes
  9911 ;; Hardware stack levels used: 1
  9912 ;; Hardware stack levels required when called: 2
  9913 ;; This function calls:
  9914 ;;		_write_timer
  9915 ;; This function is called by:
  9916 ;;		_Timer0_init
  9917 ;;		_forward_navigation
  9918 ;; This function uses a non-reentrant model
  9919 ;;
  9920                           
  9921                           	psect	text67
  9922   0039B2                     __ptext67:
  9923                           	callstack 0
  9924   0039B2                     _reset_timer:
  9925                           	callstack 27
  9926   0039B2                     
  9927                           ;timers.c: 72:     write_timer(0, 0);
  9928   0039B2  0E00               	movlw	0
  9929   0039B4  6E01               	movwf	write_timer@tL^0,c
  9930   0039B6  0E00               	movlw	0
  9931   0039B8  ECDF  F01C         	call	_write_timer
  9932   0039BC  0012               	return		;funcret
  9933   0039BE                     __end_of_reset_timer:
  9934                           	callstack 0
  9935                           
  9936 ;; *************** function _write_timer *****************
  9937 ;; Defined at:
  9938 ;;		line 58 in file "timers.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;  tH              1    wreg     unsigned char 
  9941 ;;  tL              1    0[COMRAM] unsigned char 
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;  tH              1    1[COMRAM] unsigned char 
  9944 ;; Return value:  Size  Location     Type
  9945 ;;                  1    wreg      void 
  9946 ;; Registers used:
  9947 ;;		wreg
  9948 ;; Tracked objects:
  9949 ;;		On entry : 0/0
  9950 ;;		On exit  : 0/0
  9951 ;;		Unchanged: 0/0
  9952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9953 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9957 ;;Total ram usage:        2 bytes
  9958 ;; Hardware stack levels used: 1
  9959 ;; Hardware stack levels required when called: 1
  9960 ;; This function calls:
  9961 ;;		Nothing
  9962 ;; This function is called by:
  9963 ;;		_reset_timer
  9964 ;;		_return_to_sender
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           	psect	text68
  9969   0039BE                     __ptext68:
  9970                           	callstack 0
  9971   0039BE                     _write_timer:
  9972                           	callstack 28
  9973                           
  9974                           ;incstack = 0
  9975                           ;write_timer@tH stored from wreg
  9976   0039BE  6E02               	movwf	write_timer@tH^0,c
  9977   0039C0                     
  9978                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
  9979   0039C0  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  9980   0039C4                     
  9981                           ;timers.c: 64:     TMR0L = tL;
  9982   0039C4  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  9983   0039C8  0012               	return		;funcret
  9984   0039CA                     __end_of_write_timer:
  9985                           	callstack 0
  9986                           
  9987 ;; *************** function _ISR *****************
  9988 ;; Defined at:
  9989 ;;		line 254 in file "timers.c"
  9990 ;; Parameters:    Size  Location     Type
  9991 ;;		None
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;		None
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  1    wreg      void 
  9996 ;; Registers used:
  9997 ;;		wreg, status,2
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10007 ;;Total ram usage:        0 bytes
 10008 ;; Hardware stack levels used: 1
 10009 ;; This function calls:
 10010 ;;		Nothing
 10011 ;; This function is called by:
 10012 ;;		Interrupt level 2
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           	psect	intcode
 10017   000008                     __pintcode:
 10018                           	callstack 0
 10019   000008                     _ISR:
 10020                           	callstack 23
 10021                           
 10022                           ;incstack = 0
 10023   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 10024   00000A                     
 10025                           ;timers.c: 257:     if (PIR0bits.TMR0IF) {
 10026   00000A  010E               	movlb	14	; () banked
 10027   00000C  AB33               	btfss	51,5,b	;volatile
 10028   00000E  EF0B  F000         	goto	i2u168_41
 10029   000012  EF0D  F000         	goto	i2u168_40
 10030   000016                     i2u168_41:
 10031   000016  EF1C  F000         	goto	i2l746
 10032   00001A                     i2u168_40:
 10033   00001A                     
 10034                           ; BSR set to: 14
 10035                           ;timers.c: 258:         if (returning) {
 10036   00001A  505D               	movf	_returning^0,w,c
 10037   00001C  B4D8               	btfsc	status,2,c
 10038   00001E  EF13  F000         	goto	i2u169_41
 10039   000022  EF15  F000         	goto	i2u169_40
 10040   000026                     i2u169_41:
 10041   000026  EF19  F000         	goto	i2l2653
 10042   00002A                     i2u169_40:
 10043   00002A                     
 10044                           ; BSR set to: 14
 10045                           ;timers.c: 260:             return_flag = 1;
 10046   00002A  0E01               	movlw	1
 10047   00002C  6E5C               	movwf	_return_flag^0,c
 10048                           
 10049                           ;timers.c: 261:         } else {
 10050   00002E  EF1B  F000         	goto	i2l2655
 10051   000032                     i2l2653:
 10052                           
 10053                           ; BSR set to: 14
 10054                           ;timers.c: 263:             lost_flag = 1;
 10055   000032  0E01               	movlw	1
 10056   000034  6E5B               	movwf	_lost_flag^0,c
 10057   000036                     i2l2655:
 10058                           
 10059                           ; BSR set to: 14
 10060                           ;timers.c: 267:         PIR0bits.TMR0IF = 0;
 10061   000036  9B33               	bcf	51,5,b	;volatile
 10062   000038                     i2l746:
 10063                           
 10064                           ; BSR set to: 14
 10065   000038  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 10066   00003A  0011               	retfie		f
 10067   00003C                     __end_of_ISR:
 10068                           	callstack 0
 10069                           
 10070                           	psect	rparam
 10071   000000                     
 10072                           	psect	temp
 10073   00005E                     btemp:
 10074                           	callstack 0
 10075   00005E                     	ds	1
 10076   000000                     int$flags	set	btemp
 10077   000000                     wtemp8	set	btemp+1
 10078   000000                     ttemp5	set	btemp+1
 10079   000000                     ttemp6	set	btemp+4
 10080   000000                     ttemp7	set	btemp+8
 10081                           
 10082                           	psect	idloc
 10083                           
 10084                           ;Config register IDLOC0 @ 0x200000
 10085                           ;	unspecified, using default values
 10086   200000                     	org	2097152
 10087   200000  FFFF               	dw	65535
 10088                           
 10089                           ;Config register IDLOC1 @ 0x200002
 10090                           ;	unspecified, using default values
 10091   200002                     	org	2097154
 10092   200002  FFFF               	dw	65535
 10093                           
 10094                           ;Config register IDLOC2 @ 0x200004
 10095                           ;	unspecified, using default values
 10096   200004                     	org	2097156
 10097   200004  FFFF               	dw	65535
 10098                           
 10099                           ;Config register IDLOC3 @ 0x200006
 10100                           ;	unspecified, using default values
 10101   200006                     	org	2097158
 10102   200006  FFFF               	dw	65535
 10103                           
 10104                           ;Config register IDLOC4 @ 0x200008
 10105                           ;	unspecified, using default values
 10106   200008                     	org	2097160
 10107   200008  FFFF               	dw	65535
 10108                           
 10109                           ;Config register IDLOC5 @ 0x20000A
 10110                           ;	unspecified, using default values
 10111   20000A                     	org	2097162
 10112   20000A  FFFF               	dw	65535
 10113                           
 10114                           ;Config register IDLOC6 @ 0x20000C
 10115                           ;	unspecified, using default values
 10116   20000C                     	org	2097164
 10117   20000C  FFFF               	dw	65535
 10118                           
 10119                           ;Config register IDLOC7 @ 0x20000E
 10120                           ;	unspecified, using default values
 10121   20000E                     	org	2097166
 10122   20000E  FFFF               	dw	65535
 10123                           
 10124                           	psect	config
 10125                           
 10126                           ;Config register CONFIG1L @ 0x300000
 10127                           ;	External Oscillator mode Selection bits
 10128                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 10129                           ;	Power-up default value for COSC bits
 10130                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 10131   300000                     	org	3145728
 10132   300000  AA                 	db	170
 10133                           
 10134                           ;Config register CONFIG1H @ 0x300001
 10135                           ;	unspecified, using default values
 10136                           ;	Clock Out Enable bit
 10137                           ;	CLKOUTEN = 0x1, unprogrammed default
 10138                           ;	Clock Switch Enable bit
 10139                           ;	CSWEN = 0x1, unprogrammed default
 10140                           ;	Fail-Safe Clock Monitor Enable bit
 10141                           ;	FCMEN = 0x1, unprogrammed default
 10142   300001                     	org	3145729
 10143   300001  FF                 	db	255
 10144                           
 10145                           ;Config register CONFIG2L @ 0x300002
 10146                           ;	unspecified, using default values
 10147                           ;	Master Clear Enable bit
 10148                           ;	MCLRE = 0x1, unprogrammed default
 10149                           ;	Power-up Timer Enable bit
 10150                           ;	PWRTE = 0x1, unprogrammed default
 10151                           ;	Low-power BOR enable bit
 10152                           ;	LPBOREN = 0x1, unprogrammed default
 10153                           ;	Brown-out Reset Enable bits
 10154                           ;	BOREN = 0x3, unprogrammed default
 10155   300002                     	org	3145730
 10156   300002  FF                 	db	255
 10157                           
 10158                           ;Config register CONFIG2H @ 0x300003
 10159                           ;	unspecified, using default values
 10160                           ;	Brown Out Reset Voltage selection bits
 10161                           ;	BORV = 0x3, unprogrammed default
 10162                           ;	ZCD Disable bit
 10163                           ;	ZCD = 0x1, unprogrammed default
 10164                           ;	PPSLOCK bit One-Way Set Enable bit
 10165                           ;	PPS1WAY = 0x1, unprogrammed default
 10166                           ;	Stack Full/Underflow Reset Enable bit
 10167                           ;	STVREN = 0x1, unprogrammed default
 10168                           ;	Debugger Enable bit
 10169                           ;	DEBUG = 0x1, unprogrammed default
 10170                           ;	Extended Instruction Set Enable bit
 10171                           ;	XINST = 0x1, unprogrammed default
 10172   300003                     	org	3145731
 10173   300003  FF                 	db	255
 10174                           
 10175                           ;Config register CONFIG3L @ 0x300004
 10176                           ;	WDT Period Select bits
 10177                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 10178                           ;	WDT operating mode
 10179                           ;	WDTE = OFF, WDT Disabled
 10180   300004                     	org	3145732
 10181   300004  9F                 	db	159
 10182                           
 10183                           ;Config register CONFIG3H @ 0x300005
 10184                           ;	unspecified, using default values
 10185                           ;	WDT Window Select bits
 10186                           ;	WDTCWS = 0x7, unprogrammed default
 10187                           ;	WDT input clock selector
 10188                           ;	WDTCCS = 0x7, unprogrammed default
 10189   300005                     	org	3145733
 10190   300005  FF                 	db	255
 10191                           
 10192                           ;Config register CONFIG4L @ 0x300006
 10193                           ;	unspecified, using default values
 10194                           ;	Write Protection Block 0
 10195                           ;	WRT0 = 0x1, unprogrammed default
 10196                           ;	Write Protection Block 1
 10197                           ;	WRT1 = 0x1, unprogrammed default
 10198                           ;	Write Protection Block 2
 10199                           ;	WRT2 = 0x1, unprogrammed default
 10200                           ;	Write Protection Block 3
 10201                           ;	WRT3 = 0x1, unprogrammed default
 10202                           ;	Write Protection Block 3
 10203                           ;	WRT4 = 0x1, unprogrammed default
 10204                           ;	Write Protection Block 3
 10205                           ;	WRT5 = 0x1, unprogrammed default
 10206                           ;	Write Protection Block 3
 10207                           ;	WRT6 = 0x1, unprogrammed default
 10208                           ;	Write Protection Block 3
 10209                           ;	WRT7 = 0x1, unprogrammed default
 10210   300006                     	org	3145734
 10211   300006  FF                 	db	255
 10212                           
 10213                           ;Config register CONFIG4H @ 0x300007
 10214                           ;	unspecified, using default values
 10215                           ;	Configuration Register Write Protection bit
 10216                           ;	WRTC = 0x1, unprogrammed default
 10217                           ;	Boot Block Write Protection bit
 10218                           ;	WRTB = 0x1, unprogrammed default
 10219                           ;	Data EEPROM Write Protection bit
 10220                           ;	WRTD = 0x1, unprogrammed default
 10221                           ;	Scanner Enable bit
 10222                           ;	SCANE = 0x1, unprogrammed default
 10223                           ;	Low Voltage Programming Enable bit
 10224                           ;	LVP = 0x1, unprogrammed default
 10225   300007                     	org	3145735
 10226   300007  FF                 	db	255
 10227                           
 10228                           ;Config register CONFIG5L @ 0x300008
 10229                           ;	unspecified, using default values
 10230                           ;	UserNVM Program Memory Code Protection bit
 10231                           ;	CP = 0x1, unprogrammed default
 10232                           ;	DataNVM Memory Code Protection bit
 10233                           ;	CPD = 0x1, unprogrammed default
 10234   300008                     	org	3145736
 10235   300008  FF                 	db	255
 10236                           
 10237                           ;Config register CONFIG5H @ 0x300009
 10238                           ;	unspecified, using default values
 10239   300009                     	org	3145737
 10240   300009  FF                 	db	255
 10241                           
 10242                           ;Config register CONFIG6L @ 0x30000A
 10243                           ;	unspecified, using default values
 10244                           ;	Table Read Protection Block 0
 10245                           ;	EBTR0 = 0x1, unprogrammed default
 10246                           ;	Table Read Protection Block 1
 10247                           ;	EBTR1 = 0x1, unprogrammed default
 10248                           ;	Table Read Protection Block 2
 10249                           ;	EBTR2 = 0x1, unprogrammed default
 10250                           ;	Table Read Protection Block 3
 10251                           ;	EBTR3 = 0x1, unprogrammed default
 10252                           ;	Table Read Protection Block 4
 10253                           ;	EBTR4 = 0x1, unprogrammed default
 10254                           ;	Table Read Protection Block 5
 10255                           ;	EBTR5 = 0x1, unprogrammed default
 10256                           ;	Table Read Protection Block 6
 10257                           ;	EBTR6 = 0x1, unprogrammed default
 10258                           ;	Table Read Protection Block 7
 10259                           ;	EBTR7 = 0x1, unprogrammed default
 10260   30000A                     	org	3145738
 10261   30000A  FF                 	db	255
 10262                           
 10263                           ;Config register CONFIG6H @ 0x30000B
 10264                           ;	unspecified, using default values
 10265                           ;	Boot Block Table Read Protection bit
 10266                           ;	EBTRB = 0x1, unprogrammed default
 10267   30000B                     	org	3145739
 10268   30000B  FF                 	db	255
 10269                           tosu	equ	0xFFF
 10270                           tosh	equ	0xFFE
 10271                           tosl	equ	0xFFD
 10272                           stkptr	equ	0xFFC
 10273                           pclatu	equ	0xFFB
 10274                           pclath	equ	0xFFA
 10275                           pcl	equ	0xFF9
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           indf0	equ	0xFEF
 10283                           postinc0	equ	0xFEE
 10284                           postdec0	equ	0xFED
 10285                           preinc0	equ	0xFEC
 10286                           plusw0	equ	0xFEB
 10287                           fsr0h	equ	0xFEA
 10288                           fsr0l	equ	0xFE9
 10289                           wreg	equ	0xFE8
 10290                           indf1	equ	0xFE7
 10291                           postinc1	equ	0xFE6
 10292                           postdec1	equ	0xFE5
 10293                           preinc1	equ	0xFE4
 10294                           plusw1	equ	0xFE3
 10295                           fsr1h	equ	0xFE2
 10296                           fsr1l	equ	0xFE1
 10297                           bsr	equ	0xFE0
 10298                           indf2	equ	0xFDF
 10299                           postinc2	equ	0xFDE
 10300                           postdec2	equ	0xFDD
 10301                           preinc2	equ	0xFDC
 10302                           plusw2	equ	0xFDB
 10303                           fsr2h	equ	0xFDA
 10304                           fsr2l	equ	0xFD9
 10305                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        27
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      93
    BANK0           160     32     106
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    average_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    card_blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_cyan@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_cyan@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_white@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_white@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    colour_to_key@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    colour_to_key@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    convert_HSV@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    convert_HSV@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    forward_navigation@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward_navigation@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    forward_navigation@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    forward_navigation@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    manoeuvre_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_manoeuvre(BANK0[20]), 

    max_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    min_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    pick_card@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    pick_card@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    read_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    read_timer@tH	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerH(COMRAM[1]), 

    read_timer@tL	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerL(COMRAM[1]), 

    read_trail@man	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@mann(COMRAM[1]), 

    read_trail@tH	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerH(COMRAM[1]), 

    read_trail@tL	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerL(COMRAM[1]), 

    return_to_sender@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    return_to_sender@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    S1144DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1144DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2827$buffer	PTR unsigned char  size(2) Largest target is 0

    S2827$source	PTR const unsigned char  size(2) Largest target is 0

    scale_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    squareReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    squareReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_high(BANK0[20]), 

    timer_low_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_low(BANK0[20]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    UTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    UTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    wait_for_wall@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_forward_navigation
    _return_to_sender->_pick_card
    _forward_navigation->_convert_HSV
    _wait_for_wall->_read_RGBC
    _scale_RGB->___fltol
    ___fltol->___flmul
    ___flmul->___xxtofl
    _pick_card->_card_blue
    _pick_card->_card_cyan
    _pick_card->_card_green
    _pick_card->_card_orange
    _pick_card->_card_pink
    _pick_card->_card_red
    _pick_card->_card_yellow
    _card_yellow->_headbuttReverse
    _card_yellow->_squareReverse
    _card_yellow->_turnLeft90
    _card_yellow->_turnRight90
    _card_white->_UTurn
    _card_white->_headbuttReverse
    _card_red->_headbuttReverse
    _card_red->_turnLeft90
    _card_red->_turnRight90
    _card_pink->_headbuttReverse
    _card_pink->_squareReverse
    _card_pink->_turnLeft90
    _card_pink->_turnRight90
    _squareReverse->_fullSpeedReverse
    _card_orange->_headbuttReverse
    _card_orange->_turnLeft135
    _card_orange->_turnRight135
    _card_green->_headbuttReverse
    _card_green->_turnLeft90
    _card_green->_turnRight90
    _turnRight90->_turnRight
    _turnLeft90->_turnLeft
    _card_cyan->_headbuttReverse
    _card_cyan->_turnLeft135
    _card_cyan->_turnRight135
    _turnRight135->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft135->_turnLeft
    _card_blue->_UTurn
    _card_blue->_headbuttReverse
    _headbuttReverse->_fullSpeedReverse
    _fullSpeedReverse->_setMotorPWM
    _UTurn->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _convert_HSV->___lldiv
    _average_RGBC->___lldiv
    _read_RGBC->_color_read_Blue
    _read_RGBC->_color_read_Clear
    _read_RGBC->_color_read_Green
    _read_RGBC->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  382128
                                             74 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                 _forward_navigation
                    _initDCmotorsPWM
                         _initUSART4
                   _return_to_sender
 ---------------------------------------------------------------------------------
 (1) _return_to_sender                                     5     3      2  181907
                                             38 COMRAM     5     3      2
                     _fullSpeedAhead
                          _pick_card
                         _read_trail
                        _start_timer
                               _stop
                         _stop_timer
                   _toggle_main_beam
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _toggle_main_beam                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_trail                                           3     0      3     294
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward_navigation                                   9     5      4  198892
                                             65 COMRAM     9     5      4
                       _average_RGBC
                      _colour_to_key
                        _convert_HSV
                     _fullSpeedAhead
                          _pick_card
                         _read_timer
                        _reset_timer
                          _scale_RGB
                        _start_timer
                               _stop
                         _stop_timer
               _toggle_tricolour_LED
                      _wait_for_wall
                        _write_trail
 ---------------------------------------------------------------------------------
 (2) _write_trail                                          3     1      2     218
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _wait_for_wall                                        4     2      2     910
                                             12 COMRAM     4     2      2
                          _read_RGBC
 ---------------------------------------------------------------------------------
 (2) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _scale_RGB                                            3     2      1    5963
                                             49 COMRAM     3     2      1
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1236
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1143
                                             39 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3420
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_timer                                           2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _pick_card                                            6     2      4  175154
                                             32 COMRAM     6     2      4
                          _card_blue
                          _card_cyan
                         _card_green
                        _card_orange
                          _card_pink
                           _card_red
                         _card_white
                        _card_yellow
 ---------------------------------------------------------------------------------
 (3) _card_yellow                                          5     2      3   28538
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_white                                           2     0      2   15132
                                             27 COMRAM     2     0      2
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (3) _card_red                                             5     2      3   21938
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_pink                                            5     2      3   28538
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _squareReverse                                        4     2      2    6512
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (3) _card_orange                                          5     2      3   21330
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _card_green                                           5     2      3   21938
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _turnRight90                                          4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnLeft90                                           4     2      2    6664
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_cyan                                            5     2      3   21330
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                         4     2      2    6208
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (5) _turnRight                                            5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                          4     2      2    6360
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_blue                                            5     2      3   15274
                                             27 COMRAM     5     2      3
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (4) _headbuttReverse                                      4     2      2    8336
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (5) _toggle_brake_lights                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _fullSpeedReverse                                     5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _UTurn                                                4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
            _toggle_right_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (5) _turnLeft                                             5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _toggle_right_indicators                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _toggle_left_indicators                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    3373
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    1829
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _convert_HSV                                         52    50      2    5717
                                             13 COMRAM    52    50      2
                            ___lldiv
                             ___lmul
                            _max_RGB
                            _min_RGB
 ---------------------------------------------------------------------------------
 (3) _min_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _max_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1434
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _colour_to_key                                        5     3      2     932
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _average_RGBC                                        20    19      1    3012
                                             13 COMRAM    20    19      1
                            ___lldiv
                          _read_RGBC
 ---------------------------------------------------------------------------------
 (3) _read_RGBC                                            1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (4) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1834
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (6) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _forward_navigation
     _average_RGBC
       ___lldiv
       _read_RGBC
         _color_read_Blue
           _I2C_2_Master_Read
             _I2C_2_Master_Idle
           _I2C_2_Master_RepStart
             _I2C_2_Master_Idle
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Clear
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Green
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Red
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
     _colour_to_key
     _convert_HSV
       ___lldiv
       ___lmul
       _max_RGB
       _min_RGB
     _fullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _pick_card
       _card_blue
         _UTurn
           _stop
             _setMotorPWM
           _toggle_left_indicators
           _toggle_right_indicators
           _turnLeft
             _setMotorPWM
         _headbuttReverse
           _fullSpeedReverse
             _setMotorPWM
           _stop
           _toggle_brake_lights
       _card_cyan
         _headbuttReverse
         _turnLeft135
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight135
           _stop
           _toggle_right_indicators
           _turnRight
             _setMotorPWM
       _card_green
         _headbuttReverse
         _turnLeft90
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight90
           _stop
           _toggle_right_indicators
           _turnRight
       _card_orange
         _headbuttReverse
         _turnLeft135
         _turnRight135
       _card_pink
         _headbuttReverse
         _squareReverse
           _fullSpeedReverse
           _stop
           _toggle_brake_lights
         _turnLeft90
         _turnRight90
       _card_red
         _headbuttReverse
         _turnLeft90
         _turnRight90
       _card_white
         _UTurn
         _headbuttReverse
       _card_yellow
         _headbuttReverse
         _squareReverse
         _turnLeft90
         _turnRight90
     _read_timer
     _reset_timer
     _scale_RGB
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _start_timer
     _stop
     _stop_timer
     _toggle_tricolour_LED
     _wait_for_wall
       _read_RGBC
     _write_trail
   _initDCmotorsPWM
   _initUSART4
   _return_to_sender
     _fullSpeedAhead
     _pick_card
     _read_trail
     _start_timer
     _stop
     _stop_timer
     _toggle_main_beam
     _write_timer

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      6A       5       66.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5D       1       98.9%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      9      0       0      57        0.0%
BITBIGSFRlllhhh      9      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C7      61        0.0%
DATA                 0      0      C7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 14 19:39:36 2024

                   _turn180Delay 00C0                  ??_wait_for_wall 000F                   _color_read_Red 33CA  
                _color_read_Blue 34BA                  _trail_timer_low 0074              card_green@backtrack 001E  
                             l30 38D2                               l42 3914                               l27 37C2  
                             l36 3864                               l45 28F2                               l71 3954  
                             l39 3934                               l80 3508                               l74 3418  
                             l83 34B8                               l68 3794                               l92 1F6E  
                             l77 3468                               l86 33C8                               l99 354C  
            ___wmul@multiplicand 0003                 _trail_timer_high 0088                 _color_read_Clear 346A  
               _color_read_Green 341A                              l102 2FF4                              l104 302E  
                            l112 282A                              l107 2F78                              l140 1948  
                            l109 2FB2                              l320 3816                              l128 14E4  
                            l232 2412                              l240 2E36                              l225 2DA8  
                            l323 3818                              l139 1946                              l332 39D2  
                            l341 35D0                              l261 293C                              l245 2AAC  
                            l253 29F4                              l326 383E                              l335 39DC  
                            l264 29AC                              l248 2B1C                              l272 2BD2  
                            l256 2A64                              l329 39E6                              l281 36B8  
                            l338 39B0                              l290 3760                              l275 3728  
                            l284 367E                              l436 24C4                              l269 2B62  
                            l293 3644                              l541 3174                              l278 36F0  
                            l702 39EA                              l711 39BC                              l287 358E  
                            l439 2550                              l705 3988                              l562 2EB6  
                            l466 3972                              l714 360A                              l555 3314  
                            l708 39C8                              l548 3244                              l717 37EC  
                            l583 32AC                              l760 30FC                              l576 31DC  
                            l728 22BE                              l761 310C                              l569 2F36  
                            l586 388A                              l738 2D18                              l749 38B0  
                            l783 2C76                              l599 2754                              l696 38F4  
                            l776 2C66                              l699 39EE                              _ISR 0008  
         ??_toggle_tricolour_LED 0001                      _start_timer 39EC                              wreg 0FE8  
       __end_of_toggle_main_beam 3866                     ___flmul@aexp 0020                     ___flmul@bexp 0021  
                   ?_convert_HSV 000E                     ___flmul@sign 001B                     ___flmul@temp 0026  
                   ___flmul@prod 0022                   min_RGB@min_val 0005                      _squareDelay 00BC  
                           ?_ISR 0001                     ___fltol@exp1 0031                             l1046 2658  
                           l1240 309A                             l3001 3500                             l3011 36F2  
                           l1411 205E                             l1404 1FC6                             l3005 346A  
                           l3101 2F66                             l3013 36F6                             l3021 36BA  
                           l3007 34B0                             l3103 2F98                             l1247 30A2  
                           l3031 3680                             l3015 3702                             l3023 36BE  
                           l3111 3112                             l1407 2122                             l3105 2FAA  
                           l3033 3684                             l3041 3646                             l3201 3282  
                           l3017 3718                             l3025 36CA                             l3113 312E  
                           l1370 1C04                             l1418 20BA                             l3211 39C4  
                           l3051 354E                             l3035 3690                             l3043 364A  
                           l3019 3724                             l3027 36E0                             l3131 321A  
                           l3123 31DE                             l1363 1A0E                             l1380 1D34  
                           l1372 1C7C                             l3221 30DC                             l3213 30A4  
                           l3061 358A                             l3053 3556                             l3141 32CE  
                           l3037 36A8                             l3045 3656                             l3029 36EC  
                           l3125 31E2                             l3117 314A                             l3109 310E  
                           l1373 1C6A                             l3301 1AB8                             l3231 2C0E  
                           l3223 2BD4                             l3215 30B4                             l3055 3562  
                           l3071 375C                             l3063 372A                             l3039 36B4  
                           l3047 366E                             l3127 31FE                             l3207 3866  
                           l3151 2E38                             l3311 1B0A                             l3303 1AC4  
                           l1367 1D72                             l3209 39C0                             l3241 2C56  
                           l3233 2C1C                             l3225 2BE4                             l3217 30C2  
                           l3057 357A                             l3065 372E                             l3145 32EA  
                           l3137 32AE                             l3049 367A                             l3081 3640  
                           l3073 360C                             l3153 2E3C                             l3321 1B88  
                           l3313 1B1A                             l3305 1AD4                             l3401 25F8  
                           l3243 2C60                             l3235 2C26                             l3227 2BFA  
                           l3083 3374                             l3219 30D2                             l3091 3014  
                           l3059 3586                             l3067 373A                             l3139 32B2  
                           l3075 3610                             l3155 2E64                             l3331 1C02  
                           l3323 1BBE                             l3315 1B36                             l3307 1AE0  
                           l3251 1966                             l3411 2628                             l3237 2C44  
                           l3229 2C02                             l3501 1F2A                             l3093 3026  
                           l3085 2FB4                             l3069 3750                             l3181 317A  
                           l3077 361C                             l3173 2F0C                             l3165 2EB8  
                           l3341 1C62                             l3333 1C14                             l3325 1BCC  
                           l3317 1B42                             l3309 1AF0                             l3261 19AC  
                           l3253 1976                             l3245 194A                             l3413 2638  
                           l3421 1F82                             l3239 2C54                             l3503 1F38  
                           l3087 2FC2                             l3183 3196                             l3079 3634  
                           l3167 2EBC                             l3159 2E8C                             l3351 1CD0  
                           l3335 1C22                             l3327 1BEA                             l3319 1B5E  
                           l3271 19D8                             l3263 19B2                             l3255 1986  
                           l3247 1956                             l3415 2648                             l3407 260C  
                           l3431 2000                             l3423 1F90                             l3511 350E  
                           l3505 1F4A                             l3089 2FE2                             l3097 2F38  
                           l3601 1316                             l3521 0E1A                             l3193 3246  
                           l4161 2F20                             l3169 2EE4                             l3361 1D38  
                           l3345 1C8C                             l3353 1CD4                             l3337 1C26  
                           l3329 1BF4                             l3281 1A2E                             l3273 19E8  
                           l3265 19B8                             l3257 1996                             l3249 1964  
                           l3409 2618                             l3441 2054                             l3433 2008  
                           l3425 1FD6                             l3513 3516                             l3507 1F5C  
                           l3099 2F46                             l3611 13B0                             l3603 1346  
                           l3531 0E70                             l3523 0E32                             l3195 324A  
                           l4163 31C6                             l3187 31B2                             l3179 3176  
                           l4155 270E                             l3371 1D62                             l3363 1D48  
                           l3355 1CEE                             l3347 1C98                             l3339 1C34  
                           l3291 1A6E                             l3275 19F8                             l3267 19C6  
                           l3259 199C                             l3451 20CA                             l3443 2090  
                           l3435 2014                             l3427 1FEC                             l3419 1F72  
                           l3701 1832                             l3621 143A                             l3613 13E4  
                           l3605 1352                             l3541 0ED4                             l3533 0E7C  
                           l3525 0E42                             l2901 2DAA                             l3197 3266  
                           l4165 322E                             l4157 2EA0                             l3365 1D56  
                           l3357 1D02                             l3349 1CA6                             l3293 1A7A  
                           l3285 1A42                             l3277 19FE                             l3269 19C8  
                           l3381 257E                             l3461 2112                             l3453 20CE  
                           l3445 209C                             l3437 2046                             l3517 353C  
                           l3509 350A                             l3471 37F8                             l3711 18BA  
                           l3703 1854                             l3631 14C0                             l3623 1446  
                           l3615 1414                             l3607 135E                             l3551 0F90  
                           l3543 0F14                             l3535 0E9A                             l3527 0E52  
                           l2831 305A                             l2823 3030                             l2911 2DEA  
                           l2903 2DAE                             l4167 3296                             l4159 315E  
                           l3367 1D58                             l3359 1D1C                             l3295 1A92  
                           l3287 1A4E                             l3279 1A1E                             l3391 25CC  
                           l3383 25A8                             l3375 2554                             l3455 20F2  
                           l3447 20AA                             l3439 2048                             l3519 2756  
                           l3473 37FE                             l3481 3938                             l3801 3762  
                           l3721 1942                             l3713 18DC                             l3705 1876  
                           l3641 1522                             l3633 14D2                             l3625 147A  
                           l3609 1370                             l3553 0FC4                             l3545 0F48  
                           l3537 0EC4                             l3561 1074                             l3617 141C  
                           l3529 0E5E                             l2841 308E                             l2833 3068  
                           l2825 3038                             l2817 388C                             l2913 2DF2  
                           l2905 2DC4                             l2921 2A66                             l4169 32FE  
                           l3369 1D5E                             l3297 1A9E                             l3289 1A58  
                           l3385 25AA                             l3377 256A                             l3457 2102  
                           l3449 20C8                             l3465 3840                             l3475 3800  
                           l3803 3766                             l3491 1E04                             l3483 1D74  
                           l3715 18E0                             l3707 187A                             l3651 15A6  
                           l3643 1544                             l3635 14E6                             l3627 14AA  
                           l3619 142E                             l3571 110E                             l3563 1096  
                           l3555 1008                             l3547 0F78                             l3539 0EC4  
                           l2843 3094                             l2835 306E                             l2827 304A  
                           l2819 38A8                             l2851 233A                             l3731 291C  
                           l2915 2DFA                             l2907 2DCC                             l2931 2AC4  
                           l2923 2A6E                             l3299 1AAA                             l3387 25BA  
                           l3459 2110                             l3467 282C                             l3811 2D1A  
                           l3477 3802                             l3469 37EE                             l2861 3818  
                           l3805 3770                             l3493 1E26                             l3485 1DBC  
                           l3717 1900                             l3709 189A                             l3661 162A  
                           l3653 15C8                             l3645 1566                             l3637 14EA  
                           l3629 14B2                             l3581 1194                             l3573 1142  
                           l3565 10BC                             l3557 103C                             l3549 0F84  
                           l2837 3084                             l2829 3052                             l2853 233E  
                           l2845 22C0                             l3741 296C                             l3733 2934  
                           l3725 28F4                             l2909 2DE2                             l2917 2E0A  
                           l2941 2B04                             l2933 2ACC                             l2925 2A7A  
                           l3397 25E4                             l3389 25BE                             l3901 221A  
                           l3821 2D82                             l3813 2D2A                             l3479 3804  
                           l2863 3828                             l2871 39DE                             l3807 3780  
                           l3495 1E48                             l3487 1DC4                             l3719 1920  
                           l3671 16AE                             l3663 164C                             l3655 15EA  
                           l3639 1506                             l3647 156A                             l3591 1262  
                           l3583 11D4                             l3575 1172                             l3567 10C8  
                           l3559 106C                             l2839 308C                             l2855 237C  
                           l2847 22DA                             l3735 2954                             l3743 297C  
                           l3727 28FC                             l2919 2E20                             l2935 2AD4  
                           l2927 2A8C                             l2951 29EC                             l2943 29AE  
                           l3751 2672                             l3399 25EE                             l3911 2274  
                           l3903 222C                             l3831 2D9C                             l3823 2D84  
                           l3815 2D50                             l2873 39E2                             l2881 39D8  
                           l3809 378A                             l3489 1DE2                             l3497 1E4A  
                           l3681 172E                             l3673 16D0                             l3665 166E  
                           l3649 1588                             l3657 15EE                             l3593 1288  
                           l3585 1208                             l3569 10D2                             l3577 117E  
                           l2857 2396                             l2849 2328                             l3745 2994  
                           l3737 295C                             l3729 290A                             l2937 2ADC  
                           l2929 2AA4                             l2865 38B2                             l2953 2A0C  
                           l2961 2A34                             l2945 29B6                             l3761 26D6  
                           l3753 2686                             l3913 2286                             l3905 2230  
                           l3833 2DA6                             l3825 2D8E                             l3817 2D54  
                           l3841 396C                             l3921 2C7C                             l3851 38DE  
                           l2875 39A8                             l2891 359E                             l2883 39CA  
                           l3499 1E5A                             l3691 17AE                             l3683 1750  
                           l3675 16F2                             l3659 160C                             l3667 1672  
                           l3595 1294                             l3587 1238                             l3579 118A  
                           l2859 23D6                             l3739 2964                             l2867 3916  
                           l2939 2AEC                             l2971 2B42                             l2963 2A4C  
                           l2955 2A14                             l2947 29C4                             l3763 26EA  
                           l3755 269A                             l3747 265A                             l3915 228A  
                           l3907 2252                             l3827 2D90                             l3819 2D78  
                           l3843 396E                             l3835 3956                             l3931 2CC2  
                           l3923 2C88                             l3773 39B2                             l3853 38E8  
                           l2877 39AC                             l2893 35A6                             l2885 39CE  
                           l3693 17D0                             l3685 1772                             l3669 1690  
                           l3677 16F6                             l3597 12A6                             l3589 1240  
                           l2869 38F6                             l2981 2B92                             l2973 2B5A  
                           l2965 2B1E                             l2957 2A1C                             l2949 29D4  
                           l3757 26AE                             l3749 265E                             l3909 2260  
                           l3917 22AE                             l3861 2124                             l3829 2D9A  
                           l3845 3970                             l3837 3960                             l3781 35D2  
                           l3941 2CFC                             l3933 2CD0                             l3925 2C98  
                           l3855 38EC                             l3847 38D4                             l2879 39D4  
                           l2895 35CC                             l2887 3592                             l3695 17F2  
                           l3679 1712                             l3687 1776                             l3599 12E2  
                           l2975 2B7A                             l2983 2BA2                             l2967 2B26  
                           l2959 2A24                             l3759 26C2                             l3767 26FA  
                           l3775 39EC                             l3791 37E4                             l3871 2150  
                           l3863 2128                             l3839 3962                             l3783 35DA  
                           l3943 2D00                             l3935 2CD4                             l3927 2CAA  
                           l3919 2C78                             l3951 245A                             l3857 38F0  
                           l3849 38DC                             l2897 35CE                             l2889 3596  
                           l2993 341A                             l3689 1792                             l3697 17F6  
                           l2985 2BBA                             l2977 2B82                             l2969 2B32  
                           l3777 39E8                             l3793 37E6                             l3881 2190  
                           l3873 2154                             l3865 2130                             l3785 35EA  
                           l3945 2D04                             l3937 2CE0                             l3929 2CBE  
                           l3961 248E                             l3953 2462                             l3859 38F2  
                           l2995 3460                             l2987 33CA                             l3699 1814  
                           l2979 2B8A                             l3779 3974                             l3795 37E8  
                           l3891 21CE                             l3883 2198                             l3875 216C  
                           l3867 2138                             l3787 35FA                             l3939 2CF0  
                           l3947 2D08                             l3971 24B2                             l3963 2496  
                           l3955 246A                             l2989 3410                             l3797 37EA  
                           l3789 37C6                             l3893 21DE                             l3885 21A4  
                           l3877 2170                             l3869 2144                             l3981 24BC  
                           l3973 24B4                             l3965 24A6                             l3957 247E  
                           l3949 2414                             l3799 3796                             l2999 34BA  
                           l3895 21E2                             l3887 21B2                             l3879 2188  
                           l3991 2530                             l3983 24BE                             l3975 24B6  
                           l3967 24AA                             l3959 2486                             l3897 21E6  
                           l3889 21B6                             l3993 2544                             l3985 24C2  
                           l3977 24B8                             l3969 24AE                             l3899 2208  
                           l3987 24D2                             l3979 24BA                             l3989 2518  
                           STR_1 0E0F                             STR_2 0E14                             STR_5 0E01  
                           u2000 2BD2                             u2001 2BCE                             u2010 2FE2  
                           u2011 2FDE                             u2020 3014                             u2100 1964  
                           u2021 3010                             u2101 1960                             u2030 2F66  
                           u2110 1976                             u2031 2F62                             u2111 1972  
                           u3000 1876                             u2040 2F98                             u2200 1C22  
                           u2120 1986                             u3001 1872                             u2041 2F94  
                           u2201 1C1E                             u2121 1982                             u3010 189A  
                           u2050 30C2                             u2210 1C34                             u2130 19C6  
                           u3011 1896                             u2051 30BE                             u2211 1C30  
                           u2131 19C2                             u3020 18BA                             u2060 30FC  
                           u3100 29AC                             u2220 1C62                             u2140 19D8  
                           u2300 259E                             u3021 18B6                             u2061 30F8  
                           u3101 29A8                             u2221 1C5E                             u2141 19D4  
                           u2070 2BFA                             u3030 18DC                             u2230 1C78  
                           u2150 19E8                             u2310 25CC                             u3110 21DE  
                           u2071 2BF6                             u3031 18D8                             u2231 1C74  
                           u2151 19E4                             u2311 25C8                             u3111 21DA  
                           u2080 2C1C                             u3040 1900                             u2240 1C8C  
                           u2160 1A1E                             u2320 25E0                             u2400 208C  
                           u3120 21F8                     _BAUD4CONbits 0EE9                             u2081 2C18  
                           u3041 18FC                             u2241 1C88                             u2161 1A1A  
                           u2321 25DC                             u2305 2594                             u2401 2088  
                           u3121 21F0                             u2090 2C44                             u3050 1920  
                           u2250 1CA6                             u2170 1A2E                             u2330 2608  
                           u2410 20AA                             u3210 22BE                             u2091 2C40  
                           u3051 191C                             u2251 1CA2                             u2171 1A2A  
                           u2331 2604                             u2411 20A6                             u3211 22BA  
                           u3060 1942                             u1700 304A                             u2260 1CEE  
                           u2180 1BA8                             u2340 2628                             u2420 20BA  
                           u2500 285C                             u3140 221A                             u3220 2CAA  
                           u3061 193E                             u1701 3046                             u2261 1CEA  
                           u2341 2624                             u2421 20B6                             u2501 2854  
                           u3141 2216                             u3221 2CA6                             u1710 3068  
                           u3070 2934                             u2270 1D1C                             u2190 1C02  
                           u2350 2638                             u2430 20C8                             u3150 222C  
                           u3230 2CF0                             u1711 3064                             u3071 2930  
                           u2271 1D18                             u2191 1BFE                             u2351 2634  
                           u2431 20C4                             u3151 2228                             u3231 2CEC  
                           u2600 1E5A                             u1720 3084                             u3080 2954  
                           u2280 1D56                             u2440 2102                             u2360 1F82  
                           u2520 287E                             u3208 229E                             u3160 2242  
                           u3240 2D18                             u2601 1E56                             u1721 3080  
                           u3081 2950                             u2281 1D52                             u2185 1B9E  
                           u2441 20FE                             u2361 1F7E                             u2521 2876  
                           u3161 223A                             u3241 2D14                             u1730 22DA  
                           u3090 2994                             u1810 3908                             u2290 256A  
                           u2450 2110                             u2370 1F90                             u2610 3538  
                           u3138 21FA                             u3250 24D2                             _T2PR 0FBC  
                           u1731 22D6                             u3091 2990                             u1811 3900  
                           u2291 2566                             u2451 210C                             u2371 1F8C  
                           u2611 3534                             u3307 2522                             u3251 24CE  
                           u1740 2396                             u1900 2AC4                             u2380 1FEC  
                           u2540 28A2                             u2620 354C                             u3180 2286  
                           u2460 3852                             u3260 24E4                             u1741 2392  
                           u1901 2AC0                             u2381 1FE8                             u2541 289A  
                           u2621 3548                             u3181 2282                             u3317 217A  
                           u2461 384A                             u3261 24DC                             u1750 3828  
                           u1830 35BA                             u2630 0E70                             u1910 2B04  
                           u2390 2042                             u2518 285E                             u3190 229C  
                           u1751 3824                             u1831 35B2                             u2631 0E6C  
                           u1911 2B00                             u3407 2B98                             u2391 203E  
                           u3191 2294                             u3327 21C0                             u1760 383E  
                           u2800 15EA                             u2720 142E                             u2640 0E9A  
                           u1808 392A                             u1920 2B1C                             u2560 28C2  
                           u2480 283E                             u3280 2506                             u1761 383A  
                           u2801 15E6                             u2721 142A                             u2705 1296  
                           u2641 0E96                             u1921 2B18                             u3417 356C  
                           u3337 3626                             u2561 28BA                             u2481 2836  
                           u3281 24FE                             u2810 160C                             u2730 1506  
                           u2650 0EC4                             u1850 2DC4                             u1770 38C4  
                           u1930 29EC                             u2538 2880                             u3178 2244  
                           u2811 1608                             u2731 1502                             u2715 1360  
                           u2651 0EC0                             u1851 2DC0                             u3427 2AE2  
                           u1771 38BC                             u1931 29E8                             u3347 36D4  
                           u2900 172E                             u2820 162A                             u2740 1522  
                           u2660 1096                             u1860 2DE2                             u1828 390A  
                           u1940 2A0C                             u2580 28E2                             u2901 172A  
                           u2821 1626                             u2741 151E                             u2661 1092  
                           u3437 2E00                             u1861 2DDE                             u1941 2A08  
                           u3357 370C                             u2581 28DA                             u2910 1750  
                           u2830 164C                             u2750 1544                             u2670 10BC  
                           u1870 2E20                             u1790 3928                             u1950 2A4C  
                           u2558 28A4                             u2478 3854                             u3278 24E6  
                           u2911 174C                             u2831 1648                             u2751 1540  
                           u2671 10B8                             u3447 2972                             u1871 2E1C  
                           u1791 3920                             u1951 2A48                             u3367 3660  
                           u1848 35BC                             u2920 1772                             u2840 166E  
                           u2760 1566                             u2680 1262                             u1880 2E36  
                           u1960 2A64                             u3457 3776                             u2921 176E  
                           u2841 166A                             u2761 1562                             u2681 125E  
                           u1881 2E32                             u1961 2A60                             u3377 2A2A  
                           u2930 1792                             u2850 1690                             u2770 1588  
                           u2690 1288                             u1890 2AA4                             u1970 2B5A  
                           u2578 28C4                             u2498 2840                             u3298 2508  
                           u2931 178E                             u2851 168C                             u2771 1584  
                           u2691 1284                             u1891 2AA0                             u1971 2B56  
                           u3387 369A                             u2940 17AE                             u2860 16AE  
                           u2780 15A6                             u1980 2B7A                             u1788 38C6  
                           u2941 17AA                             u2861 16AA                             u2781 15A2  
                           u1981 2B76                             u3397 3744                             u2950 17D0  
                           u2870 16D0                             u2790 15C8                             u1990 2BBA  
                           u2598 28E4                             u2951 17CC                             u2871 16CC  
                           u2791 15C4                             u1991 2BB6                             u2960 17F2  
                           u2880 16F2                             u2961 17EE                             u2881 16EE  
                           u2970 1814                             u2890 1712                             u2971 1810  
                           u2891 170E                             u2980 1832                             u2981 182E  
                           u2990 1854                             u2991 1850                    _colour_to_key 14E6  
                           _main 2414                             fsr1h 0FE2                             fsr2h 0FDA  
                           indf1 0FE7                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             btemp 005E                             _stop 2DAA  
                           prodh 0FF4                             prodl 0FF3                   ??_average_RGBC 000F  
                           start 003C               average_RGBC@temp_B 001A               average_RGBC@temp_C 001E  
             average_RGBC@temp_G 0016               average_RGBC@temp_R 0012           __end_of_color_read_Red 341A  
              headbuttReverse@mL 0018                headbuttReverse@mR 0019                     ___param_bank 0000  
                    _turnLeft135 3680                            ??_ISR 0001                    write_timer@tH 0002  
                  write_timer@tL 0001                    write_trail@tH 0003                    write_trail@tL 0001  
                    _turnRight90 36BA          _toggle_right_indicators 38F6                    ___fltol@sign1 0030  
                          ?_main 0001               _timer_high_pointer 0051                  __end_of___flmul 1D74  
                __end_of___fltol 265A                  __end_of___lldiv 2C78                            ?_stop 0013  
                __end_of___lwdiv 30A4                            i2l746 0038                            _TMR0H 0FD4  
                          _TMR0L 0FD3                 ?_headbuttReverse 0018              ___lmul@multiplicand 0005  
                          _UTurn 354E       __end_of_I2C_2_Master_Start 39E8                      _write_timer 39BE  
     __end_of_I2C_2_Master_Write 39B2                      _write_trail 37C4                  __end_of_max_RGB 3030  
                __end_of_min_RGB 2FB4                   ?_colour_to_key 0001                _turnRight135Delay 00C2  
                          tablat 0FF5                  _turnLeft90Delay 00C8                            plusw2 0FDB  
                          ttemp5 005F                            ttemp6 0062                            ttemp7 0066  
                          status 0FD8                            wtemp8 005F                 _return_to_sender 2C78  
        __end_of_color_read_Blue 350A                    average_RGBC@i 0011                    average_RGBC@p 000E  
          _I2C_2_Master_RepStart 39CA                  ?_color_read_Red 0005                  __initialization 3316  
                   __end_of_main 2554                     __end_of_stop 2E38                           ??_main 004B  
                         ??_stop 0015                    __activetblptr 0003                   write_trail@man 0002  
                   _turnRight135 3646                           ?_UTurn 0018                   _bottomGearLeft 0056  
                   ?_setMotorPWM 000E                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                    _squareReverse 360C  
                         _RC0PPS 0E62                           _RE2PPS 0E74                           _RD5PPS 0E6F  
                         _RC7PPS 0E69                           _RD6PPS 0E70                           _RE4PPS 0E76  
                         i2l2651 002A                           i2l2653 0032                           i2l2655 0036  
                         i2l2647 000A                           i2l2649 001A                           _RG6PPS 0E88  
       __end_of_color_click_init 3796                           _RX4PPS 0E15                           _TX4REG 0EE4  
               __end_of_card_red 3176                 __end_of___xxtofl 2124                 _fullSpeedReverse 2B1E  
               _turnLeft135Delay 00C4                    ??_Timer0_init 0003                     ?_reset_timer 0001  
                   _CCPTMRS0bits 0FAD                     convert_HSV@C 0040                     convert_HSV@M 003E  
                         ___lmul 30A4                     convert_HSV@m 001A                           ___wmul 388C  
                      ??___flmul 0017                        ??___fltol 002C                        ??___lldiv 0009  
      ??_toggle_right_indicators 0001                        ??___lwdiv 000B         ??_toggle_left_indicators 0001  
           forward_navigation@p1 0044             forward_navigation@p2 0045                           clear_0 335C  
           forward_navigation@mL 0042             forward_navigation@mR 0043               fullSpeedReverse@mL 0013  
             fullSpeedReverse@mR 0014                           isa$std 0001                        ??_max_RGB 0003  
             card_blue@backtrack 001E                        ??_min_RGB 0003                     __pdataCOMRAM 004D  
              _timer_low_pointer 0050           return_to_sender@timerH 0029           return_to_sender@timerL 002A  
           __end_of_average_RGBC 1F70                     __mediumconst 0000                           tblptrh 0FF7  
                         tblptrl 0FF6                           tblptru 0FF8              _toggle_brake_lights 38B2  
                ??_colour_to_key 0003                   ?_squareReverse 0018                           stop@mL 0013  
                         stop@mR 0014                ??_initDCmotorsPWM 0003                 __end_of_turnLeft 2B1E  
            convert_HSV@temp_610 0038              convert_HSV@temp_611 0028              convert_HSV@temp_612 002C  
            convert_HSV@temp_613 0030              convert_HSV@temp_614 0034              convert_HSV@temp_615 0020  
                   ___xxtofl@arg 000B                     ___xxtofl@exp 000A                     ___xxtofl@val 0001  
              _buggy_lights_init 3796                       __accesstop 0060          __end_of__initialization 336A  
       __end_of_color_read_Clear 34BA         __end_of_color_read_Green 346A                    card_orange@mL 001C  
                  card_orange@mR 001D           ?_I2C_2_Master_RepStart 0001               ?_buggy_lights_init 0001  
                  ___rparam_used 0001                       ___fltol@f1 0028                 ?_color_read_Blue 0005  
           ?_toggle_brake_lights 0001                   __pcstackCOMRAM 0001             _wall_threshold_clear 004D  
                  __end_of_UTurn 3590                      pick_card@mL 0021                      pick_card@mR 0022  
                   __pidataBANK0 398A              ??_buggy_lights_init 0001              __end_of_Timer0_init 38F6  
                  card_yellow@mL 001C                    card_yellow@mR 001D       __end_of_forward_navigation 22C0  
                   ?_start_timer 0001                          ??_UTurn 001A                ?_toggle_main_beam 0001  
__end_of_toggle_right_indicators 3916        __end_of_buggy_lights_init 37C4                       _card_green 31DE  
             ??_toggle_main_beam 0001                       __pbssBANK0 0060                       _card_white 3866  
              _color_writetoaddr 3936                     _T2CLKCONbits 0FBF            ??_toggle_brake_lights 0001  
                   ?_turnLeft135 0018               ?_color_writetoaddr 0003                          ?___lmul 0001  
      fullSpeedReverse@rightGear 0017             card_yellow@backtrack 001E                          ?___wmul 0001  
                _bottomGearRight 0055            __end_of_wait_for_wall 354E                     ?_turnRight90 0018  
                 ___lmul@product 0009              ??_color_writetoaddr 0004         __end_of_return_to_sender 2D1A  
                      ?_card_red 001C                        ?___xxtofl 0001                  ??_squareReverse 001A  
                        _SP4BRGH 0EE6                          _SP4BRGL 0EE5                     ?_write_timer 0001  
                   ?_write_trail 0001                          _SSP2ADD 0ED6                          _SSP2BUF 0ED5  
              __end_of_card_blue 3316                __end_of_card_cyan 32AE                __end_of_card_pink 2F38  
         color_writetoaddr@value 0003                 ??_color_read_Red 0007                          UTurn@mL 0018  
                        UTurn@mR 0019        __end_of_color_writetoaddr 3956               _I2C_2_Master_Start 39DE  
                     _initUSART4 3956               _I2C_2_Master_Write 39A6                          __Hparam 0000  
                        __Lparam 0000                color_read_Red@tmp 000A                      _Timer0_init 38D4  
                     card_red@mL 001C                       card_red@mR 001D                 _turningRightGear 0053  
                        ___flmul 194A                          ___fltol 2554                          ___lldiv 2BD4  
                  convert_HSV@p1 000E              ?_I2C_2_Master_Start 0001                    convert_HSV@p2 000F  
                        ___lwdiv 3030              ?_I2C_2_Master_Write 0001                wait_for_wall@loss 000E  
                   __psmallconst 0E00                     turnLeft90@mL 0018                     turnLeft90@mR 0019  
                        __pcinit 3316                          __ramtop 0E00                        ?_turnLeft 0013  
                        __ptext0 2414                          __ptext1 2C78                          __ptext2 3840  
                        __ptext3 35D2                          __ptext4 3956                          __ptext5 2D1A  
                        __ptext6 2124                          __ptext7 37C4                          __ptext8 350A  
                        __ptext9 282C                       _read_timer 3974                    ??_card_orange 001F  
                     _read_trail 35D2                __end_of_read_RGBC 33CA                          _max_RGB 2FB4  
                        _min_RGB 2F38                    ??_card_yellow 001F                        _T2CONbits 0FBD  
                     ??_card_red 001F                       ??___xxtofl 0005                __end_of_scale_RGB 282C  
       __end_of_fullSpeedReverse 2BD4                        _T2HLTbits 0FBE                __end_of_pick_card 2756  
         fullSpeedAhead@leftGear 0016             ??_I2C_2_Master_Start 0002             ??_I2C_2_Master_Write 0002  
                    ?_card_green 001C             end_of_initialization 336A                      ?_card_white 001C  
         _toggle_left_indicators 3916         forward_navigation@timerH 0048         forward_navigation@timerL 0049  
              ?_color_click_init 0001                  ___lldiv@divisor 0005                  colour_to_key@p1 0001  
                colour_to_key@p2 0002               ??_color_click_init 0005                  ___lldiv@counter 000D  
                   _average_RGBC 1D74             convert_HSV@hue_scale 003C                          postdec1 0FE5  
                        postdec2 0FDD                  squareReverse@mL 0018                  squareReverse@mR 0019  
                        postinc0 0FEE                          postinc1 0FE6                          postinc2 0FDE  
                _initDCmotorsPWM 2D1A                       ??_turnLeft 0015                        _PORTFbits 0F8E  
             setMotorPWM@negDuty 0012                __end_of_turnRight 2A66             convert_HSV@sat_scale 0018  
                   read_timer@tH 0001                     read_timer@tL 0002                    ___xxtofl@sign 0009  
                      _TRISAbits 0F81               setMotorPWM@posDuty 0011                     read_trail@tH 0001  
                   read_trail@tL 0002                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88              __end_of_card_orange 31DE                 fullSpeedAhead@mL 0013  
              card_red@backtrack 001E                 fullSpeedAhead@mR 0014         color_writetoaddr@address 0004  
            __end_of_card_yellow 2EB8          ??_I2C_2_Master_RepStart 0002             card_orange@backtrack 001E  
                    ___flmul@grs 001C                      _CCP1CONbits 0FAB                ?_color_read_Clear 0005  
                    _CCP2CONbits 0FA7                ?_color_read_Green 0005                      _CCP3CONbits 0F26  
                    ?_initUSART4 0001                      _CCP4CONbits 0F22                       main@motorL 00A2  
                     main@motorR 00AB               ??_color_read_Clear 0007               ??_color_read_Green 0007  
                     _stop_timer 39E8                       _turnLeft90 36F2                     pick_card@key 0024  
                 _fullSpeedAhead 28F4                   __end_of___lmul 310E                   __end_of___wmul 38B2  
                  __pidataCOMRAM 3998                      ?_read_timer 0001                      ?_read_trail 0001  
           return_to_sender@mann 002B              color_read_Clear@tmp 000A              start_initialization 3316  
                  ??_convert_HSV 0010                      __end_of_ISR 003C                 _turnRight90Delay 00C6  
          __end_of_colour_to_key 194A               _forward_navigation 2124                       read_RGBC@p 000C  
            color_read_Green@tmp 000A         ?_toggle_right_indicators 0001              ?_forward_navigation 0042  
              ??_headbuttReverse 001A          __end_of_initDCmotorsPWM 2DAA           __end_of_fullSpeedAhead 29AE  
                       ??___lmul 0009                         ??___wmul 0005                     card_green@mL 001C  
                   card_green@mR 001D                      __pdataBANK0 00BC                       scale_RGB@p 0032  
                    _card_orange 3176                      _card_yellow 2E38                   max_RGB@max_val 0005  
             turnRight@rightGear 0017             ??_forward_navigation 0046                ?_return_to_sender 0027  
                      ___flmul@a 0013                        ___flmul@b 000F                      __pbssCOMRAM 005A  
                  __pcstackBANK0 009C               ??_return_to_sender 0029                     card_white@mL 001C  
                   card_white@mR 001D               return_to_sender@mL 0027               return_to_sender@mR 0028  
                convert_HSV@temp 0024      __end_of_toggle_brake_lights 38D4              __end_of_convert_HSV 14E6  
              turnLeft@rightGear 0017                        _card_blue 32AE                        _card_cyan 3246  
                      _card_pink 2EB8     __end_of_toggle_tricolour_LED 28F4                 ___lwdiv@dividend 0007  
                   ?_Timer0_init 0001                      ?_stop_timer 0001                      ?_turnLeft90 0018  
                ?_fullSpeedAhead 0013                        __pintcode 0008                         ?___flmul 000F  
                       ?___fltol 0028                         ?___lldiv 0001                         ?___lwdiv 0007  
                _turningLeftGear 0054             I2C_2_Master_Read@ack 0003             I2C_2_Master_Read@tmp 0004  
                       ?_max_RGB 0001                         ?_min_RGB 0001                      __smallconst 0E00  
                  ?_turnRight135 0018                _I2C_2_Master_Idle 3818                _I2C_2_Master_Init 37EE  
              _I2C_2_Master_Read 3590                _I2C_2_Master_Stop 39D4                ?_fullSpeedReverse 0013  
                      _read_RGBC 3374               ?_I2C_2_Master_Idle 0001          ?_toggle_left_indicators 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 000F  
          __end_of_squareReverse 3646               ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000B  
             pick_card@backtrack 0023                    _headbuttDelay 00BE         initDCmotorsPWM@PWMperiod 0001  
                   ??_card_green 001F               ??_fullSpeedReverse 0015                        _scale_RGB 2756  
                      _rampDelay 0052                     ??_card_white 001E                        _pick_card 265A  
             card_cyan@backtrack 001E              ??_I2C_2_Master_Idle 0001              ??_I2C_2_Master_Init 0001  
            ??_I2C_2_Master_Read 0002                   ___wmul@product 0005                         _LATAbits 0F79  
                     ?_card_blue 001C              ??_I2C_2_Master_Stop 0002                         _LATCbits 0F7B  
                     ?_card_cyan 001C                         _LATDbits 0F7C                         _LATEbits 0F7D  
                       _LATFbits 0F7E                         _LATGbits 0F7F                       ?_card_pink 001C  
                       _LATHbits 0F80                         _PIE0bits 0E29                    ??_reset_timer 0003  
                    turnRight@mL 0013                      turnRight@mR 0014                        _lost_flag 005B  
                       _PIR0bits 0E33                         i2u168_40 001A                         i2u168_41 0016  
                       i2u169_40 002A                         i2u169_41 0026                         _PIR4bits 0E37  
               ?_initDCmotorsPWM 0001                         _SSP2CON2 0EDA                         _SSP2STAT 0ED8  
                      _returning 005D               __end_of_card_green 3246        __end_of_I2C_2_Master_Idle 3840  
      __end_of_I2C_2_Master_Init 3818        __end_of_I2C_2_Master_Read 35D2                ___wmul@multiplier 0001  
             __end_of_card_white 388C                   ??_turnRight135 001A        __end_of_I2C_2_Master_Stop 39DE  
                   setMotorPWM@m 000E      I2C_2_Master_Write@data_byte 0002   __end_of_toggle_left_indicators 3936  
              ??_color_read_Blue 0007                      _convert_HSV 0E1A                       ?_read_RGBC 000C  
                main@RGBC_colour 00B4                        _turnRight 29AE                ___lmul@multiplier 0001  
                      copy_data0 332A                        copy_data1 334A                       ?_scale_RGB 0032  
                     ?_pick_card 0021               card_pink@backtrack 001E    __end_of_I2C_2_Master_RepStart 39D4  
             color_read_Blue@tmp 000A              __end_of_setMotorPWM 2414                     ??_initUSART4 0001  
              turnRight@leftGear 0016                         __Hrparam 0000                 _toggle_main_beam 3840  
                    card_blue@mL 001C                      card_blue@mR 001D                         __Lrparam 0000  
                 wait_for_wall@p 000D                      card_cyan@mL 001C                      card_cyan@mR 001D  
                   _sample_count 0059                 turnLeft@leftGear 0016                      card_pink@mL 001C  
                    card_pink@mR 001D              __end_of_reset_timer 39BE                    _wait_for_wall 350A  
                 turnRight135@mL 0018                   turnRight135@mR 0019                    turnLeft135@mL 0018  
                  turnLeft135@mR 0019                     ??_read_timer 0003                     ??_read_trail 0004  
                 convert_HSV@hue 001E                   convert_HSV@sat 001C                       _ANSELDbits 0EA7  
                     _ANSELFbits 0EB4                    ??_start_timer 0001                         _card_red 310E  
                       ___xxtofl 1F70                       _T0CON0bits 0FD5                       _T0CON1bits 0FD6  
           _toggle_tricolour_LED 282C                  ___lwdiv@divisor 0009               __end_of_initUSART4 3974  
                ___lwdiv@counter 000D                       ?_turnRight 0013                         __ptext10 39E8  
                       __ptext11 39EC                         __ptext20 310E                         __ptext12 2756  
                       __ptext21 2EB8                         __ptext13 1F70                         __ptext30 3680  
                       __ptext22 360C                         __ptext14 2554                         __ptext31 32AE  
                       __ptext23 3176                         __ptext15 194A                         __ptext40 28F4  
                       __ptext32 372A                         __ptext24 31DE                         __ptext16 3974  
                       __ptext41 22C0                         __ptext33 38B2                         __ptext25 36BA  
                       __ptext17 265A                         __ptext50 3374                         __ptext42 388C  
                       __ptext34 2B1E                         __ptext26 36F2                         __ptext18 2E38  
                       __ptext51 33CA                         __ptext43 3030                         __ptext35 354E  
                       __ptext27 3246                         __ptext19 3866                         __ptext60 39A6  
                       __ptext52 341A                         __ptext44 0E1A                         __ptext36 2A66  
                       __ptext28 3646                         __ptext61 39D4                         __ptext53 346A  
                       __ptext45 2F38                         __ptext37 38F6                         __ptext29 29AE  
                       __ptext62 39DE                         __ptext54 34BA                         __ptext46 2FB4  
                       __ptext38 3916                         __ptext63 3818                         __ptext55 39CA  
                       __ptext47 30A4                         __ptext39 2DAA                         __ptext64 37EE  
                       __ptext56 3590                         __ptext48 14E6                         __ptext65 3796  
                       __ptext57 2BD4                         __ptext49 1D74                         __ptext66 38D4  
                       __ptext58 3762                         __ptext67 39B2                         __ptext59 3936  
                       __ptext68 39BE                     _SSP2CON1bits 0ED9                  _headbuttReverse 372A  
                   _SSP2CON2bits 0EDA                      ??_card_blue 001F                      ??_card_cyan 001F  
                    ??_card_pink 001F         fullSpeedReverse@leftGear 0016                       turnLeft@mL 0013  
                     turnLeft@mR 0014           forward_navigation@mann 004A               __end_of_read_timer 398A  
             __end_of_read_trail 360C                    ??_turnLeft135 001A                         isa$xinst 0000  
                     _RC4STAbits 0EE7                         int$flags 005E                    ??_turnRight90 001A  
                 ?_wait_for_wall 000D                         _turnLeft 2A66                         max_RGB@p 0001  
                   ?_card_orange 001C                         min_RGB@p 0001                     ?_card_yellow 001C  
                     _INTCONbits 0FF2            ?_toggle_tricolour_LED 0001                    ??_write_timer 0002  
                  ??_write_trail 0003                      ??_read_RGBC 000D                      _setMotorPWM 22C0  
                    ??_scale_RGB 0033              __end_of_start_timer 39F0                         intlevel2 0000  
                  turnRight90@mL 0018                    turnRight90@mR 0019                      ??_pick_card 0025  
        fullSpeedAhead@rightGear 0017                     _topGearRight 0057                _manoeuvre_pointer 004F  
               ___lldiv@dividend 0001                 ??_fullSpeedAhead 0015             __end_of_turnRight135 3680  
               colour_to_key@key 0005                   main@HSV_colour 009C                      _reset_timer 39B2  
                   ??_stop_timer 0001                     ??_turnLeft90 001A                 _color_click_init 3762  
            __end_of_turnLeft135 36BA                      _topGearLeft 0058                       _SSP2DATPPS 0E1D  
               ___lldiv@quotient 0009          __end_of_headbuttReverse 3762                       _SSP2CLKPPS 0E1C  
            __end_of_turnRight90 36F2                  _trail_manoeuvre 0060                      ??_turnRight 0015  
                    _return_flag 005C               __end_of_stop_timer 39EC               __end_of_turnLeft90 372A  
                _manoeuvre_count 005A                       _TX4STAbits 0EE8              __end_of_write_timer 39CA  
            __end_of_write_trail 37EE                    ?_average_RGBC 000E                    read_trail@man 0003  
