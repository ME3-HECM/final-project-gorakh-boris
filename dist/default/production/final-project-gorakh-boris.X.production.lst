

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 07 19:45:34 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 18/08/2023 GMT
    67                           ; 
    68                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   00236A                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _timer_low_pointer
   106   00236A  14                 	db	low _trail_timer_low
   107   00236B  01                 	db	high _trail_timer_low
   108                           
   109                           ;initializer for _timer_high_pointer
   110   00236C  28                 	db	low _trail_timer_high
   111   00236D  01                 	db	high _trail_timer_high
   112                           
   113                           ;initializer for _turningGear
   114   00236E  2A                 	db	42
   115                           
   116                           ;initializer for _topGearRight
   117   00236F  14                 	db	20
   118                           
   119                           ;initializer for _topGearLeft
   120   002370  14                 	db	20
   121                           
   122                           ;initializer for _rampDelay
   123   002371  08                 	db	8
   124                           
   125                           	psect	idataBANK0
   126   002316                     __pidataBANK0:
   127                           	callstack 0
   128                           
   129                           ;initializer for _manoeuvre_pointer
   130   002316  00                 	db	low _trail_manoeuvre
   131   002317  01                 	db	high _trail_manoeuvre
   132                           
   133                           ;initializer for _squareDelay
   134   002318  012C               	dw	300
   135                           
   136                           ;initializer for _headbuttDelay
   137   00231A  0046               	dw	70
   138                           
   139                           ;initializer for _turn180Delay
   140   00231C  01FE               	dw	510
   141                           
   142                           ;initializer for _turnRight135Delay
   143   00231E  012C               	dw	300
   144                           
   145                           ;initializer for _turnLeft135Delay
   146   002320  012C               	dw	300
   147                           
   148                           ;initializer for _turnRight90Delay
   149   002322  00AF               	dw	175
   150                           
   151                           ;initializer for _turnLeft90Delay
   152   002324  00AF               	dw	175
   153                           
   154                           ;initializer for _wall_threshold
   155   002326  012C               	dw	300
   156   000000                     _TMR0H	set	4052
   157   000000                     _TX4REG	set	3812
   158   000000                     _RC4STAbits	set	3815
   159   000000                     _SP4BRGH	set	3814
   160   000000                     _LATEbits	set	3965
   161   000000                     _TRISEbits	set	3973
   162   000000                     _LATGbits	set	3967
   163   000000                     _TRISGbits	set	3975
   164   000000                     _LATFbits	set	3966
   165   000000                     _LATHbits	set	3968
   166   000000                     _TRISFbits	set	3974
   167   000000                     _TRISHbits	set	3976
   168   000000                     _SSP2CON2bits	set	3802
   169   000000                     _RX4PPS	set	3605
   170   000000                     _SSP2CLKPPS	set	3612
   171   000000                     _SSP2DATPPS	set	3613
   172   000000                     _RC7PPS	set	3689
   173   000000                     _RE2PPS	set	3700
   174   000000                     _LATAbits	set	3961
   175   000000                     _LATDbits	set	3964
   176   000000                     _TRISDbits	set	3972
   177   000000                     _T2PR	set	4028
   178   000000                     _T2CONbits	set	4029
   179   000000                     _CCPR2H	set	4006
   180   000000                     _CCPR1H	set	4010
   181   000000                     _TRISCbits	set	3971
   182   000000                     _TRISAbits	set	3969
   183   000000                     _LATCbits	set	3963
   184   000000                     _RE4PPS	set	3702
   185   000000                     _RG6PPS	set	3720
   186   000000                     _RD5PPS	set	3695
   187   000000                     _ANSELDbits	set	3751
   188   000000                     _SSP2ADD	set	3798
   189   000000                     _SSP2CON1bits	set	3801
   190   000000                     _CCPR4H	set	3873
   191   000000                     _CCPR3H	set	3877
   192   000000                     _TMR0L	set	4051
   193   000000                     _T0CON0bits	set	4053
   194   000000                     _T0CON1bits	set	4054
   195   000000                     _T2CLKCONbits	set	4031
   196   000000                     _T2HLTbits	set	4030
   197   000000                     _CCP1CONbits	set	4011
   198   000000                     _CCPTMRS0bits	set	4013
   199   000000                     _CCP2CONbits	set	4007
   200   000000                     _CCP3CONbits	set	3878
   201   000000                     _CCP4CONbits	set	3874
   202   000000                     _RC4REG	set	3811
   203   000000                     _SP4BRGL	set	3813
   204   000000                     _TX4STAbits	set	3816
   205   000000                     _BAUD4CONbits	set	3817
   206   000000                     _SSP2CON2	set	3802
   207   000000                     _SSP2STAT	set	3800
   208   000000                     _ANSELFbits	set	3764
   209   000000                     _SSP2BUF	set	3797
   210   000000                     _PIE0bits	set	3625
   211   000000                     _PIR4bits	set	3639
   212   000000                     _RC0PPS	set	3682
   213   000000                     _RD6PPS	set	3696
   214   000000                     _INTCONbits	set	4082
   215   000000                     _PIR0bits	set	3635
   216                           
   217                           	psect	smallconst
   218   000E00                     __psmallconst:
   219                           	callstack 0
   220   000E00  00                 	db	0
   221   000E01                     STR_5:
   222                           
   223                           ; BSR set to: 14
   224   000E01  25                 	db	37
   225   000E02  75                 	db	117	;'u'
   226   000E03  20                 	db	32
   227   000E04  25                 	db	37
   228   000E05  75                 	db	117	;'u'
   229   000E06  20                 	db	32
   230   000E07  25                 	db	37
   231   000E08  75                 	db	117	;'u'
   232   000E09  20                 	db	32
   233   000E0A  25                 	db	37
   234   000E0B  75                 	db	117	;'u'
   235   000E0C  20                 	db	32
   236   000E0D  0D                 	db	13
   237   000E0E  00                 	db	0
   238   000E0F                     STR_1:
   239                           
   240                           ; BSR set to: 14
   241   000E0F  25                 	db	37
   242   000E10  64                 	db	100	;'d'
   243   000E11  20                 	db	32
   244   000E12  0D                 	db	13
   245   000E13  00                 	db	0
   246   000E14                     STR_2:
   247                           
   248                           ; BSR set to: 14
   249   000E14  25                 	db	37
   250   000E15  64                 	db	100	;'d'
   251   000E16  20                 	db	32
   252   000E17  00                 	db	0
   253   000E18  00                 	db	0	; dummy byte at the end
   254   000000                     
   255                           ; #config settings
   256                           
   257                           	psect	cinit
   258   001C26                     __pcinit:
   259                           	callstack 0
   260   001C26                     start_initialization:
   261                           	callstack 0
   262   001C26                     __initialization:
   263                           	callstack 0
   264                           
   265                           ; Initialize objects allocated to BANK0 (18 bytes)
   266                           ; load TBLPTR registers with __pidataBANK0
   267   001C26  0E16               	movlw	low __pidataBANK0
   268   001C28  6EF6               	movwf	tblptrl,c
   269   001C2A  0E23               	movlw	high __pidataBANK0
   270   001C2C  6EF7               	movwf	tblptrh,c
   271   001C2E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   272   001C30  6EF8               	movwf	tblptru,c
   273   001C32  EE00  F0A6         	lfsr	0,__pdataBANK0
   274   001C36  EE10 F012          	lfsr	1,18
   275   001C3A                     copy_data0:
   276   001C3A  0009               	tblrd		*+
   277   001C3C  CFF5 FFEE          	movff	tablat,postinc0
   278   001C40  50E5               	movf	postdec1,w,c
   279   001C42  50E1               	movf	fsr1l,w,c
   280   001C44  E1FA               	bnz	copy_data0
   281                           
   282                           ; Initialize objects allocated to COMRAM (8 bytes)
   283                           ; load TBLPTR registers with __pidataCOMRAM
   284   001C46  0E6A               	movlw	low __pidataCOMRAM
   285   001C48  6EF6               	movwf	tblptrl,c
   286   001C4A  0E23               	movlw	high __pidataCOMRAM
   287   001C4C  6EF7               	movwf	tblptrh,c
   288   001C4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   289   001C50  6EF8               	movwf	tblptru,c
   290   001C52  EE00  F052         	lfsr	0,__pdataCOMRAM
   291   001C56  EE10 F008          	lfsr	1,8
   292   001C5A                     copy_data1:
   293   001C5A  0009               	tblrd		*+
   294   001C5C  CFF5 FFEE          	movff	tablat,postinc0
   295   001C60  50E5               	movf	postdec1,w,c
   296   001C62  50E1               	movf	fsr1l,w,c
   297   001C64  E1FA               	bnz	copy_data1
   298                           
   299                           ; Clear objects allocated to BANK1 (60 bytes)
   300   001C66  EE01  F000         	lfsr	0,__pbssBANK1
   301   001C6A  0E3C               	movlw	60
   302   001C6C                     clear_0:
   303   001C6C  6AEE               	clrf	postinc0,c
   304   001C6E  06E8               	decf	wreg,f,c
   305   001C70  E1FD               	bnz	clear_0
   306                           
   307                           ; Clear objects allocated to BANK0 (38 bytes)
   308   001C72  EE00  F060         	lfsr	0,__pbssBANK0
   309   001C76  0E26               	movlw	38
   310   001C78                     clear_1:
   311   001C78  6AEE               	clrf	postinc0,c
   312   001C7A  06E8               	decf	wreg,f,c
   313   001C7C  E1FD               	bnz	clear_1
   314                           
   315                           ; Clear objects allocated to COMRAM (4 bytes)
   316   001C7E  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   317   001C80  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   318   001C82  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   319   001C84  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   320   001C86                     end_of_initialization:
   321                           	callstack 0
   322   001C86                     __end_of__initialization:
   323                           	callstack 0
   324   001C86  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   325   001C88  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   326   001C8A  0100               	movlb	0
   327   001C8C  EF2D  F00B         	goto	_main	;jump to C main() function
   328                           
   329                           	psect	bssCOMRAM
   330   00005A                     __pbssCOMRAM:
   331                           	callstack 0
   332   00005A                     _flags:
   333                           	callstack 0
   334   00005A                     	ds	1
   335   00005B                     _manoeuvre_count:
   336                           	callstack 0
   337   00005B                     	ds	1
   338   00005C                     _return_flag:
   339                           	callstack 0
   340   00005C                     	ds	1
   341   00005D                     _returning:
   342                           	callstack 0
   343   00005D                     	ds	1
   344                           
   345                           	psect	dataCOMRAM
   346   000052                     __pdataCOMRAM:
   347                           	callstack 0
   348   000052                     _timer_low_pointer:
   349                           	callstack 0
   350   000052                     	ds	2
   351   000054                     _timer_high_pointer:
   352                           	callstack 0
   353   000054                     	ds	2
   354   000056                     _turningGear:
   355                           	callstack 0
   356   000056                     	ds	1
   357   000057                     _topGearRight:
   358                           	callstack 0
   359   000057                     	ds	1
   360   000058                     _topGearLeft:
   361                           	callstack 0
   362   000058                     	ds	1
   363   000059                     _rampDelay:
   364                           	callstack 0
   365   000059                     	ds	1
   366                           
   367                           	psect	bssBANK0
   368   000060                     __pbssBANK0:
   369                           	callstack 0
   370   000060                     _dbuf:
   371                           	callstack 0
   372   000060                     	ds	32
   373   000080                     _nout:
   374                           	callstack 0
   375   000080                     	ds	2
   376   000082                     _width:
   377                           	callstack 0
   378   000082                     	ds	2
   379   000084                     _prec:
   380                           	callstack 0
   381   000084                     	ds	2
   382                           
   383                           	psect	dataBANK0
   384   0000A6                     __pdataBANK0:
   385                           	callstack 0
   386   0000A6                     _manoeuvre_pointer:
   387                           	callstack 0
   388   0000A6                     	ds	2
   389   0000A8                     _squareDelay:
   390                           	callstack 0
   391   0000A8                     	ds	2
   392   0000AA                     _headbuttDelay:
   393                           	callstack 0
   394   0000AA                     	ds	2
   395   0000AC                     _turn180Delay:
   396                           	callstack 0
   397   0000AC                     	ds	2
   398   0000AE                     _turnRight135Delay:
   399                           	callstack 0
   400   0000AE                     	ds	2
   401   0000B0                     _turnLeft135Delay:
   402                           	callstack 0
   403   0000B0                     	ds	2
   404   0000B2                     _turnRight90Delay:
   405                           	callstack 0
   406   0000B2                     	ds	2
   407   0000B4                     _turnLeft90Delay:
   408                           	callstack 0
   409   0000B4                     	ds	2
   410   0000B6                     _wall_threshold:
   411                           	callstack 0
   412   0000B6                     	ds	2
   413                           
   414                           	psect	bssBANK1
   415   000100                     __pbssBANK1:
   416                           	callstack 0
   417   000100                     _trail_manoeuvre:
   418                           	callstack 0
   419   000100                     	ds	20
   420   000114                     _trail_timer_low:
   421                           	callstack 0
   422   000114                     	ds	20
   423   000128                     _trail_timer_high:
   424                           	callstack 0
   425   000128                     	ds	20
   426                           
   427                           	psect	cstackBANK0
   428   000086                     __pcstackBANK0:
   429                           	callstack 0
   430   000086                     main@HSV_colour:
   431                           	callstack 0
   432                           
   433                           ; 6 bytes @ 0x0
   434   000086                     	ds	6
   435   00008C                     main@motorL:
   436                           	callstack 0
   437                           
   438                           ; 9 bytes @ 0x6
   439   00008C                     	ds	9
   440   000095                     main@motorR:
   441                           	callstack 0
   442                           
   443                           ; 9 bytes @ 0xF
   444   000095                     	ds	9
   445   00009E                     main@measured_colour:
   446                           	callstack 0
   447                           
   448                           ; 8 bytes @ 0x18
   449   00009E                     	ds	8
   450                           
   451                           	psect	cstackCOMRAM
   452   000001                     __pcstackCOMRAM:
   453                           	callstack 0
   454   000001                     ??_toggle_tricolour_LED:
   455   000001                     ??_I2C_2_Master_Idle:
   456   000001                     ?_max:
   457                           	callstack 0
   458   000001                     ?_min:
   459                           	callstack 0
   460   000001                     ?___wmul:
   461                           	callstack 0
   462   000001                     ?___awdiv:
   463                           	callstack 0
   464   000001                     ?___awmod:
   465                           	callstack 0
   466   000001                     ?___lwmod:
   467                           	callstack 0
   468   000001                     ?___lmul:
   469                           	callstack 0
   470   000001                     ?___lldiv:
   471                           	callstack 0
   472   000001                     sendCharSerial4@charToSend:
   473                           	callstack 0
   474   000001                     write_timer@tL:
   475                           	callstack 0
   476   000001                     max@a:
   477                           	callstack 0
   478   000001                     min@a:
   479                           	callstack 0
   480   000001                     initDCmotorsPWM@PWMperiod:
   481                           	callstack 0
   482   000001                     ___wmul@multiplier:
   483                           	callstack 0
   484   000001                     ___awdiv@dividend:
   485                           	callstack 0
   486   000001                     ___awmod@dividend:
   487                           	callstack 0
   488   000001                     ___lwmod@dividend:
   489                           	callstack 0
   490   000001                     fputc@c:
   491                           	callstack 0
   492   000001                     ___lmul@multiplier:
   493                           	callstack 0
   494   000001                     ___lldiv@dividend:
   495                           	callstack 0
   496                           
   497                           ; 4 bytes @ 0x0
   498   000001                     	ds	1
   499   000002                     ??_I2C_2_Master_Read:
   500   000002                     I2C_2_Master_Write@data_byte:
   501                           	callstack 0
   502   000002                     write_timer@tH:
   503                           	callstack 0
   504   000002                     sendStringSerial4@string:
   505                           	callstack 0
   506                           
   507                           ; 2 bytes @ 0x1
   508   000002                     	ds	1
   509   000003                     color_writetoaddr@value:
   510                           	callstack 0
   511   000003                     I2C_2_Master_Read@ack:
   512                           	callstack 0
   513   000003                     fputc@fp:
   514                           	callstack 0
   515   000003                     max@b:
   516                           	callstack 0
   517   000003                     min@b:
   518                           	callstack 0
   519   000003                     ___wmul@multiplicand:
   520                           	callstack 0
   521   000003                     ___awdiv@divisor:
   522                           	callstack 0
   523   000003                     ___awmod@divisor:
   524                           	callstack 0
   525   000003                     ___lwmod@divisor:
   526                           	callstack 0
   527                           
   528                           ; 2 bytes @ 0x2
   529   000003                     	ds	1
   530   000004                     ??_fputc:
   531   000004                     color_writetoaddr@address:
   532                           	callstack 0
   533   000004                     I2C_2_Master_Read@tmp:
   534                           	callstack 0
   535                           
   536                           ; 1 bytes @ 0x3
   537   000004                     	ds	1
   538   000005                     ??_color_click_init:
   539   000005                     ?_color_read_Red:
   540                           	callstack 0
   541   000005                     ?_color_read_Blue:
   542                           	callstack 0
   543   000005                     ?_color_read_Green:
   544                           	callstack 0
   545   000005                     ?_color_read_Clear:
   546                           	callstack 0
   547   000005                     ___awdiv@counter:
   548                           	callstack 0
   549   000005                     ___awmod@counter:
   550                           	callstack 0
   551   000005                     ___lwmod@counter:
   552                           	callstack 0
   553   000005                     max@max_val:
   554                           	callstack 0
   555   000005                     min@min_val:
   556                           	callstack 0
   557   000005                     ___wmul@product:
   558                           	callstack 0
   559   000005                     ___lmul@multiplicand:
   560                           	callstack 0
   561   000005                     ___lldiv@divisor:
   562                           	callstack 0
   563                           
   564                           ; 4 bytes @ 0x4
   565   000005                     	ds	1
   566   000006                     ___awdiv@sign:
   567                           	callstack 0
   568   000006                     ___awmod@sign:
   569                           	callstack 0
   570                           
   571                           ; 1 bytes @ 0x5
   572   000006                     	ds	1
   573   000007                     ??_color_read_Red:
   574   000007                     ??_color_read_Blue:
   575   000007                     ??_color_read_Green:
   576   000007                     ??_color_read_Clear:
   577   000007                     ?_abs:
   578                           	callstack 0
   579   000007                     ?_maxRGB:
   580                           	callstack 0
   581   000007                     ?_minRGB:
   582                           	callstack 0
   583   000007                     ?___lwdiv:
   584                           	callstack 0
   585   000007                     maxRGB@p:
   586                           	callstack 0
   587   000007                     minRGB@p:
   588                           	callstack 0
   589   000007                     ___awdiv@quotient:
   590                           	callstack 0
   591   000007                     ___lwdiv@dividend:
   592                           	callstack 0
   593   000007                     abs@a:
   594                           	callstack 0
   595                           
   596                           ; 2 bytes @ 0x6
   597   000007                     	ds	2
   598   000009                     ??_abs:
   599   000009                     ___lwdiv@divisor:
   600                           	callstack 0
   601   000009                     _maxRGB$3150:
   602                           	callstack 0
   603   000009                     _minRGB$3151:
   604                           	callstack 0
   605   000009                     ___lmul@product:
   606                           	callstack 0
   607   000009                     ___lldiv@quotient:
   608                           	callstack 0
   609                           
   610                           ; 4 bytes @ 0x8
   611   000009                     	ds	1
   612   00000A                     color_read_Red@tmp:
   613                           	callstack 0
   614   00000A                     color_read_Blue@tmp:
   615                           	callstack 0
   616   00000A                     color_read_Green@tmp:
   617                           	callstack 0
   618   00000A                     color_read_Clear@tmp:
   619                           	callstack 0
   620                           
   621                           ; 2 bytes @ 0x9
   622   00000A                     	ds	1
   623   00000B                     ___lwdiv@counter:
   624                           	callstack 0
   625                           
   626                           ; 1 bytes @ 0xA
   627   00000B                     	ds	1
   628   00000C                     getRGBCval@p:
   629                           	callstack 0
   630   00000C                     ___lwdiv@quotient:
   631                           	callstack 0
   632                           
   633                           ; 2 bytes @ 0xB
   634   00000C                     	ds	1
   635   00000D                     ___lldiv@counter:
   636                           	callstack 0
   637                           
   638                           ; 1 bytes @ 0xC
   639   00000D                     	ds	1
   640   00000E                     ?_vfpfcnvrt:
   641                           	callstack 0
   642   00000E                     getHSVval@p1:
   643                           	callstack 0
   644   00000E                     vfpfcnvrt@fp:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0xD
   648   00000E                     	ds	1
   649   00000F                     getHSVval@p2:
   650                           	callstack 0
   651   00000F                     vfpfcnvrt@fmt:
   652                           	callstack 0
   653                           
   654                           ; 1 bytes @ 0xE
   655   00000F                     	ds	1
   656   000010                     ??_getHSVval:
   657   000010                     vfpfcnvrt@ap:
   658                           	callstack 0
   659                           
   660                           ; 1 bytes @ 0xF
   661   000010                     	ds	1
   662   000011                     ??_vfpfcnvrt:
   663                           
   664                           ; 1 bytes @ 0x10
   665   000011                     	ds	2
   666   000013                     vfpfcnvrt@done:
   667                           	callstack 0
   668                           
   669                           ; 1 bytes @ 0x12
   670   000013                     	ds	1
   671   000014                     vfpfcnvrt@cnt:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x13
   675   000014                     	ds	2
   676   000016                     vfpfcnvrt@cp:
   677                           	callstack 0
   678                           
   679                           ; 1 bytes @ 0x15
   680   000016                     	ds	1
   681   000017                     vfpfcnvrt@convarg:
   682                           	callstack 0
   683                           
   684                           ; 4 bytes @ 0x16
   685   000017                     	ds	1
   686   000018                     getHSVval@RR:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x17
   690   000018                     	ds	2
   691   00001A                     getHSVval@m:
   692                           	callstack 0
   693                           
   694                           ; 2 bytes @ 0x19
   695   00001A                     	ds	1
   696   00001B                     vfpfcnvrt@c:
   697                           	callstack 0
   698                           
   699                           ; 1 bytes @ 0x1A
   700   00001B                     	ds	1
   701   00001C                     ?_vfprintf:
   702                           	callstack 0
   703   00001C                     vfprintf@fp:
   704                           	callstack 0
   705   00001C                     getHSVval@S:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x1B
   709   00001C                     	ds	1
   710   00001D                     vfprintf@fmt:
   711                           	callstack 0
   712                           
   713                           ; 1 bytes @ 0x1C
   714   00001D                     	ds	1
   715   00001E                     vfprintf@ap:
   716                           	callstack 0
   717   00001E                     getHSVval@GG:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x1D
   721   00001E                     	ds	1
   722   00001F                     vfprintf@cfmt:
   723                           	callstack 0
   724                           
   725                           ; 1 bytes @ 0x1E
   726   00001F                     	ds	1
   727   000020                     ?_sprintf:
   728                           	callstack 0
   729   000020                     getHSVval@BB:
   730                           	callstack 0
   731   000020                     sprintf@s:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x1F
   735   000020                     	ds	2
   736   000022                     sprintf@fmt:
   737                           	callstack 0
   738   000022                     getHSVval@H:
   739                           	callstack 0
   740                           
   741                           ; 2 bytes @ 0x21
   742   000022                     	ds	2
   743   000024                     getHSVval@temp_623:
   744                           	callstack 0
   745                           
   746                           ; 4 bytes @ 0x23
   747   000024                     	ds	4
   748   000028                     getHSVval@temp:
   749                           	callstack 0
   750                           
   751                           ; 4 bytes @ 0x27
   752   000028                     	ds	3
   753   00002B                     sprintf@ret:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x2A
   757   00002B                     	ds	1
   758   00002C                     getHSVval@temp_622:
   759                           	callstack 0
   760                           
   761                           ; 4 bytes @ 0x2B
   762   00002C                     	ds	1
   763   00002D                     sprintf@ap:
   764                           	callstack 0
   765                           
   766                           ; 1 bytes @ 0x2C
   767   00002D                     	ds	1
   768   00002E                     sprintf@f:
   769                           	callstack 0
   770                           
   771                           ; 12 bytes @ 0x2D
   772   00002E                     	ds	2
   773   000030                     getHSVval@M:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x2F
   777   000030                     	ds	2
   778   000032                     getHSVval@C:
   779                           	callstack 0
   780                           
   781                           ; 2 bytes @ 0x31
   782   000032                     	ds	8
   783   00003A                     sendHSVvalSerial4@col_val:
   784                           	callstack 0
   785                           
   786                           ; 1 bytes @ 0x39
   787   00003A                     	ds	1
   788   00003B                     sendHSVvalSerial4@tempStr:
   789                           	callstack 0
   790                           
   791                           ; 21 bytes @ 0x3A
   792   00003B                     	ds	21
   793   000050                     ??_main:
   794                           
   795                           ; 1 bytes @ 0x4F
   796   000050                     	ds	2
   797                           
   798 ;;
   799 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   800 ;;
   801 ;; *************** function _main *****************
   802 ;; Defined at:
   803 ;;		line 27 in file "main.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;  motorR          9   15[BANK0 ] struct DC_motor
   808 ;;  motorL          9    6[BANK0 ] struct DC_motor
   809 ;;  measured_col    8   24[BANK0 ] struct RGBC_val
   810 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
   811 ;;  PWMcycle        2    0        unsigned int 
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   822 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   823 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   824 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   825 ;;Total ram usage:       34 bytes
   826 ;; Hardware stack levels required when called: 7
   827 ;; This function calls:
   828 ;;		_Timer0_init
   829 ;;		_buggy_lights_init
   830 ;;		_color_click_init
   831 ;;		_getHSVval
   832 ;;		_getRGBCval
   833 ;;		_initDCmotorsPWM
   834 ;;		_initUSART4
   835 ;;		_sendHSVvalSerial4
   836 ;;		_toggle_tricolour_LED
   837 ;; This function is called by:
   838 ;;		Startup code after reset
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text0
   843   00165A                     __ptext0:
   844                           	callstack 0
   845   00165A                     _main:
   846                           	callstack 24
   847   00165A                     
   848                           ;main.c: 28:     struct RGBC_val measured_colour;;main.c: 29:         measured_colour.R 
      +                          = 0;
   849   00165A  0E00               	movlw	0
   850   00165C  0100               	movlb	0	; () banked
   851   00165E  6F9F               	movwf	(main@measured_colour+1)& (0+255),b
   852   001660  0E00               	movlw	0
   853   001662  6F9E               	movwf	main@measured_colour& (0+255),b
   854                           
   855                           ;main.c: 30:         measured_colour.G = 0;
   856   001664  0E00               	movlw	0
   857   001666  6FA1               	movwf	(main@measured_colour+3)& (0+255),b
   858   001668  0E00               	movlw	0
   859   00166A  6FA0               	movwf	(main@measured_colour+2)& (0+255),b
   860                           
   861                           ;main.c: 31:         measured_colour.B = 0;
   862   00166C  0E00               	movlw	0
   863   00166E  6FA3               	movwf	(main@measured_colour+5)& (0+255),b
   864   001670  0E00               	movlw	0
   865   001672  6FA2               	movwf	(main@measured_colour+4)& (0+255),b
   866                           
   867                           ;main.c: 32:         measured_colour.C = 0;
   868   001674  0E00               	movlw	0
   869   001676  6FA5               	movwf	(main@measured_colour+7)& (0+255),b
   870   001678  0E00               	movlw	0
   871   00167A  6FA4               	movwf	(main@measured_colour+6)& (0+255),b
   872                           
   873                           ;main.c: 34:     struct HSV_val HSV_colour;;main.c: 35:         HSV_colour.H = 0;
   874   00167C  0E00               	movlw	0
   875   00167E  6F87               	movwf	(main@HSV_colour+1)& (0+255),b
   876   001680  0E00               	movlw	0
   877   001682  6F86               	movwf	main@HSV_colour& (0+255),b
   878                           
   879                           ;main.c: 36:         HSV_colour.S = 0;
   880   001684  0E00               	movlw	0
   881   001686  6F89               	movwf	(main@HSV_colour+3)& (0+255),b
   882   001688  0E00               	movlw	0
   883   00168A  6F88               	movwf	(main@HSV_colour+2)& (0+255),b
   884                           
   885                           ;main.c: 37:         HSV_colour.V = 0;
   886   00168C  0E00               	movlw	0
   887   00168E  6F8B               	movwf	(main@HSV_colour+5)& (0+255),b
   888   001690  0E00               	movlw	0
   889   001692  6F8A               	movwf	(main@HSV_colour+4)& (0+255),b
   890                           
   891                           ;main.c: 41:     struct DC_motor motorL, motorR;;main.c: 42:         motorL.power = 0;
   892   001694  0E00               	movlw	0
   893   001696  6F8C               	movwf	main@motorL& (0+255),b
   894                           
   895                           ;main.c: 43:         motorL.direction = 1;
   896   001698  0E01               	movlw	1
   897   00169A  6F8D               	movwf	(main@motorL+1)& (0+255),b
   898                           
   899                           ;main.c: 44:         motorL.brakemode = 1;
   900   00169C  0E01               	movlw	1
   901   00169E  6F8E               	movwf	(main@motorL+2)& (0+255),b
   902   0016A0                     
   903                           ; BSR set to: 0
   904                           ;main.c: 45:         motorL.PWMperiod = PWMcycle;
   905   0016A0  0E00               	movlw	0
   906   0016A2  6F90               	movwf	(main@motorL+4)& (0+255),b
   907   0016A4  0E63               	movlw	99
   908   0016A6  6F8F               	movwf	(main@motorL+3)& (0+255),b
   909   0016A8                     
   910                           ; BSR set to: 0
   911                           ;main.c: 46:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   912   0016A8  0EAA               	movlw	170
   913   0016AA  6F91               	movwf	(main@motorL+5)& (0+255),b
   914   0016AC  0E0F               	movlw	15
   915   0016AE  6F92               	movwf	(main@motorL+6)& (0+255),b
   916   0016B0                     
   917                           ; BSR set to: 0
   918                           ;main.c: 47:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   919   0016B0  0EA6               	movlw	166
   920   0016B2  6F93               	movwf	(main@motorL+7)& (0+255),b
   921   0016B4  0E0F               	movlw	15
   922   0016B6  6F94               	movwf	(main@motorL+8)& (0+255),b
   923                           
   924                           ;main.c: 48:         motorR.power = 0;
   925   0016B8  0E00               	movlw	0
   926   0016BA  6F95               	movwf	main@motorR& (0+255),b
   927                           
   928                           ;main.c: 49:         motorR.direction = 1;
   929   0016BC  0E01               	movlw	1
   930   0016BE  6F96               	movwf	(main@motorR+1)& (0+255),b
   931                           
   932                           ;main.c: 50:         motorR.brakemode = 1;
   933   0016C0  0E01               	movlw	1
   934   0016C2  6F97               	movwf	(main@motorR+2)& (0+255),b
   935   0016C4                     
   936                           ; BSR set to: 0
   937                           ;main.c: 51:         motorR.PWMperiod = PWMcycle;
   938   0016C4  0E00               	movlw	0
   939   0016C6  6F99               	movwf	(main@motorR+4)& (0+255),b
   940   0016C8  0E63               	movlw	99
   941   0016CA  6F98               	movwf	(main@motorR+3)& (0+255),b
   942   0016CC                     
   943                           ; BSR set to: 0
   944                           ;main.c: 52:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   945   0016CC  0E25               	movlw	37
   946   0016CE  6F9A               	movwf	(main@motorR+5)& (0+255),b
   947   0016D0  0E0F               	movlw	15
   948   0016D2  6F9B               	movwf	(main@motorR+6)& (0+255),b
   949   0016D4                     
   950                           ; BSR set to: 0
   951                           ;main.c: 53:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   952   0016D4  0E21               	movlw	33
   953   0016D6  6F9C               	movwf	(main@motorR+7)& (0+255),b
   954   0016D8  0E0F               	movlw	15
   955   0016DA  6F9D               	movwf	(main@motorR+8)& (0+255),b
   956   0016DC                     
   957                           ; BSR set to: 0
   958                           ;main.c: 55:     initDCmotorsPWM(PWMcycle);
   959   0016DC  0E00               	movlw	0
   960   0016DE  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   961   0016E0  0E63               	movlw	99
   962   0016E2  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   963   0016E4  EC91  F00D         	call	_initDCmotorsPWM	;wreg free
   964                           
   965                           ;main.c: 56:     buggy_lights_init();
   966   0016E8  ECFB  F010         	call	_buggy_lights_init	;wreg free
   967   0016EC                     
   968                           ;main.c: 57:     color_click_init();
   969   0016EC  ECB1  F010         	call	_color_click_init	;wreg free
   970   0016F0                     
   971                           ;main.c: 58:     initUSART4();
   972   0016F0  EC70  F011         	call	_initUSART4	;wreg free
   973   0016F4                     
   974                           ;main.c: 59:     Timer0_init();
   975   0016F4  EC4E  F011         	call	_Timer0_init	;wreg free
   976   0016F8                     
   977                           ;main.c: 63:         TRISDbits.TRISD7 = 0;
   978   0016F8  9E84               	bcf	132,7,c	;volatile
   979   0016FA                     
   980                           ;main.c: 64:         TRISHbits.TRISH3 = 0;
   981   0016FA  9688               	bcf	136,3,c	;volatile
   982   0016FC                     
   983                           ;main.c: 66:         LATDbits.LATD7 = 0;
   984   0016FC  9E7C               	bcf	124,7,c	;volatile
   985   0016FE                     
   986                           ;main.c: 67:         LATHbits.LATH3 = 0;
   987   0016FE  9680               	bcf	128,3,c	;volatile
   988   001700                     
   989                           ;main.c: 71:         TRISFbits.TRISF2 = 1;
   990   001700  8486               	bsf	134,2,c	;volatile
   991   001702                     
   992                           ;main.c: 72:         TRISFbits.TRISF3 = 1;
   993   001702  8686               	bsf	134,3,c	;volatile
   994   001704                     
   995                           ;main.c: 74:         ANSELFbits.ANSELF2 = 0;
   996   001704  010E               	movlb	14	; () banked
   997   001706  95B4               	bcf	180,2,b	;volatile
   998   001708                     
   999                           ; BSR set to: 14
  1000                           ;main.c: 75:         ANSELFbits.ANSELF3 = 0;
  1001   001708  97B4               	bcf	180,3,b	;volatile
  1002                           
  1003                           ;main.c: 80:     LATHbits.LATH3 = !LATHbits.LATH3;
  1004   00170A  A680               	btfss	128,3,c	;volatile
  1005   00170C  EF8A  F00B         	goto	u3251
  1006   001710  EF8E  F00B         	goto	u3250
  1007   001714                     u3251:
  1008   001714  6A50               	clrf	??_main^0,c
  1009   001716  2A50               	incf	??_main^0,f,c
  1010   001718  EF8F  F00B         	goto	u3268
  1011   00171C                     u3250:
  1012   00171C  6A50               	clrf	??_main^0,c
  1013   00171E                     u3268:
  1014   00171E  4650               	rlncf	??_main^0,f,c
  1015   001720  4650               	rlncf	??_main^0,f,c
  1016   001722  4650               	rlncf	??_main^0,f,c
  1017   001724  5080               	movf	128,w,c	;volatile
  1018   001726  1850               	xorwf	??_main^0,w,c
  1019   001728  0BF7               	andlw	-9
  1020   00172A  1850               	xorwf	??_main^0,w,c
  1021   00172C  6E80               	movwf	128,c	;volatile
  1022   00172E                     
  1023                           ;main.c: 81:     toggle_tricolour_LED();
  1024   00172E  ECC4  F00B         	call	_toggle_tricolour_LED	;wreg free
  1025   001732                     l4451:
  1026                           
  1027                           ;main.c: 86:         getRGBCval(&measured_colour);
  1028   001732  0E9E               	movlw	low main@measured_colour
  1029   001734  6E0C               	movwf	getRGBCval@p^0,c
  1030   001736  EC0B  F00F         	call	_getRGBCval	;wreg free
  1031   00173A                     
  1032                           ;main.c: 87:         measured_colour.R = 40000;
  1033   00173A  0E9C               	movlw	156
  1034   00173C  0100               	movlb	0	; () banked
  1035   00173E  6F9F               	movwf	(main@measured_colour+1)& (0+255),b
  1036   001740  0E40               	movlw	64
  1037   001742  6F9E               	movwf	main@measured_colour& (0+255),b
  1038   001744                     
  1039                           ; BSR set to: 0
  1040                           ;main.c: 88:         measured_colour.G = 19400;
  1041   001744  0E4B               	movlw	75
  1042   001746  6FA1               	movwf	(main@measured_colour+3)& (0+255),b
  1043   001748  0EC8               	movlw	200
  1044   00174A  6FA0               	movwf	(main@measured_colour+2)& (0+255),b
  1045   00174C                     
  1046                           ; BSR set to: 0
  1047                           ;main.c: 89:         measured_colour.B = 3000;
  1048   00174C  0E0B               	movlw	11
  1049   00174E  6FA3               	movwf	(main@measured_colour+5)& (0+255),b
  1050   001750  0EB8               	movlw	184
  1051   001752  6FA2               	movwf	(main@measured_colour+4)& (0+255),b
  1052   001754                     
  1053                           ; BSR set to: 0
  1054                           ;main.c: 90:         getHSVval(&HSV_colour, &measured_colour);
  1055   001754  0E86               	movlw	low main@HSV_colour
  1056   001756  6E0E               	movwf	getHSVval@p1^0,c
  1057   001758  0E9E               	movlw	low main@measured_colour
  1058   00175A  6E0F               	movwf	getHSVval@p2^0,c
  1059   00175C  EC0D  F007         	call	_getHSVval	;wreg free
  1060   001760                     
  1061                           ;main.c: 92:         sendHSVvalSerial4(&HSV_colour);
  1062   001760  0E86               	movlw	low main@HSV_colour
  1063   001762  6E3A               	movwf	sendHSVvalSerial4@col_val^0,c
  1064   001764  EC2A  F010         	call	_sendHSVvalSerial4	;wreg free
  1065   001768                     
  1066                           ;main.c: 93:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1067   001768  0E52               	movlw	82
  1068   00176A  6E51               	movwf	(??_main+1)^0,c
  1069   00176C  0E2B               	movlw	43
  1070   00176E  6E50               	movwf	??_main^0,c
  1071   001770  0E00               	movlw	0
  1072   001772                     u3307:
  1073   001772  2EE8               	decfsz	wreg,f,c
  1074   001774  D7FE               	bra	u3307
  1075   001776  2E50               	decfsz	??_main^0,f,c
  1076   001778  D7FC               	bra	u3307
  1077   00177A  2E51               	decfsz	(??_main+1)^0,f,c
  1078   00177C  D7FA               	bra	u3307
  1079   00177E  D000               	nop2	
  1080   001780  EF99  F00B         	goto	l4451
  1081   001784  EF1A  F000         	goto	start
  1082   001788                     __end_of_main:
  1083                           	callstack 0
  1084                           
  1085 ;; *************** function _toggle_tricolour_LED *****************
  1086 ;; Defined at:
  1087 ;;		line 86 in file "buggy_lights.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;		None
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1104 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1105 ;;Total ram usage:        1 bytes
  1106 ;; Hardware stack levels used: 1
  1107 ;; Hardware stack levels required when called: 1
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_main
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           	psect	text1
  1116   001788                     __ptext1:
  1117                           	callstack 0
  1118   001788                     _toggle_tricolour_LED:
  1119                           	callstack 29
  1120   001788                     
  1121                           ;buggy_lights.c: 91:             LATGbits.LATG1 = !LATGbits.LATG1;
  1122   001788  A27F               	btfss	127,1,c	;volatile
  1123   00178A  EFC9  F00B         	goto	u1871
  1124   00178E  EFCD  F00B         	goto	u1870
  1125   001792                     u1871:
  1126   001792  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1127   001794  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1128   001796  EFCE  F00B         	goto	u1888
  1129   00179A                     u1870:
  1130   00179A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1131   00179C                     u1888:
  1132   00179C  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1133   00179E  507F               	movf	127,w,c	;volatile
  1134   0017A0  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1135   0017A2  0BFD               	andlw	-3
  1136   0017A4  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1137   0017A6  6E7F               	movwf	127,c	;volatile
  1138                           
  1139                           ;buggy_lights.c: 92:             LATAbits.LATA4 = !LATAbits.LATA4;
  1140   0017A8  A879               	btfss	121,4,c	;volatile
  1141   0017AA  EFD9  F00B         	goto	u1891
  1142   0017AE  EFDD  F00B         	goto	u1890
  1143   0017B2                     u1891:
  1144   0017B2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1145   0017B4  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1146   0017B6  EFDE  F00B         	goto	u1908
  1147   0017BA                     u1890:
  1148   0017BA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1149   0017BC                     u1908:
  1150   0017BC  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  1151   0017BE  5079               	movf	121,w,c	;volatile
  1152   0017C0  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1153   0017C2  0BEF               	andlw	-17
  1154   0017C4  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1155   0017C6  6E79               	movwf	121,c	;volatile
  1156                           
  1157                           ;buggy_lights.c: 93:             LATFbits.LATF7 = !LATFbits.LATF7;
  1158   0017C8  AE7E               	btfss	126,7,c	;volatile
  1159   0017CA  EFE9  F00B         	goto	u1911
  1160   0017CE  EFED  F00B         	goto	u1910
  1161   0017D2                     u1911:
  1162   0017D2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1163   0017D4  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1164   0017D6  EFEE  F00B         	goto	u1928
  1165   0017DA                     u1910:
  1166   0017DA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1167   0017DC                     u1928:
  1168   0017DC  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1169   0017DE  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1170   0017E0  507E               	movf	126,w,c	;volatile
  1171   0017E2  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1172   0017E4  0B7F               	andlw	-129
  1173   0017E6  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1174   0017E8  6E7E               	movwf	126,c	;volatile
  1175                           
  1176                           ;buggy_lights.c: 97:             LATGbits.LATG0 = !LATGbits.LATG0;
  1177   0017EA  A07F               	btfss	127,0,c	;volatile
  1178   0017EC  EFFA  F00B         	goto	u1931
  1179   0017F0  EFFE  F00B         	goto	u1930
  1180   0017F4                     u1931:
  1181   0017F4  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1182   0017F6  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1183   0017F8  EFFF  F00B         	goto	u1948
  1184   0017FC                     u1930:
  1185   0017FC  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1186   0017FE                     u1948:
  1187   0017FE  507F               	movf	127,w,c	;volatile
  1188   001800  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1189   001802  0BFE               	andlw	-2
  1190   001804  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1191   001806  6E7F               	movwf	127,c	;volatile
  1192                           
  1193                           ;buggy_lights.c: 98:             LATEbits.LATE7 = !LATEbits.LATE7;
  1194   001808  AE7D               	btfss	125,7,c	;volatile
  1195   00180A  EF09  F00C         	goto	u1951
  1196   00180E  EF0D  F00C         	goto	u1950
  1197   001812                     u1951:
  1198   001812  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1199   001814  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1200   001816  EF0E  F00C         	goto	u1968
  1201   00181A                     u1950:
  1202   00181A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1203   00181C                     u1968:
  1204   00181C  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1205   00181E  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1206   001820  507D               	movf	125,w,c	;volatile
  1207   001822  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1208   001824  0B7F               	andlw	-129
  1209   001826  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1210   001828  6E7D               	movwf	125,c	;volatile
  1211                           
  1212                           ;buggy_lights.c: 99:             LATAbits.LATA3 = !LATAbits.LATA3;
  1213   00182A  A679               	btfss	121,3,c	;volatile
  1214   00182C  EF1A  F00C         	goto	u1971
  1215   001830  EF1E  F00C         	goto	u1970
  1216   001834                     u1971:
  1217   001834  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1218   001836  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1219   001838  EF1F  F00C         	goto	u1988
  1220   00183C                     u1970:
  1221   00183C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1222   00183E                     u1988:
  1223   00183E  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1224   001840  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1225   001842  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1226   001844  5079               	movf	121,w,c	;volatile
  1227   001846  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1228   001848  0BF7               	andlw	-9
  1229   00184A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1230   00184C  6E79               	movwf	121,c	;volatile
  1231   00184E  0012               	return		;funcret
  1232   001850                     __end_of_toggle_tricolour_LED:
  1233                           	callstack 0
  1234                           
  1235 ;; *************** function _sendHSVvalSerial4 *****************
  1236 ;; Defined at:
  1237 ;;		line 70 in file "serial.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;  col_val         1   57[COMRAM] PTR struct HSV_val
  1240 ;;		 -> main@HSV_colour(6), 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  tempStr        21   58[COMRAM] unsigned char [21]
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  1    wreg      void 
  1245 ;; Registers used:
  1246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1252 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1253 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1255 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1256 ;;Total ram usage:       22 bytes
  1257 ;; Hardware stack levels used: 1
  1258 ;; Hardware stack levels required when called: 6
  1259 ;; This function calls:
  1260 ;;		_sendStringSerial4
  1261 ;;		_sprintf
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text2
  1268   002054                     __ptext2:
  1269                           	callstack 0
  1270   002054                     _sendHSVvalSerial4:
  1271                           	callstack 24
  1272   002054                     
  1273                           ;serial.c: 71:     char tempStr[21];;serial.c: 73:     sprintf(tempStr, "%u %u %u \r", c
      +                          ol_val->H, col_val->S, col_val->V);
  1274   002054  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  1275   002056  6E20               	movwf	sprintf@s^0,c
  1276   002058  6A21               	clrf	(sprintf@s+1)^0,c
  1277   00205A  0E04               	movlw	low (STR_5+3)
  1278   00205C  6E22               	movwf	sprintf@fmt^0,c
  1279   00205E  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  1280   002060  6ED9               	movwf	fsr2l,c
  1281   002062  6ADA               	clrf	fsr2h,c
  1282   002064  CFDE F023          	movff	postinc2,?_sprintf+3
  1283   002068  CFDD F024          	movff	postdec2,?_sprintf+4
  1284   00206C  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  1285   00206E  6ED9               	movwf	fsr2l,c
  1286   002070  6ADA               	clrf	fsr2h,c
  1287   002072  0E02               	movlw	2
  1288   002074  26D9               	addwf	fsr2l,f,c
  1289   002076  CFDE F025          	movff	postinc2,?_sprintf+5
  1290   00207A  CFDD F026          	movff	postdec2,?_sprintf+6
  1291   00207E  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  1292   002080  6ED9               	movwf	fsr2l,c
  1293   002082  6ADA               	clrf	fsr2h,c
  1294   002084  0E04               	movlw	4
  1295   002086  26D9               	addwf	fsr2l,f,c
  1296   002088  CFDE F027          	movff	postinc2,?_sprintf+7
  1297   00208C  CFDD F028          	movff	postdec2,?_sprintf+8
  1298   002090  EC50  F010         	call	_sprintf	;wreg free
  1299   002094                     
  1300                           ;serial.c: 74:     sendStringSerial4(tempStr);
  1301   002094  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  1302   002096  6E02               	movwf	sendStringSerial4@string^0,c
  1303   002098  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1304   00209A  ECAF  F00E         	call	_sendStringSerial4	;wreg free
  1305   00209E  0012               	return		;funcret
  1306   0020A0                     __end_of_sendHSVvalSerial4:
  1307                           	callstack 0
  1308                           
  1309 ;; *************** function _sprintf *****************
  1310 ;; Defined at:
  1311 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;  s               2   31[COMRAM] PTR unsigned char 
  1314 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), sendArrayCharSerial4@tempStr(161), sendIntSerial4
      +@string(17), 
  1315 ;;  fmt             1   33[COMRAM] PTR const unsigned char 
  1316 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  f              12   45[COMRAM] struct _IO_FILE
  1319 ;;  ret             2   42[COMRAM] int 
  1320 ;;  ap              1   44[COMRAM] PTR void [1]
  1321 ;;		 -> ?_sprintf(2), 
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  2   31[COMRAM] int 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1331 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1332 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1334 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1335 ;;Total ram usage:       26 bytes
  1336 ;; Hardware stack levels used: 1
  1337 ;; Hardware stack levels required when called: 5
  1338 ;; This function calls:
  1339 ;;		_vfprintf
  1340 ;; This function is called by:
  1341 ;;		_sendHSVvalSerial4
  1342 ;;		_sendIntSerial4
  1343 ;;		_sendArrayCharSerial4
  1344 ;;		_sendRGBCvalSerial4
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           	psect	text3
  1349   0020A0                     __ptext3:
  1350                           	callstack 0
  1351   0020A0                     _sprintf:
  1352                           	callstack 24
  1353   0020A0  0E23               	movlw	low (?_sprintf+3)
  1354   0020A2  6E2D               	movwf	sprintf@ap^0,c
  1355   0020A4  C020  F02E         	movff	sprintf@s,sprintf@f
  1356   0020A8  C021  F02F         	movff	sprintf@s+1,sprintf@f+1
  1357   0020AC  0E00               	movlw	0
  1358   0020AE  6E32               	movwf	(sprintf@f+4)^0,c
  1359   0020B0  0E00               	movlw	0
  1360   0020B2  6E31               	movwf	(sprintf@f+3)^0,c
  1361   0020B4  0E00               	movlw	0
  1362   0020B6  6E39               	movwf	(sprintf@f+11)^0,c
  1363   0020B8  0E00               	movlw	0
  1364   0020BA  6E38               	movwf	(sprintf@f+10)^0,c
  1365   0020BC  0E2E               	movlw	low sprintf@f
  1366   0020BE  6E1C               	movwf	vfprintf@fp^0,c
  1367   0020C0  C022  F01D         	movff	sprintf@fmt,vfprintf@fmt
  1368   0020C4  0E2D               	movlw	low sprintf@ap
  1369   0020C6  6E1E               	movwf	vfprintf@ap^0,c
  1370   0020C8  ECE0  F00E         	call	_vfprintf	;wreg free
  1371   0020CC  C01C  F02B         	movff	?_vfprintf,sprintf@ret
  1372   0020D0  C01D  F02C         	movff	?_vfprintf+1,sprintf@ret+1
  1373   0020D4  5031               	movf	(sprintf@f+3)^0,w,c
  1374   0020D6  2420               	addwf	sprintf@s^0,w,c
  1375   0020D8  6ED9               	movwf	fsr2l,c
  1376   0020DA  5032               	movf	(sprintf@f+4)^0,w,c
  1377   0020DC  2021               	addwfc	(sprintf@s+1)^0,w,c
  1378   0020DE  6EDA               	movwf	fsr2h,c
  1379   0020E0  6ADF               	clrf	indf2,c
  1380   0020E2  C02B  F020         	movff	sprintf@ret,?_sprintf
  1381   0020E6  C02C  F021         	movff	sprintf@ret+1,?_sprintf+1
  1382   0020EA  0012               	return		;funcret
  1383   0020EC                     __end_of_sprintf:
  1384                           	callstack 0
  1385                           
  1386 ;; *************** function _vfprintf *****************
  1387 ;; Defined at:
  1388 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;  fp              1   27[COMRAM] PTR struct _IO_FILE
  1391 ;;		 -> sprintf@f(12), 
  1392 ;;  fmt             1   28[COMRAM] PTR const unsigned char 
  1393 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1394 ;;  ap              1   29[COMRAM] PTR PTR void 
  1395 ;;		 -> sprintf@ap(1), 
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  cfmt            1   30[COMRAM] PTR unsigned char 
  1398 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1399 ;; Return value:  Size  Location     Type
  1400 ;;                  2   27[COMRAM] int 
  1401 ;; Registers used:
  1402 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1408 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1411 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1412 ;;Total ram usage:        4 bytes
  1413 ;; Hardware stack levels used: 1
  1414 ;; Hardware stack levels required when called: 4
  1415 ;; This function calls:
  1416 ;;		_vfpfcnvrt
  1417 ;; This function is called by:
  1418 ;;		_sprintf
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text4
  1423   001DC0                     __ptext4:
  1424                           	callstack 0
  1425   001DC0                     _vfprintf:
  1426                           	callstack 24
  1427   001DC0                     
  1428                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1429   001DC0  C01D  F01F         	movff	vfprintf@fmt,vfprintf@cfmt
  1430   001DC4                     
  1431                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  1432   001DC4  0E00               	movlw	0
  1433   001DC6  0100               	movlb	0	; () banked
  1434   001DC8  6F81               	movwf	(_nout+1)& (0+255),b
  1435   001DCA  0E00               	movlw	0
  1436   001DCC  6F80               	movwf	_nout& (0+255),b
  1437                           
  1438                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1439   001DCE  EFF6  F00E         	goto	l4125
  1440   001DD2                     l4123:
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  1444   001DD2  C01C  F00E         	movff	vfprintf@fp,vfpfcnvrt@fp
  1445   001DD6  0E1F               	movlw	low vfprintf@cfmt
  1446   001DD8  6E0F               	movwf	vfpfcnvrt@fmt^0,c
  1447   001DDA  C01E  F010         	movff	vfprintf@ap,vfpfcnvrt@ap
  1448   001DDE  ECA7  F009         	call	_vfpfcnvrt	;wreg free
  1449   001DE2  500E               	movf	?_vfpfcnvrt^0,w,c
  1450   001DE4  0100               	movlb	0	; () banked
  1451   001DE6  2780               	addwf	_nout& (0+255),f,b
  1452   001DE8  500F               	movf	(?_vfpfcnvrt+1)^0,w,c
  1453   001DEA  2381               	addwfc	(_nout+1)& (0+255),f,b
  1454   001DEC                     l4125:
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1458   001DEC  C01F  FFF6         	movff	vfprintf@cfmt,tblptrl
  1459   001DF0                     	if	1	;There is more than 1 active tblptr byte
  1460   001DF0  0E0E               	movlw	high __smallconst
  1461   001DF2  6EF7               	movwf	tblptrh,c
  1462   001DF4                     	endif
  1463   001DF4                     	if	0	;tblptru may be non-zero
  1464   001DF4                     	endif
  1465   001DF4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1466   001DF4  0E00               	movlw	low (__smallconst shr (0+16))
  1467   001DF6  6EF8               	movwf	tblptru,c
  1468   001DF8                     	endif
  1469   001DF8  0008               	tblrd		*
  1470   001DFA  50F5               	movf	tablat,w,c
  1471   001DFC  0900               	iorlw	0
  1472   001DFE  A4D8               	btfss	status,2,c
  1473   001E00  EF04  F00F         	goto	u3111
  1474   001E04  EF06  F00F         	goto	u3110
  1475   001E08                     u3111:
  1476   001E08  EFE9  F00E         	goto	l4123
  1477   001E0C                     u3110:
  1478   001E0C                     
  1479                           ; BSR set to: 0
  1480                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  1481   001E0C  C080  F01C         	movff	_nout,?_vfprintf
  1482   001E10  C081  F01D         	movff	_nout+1,?_vfprintf+1
  1483   001E14                     
  1484                           ; BSR set to: 0
  1485   001E14  0012               	return		;funcret
  1486   001E16                     __end_of_vfprintf:
  1487                           	callstack 0
  1488                           
  1489 ;; *************** function _vfpfcnvrt *****************
  1490 ;; Defined at:
  1491 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  1494 ;;		 -> sprintf@f(12), 
  1495 ;;  fmt             1   14[COMRAM] PTR PTR unsigned char 
  1496 ;;		 -> vfprintf@cfmt(1), 
  1497 ;;  ap              1   15[COMRAM] PTR PTR void 
  1498 ;;		 -> sprintf@ap(1), 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;  convarg         4   22[COMRAM] struct .
  1501 ;;  cnt             2   19[COMRAM] int 
  1502 ;;  c               1   26[COMRAM] unsigned char 
  1503 ;;  cp              1   21[COMRAM] PTR unsigned char 
  1504 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1505 ;;  done            1   18[COMRAM] _Bool 
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  2   13[COMRAM] int 
  1508 ;; Registers used:
  1509 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1515 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1516 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1517 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1518 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1519 ;;Total ram usage:       14 bytes
  1520 ;; Hardware stack levels used: 1
  1521 ;; Hardware stack levels required when called: 3
  1522 ;; This function calls:
  1523 ;;		___awdiv
  1524 ;;		___awmod
  1525 ;;		___lwdiv
  1526 ;;		___lwmod
  1527 ;;		_abs
  1528 ;;		_fputc
  1529 ;; This function is called by:
  1530 ;;		_vfprintf
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text5
  1535   00134E                     __ptext5:
  1536                           	callstack 0
  1537   00134E                     _vfpfcnvrt:
  1538                           	callstack 24
  1539   00134E                     
  1540                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  1541   00134E  0E00               	movlw	0
  1542   001350  6E15               	movwf	(vfpfcnvrt@cnt+1)^0,c
  1543   001352  0E00               	movlw	0
  1544   001354  6E14               	movwf	vfpfcnvrt@cnt^0,c
  1545   001356                     
  1546                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  1547   001356  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1548   001358  6ED9               	movwf	fsr2l,c
  1549   00135A  6ADA               	clrf	fsr2h,c
  1550   00135C  CFDF FFF6          	movff	indf2,tblptrl
  1551   001360                     	if	1	;There is more than 1 active tblptr byte
  1552   001360  0E0E               	movlw	high __smallconst
  1553   001362  6EF7               	movwf	tblptrh,c
  1554   001364                     	endif
  1555   001364                     	if	0	;tblptru may be non-zero
  1556   001364                     	endif
  1557   001364                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1558   001364  0E00               	movlw	low (__smallconst shr (0+16))
  1559   001366  6EF8               	movwf	tblptru,c
  1560   001368                     	endif
  1561   001368  0008               	tblrd		*
  1562   00136A  50F5               	movf	tablat,w,c
  1563   00136C  0A25               	xorlw	37
  1564   00136E  A4D8               	btfss	status,2,c
  1565   001370  EFBC  F009         	goto	u2971
  1566   001374  EFBE  F009         	goto	u2970
  1567   001378                     u2971:
  1568   001378  EF13  F00B         	goto	l4063
  1569   00137C                     u2970:
  1570   00137C                     
  1571                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1572   00137C  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1573   00137E  6ED9               	movwf	fsr2l,c
  1574   001380  6ADA               	clrf	fsr2h,c
  1575   001382  2ADF               	incf	indf2,f,c
  1576   001384                     
  1577                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1578   001384  0E00               	movlw	0
  1579   001386  0100               	movlb	0	; () banked
  1580   001388  6F83               	movwf	(_width+1)& (0+255),b
  1581   00138A  0E00               	movlw	0
  1582   00138C  6F82               	movwf	_width& (0+255),b
  1583   00138E  C082  F05A         	movff	_width,_flags
  1584   001392                     
  1585                           ; BSR set to: 0
  1586                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1587   001392  6984               	setf	_prec& (0+255),b
  1588   001394  6985               	setf	(_prec+1)& (0+255),b
  1589   001396                     
  1590                           ; BSR set to: 0
  1591                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1592   001396  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1593   001398  6ED9               	movwf	fsr2l,c
  1594   00139A  6ADA               	clrf	fsr2h,c
  1595   00139C  50DF               	movf	indf2,w,c
  1596   00139E  6E16               	movwf	vfpfcnvrt@cp^0,c
  1597   0013A0                     
  1598                           ; BSR set to: 0
  1599                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1600   0013A0  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1601   0013A4                     	if	1	;There is more than 1 active tblptr byte
  1602   0013A4  0E0E               	movlw	high __smallconst
  1603   0013A6  6EF7               	movwf	tblptrh,c
  1604   0013A8                     	endif
  1605   0013A8                     	if	0	;tblptru may be non-zero
  1606   0013A8                     	endif
  1607   0013A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1608   0013A8  0E00               	movlw	low (__smallconst shr (0+16))
  1609   0013AA  6EF8               	movwf	tblptru,c
  1610   0013AC                     	endif
  1611   0013AC  0008               	tblrd		*
  1612   0013AE  50F5               	movf	tablat,w,c
  1613   0013B0  0A64               	xorlw	100
  1614   0013B2  B4D8               	btfsc	status,2,c
  1615   0013B4  EFDE  F009         	goto	u2981
  1616   0013B8  EFE0  F009         	goto	u2980
  1617   0013BC                     u2981:
  1618   0013BC  EFF0  F009         	goto	l3999
  1619   0013C0                     u2980:
  1620   0013C0                     
  1621                           ; BSR set to: 0
  1622   0013C0  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1623   0013C4                     	if	1	;There is more than 1 active tblptr byte
  1624   0013C4  0E0E               	movlw	high __smallconst
  1625   0013C6  6EF7               	movwf	tblptrh,c
  1626   0013C8                     	endif
  1627   0013C8                     	if	0	;tblptru may be non-zero
  1628   0013C8                     	endif
  1629   0013C8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1630   0013C8  0E00               	movlw	low (__smallconst shr (0+16))
  1631   0013CA  6EF8               	movwf	tblptru,c
  1632   0013CC                     	endif
  1633   0013CC  0008               	tblrd		*
  1634   0013CE  50F5               	movf	tablat,w,c
  1635   0013D0  0A69               	xorlw	105
  1636   0013D2  A4D8               	btfss	status,2,c
  1637   0013D4  EFEE  F009         	goto	u2991
  1638   0013D8  EFF0  F009         	goto	u2990
  1639   0013DC                     u2991:
  1640   0013DC  EF7E  F00A         	goto	l4029
  1641   0013E0                     u2990:
  1642   0013E0                     l3999:
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1646   0013E0  5010               	movf	vfpfcnvrt@ap^0,w,c
  1647   0013E2  6ED9               	movwf	fsr2l,c
  1648   0013E4  6ADA               	clrf	fsr2h,c
  1649   0013E6  0E02               	movlw	2
  1650   0013E8  26DF               	addwf	indf2,f,c
  1651   0013EA  5CDF               	subwf	indf2,w,c
  1652   0013EC  6ED9               	movwf	fsr2l,c
  1653   0013EE  6ADA               	clrf	fsr2h,c
  1654   0013F0  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  1655   0013F4  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  1656   0013F8                     
  1657                           ; BSR set to: 0
  1658                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1659   0013F8  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1660   0013FA  6ED9               	movwf	fsr2l,c
  1661   0013FC  6ADA               	clrf	fsr2h,c
  1662   0013FE  2816               	incf	vfpfcnvrt@cp^0,w,c
  1663   001400  6EDF               	movwf	indf2,c
  1664   001402                     
  1665                           ; BSR set to: 0
  1666                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1667   001402  0E20               	movlw	32
  1668   001404  6E1B               	movwf	vfpfcnvrt@c^0,c
  1669                           
  1670                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1671   001406  BE18               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1672   001408  EF08  F00A         	goto	u3001
  1673   00140C  EF0B  F00A         	goto	u3000
  1674   001410                     u3001:
  1675   001410  0E01               	movlw	1
  1676   001412  EF0C  F00A         	goto	u3010
  1677   001416                     u3000:
  1678   001416  0E00               	movlw	0
  1679   001418                     u3010:
  1680   001418  6E13               	movwf	vfpfcnvrt@done^0,c
  1681   00141A                     l4005:
  1682                           
  1683                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1684   00141A  061B               	decf	vfpfcnvrt@c^0,f,c
  1685   00141C  501B               	movf	vfpfcnvrt@c^0,w,c
  1686   00141E  0F60               	addlw	low _dbuf
  1687   001420  6ED9               	movwf	fsr2l,c
  1688   001422  6ADA               	clrf	fsr2h,c
  1689   001424  C017  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1690   001428  C018  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1691   00142C  0E00               	movlw	0
  1692   00142E  6E04               	movwf	(___awmod@divisor+1)^0,c
  1693   001430  0E0A               	movlw	10
  1694   001432  6E03               	movwf	___awmod@divisor^0,c
  1695   001434  ECE7  F00C         	call	___awmod	;wreg free
  1696   001438  C001  F007         	movff	?___awmod,abs@a
  1697   00143C  C002  F008         	movff	?___awmod+1,abs@a+1
  1698   001440  EC97  F010         	call	_abs	;wreg free
  1699   001444  5007               	movf	?_abs^0,w,c
  1700   001446  0F30               	addlw	48
  1701   001448  6EDF               	movwf	indf2,c
  1702   00144A                     
  1703                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1704   00144A  C017  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1705   00144E  C018  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1706   001452  0E00               	movlw	0
  1707   001454  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1708   001456  0E0A               	movlw	10
  1709   001458  6E03               	movwf	___awdiv@divisor^0,c
  1710   00145A  EC28  F00C         	call	___awdiv	;wreg free
  1711   00145E  C001  F017         	movff	?___awdiv,vfpfcnvrt@convarg
  1712   001462  C002  F018         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1713   001466                     
  1714                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  1715   001466  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  1716   001468  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1717   00146A                     
  1718                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1719   00146A  5017               	movf	vfpfcnvrt@convarg^0,w,c
  1720   00146C  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1721   00146E  B4D8               	btfsc	status,2,c
  1722   001470  EF3C  F00A         	goto	u3021
  1723   001474  EF3E  F00A         	goto	u3020
  1724   001478                     u3021:
  1725   001478  EF46  F00A         	goto	l4015
  1726   00147C                     u3020:
  1727   00147C  501B               	movf	vfpfcnvrt@c^0,w,c
  1728   00147E  A4D8               	btfss	status,2,c
  1729   001480  EF44  F00A         	goto	u3031
  1730   001484  EF46  F00A         	goto	u3030
  1731   001488                     u3031:
  1732   001488  EF0D  F00A         	goto	l4005
  1733   00148C                     u3030:
  1734   00148C                     l4015:
  1735                           
  1736                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1737   00148C  501B               	movf	vfpfcnvrt@c^0,w,c
  1738   00148E  B4D8               	btfsc	status,2,c
  1739   001490  EF4C  F00A         	goto	u3041
  1740   001494  EF4E  F00A         	goto	u3040
  1741   001498                     u3041:
  1742   001498  EF6F  F00A         	goto	l4027
  1743   00149C                     u3040:
  1744   00149C  5013               	movf	vfpfcnvrt@done^0,w,c
  1745   00149E  B4D8               	btfsc	status,2,c
  1746   0014A0  EF54  F00A         	goto	u3051
  1747   0014A4  EF56  F00A         	goto	u3050
  1748   0014A8                     u3051:
  1749   0014A8  EF6F  F00A         	goto	l4027
  1750   0014AC                     u3050:
  1751   0014AC                     
  1752                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1753   0014AC  061B               	decf	vfpfcnvrt@c^0,f,c
  1754   0014AE  501B               	movf	vfpfcnvrt@c^0,w,c
  1755   0014B0  0F60               	addlw	low _dbuf
  1756   0014B2  6ED9               	movwf	fsr2l,c
  1757   0014B4  6ADA               	clrf	fsr2h,c
  1758   0014B6  0E2D               	movlw	45
  1759   0014B8  6EDF               	movwf	indf2,c
  1760   0014BA                     
  1761                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  1762   0014BA  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  1763   0014BC  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1764   0014BE  EF6F  F00A         	goto	l4027
  1765   0014C2                     l4023:
  1766                           
  1767                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1768   0014C2  501B               	movf	vfpfcnvrt@c^0,w,c
  1769   0014C4  0F60               	addlw	low _dbuf
  1770   0014C6  6ED9               	movwf	fsr2l,c
  1771   0014C8  6ADA               	clrf	fsr2h,c
  1772   0014CA  50DF               	movf	indf2,w,c
  1773   0014CC  6E11               	movwf	??_vfpfcnvrt^0,c
  1774   0014CE  5011               	movf	??_vfpfcnvrt^0,w,c
  1775   0014D0  6E01               	movwf	fputc@c^0,c
  1776   0014D2  6A02               	clrf	(fputc@c+1)^0,c
  1777   0014D4  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1778   0014D8  EC8A  F00C         	call	_fputc	;wreg free
  1779   0014DC  2A1B               	incf	vfpfcnvrt@c^0,f,c
  1780   0014DE                     l4027:
  1781                           
  1782                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1783   0014DE  0E20               	movlw	32
  1784   0014E0  181B               	xorwf	vfpfcnvrt@c^0,w,c
  1785   0014E2  A4D8               	btfss	status,2,c
  1786   0014E4  EF76  F00A         	goto	u3061
  1787   0014E8  EF78  F00A         	goto	u3060
  1788   0014EC                     u3061:
  1789   0014EC  EF61  F00A         	goto	l4023
  1790   0014F0                     u3060:
  1791   0014F0                     l1415:
  1792                           
  1793                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  1794   0014F0  C014  F00E         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  1795   0014F4  C015  F00F         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  1796   0014F8  EF2C  F00B         	goto	l1416
  1797   0014FC                     l4029:
  1798                           
  1799                           ; BSR set to: 0
  1800   0014FC  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1801   001500                     	if	1	;There is more than 1 active tblptr byte
  1802   001500  0E0E               	movlw	high __smallconst
  1803   001502  6EF7               	movwf	tblptrh,c
  1804   001504                     	endif
  1805   001504                     	if	0	;tblptru may be non-zero
  1806   001504                     	endif
  1807   001504                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1808   001504  0E00               	movlw	low (__smallconst shr (0+16))
  1809   001506  6EF8               	movwf	tblptru,c
  1810   001508                     	endif
  1811   001508  0008               	tblrd		*
  1812   00150A  50F5               	movf	tablat,w,c
  1813   00150C  0A75               	xorlw	117
  1814   00150E  A4D8               	btfss	status,2,c
  1815   001510  EF8C  F00A         	goto	u3071
  1816   001514  EF8E  F00A         	goto	u3070
  1817   001518                     u3071:
  1818   001518  EF09  F00B         	goto	l4057
  1819   00151C                     u3070:
  1820   00151C                     
  1821                           ; BSR set to: 0
  1822                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1823   00151C  5010               	movf	vfpfcnvrt@ap^0,w,c
  1824   00151E  6ED9               	movwf	fsr2l,c
  1825   001520  6ADA               	clrf	fsr2h,c
  1826   001522  0E02               	movlw	2
  1827   001524  26DF               	addwf	indf2,f,c
  1828   001526  5CDF               	subwf	indf2,w,c
  1829   001528  6ED9               	movwf	fsr2l,c
  1830   00152A  6ADA               	clrf	fsr2h,c
  1831   00152C  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  1832   001530  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  1833   001534                     
  1834                           ; BSR set to: 0
  1835                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1836   001534  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1837   001536  6ED9               	movwf	fsr2l,c
  1838   001538  6ADA               	clrf	fsr2h,c
  1839   00153A  2816               	incf	vfpfcnvrt@cp^0,w,c
  1840   00153C  6EDF               	movwf	indf2,c
  1841                           
  1842                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1843   00153E  EFF1  F00A         	goto	l4055
  1844   001542                     l4035:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  1848   001542  0E20               	movlw	32
  1849   001544  6E1B               	movwf	vfpfcnvrt@c^0,c
  1850   001546                     l4037:
  1851                           
  1852                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  1853   001546  061B               	decf	vfpfcnvrt@c^0,f,c
  1854   001548  501B               	movf	vfpfcnvrt@c^0,w,c
  1855   00154A  0F60               	addlw	low _dbuf
  1856   00154C  6ED9               	movwf	fsr2l,c
  1857   00154E  6ADA               	clrf	fsr2h,c
  1858   001550  C017  F001         	movff	vfpfcnvrt@convarg,___lwmod@dividend
  1859   001554  C018  F002         	movff	vfpfcnvrt@convarg+1,___lwmod@dividend+1
  1860   001558  0E00               	movlw	0
  1861   00155A  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1862   00155C  0E0A               	movlw	10
  1863   00155E  6E03               	movwf	___lwmod@divisor^0,c
  1864   001560  EC7D  F00E         	call	___lwmod	;wreg free
  1865   001564  5001               	movf	?___lwmod^0,w,c
  1866   001566  0F30               	addlw	48
  1867   001568  6EDF               	movwf	indf2,c
  1868   00156A                     
  1869                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  1870   00156A  C017  F007         	movff	vfpfcnvrt@convarg,___lwdiv@dividend
  1871   00156E  C018  F008         	movff	vfpfcnvrt@convarg+1,___lwdiv@dividend+1
  1872   001572  0E00               	movlw	0
  1873   001574  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1874   001576  0E0A               	movlw	10
  1875   001578  6E09               	movwf	___lwdiv@divisor^0,c
  1876   00157A  ECD9  F00D         	call	___lwdiv	;wreg free
  1877   00157E  C007  F017         	movff	?___lwdiv,vfpfcnvrt@convarg
  1878   001582  C008  F018         	movff	?___lwdiv+1,vfpfcnvrt@convarg+1
  1879   001586                     
  1880                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1530:       cnt++
      +                          ;
  1881   001586  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  1882   001588  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1883   00158A                     
  1884                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  1885   00158A  5017               	movf	vfpfcnvrt@convarg^0,w,c
  1886   00158C  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1887   00158E  B4D8               	btfsc	status,2,c
  1888   001590  EFCC  F00A         	goto	u3081
  1889   001594  EFCE  F00A         	goto	u3080
  1890   001598                     u3081:
  1891   001598  EFE6  F00A         	goto	l4051
  1892   00159C                     u3080:
  1893   00159C  501B               	movf	vfpfcnvrt@c^0,w,c
  1894   00159E  A4D8               	btfss	status,2,c
  1895   0015A0  EFD4  F00A         	goto	u3091
  1896   0015A4  EFD6  F00A         	goto	u3090
  1897   0015A8                     u3091:
  1898   0015A8  EFA3  F00A         	goto	l4037
  1899   0015AC                     u3090:
  1900   0015AC  EFE6  F00A         	goto	l4051
  1901   0015B0                     l4047:
  1902                           
  1903                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  1904   0015B0  501B               	movf	vfpfcnvrt@c^0,w,c
  1905   0015B2  0F60               	addlw	low _dbuf
  1906   0015B4  6ED9               	movwf	fsr2l,c
  1907   0015B6  6ADA               	clrf	fsr2h,c
  1908   0015B8  50DF               	movf	indf2,w,c
  1909   0015BA  6E11               	movwf	??_vfpfcnvrt^0,c
  1910   0015BC  5011               	movf	??_vfpfcnvrt^0,w,c
  1911   0015BE  6E01               	movwf	fputc@c^0,c
  1912   0015C0  6A02               	clrf	(fputc@c+1)^0,c
  1913   0015C2  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1914   0015C6  EC8A  F00C         	call	_fputc	;wreg free
  1915   0015CA  2A1B               	incf	vfpfcnvrt@c^0,f,c
  1916   0015CC                     l4051:
  1917                           
  1918                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  1919   0015CC  0E20               	movlw	32
  1920   0015CE  181B               	xorwf	vfpfcnvrt@c^0,w,c
  1921   0015D0  A4D8               	btfss	status,2,c
  1922   0015D2  EFED  F00A         	goto	u3101
  1923   0015D6  EFEF  F00A         	goto	u3100
  1924   0015DA                     u3101:
  1925   0015DA  EFD8  F00A         	goto	l4047
  1926   0015DE                     u3100:
  1927   0015DE  EF78  F00A         	goto	l1415
  1928   0015E2                     l4055:
  1929                           
  1930                           ; BSR set to: 0
  1931   0015E2  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1932   0015E6                     	if	1	;There is more than 1 active tblptr byte
  1933   0015E6  0E0E               	movlw	high __smallconst
  1934   0015E8  6EF7               	movwf	tblptrh,c
  1935   0015EA                     	endif
  1936   0015EA                     	if	0	;tblptru may be non-zero
  1937   0015EA                     	endif
  1938   0015EA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1939   0015EA  0E00               	movlw	low (__smallconst shr (0+16))
  1940   0015EC  6EF8               	movwf	tblptru,c
  1941   0015EE                     	endif
  1942   0015EE  0008               	tblrd		*
  1943   0015F0  50F5               	movf	tablat,w,c
  1944   0015F2  6E11               	movwf	??_vfpfcnvrt^0,c
  1945   0015F4  6A12               	clrf	(??_vfpfcnvrt+1)^0,c
  1946                           
  1947                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1948                           ; Switch size 1, requested type "simple"
  1949                           ; Number of cases is 1, Range of values is 0 to 0
  1950                           ; switch strategies available:
  1951                           ; Name         Instructions Cycles
  1952                           ; simple_byte            4     3 (average)
  1953                           ;	Chosen strategy is simple_byte
  1954   0015F6  5012               	movf	(??_vfpfcnvrt+1)^0,w,c
  1955   0015F8  0A00               	xorlw	0	; case 0
  1956   0015FA  B4D8               	btfsc	status,2,c
  1957   0015FC  EF02  F00B         	goto	l4543
  1958   001600  EF09  F00B         	goto	l4057
  1959   001604                     l4543:
  1960                           
  1961                           ; BSR set to: 0
  1962                           ; Switch size 1, requested type "simple"
  1963                           ; Number of cases is 1, Range of values is 117 to 117
  1964                           ; switch strategies available:
  1965                           ; Name         Instructions Cycles
  1966                           ; simple_byte            4     3 (average)
  1967                           ;	Chosen strategy is simple_byte
  1968   001604  5011               	movf	??_vfpfcnvrt^0,w,c
  1969   001606  0A75               	xorlw	117	; case 117
  1970   001608  B4D8               	btfsc	status,2,c
  1971   00160A  EFA1  F00A         	goto	l4035
  1972   00160E  EF09  F00B         	goto	l4057
  1973   001612                     l4057:
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1977   001612  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1978   001614  6ED9               	movwf	fsr2l,c
  1979   001616  6ADA               	clrf	fsr2h,c
  1980   001618  2ADF               	incf	indf2,f,c
  1981   00161A                     
  1982                           ; BSR set to: 0
  1983                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  1984   00161A  0E00               	movlw	0
  1985   00161C  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  1986   00161E  0E00               	movlw	0
  1987   001620  6E0E               	movwf	?_vfpfcnvrt^0,c
  1988   001622  EF2C  F00B         	goto	l1416
  1989   001626                     l4063:
  1990                           
  1991                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1992   001626  500F               	movf	vfpfcnvrt@fmt^0,w,c
  1993   001628  6ED9               	movwf	fsr2l,c
  1994   00162A  6ADA               	clrf	fsr2h,c
  1995   00162C  CFDF FFF6          	movff	indf2,tblptrl
  1996   001630                     	if	1	;There is more than 1 active tblptr byte
  1997   001630  0E0E               	movlw	high __smallconst
  1998   001632  6EF7               	movwf	tblptrh,c
  1999   001634                     	endif
  2000   001634                     	if	0	;tblptru may be non-zero
  2001   001634                     	endif
  2002   001634                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2003   001634  0E00               	movlw	low (__smallconst shr (0+16))
  2004   001636  6EF8               	movwf	tblptru,c
  2005   001638                     	endif
  2006   001638  0008               	tblrd		*
  2007   00163A  50F5               	movf	tablat,w,c
  2008   00163C  6E01               	movwf	fputc@c^0,c
  2009   00163E  6A02               	clrf	(fputc@c+1)^0,c
  2010   001640  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2011   001644  EC8A  F00C         	call	_fputc	;wreg free
  2012   001648                     
  2013                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  2014   001648  500F               	movf	vfpfcnvrt@fmt^0,w,c
  2015   00164A  6ED9               	movwf	fsr2l,c
  2016   00164C  6ADA               	clrf	fsr2h,c
  2017   00164E  2ADF               	incf	indf2,f,c
  2018   001650                     
  2019                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  2020   001650  0E00               	movlw	0
  2021   001652  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  2022   001654  0E01               	movlw	1
  2023   001656  6E0E               	movwf	?_vfpfcnvrt^0,c
  2024   001658                     l1416:
  2025   001658  0012               	return		;funcret
  2026   00165A                     __end_of_vfpfcnvrt:
  2027                           	callstack 0
  2028                           
  2029 ;; *************** function _fputc *****************
  2030 ;; Defined at:
  2031 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;  c               2    0[COMRAM] int 
  2034 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2035 ;;		 -> sprintf@f(12), 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;		None
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  2    0[COMRAM] int 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2047 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2049 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2050 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2051 ;;Total ram usage:        8 bytes
  2052 ;; Hardware stack levels used: 1
  2053 ;; Hardware stack levels required when called: 2
  2054 ;; This function calls:
  2055 ;;		_putch
  2056 ;; This function is called by:
  2057 ;;		_vfpfcnvrt
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text6
  2062   001914                     __ptext6:
  2063                           	callstack 0
  2064   001914                     _fputc:
  2065                           	callstack 24
  2066   001914  5003               	movf	fputc@fp^0,w,c
  2067   001916  B4D8               	btfsc	status,2,c
  2068   001918  EF90  F00C         	goto	u2761
  2069   00191C  EF92  F00C         	goto	u2760
  2070   001920                     u2761:
  2071   001920  EF9A  F00C         	goto	l3883
  2072   001924                     u2760:
  2073   001924  5003               	movf	fputc@fp^0,w,c
  2074   001926  A4D8               	btfss	status,2,c
  2075   001928  EF98  F00C         	goto	u2771
  2076   00192C  EF9A  F00C         	goto	u2770
  2077   001930                     u2771:
  2078   001930  EF9F  F00C         	goto	l3885
  2079   001934                     u2770:
  2080   001934                     l3883:
  2081   001934  5001               	movf	fputc@c^0,w,c
  2082   001936  ECB9  F011         	call	_putch
  2083   00193A  EFE6  F00C         	goto	l1454
  2084   00193E                     l3885:
  2085   00193E  5003               	movf	fputc@fp^0,w,c
  2086   001940  6ED9               	movwf	fsr2l,c
  2087   001942  6ADA               	clrf	fsr2h,c
  2088   001944  0E0A               	movlw	10
  2089   001946  26D9               	addwf	fsr2l,f,c
  2090   001948  50DE               	movf	postinc2,w,c
  2091   00194A  10DE               	iorwf	postinc2,w,c
  2092   00194C  B4D8               	btfsc	status,2,c
  2093   00194E  EFAB  F00C         	goto	u2781
  2094   001952  EFAD  F00C         	goto	u2780
  2095   001956                     u2781:
  2096   001956  EFC6  F00C         	goto	l3889
  2097   00195A                     u2780:
  2098   00195A  5003               	movf	fputc@fp^0,w,c
  2099   00195C  6ED9               	movwf	fsr2l,c
  2100   00195E  6ADA               	clrf	fsr2h,c
  2101   001960  0E0A               	movlw	10
  2102   001962  26D9               	addwf	fsr2l,f,c
  2103   001964  5003               	movf	fputc@fp^0,w,c
  2104   001966  6EE1               	movwf	fsr1l,c
  2105   001968  6AE2               	clrf	fsr1h,c
  2106   00196A  0E03               	movlw	3
  2107   00196C  26E1               	addwf	fsr1l,f,c
  2108   00196E  50DE               	movf	postinc2,w,c
  2109   001970  5CE6               	subwf	postinc1,w,c
  2110   001972  50E6               	movf	postinc1,w,c
  2111   001974  0A80               	xorlw	128
  2112   001976  6E08               	movwf	(??_fputc+4)^0,c
  2113   001978  50DE               	movf	postinc2,w,c
  2114   00197A  0A80               	xorlw	128
  2115   00197C  5808               	subwfb	(??_fputc+4)^0,w,c
  2116   00197E  B0D8               	btfsc	status,0,c
  2117   001980  EFC4  F00C         	goto	u2791
  2118   001984  EFC6  F00C         	goto	u2790
  2119   001988                     u2791:
  2120   001988  EFE6  F00C         	goto	l1454
  2121   00198C                     u2790:
  2122   00198C                     l3889:
  2123   00198C  5003               	movf	fputc@fp^0,w,c
  2124   00198E  6ED9               	movwf	fsr2l,c
  2125   001990  6ADA               	clrf	fsr2h,c
  2126   001992  0E03               	movlw	3
  2127   001994  26D9               	addwf	fsr2l,f,c
  2128   001996  CFDE F004          	movff	postinc2,??_fputc
  2129   00199A  CFDD F005          	movff	postdec2,??_fputc+1
  2130   00199E  5003               	movf	fputc@fp^0,w,c
  2131   0019A0  6ED9               	movwf	fsr2l,c
  2132   0019A2  6ADA               	clrf	fsr2h,c
  2133   0019A4  CFDE F006          	movff	postinc2,??_fputc+2
  2134   0019A8  CFDD F007          	movff	postdec2,??_fputc+3
  2135   0019AC  5004               	movf	??_fputc^0,w,c
  2136   0019AE  2406               	addwf	(??_fputc+2)^0,w,c
  2137   0019B0  6ED9               	movwf	fsr2l,c
  2138   0019B2  5005               	movf	(??_fputc+1)^0,w,c
  2139   0019B4  2007               	addwfc	(??_fputc+3)^0,w,c
  2140   0019B6  6EDA               	movwf	fsr2h,c
  2141   0019B8  C001  FFDF         	movff	fputc@c,indf2
  2142   0019BC  5003               	movf	fputc@fp^0,w,c
  2143   0019BE  6ED9               	movwf	fsr2l,c
  2144   0019C0  6ADA               	clrf	fsr2h,c
  2145   0019C2  0E03               	movlw	3
  2146   0019C4  26D9               	addwf	fsr2l,f,c
  2147   0019C6  2ADE               	incf	postinc2,f,c
  2148   0019C8  0E00               	movlw	0
  2149   0019CA  22DD               	addwfc	postdec2,f,c
  2150   0019CC                     l1454:
  2151   0019CC  0012               	return		;funcret
  2152   0019CE                     __end_of_fputc:
  2153                           	callstack 0
  2154                           
  2155 ;; *************** function _putch *****************
  2156 ;; Defined at:
  2157 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  c               1    wreg     unsigned char 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  c               1    0[COMRAM] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2175 ;;Total ram usage:        0 bytes
  2176 ;; Hardware stack levels used: 1
  2177 ;; Hardware stack levels required when called: 1
  2178 ;; This function calls:
  2179 ;;		Nothing
  2180 ;; This function is called by:
  2181 ;;		_fputc
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185                           	psect	text7
  2186   002372                     __ptext7:
  2187                           	callstack 0
  2188   002372                     _putch:
  2189                           	callstack 24
  2190   002372  0012               	return		;funcret
  2191   002374                     __end_of_putch:
  2192                           	callstack 0
  2193                           
  2194 ;; *************** function _abs *****************
  2195 ;; Defined at:
  2196 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  a               2    6[COMRAM] int 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  2    6[COMRAM] int 
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2210 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2212 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2213 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2214 ;;Total ram usage:        4 bytes
  2215 ;; Hardware stack levels used: 1
  2216 ;; Hardware stack levels required when called: 1
  2217 ;; This function calls:
  2218 ;;		Nothing
  2219 ;; This function is called by:
  2220 ;;		_vfpfcnvrt
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text8
  2225   00212E                     __ptext8:
  2226                           	callstack 0
  2227   00212E                     _abs:
  2228                           	callstack 25
  2229   00212E  BE08               	btfsc	(abs@a+1)^0,7,c
  2230   002130  EF9C  F010         	goto	u2801
  2231   002134  EF9E  F010         	goto	u2800
  2232   002138                     u2801:
  2233   002138  EFA4  F010         	goto	l1439
  2234   00213C                     u2800:
  2235   00213C  C007  F007         	movff	abs@a,?_abs
  2236   002140  C008  F008         	movff	abs@a+1,?_abs+1
  2237   002144  EFB0  F010         	goto	l1442
  2238   002148                     l1439:
  2239   002148  C007  F009         	movff	abs@a,??_abs
  2240   00214C  C008  F00A         	movff	abs@a+1,??_abs+1
  2241   002150  1E09               	comf	??_abs^0,f,c
  2242   002152  1E0A               	comf	(??_abs+1)^0,f,c
  2243   002154  4A09               	infsnz	??_abs^0,f,c
  2244   002156  2A0A               	incf	(??_abs+1)^0,f,c
  2245   002158  C009  F007         	movff	??_abs,?_abs
  2246   00215C  C00A  F008         	movff	??_abs+1,?_abs+1
  2247   002160                     l1442:
  2248   002160  0012               	return		;funcret
  2249   002162                     __end_of_abs:
  2250                           	callstack 0
  2251                           
  2252 ;; *************** function ___lwmod *****************
  2253 ;; Defined at:
  2254 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;  dividend        2    0[COMRAM] unsigned int 
  2257 ;;  divisor         2    2[COMRAM] unsigned int 
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  counter         1    4[COMRAM] unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  2    0[COMRAM] unsigned int 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2272 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2273 ;;Total ram usage:        5 bytes
  2274 ;; Hardware stack levels used: 1
  2275 ;; Hardware stack levels required when called: 1
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_vfpfcnvrt
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text9
  2284   001CFA                     __ptext9:
  2285                           	callstack 0
  2286   001CFA                     ___lwmod:
  2287                           	callstack 25
  2288   001CFA  5003               	movf	___lwmod@divisor^0,w,c
  2289   001CFC  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  2290   001CFE  B4D8               	btfsc	status,2,c
  2291   001D00  EF84  F00E         	goto	u2731
  2292   001D04  EF86  F00E         	goto	u2730
  2293   001D08                     u2731:
  2294   001D08  EFAA  F00E         	goto	l1197
  2295   001D0C                     u2730:
  2296   001D0C  0E01               	movlw	1
  2297   001D0E  6E05               	movwf	___lwmod@counter^0,c
  2298   001D10  EF8E  F00E         	goto	l3869
  2299   001D14                     l3867:
  2300   001D14  90D8               	bcf	status,0,c
  2301   001D16  3603               	rlcf	___lwmod@divisor^0,f,c
  2302   001D18  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  2303   001D1A  2A05               	incf	___lwmod@counter^0,f,c
  2304   001D1C                     l3869:
  2305   001D1C  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  2306   001D1E  EF93  F00E         	goto	u2741
  2307   001D22  EF95  F00E         	goto	u2740
  2308   001D26                     u2741:
  2309   001D26  EF8A  F00E         	goto	l3867
  2310   001D2A                     u2740:
  2311   001D2A                     l3871:
  2312   001D2A  5003               	movf	___lwmod@divisor^0,w,c
  2313   001D2C  5C01               	subwf	___lwmod@dividend^0,w,c
  2314   001D2E  5004               	movf	(___lwmod@divisor+1)^0,w,c
  2315   001D30  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  2316   001D32  A0D8               	btfss	status,0,c
  2317   001D34  EF9E  F00E         	goto	u2751
  2318   001D38  EFA0  F00E         	goto	u2750
  2319   001D3C                     u2751:
  2320   001D3C  EFA4  F00E         	goto	l3875
  2321   001D40                     u2750:
  2322   001D40  5003               	movf	___lwmod@divisor^0,w,c
  2323   001D42  5E01               	subwf	___lwmod@dividend^0,f,c
  2324   001D44  5004               	movf	(___lwmod@divisor+1)^0,w,c
  2325   001D46  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  2326   001D48                     l3875:
  2327   001D48  90D8               	bcf	status,0,c
  2328   001D4A  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  2329   001D4C  3203               	rrcf	___lwmod@divisor^0,f,c
  2330   001D4E  2E05               	decfsz	___lwmod@counter^0,f,c
  2331   001D50  EF95  F00E         	goto	l3871
  2332   001D54                     l1197:
  2333   001D54  C001  F001         	movff	___lwmod@dividend,?___lwmod
  2334   001D58  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  2335   001D5C  0012               	return		;funcret
  2336   001D5E                     __end_of___lwmod:
  2337                           	callstack 0
  2338                           
  2339 ;; *************** function ___awmod *****************
  2340 ;; Defined at:
  2341 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  dividend        2    0[COMRAM] int 
  2344 ;;  divisor         2    2[COMRAM] int 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;  sign            1    5[COMRAM] unsigned char 
  2347 ;;  counter         1    4[COMRAM] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  2    0[COMRAM] int 
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2357 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2358 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2360 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2361 ;;Total ram usage:        6 bytes
  2362 ;; Hardware stack levels used: 1
  2363 ;; Hardware stack levels required when called: 1
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_vfpfcnvrt
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           	psect	text10
  2372   0019CE                     __ptext10:
  2373                           	callstack 0
  2374   0019CE                     ___awmod:
  2375                           	callstack 25
  2376   0019CE  0E00               	movlw	0
  2377   0019D0  6E06               	movwf	___awmod@sign^0,c
  2378   0019D2  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2379   0019D4  EFF0  F00C         	goto	u2640
  2380   0019D8  EFEE  F00C         	goto	u2641
  2381   0019DC                     u2641:
  2382   0019DC  EFF6  F00C         	goto	l3813
  2383   0019E0                     u2640:
  2384   0019E0  6C01               	negf	___awmod@dividend^0,c
  2385   0019E2  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2386   0019E4  B0D8               	btfsc	status,0,c
  2387   0019E6  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2388   0019E8  0E01               	movlw	1
  2389   0019EA  6E06               	movwf	___awmod@sign^0,c
  2390   0019EC                     l3813:
  2391   0019EC  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2392   0019EE  EFFD  F00C         	goto	u2650
  2393   0019F2  EFFB  F00C         	goto	u2651
  2394   0019F6                     u2651:
  2395   0019F6  EF01  F00D         	goto	l3817
  2396   0019FA                     u2650:
  2397   0019FA  6C03               	negf	___awmod@divisor^0,c
  2398   0019FC  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2399   0019FE  B0D8               	btfsc	status,0,c
  2400   001A00  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2401   001A02                     l3817:
  2402   001A02  5003               	movf	___awmod@divisor^0,w,c
  2403   001A04  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2404   001A06  B4D8               	btfsc	status,2,c
  2405   001A08  EF08  F00D         	goto	u2661
  2406   001A0C  EF0A  F00D         	goto	u2660
  2407   001A10                     u2661:
  2408   001A10  EF2E  F00D         	goto	l3833
  2409   001A14                     u2660:
  2410   001A14  0E01               	movlw	1
  2411   001A16  6E05               	movwf	___awmod@counter^0,c
  2412   001A18  EF12  F00D         	goto	l3823
  2413   001A1C                     l3821:
  2414   001A1C  90D8               	bcf	status,0,c
  2415   001A1E  3603               	rlcf	___awmod@divisor^0,f,c
  2416   001A20  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2417   001A22  2A05               	incf	___awmod@counter^0,f,c
  2418   001A24                     l3823:
  2419   001A24  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2420   001A26  EF17  F00D         	goto	u2671
  2421   001A2A  EF19  F00D         	goto	u2670
  2422   001A2E                     u2671:
  2423   001A2E  EF0E  F00D         	goto	l3821
  2424   001A32                     u2670:
  2425   001A32                     l3825:
  2426   001A32  5003               	movf	___awmod@divisor^0,w,c
  2427   001A34  5C01               	subwf	___awmod@dividend^0,w,c
  2428   001A36  5004               	movf	(___awmod@divisor+1)^0,w,c
  2429   001A38  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2430   001A3A  A0D8               	btfss	status,0,c
  2431   001A3C  EF22  F00D         	goto	u2681
  2432   001A40  EF24  F00D         	goto	u2680
  2433   001A44                     u2681:
  2434   001A44  EF28  F00D         	goto	l3829
  2435   001A48                     u2680:
  2436   001A48  5003               	movf	___awmod@divisor^0,w,c
  2437   001A4A  5E01               	subwf	___awmod@dividend^0,f,c
  2438   001A4C  5004               	movf	(___awmod@divisor+1)^0,w,c
  2439   001A4E  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2440   001A50                     l3829:
  2441   001A50  90D8               	bcf	status,0,c
  2442   001A52  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2443   001A54  3203               	rrcf	___awmod@divisor^0,f,c
  2444   001A56  2E05               	decfsz	___awmod@counter^0,f,c
  2445   001A58  EF19  F00D         	goto	l3825
  2446   001A5C                     l3833:
  2447   001A5C  5006               	movf	___awmod@sign^0,w,c
  2448   001A5E  B4D8               	btfsc	status,2,c
  2449   001A60  EF34  F00D         	goto	u2691
  2450   001A64  EF36  F00D         	goto	u2690
  2451   001A68                     u2691:
  2452   001A68  EF3A  F00D         	goto	l3837
  2453   001A6C                     u2690:
  2454   001A6C  6C01               	negf	___awmod@dividend^0,c
  2455   001A6E  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2456   001A70  B0D8               	btfsc	status,0,c
  2457   001A72  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2458   001A74                     l3837:
  2459   001A74  C001  F001         	movff	___awmod@dividend,?___awmod
  2460   001A78  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2461   001A7C  0012               	return		;funcret
  2462   001A7E                     __end_of___awmod:
  2463                           	callstack 0
  2464                           
  2465 ;; *************** function ___awdiv *****************
  2466 ;; Defined at:
  2467 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;  dividend        2    0[COMRAM] int 
  2470 ;;  divisor         2    2[COMRAM] int 
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;  quotient        2    6[COMRAM] int 
  2473 ;;  sign            1    5[COMRAM] unsigned char 
  2474 ;;  counter         1    4[COMRAM] unsigned char 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  2    0[COMRAM] int 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, status,0
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2484 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2485 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2487 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2488 ;;Total ram usage:        8 bytes
  2489 ;; Hardware stack levels used: 1
  2490 ;; Hardware stack levels required when called: 1
  2491 ;; This function calls:
  2492 ;;		Nothing
  2493 ;; This function is called by:
  2494 ;;		_vfpfcnvrt
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           	psect	text11
  2499   001850                     __ptext11:
  2500                           	callstack 0
  2501   001850                     ___awdiv:
  2502                           	callstack 25
  2503   001850  0E00               	movlw	0
  2504   001852  6E06               	movwf	___awdiv@sign^0,c
  2505   001854  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2506   001856  EF31  F00C         	goto	u2580
  2507   00185A  EF2F  F00C         	goto	u2581
  2508   00185E                     u2581:
  2509   00185E  EF37  F00C         	goto	l3769
  2510   001862                     u2580:
  2511   001862  6C03               	negf	___awdiv@divisor^0,c
  2512   001864  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2513   001866  B0D8               	btfsc	status,0,c
  2514   001868  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2515   00186A  0E01               	movlw	1
  2516   00186C  6E06               	movwf	___awdiv@sign^0,c
  2517   00186E                     l3769:
  2518   00186E  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2519   001870  EF3E  F00C         	goto	u2590
  2520   001874  EF3C  F00C         	goto	u2591
  2521   001878                     u2591:
  2522   001878  EF44  F00C         	goto	l3775
  2523   00187C                     u2590:
  2524   00187C  6C01               	negf	___awdiv@dividend^0,c
  2525   00187E  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2526   001880  B0D8               	btfsc	status,0,c
  2527   001882  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2528   001884  0E01               	movlw	1
  2529   001886  1A06               	xorwf	___awdiv@sign^0,f,c
  2530   001888                     l3775:
  2531   001888  0E00               	movlw	0
  2532   00188A  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2533   00188C  0E00               	movlw	0
  2534   00188E  6E07               	movwf	___awdiv@quotient^0,c
  2535   001890  5003               	movf	___awdiv@divisor^0,w,c
  2536   001892  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2537   001894  B4D8               	btfsc	status,2,c
  2538   001896  EF4F  F00C         	goto	u2601
  2539   00189A  EF51  F00C         	goto	u2600
  2540   00189E                     u2601:
  2541   00189E  EF79  F00C         	goto	l3797
  2542   0018A2                     u2600:
  2543   0018A2  0E01               	movlw	1
  2544   0018A4  6E05               	movwf	___awdiv@counter^0,c
  2545   0018A6  EF59  F00C         	goto	l3783
  2546   0018AA                     l3781:
  2547   0018AA  90D8               	bcf	status,0,c
  2548   0018AC  3603               	rlcf	___awdiv@divisor^0,f,c
  2549   0018AE  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2550   0018B0  2A05               	incf	___awdiv@counter^0,f,c
  2551   0018B2                     l3783:
  2552   0018B2  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2553   0018B4  EF5E  F00C         	goto	u2611
  2554   0018B8  EF60  F00C         	goto	u2610
  2555   0018BC                     u2611:
  2556   0018BC  EF55  F00C         	goto	l3781
  2557   0018C0                     u2610:
  2558   0018C0                     l3785:
  2559   0018C0  90D8               	bcf	status,0,c
  2560   0018C2  3607               	rlcf	___awdiv@quotient^0,f,c
  2561   0018C4  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2562   0018C6  5003               	movf	___awdiv@divisor^0,w,c
  2563   0018C8  5C01               	subwf	___awdiv@dividend^0,w,c
  2564   0018CA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2565   0018CC  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2566   0018CE  A0D8               	btfss	status,0,c
  2567   0018D0  EF6C  F00C         	goto	u2621
  2568   0018D4  EF6E  F00C         	goto	u2620
  2569   0018D8                     u2621:
  2570   0018D8  EF73  F00C         	goto	l3793
  2571   0018DC                     u2620:
  2572   0018DC  5003               	movf	___awdiv@divisor^0,w,c
  2573   0018DE  5E01               	subwf	___awdiv@dividend^0,f,c
  2574   0018E0  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2575   0018E2  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2576   0018E4  8007               	bsf	___awdiv@quotient^0,0,c
  2577   0018E6                     l3793:
  2578   0018E6  90D8               	bcf	status,0,c
  2579   0018E8  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2580   0018EA  3203               	rrcf	___awdiv@divisor^0,f,c
  2581   0018EC  2E05               	decfsz	___awdiv@counter^0,f,c
  2582   0018EE  EF60  F00C         	goto	l3785
  2583   0018F2                     l3797:
  2584   0018F2  5006               	movf	___awdiv@sign^0,w,c
  2585   0018F4  B4D8               	btfsc	status,2,c
  2586   0018F6  EF7F  F00C         	goto	u2631
  2587   0018FA  EF81  F00C         	goto	u2630
  2588   0018FE                     u2631:
  2589   0018FE  EF85  F00C         	goto	l3801
  2590   001902                     u2630:
  2591   001902  6C07               	negf	___awdiv@quotient^0,c
  2592   001904  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2593   001906  B0D8               	btfsc	status,0,c
  2594   001908  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2595   00190A                     l3801:
  2596   00190A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2597   00190E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2598   001912  0012               	return		;funcret
  2599   001914                     __end_of___awdiv:
  2600                           	callstack 0
  2601                           
  2602 ;; *************** function _sendStringSerial4 *****************
  2603 ;; Defined at:
  2604 ;;		line 35 in file "serial.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  string          2    1[COMRAM] PTR unsigned char 
  2607 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), STR_4(3), sendArrayCharSerial4@tempStr(161), 
  2608 ;;		 -> sendIntSerial4@string(17), 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;Total ram usage:        2 bytes
  2625 ;; Hardware stack levels used: 1
  2626 ;; Hardware stack levels required when called: 2
  2627 ;; This function calls:
  2628 ;;		_sendCharSerial4
  2629 ;; This function is called by:
  2630 ;;		_sendHSVvalSerial4
  2631 ;;		_sendIntSerial4
  2632 ;;		_sendArrayCharSerial4
  2633 ;;		_sendRGBCvalSerial4
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text12
  2638   001D5E                     __ptext12:
  2639                           	callstack 0
  2640   001D5E                     _sendStringSerial4:
  2641                           	callstack 27
  2642   001D5E                     
  2643                           ;serial.c: 37:     while(*string != 0){
  2644   001D5E  EFC6  F00E         	goto	l2989
  2645   001D62                     l2985:
  2646                           
  2647                           ;serial.c: 38:   sendCharSerial4(*string++);
  2648   001D62  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2649   001D66  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2650   001D6A  0E00               	movlw	low (__smallconst shr (0+16))
  2651   001D6C  6EF8               	movwf	tblptru,c
  2652   001D6E  0E0D               	movlw	(high __ramtop+-1)
  2653   001D70  64F7               	cpfsgt	tblptrh,c
  2654   001D72  D003               	bra	u1797
  2655   001D74  0008               	tblrd		*
  2656   001D76  50F5               	movf	tablat,w,c
  2657   001D78  D005               	bra	u1790
  2658   001D7A                     u1797:
  2659   001D7A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2660   001D7E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2661   001D82  50EF               	movf	indf0,w,c
  2662   001D84                     u1790:
  2663   001D84  EC7F  F011         	call	_sendCharSerial4
  2664   001D88  4A02               	infsnz	sendStringSerial4@string^0,f,c
  2665   001D8A  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  2666   001D8C                     l2989:
  2667                           
  2668                           ;serial.c: 37:     while(*string != 0){
  2669   001D8C  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2670   001D90  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2671   001D94  0E00               	movlw	low (__smallconst shr (0+16))
  2672   001D96  6EF8               	movwf	tblptru,c
  2673   001D98  0E0D               	movlw	(high __ramtop+-1)
  2674   001D9A  64F7               	cpfsgt	tblptrh,c
  2675   001D9C  D003               	bra	u1807
  2676   001D9E  0008               	tblrd		*
  2677   001DA0  50F5               	movf	tablat,w,c
  2678   001DA2  D005               	bra	u1800
  2679   001DA4                     u1807:
  2680   001DA4  CFF6 FFE9          	movff	tblptrl,fsr0l
  2681   001DA8  CFF7 FFEA          	movff	tblptrh,fsr0h
  2682   001DAC  50EF               	movf	indf0,w,c
  2683   001DAE                     u1800:
  2684   001DAE  0900               	iorlw	0
  2685   001DB0  A4D8               	btfss	status,2,c
  2686   001DB2  EFDD  F00E         	goto	u1811
  2687   001DB6  EFDF  F00E         	goto	u1810
  2688   001DBA                     u1811:
  2689   001DBA  EFB1  F00E         	goto	l2985
  2690   001DBE                     u1810:
  2691   001DBE  0012               	return		;funcret
  2692   001DC0                     __end_of_sendStringSerial4:
  2693                           	callstack 0
  2694                           
  2695 ;; *************** function _sendCharSerial4 *****************
  2696 ;; Defined at:
  2697 ;;		line 29 in file "serial.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;  charToSend      1    wreg     unsigned char 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;  charToSend      1    0[COMRAM] unsigned char 
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      void 
  2704 ;; Registers used:
  2705 ;;		wreg
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2714 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2715 ;;Total ram usage:        1 bytes
  2716 ;; Hardware stack levels used: 1
  2717 ;; Hardware stack levels required when called: 1
  2718 ;; This function calls:
  2719 ;;		Nothing
  2720 ;; This function is called by:
  2721 ;;		_sendStringSerial4
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text13
  2726   0022FE                     __ptext13:
  2727                           	callstack 0
  2728   0022FE                     _sendCharSerial4:
  2729                           	callstack 27
  2730                           
  2731                           ;incstack = 0
  2732                           ;sendCharSerial4@charToSend stored from wreg
  2733   0022FE  6E01               	movwf	sendCharSerial4@charToSend^0,c
  2734   002300                     l435:
  2735   002300  010E               	movlb	14	; () banked
  2736   002302  A537               	btfss	55,2,b	;volatile
  2737   002304  EF86  F011         	goto	u1771
  2738   002308  EF88  F011         	goto	u1770
  2739   00230C                     u1771:
  2740   00230C  EF80  F011         	goto	l435
  2741   002310                     u1770:
  2742   002310                     
  2743                           ; BSR set to: 14
  2744                           ;serial.c: 31:     TX4REG = charToSend;
  2745   002310  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  2746   002314                     
  2747                           ; BSR set to: 14
  2748   002314  0012               	return		;funcret
  2749   002316                     __end_of_sendCharSerial4:
  2750                           	callstack 0
  2751                           
  2752 ;; *************** function _initUSART4 *****************
  2753 ;; Defined at:
  2754 ;;		line 5 in file "serial.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;		None
  2757 ;; Auto vars:     Size  Location     Type
  2758 ;;		None
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  1    wreg      void 
  2761 ;; Registers used:
  2762 ;;		wreg, status,2
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2772 ;;Total ram usage:        0 bytes
  2773 ;; Hardware stack levels used: 1
  2774 ;; Hardware stack levels required when called: 1
  2775 ;; This function calls:
  2776 ;;		Nothing
  2777 ;; This function is called by:
  2778 ;;		_main
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           	psect	text14
  2783   0022E0                     __ptext14:
  2784                           	callstack 0
  2785   0022E0                     _initUSART4:
  2786                           	callstack 29
  2787   0022E0                     
  2788                           ;serial.c: 9:     RC0PPS = 0x12;
  2789   0022E0  0E12               	movlw	18
  2790   0022E2  010E               	movlb	14	; () banked
  2791   0022E4  6F62               	movwf	98,b	;volatile
  2792                           
  2793                           ;serial.c: 10:     RX4PPS = 0x11;
  2794   0022E6  0E11               	movlw	17
  2795   0022E8  6F15               	movwf	21,b	;volatile
  2796   0022EA                     
  2797                           ; BSR set to: 14
  2798                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  2799   0022EA  97E9               	bcf	233,3,b	;volatile
  2800   0022EC                     
  2801                           ; BSR set to: 14
  2802                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  2803   0022EC  95E8               	bcf	232,2,b	;volatile
  2804                           
  2805                           ;serial.c: 14:     SP4BRGL = 51;
  2806   0022EE  0E33               	movlw	51
  2807   0022F0  6FE5               	movwf	229,b	;volatile
  2808                           
  2809                           ;serial.c: 15:     SP4BRGH = 0;
  2810   0022F2  0E00               	movlw	0
  2811   0022F4  6FE6               	movwf	230,b	;volatile
  2812   0022F6                     
  2813                           ; BSR set to: 14
  2814                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  2815   0022F6  89E7               	bsf	231,4,b	;volatile
  2816   0022F8                     
  2817                           ; BSR set to: 14
  2818                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  2819   0022F8  8BE8               	bsf	232,5,b	;volatile
  2820   0022FA                     
  2821                           ; BSR set to: 14
  2822                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  2823   0022FA  8FE7               	bsf	231,7,b	;volatile
  2824   0022FC                     
  2825                           ; BSR set to: 14
  2826   0022FC  0012               	return		;funcret
  2827   0022FE                     __end_of_initUSART4:
  2828                           	callstack 0
  2829                           
  2830 ;; *************** function _initDCmotorsPWM *****************
  2831 ;; Defined at:
  2832 ;;		line 5 in file "dc_motor.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, status,2
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2846 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2849 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2850 ;;Total ram usage:        2 bytes
  2851 ;; Hardware stack levels used: 1
  2852 ;; Hardware stack levels required when called: 1
  2853 ;; This function calls:
  2854 ;;		Nothing
  2855 ;; This function is called by:
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text15
  2861   001B22                     __ptext15:
  2862                           	callstack 0
  2863   001B22                     _initDCmotorsPWM:
  2864                           	callstack 29
  2865   001B22                     
  2866                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  2867   001B22  9485               	bcf	133,2,c	;volatile
  2868                           
  2869                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  2870   001B24  9885               	bcf	133,4,c	;volatile
  2871                           
  2872                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  2873   001B26  9E83               	bcf	131,7,c	;volatile
  2874                           
  2875                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  2876   001B28  9C87               	bcf	135,6,c	;volatile
  2877                           
  2878                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
  2879   001B2A  947D               	bcf	125,2,c	;volatile
  2880                           
  2881                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
  2882   001B2C  987D               	bcf	125,4,c	;volatile
  2883                           
  2884                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
  2885   001B2E  9E7B               	bcf	123,7,c	;volatile
  2886                           
  2887                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
  2888   001B30  9C7F               	bcf	127,6,c	;volatile
  2889   001B32                     
  2890                           ;dc_motor.c: 18:     RE2PPS=0x05;
  2891   001B32  0E05               	movlw	5
  2892   001B34  010E               	movlb	14	; () banked
  2893   001B36  6F74               	movwf	116,b	;volatile
  2894                           
  2895                           ;dc_motor.c: 19:     RE4PPS=0x06;
  2896   001B38  0E06               	movlw	6
  2897   001B3A  6F76               	movwf	118,b	;volatile
  2898                           
  2899                           ;dc_motor.c: 20:     RC7PPS=0x07;
  2900   001B3C  0E07               	movlw	7
  2901   001B3E  6F69               	movwf	105,b	;volatile
  2902                           
  2903                           ;dc_motor.c: 21:     RG6PPS=0x08;
  2904   001B40  0E08               	movlw	8
  2905   001B42  6F88               	movwf	136,b	;volatile
  2906                           
  2907                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  2908   001B44  50BD               	movf	189,w,c	;volatile
  2909   001B46  0B8F               	andlw	-113
  2910   001B48  0940               	iorlw	64
  2911   001B4A  6EBD               	movwf	189,c	;volatile
  2912                           
  2913                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  2914   001B4C  0EE0               	movlw	-32
  2915   001B4E  16BE               	andwf	190,f,c	;volatile
  2916                           
  2917                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  2918   001B50  50BF               	movf	191,w,c	;volatile
  2919   001B52  0BF0               	andlw	-16
  2920   001B54  0901               	iorlw	1
  2921   001B56  6EBF               	movwf	191,c	;volatile
  2922   001B58                     
  2923                           ; BSR set to: 14
  2924                           ;dc_motor.c: 30:     T2PR=(unsigned char)PWMperiod;
  2925   001B58  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2926   001B5C                     
  2927                           ; BSR set to: 14
  2928                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  2929   001B5C  8EBD               	bsf	189,7,c	;volatile
  2930                           
  2931                           ;dc_motor.c: 35:     CCPR1H=0;
  2932   001B5E  0E00               	movlw	0
  2933   001B60  6EAA               	movwf	170,c	;volatile
  2934                           
  2935                           ;dc_motor.c: 36:     CCPR2H=0;
  2936   001B62  0E00               	movlw	0
  2937   001B64  6EA6               	movwf	166,c	;volatile
  2938                           
  2939                           ;dc_motor.c: 37:     CCPR3H=0;
  2940   001B66  0E00               	movlw	0
  2941   001B68  010F               	movlb	15	; () banked
  2942   001B6A  6F25               	movwf	37,b	;volatile
  2943                           
  2944                           ;dc_motor.c: 38:     CCPR4H=0;
  2945   001B6C  0E00               	movlw	0
  2946   001B6E  6F21               	movwf	33,b	;volatile
  2947                           
  2948                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  2949   001B70  0EFC               	movlw	-4
  2950   001B72  16AD               	andwf	173,f,c	;volatile
  2951                           
  2952                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  2953   001B74  0EF3               	movlw	-13
  2954   001B76  16AD               	andwf	173,f,c	;volatile
  2955                           
  2956                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  2957   001B78  0ECF               	movlw	-49
  2958   001B7A  16AD               	andwf	173,f,c	;volatile
  2959                           
  2960                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  2961   001B7C  0E3F               	movlw	-193
  2962   001B7E  16AD               	andwf	173,f,c	;volatile
  2963   001B80                     
  2964                           ; BSR set to: 15
  2965                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  2966   001B80  88AB               	bsf	171,4,c	;volatile
  2967                           
  2968                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  2969   001B82  50AB               	movf	171,w,c	;volatile
  2970   001B84  0BF0               	andlw	-16
  2971   001B86  090C               	iorlw	12
  2972   001B88  6EAB               	movwf	171,c	;volatile
  2973   001B8A                     
  2974                           ; BSR set to: 15
  2975                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  2976   001B8A  8EAB               	bsf	171,7,c	;volatile
  2977   001B8C                     
  2978                           ; BSR set to: 15
  2979                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  2980   001B8C  88A7               	bsf	167,4,c	;volatile
  2981                           
  2982                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  2983   001B8E  50A7               	movf	167,w,c	;volatile
  2984   001B90  0BF0               	andlw	-16
  2985   001B92  090C               	iorlw	12
  2986   001B94  6EA7               	movwf	167,c	;volatile
  2987   001B96                     
  2988                           ; BSR set to: 15
  2989                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  2990   001B96  8EA7               	bsf	167,7,c	;volatile
  2991   001B98                     
  2992                           ; BSR set to: 15
  2993                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  2994   001B98  8926               	bsf	38,4,b	;volatile
  2995                           
  2996                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  2997   001B9A  5126               	movf	38,w,b	;volatile
  2998   001B9C  0BF0               	andlw	-16
  2999   001B9E  090C               	iorlw	12
  3000   001BA0  6F26               	movwf	38,b	;volatile
  3001   001BA2                     
  3002                           ; BSR set to: 15
  3003                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3004   001BA2  8F26               	bsf	38,7,b	;volatile
  3005   001BA4                     
  3006                           ; BSR set to: 15
  3007                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3008   001BA4  8922               	bsf	34,4,b	;volatile
  3009                           
  3010                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3011   001BA6  5122               	movf	34,w,b	;volatile
  3012   001BA8  0BF0               	andlw	-16
  3013   001BAA  090C               	iorlw	12
  3014   001BAC  6F22               	movwf	34,b	;volatile
  3015   001BAE                     
  3016                           ; BSR set to: 15
  3017                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3018   001BAE  8F22               	bsf	34,7,b	;volatile
  3019   001BB0                     
  3020                           ; BSR set to: 15
  3021   001BB0  0012               	return		;funcret
  3022   001BB2                     __end_of_initDCmotorsPWM:
  3023                           	callstack 0
  3024                           
  3025 ;; *************** function _getRGBCval *****************
  3026 ;; Defined at:
  3027 ;;		line 84 in file "color.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  3030 ;;		 -> main@measured_colour(8), 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3042 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3046 ;;Total ram usage:        1 bytes
  3047 ;; Hardware stack levels used: 1
  3048 ;; Hardware stack levels required when called: 4
  3049 ;; This function calls:
  3050 ;;		_color_read_Blue
  3051 ;;		_color_read_Clear
  3052 ;;		_color_read_Green
  3053 ;;		_color_read_Red
  3054 ;; This function is called by:
  3055 ;;		_main
  3056 ;;		_wait_for_wall
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text16
  3061   001E16                     __ptext16:
  3062                           	callstack 0
  3063   001E16                     _getRGBCval:
  3064                           	callstack 26
  3065   001E16                     
  3066                           ;color.c: 84: void getRGBCval(struct RGBC_val *p);color.c: 85: {;color.c: 86:     p->R =
      +                           color_read_Red();
  3067   001E16  EC8A  F00F         	call	_color_read_Red	;wreg free
  3068   001E1A  500C               	movf	getRGBCval@p^0,w,c
  3069   001E1C  6ED9               	movwf	fsr2l,c
  3070   001E1E  6ADA               	clrf	fsr2h,c
  3071   001E20  C005  FFDE         	movff	?_color_read_Red,postinc2
  3072   001E24  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3073                           
  3074                           ;color.c: 87:     p->B = color_read_Blue();
  3075   001E28  EC02  F010         	call	_color_read_Blue	;wreg free
  3076   001E2C  500C               	movf	getRGBCval@p^0,w,c
  3077   001E2E  6ED9               	movwf	fsr2l,c
  3078   001E30  6ADA               	clrf	fsr2h,c
  3079   001E32  0E04               	movlw	4
  3080   001E34  26D9               	addwf	fsr2l,f,c
  3081   001E36  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3082   001E3A  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3083                           
  3084                           ;color.c: 88:     p->G = color_read_Green();
  3085   001E3E  ECB2  F00F         	call	_color_read_Green	;wreg free
  3086   001E42  500C               	movf	getRGBCval@p^0,w,c
  3087   001E44  6ED9               	movwf	fsr2l,c
  3088   001E46  6ADA               	clrf	fsr2h,c
  3089   001E48  0E02               	movlw	2
  3090   001E4A  26D9               	addwf	fsr2l,f,c
  3091   001E4C  C005  FFDE         	movff	?_color_read_Green,postinc2
  3092   001E50  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3093                           
  3094                           ;color.c: 89:     p->C = color_read_Clear();
  3095   001E54  ECDA  F00F         	call	_color_read_Clear	;wreg free
  3096   001E58  500C               	movf	getRGBCval@p^0,w,c
  3097   001E5A  6ED9               	movwf	fsr2l,c
  3098   001E5C  6ADA               	clrf	fsr2h,c
  3099   001E5E  0E06               	movlw	6
  3100   001E60  26D9               	addwf	fsr2l,f,c
  3101   001E62  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3102   001E66  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3103   001E6A  0012               	return		;funcret
  3104   001E6C                     __end_of_getRGBCval:
  3105                           	callstack 0
  3106                           
  3107 ;; *************** function _color_read_Red *****************
  3108 ;; Defined at:
  3109 ;;		line 28 in file "color.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;		None
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  tmp             2    9[COMRAM] unsigned int 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  2    4[COMRAM] unsigned int 
  3116 ;; Registers used:
  3117 ;;		wreg, status,2, status,0, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3123 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3124 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3125 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3126 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3127 ;;Total ram usage:        7 bytes
  3128 ;; Hardware stack levels used: 1
  3129 ;; Hardware stack levels required when called: 3
  3130 ;; This function calls:
  3131 ;;		_I2C_2_Master_Read
  3132 ;;		_I2C_2_Master_RepStart
  3133 ;;		_I2C_2_Master_Start
  3134 ;;		_I2C_2_Master_Stop
  3135 ;;		_I2C_2_Master_Write
  3136 ;; This function is called by:
  3137 ;;		_getRGBCval
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text17
  3142   001F14                     __ptext17:
  3143                           	callstack 0
  3144   001F14                     _color_read_Red:
  3145                           	callstack 26
  3146   001F14                     
  3147                           ;color.c: 30:  unsigned int tmp;;color.c: 31:  I2C_2_Master_Start();
  3148   001F14  ECB0  F011         	call	_I2C_2_Master_Start	;wreg free
  3149                           
  3150                           ;color.c: 32:  I2C_2_Master_Write(0x52 | 0x00);
  3151   001F18  0E52               	movlw	82
  3152   001F1A  EC94  F011         	call	_I2C_2_Master_Write
  3153                           
  3154                           ;color.c: 33:  I2C_2_Master_Write(0xA0 | 0x16);
  3155   001F1E  0EB6               	movlw	182
  3156   001F20  EC94  F011         	call	_I2C_2_Master_Write
  3157                           
  3158                           ;color.c: 34:  I2C_2_Master_RepStart();
  3159   001F24  ECA6  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3160                           
  3161                           ;color.c: 35:  I2C_2_Master_Write(0x52 | 0x01);
  3162   001F28  0E53               	movlw	83
  3163   001F2A  EC94  F011         	call	_I2C_2_Master_Write
  3164                           
  3165                           ;color.c: 36:  tmp=I2C_2_Master_Read(1);
  3166   001F2E  0E01               	movlw	1
  3167   001F30  EC76  F010         	call	_I2C_2_Master_Read
  3168   001F34  6E07               	movwf	??_color_read_Red^0,c
  3169   001F36  5007               	movf	??_color_read_Red^0,w,c
  3170   001F38  6E0A               	movwf	color_read_Red@tmp^0,c
  3171   001F3A  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3172                           
  3173                           ;color.c: 37:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3174   001F3C  0E00               	movlw	0
  3175   001F3E  EC76  F010         	call	_I2C_2_Master_Read
  3176   001F42  6E07               	movwf	??_color_read_Red^0,c
  3177   001F44  5007               	movf	??_color_read_Red^0,w,c
  3178   001F46  6E09               	movwf	(??_color_read_Red+2)^0,c
  3179   001F48  6A08               	clrf	(??_color_read_Red+1)^0,c
  3180   001F4A  500A               	movf	color_read_Red@tmp^0,w,c
  3181   001F4C  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3182   001F4E  6E0A               	movwf	color_read_Red@tmp^0,c
  3183   001F50  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3184   001F52  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3185   001F54  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3186                           
  3187                           ;color.c: 38:  I2C_2_Master_Stop();
  3188   001F56  ECAB  F011         	call	_I2C_2_Master_Stop	;wreg free
  3189   001F5A                     
  3190                           ;color.c: 39:  return tmp;
  3191   001F5A  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3192   001F5E  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3193   001F62  0012               	return		;funcret
  3194   001F64                     __end_of_color_read_Red:
  3195                           	callstack 0
  3196                           
  3197 ;; *************** function _color_read_Green *****************
  3198 ;; Defined at:
  3199 ;;		line 56 in file "color.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;		None
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;  tmp             2    9[COMRAM] unsigned int 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  2    4[COMRAM] unsigned int 
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3213 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3215 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3216 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3217 ;;Total ram usage:        7 bytes
  3218 ;; Hardware stack levels used: 1
  3219 ;; Hardware stack levels required when called: 3
  3220 ;; This function calls:
  3221 ;;		_I2C_2_Master_Read
  3222 ;;		_I2C_2_Master_RepStart
  3223 ;;		_I2C_2_Master_Start
  3224 ;;		_I2C_2_Master_Stop
  3225 ;;		_I2C_2_Master_Write
  3226 ;; This function is called by:
  3227 ;;		_getRGBCval
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           	psect	text18
  3232   001F64                     __ptext18:
  3233                           	callstack 0
  3234   001F64                     _color_read_Green:
  3235                           	callstack 26
  3236   001F64                     
  3237                           ;color.c: 58:     unsigned int tmp;;color.c: 59:  I2C_2_Master_Start();
  3238   001F64  ECB0  F011         	call	_I2C_2_Master_Start	;wreg free
  3239                           
  3240                           ;color.c: 60:  I2C_2_Master_Write(0x52 | 0x00);
  3241   001F68  0E52               	movlw	82
  3242   001F6A  EC94  F011         	call	_I2C_2_Master_Write
  3243                           
  3244                           ;color.c: 61:  I2C_2_Master_Write(0xA0 | 0x18);
  3245   001F6E  0EB8               	movlw	184
  3246   001F70  EC94  F011         	call	_I2C_2_Master_Write
  3247                           
  3248                           ;color.c: 62:  I2C_2_Master_RepStart();
  3249   001F74  ECA6  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3250                           
  3251                           ;color.c: 63:  I2C_2_Master_Write(0x52 | 0x01);
  3252   001F78  0E53               	movlw	83
  3253   001F7A  EC94  F011         	call	_I2C_2_Master_Write
  3254                           
  3255                           ;color.c: 64:  tmp=I2C_2_Master_Read(1);
  3256   001F7E  0E01               	movlw	1
  3257   001F80  EC76  F010         	call	_I2C_2_Master_Read
  3258   001F84  6E07               	movwf	??_color_read_Green^0,c
  3259   001F86  5007               	movf	??_color_read_Green^0,w,c
  3260   001F88  6E0A               	movwf	color_read_Green@tmp^0,c
  3261   001F8A  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3262                           
  3263                           ;color.c: 65:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3264   001F8C  0E00               	movlw	0
  3265   001F8E  EC76  F010         	call	_I2C_2_Master_Read
  3266   001F92  6E07               	movwf	??_color_read_Green^0,c
  3267   001F94  5007               	movf	??_color_read_Green^0,w,c
  3268   001F96  6E09               	movwf	(??_color_read_Green+2)^0,c
  3269   001F98  6A08               	clrf	(??_color_read_Green+1)^0,c
  3270   001F9A  500A               	movf	color_read_Green@tmp^0,w,c
  3271   001F9C  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3272   001F9E  6E0A               	movwf	color_read_Green@tmp^0,c
  3273   001FA0  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3274   001FA2  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3275   001FA4  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3276                           
  3277                           ;color.c: 66:  I2C_2_Master_Stop();
  3278   001FA6  ECAB  F011         	call	_I2C_2_Master_Stop	;wreg free
  3279   001FAA                     
  3280                           ;color.c: 67:  return tmp;
  3281   001FAA  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3282   001FAE  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3283   001FB2  0012               	return		;funcret
  3284   001FB4                     __end_of_color_read_Green:
  3285                           	callstack 0
  3286                           
  3287 ;; *************** function _color_read_Clear *****************
  3288 ;; Defined at:
  3289 ;;		line 70 in file "color.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;		None
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  tmp             2    9[COMRAM] unsigned int 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  2    4[COMRAM] unsigned int 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3305 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3306 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3307 ;;Total ram usage:        7 bytes
  3308 ;; Hardware stack levels used: 1
  3309 ;; Hardware stack levels required when called: 3
  3310 ;; This function calls:
  3311 ;;		_I2C_2_Master_Read
  3312 ;;		_I2C_2_Master_RepStart
  3313 ;;		_I2C_2_Master_Start
  3314 ;;		_I2C_2_Master_Stop
  3315 ;;		_I2C_2_Master_Write
  3316 ;; This function is called by:
  3317 ;;		_getRGBCval
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text19
  3322   001FB4                     __ptext19:
  3323                           	callstack 0
  3324   001FB4                     _color_read_Clear:
  3325                           	callstack 26
  3326   001FB4                     
  3327                           ;color.c: 72:     unsigned int tmp;;color.c: 73:  I2C_2_Master_Start();
  3328   001FB4  ECB0  F011         	call	_I2C_2_Master_Start	;wreg free
  3329                           
  3330                           ;color.c: 74:  I2C_2_Master_Write(0x52 | 0x00);
  3331   001FB8  0E52               	movlw	82
  3332   001FBA  EC94  F011         	call	_I2C_2_Master_Write
  3333                           
  3334                           ;color.c: 75:  I2C_2_Master_Write(0xA0 | 0x14);
  3335   001FBE  0EB4               	movlw	180
  3336   001FC0  EC94  F011         	call	_I2C_2_Master_Write
  3337                           
  3338                           ;color.c: 76:  I2C_2_Master_RepStart();
  3339   001FC4  ECA6  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3340                           
  3341                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x01);
  3342   001FC8  0E53               	movlw	83
  3343   001FCA  EC94  F011         	call	_I2C_2_Master_Write
  3344                           
  3345                           ;color.c: 78:  tmp=I2C_2_Master_Read(1);
  3346   001FCE  0E01               	movlw	1
  3347   001FD0  EC76  F010         	call	_I2C_2_Master_Read
  3348   001FD4  6E07               	movwf	??_color_read_Clear^0,c
  3349   001FD6  5007               	movf	??_color_read_Clear^0,w,c
  3350   001FD8  6E0A               	movwf	color_read_Clear@tmp^0,c
  3351   001FDA  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3352                           
  3353                           ;color.c: 79:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3354   001FDC  0E00               	movlw	0
  3355   001FDE  EC76  F010         	call	_I2C_2_Master_Read
  3356   001FE2  6E07               	movwf	??_color_read_Clear^0,c
  3357   001FE4  5007               	movf	??_color_read_Clear^0,w,c
  3358   001FE6  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3359   001FE8  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3360   001FEA  500A               	movf	color_read_Clear@tmp^0,w,c
  3361   001FEC  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3362   001FEE  6E0A               	movwf	color_read_Clear@tmp^0,c
  3363   001FF0  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3364   001FF2  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3365   001FF4  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3366                           
  3367                           ;color.c: 80:  I2C_2_Master_Stop();
  3368   001FF6  ECAB  F011         	call	_I2C_2_Master_Stop	;wreg free
  3369   001FFA                     
  3370                           ;color.c: 81:  return tmp;
  3371   001FFA  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3372   001FFE  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3373   002002  0012               	return		;funcret
  3374   002004                     __end_of_color_read_Clear:
  3375                           	callstack 0
  3376                           
  3377 ;; *************** function _color_read_Blue *****************
  3378 ;; Defined at:
  3379 ;;		line 42 in file "color.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  tmp             2    9[COMRAM] unsigned int 
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  2    4[COMRAM] unsigned int 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2, status,0, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3395 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3396 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3397 ;;Total ram usage:        7 bytes
  3398 ;; Hardware stack levels used: 1
  3399 ;; Hardware stack levels required when called: 3
  3400 ;; This function calls:
  3401 ;;		_I2C_2_Master_Read
  3402 ;;		_I2C_2_Master_RepStart
  3403 ;;		_I2C_2_Master_Start
  3404 ;;		_I2C_2_Master_Stop
  3405 ;;		_I2C_2_Master_Write
  3406 ;; This function is called by:
  3407 ;;		_getRGBCval
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text20
  3412   002004                     __ptext20:
  3413                           	callstack 0
  3414   002004                     _color_read_Blue:
  3415                           	callstack 26
  3416   002004                     
  3417                           ;color.c: 44:     unsigned int tmp;;color.c: 45:  I2C_2_Master_Start();
  3418   002004  ECB0  F011         	call	_I2C_2_Master_Start	;wreg free
  3419                           
  3420                           ;color.c: 46:  I2C_2_Master_Write(0x52 | 0x00);
  3421   002008  0E52               	movlw	82
  3422   00200A  EC94  F011         	call	_I2C_2_Master_Write
  3423                           
  3424                           ;color.c: 47:  I2C_2_Master_Write(0xA0 | 0x1A);
  3425   00200E  0EBA               	movlw	186
  3426   002010  EC94  F011         	call	_I2C_2_Master_Write
  3427                           
  3428                           ;color.c: 48:  I2C_2_Master_RepStart();
  3429   002014  ECA6  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3430                           
  3431                           ;color.c: 49:  I2C_2_Master_Write(0x52 | 0x01);
  3432   002018  0E53               	movlw	83
  3433   00201A  EC94  F011         	call	_I2C_2_Master_Write
  3434                           
  3435                           ;color.c: 50:  tmp=I2C_2_Master_Read(1);
  3436   00201E  0E01               	movlw	1
  3437   002020  EC76  F010         	call	_I2C_2_Master_Read
  3438   002024  6E07               	movwf	??_color_read_Blue^0,c
  3439   002026  5007               	movf	??_color_read_Blue^0,w,c
  3440   002028  6E0A               	movwf	color_read_Blue@tmp^0,c
  3441   00202A  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3442                           
  3443                           ;color.c: 51:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3444   00202C  0E00               	movlw	0
  3445   00202E  EC76  F010         	call	_I2C_2_Master_Read
  3446   002032  6E07               	movwf	??_color_read_Blue^0,c
  3447   002034  5007               	movf	??_color_read_Blue^0,w,c
  3448   002036  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3449   002038  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3450   00203A  500A               	movf	color_read_Blue@tmp^0,w,c
  3451   00203C  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3452   00203E  6E0A               	movwf	color_read_Blue@tmp^0,c
  3453   002040  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3454   002042  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3455   002044  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3456                           
  3457                           ;color.c: 52:  I2C_2_Master_Stop();
  3458   002046  ECAB  F011         	call	_I2C_2_Master_Stop	;wreg free
  3459   00204A                     
  3460                           ;color.c: 53:  return tmp;
  3461   00204A  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3462   00204E  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3463   002052  0012               	return		;funcret
  3464   002054                     __end_of_color_read_Blue:
  3465                           	callstack 0
  3466                           
  3467 ;; *************** function _I2C_2_Master_RepStart *****************
  3468 ;; Defined at:
  3469 ;;		line 33 in file "i2c.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3487 ;;Total ram usage:        0 bytes
  3488 ;; Hardware stack levels used: 1
  3489 ;; Hardware stack levels required when called: 2
  3490 ;; This function calls:
  3491 ;;		_I2C_2_Master_Idle
  3492 ;; This function is called by:
  3493 ;;		_color_read_Red
  3494 ;;		_color_read_Blue
  3495 ;;		_color_read_Green
  3496 ;;		_color_read_Clear
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text21
  3501   00234C                     __ptext21:
  3502                           	callstack 0
  3503   00234C                     _I2C_2_Master_RepStart:
  3504                           	callstack 26
  3505   00234C                     
  3506                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3507   00234C  EC27  F011         	call	_I2C_2_Master_Idle	;wreg free
  3508   002350                     
  3509                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3510   002350  010E               	movlb	14	; () banked
  3511   002352  83DA               	bsf	218,1,b	;volatile
  3512   002354                     
  3513                           ; BSR set to: 14
  3514   002354  0012               	return		;funcret
  3515   002356                     __end_of_I2C_2_Master_RepStart:
  3516                           	callstack 0
  3517                           
  3518 ;; *************** function _I2C_2_Master_Read *****************
  3519 ;; Defined at:
  3520 ;;		line 51 in file "i2c.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;  ack             1    wreg     unsigned char 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  ack             1    2[COMRAM] unsigned char 
  3525 ;;  tmp             1    3[COMRAM] unsigned char 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      unsigned char 
  3528 ;; Registers used:
  3529 ;;		wreg, status,2, status,0, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3536 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3537 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3538 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3539 ;;Total ram usage:        3 bytes
  3540 ;; Hardware stack levels used: 1
  3541 ;; Hardware stack levels required when called: 2
  3542 ;; This function calls:
  3543 ;;		_I2C_2_Master_Idle
  3544 ;; This function is called by:
  3545 ;;		_color_read_Red
  3546 ;;		_color_read_Blue
  3547 ;;		_color_read_Green
  3548 ;;		_color_read_Clear
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text22
  3553   0020EC                     __ptext22:
  3554                           	callstack 0
  3555   0020EC                     _I2C_2_Master_Read:
  3556                           	callstack 26
  3557                           
  3558                           ; BSR set to: 14
  3559                           ;incstack = 0
  3560                           ;I2C_2_Master_Read@ack stored from wreg
  3561   0020EC  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3562   0020EE                     
  3563                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3564   0020EE  EC27  F011         	call	_I2C_2_Master_Idle	;wreg free
  3565   0020F2                     
  3566                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3567   0020F2  010E               	movlb	14	; () banked
  3568   0020F4  87DA               	bsf	218,3,b	;volatile
  3569                           
  3570                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3571   0020F6  EC27  F011         	call	_I2C_2_Master_Idle	;wreg free
  3572   0020FA                     
  3573                           ;i2c.c: 57:   tmp = SSP2BUF;
  3574   0020FA  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3575                           
  3576                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3577   0020FE  EC27  F011         	call	_I2C_2_Master_Idle	;wreg free
  3578   002102                     
  3579                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3580   002102  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3581   002104  B4D8               	btfsc	status,2,c
  3582   002106  EF87  F010         	goto	u1731
  3583   00210A  EF8B  F010         	goto	u1730
  3584   00210E                     u1731:
  3585   00210E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3586   002110  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3587   002112  EF8C  F010         	goto	u1748
  3588   002116                     u1730:
  3589   002116  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3590   002118                     u1748:
  3591   002118  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3592   00211A  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3593   00211C  010E               	movlb	14	; () banked
  3594   00211E  51DA               	movf	218,w,b	;volatile
  3595   002120  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3596   002122  0BDF               	andlw	-33
  3597   002124  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3598   002126  6FDA               	movwf	218,b	;volatile
  3599   002128                     
  3600                           ; BSR set to: 14
  3601                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3602   002128  89DA               	bsf	218,4,b	;volatile
  3603   00212A                     
  3604                           ; BSR set to: 14
  3605                           ;i2c.c: 61:   return tmp;
  3606   00212A  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3607   00212C                     
  3608                           ; BSR set to: 14
  3609   00212C  0012               	return		;funcret
  3610   00212E                     __end_of_I2C_2_Master_Read:
  3611                           	callstack 0
  3612                           
  3613 ;; *************** function _getHSVval *****************
  3614 ;; Defined at:
  3615 ;;		line 129 in file "color.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  3618 ;;		 -> main@HSV_colour(6), 
  3619 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  3620 ;;		 -> main@measured_colour(8), 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  temp            4   43[COMRAM] unsigned long 
  3623 ;;  temp            4   39[COMRAM] unsigned long 
  3624 ;;  temp            4   35[COMRAM] unsigned long 
  3625 ;;  C               2   49[COMRAM] unsigned int 
  3626 ;;  M               2   47[COMRAM] unsigned int 
  3627 ;;  z               2    0        unsigned int 
  3628 ;;  H               2   33[COMRAM] unsigned int 
  3629 ;;  BB              2   31[COMRAM] unsigned int 
  3630 ;;  GG              2   29[COMRAM] unsigned int 
  3631 ;;  S               2   27[COMRAM] unsigned int 
  3632 ;;  m               2   25[COMRAM] unsigned int 
  3633 ;;  RR              2   23[COMRAM] unsigned int 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      void 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3643 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3644 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3645 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3646 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3647 ;;Total ram usage:       38 bytes
  3648 ;; Hardware stack levels used: 1
  3649 ;; Hardware stack levels required when called: 3
  3650 ;; This function calls:
  3651 ;;		___lldiv
  3652 ;;		___lmul
  3653 ;;		___lwdiv
  3654 ;;		___wmul
  3655 ;;		_maxRGB
  3656 ;;		_minRGB
  3657 ;; This function is called by:
  3658 ;;		_main
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text23
  3663   000E1A                     __ptext23:
  3664                           	callstack 0
  3665   000E1A                     _getHSVval:
  3666                           	callstack 27
  3667   000E1A                     
  3668                           ;color.c: 132:     unsigned int H = 0;
  3669   000E1A  0E00               	movlw	0
  3670   000E1C  6E23               	movwf	(getHSVval@H+1)^0,c
  3671   000E1E  0E00               	movlw	0
  3672   000E20  6E22               	movwf	getHSVval@H^0,c
  3673                           
  3674                           ;color.c: 133:     unsigned int S = 0;
  3675   000E22  0E00               	movlw	0
  3676   000E24  6E1D               	movwf	(getHSVval@S+1)^0,c
  3677   000E26  0E00               	movlw	0
  3678   000E28  6E1C               	movwf	getHSVval@S^0,c
  3679   000E2A                     
  3680                           ;color.c: 135:     unsigned int RR = (p2->R);
  3681   000E2A  500F               	movf	getHSVval@p2^0,w,c
  3682   000E2C  6ED9               	movwf	fsr2l,c
  3683   000E2E  6ADA               	clrf	fsr2h,c
  3684   000E30  CFDE F018          	movff	postinc2,getHSVval@RR
  3685   000E34  CFDD F019          	movff	postdec2,getHSVval@RR+1
  3686   000E38                     
  3687                           ;color.c: 136:     unsigned int GG = (p2->G);
  3688   000E38  500F               	movf	getHSVval@p2^0,w,c
  3689   000E3A  6ED9               	movwf	fsr2l,c
  3690   000E3C  6ADA               	clrf	fsr2h,c
  3691   000E3E  0E02               	movlw	2
  3692   000E40  26D9               	addwf	fsr2l,f,c
  3693   000E42  CFDE F01E          	movff	postinc2,getHSVval@GG
  3694   000E46  CFDD F01F          	movff	postdec2,getHSVval@GG+1
  3695   000E4A                     
  3696                           ;color.c: 137:     unsigned int BB = (p2->B);
  3697   000E4A  500F               	movf	getHSVval@p2^0,w,c
  3698   000E4C  6ED9               	movwf	fsr2l,c
  3699   000E4E  6ADA               	clrf	fsr2h,c
  3700   000E50  0E04               	movlw	4
  3701   000E52  26D9               	addwf	fsr2l,f,c
  3702   000E54  CFDE F020          	movff	postinc2,getHSVval@BB
  3703   000E58  CFDD F021          	movff	postdec2,getHSVval@BB+1
  3704   000E5C                     
  3705                           ;color.c: 139:     unsigned int M = maxRGB(p2);
  3706   000E5C  C00F  F007         	movff	getHSVval@p2,maxRGB@p
  3707   000E60  EC60  F00F         	call	_maxRGB	;wreg free
  3708   000E64  C007  F030         	movff	?_maxRGB,getHSVval@M
  3709   000E68  C008  F031         	movff	?_maxRGB+1,getHSVval@M+1
  3710   000E6C                     
  3711                           ;color.c: 140:     unsigned int m = minRGB(p2);
  3712   000E6C  C00F  F007         	movff	getHSVval@p2,minRGB@p
  3713   000E70  EC36  F00F         	call	_minRGB	;wreg free
  3714   000E74  C007  F01A         	movff	?_minRGB,getHSVval@m
  3715   000E78  C008  F01B         	movff	?_minRGB+1,getHSVval@m+1
  3716   000E7C                     
  3717                           ;color.c: 141:     unsigned int C = M - m;
  3718   000E7C  501A               	movf	getHSVval@m^0,w,c
  3719   000E7E  5C30               	subwf	getHSVval@M^0,w,c
  3720   000E80  6E32               	movwf	getHSVval@C^0,c
  3721   000E82  501B               	movf	(getHSVval@m+1)^0,w,c
  3722   000E84  5831               	subwfb	(getHSVval@M+1)^0,w,c
  3723   000E86  6E33               	movwf	(getHSVval@C+1)^0,c
  3724   000E88                     
  3725                           ;color.c: 143:     if (C == 0) {
  3726   000E88  5032               	movf	getHSVval@C^0,w,c
  3727   000E8A  1033               	iorwf	(getHSVval@C+1)^0,w,c
  3728   000E8C  A4D8               	btfss	status,2,c
  3729   000E8E  EF4B  F007         	goto	u3121
  3730   000E92  EF4D  F007         	goto	u3120
  3731   000E96                     u3121:
  3732   000E96  EF53  F007         	goto	l4259
  3733   000E9A                     u3120:
  3734   000E9A                     
  3735                           ;color.c: 144:         H = 0;
  3736   000E9A  0E00               	movlw	0
  3737   000E9C  6E23               	movwf	(getHSVval@H+1)^0,c
  3738   000E9E  0E00               	movlw	0
  3739   000EA0  6E22               	movwf	getHSVval@H^0,c
  3740                           
  3741                           ;color.c: 145:     } else {
  3742   000EA2  EF42  F009         	goto	l4303
  3743   000EA6                     l4259:
  3744                           
  3745                           ;color.c: 146:         if (M == RR) {
  3746   000EA6  5018               	movf	getHSVval@RR^0,w,c
  3747   000EA8  1830               	xorwf	getHSVval@M^0,w,c
  3748   000EAA  E107               	bnz	u3131
  3749   000EAC  5019               	movf	(getHSVval@RR+1)^0,w,c
  3750   000EAE  1831               	xorwf	(getHSVval@M+1)^0,w,c
  3751   000EB0  A4D8               	btfss	status,2,c
  3752   000EB2  EF5D  F007         	goto	u3131
  3753   000EB6  EF5F  F007         	goto	u3130
  3754   000EBA                     u3131:
  3755   000EBA  EF14  F008         	goto	l4287
  3756   000EBE                     u3130:
  3757   000EBE                     
  3758                           ;color.c: 147:             if (GG >= BB) {
  3759   000EBE  5020               	movf	getHSVval@BB^0,w,c
  3760   000EC0  5C1E               	subwf	getHSVval@GG^0,w,c
  3761   000EC2  5021               	movf	(getHSVval@BB+1)^0,w,c
  3762   000EC4  581F               	subwfb	(getHSVval@GG+1)^0,w,c
  3763   000EC6  A0D8               	btfss	status,0,c
  3764   000EC8  EF68  F007         	goto	u3141
  3765   000ECC  EF6A  F007         	goto	u3140
  3766   000ED0                     u3141:
  3767   000ED0  EFAE  F007         	goto	l4275
  3768   000ED4                     u3140:
  3769   000ED4                     
  3770                           ;color.c: 152:                 temp = (unsigned long)(GG - BB);
  3771   000ED4  5020               	movf	getHSVval@BB^0,w,c
  3772   000ED6  5C1E               	subwf	getHSVval@GG^0,w,c
  3773   000ED8  6E10               	movwf	??_getHSVval^0,c
  3774   000EDA  5021               	movf	(getHSVval@BB+1)^0,w,c
  3775   000EDC  581F               	subwfb	(getHSVval@GG+1)^0,w,c
  3776   000EDE  6E11               	movwf	(??_getHSVval+1)^0,c
  3777   000EE0  C010  F028         	movff	??_getHSVval,getHSVval@temp
  3778   000EE4  C011  F029         	movff	??_getHSVval+1,getHSVval@temp+1
  3779   000EE8  6A2A               	clrf	(getHSVval@temp+2)^0,c
  3780   000EEA  6A2B               	clrf	(getHSVval@temp+3)^0,c
  3781   000EEC                     
  3782                           ;color.c: 153:                 temp *= (unsigned long)z;
  3783   000EEC  C028  F001         	movff	getHSVval@temp,___lmul@multiplier
  3784   000EF0  C029  F002         	movff	getHSVval@temp+1,___lmul@multiplier+1
  3785   000EF4  C02A  F003         	movff	getHSVval@temp+2,___lmul@multiplier+2
  3786   000EF8  C02B  F004         	movff	getHSVval@temp+3,___lmul@multiplier+3
  3787   000EFC  0E3C               	movlw	60
  3788   000EFE  6E05               	movwf	___lmul@multiplicand^0,c
  3789   000F00  0E00               	movlw	0
  3790   000F02  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3791   000F04  0E00               	movlw	0
  3792   000F06  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3793   000F08  0E00               	movlw	0
  3794   000F0A  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3795   000F0C  EC48  F00E         	call	___lmul	;wreg free
  3796   000F10  C001  F028         	movff	?___lmul,getHSVval@temp
  3797   000F14  C002  F029         	movff	?___lmul+1,getHSVval@temp+1
  3798   000F18  C003  F02A         	movff	?___lmul+2,getHSVval@temp+2
  3799   000F1C  C004  F02B         	movff	?___lmul+3,getHSVval@temp+3
  3800   000F20                     
  3801                           ;color.c: 154:                 temp /= (unsigned long)C;
  3802   000F20  C028  F001         	movff	getHSVval@temp,___lldiv@dividend
  3803   000F24  C029  F002         	movff	getHSVval@temp+1,___lldiv@dividend+1
  3804   000F28  C02A  F003         	movff	getHSVval@temp+2,___lldiv@dividend+2
  3805   000F2C  C02B  F004         	movff	getHSVval@temp+3,___lldiv@dividend+3
  3806   000F30  C032  F005         	movff	getHSVval@C,___lldiv@divisor
  3807   000F34  C033  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  3808   000F38  6A07               	clrf	(___lldiv@divisor+2)^0,c
  3809   000F3A  6A08               	clrf	(___lldiv@divisor+3)^0,c
  3810   000F3C  EC3F  F00D         	call	___lldiv	;wreg free
  3811   000F40  C001  F028         	movff	?___lldiv,getHSVval@temp
  3812   000F44  C002  F029         	movff	?___lldiv+1,getHSVval@temp+1
  3813   000F48  C003  F02A         	movff	?___lldiv+2,getHSVval@temp+2
  3814   000F4C  C004  F02B         	movff	?___lldiv+3,getHSVval@temp+3
  3815   000F50                     
  3816                           ;color.c: 155:                 H = (unsigned int)temp;
  3817   000F50  C028  F022         	movff	getHSVval@temp,getHSVval@H
  3818   000F54  C029  F023         	movff	getHSVval@temp+1,getHSVval@H+1
  3819                           
  3820                           ;color.c: 156:             } else {
  3821   000F58  EF14  F008         	goto	l4287
  3822   000F5C                     l4275:
  3823                           
  3824                           ;color.c: 158:                 unsigned long temp;;color.c: 159:                 temp = 
      +                          (unsigned long)C;
  3825   000F5C  C032  F02C         	movff	getHSVval@C,getHSVval@temp_622
  3826   000F60  C033  F02D         	movff	getHSVval@C+1,getHSVval@temp_622+1
  3827   000F64  6A2E               	clrf	(getHSVval@temp_622+2)^0,c
  3828   000F66  6A2F               	clrf	(getHSVval@temp_622+3)^0,c
  3829   000F68                     
  3830                           ;color.c: 160:                 temp *= 6;
  3831   000F68  C02C  F001         	movff	getHSVval@temp_622,___lmul@multiplier
  3832   000F6C  C02D  F002         	movff	getHSVval@temp_622+1,___lmul@multiplier+1
  3833   000F70  C02E  F003         	movff	getHSVval@temp_622+2,___lmul@multiplier+2
  3834   000F74  C02F  F004         	movff	getHSVval@temp_622+3,___lmul@multiplier+3
  3835   000F78  0E06               	movlw	6
  3836   000F7A  6E05               	movwf	___lmul@multiplicand^0,c
  3837   000F7C  0E00               	movlw	0
  3838   000F7E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3839   000F80  0E00               	movlw	0
  3840   000F82  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3841   000F84  0E00               	movlw	0
  3842   000F86  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3843   000F88  EC48  F00E         	call	___lmul	;wreg free
  3844   000F8C  C001  F02C         	movff	?___lmul,getHSVval@temp_622
  3845   000F90  C002  F02D         	movff	?___lmul+1,getHSVval@temp_622+1
  3846   000F94  C003  F02E         	movff	?___lmul+2,getHSVval@temp_622+2
  3847   000F98  C004  F02F         	movff	?___lmul+3,getHSVval@temp_622+3
  3848   000F9C                     
  3849                           ;color.c: 161:                 temp -= (unsigned long)(BB - GG);
  3850   000F9C  501E               	movf	getHSVval@GG^0,w,c
  3851   000F9E  5C20               	subwf	getHSVval@BB^0,w,c
  3852   000FA0  6E10               	movwf	??_getHSVval^0,c
  3853   000FA2  501F               	movf	(getHSVval@GG+1)^0,w,c
  3854   000FA4  5821               	subwfb	(getHSVval@BB+1)^0,w,c
  3855   000FA6  6E11               	movwf	(??_getHSVval+1)^0,c
  3856   000FA8  6A12               	clrf	(??_getHSVval+2)^0,c
  3857   000FAA  6A13               	clrf	(??_getHSVval+3)^0,c
  3858   000FAC  5010               	movf	??_getHSVval^0,w,c
  3859   000FAE  5E2C               	subwf	getHSVval@temp_622^0,f,c
  3860   000FB0  5011               	movf	(??_getHSVval+1)^0,w,c
  3861   000FB2  5A2D               	subwfb	(getHSVval@temp_622+1)^0,f,c
  3862   000FB4  5012               	movf	(??_getHSVval+2)^0,w,c
  3863   000FB6  5A2E               	subwfb	(getHSVval@temp_622+2)^0,f,c
  3864   000FB8  5013               	movf	(??_getHSVval+3)^0,w,c
  3865   000FBA  5A2F               	subwfb	(getHSVval@temp_622+3)^0,f,c
  3866   000FBC                     
  3867                           ;color.c: 162:                 temp *= (unsigned long)z;
  3868   000FBC  C02C  F001         	movff	getHSVval@temp_622,___lmul@multiplier
  3869   000FC0  C02D  F002         	movff	getHSVval@temp_622+1,___lmul@multiplier+1
  3870   000FC4  C02E  F003         	movff	getHSVval@temp_622+2,___lmul@multiplier+2
  3871   000FC8  C02F  F004         	movff	getHSVval@temp_622+3,___lmul@multiplier+3
  3872   000FCC  0E3C               	movlw	60
  3873   000FCE  6E05               	movwf	___lmul@multiplicand^0,c
  3874   000FD0  0E00               	movlw	0
  3875   000FD2  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3876   000FD4  0E00               	movlw	0
  3877   000FD6  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3878   000FD8  0E00               	movlw	0
  3879   000FDA  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3880   000FDC  EC48  F00E         	call	___lmul	;wreg free
  3881   000FE0  C001  F02C         	movff	?___lmul,getHSVval@temp_622
  3882   000FE4  C002  F02D         	movff	?___lmul+1,getHSVval@temp_622+1
  3883   000FE8  C003  F02E         	movff	?___lmul+2,getHSVval@temp_622+2
  3884   000FEC  C004  F02F         	movff	?___lmul+3,getHSVval@temp_622+3
  3885   000FF0                     
  3886                           ;color.c: 163:                 temp /= (unsigned long)C;
  3887   000FF0  C02C  F001         	movff	getHSVval@temp_622,___lldiv@dividend
  3888   000FF4  C02D  F002         	movff	getHSVval@temp_622+1,___lldiv@dividend+1
  3889   000FF8  C02E  F003         	movff	getHSVval@temp_622+2,___lldiv@dividend+2
  3890   000FFC  C02F  F004         	movff	getHSVval@temp_622+3,___lldiv@dividend+3
  3891   001000  C032  F005         	movff	getHSVval@C,___lldiv@divisor
  3892   001004  C033  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  3893   001008  6A07               	clrf	(___lldiv@divisor+2)^0,c
  3894   00100A  6A08               	clrf	(___lldiv@divisor+3)^0,c
  3895   00100C  EC3F  F00D         	call	___lldiv	;wreg free
  3896   001010  C001  F02C         	movff	?___lldiv,getHSVval@temp_622
  3897   001014  C002  F02D         	movff	?___lldiv+1,getHSVval@temp_622+1
  3898   001018  C003  F02E         	movff	?___lldiv+2,getHSVval@temp_622+2
  3899   00101C  C004  F02F         	movff	?___lldiv+3,getHSVval@temp_622+3
  3900   001020                     
  3901                           ;color.c: 164:                 H = (unsigned int)temp;
  3902   001020  C02C  F022         	movff	getHSVval@temp_622,getHSVval@H
  3903   001024  C02D  F023         	movff	getHSVval@temp_622+1,getHSVval@H+1
  3904   001028                     l4287:
  3905                           
  3906                           ;color.c: 167:         if (M == p2->G) {
  3907   001028  500F               	movf	getHSVval@p2^0,w,c
  3908   00102A  6ED9               	movwf	fsr2l,c
  3909   00102C  6ADA               	clrf	fsr2h,c
  3910   00102E  0E02               	movlw	2
  3911   001030  26D9               	addwf	fsr2l,f,c
  3912   001032  5030               	movf	getHSVval@M^0,w,c
  3913   001034  18DE               	xorwf	postinc2,w,c
  3914   001036  E107               	bnz	u3151
  3915   001038  5031               	movf	(getHSVval@M+1)^0,w,c
  3916   00103A  18DE               	xorwf	postinc2,w,c
  3917   00103C  A4D8               	btfss	status,2,c
  3918   00103E  EF23  F008         	goto	u3151
  3919   001042  EF25  F008         	goto	u3150
  3920   001046                     u3151:
  3921   001046  EFA8  F008         	goto	l4295
  3922   00104A                     u3150:
  3923   00104A                     
  3924                           ;color.c: 168:             if (p2->B >= p2->R) {
  3925   00104A  500F               	movf	getHSVval@p2^0,w,c
  3926   00104C  6ED9               	movwf	fsr2l,c
  3927   00104E  6ADA               	clrf	fsr2h,c
  3928   001050  500F               	movf	getHSVval@p2^0,w,c
  3929   001052  6EE1               	movwf	fsr1l,c
  3930   001054  6AE2               	clrf	fsr1h,c
  3931   001056  0E04               	movlw	4
  3932   001058  26E1               	addwf	fsr1l,f,c
  3933   00105A  50DE               	movf	postinc2,w,c
  3934   00105C  5CE6               	subwf	postinc1,w,c
  3935   00105E  50DE               	movf	postinc2,w,c
  3936   001060  58E6               	subwfb	postinc1,w,c
  3937   001062  A0D8               	btfss	status,0,c
  3938   001064  EF36  F008         	goto	u3161
  3939   001068  EF38  F008         	goto	u3160
  3940   00106C                     u3161:
  3941   00106C  EF71  F008         	goto	l4293
  3942   001070                     u3160:
  3943   001070                     
  3944                           ;color.c: 169:                 H = (z * (2 * C + (p2->B - p2->R))) / C;
  3945   001070  500F               	movf	getHSVval@p2^0,w,c
  3946   001072  6ED9               	movwf	fsr2l,c
  3947   001074  6ADA               	clrf	fsr2h,c
  3948   001076  0E04               	movlw	4
  3949   001078  26D9               	addwf	fsr2l,f,c
  3950   00107A  CFDE F010          	movff	postinc2,??_getHSVval
  3951   00107E  CFDD F011          	movff	postdec2,??_getHSVval+1
  3952   001082  500F               	movf	getHSVval@p2^0,w,c
  3953   001084  6ED9               	movwf	fsr2l,c
  3954   001086  6ADA               	clrf	fsr2h,c
  3955   001088  CFDE F012          	movff	postinc2,??_getHSVval+2
  3956   00108C  CFDD F013          	movff	postdec2,??_getHSVval+3
  3957   001090  C032  F014         	movff	getHSVval@C,??_getHSVval+4
  3958   001094  C033  F015         	movff	getHSVval@C+1,??_getHSVval+5
  3959   001098  90D8               	bcf	status,0,c
  3960   00109A  3614               	rlcf	(??_getHSVval+4)^0,f,c
  3961   00109C  3615               	rlcf	(??_getHSVval+5)^0,f,c
  3962   00109E  5012               	movf	(??_getHSVval+2)^0,w,c
  3963   0010A0  5C14               	subwf	(??_getHSVval+4)^0,w,c
  3964   0010A2  6E16               	movwf	(??_getHSVval+6)^0,c
  3965   0010A4  5013               	movf	(??_getHSVval+3)^0,w,c
  3966   0010A6  5815               	subwfb	(??_getHSVval+5)^0,w,c
  3967   0010A8  6E17               	movwf	(??_getHSVval+7)^0,c
  3968   0010AA  5010               	movf	??_getHSVval^0,w,c
  3969   0010AC  2416               	addwf	(??_getHSVval+6)^0,w,c
  3970   0010AE  6E01               	movwf	___wmul@multiplier^0,c
  3971   0010B0  5011               	movf	(??_getHSVval+1)^0,w,c
  3972   0010B2  2017               	addwfc	(??_getHSVval+7)^0,w,c
  3973   0010B4  6E02               	movwf	(___wmul@multiplier+1)^0,c
  3974   0010B6  0E00               	movlw	0
  3975   0010B8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3976   0010BA  0E3C               	movlw	60
  3977   0010BC  6E03               	movwf	___wmul@multiplicand^0,c
  3978   0010BE  EC3B  F011         	call	___wmul	;wreg free
  3979   0010C2  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3980   0010C6  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3981   0010CA  C032  F009         	movff	getHSVval@C,___lwdiv@divisor
  3982   0010CE  C033  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  3983   0010D2  ECD9  F00D         	call	___lwdiv	;wreg free
  3984   0010D6  C007  F022         	movff	?___lwdiv,getHSVval@H
  3985   0010DA  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  3986                           
  3987                           ;color.c: 170:             } else {
  3988   0010DE  EFA8  F008         	goto	l4295
  3989   0010E2                     l4293:
  3990                           
  3991                           ;color.c: 171:                 H = (z * (2 * C - (p2->R - p2->B))) / C;
  3992   0010E2  500F               	movf	getHSVval@p2^0,w,c
  3993   0010E4  6ED9               	movwf	fsr2l,c
  3994   0010E6  6ADA               	clrf	fsr2h,c
  3995   0010E8  0E04               	movlw	4
  3996   0010EA  26D9               	addwf	fsr2l,f,c
  3997   0010EC  CFDE F010          	movff	postinc2,??_getHSVval
  3998   0010F0  CFDD F011          	movff	postdec2,??_getHSVval+1
  3999   0010F4  500F               	movf	getHSVval@p2^0,w,c
  4000   0010F6  6ED9               	movwf	fsr2l,c
  4001   0010F8  6ADA               	clrf	fsr2h,c
  4002   0010FA  CFDE F012          	movff	postinc2,??_getHSVval+2
  4003   0010FE  CFDD F013          	movff	postdec2,??_getHSVval+3
  4004   001102  C032  F014         	movff	getHSVval@C,??_getHSVval+4
  4005   001106  C033  F015         	movff	getHSVval@C+1,??_getHSVval+5
  4006   00110A  90D8               	bcf	status,0,c
  4007   00110C  3614               	rlcf	(??_getHSVval+4)^0,f,c
  4008   00110E  3615               	rlcf	(??_getHSVval+5)^0,f,c
  4009   001110  5012               	movf	(??_getHSVval+2)^0,w,c
  4010   001112  5C14               	subwf	(??_getHSVval+4)^0,w,c
  4011   001114  6E16               	movwf	(??_getHSVval+6)^0,c
  4012   001116  5013               	movf	(??_getHSVval+3)^0,w,c
  4013   001118  5815               	subwfb	(??_getHSVval+5)^0,w,c
  4014   00111A  6E17               	movwf	(??_getHSVval+7)^0,c
  4015   00111C  5010               	movf	??_getHSVval^0,w,c
  4016   00111E  2416               	addwf	(??_getHSVval+6)^0,w,c
  4017   001120  6E01               	movwf	___wmul@multiplier^0,c
  4018   001122  5011               	movf	(??_getHSVval+1)^0,w,c
  4019   001124  2017               	addwfc	(??_getHSVval+7)^0,w,c
  4020   001126  6E02               	movwf	(___wmul@multiplier+1)^0,c
  4021   001128  0E00               	movlw	0
  4022   00112A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4023   00112C  0E3C               	movlw	60
  4024   00112E  6E03               	movwf	___wmul@multiplicand^0,c
  4025   001130  EC3B  F011         	call	___wmul	;wreg free
  4026   001134  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4027   001138  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4028   00113C  C032  F009         	movff	getHSVval@C,___lwdiv@divisor
  4029   001140  C033  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  4030   001144  ECD9  F00D         	call	___lwdiv	;wreg free
  4031   001148  C007  F022         	movff	?___lwdiv,getHSVval@H
  4032   00114C  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  4033   001150                     l4295:
  4034                           
  4035                           ;color.c: 174:         if (M == p2->B) {
  4036   001150  500F               	movf	getHSVval@p2^0,w,c
  4037   001152  6ED9               	movwf	fsr2l,c
  4038   001154  6ADA               	clrf	fsr2h,c
  4039   001156  0E04               	movlw	4
  4040   001158  26D9               	addwf	fsr2l,f,c
  4041   00115A  5030               	movf	getHSVval@M^0,w,c
  4042   00115C  18DE               	xorwf	postinc2,w,c
  4043   00115E  E107               	bnz	u3171
  4044   001160  5031               	movf	(getHSVval@M+1)^0,w,c
  4045   001162  18DE               	xorwf	postinc2,w,c
  4046   001164  A4D8               	btfss	status,2,c
  4047   001166  EFB7  F008         	goto	u3171
  4048   00116A  EFB9  F008         	goto	u3170
  4049   00116E                     u3171:
  4050   00116E  EF42  F009         	goto	l4303
  4051   001172                     u3170:
  4052   001172                     
  4053                           ;color.c: 175:             if (p2->R >= p2->G) {
  4054   001172  500F               	movf	getHSVval@p2^0,w,c
  4055   001174  6ED9               	movwf	fsr2l,c
  4056   001176  6ADA               	clrf	fsr2h,c
  4057   001178  0E02               	movlw	2
  4058   00117A  26D9               	addwf	fsr2l,f,c
  4059   00117C  500F               	movf	getHSVval@p2^0,w,c
  4060   00117E  6EE1               	movwf	fsr1l,c
  4061   001180  6AE2               	clrf	fsr1h,c
  4062   001182  50DE               	movf	postinc2,w,c
  4063   001184  5CE6               	subwf	postinc1,w,c
  4064   001186  50DE               	movf	postinc2,w,c
  4065   001188  58E6               	subwfb	postinc1,w,c
  4066   00118A  A0D8               	btfss	status,0,c
  4067   00118C  EFCA  F008         	goto	u3181
  4068   001190  EFCC  F008         	goto	u3180
  4069   001194                     u3181:
  4070   001194  EF08  F009         	goto	l4301
  4071   001198                     u3180:
  4072   001198                     
  4073                           ;color.c: 176:                 H = (z * (4 * C + (p2->R - p2->G))) / C;
  4074   001198  500F               	movf	getHSVval@p2^0,w,c
  4075   00119A  6ED9               	movwf	fsr2l,c
  4076   00119C  6ADA               	clrf	fsr2h,c
  4077   00119E  CFDE F010          	movff	postinc2,??_getHSVval
  4078   0011A2  CFDD F011          	movff	postdec2,??_getHSVval+1
  4079   0011A6  500F               	movf	getHSVval@p2^0,w,c
  4080   0011A8  6ED9               	movwf	fsr2l,c
  4081   0011AA  6ADA               	clrf	fsr2h,c
  4082   0011AC  0E02               	movlw	2
  4083   0011AE  26D9               	addwf	fsr2l,f,c
  4084   0011B0  CFDE F012          	movff	postinc2,??_getHSVval+2
  4085   0011B4  CFDD F013          	movff	postdec2,??_getHSVval+3
  4086   0011B8  C032  F014         	movff	getHSVval@C,??_getHSVval+4
  4087   0011BC  C033  F015         	movff	getHSVval@C+1,??_getHSVval+5
  4088   0011C0  90D8               	bcf	status,0,c
  4089   0011C2  3614               	rlcf	(??_getHSVval+4)^0,f,c
  4090   0011C4  3615               	rlcf	(??_getHSVval+5)^0,f,c
  4091   0011C6  90D8               	bcf	status,0,c
  4092   0011C8  3614               	rlcf	(??_getHSVval+4)^0,f,c
  4093   0011CA  3615               	rlcf	(??_getHSVval+5)^0,f,c
  4094   0011CC  5012               	movf	(??_getHSVval+2)^0,w,c
  4095   0011CE  5C14               	subwf	(??_getHSVval+4)^0,w,c
  4096   0011D0  6E16               	movwf	(??_getHSVval+6)^0,c
  4097   0011D2  5013               	movf	(??_getHSVval+3)^0,w,c
  4098   0011D4  5815               	subwfb	(??_getHSVval+5)^0,w,c
  4099   0011D6  6E17               	movwf	(??_getHSVval+7)^0,c
  4100   0011D8  5010               	movf	??_getHSVval^0,w,c
  4101   0011DA  2416               	addwf	(??_getHSVval+6)^0,w,c
  4102   0011DC  6E01               	movwf	___wmul@multiplier^0,c
  4103   0011DE  5011               	movf	(??_getHSVval+1)^0,w,c
  4104   0011E0  2017               	addwfc	(??_getHSVval+7)^0,w,c
  4105   0011E2  6E02               	movwf	(___wmul@multiplier+1)^0,c
  4106   0011E4  0E00               	movlw	0
  4107   0011E6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4108   0011E8  0E3C               	movlw	60
  4109   0011EA  6E03               	movwf	___wmul@multiplicand^0,c
  4110   0011EC  EC3B  F011         	call	___wmul	;wreg free
  4111   0011F0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4112   0011F4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4113   0011F8  C032  F009         	movff	getHSVval@C,___lwdiv@divisor
  4114   0011FC  C033  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  4115   001200  ECD9  F00D         	call	___lwdiv	;wreg free
  4116   001204  C007  F022         	movff	?___lwdiv,getHSVval@H
  4117   001208  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  4118                           
  4119                           ;color.c: 177:             } else {
  4120   00120C  EF42  F009         	goto	l4303
  4121   001210                     l4301:
  4122                           
  4123                           ;color.c: 178:                 H = (z * (4 * C - (p2->G - p2->R))) / C;
  4124   001210  500F               	movf	getHSVval@p2^0,w,c
  4125   001212  6ED9               	movwf	fsr2l,c
  4126   001214  6ADA               	clrf	fsr2h,c
  4127   001216  CFDE F010          	movff	postinc2,??_getHSVval
  4128   00121A  CFDD F011          	movff	postdec2,??_getHSVval+1
  4129   00121E  500F               	movf	getHSVval@p2^0,w,c
  4130   001220  6ED9               	movwf	fsr2l,c
  4131   001222  6ADA               	clrf	fsr2h,c
  4132   001224  0E02               	movlw	2
  4133   001226  26D9               	addwf	fsr2l,f,c
  4134   001228  CFDE F012          	movff	postinc2,??_getHSVval+2
  4135   00122C  CFDD F013          	movff	postdec2,??_getHSVval+3
  4136   001230  C032  F014         	movff	getHSVval@C,??_getHSVval+4
  4137   001234  C033  F015         	movff	getHSVval@C+1,??_getHSVval+5
  4138   001238  90D8               	bcf	status,0,c
  4139   00123A  3614               	rlcf	(??_getHSVval+4)^0,f,c
  4140   00123C  3615               	rlcf	(??_getHSVval+5)^0,f,c
  4141   00123E  90D8               	bcf	status,0,c
  4142   001240  3614               	rlcf	(??_getHSVval+4)^0,f,c
  4143   001242  3615               	rlcf	(??_getHSVval+5)^0,f,c
  4144   001244  5012               	movf	(??_getHSVval+2)^0,w,c
  4145   001246  5C14               	subwf	(??_getHSVval+4)^0,w,c
  4146   001248  6E16               	movwf	(??_getHSVval+6)^0,c
  4147   00124A  5013               	movf	(??_getHSVval+3)^0,w,c
  4148   00124C  5815               	subwfb	(??_getHSVval+5)^0,w,c
  4149   00124E  6E17               	movwf	(??_getHSVval+7)^0,c
  4150   001250  5010               	movf	??_getHSVval^0,w,c
  4151   001252  2416               	addwf	(??_getHSVval+6)^0,w,c
  4152   001254  6E01               	movwf	___wmul@multiplier^0,c
  4153   001256  5011               	movf	(??_getHSVval+1)^0,w,c
  4154   001258  2017               	addwfc	(??_getHSVval+7)^0,w,c
  4155   00125A  6E02               	movwf	(___wmul@multiplier+1)^0,c
  4156   00125C  0E00               	movlw	0
  4157   00125E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4158   001260  0E3C               	movlw	60
  4159   001262  6E03               	movwf	___wmul@multiplicand^0,c
  4160   001264  EC3B  F011         	call	___wmul	;wreg free
  4161   001268  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4162   00126C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4163   001270  C032  F009         	movff	getHSVval@C,___lwdiv@divisor
  4164   001274  C033  F00A         	movff	getHSVval@C+1,___lwdiv@divisor+1
  4165   001278  ECD9  F00D         	call	___lwdiv	;wreg free
  4166   00127C  C007  F022         	movff	?___lwdiv,getHSVval@H
  4167   001280  C008  F023         	movff	?___lwdiv+1,getHSVval@H+1
  4168   001284                     l4303:
  4169                           
  4170                           ;color.c: 183:     if (M == 0) {
  4171   001284  5030               	movf	getHSVval@M^0,w,c
  4172   001286  1031               	iorwf	(getHSVval@M+1)^0,w,c
  4173   001288  A4D8               	btfss	status,2,c
  4174   00128A  EF49  F009         	goto	u3191
  4175   00128E  EF4B  F009         	goto	u3190
  4176   001292                     u3191:
  4177   001292  EF51  F009         	goto	l4307
  4178   001296                     u3190:
  4179   001296                     
  4180                           ;color.c: 184:         S = 0;
  4181   001296  0E00               	movlw	0
  4182   001298  6E1D               	movwf	(getHSVval@S+1)^0,c
  4183   00129A  0E00               	movlw	0
  4184   00129C  6E1C               	movwf	getHSVval@S^0,c
  4185                           
  4186                           ;color.c: 185:     } else {
  4187   00129E  EF8D  F009         	goto	l4315
  4188   0012A2                     l4307:
  4189                           
  4190                           ;color.c: 187:         unsigned long temp;;color.c: 188:         temp = (unsigned long)C
      +                          ;
  4191   0012A2  C032  F024         	movff	getHSVval@C,getHSVval@temp_623
  4192   0012A6  C033  F025         	movff	getHSVval@C+1,getHSVval@temp_623+1
  4193   0012AA  6A26               	clrf	(getHSVval@temp_623+2)^0,c
  4194   0012AC  6A27               	clrf	(getHSVval@temp_623+3)^0,c
  4195   0012AE                     
  4196                           ;color.c: 189:         temp *= (unsigned long)z;
  4197   0012AE  C024  F001         	movff	getHSVval@temp_623,___lmul@multiplier
  4198   0012B2  C025  F002         	movff	getHSVval@temp_623+1,___lmul@multiplier+1
  4199   0012B6  C026  F003         	movff	getHSVval@temp_623+2,___lmul@multiplier+2
  4200   0012BA  C027  F004         	movff	getHSVval@temp_623+3,___lmul@multiplier+3
  4201   0012BE  0E3C               	movlw	60
  4202   0012C0  6E05               	movwf	___lmul@multiplicand^0,c
  4203   0012C2  0E00               	movlw	0
  4204   0012C4  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  4205   0012C6  0E00               	movlw	0
  4206   0012C8  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  4207   0012CA  0E00               	movlw	0
  4208   0012CC  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  4209   0012CE  EC48  F00E         	call	___lmul	;wreg free
  4210   0012D2  C001  F024         	movff	?___lmul,getHSVval@temp_623
  4211   0012D6  C002  F025         	movff	?___lmul+1,getHSVval@temp_623+1
  4212   0012DA  C003  F026         	movff	?___lmul+2,getHSVval@temp_623+2
  4213   0012DE  C004  F027         	movff	?___lmul+3,getHSVval@temp_623+3
  4214   0012E2                     
  4215                           ;color.c: 190:         temp /= (unsigned long)M;
  4216   0012E2  C024  F001         	movff	getHSVval@temp_623,___lldiv@dividend
  4217   0012E6  C025  F002         	movff	getHSVval@temp_623+1,___lldiv@dividend+1
  4218   0012EA  C026  F003         	movff	getHSVval@temp_623+2,___lldiv@dividend+2
  4219   0012EE  C027  F004         	movff	getHSVval@temp_623+3,___lldiv@dividend+3
  4220   0012F2  C030  F005         	movff	getHSVval@M,___lldiv@divisor
  4221   0012F6  C031  F006         	movff	getHSVval@M+1,___lldiv@divisor+1
  4222   0012FA  6A07               	clrf	(___lldiv@divisor+2)^0,c
  4223   0012FC  6A08               	clrf	(___lldiv@divisor+3)^0,c
  4224   0012FE  EC3F  F00D         	call	___lldiv	;wreg free
  4225   001302  C001  F024         	movff	?___lldiv,getHSVval@temp_623
  4226   001306  C002  F025         	movff	?___lldiv+1,getHSVval@temp_623+1
  4227   00130A  C003  F026         	movff	?___lldiv+2,getHSVval@temp_623+2
  4228   00130E  C004  F027         	movff	?___lldiv+3,getHSVval@temp_623+3
  4229   001312                     
  4230                           ;color.c: 191:         S = (unsigned int)temp;
  4231   001312  C024  F01C         	movff	getHSVval@temp_623,getHSVval@S
  4232   001316  C025  F01D         	movff	getHSVval@temp_623+1,getHSVval@S+1
  4233   00131A                     l4315:
  4234                           
  4235                           ;color.c: 194:     p1->H = H;
  4236   00131A  500E               	movf	getHSVval@p1^0,w,c
  4237   00131C  6ED9               	movwf	fsr2l,c
  4238   00131E  6ADA               	clrf	fsr2h,c
  4239   001320  C022  FFDE         	movff	getHSVval@H,postinc2
  4240   001324  C023  FFDD         	movff	getHSVval@H+1,postdec2
  4241   001328                     
  4242                           ;color.c: 195:     p1->S = S;
  4243   001328  500E               	movf	getHSVval@p1^0,w,c
  4244   00132A  6ED9               	movwf	fsr2l,c
  4245   00132C  6ADA               	clrf	fsr2h,c
  4246   00132E  0E02               	movlw	2
  4247   001330  26D9               	addwf	fsr2l,f,c
  4248   001332  C01C  FFDE         	movff	getHSVval@S,postinc2
  4249   001336  C01D  FFDD         	movff	getHSVval@S+1,postdec2
  4250   00133A                     
  4251                           ;color.c: 196:     p1->V = M;
  4252   00133A  500E               	movf	getHSVval@p1^0,w,c
  4253   00133C  6ED9               	movwf	fsr2l,c
  4254   00133E  6ADA               	clrf	fsr2h,c
  4255   001340  0E04               	movlw	4
  4256   001342  26D9               	addwf	fsr2l,f,c
  4257   001344  C030  FFDE         	movff	getHSVval@M,postinc2
  4258   001348  C031  FFDD         	movff	getHSVval@M+1,postdec2
  4259   00134C  0012               	return		;funcret
  4260   00134E                     __end_of_getHSVval:
  4261                           	callstack 0
  4262                           
  4263 ;; *************** function _minRGB *****************
  4264 ;; Defined at:
  4265 ;;		line 123 in file "color.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;  p               1    6[COMRAM] PTR struct RGBC_val
  4268 ;;		 -> main@measured_colour(8), 
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  2    6[COMRAM] unsigned int 
  4273 ;; Registers used:
  4274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4283 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4284 ;;Total ram usage:        4 bytes
  4285 ;; Hardware stack levels used: 1
  4286 ;; Hardware stack levels required when called: 2
  4287 ;; This function calls:
  4288 ;;		_min
  4289 ;; This function is called by:
  4290 ;;		_getHSVval
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           	psect	text24
  4295   001E6C                     __ptext24:
  4296                           	callstack 0
  4297   001E6C                     _minRGB:
  4298                           	callstack 27
  4299   001E6C                     
  4300                           ;color.c: 123: unsigned int minRGB(struct RGBC_val *p);color.c: 124: {;color.c: 125:    
      +                           return(min(min(p->R,p->G),p->B));
  4301   001E6C  5007               	movf	minRGB@p^0,w,c
  4302   001E6E  6ED9               	movwf	fsr2l,c
  4303   001E70  6ADA               	clrf	fsr2h,c
  4304   001E72  CFDE F001          	movff	postinc2,min@a
  4305   001E76  CFDD F002          	movff	postdec2,min@a+1
  4306   001E7A  5007               	movf	minRGB@p^0,w,c
  4307   001E7C  6ED9               	movwf	fsr2l,c
  4308   001E7E  6ADA               	clrf	fsr2h,c
  4309   001E80  0E02               	movlw	2
  4310   001E82  26D9               	addwf	fsr2l,f,c
  4311   001E84  CFDE F003          	movff	postinc2,min@b
  4312   001E88  CFDD F004          	movff	postdec2,min@b+1
  4313   001E8C  ECCB  F010         	call	_min	;wreg free
  4314   001E90  C001  F009         	movff	?_min,_minRGB$3151
  4315   001E94  C002  F00A         	movff	?_min+1,_minRGB$3151+1
  4316                           
  4317                           ;color.c: 123: unsigned int minRGB(struct RGBC_val *p);color.c: 124: {;color.c: 125:    
      +                           return(min(min(p->R,p->G),p->B));
  4318   001E98  C009  F001         	movff	_minRGB$3151,min@a
  4319   001E9C  C00A  F002         	movff	_minRGB$3151+1,min@a+1
  4320   001EA0  5007               	movf	minRGB@p^0,w,c
  4321   001EA2  6ED9               	movwf	fsr2l,c
  4322   001EA4  6ADA               	clrf	fsr2h,c
  4323   001EA6  0E04               	movlw	4
  4324   001EA8  26D9               	addwf	fsr2l,f,c
  4325   001EAA  CFDE F003          	movff	postinc2,min@b
  4326   001EAE  CFDD F004          	movff	postdec2,min@b+1
  4327   001EB2  ECCB  F010         	call	_min	;wreg free
  4328   001EB6  C001  F007         	movff	?_min,?_minRGB
  4329   001EBA  C002  F008         	movff	?_min+1,?_minRGB+1
  4330   001EBE  0012               	return		;funcret
  4331   001EC0                     __end_of_minRGB:
  4332                           	callstack 0
  4333                           
  4334 ;; *************** function _min *****************
  4335 ;; Defined at:
  4336 ;;		line 111 in file "color.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  a               2    0[COMRAM] unsigned int 
  4339 ;;  b               2    2[COMRAM] unsigned int 
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  min_val         2    4[COMRAM] unsigned int 
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  2    0[COMRAM] unsigned int 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2, status,0
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4351 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4352 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;Total ram usage:        6 bytes
  4356 ;; Hardware stack levels used: 1
  4357 ;; Hardware stack levels required when called: 1
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_minRGB
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text25
  4366   002196                     __ptext25:
  4367                           	callstack 0
  4368   002196                     _min:
  4369                           	callstack 27
  4370   002196                     
  4371                           ;color.c: 111: unsigned int min(unsigned int a, unsigned int b);color.c: 112: {;color.c:
      +                           113:     unsigned int min_val = b;
  4372   002196  C003  F005         	movff	min@b,min@min_val
  4373   00219A  C004  F006         	movff	min@b+1,min@min_val+1
  4374   00219E                     
  4375                           ;color.c: 114:     if (a < b) {min_val = a;}
  4376   00219E  5003               	movf	min@b^0,w,c
  4377   0021A0  5C01               	subwf	min@a^0,w,c
  4378   0021A2  5004               	movf	(min@b+1)^0,w,c
  4379   0021A4  5802               	subwfb	(min@a+1)^0,w,c
  4380   0021A6  B0D8               	btfsc	status,0,c
  4381   0021A8  EFD8  F010         	goto	u1761
  4382   0021AC  EFDA  F010         	goto	u1760
  4383   0021B0                     u1761:
  4384   0021B0  EFDE  F010         	goto	l97
  4385   0021B4                     u1760:
  4386   0021B4  C001  F005         	movff	min@a,min@min_val
  4387   0021B8  C002  F006         	movff	min@a+1,min@min_val+1
  4388   0021BC                     l97:
  4389                           
  4390                           ;color.c: 115:     return min_val;
  4391   0021BC  C005  F001         	movff	min@min_val,?_min
  4392   0021C0  C006  F002         	movff	min@min_val+1,?_min+1
  4393   0021C4  0012               	return		;funcret
  4394   0021C6                     __end_of_min:
  4395                           	callstack 0
  4396                           
  4397 ;; *************** function _maxRGB *****************
  4398 ;; Defined at:
  4399 ;;		line 118 in file "color.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  p               1    6[COMRAM] PTR struct RGBC_val
  4402 ;;		 -> main@measured_colour(8), 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;		None
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  2    6[COMRAM] unsigned int 
  4407 ;; Registers used:
  4408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4414 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4415 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4417 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4418 ;;Total ram usage:        4 bytes
  4419 ;; Hardware stack levels used: 1
  4420 ;; Hardware stack levels required when called: 2
  4421 ;; This function calls:
  4422 ;;		_max
  4423 ;; This function is called by:
  4424 ;;		_getHSVval
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text26
  4429   001EC0                     __ptext26:
  4430                           	callstack 0
  4431   001EC0                     _maxRGB:
  4432                           	callstack 27
  4433   001EC0                     
  4434                           ;color.c: 118: unsigned int maxRGB(struct RGBC_val *p);color.c: 119: {;color.c: 120:    
      +                           return(max(max(p->R,p->G),p->B));
  4435   001EC0  5007               	movf	maxRGB@p^0,w,c
  4436   001EC2  6ED9               	movwf	fsr2l,c
  4437   001EC4  6ADA               	clrf	fsr2h,c
  4438   001EC6  CFDE F001          	movff	postinc2,max@a
  4439   001ECA  CFDD F002          	movff	postdec2,max@a+1
  4440   001ECE  5007               	movf	maxRGB@p^0,w,c
  4441   001ED0  6ED9               	movwf	fsr2l,c
  4442   001ED2  6ADA               	clrf	fsr2h,c
  4443   001ED4  0E02               	movlw	2
  4444   001ED6  26D9               	addwf	fsr2l,f,c
  4445   001ED8  CFDE F003          	movff	postinc2,max@b
  4446   001EDC  CFDD F004          	movff	postdec2,max@b+1
  4447   001EE0  ECE3  F010         	call	_max	;wreg free
  4448   001EE4  C001  F009         	movff	?_max,_maxRGB$3150
  4449   001EE8  C002  F00A         	movff	?_max+1,_maxRGB$3150+1
  4450                           
  4451                           ;color.c: 118: unsigned int maxRGB(struct RGBC_val *p);color.c: 119: {;color.c: 120:    
      +                           return(max(max(p->R,p->G),p->B));
  4452   001EEC  C009  F001         	movff	_maxRGB$3150,max@a
  4453   001EF0  C00A  F002         	movff	_maxRGB$3150+1,max@a+1
  4454   001EF4  5007               	movf	maxRGB@p^0,w,c
  4455   001EF6  6ED9               	movwf	fsr2l,c
  4456   001EF8  6ADA               	clrf	fsr2h,c
  4457   001EFA  0E04               	movlw	4
  4458   001EFC  26D9               	addwf	fsr2l,f,c
  4459   001EFE  CFDE F003          	movff	postinc2,max@b
  4460   001F02  CFDD F004          	movff	postdec2,max@b+1
  4461   001F06  ECE3  F010         	call	_max	;wreg free
  4462   001F0A  C001  F007         	movff	?_max,?_maxRGB
  4463   001F0E  C002  F008         	movff	?_max+1,?_maxRGB+1
  4464   001F12  0012               	return		;funcret
  4465   001F14                     __end_of_maxRGB:
  4466                           	callstack 0
  4467                           
  4468 ;; *************** function _max *****************
  4469 ;; Defined at:
  4470 ;;		line 104 in file "color.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  a               2    0[COMRAM] unsigned int 
  4473 ;;  b               2    2[COMRAM] unsigned int 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  max_val         2    4[COMRAM] unsigned int 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  2    0[COMRAM] unsigned int 
  4478 ;; Registers used:
  4479 ;;		wreg, status,2, status,0
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4488 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4489 ;;Total ram usage:        6 bytes
  4490 ;; Hardware stack levels used: 1
  4491 ;; Hardware stack levels required when called: 1
  4492 ;; This function calls:
  4493 ;;		Nothing
  4494 ;; This function is called by:
  4495 ;;		_maxRGB
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	text27
  4500   0021C6                     __ptext27:
  4501                           	callstack 0
  4502   0021C6                     _max:
  4503                           	callstack 27
  4504   0021C6                     
  4505                           ;color.c: 104: unsigned int max(unsigned int a, unsigned int b);color.c: 105: {;color.c:
      +                           106:     unsigned int max_val = b;
  4506   0021C6  C003  F005         	movff	max@b,max@max_val
  4507   0021CA  C004  F006         	movff	max@b+1,max@max_val+1
  4508   0021CE                     
  4509                           ;color.c: 107:     if (a > b) {max_val = a;}
  4510   0021CE  5001               	movf	max@a^0,w,c
  4511   0021D0  5C03               	subwf	max@b^0,w,c
  4512   0021D2  5002               	movf	(max@a+1)^0,w,c
  4513   0021D4  5804               	subwfb	(max@b+1)^0,w,c
  4514   0021D6  B0D8               	btfsc	status,0,c
  4515   0021D8  EFF0  F010         	goto	u1751
  4516   0021DC  EFF2  F010         	goto	u1750
  4517   0021E0                     u1751:
  4518   0021E0  EFF6  F010         	goto	l93
  4519   0021E4                     u1750:
  4520   0021E4  C001  F005         	movff	max@a,max@max_val
  4521   0021E8  C002  F006         	movff	max@a+1,max@max_val+1
  4522   0021EC                     l93:
  4523                           
  4524                           ;color.c: 108:     return max_val;
  4525   0021EC  C005  F001         	movff	max@max_val,?_max
  4526   0021F0  C006  F002         	movff	max@max_val+1,?_max+1
  4527   0021F4  0012               	return		;funcret
  4528   0021F6                     __end_of_max:
  4529                           	callstack 0
  4530                           
  4531 ;; *************** function ___wmul *****************
  4532 ;; Defined at:
  4533 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  multiplier      2    0[COMRAM] unsigned int 
  4536 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  product         2    4[COMRAM] unsigned int 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  2    0[COMRAM] unsigned int 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, status,0, prodl, prodh
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4548 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4549 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4551 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4552 ;;Total ram usage:        6 bytes
  4553 ;; Hardware stack levels used: 1
  4554 ;; Hardware stack levels required when called: 1
  4555 ;; This function calls:
  4556 ;;		Nothing
  4557 ;; This function is called by:
  4558 ;;		_getHSVval
  4559 ;;		_setMotorPWM
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text28
  4564   002276                     __ptext28:
  4565                           	callstack 0
  4566   002276                     ___wmul:
  4567                           	callstack 28
  4568   002276  5001               	movf	___wmul@multiplier^0,w,c
  4569   002278  0203               	mulwf	___wmul@multiplicand^0,c
  4570   00227A  CFF3 F005          	movff	prodl,___wmul@product
  4571   00227E  CFF4 F006          	movff	prodh,___wmul@product+1
  4572   002282  5001               	movf	___wmul@multiplier^0,w,c
  4573   002284  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4574   002286  50F3               	movf	243,w,c
  4575   002288  2606               	addwf	(___wmul@product+1)^0,f,c
  4576   00228A  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4577   00228C  0203               	mulwf	___wmul@multiplicand^0,c
  4578   00228E  50F3               	movf	243,w,c
  4579   002290  2606               	addwf	(___wmul@product+1)^0,f,c
  4580   002292  C005  F001         	movff	___wmul@product,?___wmul
  4581   002296  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4582   00229A  0012               	return		;funcret
  4583   00229C                     __end_of___wmul:
  4584                           	callstack 0
  4585                           
  4586 ;; *************** function ___lwdiv *****************
  4587 ;; Defined at:
  4588 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  dividend        2    6[COMRAM] unsigned int 
  4591 ;;  divisor         2    8[COMRAM] unsigned int 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  quotient        2   11[COMRAM] unsigned int 
  4594 ;;  counter         1   10[COMRAM] unsigned char 
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  2    6[COMRAM] unsigned int 
  4597 ;; Registers used:
  4598 ;;		wreg, status,2, status,0
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4604 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4605 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4607 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4608 ;;Total ram usage:        7 bytes
  4609 ;; Hardware stack levels used: 1
  4610 ;; Hardware stack levels required when called: 1
  4611 ;; This function calls:
  4612 ;;		Nothing
  4613 ;; This function is called by:
  4614 ;;		_getHSVval
  4615 ;;		_vfpfcnvrt
  4616 ;;		_setMotorPWM
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           	psect	text29
  4621   001BB2                     __ptext29:
  4622                           	callstack 0
  4623   001BB2                     ___lwdiv:
  4624                           	callstack 25
  4625   001BB2  0E00               	movlw	0
  4626   001BB4  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  4627   001BB6  0E00               	movlw	0
  4628   001BB8  6E0C               	movwf	___lwdiv@quotient^0,c
  4629   001BBA  5009               	movf	___lwdiv@divisor^0,w,c
  4630   001BBC  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4631   001BBE  B4D8               	btfsc	status,2,c
  4632   001BC0  EFE4  F00D         	goto	u2701
  4633   001BC4  EFE6  F00D         	goto	u2700
  4634   001BC8                     u2701:
  4635   001BC8  EF0E  F00E         	goto	l1187
  4636   001BCC                     u2700:
  4637   001BCC  0E01               	movlw	1
  4638   001BCE  6E0B               	movwf	___lwdiv@counter^0,c
  4639   001BD0  EFEE  F00D         	goto	l3849
  4640   001BD4                     l3847:
  4641   001BD4  90D8               	bcf	status,0,c
  4642   001BD6  3609               	rlcf	___lwdiv@divisor^0,f,c
  4643   001BD8  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4644   001BDA  2A0B               	incf	___lwdiv@counter^0,f,c
  4645   001BDC                     l3849:
  4646   001BDC  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  4647   001BDE  EFF3  F00D         	goto	u2711
  4648   001BE2  EFF5  F00D         	goto	u2710
  4649   001BE6                     u2711:
  4650   001BE6  EFEA  F00D         	goto	l3847
  4651   001BEA                     u2710:
  4652   001BEA                     l3851:
  4653   001BEA  90D8               	bcf	status,0,c
  4654   001BEC  360C               	rlcf	___lwdiv@quotient^0,f,c
  4655   001BEE  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4656   001BF0  5009               	movf	___lwdiv@divisor^0,w,c
  4657   001BF2  5C07               	subwf	___lwdiv@dividend^0,w,c
  4658   001BF4  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4659   001BF6  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4660   001BF8  A0D8               	btfss	status,0,c
  4661   001BFA  EF01  F00E         	goto	u2721
  4662   001BFE  EF03  F00E         	goto	u2720
  4663   001C02                     u2721:
  4664   001C02  EF08  F00E         	goto	l3859
  4665   001C06                     u2720:
  4666   001C06  5009               	movf	___lwdiv@divisor^0,w,c
  4667   001C08  5E07               	subwf	___lwdiv@dividend^0,f,c
  4668   001C0A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4669   001C0C  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4670   001C0E  800C               	bsf	___lwdiv@quotient^0,0,c
  4671   001C10                     l3859:
  4672   001C10  90D8               	bcf	status,0,c
  4673   001C12  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4674   001C14  3209               	rrcf	___lwdiv@divisor^0,f,c
  4675   001C16  2E0B               	decfsz	___lwdiv@counter^0,f,c
  4676   001C18  EFF5  F00D         	goto	l3851
  4677   001C1C                     l1187:
  4678   001C1C  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  4679   001C20  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4680   001C24  0012               	return		;funcret
  4681   001C26                     __end_of___lwdiv:
  4682                           	callstack 0
  4683                           
  4684 ;; *************** function ___lmul *****************
  4685 ;; Defined at:
  4686 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  multiplier      4    0[COMRAM] unsigned long 
  4689 ;;  multiplicand    4    4[COMRAM] unsigned long 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  product         4    8[COMRAM] unsigned long 
  4692 ;; Return value:  Size  Location     Type
  4693 ;;                  4    0[COMRAM] unsigned long 
  4694 ;; Registers used:
  4695 ;;		wreg, status,2, status,0
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4701 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4702 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4704 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4705 ;;Total ram usage:       12 bytes
  4706 ;; Hardware stack levels used: 1
  4707 ;; Hardware stack levels required when called: 1
  4708 ;; This function calls:
  4709 ;;		Nothing
  4710 ;; This function is called by:
  4711 ;;		_getHSVval
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text30
  4716   001C90                     __ptext30:
  4717                           	callstack 0
  4718   001C90                     ___lmul:
  4719                           	callstack 28
  4720   001C90  0E00               	movlw	0
  4721   001C92  6E09               	movwf	___lmul@product^0,c
  4722   001C94  0E00               	movlw	0
  4723   001C96  6E0A               	movwf	(___lmul@product+1)^0,c
  4724   001C98  0E00               	movlw	0
  4725   001C9A  6E0B               	movwf	(___lmul@product+2)^0,c
  4726   001C9C  0E00               	movlw	0
  4727   001C9E  6E0C               	movwf	(___lmul@product+3)^0,c
  4728   001CA0                     l3115:
  4729   001CA0  A001               	btfss	___lmul@multiplier^0,0,c
  4730   001CA2  EF55  F00E         	goto	u1821
  4731   001CA6  EF57  F00E         	goto	u1820
  4732   001CAA                     u1821:
  4733   001CAA  EF5F  F00E         	goto	l3119
  4734   001CAE                     u1820:
  4735   001CAE  5005               	movf	___lmul@multiplicand^0,w,c
  4736   001CB0  2609               	addwf	___lmul@product^0,f,c
  4737   001CB2  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  4738   001CB4  220A               	addwfc	(___lmul@product+1)^0,f,c
  4739   001CB6  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  4740   001CB8  220B               	addwfc	(___lmul@product+2)^0,f,c
  4741   001CBA  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  4742   001CBC  220C               	addwfc	(___lmul@product+3)^0,f,c
  4743   001CBE                     l3119:
  4744   001CBE  90D8               	bcf	status,0,c
  4745   001CC0  3605               	rlcf	___lmul@multiplicand^0,f,c
  4746   001CC2  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  4747   001CC4  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  4748   001CC6  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  4749   001CC8  90D8               	bcf	status,0,c
  4750   001CCA  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  4751   001CCC  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  4752   001CCE  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  4753   001CD0  3201               	rrcf	___lmul@multiplier^0,f,c
  4754   001CD2  5001               	movf	___lmul@multiplier^0,w,c
  4755   001CD4  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  4756   001CD6  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  4757   001CD8  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  4758   001CDA  A4D8               	btfss	status,2,c
  4759   001CDC  EF72  F00E         	goto	u1831
  4760   001CE0  EF74  F00E         	goto	u1830
  4761   001CE4                     u1831:
  4762   001CE4  EF50  F00E         	goto	l3115
  4763   001CE8                     u1830:
  4764   001CE8  C009  F001         	movff	___lmul@product,?___lmul
  4765   001CEC  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  4766   001CF0  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  4767   001CF4  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  4768   001CF8  0012               	return		;funcret
  4769   001CFA                     __end_of___lmul:
  4770                           	callstack 0
  4771                           
  4772 ;; *************** function ___lldiv *****************
  4773 ;; Defined at:
  4774 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  dividend        4    0[COMRAM] unsigned long 
  4777 ;;  divisor         4    4[COMRAM] unsigned long 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  quotient        4    8[COMRAM] unsigned long 
  4780 ;;  counter         1   12[COMRAM] unsigned char 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  4    0[COMRAM] unsigned long 
  4783 ;; Registers used:
  4784 ;;		wreg, status,2, status,0
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4790 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4791 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4793 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4794 ;;Total ram usage:       13 bytes
  4795 ;; Hardware stack levels used: 1
  4796 ;; Hardware stack levels required when called: 1
  4797 ;; This function calls:
  4798 ;;		Nothing
  4799 ;; This function is called by:
  4800 ;;		_getHSVval
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           	psect	text31
  4805   001A7E                     __ptext31:
  4806                           	callstack 0
  4807   001A7E                     ___lldiv:
  4808                           	callstack 28
  4809   001A7E  0E00               	movlw	0
  4810   001A80  6E09               	movwf	___lldiv@quotient^0,c
  4811   001A82  0E00               	movlw	0
  4812   001A84  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  4813   001A86  0E00               	movlw	0
  4814   001A88  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  4815   001A8A  0E00               	movlw	0
  4816   001A8C  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  4817   001A8E  5005               	movf	___lldiv@divisor^0,w,c
  4818   001A90  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  4819   001A92  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  4820   001A94  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  4821   001A96  B4D8               	btfsc	status,2,c
  4822   001A98  EF50  F00D         	goto	u1841
  4823   001A9C  EF52  F00D         	goto	u1840
  4824   001AA0                     u1841:
  4825   001AA0  EF88  F00D         	goto	l723
  4826   001AA4                     u1840:
  4827   001AA4  0E01               	movlw	1
  4828   001AA6  6E0D               	movwf	___lldiv@counter^0,c
  4829   001AA8  EF5C  F00D         	goto	l3131
  4830   001AAC                     l3129:
  4831   001AAC  90D8               	bcf	status,0,c
  4832   001AAE  3605               	rlcf	___lldiv@divisor^0,f,c
  4833   001AB0  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  4834   001AB2  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  4835   001AB4  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  4836   001AB6  2A0D               	incf	___lldiv@counter^0,f,c
  4837   001AB8                     l3131:
  4838   001AB8  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  4839   001ABA  EF61  F00D         	goto	u1851
  4840   001ABE  EF63  F00D         	goto	u1850
  4841   001AC2                     u1851:
  4842   001AC2  EF56  F00D         	goto	l3129
  4843   001AC6                     u1850:
  4844   001AC6                     l3133:
  4845   001AC6  90D8               	bcf	status,0,c
  4846   001AC8  3609               	rlcf	___lldiv@quotient^0,f,c
  4847   001ACA  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  4848   001ACC  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  4849   001ACE  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  4850   001AD0  5005               	movf	___lldiv@divisor^0,w,c
  4851   001AD2  5C01               	subwf	___lldiv@dividend^0,w,c
  4852   001AD4  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4853   001AD6  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  4854   001AD8  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4855   001ADA  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  4856   001ADC  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4857   001ADE  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  4858   001AE0  A0D8               	btfss	status,0,c
  4859   001AE2  EF75  F00D         	goto	u1861
  4860   001AE6  EF77  F00D         	goto	u1860
  4861   001AEA                     u1861:
  4862   001AEA  EF80  F00D         	goto	l3141
  4863   001AEE                     u1860:
  4864   001AEE  5005               	movf	___lldiv@divisor^0,w,c
  4865   001AF0  5E01               	subwf	___lldiv@dividend^0,f,c
  4866   001AF2  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4867   001AF4  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  4868   001AF6  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4869   001AF8  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  4870   001AFA  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4871   001AFC  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  4872   001AFE  8009               	bsf	___lldiv@quotient^0,0,c
  4873   001B00                     l3141:
  4874   001B00  90D8               	bcf	status,0,c
  4875   001B02  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  4876   001B04  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  4877   001B06  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  4878   001B08  3205               	rrcf	___lldiv@divisor^0,f,c
  4879   001B0A  2E0D               	decfsz	___lldiv@counter^0,f,c
  4880   001B0C  EF63  F00D         	goto	l3133
  4881   001B10                     l723:
  4882   001B10  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4883   001B14  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4884   001B18  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4885   001B1C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4886   001B20  0012               	return		;funcret
  4887   001B22                     __end_of___lldiv:
  4888                           	callstack 0
  4889                           
  4890 ;; *************** function _color_click_init *****************
  4891 ;; Defined at:
  4892 ;;		line 4 in file "color.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;		None
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4910 ;;Total ram usage:        1 bytes
  4911 ;; Hardware stack levels used: 1
  4912 ;; Hardware stack levels required when called: 4
  4913 ;; This function calls:
  4914 ;;		_I2C_2_Master_Init
  4915 ;;		_color_writetoaddr
  4916 ;; This function is called by:
  4917 ;;		_main
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           	psect	text32
  4922   002162                     __ptext32:
  4923                           	callstack 0
  4924   002162                     _color_click_init:
  4925                           	callstack 26
  4926   002162                     
  4927                           ;color.c: 7:     I2C_2_Master_Init();
  4928   002162  EC12  F011         	call	_I2C_2_Master_Init	;wreg free
  4929   002166                     
  4930                           ;color.c: 10:   color_writetoaddr(0x00, 0x01);
  4931   002166  0E01               	movlw	1
  4932   002168  6E03               	movwf	color_writetoaddr@value^0,c
  4933   00216A  0E00               	movlw	0
  4934   00216C  EC60  F011         	call	_color_writetoaddr
  4935   002170                     
  4936                           ;color.c: 11:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4937   002170  0E3F               	movlw	63
  4938   002172  6E05               	movwf	??_color_click_init^0,c
  4939   002174  0E55               	movlw	85
  4940   002176                     u3317:
  4941   002176  2EE8               	decfsz	wreg,f,c
  4942   002178  D7FE               	bra	u3317
  4943   00217A  2E05               	decfsz	??_color_click_init^0,f,c
  4944   00217C  D7FC               	bra	u3317
  4945   00217E  0000               	nop	
  4946   002180                     
  4947                           ;color.c: 14:  color_writetoaddr(0x00, 0x03);
  4948   002180  0E03               	movlw	3
  4949   002182  6E03               	movwf	color_writetoaddr@value^0,c
  4950   002184  0E00               	movlw	0
  4951   002186  EC60  F011         	call	_color_writetoaddr
  4952   00218A                     
  4953                           ;color.c: 17:  color_writetoaddr(0x01, 0xD5);
  4954   00218A  0ED5               	movlw	213
  4955   00218C  6E03               	movwf	color_writetoaddr@value^0,c
  4956   00218E  0E01               	movlw	1
  4957   002190  EC60  F011         	call	_color_writetoaddr
  4958   002194  0012               	return		;funcret
  4959   002196                     __end_of_color_click_init:
  4960                           	callstack 0
  4961                           
  4962 ;; *************** function _color_writetoaddr *****************
  4963 ;; Defined at:
  4964 ;;		line 20 in file "color.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;  address         1    wreg     unsigned char 
  4967 ;;  value           1    2[COMRAM] unsigned char 
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;  address         1    3[COMRAM] unsigned char 
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      void 
  4972 ;; Registers used:
  4973 ;;		wreg, status,2, status,0, cstack
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4979 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4983 ;;Total ram usage:        2 bytes
  4984 ;; Hardware stack levels used: 1
  4985 ;; Hardware stack levels required when called: 3
  4986 ;; This function calls:
  4987 ;;		_I2C_2_Master_Start
  4988 ;;		_I2C_2_Master_Stop
  4989 ;;		_I2C_2_Master_Write
  4990 ;; This function is called by:
  4991 ;;		_color_click_init
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text33
  4996   0022C0                     __ptext33:
  4997                           	callstack 0
  4998   0022C0                     _color_writetoaddr:
  4999                           	callstack 26
  5000                           
  5001                           ;incstack = 0
  5002                           ;color_writetoaddr@address stored from wreg
  5003   0022C0  6E04               	movwf	color_writetoaddr@address^0,c
  5004   0022C2                     
  5005                           ;color.c: 21:     I2C_2_Master_Start();
  5006   0022C2  ECB0  F011         	call	_I2C_2_Master_Start	;wreg free
  5007                           
  5008                           ;color.c: 22:     I2C_2_Master_Write(0x52 | 0x00);
  5009   0022C6  0E52               	movlw	82
  5010   0022C8  EC94  F011         	call	_I2C_2_Master_Write
  5011                           
  5012                           ;color.c: 23:     I2C_2_Master_Write(0x80 | address);
  5013   0022CC  5004               	movf	color_writetoaddr@address^0,w,c
  5014   0022CE  0980               	iorlw	128
  5015   0022D0  EC94  F011         	call	_I2C_2_Master_Write
  5016                           
  5017                           ;color.c: 24:     I2C_2_Master_Write(value);
  5018   0022D4  5003               	movf	color_writetoaddr@value^0,w,c
  5019   0022D6  EC94  F011         	call	_I2C_2_Master_Write
  5020                           
  5021                           ;color.c: 25:     I2C_2_Master_Stop();
  5022   0022DA  ECAB  F011         	call	_I2C_2_Master_Stop	;wreg free
  5023   0022DE  0012               	return		;funcret
  5024   0022E0                     __end_of_color_writetoaddr:
  5025                           	callstack 0
  5026                           
  5027 ;; *************** function _I2C_2_Master_Write *****************
  5028 ;; Defined at:
  5029 ;;		line 45 in file "i2c.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;  data_byte       1    wreg     unsigned char 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  data_byte       1    1[COMRAM] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  1    wreg      void 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5046 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5047 ;;Total ram usage:        1 bytes
  5048 ;; Hardware stack levels used: 1
  5049 ;; Hardware stack levels required when called: 2
  5050 ;; This function calls:
  5051 ;;		_I2C_2_Master_Idle
  5052 ;; This function is called by:
  5053 ;;		_color_writetoaddr
  5054 ;;		_color_read_Red
  5055 ;;		_color_read_Blue
  5056 ;;		_color_read_Green
  5057 ;;		_color_read_Clear
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text34
  5062   002328                     __ptext34:
  5063                           	callstack 0
  5064   002328                     _I2C_2_Master_Write:
  5065                           	callstack 26
  5066                           
  5067                           ;incstack = 0
  5068                           ;I2C_2_Master_Write@data_byte stored from wreg
  5069   002328  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  5070   00232A                     
  5071                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5072   00232A  EC27  F011         	call	_I2C_2_Master_Idle	;wreg free
  5073   00232E                     
  5074                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5075   00232E  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5076   002332  0012               	return		;funcret
  5077   002334                     __end_of_I2C_2_Master_Write:
  5078                           	callstack 0
  5079                           
  5080 ;; *************** function _I2C_2_Master_Stop *****************
  5081 ;; Defined at:
  5082 ;;		line 39 in file "i2c.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;		None
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;		None
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  1    wreg      void 
  5089 ;; Registers used:
  5090 ;;		wreg, status,2, status,0, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5100 ;;Total ram usage:        0 bytes
  5101 ;; Hardware stack levels used: 1
  5102 ;; Hardware stack levels required when called: 2
  5103 ;; This function calls:
  5104 ;;		_I2C_2_Master_Idle
  5105 ;; This function is called by:
  5106 ;;		_color_writetoaddr
  5107 ;;		_color_read_Red
  5108 ;;		_color_read_Blue
  5109 ;;		_color_read_Green
  5110 ;;		_color_read_Clear
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text35
  5115   002356                     __ptext35:
  5116                           	callstack 0
  5117   002356                     _I2C_2_Master_Stop:
  5118                           	callstack 26
  5119   002356                     
  5120                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5121   002356  EC27  F011         	call	_I2C_2_Master_Idle	;wreg free
  5122   00235A                     
  5123                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5124   00235A  010E               	movlb	14	; () banked
  5125   00235C  85DA               	bsf	218,2,b	;volatile
  5126   00235E                     
  5127                           ; BSR set to: 14
  5128   00235E  0012               	return		;funcret
  5129   002360                     __end_of_I2C_2_Master_Stop:
  5130                           	callstack 0
  5131                           
  5132 ;; *************** function _I2C_2_Master_Start *****************
  5133 ;; Defined at:
  5134 ;;		line 27 in file "i2c.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      void 
  5141 ;; Registers used:
  5142 ;;		wreg, status,2, status,0, cstack
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5152 ;;Total ram usage:        0 bytes
  5153 ;; Hardware stack levels used: 1
  5154 ;; Hardware stack levels required when called: 2
  5155 ;; This function calls:
  5156 ;;		_I2C_2_Master_Idle
  5157 ;; This function is called by:
  5158 ;;		_color_writetoaddr
  5159 ;;		_color_read_Red
  5160 ;;		_color_read_Blue
  5161 ;;		_color_read_Green
  5162 ;;		_color_read_Clear
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text36
  5167   002360                     __ptext36:
  5168                           	callstack 0
  5169   002360                     _I2C_2_Master_Start:
  5170                           	callstack 26
  5171   002360                     
  5172                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5173   002360  EC27  F011         	call	_I2C_2_Master_Idle	;wreg free
  5174   002364                     
  5175                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5176   002364  010E               	movlb	14	; () banked
  5177   002366  81DA               	bsf	218,0,b	;volatile
  5178   002368                     
  5179                           ; BSR set to: 14
  5180   002368  0012               	return		;funcret
  5181   00236A                     __end_of_I2C_2_Master_Start:
  5182                           	callstack 0
  5183                           
  5184 ;; *************** function _I2C_2_Master_Idle *****************
  5185 ;; Defined at:
  5186 ;;		line 22 in file "i2c.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;		None
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;		None
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  1    wreg      void 
  5193 ;; Registers used:
  5194 ;;		wreg, status,2, status,0
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5202 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5203 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5204 ;;Total ram usage:        1 bytes
  5205 ;; Hardware stack levels used: 1
  5206 ;; Hardware stack levels required when called: 1
  5207 ;; This function calls:
  5208 ;;		Nothing
  5209 ;; This function is called by:
  5210 ;;		_I2C_2_Master_Start
  5211 ;;		_I2C_2_Master_RepStart
  5212 ;;		_I2C_2_Master_Stop
  5213 ;;		_I2C_2_Master_Write
  5214 ;;		_I2C_2_Master_Read
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           	psect	text37
  5219   00224E                     __ptext37:
  5220                           	callstack 0
  5221   00224E                     _I2C_2_Master_Idle:
  5222                           	callstack 26
  5223   00224E                     l291:
  5224   00224E  010E               	movlb	14	; () banked
  5225   002250  B5D8               	btfsc	216,2,b	;volatile
  5226   002252  EF2D  F011         	goto	u1571
  5227   002256  EF2F  F011         	goto	u1570
  5228   00225A                     u1571:
  5229   00225A  EF27  F011         	goto	l291
  5230   00225E                     u1570:
  5231   00225E                     
  5232                           ; BSR set to: 14
  5233   00225E  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5234   002262  0E1F               	movlw	31
  5235   002264  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  5236   002266  A4D8               	btfss	status,2,c
  5237   002268  EF38  F011         	goto	u1581
  5238   00226C  EF3A  F011         	goto	u1580
  5239   002270                     u1581:
  5240   002270  EF27  F011         	goto	l291
  5241   002274                     u1580:
  5242   002274                     
  5243                           ; BSR set to: 14
  5244   002274  0012               	return		;funcret
  5245   002276                     __end_of_I2C_2_Master_Idle:
  5246                           	callstack 0
  5247                           
  5248 ;; *************** function _I2C_2_Master_Init *****************
  5249 ;; Defined at:
  5250 ;;		line 4 in file "i2c.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      void 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5268 ;;Total ram usage:        0 bytes
  5269 ;; Hardware stack levels used: 1
  5270 ;; Hardware stack levels required when called: 1
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_color_click_init
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text38
  5279   002224                     __ptext38:
  5280                           	callstack 0
  5281   002224                     _I2C_2_Master_Init:
  5282                           	callstack 28
  5283   002224                     
  5284                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  5285   002224  010E               	movlb	14	; () banked
  5286   002226  51D9               	movf	217,w,b	;volatile
  5287   002228  0BF0               	andlw	-16
  5288   00222A  0908               	iorlw	8
  5289   00222C  6FD9               	movwf	217,b	;volatile
  5290   00222E                     
  5291                           ; BSR set to: 14
  5292                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  5293   00222E  8BD9               	bsf	217,5,b	;volatile
  5294                           
  5295                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  5296   002230  0E9F               	movlw	159
  5297   002232  6FD6               	movwf	214,b	;volatile
  5298   002234                     
  5299                           ; BSR set to: 14
  5300                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  5301   002234  8A84               	bsf	132,5,c	;volatile
  5302   002236                     
  5303                           ; BSR set to: 14
  5304                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  5305   002236  8C84               	bsf	132,6,c	;volatile
  5306   002238                     
  5307                           ; BSR set to: 14
  5308                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  5309   002238  9BA7               	bcf	167,5,b	;volatile
  5310   00223A                     
  5311                           ; BSR set to: 14
  5312                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  5313   00223A  9DA7               	bcf	167,6,b	;volatile
  5314                           
  5315                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  5316   00223C  0E1D               	movlw	29
  5317   00223E  6F1D               	movwf	29,b	;volatile
  5318                           
  5319                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  5320   002240  0E1E               	movlw	30
  5321   002242  6F1C               	movwf	28,b	;volatile
  5322                           
  5323                           ;i2c.c: 18:   RD5PPS=0x1C;
  5324   002244  0E1C               	movlw	28
  5325   002246  6F6F               	movwf	111,b	;volatile
  5326                           
  5327                           ;i2c.c: 19:   RD6PPS=0x1B;
  5328   002248  0E1B               	movlw	27
  5329   00224A  6F70               	movwf	112,b	;volatile
  5330   00224C                     
  5331                           ; BSR set to: 14
  5332   00224C  0012               	return		;funcret
  5333   00224E                     __end_of_I2C_2_Master_Init:
  5334                           	callstack 0
  5335                           
  5336 ;; *************** function _buggy_lights_init *****************
  5337 ;; Defined at:
  5338 ;;		line 4 in file "buggy_lights.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;		None
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;		None
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		None
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5356 ;;Total ram usage:        0 bytes
  5357 ;; Hardware stack levels used: 1
  5358 ;; Hardware stack levels required when called: 1
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_main
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text39
  5367   0021F6                     __ptext39:
  5368                           	callstack 0
  5369   0021F6                     _buggy_lights_init:
  5370                           	callstack 29
  5371   0021F6                     
  5372                           ;buggy_lights.c: 8:         TRISDbits.TRISD4 = 0;
  5373   0021F6  9884               	bcf	132,4,c	;volatile
  5374                           
  5375                           ;buggy_lights.c: 9:         TRISHbits.TRISH1 = 0;
  5376   0021F8  9288               	bcf	136,1,c	;volatile
  5377                           
  5378                           ;buggy_lights.c: 10:         TRISDbits.TRISD3 = 0;
  5379   0021FA  9684               	bcf	132,3,c	;volatile
  5380                           
  5381                           ;buggy_lights.c: 11:         TRISFbits.TRISF0 = 0;
  5382   0021FC  9086               	bcf	134,0,c	;volatile
  5383                           
  5384                           ;buggy_lights.c: 12:         TRISHbits.TRISH0 = 0;
  5385   0021FE  9088               	bcf	136,0,c	;volatile
  5386                           
  5387                           ;buggy_lights.c: 14:         LATDbits.LATD4 = 0;
  5388   002200  987C               	bcf	124,4,c	;volatile
  5389                           
  5390                           ;buggy_lights.c: 15:         LATHbits.LATH1 = 0;
  5391   002202  9280               	bcf	128,1,c	;volatile
  5392                           
  5393                           ;buggy_lights.c: 16:         LATDbits.LATD3 = 0;
  5394   002204  967C               	bcf	124,3,c	;volatile
  5395                           
  5396                           ;buggy_lights.c: 17:         LATFbits.LATF0 = 0;
  5397   002206  907E               	bcf	126,0,c	;volatile
  5398                           
  5399                           ;buggy_lights.c: 18:         LATHbits.LATH0 = 0;
  5400   002208  9080               	bcf	128,0,c	;volatile
  5401                           
  5402                           ;buggy_lights.c: 24:             TRISGbits.TRISG1 = 0;
  5403   00220A  9287               	bcf	135,1,c	;volatile
  5404                           
  5405                           ;buggy_lights.c: 25:             TRISAbits.TRISA4 = 0;
  5406   00220C  9881               	bcf	129,4,c	;volatile
  5407                           
  5408                           ;buggy_lights.c: 26:             TRISFbits.TRISF7 = 0;
  5409   00220E  9E86               	bcf	134,7,c	;volatile
  5410                           
  5411                           ;buggy_lights.c: 28:             LATGbits.LATG1 = 0;
  5412   002210  927F               	bcf	127,1,c	;volatile
  5413                           
  5414                           ;buggy_lights.c: 29:             LATAbits.LATA4 = 0;
  5415   002212  9879               	bcf	121,4,c	;volatile
  5416                           
  5417                           ;buggy_lights.c: 30:             LATFbits.LATF7 = 0;
  5418   002214  9E7E               	bcf	126,7,c	;volatile
  5419                           
  5420                           ;buggy_lights.c: 34:             TRISGbits.TRISG0 = 0;
  5421   002216  9087               	bcf	135,0,c	;volatile
  5422                           
  5423                           ;buggy_lights.c: 35:             TRISEbits.TRISE7 = 0;
  5424   002218  9E85               	bcf	133,7,c	;volatile
  5425                           
  5426                           ;buggy_lights.c: 36:             TRISAbits.TRISA3 = 0;
  5427   00221A  9681               	bcf	129,3,c	;volatile
  5428                           
  5429                           ;buggy_lights.c: 38:             LATGbits.LATG0 = 0;
  5430   00221C  907F               	bcf	127,0,c	;volatile
  5431                           
  5432                           ;buggy_lights.c: 39:             LATEbits.LATE7 = 0;
  5433   00221E  9E7D               	bcf	125,7,c	;volatile
  5434                           
  5435                           ;buggy_lights.c: 40:             LATAbits.LATA3 = 0;
  5436   002220  9679               	bcf	121,3,c	;volatile
  5437   002222  0012               	return		;funcret
  5438   002224                     __end_of_buggy_lights_init:
  5439                           	callstack 0
  5440                           
  5441 ;; *************** function _Timer0_init *****************
  5442 ;; Defined at:
  5443 ;;		line 7 in file "timers.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;		None
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;		None
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      void 
  5450 ;; Registers used:
  5451 ;;		wreg, status,2, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5461 ;;Total ram usage:        0 bytes
  5462 ;; Hardware stack levels used: 1
  5463 ;; Hardware stack levels required when called: 3
  5464 ;; This function calls:
  5465 ;;		_reset_timer
  5466 ;; This function is called by:
  5467 ;;		_main
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text40
  5472   00229C                     __ptext40:
  5473                           	callstack 0
  5474   00229C                     _Timer0_init:
  5475                           	callstack 27
  5476   00229C                     
  5477                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  5478   00229C  50D6               	movf	214,w,c	;volatile
  5479   00229E  0B1F               	andlw	-225
  5480   0022A0  0940               	iorlw	64
  5481   0022A2  6ED6               	movwf	214,c	;volatile
  5482   0022A4                     
  5483                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  5484   0022A4  88D6               	bsf	214,4,c	;volatile
  5485   0022A6                     
  5486                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  5487   0022A6  88D5               	bsf	213,4,c	;volatile
  5488                           
  5489                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  5490   0022A8  50D6               	movf	214,w,c	;volatile
  5491   0022AA  0BF0               	andlw	-16
  5492   0022AC  090E               	iorlw	14
  5493   0022AE  6ED6               	movwf	214,c	;volatile
  5494   0022B0                     
  5495                           ;timers.c: 18:     reset_timer();
  5496   0022B0  EC9A  F011         	call	_reset_timer	;wreg free
  5497   0022B4                     
  5498                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  5499   0022B4  8ED5               	bsf	213,7,c	;volatile
  5500   0022B6                     
  5501                           ;timers.c: 21:     PIE0bits.TMR0IE = 1;
  5502   0022B6  010E               	movlb	14	; () banked
  5503   0022B8  8B29               	bsf	41,5,b	;volatile
  5504   0022BA                     
  5505                           ; BSR set to: 14
  5506                           ;timers.c: 22:     INTCONbits.PEIE = 1;
  5507   0022BA  8CF2               	bsf	242,6,c	;volatile
  5508   0022BC                     
  5509                           ; BSR set to: 14
  5510                           ;timers.c: 23:     INTCONbits.GIE = 1;
  5511   0022BC  8EF2               	bsf	242,7,c	;volatile
  5512   0022BE                     
  5513                           ; BSR set to: 14
  5514   0022BE  0012               	return		;funcret
  5515   0022C0                     __end_of_Timer0_init:
  5516                           	callstack 0
  5517                           
  5518 ;; *************** function _reset_timer *****************
  5519 ;; Defined at:
  5520 ;;		line 44 in file "timers.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;		None
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;		None
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  1    wreg      void 
  5527 ;; Registers used:
  5528 ;;		wreg, status,2, cstack
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5538 ;;Total ram usage:        0 bytes
  5539 ;; Hardware stack levels used: 1
  5540 ;; Hardware stack levels required when called: 2
  5541 ;; This function calls:
  5542 ;;		_write_timer
  5543 ;; This function is called by:
  5544 ;;		_Timer0_init
  5545 ;;		_forward_navigation
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           	psect	text41
  5550   002334                     __ptext41:
  5551                           	callstack 0
  5552   002334                     _reset_timer:
  5553                           	callstack 27
  5554   002334                     
  5555                           ;timers.c: 46:     write_timer(0, 0);
  5556   002334  0E00               	movlw	0
  5557   002336  6E01               	movwf	write_timer@tL^0,c
  5558   002338  0E00               	movlw	0
  5559   00233A  ECA0  F011         	call	_write_timer
  5560   00233E  0012               	return		;funcret
  5561   002340                     __end_of_reset_timer:
  5562                           	callstack 0
  5563                           
  5564 ;; *************** function _write_timer *****************
  5565 ;; Defined at:
  5566 ;;		line 35 in file "timers.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;  tH              1    wreg     unsigned char 
  5569 ;;  tL              1    0[COMRAM] unsigned char 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;  tH              1    1[COMRAM] unsigned char 
  5572 ;; Return value:  Size  Location     Type
  5573 ;;                  1    wreg      void 
  5574 ;; Registers used:
  5575 ;;		wreg
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5581 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5582 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5584 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5585 ;;Total ram usage:        2 bytes
  5586 ;; Hardware stack levels used: 1
  5587 ;; Hardware stack levels required when called: 1
  5588 ;; This function calls:
  5589 ;;		Nothing
  5590 ;; This function is called by:
  5591 ;;		_reset_timer
  5592 ;;		_return_to_sender
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           	psect	text42
  5597   002340                     __ptext42:
  5598                           	callstack 0
  5599   002340                     _write_timer:
  5600                           	callstack 27
  5601                           
  5602                           ;incstack = 0
  5603                           ;write_timer@tH stored from wreg
  5604   002340  6E02               	movwf	write_timer@tH^0,c
  5605   002342                     
  5606                           ;timers.c: 35: void write_timer(unsigned char tH, unsigned char tL);timers.c: 36: {;time
      +                          rs.c: 40:     TMR0H = tH;
  5607   002342  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  5608   002346                     
  5609                           ;timers.c: 41:     TMR0L = tL;
  5610   002346  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  5611   00234A  0012               	return		;funcret
  5612   00234C                     __end_of_write_timer:
  5613                           	callstack 0
  5614                           
  5615 ;; *************** function _ISR *****************
  5616 ;; Defined at:
  5617 ;;		line 116 in file "timers.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;		None
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;		None
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5635 ;;Total ram usage:        0 bytes
  5636 ;; Hardware stack levels used: 1
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		Interrupt level 2
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	intcode
  5645   000008                     __pintcode:
  5646                           	callstack 0
  5647   000008                     _ISR:
  5648                           	callstack 24
  5649                           
  5650                           ;incstack = 0
  5651   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5652   00000A                     
  5653                           ;timers.c: 119:     if (PIR0bits.TMR0IF) {
  5654   00000A  010E               	movlb	14	; () banked
  5655   00000C  AB33               	btfss	51,5,b	;volatile
  5656   00000E  EF0B  F000         	goto	i2u114_41
  5657   000012  EF0D  F000         	goto	i2u114_40
  5658   000016                     i2u114_41:
  5659   000016  EF18  F000         	goto	i2l666
  5660   00001A                     i2u114_40:
  5661   00001A                     
  5662                           ; BSR set to: 14
  5663                           ;timers.c: 120:         if (returning) {
  5664   00001A  505D               	movf	_returning^0,w,c
  5665   00001C  B4D8               	btfsc	status,2,c
  5666   00001E  EF13  F000         	goto	i2u115_41
  5667   000022  EF15  F000         	goto	i2u115_40
  5668   000026                     i2u115_41:
  5669   000026  EF17  F000         	goto	i2l665
  5670   00002A                     i2u115_40:
  5671   00002A                     
  5672                           ; BSR set to: 14
  5673                           ;timers.c: 121:             return_flag = 1;
  5674   00002A  0E01               	movlw	1
  5675   00002C  6E5C               	movwf	_return_flag^0,c
  5676   00002E                     i2l665:
  5677                           
  5678                           ; BSR set to: 14
  5679                           ;timers.c: 126:         PIR0bits.TMR0IF = 0;
  5680   00002E  9B33               	bcf	51,5,b	;volatile
  5681   000030                     i2l666:
  5682                           
  5683                           ; BSR set to: 14
  5684   000030  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5685   000032  0011               	retfie		f
  5686   000034                     __end_of_ISR:
  5687                           	callstack 0
  5688                           
  5689                           	psect	rparam
  5690   000000                     
  5691                           	psect	temp
  5692   00005E                     btemp:
  5693                           	callstack 0
  5694   00005E                     	ds	1
  5695   000000                     int$flags	set	btemp
  5696   000000                     wtemp8	set	btemp+1
  5697   000000                     ttemp5	set	btemp+1
  5698   000000                     ttemp6	set	btemp+4
  5699   000000                     ttemp7	set	btemp+8
  5700                           
  5701                           	psect	idloc
  5702                           
  5703                           ;Config register IDLOC0 @ 0x200000
  5704                           ;	unspecified, using default values
  5705   200000                     	org	2097152
  5706   200000  FFFF               	dw	65535
  5707                           
  5708                           ;Config register IDLOC1 @ 0x200002
  5709                           ;	unspecified, using default values
  5710   200002                     	org	2097154
  5711   200002  FFFF               	dw	65535
  5712                           
  5713                           ;Config register IDLOC2 @ 0x200004
  5714                           ;	unspecified, using default values
  5715   200004                     	org	2097156
  5716   200004  FFFF               	dw	65535
  5717                           
  5718                           ;Config register IDLOC3 @ 0x200006
  5719                           ;	unspecified, using default values
  5720   200006                     	org	2097158
  5721   200006  FFFF               	dw	65535
  5722                           
  5723                           ;Config register IDLOC4 @ 0x200008
  5724                           ;	unspecified, using default values
  5725   200008                     	org	2097160
  5726   200008  FFFF               	dw	65535
  5727                           
  5728                           ;Config register IDLOC5 @ 0x20000A
  5729                           ;	unspecified, using default values
  5730   20000A                     	org	2097162
  5731   20000A  FFFF               	dw	65535
  5732                           
  5733                           ;Config register IDLOC6 @ 0x20000C
  5734                           ;	unspecified, using default values
  5735   20000C                     	org	2097164
  5736   20000C  FFFF               	dw	65535
  5737                           
  5738                           ;Config register IDLOC7 @ 0x20000E
  5739                           ;	unspecified, using default values
  5740   20000E                     	org	2097166
  5741   20000E  FFFF               	dw	65535
  5742                           
  5743                           	psect	config
  5744                           
  5745                           ;Config register CONFIG1L @ 0x300000
  5746                           ;	External Oscillator mode Selection bits
  5747                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5748                           ;	Power-up default value for COSC bits
  5749                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5750   300000                     	org	3145728
  5751   300000  AA                 	db	170
  5752                           
  5753                           ;Config register CONFIG1H @ 0x300001
  5754                           ;	unspecified, using default values
  5755                           ;	Clock Out Enable bit
  5756                           ;	CLKOUTEN = 0x1, unprogrammed default
  5757                           ;	Clock Switch Enable bit
  5758                           ;	CSWEN = 0x1, unprogrammed default
  5759                           ;	Fail-Safe Clock Monitor Enable bit
  5760                           ;	FCMEN = 0x1, unprogrammed default
  5761   300001                     	org	3145729
  5762   300001  FF                 	db	255
  5763                           
  5764                           ;Config register CONFIG2L @ 0x300002
  5765                           ;	unspecified, using default values
  5766                           ;	Master Clear Enable bit
  5767                           ;	MCLRE = 0x1, unprogrammed default
  5768                           ;	Power-up Timer Enable bit
  5769                           ;	PWRTE = 0x1, unprogrammed default
  5770                           ;	Low-power BOR enable bit
  5771                           ;	LPBOREN = 0x1, unprogrammed default
  5772                           ;	Brown-out Reset Enable bits
  5773                           ;	BOREN = 0x3, unprogrammed default
  5774   300002                     	org	3145730
  5775   300002  FF                 	db	255
  5776                           
  5777                           ;Config register CONFIG2H @ 0x300003
  5778                           ;	unspecified, using default values
  5779                           ;	Brown Out Reset Voltage selection bits
  5780                           ;	BORV = 0x3, unprogrammed default
  5781                           ;	ZCD Disable bit
  5782                           ;	ZCD = 0x1, unprogrammed default
  5783                           ;	PPSLOCK bit One-Way Set Enable bit
  5784                           ;	PPS1WAY = 0x1, unprogrammed default
  5785                           ;	Stack Full/Underflow Reset Enable bit
  5786                           ;	STVREN = 0x1, unprogrammed default
  5787                           ;	Debugger Enable bit
  5788                           ;	DEBUG = 0x1, unprogrammed default
  5789                           ;	Extended Instruction Set Enable bit
  5790                           ;	XINST = 0x1, unprogrammed default
  5791   300003                     	org	3145731
  5792   300003  FF                 	db	255
  5793                           
  5794                           ;Config register CONFIG3L @ 0x300004
  5795                           ;	WDT Period Select bits
  5796                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5797                           ;	WDT operating mode
  5798                           ;	WDTE = OFF, WDT Disabled
  5799   300004                     	org	3145732
  5800   300004  9F                 	db	159
  5801                           
  5802                           ;Config register CONFIG3H @ 0x300005
  5803                           ;	unspecified, using default values
  5804                           ;	WDT Window Select bits
  5805                           ;	WDTCWS = 0x7, unprogrammed default
  5806                           ;	WDT input clock selector
  5807                           ;	WDTCCS = 0x7, unprogrammed default
  5808   300005                     	org	3145733
  5809   300005  FF                 	db	255
  5810                           
  5811                           ;Config register CONFIG4L @ 0x300006
  5812                           ;	unspecified, using default values
  5813                           ;	Write Protection Block 0
  5814                           ;	WRT0 = 0x1, unprogrammed default
  5815                           ;	Write Protection Block 1
  5816                           ;	WRT1 = 0x1, unprogrammed default
  5817                           ;	Write Protection Block 2
  5818                           ;	WRT2 = 0x1, unprogrammed default
  5819                           ;	Write Protection Block 3
  5820                           ;	WRT3 = 0x1, unprogrammed default
  5821                           ;	Write Protection Block 3
  5822                           ;	WRT4 = 0x1, unprogrammed default
  5823                           ;	Write Protection Block 3
  5824                           ;	WRT5 = 0x1, unprogrammed default
  5825                           ;	Write Protection Block 3
  5826                           ;	WRT6 = 0x1, unprogrammed default
  5827                           ;	Write Protection Block 3
  5828                           ;	WRT7 = 0x1, unprogrammed default
  5829   300006                     	org	3145734
  5830   300006  FF                 	db	255
  5831                           
  5832                           ;Config register CONFIG4H @ 0x300007
  5833                           ;	unspecified, using default values
  5834                           ;	Configuration Register Write Protection bit
  5835                           ;	WRTC = 0x1, unprogrammed default
  5836                           ;	Boot Block Write Protection bit
  5837                           ;	WRTB = 0x1, unprogrammed default
  5838                           ;	Data EEPROM Write Protection bit
  5839                           ;	WRTD = 0x1, unprogrammed default
  5840                           ;	Scanner Enable bit
  5841                           ;	SCANE = 0x1, unprogrammed default
  5842                           ;	Low Voltage Programming Enable bit
  5843                           ;	LVP = 0x1, unprogrammed default
  5844   300007                     	org	3145735
  5845   300007  FF                 	db	255
  5846                           
  5847                           ;Config register CONFIG5L @ 0x300008
  5848                           ;	unspecified, using default values
  5849                           ;	UserNVM Program Memory Code Protection bit
  5850                           ;	CP = 0x1, unprogrammed default
  5851                           ;	DataNVM Memory Code Protection bit
  5852                           ;	CPD = 0x1, unprogrammed default
  5853   300008                     	org	3145736
  5854   300008  FF                 	db	255
  5855                           
  5856                           ;Config register CONFIG5H @ 0x300009
  5857                           ;	unspecified, using default values
  5858   300009                     	org	3145737
  5859   300009  FF                 	db	255
  5860                           
  5861                           ;Config register CONFIG6L @ 0x30000A
  5862                           ;	unspecified, using default values
  5863                           ;	Table Read Protection Block 0
  5864                           ;	EBTR0 = 0x1, unprogrammed default
  5865                           ;	Table Read Protection Block 1
  5866                           ;	EBTR1 = 0x1, unprogrammed default
  5867                           ;	Table Read Protection Block 2
  5868                           ;	EBTR2 = 0x1, unprogrammed default
  5869                           ;	Table Read Protection Block 3
  5870                           ;	EBTR3 = 0x1, unprogrammed default
  5871                           ;	Table Read Protection Block 4
  5872                           ;	EBTR4 = 0x1, unprogrammed default
  5873                           ;	Table Read Protection Block 5
  5874                           ;	EBTR5 = 0x1, unprogrammed default
  5875                           ;	Table Read Protection Block 6
  5876                           ;	EBTR6 = 0x1, unprogrammed default
  5877                           ;	Table Read Protection Block 7
  5878                           ;	EBTR7 = 0x1, unprogrammed default
  5879   30000A                     	org	3145738
  5880   30000A  FF                 	db	255
  5881                           
  5882                           ;Config register CONFIG6H @ 0x30000B
  5883                           ;	unspecified, using default values
  5884                           ;	Boot Block Table Read Protection bit
  5885                           ;	EBTRB = 0x1, unprogrammed default
  5886   30000B                     	org	3145739
  5887   30000B  FF                 	db	255
  5888                           tosu	equ	0xFFF
  5889                           tosh	equ	0xFFE
  5890                           tosl	equ	0xFFD
  5891                           stkptr	equ	0xFFC
  5892                           pclatu	equ	0xFFB
  5893                           pclath	equ	0xFFA
  5894                           pcl	equ	0xFF9
  5895                           tblptru	equ	0xFF8
  5896                           tblptrh	equ	0xFF7
  5897                           tblptrl	equ	0xFF6
  5898                           tablat	equ	0xFF5
  5899                           prodh	equ	0xFF4
  5900                           prodl	equ	0xFF3
  5901                           indf0	equ	0xFEF
  5902                           postinc0	equ	0xFEE
  5903                           postdec0	equ	0xFED
  5904                           preinc0	equ	0xFEC
  5905                           plusw0	equ	0xFEB
  5906                           fsr0h	equ	0xFEA
  5907                           fsr0l	equ	0xFE9
  5908                           wreg	equ	0xFE8
  5909                           indf1	equ	0xFE7
  5910                           postinc1	equ	0xFE6
  5911                           postdec1	equ	0xFE5
  5912                           preinc1	equ	0xFE4
  5913                           plusw1	equ	0xFE3
  5914                           fsr1h	equ	0xFE2
  5915                           fsr1l	equ	0xFE1
  5916                           bsr	equ	0xFE0
  5917                           indf2	equ	0xFDF
  5918                           postinc2	equ	0xFDE
  5919                           postdec2	equ	0xFDD
  5920                           preinc2	equ	0xFDC
  5921                           plusw2	equ	0xFDB
  5922                           fsr2h	equ	0xFDA
  5923                           fsr2l	equ	0xFD9
  5924                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        26
    BSS         102
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     81      93
    BANK0           160     32      88
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getHSVval@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    getHSVval@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    maxRGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    minRGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1141DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1141DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2711$buffer	PTR unsigned char  size(2) Largest target is 0

    S2711$source	PTR const unsigned char  size(2) Largest target is 0

    sendHSVvalSerial4@col_val	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 
		 -> STR_4(CODE[3]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sendHSVvalSerial4
    _sendHSVvalSerial4->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___lwdiv
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _getHSVval->___lldiv
    _getHSVval->___lwdiv
    _minRGB->_min
    _maxRGB->_max
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   17414
                                             79 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                          _getHSVval
                         _getRGBCval
                    _initDCmotorsPWM
                         _initUSART4
                  _sendHSVvalSerial4
               _toggle_tricolour_LED
 ---------------------------------------------------------------------------------
 (1) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sendHSVvalSerial4                                   22    21      1    7985
                                             57 COMRAM    22    21      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    15     11    7275
                                             31 COMRAM    26    15     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    6219
                                             27 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           14    11      3    5752
                                             13 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3    1137
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     412
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     613
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     625
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     447
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _getHSVval                                           40    38      2    7165
                                             13 COMRAM    38    36      2
                            ___lldiv
                             ___lmul
                            ___lwdiv
                             ___wmul
                             _maxRGB
                             _minRGB
 ---------------------------------------------------------------------------------
 (2) _minRGB                                               4     2      2     581
                                              6 COMRAM     4     2      2
                                _min
 ---------------------------------------------------------------------------------
 (3) _min                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _maxRGB                                               4     2      2     581
                                              6 COMRAM     4     2      2
                                _max
 ---------------------------------------------------------------------------------
 (3) _max                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     855
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4    1261
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     826
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _getHSVval
     ___lldiv
     ___lmul
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _maxRGB
       _max
     _minRGB
       _min
   _getRGBCval
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendHSVvalSerial4
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           ___awdiv
           ___awmod
           ___lwdiv
           ___lwmod
           _abs
             ___awmod (ARG)
           _fputc
             _putch
   _toggle_tricolour_LED

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      58       5       55.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     51      5D       1       98.9%
BITBIGSFRlllhhh     52      0       0      41        0.0%
BITBIGSFRlllhhh     37      0       0      43        0.0%
BITBIGSFRlllllh     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      59        0.0%
BITBIGSFRlllhhh     20      0       0      46        0.0%
BITBIGSFRlllhhh     1E      0       0      48        0.0%
BITBIGSFRhhlll      1D      0       0      38        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      49        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      47        0.0%
BITBIGSFRlllllh      B      0       0      57        0.0%
BITBIGSFRlllllh      9      0       0      56        0.0%
BITBIGSFRlllhhh      8      0       0      44        0.0%
BITBIGSFRllllll      6      0       0      58        0.0%
BITBIGSFRlllllh      6      0       0      53        0.0%
BITBIGSFRllllhl      5      0       0      52        0.0%
BITBIGSFRlllllh      3      0       0      55        0.0%
BITBIGSFRllllhh      3      0       0      51        0.0%
BITBIGSFRlllhhh      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      50        0.0%
BITBIGSFRllh         1      0       0      40        0.0%
BITBIGSFRlhh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F1      60        0.0%
DATA                 0      0      F1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 07 19:45:34 2024

                 _turn180Delay 00AC                 _color_read_Red 1F14                _color_read_Blue 2004  
              _trail_timer_low 0114                             l42 184E                             l27 2222  
                           l71 1F62                             l80 2002                             l65 2194  
                           l74 2052                             l83 1E6A                             l68 22DE  
                           l93 21EC                             l77 1FB2                             l94 21F4  
                           l97 21BC                             l98 21C4                   ___awdiv@sign 0006  
          ___wmul@multiplicand 0003               _trail_timer_high 0128               _color_read_Clear 1FB4  
             _color_read_Green 1F64                            l101 1F12                            l104 1EBE  
                          l120 134C                            l300 2354                            l303 235E  
                          l306 2332                            l309 212C                            l193 1BB0  
                          l426 22FC                            l291 224E                            l435 2300  
                          l444 1DBE                            l630 22BE                            l294 2274  
                          l438 2314                            l288 224C                            l297 2368  
                          l730 1B20                            l458 209E                            l723 1B10  
                          l707 1CE8                            l636 234A                            l708 1CF8  
                          l639 233E                            l940 1A7C                            l927 1912  
                          l696 229A                            _ISR 0008         ??_toggle_tricolour_LED 0001  
                          _abs 212E                            _max 21C6                            _min 2196  
                 ___awmod@sign 0006                            wreg 0FE8                    _squareDelay 00A8  
                         ?_ISR 0001                           ?_abs 0007                           l1204 1D5C  
                         l1415 14F0                           l1416 1658                           l3105 2334  
                         l3121 1CC8                           l3113 1C90                           l4001 13F8  
                         l1194 1C24                           l1442 2160                           l1434 1E0C  
                         l3131 1AB8                           l3123 1A7E                           l3115 1CA0  
                         l1187 1C1C                           l3107 2276                           l4011 146A  
                         l4003 1402                           l1435 1E14                           l3141 1B00  
                         l3133 1AC6                           l3125 1A8E                           l3117 1CAE  
                         l3109 2292                           l3301 22F6                           l1197 1D54  
                         l4021 14BA                           l4013 147C                           l4005 141A  
                         l1454 19CC                           l1374 20EA                           l3311 22A6  
                         l3151 2166                           l3143 1B0A                           l3135 1AD0  
                         l3127 1AA4                           l3119 1CBE                           l3303 22F8  
                         l1439 2148                           l4031 151C                           l4023 14C2  
                         l4015 148C                           l4007 144A                           l3321 22BC  
                         l3313 22B0                           l3145 21F6                           l3153 2170  
                         l3137 1AEE                           l3129 1AAC                           l3305 22FA  
                         l1465 2372                           l4041 1586                           l4033 1534  
                         l4025 14DC                           l4017 149C                           l4009 1466  
                         l4121 1DC4                           l3315 22B4                           l3307 229C  
                         l3155 2180                           l3139 1AFE                           l3251 1B32  
                         l4051 15CC                           l4043 158A                           l4035 1542  
                         l4019 14AC                           l4027 14DE                           l4123 1DD2  
                         l4131 20B4                           l3147 1788                           l3317 22B6  
                         l3309 22A4                           l3157 218A                           l3149 2162  
                         l4301 1210                           l3261 1B8C                           l3253 1B58  
                         l4045 159C                           l4037 1546                           l4029 14FC  
                         l4125 1DEC                           l4133 20BC                           l3319 22BA  
                         l4311 12E2                           l4303 1284                           l3159 1E16  
                         l3271 1BAE                           l3263 1B96                           l3255 1B5C  
                         l4047 15B0                           l4039 156A                           l4055 15E2  
                         l4063 1626                           l4119 1DC0                           l4135 20D4  
                         l4127 20A0                           l4313 1312                           l4305 1296  
                         l4241 0E1A                           l3265 1B98                           l3257 1B80  
                         l3249 1B22                           l4065 1648                           l4049 15CA  
                         l4057 1612                           l4137 20E2                           l4129 20AC  
                         l4315 131A                           l4307 12A2                           l4251 0E6C  
                         l4243 0E2A                           l3267 1BA2                           l3259 1B8A  
                         l4067 1650                           l4059 161A                           l4411 165A  
                         l2741 225E                           l4317 1328                           l4309 12AE  
                         l4261 0EBE                           l4253 0E7C                           l4245 0E38  
                         l3269 1BA4                           l4421 16CC                           l4413 16A0  
                         l4319 133A                           l4271 0F20                           l4263 0ED4  
                         l4255 0E88                           l4247 0E4A                           l3295 22E0  
                         l4343 2054                           l4431 16F4                           l4423 16D4  
                         l4415 16A8                           l2841 232A                           l4281 0FBC  
                         l4273 0F50                           l4265 0ED4                           l4257 0E9A  
                         l4249 0E5C                           l3297 22EA                           l2921 2300  
                         l3801 190A                           l4345 2094                           l4441 1700  
                         l4433 16F8                           l4425 16DC                           l4417 16B0  
                         l2739 224E                           l2843 232E                           l4291 1070  
                         l4283 0FF0                           l4267 0ED4                           l4275 0F5C  
                         l4259 0EA6                           l2851 2350                           l3299 22EC  
                         l2923 2310                           l3811 19E8                           l4451 1732  
                         l4443 1702                           l4435 16FA                           l4427 16EC  
                         l4419 16C4                           l2925 2342                           l2941 2234  
                         l2837 2360                           l2845 2356                           l4293 10E2  
                         l4285 1020                           l4277 0F68                           l4269 0EEC  
                         l2861 2128                           l2853 20EE                           l3821 1A1C  
                         l3813 19EC                           l3805 19CE                           l4461 1760  
                         l4453 173A                           l4445 1704                           l4437 16FC  
                         l4429 16F0                           l2927 2346                           l2943 2236  
                         l2839 2364                           l2847 235A                           l2871 21E4  
                         l4295 1150                           l4279 0F9C                           l4287 1028  
                         l2863 212A                           l2855 20F2                           l2951 1F14  
                         l3831 1A56                           l3823 1A24                           l3815 19FA  
                         l3807 19D2                           l4543 1604                           l4463 1768  
                         l4455 1744                           l4447 1708                           l4439 16FE  
                         l2945 2238                           l2937 2224                           l3841 1BB2  
                         l2873 2196                           l4297 1172                           l4289 104A  
                         l2857 20FA                           l2849 234C                           l2953 1F5A  
                         l3761 1850                           l3825 1A32                           l3833 1A5C  
                         l3817 1A02                           l3809 19E0                           l4457 174C  
                         l4449 172E                           l2947 223A                           l2939 222E  
                         l3851 1BEA                           l3843 1BBA                           l2867 21C6  
                         l2875 219E                           l4299 1198                           l2859 2102  
                         l2971 1FFA                           l2963 1F64                           l3771 187C  
                         l3763 1854                           l3835 1A6C                           l3827 1A48  
                         l3819 1A14                           l4459 1754                           l2949 22C2  
                         l3861 1C16                           l3853 1BF0                           l3845 1BCC  
                         l2869 21CE                           l2877 21B4                           l2957 2004  
                         l2965 1FAA                           l3781 18AA                           l3773 1884  
                         l3765 1862                           l3837 1A74                           l3829 1A50  
                         ?_max 0001                           l3855 1C06                           l3847 1BD4  
                         l2975 1EC0                           l2959 204A                           l2983 1D5E  
                         l3791 18E4                           l3783 18B2                           l3775 1888  
                         l3767 186A                           l3871 1D2A                           l3863 1CFA  
                         l3857 1C0E                           l3849 1BDC                           l2969 1FB4  
                         l2985 1D62                           l3793 18E6                           l3785 18C0  
                         l3777 1890                           l3769 186E                           l3873 1D40  
                         l3865 1D0C                           l3881 1924                           l3859 1C10  
                         l2979 1E6C                           l2987 1D88                           l3795 18EC  
                         l3787 18C6                           l3779 18A2                           l3875 1D48  
                         l3867 1D14                           l3883 1934                           ?_min 0001  
                         l2989 1D8C                           l3789 18DC                           l3797 18F2  
                         l3877 1D4E                           l3869 1D1C                           l3893 212E  
                         l3885 193E                           l3799 1902                           l3895 213C  
                         l3887 195A                           l3879 1914                           l3991 1392  
                         l3983 134E                           l3889 198C                           l3993 1396  
                         l3985 1356                           l3995 13A0                           l3987 137C  
                         l3997 13C0                           l3989 1384                           l3999 13E0  
                         STR_1 0E0F                           STR_2 0E14                           STR_5 0E01  
                         STR_6 0E04                           u3000 1416                           u3001 1410  
                         u3010 1418                           u3100 15DE                           u3020 147C  
                         u3101 15DA                           u3021 1478                           u3030 148C  
                         u3110 1E0C                           u3031 1488                           u3111 1E08  
                         u3120 0E9A                           u3040 149C                   _BAUD4CONbits 0EE9  
                         u3121 0E96                           u3041 1498                           u3130 0EBE  
                         u3050 14AC                           u3131 0EBA                           u3051 14A8  
                         u3140 0ED4                           u3060 14F0                           u3141 0ED0  
                         u3061 14EC                           u3150 104A                           u3070 151C  
                         u3151 1046                           u3071 1518                           u3160 1070  
                         u1800 1DAE                           u2600 18A2                           u3080 159C  
                         u3161 106C                           u2601 189E                           u3081 1598  
                         u1570 225E                           u3170 1172                           u1730 2116  
                         u1810 1DBE                           u2610 18C0                           u3090 15AC  
                         u3250 171C                           _T2PR 0FBC                           u1571 225A  
                         u3171 116E                           u1731 210E                           u1811 1DBA  
                         u2611 18BC                           u3091 15A8                           u3307 1772  
                         u3251 1714                           u1580 2274                           u1820 1CAE  
                         u2700 1BCC                           u3180 1198                           u2620 18DC  
                         u1581 2270                           u3317 2176                           u1821 1CAA  
                         u2701 1BC8                           u3181 1194                           u2621 18D8  
                         u1830 1CE8                           u2710 1BEA                           u1750 21E4  
                         u3190 1296                           u2630 1902                           u1910 17DA  
                         u1831 1CE4                           u2711 1BE6                           u1751 21E0  
                         u3191 1292                           u1807 1DA4                           u2631 18FE  
                         u1911 17D2                           u1840 1AA4                           u2720 1C06  
                         u1760 21B4                           u2640 19E0                           u2800 213C  
                         u1841 1AA0                           u2721 1C02                           u1761 21B0  
                         u2641 19DC                           u2801 2138                           u1850 1AC6  
                         u1770 2310                           u2650 19FA                           u2730 1D0C  
                         u1930 17FC                           u1851 1AC2                           u1771 230C  
                         u2651 19F6                           u2731 1D08                           u1931 17F4  
                         u1860 1AEE                           u1748 2118                           u2580 1862  
                         u2660 1A14                           u2740 1D2A                           u1908 17BC  
                         u3268 171E                           u1861 1AEA                           u2581 185E  
                         u2661 1A10                           u2741 1D26                           u1790 1D84  
                         u2590 187C                           u2670 1A32                           u2750 1D40  
                         u1950 181A                           u1870 179A                           u2591 1878  
                         u2671 1A2E                           u2751 1D3C                           u1951 1812  
                         u1871 1792                           u2680 1A48                           u2760 1924  
                         u1928 17DC                           u2681 1A44                           u2761 1920  
                         u2690 1A6C                           u2770 1934                           u1970 183C  
                         u1890 17BA                           u2691 1A68                           u2771 1930  
                         u1971 1834                           u1891 17B2                           u2780 195A  
                         u1948 17FE                           u1797 1D7A                           u2781 1956  
                         u2790 198C                           u2791 1988                           u1968 181C  
                         u1888 179C                           u2970 137C                           u2971 1378  
                         u2980 13C0                           u1988 183E                           u2981 13BC  
                         u2990 13E0                           u2991 13DC                           abs@a 0007  
                         _dbuf 0060                           _main 165A                           _prec 0084  
                         _nout 0080                           fsr0h 0FEA                           fsr1h 0FE2  
                         indf0 0FEF                           fsr2h 0FDA                           fsr0l 0FE9  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         max@a 0001                           max@b 0003                           btemp 005E  
                         min@a 0001                           min@b 0003                           prodh 0FF4  
                         prodl 0FF3                           start 0034         __end_of_color_read_Red 1F64  
                 ___param_bank 0000                          ??_ISR 0001                          ??_abs 0009  
                write_timer@tH 0002                  write_timer@tL 0001                          ??_max 0005  
                        ??_min 0005                          ?_main 0001             _timer_high_pointer 0054  
              __end_of___awdiv 1914                __end_of___awmod 1A7E                __end_of___lldiv 1B22  
              ___awdiv@divisor 0003                __end_of___lwdiv 1C26                __end_of___lwmod 1D5E  
                        i2l665 002E                          i2l666 0030                ___awdiv@counter 0005  
                 vfpfcnvrt@cnt 0014                   vfpfcnvrt@fmt 000F                          _TMR0H 0FD4  
                        _TMR0L 0FD3            ___lmul@multiplicand 0005        __end_of_sendCharSerial4 2316  
   __end_of_I2C_2_Master_Start 236A                    _write_timer 2340     __end_of_I2C_2_Master_Write 2334  
                  _turningGear 0056                          _flags 005A                          _fputc 1914  
                        _width 0082                          _putch 2372              _turnRight135Delay 00AE  
                        tablat 0FF5                _turnLeft90Delay 00B4                          ttemp5 005F  
                        ttemp6 0062                          ttemp7 0066                          status 0FD8  
                        wtemp8 005F                __end_of_sprintf 20EC        __end_of_color_read_Blue 2054  
        _I2C_2_Master_RepStart 234C                ?_color_read_Red 0005                __initialization 1C26  
                 __end_of_main 1788                         ??_main 0050                  __activetblptr 0003  
                       ?_fputc 0001                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21               ___awdiv@dividend 0001  
                       ?_putch 0001                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       _RD6PPS 0E70                         _RE4PPS 0E76                         i2l2473 000A  
                       i2l2475 001A                         i2l2477 002A                         _RG6PPS 0E88  
                vfpfcnvrt@done 0013       __end_of_color_click_init 2196                         _RX4PPS 0E15  
                       _TX4REG 0EE4               _turnLeft135Delay 00B0                  ??_Timer0_init 0003  
                 ?_reset_timer 0001                   _CCPTMRS0bits 0FAD                   vfprintf@cfmt 001F  
                       ___lmul 1C90                         ___wmul 2276                      ??___awdiv 0005  
                    ??___awmod 0005                      ??___lldiv 0009                      ??___lwdiv 000B  
                    ??___lwmod 0005                         _maxRGB 1EC0                         _minRGB 1E6C  
                       clear_0 1C6C                         clear_1 1C78               ___awdiv@quotient 0007  
              ___awmod@divisor 0003                         isa$std 0001                ___awmod@counter 0005  
                       fputc@c 0001                   __pdataCOMRAM 0052              _timer_low_pointer 0052  
                 __mediumconst 0000                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8               ?_sendCharSerial4 0001                         putch@c 0001  
             __end_of_vfprintf 1E16              ??_initDCmotorsPWM 0003                      ??_sprintf 002B  
            _buggy_lights_init 21F6                     __accesstop 0060        __end_of__initialization 1C86  
     __end_of_color_read_Clear 2004       __end_of_color_read_Green 1FB4         ?_I2C_2_Master_RepStart 0001  
           ?_buggy_lights_init 0001                  ___rparam_used 0001               ?_color_read_Blue 0005  
               __pcstackCOMRAM 0001                   __pidataBANK0 2316              getHSVval@temp_622 002C  
            getHSVval@temp_623 0024            ??_buggy_lights_init 0001                  __end_of_fputc 19CE  
                __end_of_putch 2374            __end_of_Timer0_init 22C0                        ??_fputc 0004  
    __end_of_buggy_lights_init 2224                        ??_putch 0001                     __pbssBANK0 0060  
                   __pbssBANK1 0100                     _getRGBCval 1E16              _color_writetoaddr 22C0  
                 _T2CLKCONbits 0FBF             ?_color_writetoaddr 0003                        ?___lmul 0001  
                      ?___wmul 0001                        ?_maxRGB 0007                        ?_minRGB 0007  
               ___lmul@product 0009            ??_color_writetoaddr 0004                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5                   ?_write_timer 0001                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5              __end_of_getHSVval 134E         color_writetoaddr@value 0003  
             ??_color_read_Red 0007      __end_of_color_writetoaddr 22E0             _I2C_2_Master_Start 2360  
                   _initUSART4 22E0             _I2C_2_Master_Write 2328                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000A                    _Timer0_init 229C  
      sendStringSerial4@string 0002                        ___awdiv 1850                        ___awmod 19CE  
                      ___lldiv 1A7E            ?_I2C_2_Master_Start 0001                        ___lwdiv 1BB2  
          ?_I2C_2_Master_Write 0001                        ___lwmod 1CFA                      ?_vfprintf 001C  
                 __psmallconst 0E00                        __pcinit 1C26                        __ramtop 0E00  
                      __ptext0 165A                        __ptext1 1788                        __ptext2 2054  
                      __ptext3 20A0                        __ptext4 1DC0                        __ptext5 134E  
                      __ptext6 1914                        __ptext7 2372                        __ptext8 212E  
                      __ptext9 1CFA                      _T2CONbits 0FBD               ___awmod@dividend 0001  
                   getHSVval@C 0032                     getHSVval@H 0022                     getHSVval@M 0030  
                    _T2HLTbits 0FBE                     getHSVval@S 001C                     getHSVval@m 001A  
                      maxRGB@p 0007                        _sprintf 20A0                        minRGB@p 0007  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 1C86  
            _sendHSVvalSerial4 2054                    ?_getRGBCval 000C                        fputc@fp 0003  
            ?_color_click_init 0001                  getHSVval@temp 0028             ?_sendHSVvalSerial4 003A  
              ___lldiv@divisor 0005             ??_color_click_init 0005                ___lldiv@counter 000D  
            __end_of_vfpfcnvrt 165A            ??_sendHSVvalSerial4 003B                        postdec1 0FE5  
                      postdec2 0FDD                        postinc0 0FEE                        postinc1 0FE6  
                      postinc2 0FDE               vfpfcnvrt@convarg 0017                     ??_vfprintf 001F  
              _initDCmotorsPWM 1B22                      _TRISAbits 0F81                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88      __end_of_sendHSVvalSerial4 20A0  
     color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002                    _CCP1CONbits 0FAB  
            ?_color_read_Clear 0005                    _CCP2CONbits 0FA7              ?_color_read_Green 0005  
                  _CCP3CONbits 0F26                    ?_initUSART4 0001                    _CCP4CONbits 0F22  
    sendCharSerial4@charToSend 0001                     main@motorL 008C                     main@motorR 0095  
           ??_color_read_Clear 0007             ??_color_read_Green 0007                     max@max_val 0005  
               __end_of___lmul 1CFA                    vfpfcnvrt@ap 0010                    vfpfcnvrt@cp 0016  
                  vfpfcnvrt@fp 000E                 __end_of___wmul 229C                  __pidataCOMRAM 236A  
               __end_of_maxRGB 1F14                 __end_of_minRGB 1EC0       sendHSVvalSerial4@col_val 003A  
                   min@min_val 0005            color_read_Clear@tmp 000A            start_initialization 1C26  
                  __end_of_ISR 0034                    __end_of_abs 2162                    __end_of_max 21F6  
                  __end_of_min 21C6               _turnRight90Delay 00B2       sendHSVvalSerial4@tempStr 003B  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 1BB2                    vfprintf@fmt 001D  
                     ??___lmul 0009                       ??___wmul 0005                       ??_maxRGB 0009  
                     ??_minRGB 0009                    __pdataBANK0 00A6                    __pbssCOMRAM 005A  
                __pcstackBANK0 0086                 _wall_threshold 00B6   __end_of_toggle_tricolour_LED 1850  
                    _getHSVval 0E1A               ___lwdiv@dividend 0007                   ?_Timer0_init 0001  
                    __pintcode 0008                       ?___awdiv 0001                       ?___awmod 0001  
                     ?___lldiv 0001                       ?___lwdiv 0007                       ?___lwmod 0001  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004                    __smallconst 0E00  
            _I2C_2_Master_Idle 224E              _I2C_2_Master_Init 2224              _I2C_2_Master_Read 20EC  
            _I2C_2_Master_Stop 2356                    _maxRGB$3150 0009             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000C                  _headbuttDelay 00AA       initDCmotorsPWM@PWMperiod 0001  
                     ?_sprintf 0020                      _rampDelay 0059                   ??_getRGBCval 000D  
            _sendStringSerial4 1D5E            ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001  
          ??_I2C_2_Master_Read 0002                 ___wmul@product 0005                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                     _LATHbits 0F80                    _minRGB$3151 0009                       _PIE0bits 0E29  
           ?_sendStringSerial4 0002                     ?_getHSVval 000E                  ??_reset_timer 0003  
                     i2u114_40 001A                       i2u114_41 0016                       i2u115_40 002A  
                     i2u115_41 0026                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0001              ??_sendCharSerial4 0001                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0004                       _SSP2STAT 0ED8                      _returning 005D  
                    _vfpfcnvrt 134E      __end_of_I2C_2_Master_Idle 2276      __end_of_I2C_2_Master_Init 224E  
    __end_of_I2C_2_Master_Read 212E              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 2360  
  I2C_2_Master_Write@data_byte 0002             __end_of_getRGBCval 1E6C              ??_color_read_Blue 0007  
                   vfpfcnvrt@c 001B              ___lmul@multiplier 0001                      copy_data0 1C3A  
                    copy_data1 1C5A      __end_of_sendStringSerial4 1DC0  __end_of_I2C_2_Master_RepStart 2356  
           color_read_Blue@tmp 000A                   ??_initUSART4 0001                       __Hrparam 0000  
                   vfprintf@ap 001E                       __Lrparam 0000                     vfprintf@fp 001C  
                   ?_vfpfcnvrt 000E            __end_of_reset_timer 2340                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                     sprintf@fmt 0022                     sprintf@ret 002B  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6           _toggle_tricolour_LED 1788  
              ___lwdiv@divisor 0009             __end_of_initUSART4 22FE                ___lwdiv@counter 000B  
                     __ptext10 19CE                       __ptext11 1850                       __ptext20 2004  
                     __ptext12 1D5E                       __ptext21 234C                       __ptext13 22FE  
                     __ptext30 1C90                       __ptext22 20EC                       __ptext14 22E0  
                     __ptext31 1A7E                       __ptext23 0E1A                       __ptext15 1B22  
                     __ptext40 229C                       __ptext32 2162                       __ptext24 1E6C  
                     __ptext16 1E16                       __ptext41 2334                       __ptext33 22C0  
                     __ptext25 2196                       __ptext17 1F14                       __ptext42 2340  
                     __ptext34 2328                       __ptext26 1EC0                       __ptext18 1F64  
                     __ptext35 2356                       __ptext27 21C6                       __ptext19 1FB4  
                     __ptext36 2360                       __ptext28 2276                       __ptext37 224E  
                     __ptext29 1BB2                       __ptext38 2224                       __ptext39 21F6  
                  getRGBCval@p 000C            main@measured_colour 009E                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                    getHSVval@BB 0020                    ??_getHSVval 0010  
                  getHSVval@GG 001E                    getHSVval@RR 0018                    getHSVval@p1 000E  
                  getHSVval@p2 000F                       isa$xinst 0000                     _RC4STAbits 0EE7  
                     int$flags 005E                       _vfprintf 1DC0                     _INTCONbits 0FF2  
        ?_toggle_tricolour_LED 0001                  ??_write_timer 0002                       intlevel2 0000  
                    sprintf@ap 002D                   _topGearRight 0057              _manoeuvre_pointer 00A6  
             ___lwmod@dividend 0001               ___lldiv@dividend 0001                 main@HSV_colour 0086  
                  _reset_timer 2334                    ??_vfpfcnvrt 0011               _color_click_init 2162  
                  _topGearLeft 0058                       sprintf@f 002E                       sprintf@s 0020  
                   _SSP2DATPPS 0E1D               ___lldiv@quotient 0009                     _SSP2CLKPPS 0E1C  
              ___lwmod@divisor 0003                ___lwmod@counter 0005                _trail_manoeuvre 0100  
                  _return_flag 005C                _manoeuvre_count 005B                     _TX4STAbits 0EE8  
              _sendCharSerial4 22FE            __end_of_write_timer 234C  
