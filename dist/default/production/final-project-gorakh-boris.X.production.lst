

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 26 14:31:08 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16   000000                     
    17                           ; Generated 21/07/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F67K40 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51   000000                     
    52                           	psect	idataCOMRAM
    53   000FC6                     __pidataCOMRAM:
    54                           	callstack 0
    55                           
    56                           ;initializer for _turn180Delay
    57   000FC6  01FE               	dw	510
    58                           
    59                           ;initializer for _turnRight135Delay
    60   000FC8  012C               	dw	300
    61                           
    62                           ;initializer for _turnLeft135Delay
    63   000FCA  012C               	dw	300
    64                           
    65                           ;initializer for _turnRight90Delay
    66   000FCC  00AF               	dw	175
    67                           
    68                           ;initializer for _turnLeft90Delay
    69   000FCE  00AF               	dw	175
    70                           
    71                           ;initializer for _turningGear
    72   000FD0  2A                 	db	42
    73                           
    74                           ;initializer for _topAdjustSide
    75   000FD1  01                 	db	1
    76                           
    77                           ;initializer for _topAdjustPower
    78   000FD2  02                 	db	2
    79                           
    80                           ;initializer for _topGear
    81   000FD3  1E                 	db	30
    82                           
    83                           ;initializer for _rampDelay
    84   000FD4  08                 	db	8
    85   000000                     _LATGbits	set	3967
    86   000000                     _LATEbits	set	3965
    87   000000                     _TRISGbits	set	3975
    88   000000                     _TRISEbits	set	3973
    89   000000                     _LATFbits	set	3966
    90   000000                     _LATHbits	set	3968
    91   000000                     _TRISFbits	set	3974
    92   000000                     _TRISHbits	set	3976
    93   000000                     _SSP2CON2bits	set	3802
    94   000000                     _SSP2CLKPPS	set	3612
    95   000000                     _SSP2DATPPS	set	3613
    96   000000                     _RC7PPS	set	3689
    97   000000                     _RE2PPS	set	3700
    98   000000                     _LATCbits	set	3963
    99   000000                     _LATDbits	set	3964
   100   000000                     _TRISDbits	set	3972
   101   000000                     _T2PR	set	4028
   102   000000                     _T2CONbits	set	4029
   103   000000                     _CCPR2H	set	4006
   104   000000                     _CCPR1H	set	4010
   105   000000                     _TRISCbits	set	3971
   106   000000                     _RE4PPS	set	3702
   107   000000                     _RG6PPS	set	3720
   108   000000                     _RD5PPS	set	3695
   109   000000                     _ANSELDbits	set	3751
   110   000000                     _SSP2ADD	set	3798
   111   000000                     _SSP2CON1bits	set	3801
   112   000000                     _CCPR4H	set	3873
   113   000000                     _CCPR3H	set	3877
   114   000000                     _T2CLKCONbits	set	4031
   115   000000                     _T2HLTbits	set	4030
   116   000000                     _CCP1CONbits	set	4011
   117   000000                     _CCPTMRS0bits	set	4013
   118   000000                     _CCP2CONbits	set	4007
   119   000000                     _CCP3CONbits	set	3878
   120   000000                     _CCP4CONbits	set	3874
   121   000000                     _SSP2CON2	set	3802
   122   000000                     _SSP2STAT	set	3800
   123   000000                     _SSP2BUF	set	3797
   124   000000                     _RD6PPS	set	3696
   125                           
   126                           ; #config settings
   127                           
   128                           	psect	cinit
   129   000F8A                     __pcinit:
   130                           	callstack 0
   131   000F8A                     start_initialization:
   132                           	callstack 0
   133   000F8A                     __initialization:
   134                           	callstack 0
   135                           
   136                           ; Initialize objects allocated to COMRAM (15 bytes)
   137                           ; load TBLPTR registers with __pidataCOMRAM
   138   000F8A  0EC6               	movlw	low __pidataCOMRAM
   139   000F8C  6EF6               	movwf	tblptrl,c
   140   000F8E  0E0F               	movlw	high __pidataCOMRAM
   141   000F90  6EF7               	movwf	tblptrh,c
   142   000F92  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   143   000F94  6EF8               	movwf	tblptru,c
   144   000F96  EE00  F017         	lfsr	0,__pdataCOMRAM
   145   000F9A  EE10 F00F          	lfsr	1,15
   146   000F9E                     copy_data0:
   147   000F9E  0009               	tblrd		*+
   148   000FA0  CFF5 FFEE          	movff	tablat,postinc0
   149   000FA4  50E5               	movf	postdec1,w,c
   150   000FA6  50E1               	movf	fsr1l,w,c
   151   000FA8  E1FA               	bnz	copy_data0
   152   000FAA                     end_of_initialization:
   153                           	callstack 0
   154   000FAA                     __end_of__initialization:
   155                           	callstack 0
   156   000FAA  0100               	movlb	0
   157   000FAC  EF01  F007         	goto	_main	;jump to C main() function
   158                           
   159                           	psect	dataCOMRAM
   160   000017                     __pdataCOMRAM:
   161                           	callstack 0
   162   000017                     _turn180Delay:
   163                           	callstack 0
   164   000017                     	ds	2
   165   000019                     _turnRight135Delay:
   166                           	callstack 0
   167   000019                     	ds	2
   168   00001B                     _turnLeft135Delay:
   169                           	callstack 0
   170   00001B                     	ds	2
   171   00001D                     _turnRight90Delay:
   172                           	callstack 0
   173   00001D                     	ds	2
   174   00001F                     _turnLeft90Delay:
   175                           	callstack 0
   176   00001F                     	ds	2
   177   000021                     _turningGear:
   178                           	callstack 0
   179   000021                     	ds	1
   180   000022                     _topAdjustSide:
   181                           	callstack 0
   182   000022                     	ds	1
   183   000023                     _topAdjustPower:
   184                           	callstack 0
   185   000023                     	ds	1
   186   000024                     _topGear:
   187                           	callstack 0
   188   000024                     	ds	1
   189   000025                     _rampDelay:
   190                           	callstack 0
   191   000025                     	ds	1
   192                           
   193                           	psect	cstackCOMRAM
   194   000001                     __pcstackCOMRAM:
   195                           	callstack 0
   196   000001                     initDCmotorsPWM@PWMperiod:
   197                           	callstack 0
   198                           
   199                           ; 2 bytes @ 0x0
   200   000001                     	ds	2
   201   000003                     ??_main:
   202                           
   203                           ; 1 bytes @ 0x2
   204   000003                     	ds	2
   205   000005                     main@motorL:
   206                           	callstack 0
   207                           
   208                           ; 9 bytes @ 0x4
   209   000005                     	ds	9
   210   00000E                     main@motorR:
   211                           	callstack 0
   212                           
   213                           ; 9 bytes @ 0xD
   214   00000E                     	ds	9
   215                           
   216 ;;
   217 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   218 ;;
   219 ;; *************** function _main *****************
   220 ;; Defined at:
   221 ;;		line 23 in file "main.c"
   222 ;; Parameters:    Size  Location     Type
   223 ;;		None
   224 ;; Auto vars:     Size  Location     Type
   225 ;;  motorR          9   13[COMRAM] struct DC_motor
   226 ;;  motorL          9    4[COMRAM] struct DC_motor
   227 ;;  PWMcycle        2    0        unsigned int 
   228 ;; Return value:  Size  Location     Type
   229 ;;                  1    wreg      void 
   230 ;; Registers used:
   231 ;;		wreg, status,2, status,0, cstack
   232 ;; Tracked objects:
   233 ;;		On entry : 0/0
   234 ;;		On exit  : 0/0
   235 ;;		Unchanged: 0/0
   236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   238 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   239 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   240 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   241 ;;Total ram usage:       20 bytes
   242 ;; Hardware stack levels required when called: 1
   243 ;; This function calls:
   244 ;;		_buggy_lights_init
   245 ;;		_initDCmotorsPWM
   246 ;; This function is called by:
   247 ;;		Startup code after reset
   248 ;; This function uses a non-reentrant model
   249 ;;
   250                           
   251                           	psect	text0
   252   000E02                     __ptext0:
   253                           	callstack 0
   254   000E02                     _main:
   255                           	callstack 30
   256   000E02                     
   257                           ;main.c: 25:     initDCmotorsPWM(PWMcycle);
   258   000E02  0E00               	movlw	0
   259   000E04  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   260   000E06  0E63               	movlw	99
   261   000E08  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   262   000E0A  EC7D  F007         	call	_initDCmotorsPWM	;wreg free
   263   000E0E                     
   264                           ;main.c: 27:     struct DC_motor motorL, motorR;;main.c: 29:     motorL.power = 0;
   265   000E0E  0E00               	movlw	0
   266   000E10  6E05               	movwf	main@motorL^0,c
   267   000E12                     
   268                           ;main.c: 30:     motorL.direction = 1;
   269   000E12  0E01               	movlw	1
   270   000E14  6E06               	movwf	(main@motorL+1)^0,c
   271   000E16                     
   272                           ;main.c: 31:     motorL.brakemode = 1;
   273   000E16  0E01               	movlw	1
   274   000E18  6E07               	movwf	(main@motorL+2)^0,c
   275   000E1A                     
   276                           ;main.c: 32:     motorL.PWMperiod = PWMcycle;
   277   000E1A  0E00               	movlw	0
   278   000E1C  6E09               	movwf	(main@motorL+4)^0,c
   279   000E1E  0E63               	movlw	99
   280   000E20  6E08               	movwf	(main@motorL+3)^0,c
   281   000E22                     
   282                           ;main.c: 33:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   283   000E22  0EAA               	movlw	170
   284   000E24  6E0A               	movwf	(main@motorL+5)^0,c
   285   000E26  0E0F               	movlw	15
   286   000E28  6E0B               	movwf	(main@motorL+6)^0,c
   287   000E2A                     
   288                           ;main.c: 34:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   289   000E2A  0EA6               	movlw	166
   290   000E2C  6E0C               	movwf	(main@motorL+7)^0,c
   291   000E2E  0E0F               	movlw	15
   292   000E30  6E0D               	movwf	(main@motorL+8)^0,c
   293   000E32                     
   294                           ;main.c: 36:     motorR.power = 0;
   295   000E32  0E00               	movlw	0
   296   000E34  6E0E               	movwf	main@motorR^0,c
   297   000E36                     
   298                           ;main.c: 37:     motorR.direction = 1;
   299   000E36  0E01               	movlw	1
   300   000E38  6E0F               	movwf	(main@motorR+1)^0,c
   301   000E3A                     
   302                           ;main.c: 38:     motorR.brakemode = 1;
   303   000E3A  0E01               	movlw	1
   304   000E3C  6E10               	movwf	(main@motorR+2)^0,c
   305   000E3E                     
   306                           ;main.c: 39:     motorR.PWMperiod = PWMcycle;
   307   000E3E  0E00               	movlw	0
   308   000E40  6E12               	movwf	(main@motorR+4)^0,c
   309   000E42  0E63               	movlw	99
   310   000E44  6E11               	movwf	(main@motorR+3)^0,c
   311   000E46                     
   312                           ;main.c: 40:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   313   000E46  0E25               	movlw	37
   314   000E48  6E13               	movwf	(main@motorR+5)^0,c
   315   000E4A  0E0F               	movlw	15
   316   000E4C  6E14               	movwf	(main@motorR+6)^0,c
   317   000E4E                     
   318                           ;main.c: 41:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   319   000E4E  0E21               	movlw	33
   320   000E50  6E15               	movwf	(main@motorR+7)^0,c
   321   000E52  0E0F               	movlw	15
   322   000E54  6E16               	movwf	(main@motorR+8)^0,c
   323                           
   324                           ;main.c: 43:     buggy_lights_init();
   325   000E56  ECD8  F007         	call	_buggy_lights_init	;wreg free
   326   000E5A                     l1257:
   327                           
   328                           ;main.c: 47:         LATDbits.LATD4 = !LATDbits.LATD4;
   329   000E5A  A87C               	btfss	124,4,c	;volatile
   330   000E5C  EF32  F007         	goto	u311
   331   000E60  EF36  F007         	goto	u310
   332   000E64                     u311:
   333   000E64  6A03               	clrf	??_main^0,c
   334   000E66  2A03               	incf	??_main^0,f,c
   335   000E68  EF37  F007         	goto	u328
   336   000E6C                     u310:
   337   000E6C  6A03               	clrf	??_main^0,c
   338   000E6E                     u328:
   339   000E6E  3A03               	swapf	??_main^0,f,c
   340   000E70  507C               	movf	124,w,c	;volatile
   341   000E72  1803               	xorwf	??_main^0,w,c
   342   000E74  0BEF               	andlw	-17
   343   000E76  1803               	xorwf	??_main^0,w,c
   344   000E78  6E7C               	movwf	124,c	;volatile
   345   000E7A                     
   346                           ;main.c: 48:         LATDbits.LATD3 = !LATDbits.LATD3;
   347   000E7A  A67C               	btfss	124,3,c	;volatile
   348   000E7C  EF42  F007         	goto	u331
   349   000E80  EF46  F007         	goto	u330
   350   000E84                     u331:
   351   000E84  6A03               	clrf	??_main^0,c
   352   000E86  2A03               	incf	??_main^0,f,c
   353   000E88  EF47  F007         	goto	u348
   354   000E8C                     u330:
   355   000E8C  6A03               	clrf	??_main^0,c
   356   000E8E                     u348:
   357   000E8E  4603               	rlncf	??_main^0,f,c
   358   000E90  4603               	rlncf	??_main^0,f,c
   359   000E92  4603               	rlncf	??_main^0,f,c
   360   000E94  507C               	movf	124,w,c	;volatile
   361   000E96  1803               	xorwf	??_main^0,w,c
   362   000E98  0BF7               	andlw	-9
   363   000E9A  1803               	xorwf	??_main^0,w,c
   364   000E9C  6E7C               	movwf	124,c	;volatile
   365   000E9E                     
   366                           ;main.c: 49:         _delay((unsigned long)((500)*(64000000/4000.0)));
   367   000E9E  0E29               	movlw	41
   368   000EA0  6E04               	movwf	(??_main+1)^0,c
   369   000EA2  0E96               	movlw	150
   370   000EA4  6E03               	movwf	??_main^0,c
   371   000EA6  0E7F               	movlw	127
   372   000EA8                     u397:
   373   000EA8  2EE8               	decfsz	wreg,f,c
   374   000EAA  D7FE               	bra	u397
   375   000EAC  2E03               	decfsz	??_main^0,f,c
   376   000EAE  D7FC               	bra	u397
   377   000EB0  2E04               	decfsz	(??_main+1)^0,f,c
   378   000EB2  D7FA               	bra	u397
   379   000EB4  0000               	nop	
   380   000EB6                     
   381                           ;main.c: 50:         LATFbits.LATF0 = !LATFbits.LATF0;
   382   000EB6  A07E               	btfss	126,0,c	;volatile
   383   000EB8  EF60  F007         	goto	u351
   384   000EBC  EF64  F007         	goto	u350
   385   000EC0                     u351:
   386   000EC0  6A03               	clrf	??_main^0,c
   387   000EC2  2A03               	incf	??_main^0,f,c
   388   000EC4  EF65  F007         	goto	u368
   389   000EC8                     u350:
   390   000EC8  6A03               	clrf	??_main^0,c
   391   000ECA                     u368:
   392   000ECA  507E               	movf	126,w,c	;volatile
   393   000ECC  1803               	xorwf	??_main^0,w,c
   394   000ECE  0BFE               	andlw	-2
   395   000ED0  1803               	xorwf	??_main^0,w,c
   396   000ED2  6E7E               	movwf	126,c	;volatile
   397   000ED4                     
   398                           ;main.c: 51:         LATHbits.LATH0 = !LATHbits.LATH0;
   399   000ED4  A080               	btfss	128,0,c	;volatile
   400   000ED6  EF6F  F007         	goto	u371
   401   000EDA  EF73  F007         	goto	u370
   402   000EDE                     u371:
   403   000EDE  6A03               	clrf	??_main^0,c
   404   000EE0  2A03               	incf	??_main^0,f,c
   405   000EE2  EF74  F007         	goto	u388
   406   000EE6                     u370:
   407   000EE6  6A03               	clrf	??_main^0,c
   408   000EE8                     u388:
   409   000EE8  5080               	movf	128,w,c	;volatile
   410   000EEA  1803               	xorwf	??_main^0,w,c
   411   000EEC  0BFE               	andlw	-2
   412   000EEE  1803               	xorwf	??_main^0,w,c
   413   000EF0  6E80               	movwf	128,c	;volatile
   414   000EF2  EF2D  F007         	goto	l1257
   415   000EF6  EF00  F000         	goto	start
   416   000EFA                     __end_of_main:
   417                           	callstack 0
   418                           
   419 ;; *************** function _initDCmotorsPWM *****************
   420 ;; Defined at:
   421 ;;		line 5 in file "dc_motor.c"
   422 ;; Parameters:    Size  Location     Type
   423 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   424 ;; Auto vars:     Size  Location     Type
   425 ;;		None
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1    wreg      void 
   428 ;; Registers used:
   429 ;;		wreg, status,2
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   435 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   438 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   439 ;;Total ram usage:        2 bytes
   440 ;; Hardware stack levels used: 1
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_main
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           	psect	text1
   449   000EFA                     __ptext1:
   450                           	callstack 0
   451   000EFA                     _initDCmotorsPWM:
   452                           	callstack 30
   453   000EFA                     
   454                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   455   000EFA  9485               	bcf	133,2,c	;volatile
   456                           
   457                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   458   000EFC  9885               	bcf	133,4,c	;volatile
   459                           
   460                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   461   000EFE  9E83               	bcf	131,7,c	;volatile
   462                           
   463                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   464   000F00  9C87               	bcf	135,6,c	;volatile
   465                           
   466                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   467   000F02  947D               	bcf	125,2,c	;volatile
   468                           
   469                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   470   000F04  987D               	bcf	125,4,c	;volatile
   471                           
   472                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   473   000F06  9E7B               	bcf	123,7,c	;volatile
   474                           
   475                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   476   000F08  9C7F               	bcf	127,6,c	;volatile
   477   000F0A                     
   478                           ;dc_motor.c: 18:     RE2PPS=0x05;
   479   000F0A  0E05               	movlw	5
   480   000F0C  010E               	movlb	14	; () banked
   481   000F0E  6F74               	movwf	116,b	;volatile
   482                           
   483                           ;dc_motor.c: 19:     RE4PPS=0x06;
   484   000F10  0E06               	movlw	6
   485   000F12  6F76               	movwf	118,b	;volatile
   486                           
   487                           ;dc_motor.c: 20:     RC7PPS=0x07;
   488   000F14  0E07               	movlw	7
   489   000F16  6F69               	movwf	105,b	;volatile
   490                           
   491                           ;dc_motor.c: 21:     RG6PPS=0x08;
   492   000F18  0E08               	movlw	8
   493   000F1A  6F88               	movwf	136,b	;volatile
   494                           
   495                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   496   000F1C  50BD               	movf	189,w,c	;volatile
   497   000F1E  0B8F               	andlw	-113
   498   000F20  0940               	iorlw	64
   499   000F22  6EBD               	movwf	189,c	;volatile
   500                           
   501                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   502   000F24  0EE0               	movlw	-32
   503   000F26  16BE               	andwf	190,f,c	;volatile
   504                           
   505                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   506   000F28  50BF               	movf	191,w,c	;volatile
   507   000F2A  0BF0               	andlw	-16
   508   000F2C  0901               	iorlw	1
   509   000F2E  6EBF               	movwf	191,c	;volatile
   510   000F30                     
   511                           ; BSR set to: 14
   512                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   513   000F30  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   514   000F34                     
   515                           ; BSR set to: 14
   516                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   517   000F34  8EBD               	bsf	189,7,c	;volatile
   518                           
   519                           ;dc_motor.c: 35:     CCPR1H=0;
   520   000F36  0E00               	movlw	0
   521   000F38  6EAA               	movwf	170,c	;volatile
   522                           
   523                           ;dc_motor.c: 36:     CCPR2H=0;
   524   000F3A  0E00               	movlw	0
   525   000F3C  6EA6               	movwf	166,c	;volatile
   526                           
   527                           ;dc_motor.c: 37:     CCPR3H=0;
   528   000F3E  0E00               	movlw	0
   529   000F40  010F               	movlb	15	; () banked
   530   000F42  6F25               	movwf	37,b	;volatile
   531                           
   532                           ;dc_motor.c: 38:     CCPR4H=0;
   533   000F44  0E00               	movlw	0
   534   000F46  6F21               	movwf	33,b	;volatile
   535                           
   536                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   537   000F48  0EFC               	movlw	-4
   538   000F4A  16AD               	andwf	173,f,c	;volatile
   539                           
   540                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   541   000F4C  0EF3               	movlw	-13
   542   000F4E  16AD               	andwf	173,f,c	;volatile
   543                           
   544                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   545   000F50  0ECF               	movlw	-49
   546   000F52  16AD               	andwf	173,f,c	;volatile
   547                           
   548                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   549   000F54  0E3F               	movlw	-193
   550   000F56  16AD               	andwf	173,f,c	;volatile
   551   000F58                     
   552                           ; BSR set to: 15
   553                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   554   000F58  88AB               	bsf	171,4,c	;volatile
   555                           
   556                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   557   000F5A  50AB               	movf	171,w,c	;volatile
   558   000F5C  0BF0               	andlw	-16
   559   000F5E  090C               	iorlw	12
   560   000F60  6EAB               	movwf	171,c	;volatile
   561   000F62                     
   562                           ; BSR set to: 15
   563                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   564   000F62  8EAB               	bsf	171,7,c	;volatile
   565   000F64                     
   566                           ; BSR set to: 15
   567                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   568   000F64  88A7               	bsf	167,4,c	;volatile
   569                           
   570                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   571   000F66  50A7               	movf	167,w,c	;volatile
   572   000F68  0BF0               	andlw	-16
   573   000F6A  090C               	iorlw	12
   574   000F6C  6EA7               	movwf	167,c	;volatile
   575   000F6E                     
   576                           ; BSR set to: 15
   577                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   578   000F6E  8EA7               	bsf	167,7,c	;volatile
   579   000F70                     
   580                           ; BSR set to: 15
   581                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   582   000F70  8926               	bsf	38,4,b	;volatile
   583                           
   584                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   585   000F72  5126               	movf	38,w,b	;volatile
   586   000F74  0BF0               	andlw	-16
   587   000F76  090C               	iorlw	12
   588   000F78  6F26               	movwf	38,b	;volatile
   589   000F7A                     
   590                           ; BSR set to: 15
   591                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   592   000F7A  8F26               	bsf	38,7,b	;volatile
   593   000F7C                     
   594                           ; BSR set to: 15
   595                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   596   000F7C  8922               	bsf	34,4,b	;volatile
   597                           
   598                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   599   000F7E  5122               	movf	34,w,b	;volatile
   600   000F80  0BF0               	andlw	-16
   601   000F82  090C               	iorlw	12
   602   000F84  6F22               	movwf	34,b	;volatile
   603   000F86                     
   604                           ; BSR set to: 15
   605                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   606   000F86  8F22               	bsf	34,7,b	;volatile
   607   000F88                     
   608                           ; BSR set to: 15
   609   000F88  0012               	return		;funcret
   610   000F8A                     __end_of_initDCmotorsPWM:
   611                           	callstack 0
   612                           
   613 ;; *************** function _buggy_lights_init *****************
   614 ;; Defined at:
   615 ;;		line 4 in file "buggy_lights.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;		None
   618 ;; Auto vars:     Size  Location     Type
   619 ;;		None
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      void 
   622 ;; Registers used:
   623 ;;		None
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   633 ;;Total ram usage:        0 bytes
   634 ;; Hardware stack levels used: 1
   635 ;; This function calls:
   636 ;;		Nothing
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           	psect	text2
   643   000FB0                     __ptext2:
   644                           	callstack 0
   645   000FB0                     _buggy_lights_init:
   646                           	callstack 30
   647   000FB0                     
   648                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
   649   000FB0  9884               	bcf	132,4,c	;volatile
   650                           
   651                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
   652   000FB2  9288               	bcf	136,1,c	;volatile
   653                           
   654                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
   655   000FB4  9684               	bcf	132,3,c	;volatile
   656                           
   657                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
   658   000FB6  9086               	bcf	134,0,c	;volatile
   659                           
   660                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
   661   000FB8  9088               	bcf	136,0,c	;volatile
   662                           
   663                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
   664   000FBA  887C               	bsf	124,4,c	;volatile
   665                           
   666                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
   667   000FBC  8280               	bsf	128,1,c	;volatile
   668                           
   669                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
   670   000FBE  867C               	bsf	124,3,c	;volatile
   671                           
   672                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
   673   000FC0  807E               	bsf	126,0,c	;volatile
   674                           
   675                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
   676   000FC2  8080               	bsf	128,0,c	;volatile
   677   000FC4  0012               	return		;funcret
   678   000FC6                     __end_of_buggy_lights_init:
   679                           	callstack 0
   680                           
   681                           	psect	smallconst
   682   000E00                     __psmallconst:
   683                           	callstack 0
   684   000E00  00                 	db	0
   685   000E01  00                 	db	0	; dummy byte at the end
   686   000000                     
   687                           	psect	rparam
   688   000000                     
   689                           	psect	config
   690                           
   691                           ;Config register CONFIG1L @ 0x300000
   692                           ;	External Oscillator mode Selection bits
   693                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   694                           ;	Power-up default value for COSC bits
   695                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   696   300000                     	org	3145728
   697   300000  AA                 	db	170
   698                           
   699                           ;Config register CONFIG1H @ 0x300001
   700                           ;	unspecified, using default values
   701                           ;	Clock Out Enable bit
   702                           ;	CLKOUTEN = 0x1, unprogrammed default
   703                           ;	Clock Switch Enable bit
   704                           ;	CSWEN = 0x1, unprogrammed default
   705                           ;	Fail-Safe Clock Monitor Enable bit
   706                           ;	FCMEN = 0x1, unprogrammed default
   707   300001                     	org	3145729
   708   300001  FF                 	db	255
   709                           
   710                           ;Config register CONFIG3L @ 0x300004
   711                           ;	WDT Period Select bits
   712                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   713                           ;	WDT operating mode
   714                           ;	WDTE = OFF, WDT Disabled
   715   300004                     	org	3145732
   716   300004  9F                 	db	159
   717                           
   718                           ;Config register CONFIG3H @ 0x300005
   719                           ;	unspecified, using default values
   720                           ;	WDT Window Select bits
   721                           ;	WDTCWS = 0x7, unprogrammed default
   722                           ;	WDT input clock selector
   723                           ;	WDTCCS = 0x7, unprogrammed default
   724   300005                     	org	3145733
   725   300005  FF                 	db	255
   726                           tosu	equ	0xFFF
   727                           tosh	equ	0xFFE
   728                           tosl	equ	0xFFD
   729                           stkptr	equ	0xFFC
   730                           pclatu	equ	0xFFB
   731                           pclath	equ	0xFFA
   732                           pcl	equ	0xFF9
   733                           tblptru	equ	0xFF8
   734                           tblptrh	equ	0xFF7
   735                           tblptrl	equ	0xFF6
   736                           tablat	equ	0xFF5
   737                           prodh	equ	0xFF4
   738                           prodl	equ	0xFF3
   739                           indf0	equ	0xFEF
   740                           postinc0	equ	0xFEE
   741                           postdec0	equ	0xFED
   742                           preinc0	equ	0xFEC
   743                           plusw0	equ	0xFEB
   744                           fsr0h	equ	0xFEA
   745                           fsr0l	equ	0xFE9
   746                           wreg	equ	0xFE8
   747                           indf1	equ	0xFE7
   748                           postinc1	equ	0xFE6
   749                           postdec1	equ	0xFE5
   750                           preinc1	equ	0xFE4
   751                           plusw1	equ	0xFE3
   752                           fsr1h	equ	0xFE2
   753                           fsr1l	equ	0xFE1
   754                           bsr	equ	0xFE0
   755                           indf2	equ	0xFDF
   756                           postinc2	equ	0xFDE
   757                           postdec2	equ	0xFDD
   758                           preinc2	equ	0xFDC
   759                           plusw2	equ	0xFDB
   760                           fsr2h	equ	0xFDA
   761                           fsr2l	equ	0xFD9
   762                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        15
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      37
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    S861DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    S861DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0     407
                                              2 COMRAM    20    20      0
                  _buggy_lights_init
                    _initDCmotorsPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _initDCmotorsPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      51        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      25       1       38.9%
BITBIGSFRllhhhh     54      0       0      38        0.0%
BITBIGSFRllllh      4B      0       0      48        0.0%
BITBIGSFRllhhhl     46      0       0      40        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     2D      0       0      42        0.0%
BITBIGSFRlllll      2D      0       0      49        0.0%
BITBIGSFRllhhhl     1E      0       0      43        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      44        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRlllhl       5      0       0      47        0.0%
BITBIGSFRlllhh       3      0       0      46        0.0%
BITBIGSFRllhhhl      2      0       0      39        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRlhh         2      0       0      37        0.0%
BITBIGSFRllhhhl      1      0       0      41        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      45        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      25      50        0.0%
DATA                 0      0      25       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 26 14:31:08 2024

             _turn180Delay 0017                         l15 0FC4                        l111 0F88  
                      l955 0FB0                        u310 0E6C                        u311 0E64  
                      u330 0E8C                        u331 0E84                        u350 0EC8  
                      u351 0EC0                        u328 0E6E                        u370 0EE6  
                      u371 0EDE                        u348 0E8E                        u368 0ECA  
                      u388 0EE8                        u397 0EA8                        wreg 0FE8  
                     l1211 0F34                       l1221 0F70                       l1213 0F58  
                     l1205 0EFA                       l1223 0F7A                       l1215 0F62  
                     l1207 0F0A                       l1231 0E02                       l1225 0F7C  
                     l1217 0F64                       l1209 0F30                       l1241 0E22  
                     l1233 0E0E                       l1227 0F86                       l1219 0F6E  
                     l1251 0E3E                       l1243 0E2A                       l1235 0E12  
                     l1261 0E9E                       l1253 0E46                       l1245 0E32  
                     l1237 0E16                       l1229 0E02                       l1263 0EB6  
                     l1255 0E4E                       l1247 0E36                       l1239 0E1A  
                     l1265 0ED4                       l1257 0E5A                       l1249 0E3A  
                     l1259 0E7A                       _T2PR 0FBC                       _main 0E02  
                     fsr1l 0FE1                       start 0000               ___param_bank 0000  
                    ?_main 0001                _turningGear 0021          _turnRight135Delay 0019  
                    tablat 0FF5            _turnLeft90Delay 001F            __initialization 0F8A  
             __end_of_main 0EFA                     ??_main 0003              __activetblptr 0000  
                   _CCPR1H 0FAA                     _CCPR2H 0FA6                     _CCPR3H 0F25  
                   _CCPR4H 0F21                     _RE2PPS 0E74                     _RD5PPS 0E6F  
                   _RC7PPS 0E69                     _RD6PPS 0E70                     _RE4PPS 0E76  
                   _RG6PPS 0E88           _turnLeft135Delay 001B               _CCPTMRS0bits 0FAD  
                   isa$std 0001               __pdataCOMRAM 0017               __mediumconst 0000  
                   tblptrh 0FF7                     tblptrl 0FF6                     tblptru 0FF8  
        ??_initDCmotorsPWM 0003          _buggy_lights_init 0FB0                 __accesstop 0060  
  __end_of__initialization 0FAA         ?_buggy_lights_init 0001              ___rparam_used 0001  
           __pcstackCOMRAM 0001        ??_buggy_lights_init 0001  __end_of_buggy_lights_init 0FC6  
             _T2CLKCONbits 0FBF                    _SSP2ADD 0ED6                    _SSP2BUF 0ED5  
                  __Hparam 0000                    __Lparam 0000               __psmallconst 0E00  
                  __pcinit 0F8A                    __ramtop 0E00                    __ptext0 0E02  
                  __ptext1 0EFA                    __ptext2 0FB0                  _T2CONbits 0FBD  
                _T2HLTbits 0FBE                    _topGear 0024       end_of_initialization 0FAA  
                  postdec1 0FE5                    postinc0 0FEE            _initDCmotorsPWM 0EFA  
                _TRISCbits 0F83                  _TRISDbits 0F84                  _TRISEbits 0F85  
                _TRISFbits 0F86                  _TRISGbits 0F87                  _TRISHbits 0F88  
              _CCP1CONbits 0FAB                _CCP2CONbits 0FA7                _CCP3CONbits 0F26  
              _CCP4CONbits 0F22                 main@motorL 0005                 main@motorR 000E  
            __pidataCOMRAM 0FC6        start_initialization 0F8A           _turnRight90Delay 001D  
  __end_of_initDCmotorsPWM 0F8A             _topAdjustPower 0023                __smallconst 0E00  
 initDCmotorsPWM@PWMperiod 0001                  _rampDelay 0025                   _LATCbits 0F7B  
                 _LATDbits 0F7C                   _LATEbits 0F7D                   _LATFbits 0F7E  
                 _LATGbits 0F7F                   _LATHbits 0F80           ?_initDCmotorsPWM 0001  
                 _SSP2CON2 0EDA                   _SSP2STAT 0ED8                  copy_data0 0F9E  
                 __Hrparam 0000                   __Lrparam 0000              _topAdjustSide 0022  
               _ANSELDbits 0EA7               _SSP2CON1bits 0ED9               _SSP2CON2bits 0EDA  
                 isa$xinst 0000                 _SSP2DATPPS 0E1D                 _SSP2CLKPPS 0E1C  
