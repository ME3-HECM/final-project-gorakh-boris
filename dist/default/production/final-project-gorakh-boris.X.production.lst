

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 14 19:24:10 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    89                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    90   000000                     
    91                           ; Generated 21/07/2023 GMT
    92                           ; 
    93                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution. Publication is not required when
   107                           ;        this file is used in an embedded application.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F67K40 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125   000000                     
   126                           	psect	idataCOMRAM
   127   003986                     __pidataCOMRAM:
   128                           	callstack 0
   129                           
   130                           ;initializer for _wall_threshold_clear
   131   003986  0032               	dw	50
   132                           
   133                           ;initializer for _manoeuvre_pointer
   134   003988  60                 	db	low _trail_manoeuvre
   135                           
   136                           ;initializer for _timer_low_pointer
   137   003989  74                 	db	low _trail_timer_low
   138                           
   139                           ;initializer for _timer_high_pointer
   140   00398A  88                 	db	low _trail_timer_high
   141                           
   142                           ;initializer for _rampDelay
   143   00398B  08                 	db	8
   144                           
   145                           ;initializer for _turningRightGear
   146   00398C  28                 	db	40
   147                           
   148                           ;initializer for _turningLeftGear
   149   00398D  28                 	db	40
   150                           
   151                           ;initializer for _bottomGearRight
   152   00398E  15                 	db	21
   153                           
   154                           ;initializer for _bottomGearLeft
   155   00398F  14                 	db	20
   156                           
   157                           ;initializer for _topGearRight
   158   003990  14                 	db	20
   159                           
   160                           ;initializer for _topGearLeft
   161   003991  14                 	db	20
   162                           
   163                           ;initializer for _sample_count
   164   003992  14                 	db	20
   165                           
   166                           	psect	idataBANK0
   167   003978                     __pidataBANK0:
   168                           	callstack 0
   169                           
   170                           ;initializer for _squareDelay
   171   003978  0988               	dw	2440
   172                           
   173                           ;initializer for _headbuttDelay
   174   00397A  0334               	dw	820
   175                           
   176                           ;initializer for _turn180Delay
   177   00397C  0190               	dw	400
   178                           
   179                           ;initializer for _turnRight135Delay
   180   00397E  0106               	dw	262
   181                           
   182                           ;initializer for _turnLeft135Delay
   183   003980  00FA               	dw	250
   184                           
   185                           ;initializer for _turnRight90Delay
   186   003982  006C               	dw	108
   187                           
   188                           ;initializer for _turnLeft90Delay
   189   003984  0054               	dw	84
   190   000000                     _TMR0H	set	4052
   191   000000                     _RC4STAbits	set	3815
   192   000000                     _SP4BRGH	set	3814
   193   000000                     _LATEbits	set	3965
   194   000000                     _LATGbits	set	3967
   195   000000                     _TRISEbits	set	3973
   196   000000                     _TRISGbits	set	3975
   197   000000                     _LATFbits	set	3966
   198   000000                     _LATHbits	set	3968
   199   000000                     _TRISFbits	set	3974
   200   000000                     _TRISHbits	set	3976
   201   000000                     _SSP2CON2bits	set	3802
   202   000000                     _RX4PPS	set	3605
   203   000000                     _SSP2CLKPPS	set	3612
   204   000000                     _SSP2DATPPS	set	3613
   205   000000                     _RC7PPS	set	3689
   206   000000                     _RE2PPS	set	3700
   207   000000                     _LATAbits	set	3961
   208   000000                     _LATDbits	set	3964
   209   000000                     _TRISDbits	set	3972
   210   000000                     _PORTFbits	set	3982
   211   000000                     _T2PR	set	4028
   212   000000                     _T2CONbits	set	4029
   213   000000                     _CCPR2H	set	4006
   214   000000                     _CCPR1H	set	4010
   215   000000                     _TRISCbits	set	3971
   216   000000                     _TRISAbits	set	3969
   217   000000                     _LATCbits	set	3963
   218   000000                     _RE4PPS	set	3702
   219   000000                     _RG6PPS	set	3720
   220   000000                     _RD5PPS	set	3695
   221   000000                     _ANSELDbits	set	3751
   222   000000                     _SSP2ADD	set	3798
   223   000000                     _SSP2CON1bits	set	3801
   224   000000                     _CCPR4H	set	3873
   225   000000                     _CCPR3H	set	3877
   226   000000                     _TMR0L	set	4051
   227   000000                     _T0CON0bits	set	4053
   228   000000                     _T0CON1bits	set	4054
   229   000000                     _T2CLKCONbits	set	4031
   230   000000                     _T2HLTbits	set	4030
   231   000000                     _CCP1CONbits	set	4011
   232   000000                     _CCPTMRS0bits	set	4013
   233   000000                     _CCP2CONbits	set	4007
   234   000000                     _CCP3CONbits	set	3878
   235   000000                     _CCP4CONbits	set	3874
   236   000000                     _TX4REG	set	3812
   237   000000                     _SP4BRGL	set	3813
   238   000000                     _TX4STAbits	set	3816
   239   000000                     _BAUD4CONbits	set	3817
   240   000000                     _SSP2CON2	set	3802
   241   000000                     _SSP2STAT	set	3800
   242   000000                     _ANSELFbits	set	3764
   243   000000                     _SSP2BUF	set	3797
   244   000000                     _PIE0bits	set	3625
   245   000000                     _PIR4bits	set	3639
   246   000000                     _RC0PPS	set	3682
   247   000000                     _RD6PPS	set	3696
   248   000000                     _INTCONbits	set	4082
   249   000000                     _PIR0bits	set	3635
   250                           
   251                           	psect	smallconst
   252   000E00                     __psmallconst:
   253                           	callstack 0
   254   000E00  00                 	db	0
   255   000E01                     STR_5:
   256                           
   257                           ; BSR set to: 14
   258   000E01  25                 	db	37
   259   000E02  75                 	db	117	;'u'
   260   000E03  20                 	db	32
   261   000E04  25                 	db	37
   262   000E05  75                 	db	117	;'u'
   263   000E06  20                 	db	32
   264   000E07  25                 	db	37
   265   000E08  75                 	db	117	;'u'
   266   000E09  20                 	db	32
   267   000E0A  25                 	db	37
   268   000E0B  75                 	db	117	;'u'
   269   000E0C  20                 	db	32
   270   000E0D  0D                 	db	13
   271   000E0E  00                 	db	0
   272   000E0F                     STR_1:
   273                           
   274                           ; BSR set to: 14
   275   000E0F  25                 	db	37
   276   000E10  64                 	db	100	;'d'
   277   000E11  20                 	db	32
   278   000E12  0D                 	db	13
   279   000E13  00                 	db	0
   280   000E14                     STR_2:
   281                           
   282                           ; BSR set to: 14
   283   000E14  25                 	db	37
   284   000E15  64                 	db	100	;'d'
   285   000E16  20                 	db	32
   286   000E17  00                 	db	0
   287   000E18  00                 	db	0	; dummy byte at the end
   288   000000                     
   289                           ; #config settings
   290                           
   291                           	psect	cinit
   292   003304                     __pcinit:
   293                           	callstack 0
   294   003304                     start_initialization:
   295                           	callstack 0
   296   003304                     __initialization:
   297                           	callstack 0
   298                           
   299                           ; Initialize objects allocated to BANK0 (14 bytes)
   300                           ; load TBLPTR registers with __pidataBANK0
   301   003304  0E78               	movlw	low __pidataBANK0
   302   003306  6EF6               	movwf	tblptrl,c
   303   003308  0E39               	movlw	high __pidataBANK0
   304   00330A  6EF7               	movwf	tblptrh,c
   305   00330C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   306   00330E  6EF8               	movwf	tblptru,c
   307   003310  EE00  F0BC         	lfsr	0,__pdataBANK0
   308   003314  EE10 F00E          	lfsr	1,14
   309   003318                     copy_data0:
   310   003318  0009               	tblrd		*+
   311   00331A  CFF5 FFEE          	movff	tablat,postinc0
   312   00331E  50E5               	movf	postdec1,w,c
   313   003320  50E1               	movf	fsr1l,w,c
   314   003322  E1FA               	bnz	copy_data0
   315                           
   316                           ; Initialize objects allocated to COMRAM (13 bytes)
   317                           ; load TBLPTR registers with __pidataCOMRAM
   318   003324  0E86               	movlw	low __pidataCOMRAM
   319   003326  6EF6               	movwf	tblptrl,c
   320   003328  0E39               	movlw	high __pidataCOMRAM
   321   00332A  6EF7               	movwf	tblptrh,c
   322   00332C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   323   00332E  6EF8               	movwf	tblptru,c
   324   003330  EE00  F04D         	lfsr	0,__pdataCOMRAM
   325   003334  EE10 F00D          	lfsr	1,13
   326   003338                     copy_data1:
   327   003338  0009               	tblrd		*+
   328   00333A  CFF5 FFEE          	movff	tablat,postinc0
   329   00333E  50E5               	movf	postdec1,w,c
   330   003340  50E1               	movf	fsr1l,w,c
   331   003342  E1FA               	bnz	copy_data1
   332                           
   333                           ; Clear objects allocated to BANK0 (60 bytes)
   334   003344  EE00  F060         	lfsr	0,__pbssBANK0
   335   003348  0E3C               	movlw	60
   336   00334A                     clear_0:
   337   00334A  6AEE               	clrf	postinc0,c
   338   00334C  06E8               	decf	wreg,f,c
   339   00334E  E1FD               	bnz	clear_0
   340                           
   341                           ; Clear objects allocated to COMRAM (4 bytes)
   342   003350  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   343   003352  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   344   003354  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   345   003356  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   346   003358                     end_of_initialization:
   347                           	callstack 0
   348   003358                     __end_of__initialization:
   349                           	callstack 0
   350   003358  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   351   00335A  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   352   00335C  0100               	movlb	0
   353   00335E  EF01  F012         	goto	_main	;jump to C main() function
   354                           
   355                           	psect	bssCOMRAM
   356   00005A                     __pbssCOMRAM:
   357                           	callstack 0
   358   00005A                     _manoeuvre_count:
   359                           	callstack 0
   360   00005A                     	ds	1
   361   00005B                     _lost_flag:
   362                           	callstack 0
   363   00005B                     	ds	1
   364   00005C                     _return_flag:
   365                           	callstack 0
   366   00005C                     	ds	1
   367   00005D                     _returning:
   368                           	callstack 0
   369   00005D                     	ds	1
   370                           
   371                           	psect	dataCOMRAM
   372   00004D                     __pdataCOMRAM:
   373                           	callstack 0
   374   00004D                     _wall_threshold_clear:
   375                           	callstack 0
   376   00004D                     	ds	2
   377   00004F                     _manoeuvre_pointer:
   378                           	callstack 0
   379   00004F                     	ds	1
   380   000050                     _timer_low_pointer:
   381                           	callstack 0
   382   000050                     	ds	1
   383   000051                     _timer_high_pointer:
   384                           	callstack 0
   385   000051                     	ds	1
   386   000052                     _rampDelay:
   387                           	callstack 0
   388   000052                     	ds	1
   389   000053                     _turningRightGear:
   390                           	callstack 0
   391   000053                     	ds	1
   392   000054                     _turningLeftGear:
   393                           	callstack 0
   394   000054                     	ds	1
   395   000055                     _bottomGearRight:
   396                           	callstack 0
   397   000055                     	ds	1
   398   000056                     _bottomGearLeft:
   399                           	callstack 0
   400   000056                     	ds	1
   401   000057                     _topGearRight:
   402                           	callstack 0
   403   000057                     	ds	1
   404   000058                     _topGearLeft:
   405                           	callstack 0
   406   000058                     	ds	1
   407   000059                     _sample_count:
   408                           	callstack 0
   409   000059                     	ds	1
   410                           
   411                           	psect	bssBANK0
   412   000060                     __pbssBANK0:
   413                           	callstack 0
   414   000060                     _trail_manoeuvre:
   415                           	callstack 0
   416   000060                     	ds	20
   417   000074                     _trail_timer_low:
   418                           	callstack 0
   419   000074                     	ds	20
   420   000088                     _trail_timer_high:
   421                           	callstack 0
   422   000088                     	ds	20
   423                           
   424                           	psect	dataBANK0
   425   0000BC                     __pdataBANK0:
   426                           	callstack 0
   427   0000BC                     _squareDelay:
   428                           	callstack 0
   429   0000BC                     	ds	2
   430   0000BE                     _headbuttDelay:
   431                           	callstack 0
   432   0000BE                     	ds	2
   433   0000C0                     _turn180Delay:
   434                           	callstack 0
   435   0000C0                     	ds	2
   436   0000C2                     _turnRight135Delay:
   437                           	callstack 0
   438   0000C2                     	ds	2
   439   0000C4                     _turnLeft135Delay:
   440                           	callstack 0
   441   0000C4                     	ds	2
   442   0000C6                     _turnRight90Delay:
   443                           	callstack 0
   444   0000C6                     	ds	2
   445   0000C8                     _turnLeft90Delay:
   446                           	callstack 0
   447   0000C8                     	ds	2
   448                           
   449                           	psect	cstackBANK0
   450   00009C                     __pcstackBANK0:
   451                           	callstack 0
   452   00009C                     main@HSV_colour:
   453                           	callstack 0
   454                           
   455                           ; 6 bytes @ 0x0
   456   00009C                     	ds	6
   457   0000A2                     main@motorL:
   458                           	callstack 0
   459                           
   460                           ; 9 bytes @ 0x6
   461   0000A2                     	ds	9
   462   0000AB                     main@motorR:
   463                           	callstack 0
   464                           
   465                           ; 9 bytes @ 0xF
   466   0000AB                     	ds	9
   467   0000B4                     main@RGBC_colour:
   468                           	callstack 0
   469                           
   470                           ; 8 bytes @ 0x18
   471   0000B4                     	ds	8
   472                           
   473                           	psect	cstackCOMRAM
   474   000001                     __pcstackCOMRAM:
   475                           	callstack 0
   476   000001                     ??_toggle_brake_lights:
   477   000001                     ??_toggle_main_beam:
   478   000001                     ??_toggle_left_indicators:
   479   000001                     ??_toggle_right_indicators:
   480   000001                     ??_toggle_tricolour_LED:
   481   000001                     ??_I2C_2_Master_Idle:
   482   000001                     ?_max_RGB:
   483                           	callstack 0
   484   000001                     ?_min_RGB:
   485                           	callstack 0
   486   000001                     ?___wmul:
   487                           	callstack 0
   488   000001                     ?___lmul:
   489                           	callstack 0
   490   000001                     ?___lldiv:
   491                           	callstack 0
   492   000001                     ?___xxtofl:
   493                           	callstack 0
   494   000001                     max_RGB@p:
   495                           	callstack 0
   496   000001                     min_RGB@p:
   497                           	callstack 0
   498   000001                     colour_to_key@p1:
   499                           	callstack 0
   500   000001                     read_timer@tH:
   501                           	callstack 0
   502   000001                     write_timer@tL:
   503                           	callstack 0
   504   000001                     read_trail@tH:
   505                           	callstack 0
   506   000001                     write_trail@tL:
   507                           	callstack 0
   508   000001                     initDCmotorsPWM@PWMperiod:
   509                           	callstack 0
   510   000001                     ___wmul@multiplier:
   511                           	callstack 0
   512   000001                     ___lmul@multiplier:
   513                           	callstack 0
   514   000001                     ___lldiv@dividend:
   515                           	callstack 0
   516   000001                     ___xxtofl@val:
   517                           	callstack 0
   518                           
   519                           ; 4 bytes @ 0x0
   520   000001                     	ds	1
   521   000002                     ??_I2C_2_Master_Read:
   522   000002                     colour_to_key@p2:
   523                           	callstack 0
   524   000002                     I2C_2_Master_Write@data_byte:
   525                           	callstack 0
   526   000002                     read_timer@tL:
   527                           	callstack 0
   528   000002                     write_timer@tH:
   529                           	callstack 0
   530   000002                     read_trail@tL:
   531                           	callstack 0
   532   000002                     write_trail@man:
   533                           	callstack 0
   534                           
   535                           ; 1 bytes @ 0x1
   536   000002                     	ds	1
   537   000003                     color_writetoaddr@value:
   538                           	callstack 0
   539   000003                     I2C_2_Master_Read@ack:
   540                           	callstack 0
   541   000003                     read_trail@man:
   542                           	callstack 0
   543   000003                     write_trail@tH:
   544                           	callstack 0
   545   000003                     ___wmul@multiplicand:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x2
   549   000003                     	ds	1
   550   000004                     color_writetoaddr@address:
   551                           	callstack 0
   552   000004                     I2C_2_Master_Read@tmp:
   553                           	callstack 0
   554                           
   555                           ; 1 bytes @ 0x3
   556   000004                     	ds	1
   557   000005                     ??_color_click_init:
   558   000005                     ??___xxtofl:
   559   000005                     ?_color_read_Red:
   560                           	callstack 0
   561   000005                     ?_color_read_Green:
   562                           	callstack 0
   563   000005                     ?_color_read_Blue:
   564                           	callstack 0
   565   000005                     ?_color_read_Clear:
   566                           	callstack 0
   567   000005                     colour_to_key@key:
   568                           	callstack 0
   569   000005                     max_RGB@max_val:
   570                           	callstack 0
   571   000005                     min_RGB@min_val:
   572                           	callstack 0
   573   000005                     ___wmul@product:
   574                           	callstack 0
   575   000005                     ___lmul@multiplicand:
   576                           	callstack 0
   577   000005                     ___lldiv@divisor:
   578                           	callstack 0
   579                           
   580                           ; 4 bytes @ 0x4
   581   000005                     	ds	2
   582   000007                     ??_color_read_Red:
   583   000007                     ??_color_read_Green:
   584   000007                     ??_color_read_Blue:
   585   000007                     ??_color_read_Clear:
   586   000007                     ?___lwdiv:
   587                           	callstack 0
   588   000007                     ___lwdiv@dividend:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x6
   592   000007                     	ds	2
   593   000009                     ___xxtofl@sign:
   594                           	callstack 0
   595   000009                     ___lwdiv@divisor:
   596                           	callstack 0
   597   000009                     ___lmul@product:
   598                           	callstack 0
   599   000009                     ___lldiv@quotient:
   600                           	callstack 0
   601                           
   602                           ; 4 bytes @ 0x8
   603   000009                     	ds	1
   604   00000A                     ___xxtofl@exp:
   605                           	callstack 0
   606   00000A                     color_read_Red@tmp:
   607                           	callstack 0
   608   00000A                     color_read_Green@tmp:
   609                           	callstack 0
   610   00000A                     color_read_Blue@tmp:
   611                           	callstack 0
   612   00000A                     color_read_Clear@tmp:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x9
   616   00000A                     	ds	1
   617   00000B                     ___lwdiv@quotient:
   618                           	callstack 0
   619   00000B                     ___xxtofl@arg:
   620                           	callstack 0
   621                           
   622                           ; 4 bytes @ 0xA
   623   00000B                     	ds	1
   624   00000C                     read_RGBC@p:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0xB
   628   00000C                     	ds	1
   629   00000D                     wait_for_wall@p:
   630                           	callstack 0
   631   00000D                     ___lldiv@counter:
   632                           	callstack 0
   633   00000D                     ___lwdiv@counter:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0xC
   637   00000D                     	ds	1
   638   00000E                     average_RGBC@p:
   639                           	callstack 0
   640   00000E                     wait_for_wall@loss:
   641                           	callstack 0
   642   00000E                     convert_HSV@p1:
   643                           	callstack 0
   644   00000E                     setMotorPWM@m:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0xD
   648   00000E                     	ds	1
   649   00000F                     ??_average_RGBC:
   650   00000F                     ??_setMotorPWM:
   651   00000F                     ?___flmul:
   652                           	callstack 0
   653   00000F                     convert_HSV@p2:
   654                           	callstack 0
   655   00000F                     ___flmul@b:
   656                           	callstack 0
   657                           
   658                           ; 4 bytes @ 0xE
   659   00000F                     	ds	1
   660   000010                     ??_convert_HSV:
   661                           
   662                           ; 1 bytes @ 0xF
   663   000010                     	ds	1
   664   000011                     average_RGBC@i:
   665                           	callstack 0
   666   000011                     setMotorPWM@posDuty:
   667                           	callstack 0
   668                           
   669                           ; 1 bytes @ 0x10
   670   000011                     	ds	1
   671   000012                     setMotorPWM@negDuty:
   672                           	callstack 0
   673   000012                     average_RGBC@temp_R:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x11
   677   000012                     	ds	1
   678   000013                     stop@mL:
   679                           	callstack 0
   680   000013                     turnLeft@mL:
   681                           	callstack 0
   682   000013                     turnRight@mL:
   683                           	callstack 0
   684   000013                     fullSpeedAhead@mL:
   685                           	callstack 0
   686   000013                     fullSpeedReverse@mL:
   687                           	callstack 0
   688   000013                     ___flmul@a:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x12
   692   000013                     	ds	1
   693   000014                     stop@mR:
   694                           	callstack 0
   695   000014                     turnLeft@mR:
   696                           	callstack 0
   697   000014                     turnRight@mR:
   698                           	callstack 0
   699   000014                     fullSpeedAhead@mR:
   700                           	callstack 0
   701   000014                     fullSpeedReverse@mR:
   702                           	callstack 0
   703                           
   704                           ; 1 bytes @ 0x13
   705   000014                     	ds	1
   706   000015                     ??_stop:
   707   000015                     ??_turnLeft:
   708   000015                     ??_turnRight:
   709   000015                     ??_fullSpeedAhead:
   710   000015                     ??_fullSpeedReverse:
   711                           
   712                           ; 1 bytes @ 0x14
   713   000015                     	ds	1
   714   000016                     turnLeft@leftGear:
   715                           	callstack 0
   716   000016                     turnRight@leftGear:
   717                           	callstack 0
   718   000016                     fullSpeedAhead@leftGear:
   719                           	callstack 0
   720   000016                     fullSpeedReverse@leftGear:
   721                           	callstack 0
   722   000016                     average_RGBC@temp_G:
   723                           	callstack 0
   724                           
   725                           ; 4 bytes @ 0x15
   726   000016                     	ds	1
   727   000017                     ??___flmul:
   728   000017                     turnLeft@rightGear:
   729                           	callstack 0
   730   000017                     turnRight@rightGear:
   731                           	callstack 0
   732   000017                     fullSpeedAhead@rightGear:
   733                           	callstack 0
   734   000017                     fullSpeedReverse@rightGear:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x16
   738   000017                     	ds	1
   739   000018                     turnLeft90@mL:
   740                           	callstack 0
   741   000018                     turnRight90@mL:
   742                           	callstack 0
   743   000018                     turnLeft135@mL:
   744                           	callstack 0
   745   000018                     turnRight135@mL:
   746                           	callstack 0
   747   000018                     UTurn@mL:
   748                           	callstack 0
   749   000018                     headbuttReverse@mL:
   750                           	callstack 0
   751   000018                     squareReverse@mL:
   752                           	callstack 0
   753   000018                     convert_HSV@sat_scale:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x17
   757   000018                     	ds	1
   758   000019                     turnLeft90@mR:
   759                           	callstack 0
   760   000019                     turnRight90@mR:
   761                           	callstack 0
   762   000019                     turnLeft135@mR:
   763                           	callstack 0
   764   000019                     turnRight135@mR:
   765                           	callstack 0
   766   000019                     UTurn@mR:
   767                           	callstack 0
   768   000019                     headbuttReverse@mR:
   769                           	callstack 0
   770   000019                     squareReverse@mR:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0x18
   774   000019                     	ds	1
   775   00001A                     ??_turnLeft90:
   776   00001A                     ??_turnRight90:
   777   00001A                     ??_turnLeft135:
   778   00001A                     ??_turnRight135:
   779   00001A                     ??_UTurn:
   780   00001A                     ??_headbuttReverse:
   781   00001A                     ??_squareReverse:
   782   00001A                     convert_HSV@m:
   783                           	callstack 0
   784   00001A                     average_RGBC@temp_B:
   785                           	callstack 0
   786                           
   787                           ; 4 bytes @ 0x19
   788   00001A                     	ds	1
   789   00001B                     ___flmul@sign:
   790                           	callstack 0
   791                           
   792                           ; 1 bytes @ 0x1A
   793   00001B                     	ds	1
   794   00001C                     card_red@mL:
   795                           	callstack 0
   796   00001C                     card_green@mL:
   797                           	callstack 0
   798   00001C                     card_blue@mL:
   799                           	callstack 0
   800   00001C                     card_yellow@mL:
   801                           	callstack 0
   802   00001C                     card_pink@mL:
   803                           	callstack 0
   804   00001C                     card_orange@mL:
   805                           	callstack 0
   806   00001C                     card_cyan@mL:
   807                           	callstack 0
   808   00001C                     card_white@mL:
   809                           	callstack 0
   810   00001C                     convert_HSV@sat:
   811                           	callstack 0
   812   00001C                     ___flmul@grs:
   813                           	callstack 0
   814                           
   815                           ; 4 bytes @ 0x1B
   816   00001C                     	ds	1
   817   00001D                     card_red@mR:
   818                           	callstack 0
   819   00001D                     card_green@mR:
   820                           	callstack 0
   821   00001D                     card_blue@mR:
   822                           	callstack 0
   823   00001D                     card_yellow@mR:
   824                           	callstack 0
   825   00001D                     card_pink@mR:
   826                           	callstack 0
   827   00001D                     card_orange@mR:
   828                           	callstack 0
   829   00001D                     card_cyan@mR:
   830                           	callstack 0
   831   00001D                     card_white@mR:
   832                           	callstack 0
   833                           
   834                           ; 1 bytes @ 0x1C
   835   00001D                     	ds	1
   836   00001E                     card_red@backtrack:
   837                           	callstack 0
   838   00001E                     card_green@backtrack:
   839                           	callstack 0
   840   00001E                     card_blue@backtrack:
   841                           	callstack 0
   842   00001E                     card_yellow@backtrack:
   843                           	callstack 0
   844   00001E                     card_pink@backtrack:
   845                           	callstack 0
   846   00001E                     card_orange@backtrack:
   847                           	callstack 0
   848   00001E                     card_cyan@backtrack:
   849                           	callstack 0
   850   00001E                     convert_HSV@hue:
   851                           	callstack 0
   852   00001E                     average_RGBC@temp_C:
   853                           	callstack 0
   854                           
   855                           ; 4 bytes @ 0x1D
   856   00001E                     	ds	1
   857   00001F                     ??_card_red:
   858   00001F                     ??_card_green:
   859   00001F                     ??_card_blue:
   860   00001F                     ??_card_yellow:
   861   00001F                     ??_card_pink:
   862   00001F                     ??_card_orange:
   863   00001F                     ??_card_cyan:
   864                           
   865                           ; 1 bytes @ 0x1E
   866   00001F                     	ds	1
   867   000020                     ___flmul@aexp:
   868                           	callstack 0
   869   000020                     convert_HSV@temp_615:
   870                           	callstack 0
   871                           
   872                           ; 4 bytes @ 0x1F
   873   000020                     	ds	1
   874   000021                     pick_card@mL:
   875                           	callstack 0
   876   000021                     ___flmul@bexp:
   877                           	callstack 0
   878                           
   879                           ; 1 bytes @ 0x20
   880   000021                     	ds	1
   881   000022                     pick_card@mR:
   882                           	callstack 0
   883   000022                     ___flmul@prod:
   884                           	callstack 0
   885                           
   886                           ; 4 bytes @ 0x21
   887   000022                     	ds	1
   888   000023                     pick_card@backtrack:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x22
   892   000023                     	ds	1
   893   000024                     pick_card@key:
   894                           	callstack 0
   895   000024                     convert_HSV@temp:
   896                           	callstack 0
   897                           
   898                           ; 4 bytes @ 0x23
   899   000024                     	ds	1
   900   000025                     ??_pick_card:
   901                           
   902                           ; 1 bytes @ 0x24
   903   000025                     	ds	1
   904   000026                     ___flmul@temp:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x25
   908   000026                     	ds	1
   909   000027                     return_to_sender@mL:
   910                           	callstack 0
   911                           
   912                           ; 1 bytes @ 0x26
   913   000027                     	ds	1
   914   000028                     ?___fltol:
   915                           	callstack 0
   916   000028                     return_to_sender@mR:
   917                           	callstack 0
   918   000028                     convert_HSV@temp_611:
   919                           	callstack 0
   920   000028                     ___fltol@f1:
   921                           	callstack 0
   922                           
   923                           ; 4 bytes @ 0x27
   924   000028                     	ds	1
   925   000029                     return_to_sender@timerH:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0x28
   929   000029                     	ds	1
   930   00002A                     return_to_sender@timerL:
   931                           	callstack 0
   932                           
   933                           ; 1 bytes @ 0x29
   934   00002A                     	ds	1
   935   00002B                     return_to_sender@mann:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x2A
   939   00002B                     	ds	1
   940   00002C                     ??___fltol:
   941   00002C                     convert_HSV@temp_612:
   942                           	callstack 0
   943                           
   944                           ; 4 bytes @ 0x2B
   945   00002C                     	ds	4
   946   000030                     ___fltol@sign1:
   947                           	callstack 0
   948   000030                     convert_HSV@temp_613:
   949                           	callstack 0
   950                           
   951                           ; 4 bytes @ 0x2F
   952   000030                     	ds	1
   953   000031                     ___fltol@exp1:
   954                           	callstack 0
   955                           
   956                           ; 1 bytes @ 0x30
   957   000031                     	ds	1
   958   000032                     scale_RGB@p:
   959                           	callstack 0
   960                           
   961                           ; 1 bytes @ 0x31
   962   000032                     	ds	1
   963   000033                     ??_scale_RGB:
   964                           
   965                           ; 1 bytes @ 0x32
   966   000033                     	ds	1
   967   000034                     convert_HSV@temp_614:
   968                           	callstack 0
   969                           
   970                           ; 4 bytes @ 0x33
   971   000034                     	ds	4
   972   000038                     convert_HSV@temp_610:
   973                           	callstack 0
   974                           
   975                           ; 4 bytes @ 0x37
   976   000038                     	ds	4
   977   00003C                     convert_HSV@hue_scale:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x3B
   981   00003C                     	ds	2
   982   00003E                     convert_HSV@M:
   983                           	callstack 0
   984                           
   985                           ; 2 bytes @ 0x3D
   986   00003E                     	ds	2
   987   000040                     convert_HSV@C:
   988                           	callstack 0
   989                           
   990                           ; 2 bytes @ 0x3F
   991   000040                     	ds	2
   992   000042                     forward_navigation@mL:
   993                           	callstack 0
   994                           
   995                           ; 1 bytes @ 0x41
   996   000042                     	ds	1
   997   000043                     forward_navigation@mR:
   998                           	callstack 0
   999                           
  1000                           ; 1 bytes @ 0x42
  1001   000043                     	ds	1
  1002   000044                     forward_navigation@p1:
  1003                           	callstack 0
  1004                           
  1005                           ; 1 bytes @ 0x43
  1006   000044                     	ds	1
  1007   000045                     forward_navigation@p2:
  1008                           	callstack 0
  1009                           
  1010                           ; 1 bytes @ 0x44
  1011   000045                     	ds	1
  1012   000046                     ??_forward_navigation:
  1013                           
  1014                           ; 1 bytes @ 0x45
  1015   000046                     	ds	2
  1016   000048                     forward_navigation@timerH:
  1017                           	callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x47
  1020   000048                     	ds	1
  1021   000049                     forward_navigation@timerL:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x48
  1025   000049                     	ds	1
  1026   00004A                     forward_navigation@mann:
  1027                           	callstack 0
  1028                           
  1029                           ; 1 bytes @ 0x49
  1030   00004A                     	ds	1
  1031   00004B                     ??_main:
  1032                           
  1033                           ; 1 bytes @ 0x4A
  1034   00004B                     	ds	2
  1035                           
  1036 ;;
  1037 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1038 ;;
  1039 ;; *************** function _main *****************
  1040 ;; Defined at:
  1041 ;;		line 31 in file "main.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;  motorR          9   15[BANK0 ] struct DC_motor
  1046 ;;  motorL          9    6[BANK0 ] struct DC_motor
  1047 ;;  RGBC_colour     8   24[BANK0 ] struct RGBC_val
  1048 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
  1049 ;;  PWMcycle        2    0        unsigned int 
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1060 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1062 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1063 ;;Total ram usage:       34 bytes
  1064 ;; Hardware stack levels required when called: 8
  1065 ;; This function calls:
  1066 ;;		_Timer0_init
  1067 ;;		_buggy_lights_init
  1068 ;;		_color_click_init
  1069 ;;		_forward_navigation
  1070 ;;		_initDCmotorsPWM
  1071 ;;		_initUSART4
  1072 ;;		_return_to_sender
  1073 ;; This function is called by:
  1074 ;;		Startup code after reset
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text0
  1079   002402                     __ptext0:
  1080                           	callstack 0
  1081   002402                     _main:
  1082                           	callstack 23
  1083   002402                     
  1084                           ;main.c: 32:     struct RGBC_val RGBC_colour;;main.c: 33:         RGBC_colour.R = 0;
  1085   002402  0E00               	movlw	0
  1086   002404  0100               	movlb	0	; () banked
  1087   002406  6FB5               	movwf	(main@RGBC_colour+1)& (0+255),b
  1088   002408  0E00               	movlw	0
  1089   00240A  6FB4               	movwf	main@RGBC_colour& (0+255),b
  1090                           
  1091                           ;main.c: 34:         RGBC_colour.G = 0;
  1092   00240C  0E00               	movlw	0
  1093   00240E  6FB7               	movwf	(main@RGBC_colour+3)& (0+255),b
  1094   002410  0E00               	movlw	0
  1095   002412  6FB6               	movwf	(main@RGBC_colour+2)& (0+255),b
  1096                           
  1097                           ;main.c: 35:         RGBC_colour.B = 0;
  1098   002414  0E00               	movlw	0
  1099   002416  6FB9               	movwf	(main@RGBC_colour+5)& (0+255),b
  1100   002418  0E00               	movlw	0
  1101   00241A  6FB8               	movwf	(main@RGBC_colour+4)& (0+255),b
  1102                           
  1103                           ;main.c: 36:         RGBC_colour.C = 0;
  1104   00241C  0E00               	movlw	0
  1105   00241E  6FBB               	movwf	(main@RGBC_colour+7)& (0+255),b
  1106   002420  0E00               	movlw	0
  1107   002422  6FBA               	movwf	(main@RGBC_colour+6)& (0+255),b
  1108                           
  1109                           ;main.c: 38:     struct HSV_val HSV_colour;;main.c: 39:         HSV_colour.H = 0;
  1110   002424  0E00               	movlw	0
  1111   002426  6F9D               	movwf	(main@HSV_colour+1)& (0+255),b
  1112   002428  0E00               	movlw	0
  1113   00242A  6F9C               	movwf	main@HSV_colour& (0+255),b
  1114                           
  1115                           ;main.c: 40:         HSV_colour.S = 0;
  1116   00242C  0E00               	movlw	0
  1117   00242E  6F9F               	movwf	(main@HSV_colour+3)& (0+255),b
  1118   002430  0E00               	movlw	0
  1119   002432  6F9E               	movwf	(main@HSV_colour+2)& (0+255),b
  1120                           
  1121                           ;main.c: 41:         HSV_colour.V = 0;
  1122   002434  0E00               	movlw	0
  1123   002436  6FA1               	movwf	(main@HSV_colour+5)& (0+255),b
  1124   002438  0E00               	movlw	0
  1125   00243A  6FA0               	movwf	(main@HSV_colour+4)& (0+255),b
  1126                           
  1127                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 45:         motorL.power = 0;
  1128   00243C  0E00               	movlw	0
  1129   00243E  6FA2               	movwf	main@motorL& (0+255),b
  1130                           
  1131                           ;main.c: 46:         motorL.direction = 1;
  1132   002440  0E01               	movlw	1
  1133   002442  6FA3               	movwf	(main@motorL+1)& (0+255),b
  1134                           
  1135                           ;main.c: 47:         motorL.brakemode = 1;
  1136   002444  0E01               	movlw	1
  1137   002446  6FA4               	movwf	(main@motorL+2)& (0+255),b
  1138   002448                     
  1139                           ; BSR set to: 0
  1140                           ;main.c: 48:         motorL.PWMperiod = PWMcycle;
  1141   002448  0E00               	movlw	0
  1142   00244A  6FA6               	movwf	(main@motorL+4)& (0+255),b
  1143   00244C  0E63               	movlw	99
  1144   00244E  6FA5               	movwf	(main@motorL+3)& (0+255),b
  1145   002450                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 49:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1148   002450  0EAA               	movlw	170
  1149   002452  6FA7               	movwf	(main@motorL+5)& (0+255),b
  1150   002454  0E0F               	movlw	15
  1151   002456  6FA8               	movwf	(main@motorL+6)& (0+255),b
  1152   002458                     
  1153                           ; BSR set to: 0
  1154                           ;main.c: 50:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1155   002458  0EA6               	movlw	166
  1156   00245A  6FA9               	movwf	(main@motorL+7)& (0+255),b
  1157   00245C  0E0F               	movlw	15
  1158   00245E  6FAA               	movwf	(main@motorL+8)& (0+255),b
  1159                           
  1160                           ;main.c: 51:         motorR.power = 0;
  1161   002460  0E00               	movlw	0
  1162   002462  6FAB               	movwf	main@motorR& (0+255),b
  1163                           
  1164                           ;main.c: 52:         motorR.direction = 1;
  1165   002464  0E01               	movlw	1
  1166   002466  6FAC               	movwf	(main@motorR+1)& (0+255),b
  1167                           
  1168                           ;main.c: 53:         motorR.brakemode = 1;
  1169   002468  0E01               	movlw	1
  1170   00246A  6FAD               	movwf	(main@motorR+2)& (0+255),b
  1171   00246C                     
  1172                           ; BSR set to: 0
  1173                           ;main.c: 54:         motorR.PWMperiod = PWMcycle;
  1174   00246C  0E00               	movlw	0
  1175   00246E  6FAF               	movwf	(main@motorR+4)& (0+255),b
  1176   002470  0E63               	movlw	99
  1177   002472  6FAE               	movwf	(main@motorR+3)& (0+255),b
  1178   002474                     
  1179                           ; BSR set to: 0
  1180                           ;main.c: 55:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1181   002474  0E25               	movlw	37
  1182   002476  6FB0               	movwf	(main@motorR+5)& (0+255),b
  1183   002478  0E0F               	movlw	15
  1184   00247A  6FB1               	movwf	(main@motorR+6)& (0+255),b
  1185   00247C                     
  1186                           ; BSR set to: 0
  1187                           ;main.c: 56:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1188   00247C  0E21               	movlw	33
  1189   00247E  6FB2               	movwf	(main@motorR+7)& (0+255),b
  1190   002480  0E0F               	movlw	15
  1191   002482  6FB3               	movwf	(main@motorR+8)& (0+255),b
  1192   002484                     
  1193                           ; BSR set to: 0
  1194                           ;main.c: 59:     initDCmotorsPWM(PWMcycle);
  1195   002484  0E00               	movlw	0
  1196   002486  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1197   002488  0E63               	movlw	99
  1198   00248A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1199   00248C  EC84  F016         	call	_initDCmotorsPWM	;wreg free
  1200                           
  1201                           ;main.c: 60:     buggy_lights_init();
  1202   002490  ECC2  F01B         	call	_buggy_lights_init	;wreg free
  1203   002494                     
  1204                           ;main.c: 61:     color_click_init();
  1205   002494  ECA8  F01B         	call	_color_click_init	;wreg free
  1206   002498                     
  1207                           ;main.c: 62:     initUSART4();
  1208   002498  ECA2  F01C         	call	_initUSART4	;wreg free
  1209   00249C                     
  1210                           ;main.c: 63:     Timer0_init();
  1211   00249C  EC61  F01C         	call	_Timer0_init	;wreg free
  1212   0024A0                     
  1213                           ;main.c: 67:         TRISDbits.TRISD7 = 0;
  1214   0024A0  9E84               	bcf	132,7,c	;volatile
  1215   0024A2                     
  1216                           ;main.c: 68:         TRISHbits.TRISH3 = 0;
  1217   0024A2  9688               	bcf	136,3,c	;volatile
  1218   0024A4                     
  1219                           ;main.c: 70:         LATDbits.LATD7 = 0;
  1220   0024A4  9E7C               	bcf	124,7,c	;volatile
  1221   0024A6                     
  1222                           ;main.c: 71:         LATHbits.LATH3 = 0;
  1223   0024A6  9680               	bcf	128,3,c	;volatile
  1224   0024A8                     
  1225                           ;main.c: 75:         TRISFbits.TRISF2 = 1;
  1226   0024A8  8486               	bsf	134,2,c	;volatile
  1227   0024AA                     
  1228                           ;main.c: 76:         TRISFbits.TRISF3 = 1;
  1229   0024AA  8686               	bsf	134,3,c	;volatile
  1230   0024AC                     
  1231                           ;main.c: 78:         ANSELFbits.ANSELF2 = 0;
  1232   0024AC  010E               	movlb	14	; () banked
  1233   0024AE  95B4               	bcf	180,2,b	;volatile
  1234   0024B0                     
  1235                           ; BSR set to: 14
  1236                           ;main.c: 79:         ANSELFbits.ANSELF3 = 0;
  1237   0024B0  97B4               	bcf	180,3,b	;volatile
  1238   0024B2                     l436:
  1239   0024B2  B68E               	btfsc	142,3,c	;volatile
  1240   0024B4  EF5E  F012         	goto	u3231
  1241   0024B8  EF60  F012         	goto	u3230
  1242   0024BC                     u3231:
  1243   0024BC  EF59  F012         	goto	l436
  1244   0024C0                     u3230:
  1245   0024C0                     
  1246                           ;main.c: 85:     LATDbits.LATD7 = !LATDbits.LATD7;
  1247   0024C0  AE7C               	btfss	124,7,c	;volatile
  1248   0024C2  EF65  F012         	goto	u3241
  1249   0024C6  EF69  F012         	goto	u3240
  1250   0024CA                     u3241:
  1251   0024CA  6A4B               	clrf	??_main^0,c
  1252   0024CC  2A4B               	incf	??_main^0,f,c
  1253   0024CE  EF6A  F012         	goto	u3258
  1254   0024D2                     u3240:
  1255   0024D2  6A4B               	clrf	??_main^0,c
  1256   0024D4                     u3258:
  1257   0024D4  324B               	rrcf	??_main^0,f,c
  1258   0024D6  324B               	rrcf	??_main^0,f,c
  1259   0024D8  507C               	movf	124,w,c	;volatile
  1260   0024DA  184B               	xorwf	??_main^0,w,c
  1261   0024DC  0B7F               	andlw	-129
  1262   0024DE  184B               	xorwf	??_main^0,w,c
  1263   0024E0  6E7C               	movwf	124,c	;volatile
  1264                           
  1265                           ;main.c: 86:     LATHbits.LATH3 = !LATHbits.LATH3;
  1266   0024E2  A680               	btfss	128,3,c	;volatile
  1267   0024E4  EF76  F012         	goto	u3261
  1268   0024E8  EF7A  F012         	goto	u3260
  1269   0024EC                     u3261:
  1270   0024EC  6A4B               	clrf	??_main^0,c
  1271   0024EE  2A4B               	incf	??_main^0,f,c
  1272   0024F0  EF7B  F012         	goto	u3278
  1273   0024F4                     u3260:
  1274   0024F4  6A4B               	clrf	??_main^0,c
  1275   0024F6                     u3278:
  1276   0024F6  464B               	rlncf	??_main^0,f,c
  1277   0024F8  464B               	rlncf	??_main^0,f,c
  1278   0024FA  464B               	rlncf	??_main^0,f,c
  1279   0024FC  5080               	movf	128,w,c	;volatile
  1280   0024FE  184B               	xorwf	??_main^0,w,c
  1281   002500  0BF7               	andlw	-9
  1282   002502  184B               	xorwf	??_main^0,w,c
  1283   002504  6E80               	movwf	128,c	;volatile
  1284   002506                     
  1285                           ;main.c: 89:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1286   002506  0E52               	movlw	82
  1287   002508  6E4C               	movwf	(??_main+1)^0,c
  1288   00250A  0E2B               	movlw	43
  1289   00250C  6E4B               	movwf	??_main^0,c
  1290   00250E  0E00               	movlw	0
  1291   002510                     u3287:
  1292   002510  2EE8               	decfsz	wreg,f,c
  1293   002512  D7FE               	bra	u3287
  1294   002514  2E4B               	decfsz	??_main^0,f,c
  1295   002516  D7FC               	bra	u3287
  1296   002518  2E4C               	decfsz	(??_main+1)^0,f,c
  1297   00251A  D7FA               	bra	u3287
  1298   00251C  D000               	nop2	
  1299   00251E                     
  1300                           ;main.c: 92:     forward_navigation(&motorL, &motorR, &HSV_colour, &RGBC_colour);
  1301   00251E  0EA2               	movlw	low main@motorL
  1302   002520  6E42               	movwf	forward_navigation@mL^0,c
  1303   002522  0EAB               	movlw	low main@motorR
  1304   002524  6E43               	movwf	forward_navigation@mR^0,c
  1305   002526  0E9C               	movlw	low main@HSV_colour
  1306   002528  6E44               	movwf	forward_navigation@p1^0,c
  1307   00252A  0EB4               	movlw	low main@RGBC_colour
  1308   00252C  6E45               	movwf	forward_navigation@p2^0,c
  1309   00252E  EC92  F010         	call	_forward_navigation	;wreg free
  1310   002532                     
  1311                           ;main.c: 93:     return_to_sender(&motorL, &motorR);
  1312   002532  0EA2               	movlw	low main@motorL
  1313   002534  6E27               	movwf	return_to_sender@mL^0,c
  1314   002536  0EAB               	movlw	low main@motorR
  1315   002538  6E28               	movwf	return_to_sender@mR^0,c
  1316   00253A  EC33  F016         	call	_return_to_sender	;wreg free
  1317   00253E  EF1E  F000         	goto	start
  1318   002542                     __end_of_main:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _return_to_sender *****************
  1322 ;; Defined at:
  1323 ;;		line 206 in file "timers.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  1326 ;;		 -> main@motorL(9), 
  1327 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  1328 ;;		 -> main@motorR(9), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  mann            1   42[COMRAM] unsigned char 
  1331 ;;  timerL          1   41[COMRAM] unsigned char 
  1332 ;;  timerH          1   40[COMRAM] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1343 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1345 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1346 ;;Total ram usage:        5 bytes
  1347 ;; Hardware stack levels used: 1
  1348 ;; Hardware stack levels required when called: 7
  1349 ;; This function calls:
  1350 ;;		_fullSpeedAhead
  1351 ;;		_pick_card
  1352 ;;		_read_trail
  1353 ;;		_start_timer
  1354 ;;		_stop
  1355 ;;		_stop_timer
  1356 ;;		_toggle_main_beam
  1357 ;;		_write_timer
  1358 ;; This function is called by:
  1359 ;;		_main
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text1
  1364   002C66                     __ptext1:
  1365                           	callstack 0
  1366   002C66                     _return_to_sender:
  1367                           	callstack 23
  1368   002C66                     
  1369                           ;timers.c: 206: void return_to_sender(DC_motor *mL, DC_motor *mR);timers.c: 207: {;timer
      +                          s.c: 209:     while (manoeuvre_count != 0) {
  1370   002C66  EF7B  F016         	goto	l3941
  1371   002C6A                     l3915:
  1372                           
  1373                           ;timers.c: 212:         unsigned char timerH = 0;
  1374   002C6A  0E00               	movlw	0
  1375   002C6C  6E29               	movwf	return_to_sender@timerH^0,c
  1376                           
  1377                           ;timers.c: 213:         unsigned char timerL = 0;
  1378   002C6E  0E00               	movlw	0
  1379   002C70  6E2A               	movwf	return_to_sender@timerL^0,c
  1380                           
  1381                           ;timers.c: 214:         unsigned char mann = 0;
  1382   002C72  0E00               	movlw	0
  1383   002C74  6E2B               	movwf	return_to_sender@mann^0,c
  1384   002C76                     
  1385                           ;timers.c: 217:         read_trail(&timerH, &timerL, &mann);
  1386   002C76  0E29               	movlw	low return_to_sender@timerH
  1387   002C78  6E01               	movwf	read_trail@tH^0,c
  1388   002C7A  0E2A               	movlw	low return_to_sender@timerL
  1389   002C7C  6E02               	movwf	read_trail@tL^0,c
  1390   002C7E  0E2B               	movlw	low return_to_sender@mann
  1391   002C80  6E03               	movwf	read_trail@man^0,c
  1392   002C82  ECE0  F01A         	call	_read_trail	;wreg free
  1393   002C86                     
  1394                           ;timers.c: 220:         if (mann != 8) {
  1395   002C86  0E08               	movlw	8
  1396   002C88  182B               	xorwf	return_to_sender@mann^0,w,c
  1397   002C8A  B4D8               	btfsc	status,2,c
  1398   002C8C  EF4A  F016         	goto	u3201
  1399   002C90  EF4C  F016         	goto	u3200
  1400   002C94                     u3201:
  1401   002C94  EF56  F016         	goto	l3923
  1402   002C98                     u3200:
  1403   002C98                     
  1404                           ;timers.c: 221:             pick_card(mL, mR, returning, mann);
  1405   002C98  C027  F021         	movff	return_to_sender@mL,pick_card@mL
  1406   002C9C  C028  F022         	movff	return_to_sender@mR,pick_card@mR
  1407   002CA0  C05D  F023         	movff	_returning,pick_card@backtrack
  1408   002CA4  C02B  F024         	movff	return_to_sender@mann,pick_card@key
  1409   002CA8  EC24  F013         	call	_pick_card	;wreg free
  1410   002CAC                     l3923:
  1411                           
  1412                           ;timers.c: 225:         toggle_main_beam();
  1413   002CAC  EC17  F01C         	call	_toggle_main_beam	;wreg free
  1414   002CB0                     
  1415                           ;timers.c: 228:         write_timer(0b11111111 - timerH, 0b11111111 - timerL);
  1416   002CB0  502A               	movf	return_to_sender@timerL^0,w,c
  1417   002CB2  0AFF               	xorlw	255
  1418   002CB4  6E01               	movwf	write_timer@tL^0,c
  1419   002CB6  5029               	movf	return_to_sender@timerH^0,w,c
  1420   002CB8  0AFF               	xorlw	255
  1421   002CBA  ECD6  F01C         	call	_write_timer
  1422   002CBE                     
  1423                           ;timers.c: 229:         start_timer();
  1424   002CBE  ECED  F01C         	call	_start_timer	;wreg free
  1425   002CC2                     
  1426                           ;timers.c: 230:         fullSpeedAhead(mL, mR);
  1427   002CC2  C027  F013         	movff	return_to_sender@mL,fullSpeedAhead@mL
  1428   002CC6  C028  F014         	movff	return_to_sender@mR,fullSpeedAhead@mR
  1429   002CCA  EC71  F014         	call	_fullSpeedAhead	;wreg free
  1430   002CCE                     l3931:
  1431   002CCE  505C               	movf	_return_flag^0,w,c
  1432   002CD0  B4D8               	btfsc	status,2,c
  1433   002CD2  EF6D  F016         	goto	u3211
  1434   002CD6  EF6F  F016         	goto	u3210
  1435   002CDA                     u3211:
  1436   002CDA  EF67  F016         	goto	l3931
  1437   002CDE                     u3210:
  1438   002CDE                     
  1439                           ;timers.c: 236:         stop(mL, mR);
  1440   002CDE  C027  F013         	movff	return_to_sender@mL,stop@mL
  1441   002CE2  C028  F014         	movff	return_to_sender@mR,stop@mR
  1442   002CE6  ECCC  F016         	call	_stop	;wreg free
  1443   002CEA                     
  1444                           ;timers.c: 237:         stop_timer();
  1445   002CEA  ECEB  F01C         	call	_stop_timer	;wreg free
  1446   002CEE                     
  1447                           ;timers.c: 238:         return_flag = 0;
  1448   002CEE  0E00               	movlw	0
  1449   002CF0  6E5C               	movwf	_return_flag^0,c
  1450   002CF2                     
  1451                           ;timers.c: 241:         toggle_main_beam();
  1452   002CF2  EC17  F01C         	call	_toggle_main_beam	;wreg free
  1453   002CF6                     l3941:
  1454                           
  1455                           ;timers.c: 209:     while (manoeuvre_count != 0) {
  1456   002CF6  505A               	movf	_manoeuvre_count^0,w,c
  1457   002CF8  A4D8               	btfss	status,2,c
  1458   002CFA  EF81  F016         	goto	u3221
  1459   002CFE  EF83  F016         	goto	u3220
  1460   002D02                     u3221:
  1461   002D02  EF35  F016         	goto	l3915
  1462   002D06                     u3220:
  1463   002D06  0012               	return		;funcret
  1464   002D08                     __end_of_return_to_sender:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _toggle_main_beam *****************
  1468 ;; Defined at:
  1469 ;;		line 66 in file "buggy_lights.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels used: 1
  1489 ;; Hardware stack levels required when called: 1
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_return_to_sender
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text2
  1498   00382E                     __ptext2:
  1499                           	callstack 0
  1500   00382E                     _toggle_main_beam:
  1501                           	callstack 28
  1502   00382E                     
  1503                           ;buggy_lights.c: 69:     LATDbits.LATD3 = !LATDbits.LATD3;
  1504   00382E  A67C               	btfss	124,3,c	;volatile
  1505   003830  EF1C  F01C         	goto	u2451
  1506   003834  EF20  F01C         	goto	u2450
  1507   003838                     u2451:
  1508   003838  6A01               	clrf	??_toggle_main_beam^0,c
  1509   00383A  2A01               	incf	??_toggle_main_beam^0,f,c
  1510   00383C  EF21  F01C         	goto	u2468
  1511   003840                     u2450:
  1512   003840  6A01               	clrf	??_toggle_main_beam^0,c
  1513   003842                     u2468:
  1514   003842  4601               	rlncf	??_toggle_main_beam^0,f,c
  1515   003844  4601               	rlncf	??_toggle_main_beam^0,f,c
  1516   003846  4601               	rlncf	??_toggle_main_beam^0,f,c
  1517   003848  507C               	movf	124,w,c	;volatile
  1518   00384A  1801               	xorwf	??_toggle_main_beam^0,w,c
  1519   00384C  0BF7               	andlw	-9
  1520   00384E  1801               	xorwf	??_toggle_main_beam^0,w,c
  1521   003850  6E7C               	movwf	124,c	;volatile
  1522   003852  0012               	return		;funcret
  1523   003854                     __end_of_toggle_main_beam:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _read_trail *****************
  1527 ;; Defined at:
  1528 ;;		line 81 in file "timers.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  tH              1    0[COMRAM] PTR unsigned char 
  1531 ;;		 -> return_to_sender@timerH(1), 
  1532 ;;  tL              1    1[COMRAM] PTR unsigned char 
  1533 ;;		 -> return_to_sender@timerL(1), 
  1534 ;;  man             1    2[COMRAM] PTR unsigned char 
  1535 ;;		 -> return_to_sender@mann(1), 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1547 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1550 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1551 ;;Total ram usage:        3 bytes
  1552 ;; Hardware stack levels used: 1
  1553 ;; Hardware stack levels required when called: 1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_return_to_sender
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text3
  1562   0035C0                     __ptext3:
  1563                           	callstack 0
  1564   0035C0                     _read_trail:
  1565                           	callstack 28
  1566   0035C0                     
  1567                           ;timers.c: 81: void read_trail(unsigned char *tH, unsigned char *tL, unsigned char *man)
      +                          ;timers.c: 82: {;timers.c: 83:     timer_high_pointer --;
  1568   0035C0  0651               	decf	_timer_high_pointer^0,f,c
  1569                           
  1570                           ;timers.c: 84:     timer_low_pointer --;
  1571   0035C2  0650               	decf	_timer_low_pointer^0,f,c
  1572                           
  1573                           ;timers.c: 85:     manoeuvre_pointer --;
  1574   0035C4  064F               	decf	_manoeuvre_pointer^0,f,c
  1575                           
  1576                           ;timers.c: 87:     manoeuvre_count --;
  1577   0035C6  065A               	decf	_manoeuvre_count^0,f,c
  1578   0035C8                     
  1579                           ;timers.c: 89:     *tH = *timer_high_pointer;
  1580   0035C8  5051               	movf	_timer_high_pointer^0,w,c
  1581   0035CA  6ED9               	movwf	fsr2l,c
  1582   0035CC  6ADA               	clrf	fsr2h,c
  1583   0035CE  5001               	movf	read_trail@tH^0,w,c
  1584   0035D0  6EE1               	movwf	fsr1l,c
  1585   0035D2  6AE2               	clrf	fsr1h,c
  1586   0035D4  CFDF FFE7          	movff	indf2,indf1
  1587   0035D8                     
  1588                           ;timers.c: 90:     *tL = *timer_low_pointer;
  1589   0035D8  5050               	movf	_timer_low_pointer^0,w,c
  1590   0035DA  6ED9               	movwf	fsr2l,c
  1591   0035DC  6ADA               	clrf	fsr2h,c
  1592   0035DE  5002               	movf	read_trail@tL^0,w,c
  1593   0035E0  6EE1               	movwf	fsr1l,c
  1594   0035E2  6AE2               	clrf	fsr1h,c
  1595   0035E4  CFDF FFE7          	movff	indf2,indf1
  1596   0035E8                     
  1597                           ;timers.c: 91:     *man = *manoeuvre_pointer;
  1598   0035E8  504F               	movf	_manoeuvre_pointer^0,w,c
  1599   0035EA  6ED9               	movwf	fsr2l,c
  1600   0035EC  6ADA               	clrf	fsr2h,c
  1601   0035EE  5003               	movf	read_trail@man^0,w,c
  1602   0035F0  6EE1               	movwf	fsr1l,c
  1603   0035F2  6AE2               	clrf	fsr1h,c
  1604   0035F4  CFDF FFE7          	movff	indf2,indf1
  1605   0035F8  0012               	return		;funcret
  1606   0035FA                     __end_of_read_trail:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _initUSART4 *****************
  1610 ;; Defined at:
  1611 ;;		line 8 in file "serial.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1629 ;;Total ram usage:        0 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text4
  1640   003944                     __ptext4:
  1641                           	callstack 0
  1642   003944                     _initUSART4:
  1643                           	callstack 29
  1644   003944                     
  1645                           ;serial.c: 9:     RC0PPS = 0x12;
  1646   003944  0E12               	movlw	18
  1647   003946  010E               	movlb	14	; () banked
  1648   003948  6F62               	movwf	98,b	;volatile
  1649                           
  1650                           ;serial.c: 10:     RX4PPS = 0x11;
  1651   00394A  0E11               	movlw	17
  1652   00394C  6F15               	movwf	21,b	;volatile
  1653   00394E                     
  1654                           ; BSR set to: 14
  1655                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1656   00394E  97E9               	bcf	233,3,b	;volatile
  1657   003950                     
  1658                           ; BSR set to: 14
  1659                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1660   003950  95E8               	bcf	232,2,b	;volatile
  1661                           
  1662                           ;serial.c: 14:     SP4BRGL = 51;
  1663   003952  0E33               	movlw	51
  1664   003954  6FE5               	movwf	229,b	;volatile
  1665                           
  1666                           ;serial.c: 15:     SP4BRGH = 0;
  1667   003956  0E00               	movlw	0
  1668   003958  6FE6               	movwf	230,b	;volatile
  1669   00395A                     
  1670                           ; BSR set to: 14
  1671                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1672   00395A  89E7               	bsf	231,4,b	;volatile
  1673   00395C                     
  1674                           ; BSR set to: 14
  1675                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1676   00395C  8BE8               	bsf	232,5,b	;volatile
  1677   00395E                     
  1678                           ; BSR set to: 14
  1679                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1680   00395E  8FE7               	bsf	231,7,b	;volatile
  1681   003960                     
  1682                           ; BSR set to: 14
  1683   003960  0012               	return		;funcret
  1684   003962                     __end_of_initUSART4:
  1685                           	callstack 0
  1686                           
  1687 ;; *************** function _initDCmotorsPWM *****************
  1688 ;; Defined at:
  1689 ;;		line 7 in file "dc_motor.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg, status,2
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1703 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1707 ;;Total ram usage:        2 bytes
  1708 ;; Hardware stack levels used: 1
  1709 ;; Hardware stack levels required when called: 1
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text5
  1718   002D08                     __ptext5:
  1719                           	callstack 0
  1720   002D08                     _initDCmotorsPWM:
  1721                           	callstack 29
  1722   002D08                     
  1723                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
  1724   002D08  9485               	bcf	133,2,c	;volatile
  1725                           
  1726                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1727   002D0A  9885               	bcf	133,4,c	;volatile
  1728                           
  1729                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
  1730   002D0C  9E83               	bcf	131,7,c	;volatile
  1731                           
  1732                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
  1733   002D0E  9C87               	bcf	135,6,c	;volatile
  1734                           
  1735                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
  1736   002D10  947D               	bcf	125,2,c	;volatile
  1737                           
  1738                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
  1739   002D12  987D               	bcf	125,4,c	;volatile
  1740                           
  1741                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
  1742   002D14  9E7B               	bcf	123,7,c	;volatile
  1743                           
  1744                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
  1745   002D16  9C7F               	bcf	127,6,c	;volatile
  1746   002D18                     
  1747                           ;dc_motor.c: 19:     RE2PPS=0x05;
  1748   002D18  0E05               	movlw	5
  1749   002D1A  010E               	movlb	14	; () banked
  1750   002D1C  6F74               	movwf	116,b	;volatile
  1751                           
  1752                           ;dc_motor.c: 20:     RE4PPS=0x06;
  1753   002D1E  0E06               	movlw	6
  1754   002D20  6F76               	movwf	118,b	;volatile
  1755                           
  1756                           ;dc_motor.c: 21:     RC7PPS=0x07;
  1757   002D22  0E07               	movlw	7
  1758   002D24  6F69               	movwf	105,b	;volatile
  1759                           
  1760                           ;dc_motor.c: 22:     RG6PPS=0x08;
  1761   002D26  0E08               	movlw	8
  1762   002D28  6F88               	movwf	136,b	;volatile
  1763                           
  1764                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  1765   002D2A  50BD               	movf	189,w,c	;volatile
  1766   002D2C  0B8F               	andlw	-113
  1767   002D2E  0940               	iorlw	64
  1768   002D30  6EBD               	movwf	189,c	;volatile
  1769                           
  1770                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  1771   002D32  0EE0               	movlw	-32
  1772   002D34  16BE               	andwf	190,f,c	;volatile
  1773                           
  1774                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  1775   002D36  50BF               	movf	191,w,c	;volatile
  1776   002D38  0BF0               	andlw	-16
  1777   002D3A  0901               	iorlw	1
  1778   002D3C  6EBF               	movwf	191,c	;volatile
  1779   002D3E                     
  1780                           ; BSR set to: 14
  1781                           ;dc_motor.c: 32:     T2PR=(unsigned char)PWMperiod;
  1782   002D3E  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1783   002D42                     
  1784                           ; BSR set to: 14
  1785                           ;dc_motor.c: 33:     T2CONbits.ON=1;
  1786   002D42  8EBD               	bsf	189,7,c	;volatile
  1787                           
  1788                           ;dc_motor.c: 37:         CCPR1H=0;
  1789   002D44  0E00               	movlw	0
  1790   002D46  6EAA               	movwf	170,c	;volatile
  1791                           
  1792                           ;dc_motor.c: 38:         CCPR2H=0;
  1793   002D48  0E00               	movlw	0
  1794   002D4A  6EA6               	movwf	166,c	;volatile
  1795                           
  1796                           ;dc_motor.c: 39:         CCPR3H=0;
  1797   002D4C  0E00               	movlw	0
  1798   002D4E  010F               	movlb	15	; () banked
  1799   002D50  6F25               	movwf	37,b	;volatile
  1800                           
  1801                           ;dc_motor.c: 40:         CCPR4H=0;
  1802   002D52  0E00               	movlw	0
  1803   002D54  6F21               	movwf	33,b	;volatile
  1804                           
  1805                           ;dc_motor.c: 43:         CCPTMRS0bits.C1TSEL=0;
  1806   002D56  0EFC               	movlw	-4
  1807   002D58  16AD               	andwf	173,f,c	;volatile
  1808                           
  1809                           ;dc_motor.c: 44:         CCPTMRS0bits.C2TSEL=0;
  1810   002D5A  0EF3               	movlw	-13
  1811   002D5C  16AD               	andwf	173,f,c	;volatile
  1812                           
  1813                           ;dc_motor.c: 45:         CCPTMRS0bits.C3TSEL=0;
  1814   002D5E  0ECF               	movlw	-49
  1815   002D60  16AD               	andwf	173,f,c	;volatile
  1816                           
  1817                           ;dc_motor.c: 46:         CCPTMRS0bits.C4TSEL=0;
  1818   002D62  0E3F               	movlw	-193
  1819   002D64  16AD               	andwf	173,f,c	;volatile
  1820   002D66                     
  1821                           ; BSR set to: 15
  1822                           ;dc_motor.c: 49:         CCP1CONbits.FMT=1;
  1823   002D66  88AB               	bsf	171,4,c	;volatile
  1824                           
  1825                           ;dc_motor.c: 50:         CCP1CONbits.CCP1MODE=0b1100;
  1826   002D68  50AB               	movf	171,w,c	;volatile
  1827   002D6A  0BF0               	andlw	-16
  1828   002D6C  090C               	iorlw	12
  1829   002D6E  6EAB               	movwf	171,c	;volatile
  1830   002D70                     
  1831                           ; BSR set to: 15
  1832                           ;dc_motor.c: 51:         CCP1CONbits.EN=1;
  1833   002D70  8EAB               	bsf	171,7,c	;volatile
  1834   002D72                     
  1835                           ; BSR set to: 15
  1836                           ;dc_motor.c: 53:         CCP2CONbits.FMT=1;
  1837   002D72  88A7               	bsf	167,4,c	;volatile
  1838                           
  1839                           ;dc_motor.c: 54:         CCP2CONbits.CCP2MODE=0b1100;
  1840   002D74  50A7               	movf	167,w,c	;volatile
  1841   002D76  0BF0               	andlw	-16
  1842   002D78  090C               	iorlw	12
  1843   002D7A  6EA7               	movwf	167,c	;volatile
  1844   002D7C                     
  1845                           ; BSR set to: 15
  1846                           ;dc_motor.c: 55:         CCP2CONbits.EN=1;
  1847   002D7C  8EA7               	bsf	167,7,c	;volatile
  1848   002D7E                     
  1849                           ; BSR set to: 15
  1850                           ;dc_motor.c: 57:         CCP3CONbits.FMT=1;
  1851   002D7E  8926               	bsf	38,4,b	;volatile
  1852                           
  1853                           ;dc_motor.c: 58:         CCP3CONbits.CCP3MODE=0b1100;
  1854   002D80  5126               	movf	38,w,b	;volatile
  1855   002D82  0BF0               	andlw	-16
  1856   002D84  090C               	iorlw	12
  1857   002D86  6F26               	movwf	38,b	;volatile
  1858   002D88                     
  1859                           ; BSR set to: 15
  1860                           ;dc_motor.c: 59:         CCP3CONbits.EN=1;
  1861   002D88  8F26               	bsf	38,7,b	;volatile
  1862   002D8A                     
  1863                           ; BSR set to: 15
  1864                           ;dc_motor.c: 61:         CCP4CONbits.FMT=1;
  1865   002D8A  8922               	bsf	34,4,b	;volatile
  1866                           
  1867                           ;dc_motor.c: 62:         CCP4CONbits.CCP4MODE=0b1100;
  1868   002D8C  5122               	movf	34,w,b	;volatile
  1869   002D8E  0BF0               	andlw	-16
  1870   002D90  090C               	iorlw	12
  1871   002D92  6F22               	movwf	34,b	;volatile
  1872   002D94                     
  1873                           ; BSR set to: 15
  1874                           ;dc_motor.c: 63:         CCP4CONbits.EN=1;
  1875   002D94  8F22               	bsf	34,7,b	;volatile
  1876   002D96                     
  1877                           ; BSR set to: 15
  1878   002D96  0012               	return		;funcret
  1879   002D98                     __end_of_initDCmotorsPWM:
  1880                           	callstack 0
  1881                           
  1882 ;; *************** function _forward_navigation *****************
  1883 ;; Defined at:
  1884 ;;		line 116 in file "timers.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  mL              1   65[COMRAM] PTR struct DC_motor
  1887 ;;		 -> main@motorL(9), 
  1888 ;;  mR              1   66[COMRAM] PTR struct DC_motor
  1889 ;;		 -> main@motorR(9), 
  1890 ;;  p1              1   67[COMRAM] PTR struct HSV_val
  1891 ;;		 -> main@HSV_colour(6), 
  1892 ;;  p2              1   68[COMRAM] PTR struct RGBC_val
  1893 ;;		 -> main@RGBC_colour(8), 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  mann            1   73[COMRAM] unsigned char 
  1896 ;;  timerL          1   72[COMRAM] unsigned char 
  1897 ;;  timerH          1   71[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1911 ;;Total ram usage:        9 bytes
  1912 ;; Hardware stack levels used: 1
  1913 ;; Hardware stack levels required when called: 7
  1914 ;; This function calls:
  1915 ;;		_average_RGBC
  1916 ;;		_colour_to_key
  1917 ;;		_convert_HSV
  1918 ;;		_fullSpeedAhead
  1919 ;;		_pick_card
  1920 ;;		_read_timer
  1921 ;;		_reset_timer
  1922 ;;		_scale_RGB
  1923 ;;		_start_timer
  1924 ;;		_stop
  1925 ;;		_stop_timer
  1926 ;;		_toggle_tricolour_LED
  1927 ;;		_wait_for_wall
  1928 ;;		_write_trail
  1929 ;; This function is called by:
  1930 ;;		_main
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text6
  1935   002124                     __ptext6:
  1936                           	callstack 0
  1937   002124                     _forward_navigation:
  1938                           	callstack 23
  1939   002124                     
  1940                           ;timers.c: 116: void forward_navigation(DC_motor *mL, DC_motor *mR, HSV_val *p1, RGBC_va
      +                          l *p2);timers.c: 117: {;timers.c: 119:     while (!returning) {
  1941   002124  EF4E  F011         	goto	l3911
  1942   002128                     l3859:
  1943                           
  1944                           ;timers.c: 122:         unsigned char timerH = 0;
  1945   002128  0E00               	movlw	0
  1946   00212A  6E48               	movwf	forward_navigation@timerH^0,c
  1947                           
  1948                           ;timers.c: 123:         unsigned char timerL = 0;
  1949   00212C  0E00               	movlw	0
  1950   00212E  6E49               	movwf	forward_navigation@timerL^0,c
  1951   002130                     
  1952                           ;timers.c: 127:         reset_timer();
  1953   002130  ECD0  F01C         	call	_reset_timer	;wreg free
  1954                           
  1955                           ;timers.c: 128:         start_timer();
  1956   002134  ECED  F01C         	call	_start_timer	;wreg free
  1957   002138                     
  1958                           ;timers.c: 129:         fullSpeedAhead(mL, mR);
  1959   002138  C042  F013         	movff	forward_navigation@mL,fullSpeedAhead@mL
  1960   00213C  C043  F014         	movff	forward_navigation@mR,fullSpeedAhead@mR
  1961   002140  EC71  F014         	call	_fullSpeedAhead	;wreg free
  1962   002144                     
  1963                           ;timers.c: 132:         wait_for_wall(p2, lost_flag);
  1964   002144  C045  F00D         	movff	forward_navigation@p2,wait_for_wall@p
  1965   002148  C05B  F00E         	movff	_lost_flag,wait_for_wall@loss
  1966   00214C  EC7C  F01A         	call	_wait_for_wall	;wreg free
  1967   002150                     
  1968                           ;timers.c: 135:         stop_timer();
  1969   002150  ECEB  F01C         	call	_stop_timer	;wreg free
  1970   002154                     
  1971                           ;timers.c: 136:         read_timer(&timerH, &timerL);
  1972   002154  0E48               	movlw	low forward_navigation@timerH
  1973   002156  6E01               	movwf	read_timer@tH^0,c
  1974   002158  0E49               	movlw	low forward_navigation@timerL
  1975   00215A  6E02               	movwf	read_timer@tL^0,c
  1976   00215C  ECB1  F01C         	call	_read_timer	;wreg free
  1977                           
  1978                           ;timers.c: 137:         stop(mL, mR);
  1979   002160  C042  F013         	movff	forward_navigation@mL,stop@mL
  1980   002164  C043  F014         	movff	forward_navigation@mR,stop@mR
  1981   002168  ECCC  F016         	call	_stop	;wreg free
  1982   00216C                     
  1983                           ;timers.c: 140:         toggle_tricolour_LED();
  1984   00216C  EC0D  F014         	call	_toggle_tricolour_LED	;wreg free
  1985   002170                     
  1986                           ;timers.c: 141:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1987   002170  0E11               	movlw	17
  1988   002172  6E47               	movwf	(??_forward_navigation+1)^0,c
  1989   002174  0E3C               	movlw	60
  1990   002176  6E46               	movwf	??_forward_navigation^0,c
  1991   002178  0ECB               	movlw	203
  1992   00217A                     u3297:
  1993   00217A  2EE8               	decfsz	wreg,f,c
  1994   00217C  D7FE               	bra	u3297
  1995   00217E  2E46               	decfsz	??_forward_navigation^0,f,c
  1996   002180  D7FC               	bra	u3297
  1997   002182  2E47               	decfsz	(??_forward_navigation+1)^0,f,c
  1998   002184  D7FA               	bra	u3297
  1999   002186  0000               	nop	
  2000   002188                     
  2001                           ;timers.c: 144:         average_RGBC(p2);
  2002   002188  C045  F00E         	movff	forward_navigation@p2,average_RGBC@p
  2003   00218C  ECBA  F00E         	call	_average_RGBC	;wreg free
  2004   002190                     
  2005                           ;timers.c: 145:         scale_RGB(p2);
  2006   002190  C045  F032         	movff	forward_navigation@p2,scale_RGB@p
  2007   002194  ECA2  F013         	call	_scale_RGB	;wreg free
  2008   002198                     
  2009                           ;timers.c: 146:         convert_HSV(p1, p2);
  2010   002198  C044  F00E         	movff	forward_navigation@p1,convert_HSV@p1
  2011   00219C  C045  F00F         	movff	forward_navigation@p2,convert_HSV@p2
  2012   0021A0  EC0D  F007         	call	_convert_HSV	;wreg free
  2013   0021A4                     
  2014                           ;timers.c: 147:         mann = colour_to_key(p1, p2);
  2015   0021A4  C044  F001         	movff	forward_navigation@p1,colour_to_key@p1
  2016   0021A8  C045  F002         	movff	forward_navigation@p2,colour_to_key@p2
  2017   0021AC  EC73  F00A         	call	_colour_to_key	;wreg free
  2018   0021B0  6E4A               	movwf	forward_navigation@mann^0,c
  2019   0021B2                     
  2020                           ;timers.c: 150:         toggle_tricolour_LED();
  2021   0021B2  EC0D  F014         	call	_toggle_tricolour_LED	;wreg free
  2022   0021B6                     
  2023                           ;timers.c: 151:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2024   0021B6  0E11               	movlw	17
  2025   0021B8  6E47               	movwf	(??_forward_navigation+1)^0,c
  2026   0021BA  0E3C               	movlw	60
  2027   0021BC  6E46               	movwf	??_forward_navigation^0,c
  2028   0021BE  0ECB               	movlw	203
  2029   0021C0                     u3307:
  2030   0021C0  2EE8               	decfsz	wreg,f,c
  2031   0021C2  D7FE               	bra	u3307
  2032   0021C4  2E46               	decfsz	??_forward_navigation^0,f,c
  2033   0021C6  D7FC               	bra	u3307
  2034   0021C8  2E47               	decfsz	(??_forward_navigation+1)^0,f,c
  2035   0021CA  D7FA               	bra	u3307
  2036   0021CC  0000               	nop	
  2037   0021CE                     
  2038                           ;timers.c: 154:         if (lost_flag) {
  2039   0021CE  505B               	movf	_lost_flag^0,w,c
  2040   0021D0  B4D8               	btfsc	status,2,c
  2041   0021D2  EFED  F010         	goto	u3101
  2042   0021D6  EFEF  F010         	goto	u3100
  2043   0021DA                     u3101:
  2044   0021DA  EF04  F011         	goto	l3895
  2045   0021DE                     u3100:
  2046   0021DE                     
  2047                           ;timers.c: 157:             timerH = 0b11111111;
  2048   0021DE  6848               	setf	forward_navigation@timerH^0,c
  2049                           
  2050                           ;timers.c: 158:             timerL = 0b11111111;
  2051   0021E0  6849               	setf	forward_navigation@timerL^0,c
  2052   0021E2                     
  2053                           ;timers.c: 161:             mann = 8;
  2054   0021E2  0E08               	movlw	8
  2055   0021E4  6E4A               	movwf	forward_navigation@mann^0,c
  2056   0021E6                     
  2057                           ;timers.c: 164:             LATDbits.LATD7 = !LATDbits.LATD7;
  2058   0021E6  AE7C               	btfss	124,7,c	;volatile
  2059   0021E8  EFF8  F010         	goto	u3111
  2060   0021EC  EFFC  F010         	goto	u3110
  2061   0021F0                     u3111:
  2062   0021F0  6A46               	clrf	??_forward_navigation^0,c
  2063   0021F2  2A46               	incf	??_forward_navigation^0,f,c
  2064   0021F4  EFFD  F010         	goto	u3128
  2065   0021F8                     u3110:
  2066   0021F8  6A46               	clrf	??_forward_navigation^0,c
  2067   0021FA                     u3128:
  2068   0021FA  3246               	rrcf	??_forward_navigation^0,f,c
  2069   0021FC  3246               	rrcf	??_forward_navigation^0,f,c
  2070   0021FE  507C               	movf	124,w,c	;volatile
  2071   002200  1846               	xorwf	??_forward_navigation^0,w,c
  2072   002202  0B7F               	andlw	-129
  2073   002204  1846               	xorwf	??_forward_navigation^0,w,c
  2074   002206  6E7C               	movwf	124,c	;volatile
  2075   002208                     l3895:
  2076                           
  2077                           ;timers.c: 168:         if (manoeuvre_count == 19) {
  2078   002208  0E13               	movlw	19
  2079   00220A  185A               	xorwf	_manoeuvre_count^0,w,c
  2080   00220C  A4D8               	btfss	status,2,c
  2081   00220E  EF0B  F011         	goto	u3131
  2082   002212  EF0D  F011         	goto	u3130
  2083   002216                     u3131:
  2084   002216  EF20  F011         	goto	l3901
  2085   00221A                     u3130:
  2086   00221A                     
  2087                           ;timers.c: 171:             mann = 8;
  2088   00221A  0E08               	movlw	8
  2089   00221C  6E4A               	movwf	forward_navigation@mann^0,c
  2090   00221E                     
  2091                           ;timers.c: 174:             LATDbits.LATD7 = !LATDbits.LATD7;
  2092   00221E  AE7C               	btfss	124,7,c	;volatile
  2093   002220  EF14  F011         	goto	u3141
  2094   002224  EF18  F011         	goto	u3140
  2095   002228                     u3141:
  2096   002228  6A46               	clrf	??_forward_navigation^0,c
  2097   00222A  2A46               	incf	??_forward_navigation^0,f,c
  2098   00222C  EF19  F011         	goto	u3158
  2099   002230                     u3140:
  2100   002230  6A46               	clrf	??_forward_navigation^0,c
  2101   002232                     u3158:
  2102   002232  3246               	rrcf	??_forward_navigation^0,f,c
  2103   002234  3246               	rrcf	??_forward_navigation^0,f,c
  2104   002236  507C               	movf	124,w,c	;volatile
  2105   002238  1846               	xorwf	??_forward_navigation^0,w,c
  2106   00223A  0B7F               	andlw	-129
  2107   00223C  1846               	xorwf	??_forward_navigation^0,w,c
  2108   00223E  6E7C               	movwf	124,c	;volatile
  2109   002240                     l3901:
  2110                           
  2111                           ;timers.c: 178:         write_trail(timerH, timerL, mann);
  2112   002240  C049  F001         	movff	forward_navigation@timerL,write_trail@tL
  2113   002244  C04A  F002         	movff	forward_navigation@mann,write_trail@man
  2114   002248  5048               	movf	forward_navigation@timerH^0,w,c
  2115   00224A  ECD9  F01B         	call	_write_trail
  2116   00224E                     
  2117                           ;timers.c: 181:         pick_card(mL, mR, returning, mann);
  2118   00224E  C042  F021         	movff	forward_navigation@mL,pick_card@mL
  2119   002252  C043  F022         	movff	forward_navigation@mR,pick_card@mR
  2120   002256  C05D  F023         	movff	_returning,pick_card@backtrack
  2121   00225A  C04A  F024         	movff	forward_navigation@mann,pick_card@key
  2122   00225E  EC24  F013         	call	_pick_card	;wreg free
  2123   002262                     
  2124                           ;timers.c: 184:         if (mann == 8) {
  2125   002262  0E08               	movlw	8
  2126   002264  184A               	xorwf	forward_navigation@mann^0,w,c
  2127   002266  A4D8               	btfss	status,2,c
  2128   002268  EF38  F011         	goto	u3161
  2129   00226C  EF3A  F011         	goto	u3160
  2130   002270                     u3161:
  2131   002270  EF4E  F011         	goto	l3911
  2132   002274                     u3160:
  2133   002274                     
  2134                           ;timers.c: 187:             returning = 1;
  2135   002274  0E01               	movlw	1
  2136   002276  6E5D               	movwf	_returning^0,c
  2137   002278                     
  2138                           ;timers.c: 190:             LATHbits.LATH3 = !LATHbits.LATH3;
  2139   002278  A680               	btfss	128,3,c	;volatile
  2140   00227A  EF41  F011         	goto	u3171
  2141   00227E  EF45  F011         	goto	u3170
  2142   002282                     u3171:
  2143   002282  6A46               	clrf	??_forward_navigation^0,c
  2144   002284  2A46               	incf	??_forward_navigation^0,f,c
  2145   002286  EF46  F011         	goto	u3188
  2146   00228A                     u3170:
  2147   00228A  6A46               	clrf	??_forward_navigation^0,c
  2148   00228C                     u3188:
  2149   00228C  4646               	rlncf	??_forward_navigation^0,f,c
  2150   00228E  4646               	rlncf	??_forward_navigation^0,f,c
  2151   002290  4646               	rlncf	??_forward_navigation^0,f,c
  2152   002292  5080               	movf	128,w,c	;volatile
  2153   002294  1846               	xorwf	??_forward_navigation^0,w,c
  2154   002296  0BF7               	andlw	-9
  2155   002298  1846               	xorwf	??_forward_navigation^0,w,c
  2156   00229A  6E80               	movwf	128,c	;volatile
  2157   00229C                     l3911:
  2158                           
  2159                           ;timers.c: 119:     while (!returning) {
  2160   00229C  505D               	movf	_returning^0,w,c
  2161   00229E  B4D8               	btfsc	status,2,c
  2162   0022A0  EF54  F011         	goto	u3191
  2163   0022A4  EF56  F011         	goto	u3190
  2164   0022A8                     u3191:
  2165   0022A8  EF94  F010         	goto	l3859
  2166   0022AC                     u3190:
  2167   0022AC  0012               	return		;funcret
  2168   0022AE                     __end_of_forward_navigation:
  2169                           	callstack 0
  2170                           
  2171 ;; *************** function _write_trail *****************
  2172 ;; Defined at:
  2173 ;;		line 100 in file "timers.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;  tH              1    wreg     unsigned char 
  2176 ;;  tL              1    0[COMRAM] unsigned char 
  2177 ;;  man             1    1[COMRAM] unsigned char 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  tH              1    2[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2189 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;Total ram usage:        3 bytes
  2194 ;; Hardware stack levels used: 1
  2195 ;; Hardware stack levels required when called: 1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_forward_navigation
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text7
  2204   0037B2                     __ptext7:
  2205                           	callstack 0
  2206   0037B2                     _write_trail:
  2207                           	callstack 28
  2208                           
  2209                           ;incstack = 0
  2210                           ;write_trail@tH stored from wreg
  2211   0037B2  6E03               	movwf	write_trail@tH^0,c
  2212   0037B4                     
  2213                           ;timers.c: 100: void write_trail(unsigned char tH, unsigned char tL, unsigned char man);
      +                          timers.c: 101: {;timers.c: 102:     *timer_high_pointer = tH;
  2214   0037B4  5051               	movf	_timer_high_pointer^0,w,c
  2215   0037B6  6ED9               	movwf	fsr2l,c
  2216   0037B8  6ADA               	clrf	fsr2h,c
  2217   0037BA  C003  FFDF         	movff	write_trail@tH,indf2
  2218                           
  2219                           ;timers.c: 103:     *timer_low_pointer = tL;
  2220   0037BE  5050               	movf	_timer_low_pointer^0,w,c
  2221   0037C0  6ED9               	movwf	fsr2l,c
  2222   0037C2  6ADA               	clrf	fsr2h,c
  2223   0037C4  C001  FFDF         	movff	write_trail@tL,indf2
  2224                           
  2225                           ;timers.c: 104:     *manoeuvre_pointer = man;
  2226   0037C8  504F               	movf	_manoeuvre_pointer^0,w,c
  2227   0037CA  6ED9               	movwf	fsr2l,c
  2228   0037CC  6ADA               	clrf	fsr2h,c
  2229   0037CE  C002  FFDF         	movff	write_trail@man,indf2
  2230   0037D2                     
  2231                           ;timers.c: 106:     timer_high_pointer ++;
  2232   0037D2  2A51               	incf	_timer_high_pointer^0,f,c
  2233   0037D4                     
  2234                           ;timers.c: 107:     timer_low_pointer ++;
  2235   0037D4  2A50               	incf	_timer_low_pointer^0,f,c
  2236   0037D6                     
  2237                           ;timers.c: 108:     manoeuvre_pointer ++;
  2238   0037D6  2A4F               	incf	_manoeuvre_pointer^0,f,c
  2239   0037D8                     
  2240                           ;timers.c: 110:     manoeuvre_count ++;
  2241   0037D8  2A5A               	incf	_manoeuvre_count^0,f,c
  2242   0037DA  0012               	return		;funcret
  2243   0037DC                     __end_of_write_trail:
  2244                           	callstack 0
  2245                           
  2246 ;; *************** function _wait_for_wall *****************
  2247 ;; Defined at:
  2248 ;;		line 161 in file "color.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  p               1   12[COMRAM] PTR struct RGBC_val
  2251 ;;		 -> main@RGBC_colour(8), 
  2252 ;;  loss            1   13[COMRAM] unsigned char 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;		None
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  1    wreg      void 
  2257 ;; Registers used:
  2258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2266 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2267 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2268 ;;Total ram usage:        4 bytes
  2269 ;; Hardware stack levels used: 1
  2270 ;; Hardware stack levels required when called: 5
  2271 ;; This function calls:
  2272 ;;		_read_RGBC
  2273 ;; This function is called by:
  2274 ;;		_forward_navigation
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text8
  2279   0034F8                     __ptext8:
  2280                           	callstack 0
  2281   0034F8                     _wait_for_wall:
  2282                           	callstack 24
  2283   0034F8                     
  2284                           ;color.c: 161: void wait_for_wall(struct RGBC_val *p, unsigned char loss);color.c: 162: 
      +                          {;color.c: 164:     while (!loss) {
  2285   0034F8  EF95  F01A         	goto	l3513
  2286   0034FC                     l3507:
  2287                           
  2288                           ;color.c: 167:         read_RGBC(p);
  2289   0034FC  C00D  F00C         	movff	wait_for_wall@p,read_RGBC@p
  2290   003500  ECB1  F019         	call	_read_RGBC	;wreg free
  2291   003504  500D               	movf	wait_for_wall@p^0,w,c
  2292   003506  6ED9               	movwf	fsr2l,c
  2293   003508  6ADA               	clrf	fsr2h,c
  2294   00350A  0E06               	movlw	6
  2295   00350C  26D9               	addwf	fsr2l,f,c
  2296   00350E  0E01               	movlw	1
  2297   003510  50DB               	movf	plusw2,w,c
  2298   003512  E107               	bnz	u2601
  2299   003514  0E32               	movlw	50
  2300   003516  5CDE               	subwf	postinc2,w,c
  2301   003518  B0D8               	btfsc	status,0,c
  2302   00351A  EF91  F01A         	goto	u2601
  2303   00351E  EF93  F01A         	goto	u2600
  2304   003522                     u2601:
  2305   003522  EF95  F01A         	goto	l3513
  2306   003526                     u2600:
  2307   003526  EF9D  F01A         	goto	l99
  2308   00352A                     l3513:
  2309                           
  2310                           ;color.c: 164:     while (!loss) {
  2311   00352A  500E               	movf	wait_for_wall@loss^0,w,c
  2312   00352C  B4D8               	btfsc	status,2,c
  2313   00352E  EF9B  F01A         	goto	u2611
  2314   003532  EF9D  F01A         	goto	u2610
  2315   003536                     u2611:
  2316   003536  EF7E  F01A         	goto	l3507
  2317   00353A                     u2610:
  2318   00353A                     l99:
  2319   00353A  0012               	return		;funcret
  2320   00353C                     __end_of_wait_for_wall:
  2321                           	callstack 0
  2322                           
  2323 ;; *************** function _toggle_tricolour_LED *****************
  2324 ;; Defined at:
  2325 ;;		line 93 in file "buggy_lights.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2342 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2343 ;;Total ram usage:        1 bytes
  2344 ;; Hardware stack levels used: 1
  2345 ;; Hardware stack levels required when called: 1
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_forward_navigation
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text9
  2354   00281A                     __ptext9:
  2355                           	callstack 0
  2356   00281A                     _toggle_tricolour_LED:
  2357                           	callstack 28
  2358   00281A                     
  2359                           ;buggy_lights.c: 97:         LATGbits.LATG0 = !LATGbits.LATG0;
  2360   00281A  A07F               	btfss	127,0,c	;volatile
  2361   00281C  EF12  F014         	goto	u2471
  2362   002820  EF16  F014         	goto	u2470
  2363   002824                     u2471:
  2364   002824  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2365   002826  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2366   002828  EF17  F014         	goto	u2488
  2367   00282C                     u2470:
  2368   00282C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2369   00282E                     u2488:
  2370   00282E  507F               	movf	127,w,c	;volatile
  2371   002830  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2372   002832  0BFE               	andlw	-2
  2373   002834  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2374   002836  6E7F               	movwf	127,c	;volatile
  2375                           
  2376                           ;buggy_lights.c: 98:         LATEbits.LATE7 = !LATEbits.LATE7;
  2377   002838  AE7D               	btfss	125,7,c	;volatile
  2378   00283A  EF21  F014         	goto	u2491
  2379   00283E  EF25  F014         	goto	u2490
  2380   002842                     u2491:
  2381   002842  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2382   002844  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2383   002846  EF26  F014         	goto	u2508
  2384   00284A                     u2490:
  2385   00284A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2386   00284C                     u2508:
  2387   00284C  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2388   00284E  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2389   002850  507D               	movf	125,w,c	;volatile
  2390   002852  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2391   002854  0B7F               	andlw	-129
  2392   002856  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2393   002858  6E7D               	movwf	125,c	;volatile
  2394                           
  2395                           ;buggy_lights.c: 99:         LATAbits.LATA3 = !LATAbits.LATA3;
  2396   00285A  A679               	btfss	121,3,c	;volatile
  2397   00285C  EF32  F014         	goto	u2511
  2398   002860  EF36  F014         	goto	u2510
  2399   002864                     u2511:
  2400   002864  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2401   002866  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2402   002868  EF37  F014         	goto	u2528
  2403   00286C                     u2510:
  2404   00286C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2405   00286E                     u2528:
  2406   00286E  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2407   002870  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2408   002872  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2409   002874  5079               	movf	121,w,c	;volatile
  2410   002876  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2411   002878  0BF7               	andlw	-9
  2412   00287A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2413   00287C  6E79               	movwf	121,c	;volatile
  2414                           
  2415                           ;buggy_lights.c: 103:         LATGbits.LATG1 = !LATGbits.LATG1;
  2416   00287E  A27F               	btfss	127,1,c	;volatile
  2417   002880  EF44  F014         	goto	u2531
  2418   002884  EF48  F014         	goto	u2530
  2419   002888                     u2531:
  2420   002888  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2421   00288A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2422   00288C  EF49  F014         	goto	u2548
  2423   002890                     u2530:
  2424   002890  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2425   002892                     u2548:
  2426   002892  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2427   002894  507F               	movf	127,w,c	;volatile
  2428   002896  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2429   002898  0BFD               	andlw	-3
  2430   00289A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2431   00289C  6E7F               	movwf	127,c	;volatile
  2432                           
  2433                           ;buggy_lights.c: 104:         LATAbits.LATA4 = !LATAbits.LATA4;
  2434   00289E  A879               	btfss	121,4,c	;volatile
  2435   0028A0  EF54  F014         	goto	u2551
  2436   0028A4  EF58  F014         	goto	u2550
  2437   0028A8                     u2551:
  2438   0028A8  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2439   0028AA  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2440   0028AC  EF59  F014         	goto	u2568
  2441   0028B0                     u2550:
  2442   0028B0  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2443   0028B2                     u2568:
  2444   0028B2  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  2445   0028B4  5079               	movf	121,w,c	;volatile
  2446   0028B6  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2447   0028B8  0BEF               	andlw	-17
  2448   0028BA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2449   0028BC  6E79               	movwf	121,c	;volatile
  2450                           
  2451                           ;buggy_lights.c: 105:         LATFbits.LATF7 = !LATFbits.LATF7;
  2452   0028BE  AE7E               	btfss	126,7,c	;volatile
  2453   0028C0  EF64  F014         	goto	u2571
  2454   0028C4  EF68  F014         	goto	u2570
  2455   0028C8                     u2571:
  2456   0028C8  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2457   0028CA  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2458   0028CC  EF69  F014         	goto	u2588
  2459   0028D0                     u2570:
  2460   0028D0  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2461   0028D2                     u2588:
  2462   0028D2  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2463   0028D4  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2464   0028D6  507E               	movf	126,w,c	;volatile
  2465   0028D8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2466   0028DA  0B7F               	andlw	-129
  2467   0028DC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2468   0028DE  6E7E               	movwf	126,c	;volatile
  2469   0028E0  0012               	return		;funcret
  2470   0028E2                     __end_of_toggle_tricolour_LED:
  2471                           	callstack 0
  2472                           
  2473 ;; *************** function _stop_timer *****************
  2474 ;; Defined at:
  2475 ;;		line 38 in file "timers.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;		None
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		None
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2493 ;;Total ram usage:        0 bytes
  2494 ;; Hardware stack levels used: 1
  2495 ;; Hardware stack levels required when called: 1
  2496 ;; This function calls:
  2497 ;;		Nothing
  2498 ;; This function is called by:
  2499 ;;		_forward_navigation
  2500 ;;		_return_to_sender
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text10
  2505   0039D6                     __ptext10:
  2506                           	callstack 0
  2507   0039D6                     _stop_timer:
  2508                           	callstack 28
  2509   0039D6                     
  2510                           ;timers.c: 40:     T0CON0bits.T0EN = 0;
  2511   0039D6  9ED5               	bcf	213,7,c	;volatile
  2512   0039D8  0012               	return		;funcret
  2513   0039DA                     __end_of_stop_timer:
  2514                           	callstack 0
  2515                           
  2516 ;; *************** function _start_timer *****************
  2517 ;; Defined at:
  2518 ;;		line 30 in file "timers.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;		None
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		None
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2536 ;;Total ram usage:        0 bytes
  2537 ;; Hardware stack levels used: 1
  2538 ;; Hardware stack levels required when called: 1
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_forward_navigation
  2543 ;;		_return_to_sender
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text11
  2548   0039DA                     __ptext11:
  2549                           	callstack 0
  2550   0039DA                     _start_timer:
  2551                           	callstack 28
  2552   0039DA                     
  2553                           ;timers.c: 32:     T0CON0bits.T0EN = 1;
  2554   0039DA  8ED5               	bsf	213,7,c	;volatile
  2555   0039DC  0012               	return		;funcret
  2556   0039DE                     __end_of_start_timer:
  2557                           	callstack 0
  2558                           
  2559 ;; *************** function _scale_RGB *****************
  2560 ;; Defined at:
  2561 ;;		line 199 in file "color.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;  p               1   49[COMRAM] PTR struct RGBC_val
  2564 ;;		 -> main@RGBC_colour(8), 
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2576 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2578 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2579 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2580 ;;Total ram usage:        3 bytes
  2581 ;; Hardware stack levels used: 1
  2582 ;; Hardware stack levels required when called: 2
  2583 ;; This function calls:
  2584 ;;		___flmul
  2585 ;;		___fltol
  2586 ;;		___xxtofl
  2587 ;; This function is called by:
  2588 ;;		_forward_navigation
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text12
  2593   002744                     __ptext12:
  2594                           	callstack 0
  2595   002744                     _scale_RGB:
  2596                           	callstack 27
  2597   002744                     
  2598                           ;color.c: 199: void scale_RGB(struct RGBC_val *p);color.c: 200: {;color.c: 201:     p->R
      +                           *= 0.5;
  2599   002744  0E00               	movlw	0
  2600   002746  6E13               	movwf	___flmul@a^0,c
  2601   002748  0E00               	movlw	0
  2602   00274A  6E14               	movwf	(___flmul@a+1)^0,c
  2603   00274C  0E00               	movlw	0
  2604   00274E  6E15               	movwf	(___flmul@a+2)^0,c
  2605   002750  0E3F               	movlw	63
  2606   002752  6E16               	movwf	(___flmul@a+3)^0,c
  2607   002754  5032               	movf	scale_RGB@p^0,w,c
  2608   002756  6ED9               	movwf	fsr2l,c
  2609   002758  6ADA               	clrf	fsr2h,c
  2610   00275A  CFDE F033          	movff	postinc2,??_scale_RGB
  2611   00275E  CFDD F034          	movff	postdec2,??_scale_RGB+1
  2612   002762  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  2613   002766  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  2614   00276A  6A03               	clrf	(___xxtofl@val+2)^0,c
  2615   00276C  6A04               	clrf	(___xxtofl@val+3)^0,c
  2616   00276E  0E00               	movlw	0
  2617   002770  ECB8  F00F         	call	___xxtofl
  2618   002774  C001  F00F         	movff	?___xxtofl,___flmul@b
  2619   002778  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2620   00277C  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2621   002780  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2622   002784  ECA5  F00C         	call	___flmul	;wreg free
  2623   002788  C00F  F028         	movff	?___flmul,___fltol@f1
  2624   00278C  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  2625   002790  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  2626   002794  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  2627   002798  ECA1  F012         	call	___fltol	;wreg free
  2628   00279C  5032               	movf	scale_RGB@p^0,w,c
  2629   00279E  6ED9               	movwf	fsr2l,c
  2630   0027A0  6ADA               	clrf	fsr2h,c
  2631   0027A2  C028  FFDE         	movff	?___fltol,postinc2
  2632   0027A6  C029  FFDD         	movff	?___fltol+1,postdec2
  2633                           
  2634                           ;color.c: 202:     p->G *= 0.7;
  2635   0027AA  0E33               	movlw	51
  2636   0027AC  6E13               	movwf	___flmul@a^0,c
  2637   0027AE  0E33               	movlw	51
  2638   0027B0  6E14               	movwf	(___flmul@a+1)^0,c
  2639   0027B2  0E33               	movlw	51
  2640   0027B4  6E15               	movwf	(___flmul@a+2)^0,c
  2641   0027B6  0E3F               	movlw	63
  2642   0027B8  6E16               	movwf	(___flmul@a+3)^0,c
  2643   0027BA  5032               	movf	scale_RGB@p^0,w,c
  2644   0027BC  6ED9               	movwf	fsr2l,c
  2645   0027BE  6ADA               	clrf	fsr2h,c
  2646   0027C0  0E02               	movlw	2
  2647   0027C2  26D9               	addwf	fsr2l,f,c
  2648   0027C4  CFDE F033          	movff	postinc2,??_scale_RGB
  2649   0027C8  CFDD F034          	movff	postdec2,??_scale_RGB+1
  2650   0027CC  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  2651   0027D0  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  2652   0027D4  6A03               	clrf	(___xxtofl@val+2)^0,c
  2653   0027D6  6A04               	clrf	(___xxtofl@val+3)^0,c
  2654   0027D8  0E00               	movlw	0
  2655   0027DA  ECB8  F00F         	call	___xxtofl
  2656   0027DE  C001  F00F         	movff	?___xxtofl,___flmul@b
  2657   0027E2  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2658   0027E6  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2659   0027EA  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2660   0027EE  ECA5  F00C         	call	___flmul	;wreg free
  2661   0027F2  C00F  F028         	movff	?___flmul,___fltol@f1
  2662   0027F6  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  2663   0027FA  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  2664   0027FE  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  2665   002802  ECA1  F012         	call	___fltol	;wreg free
  2666   002806  5032               	movf	scale_RGB@p^0,w,c
  2667   002808  6ED9               	movwf	fsr2l,c
  2668   00280A  6ADA               	clrf	fsr2h,c
  2669   00280C  0E02               	movlw	2
  2670   00280E  26D9               	addwf	fsr2l,f,c
  2671   002810  C028  FFDE         	movff	?___fltol,postinc2
  2672   002814  C029  FFDD         	movff	?___fltol+1,postdec2
  2673   002818  0012               	return		;funcret
  2674   00281A                     __end_of_scale_RGB:
  2675                           	callstack 0
  2676                           
  2677 ;; *************** function ___xxtofl *****************
  2678 ;; Defined at:
  2679 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  sign            1    wreg     unsigned char 
  2682 ;;  val             4    0[COMRAM] long 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  sign            1    8[COMRAM] unsigned char 
  2685 ;;  arg             4   10[COMRAM] unsigned long 
  2686 ;;  exp             1    9[COMRAM] unsigned char 
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  4    0[COMRAM] unsigned char 
  2689 ;; Registers used:
  2690 ;;		wreg, status,2, status,0
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2697 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2698 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2699 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2700 ;;Total ram usage:       14 bytes
  2701 ;; Hardware stack levels used: 1
  2702 ;; Hardware stack levels required when called: 1
  2703 ;; This function calls:
  2704 ;;		Nothing
  2705 ;; This function is called by:
  2706 ;;		_scale_RGB
  2707 ;;		_stop
  2708 ;;		_turnLeft
  2709 ;;		_turnRight
  2710 ;;		_fullSpeedAhead
  2711 ;;		_fullSpeedReverse
  2712 ;;		_turnLeft90
  2713 ;;		_turnRight90
  2714 ;;		_turnLeft135
  2715 ;;		_turnRight135
  2716 ;;		_UTurn
  2717 ;;		_headbuttReverse
  2718 ;;		_squareReverse
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text13
  2723   001F70                     __ptext13:
  2724                           	callstack 0
  2725   001F70                     ___xxtofl:
  2726                           	callstack 27
  2727                           
  2728                           ;incstack = 0
  2729                           ;___xxtofl@sign stored from wreg
  2730   001F70  6E09               	movwf	___xxtofl@sign^0,c
  2731   001F72  5009               	movf	___xxtofl@sign^0,w,c
  2732   001F74  B4D8               	btfsc	status,2,c
  2733   001F76  EFBF  F00F         	goto	u2351
  2734   001F7A  EFC1  F00F         	goto	u2350
  2735   001F7E                     u2351:
  2736   001F7E  EFE3  F00F         	goto	l1402
  2737   001F82                     u2350:
  2738   001F82  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2739   001F84  EFC8  F00F         	goto	u2360
  2740   001F88  EFC6  F00F         	goto	u2361
  2741   001F8C                     u2361:
  2742   001F8C  EFE3  F00F         	goto	l1402
  2743   001F90                     u2360:
  2744   001F90  C001  F005         	movff	___xxtofl@val,??___xxtofl
  2745   001F94  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  2746   001F98  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  2747   001F9C  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  2748   001FA0  1E05               	comf	??___xxtofl^0,f,c
  2749   001FA2  1E06               	comf	(??___xxtofl+1)^0,f,c
  2750   001FA4  1E07               	comf	(??___xxtofl+2)^0,f,c
  2751   001FA6  1E08               	comf	(??___xxtofl+3)^0,f,c
  2752   001FA8  2A05               	incf	??___xxtofl^0,f,c
  2753   001FAA  0E00               	movlw	0
  2754   001FAC  2206               	addwfc	(??___xxtofl+1)^0,f,c
  2755   001FAE  2207               	addwfc	(??___xxtofl+2)^0,f,c
  2756   001FB0  2208               	addwfc	(??___xxtofl+3)^0,f,c
  2757   001FB2  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  2758   001FB6  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  2759   001FBA  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  2760   001FBE  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  2761   001FC2  EFEB  F00F         	goto	l3421
  2762   001FC6                     l1402:
  2763   001FC6  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  2764   001FCA  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2765   001FCE  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2766   001FD2  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2767   001FD6                     l3421:
  2768   001FD6  5001               	movf	___xxtofl@val^0,w,c
  2769   001FD8  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  2770   001FDA  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  2771   001FDC  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  2772   001FDE  A4D8               	btfss	status,2,c
  2773   001FE0  EFF4  F00F         	goto	u2371
  2774   001FE4  EFF6  F00F         	goto	u2370
  2775   001FE8                     u2371:
  2776   001FE8  EF00  F010         	goto	l3427
  2777   001FEC                     u2370:
  2778   001FEC  0E00               	movlw	0
  2779   001FEE  6E01               	movwf	?___xxtofl^0,c
  2780   001FF0  0E00               	movlw	0
  2781   001FF2  6E02               	movwf	(?___xxtofl+1)^0,c
  2782   001FF4  0E00               	movlw	0
  2783   001FF6  6E03               	movwf	(?___xxtofl+2)^0,c
  2784   001FF8  0E00               	movlw	0
  2785   001FFA  6E04               	movwf	(?___xxtofl+3)^0,c
  2786   001FFC  EF91  F010         	goto	l1405
  2787   002000                     l3427:
  2788   002000  0E96               	movlw	150
  2789   002002  6E0A               	movwf	___xxtofl@exp^0,c
  2790   002004  EF0A  F010         	goto	l3431
  2791   002008                     l3429:
  2792   002008  2A0A               	incf	___xxtofl@exp^0,f,c
  2793   00200A  90D8               	bcf	status,0,c
  2794   00200C  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2795   00200E  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2796   002010  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2797   002012  320B               	rrcf	___xxtofl@arg^0,f,c
  2798   002014                     l3431:
  2799   002014  0E00               	movlw	0
  2800   002016  140B               	andwf	___xxtofl@arg^0,w,c
  2801   002018  6E05               	movwf	??___xxtofl^0,c
  2802   00201A  0E00               	movlw	0
  2803   00201C  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2804   00201E  6E06               	movwf	(??___xxtofl+1)^0,c
  2805   002020  0E00               	movlw	0
  2806   002022  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2807   002024  6E07               	movwf	(??___xxtofl+2)^0,c
  2808   002026  0EFE               	movlw	254
  2809   002028  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2810   00202A  6E08               	movwf	(??___xxtofl+3)^0,c
  2811   00202C  5005               	movf	??___xxtofl^0,w,c
  2812   00202E  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2813   002030  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2814   002032  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2815   002034  A4D8               	btfss	status,2,c
  2816   002036  EF1F  F010         	goto	u2381
  2817   00203A  EF21  F010         	goto	u2380
  2818   00203E                     u2381:
  2819   00203E  EF04  F010         	goto	l3429
  2820   002042                     u2380:
  2821   002042  EF2F  F010         	goto	l1409
  2822   002046                     l3433:
  2823   002046  2A0A               	incf	___xxtofl@exp^0,f,c
  2824   002048  0E01               	movlw	1
  2825   00204A  260B               	addwf	___xxtofl@arg^0,f,c
  2826   00204C  0E00               	movlw	0
  2827   00204E  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  2828   002050  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  2829   002052  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  2830   002054  90D8               	bcf	status,0,c
  2831   002056  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2832   002058  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2833   00205A  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2834   00205C  320B               	rrcf	___xxtofl@arg^0,f,c
  2835   00205E                     l1409:
  2836   00205E  0E00               	movlw	0
  2837   002060  140B               	andwf	___xxtofl@arg^0,w,c
  2838   002062  6E05               	movwf	??___xxtofl^0,c
  2839   002064  0E00               	movlw	0
  2840   002066  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2841   002068  6E06               	movwf	(??___xxtofl+1)^0,c
  2842   00206A  0E00               	movlw	0
  2843   00206C  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2844   00206E  6E07               	movwf	(??___xxtofl+2)^0,c
  2845   002070  0EFF               	movlw	255
  2846   002072  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2847   002074  6E08               	movwf	(??___xxtofl+3)^0,c
  2848   002076  5005               	movf	??___xxtofl^0,w,c
  2849   002078  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2850   00207A  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2851   00207C  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2852   00207E  A4D8               	btfss	status,2,c
  2853   002080  EF44  F010         	goto	u2391
  2854   002084  EF46  F010         	goto	u2390
  2855   002088                     u2391:
  2856   002088  EF23  F010         	goto	l3433
  2857   00208C                     u2390:
  2858   00208C  EF4E  F010         	goto	l3441
  2859   002090                     l3439:
  2860   002090  060A               	decf	___xxtofl@exp^0,f,c
  2861   002092  90D8               	bcf	status,0,c
  2862   002094  360B               	rlcf	___xxtofl@arg^0,f,c
  2863   002096  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  2864   002098  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  2865   00209A  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  2866   00209C                     l3441:
  2867   00209C  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  2868   00209E  EF53  F010         	goto	u2401
  2869   0020A2  EF55  F010         	goto	u2400
  2870   0020A6                     u2401:
  2871   0020A6  EF5D  F010         	goto	l1416
  2872   0020AA                     u2400:
  2873   0020AA  0E02               	movlw	2
  2874   0020AC  600A               	cpfslt	___xxtofl@exp^0,c
  2875   0020AE  EF5B  F010         	goto	u2411
  2876   0020B2  EF5D  F010         	goto	u2410
  2877   0020B6                     u2411:
  2878   0020B6  EF48  F010         	goto	l3439
  2879   0020BA                     u2410:
  2880   0020BA                     l1416:
  2881   0020BA  B00A               	btfsc	___xxtofl@exp^0,0,c
  2882   0020BC  EF62  F010         	goto	u2421
  2883   0020C0  EF64  F010         	goto	u2420
  2884   0020C4                     u2421:
  2885   0020C4  EF65  F010         	goto	l3447
  2886   0020C8                     u2420:
  2887   0020C8  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  2888   0020CA                     l3447:
  2889   0020CA  90D8               	bcf	status,0,c
  2890   0020CC  320A               	rrcf	___xxtofl@exp^0,f,c
  2891   0020CE  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  2892   0020D2  6A06               	clrf	(??___xxtofl+1)^0,c
  2893   0020D4  6A07               	clrf	(??___xxtofl+2)^0,c
  2894   0020D6  6A08               	clrf	(??___xxtofl+3)^0,c
  2895   0020D8  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  2896   0020DC  6A07               	clrf	(??___xxtofl+2)^0,c
  2897   0020DE  6A06               	clrf	(??___xxtofl+1)^0,c
  2898   0020E0  6A05               	clrf	??___xxtofl^0,c
  2899   0020E2  5005               	movf	??___xxtofl^0,w,c
  2900   0020E4  120B               	iorwf	___xxtofl@arg^0,f,c
  2901   0020E6  5006               	movf	(??___xxtofl+1)^0,w,c
  2902   0020E8  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  2903   0020EA  5007               	movf	(??___xxtofl+2)^0,w,c
  2904   0020EC  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  2905   0020EE  5008               	movf	(??___xxtofl+3)^0,w,c
  2906   0020F0  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  2907   0020F2  5009               	movf	___xxtofl@sign^0,w,c
  2908   0020F4  B4D8               	btfsc	status,2,c
  2909   0020F6  EF7F  F010         	goto	u2431
  2910   0020FA  EF81  F010         	goto	u2430
  2911   0020FE                     u2431:
  2912   0020FE  EF89  F010         	goto	l3457
  2913   002102                     u2430:
  2914   002102  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2915   002104  EF88  F010         	goto	u2440
  2916   002108  EF86  F010         	goto	u2441
  2917   00210C                     u2441:
  2918   00210C  EF89  F010         	goto	l3457
  2919   002110                     u2440:
  2920   002110  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  2921   002112                     l3457:
  2922   002112  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  2923   002116  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  2924   00211A  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  2925   00211E  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  2926   002122                     l1405:
  2927   002122  0012               	return		;funcret
  2928   002124                     __end_of___xxtofl:
  2929                           	callstack 0
  2930                           
  2931 ;; *************** function ___fltol *****************
  2932 ;; Defined at:
  2933 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  f1              4   39[COMRAM] unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  exp1            1   48[COMRAM] unsigned char 
  2938 ;;  sign1           1   47[COMRAM] unsigned char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  4   39[COMRAM] long 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2949 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2950 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2951 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2952 ;;Total ram usage:       10 bytes
  2953 ;; Hardware stack levels used: 1
  2954 ;; Hardware stack levels required when called: 1
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_scale_RGB
  2959 ;;		_stop
  2960 ;;		_turnLeft
  2961 ;;		_turnRight
  2962 ;;		_fullSpeedAhead
  2963 ;;		_fullSpeedReverse
  2964 ;;		_turnLeft90
  2965 ;;		_turnRight90
  2966 ;;		_turnLeft135
  2967 ;;		_turnRight135
  2968 ;;		_UTurn
  2969 ;;		_headbuttReverse
  2970 ;;		_squareReverse
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text14
  2975   002542                     __ptext14:
  2976                           	callstack 0
  2977   002542                     ___fltol:
  2978                           	callstack 27
  2979   002542  342A               	rlcf	(___fltol@f1+2)^0,w,c
  2980   002544  342B               	rlcf	(___fltol@f1+3)^0,w,c
  2981   002546  6E31               	movwf	___fltol@exp1^0,c
  2982   002548  5031               	movf	___fltol@exp1^0,w,c
  2983   00254A  A4D8               	btfss	status,2,c
  2984   00254C  EFAA  F012         	goto	u2281
  2985   002550  EFAC  F012         	goto	u2280
  2986   002554                     u2281:
  2987   002554  EFB6  F012         	goto	l3377
  2988   002558                     u2280:
  2989   002558                     l3373:
  2990   002558  0E00               	movlw	0
  2991   00255A  6E28               	movwf	?___fltol^0,c
  2992   00255C  0E00               	movlw	0
  2993   00255E  6E29               	movwf	(?___fltol+1)^0,c
  2994   002560  0E00               	movlw	0
  2995   002562  6E2A               	movwf	(?___fltol+2)^0,c
  2996   002564  0E00               	movlw	0
  2997   002566  6E2B               	movwf	(?___fltol+3)^0,c
  2998   002568  EF23  F013         	goto	l1044
  2999   00256C                     l3377:
  3000   00256C  C028  F02C         	movff	___fltol@f1,??___fltol
  3001   002570  C029  F02D         	movff	___fltol@f1+1,??___fltol+1
  3002   002574  C02A  F02E         	movff	___fltol@f1+2,??___fltol+2
  3003   002578  C02B  F02F         	movff	___fltol@f1+3,??___fltol+3
  3004   00257C  0E20               	movlw	32
  3005   00257E  EFC6  F012         	goto	u2290
  3006   002582                     u2295:
  3007   002582  90D8               	bcf	status,0,c
  3008   002584  322F               	rrcf	(??___fltol+3)^0,f,c
  3009   002586  322E               	rrcf	(??___fltol+2)^0,f,c
  3010   002588  322D               	rrcf	(??___fltol+1)^0,f,c
  3011   00258A  322C               	rrcf	??___fltol^0,f,c
  3012   00258C                     u2290:
  3013   00258C  2EE8               	decfsz	wreg,f,c
  3014   00258E  EFC1  F012         	goto	u2295
  3015   002592  502C               	movf	??___fltol^0,w,c
  3016   002594  6E30               	movwf	___fltol@sign1^0,c
  3017   002596  8E2A               	bsf	(___fltol@f1+2)^0,7,c
  3018   002598  0EFF               	movlw	255
  3019   00259A  1628               	andwf	___fltol@f1^0,f,c
  3020   00259C  0EFF               	movlw	255
  3021   00259E  1629               	andwf	(___fltol@f1+1)^0,f,c
  3022   0025A0  0EFF               	movlw	255
  3023   0025A2  162A               	andwf	(___fltol@f1+2)^0,f,c
  3024   0025A4  0E00               	movlw	0
  3025   0025A6  162B               	andwf	(___fltol@f1+3)^0,f,c
  3026   0025A8  0E96               	movlw	150
  3027   0025AA  5E31               	subwf	___fltol@exp1^0,f,c
  3028   0025AC  BE31               	btfsc	___fltol@exp1^0,7,c
  3029   0025AE  EFDD  F012         	goto	u2300
  3030   0025B2  EFDB  F012         	goto	u2301
  3031   0025B6                     u2301:
  3032   0025B6  EFF3  F012         	goto	l3397
  3033   0025BA                     u2300:
  3034   0025BA  5031               	movf	___fltol@exp1^0,w,c
  3035   0025BC  0A80               	xorlw	128
  3036   0025BE  0F97               	addlw	151
  3037   0025C0  B0D8               	btfsc	status,0,c
  3038   0025C2  EFE5  F012         	goto	u2311
  3039   0025C6  EFE7  F012         	goto	u2310
  3040   0025CA                     u2311:
  3041   0025CA  EFE9  F012         	goto	l3393
  3042   0025CE                     u2310:
  3043   0025CE  EFAC  F012         	goto	l3373
  3044   0025D2                     l3393:
  3045   0025D2  90D8               	bcf	status,0,c
  3046   0025D4  322B               	rrcf	(___fltol@f1+3)^0,f,c
  3047   0025D6  322A               	rrcf	(___fltol@f1+2)^0,f,c
  3048   0025D8  3229               	rrcf	(___fltol@f1+1)^0,f,c
  3049   0025DA  3228               	rrcf	___fltol@f1^0,f,c
  3050   0025DC  3E31               	incfsz	___fltol@exp1^0,f,c
  3051   0025DE  EFE9  F012         	goto	l3393
  3052   0025E2  EF0B  F013         	goto	l3407
  3053   0025E6                     l3397:
  3054   0025E6  0E1F               	movlw	31
  3055   0025E8  6431               	cpfsgt	___fltol@exp1^0,c
  3056   0025EA  EFF9  F012         	goto	u2321
  3057   0025EE  EFFB  F012         	goto	u2320
  3058   0025F2                     u2321:
  3059   0025F2  EF03  F013         	goto	l3405
  3060   0025F6                     u2320:
  3061   0025F6  EFAC  F012         	goto	l3373
  3062   0025FA                     l3403:
  3063   0025FA  90D8               	bcf	status,0,c
  3064   0025FC  3628               	rlcf	___fltol@f1^0,f,c
  3065   0025FE  3629               	rlcf	(___fltol@f1+1)^0,f,c
  3066   002600  362A               	rlcf	(___fltol@f1+2)^0,f,c
  3067   002602  362B               	rlcf	(___fltol@f1+3)^0,f,c
  3068   002604  0631               	decf	___fltol@exp1^0,f,c
  3069   002606                     l3405:
  3070   002606  5031               	movf	___fltol@exp1^0,w,c
  3071   002608  A4D8               	btfss	status,2,c
  3072   00260A  EF09  F013         	goto	u2331
  3073   00260E  EF0B  F013         	goto	u2330
  3074   002612                     u2331:
  3075   002612  EFFD  F012         	goto	l3403
  3076   002616                     u2330:
  3077   002616                     l3407:
  3078   002616  5030               	movf	___fltol@sign1^0,w,c
  3079   002618  B4D8               	btfsc	status,2,c
  3080   00261A  EF11  F013         	goto	u2341
  3081   00261E  EF13  F013         	goto	u2340
  3082   002622                     u2341:
  3083   002622  EF1B  F013         	goto	l3411
  3084   002626                     u2340:
  3085   002626  1E2B               	comf	(___fltol@f1+3)^0,f,c
  3086   002628  1E2A               	comf	(___fltol@f1+2)^0,f,c
  3087   00262A  1E29               	comf	(___fltol@f1+1)^0,f,c
  3088   00262C  6C28               	negf	___fltol@f1^0,c
  3089   00262E  0E00               	movlw	0
  3090   002630  2229               	addwfc	(___fltol@f1+1)^0,f,c
  3091   002632  222A               	addwfc	(___fltol@f1+2)^0,f,c
  3092   002634  222B               	addwfc	(___fltol@f1+3)^0,f,c
  3093   002636                     l3411:
  3094   002636  C028  F028         	movff	___fltol@f1,?___fltol
  3095   00263A  C029  F029         	movff	___fltol@f1+1,?___fltol+1
  3096   00263E  C02A  F02A         	movff	___fltol@f1+2,?___fltol+2
  3097   002642  C02B  F02B         	movff	___fltol@f1+3,?___fltol+3
  3098   002646                     l1044:
  3099   002646  0012               	return		;funcret
  3100   002648                     __end_of___fltol:
  3101                           	callstack 0
  3102                           
  3103 ;; *************** function ___flmul *****************
  3104 ;; Defined at:
  3105 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  b               4   14[COMRAM] long 
  3108 ;;  a               4   18[COMRAM] long 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;  prod            4   33[COMRAM] struct .
  3111 ;;  grs             4   27[COMRAM] unsigned long 
  3112 ;;  temp            2   37[COMRAM] struct .
  3113 ;;  bexp            1   32[COMRAM] unsigned char 
  3114 ;;  aexp            1   31[COMRAM] unsigned char 
  3115 ;;  sign            1   26[COMRAM] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  4   14[COMRAM] unsigned char 
  3118 ;; Registers used:
  3119 ;;		wreg, status,2, status,0, prodl, prodh
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3125 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3126 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3127 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3128 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3129 ;;Total ram usage:       25 bytes
  3130 ;; Hardware stack levels used: 1
  3131 ;; Hardware stack levels required when called: 1
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		_scale_RGB
  3136 ;;		_stop
  3137 ;;		_turnLeft
  3138 ;;		_turnRight
  3139 ;;		_fullSpeedAhead
  3140 ;;		_fullSpeedReverse
  3141 ;;		_turnLeft90
  3142 ;;		_turnRight90
  3143 ;;		_turnLeft135
  3144 ;;		_turnRight135
  3145 ;;		_UTurn
  3146 ;;		_headbuttReverse
  3147 ;;		_squareReverse
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text15
  3152   00194A                     __ptext15:
  3153                           	callstack 0
  3154   00194A                     ___flmul:
  3155                           	callstack 27
  3156   00194A  5012               	movf	(___flmul@b+3)^0,w,c
  3157   00194C  0B80               	andlw	128
  3158   00194E  6E1B               	movwf	___flmul@sign^0,c
  3159   001950  5012               	movf	(___flmul@b+3)^0,w,c
  3160   001952  2412               	addwf	(___flmul@b+3)^0,w,c
  3161   001954  6E21               	movwf	___flmul@bexp^0,c
  3162   001956  AE11               	btfss	(___flmul@b+2)^0,7,c
  3163   001958  EFB0  F00C         	goto	u2091
  3164   00195C  EFB2  F00C         	goto	u2090
  3165   001960                     u2091:
  3166   001960  EFB3  F00C         	goto	l3247
  3167   001964                     u2090:
  3168   001964  8021               	bsf	___flmul@bexp^0,0,c
  3169   001966                     l3247:
  3170   001966  5021               	movf	___flmul@bexp^0,w,c
  3171   001968  B4D8               	btfsc	status,2,c
  3172   00196A  EFB9  F00C         	goto	u2101
  3173   00196E  EFBB  F00C         	goto	u2100
  3174   001972                     u2101:
  3175   001972  EFCE  F00C         	goto	l3255
  3176   001976                     u2100:
  3177   001976  2821               	incf	___flmul@bexp^0,w,c
  3178   001978  A4D8               	btfss	status,2,c
  3179   00197A  EFC1  F00C         	goto	u2111
  3180   00197E  EFC3  F00C         	goto	u2110
  3181   001982                     u2111:
  3182   001982  EFCB  F00C         	goto	l3253
  3183   001986                     u2110:
  3184   001986  0E00               	movlw	0
  3185   001988  6E0F               	movwf	___flmul@b^0,c
  3186   00198A  0E00               	movlw	0
  3187   00198C  6E10               	movwf	(___flmul@b+1)^0,c
  3188   00198E  0E00               	movlw	0
  3189   001990  6E11               	movwf	(___flmul@b+2)^0,c
  3190   001992  0E00               	movlw	0
  3191   001994  6E12               	movwf	(___flmul@b+3)^0,c
  3192   001996                     l3253:
  3193   001996  8E11               	bsf	(___flmul@b+2)^0,7,c
  3194   001998  EFD6  F00C         	goto	l3257
  3195   00199C                     l3255:
  3196   00199C  0E00               	movlw	0
  3197   00199E  6E0F               	movwf	___flmul@b^0,c
  3198   0019A0  0E00               	movlw	0
  3199   0019A2  6E10               	movwf	(___flmul@b+1)^0,c
  3200   0019A4  0E00               	movlw	0
  3201   0019A6  6E11               	movwf	(___flmul@b+2)^0,c
  3202   0019A8  0E00               	movlw	0
  3203   0019AA  6E12               	movwf	(___flmul@b+3)^0,c
  3204   0019AC                     l3257:
  3205   0019AC  5016               	movf	(___flmul@a+3)^0,w,c
  3206   0019AE  0B80               	andlw	128
  3207   0019B0  1A1B               	xorwf	___flmul@sign^0,f,c
  3208   0019B2  5016               	movf	(___flmul@a+3)^0,w,c
  3209   0019B4  2416               	addwf	(___flmul@a+3)^0,w,c
  3210   0019B6  6E20               	movwf	___flmul@aexp^0,c
  3211   0019B8  AE15               	btfss	(___flmul@a+2)^0,7,c
  3212   0019BA  EFE1  F00C         	goto	u2121
  3213   0019BE  EFE3  F00C         	goto	u2120
  3214   0019C2                     u2121:
  3215   0019C2  EFE4  F00C         	goto	l3265
  3216   0019C6                     u2120:
  3217   0019C6  8020               	bsf	___flmul@aexp^0,0,c
  3218   0019C8                     l3265:
  3219   0019C8  5020               	movf	___flmul@aexp^0,w,c
  3220   0019CA  B4D8               	btfsc	status,2,c
  3221   0019CC  EFEA  F00C         	goto	u2131
  3222   0019D0  EFEC  F00C         	goto	u2130
  3223   0019D4                     u2131:
  3224   0019D4  EFFF  F00C         	goto	l3273
  3225   0019D8                     u2130:
  3226   0019D8  2820               	incf	___flmul@aexp^0,w,c
  3227   0019DA  A4D8               	btfss	status,2,c
  3228   0019DC  EFF2  F00C         	goto	u2141
  3229   0019E0  EFF4  F00C         	goto	u2140
  3230   0019E4                     u2141:
  3231   0019E4  EFFC  F00C         	goto	l3271
  3232   0019E8                     u2140:
  3233   0019E8  0E00               	movlw	0
  3234   0019EA  6E13               	movwf	___flmul@a^0,c
  3235   0019EC  0E00               	movlw	0
  3236   0019EE  6E14               	movwf	(___flmul@a+1)^0,c
  3237   0019F0  0E00               	movlw	0
  3238   0019F2  6E15               	movwf	(___flmul@a+2)^0,c
  3239   0019F4  0E00               	movlw	0
  3240   0019F6  6E16               	movwf	(___flmul@a+3)^0,c
  3241   0019F8                     l3271:
  3242   0019F8  8E15               	bsf	(___flmul@a+2)^0,7,c
  3243   0019FA  EF07  F00D         	goto	l1361
  3244   0019FE                     l3273:
  3245   0019FE  0E00               	movlw	0
  3246   001A00  6E13               	movwf	___flmul@a^0,c
  3247   001A02  0E00               	movlw	0
  3248   001A04  6E14               	movwf	(___flmul@a+1)^0,c
  3249   001A06  0E00               	movlw	0
  3250   001A08  6E15               	movwf	(___flmul@a+2)^0,c
  3251   001A0A  0E00               	movlw	0
  3252   001A0C  6E16               	movwf	(___flmul@a+3)^0,c
  3253   001A0E                     l1361:
  3254   001A0E  5020               	movf	___flmul@aexp^0,w,c
  3255   001A10  B4D8               	btfsc	status,2,c
  3256   001A12  EF0D  F00D         	goto	u2151
  3257   001A16  EF0F  F00D         	goto	u2150
  3258   001A1A                     u2151:
  3259   001A1A  EF17  F00D         	goto	l3277
  3260   001A1E                     u2150:
  3261   001A1E  5021               	movf	___flmul@bexp^0,w,c
  3262   001A20  A4D8               	btfss	status,2,c
  3263   001A22  EF15  F00D         	goto	u2161
  3264   001A26  EF17  F00D         	goto	u2160
  3265   001A2A                     u2161:
  3266   001A2A  EF21  F00D         	goto	l3281
  3267   001A2E                     u2160:
  3268   001A2E                     l3277:
  3269   001A2E  0E00               	movlw	0
  3270   001A30  6E0F               	movwf	?___flmul^0,c
  3271   001A32  0E00               	movlw	0
  3272   001A34  6E10               	movwf	(?___flmul+1)^0,c
  3273   001A36  0E00               	movlw	0
  3274   001A38  6E11               	movwf	(?___flmul+2)^0,c
  3275   001A3A  0E00               	movlw	0
  3276   001A3C  6E12               	movwf	(?___flmul+3)^0,c
  3277   001A3E  EFB9  F00E         	goto	l1365
  3278   001A42                     l3281:
  3279   001A42  5015               	movf	(___flmul@a+2)^0,w,c
  3280   001A44  020F               	mulwf	___flmul@b^0,c
  3281   001A46  CFF3 F026          	movff	prodl,___flmul@temp
  3282   001A4A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3283   001A4E  5026               	movf	___flmul@temp^0,w,c
  3284   001A50  6E1C               	movwf	___flmul@grs^0,c
  3285   001A52  6A1D               	clrf	(___flmul@grs+1)^0,c
  3286   001A54  6A1E               	clrf	(___flmul@grs+2)^0,c
  3287   001A56  6A1F               	clrf	(___flmul@grs+3)^0,c
  3288   001A58  5027               	movf	(___flmul@temp+1)^0,w,c
  3289   001A5A  6E22               	movwf	___flmul@prod^0,c
  3290   001A5C  6A23               	clrf	(___flmul@prod+1)^0,c
  3291   001A5E  6A24               	clrf	(___flmul@prod+2)^0,c
  3292   001A60  6A25               	clrf	(___flmul@prod+3)^0,c
  3293   001A62  5014               	movf	(___flmul@a+1)^0,w,c
  3294   001A64  0210               	mulwf	(___flmul@b+1)^0,c
  3295   001A66  CFF3 F026          	movff	prodl,___flmul@temp
  3296   001A6A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3297   001A6E  5026               	movf	___flmul@temp^0,w,c
  3298   001A70  261C               	addwf	___flmul@grs^0,f,c
  3299   001A72  0E00               	movlw	0
  3300   001A74  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3301   001A76  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3302   001A78  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3303   001A7A  5027               	movf	(___flmul@temp+1)^0,w,c
  3304   001A7C  2622               	addwf	___flmul@prod^0,f,c
  3305   001A7E  0E00               	movlw	0
  3306   001A80  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3307   001A82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3308   001A84  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3309   001A86  5013               	movf	___flmul@a^0,w,c
  3310   001A88  0211               	mulwf	(___flmul@b+2)^0,c
  3311   001A8A  CFF3 F026          	movff	prodl,___flmul@temp
  3312   001A8E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3313   001A92  5026               	movf	___flmul@temp^0,w,c
  3314   001A94  261C               	addwf	___flmul@grs^0,f,c
  3315   001A96  0E00               	movlw	0
  3316   001A98  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3317   001A9A  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3318   001A9C  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3319   001A9E  5027               	movf	(___flmul@temp+1)^0,w,c
  3320   001AA0  2622               	addwf	___flmul@prod^0,f,c
  3321   001AA2  0E00               	movlw	0
  3322   001AA4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3323   001AA6  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3324   001AA8  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3325   001AAA  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3326   001AAE  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3327   001AB2  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3328   001AB6  6A1C               	clrf	___flmul@grs^0,c
  3329   001AB8  5013               	movf	___flmul@a^0,w,c
  3330   001ABA  0210               	mulwf	(___flmul@b+1)^0,c
  3331   001ABC  CFF3 F026          	movff	prodl,___flmul@temp
  3332   001AC0  CFF4 F027          	movff	prodh,___flmul@temp+1
  3333   001AC4  5026               	movf	___flmul@temp^0,w,c
  3334   001AC6  261C               	addwf	___flmul@grs^0,f,c
  3335   001AC8  5027               	movf	(___flmul@temp+1)^0,w,c
  3336   001ACA  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3337   001ACC  0E00               	movlw	0
  3338   001ACE  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3339   001AD0  0E00               	movlw	0
  3340   001AD2  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3341   001AD4  5014               	movf	(___flmul@a+1)^0,w,c
  3342   001AD6  020F               	mulwf	___flmul@b^0,c
  3343   001AD8  CFF3 F026          	movff	prodl,___flmul@temp
  3344   001ADC  CFF4 F027          	movff	prodh,___flmul@temp+1
  3345   001AE0  5026               	movf	___flmul@temp^0,w,c
  3346   001AE2  261C               	addwf	___flmul@grs^0,f,c
  3347   001AE4  5027               	movf	(___flmul@temp+1)^0,w,c
  3348   001AE6  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3349   001AE8  0E00               	movlw	0
  3350   001AEA  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3351   001AEC  0E00               	movlw	0
  3352   001AEE  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3353   001AF0  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3354   001AF4  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3355   001AF8  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3356   001AFC  6A1C               	clrf	___flmul@grs^0,c
  3357   001AFE  5013               	movf	___flmul@a^0,w,c
  3358   001B00  020F               	mulwf	___flmul@b^0,c
  3359   001B02  CFF3 F026          	movff	prodl,___flmul@temp
  3360   001B06  CFF4 F027          	movff	prodh,___flmul@temp+1
  3361   001B0A  5026               	movf	___flmul@temp^0,w,c
  3362   001B0C  261C               	addwf	___flmul@grs^0,f,c
  3363   001B0E  5027               	movf	(___flmul@temp+1)^0,w,c
  3364   001B10  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3365   001B12  0E00               	movlw	0
  3366   001B14  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3367   001B16  0E00               	movlw	0
  3368   001B18  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3369   001B1A  5015               	movf	(___flmul@a+2)^0,w,c
  3370   001B1C  0210               	mulwf	(___flmul@b+1)^0,c
  3371   001B1E  CFF3 F026          	movff	prodl,___flmul@temp
  3372   001B22  CFF4 F027          	movff	prodh,___flmul@temp+1
  3373   001B26  5026               	movf	___flmul@temp^0,w,c
  3374   001B28  2622               	addwf	___flmul@prod^0,f,c
  3375   001B2A  5027               	movf	(___flmul@temp+1)^0,w,c
  3376   001B2C  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3377   001B2E  0E00               	movlw	0
  3378   001B30  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3379   001B32  0E00               	movlw	0
  3380   001B34  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3381   001B36  5014               	movf	(___flmul@a+1)^0,w,c
  3382   001B38  0211               	mulwf	(___flmul@b+2)^0,c
  3383   001B3A  CFF3 F026          	movff	prodl,___flmul@temp
  3384   001B3E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3385   001B42  5026               	movf	___flmul@temp^0,w,c
  3386   001B44  2622               	addwf	___flmul@prod^0,f,c
  3387   001B46  5027               	movf	(___flmul@temp+1)^0,w,c
  3388   001B48  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3389   001B4A  0E00               	movlw	0
  3390   001B4C  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3391   001B4E  0E00               	movlw	0
  3392   001B50  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3393   001B52  5015               	movf	(___flmul@a+2)^0,w,c
  3394   001B54  0211               	mulwf	(___flmul@b+2)^0,c
  3395   001B56  CFF3 F026          	movff	prodl,___flmul@temp
  3396   001B5A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3397   001B5E  5026               	movf	___flmul@temp^0,w,c
  3398   001B60  6E17               	movwf	??___flmul^0,c
  3399   001B62  5027               	movf	(___flmul@temp+1)^0,w,c
  3400   001B64  6E18               	movwf	(??___flmul+1)^0,c
  3401   001B66  6A19               	clrf	(??___flmul+2)^0,c
  3402   001B68  6A1A               	clrf	(??___flmul+3)^0,c
  3403   001B6A  C019  F01A         	movff	??___flmul+2,??___flmul+3
  3404   001B6E  C018  F019         	movff	??___flmul+1,??___flmul+2
  3405   001B72  C017  F018         	movff	??___flmul,??___flmul+1
  3406   001B76  6A17               	clrf	??___flmul^0,c
  3407   001B78  5017               	movf	??___flmul^0,w,c
  3408   001B7A  2622               	addwf	___flmul@prod^0,f,c
  3409   001B7C  5018               	movf	(??___flmul+1)^0,w,c
  3410   001B7E  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3411   001B80  5019               	movf	(??___flmul+2)^0,w,c
  3412   001B82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3413   001B84  501A               	movf	(??___flmul+3)^0,w,c
  3414   001B86  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3415   001B88  C01C  F017         	movff	___flmul@grs,??___flmul
  3416   001B8C  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  3417   001B90  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  3418   001B94  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  3419   001B98  0E19               	movlw	25
  3420   001B9A  EFD4  F00D         	goto	u2170
  3421   001B9E                     u2175:
  3422   001B9E  90D8               	bcf	status,0,c
  3423   001BA0  321A               	rrcf	(??___flmul+3)^0,f,c
  3424   001BA2  3219               	rrcf	(??___flmul+2)^0,f,c
  3425   001BA4  3218               	rrcf	(??___flmul+1)^0,f,c
  3426   001BA6  3217               	rrcf	??___flmul^0,f,c
  3427   001BA8                     u2170:
  3428   001BA8  2EE8               	decfsz	wreg,f,c
  3429   001BAA  EFCF  F00D         	goto	u2175
  3430   001BAE  5017               	movf	??___flmul^0,w,c
  3431   001BB0  2622               	addwf	___flmul@prod^0,f,c
  3432   001BB2  5018               	movf	(??___flmul+1)^0,w,c
  3433   001BB4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3434   001BB6  5019               	movf	(??___flmul+2)^0,w,c
  3435   001BB8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3436   001BBA  501A               	movf	(??___flmul+3)^0,w,c
  3437   001BBC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3438   001BBE  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3439   001BC2  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3440   001BC6  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3441   001BCA  6A1C               	clrf	___flmul@grs^0,c
  3442   001BCC  5020               	movf	___flmul@aexp^0,w,c
  3443   001BCE  C021  F017         	movff	___flmul@bexp,??___flmul
  3444   001BD2  6A18               	clrf	(??___flmul+1)^0,c
  3445   001BD4  2617               	addwf	??___flmul^0,f,c
  3446   001BD6  0E00               	movlw	0
  3447   001BD8  2218               	addwfc	(??___flmul+1)^0,f,c
  3448   001BDA  0E82               	movlw	130
  3449   001BDC  2417               	addwf	??___flmul^0,w,c
  3450   001BDE  6E26               	movwf	___flmul@temp^0,c
  3451   001BE0  0EFF               	movlw	255
  3452   001BE2  2018               	addwfc	(??___flmul+1)^0,w,c
  3453   001BE4  6E27               	movwf	(___flmul@temp+1)^0,c
  3454   001BE6  EF0A  F00E         	goto	l3329
  3455   001BEA                     l3323:
  3456   001BEA  90D8               	bcf	status,0,c
  3457   001BEC  3622               	rlcf	___flmul@prod^0,f,c
  3458   001BEE  3623               	rlcf	(___flmul@prod+1)^0,f,c
  3459   001BF0  3624               	rlcf	(___flmul@prod+2)^0,f,c
  3460   001BF2  3625               	rlcf	(___flmul@prod+3)^0,f,c
  3461   001BF4  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  3462   001BF6  EFFF  F00D         	goto	u2181
  3463   001BFA  EF01  F00E         	goto	u2180
  3464   001BFE                     u2181:
  3465   001BFE  EF02  F00E         	goto	l1368
  3466   001C02                     u2180:
  3467   001C02  8022               	bsf	___flmul@prod^0,0,c
  3468   001C04                     l1368:
  3469   001C04  90D8               	bcf	status,0,c
  3470   001C06  361C               	rlcf	___flmul@grs^0,f,c
  3471   001C08  361D               	rlcf	(___flmul@grs+1)^0,f,c
  3472   001C0A  361E               	rlcf	(___flmul@grs+2)^0,f,c
  3473   001C0C  361F               	rlcf	(___flmul@grs+3)^0,f,c
  3474   001C0E  0626               	decf	___flmul@temp^0,f,c
  3475   001C10  A0D8               	btfss	status,0,c
  3476   001C12  0627               	decf	(___flmul@temp+1)^0,f,c
  3477   001C14                     l3329:
  3478   001C14  AE24               	btfss	(___flmul@prod+2)^0,7,c
  3479   001C16  EF0F  F00E         	goto	u2191
  3480   001C1A  EF11  F00E         	goto	u2190
  3481   001C1E                     u2191:
  3482   001C1E  EFF5  F00D         	goto	l3323
  3483   001C22                     u2190:
  3484   001C22  0E00               	movlw	0
  3485   001C24  6E20               	movwf	___flmul@aexp^0,c
  3486   001C26  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  3487   001C28  EF18  F00E         	goto	u2201
  3488   001C2C  EF1A  F00E         	goto	u2200
  3489   001C30                     u2201:
  3490   001C30  EF3E  F00E         	goto	l1370
  3491   001C34                     u2200:
  3492   001C34  0EFF               	movlw	255
  3493   001C36  141C               	andwf	___flmul@grs^0,w,c
  3494   001C38  6E17               	movwf	??___flmul^0,c
  3495   001C3A  0EFF               	movlw	255
  3496   001C3C  141D               	andwf	(___flmul@grs+1)^0,w,c
  3497   001C3E  6E18               	movwf	(??___flmul+1)^0,c
  3498   001C40  0EFF               	movlw	255
  3499   001C42  141E               	andwf	(___flmul@grs+2)^0,w,c
  3500   001C44  6E19               	movwf	(??___flmul+2)^0,c
  3501   001C46  0E7F               	movlw	127
  3502   001C48  141F               	andwf	(___flmul@grs+3)^0,w,c
  3503   001C4A  6E1A               	movwf	(??___flmul+3)^0,c
  3504   001C4C  5017               	movf	??___flmul^0,w,c
  3505   001C4E  1018               	iorwf	(??___flmul+1)^0,w,c
  3506   001C50  1019               	iorwf	(??___flmul+2)^0,w,c
  3507   001C52  101A               	iorwf	(??___flmul+3)^0,w,c
  3508   001C54  B4D8               	btfsc	status,2,c
  3509   001C56  EF2F  F00E         	goto	u2211
  3510   001C5A  EF31  F00E         	goto	u2210
  3511   001C5E                     u2211:
  3512   001C5E  EF35  F00E         	goto	l1371
  3513   001C62                     u2210:
  3514   001C62                     l3337:
  3515   001C62  0E01               	movlw	1
  3516   001C64  6E20               	movwf	___flmul@aexp^0,c
  3517   001C66  EF3E  F00E         	goto	l1370
  3518   001C6A                     l1371:
  3519   001C6A  A022               	btfss	___flmul@prod^0,0,c
  3520   001C6C  EF3A  F00E         	goto	u2221
  3521   001C70  EF3C  F00E         	goto	u2220
  3522   001C74                     u2221:
  3523   001C74  EF3E  F00E         	goto	l1370
  3524   001C78                     u2220:
  3525   001C78  EF31  F00E         	goto	l3337
  3526   001C7C                     l1370:
  3527   001C7C  5020               	movf	___flmul@aexp^0,w,c
  3528   001C7E  B4D8               	btfsc	status,2,c
  3529   001C80  EF44  F00E         	goto	u2231
  3530   001C84  EF46  F00E         	goto	u2230
  3531   001C88                     u2231:
  3532   001C88  EF6A  F00E         	goto	l3349
  3533   001C8C                     u2230:
  3534   001C8C  0E01               	movlw	1
  3535   001C8E  2622               	addwf	___flmul@prod^0,f,c
  3536   001C90  0E00               	movlw	0
  3537   001C92  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3538   001C94  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3539   001C96  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3540   001C98  A025               	btfss	(___flmul@prod+3)^0,0,c
  3541   001C9A  EF51  F00E         	goto	u2241
  3542   001C9E  EF53  F00E         	goto	u2240
  3543   001CA2                     u2241:
  3544   001CA2  EF6A  F00E         	goto	l3349
  3545   001CA6                     u2240:
  3546   001CA6  C022  F017         	movff	___flmul@prod,??___flmul
  3547   001CAA  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  3548   001CAE  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  3549   001CB2  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  3550   001CB6  341A               	rlcf	(??___flmul+3)^0,w,c
  3551   001CB8  321A               	rrcf	(??___flmul+3)^0,f,c
  3552   001CBA  3219               	rrcf	(??___flmul+2)^0,f,c
  3553   001CBC  3218               	rrcf	(??___flmul+1)^0,f,c
  3554   001CBE  3217               	rrcf	??___flmul^0,f,c
  3555   001CC0  C017  F022         	movff	??___flmul,___flmul@prod
  3556   001CC4  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  3557   001CC8  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  3558   001CCC  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  3559   001CD0  4A26               	infsnz	___flmul@temp^0,f,c
  3560   001CD2  2A27               	incf	(___flmul@temp+1)^0,f,c
  3561   001CD4                     l3349:
  3562   001CD4  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  3563   001CD6  EF75  F00E         	goto	u2251
  3564   001CDA  5027               	movf	(___flmul@temp+1)^0,w,c
  3565   001CDC  E108               	bnz	u2250
  3566   001CDE  2826               	incf	___flmul@temp^0,w,c
  3567   001CE0  A0D8               	btfss	status,0,c
  3568   001CE2  EF75  F00E         	goto	u2251
  3569   001CE6  EF77  F00E         	goto	u2250
  3570   001CEA                     u2251:
  3571   001CEA  EF81  F00E         	goto	l3353
  3572   001CEE                     u2250:
  3573   001CEE  0E00               	movlw	0
  3574   001CF0  6E22               	movwf	___flmul@prod^0,c
  3575   001CF2  0E00               	movlw	0
  3576   001CF4  6E23               	movwf	(___flmul@prod+1)^0,c
  3577   001CF6  0E80               	movlw	128
  3578   001CF8  6E24               	movwf	(___flmul@prod+2)^0,c
  3579   001CFA  0E7F               	movlw	127
  3580   001CFC  6E25               	movwf	(___flmul@prod+3)^0,c
  3581   001CFE  EFAF  F00E         	goto	l3365
  3582   001D02                     l3353:
  3583   001D02  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  3584   001D04  EF8E  F00E         	goto	u2260
  3585   001D08  5027               	movf	(___flmul@temp+1)^0,w,c
  3586   001D0A  E106               	bnz	u2261
  3587   001D0C  0426               	decf	___flmul@temp^0,w,c
  3588   001D0E  B0D8               	btfsc	status,0,c
  3589   001D10  EF8C  F00E         	goto	u2261
  3590   001D14  EF8E  F00E         	goto	u2260
  3591   001D18                     u2261:
  3592   001D18  EF9A  F00E         	goto	l1378
  3593   001D1C                     u2260:
  3594   001D1C  0E00               	movlw	0
  3595   001D1E  6E22               	movwf	___flmul@prod^0,c
  3596   001D20  0E00               	movlw	0
  3597   001D22  6E23               	movwf	(___flmul@prod+1)^0,c
  3598   001D24  0E00               	movlw	0
  3599   001D26  6E24               	movwf	(___flmul@prod+2)^0,c
  3600   001D28  0E00               	movlw	0
  3601   001D2A  6E25               	movwf	(___flmul@prod+3)^0,c
  3602   001D2C  0E00               	movlw	0
  3603   001D2E  6E1B               	movwf	___flmul@sign^0,c
  3604   001D30  EFAF  F00E         	goto	l3365
  3605   001D34                     l1378:
  3606   001D34  C026  F021         	movff	___flmul@temp,___flmul@bexp
  3607   001D38  0EFF               	movlw	255
  3608   001D3A  1622               	andwf	___flmul@prod^0,f,c
  3609   001D3C  0EFF               	movlw	255
  3610   001D3E  1623               	andwf	(___flmul@prod+1)^0,f,c
  3611   001D40  0E7F               	movlw	127
  3612   001D42  1624               	andwf	(___flmul@prod+2)^0,f,c
  3613   001D44  0E00               	movlw	0
  3614   001D46  1625               	andwf	(___flmul@prod+3)^0,f,c
  3615   001D48  A021               	btfss	___flmul@bexp^0,0,c
  3616   001D4A  EFA9  F00E         	goto	u2271
  3617   001D4E  EFAB  F00E         	goto	u2270
  3618   001D52                     u2271:
  3619   001D52  EFAC  F00E         	goto	l3363
  3620   001D56                     u2270:
  3621   001D56  8E24               	bsf	(___flmul@prod+2)^0,7,c
  3622   001D58                     l3363:
  3623   001D58  90D8               	bcf	status,0,c
  3624   001D5A  3021               	rrcf	___flmul@bexp^0,w,c
  3625   001D5C  6E25               	movwf	(___flmul@prod+3)^0,c
  3626   001D5E                     l3365:
  3627   001D5E  501B               	movf	___flmul@sign^0,w,c
  3628   001D60  1225               	iorwf	(___flmul@prod+3)^0,f,c
  3629   001D62  C022  F00F         	movff	___flmul@prod,?___flmul
  3630   001D66  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  3631   001D6A  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  3632   001D6E  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  3633   001D72                     l1365:
  3634   001D72  0012               	return		;funcret
  3635   001D74                     __end_of___flmul:
  3636                           	callstack 0
  3637                           
  3638 ;; *************** function _read_timer *****************
  3639 ;; Defined at:
  3640 ;;		line 46 in file "timers.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  tH              1    0[COMRAM] PTR unsigned char 
  3643 ;;		 -> forward_navigation@timerH(1), 
  3644 ;;  tL              1    1[COMRAM] PTR unsigned char 
  3645 ;;		 -> forward_navigation@timerL(1), 
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;		None
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      void 
  3650 ;; Registers used:
  3651 ;;		wreg, fsr2l, fsr2h, status,2
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3660 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3661 ;;Total ram usage:        2 bytes
  3662 ;; Hardware stack levels used: 1
  3663 ;; Hardware stack levels required when called: 1
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_forward_navigation
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text16
  3672   003962                     __ptext16:
  3673                           	callstack 0
  3674   003962                     _read_timer:
  3675                           	callstack 28
  3676   003962                     
  3677                           ;timers.c: 46: void read_timer(unsigned char *tH, unsigned char *tL);timers.c: 47: {;tim
      +                          ers.c: 51:     *tL = TMR0L;
  3678   003962  5002               	movf	read_timer@tL^0,w,c
  3679   003964  6ED9               	movwf	fsr2l,c
  3680   003966  6ADA               	clrf	fsr2h,c
  3681   003968  CFD3 FFDF          	movff	4051,indf2	;volatile
  3682                           
  3683                           ;timers.c: 52:     *tH = TMR0H;
  3684   00396C  5001               	movf	read_timer@tH^0,w,c
  3685   00396E  6ED9               	movwf	fsr2l,c
  3686   003970  6ADA               	clrf	fsr2h,c
  3687   003972  CFD4 FFDF          	movff	4052,indf2	;volatile
  3688   003976  0012               	return		;funcret
  3689   003978                     __end_of_read_timer:
  3690                           	callstack 0
  3691                           
  3692 ;; *************** function _pick_card *****************
  3693 ;; Defined at:
  3694 ;;		line 141 in file "manoeuvres.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  3697 ;;		 -> main@motorL(9), 
  3698 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  3699 ;;		 -> main@motorR(9), 
  3700 ;;  backtrack       1   34[COMRAM] unsigned char 
  3701 ;;  key             1   35[COMRAM] unsigned char 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3713 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3715 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3716 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3717 ;;Total ram usage:        6 bytes
  3718 ;; Hardware stack levels used: 1
  3719 ;; Hardware stack levels required when called: 6
  3720 ;; This function calls:
  3721 ;;		_card_blue
  3722 ;;		_card_cyan
  3723 ;;		_card_green
  3724 ;;		_card_orange
  3725 ;;		_card_pink
  3726 ;;		_card_red
  3727 ;;		_card_white
  3728 ;;		_card_yellow
  3729 ;; This function is called by:
  3730 ;;		_forward_navigation
  3731 ;;		_return_to_sender
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           	psect	text17
  3736   002648                     __ptext17:
  3737                           	callstack 0
  3738   002648                     _pick_card:
  3739                           	callstack 23
  3740   002648                     
  3741                           ;manoeuvres.c: 141: void pick_card(DC_motor *mL, DC_motor *mR, unsigned char backtrack, 
      +                          unsigned char key);manoeuvres.c: 142: {;manoeuvres.c: 143:     switch (key) {
  3742   002648  EF74  F013         	goto	l3763
  3743   00264C                     l3745:
  3744                           
  3745                           ;manoeuvres.c: 145:             card_red(mL, mR, backtrack);
  3746   00264C  C021  F01C         	movff	pick_card@mL,card_red@mL
  3747   002650  C022  F01D         	movff	pick_card@mR,card_red@mR
  3748   002654  C023  F01E         	movff	pick_card@backtrack,card_red@backtrack
  3749   002658  EC7E  F018         	call	_card_red	;wreg free
  3750                           
  3751                           ;manoeuvres.c: 146:             break;
  3752   00265C  EFA1  F013         	goto	l599
  3753   002660                     l3747:
  3754                           
  3755                           ;manoeuvres.c: 148:             card_green(mL, mR, backtrack);
  3756   002660  C021  F01C         	movff	pick_card@mL,card_green@mL
  3757   002664  C022  F01D         	movff	pick_card@mR,card_green@mR
  3758   002668  C023  F01E         	movff	pick_card@backtrack,card_green@backtrack
  3759   00266C  ECE6  F018         	call	_card_green	;wreg free
  3760                           
  3761                           ;manoeuvres.c: 149:             break;
  3762   002670  EFA1  F013         	goto	l599
  3763   002674                     l3749:
  3764                           
  3765                           ;manoeuvres.c: 151:             card_blue(mL, mR, backtrack);
  3766   002674  C021  F01C         	movff	pick_card@mL,card_blue@mL
  3767   002678  C022  F01D         	movff	pick_card@mR,card_blue@mR
  3768   00267C  C023  F01E         	movff	pick_card@backtrack,card_blue@backtrack
  3769   002680  EC4E  F019         	call	_card_blue	;wreg free
  3770                           
  3771                           ;manoeuvres.c: 152:             break;
  3772   002684  EFA1  F013         	goto	l599
  3773   002688                     l3751:
  3774                           
  3775                           ;manoeuvres.c: 154:             card_yellow(mL, mR, backtrack);
  3776   002688  C021  F01C         	movff	pick_card@mL,card_yellow@mL
  3777   00268C  C022  F01D         	movff	pick_card@mR,card_yellow@mR
  3778   002690  C023  F01E         	movff	pick_card@backtrack,card_yellow@backtrack
  3779   002694  EC13  F017         	call	_card_yellow	;wreg free
  3780                           
  3781                           ;manoeuvres.c: 155:             break;
  3782   002698  EFA1  F013         	goto	l599
  3783   00269C                     l3753:
  3784                           
  3785                           ;manoeuvres.c: 157:             card_pink(mL, mR, backtrack);
  3786   00269C  C021  F01C         	movff	pick_card@mL,card_pink@mL
  3787   0026A0  C022  F01D         	movff	pick_card@mR,card_pink@mR
  3788   0026A4  C023  F01E         	movff	pick_card@backtrack,card_pink@backtrack
  3789   0026A8  EC53  F017         	call	_card_pink	;wreg free
  3790                           
  3791                           ;manoeuvres.c: 158:             break;
  3792   0026AC  EFA1  F013         	goto	l599
  3793   0026B0                     l3755:
  3794                           
  3795                           ;manoeuvres.c: 160:             card_orange(mL, mR, backtrack);
  3796   0026B0  C021  F01C         	movff	pick_card@mL,card_orange@mL
  3797   0026B4  C022  F01D         	movff	pick_card@mR,card_orange@mR
  3798   0026B8  C023  F01E         	movff	pick_card@backtrack,card_orange@backtrack
  3799   0026BC  ECB2  F018         	call	_card_orange	;wreg free
  3800                           
  3801                           ;manoeuvres.c: 161:             break;
  3802   0026C0  EFA1  F013         	goto	l599
  3803   0026C4                     l3757:
  3804                           
  3805                           ;manoeuvres.c: 163:             card_cyan(mL, mR, backtrack);
  3806   0026C4  C021  F01C         	movff	pick_card@mL,card_cyan@mL
  3807   0026C8  C022  F01D         	movff	pick_card@mR,card_cyan@mR
  3808   0026CC  C023  F01E         	movff	pick_card@backtrack,card_cyan@backtrack
  3809   0026D0  EC1A  F019         	call	_card_cyan	;wreg free
  3810                           
  3811                           ;manoeuvres.c: 164:             break;
  3812   0026D4  EFA1  F013         	goto	l599
  3813   0026D8                     l3759:
  3814                           
  3815                           ;manoeuvres.c: 166:             card_white(mL, mR);
  3816   0026D8  C021  F01C         	movff	pick_card@mL,card_white@mL
  3817   0026DC  C022  F01D         	movff	pick_card@mR,card_white@mR
  3818   0026E0  EC2A  F01C         	call	_card_white	;wreg free
  3819                           
  3820                           ;manoeuvres.c: 167:             break;
  3821   0026E4  EFA1  F013         	goto	l599
  3822   0026E8                     l3763:
  3823   0026E8  5024               	movf	pick_card@key^0,w,c
  3824   0026EA  6E25               	movwf	??_pick_card^0,c
  3825   0026EC  6A26               	clrf	(??_pick_card+1)^0,c
  3826                           
  3827                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3828                           ; Switch size 1, requested type "simple"
  3829                           ; Number of cases is 1, Range of values is 0 to 0
  3830                           ; switch strategies available:
  3831                           ; Name         Instructions Cycles
  3832                           ; simple_byte            4     3 (average)
  3833                           ;	Chosen strategy is simple_byte
  3834   0026EE  5026               	movf	(??_pick_card+1)^0,w,c
  3835   0026F0  0A00               	xorlw	0	; case 0
  3836   0026F2  B4D8               	btfsc	status,2,c
  3837   0026F4  EF7E  F013         	goto	l4149
  3838   0026F8  EFA1  F013         	goto	l599
  3839   0026FC                     l4149:
  3840                           
  3841                           ; Switch size 1, requested type "simple"
  3842                           ; Number of cases is 8, Range of values is 1 to 8
  3843                           ; switch strategies available:
  3844                           ; Name         Instructions Cycles
  3845                           ; simple_byte           25    13 (average)
  3846                           ;	Chosen strategy is simple_byte
  3847   0026FC  5025               	movf	??_pick_card^0,w,c
  3848   0026FE  0A01               	xorlw	1	; case 1
  3849   002700  B4D8               	btfsc	status,2,c
  3850   002702  EF26  F013         	goto	l3745
  3851   002706  0A03               	xorlw	3	; case 2
  3852   002708  B4D8               	btfsc	status,2,c
  3853   00270A  EF30  F013         	goto	l3747
  3854   00270E  0A01               	xorlw	1	; case 3
  3855   002710  B4D8               	btfsc	status,2,c
  3856   002712  EF3A  F013         	goto	l3749
  3857   002716  0A07               	xorlw	7	; case 4
  3858   002718  B4D8               	btfsc	status,2,c
  3859   00271A  EF44  F013         	goto	l3751
  3860   00271E  0A01               	xorlw	1	; case 5
  3861   002720  B4D8               	btfsc	status,2,c
  3862   002722  EF4E  F013         	goto	l3753
  3863   002726  0A03               	xorlw	3	; case 6
  3864   002728  B4D8               	btfsc	status,2,c
  3865   00272A  EF58  F013         	goto	l3755
  3866   00272E  0A01               	xorlw	1	; case 7
  3867   002730  B4D8               	btfsc	status,2,c
  3868   002732  EF62  F013         	goto	l3757
  3869   002736  0A0F               	xorlw	15	; case 8
  3870   002738  B4D8               	btfsc	status,2,c
  3871   00273A  EF6C  F013         	goto	l3759
  3872   00273E  EFA1  F013         	goto	l599
  3873   002742                     l599:
  3874   002742  0012               	return		;funcret
  3875   002744                     __end_of_pick_card:
  3876                           	callstack 0
  3877                           
  3878 ;; *************** function _card_yellow *****************
  3879 ;; Defined at:
  3880 ;;		line 58 in file "manoeuvres.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3883 ;;		 -> main@motorL(9), 
  3884 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3885 ;;		 -> main@motorR(9), 
  3886 ;;  backtrack       1   29[COMRAM] unsigned char 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;		None
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      void 
  3891 ;; Registers used:
  3892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3898 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3900 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3901 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3902 ;;Total ram usage:        5 bytes
  3903 ;; Hardware stack levels used: 1
  3904 ;; Hardware stack levels required when called: 5
  3905 ;; This function calls:
  3906 ;;		_headbuttReverse
  3907 ;;		_squareReverse
  3908 ;;		_turnLeft90
  3909 ;;		_turnRight90
  3910 ;; This function is called by:
  3911 ;;		_pick_card
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text18
  3916   002E26                     __ptext18:
  3917                           	callstack 0
  3918   002E26                     _card_yellow:
  3919                           	callstack 23
  3920   002E26                     
  3921                           ;manoeuvres.c: 58: void card_yellow(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 59: {;manoeuvres.c: 60:     switch (backtrack) {
  3922   002E26  EF3D  F017         	goto	l3155
  3923   002E2A                     l3149:
  3924                           
  3925                           ;manoeuvres.c: 62:             headbuttReverse(mL, mR);
  3926   002E2A  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  3927   002E2E  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  3928   002E32  EC8C  F01B         	call	_headbuttReverse	;wreg free
  3929                           
  3930                           ;manoeuvres.c: 63:             squareReverse(mL, mR);
  3931   002E36  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  3932   002E3A  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  3933   002E3E  ECFD  F01A         	call	_squareReverse	;wreg free
  3934                           
  3935                           ;manoeuvres.c: 64:             turnRight90(mL, mR);
  3936   002E42  C01C  F018         	movff	card_yellow@mL,turnRight90@mL
  3937   002E46  C01D  F019         	movff	card_yellow@mR,turnRight90@mR
  3938   002E4A  EC54  F01B         	call	_turnRight90	;wreg free
  3939                           
  3940                           ;manoeuvres.c: 65:             break;
  3941   002E4E  EF52  F017         	goto	l562
  3942   002E52                     l3151:
  3943                           
  3944                           ;manoeuvres.c: 67:             turnLeft90(mL, mR);
  3945   002E52  C01C  F018         	movff	card_yellow@mL,turnLeft90@mL
  3946   002E56  C01D  F019         	movff	card_yellow@mR,turnLeft90@mR
  3947   002E5A  EC70  F01B         	call	_turnLeft90	;wreg free
  3948                           
  3949                           ;manoeuvres.c: 68:             squareReverse(mL, mR);
  3950   002E5E  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  3951   002E62  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  3952   002E66  ECFD  F01A         	call	_squareReverse	;wreg free
  3953                           
  3954                           ;manoeuvres.c: 69:             headbuttReverse(mL, mR);
  3955   002E6A  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  3956   002E6E  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  3957   002E72  EC8C  F01B         	call	_headbuttReverse	;wreg free
  3958                           
  3959                           ;manoeuvres.c: 70:             break;
  3960   002E76  EF52  F017         	goto	l562
  3961   002E7A                     l3155:
  3962   002E7A  501E               	movf	card_yellow@backtrack^0,w,c
  3963   002E7C  6E1F               	movwf	??_card_yellow^0,c
  3964   002E7E  6A20               	clrf	(??_card_yellow+1)^0,c
  3965                           
  3966                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3967                           ; Switch size 1, requested type "simple"
  3968                           ; Number of cases is 1, Range of values is 0 to 0
  3969                           ; switch strategies available:
  3970                           ; Name         Instructions Cycles
  3971                           ; simple_byte            4     3 (average)
  3972                           ;	Chosen strategy is simple_byte
  3973   002E80  5020               	movf	(??_card_yellow+1)^0,w,c
  3974   002E82  0A00               	xorlw	0	; case 0
  3975   002E84  B4D8               	btfsc	status,2,c
  3976   002E86  EF47  F017         	goto	l4151
  3977   002E8A  EF52  F017         	goto	l562
  3978   002E8E                     l4151:
  3979                           
  3980                           ; Switch size 1, requested type "simple"
  3981                           ; Number of cases is 2, Range of values is 0 to 1
  3982                           ; switch strategies available:
  3983                           ; Name         Instructions Cycles
  3984                           ; simple_byte            7     4 (average)
  3985                           ;	Chosen strategy is simple_byte
  3986   002E8E  501F               	movf	??_card_yellow^0,w,c
  3987   002E90  0A00               	xorlw	0	; case 0
  3988   002E92  B4D8               	btfsc	status,2,c
  3989   002E94  EF15  F017         	goto	l3149
  3990   002E98  0A01               	xorlw	1	; case 1
  3991   002E9A  B4D8               	btfsc	status,2,c
  3992   002E9C  EF29  F017         	goto	l3151
  3993   002EA0  EF52  F017         	goto	l562
  3994   002EA4                     l562:
  3995   002EA4  0012               	return		;funcret
  3996   002EA6                     __end_of_card_yellow:
  3997                           	callstack 0
  3998                           
  3999 ;; *************** function _card_white *****************
  4000 ;; Defined at:
  4001 ;;		line 131 in file "manoeuvres.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4004 ;;		 -> main@motorL(9), 
  4005 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4006 ;;		 -> main@motorR(9), 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;		None
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  1    wreg      void 
  4011 ;; Registers used:
  4012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4022 ;;Total ram usage:        2 bytes
  4023 ;; Hardware stack levels used: 1
  4024 ;; Hardware stack levels required when called: 5
  4025 ;; This function calls:
  4026 ;;		_UTurn
  4027 ;;		_headbuttReverse
  4028 ;; This function is called by:
  4029 ;;		_pick_card
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text19
  4034   003854                     __ptext19:
  4035                           	callstack 0
  4036   003854                     _card_white:
  4037                           	callstack 23
  4038   003854                     
  4039                           ;manoeuvres.c: 131: void card_white(DC_motor *mL, DC_motor *mR);manoeuvres.c: 132: {;man
      +                          oeuvres.c: 133:     headbuttReverse(mL, mR);
  4040   003854  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  4041   003858  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  4042   00385C  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4043                           
  4044                           ;manoeuvres.c: 134:     UTurn(mL, mR);
  4045   003860  C01C  F018         	movff	card_white@mL,UTurn@mL
  4046   003864  C01D  F019         	movff	card_white@mR,UTurn@mR
  4047   003868  EC9E  F01A         	call	_UTurn	;wreg free
  4048                           
  4049                           ;manoeuvres.c: 135:     headbuttReverse(mL, mR);
  4050   00386C  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  4051   003870  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  4052   003874  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4053   003878  0012               	return		;funcret
  4054   00387A                     __end_of_card_white:
  4055                           	callstack 0
  4056                           
  4057 ;; *************** function _card_red *****************
  4058 ;; Defined at:
  4059 ;;		line 7 in file "manoeuvres.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4062 ;;		 -> main@motorL(9), 
  4063 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4064 ;;		 -> main@motorR(9), 
  4065 ;;  backtrack       1   29[COMRAM] unsigned char 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  1    wreg      void 
  4070 ;; Registers used:
  4071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4077 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4079 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4080 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4081 ;;Total ram usage:        5 bytes
  4082 ;; Hardware stack levels used: 1
  4083 ;; Hardware stack levels required when called: 5
  4084 ;; This function calls:
  4085 ;;		_headbuttReverse
  4086 ;;		_turnLeft90
  4087 ;;		_turnRight90
  4088 ;; This function is called by:
  4089 ;;		_pick_card
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text20
  4094   0030FC                     __ptext20:
  4095                           	callstack 0
  4096   0030FC                     _card_red:
  4097                           	callstack 23
  4098   0030FC                     
  4099                           ;manoeuvres.c: 7: void card_red(DC_motor *mL, DC_motor *mR, unsigned char backtrack);man
      +                          oeuvres.c: 8: {;manoeuvres.c: 9:     switch (backtrack) {
  4100   0030FC  EF9C  F018         	goto	l3113
  4101   003100                     l3107:
  4102                           
  4103                           ;manoeuvres.c: 11:             headbuttReverse(mL, mR);
  4104   003100  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  4105   003104  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  4106   003108  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4107                           
  4108                           ;manoeuvres.c: 12:             turnRight90(mL, mR);
  4109   00310C  C01C  F018         	movff	card_red@mL,turnRight90@mL
  4110   003110  C01D  F019         	movff	card_red@mR,turnRight90@mR
  4111   003114  EC54  F01B         	call	_turnRight90	;wreg free
  4112                           
  4113                           ;manoeuvres.c: 13:             break;
  4114   003118  EFB1  F018         	goto	l541
  4115   00311C                     l3109:
  4116                           
  4117                           ;manoeuvres.c: 15:             turnLeft90(mL, mR);
  4118   00311C  C01C  F018         	movff	card_red@mL,turnLeft90@mL
  4119   003120  C01D  F019         	movff	card_red@mR,turnLeft90@mR
  4120   003124  EC70  F01B         	call	_turnLeft90	;wreg free
  4121                           
  4122                           ;manoeuvres.c: 16:             headbuttReverse(mL, mR);
  4123   003128  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  4124   00312C  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  4125   003130  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4126                           
  4127                           ;manoeuvres.c: 17:             break;
  4128   003134  EFB1  F018         	goto	l541
  4129   003138                     l3113:
  4130   003138  501E               	movf	card_red@backtrack^0,w,c
  4131   00313A  6E1F               	movwf	??_card_red^0,c
  4132   00313C  6A20               	clrf	(??_card_red+1)^0,c
  4133                           
  4134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4135                           ; Switch size 1, requested type "simple"
  4136                           ; Number of cases is 1, Range of values is 0 to 0
  4137                           ; switch strategies available:
  4138                           ; Name         Instructions Cycles
  4139                           ; simple_byte            4     3 (average)
  4140                           ;	Chosen strategy is simple_byte
  4141   00313E  5020               	movf	(??_card_red+1)^0,w,c
  4142   003140  0A00               	xorlw	0	; case 0
  4143   003142  B4D8               	btfsc	status,2,c
  4144   003144  EFA6  F018         	goto	l4153
  4145   003148  EFB1  F018         	goto	l541
  4146   00314C                     l4153:
  4147                           
  4148                           ; Switch size 1, requested type "simple"
  4149                           ; Number of cases is 2, Range of values is 0 to 1
  4150                           ; switch strategies available:
  4151                           ; Name         Instructions Cycles
  4152                           ; simple_byte            7     4 (average)
  4153                           ;	Chosen strategy is simple_byte
  4154   00314C  501F               	movf	??_card_red^0,w,c
  4155   00314E  0A00               	xorlw	0	; case 0
  4156   003150  B4D8               	btfsc	status,2,c
  4157   003152  EF80  F018         	goto	l3107
  4158   003156  0A01               	xorlw	1	; case 1
  4159   003158  B4D8               	btfsc	status,2,c
  4160   00315A  EF8E  F018         	goto	l3109
  4161   00315E  EFB1  F018         	goto	l541
  4162   003162                     l541:
  4163   003162  0012               	return		;funcret
  4164   003164                     __end_of_card_red:
  4165                           	callstack 0
  4166                           
  4167 ;; *************** function _card_pink *****************
  4168 ;; Defined at:
  4169 ;;		line 77 in file "manoeuvres.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4172 ;;		 -> main@motorL(9), 
  4173 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4174 ;;		 -> main@motorR(9), 
  4175 ;;  backtrack       1   29[COMRAM] unsigned char 
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;		None
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  1    wreg      void 
  4180 ;; Registers used:
  4181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4187 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4189 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4190 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4191 ;;Total ram usage:        5 bytes
  4192 ;; Hardware stack levels used: 1
  4193 ;; Hardware stack levels required when called: 5
  4194 ;; This function calls:
  4195 ;;		_headbuttReverse
  4196 ;;		_squareReverse
  4197 ;;		_turnLeft90
  4198 ;;		_turnRight90
  4199 ;; This function is called by:
  4200 ;;		_pick_card
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text21
  4205   002EA6                     __ptext21:
  4206                           	callstack 0
  4207   002EA6                     _card_pink:
  4208                           	callstack 23
  4209   002EA6                     
  4210                           ;manoeuvres.c: 77: void card_pink(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 78: {;manoeuvres.c: 79:     switch (backtrack) {
  4211   002EA6  EF7D  F017         	goto	l3169
  4212   002EAA                     l3163:
  4213                           
  4214                           ;manoeuvres.c: 81:             headbuttReverse(mL, mR);
  4215   002EAA  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  4216   002EAE  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  4217   002EB2  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4218                           
  4219                           ;manoeuvres.c: 82:             squareReverse(mL, mR);
  4220   002EB6  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  4221   002EBA  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  4222   002EBE  ECFD  F01A         	call	_squareReverse	;wreg free
  4223                           
  4224                           ;manoeuvres.c: 83:             turnLeft90(mL, mR);
  4225   002EC2  C01C  F018         	movff	card_pink@mL,turnLeft90@mL
  4226   002EC6  C01D  F019         	movff	card_pink@mR,turnLeft90@mR
  4227   002ECA  EC70  F01B         	call	_turnLeft90	;wreg free
  4228                           
  4229                           ;manoeuvres.c: 84:             break;
  4230   002ECE  EF92  F017         	goto	l569
  4231   002ED2                     l3165:
  4232                           
  4233                           ;manoeuvres.c: 86:             turnRight90(mL, mR);
  4234   002ED2  C01C  F018         	movff	card_pink@mL,turnRight90@mL
  4235   002ED6  C01D  F019         	movff	card_pink@mR,turnRight90@mR
  4236   002EDA  EC54  F01B         	call	_turnRight90	;wreg free
  4237                           
  4238                           ;manoeuvres.c: 87:             squareReverse(mL, mR);
  4239   002EDE  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  4240   002EE2  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  4241   002EE6  ECFD  F01A         	call	_squareReverse	;wreg free
  4242                           
  4243                           ;manoeuvres.c: 88:             headbuttReverse(mL, mR);
  4244   002EEA  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  4245   002EEE  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  4246   002EF2  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4247                           
  4248                           ;manoeuvres.c: 89:             break;
  4249   002EF6  EF92  F017         	goto	l569
  4250   002EFA                     l3169:
  4251   002EFA  501E               	movf	card_pink@backtrack^0,w,c
  4252   002EFC  6E1F               	movwf	??_card_pink^0,c
  4253   002EFE  6A20               	clrf	(??_card_pink+1)^0,c
  4254                           
  4255                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4256                           ; Switch size 1, requested type "simple"
  4257                           ; Number of cases is 1, Range of values is 0 to 0
  4258                           ; switch strategies available:
  4259                           ; Name         Instructions Cycles
  4260                           ; simple_byte            4     3 (average)
  4261                           ;	Chosen strategy is simple_byte
  4262   002F00  5020               	movf	(??_card_pink+1)^0,w,c
  4263   002F02  0A00               	xorlw	0	; case 0
  4264   002F04  B4D8               	btfsc	status,2,c
  4265   002F06  EF87  F017         	goto	l4155
  4266   002F0A  EF92  F017         	goto	l569
  4267   002F0E                     l4155:
  4268                           
  4269                           ; Switch size 1, requested type "simple"
  4270                           ; Number of cases is 2, Range of values is 0 to 1
  4271                           ; switch strategies available:
  4272                           ; Name         Instructions Cycles
  4273                           ; simple_byte            7     4 (average)
  4274                           ;	Chosen strategy is simple_byte
  4275   002F0E  501F               	movf	??_card_pink^0,w,c
  4276   002F10  0A00               	xorlw	0	; case 0
  4277   002F12  B4D8               	btfsc	status,2,c
  4278   002F14  EF55  F017         	goto	l3163
  4279   002F18  0A01               	xorlw	1	; case 1
  4280   002F1A  B4D8               	btfsc	status,2,c
  4281   002F1C  EF69  F017         	goto	l3165
  4282   002F20  EF92  F017         	goto	l569
  4283   002F24                     l569:
  4284   002F24  0012               	return		;funcret
  4285   002F26                     __end_of_card_pink:
  4286                           	callstack 0
  4287                           
  4288 ;; *************** function _squareReverse *****************
  4289 ;; Defined at:
  4290 ;;		line 315 in file "dc_motor.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4293 ;;		 -> main@motorL(9), 
  4294 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4295 ;;		 -> main@motorR(9), 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;		None
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4307 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4309 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4310 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4311 ;;Total ram usage:        4 bytes
  4312 ;; Hardware stack levels used: 1
  4313 ;; Hardware stack levels required when called: 4
  4314 ;; This function calls:
  4315 ;;		_fullSpeedReverse
  4316 ;;		_stop
  4317 ;;		_toggle_brake_lights
  4318 ;; This function is called by:
  4319 ;;		_card_yellow
  4320 ;;		_card_pink
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text22
  4325   0035FA                     __ptext22:
  4326                           	callstack 0
  4327   0035FA                     _squareReverse:
  4328                           	callstack 23
  4329   0035FA                     
  4330                           ;dc_motor.c: 315: void squareReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 316: {;dc_m
      +                          otor.c: 317:     toggle_brake_lights();
  4331   0035FA  EC50  F01C         	call	_toggle_brake_lights	;wreg free
  4332   0035FE                     
  4333                           ;dc_motor.c: 318:     fullSpeedReverse(mL, mR);
  4334   0035FE  C018  F013         	movff	squareReverse@mL,fullSpeedReverse@mL
  4335   003602  C019  F014         	movff	squareReverse@mR,fullSpeedReverse@mR
  4336   003606  EC86  F015         	call	_fullSpeedReverse	;wreg free
  4337   00360A                     
  4338                           ;dc_motor.c: 319:     _delay((unsigned long)((squareDelay)*(64000000/4000.0)));
  4339   00360A  0EC7               	movlw	199
  4340   00360C  6E1B               	movwf	(??_squareReverse+1)^0,c
  4341   00360E  0E0D               	movlw	13
  4342   003610  6E1A               	movwf	??_squareReverse^0,c
  4343   003612  0EC6               	movlw	198
  4344   003614                     u3317:
  4345   003614  2EE8               	decfsz	wreg,f,c
  4346   003616  D7FE               	bra	u3317
  4347   003618  2E1A               	decfsz	??_squareReverse^0,f,c
  4348   00361A  D7FC               	bra	u3317
  4349   00361C  2E1B               	decfsz	(??_squareReverse+1)^0,f,c
  4350   00361E  D7FA               	bra	u3317
  4351   003620  D000               	nop2	
  4352   003622                     
  4353                           ;dc_motor.c: 320:     stop(mL, mR);
  4354   003622  C018  F013         	movff	squareReverse@mL,stop@mL
  4355   003626  C019  F014         	movff	squareReverse@mR,stop@mR
  4356   00362A  ECCC  F016         	call	_stop	;wreg free
  4357   00362E                     
  4358                           ;dc_motor.c: 321:     toggle_brake_lights();
  4359   00362E  EC50  F01C         	call	_toggle_brake_lights	;wreg free
  4360   003632  0012               	return		;funcret
  4361   003634                     __end_of_squareReverse:
  4362                           	callstack 0
  4363                           
  4364 ;; *************** function _card_orange *****************
  4365 ;; Defined at:
  4366 ;;		line 96 in file "manoeuvres.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4369 ;;		 -> main@motorL(9), 
  4370 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4371 ;;		 -> main@motorR(9), 
  4372 ;;  backtrack       1   29[COMRAM] unsigned char 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4384 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4386 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4387 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4388 ;;Total ram usage:        5 bytes
  4389 ;; Hardware stack levels used: 1
  4390 ;; Hardware stack levels required when called: 5
  4391 ;; This function calls:
  4392 ;;		_headbuttReverse
  4393 ;;		_turnLeft135
  4394 ;;		_turnRight135
  4395 ;; This function is called by:
  4396 ;;		_pick_card
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           	psect	text23
  4401   003164                     __ptext23:
  4402                           	callstack 0
  4403   003164                     _card_orange:
  4404                           	callstack 23
  4405   003164                     
  4406                           ;manoeuvres.c: 96: void card_orange(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 97: {;manoeuvres.c: 98:     switch (backtrack) {
  4407   003164  EFD0  F018         	goto	l3183
  4408   003168                     l3177:
  4409                           
  4410                           ;manoeuvres.c: 100:             headbuttReverse(mL, mR);
  4411   003168  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  4412   00316C  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  4413   003170  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4414                           
  4415                           ;manoeuvres.c: 101:             turnRight135(mL, mR);
  4416   003174  C01C  F018         	movff	card_orange@mL,turnRight135@mL
  4417   003178  C01D  F019         	movff	card_orange@mR,turnRight135@mR
  4418   00317C  EC1A  F01B         	call	_turnRight135	;wreg free
  4419                           
  4420                           ;manoeuvres.c: 102:             break;
  4421   003180  EFE5  F018         	goto	l576
  4422   003184                     l3179:
  4423                           
  4424                           ;manoeuvres.c: 104:             turnLeft135(mL, mR);
  4425   003184  C01C  F018         	movff	card_orange@mL,turnLeft135@mL
  4426   003188  C01D  F019         	movff	card_orange@mR,turnLeft135@mR
  4427   00318C  EC37  F01B         	call	_turnLeft135	;wreg free
  4428                           
  4429                           ;manoeuvres.c: 105:             headbuttReverse(mL, mR);
  4430   003190  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  4431   003194  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  4432   003198  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4433                           
  4434                           ;manoeuvres.c: 106:             break;
  4435   00319C  EFE5  F018         	goto	l576
  4436   0031A0                     l3183:
  4437   0031A0  501E               	movf	card_orange@backtrack^0,w,c
  4438   0031A2  6E1F               	movwf	??_card_orange^0,c
  4439   0031A4  6A20               	clrf	(??_card_orange+1)^0,c
  4440                           
  4441                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4442                           ; Switch size 1, requested type "simple"
  4443                           ; Number of cases is 1, Range of values is 0 to 0
  4444                           ; switch strategies available:
  4445                           ; Name         Instructions Cycles
  4446                           ; simple_byte            4     3 (average)
  4447                           ;	Chosen strategy is simple_byte
  4448   0031A6  5020               	movf	(??_card_orange+1)^0,w,c
  4449   0031A8  0A00               	xorlw	0	; case 0
  4450   0031AA  B4D8               	btfsc	status,2,c
  4451   0031AC  EFDA  F018         	goto	l4157
  4452   0031B0  EFE5  F018         	goto	l576
  4453   0031B4                     l4157:
  4454                           
  4455                           ; Switch size 1, requested type "simple"
  4456                           ; Number of cases is 2, Range of values is 0 to 1
  4457                           ; switch strategies available:
  4458                           ; Name         Instructions Cycles
  4459                           ; simple_byte            7     4 (average)
  4460                           ;	Chosen strategy is simple_byte
  4461   0031B4  501F               	movf	??_card_orange^0,w,c
  4462   0031B6  0A00               	xorlw	0	; case 0
  4463   0031B8  B4D8               	btfsc	status,2,c
  4464   0031BA  EFB4  F018         	goto	l3177
  4465   0031BE  0A01               	xorlw	1	; case 1
  4466   0031C0  B4D8               	btfsc	status,2,c
  4467   0031C2  EFC2  F018         	goto	l3179
  4468   0031C6  EFE5  F018         	goto	l576
  4469   0031CA                     l576:
  4470   0031CA  0012               	return		;funcret
  4471   0031CC                     __end_of_card_orange:
  4472                           	callstack 0
  4473                           
  4474 ;; *************** function _card_green *****************
  4475 ;; Defined at:
  4476 ;;		line 24 in file "manoeuvres.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4479 ;;		 -> main@motorL(9), 
  4480 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4481 ;;		 -> main@motorR(9), 
  4482 ;;  backtrack       1   29[COMRAM] unsigned char 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;		None
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  1    wreg      void 
  4487 ;; Registers used:
  4488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4494 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4496 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4497 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4498 ;;Total ram usage:        5 bytes
  4499 ;; Hardware stack levels used: 1
  4500 ;; Hardware stack levels required when called: 5
  4501 ;; This function calls:
  4502 ;;		_headbuttReverse
  4503 ;;		_turnLeft90
  4504 ;;		_turnRight90
  4505 ;; This function is called by:
  4506 ;;		_pick_card
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text24
  4511   0031CC                     __ptext24:
  4512                           	callstack 0
  4513   0031CC                     _card_green:
  4514                           	callstack 23
  4515   0031CC                     
  4516                           ;manoeuvres.c: 24: void card_green(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 25: {;manoeuvres.c: 26:     switch (backtrack) {
  4517   0031CC  EF04  F019         	goto	l3127
  4518   0031D0                     l3121:
  4519                           
  4520                           ;manoeuvres.c: 28:             headbuttReverse(mL, mR);
  4521   0031D0  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  4522   0031D4  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  4523   0031D8  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4524                           
  4525                           ;manoeuvres.c: 29:             turnLeft90(mL, mR);
  4526   0031DC  C01C  F018         	movff	card_green@mL,turnLeft90@mL
  4527   0031E0  C01D  F019         	movff	card_green@mR,turnLeft90@mR
  4528   0031E4  EC70  F01B         	call	_turnLeft90	;wreg free
  4529                           
  4530                           ;manoeuvres.c: 30:             break;
  4531   0031E8  EF19  F019         	goto	l548
  4532   0031EC                     l3123:
  4533                           
  4534                           ;manoeuvres.c: 32:             turnRight90(mL, mR);
  4535   0031EC  C01C  F018         	movff	card_green@mL,turnRight90@mL
  4536   0031F0  C01D  F019         	movff	card_green@mR,turnRight90@mR
  4537   0031F4  EC54  F01B         	call	_turnRight90	;wreg free
  4538                           
  4539                           ;manoeuvres.c: 33:             headbuttReverse(mL, mR);
  4540   0031F8  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  4541   0031FC  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  4542   003200  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4543                           
  4544                           ;manoeuvres.c: 34:             break;
  4545   003204  EF19  F019         	goto	l548
  4546   003208                     l3127:
  4547   003208  501E               	movf	card_green@backtrack^0,w,c
  4548   00320A  6E1F               	movwf	??_card_green^0,c
  4549   00320C  6A20               	clrf	(??_card_green+1)^0,c
  4550                           
  4551                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4552                           ; Switch size 1, requested type "simple"
  4553                           ; Number of cases is 1, Range of values is 0 to 0
  4554                           ; switch strategies available:
  4555                           ; Name         Instructions Cycles
  4556                           ; simple_byte            4     3 (average)
  4557                           ;	Chosen strategy is simple_byte
  4558   00320E  5020               	movf	(??_card_green+1)^0,w,c
  4559   003210  0A00               	xorlw	0	; case 0
  4560   003212  B4D8               	btfsc	status,2,c
  4561   003214  EF0E  F019         	goto	l4159
  4562   003218  EF19  F019         	goto	l548
  4563   00321C                     l4159:
  4564                           
  4565                           ; Switch size 1, requested type "simple"
  4566                           ; Number of cases is 2, Range of values is 0 to 1
  4567                           ; switch strategies available:
  4568                           ; Name         Instructions Cycles
  4569                           ; simple_byte            7     4 (average)
  4570                           ;	Chosen strategy is simple_byte
  4571   00321C  501F               	movf	??_card_green^0,w,c
  4572   00321E  0A00               	xorlw	0	; case 0
  4573   003220  B4D8               	btfsc	status,2,c
  4574   003222  EFE8  F018         	goto	l3121
  4575   003226  0A01               	xorlw	1	; case 1
  4576   003228  B4D8               	btfsc	status,2,c
  4577   00322A  EFF6  F018         	goto	l3123
  4578   00322E  EF19  F019         	goto	l548
  4579   003232                     l548:
  4580   003232  0012               	return		;funcret
  4581   003234                     __end_of_card_green:
  4582                           	callstack 0
  4583                           
  4584 ;; *************** function _turnRight90 *****************
  4585 ;; Defined at:
  4586 ;;		line 253 in file "dc_motor.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4589 ;;		 -> main@motorL(9), 
  4590 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4591 ;;		 -> main@motorR(9), 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;		None
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  1    wreg      void 
  4596 ;; Registers used:
  4597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4603 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4605 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4606 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4607 ;;Total ram usage:        4 bytes
  4608 ;; Hardware stack levels used: 1
  4609 ;; Hardware stack levels required when called: 4
  4610 ;; This function calls:
  4611 ;;		_stop
  4612 ;;		_toggle_right_indicators
  4613 ;;		_turnRight
  4614 ;; This function is called by:
  4615 ;;		_card_red
  4616 ;;		_card_green
  4617 ;;		_card_yellow
  4618 ;;		_card_pink
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text25
  4623   0036A8                     __ptext25:
  4624                           	callstack 0
  4625   0036A8                     _turnRight90:
  4626                           	callstack 23
  4627   0036A8                     
  4628                           ;dc_motor.c: 253: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 254: {;dc_mot
      +                          or.c: 255:     toggle_right_indicators();
  4629   0036A8  EC72  F01C         	call	_toggle_right_indicators	;wreg free
  4630   0036AC                     
  4631                           ;dc_motor.c: 256:     turnRight(mL, mR);
  4632   0036AC  C018  F013         	movff	turnRight90@mL,turnRight@mL
  4633   0036B0  C019  F014         	movff	turnRight90@mR,turnRight@mR
  4634   0036B4  ECCE  F014         	call	_turnRight	;wreg free
  4635   0036B8                     
  4636                           ;dc_motor.c: 257:     _delay((unsigned long)((turnRight90Delay)*(64000000/4000.0)));
  4637   0036B8  0E09               	movlw	9
  4638   0036BA  6E1B               	movwf	(??_turnRight90+1)^0,c
  4639   0036BC  0EC5               	movlw	197
  4640   0036BE  6E1A               	movwf	??_turnRight90^0,c
  4641   0036C0  0E20               	movlw	32
  4642   0036C2                     u3327:
  4643   0036C2  2EE8               	decfsz	wreg,f,c
  4644   0036C4  D7FE               	bra	u3327
  4645   0036C6  2E1A               	decfsz	??_turnRight90^0,f,c
  4646   0036C8  D7FC               	bra	u3327
  4647   0036CA  2E1B               	decfsz	(??_turnRight90+1)^0,f,c
  4648   0036CC  D7FA               	bra	u3327
  4649   0036CE                     
  4650                           ;dc_motor.c: 258:     stop(mL, mR);
  4651   0036CE  C018  F013         	movff	turnRight90@mL,stop@mL
  4652   0036D2  C019  F014         	movff	turnRight90@mR,stop@mR
  4653   0036D6  ECCC  F016         	call	_stop	;wreg free
  4654   0036DA                     
  4655                           ;dc_motor.c: 259:     toggle_right_indicators();
  4656   0036DA  EC72  F01C         	call	_toggle_right_indicators	;wreg free
  4657   0036DE  0012               	return		;funcret
  4658   0036E0                     __end_of_turnRight90:
  4659                           	callstack 0
  4660                           
  4661 ;; *************** function _turnLeft90 *****************
  4662 ;; Defined at:
  4663 ;;		line 241 in file "dc_motor.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4666 ;;		 -> main@motorL(9), 
  4667 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4668 ;;		 -> main@motorR(9), 
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  1    wreg      void 
  4673 ;; Registers used:
  4674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4680 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4682 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4683 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4684 ;;Total ram usage:        4 bytes
  4685 ;; Hardware stack levels used: 1
  4686 ;; Hardware stack levels required when called: 4
  4687 ;; This function calls:
  4688 ;;		_stop
  4689 ;;		_toggle_left_indicators
  4690 ;;		_turnLeft
  4691 ;; This function is called by:
  4692 ;;		_card_red
  4693 ;;		_card_green
  4694 ;;		_card_yellow
  4695 ;;		_card_pink
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text26
  4700   0036E0                     __ptext26:
  4701                           	callstack 0
  4702   0036E0                     _turnLeft90:
  4703                           	callstack 23
  4704   0036E0                     
  4705                           ;dc_motor.c: 241: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 242: {;dc_moto
      +                          r.c: 243:     toggle_left_indicators();
  4706   0036E0  EC82  F01C         	call	_toggle_left_indicators	;wreg free
  4707   0036E4                     
  4708                           ;dc_motor.c: 244:     turnLeft(mL, mR);
  4709   0036E4  C018  F013         	movff	turnLeft90@mL,turnLeft@mL
  4710   0036E8  C019  F014         	movff	turnLeft90@mR,turnLeft@mR
  4711   0036EC  EC2A  F015         	call	_turnLeft	;wreg free
  4712   0036F0                     
  4713                           ;dc_motor.c: 245:     _delay((unsigned long)((turnLeft90Delay)*(64000000/4000.0)));
  4714   0036F0  0E07               	movlw	7
  4715   0036F2  6E1B               	movwf	(??_turnLeft90+1)^0,c
  4716   0036F4  0ED2               	movlw	210
  4717   0036F6  6E1A               	movwf	??_turnLeft90^0,c
  4718   0036F8  0E6E               	movlw	110
  4719   0036FA                     u3337:
  4720   0036FA  2EE8               	decfsz	wreg,f,c
  4721   0036FC  D7FE               	bra	u3337
  4722   0036FE  2E1A               	decfsz	??_turnLeft90^0,f,c
  4723   003700  D7FC               	bra	u3337
  4724   003702  2E1B               	decfsz	(??_turnLeft90+1)^0,f,c
  4725   003704  D7FA               	bra	u3337
  4726   003706                     
  4727                           ;dc_motor.c: 246:     stop(mL, mR);
  4728   003706  C018  F013         	movff	turnLeft90@mL,stop@mL
  4729   00370A  C019  F014         	movff	turnLeft90@mR,stop@mR
  4730   00370E  ECCC  F016         	call	_stop	;wreg free
  4731   003712                     
  4732                           ;dc_motor.c: 247:     toggle_left_indicators();
  4733   003712  EC82  F01C         	call	_toggle_left_indicators	;wreg free
  4734   003716  0012               	return		;funcret
  4735   003718                     __end_of_turnLeft90:
  4736                           	callstack 0
  4737                           
  4738 ;; *************** function _card_cyan *****************
  4739 ;; Defined at:
  4740 ;;		line 113 in file "manoeuvres.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4743 ;;		 -> main@motorL(9), 
  4744 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4745 ;;		 -> main@motorR(9), 
  4746 ;;  backtrack       1   29[COMRAM] unsigned char 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;		None
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      void 
  4751 ;; Registers used:
  4752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4758 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4760 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4761 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4762 ;;Total ram usage:        5 bytes
  4763 ;; Hardware stack levels used: 1
  4764 ;; Hardware stack levels required when called: 5
  4765 ;; This function calls:
  4766 ;;		_headbuttReverse
  4767 ;;		_turnLeft135
  4768 ;;		_turnRight135
  4769 ;; This function is called by:
  4770 ;;		_pick_card
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           	psect	text27
  4775   003234                     __ptext27:
  4776                           	callstack 0
  4777   003234                     _card_cyan:
  4778                           	callstack 23
  4779   003234                     
  4780                           ;manoeuvres.c: 113: void card_cyan(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 114: {;manoeuvres.c: 115:     switch (backtrack) {
  4781   003234  EF38  F019         	goto	l3197
  4782   003238                     l3191:
  4783                           
  4784                           ;manoeuvres.c: 117:             headbuttReverse(mL, mR);
  4785   003238  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  4786   00323C  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  4787   003240  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4788                           
  4789                           ;manoeuvres.c: 118:             turnLeft135(mL, mR);
  4790   003244  C01C  F018         	movff	card_cyan@mL,turnLeft135@mL
  4791   003248  C01D  F019         	movff	card_cyan@mR,turnLeft135@mR
  4792   00324C  EC37  F01B         	call	_turnLeft135	;wreg free
  4793                           
  4794                           ;manoeuvres.c: 119:             break;
  4795   003250  EF4D  F019         	goto	l583
  4796   003254                     l3193:
  4797                           
  4798                           ;manoeuvres.c: 121:             turnRight135(mL, mR);
  4799   003254  C01C  F018         	movff	card_cyan@mL,turnRight135@mL
  4800   003258  C01D  F019         	movff	card_cyan@mR,turnRight135@mR
  4801   00325C  EC1A  F01B         	call	_turnRight135	;wreg free
  4802                           
  4803                           ;manoeuvres.c: 122:             headbuttReverse(mL, mR);
  4804   003260  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  4805   003264  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  4806   003268  EC8C  F01B         	call	_headbuttReverse	;wreg free
  4807                           
  4808                           ;manoeuvres.c: 123:             break;
  4809   00326C  EF4D  F019         	goto	l583
  4810   003270                     l3197:
  4811   003270  501E               	movf	card_cyan@backtrack^0,w,c
  4812   003272  6E1F               	movwf	??_card_cyan^0,c
  4813   003274  6A20               	clrf	(??_card_cyan+1)^0,c
  4814                           
  4815                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4816                           ; Switch size 1, requested type "simple"
  4817                           ; Number of cases is 1, Range of values is 0 to 0
  4818                           ; switch strategies available:
  4819                           ; Name         Instructions Cycles
  4820                           ; simple_byte            4     3 (average)
  4821                           ;	Chosen strategy is simple_byte
  4822   003276  5020               	movf	(??_card_cyan+1)^0,w,c
  4823   003278  0A00               	xorlw	0	; case 0
  4824   00327A  B4D8               	btfsc	status,2,c
  4825   00327C  EF42  F019         	goto	l4161
  4826   003280  EF4D  F019         	goto	l583
  4827   003284                     l4161:
  4828                           
  4829                           ; Switch size 1, requested type "simple"
  4830                           ; Number of cases is 2, Range of values is 0 to 1
  4831                           ; switch strategies available:
  4832                           ; Name         Instructions Cycles
  4833                           ; simple_byte            7     4 (average)
  4834                           ;	Chosen strategy is simple_byte
  4835   003284  501F               	movf	??_card_cyan^0,w,c
  4836   003286  0A00               	xorlw	0	; case 0
  4837   003288  B4D8               	btfsc	status,2,c
  4838   00328A  EF1C  F019         	goto	l3191
  4839   00328E  0A01               	xorlw	1	; case 1
  4840   003290  B4D8               	btfsc	status,2,c
  4841   003292  EF2A  F019         	goto	l3193
  4842   003296  EF4D  F019         	goto	l583
  4843   00329A                     l583:
  4844   00329A  0012               	return		;funcret
  4845   00329C                     __end_of_card_cyan:
  4846                           	callstack 0
  4847                           
  4848 ;; *************** function _turnRight135 *****************
  4849 ;; Defined at:
  4850 ;;		line 277 in file "dc_motor.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4853 ;;		 -> main@motorL(9), 
  4854 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4855 ;;		 -> main@motorR(9), 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4867 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4869 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4870 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4871 ;;Total ram usage:        4 bytes
  4872 ;; Hardware stack levels used: 1
  4873 ;; Hardware stack levels required when called: 4
  4874 ;; This function calls:
  4875 ;;		_stop
  4876 ;;		_toggle_right_indicators
  4877 ;;		_turnRight
  4878 ;; This function is called by:
  4879 ;;		_card_orange
  4880 ;;		_card_cyan
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text28
  4885   003634                     __ptext28:
  4886                           	callstack 0
  4887   003634                     _turnRight135:
  4888                           	callstack 23
  4889   003634                     
  4890                           ;dc_motor.c: 277: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 278: {;dc_mo
      +                          tor.c: 279:     toggle_right_indicators();
  4891   003634  EC72  F01C         	call	_toggle_right_indicators	;wreg free
  4892   003638                     
  4893                           ;dc_motor.c: 280:     turnRight(mL, mR);
  4894   003638  C018  F013         	movff	turnRight135@mL,turnRight@mL
  4895   00363C  C019  F014         	movff	turnRight135@mR,turnRight@mR
  4896   003640  ECCE  F014         	call	_turnRight	;wreg free
  4897   003644                     
  4898                           ;dc_motor.c: 281:     _delay((unsigned long)((turnRight135Delay)*(64000000/4000.0)));
  4899   003644  0E16               	movlw	22
  4900   003646  6E1B               	movwf	(??_turnRight135+1)^0,c
  4901   003648  0E45               	movlw	69
  4902   00364A  6E1A               	movwf	??_turnRight135^0,c
  4903   00364C  0E17               	movlw	23
  4904   00364E                     u3347:
  4905   00364E  2EE8               	decfsz	wreg,f,c
  4906   003650  D7FE               	bra	u3347
  4907   003652  2E1A               	decfsz	??_turnRight135^0,f,c
  4908   003654  D7FC               	bra	u3347
  4909   003656  2E1B               	decfsz	(??_turnRight135+1)^0,f,c
  4910   003658  D7FA               	bra	u3347
  4911   00365A  0000               	nop	
  4912   00365C                     
  4913                           ;dc_motor.c: 282:     stop(mL, mR);
  4914   00365C  C018  F013         	movff	turnRight135@mL,stop@mL
  4915   003660  C019  F014         	movff	turnRight135@mR,stop@mR
  4916   003664  ECCC  F016         	call	_stop	;wreg free
  4917   003668                     
  4918                           ;dc_motor.c: 283:     toggle_right_indicators();
  4919   003668  EC72  F01C         	call	_toggle_right_indicators	;wreg free
  4920   00366C  0012               	return		;funcret
  4921   00366E                     __end_of_turnRight135:
  4922                           	callstack 0
  4923                           
  4924 ;; *************** function _turnRight *****************
  4925 ;; Defined at:
  4926 ;;		line 148 in file "dc_motor.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  4929 ;;		 -> main@motorL(9), 
  4930 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  4931 ;;		 -> main@motorR(9), 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;  rightGear       1   22[COMRAM] unsigned char 
  4934 ;;  leftGear        1   21[COMRAM] unsigned char 
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  1    wreg      void 
  4937 ;; Registers used:
  4938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4944 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4947 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4948 ;;Total ram usage:        5 bytes
  4949 ;; Hardware stack levels used: 1
  4950 ;; Hardware stack levels required when called: 3
  4951 ;; This function calls:
  4952 ;;		_setMotorPWM
  4953 ;; This function is called by:
  4954 ;;		_turnRight90
  4955 ;;		_turnRight135
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text29
  4960   00299C                     __ptext29:
  4961                           	callstack 0
  4962   00299C                     _turnRight:
  4963                           	callstack 23
  4964   00299C  0E28               	movlw	40
  4965   00299E  6E16               	movwf	turnRight@leftGear^0,c
  4966   0029A0  0E28               	movlw	40
  4967   0029A2  6E17               	movwf	turnRight@rightGear^0,c
  4968   0029A4                     
  4969                           ;dc_motor.c: 155:     (mL->direction) = 1;
  4970   0029A4  5013               	movf	turnRight@mL^0,w,c
  4971   0029A6  6ED9               	movwf	fsr2l,c
  4972   0029A8  6ADA               	clrf	fsr2h,c
  4973   0029AA  0E01               	movlw	1
  4974   0029AC  26D9               	addwf	fsr2l,f,c
  4975   0029AE  0E01               	movlw	1
  4976   0029B0  6EDF               	movwf	indf2,c
  4977   0029B2                     
  4978                           ;dc_motor.c: 156:     (mR->direction) = 0;
  4979   0029B2  5014               	movf	turnRight@mR^0,w,c
  4980   0029B4  6ED9               	movwf	fsr2l,c
  4981   0029B6  6ADA               	clrf	fsr2h,c
  4982   0029B8  0E01               	movlw	1
  4983   0029BA  26D9               	addwf	fsr2l,f,c
  4984   0029BC  6ADF               	clrf	indf2,c
  4985                           
  4986                           ;dc_motor.c: 159:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  4987   0029BE  EF11  F015         	goto	l2957
  4988   0029C2                     l2945:
  4989                           
  4990                           ;dc_motor.c: 162:         if (mL->power < leftGear) {mL->power++;}
  4991   0029C2  5013               	movf	turnRight@mL^0,w,c
  4992   0029C4  6ED9               	movwf	fsr2l,c
  4993   0029C6  6ADA               	clrf	fsr2h,c
  4994   0029C8  5016               	movf	turnRight@leftGear^0,w,c
  4995   0029CA  5CDE               	subwf	postinc2,w,c
  4996   0029CC  B0D8               	btfsc	status,0,c
  4997   0029CE  EFEB  F014         	goto	u1921
  4998   0029D2  EFED  F014         	goto	u1920
  4999   0029D6                     u1921:
  5000   0029D6  EFF1  F014         	goto	l253
  5001   0029DA                     u1920:
  5002   0029DA  5013               	movf	turnRight@mL^0,w,c
  5003   0029DC  6ED9               	movwf	fsr2l,c
  5004   0029DE  6ADA               	clrf	fsr2h,c
  5005   0029E0  2ADF               	incf	indf2,f,c
  5006   0029E2                     l253:
  5007                           
  5008                           ;dc_motor.c: 165:         if (mR->power < rightGear) {mR->power++;}
  5009   0029E2  5014               	movf	turnRight@mR^0,w,c
  5010   0029E4  6ED9               	movwf	fsr2l,c
  5011   0029E6  6ADA               	clrf	fsr2h,c
  5012   0029E8  5017               	movf	turnRight@rightGear^0,w,c
  5013   0029EA  5CDE               	subwf	postinc2,w,c
  5014   0029EC  B0D8               	btfsc	status,0,c
  5015   0029EE  EFFB  F014         	goto	u1931
  5016   0029F2  EFFD  F014         	goto	u1930
  5017   0029F6                     u1931:
  5018   0029F6  EF01  F015         	goto	l2951
  5019   0029FA                     u1930:
  5020   0029FA  5014               	movf	turnRight@mR^0,w,c
  5021   0029FC  6ED9               	movwf	fsr2l,c
  5022   0029FE  6ADA               	clrf	fsr2h,c
  5023   002A00  2ADF               	incf	indf2,f,c
  5024   002A02                     l2951:
  5025                           
  5026                           ;dc_motor.c: 168:         setMotorPWM(mL);
  5027   002A02  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  5028   002A06  EC57  F011         	call	_setMotorPWM	;wreg free
  5029   002A0A                     
  5030                           ;dc_motor.c: 169:         setMotorPWM(mR);
  5031   002A0A  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  5032   002A0E  EC57  F011         	call	_setMotorPWM	;wreg free
  5033   002A12                     
  5034                           ;dc_motor.c: 172:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5035   002A12  0EA7               	movlw	167
  5036   002A14  6E15               	movwf	??_turnRight^0,c
  5037   002A16  0E3A               	movlw	58
  5038   002A18                     u3357:
  5039   002A18  2EE8               	decfsz	wreg,f,c
  5040   002A1A  D7FE               	bra	u3357
  5041   002A1C  2E15               	decfsz	??_turnRight^0,f,c
  5042   002A1E  D7FC               	bra	u3357
  5043   002A20  D000               	nop2	
  5044   002A22                     l2957:
  5045                           
  5046                           ;dc_motor.c: 159:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5047   002A22  5013               	movf	turnRight@mL^0,w,c
  5048   002A24  6ED9               	movwf	fsr2l,c
  5049   002A26  6ADA               	clrf	fsr2h,c
  5050   002A28  5016               	movf	turnRight@leftGear^0,w,c
  5051   002A2A  5CDE               	subwf	postinc2,w,c
  5052   002A2C  A0D8               	btfss	status,0,c
  5053   002A2E  EF1B  F015         	goto	u1941
  5054   002A32  EF1D  F015         	goto	u1940
  5055   002A36                     u1941:
  5056   002A36  EFE1  F014         	goto	l2945
  5057   002A3A                     u1940:
  5058   002A3A  5014               	movf	turnRight@mR^0,w,c
  5059   002A3C  6ED9               	movwf	fsr2l,c
  5060   002A3E  6ADA               	clrf	fsr2h,c
  5061   002A40  5017               	movf	turnRight@rightGear^0,w,c
  5062   002A42  5CDE               	subwf	postinc2,w,c
  5063   002A44  A0D8               	btfss	status,0,c
  5064   002A46  EF27  F015         	goto	u1951
  5065   002A4A  EF29  F015         	goto	u1950
  5066   002A4E                     u1951:
  5067   002A4E  EFE1  F014         	goto	l2945
  5068   002A52                     u1950:
  5069   002A52  0012               	return		;funcret
  5070   002A54                     __end_of_turnRight:
  5071                           	callstack 0
  5072                           
  5073 ;; *************** function _turnLeft135 *****************
  5074 ;; Defined at:
  5075 ;;		line 265 in file "dc_motor.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5078 ;;		 -> main@motorL(9), 
  5079 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5080 ;;		 -> main@motorR(9), 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;		None
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  1    wreg      void 
  5085 ;; Registers used:
  5086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5092 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5094 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5095 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5096 ;;Total ram usage:        4 bytes
  5097 ;; Hardware stack levels used: 1
  5098 ;; Hardware stack levels required when called: 4
  5099 ;; This function calls:
  5100 ;;		_stop
  5101 ;;		_toggle_left_indicators
  5102 ;;		_turnLeft
  5103 ;; This function is called by:
  5104 ;;		_card_orange
  5105 ;;		_card_cyan
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           	psect	text30
  5110   00366E                     __ptext30:
  5111                           	callstack 0
  5112   00366E                     _turnLeft135:
  5113                           	callstack 23
  5114   00366E                     
  5115                           ;dc_motor.c: 265: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 266: {;dc_mot
      +                          or.c: 267:     toggle_left_indicators();
  5116   00366E  EC82  F01C         	call	_toggle_left_indicators	;wreg free
  5117   003672                     
  5118                           ;dc_motor.c: 268:     turnLeft(mL, mR);
  5119   003672  C018  F013         	movff	turnLeft135@mL,turnLeft@mL
  5120   003676  C019  F014         	movff	turnLeft135@mR,turnLeft@mR
  5121   00367A  EC2A  F015         	call	_turnLeft	;wreg free
  5122   00367E                     
  5123                           ;dc_motor.c: 269:     _delay((unsigned long)((turnLeft135Delay)*(64000000/4000.0)));
  5124   00367E  0E15               	movlw	21
  5125   003680  6E1B               	movwf	(??_turnLeft135+1)^0,c
  5126   003682  0E4B               	movlw	75
  5127   003684  6E1A               	movwf	??_turnLeft135^0,c
  5128   003686  0EBE               	movlw	190
  5129   003688                     u3367:
  5130   003688  2EE8               	decfsz	wreg,f,c
  5131   00368A  D7FE               	bra	u3367
  5132   00368C  2E1A               	decfsz	??_turnLeft135^0,f,c
  5133   00368E  D7FC               	bra	u3367
  5134   003690  2E1B               	decfsz	(??_turnLeft135+1)^0,f,c
  5135   003692  D7FA               	bra	u3367
  5136   003694  D000               	nop2	
  5137   003696                     
  5138                           ;dc_motor.c: 270:     stop(mL, mR);
  5139   003696  C018  F013         	movff	turnLeft135@mL,stop@mL
  5140   00369A  C019  F014         	movff	turnLeft135@mR,stop@mR
  5141   00369E  ECCC  F016         	call	_stop	;wreg free
  5142   0036A2                     
  5143                           ;dc_motor.c: 271:     toggle_left_indicators();
  5144   0036A2  EC82  F01C         	call	_toggle_left_indicators	;wreg free
  5145   0036A6  0012               	return		;funcret
  5146   0036A8                     __end_of_turnLeft135:
  5147                           	callstack 0
  5148                           
  5149 ;; *************** function _card_blue *****************
  5150 ;; Defined at:
  5151 ;;		line 41 in file "manoeuvres.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5154 ;;		 -> main@motorL(9), 
  5155 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5156 ;;		 -> main@motorR(9), 
  5157 ;;  backtrack       1   29[COMRAM] unsigned char 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;		None
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  1    wreg      void 
  5162 ;; Registers used:
  5163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5169 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5171 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5172 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5173 ;;Total ram usage:        5 bytes
  5174 ;; Hardware stack levels used: 1
  5175 ;; Hardware stack levels required when called: 5
  5176 ;; This function calls:
  5177 ;;		_UTurn
  5178 ;;		_headbuttReverse
  5179 ;; This function is called by:
  5180 ;;		_pick_card
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text31
  5185   00329C                     __ptext31:
  5186                           	callstack 0
  5187   00329C                     _card_blue:
  5188                           	callstack 23
  5189   00329C                     
  5190                           ;manoeuvres.c: 41: void card_blue(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 42: {;manoeuvres.c: 43:     switch (backtrack) {
  5191   00329C  EF6C  F019         	goto	l3141
  5192   0032A0                     l3135:
  5193                           
  5194                           ;manoeuvres.c: 45:             headbuttReverse(mL, mR);
  5195   0032A0  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  5196   0032A4  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  5197   0032A8  EC8C  F01B         	call	_headbuttReverse	;wreg free
  5198                           
  5199                           ;manoeuvres.c: 46:             UTurn(mL, mR);
  5200   0032AC  C01C  F018         	movff	card_blue@mL,UTurn@mL
  5201   0032B0  C01D  F019         	movff	card_blue@mR,UTurn@mR
  5202   0032B4  EC9E  F01A         	call	_UTurn	;wreg free
  5203                           
  5204                           ;manoeuvres.c: 47:             break;
  5205   0032B8  EF81  F019         	goto	l555
  5206   0032BC                     l3137:
  5207                           
  5208                           ;manoeuvres.c: 49:             UTurn(mL, mR);
  5209   0032BC  C01C  F018         	movff	card_blue@mL,UTurn@mL
  5210   0032C0  C01D  F019         	movff	card_blue@mR,UTurn@mR
  5211   0032C4  EC9E  F01A         	call	_UTurn	;wreg free
  5212                           
  5213                           ;manoeuvres.c: 50:             headbuttReverse(mL, mR);
  5214   0032C8  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  5215   0032CC  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  5216   0032D0  EC8C  F01B         	call	_headbuttReverse	;wreg free
  5217                           
  5218                           ;manoeuvres.c: 51:             break;
  5219   0032D4  EF81  F019         	goto	l555
  5220   0032D8                     l3141:
  5221   0032D8  501E               	movf	card_blue@backtrack^0,w,c
  5222   0032DA  6E1F               	movwf	??_card_blue^0,c
  5223   0032DC  6A20               	clrf	(??_card_blue+1)^0,c
  5224                           
  5225                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5226                           ; Switch size 1, requested type "simple"
  5227                           ; Number of cases is 1, Range of values is 0 to 0
  5228                           ; switch strategies available:
  5229                           ; Name         Instructions Cycles
  5230                           ; simple_byte            4     3 (average)
  5231                           ;	Chosen strategy is simple_byte
  5232   0032DE  5020               	movf	(??_card_blue+1)^0,w,c
  5233   0032E0  0A00               	xorlw	0	; case 0
  5234   0032E2  B4D8               	btfsc	status,2,c
  5235   0032E4  EF76  F019         	goto	l4163
  5236   0032E8  EF81  F019         	goto	l555
  5237   0032EC                     l4163:
  5238                           
  5239                           ; Switch size 1, requested type "simple"
  5240                           ; Number of cases is 2, Range of values is 0 to 1
  5241                           ; switch strategies available:
  5242                           ; Name         Instructions Cycles
  5243                           ; simple_byte            7     4 (average)
  5244                           ;	Chosen strategy is simple_byte
  5245   0032EC  501F               	movf	??_card_blue^0,w,c
  5246   0032EE  0A00               	xorlw	0	; case 0
  5247   0032F0  B4D8               	btfsc	status,2,c
  5248   0032F2  EF50  F019         	goto	l3135
  5249   0032F6  0A01               	xorlw	1	; case 1
  5250   0032F8  B4D8               	btfsc	status,2,c
  5251   0032FA  EF5E  F019         	goto	l3137
  5252   0032FE  EF81  F019         	goto	l555
  5253   003302                     l555:
  5254   003302  0012               	return		;funcret
  5255   003304                     __end_of_card_blue:
  5256                           	callstack 0
  5257                           
  5258 ;; *************** function _headbuttReverse *****************
  5259 ;; Defined at:
  5260 ;;		line 303 in file "dc_motor.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5263 ;;		 -> main@motorL(9), 
  5264 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5265 ;;		 -> main@motorR(9), 
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;		None
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  1    wreg      void 
  5270 ;; Registers used:
  5271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5277 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5279 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5280 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5281 ;;Total ram usage:        4 bytes
  5282 ;; Hardware stack levels used: 1
  5283 ;; Hardware stack levels required when called: 4
  5284 ;; This function calls:
  5285 ;;		_fullSpeedReverse
  5286 ;;		_stop
  5287 ;;		_toggle_brake_lights
  5288 ;; This function is called by:
  5289 ;;		_card_red
  5290 ;;		_card_green
  5291 ;;		_card_blue
  5292 ;;		_card_yellow
  5293 ;;		_card_pink
  5294 ;;		_card_orange
  5295 ;;		_card_cyan
  5296 ;;		_card_white
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           	psect	text32
  5301   003718                     __ptext32:
  5302                           	callstack 0
  5303   003718                     _headbuttReverse:
  5304                           	callstack 23
  5305   003718                     
  5306                           ;dc_motor.c: 303: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 304: {;dc
      +                          _motor.c: 305:     toggle_brake_lights();
  5307   003718  EC50  F01C         	call	_toggle_brake_lights	;wreg free
  5308   00371C                     
  5309                           ;dc_motor.c: 306:     fullSpeedReverse(mL, mR);
  5310   00371C  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
  5311   003720  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
  5312   003724  EC86  F015         	call	_fullSpeedReverse	;wreg free
  5313   003728                     
  5314                           ;dc_motor.c: 307:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
  5315   003728  0E43               	movlw	67
  5316   00372A  6E1B               	movwf	(??_headbuttReverse+1)^0,c
  5317   00372C  0E8F               	movlw	143
  5318   00372E  6E1A               	movwf	??_headbuttReverse^0,c
  5319   003730  0EC8               	movlw	200
  5320   003732                     u3377:
  5321   003732  2EE8               	decfsz	wreg,f,c
  5322   003734  D7FE               	bra	u3377
  5323   003736  2E1A               	decfsz	??_headbuttReverse^0,f,c
  5324   003738  D7FC               	bra	u3377
  5325   00373A  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
  5326   00373C  D7FA               	bra	u3377
  5327   00373E                     
  5328                           ;dc_motor.c: 308:     stop(mL, mR);
  5329   00373E  C018  F013         	movff	headbuttReverse@mL,stop@mL
  5330   003742  C019  F014         	movff	headbuttReverse@mR,stop@mR
  5331   003746  ECCC  F016         	call	_stop	;wreg free
  5332   00374A                     
  5333                           ;dc_motor.c: 309:     toggle_brake_lights();
  5334   00374A  EC50  F01C         	call	_toggle_brake_lights	;wreg free
  5335   00374E  0012               	return		;funcret
  5336   003750                     __end_of_headbuttReverse:
  5337                           	callstack 0
  5338                           
  5339 ;; *************** function _toggle_brake_lights *****************
  5340 ;; Defined at:
  5341 ;;		line 48 in file "buggy_lights.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		wreg, status,2, status,0
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5357 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5358 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5359 ;;Total ram usage:        1 bytes
  5360 ;; Hardware stack levels used: 1
  5361 ;; Hardware stack levels required when called: 1
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_headbuttReverse
  5366 ;;		_squareReverse
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           	psect	text33
  5371   0038A0                     __ptext33:
  5372                           	callstack 0
  5373   0038A0                     _toggle_brake_lights:
  5374                           	callstack 25
  5375   0038A0                     
  5376                           ;buggy_lights.c: 51:     LATDbits.LATD4 = !LATDbits.LATD4;
  5377   0038A0  A87C               	btfss	124,4,c	;volatile
  5378   0038A2  EF55  F01C         	goto	u1761
  5379   0038A6  EF59  F01C         	goto	u1760
  5380   0038AA                     u1761:
  5381   0038AA  6A01               	clrf	??_toggle_brake_lights^0,c
  5382   0038AC  2A01               	incf	??_toggle_brake_lights^0,f,c
  5383   0038AE  EF5A  F01C         	goto	u1778
  5384   0038B2                     u1760:
  5385   0038B2  6A01               	clrf	??_toggle_brake_lights^0,c
  5386   0038B4                     u1778:
  5387   0038B4  3A01               	swapf	??_toggle_brake_lights^0,f,c
  5388   0038B6  507C               	movf	124,w,c	;volatile
  5389   0038B8  1801               	xorwf	??_toggle_brake_lights^0,w,c
  5390   0038BA  0BEF               	andlw	-17
  5391   0038BC  1801               	xorwf	??_toggle_brake_lights^0,w,c
  5392   0038BE  6E7C               	movwf	124,c	;volatile
  5393   0038C0  0012               	return		;funcret
  5394   0038C2                     __end_of_toggle_brake_lights:
  5395                           	callstack 0
  5396                           
  5397 ;; *************** function _fullSpeedReverse *****************
  5398 ;; Defined at:
  5399 ;;		line 210 in file "dc_motor.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5402 ;;		 -> main@motorL(9), 
  5403 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5404 ;;		 -> main@motorR(9), 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;  rightGear       1   22[COMRAM] unsigned char 
  5407 ;;  leftGear        1   21[COMRAM] unsigned char 
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      void 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5417 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5418 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5420 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5421 ;;Total ram usage:        5 bytes
  5422 ;; Hardware stack levels used: 1
  5423 ;; Hardware stack levels required when called: 3
  5424 ;; This function calls:
  5425 ;;		_setMotorPWM
  5426 ;; This function is called by:
  5427 ;;		_headbuttReverse
  5428 ;;		_squareReverse
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text34
  5433   002B0C                     __ptext34:
  5434                           	callstack 0
  5435   002B0C                     _fullSpeedReverse:
  5436                           	callstack 23
  5437   002B0C  0E14               	movlw	20
  5438   002B0E  6E16               	movwf	fullSpeedReverse@leftGear^0,c
  5439   002B10  0E15               	movlw	21
  5440   002B12  6E17               	movwf	fullSpeedReverse@rightGear^0,c
  5441   002B14                     
  5442                           ;dc_motor.c: 217:     (mL->direction) = 0;
  5443   002B14  5013               	movf	fullSpeedReverse@mL^0,w,c
  5444   002B16  6ED9               	movwf	fsr2l,c
  5445   002B18  6ADA               	clrf	fsr2h,c
  5446   002B1A  0E01               	movlw	1
  5447   002B1C  26D9               	addwf	fsr2l,f,c
  5448   002B1E  6ADF               	clrf	indf2,c
  5449   002B20                     
  5450                           ;dc_motor.c: 218:     (mR->direction) = 0;
  5451   002B20  5014               	movf	fullSpeedReverse@mR^0,w,c
  5452   002B22  6ED9               	movwf	fsr2l,c
  5453   002B24  6ADA               	clrf	fsr2h,c
  5454   002B26  0E01               	movlw	1
  5455   002B28  26D9               	addwf	fsr2l,f,c
  5456   002B2A  6ADF               	clrf	indf2,c
  5457                           
  5458                           ;dc_motor.c: 221:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5459   002B2C  EFC8  F015         	goto	l2979
  5460   002B30                     l2967:
  5461                           
  5462                           ;dc_motor.c: 224:         if (mL->power < leftGear) {mL->power++;}
  5463   002B30  5013               	movf	fullSpeedReverse@mL^0,w,c
  5464   002B32  6ED9               	movwf	fsr2l,c
  5465   002B34  6ADA               	clrf	fsr2h,c
  5466   002B36  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  5467   002B38  5CDE               	subwf	postinc2,w,c
  5468   002B3A  B0D8               	btfsc	status,0,c
  5469   002B3C  EFA2  F015         	goto	u1961
  5470   002B40  EFA4  F015         	goto	u1960
  5471   002B44                     u1961:
  5472   002B44  EFA8  F015         	goto	l269
  5473   002B48                     u1960:
  5474   002B48  5013               	movf	fullSpeedReverse@mL^0,w,c
  5475   002B4A  6ED9               	movwf	fsr2l,c
  5476   002B4C  6ADA               	clrf	fsr2h,c
  5477   002B4E  2ADF               	incf	indf2,f,c
  5478   002B50                     l269:
  5479                           
  5480                           ;dc_motor.c: 227:         if (mR->power < rightGear) {mR->power++;}
  5481   002B50  5014               	movf	fullSpeedReverse@mR^0,w,c
  5482   002B52  6ED9               	movwf	fsr2l,c
  5483   002B54  6ADA               	clrf	fsr2h,c
  5484   002B56  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  5485   002B58  5CDE               	subwf	postinc2,w,c
  5486   002B5A  B0D8               	btfsc	status,0,c
  5487   002B5C  EFB2  F015         	goto	u1971
  5488   002B60  EFB4  F015         	goto	u1970
  5489   002B64                     u1971:
  5490   002B64  EFB8  F015         	goto	l2973
  5491   002B68                     u1970:
  5492   002B68  5014               	movf	fullSpeedReverse@mR^0,w,c
  5493   002B6A  6ED9               	movwf	fsr2l,c
  5494   002B6C  6ADA               	clrf	fsr2h,c
  5495   002B6E  2ADF               	incf	indf2,f,c
  5496   002B70                     l2973:
  5497                           
  5498                           ;dc_motor.c: 230:         setMotorPWM(mL);
  5499   002B70  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  5500   002B74  EC57  F011         	call	_setMotorPWM	;wreg free
  5501   002B78                     
  5502                           ;dc_motor.c: 231:         setMotorPWM(mR);
  5503   002B78  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  5504   002B7C  EC57  F011         	call	_setMotorPWM	;wreg free
  5505   002B80                     
  5506                           ;dc_motor.c: 234:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5507   002B80  0EA7               	movlw	167
  5508   002B82  6E15               	movwf	??_fullSpeedReverse^0,c
  5509   002B84  0E3A               	movlw	58
  5510   002B86                     u3387:
  5511   002B86  2EE8               	decfsz	wreg,f,c
  5512   002B88  D7FE               	bra	u3387
  5513   002B8A  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  5514   002B8C  D7FC               	bra	u3387
  5515   002B8E  D000               	nop2	
  5516   002B90                     l2979:
  5517                           
  5518                           ;dc_motor.c: 221:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5519   002B90  5013               	movf	fullSpeedReverse@mL^0,w,c
  5520   002B92  6ED9               	movwf	fsr2l,c
  5521   002B94  6ADA               	clrf	fsr2h,c
  5522   002B96  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  5523   002B98  5CDE               	subwf	postinc2,w,c
  5524   002B9A  A0D8               	btfss	status,0,c
  5525   002B9C  EFD2  F015         	goto	u1981
  5526   002BA0  EFD4  F015         	goto	u1980
  5527   002BA4                     u1981:
  5528   002BA4  EF98  F015         	goto	l2967
  5529   002BA8                     u1980:
  5530   002BA8  5014               	movf	fullSpeedReverse@mR^0,w,c
  5531   002BAA  6ED9               	movwf	fsr2l,c
  5532   002BAC  6ADA               	clrf	fsr2h,c
  5533   002BAE  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  5534   002BB0  5CDE               	subwf	postinc2,w,c
  5535   002BB2  A0D8               	btfss	status,0,c
  5536   002BB4  EFDE  F015         	goto	u1991
  5537   002BB8  EFE0  F015         	goto	u1990
  5538   002BBC                     u1991:
  5539   002BBC  EF98  F015         	goto	l2967
  5540   002BC0                     u1990:
  5541   002BC0  0012               	return		;funcret
  5542   002BC2                     __end_of_fullSpeedReverse:
  5543                           	callstack 0
  5544                           
  5545 ;; *************** function _UTurn *****************
  5546 ;; Defined at:
  5547 ;;		line 289 in file "dc_motor.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5550 ;;		 -> main@motorL(9), 
  5551 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5552 ;;		 -> main@motorR(9), 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5564 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5567 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5568 ;;Total ram usage:        4 bytes
  5569 ;; Hardware stack levels used: 1
  5570 ;; Hardware stack levels required when called: 4
  5571 ;; This function calls:
  5572 ;;		_stop
  5573 ;;		_toggle_left_indicators
  5574 ;;		_toggle_right_indicators
  5575 ;;		_turnLeft
  5576 ;; This function is called by:
  5577 ;;		_card_blue
  5578 ;;		_card_white
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text35
  5583   00353C                     __ptext35:
  5584                           	callstack 0
  5585   00353C                     _UTurn:
  5586                           	callstack 23
  5587   00353C                     
  5588                           ;dc_motor.c: 289: void UTurn(DC_motor *mL, DC_motor *mR);dc_motor.c: 290: {;dc_motor.c: 
      +                          291:     toggle_left_indicators();
  5589   00353C  EC82  F01C         	call	_toggle_left_indicators	;wreg free
  5590                           
  5591                           ;dc_motor.c: 292:     toggle_right_indicators();
  5592   003540  EC72  F01C         	call	_toggle_right_indicators	;wreg free
  5593   003544                     
  5594                           ;dc_motor.c: 293:     turnLeft(mL, mR);
  5595   003544  C018  F013         	movff	UTurn@mL,turnLeft@mL
  5596   003548  C019  F014         	movff	UTurn@mR,turnLeft@mR
  5597   00354C  EC2A  F015         	call	_turnLeft	;wreg free
  5598   003550                     
  5599                           ;dc_motor.c: 294:     _delay((unsigned long)((turn180Delay)*(64000000/4000.0)));
  5600   003550  0E21               	movlw	33
  5601   003552  6E1B               	movwf	(??_UTurn+1)^0,c
  5602   003554  0E78               	movlw	120
  5603   003556  6E1A               	movwf	??_UTurn^0,c
  5604   003558  0E98               	movlw	152
  5605   00355A                     u3397:
  5606   00355A  2EE8               	decfsz	wreg,f,c
  5607   00355C  D7FE               	bra	u3397
  5608   00355E  2E1A               	decfsz	??_UTurn^0,f,c
  5609   003560  D7FC               	bra	u3397
  5610   003562  2E1B               	decfsz	(??_UTurn+1)^0,f,c
  5611   003564  D7FA               	bra	u3397
  5612   003566  D000               	nop2	
  5613   003568                     
  5614                           ;dc_motor.c: 295:     stop(mL, mR);
  5615   003568  C018  F013         	movff	UTurn@mL,stop@mL
  5616   00356C  C019  F014         	movff	UTurn@mR,stop@mR
  5617   003570  ECCC  F016         	call	_stop	;wreg free
  5618   003574                     
  5619                           ;dc_motor.c: 296:     toggle_left_indicators();
  5620   003574  EC82  F01C         	call	_toggle_left_indicators	;wreg free
  5621   003578                     
  5622                           ;dc_motor.c: 297:     toggle_right_indicators();
  5623   003578  EC72  F01C         	call	_toggle_right_indicators	;wreg free
  5624   00357C  0012               	return		;funcret
  5625   00357E                     __end_of_UTurn:
  5626                           	callstack 0
  5627                           
  5628 ;; *************** function _turnLeft *****************
  5629 ;; Defined at:
  5630 ;;		line 117 in file "dc_motor.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5633 ;;		 -> main@motorL(9), 
  5634 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5635 ;;		 -> main@motorR(9), 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  rightGear       1   22[COMRAM] unsigned char 
  5638 ;;  leftGear        1   21[COMRAM] unsigned char 
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  1    wreg      void 
  5641 ;; Registers used:
  5642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5648 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5649 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5650 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5651 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5652 ;;Total ram usage:        5 bytes
  5653 ;; Hardware stack levels used: 1
  5654 ;; Hardware stack levels required when called: 3
  5655 ;; This function calls:
  5656 ;;		_setMotorPWM
  5657 ;; This function is called by:
  5658 ;;		_turnLeft90
  5659 ;;		_turnLeft135
  5660 ;;		_UTurn
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text36
  5665   002A54                     __ptext36:
  5666                           	callstack 0
  5667   002A54                     _turnLeft:
  5668                           	callstack 23
  5669   002A54  0E28               	movlw	40
  5670   002A56  6E16               	movwf	turnLeft@leftGear^0,c
  5671   002A58  0E28               	movlw	40
  5672   002A5A  6E17               	movwf	turnLeft@rightGear^0,c
  5673   002A5C                     
  5674                           ;dc_motor.c: 124:     (mL->direction) = 0;
  5675   002A5C  5013               	movf	turnLeft@mL^0,w,c
  5676   002A5E  6ED9               	movwf	fsr2l,c
  5677   002A60  6ADA               	clrf	fsr2h,c
  5678   002A62  0E01               	movlw	1
  5679   002A64  26D9               	addwf	fsr2l,f,c
  5680   002A66  6ADF               	clrf	indf2,c
  5681   002A68                     
  5682                           ;dc_motor.c: 125:     (mR->direction) = 1;
  5683   002A68  5014               	movf	turnLeft@mR^0,w,c
  5684   002A6A  6ED9               	movwf	fsr2l,c
  5685   002A6C  6ADA               	clrf	fsr2h,c
  5686   002A6E  0E01               	movlw	1
  5687   002A70  26D9               	addwf	fsr2l,f,c
  5688   002A72  0E01               	movlw	1
  5689   002A74  6EDF               	movwf	indf2,c
  5690                           
  5691                           ;dc_motor.c: 128:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5692   002A76  EF6D  F015         	goto	l2935
  5693   002A7A                     l2923:
  5694                           
  5695                           ;dc_motor.c: 131:         if (mL->power < leftGear) {mL->power++;}
  5696   002A7A  5013               	movf	turnLeft@mL^0,w,c
  5697   002A7C  6ED9               	movwf	fsr2l,c
  5698   002A7E  6ADA               	clrf	fsr2h,c
  5699   002A80  5016               	movf	turnLeft@leftGear^0,w,c
  5700   002A82  5CDE               	subwf	postinc2,w,c
  5701   002A84  B0D8               	btfsc	status,0,c
  5702   002A86  EF47  F015         	goto	u1881
  5703   002A8A  EF49  F015         	goto	u1880
  5704   002A8E                     u1881:
  5705   002A8E  EF4D  F015         	goto	l245
  5706   002A92                     u1880:
  5707   002A92  5013               	movf	turnLeft@mL^0,w,c
  5708   002A94  6ED9               	movwf	fsr2l,c
  5709   002A96  6ADA               	clrf	fsr2h,c
  5710   002A98  2ADF               	incf	indf2,f,c
  5711   002A9A                     l245:
  5712                           
  5713                           ;dc_motor.c: 134:         if (mR->power < rightGear) {mR->power++;}
  5714   002A9A  5014               	movf	turnLeft@mR^0,w,c
  5715   002A9C  6ED9               	movwf	fsr2l,c
  5716   002A9E  6ADA               	clrf	fsr2h,c
  5717   002AA0  5017               	movf	turnLeft@rightGear^0,w,c
  5718   002AA2  5CDE               	subwf	postinc2,w,c
  5719   002AA4  B0D8               	btfsc	status,0,c
  5720   002AA6  EF57  F015         	goto	u1891
  5721   002AAA  EF59  F015         	goto	u1890
  5722   002AAE                     u1891:
  5723   002AAE  EF5D  F015         	goto	l2929
  5724   002AB2                     u1890:
  5725   002AB2  5014               	movf	turnLeft@mR^0,w,c
  5726   002AB4  6ED9               	movwf	fsr2l,c
  5727   002AB6  6ADA               	clrf	fsr2h,c
  5728   002AB8  2ADF               	incf	indf2,f,c
  5729   002ABA                     l2929:
  5730                           
  5731                           ;dc_motor.c: 137:         setMotorPWM(mL);
  5732   002ABA  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5733   002ABE  EC57  F011         	call	_setMotorPWM	;wreg free
  5734   002AC2                     
  5735                           ;dc_motor.c: 138:         setMotorPWM(mR);
  5736   002AC2  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5737   002AC6  EC57  F011         	call	_setMotorPWM	;wreg free
  5738   002ACA                     
  5739                           ;dc_motor.c: 141:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5740   002ACA  0EA7               	movlw	167
  5741   002ACC  6E15               	movwf	??_turnLeft^0,c
  5742   002ACE  0E3A               	movlw	58
  5743   002AD0                     u3407:
  5744   002AD0  2EE8               	decfsz	wreg,f,c
  5745   002AD2  D7FE               	bra	u3407
  5746   002AD4  2E15               	decfsz	??_turnLeft^0,f,c
  5747   002AD6  D7FC               	bra	u3407
  5748   002AD8  D000               	nop2	
  5749   002ADA                     l2935:
  5750                           
  5751                           ;dc_motor.c: 128:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5752   002ADA  5013               	movf	turnLeft@mL^0,w,c
  5753   002ADC  6ED9               	movwf	fsr2l,c
  5754   002ADE  6ADA               	clrf	fsr2h,c
  5755   002AE0  5016               	movf	turnLeft@leftGear^0,w,c
  5756   002AE2  5CDE               	subwf	postinc2,w,c
  5757   002AE4  A0D8               	btfss	status,0,c
  5758   002AE6  EF77  F015         	goto	u1901
  5759   002AEA  EF79  F015         	goto	u1900
  5760   002AEE                     u1901:
  5761   002AEE  EF3D  F015         	goto	l2923
  5762   002AF2                     u1900:
  5763   002AF2  5014               	movf	turnLeft@mR^0,w,c
  5764   002AF4  6ED9               	movwf	fsr2l,c
  5765   002AF6  6ADA               	clrf	fsr2h,c
  5766   002AF8  5017               	movf	turnLeft@rightGear^0,w,c
  5767   002AFA  5CDE               	subwf	postinc2,w,c
  5768   002AFC  A0D8               	btfss	status,0,c
  5769   002AFE  EF83  F015         	goto	u1911
  5770   002B02  EF85  F015         	goto	u1910
  5771   002B06                     u1911:
  5772   002B06  EF3D  F015         	goto	l2923
  5773   002B0A                     u1910:
  5774   002B0A  0012               	return		;funcret
  5775   002B0C                     __end_of_turnLeft:
  5776                           	callstack 0
  5777                           
  5778 ;; *************** function _toggle_right_indicators *****************
  5779 ;; Defined at:
  5780 ;;		line 84 in file "buggy_lights.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;		None
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;		None
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  1    wreg      void 
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5798 ;;Total ram usage:        1 bytes
  5799 ;; Hardware stack levels used: 1
  5800 ;; Hardware stack levels required when called: 1
  5801 ;; This function calls:
  5802 ;;		Nothing
  5803 ;; This function is called by:
  5804 ;;		_turnRight90
  5805 ;;		_turnRight135
  5806 ;;		_UTurn
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           	psect	text37
  5811   0038E4                     __ptext37:
  5812                           	callstack 0
  5813   0038E4                     _toggle_right_indicators:
  5814                           	callstack 25
  5815   0038E4                     
  5816                           ;buggy_lights.c: 87:     LATHbits.LATH0 = !LATHbits.LATH0;
  5817   0038E4  A080               	btfss	128,0,c	;volatile
  5818   0038E6  EF77  F01C         	goto	u1801
  5819   0038EA  EF7B  F01C         	goto	u1800
  5820   0038EE                     u1801:
  5821   0038EE  6A01               	clrf	??_toggle_right_indicators^0,c
  5822   0038F0  2A01               	incf	??_toggle_right_indicators^0,f,c
  5823   0038F2  EF7C  F01C         	goto	u1818
  5824   0038F6                     u1800:
  5825   0038F6  6A01               	clrf	??_toggle_right_indicators^0,c
  5826   0038F8                     u1818:
  5827   0038F8  5080               	movf	128,w,c	;volatile
  5828   0038FA  1801               	xorwf	??_toggle_right_indicators^0,w,c
  5829   0038FC  0BFE               	andlw	-2
  5830   0038FE  1801               	xorwf	??_toggle_right_indicators^0,w,c
  5831   003900  6E80               	movwf	128,c	;volatile
  5832   003902  0012               	return		;funcret
  5833   003904                     __end_of_toggle_right_indicators:
  5834                           	callstack 0
  5835                           
  5836 ;; *************** function _toggle_left_indicators *****************
  5837 ;; Defined at:
  5838 ;;		line 75 in file "buggy_lights.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;		None
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;		None
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      void 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2, status,0
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5856 ;;Total ram usage:        1 bytes
  5857 ;; Hardware stack levels used: 1
  5858 ;; Hardware stack levels required when called: 1
  5859 ;; This function calls:
  5860 ;;		Nothing
  5861 ;; This function is called by:
  5862 ;;		_turnLeft90
  5863 ;;		_turnLeft135
  5864 ;;		_UTurn
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           	psect	text38
  5869   003904                     __ptext38:
  5870                           	callstack 0
  5871   003904                     _toggle_left_indicators:
  5872                           	callstack 25
  5873   003904                     
  5874                           ;buggy_lights.c: 78:     LATFbits.LATF0 = !LATFbits.LATF0;
  5875   003904  A07E               	btfss	126,0,c	;volatile
  5876   003906  EF87  F01C         	goto	u1781
  5877   00390A  EF8B  F01C         	goto	u1780
  5878   00390E                     u1781:
  5879   00390E  6A01               	clrf	??_toggle_left_indicators^0,c
  5880   003910  2A01               	incf	??_toggle_left_indicators^0,f,c
  5881   003912  EF8C  F01C         	goto	u1798
  5882   003916                     u1780:
  5883   003916  6A01               	clrf	??_toggle_left_indicators^0,c
  5884   003918                     u1798:
  5885   003918  507E               	movf	126,w,c	;volatile
  5886   00391A  1801               	xorwf	??_toggle_left_indicators^0,w,c
  5887   00391C  0BFE               	andlw	-2
  5888   00391E  1801               	xorwf	??_toggle_left_indicators^0,w,c
  5889   003920  6E7E               	movwf	126,c	;volatile
  5890   003922  0012               	return		;funcret
  5891   003924                     __end_of_toggle_left_indicators:
  5892                           	callstack 0
  5893                           
  5894 ;; *************** function _stop *****************
  5895 ;; Defined at:
  5896 ;;		line 94 in file "dc_motor.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5899 ;;		 -> main@motorL(9), 
  5900 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5901 ;;		 -> main@motorR(9), 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;		None
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  1    wreg      void 
  5906 ;; Registers used:
  5907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5913 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5915 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5916 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5917 ;;Total ram usage:        3 bytes
  5918 ;; Hardware stack levels used: 1
  5919 ;; Hardware stack levels required when called: 3
  5920 ;; This function calls:
  5921 ;;		_setMotorPWM
  5922 ;; This function is called by:
  5923 ;;		_turnLeft90
  5924 ;;		_turnRight90
  5925 ;;		_turnLeft135
  5926 ;;		_turnRight135
  5927 ;;		_UTurn
  5928 ;;		_headbuttReverse
  5929 ;;		_squareReverse
  5930 ;;		_forward_navigation
  5931 ;;		_return_to_sender
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text39
  5936   002D98                     __ptext39:
  5937                           	callstack 0
  5938   002D98                     _stop:
  5939                           	callstack 26
  5940   002D98                     
  5941                           ;dc_motor.c: 94: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 95: {;dc_motor.c: 97:
      +                               while ((mL->power > 0) || (mR->power > 0)){
  5942   002D98  EFFC  F016         	goto	l2913
  5943   002D9C                     l2899:
  5944                           
  5945                           ;dc_motor.c: 100:         if (mL->power > 0) {mL->power--;}
  5946   002D9C  5013               	movf	stop@mL^0,w,c
  5947   002D9E  6ED9               	movwf	fsr2l,c
  5948   002DA0  6ADA               	clrf	fsr2h,c
  5949   002DA2  50DF               	movf	indf2,w,c
  5950   002DA4  B4D8               	btfsc	status,2,c
  5951   002DA6  EFD7  F016         	goto	u1841
  5952   002DAA  EFD9  F016         	goto	u1840
  5953   002DAE                     u1841:
  5954   002DAE  EFDD  F016         	goto	l2903
  5955   002DB2                     u1840:
  5956   002DB2  5013               	movf	stop@mL^0,w,c
  5957   002DB4  6ED9               	movwf	fsr2l,c
  5958   002DB6  6ADA               	clrf	fsr2h,c
  5959   002DB8  06DF               	decf	indf2,f,c
  5960   002DBA                     l2903:
  5961                           
  5962                           ;dc_motor.c: 103:         if (mR->power > 0) {mR->power--;}
  5963   002DBA  5014               	movf	stop@mR^0,w,c
  5964   002DBC  6ED9               	movwf	fsr2l,c
  5965   002DBE  6ADA               	clrf	fsr2h,c
  5966   002DC0  50DF               	movf	indf2,w,c
  5967   002DC2  B4D8               	btfsc	status,2,c
  5968   002DC4  EFE6  F016         	goto	u1851
  5969   002DC8  EFE8  F016         	goto	u1850
  5970   002DCC                     u1851:
  5971   002DCC  EFEC  F016         	goto	l2907
  5972   002DD0                     u1850:
  5973   002DD0  5014               	movf	stop@mR^0,w,c
  5974   002DD2  6ED9               	movwf	fsr2l,c
  5975   002DD4  6ADA               	clrf	fsr2h,c
  5976   002DD6  06DF               	decf	indf2,f,c
  5977   002DD8                     l2907:
  5978                           
  5979                           ;dc_motor.c: 106:         setMotorPWM(mL);
  5980   002DD8  C013  F00E         	movff	stop@mL,setMotorPWM@m
  5981   002DDC  EC57  F011         	call	_setMotorPWM	;wreg free
  5982   002DE0                     
  5983                           ;dc_motor.c: 107:         setMotorPWM(mR);
  5984   002DE0  C014  F00E         	movff	stop@mR,setMotorPWM@m
  5985   002DE4  EC57  F011         	call	_setMotorPWM	;wreg free
  5986   002DE8                     
  5987                           ;dc_motor.c: 110:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5988   002DE8  0EA7               	movlw	167
  5989   002DEA  6E15               	movwf	??_stop^0,c
  5990   002DEC  0E3A               	movlw	58
  5991   002DEE                     u3417:
  5992   002DEE  2EE8               	decfsz	wreg,f,c
  5993   002DF0  D7FE               	bra	u3417
  5994   002DF2  2E15               	decfsz	??_stop^0,f,c
  5995   002DF4  D7FC               	bra	u3417
  5996   002DF6  D000               	nop2	
  5997   002DF8                     l2913:
  5998                           
  5999                           ;dc_motor.c: 97:     while ((mL->power > 0) || (mR->power > 0)){
  6000   002DF8  5013               	movf	stop@mL^0,w,c
  6001   002DFA  6ED9               	movwf	fsr2l,c
  6002   002DFC  6ADA               	clrf	fsr2h,c
  6003   002DFE  50DF               	movf	indf2,w,c
  6004   002E00  A4D8               	btfss	status,2,c
  6005   002E02  EF05  F017         	goto	u1861
  6006   002E06  EF07  F017         	goto	u1860
  6007   002E0A                     u1861:
  6008   002E0A  EFCE  F016         	goto	l2899
  6009   002E0E                     u1860:
  6010   002E0E  5014               	movf	stop@mR^0,w,c
  6011   002E10  6ED9               	movwf	fsr2l,c
  6012   002E12  6ADA               	clrf	fsr2h,c
  6013   002E14  50DF               	movf	indf2,w,c
  6014   002E16  A4D8               	btfss	status,2,c
  6015   002E18  EF10  F017         	goto	u1871
  6016   002E1C  EF12  F017         	goto	u1870
  6017   002E20                     u1871:
  6018   002E20  EFCE  F016         	goto	l2899
  6019   002E24                     u1870:
  6020   002E24  0012               	return		;funcret
  6021   002E26                     __end_of_stop:
  6022                           	callstack 0
  6023                           
  6024 ;; *************** function _fullSpeedAhead *****************
  6025 ;; Defined at:
  6026 ;;		line 179 in file "dc_motor.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6029 ;;		 -> main@motorL(9), 
  6030 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6031 ;;		 -> main@motorR(9), 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  rightGear       1   22[COMRAM] unsigned char 
  6034 ;;  leftGear        1   21[COMRAM] unsigned char 
  6035 ;; Return value:  Size  Location     Type
  6036 ;;                  1    wreg      void 
  6037 ;; Registers used:
  6038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6047 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6048 ;;Total ram usage:        5 bytes
  6049 ;; Hardware stack levels used: 1
  6050 ;; Hardware stack levels required when called: 3
  6051 ;; This function calls:
  6052 ;;		_setMotorPWM
  6053 ;; This function is called by:
  6054 ;;		_forward_navigation
  6055 ;;		_return_to_sender
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           	psect	text40
  6060   0028E2                     __ptext40:
  6061                           	callstack 0
  6062   0028E2                     _fullSpeedAhead:
  6063                           	callstack 26
  6064   0028E2  0E14               	movlw	20
  6065   0028E4  6E16               	movwf	fullSpeedAhead@leftGear^0,c
  6066   0028E6  0E14               	movlw	20
  6067   0028E8  6E17               	movwf	fullSpeedAhead@rightGear^0,c
  6068   0028EA                     
  6069                           ;dc_motor.c: 186:     (mL->direction) = 1;
  6070   0028EA  5013               	movf	fullSpeedAhead@mL^0,w,c
  6071   0028EC  6ED9               	movwf	fsr2l,c
  6072   0028EE  6ADA               	clrf	fsr2h,c
  6073   0028F0  0E01               	movlw	1
  6074   0028F2  26D9               	addwf	fsr2l,f,c
  6075   0028F4  0E01               	movlw	1
  6076   0028F6  6EDF               	movwf	indf2,c
  6077   0028F8                     
  6078                           ;dc_motor.c: 187:     (mR->direction) = 1;
  6079   0028F8  5014               	movf	fullSpeedAhead@mR^0,w,c
  6080   0028FA  6ED9               	movwf	fsr2l,c
  6081   0028FC  6ADA               	clrf	fsr2h,c
  6082   0028FE  0E01               	movlw	1
  6083   002900  26D9               	addwf	fsr2l,f,c
  6084   002902  0E01               	movlw	1
  6085   002904  6EDF               	movwf	indf2,c
  6086                           
  6087                           ;dc_motor.c: 190:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  6088   002906  EFB5  F014         	goto	l3739
  6089   00290A                     l3727:
  6090                           
  6091                           ;dc_motor.c: 193:         if (mL->power < leftGear) {mL->power++;}
  6092   00290A  5013               	movf	fullSpeedAhead@mL^0,w,c
  6093   00290C  6ED9               	movwf	fsr2l,c
  6094   00290E  6ADA               	clrf	fsr2h,c
  6095   002910  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  6096   002912  5CDE               	subwf	postinc2,w,c
  6097   002914  B0D8               	btfsc	status,0,c
  6098   002916  EF8F  F014         	goto	u3061
  6099   00291A  EF91  F014         	goto	u3060
  6100   00291E                     u3061:
  6101   00291E  EF95  F014         	goto	l261
  6102   002922                     u3060:
  6103   002922  5013               	movf	fullSpeedAhead@mL^0,w,c
  6104   002924  6ED9               	movwf	fsr2l,c
  6105   002926  6ADA               	clrf	fsr2h,c
  6106   002928  2ADF               	incf	indf2,f,c
  6107   00292A                     l261:
  6108                           
  6109                           ;dc_motor.c: 196:         if (mR->power < rightGear) {mR->power++;}
  6110   00292A  5014               	movf	fullSpeedAhead@mR^0,w,c
  6111   00292C  6ED9               	movwf	fsr2l,c
  6112   00292E  6ADA               	clrf	fsr2h,c
  6113   002930  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  6114   002932  5CDE               	subwf	postinc2,w,c
  6115   002934  B0D8               	btfsc	status,0,c
  6116   002936  EF9F  F014         	goto	u3071
  6117   00293A  EFA1  F014         	goto	u3070
  6118   00293E                     u3071:
  6119   00293E  EFA5  F014         	goto	l3733
  6120   002942                     u3070:
  6121   002942  5014               	movf	fullSpeedAhead@mR^0,w,c
  6122   002944  6ED9               	movwf	fsr2l,c
  6123   002946  6ADA               	clrf	fsr2h,c
  6124   002948  2ADF               	incf	indf2,f,c
  6125   00294A                     l3733:
  6126                           
  6127                           ;dc_motor.c: 199:         setMotorPWM(mL);
  6128   00294A  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  6129   00294E  EC57  F011         	call	_setMotorPWM	;wreg free
  6130   002952                     
  6131                           ;dc_motor.c: 200:         setMotorPWM(mR);
  6132   002952  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  6133   002956  EC57  F011         	call	_setMotorPWM	;wreg free
  6134   00295A                     
  6135                           ;dc_motor.c: 203:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  6136   00295A  0EA7               	movlw	167
  6137   00295C  6E15               	movwf	??_fullSpeedAhead^0,c
  6138   00295E  0E3A               	movlw	58
  6139   002960                     u3427:
  6140   002960  2EE8               	decfsz	wreg,f,c
  6141   002962  D7FE               	bra	u3427
  6142   002964  2E15               	decfsz	??_fullSpeedAhead^0,f,c
  6143   002966  D7FC               	bra	u3427
  6144   002968  D000               	nop2	
  6145   00296A                     l3739:
  6146                           
  6147                           ;dc_motor.c: 190:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  6148   00296A  5013               	movf	fullSpeedAhead@mL^0,w,c
  6149   00296C  6ED9               	movwf	fsr2l,c
  6150   00296E  6ADA               	clrf	fsr2h,c
  6151   002970  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  6152   002972  5CDE               	subwf	postinc2,w,c
  6153   002974  A0D8               	btfss	status,0,c
  6154   002976  EFBF  F014         	goto	u3081
  6155   00297A  EFC1  F014         	goto	u3080
  6156   00297E                     u3081:
  6157   00297E  EF85  F014         	goto	l3727
  6158   002982                     u3080:
  6159   002982  5014               	movf	fullSpeedAhead@mR^0,w,c
  6160   002984  6ED9               	movwf	fsr2l,c
  6161   002986  6ADA               	clrf	fsr2h,c
  6162   002988  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  6163   00298A  5CDE               	subwf	postinc2,w,c
  6164   00298C  A0D8               	btfss	status,0,c
  6165   00298E  EFCB  F014         	goto	u3091
  6166   002992  EFCD  F014         	goto	u3090
  6167   002996                     u3091:
  6168   002996  EF85  F014         	goto	l3727
  6169   00299A                     u3090:
  6170   00299A  0012               	return		;funcret
  6171   00299C                     __end_of_fullSpeedAhead:
  6172                           	callstack 0
  6173                           
  6174 ;; *************** function _setMotorPWM *****************
  6175 ;; Defined at:
  6176 ;;		line 69 in file "dc_motor.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  m               1   13[COMRAM] PTR struct DC_motor
  6179 ;;		 -> main@motorR(9), main@motorL(9), 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  negDuty         1   17[COMRAM] unsigned char 
  6182 ;;  posDuty         1   16[COMRAM] unsigned char 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6192 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6193 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6195 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6196 ;;Total ram usage:        5 bytes
  6197 ;; Hardware stack levels used: 1
  6198 ;; Hardware stack levels required when called: 2
  6199 ;; This function calls:
  6200 ;;		___lwdiv
  6201 ;;		___wmul
  6202 ;; This function is called by:
  6203 ;;		_stop
  6204 ;;		_turnLeft
  6205 ;;		_turnRight
  6206 ;;		_fullSpeedAhead
  6207 ;;		_fullSpeedReverse
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           	psect	text41
  6212   0022AE                     __ptext41:
  6213                           	callstack 0
  6214   0022AE                     _setMotorPWM:
  6215                           	callstack 26
  6216   0022AE                     
  6217                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6218   0022AE  500E               	movf	setMotorPWM@m^0,w,c
  6219   0022B0  6ED9               	movwf	fsr2l,c
  6220   0022B2  6ADA               	clrf	fsr2h,c
  6221   0022B4  0E02               	movlw	2
  6222   0022B6  26D9               	addwf	fsr2l,f,c
  6223   0022B8  50DF               	movf	indf2,w,c
  6224   0022BA  B4D8               	btfsc	status,2,c
  6225   0022BC  EF62  F011         	goto	u1721
  6226   0022C0  EF64  F011         	goto	u1720
  6227   0022C4                     u1721:
  6228   0022C4  EF94  F011         	goto	l2847
  6229   0022C8                     u1720:
  6230   0022C8                     
  6231                           ;dc_motor.c: 74:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  6232   0022C8  500E               	movf	setMotorPWM@m^0,w,c
  6233   0022CA  6ED9               	movwf	fsr2l,c
  6234   0022CC  6ADA               	clrf	fsr2h,c
  6235   0022CE  50DF               	movf	indf2,w,c
  6236   0022D0  6E0F               	movwf	??_setMotorPWM^0,c
  6237   0022D2  500F               	movf	??_setMotorPWM^0,w,c
  6238   0022D4  6E01               	movwf	___wmul@multiplier^0,c
  6239   0022D6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6240   0022D8  500E               	movf	setMotorPWM@m^0,w,c
  6241   0022DA  6ED9               	movwf	fsr2l,c
  6242   0022DC  6ADA               	clrf	fsr2h,c
  6243   0022DE  0E03               	movlw	3
  6244   0022E0  26D9               	addwf	fsr2l,f,c
  6245   0022E2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6246   0022E6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6247   0022EA  EC3D  F01C         	call	___wmul	;wreg free
  6248   0022EE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6249   0022F2  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6250   0022F6  0E00               	movlw	0
  6251   0022F8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6252   0022FA  0E64               	movlw	100
  6253   0022FC  6E09               	movwf	___lwdiv@divisor^0,c
  6254   0022FE  EC0F  F018         	call	___lwdiv	;wreg free
  6255   002302  500E               	movf	setMotorPWM@m^0,w,c
  6256   002304  6ED9               	movwf	fsr2l,c
  6257   002306  6ADA               	clrf	fsr2h,c
  6258   002308  0E03               	movlw	3
  6259   00230A  26D9               	addwf	fsr2l,f,c
  6260   00230C  50DF               	movf	indf2,w,c
  6261   00230E  6E10               	movwf	(??_setMotorPWM+1)^0,c
  6262   002310  5007               	movf	?___lwdiv^0,w,c
  6263   002312  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  6264   002314  6E11               	movwf	setMotorPWM@posDuty^0,c
  6265   002316                     
  6266                           ;dc_motor.c: 75:         negDuty=(unsigned char)(m->PWMperiod);
  6267   002316  500E               	movf	setMotorPWM@m^0,w,c
  6268   002318  6ED9               	movwf	fsr2l,c
  6269   00231A  6ADA               	clrf	fsr2h,c
  6270   00231C  0E03               	movlw	3
  6271   00231E  26D9               	addwf	fsr2l,f,c
  6272   002320  50DF               	movf	indf2,w,c
  6273   002322  6E12               	movwf	setMotorPWM@negDuty^0,c
  6274                           
  6275                           ;dc_motor.c: 76:     }
  6276   002324  EFB5  F011         	goto	l2851
  6277   002328                     l2847:
  6278                           
  6279                           ;dc_motor.c: 78:         posDuty=0;
  6280   002328  0E00               	movlw	0
  6281   00232A  6E11               	movwf	setMotorPWM@posDuty^0,c
  6282   00232C                     
  6283                           ;dc_motor.c: 79:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  6284   00232C  500E               	movf	setMotorPWM@m^0,w,c
  6285   00232E  6ED9               	movwf	fsr2l,c
  6286   002330  6ADA               	clrf	fsr2h,c
  6287   002332  50DF               	movf	indf2,w,c
  6288   002334  6E0F               	movwf	??_setMotorPWM^0,c
  6289   002336  500F               	movf	??_setMotorPWM^0,w,c
  6290   002338  6E01               	movwf	___wmul@multiplier^0,c
  6291   00233A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6292   00233C  500E               	movf	setMotorPWM@m^0,w,c
  6293   00233E  6ED9               	movwf	fsr2l,c
  6294   002340  6ADA               	clrf	fsr2h,c
  6295   002342  0E03               	movlw	3
  6296   002344  26D9               	addwf	fsr2l,f,c
  6297   002346  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6298   00234A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6299   00234E  EC3D  F01C         	call	___wmul	;wreg free
  6300   002352  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6301   002356  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6302   00235A  0E00               	movlw	0
  6303   00235C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6304   00235E  0E64               	movlw	100
  6305   002360  6E09               	movwf	___lwdiv@divisor^0,c
  6306   002362  EC0F  F018         	call	___lwdiv	;wreg free
  6307   002366  5007               	movf	?___lwdiv^0,w,c
  6308   002368  6E12               	movwf	setMotorPWM@negDuty^0,c
  6309   00236A                     l2851:
  6310                           
  6311                           ;dc_motor.c: 82:     if (m->direction) {
  6312   00236A  500E               	movf	setMotorPWM@m^0,w,c
  6313   00236C  6ED9               	movwf	fsr2l,c
  6314   00236E  6ADA               	clrf	fsr2h,c
  6315   002370  0E01               	movlw	1
  6316   002372  26D9               	addwf	fsr2l,f,c
  6317   002374  50DF               	movf	indf2,w,c
  6318   002376  B4D8               	btfsc	status,2,c
  6319   002378  EFC0  F011         	goto	u1731
  6320   00237C  EFC2  F011         	goto	u1730
  6321   002380                     u1731:
  6322   002380  EFE2  F011         	goto	l2855
  6323   002384                     u1730:
  6324   002384                     
  6325                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6326   002384  500E               	movf	setMotorPWM@m^0,w,c
  6327   002386  6ED9               	movwf	fsr2l,c
  6328   002388  6ADA               	clrf	fsr2h,c
  6329   00238A  0E05               	movlw	5
  6330   00238C  26D9               	addwf	fsr2l,f,c
  6331   00238E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6332   002392  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6333   002396  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6334   00239A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6335   00239E  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6336                           
  6337                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6338   0023A2  500E               	movf	setMotorPWM@m^0,w,c
  6339   0023A4  6ED9               	movwf	fsr2l,c
  6340   0023A6  6ADA               	clrf	fsr2h,c
  6341   0023A8  0E07               	movlw	7
  6342   0023AA  26D9               	addwf	fsr2l,f,c
  6343   0023AC  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6344   0023B0  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6345   0023B4  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6346   0023B8  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6347   0023BC  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6348                           
  6349                           ;dc_motor.c: 85:     } else {
  6350   0023C0  EF00  F012         	goto	l232
  6351   0023C4                     l2855:
  6352                           
  6353                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6354   0023C4  500E               	movf	setMotorPWM@m^0,w,c
  6355   0023C6  6ED9               	movwf	fsr2l,c
  6356   0023C8  6ADA               	clrf	fsr2h,c
  6357   0023CA  0E05               	movlw	5
  6358   0023CC  26D9               	addwf	fsr2l,f,c
  6359   0023CE  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6360   0023D2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6361   0023D6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6362   0023DA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6363   0023DE  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6364                           
  6365                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6366   0023E2  500E               	movf	setMotorPWM@m^0,w,c
  6367   0023E4  6ED9               	movwf	fsr2l,c
  6368   0023E6  6ADA               	clrf	fsr2h,c
  6369   0023E8  0E07               	movlw	7
  6370   0023EA  26D9               	addwf	fsr2l,f,c
  6371   0023EC  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6372   0023F0  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6373   0023F4  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6374   0023F8  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6375   0023FC  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6376   002400                     l232:
  6377   002400  0012               	return		;funcret
  6378   002402                     __end_of_setMotorPWM:
  6379                           	callstack 0
  6380                           
  6381 ;; *************** function ___wmul *****************
  6382 ;; Defined at:
  6383 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  multiplier      2    0[COMRAM] unsigned int 
  6386 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;  product         2    4[COMRAM] unsigned int 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  2    0[COMRAM] unsigned int 
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0, prodl, prodh
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6398 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6401 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6402 ;;Total ram usage:        6 bytes
  6403 ;; Hardware stack levels used: 1
  6404 ;; Hardware stack levels required when called: 1
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_setMotorPWM
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           	psect	text42
  6413   00387A                     __ptext42:
  6414                           	callstack 0
  6415   00387A                     ___wmul:
  6416                           	callstack 26
  6417   00387A  5001               	movf	___wmul@multiplier^0,w,c
  6418   00387C  0203               	mulwf	___wmul@multiplicand^0,c
  6419   00387E  CFF3 F005          	movff	prodl,___wmul@product
  6420   003882  CFF4 F006          	movff	prodh,___wmul@product+1
  6421   003886  5001               	movf	___wmul@multiplier^0,w,c
  6422   003888  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  6423   00388A  50F3               	movf	243,w,c
  6424   00388C  2606               	addwf	(___wmul@product+1)^0,f,c
  6425   00388E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  6426   003890  0203               	mulwf	___wmul@multiplicand^0,c
  6427   003892  50F3               	movf	243,w,c
  6428   003894  2606               	addwf	(___wmul@product+1)^0,f,c
  6429   003896  C005  F001         	movff	___wmul@product,?___wmul
  6430   00389A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6431   00389E  0012               	return		;funcret
  6432   0038A0                     __end_of___wmul:
  6433                           	callstack 0
  6434                           
  6435 ;; *************** function ___lwdiv *****************
  6436 ;; Defined at:
  6437 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  dividend        2    6[COMRAM] unsigned int 
  6440 ;;  divisor         2    8[COMRAM] unsigned int 
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;  quotient        2   10[COMRAM] unsigned int 
  6443 ;;  counter         1   12[COMRAM] unsigned char 
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  2    6[COMRAM] unsigned int 
  6446 ;; Registers used:
  6447 ;;		wreg, status,2, status,0
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6453 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6454 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6456 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6457 ;;Total ram usage:        7 bytes
  6458 ;; Hardware stack levels used: 1
  6459 ;; Hardware stack levels required when called: 1
  6460 ;; This function calls:
  6461 ;;		Nothing
  6462 ;; This function is called by:
  6463 ;;		_setMotorPWM
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text43
  6468   00301E                     __ptext43:
  6469                           	callstack 0
  6470   00301E                     ___lwdiv:
  6471                           	callstack 26
  6472   00301E  0E00               	movlw	0
  6473   003020  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6474   003022  0E00               	movlw	0
  6475   003024  6E0B               	movwf	___lwdiv@quotient^0,c
  6476   003026  5009               	movf	___lwdiv@divisor^0,w,c
  6477   003028  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6478   00302A  B4D8               	btfsc	status,2,c
  6479   00302C  EF1A  F018         	goto	u1691
  6480   003030  EF1C  F018         	goto	u1690
  6481   003034                     u1691:
  6482   003034  EF44  F018         	goto	l1238
  6483   003038                     u1690:
  6484   003038  0E01               	movlw	1
  6485   00303A  6E0D               	movwf	___lwdiv@counter^0,c
  6486   00303C  EF24  F018         	goto	l2827
  6487   003040                     l2825:
  6488   003040  90D8               	bcf	status,0,c
  6489   003042  3609               	rlcf	___lwdiv@divisor^0,f,c
  6490   003044  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6491   003046  2A0D               	incf	___lwdiv@counter^0,f,c
  6492   003048                     l2827:
  6493   003048  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6494   00304A  EF29  F018         	goto	u1701
  6495   00304E  EF2B  F018         	goto	u1700
  6496   003052                     u1701:
  6497   003052  EF20  F018         	goto	l2825
  6498   003056                     u1700:
  6499   003056                     l2829:
  6500   003056  90D8               	bcf	status,0,c
  6501   003058  360B               	rlcf	___lwdiv@quotient^0,f,c
  6502   00305A  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6503   00305C  5009               	movf	___lwdiv@divisor^0,w,c
  6504   00305E  5C07               	subwf	___lwdiv@dividend^0,w,c
  6505   003060  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6506   003062  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6507   003064  A0D8               	btfss	status,0,c
  6508   003066  EF37  F018         	goto	u1711
  6509   00306A  EF39  F018         	goto	u1710
  6510   00306E                     u1711:
  6511   00306E  EF3E  F018         	goto	l2837
  6512   003072                     u1710:
  6513   003072  5009               	movf	___lwdiv@divisor^0,w,c
  6514   003074  5E07               	subwf	___lwdiv@dividend^0,f,c
  6515   003076  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6516   003078  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6517   00307A  800B               	bsf	___lwdiv@quotient^0,0,c
  6518   00307C                     l2837:
  6519   00307C  90D8               	bcf	status,0,c
  6520   00307E  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6521   003080  3209               	rrcf	___lwdiv@divisor^0,f,c
  6522   003082  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6523   003084  EF2B  F018         	goto	l2829
  6524   003088                     l1238:
  6525   003088  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6526   00308C  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6527   003090  0012               	return		;funcret
  6528   003092                     __end_of___lwdiv:
  6529                           	callstack 0
  6530                           
  6531 ;; *************** function _convert_HSV *****************
  6532 ;; Defined at:
  6533 ;;		line 211 in file "color.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  6536 ;;		 -> main@HSV_colour(6), 
  6537 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  6538 ;;		 -> main@RGBC_colour(8), 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  temp            4   51[COMRAM] unsigned long 
  6541 ;;  temp            4   47[COMRAM] unsigned long 
  6542 ;;  temp            4   43[COMRAM] unsigned long 
  6543 ;;  temp            4   39[COMRAM] unsigned long 
  6544 ;;  temp            4   55[COMRAM] unsigned long 
  6545 ;;  temp            4   35[COMRAM] unsigned long 
  6546 ;;  temp            4   31[COMRAM] unsigned long 
  6547 ;;  C               2   63[COMRAM] unsigned int 
  6548 ;;  M               2   61[COMRAM] unsigned int 
  6549 ;;  hue_scale       2   59[COMRAM] unsigned int 
  6550 ;;  hue             2   29[COMRAM] unsigned int 
  6551 ;;  sat             2   27[COMRAM] unsigned int 
  6552 ;;  m               2   25[COMRAM] unsigned int 
  6553 ;;  sat_scale       2   23[COMRAM] unsigned int 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6563 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6564 ;;      Locals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6565 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6566 ;;      Totals:        52       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6567 ;;Total ram usage:       52 bytes
  6568 ;; Hardware stack levels used: 1
  6569 ;; Hardware stack levels required when called: 2
  6570 ;; This function calls:
  6571 ;;		___lldiv
  6572 ;;		___lmul
  6573 ;;		_max_RGB
  6574 ;;		_min_RGB
  6575 ;; This function is called by:
  6576 ;;		_forward_navigation
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           	psect	text44
  6581   000E1A                     __ptext44:
  6582                           	callstack 0
  6583   000E1A                     _convert_HSV:
  6584                           	callstack 27
  6585   000E1A                     
  6586                           ;color.c: 211: void convert_HSV(struct HSV_val *p1, struct RGBC_val *p2);color.c: 212: {
      +                          ;color.c: 213:     unsigned int hue = 0;
  6587   000E1A  0E00               	movlw	0
  6588   000E1C  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  6589   000E1E  0E00               	movlw	0
  6590   000E20  6E1E               	movwf	convert_HSV@hue^0,c
  6591                           
  6592                           ;color.c: 215:     unsigned int hue_scale = 60;
  6593   000E22  0E00               	movlw	0
  6594   000E24  6E3D               	movwf	(convert_HSV@hue_scale+1)^0,c
  6595   000E26  0E3C               	movlw	60
  6596   000E28  6E3C               	movwf	convert_HSV@hue_scale^0,c
  6597                           
  6598                           ;color.c: 216:     unsigned int sat_scale = 100;
  6599   000E2A  0E00               	movlw	0
  6600   000E2C  6E19               	movwf	(convert_HSV@sat_scale+1)^0,c
  6601   000E2E  0E64               	movlw	100
  6602   000E30  6E18               	movwf	convert_HSV@sat_scale^0,c
  6603   000E32                     
  6604                           ;color.c: 218:     unsigned int M = max_RGB(p2);
  6605   000E32  C00F  F001         	movff	convert_HSV@p2,max_RGB@p
  6606   000E36  ECD1  F017         	call	_max_RGB	;wreg free
  6607   000E3A  C001  F03E         	movff	?_max_RGB,convert_HSV@M
  6608   000E3E  C002  F03F         	movff	?_max_RGB+1,convert_HSV@M+1
  6609   000E42                     
  6610                           ;color.c: 219:     unsigned int m = min_RGB(p2);
  6611   000E42  C00F  F001         	movff	convert_HSV@p2,min_RGB@p
  6612   000E46  EC93  F017         	call	_min_RGB	;wreg free
  6613   000E4A  C001  F01A         	movff	?_min_RGB,convert_HSV@m
  6614   000E4E  C002  F01B         	movff	?_min_RGB+1,convert_HSV@m+1
  6615   000E52                     
  6616                           ;color.c: 220:     unsigned int C = M - m;
  6617   000E52  501A               	movf	convert_HSV@m^0,w,c
  6618   000E54  5C3E               	subwf	convert_HSV@M^0,w,c
  6619   000E56  6E40               	movwf	convert_HSV@C^0,c
  6620   000E58  501B               	movf	(convert_HSV@m+1)^0,w,c
  6621   000E5A  583F               	subwfb	(convert_HSV@M+1)^0,w,c
  6622   000E5C  6E41               	movwf	(convert_HSV@C+1)^0,c
  6623   000E5E                     
  6624                           ;color.c: 222:     if (C == 0) {
  6625   000E5E  5040               	movf	convert_HSV@C^0,w,c
  6626   000E60  1041               	iorwf	(convert_HSV@C+1)^0,w,c
  6627   000E62  A4D8               	btfss	status,2,c
  6628   000E64  EF36  F007         	goto	u2621
  6629   000E68  EF38  F007         	goto	u2620
  6630   000E6C                     u2621:
  6631   000E6C  EF3E  F007         	goto	l3529
  6632   000E70                     u2620:
  6633   000E70                     
  6634                           ;color.c: 223:         hue = 0;
  6635   000E70  0E00               	movlw	0
  6636   000E72  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  6637   000E74  0E00               	movlw	0
  6638   000E76  6E1E               	movwf	convert_HSV@hue^0,c
  6639                           
  6640                           ;color.c: 224:     } else {
  6641   000E78  EF0E  F00A         	goto	l3613
  6642   000E7C                     l3529:
  6643                           
  6644                           ;color.c: 234:         if (M == p2->R) {
  6645   000E7C  500F               	movf	convert_HSV@p2^0,w,c
  6646   000E7E  6ED9               	movwf	fsr2l,c
  6647   000E80  6ADA               	clrf	fsr2h,c
  6648   000E82  503E               	movf	convert_HSV@M^0,w,c
  6649   000E84  18DE               	xorwf	postinc2,w,c
  6650   000E86  E107               	bnz	u2631
  6651   000E88  503F               	movf	(convert_HSV@M+1)^0,w,c
  6652   000E8A  18DE               	xorwf	postinc2,w,c
  6653   000E8C  A4D8               	btfss	status,2,c
  6654   000E8E  EF4B  F007         	goto	u2631
  6655   000E92  EF4D  F007         	goto	u2630
  6656   000E96                     u2631:
  6657   000E96  EF3A  F008         	goto	l3557
  6658   000E9A                     u2630:
  6659   000E9A                     
  6660                           ;color.c: 235:             if (p2->G >= p2->B) {
  6661   000E9A  500F               	movf	convert_HSV@p2^0,w,c
  6662   000E9C  6ED9               	movwf	fsr2l,c
  6663   000E9E  6ADA               	clrf	fsr2h,c
  6664   000EA0  0E04               	movlw	4
  6665   000EA2  26D9               	addwf	fsr2l,f,c
  6666   000EA4  500F               	movf	convert_HSV@p2^0,w,c
  6667   000EA6  6EE1               	movwf	fsr1l,c
  6668   000EA8  6AE2               	clrf	fsr1h,c
  6669   000EAA  0E02               	movlw	2
  6670   000EAC  26E1               	addwf	fsr1l,f,c
  6671   000EAE  50DE               	movf	postinc2,w,c
  6672   000EB0  5CE6               	subwf	postinc1,w,c
  6673   000EB2  50DE               	movf	postinc2,w,c
  6674   000EB4  58E6               	subwfb	postinc1,w,c
  6675   000EB6  A0D8               	btfss	status,0,c
  6676   000EB8  EF60  F007         	goto	u2641
  6677   000EBC  EF62  F007         	goto	u2640
  6678   000EC0                     u2641:
  6679   000EC0  EFC2  F007         	goto	l3545
  6680   000EC4                     u2640:
  6681   000EC4                     
  6682                           ;color.c: 239:                 temp *= 0;
  6683   000EC4  0E00               	movlw	0
  6684   000EC6  6E24               	movwf	convert_HSV@temp^0,c
  6685   000EC8  0E00               	movlw	0
  6686   000ECA  6E25               	movwf	(convert_HSV@temp+1)^0,c
  6687   000ECC  0E00               	movlw	0
  6688   000ECE  6E26               	movwf	(convert_HSV@temp+2)^0,c
  6689   000ED0  0E00               	movlw	0
  6690   000ED2  6E27               	movwf	(convert_HSV@temp+3)^0,c
  6691   000ED4                     
  6692                           ;color.c: 240:                 temp += (unsigned long)(p2->G - p2->B);
  6693   000ED4  500F               	movf	convert_HSV@p2^0,w,c
  6694   000ED6  6ED9               	movwf	fsr2l,c
  6695   000ED8  6ADA               	clrf	fsr2h,c
  6696   000EDA  0E04               	movlw	4
  6697   000EDC  26D9               	addwf	fsr2l,f,c
  6698   000EDE  CFDE F010          	movff	postinc2,??_convert_HSV
  6699   000EE2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6700   000EE6  500F               	movf	convert_HSV@p2^0,w,c
  6701   000EE8  6ED9               	movwf	fsr2l,c
  6702   000EEA  6ADA               	clrf	fsr2h,c
  6703   000EEC  0E02               	movlw	2
  6704   000EEE  26D9               	addwf	fsr2l,f,c
  6705   000EF0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6706   000EF4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6707   000EF8  5010               	movf	??_convert_HSV^0,w,c
  6708   000EFA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6709   000EFC  6E14               	movwf	(??_convert_HSV+4)^0,c
  6710   000EFE  5011               	movf	(??_convert_HSV+1)^0,w,c
  6711   000F00  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6712   000F02  6E15               	movwf	(??_convert_HSV+5)^0,c
  6713   000F04  5014               	movf	(??_convert_HSV+4)^0,w,c
  6714   000F06  2624               	addwf	convert_HSV@temp^0,f,c
  6715   000F08  5015               	movf	(??_convert_HSV+5)^0,w,c
  6716   000F0A  2225               	addwfc	(convert_HSV@temp+1)^0,f,c
  6717   000F0C  0E00               	movlw	0
  6718   000F0E  2226               	addwfc	(convert_HSV@temp+2)^0,f,c
  6719   000F10  0E00               	movlw	0
  6720   000F12  2227               	addwfc	(convert_HSV@temp+3)^0,f,c
  6721   000F14                     
  6722                           ;color.c: 241:                 temp *= (unsigned long)hue_scale;
  6723   000F14  C024  F001         	movff	convert_HSV@temp,___lmul@multiplier
  6724   000F18  C025  F002         	movff	convert_HSV@temp+1,___lmul@multiplier+1
  6725   000F1C  C026  F003         	movff	convert_HSV@temp+2,___lmul@multiplier+2
  6726   000F20  C027  F004         	movff	convert_HSV@temp+3,___lmul@multiplier+3
  6727   000F24  0E3C               	movlw	60
  6728   000F26  6E05               	movwf	___lmul@multiplicand^0,c
  6729   000F28  0E00               	movlw	0
  6730   000F2A  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6731   000F2C  0E00               	movlw	0
  6732   000F2E  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6733   000F30  0E00               	movlw	0
  6734   000F32  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6735   000F34  EC49  F018         	call	___lmul	;wreg free
  6736   000F38  C001  F024         	movff	?___lmul,convert_HSV@temp
  6737   000F3C  C002  F025         	movff	?___lmul+1,convert_HSV@temp+1
  6738   000F40  C003  F026         	movff	?___lmul+2,convert_HSV@temp+2
  6739   000F44  C004  F027         	movff	?___lmul+3,convert_HSV@temp+3
  6740   000F48                     
  6741                           ;color.c: 242:                 temp /= (unsigned long)C;
  6742   000F48  C024  F001         	movff	convert_HSV@temp,___lldiv@dividend
  6743   000F4C  C025  F002         	movff	convert_HSV@temp+1,___lldiv@dividend+1
  6744   000F50  C026  F003         	movff	convert_HSV@temp+2,___lldiv@dividend+2
  6745   000F54  C027  F004         	movff	convert_HSV@temp+3,___lldiv@dividend+3
  6746   000F58  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6747   000F5C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6748   000F60  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6749   000F62  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6750   000F64  ECE1  F015         	call	___lldiv	;wreg free
  6751   000F68  C001  F024         	movff	?___lldiv,convert_HSV@temp
  6752   000F6C  C002  F025         	movff	?___lldiv+1,convert_HSV@temp+1
  6753   000F70  C003  F026         	movff	?___lldiv+2,convert_HSV@temp+2
  6754   000F74  C004  F027         	movff	?___lldiv+3,convert_HSV@temp+3
  6755   000F78                     
  6756                           ;color.c: 243:                 hue = (unsigned int)temp;
  6757   000F78  C024  F01E         	movff	convert_HSV@temp,convert_HSV@hue
  6758   000F7C  C025  F01F         	movff	convert_HSV@temp+1,convert_HSV@hue+1
  6759                           
  6760                           ;color.c: 244:             } else {
  6761   000F80  EF3A  F008         	goto	l3557
  6762   000F84                     l3545:
  6763                           
  6764                           ;color.c: 246:                 unsigned long temp;;color.c: 247:                 temp = 
      +                          (unsigned long)C;
  6765   000F84  C040  F038         	movff	convert_HSV@C,convert_HSV@temp_610
  6766   000F88  C041  F039         	movff	convert_HSV@C+1,convert_HSV@temp_610+1
  6767   000F8C  6A3A               	clrf	(convert_HSV@temp_610+2)^0,c
  6768   000F8E  6A3B               	clrf	(convert_HSV@temp_610+3)^0,c
  6769   000F90                     
  6770                           ;color.c: 248:                 temp *= 6;
  6771   000F90  C038  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  6772   000F94  C039  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  6773   000F98  C03A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  6774   000F9C  C03B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  6775   000FA0  0E06               	movlw	6
  6776   000FA2  6E05               	movwf	___lmul@multiplicand^0,c
  6777   000FA4  0E00               	movlw	0
  6778   000FA6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6779   000FA8  0E00               	movlw	0
  6780   000FAA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6781   000FAC  0E00               	movlw	0
  6782   000FAE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6783   000FB0  EC49  F018         	call	___lmul	;wreg free
  6784   000FB4  C001  F038         	movff	?___lmul,convert_HSV@temp_610
  6785   000FB8  C002  F039         	movff	?___lmul+1,convert_HSV@temp_610+1
  6786   000FBC  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_610+2
  6787   000FC0  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_610+3
  6788   000FC4                     
  6789                           ;color.c: 249:                 temp -= (unsigned long)(p2->B - p2->G);
  6790   000FC4  500F               	movf	convert_HSV@p2^0,w,c
  6791   000FC6  6ED9               	movwf	fsr2l,c
  6792   000FC8  6ADA               	clrf	fsr2h,c
  6793   000FCA  0E02               	movlw	2
  6794   000FCC  26D9               	addwf	fsr2l,f,c
  6795   000FCE  CFDE F010          	movff	postinc2,??_convert_HSV
  6796   000FD2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6797   000FD6  500F               	movf	convert_HSV@p2^0,w,c
  6798   000FD8  6ED9               	movwf	fsr2l,c
  6799   000FDA  6ADA               	clrf	fsr2h,c
  6800   000FDC  0E04               	movlw	4
  6801   000FDE  26D9               	addwf	fsr2l,f,c
  6802   000FE0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6803   000FE4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6804   000FE8  5010               	movf	??_convert_HSV^0,w,c
  6805   000FEA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6806   000FEC  6E14               	movwf	(??_convert_HSV+4)^0,c
  6807   000FEE  5011               	movf	(??_convert_HSV+1)^0,w,c
  6808   000FF0  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6809   000FF2  6E15               	movwf	(??_convert_HSV+5)^0,c
  6810   000FF4  6A16               	clrf	(??_convert_HSV+6)^0,c
  6811   000FF6  6A17               	clrf	(??_convert_HSV+7)^0,c
  6812   000FF8  5014               	movf	(??_convert_HSV+4)^0,w,c
  6813   000FFA  5E38               	subwf	convert_HSV@temp_610^0,f,c
  6814   000FFC  5015               	movf	(??_convert_HSV+5)^0,w,c
  6815   000FFE  5A39               	subwfb	(convert_HSV@temp_610+1)^0,f,c
  6816   001000  5016               	movf	(??_convert_HSV+6)^0,w,c
  6817   001002  5A3A               	subwfb	(convert_HSV@temp_610+2)^0,f,c
  6818   001004  5017               	movf	(??_convert_HSV+7)^0,w,c
  6819   001006  5A3B               	subwfb	(convert_HSV@temp_610+3)^0,f,c
  6820   001008                     
  6821                           ;color.c: 250:                 temp *= (unsigned long)hue_scale;
  6822   001008  C038  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  6823   00100C  C039  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  6824   001010  C03A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  6825   001014  C03B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  6826   001018  0E3C               	movlw	60
  6827   00101A  6E05               	movwf	___lmul@multiplicand^0,c
  6828   00101C  0E00               	movlw	0
  6829   00101E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6830   001020  0E00               	movlw	0
  6831   001022  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6832   001024  0E00               	movlw	0
  6833   001026  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6834   001028  EC49  F018         	call	___lmul	;wreg free
  6835   00102C  C001  F038         	movff	?___lmul,convert_HSV@temp_610
  6836   001030  C002  F039         	movff	?___lmul+1,convert_HSV@temp_610+1
  6837   001034  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_610+2
  6838   001038  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_610+3
  6839   00103C                     
  6840                           ;color.c: 251:                 temp /= (unsigned long)C;
  6841   00103C  C038  F001         	movff	convert_HSV@temp_610,___lldiv@dividend
  6842   001040  C039  F002         	movff	convert_HSV@temp_610+1,___lldiv@dividend+1
  6843   001044  C03A  F003         	movff	convert_HSV@temp_610+2,___lldiv@dividend+2
  6844   001048  C03B  F004         	movff	convert_HSV@temp_610+3,___lldiv@dividend+3
  6845   00104C  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6846   001050  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6847   001054  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6848   001056  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6849   001058  ECE1  F015         	call	___lldiv	;wreg free
  6850   00105C  C001  F038         	movff	?___lldiv,convert_HSV@temp_610
  6851   001060  C002  F039         	movff	?___lldiv+1,convert_HSV@temp_610+1
  6852   001064  C003  F03A         	movff	?___lldiv+2,convert_HSV@temp_610+2
  6853   001068  C004  F03B         	movff	?___lldiv+3,convert_HSV@temp_610+3
  6854   00106C                     
  6855                           ;color.c: 252:                 hue = (unsigned int)temp;
  6856   00106C  C038  F01E         	movff	convert_HSV@temp_610,convert_HSV@hue
  6857   001070  C039  F01F         	movff	convert_HSV@temp_610+1,convert_HSV@hue+1
  6858   001074                     l3557:
  6859                           
  6860                           ;color.c: 255:         if (M == p2->G) {
  6861   001074  500F               	movf	convert_HSV@p2^0,w,c
  6862   001076  6ED9               	movwf	fsr2l,c
  6863   001078  6ADA               	clrf	fsr2h,c
  6864   00107A  0E02               	movlw	2
  6865   00107C  26D9               	addwf	fsr2l,f,c
  6866   00107E  503E               	movf	convert_HSV@M^0,w,c
  6867   001080  18DE               	xorwf	postinc2,w,c
  6868   001082  E107               	bnz	u2651
  6869   001084  503F               	movf	(convert_HSV@M+1)^0,w,c
  6870   001086  18DE               	xorwf	postinc2,w,c
  6871   001088  A4D8               	btfss	status,2,c
  6872   00108A  EF49  F008         	goto	u2651
  6873   00108E  EF4B  F008         	goto	u2650
  6874   001092                     u2651:
  6875   001092  EF20  F009         	goto	l3585
  6876   001096                     u2650:
  6877   001096                     
  6878                           ;color.c: 256:             if (p2->B >= p2->R) {
  6879   001096  500F               	movf	convert_HSV@p2^0,w,c
  6880   001098  6ED9               	movwf	fsr2l,c
  6881   00109A  6ADA               	clrf	fsr2h,c
  6882   00109C  500F               	movf	convert_HSV@p2^0,w,c
  6883   00109E  6EE1               	movwf	fsr1l,c
  6884   0010A0  6AE2               	clrf	fsr1h,c
  6885   0010A2  0E04               	movlw	4
  6886   0010A4  26E1               	addwf	fsr1l,f,c
  6887   0010A6  50DE               	movf	postinc2,w,c
  6888   0010A8  5CE6               	subwf	postinc1,w,c
  6889   0010AA  50DE               	movf	postinc2,w,c
  6890   0010AC  58E6               	subwfb	postinc1,w,c
  6891   0010AE  A0D8               	btfss	status,0,c
  6892   0010B0  EF5C  F008         	goto	u2661
  6893   0010B4  EF5E  F008         	goto	u2660
  6894   0010B8                     u2661:
  6895   0010B8  EFBF  F008         	goto	l3573
  6896   0010BC                     u2660:
  6897   0010BC                     
  6898                           ;color.c: 258:                 unsigned long temp;;color.c: 259:                 temp = 
      +                          (unsigned long)C;
  6899   0010BC  C040  F028         	movff	convert_HSV@C,convert_HSV@temp_611
  6900   0010C0  C041  F029         	movff	convert_HSV@C+1,convert_HSV@temp_611+1
  6901   0010C4  6A2A               	clrf	(convert_HSV@temp_611+2)^0,c
  6902   0010C6  6A2B               	clrf	(convert_HSV@temp_611+3)^0,c
  6903   0010C8                     
  6904                           ;color.c: 260:                 temp *= 2;
  6905   0010C8  90D8               	bcf	status,0,c
  6906   0010CA  3628               	rlcf	convert_HSV@temp_611^0,f,c
  6907   0010CC  3629               	rlcf	(convert_HSV@temp_611+1)^0,f,c
  6908   0010CE  362A               	rlcf	(convert_HSV@temp_611+2)^0,f,c
  6909   0010D0  362B               	rlcf	(convert_HSV@temp_611+3)^0,f,c
  6910   0010D2                     
  6911                           ;color.c: 261:                 temp += (unsigned long)(p2->B - p2->R);
  6912   0010D2  500F               	movf	convert_HSV@p2^0,w,c
  6913   0010D4  6ED9               	movwf	fsr2l,c
  6914   0010D6  6ADA               	clrf	fsr2h,c
  6915   0010D8  CFDE F010          	movff	postinc2,??_convert_HSV
  6916   0010DC  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6917   0010E0  500F               	movf	convert_HSV@p2^0,w,c
  6918   0010E2  6ED9               	movwf	fsr2l,c
  6919   0010E4  6ADA               	clrf	fsr2h,c
  6920   0010E6  0E04               	movlw	4
  6921   0010E8  26D9               	addwf	fsr2l,f,c
  6922   0010EA  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6923   0010EE  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6924   0010F2  5010               	movf	??_convert_HSV^0,w,c
  6925   0010F4  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6926   0010F6  6E14               	movwf	(??_convert_HSV+4)^0,c
  6927   0010F8  5011               	movf	(??_convert_HSV+1)^0,w,c
  6928   0010FA  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6929   0010FC  6E15               	movwf	(??_convert_HSV+5)^0,c
  6930   0010FE  5014               	movf	(??_convert_HSV+4)^0,w,c
  6931   001100  2628               	addwf	convert_HSV@temp_611^0,f,c
  6932   001102  5015               	movf	(??_convert_HSV+5)^0,w,c
  6933   001104  2229               	addwfc	(convert_HSV@temp_611+1)^0,f,c
  6934   001106  0E00               	movlw	0
  6935   001108  222A               	addwfc	(convert_HSV@temp_611+2)^0,f,c
  6936   00110A  0E00               	movlw	0
  6937   00110C  222B               	addwfc	(convert_HSV@temp_611+3)^0,f,c
  6938   00110E                     
  6939                           ;color.c: 262:                 temp *= (unsigned long)hue_scale;
  6940   00110E  C028  F001         	movff	convert_HSV@temp_611,___lmul@multiplier
  6941   001112  C029  F002         	movff	convert_HSV@temp_611+1,___lmul@multiplier+1
  6942   001116  C02A  F003         	movff	convert_HSV@temp_611+2,___lmul@multiplier+2
  6943   00111A  C02B  F004         	movff	convert_HSV@temp_611+3,___lmul@multiplier+3
  6944   00111E  0E3C               	movlw	60
  6945   001120  6E05               	movwf	___lmul@multiplicand^0,c
  6946   001122  0E00               	movlw	0
  6947   001124  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6948   001126  0E00               	movlw	0
  6949   001128  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6950   00112A  0E00               	movlw	0
  6951   00112C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6952   00112E  EC49  F018         	call	___lmul	;wreg free
  6953   001132  C001  F028         	movff	?___lmul,convert_HSV@temp_611
  6954   001136  C002  F029         	movff	?___lmul+1,convert_HSV@temp_611+1
  6955   00113A  C003  F02A         	movff	?___lmul+2,convert_HSV@temp_611+2
  6956   00113E  C004  F02B         	movff	?___lmul+3,convert_HSV@temp_611+3
  6957   001142                     
  6958                           ;color.c: 263:                 temp /= (unsigned long)C;
  6959   001142  C028  F001         	movff	convert_HSV@temp_611,___lldiv@dividend
  6960   001146  C029  F002         	movff	convert_HSV@temp_611+1,___lldiv@dividend+1
  6961   00114A  C02A  F003         	movff	convert_HSV@temp_611+2,___lldiv@dividend+2
  6962   00114E  C02B  F004         	movff	convert_HSV@temp_611+3,___lldiv@dividend+3
  6963   001152  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6964   001156  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6965   00115A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6966   00115C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6967   00115E  ECE1  F015         	call	___lldiv	;wreg free
  6968   001162  C001  F028         	movff	?___lldiv,convert_HSV@temp_611
  6969   001166  C002  F029         	movff	?___lldiv+1,convert_HSV@temp_611+1
  6970   00116A  C003  F02A         	movff	?___lldiv+2,convert_HSV@temp_611+2
  6971   00116E  C004  F02B         	movff	?___lldiv+3,convert_HSV@temp_611+3
  6972   001172                     
  6973                           ;color.c: 264:                 hue = (unsigned int)temp;
  6974   001172  C028  F01E         	movff	convert_HSV@temp_611,convert_HSV@hue
  6975   001176  C029  F01F         	movff	convert_HSV@temp_611+1,convert_HSV@hue+1
  6976                           
  6977                           ;color.c: 265:             } else {
  6978   00117A  EF20  F009         	goto	l3585
  6979   00117E                     l3573:
  6980                           
  6981                           ;color.c: 267:                 unsigned long temp;;color.c: 268:                 temp = 
      +                          (unsigned long)C;
  6982   00117E  C040  F02C         	movff	convert_HSV@C,convert_HSV@temp_612
  6983   001182  C041  F02D         	movff	convert_HSV@C+1,convert_HSV@temp_612+1
  6984   001186  6A2E               	clrf	(convert_HSV@temp_612+2)^0,c
  6985   001188  6A2F               	clrf	(convert_HSV@temp_612+3)^0,c
  6986   00118A                     
  6987                           ;color.c: 269:                 temp *= 2;
  6988   00118A  90D8               	bcf	status,0,c
  6989   00118C  362C               	rlcf	convert_HSV@temp_612^0,f,c
  6990   00118E  362D               	rlcf	(convert_HSV@temp_612+1)^0,f,c
  6991   001190  362E               	rlcf	(convert_HSV@temp_612+2)^0,f,c
  6992   001192  362F               	rlcf	(convert_HSV@temp_612+3)^0,f,c
  6993   001194                     
  6994                           ;color.c: 270:                 temp -= (unsigned long)(p2->R - p2->B);
  6995   001194  500F               	movf	convert_HSV@p2^0,w,c
  6996   001196  6ED9               	movwf	fsr2l,c
  6997   001198  6ADA               	clrf	fsr2h,c
  6998   00119A  0E04               	movlw	4
  6999   00119C  26D9               	addwf	fsr2l,f,c
  7000   00119E  CFDE F010          	movff	postinc2,??_convert_HSV
  7001   0011A2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7002   0011A6  500F               	movf	convert_HSV@p2^0,w,c
  7003   0011A8  6ED9               	movwf	fsr2l,c
  7004   0011AA  6ADA               	clrf	fsr2h,c
  7005   0011AC  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7006   0011B0  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7007   0011B4  5010               	movf	??_convert_HSV^0,w,c
  7008   0011B6  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7009   0011B8  6E14               	movwf	(??_convert_HSV+4)^0,c
  7010   0011BA  5011               	movf	(??_convert_HSV+1)^0,w,c
  7011   0011BC  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7012   0011BE  6E15               	movwf	(??_convert_HSV+5)^0,c
  7013   0011C0  6A16               	clrf	(??_convert_HSV+6)^0,c
  7014   0011C2  6A17               	clrf	(??_convert_HSV+7)^0,c
  7015   0011C4  5014               	movf	(??_convert_HSV+4)^0,w,c
  7016   0011C6  5E2C               	subwf	convert_HSV@temp_612^0,f,c
  7017   0011C8  5015               	movf	(??_convert_HSV+5)^0,w,c
  7018   0011CA  5A2D               	subwfb	(convert_HSV@temp_612+1)^0,f,c
  7019   0011CC  5016               	movf	(??_convert_HSV+6)^0,w,c
  7020   0011CE  5A2E               	subwfb	(convert_HSV@temp_612+2)^0,f,c
  7021   0011D0  5017               	movf	(??_convert_HSV+7)^0,w,c
  7022   0011D2  5A2F               	subwfb	(convert_HSV@temp_612+3)^0,f,c
  7023   0011D4                     
  7024                           ;color.c: 271:                 temp *= (unsigned long)hue_scale;
  7025   0011D4  C02C  F001         	movff	convert_HSV@temp_612,___lmul@multiplier
  7026   0011D8  C02D  F002         	movff	convert_HSV@temp_612+1,___lmul@multiplier+1
  7027   0011DC  C02E  F003         	movff	convert_HSV@temp_612+2,___lmul@multiplier+2
  7028   0011E0  C02F  F004         	movff	convert_HSV@temp_612+3,___lmul@multiplier+3
  7029   0011E4  0E3C               	movlw	60
  7030   0011E6  6E05               	movwf	___lmul@multiplicand^0,c
  7031   0011E8  0E00               	movlw	0
  7032   0011EA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7033   0011EC  0E00               	movlw	0
  7034   0011EE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7035   0011F0  0E00               	movlw	0
  7036   0011F2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7037   0011F4  EC49  F018         	call	___lmul	;wreg free
  7038   0011F8  C001  F02C         	movff	?___lmul,convert_HSV@temp_612
  7039   0011FC  C002  F02D         	movff	?___lmul+1,convert_HSV@temp_612+1
  7040   001200  C003  F02E         	movff	?___lmul+2,convert_HSV@temp_612+2
  7041   001204  C004  F02F         	movff	?___lmul+3,convert_HSV@temp_612+3
  7042   001208                     
  7043                           ;color.c: 272:                 temp /= (unsigned long)C;
  7044   001208  C02C  F001         	movff	convert_HSV@temp_612,___lldiv@dividend
  7045   00120C  C02D  F002         	movff	convert_HSV@temp_612+1,___lldiv@dividend+1
  7046   001210  C02E  F003         	movff	convert_HSV@temp_612+2,___lldiv@dividend+2
  7047   001214  C02F  F004         	movff	convert_HSV@temp_612+3,___lldiv@dividend+3
  7048   001218  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7049   00121C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7050   001220  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7051   001222  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7052   001224  ECE1  F015         	call	___lldiv	;wreg free
  7053   001228  C001  F02C         	movff	?___lldiv,convert_HSV@temp_612
  7054   00122C  C002  F02D         	movff	?___lldiv+1,convert_HSV@temp_612+1
  7055   001230  C003  F02E         	movff	?___lldiv+2,convert_HSV@temp_612+2
  7056   001234  C004  F02F         	movff	?___lldiv+3,convert_HSV@temp_612+3
  7057   001238                     
  7058                           ;color.c: 273:                 hue = (unsigned int)temp;
  7059   001238  C02C  F01E         	movff	convert_HSV@temp_612,convert_HSV@hue
  7060   00123C  C02D  F01F         	movff	convert_HSV@temp_612+1,convert_HSV@hue+1
  7061   001240                     l3585:
  7062                           
  7063                           ;color.c: 276:         if (M == p2->B) {
  7064   001240  500F               	movf	convert_HSV@p2^0,w,c
  7065   001242  6ED9               	movwf	fsr2l,c
  7066   001244  6ADA               	clrf	fsr2h,c
  7067   001246  0E04               	movlw	4
  7068   001248  26D9               	addwf	fsr2l,f,c
  7069   00124A  503E               	movf	convert_HSV@M^0,w,c
  7070   00124C  18DE               	xorwf	postinc2,w,c
  7071   00124E  E107               	bnz	u2671
  7072   001250  503F               	movf	(convert_HSV@M+1)^0,w,c
  7073   001252  18DE               	xorwf	postinc2,w,c
  7074   001254  A4D8               	btfss	status,2,c
  7075   001256  EF2F  F009         	goto	u2671
  7076   00125A  EF31  F009         	goto	u2670
  7077   00125E                     u2671:
  7078   00125E  EF0E  F00A         	goto	l3613
  7079   001262                     u2670:
  7080   001262                     
  7081                           ;color.c: 277:             if (p2->R >= p2->G) {
  7082   001262  500F               	movf	convert_HSV@p2^0,w,c
  7083   001264  6ED9               	movwf	fsr2l,c
  7084   001266  6ADA               	clrf	fsr2h,c
  7085   001268  0E02               	movlw	2
  7086   00126A  26D9               	addwf	fsr2l,f,c
  7087   00126C  500F               	movf	convert_HSV@p2^0,w,c
  7088   00126E  6EE1               	movwf	fsr1l,c
  7089   001270  6AE2               	clrf	fsr1h,c
  7090   001272  50DE               	movf	postinc2,w,c
  7091   001274  5CE6               	subwf	postinc1,w,c
  7092   001276  50DE               	movf	postinc2,w,c
  7093   001278  58E6               	subwfb	postinc1,w,c
  7094   00127A  A0D8               	btfss	status,0,c
  7095   00127C  EF42  F009         	goto	u2681
  7096   001280  EF44  F009         	goto	u2680
  7097   001284                     u2681:
  7098   001284  EFA9  F009         	goto	l3601
  7099   001288                     u2680:
  7100   001288                     
  7101                           ;color.c: 279:                 unsigned long temp;;color.c: 280:                 temp = 
      +                          (unsigned long)C;
  7102   001288  C040  F030         	movff	convert_HSV@C,convert_HSV@temp_613
  7103   00128C  C041  F031         	movff	convert_HSV@C+1,convert_HSV@temp_613+1
  7104   001290  6A32               	clrf	(convert_HSV@temp_613+2)^0,c
  7105   001292  6A33               	clrf	(convert_HSV@temp_613+3)^0,c
  7106   001294                     
  7107                           ;color.c: 281:                 temp *= 4;
  7108   001294  0E02               	movlw	2
  7109   001296                     u2695:
  7110   001296  90D8               	bcf	status,0,c
  7111   001298  3630               	rlcf	convert_HSV@temp_613^0,f,c
  7112   00129A  3631               	rlcf	(convert_HSV@temp_613+1)^0,f,c
  7113   00129C  3632               	rlcf	(convert_HSV@temp_613+2)^0,f,c
  7114   00129E  3633               	rlcf	(convert_HSV@temp_613+3)^0,f,c
  7115   0012A0  2EE8               	decfsz	wreg,f,c
  7116   0012A2  EF4B  F009         	goto	u2695
  7117   0012A6                     
  7118                           ;color.c: 282:                 temp += (unsigned long)(p2->R - p2->G);
  7119   0012A6  500F               	movf	convert_HSV@p2^0,w,c
  7120   0012A8  6ED9               	movwf	fsr2l,c
  7121   0012AA  6ADA               	clrf	fsr2h,c
  7122   0012AC  0E02               	movlw	2
  7123   0012AE  26D9               	addwf	fsr2l,f,c
  7124   0012B0  CFDE F010          	movff	postinc2,??_convert_HSV
  7125   0012B4  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7126   0012B8  500F               	movf	convert_HSV@p2^0,w,c
  7127   0012BA  6ED9               	movwf	fsr2l,c
  7128   0012BC  6ADA               	clrf	fsr2h,c
  7129   0012BE  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7130   0012C2  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7131   0012C6  5010               	movf	??_convert_HSV^0,w,c
  7132   0012C8  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7133   0012CA  6E14               	movwf	(??_convert_HSV+4)^0,c
  7134   0012CC  5011               	movf	(??_convert_HSV+1)^0,w,c
  7135   0012CE  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7136   0012D0  6E15               	movwf	(??_convert_HSV+5)^0,c
  7137   0012D2  5014               	movf	(??_convert_HSV+4)^0,w,c
  7138   0012D4  2630               	addwf	convert_HSV@temp_613^0,f,c
  7139   0012D6  5015               	movf	(??_convert_HSV+5)^0,w,c
  7140   0012D8  2231               	addwfc	(convert_HSV@temp_613+1)^0,f,c
  7141   0012DA  0E00               	movlw	0
  7142   0012DC  2232               	addwfc	(convert_HSV@temp_613+2)^0,f,c
  7143   0012DE  0E00               	movlw	0
  7144   0012E0  2233               	addwfc	(convert_HSV@temp_613+3)^0,f,c
  7145   0012E2                     
  7146                           ;color.c: 283:                 temp *= (unsigned long)hue_scale;
  7147   0012E2  C030  F001         	movff	convert_HSV@temp_613,___lmul@multiplier
  7148   0012E6  C031  F002         	movff	convert_HSV@temp_613+1,___lmul@multiplier+1
  7149   0012EA  C032  F003         	movff	convert_HSV@temp_613+2,___lmul@multiplier+2
  7150   0012EE  C033  F004         	movff	convert_HSV@temp_613+3,___lmul@multiplier+3
  7151   0012F2  0E3C               	movlw	60
  7152   0012F4  6E05               	movwf	___lmul@multiplicand^0,c
  7153   0012F6  0E00               	movlw	0
  7154   0012F8  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7155   0012FA  0E00               	movlw	0
  7156   0012FC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7157   0012FE  0E00               	movlw	0
  7158   001300  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7159   001302  EC49  F018         	call	___lmul	;wreg free
  7160   001306  C001  F030         	movff	?___lmul,convert_HSV@temp_613
  7161   00130A  C002  F031         	movff	?___lmul+1,convert_HSV@temp_613+1
  7162   00130E  C003  F032         	movff	?___lmul+2,convert_HSV@temp_613+2
  7163   001312  C004  F033         	movff	?___lmul+3,convert_HSV@temp_613+3
  7164   001316                     
  7165                           ;color.c: 284:                 temp /= (unsigned long)C;
  7166   001316  C030  F001         	movff	convert_HSV@temp_613,___lldiv@dividend
  7167   00131A  C031  F002         	movff	convert_HSV@temp_613+1,___lldiv@dividend+1
  7168   00131E  C032  F003         	movff	convert_HSV@temp_613+2,___lldiv@dividend+2
  7169   001322  C033  F004         	movff	convert_HSV@temp_613+3,___lldiv@dividend+3
  7170   001326  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7171   00132A  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7172   00132E  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7173   001330  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7174   001332  ECE1  F015         	call	___lldiv	;wreg free
  7175   001336  C001  F030         	movff	?___lldiv,convert_HSV@temp_613
  7176   00133A  C002  F031         	movff	?___lldiv+1,convert_HSV@temp_613+1
  7177   00133E  C003  F032         	movff	?___lldiv+2,convert_HSV@temp_613+2
  7178   001342  C004  F033         	movff	?___lldiv+3,convert_HSV@temp_613+3
  7179   001346                     
  7180                           ;color.c: 285:                 hue = (unsigned int)temp;
  7181   001346  C030  F01E         	movff	convert_HSV@temp_613,convert_HSV@hue
  7182   00134A  C031  F01F         	movff	convert_HSV@temp_613+1,convert_HSV@hue+1
  7183                           
  7184                           ;color.c: 286:             } else {
  7185   00134E  EF0E  F00A         	goto	l3613
  7186   001352                     l3601:
  7187                           
  7188                           ;color.c: 288:                 unsigned long temp;;color.c: 289:                 temp = 
      +                          (unsigned long)C;
  7189   001352  C040  F034         	movff	convert_HSV@C,convert_HSV@temp_614
  7190   001356  C041  F035         	movff	convert_HSV@C+1,convert_HSV@temp_614+1
  7191   00135A  6A36               	clrf	(convert_HSV@temp_614+2)^0,c
  7192   00135C  6A37               	clrf	(convert_HSV@temp_614+3)^0,c
  7193   00135E                     
  7194                           ;color.c: 290:                 temp *= 4;
  7195   00135E  0E02               	movlw	2
  7196   001360                     u2705:
  7197   001360  90D8               	bcf	status,0,c
  7198   001362  3634               	rlcf	convert_HSV@temp_614^0,f,c
  7199   001364  3635               	rlcf	(convert_HSV@temp_614+1)^0,f,c
  7200   001366  3636               	rlcf	(convert_HSV@temp_614+2)^0,f,c
  7201   001368  3637               	rlcf	(convert_HSV@temp_614+3)^0,f,c
  7202   00136A  2EE8               	decfsz	wreg,f,c
  7203   00136C  EFB0  F009         	goto	u2705
  7204   001370                     
  7205                           ;color.c: 291:                 temp -= (unsigned long)(p2->G - p2->R);
  7206   001370  500F               	movf	convert_HSV@p2^0,w,c
  7207   001372  6ED9               	movwf	fsr2l,c
  7208   001374  6ADA               	clrf	fsr2h,c
  7209   001376  CFDE F010          	movff	postinc2,??_convert_HSV
  7210   00137A  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7211   00137E  500F               	movf	convert_HSV@p2^0,w,c
  7212   001380  6ED9               	movwf	fsr2l,c
  7213   001382  6ADA               	clrf	fsr2h,c
  7214   001384  0E02               	movlw	2
  7215   001386  26D9               	addwf	fsr2l,f,c
  7216   001388  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7217   00138C  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7218   001390  5010               	movf	??_convert_HSV^0,w,c
  7219   001392  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7220   001394  6E14               	movwf	(??_convert_HSV+4)^0,c
  7221   001396  5011               	movf	(??_convert_HSV+1)^0,w,c
  7222   001398  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7223   00139A  6E15               	movwf	(??_convert_HSV+5)^0,c
  7224   00139C  6A16               	clrf	(??_convert_HSV+6)^0,c
  7225   00139E  6A17               	clrf	(??_convert_HSV+7)^0,c
  7226   0013A0  5014               	movf	(??_convert_HSV+4)^0,w,c
  7227   0013A2  5E34               	subwf	convert_HSV@temp_614^0,f,c
  7228   0013A4  5015               	movf	(??_convert_HSV+5)^0,w,c
  7229   0013A6  5A35               	subwfb	(convert_HSV@temp_614+1)^0,f,c
  7230   0013A8  5016               	movf	(??_convert_HSV+6)^0,w,c
  7231   0013AA  5A36               	subwfb	(convert_HSV@temp_614+2)^0,f,c
  7232   0013AC  5017               	movf	(??_convert_HSV+7)^0,w,c
  7233   0013AE  5A37               	subwfb	(convert_HSV@temp_614+3)^0,f,c
  7234   0013B0                     
  7235                           ;color.c: 292:                 temp *= (unsigned long)hue_scale;
  7236   0013B0  C034  F001         	movff	convert_HSV@temp_614,___lmul@multiplier
  7237   0013B4  C035  F002         	movff	convert_HSV@temp_614+1,___lmul@multiplier+1
  7238   0013B8  C036  F003         	movff	convert_HSV@temp_614+2,___lmul@multiplier+2
  7239   0013BC  C037  F004         	movff	convert_HSV@temp_614+3,___lmul@multiplier+3
  7240   0013C0  0E3C               	movlw	60
  7241   0013C2  6E05               	movwf	___lmul@multiplicand^0,c
  7242   0013C4  0E00               	movlw	0
  7243   0013C6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7244   0013C8  0E00               	movlw	0
  7245   0013CA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7246   0013CC  0E00               	movlw	0
  7247   0013CE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7248   0013D0  EC49  F018         	call	___lmul	;wreg free
  7249   0013D4  C001  F034         	movff	?___lmul,convert_HSV@temp_614
  7250   0013D8  C002  F035         	movff	?___lmul+1,convert_HSV@temp_614+1
  7251   0013DC  C003  F036         	movff	?___lmul+2,convert_HSV@temp_614+2
  7252   0013E0  C004  F037         	movff	?___lmul+3,convert_HSV@temp_614+3
  7253   0013E4                     
  7254                           ;color.c: 293:                 temp /= (unsigned long)C;
  7255   0013E4  C034  F001         	movff	convert_HSV@temp_614,___lldiv@dividend
  7256   0013E8  C035  F002         	movff	convert_HSV@temp_614+1,___lldiv@dividend+1
  7257   0013EC  C036  F003         	movff	convert_HSV@temp_614+2,___lldiv@dividend+2
  7258   0013F0  C037  F004         	movff	convert_HSV@temp_614+3,___lldiv@dividend+3
  7259   0013F4  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7260   0013F8  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7261   0013FC  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7262   0013FE  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7263   001400  ECE1  F015         	call	___lldiv	;wreg free
  7264   001404  C001  F034         	movff	?___lldiv,convert_HSV@temp_614
  7265   001408  C002  F035         	movff	?___lldiv+1,convert_HSV@temp_614+1
  7266   00140C  C003  F036         	movff	?___lldiv+2,convert_HSV@temp_614+2
  7267   001410  C004  F037         	movff	?___lldiv+3,convert_HSV@temp_614+3
  7268   001414                     
  7269                           ;color.c: 294:                 hue = (unsigned int)temp;
  7270   001414  C034  F01E         	movff	convert_HSV@temp_614,convert_HSV@hue
  7271   001418  C035  F01F         	movff	convert_HSV@temp_614+1,convert_HSV@hue+1
  7272   00141C                     l3613:
  7273                           
  7274                           ;color.c: 299:     if (M == 0) {
  7275   00141C  503E               	movf	convert_HSV@M^0,w,c
  7276   00141E  103F               	iorwf	(convert_HSV@M+1)^0,w,c
  7277   001420  A4D8               	btfss	status,2,c
  7278   001422  EF15  F00A         	goto	u2711
  7279   001426  EF17  F00A         	goto	u2710
  7280   00142A                     u2711:
  7281   00142A  EF1D  F00A         	goto	l3617
  7282   00142E                     u2710:
  7283   00142E                     
  7284                           ;color.c: 300:         sat = 0;
  7285   00142E  0E00               	movlw	0
  7286   001430  6E1D               	movwf	(convert_HSV@sat+1)^0,c
  7287   001432  0E00               	movlw	0
  7288   001434  6E1C               	movwf	convert_HSV@sat^0,c
  7289                           
  7290                           ;color.c: 301:     } else {
  7291   001436  EF59  F00A         	goto	l3625
  7292   00143A                     l3617:
  7293                           
  7294                           ;color.c: 303:         unsigned long temp;;color.c: 304:         temp = (unsigned long)C
      +                          ;
  7295   00143A  C040  F020         	movff	convert_HSV@C,convert_HSV@temp_615
  7296   00143E  C041  F021         	movff	convert_HSV@C+1,convert_HSV@temp_615+1
  7297   001442  6A22               	clrf	(convert_HSV@temp_615+2)^0,c
  7298   001444  6A23               	clrf	(convert_HSV@temp_615+3)^0,c
  7299   001446                     
  7300                           ;color.c: 305:         temp *= (unsigned long)sat_scale;
  7301   001446  C020  F001         	movff	convert_HSV@temp_615,___lmul@multiplier
  7302   00144A  C021  F002         	movff	convert_HSV@temp_615+1,___lmul@multiplier+1
  7303   00144E  C022  F003         	movff	convert_HSV@temp_615+2,___lmul@multiplier+2
  7304   001452  C023  F004         	movff	convert_HSV@temp_615+3,___lmul@multiplier+3
  7305   001456  0E64               	movlw	100
  7306   001458  6E05               	movwf	___lmul@multiplicand^0,c
  7307   00145A  0E00               	movlw	0
  7308   00145C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7309   00145E  0E00               	movlw	0
  7310   001460  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7311   001462  0E00               	movlw	0
  7312   001464  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7313   001466  EC49  F018         	call	___lmul	;wreg free
  7314   00146A  C001  F020         	movff	?___lmul,convert_HSV@temp_615
  7315   00146E  C002  F021         	movff	?___lmul+1,convert_HSV@temp_615+1
  7316   001472  C003  F022         	movff	?___lmul+2,convert_HSV@temp_615+2
  7317   001476  C004  F023         	movff	?___lmul+3,convert_HSV@temp_615+3
  7318   00147A                     
  7319                           ;color.c: 306:         temp /= (unsigned long)M;
  7320   00147A  C020  F001         	movff	convert_HSV@temp_615,___lldiv@dividend
  7321   00147E  C021  F002         	movff	convert_HSV@temp_615+1,___lldiv@dividend+1
  7322   001482  C022  F003         	movff	convert_HSV@temp_615+2,___lldiv@dividend+2
  7323   001486  C023  F004         	movff	convert_HSV@temp_615+3,___lldiv@dividend+3
  7324   00148A  C03E  F005         	movff	convert_HSV@M,___lldiv@divisor
  7325   00148E  C03F  F006         	movff	convert_HSV@M+1,___lldiv@divisor+1
  7326   001492  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7327   001494  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7328   001496  ECE1  F015         	call	___lldiv	;wreg free
  7329   00149A  C001  F020         	movff	?___lldiv,convert_HSV@temp_615
  7330   00149E  C002  F021         	movff	?___lldiv+1,convert_HSV@temp_615+1
  7331   0014A2  C003  F022         	movff	?___lldiv+2,convert_HSV@temp_615+2
  7332   0014A6  C004  F023         	movff	?___lldiv+3,convert_HSV@temp_615+3
  7333   0014AA                     
  7334                           ;color.c: 307:         sat = (unsigned int)temp;
  7335   0014AA  C020  F01C         	movff	convert_HSV@temp_615,convert_HSV@sat
  7336   0014AE  C021  F01D         	movff	convert_HSV@temp_615+1,convert_HSV@sat+1
  7337   0014B2                     l3625:
  7338                           
  7339                           ;color.c: 310:     p1->H = hue;
  7340   0014B2  500E               	movf	convert_HSV@p1^0,w,c
  7341   0014B4  6ED9               	movwf	fsr2l,c
  7342   0014B6  6ADA               	clrf	fsr2h,c
  7343   0014B8  C01E  FFDE         	movff	convert_HSV@hue,postinc2
  7344   0014BC  C01F  FFDD         	movff	convert_HSV@hue+1,postdec2
  7345   0014C0                     
  7346                           ;color.c: 311:     p1->S = sat;
  7347   0014C0  500E               	movf	convert_HSV@p1^0,w,c
  7348   0014C2  6ED9               	movwf	fsr2l,c
  7349   0014C4  6ADA               	clrf	fsr2h,c
  7350   0014C6  0E02               	movlw	2
  7351   0014C8  26D9               	addwf	fsr2l,f,c
  7352   0014CA  C01C  FFDE         	movff	convert_HSV@sat,postinc2
  7353   0014CE  C01D  FFDD         	movff	convert_HSV@sat+1,postdec2
  7354   0014D2                     
  7355                           ;color.c: 312:     p1->V = M;
  7356   0014D2  500E               	movf	convert_HSV@p1^0,w,c
  7357   0014D4  6ED9               	movwf	fsr2l,c
  7358   0014D6  6ADA               	clrf	fsr2h,c
  7359   0014D8  0E04               	movlw	4
  7360   0014DA  26D9               	addwf	fsr2l,f,c
  7361   0014DC  C03E  FFDE         	movff	convert_HSV@M,postinc2
  7362   0014E0  C03F  FFDD         	movff	convert_HSV@M+1,postdec2
  7363   0014E4  0012               	return		;funcret
  7364   0014E6                     __end_of_convert_HSV:
  7365                           	callstack 0
  7366                           
  7367 ;; *************** function _min_RGB *****************
  7368 ;; Defined at:
  7369 ;;		line 188 in file "color.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  7372 ;;		 -> main@RGBC_colour(8), 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  min_val         2    4[COMRAM] unsigned int 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  2    0[COMRAM] unsigned int 
  7377 ;; Registers used:
  7378 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7384 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7385 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7386 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7387 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7388 ;;Total ram usage:        6 bytes
  7389 ;; Hardware stack levels used: 1
  7390 ;; Hardware stack levels required when called: 1
  7391 ;; This function calls:
  7392 ;;		Nothing
  7393 ;; This function is called by:
  7394 ;;		_convert_HSV
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text45
  7399   002F26                     __ptext45:
  7400                           	callstack 0
  7401   002F26                     _min_RGB:
  7402                           	callstack 27
  7403   002F26                     
  7404                           ;color.c: 188: unsigned int min_RGB(struct RGBC_val *p);color.c: 189: {;color.c: 190:   
      +                            unsigned int min_val = p->R;
  7405   002F26  5001               	movf	min_RGB@p^0,w,c
  7406   002F28  6ED9               	movwf	fsr2l,c
  7407   002F2A  6ADA               	clrf	fsr2h,c
  7408   002F2C  CFDE F005          	movff	postinc2,min_RGB@min_val
  7409   002F30  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7410   002F34                     
  7411                           ;color.c: 191:     if (p->G < min_val) {min_val = p->G;}
  7412   002F34  5001               	movf	min_RGB@p^0,w,c
  7413   002F36  6ED9               	movwf	fsr2l,c
  7414   002F38  6ADA               	clrf	fsr2h,c
  7415   002F3A  0E02               	movlw	2
  7416   002F3C  26D9               	addwf	fsr2l,f,c
  7417   002F3E  5005               	movf	min_RGB@min_val^0,w,c
  7418   002F40  5CDE               	subwf	postinc2,w,c
  7419   002F42  5006               	movf	(min_RGB@min_val+1)^0,w,c
  7420   002F44  58DE               	subwfb	postinc2,w,c
  7421   002F46  B0D8               	btfsc	status,0,c
  7422   002F48  EFA8  F017         	goto	u2021
  7423   002F4C  EFAA  F017         	goto	u2020
  7424   002F50                     u2021:
  7425   002F50  EFB3  F017         	goto	l107
  7426   002F54                     u2020:
  7427   002F54  5001               	movf	min_RGB@p^0,w,c
  7428   002F56  6ED9               	movwf	fsr2l,c
  7429   002F58  6ADA               	clrf	fsr2h,c
  7430   002F5A  0E02               	movlw	2
  7431   002F5C  26D9               	addwf	fsr2l,f,c
  7432   002F5E  CFDE F005          	movff	postinc2,min_RGB@min_val
  7433   002F62  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7434   002F66                     l107:
  7435                           
  7436                           ;color.c: 192:     if (p->B < min_val) {min_val = p->B;}
  7437   002F66  5001               	movf	min_RGB@p^0,w,c
  7438   002F68  6ED9               	movwf	fsr2l,c
  7439   002F6A  6ADA               	clrf	fsr2h,c
  7440   002F6C  0E04               	movlw	4
  7441   002F6E  26D9               	addwf	fsr2l,f,c
  7442   002F70  5005               	movf	min_RGB@min_val^0,w,c
  7443   002F72  5CDE               	subwf	postinc2,w,c
  7444   002F74  5006               	movf	(min_RGB@min_val+1)^0,w,c
  7445   002F76  58DE               	subwfb	postinc2,w,c
  7446   002F78  B0D8               	btfsc	status,0,c
  7447   002F7A  EFC1  F017         	goto	u2031
  7448   002F7E  EFC3  F017         	goto	u2030
  7449   002F82                     u2031:
  7450   002F82  EFCC  F017         	goto	l3101
  7451   002F86                     u2030:
  7452   002F86  5001               	movf	min_RGB@p^0,w,c
  7453   002F88  6ED9               	movwf	fsr2l,c
  7454   002F8A  6ADA               	clrf	fsr2h,c
  7455   002F8C  0E04               	movlw	4
  7456   002F8E  26D9               	addwf	fsr2l,f,c
  7457   002F90  CFDE F005          	movff	postinc2,min_RGB@min_val
  7458   002F94  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7459   002F98                     l3101:
  7460                           
  7461                           ;color.c: 193:     return min_val;
  7462   002F98  C005  F001         	movff	min_RGB@min_val,?_min_RGB
  7463   002F9C  C006  F002         	movff	min_RGB@min_val+1,?_min_RGB+1
  7464   002FA0  0012               	return		;funcret
  7465   002FA2                     __end_of_min_RGB:
  7466                           	callstack 0
  7467                           
  7468 ;; *************** function _max_RGB *****************
  7469 ;; Defined at:
  7470 ;;		line 177 in file "color.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  7473 ;;		 -> main@RGBC_colour(8), 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  max_val         2    4[COMRAM] unsigned int 
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  2    0[COMRAM] unsigned int 
  7478 ;; Registers used:
  7479 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7487 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7488 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7489 ;;Total ram usage:        6 bytes
  7490 ;; Hardware stack levels used: 1
  7491 ;; Hardware stack levels required when called: 1
  7492 ;; This function calls:
  7493 ;;		Nothing
  7494 ;; This function is called by:
  7495 ;;		_convert_HSV
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           	psect	text46
  7500   002FA2                     __ptext46:
  7501                           	callstack 0
  7502   002FA2                     _max_RGB:
  7503                           	callstack 27
  7504   002FA2                     
  7505                           ;color.c: 177: unsigned int max_RGB(struct RGBC_val *p);color.c: 178: {;color.c: 179:   
      +                            unsigned int max_val = p->R;
  7506   002FA2  5001               	movf	max_RGB@p^0,w,c
  7507   002FA4  6ED9               	movwf	fsr2l,c
  7508   002FA6  6ADA               	clrf	fsr2h,c
  7509   002FA8  CFDE F005          	movff	postinc2,max_RGB@max_val
  7510   002FAC  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7511   002FB0                     
  7512                           ;color.c: 180:     if (p->G > max_val) {max_val = p->G;}
  7513   002FB0  5001               	movf	max_RGB@p^0,w,c
  7514   002FB2  6ED9               	movwf	fsr2l,c
  7515   002FB4  6ADA               	clrf	fsr2h,c
  7516   002FB6  0E02               	movlw	2
  7517   002FB8  26D9               	addwf	fsr2l,f,c
  7518   002FBA  50DE               	movf	postinc2,w,c
  7519   002FBC  5C05               	subwf	max_RGB@max_val^0,w,c
  7520   002FBE  50DE               	movf	postinc2,w,c
  7521   002FC0  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  7522   002FC2  B0D8               	btfsc	status,0,c
  7523   002FC4  EFE6  F017         	goto	u2001
  7524   002FC8  EFE8  F017         	goto	u2000
  7525   002FCC                     u2001:
  7526   002FCC  EFF1  F017         	goto	l102
  7527   002FD0                     u2000:
  7528   002FD0  5001               	movf	max_RGB@p^0,w,c
  7529   002FD2  6ED9               	movwf	fsr2l,c
  7530   002FD4  6ADA               	clrf	fsr2h,c
  7531   002FD6  0E02               	movlw	2
  7532   002FD8  26D9               	addwf	fsr2l,f,c
  7533   002FDA  CFDE F005          	movff	postinc2,max_RGB@max_val
  7534   002FDE  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7535   002FE2                     l102:
  7536                           
  7537                           ;color.c: 181:     if (p->B > max_val) {max_val = p->B;}
  7538   002FE2  5001               	movf	max_RGB@p^0,w,c
  7539   002FE4  6ED9               	movwf	fsr2l,c
  7540   002FE6  6ADA               	clrf	fsr2h,c
  7541   002FE8  0E04               	movlw	4
  7542   002FEA  26D9               	addwf	fsr2l,f,c
  7543   002FEC  50DE               	movf	postinc2,w,c
  7544   002FEE  5C05               	subwf	max_RGB@max_val^0,w,c
  7545   002FF0  50DE               	movf	postinc2,w,c
  7546   002FF2  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  7547   002FF4  B0D8               	btfsc	status,0,c
  7548   002FF6  EFFF  F017         	goto	u2011
  7549   002FFA  EF01  F018         	goto	u2010
  7550   002FFE                     u2011:
  7551   002FFE  EF0A  F018         	goto	l3089
  7552   003002                     u2010:
  7553   003002  5001               	movf	max_RGB@p^0,w,c
  7554   003004  6ED9               	movwf	fsr2l,c
  7555   003006  6ADA               	clrf	fsr2h,c
  7556   003008  0E04               	movlw	4
  7557   00300A  26D9               	addwf	fsr2l,f,c
  7558   00300C  CFDE F005          	movff	postinc2,max_RGB@max_val
  7559   003010  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7560   003014                     l3089:
  7561                           
  7562                           ;color.c: 182:     return max_val;
  7563   003014  C005  F001         	movff	max_RGB@max_val,?_max_RGB
  7564   003018  C006  F002         	movff	max_RGB@max_val+1,?_max_RGB+1
  7565   00301C  0012               	return		;funcret
  7566   00301E                     __end_of_max_RGB:
  7567                           	callstack 0
  7568                           
  7569 ;; *************** function ___lmul *****************
  7570 ;; Defined at:
  7571 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;  multiplier      4    0[COMRAM] unsigned long 
  7574 ;;  multiplicand    4    4[COMRAM] unsigned long 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;  product         4    8[COMRAM] unsigned long 
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  4    0[COMRAM] unsigned long 
  7579 ;; Registers used:
  7580 ;;		wreg, status,2, status,0
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7586 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7587 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7589 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7590 ;;Total ram usage:       12 bytes
  7591 ;; Hardware stack levels used: 1
  7592 ;; Hardware stack levels required when called: 1
  7593 ;; This function calls:
  7594 ;;		Nothing
  7595 ;; This function is called by:
  7596 ;;		_convert_HSV
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	text47
  7601   003092                     __ptext47:
  7602                           	callstack 0
  7603   003092                     ___lmul:
  7604                           	callstack 27
  7605   003092  0E00               	movlw	0
  7606   003094  6E09               	movwf	___lmul@product^0,c
  7607   003096  0E00               	movlw	0
  7608   003098  6E0A               	movwf	(___lmul@product+1)^0,c
  7609   00309A  0E00               	movlw	0
  7610   00309C  6E0B               	movwf	(___lmul@product+2)^0,c
  7611   00309E  0E00               	movlw	0
  7612   0030A0  6E0C               	movwf	(___lmul@product+3)^0,c
  7613   0030A2                     l3211:
  7614   0030A2  A001               	btfss	___lmul@multiplier^0,0,c
  7615   0030A4  EF56  F018         	goto	u2041
  7616   0030A8  EF58  F018         	goto	u2040
  7617   0030AC                     u2041:
  7618   0030AC  EF60  F018         	goto	l3215
  7619   0030B0                     u2040:
  7620   0030B0  5005               	movf	___lmul@multiplicand^0,w,c
  7621   0030B2  2609               	addwf	___lmul@product^0,f,c
  7622   0030B4  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  7623   0030B6  220A               	addwfc	(___lmul@product+1)^0,f,c
  7624   0030B8  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  7625   0030BA  220B               	addwfc	(___lmul@product+2)^0,f,c
  7626   0030BC  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  7627   0030BE  220C               	addwfc	(___lmul@product+3)^0,f,c
  7628   0030C0                     l3215:
  7629   0030C0  90D8               	bcf	status,0,c
  7630   0030C2  3605               	rlcf	___lmul@multiplicand^0,f,c
  7631   0030C4  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  7632   0030C6  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  7633   0030C8  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  7634   0030CA  90D8               	bcf	status,0,c
  7635   0030CC  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  7636   0030CE  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  7637   0030D0  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  7638   0030D2  3201               	rrcf	___lmul@multiplier^0,f,c
  7639   0030D4  5001               	movf	___lmul@multiplier^0,w,c
  7640   0030D6  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  7641   0030D8  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  7642   0030DA  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  7643   0030DC  A4D8               	btfss	status,2,c
  7644   0030DE  EF73  F018         	goto	u2051
  7645   0030E2  EF75  F018         	goto	u2050
  7646   0030E6                     u2051:
  7647   0030E6  EF51  F018         	goto	l3211
  7648   0030EA                     u2050:
  7649   0030EA  C009  F001         	movff	___lmul@product,?___lmul
  7650   0030EE  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  7651   0030F2  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  7652   0030F6  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  7653   0030FA  0012               	return		;funcret
  7654   0030FC                     __end_of___lmul:
  7655                           	callstack 0
  7656                           
  7657 ;; *************** function _colour_to_key *****************
  7658 ;; Defined at:
  7659 ;;		line 320 in file "color.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  p1              1    0[COMRAM] PTR struct HSV_val
  7662 ;;		 -> main@HSV_colour(6), 
  7663 ;;  p2              1    1[COMRAM] PTR struct RGBC_val
  7664 ;;		 -> main@RGBC_colour(8), 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  key             1    4[COMRAM] unsigned char 
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      unsigned char 
  7669 ;; Registers used:
  7670 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7678 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7679 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7680 ;;Total ram usage:        5 bytes
  7681 ;; Hardware stack levels used: 1
  7682 ;; Hardware stack levels required when called: 1
  7683 ;; This function calls:
  7684 ;;		Nothing
  7685 ;; This function is called by:
  7686 ;;		_forward_navigation
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text48
  7691   0014E6                     __ptext48:
  7692                           	callstack 0
  7693   0014E6                     _colour_to_key:
  7694                           	callstack 28
  7695   0014E6                     
  7696                           ;color.c: 320: unsigned char colour_to_key(struct HSV_val *p1, struct RGBC_val *p2);colo
      +                          r.c: 321: {;color.c: 323:     unsigned char key = 0;
  7697   0014E6  0E00               	movlw	0
  7698   0014E8  6E05               	movwf	colour_to_key@key^0,c
  7699   0014EA                     
  7700                           ;color.c: 326:     if ( ((293 <= p1->H) && (p1->H <= 360)) &&
  7701   0014EA  5001               	movf	colour_to_key@p1^0,w,c
  7702   0014EC  6ED9               	movwf	fsr2l,c
  7703   0014EE  6ADA               	clrf	fsr2h,c
  7704   0014F0  0E25               	movlw	37
  7705   0014F2  5CDE               	subwf	postinc2,w,c
  7706   0014F4  0E01               	movlw	1
  7707   0014F6  58DE               	subwfb	postinc2,w,c
  7708   0014F8  A0D8               	btfss	status,0,c
  7709   0014FA  EF81  F00A         	goto	u2721
  7710   0014FE  EF83  F00A         	goto	u2720
  7711   001502                     u2721:
  7712   001502  EFB5  F00A         	goto	l3643
  7713   001506                     u2720:
  7714   001506  5001               	movf	colour_to_key@p1^0,w,c
  7715   001508  6ED9               	movwf	fsr2l,c
  7716   00150A  6ADA               	clrf	fsr2h,c
  7717   00150C  0E69               	movlw	105
  7718   00150E  5CDE               	subwf	postinc2,w,c
  7719   001510  0E01               	movlw	1
  7720   001512  58DE               	subwfb	postinc2,w,c
  7721   001514  B0D8               	btfsc	status,0,c
  7722   001516  EF8F  F00A         	goto	u2731
  7723   00151A  EF91  F00A         	goto	u2730
  7724   00151E                     u2731:
  7725   00151E  EFB5  F00A         	goto	l3643
  7726   001522                     u2730:
  7727   001522  5001               	movf	colour_to_key@p1^0,w,c
  7728   001524  6ED9               	movwf	fsr2l,c
  7729   001526  6ADA               	clrf	fsr2h,c
  7730   001528  0E02               	movlw	2
  7731   00152A  26D9               	addwf	fsr2l,f,c
  7732   00152C  0E01               	movlw	1
  7733   00152E  50DB               	movf	plusw2,w,c
  7734   001530  E109               	bnz	u2740
  7735   001532  0E2E               	movlw	46
  7736   001534  5CDE               	subwf	postinc2,w,c
  7737   001536  A0D8               	btfss	status,0,c
  7738   001538  EFA0  F00A         	goto	u2741
  7739   00153C  EFA2  F00A         	goto	u2740
  7740   001540                     u2741:
  7741   001540  EFB5  F00A         	goto	l3643
  7742   001544                     u2740:
  7743   001544  5001               	movf	colour_to_key@p1^0,w,c
  7744   001546  6ED9               	movwf	fsr2l,c
  7745   001548  6ADA               	clrf	fsr2h,c
  7746   00154A  0E02               	movlw	2
  7747   00154C  26D9               	addwf	fsr2l,f,c
  7748   00154E  0E01               	movlw	1
  7749   001550  50DB               	movf	plusw2,w,c
  7750   001552  E107               	bnz	u2751
  7751   001554  0E5B               	movlw	91
  7752   001556  5CDE               	subwf	postinc2,w,c
  7753   001558  B0D8               	btfsc	status,0,c
  7754   00155A  EFB1  F00A         	goto	u2751
  7755   00155E  EFB3  F00A         	goto	u2750
  7756   001562                     u2751:
  7757   001562  EFB5  F00A         	goto	l3643
  7758   001566                     u2750:
  7759   001566                     
  7760                           ;color.c: 327:          ((46 <= p1->S) && (p1->S <= 90))) {;color.c: 328:         key = 
      +                          1;
  7761   001566  0E01               	movlw	1
  7762   001568  6E05               	movwf	colour_to_key@key^0,c
  7763   00156A                     l3643:
  7764                           
  7765                           ;color.c: 332:     if ( ((113 <= p1->H) && (p1->H <= 153)) &&
  7766   00156A  5001               	movf	colour_to_key@p1^0,w,c
  7767   00156C  6ED9               	movwf	fsr2l,c
  7768   00156E  6ADA               	clrf	fsr2h,c
  7769   001570  0E01               	movlw	1
  7770   001572  50DB               	movf	plusw2,w,c
  7771   001574  E109               	bnz	u2760
  7772   001576  0E71               	movlw	113
  7773   001578  5CDE               	subwf	postinc2,w,c
  7774   00157A  A0D8               	btfss	status,0,c
  7775   00157C  EFC2  F00A         	goto	u2761
  7776   001580  EFC4  F00A         	goto	u2760
  7777   001584                     u2761:
  7778   001584  EFF7  F00A         	goto	l3653
  7779   001588                     u2760:
  7780   001588  5001               	movf	colour_to_key@p1^0,w,c
  7781   00158A  6ED9               	movwf	fsr2l,c
  7782   00158C  6ADA               	clrf	fsr2h,c
  7783   00158E  0E01               	movlw	1
  7784   001590  50DB               	movf	plusw2,w,c
  7785   001592  E107               	bnz	u2771
  7786   001594  0E9A               	movlw	154
  7787   001596  5CDE               	subwf	postinc2,w,c
  7788   001598  B0D8               	btfsc	status,0,c
  7789   00159A  EFD1  F00A         	goto	u2771
  7790   00159E  EFD3  F00A         	goto	u2770
  7791   0015A2                     u2771:
  7792   0015A2  EFF7  F00A         	goto	l3653
  7793   0015A6                     u2770:
  7794   0015A6  5001               	movf	colour_to_key@p1^0,w,c
  7795   0015A8  6ED9               	movwf	fsr2l,c
  7796   0015AA  6ADA               	clrf	fsr2h,c
  7797   0015AC  0E02               	movlw	2
  7798   0015AE  26D9               	addwf	fsr2l,f,c
  7799   0015B0  0E01               	movlw	1
  7800   0015B2  50DB               	movf	plusw2,w,c
  7801   0015B4  E109               	bnz	u2780
  7802   0015B6  0E0D               	movlw	13
  7803   0015B8  5CDE               	subwf	postinc2,w,c
  7804   0015BA  A0D8               	btfss	status,0,c
  7805   0015BC  EFE2  F00A         	goto	u2781
  7806   0015C0  EFE4  F00A         	goto	u2780
  7807   0015C4                     u2781:
  7808   0015C4  EFF7  F00A         	goto	l3653
  7809   0015C8                     u2780:
  7810   0015C8  5001               	movf	colour_to_key@p1^0,w,c
  7811   0015CA  6ED9               	movwf	fsr2l,c
  7812   0015CC  6ADA               	clrf	fsr2h,c
  7813   0015CE  0E02               	movlw	2
  7814   0015D0  26D9               	addwf	fsr2l,f,c
  7815   0015D2  0E01               	movlw	1
  7816   0015D4  50DB               	movf	plusw2,w,c
  7817   0015D6  E107               	bnz	u2791
  7818   0015D8  0E2C               	movlw	44
  7819   0015DA  5CDE               	subwf	postinc2,w,c
  7820   0015DC  B0D8               	btfsc	status,0,c
  7821   0015DE  EFF3  F00A         	goto	u2791
  7822   0015E2  EFF5  F00A         	goto	u2790
  7823   0015E6                     u2791:
  7824   0015E6  EFF7  F00A         	goto	l3653
  7825   0015EA                     u2790:
  7826   0015EA                     
  7827                           ;color.c: 333:          ((13 <= p1->S) && (p1->S <= 43))) {;color.c: 334:         key = 
      +                          2;
  7828   0015EA  0E02               	movlw	2
  7829   0015EC  6E05               	movwf	colour_to_key@key^0,c
  7830   0015EE                     l3653:
  7831                           
  7832                           ;color.c: 338:     if ( ((180 <= p1->H) && (p1->H <= 244)) &&
  7833   0015EE  5001               	movf	colour_to_key@p1^0,w,c
  7834   0015F0  6ED9               	movwf	fsr2l,c
  7835   0015F2  6ADA               	clrf	fsr2h,c
  7836   0015F4  0E01               	movlw	1
  7837   0015F6  50DB               	movf	plusw2,w,c
  7838   0015F8  E109               	bnz	u2800
  7839   0015FA  0EB4               	movlw	180
  7840   0015FC  5CDE               	subwf	postinc2,w,c
  7841   0015FE  A0D8               	btfss	status,0,c
  7842   001600  EF04  F00B         	goto	u2801
  7843   001604  EF06  F00B         	goto	u2800
  7844   001608                     u2801:
  7845   001608  EF39  F00B         	goto	l3663
  7846   00160C                     u2800:
  7847   00160C  5001               	movf	colour_to_key@p1^0,w,c
  7848   00160E  6ED9               	movwf	fsr2l,c
  7849   001610  6ADA               	clrf	fsr2h,c
  7850   001612  0E01               	movlw	1
  7851   001614  50DB               	movf	plusw2,w,c
  7852   001616  E107               	bnz	u2811
  7853   001618  0EF5               	movlw	245
  7854   00161A  5CDE               	subwf	postinc2,w,c
  7855   00161C  B0D8               	btfsc	status,0,c
  7856   00161E  EF13  F00B         	goto	u2811
  7857   001622  EF15  F00B         	goto	u2810
  7858   001626                     u2811:
  7859   001626  EF39  F00B         	goto	l3663
  7860   00162A                     u2810:
  7861   00162A  5001               	movf	colour_to_key@p1^0,w,c
  7862   00162C  6ED9               	movwf	fsr2l,c
  7863   00162E  6ADA               	clrf	fsr2h,c
  7864   001630  0E02               	movlw	2
  7865   001632  26D9               	addwf	fsr2l,f,c
  7866   001634  0E01               	movlw	1
  7867   001636  50DB               	movf	plusw2,w,c
  7868   001638  E109               	bnz	u2820
  7869   00163A  0E0D               	movlw	13
  7870   00163C  5CDE               	subwf	postinc2,w,c
  7871   00163E  A0D8               	btfss	status,0,c
  7872   001640  EF24  F00B         	goto	u2821
  7873   001644  EF26  F00B         	goto	u2820
  7874   001648                     u2821:
  7875   001648  EF39  F00B         	goto	l3663
  7876   00164C                     u2820:
  7877   00164C  5001               	movf	colour_to_key@p1^0,w,c
  7878   00164E  6ED9               	movwf	fsr2l,c
  7879   001650  6ADA               	clrf	fsr2h,c
  7880   001652  0E02               	movlw	2
  7881   001654  26D9               	addwf	fsr2l,f,c
  7882   001656  0E01               	movlw	1
  7883   001658  50DB               	movf	plusw2,w,c
  7884   00165A  E107               	bnz	u2831
  7885   00165C  0E39               	movlw	57
  7886   00165E  5CDE               	subwf	postinc2,w,c
  7887   001660  B0D8               	btfsc	status,0,c
  7888   001662  EF35  F00B         	goto	u2831
  7889   001666  EF37  F00B         	goto	u2830
  7890   00166A                     u2831:
  7891   00166A  EF39  F00B         	goto	l3663
  7892   00166E                     u2830:
  7893   00166E                     
  7894                           ;color.c: 339:          ((13 <= p1->S) && (p1->S <= 56))) {;color.c: 340:         key = 
      +                          3;
  7895   00166E  0E03               	movlw	3
  7896   001670  6E05               	movwf	colour_to_key@key^0,c
  7897   001672                     l3663:
  7898                           
  7899                           ;color.c: 344:     if ( ((10 <= p1->H) && (p1->H <= 31)) &&
  7900   001672  5001               	movf	colour_to_key@p1^0,w,c
  7901   001674  6ED9               	movwf	fsr2l,c
  7902   001676  6ADA               	clrf	fsr2h,c
  7903   001678  0E01               	movlw	1
  7904   00167A  50DB               	movf	plusw2,w,c
  7905   00167C  E109               	bnz	u2840
  7906   00167E  0E0A               	movlw	10
  7907   001680  5CDE               	subwf	postinc2,w,c
  7908   001682  A0D8               	btfss	status,0,c
  7909   001684  EF46  F00B         	goto	u2841
  7910   001688  EF48  F00B         	goto	u2840
  7911   00168C                     u2841:
  7912   00168C  EF7B  F00B         	goto	l3673
  7913   001690                     u2840:
  7914   001690  5001               	movf	colour_to_key@p1^0,w,c
  7915   001692  6ED9               	movwf	fsr2l,c
  7916   001694  6ADA               	clrf	fsr2h,c
  7917   001696  0E01               	movlw	1
  7918   001698  50DB               	movf	plusw2,w,c
  7919   00169A  E107               	bnz	u2851
  7920   00169C  0E20               	movlw	32
  7921   00169E  5CDE               	subwf	postinc2,w,c
  7922   0016A0  B0D8               	btfsc	status,0,c
  7923   0016A2  EF55  F00B         	goto	u2851
  7924   0016A6  EF57  F00B         	goto	u2850
  7925   0016AA                     u2851:
  7926   0016AA  EF7B  F00B         	goto	l3673
  7927   0016AE                     u2850:
  7928   0016AE  5001               	movf	colour_to_key@p1^0,w,c
  7929   0016B0  6ED9               	movwf	fsr2l,c
  7930   0016B2  6ADA               	clrf	fsr2h,c
  7931   0016B4  0E02               	movlw	2
  7932   0016B6  26D9               	addwf	fsr2l,f,c
  7933   0016B8  0E01               	movlw	1
  7934   0016BA  50DB               	movf	plusw2,w,c
  7935   0016BC  E109               	bnz	u2860
  7936   0016BE  0E11               	movlw	17
  7937   0016C0  5CDE               	subwf	postinc2,w,c
  7938   0016C2  A0D8               	btfss	status,0,c
  7939   0016C4  EF66  F00B         	goto	u2861
  7940   0016C8  EF68  F00B         	goto	u2860
  7941   0016CC                     u2861:
  7942   0016CC  EF7B  F00B         	goto	l3673
  7943   0016D0                     u2860:
  7944   0016D0  5001               	movf	colour_to_key@p1^0,w,c
  7945   0016D2  6ED9               	movwf	fsr2l,c
  7946   0016D4  6ADA               	clrf	fsr2h,c
  7947   0016D6  0E02               	movlw	2
  7948   0016D8  26D9               	addwf	fsr2l,f,c
  7949   0016DA  0E01               	movlw	1
  7950   0016DC  50DB               	movf	plusw2,w,c
  7951   0016DE  E107               	bnz	u2871
  7952   0016E0  0E21               	movlw	33
  7953   0016E2  5CDE               	subwf	postinc2,w,c
  7954   0016E4  B0D8               	btfsc	status,0,c
  7955   0016E6  EF77  F00B         	goto	u2871
  7956   0016EA  EF79  F00B         	goto	u2870
  7957   0016EE                     u2871:
  7958   0016EE  EF7B  F00B         	goto	l3673
  7959   0016F2                     u2870:
  7960   0016F2                     
  7961                           ;color.c: 345:          ((17 <= p1->S) && (p1->S <= 32))) {;color.c: 346:         key = 
      +                          4;
  7962   0016F2  0E04               	movlw	4
  7963   0016F4  6E05               	movwf	colour_to_key@key^0,c
  7964   0016F6                     l3673:
  7965                           
  7966                           ;color.c: 350:     if ( ((279 <= p1->H) && (p1->H <= 360)) &&
  7967   0016F6  5001               	movf	colour_to_key@p1^0,w,c
  7968   0016F8  6ED9               	movwf	fsr2l,c
  7969   0016FA  6ADA               	clrf	fsr2h,c
  7970   0016FC  0E17               	movlw	23
  7971   0016FE  5CDE               	subwf	postinc2,w,c
  7972   001700  0E01               	movlw	1
  7973   001702  58DE               	subwfb	postinc2,w,c
  7974   001704  A0D8               	btfss	status,0,c
  7975   001706  EF87  F00B         	goto	u2881
  7976   00170A  EF89  F00B         	goto	u2880
  7977   00170E                     u2881:
  7978   00170E  EFBB  F00B         	goto	l3683
  7979   001712                     u2880:
  7980   001712  5001               	movf	colour_to_key@p1^0,w,c
  7981   001714  6ED9               	movwf	fsr2l,c
  7982   001716  6ADA               	clrf	fsr2h,c
  7983   001718  0E69               	movlw	105
  7984   00171A  5CDE               	subwf	postinc2,w,c
  7985   00171C  0E01               	movlw	1
  7986   00171E  58DE               	subwfb	postinc2,w,c
  7987   001720  B0D8               	btfsc	status,0,c
  7988   001722  EF95  F00B         	goto	u2891
  7989   001726  EF97  F00B         	goto	u2890
  7990   00172A                     u2891:
  7991   00172A  EFBB  F00B         	goto	l3683
  7992   00172E                     u2890:
  7993   00172E  5001               	movf	colour_to_key@p1^0,w,c
  7994   001730  6ED9               	movwf	fsr2l,c
  7995   001732  6ADA               	clrf	fsr2h,c
  7996   001734  0E02               	movlw	2
  7997   001736  26D9               	addwf	fsr2l,f,c
  7998   001738  0E01               	movlw	1
  7999   00173A  50DB               	movf	plusw2,w,c
  8000   00173C  E109               	bnz	u2900
  8001   00173E  0E0B               	movlw	11
  8002   001740  5CDE               	subwf	postinc2,w,c
  8003   001742  A0D8               	btfss	status,0,c
  8004   001744  EFA6  F00B         	goto	u2901
  8005   001748  EFA8  F00B         	goto	u2900
  8006   00174C                     u2901:
  8007   00174C  EFBB  F00B         	goto	l3683
  8008   001750                     u2900:
  8009   001750  5001               	movf	colour_to_key@p1^0,w,c
  8010   001752  6ED9               	movwf	fsr2l,c
  8011   001754  6ADA               	clrf	fsr2h,c
  8012   001756  0E02               	movlw	2
  8013   001758  26D9               	addwf	fsr2l,f,c
  8014   00175A  0E01               	movlw	1
  8015   00175C  50DB               	movf	plusw2,w,c
  8016   00175E  E107               	bnz	u2911
  8017   001760  0E10               	movlw	16
  8018   001762  5CDE               	subwf	postinc2,w,c
  8019   001764  B0D8               	btfsc	status,0,c
  8020   001766  EFB7  F00B         	goto	u2911
  8021   00176A  EFB9  F00B         	goto	u2910
  8022   00176E                     u2911:
  8023   00176E  EFBB  F00B         	goto	l3683
  8024   001772                     u2910:
  8025   001772                     
  8026                           ;color.c: 351:          ((11 <= p1->S) && (p1->S <= 15))) {;color.c: 352:         key = 
      +                          5;
  8027   001772  0E05               	movlw	5
  8028   001774  6E05               	movwf	colour_to_key@key^0,c
  8029   001776                     l3683:
  8030                           
  8031                           ;color.c: 356:     if ( ((298 <= p1->H) && (p1->H <= 360)) &&
  8032   001776  5001               	movf	colour_to_key@p1^0,w,c
  8033   001778  6ED9               	movwf	fsr2l,c
  8034   00177A  6ADA               	clrf	fsr2h,c
  8035   00177C  0E2A               	movlw	42
  8036   00177E  5CDE               	subwf	postinc2,w,c
  8037   001780  0E01               	movlw	1
  8038   001782  58DE               	subwfb	postinc2,w,c
  8039   001784  A0D8               	btfss	status,0,c
  8040   001786  EFC7  F00B         	goto	u2921
  8041   00178A  EFC9  F00B         	goto	u2920
  8042   00178E                     u2921:
  8043   00178E  EFFB  F00B         	goto	l3693
  8044   001792                     u2920:
  8045   001792  5001               	movf	colour_to_key@p1^0,w,c
  8046   001794  6ED9               	movwf	fsr2l,c
  8047   001796  6ADA               	clrf	fsr2h,c
  8048   001798  0E69               	movlw	105
  8049   00179A  5CDE               	subwf	postinc2,w,c
  8050   00179C  0E01               	movlw	1
  8051   00179E  58DE               	subwfb	postinc2,w,c
  8052   0017A0  B0D8               	btfsc	status,0,c
  8053   0017A2  EFD5  F00B         	goto	u2931
  8054   0017A6  EFD7  F00B         	goto	u2930
  8055   0017AA                     u2931:
  8056   0017AA  EFFB  F00B         	goto	l3693
  8057   0017AE                     u2930:
  8058   0017AE  5001               	movf	colour_to_key@p1^0,w,c
  8059   0017B0  6ED9               	movwf	fsr2l,c
  8060   0017B2  6ADA               	clrf	fsr2h,c
  8061   0017B4  0E02               	movlw	2
  8062   0017B6  26D9               	addwf	fsr2l,f,c
  8063   0017B8  0E01               	movlw	1
  8064   0017BA  50DB               	movf	plusw2,w,c
  8065   0017BC  E109               	bnz	u2940
  8066   0017BE  0E14               	movlw	20
  8067   0017C0  5CDE               	subwf	postinc2,w,c
  8068   0017C2  A0D8               	btfss	status,0,c
  8069   0017C4  EFE6  F00B         	goto	u2941
  8070   0017C8  EFE8  F00B         	goto	u2940
  8071   0017CC                     u2941:
  8072   0017CC  EFFB  F00B         	goto	l3693
  8073   0017D0                     u2940:
  8074   0017D0  5001               	movf	colour_to_key@p1^0,w,c
  8075   0017D2  6ED9               	movwf	fsr2l,c
  8076   0017D4  6ADA               	clrf	fsr2h,c
  8077   0017D6  0E02               	movlw	2
  8078   0017D8  26D9               	addwf	fsr2l,f,c
  8079   0017DA  0E01               	movlw	1
  8080   0017DC  50DB               	movf	plusw2,w,c
  8081   0017DE  E107               	bnz	u2951
  8082   0017E0  0E2E               	movlw	46
  8083   0017E2  5CDE               	subwf	postinc2,w,c
  8084   0017E4  B0D8               	btfsc	status,0,c
  8085   0017E6  EFF7  F00B         	goto	u2951
  8086   0017EA  EFF9  F00B         	goto	u2950
  8087   0017EE                     u2951:
  8088   0017EE  EFFB  F00B         	goto	l3693
  8089   0017F2                     u2950:
  8090   0017F2                     
  8091                           ;color.c: 357:          ((20 <= p1->S) && (p1->S <= 45))) {;color.c: 358:         key = 
      +                          6;
  8092   0017F2  0E06               	movlw	6
  8093   0017F4  6E05               	movwf	colour_to_key@key^0,c
  8094   0017F6                     l3693:
  8095                           
  8096                           ;color.c: 362:     if ( ((154 <= p1->H) && (p1->H <= 207)) &&
  8097   0017F6  5001               	movf	colour_to_key@p1^0,w,c
  8098   0017F8  6ED9               	movwf	fsr2l,c
  8099   0017FA  6ADA               	clrf	fsr2h,c
  8100   0017FC  0E01               	movlw	1
  8101   0017FE  50DB               	movf	plusw2,w,c
  8102   001800  E109               	bnz	u2960
  8103   001802  0E9A               	movlw	154
  8104   001804  5CDE               	subwf	postinc2,w,c
  8105   001806  A0D8               	btfss	status,0,c
  8106   001808  EF08  F00C         	goto	u2961
  8107   00180C  EF0A  F00C         	goto	u2960
  8108   001810                     u2961:
  8109   001810  EF3D  F00C         	goto	l3703
  8110   001814                     u2960:
  8111   001814  5001               	movf	colour_to_key@p1^0,w,c
  8112   001816  6ED9               	movwf	fsr2l,c
  8113   001818  6ADA               	clrf	fsr2h,c
  8114   00181A  0E01               	movlw	1
  8115   00181C  50DB               	movf	plusw2,w,c
  8116   00181E  E107               	bnz	u2971
  8117   001820  0ED0               	movlw	208
  8118   001822  5CDE               	subwf	postinc2,w,c
  8119   001824  B0D8               	btfsc	status,0,c
  8120   001826  EF17  F00C         	goto	u2971
  8121   00182A  EF19  F00C         	goto	u2970
  8122   00182E                     u2971:
  8123   00182E  EF3D  F00C         	goto	l3703
  8124   001832                     u2970:
  8125   001832  5001               	movf	colour_to_key@p1^0,w,c
  8126   001834  6ED9               	movwf	fsr2l,c
  8127   001836  6ADA               	clrf	fsr2h,c
  8128   001838  0E02               	movlw	2
  8129   00183A  26D9               	addwf	fsr2l,f,c
  8130   00183C  0E01               	movlw	1
  8131   00183E  50DB               	movf	plusw2,w,c
  8132   001840  E109               	bnz	u2980
  8133   001842  0E0D               	movlw	13
  8134   001844  5CDE               	subwf	postinc2,w,c
  8135   001846  A0D8               	btfss	status,0,c
  8136   001848  EF28  F00C         	goto	u2981
  8137   00184C  EF2A  F00C         	goto	u2980
  8138   001850                     u2981:
  8139   001850  EF3D  F00C         	goto	l3703
  8140   001854                     u2980:
  8141   001854  5001               	movf	colour_to_key@p1^0,w,c
  8142   001856  6ED9               	movwf	fsr2l,c
  8143   001858  6ADA               	clrf	fsr2h,c
  8144   00185A  0E02               	movlw	2
  8145   00185C  26D9               	addwf	fsr2l,f,c
  8146   00185E  0E01               	movlw	1
  8147   001860  50DB               	movf	plusw2,w,c
  8148   001862  E107               	bnz	u2991
  8149   001864  0E2E               	movlw	46
  8150   001866  5CDE               	subwf	postinc2,w,c
  8151   001868  B0D8               	btfsc	status,0,c
  8152   00186A  EF39  F00C         	goto	u2991
  8153   00186E  EF3B  F00C         	goto	u2990
  8154   001872                     u2991:
  8155   001872  EF3D  F00C         	goto	l3703
  8156   001876                     u2990:
  8157   001876                     
  8158                           ;color.c: 363:          ((13 <= p1->S) && (p1->S <= 45))) {;color.c: 364:         key = 
      +                          7;
  8159   001876  0E07               	movlw	7
  8160   001878  6E05               	movwf	colour_to_key@key^0,c
  8161   00187A                     l3703:
  8162                           
  8163                           ;color.c: 368:     if ( ((3000 <= p2->C) && (p2->C <= 40000)) &&
  8164   00187A  5002               	movf	colour_to_key@p2^0,w,c
  8165   00187C  6ED9               	movwf	fsr2l,c
  8166   00187E  6ADA               	clrf	fsr2h,c
  8167   001880  0E06               	movlw	6
  8168   001882  26D9               	addwf	fsr2l,f,c
  8169   001884  0EB8               	movlw	184
  8170   001886  5CDE               	subwf	postinc2,w,c
  8171   001888  0E0B               	movlw	11
  8172   00188A  58DE               	subwfb	postinc2,w,c
  8173   00188C  A0D8               	btfss	status,0,c
  8174   00188E  EF4B  F00C         	goto	u3001
  8175   001892  EF4D  F00C         	goto	u3000
  8176   001896                     u3001:
  8177   001896  EF70  F00C         	goto	l3711
  8178   00189A                     u3000:
  8179   00189A  5002               	movf	colour_to_key@p2^0,w,c
  8180   00189C  6ED9               	movwf	fsr2l,c
  8181   00189E  6ADA               	clrf	fsr2h,c
  8182   0018A0  0E06               	movlw	6
  8183   0018A2  26D9               	addwf	fsr2l,f,c
  8184   0018A4  0E41               	movlw	65
  8185   0018A6  5CDE               	subwf	postinc2,w,c
  8186   0018A8  0E9C               	movlw	156
  8187   0018AA  58DE               	subwfb	postinc2,w,c
  8188   0018AC  B0D8               	btfsc	status,0,c
  8189   0018AE  EF5B  F00C         	goto	u3011
  8190   0018B2  EF5D  F00C         	goto	u3010
  8191   0018B6                     u3011:
  8192   0018B6  EF70  F00C         	goto	l3711
  8193   0018BA                     u3010:
  8194   0018BA  5001               	movf	colour_to_key@p1^0,w,c
  8195   0018BC  6ED9               	movwf	fsr2l,c
  8196   0018BE  6ADA               	clrf	fsr2h,c
  8197   0018C0  0E02               	movlw	2
  8198   0018C2  26D9               	addwf	fsr2l,f,c
  8199   0018C4  0E01               	movlw	1
  8200   0018C6  50DB               	movf	plusw2,w,c
  8201   0018C8  E107               	bnz	u3021
  8202   0018CA  0E0B               	movlw	11
  8203   0018CC  5CDE               	subwf	postinc2,w,c
  8204   0018CE  B0D8               	btfsc	status,0,c
  8205   0018D0  EF6C  F00C         	goto	u3021
  8206   0018D4  EF6E  F00C         	goto	u3020
  8207   0018D8                     u3021:
  8208   0018D8  EF70  F00C         	goto	l3711
  8209   0018DC                     u3020:
  8210   0018DC                     
  8211                           ;color.c: 369:          ((p1->S <= 10))) {;color.c: 370:         key = 8;
  8212   0018DC  0E08               	movlw	8
  8213   0018DE  6E05               	movwf	colour_to_key@key^0,c
  8214   0018E0                     l3711:
  8215                           
  8216                           ;color.c: 374:     if ( ((1000 <= p2->C) && (p2->C <= 2600)) &&
  8217   0018E0  5002               	movf	colour_to_key@p2^0,w,c
  8218   0018E2  6ED9               	movwf	fsr2l,c
  8219   0018E4  6ADA               	clrf	fsr2h,c
  8220   0018E6  0E06               	movlw	6
  8221   0018E8  26D9               	addwf	fsr2l,f,c
  8222   0018EA  0EE8               	movlw	232
  8223   0018EC  5CDE               	subwf	postinc2,w,c
  8224   0018EE  0E03               	movlw	3
  8225   0018F0  58DE               	subwfb	postinc2,w,c
  8226   0018F2  A0D8               	btfss	status,0,c
  8227   0018F4  EF7E  F00C         	goto	u3031
  8228   0018F8  EF80  F00C         	goto	u3030
  8229   0018FC                     u3031:
  8230   0018FC  EFA3  F00C         	goto	l139
  8231   001900                     u3030:
  8232   001900  5002               	movf	colour_to_key@p2^0,w,c
  8233   001902  6ED9               	movwf	fsr2l,c
  8234   001904  6ADA               	clrf	fsr2h,c
  8235   001906  0E06               	movlw	6
  8236   001908  26D9               	addwf	fsr2l,f,c
  8237   00190A  0E29               	movlw	41
  8238   00190C  5CDE               	subwf	postinc2,w,c
  8239   00190E  0E0A               	movlw	10
  8240   001910  58DE               	subwfb	postinc2,w,c
  8241   001912  B0D8               	btfsc	status,0,c
  8242   001914  EF8E  F00C         	goto	u3041
  8243   001918  EF90  F00C         	goto	u3040
  8244   00191C                     u3041:
  8245   00191C  EFA3  F00C         	goto	l139
  8246   001920                     u3040:
  8247   001920  5001               	movf	colour_to_key@p1^0,w,c
  8248   001922  6ED9               	movwf	fsr2l,c
  8249   001924  6ADA               	clrf	fsr2h,c
  8250   001926  0E02               	movlw	2
  8251   001928  26D9               	addwf	fsr2l,f,c
  8252   00192A  0E01               	movlw	1
  8253   00192C  50DB               	movf	plusw2,w,c
  8254   00192E  E107               	bnz	u3051
  8255   001930  0E0D               	movlw	13
  8256   001932  5CDE               	subwf	postinc2,w,c
  8257   001934  B0D8               	btfsc	status,0,c
  8258   001936  EF9F  F00C         	goto	u3051
  8259   00193A  EFA1  F00C         	goto	u3050
  8260   00193E                     u3051:
  8261   00193E  EFA3  F00C         	goto	l139
  8262   001942                     u3050:
  8263   001942                     
  8264                           ;color.c: 375:          ((p1->S <= 12))) {;color.c: 376:         key = 9;
  8265   001942  0E09               	movlw	9
  8266   001944  6E05               	movwf	colour_to_key@key^0,c
  8267   001946                     l139:
  8268                           
  8269                           ;color.c: 379:     return key;
  8270   001946  5005               	movf	colour_to_key@key^0,w,c
  8271   001948  0012               	return		;funcret
  8272   00194A                     __end_of_colour_to_key:
  8273                           	callstack 0
  8274                           
  8275 ;; *************** function _average_RGBC *****************
  8276 ;; Defined at:
  8277 ;;		line 124 in file "color.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  p               1   13[COMRAM] PTR struct RGBC_val
  8280 ;;		 -> main@RGBC_colour(8), 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  i               1   16[COMRAM] unsigned char 
  8283 ;;  temp_C          4   29[COMRAM] unsigned long 
  8284 ;;  temp_B          4   25[COMRAM] unsigned long 
  8285 ;;  temp_G          4   21[COMRAM] unsigned long 
  8286 ;;  temp_R          4   17[COMRAM] unsigned long 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;                  1    wreg      void 
  8289 ;; Registers used:
  8290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8296 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8297 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8299 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8300 ;;Total ram usage:       20 bytes
  8301 ;; Hardware stack levels used: 1
  8302 ;; Hardware stack levels required when called: 5
  8303 ;; This function calls:
  8304 ;;		___lldiv
  8305 ;;		_read_RGBC
  8306 ;; This function is called by:
  8307 ;;		_forward_navigation
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           	psect	text49
  8312   001D74                     __ptext49:
  8313                           	callstack 0
  8314   001D74                     _average_RGBC:
  8315                           	callstack 24
  8316   001D74                     
  8317                           ;color.c: 124: void average_RGBC(struct RGBC_val *p);color.c: 125: {;color.c: 127:     u
      +                          nsigned long temp_R = 0;
  8318   001D74  0E00               	movlw	0
  8319   001D76  6E12               	movwf	average_RGBC@temp_R^0,c
  8320   001D78  0E00               	movlw	0
  8321   001D7A  6E13               	movwf	(average_RGBC@temp_R+1)^0,c
  8322   001D7C  0E00               	movlw	0
  8323   001D7E  6E14               	movwf	(average_RGBC@temp_R+2)^0,c
  8324   001D80  0E00               	movlw	0
  8325   001D82  6E15               	movwf	(average_RGBC@temp_R+3)^0,c
  8326                           
  8327                           ;color.c: 128:     unsigned long temp_G = 0;
  8328   001D84  0E00               	movlw	0
  8329   001D86  6E16               	movwf	average_RGBC@temp_G^0,c
  8330   001D88  0E00               	movlw	0
  8331   001D8A  6E17               	movwf	(average_RGBC@temp_G+1)^0,c
  8332   001D8C  0E00               	movlw	0
  8333   001D8E  6E18               	movwf	(average_RGBC@temp_G+2)^0,c
  8334   001D90  0E00               	movlw	0
  8335   001D92  6E19               	movwf	(average_RGBC@temp_G+3)^0,c
  8336                           
  8337                           ;color.c: 129:     unsigned long temp_B = 0;
  8338   001D94  0E00               	movlw	0
  8339   001D96  6E1A               	movwf	average_RGBC@temp_B^0,c
  8340   001D98  0E00               	movlw	0
  8341   001D9A  6E1B               	movwf	(average_RGBC@temp_B+1)^0,c
  8342   001D9C  0E00               	movlw	0
  8343   001D9E  6E1C               	movwf	(average_RGBC@temp_B+2)^0,c
  8344   001DA0  0E00               	movlw	0
  8345   001DA2  6E1D               	movwf	(average_RGBC@temp_B+3)^0,c
  8346                           
  8347                           ;color.c: 130:     unsigned long temp_C = 0;
  8348   001DA4  0E00               	movlw	0
  8349   001DA6  6E1E               	movwf	average_RGBC@temp_C^0,c
  8350   001DA8  0E00               	movlw	0
  8351   001DAA  6E1F               	movwf	(average_RGBC@temp_C+1)^0,c
  8352   001DAC  0E00               	movlw	0
  8353   001DAE  6E20               	movwf	(average_RGBC@temp_C+2)^0,c
  8354   001DB0  0E00               	movlw	0
  8355   001DB2  6E21               	movwf	(average_RGBC@temp_C+3)^0,c
  8356                           
  8357                           ;color.c: 133:     for (unsigned char i = 0; i < sample_count; i++) {
  8358   001DB4  0E00               	movlw	0
  8359   001DB6  6E11               	movwf	average_RGBC@i^0,c
  8360   001DB8  EF25  F00F         	goto	l3493
  8361   001DBC                     l3481:
  8362                           
  8363                           ;color.c: 136:         read_RGBC(p);
  8364   001DBC  C00E  F00C         	movff	average_RGBC@p,read_RGBC@p
  8365   001DC0  ECB1  F019         	call	_read_RGBC	;wreg free
  8366   001DC4                     
  8367                           ;color.c: 139:         temp_R += (unsigned long)p->R;
  8368   001DC4  500E               	movf	average_RGBC@p^0,w,c
  8369   001DC6  6ED9               	movwf	fsr2l,c
  8370   001DC8  6ADA               	clrf	fsr2h,c
  8371   001DCA  CFDE F00F          	movff	postinc2,??_average_RGBC
  8372   001DCE  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8373   001DD2  500F               	movf	??_average_RGBC^0,w,c
  8374   001DD4  2612               	addwf	average_RGBC@temp_R^0,f,c
  8375   001DD6  5010               	movf	(??_average_RGBC+1)^0,w,c
  8376   001DD8  2213               	addwfc	(average_RGBC@temp_R+1)^0,f,c
  8377   001DDA  0E00               	movlw	0
  8378   001DDC  2214               	addwfc	(average_RGBC@temp_R+2)^0,f,c
  8379   001DDE  0E00               	movlw	0
  8380   001DE0  2215               	addwfc	(average_RGBC@temp_R+3)^0,f,c
  8381   001DE2                     
  8382                           ;color.c: 140:         temp_G += (unsigned long)p->G;
  8383   001DE2  500E               	movf	average_RGBC@p^0,w,c
  8384   001DE4  6ED9               	movwf	fsr2l,c
  8385   001DE6  6ADA               	clrf	fsr2h,c
  8386   001DE8  0E02               	movlw	2
  8387   001DEA  26D9               	addwf	fsr2l,f,c
  8388   001DEC  CFDE F00F          	movff	postinc2,??_average_RGBC
  8389   001DF0  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8390   001DF4  500F               	movf	??_average_RGBC^0,w,c
  8391   001DF6  2616               	addwf	average_RGBC@temp_G^0,f,c
  8392   001DF8  5010               	movf	(??_average_RGBC+1)^0,w,c
  8393   001DFA  2217               	addwfc	(average_RGBC@temp_G+1)^0,f,c
  8394   001DFC  0E00               	movlw	0
  8395   001DFE  2218               	addwfc	(average_RGBC@temp_G+2)^0,f,c
  8396   001E00  0E00               	movlw	0
  8397   001E02  2219               	addwfc	(average_RGBC@temp_G+3)^0,f,c
  8398   001E04                     
  8399                           ;color.c: 141:         temp_B += (unsigned long)p->B;
  8400   001E04  500E               	movf	average_RGBC@p^0,w,c
  8401   001E06  6ED9               	movwf	fsr2l,c
  8402   001E08  6ADA               	clrf	fsr2h,c
  8403   001E0A  0E04               	movlw	4
  8404   001E0C  26D9               	addwf	fsr2l,f,c
  8405   001E0E  CFDE F00F          	movff	postinc2,??_average_RGBC
  8406   001E12  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8407   001E16  500F               	movf	??_average_RGBC^0,w,c
  8408   001E18  261A               	addwf	average_RGBC@temp_B^0,f,c
  8409   001E1A  5010               	movf	(??_average_RGBC+1)^0,w,c
  8410   001E1C  221B               	addwfc	(average_RGBC@temp_B+1)^0,f,c
  8411   001E1E  0E00               	movlw	0
  8412   001E20  221C               	addwfc	(average_RGBC@temp_B+2)^0,f,c
  8413   001E22  0E00               	movlw	0
  8414   001E24  221D               	addwfc	(average_RGBC@temp_B+3)^0,f,c
  8415   001E26                     
  8416                           ;color.c: 142:         temp_C += (unsigned long)p->C;
  8417   001E26  500E               	movf	average_RGBC@p^0,w,c
  8418   001E28  6ED9               	movwf	fsr2l,c
  8419   001E2A  6ADA               	clrf	fsr2h,c
  8420   001E2C  0E06               	movlw	6
  8421   001E2E  26D9               	addwf	fsr2l,f,c
  8422   001E30  CFDE F00F          	movff	postinc2,??_average_RGBC
  8423   001E34  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8424   001E38  500F               	movf	??_average_RGBC^0,w,c
  8425   001E3A  261E               	addwf	average_RGBC@temp_C^0,f,c
  8426   001E3C  5010               	movf	(??_average_RGBC+1)^0,w,c
  8427   001E3E  221F               	addwfc	(average_RGBC@temp_C+1)^0,f,c
  8428   001E40  0E00               	movlw	0
  8429   001E42  2220               	addwfc	(average_RGBC@temp_C+2)^0,f,c
  8430   001E44  0E00               	movlw	0
  8431   001E46  2221               	addwfc	(average_RGBC@temp_C+3)^0,f,c
  8432   001E48                     
  8433                           ;color.c: 143:     }
  8434   001E48  2A11               	incf	average_RGBC@i^0,f,c
  8435   001E4A                     l3493:
  8436   001E4A  0E13               	movlw	19
  8437   001E4C  6411               	cpfsgt	average_RGBC@i^0,c
  8438   001E4E  EF2B  F00F         	goto	u2591
  8439   001E52  EF2D  F00F         	goto	u2590
  8440   001E56                     u2591:
  8441   001E56  EFDE  F00E         	goto	l3481
  8442   001E5A                     u2590:
  8443   001E5A  C012  F001         	movff	average_RGBC@temp_R,___lldiv@dividend
  8444   001E5E  C013  F002         	movff	average_RGBC@temp_R+1,___lldiv@dividend+1
  8445   001E62  C014  F003         	movff	average_RGBC@temp_R+2,___lldiv@dividend+2
  8446   001E66  C015  F004         	movff	average_RGBC@temp_R+3,___lldiv@dividend+3
  8447   001E6A  0E14               	movlw	20
  8448   001E6C  6E05               	movwf	___lldiv@divisor^0,c
  8449   001E6E  0E00               	movlw	0
  8450   001E70  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8451   001E72  0E00               	movlw	0
  8452   001E74  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8453   001E76  0E00               	movlw	0
  8454   001E78  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8455   001E7A  ECE1  F015         	call	___lldiv	;wreg free
  8456   001E7E  C001  F012         	movff	?___lldiv,average_RGBC@temp_R
  8457   001E82  C002  F013         	movff	?___lldiv+1,average_RGBC@temp_R+1
  8458   001E86  C003  F014         	movff	?___lldiv+2,average_RGBC@temp_R+2
  8459   001E8A  C004  F015         	movff	?___lldiv+3,average_RGBC@temp_R+3
  8460   001E8E  C016  F001         	movff	average_RGBC@temp_G,___lldiv@dividend
  8461   001E92  C017  F002         	movff	average_RGBC@temp_G+1,___lldiv@dividend+1
  8462   001E96  C018  F003         	movff	average_RGBC@temp_G+2,___lldiv@dividend+2
  8463   001E9A  C019  F004         	movff	average_RGBC@temp_G+3,___lldiv@dividend+3
  8464   001E9E  0E14               	movlw	20
  8465   001EA0  6E05               	movwf	___lldiv@divisor^0,c
  8466   001EA2  0E00               	movlw	0
  8467   001EA4  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8468   001EA6  0E00               	movlw	0
  8469   001EA8  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8470   001EAA  0E00               	movlw	0
  8471   001EAC  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8472   001EAE  ECE1  F015         	call	___lldiv	;wreg free
  8473   001EB2  C001  F016         	movff	?___lldiv,average_RGBC@temp_G
  8474   001EB6  C002  F017         	movff	?___lldiv+1,average_RGBC@temp_G+1
  8475   001EBA  C003  F018         	movff	?___lldiv+2,average_RGBC@temp_G+2
  8476   001EBE  C004  F019         	movff	?___lldiv+3,average_RGBC@temp_G+3
  8477   001EC2  C01A  F001         	movff	average_RGBC@temp_B,___lldiv@dividend
  8478   001EC6  C01B  F002         	movff	average_RGBC@temp_B+1,___lldiv@dividend+1
  8479   001ECA  C01C  F003         	movff	average_RGBC@temp_B+2,___lldiv@dividend+2
  8480   001ECE  C01D  F004         	movff	average_RGBC@temp_B+3,___lldiv@dividend+3
  8481   001ED2  0E14               	movlw	20
  8482   001ED4  6E05               	movwf	___lldiv@divisor^0,c
  8483   001ED6  0E00               	movlw	0
  8484   001ED8  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8485   001EDA  0E00               	movlw	0
  8486   001EDC  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8487   001EDE  0E00               	movlw	0
  8488   001EE0  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8489   001EE2  ECE1  F015         	call	___lldiv	;wreg free
  8490   001EE6  C001  F01A         	movff	?___lldiv,average_RGBC@temp_B
  8491   001EEA  C002  F01B         	movff	?___lldiv+1,average_RGBC@temp_B+1
  8492   001EEE  C003  F01C         	movff	?___lldiv+2,average_RGBC@temp_B+2
  8493   001EF2  C004  F01D         	movff	?___lldiv+3,average_RGBC@temp_B+3
  8494   001EF6  C01E  F001         	movff	average_RGBC@temp_C,___lldiv@dividend
  8495   001EFA  C01F  F002         	movff	average_RGBC@temp_C+1,___lldiv@dividend+1
  8496   001EFE  C020  F003         	movff	average_RGBC@temp_C+2,___lldiv@dividend+2
  8497   001F02  C021  F004         	movff	average_RGBC@temp_C+3,___lldiv@dividend+3
  8498   001F06  0E14               	movlw	20
  8499   001F08  6E05               	movwf	___lldiv@divisor^0,c
  8500   001F0A  0E00               	movlw	0
  8501   001F0C  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8502   001F0E  0E00               	movlw	0
  8503   001F10  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8504   001F12  0E00               	movlw	0
  8505   001F14  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8506   001F16  ECE1  F015         	call	___lldiv	;wreg free
  8507   001F1A  C001  F01E         	movff	?___lldiv,average_RGBC@temp_C
  8508   001F1E  C002  F01F         	movff	?___lldiv+1,average_RGBC@temp_C+1
  8509   001F22  C003  F020         	movff	?___lldiv+2,average_RGBC@temp_C+2
  8510   001F26  C004  F021         	movff	?___lldiv+3,average_RGBC@temp_C+3
  8511   001F2A                     
  8512                           ;color.c: 152:     p->R = (unsigned int)temp_R;
  8513   001F2A  500E               	movf	average_RGBC@p^0,w,c
  8514   001F2C  6ED9               	movwf	fsr2l,c
  8515   001F2E  6ADA               	clrf	fsr2h,c
  8516   001F30  C012  FFDE         	movff	average_RGBC@temp_R,postinc2
  8517   001F34  C013  FFDD         	movff	average_RGBC@temp_R+1,postdec2
  8518   001F38                     
  8519                           ;color.c: 153:     p->G = (unsigned int)temp_G;
  8520   001F38  500E               	movf	average_RGBC@p^0,w,c
  8521   001F3A  6ED9               	movwf	fsr2l,c
  8522   001F3C  6ADA               	clrf	fsr2h,c
  8523   001F3E  0E02               	movlw	2
  8524   001F40  26D9               	addwf	fsr2l,f,c
  8525   001F42  C016  FFDE         	movff	average_RGBC@temp_G,postinc2
  8526   001F46  C017  FFDD         	movff	average_RGBC@temp_G+1,postdec2
  8527   001F4A                     
  8528                           ;color.c: 154:     p->B = (unsigned int)temp_B;
  8529   001F4A  500E               	movf	average_RGBC@p^0,w,c
  8530   001F4C  6ED9               	movwf	fsr2l,c
  8531   001F4E  6ADA               	clrf	fsr2h,c
  8532   001F50  0E04               	movlw	4
  8533   001F52  26D9               	addwf	fsr2l,f,c
  8534   001F54  C01A  FFDE         	movff	average_RGBC@temp_B,postinc2
  8535   001F58  C01B  FFDD         	movff	average_RGBC@temp_B+1,postdec2
  8536   001F5C                     
  8537                           ;color.c: 155:     p->C = (unsigned int)temp_C;
  8538   001F5C  500E               	movf	average_RGBC@p^0,w,c
  8539   001F5E  6ED9               	movwf	fsr2l,c
  8540   001F60  6ADA               	clrf	fsr2h,c
  8541   001F62  0E06               	movlw	6
  8542   001F64  26D9               	addwf	fsr2l,f,c
  8543   001F66  C01E  FFDE         	movff	average_RGBC@temp_C,postinc2
  8544   001F6A  C01F  FFDD         	movff	average_RGBC@temp_C+1,postdec2
  8545   001F6E  0012               	return		;funcret
  8546   001F70                     __end_of_average_RGBC:
  8547                           	callstack 0
  8548                           
  8549 ;; *************** function _read_RGBC *****************
  8550 ;; Defined at:
  8551 ;;		line 112 in file "color.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  8554 ;;		 -> main@RGBC_colour(8), 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;		None
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  1    wreg      void 
  8559 ;; Registers used:
  8560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8566 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8569 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8570 ;;Total ram usage:        1 bytes
  8571 ;; Hardware stack levels used: 1
  8572 ;; Hardware stack levels required when called: 4
  8573 ;; This function calls:
  8574 ;;		_color_read_Blue
  8575 ;;		_color_read_Clear
  8576 ;;		_color_read_Green
  8577 ;;		_color_read_Red
  8578 ;; This function is called by:
  8579 ;;		_average_RGBC
  8580 ;;		_wait_for_wall
  8581 ;; This function uses a non-reentrant model
  8582 ;;
  8583                           
  8584                           	psect	text50
  8585   003362                     __ptext50:
  8586                           	callstack 0
  8587   003362                     _read_RGBC:
  8588                           	callstack 24
  8589   003362                     
  8590                           ;color.c: 112: void read_RGBC(struct RGBC_val *p);color.c: 113: {;color.c: 114:     p->R
      +                           = color_read_Red();
  8591   003362  ECDC  F019         	call	_color_read_Red	;wreg free
  8592   003366  500C               	movf	read_RGBC@p^0,w,c
  8593   003368  6ED9               	movwf	fsr2l,c
  8594   00336A  6ADA               	clrf	fsr2h,c
  8595   00336C  C005  FFDE         	movff	?_color_read_Red,postinc2
  8596   003370  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  8597                           
  8598                           ;color.c: 115:     p->G = color_read_Green();
  8599   003374  EC04  F01A         	call	_color_read_Green	;wreg free
  8600   003378  500C               	movf	read_RGBC@p^0,w,c
  8601   00337A  6ED9               	movwf	fsr2l,c
  8602   00337C  6ADA               	clrf	fsr2h,c
  8603   00337E  0E02               	movlw	2
  8604   003380  26D9               	addwf	fsr2l,f,c
  8605   003382  C005  FFDE         	movff	?_color_read_Green,postinc2
  8606   003386  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  8607                           
  8608                           ;color.c: 116:     p->B = color_read_Blue();
  8609   00338A  EC54  F01A         	call	_color_read_Blue	;wreg free
  8610   00338E  500C               	movf	read_RGBC@p^0,w,c
  8611   003390  6ED9               	movwf	fsr2l,c
  8612   003392  6ADA               	clrf	fsr2h,c
  8613   003394  0E04               	movlw	4
  8614   003396  26D9               	addwf	fsr2l,f,c
  8615   003398  C005  FFDE         	movff	?_color_read_Blue,postinc2
  8616   00339C  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  8617                           
  8618                           ;color.c: 117:     p->C = color_read_Clear();
  8619   0033A0  EC2C  F01A         	call	_color_read_Clear	;wreg free
  8620   0033A4  500C               	movf	read_RGBC@p^0,w,c
  8621   0033A6  6ED9               	movwf	fsr2l,c
  8622   0033A8  6ADA               	clrf	fsr2h,c
  8623   0033AA  0E06               	movlw	6
  8624   0033AC  26D9               	addwf	fsr2l,f,c
  8625   0033AE  C005  FFDE         	movff	?_color_read_Clear,postinc2
  8626   0033B2  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  8627   0033B6  0012               	return		;funcret
  8628   0033B8                     __end_of_read_RGBC:
  8629                           	callstack 0
  8630                           
  8631 ;; *************** function _color_read_Red *****************
  8632 ;; Defined at:
  8633 ;;		line 40 in file "color.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;		None
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;  tmp             2    9[COMRAM] unsigned int 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  2    4[COMRAM] unsigned int 
  8640 ;; Registers used:
  8641 ;;		wreg, status,2, status,0, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8649 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8650 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8651 ;;Total ram usage:        7 bytes
  8652 ;; Hardware stack levels used: 1
  8653 ;; Hardware stack levels required when called: 3
  8654 ;; This function calls:
  8655 ;;		_I2C_2_Master_Read
  8656 ;;		_I2C_2_Master_RepStart
  8657 ;;		_I2C_2_Master_Start
  8658 ;;		_I2C_2_Master_Stop
  8659 ;;		_I2C_2_Master_Write
  8660 ;; This function is called by:
  8661 ;;		_read_RGBC
  8662 ;; This function uses a non-reentrant model
  8663 ;;
  8664                           
  8665                           	psect	text51
  8666   0033B8                     __ptext51:
  8667                           	callstack 0
  8668   0033B8                     _color_read_Red:
  8669                           	callstack 24
  8670   0033B8                     
  8671                           ;color.c: 42:  unsigned int tmp;;color.c: 43:  I2C_2_Master_Start();
  8672   0033B8  ECE6  F01C         	call	_I2C_2_Master_Start	;wreg free
  8673                           
  8674                           ;color.c: 44:  I2C_2_Master_Write(0x52 | 0x00);
  8675   0033BC  0E52               	movlw	82
  8676   0033BE  ECCA  F01C         	call	_I2C_2_Master_Write
  8677                           
  8678                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  8679   0033C2  0EB6               	movlw	182
  8680   0033C4  ECCA  F01C         	call	_I2C_2_Master_Write
  8681                           
  8682                           ;color.c: 46:  I2C_2_Master_RepStart();
  8683   0033C8  ECDC  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8684                           
  8685                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  8686   0033CC  0E53               	movlw	83
  8687   0033CE  ECCA  F01C         	call	_I2C_2_Master_Write
  8688                           
  8689                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  8690   0033D2  0E01               	movlw	1
  8691   0033D4  ECBF  F01A         	call	_I2C_2_Master_Read
  8692   0033D8  6E07               	movwf	??_color_read_Red^0,c
  8693   0033DA  5007               	movf	??_color_read_Red^0,w,c
  8694   0033DC  6E0A               	movwf	color_read_Red@tmp^0,c
  8695   0033DE  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  8696                           
  8697                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8698   0033E0  0E00               	movlw	0
  8699   0033E2  ECBF  F01A         	call	_I2C_2_Master_Read
  8700   0033E6  6E07               	movwf	??_color_read_Red^0,c
  8701   0033E8  5007               	movf	??_color_read_Red^0,w,c
  8702   0033EA  6E09               	movwf	(??_color_read_Red+2)^0,c
  8703   0033EC  6A08               	clrf	(??_color_read_Red+1)^0,c
  8704   0033EE  500A               	movf	color_read_Red@tmp^0,w,c
  8705   0033F0  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  8706   0033F2  6E0A               	movwf	color_read_Red@tmp^0,c
  8707   0033F4  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  8708   0033F6  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  8709   0033F8  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  8710                           
  8711                           ;color.c: 50:  I2C_2_Master_Stop();
  8712   0033FA  ECE1  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8713   0033FE                     
  8714                           ;color.c: 51:  return tmp;
  8715   0033FE  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  8716   003402  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8717   003406  0012               	return		;funcret
  8718   003408                     __end_of_color_read_Red:
  8719                           	callstack 0
  8720                           
  8721 ;; *************** function _color_read_Green *****************
  8722 ;; Defined at:
  8723 ;;		line 58 in file "color.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;		None
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  tmp             2    9[COMRAM] unsigned int 
  8728 ;; Return value:  Size  Location     Type
  8729 ;;                  2    4[COMRAM] unsigned int 
  8730 ;; Registers used:
  8731 ;;		wreg, status,2, status,0, cstack
  8732 ;; Tracked objects:
  8733 ;;		On entry : 0/0
  8734 ;;		On exit  : 0/0
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8738 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8739 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8740 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8741 ;;Total ram usage:        7 bytes
  8742 ;; Hardware stack levels used: 1
  8743 ;; Hardware stack levels required when called: 3
  8744 ;; This function calls:
  8745 ;;		_I2C_2_Master_Read
  8746 ;;		_I2C_2_Master_RepStart
  8747 ;;		_I2C_2_Master_Start
  8748 ;;		_I2C_2_Master_Stop
  8749 ;;		_I2C_2_Master_Write
  8750 ;; This function is called by:
  8751 ;;		_read_RGBC
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           	psect	text52
  8756   003408                     __ptext52:
  8757                           	callstack 0
  8758   003408                     _color_read_Green:
  8759                           	callstack 24
  8760   003408                     
  8761                           ;color.c: 60:     unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  8762   003408  ECE6  F01C         	call	_I2C_2_Master_Start	;wreg free
  8763                           
  8764                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  8765   00340C  0E52               	movlw	82
  8766   00340E  ECCA  F01C         	call	_I2C_2_Master_Write
  8767                           
  8768                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x18);
  8769   003412  0EB8               	movlw	184
  8770   003414  ECCA  F01C         	call	_I2C_2_Master_Write
  8771                           
  8772                           ;color.c: 64:  I2C_2_Master_RepStart();
  8773   003418  ECDC  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8774                           
  8775                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  8776   00341C  0E53               	movlw	83
  8777   00341E  ECCA  F01C         	call	_I2C_2_Master_Write
  8778                           
  8779                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  8780   003422  0E01               	movlw	1
  8781   003424  ECBF  F01A         	call	_I2C_2_Master_Read
  8782   003428  6E07               	movwf	??_color_read_Green^0,c
  8783   00342A  5007               	movf	??_color_read_Green^0,w,c
  8784   00342C  6E0A               	movwf	color_read_Green@tmp^0,c
  8785   00342E  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  8786                           
  8787                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8788   003430  0E00               	movlw	0
  8789   003432  ECBF  F01A         	call	_I2C_2_Master_Read
  8790   003436  6E07               	movwf	??_color_read_Green^0,c
  8791   003438  5007               	movf	??_color_read_Green^0,w,c
  8792   00343A  6E09               	movwf	(??_color_read_Green+2)^0,c
  8793   00343C  6A08               	clrf	(??_color_read_Green+1)^0,c
  8794   00343E  500A               	movf	color_read_Green@tmp^0,w,c
  8795   003440  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  8796   003442  6E0A               	movwf	color_read_Green@tmp^0,c
  8797   003444  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  8798   003446  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  8799   003448  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  8800                           
  8801                           ;color.c: 68:  I2C_2_Master_Stop();
  8802   00344A  ECE1  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8803   00344E                     
  8804                           ;color.c: 69:  return tmp;
  8805   00344E  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  8806   003452  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8807   003456  0012               	return		;funcret
  8808   003458                     __end_of_color_read_Green:
  8809                           	callstack 0
  8810                           
  8811 ;; *************** function _color_read_Clear *****************
  8812 ;; Defined at:
  8813 ;;		line 94 in file "color.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;		None
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;  tmp             2    9[COMRAM] unsigned int 
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  2    4[COMRAM] unsigned int 
  8820 ;; Registers used:
  8821 ;;		wreg, status,2, status,0, cstack
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8829 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8830 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8831 ;;Total ram usage:        7 bytes
  8832 ;; Hardware stack levels used: 1
  8833 ;; Hardware stack levels required when called: 3
  8834 ;; This function calls:
  8835 ;;		_I2C_2_Master_Read
  8836 ;;		_I2C_2_Master_RepStart
  8837 ;;		_I2C_2_Master_Start
  8838 ;;		_I2C_2_Master_Stop
  8839 ;;		_I2C_2_Master_Write
  8840 ;; This function is called by:
  8841 ;;		_read_RGBC
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           	psect	text53
  8846   003458                     __ptext53:
  8847                           	callstack 0
  8848   003458                     _color_read_Clear:
  8849                           	callstack 24
  8850   003458                     
  8851                           ;color.c: 96:     unsigned int tmp;;color.c: 97:  I2C_2_Master_Start();
  8852   003458  ECE6  F01C         	call	_I2C_2_Master_Start	;wreg free
  8853                           
  8854                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
  8855   00345C  0E52               	movlw	82
  8856   00345E  ECCA  F01C         	call	_I2C_2_Master_Write
  8857                           
  8858                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  8859   003462  0EB4               	movlw	180
  8860   003464  ECCA  F01C         	call	_I2C_2_Master_Write
  8861                           
  8862                           ;color.c: 100:  I2C_2_Master_RepStart();
  8863   003468  ECDC  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8864                           
  8865                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  8866   00346C  0E53               	movlw	83
  8867   00346E  ECCA  F01C         	call	_I2C_2_Master_Write
  8868                           
  8869                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  8870   003472  0E01               	movlw	1
  8871   003474  ECBF  F01A         	call	_I2C_2_Master_Read
  8872   003478  6E07               	movwf	??_color_read_Clear^0,c
  8873   00347A  5007               	movf	??_color_read_Clear^0,w,c
  8874   00347C  6E0A               	movwf	color_read_Clear@tmp^0,c
  8875   00347E  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  8876                           
  8877                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8878   003480  0E00               	movlw	0
  8879   003482  ECBF  F01A         	call	_I2C_2_Master_Read
  8880   003486  6E07               	movwf	??_color_read_Clear^0,c
  8881   003488  5007               	movf	??_color_read_Clear^0,w,c
  8882   00348A  6E09               	movwf	(??_color_read_Clear+2)^0,c
  8883   00348C  6A08               	clrf	(??_color_read_Clear+1)^0,c
  8884   00348E  500A               	movf	color_read_Clear@tmp^0,w,c
  8885   003490  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  8886   003492  6E0A               	movwf	color_read_Clear@tmp^0,c
  8887   003494  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  8888   003496  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  8889   003498  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  8890                           
  8891                           ;color.c: 104:  I2C_2_Master_Stop();
  8892   00349A  ECE1  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8893   00349E                     
  8894                           ;color.c: 105:  return tmp;
  8895   00349E  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  8896   0034A2  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8897   0034A6  0012               	return		;funcret
  8898   0034A8                     __end_of_color_read_Clear:
  8899                           	callstack 0
  8900                           
  8901 ;; *************** function _color_read_Blue *****************
  8902 ;; Defined at:
  8903 ;;		line 76 in file "color.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;		None
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;  tmp             2    9[COMRAM] unsigned int 
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  2    4[COMRAM] unsigned int 
  8910 ;; Registers used:
  8911 ;;		wreg, status,2, status,0, cstack
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/0
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8917 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8918 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8919 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8920 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8921 ;;Total ram usage:        7 bytes
  8922 ;; Hardware stack levels used: 1
  8923 ;; Hardware stack levels required when called: 3
  8924 ;; This function calls:
  8925 ;;		_I2C_2_Master_Read
  8926 ;;		_I2C_2_Master_RepStart
  8927 ;;		_I2C_2_Master_Start
  8928 ;;		_I2C_2_Master_Stop
  8929 ;;		_I2C_2_Master_Write
  8930 ;; This function is called by:
  8931 ;;		_read_RGBC
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           	psect	text54
  8936   0034A8                     __ptext54:
  8937                           	callstack 0
  8938   0034A8                     _color_read_Blue:
  8939                           	callstack 24
  8940   0034A8                     
  8941                           ;color.c: 78:     unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  8942   0034A8  ECE6  F01C         	call	_I2C_2_Master_Start	;wreg free
  8943                           
  8944                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  8945   0034AC  0E52               	movlw	82
  8946   0034AE  ECCA  F01C         	call	_I2C_2_Master_Write
  8947                           
  8948                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x1A);
  8949   0034B2  0EBA               	movlw	186
  8950   0034B4  ECCA  F01C         	call	_I2C_2_Master_Write
  8951                           
  8952                           ;color.c: 82:  I2C_2_Master_RepStart();
  8953   0034B8  ECDC  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8954                           
  8955                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  8956   0034BC  0E53               	movlw	83
  8957   0034BE  ECCA  F01C         	call	_I2C_2_Master_Write
  8958                           
  8959                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  8960   0034C2  0E01               	movlw	1
  8961   0034C4  ECBF  F01A         	call	_I2C_2_Master_Read
  8962   0034C8  6E07               	movwf	??_color_read_Blue^0,c
  8963   0034CA  5007               	movf	??_color_read_Blue^0,w,c
  8964   0034CC  6E0A               	movwf	color_read_Blue@tmp^0,c
  8965   0034CE  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  8966                           
  8967                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8968   0034D0  0E00               	movlw	0
  8969   0034D2  ECBF  F01A         	call	_I2C_2_Master_Read
  8970   0034D6  6E07               	movwf	??_color_read_Blue^0,c
  8971   0034D8  5007               	movf	??_color_read_Blue^0,w,c
  8972   0034DA  6E09               	movwf	(??_color_read_Blue+2)^0,c
  8973   0034DC  6A08               	clrf	(??_color_read_Blue+1)^0,c
  8974   0034DE  500A               	movf	color_read_Blue@tmp^0,w,c
  8975   0034E0  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  8976   0034E2  6E0A               	movwf	color_read_Blue@tmp^0,c
  8977   0034E4  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  8978   0034E6  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  8979   0034E8  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  8980                           
  8981                           ;color.c: 86:  I2C_2_Master_Stop();
  8982   0034EA  ECE1  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8983   0034EE                     
  8984                           ;color.c: 87:  return tmp;
  8985   0034EE  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  8986   0034F2  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8987   0034F6  0012               	return		;funcret
  8988   0034F8                     __end_of_color_read_Blue:
  8989                           	callstack 0
  8990                           
  8991 ;; *************** function _I2C_2_Master_RepStart *****************
  8992 ;; Defined at:
  8993 ;;		line 33 in file "i2c.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;		None
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;		None
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  1    wreg      void 
  9000 ;; Registers used:
  9001 ;;		wreg, status,2, status,0, cstack
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9011 ;;Total ram usage:        0 bytes
  9012 ;; Hardware stack levels used: 1
  9013 ;; Hardware stack levels required when called: 2
  9014 ;; This function calls:
  9015 ;;		_I2C_2_Master_Idle
  9016 ;; This function is called by:
  9017 ;;		_color_read_Red
  9018 ;;		_color_read_Green
  9019 ;;		_color_read_Blue
  9020 ;;		_color_read_Clear
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           	psect	text55
  9025   0039B8                     __ptext55:
  9026                           	callstack 0
  9027   0039B8                     _I2C_2_Master_RepStart:
  9028                           	callstack 24
  9029   0039B8                     
  9030                           ;i2c.c: 35:   I2C_2_Master_Idle();
  9031   0039B8  EC03  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9032   0039BC                     
  9033                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  9034   0039BC  010E               	movlb	14	; () banked
  9035   0039BE  83DA               	bsf	218,1,b	;volatile
  9036   0039C0                     
  9037                           ; BSR set to: 14
  9038   0039C0  0012               	return		;funcret
  9039   0039C2                     __end_of_I2C_2_Master_RepStart:
  9040                           	callstack 0
  9041                           
  9042 ;; *************** function _I2C_2_Master_Read *****************
  9043 ;; Defined at:
  9044 ;;		line 51 in file "i2c.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;  ack             1    wreg     unsigned char 
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;  ack             1    2[COMRAM] unsigned char 
  9049 ;;  tmp             1    3[COMRAM] unsigned char 
  9050 ;; Return value:  Size  Location     Type
  9051 ;;                  1    wreg      unsigned char 
  9052 ;; Registers used:
  9053 ;;		wreg, status,2, status,0, cstack
  9054 ;; Tracked objects:
  9055 ;;		On entry : 0/0
  9056 ;;		On exit  : 0/0
  9057 ;;		Unchanged: 0/0
  9058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9062 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9063 ;;Total ram usage:        3 bytes
  9064 ;; Hardware stack levels used: 1
  9065 ;; Hardware stack levels required when called: 2
  9066 ;; This function calls:
  9067 ;;		_I2C_2_Master_Idle
  9068 ;; This function is called by:
  9069 ;;		_color_read_Red
  9070 ;;		_color_read_Green
  9071 ;;		_color_read_Blue
  9072 ;;		_color_read_Clear
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           	psect	text56
  9077   00357E                     __ptext56:
  9078                           	callstack 0
  9079   00357E                     _I2C_2_Master_Read:
  9080                           	callstack 24
  9081                           
  9082                           ; BSR set to: 14
  9083                           ;incstack = 0
  9084                           ;I2C_2_Master_Read@ack stored from wreg
  9085   00357E  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  9086   003580                     
  9087                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  9088   003580  EC03  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9089   003584                     
  9090                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  9091   003584  010E               	movlb	14	; () banked
  9092   003586  87DA               	bsf	218,3,b	;volatile
  9093                           
  9094                           ;i2c.c: 56:   I2C_2_Master_Idle();
  9095   003588  EC03  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9096   00358C                     
  9097                           ;i2c.c: 57:   tmp = SSP2BUF;
  9098   00358C  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  9099                           
  9100                           ;i2c.c: 58:   I2C_2_Master_Idle();
  9101   003590  EC03  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9102   003594                     
  9103                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  9104   003594  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  9105   003596  B4D8               	btfsc	status,2,c
  9106   003598  EFD0  F01A         	goto	u1821
  9107   00359C  EFD4  F01A         	goto	u1820
  9108   0035A0                     u1821:
  9109   0035A0  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9110   0035A2  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  9111   0035A4  EFD5  F01A         	goto	u1838
  9112   0035A8                     u1820:
  9113   0035A8  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9114   0035AA                     u1838:
  9115   0035AA  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  9116   0035AC  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  9117   0035AE  010E               	movlb	14	; () banked
  9118   0035B0  51DA               	movf	218,w,b	;volatile
  9119   0035B2  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9120   0035B4  0BDF               	andlw	-33
  9121   0035B6  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9122   0035B8  6FDA               	movwf	218,b	;volatile
  9123   0035BA                     
  9124                           ; BSR set to: 14
  9125                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  9126   0035BA  89DA               	bsf	218,4,b	;volatile
  9127   0035BC                     
  9128                           ; BSR set to: 14
  9129                           ;i2c.c: 61:   return tmp;
  9130   0035BC  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  9131   0035BE                     
  9132                           ; BSR set to: 14
  9133   0035BE  0012               	return		;funcret
  9134   0035C0                     __end_of_I2C_2_Master_Read:
  9135                           	callstack 0
  9136                           
  9137 ;; *************** function ___lldiv *****************
  9138 ;; Defined at:
  9139 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;  dividend        4    0[COMRAM] unsigned long 
  9142 ;;  divisor         4    4[COMRAM] unsigned long 
  9143 ;; Auto vars:     Size  Location     Type
  9144 ;;  quotient        4    8[COMRAM] unsigned long 
  9145 ;;  counter         1   12[COMRAM] unsigned char 
  9146 ;; Return value:  Size  Location     Type
  9147 ;;                  4    0[COMRAM] unsigned long 
  9148 ;; Registers used:
  9149 ;;		wreg, status,2, status,0
  9150 ;; Tracked objects:
  9151 ;;		On entry : 0/0
  9152 ;;		On exit  : 0/0
  9153 ;;		Unchanged: 0/0
  9154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9155 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9156 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9158 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9159 ;;Total ram usage:       13 bytes
  9160 ;; Hardware stack levels used: 1
  9161 ;; Hardware stack levels required when called: 1
  9162 ;; This function calls:
  9163 ;;		Nothing
  9164 ;; This function is called by:
  9165 ;;		_average_RGBC
  9166 ;;		_convert_HSV
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           	psect	text57
  9171   002BC2                     __ptext57:
  9172                           	callstack 0
  9173   002BC2                     ___lldiv:
  9174                           	callstack 27
  9175   002BC2  0E00               	movlw	0
  9176   002BC4  6E09               	movwf	___lldiv@quotient^0,c
  9177   002BC6  0E00               	movlw	0
  9178   002BC8  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  9179   002BCA  0E00               	movlw	0
  9180   002BCC  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  9181   002BCE  0E00               	movlw	0
  9182   002BD0  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  9183   002BD2  5005               	movf	___lldiv@divisor^0,w,c
  9184   002BD4  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  9185   002BD6  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  9186   002BD8  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  9187   002BDA  B4D8               	btfsc	status,2,c
  9188   002BDC  EFF2  F015         	goto	u2061
  9189   002BE0  EFF4  F015         	goto	u2060
  9190   002BE4                     u2061:
  9191   002BE4  EF2A  F016         	goto	l774
  9192   002BE8                     u2060:
  9193   002BE8  0E01               	movlw	1
  9194   002BEA  6E0D               	movwf	___lldiv@counter^0,c
  9195   002BEC  EFFE  F015         	goto	l3227
  9196   002BF0                     l3225:
  9197   002BF0  90D8               	bcf	status,0,c
  9198   002BF2  3605               	rlcf	___lldiv@divisor^0,f,c
  9199   002BF4  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  9200   002BF6  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  9201   002BF8  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  9202   002BFA  2A0D               	incf	___lldiv@counter^0,f,c
  9203   002BFC                     l3227:
  9204   002BFC  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  9205   002BFE  EF03  F016         	goto	u2071
  9206   002C02  EF05  F016         	goto	u2070
  9207   002C06                     u2071:
  9208   002C06  EFF8  F015         	goto	l3225
  9209   002C0A                     u2070:
  9210   002C0A                     l3229:
  9211   002C0A  90D8               	bcf	status,0,c
  9212   002C0C  3609               	rlcf	___lldiv@quotient^0,f,c
  9213   002C0E  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  9214   002C10  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  9215   002C12  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  9216   002C14  5005               	movf	___lldiv@divisor^0,w,c
  9217   002C16  5C01               	subwf	___lldiv@dividend^0,w,c
  9218   002C18  5006               	movf	(___lldiv@divisor+1)^0,w,c
  9219   002C1A  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  9220   002C1C  5007               	movf	(___lldiv@divisor+2)^0,w,c
  9221   002C1E  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  9222   002C20  5008               	movf	(___lldiv@divisor+3)^0,w,c
  9223   002C22  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  9224   002C24  A0D8               	btfss	status,0,c
  9225   002C26  EF17  F016         	goto	u2081
  9226   002C2A  EF19  F016         	goto	u2080
  9227   002C2E                     u2081:
  9228   002C2E  EF22  F016         	goto	l3237
  9229   002C32                     u2080:
  9230   002C32  5005               	movf	___lldiv@divisor^0,w,c
  9231   002C34  5E01               	subwf	___lldiv@dividend^0,f,c
  9232   002C36  5006               	movf	(___lldiv@divisor+1)^0,w,c
  9233   002C38  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  9234   002C3A  5007               	movf	(___lldiv@divisor+2)^0,w,c
  9235   002C3C  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  9236   002C3E  5008               	movf	(___lldiv@divisor+3)^0,w,c
  9237   002C40  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  9238   002C42  8009               	bsf	___lldiv@quotient^0,0,c
  9239   002C44                     l3237:
  9240   002C44  90D8               	bcf	status,0,c
  9241   002C46  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  9242   002C48  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  9243   002C4A  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  9244   002C4C  3205               	rrcf	___lldiv@divisor^0,f,c
  9245   002C4E  2E0D               	decfsz	___lldiv@counter^0,f,c
  9246   002C50  EF05  F016         	goto	l3229
  9247   002C54                     l774:
  9248   002C54  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9249   002C58  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9250   002C5C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9251   002C60  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9252   002C64  0012               	return		;funcret
  9253   002C66                     __end_of___lldiv:
  9254                           	callstack 0
  9255                           
  9256 ;; *************** function _color_click_init *****************
  9257 ;; Defined at:
  9258 ;;		line 7 in file "color.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;		None
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;		None
  9263 ;; Return value:  Size  Location     Type
  9264 ;;                  1    wreg      void 
  9265 ;; Registers used:
  9266 ;;		wreg, status,2, status,0, cstack
  9267 ;; Tracked objects:
  9268 ;;		On entry : 0/0
  9269 ;;		On exit  : 0/0
  9270 ;;		Unchanged: 0/0
  9271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9274 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9275 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9276 ;;Total ram usage:        1 bytes
  9277 ;; Hardware stack levels used: 1
  9278 ;; Hardware stack levels required when called: 4
  9279 ;; This function calls:
  9280 ;;		_I2C_2_Master_Init
  9281 ;;		_color_writetoaddr
  9282 ;; This function is called by:
  9283 ;;		_main
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text58
  9288   003750                     __ptext58:
  9289                           	callstack 0
  9290   003750                     _color_click_init:
  9291                           	callstack 26
  9292   003750                     
  9293                           ;color.c: 10:     I2C_2_Master_Init();
  9294   003750  ECEE  F01B         	call	_I2C_2_Master_Init	;wreg free
  9295   003754                     
  9296                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  9297   003754  0E01               	movlw	1
  9298   003756  6E03               	movwf	color_writetoaddr@value^0,c
  9299   003758  0E00               	movlw	0
  9300   00375A  EC92  F01C         	call	_color_writetoaddr
  9301   00375E                     
  9302                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  9303   00375E  0E3F               	movlw	63
  9304   003760  6E05               	movwf	??_color_click_init^0,c
  9305   003762  0E55               	movlw	85
  9306   003764                     u3437:
  9307   003764  2EE8               	decfsz	wreg,f,c
  9308   003766  D7FE               	bra	u3437
  9309   003768  2E05               	decfsz	??_color_click_init^0,f,c
  9310   00376A  D7FC               	bra	u3437
  9311   00376C  0000               	nop	
  9312   00376E                     
  9313                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  9314   00376E  0E03               	movlw	3
  9315   003770  6E03               	movwf	color_writetoaddr@value^0,c
  9316   003772  0E00               	movlw	0
  9317   003774  EC92  F01C         	call	_color_writetoaddr
  9318   003778                     
  9319                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  9320   003778  0ED5               	movlw	213
  9321   00377A  6E03               	movwf	color_writetoaddr@value^0,c
  9322   00377C  0E01               	movlw	1
  9323   00377E  EC92  F01C         	call	_color_writetoaddr
  9324   003782  0012               	return		;funcret
  9325   003784                     __end_of_color_click_init:
  9326                           	callstack 0
  9327                           
  9328 ;; *************** function _color_writetoaddr *****************
  9329 ;; Defined at:
  9330 ;;		line 28 in file "color.c"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;  address         1    wreg     unsigned char 
  9333 ;;  value           1    2[COMRAM] unsigned char 
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;  address         1    3[COMRAM] unsigned char 
  9336 ;; Return value:  Size  Location     Type
  9337 ;;                  1    wreg      void 
  9338 ;; Registers used:
  9339 ;;		wreg, status,2, status,0, cstack
  9340 ;; Tracked objects:
  9341 ;;		On entry : 0/0
  9342 ;;		On exit  : 0/0
  9343 ;;		Unchanged: 0/0
  9344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9345 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9349 ;;Total ram usage:        2 bytes
  9350 ;; Hardware stack levels used: 1
  9351 ;; Hardware stack levels required when called: 3
  9352 ;; This function calls:
  9353 ;;		_I2C_2_Master_Start
  9354 ;;		_I2C_2_Master_Stop
  9355 ;;		_I2C_2_Master_Write
  9356 ;; This function is called by:
  9357 ;;		_color_click_init
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           	psect	text59
  9362   003924                     __ptext59:
  9363                           	callstack 0
  9364   003924                     _color_writetoaddr:
  9365                           	callstack 26
  9366                           
  9367                           ;incstack = 0
  9368                           ;color_writetoaddr@address stored from wreg
  9369   003924  6E04               	movwf	color_writetoaddr@address^0,c
  9370   003926                     
  9371                           ;color.c: 29:     I2C_2_Master_Start();
  9372   003926  ECE6  F01C         	call	_I2C_2_Master_Start	;wreg free
  9373                           
  9374                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  9375   00392A  0E52               	movlw	82
  9376   00392C  ECCA  F01C         	call	_I2C_2_Master_Write
  9377                           
  9378                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  9379   003930  5004               	movf	color_writetoaddr@address^0,w,c
  9380   003932  0980               	iorlw	128
  9381   003934  ECCA  F01C         	call	_I2C_2_Master_Write
  9382                           
  9383                           ;color.c: 32:     I2C_2_Master_Write(value);
  9384   003938  5003               	movf	color_writetoaddr@value^0,w,c
  9385   00393A  ECCA  F01C         	call	_I2C_2_Master_Write
  9386                           
  9387                           ;color.c: 33:     I2C_2_Master_Stop();
  9388   00393E  ECE1  F01C         	call	_I2C_2_Master_Stop	;wreg free
  9389   003942  0012               	return		;funcret
  9390   003944                     __end_of_color_writetoaddr:
  9391                           	callstack 0
  9392                           
  9393 ;; *************** function _I2C_2_Master_Write *****************
  9394 ;; Defined at:
  9395 ;;		line 45 in file "i2c.c"
  9396 ;; Parameters:    Size  Location     Type
  9397 ;;  data_byte       1    wreg     unsigned char 
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;  data_byte       1    1[COMRAM] unsigned char 
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  1    wreg      void 
  9402 ;; Registers used:
  9403 ;;		wreg, status,2, status,0, cstack
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9413 ;;Total ram usage:        1 bytes
  9414 ;; Hardware stack levels used: 1
  9415 ;; Hardware stack levels required when called: 2
  9416 ;; This function calls:
  9417 ;;		_I2C_2_Master_Idle
  9418 ;; This function is called by:
  9419 ;;		_color_writetoaddr
  9420 ;;		_color_read_Red
  9421 ;;		_color_read_Green
  9422 ;;		_color_read_Blue
  9423 ;;		_color_read_Clear
  9424 ;; This function uses a non-reentrant model
  9425 ;;
  9426                           
  9427                           	psect	text60
  9428   003994                     __ptext60:
  9429                           	callstack 0
  9430   003994                     _I2C_2_Master_Write:
  9431                           	callstack 24
  9432                           
  9433                           ;incstack = 0
  9434                           ;I2C_2_Master_Write@data_byte stored from wreg
  9435   003994  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  9436   003996                     
  9437                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  9438   003996  EC03  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9439   00399A                     
  9440                           ;i2c.c: 48:   SSP2BUF = data_byte;
  9441   00399A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  9442   00399E  0012               	return		;funcret
  9443   0039A0                     __end_of_I2C_2_Master_Write:
  9444                           	callstack 0
  9445                           
  9446 ;; *************** function _I2C_2_Master_Stop *****************
  9447 ;; Defined at:
  9448 ;;		line 39 in file "i2c.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;		None
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      void 
  9455 ;; Registers used:
  9456 ;;		wreg, status,2, status,0, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9466 ;;Total ram usage:        0 bytes
  9467 ;; Hardware stack levels used: 1
  9468 ;; Hardware stack levels required when called: 2
  9469 ;; This function calls:
  9470 ;;		_I2C_2_Master_Idle
  9471 ;; This function is called by:
  9472 ;;		_color_writetoaddr
  9473 ;;		_color_read_Red
  9474 ;;		_color_read_Green
  9475 ;;		_color_read_Blue
  9476 ;;		_color_read_Clear
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480                           	psect	text61
  9481   0039C2                     __ptext61:
  9482                           	callstack 0
  9483   0039C2                     _I2C_2_Master_Stop:
  9484                           	callstack 24
  9485   0039C2                     
  9486                           ;i2c.c: 41:   I2C_2_Master_Idle();
  9487   0039C2  EC03  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9488   0039C6                     
  9489                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  9490   0039C6  010E               	movlb	14	; () banked
  9491   0039C8  85DA               	bsf	218,2,b	;volatile
  9492   0039CA                     
  9493                           ; BSR set to: 14
  9494   0039CA  0012               	return		;funcret
  9495   0039CC                     __end_of_I2C_2_Master_Stop:
  9496                           	callstack 0
  9497                           
  9498 ;; *************** function _I2C_2_Master_Start *****************
  9499 ;; Defined at:
  9500 ;;		line 27 in file "i2c.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;		None
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;		None
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  1    wreg      void 
  9507 ;; Registers used:
  9508 ;;		wreg, status,2, status,0, cstack
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9518 ;;Total ram usage:        0 bytes
  9519 ;; Hardware stack levels used: 1
  9520 ;; Hardware stack levels required when called: 2
  9521 ;; This function calls:
  9522 ;;		_I2C_2_Master_Idle
  9523 ;; This function is called by:
  9524 ;;		_color_writetoaddr
  9525 ;;		_color_read_Red
  9526 ;;		_color_read_Green
  9527 ;;		_color_read_Blue
  9528 ;;		_color_read_Clear
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           	psect	text62
  9533   0039CC                     __ptext62:
  9534                           	callstack 0
  9535   0039CC                     _I2C_2_Master_Start:
  9536                           	callstack 24
  9537   0039CC                     
  9538                           ;i2c.c: 29:   I2C_2_Master_Idle();
  9539   0039CC  EC03  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9540   0039D0                     
  9541                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  9542   0039D0  010E               	movlb	14	; () banked
  9543   0039D2  81DA               	bsf	218,0,b	;volatile
  9544   0039D4                     
  9545                           ; BSR set to: 14
  9546   0039D4  0012               	return		;funcret
  9547   0039D6                     __end_of_I2C_2_Master_Start:
  9548                           	callstack 0
  9549                           
  9550 ;; *************** function _I2C_2_Master_Idle *****************
  9551 ;; Defined at:
  9552 ;;		line 22 in file "i2c.c"
  9553 ;; Parameters:    Size  Location     Type
  9554 ;;		None
  9555 ;; Auto vars:     Size  Location     Type
  9556 ;;		None
  9557 ;; Return value:  Size  Location     Type
  9558 ;;                  1    wreg      void 
  9559 ;; Registers used:
  9560 ;;		wreg, status,2, status,0
  9561 ;; Tracked objects:
  9562 ;;		On entry : 0/0
  9563 ;;		On exit  : 0/0
  9564 ;;		Unchanged: 0/0
  9565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9569 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9570 ;;Total ram usage:        1 bytes
  9571 ;; Hardware stack levels used: 1
  9572 ;; Hardware stack levels required when called: 1
  9573 ;; This function calls:
  9574 ;;		Nothing
  9575 ;; This function is called by:
  9576 ;;		_I2C_2_Master_Start
  9577 ;;		_I2C_2_Master_RepStart
  9578 ;;		_I2C_2_Master_Stop
  9579 ;;		_I2C_2_Master_Write
  9580 ;;		_I2C_2_Master_Read
  9581 ;; This function uses a non-reentrant model
  9582 ;;
  9583                           
  9584                           	psect	text63
  9585   003806                     __ptext63:
  9586                           	callstack 0
  9587   003806                     _I2C_2_Master_Idle:
  9588                           	callstack 24
  9589   003806                     l323:
  9590   003806  010E               	movlb	14	; () banked
  9591   003808  B5D8               	btfsc	216,2,b	;volatile
  9592   00380A  EF09  F01C         	goto	u1741
  9593   00380E  EF0B  F01C         	goto	u1740
  9594   003812                     u1741:
  9595   003812  EF03  F01C         	goto	l323
  9596   003816                     u1740:
  9597   003816                     
  9598                           ; BSR set to: 14
  9599   003816  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9600   00381A  0E1F               	movlw	31
  9601   00381C  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  9602   00381E  A4D8               	btfss	status,2,c
  9603   003820  EF14  F01C         	goto	u1751
  9604   003824  EF16  F01C         	goto	u1750
  9605   003828                     u1751:
  9606   003828  EF03  F01C         	goto	l323
  9607   00382C                     u1750:
  9608   00382C                     
  9609                           ; BSR set to: 14
  9610   00382C  0012               	return		;funcret
  9611   00382E                     __end_of_I2C_2_Master_Idle:
  9612                           	callstack 0
  9613                           
  9614 ;; *************** function _I2C_2_Master_Init *****************
  9615 ;; Defined at:
  9616 ;;		line 4 in file "i2c.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      void 
  9623 ;; Registers used:
  9624 ;;		wreg, status,2
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9634 ;;Total ram usage:        0 bytes
  9635 ;; Hardware stack levels used: 1
  9636 ;; Hardware stack levels required when called: 1
  9637 ;; This function calls:
  9638 ;;		Nothing
  9639 ;; This function is called by:
  9640 ;;		_color_click_init
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           	psect	text64
  9645   0037DC                     __ptext64:
  9646                           	callstack 0
  9647   0037DC                     _I2C_2_Master_Init:
  9648                           	callstack 28
  9649   0037DC                     
  9650                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9651   0037DC  010E               	movlb	14	; () banked
  9652   0037DE  51D9               	movf	217,w,b	;volatile
  9653   0037E0  0BF0               	andlw	-16
  9654   0037E2  0908               	iorlw	8
  9655   0037E4  6FD9               	movwf	217,b	;volatile
  9656   0037E6                     
  9657                           ; BSR set to: 14
  9658                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9659   0037E6  8BD9               	bsf	217,5,b	;volatile
  9660                           
  9661                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9662   0037E8  0E9F               	movlw	159
  9663   0037EA  6FD6               	movwf	214,b	;volatile
  9664   0037EC                     
  9665                           ; BSR set to: 14
  9666                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9667   0037EC  8A84               	bsf	132,5,c	;volatile
  9668   0037EE                     
  9669                           ; BSR set to: 14
  9670                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9671   0037EE  8C84               	bsf	132,6,c	;volatile
  9672   0037F0                     
  9673                           ; BSR set to: 14
  9674                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9675   0037F0  9BA7               	bcf	167,5,b	;volatile
  9676   0037F2                     
  9677                           ; BSR set to: 14
  9678                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9679   0037F2  9DA7               	bcf	167,6,b	;volatile
  9680                           
  9681                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9682   0037F4  0E1D               	movlw	29
  9683   0037F6  6F1D               	movwf	29,b	;volatile
  9684                           
  9685                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9686   0037F8  0E1E               	movlw	30
  9687   0037FA  6F1C               	movwf	28,b	;volatile
  9688                           
  9689                           ;i2c.c: 18:   RD5PPS=0x1C;
  9690   0037FC  0E1C               	movlw	28
  9691   0037FE  6F6F               	movwf	111,b	;volatile
  9692                           
  9693                           ;i2c.c: 19:   RD6PPS=0x1B;
  9694   003800  0E1B               	movlw	27
  9695   003802  6F70               	movwf	112,b	;volatile
  9696   003804                     
  9697                           ; BSR set to: 14
  9698   003804  0012               	return		;funcret
  9699   003806                     __end_of_I2C_2_Master_Init:
  9700                           	callstack 0
  9701                           
  9702 ;; *************** function _buggy_lights_init *****************
  9703 ;; Defined at:
  9704 ;;		line 7 in file "buggy_lights.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;		None
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;		None
  9709 ;; Return value:  Size  Location     Type
  9710 ;;                  1    wreg      void 
  9711 ;; Registers used:
  9712 ;;		None
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9722 ;;Total ram usage:        0 bytes
  9723 ;; Hardware stack levels used: 1
  9724 ;; Hardware stack levels required when called: 1
  9725 ;; This function calls:
  9726 ;;		Nothing
  9727 ;; This function is called by:
  9728 ;;		_main
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           	psect	text65
  9733   003784                     __ptext65:
  9734                           	callstack 0
  9735   003784                     _buggy_lights_init:
  9736                           	callstack 29
  9737   003784                     
  9738                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
  9739   003784  9884               	bcf	132,4,c	;volatile
  9740                           
  9741                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
  9742   003786  9288               	bcf	136,1,c	;volatile
  9743                           
  9744                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
  9745   003788  9684               	bcf	132,3,c	;volatile
  9746                           
  9747                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
  9748   00378A  9086               	bcf	134,0,c	;volatile
  9749                           
  9750                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
  9751   00378C  9088               	bcf	136,0,c	;volatile
  9752                           
  9753                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
  9754   00378E  987C               	bcf	124,4,c	;volatile
  9755                           
  9756                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
  9757   003790  9280               	bcf	128,1,c	;volatile
  9758                           
  9759                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
  9760   003792  967C               	bcf	124,3,c	;volatile
  9761                           
  9762                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
  9763   003794  907E               	bcf	126,0,c	;volatile
  9764                           
  9765                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
  9766   003796  9080               	bcf	128,0,c	;volatile
  9767                           
  9768                           ;buggy_lights.c: 26:             TRISGbits.TRISG0 = 0;
  9769   003798  9087               	bcf	135,0,c	;volatile
  9770                           
  9771                           ;buggy_lights.c: 27:             TRISEbits.TRISE7 = 0;
  9772   00379A  9E85               	bcf	133,7,c	;volatile
  9773                           
  9774                           ;buggy_lights.c: 28:             TRISAbits.TRISA3 = 0;
  9775   00379C  9681               	bcf	129,3,c	;volatile
  9776                           
  9777                           ;buggy_lights.c: 30:             LATGbits.LATG0 = 0;
  9778   00379E  907F               	bcf	127,0,c	;volatile
  9779                           
  9780                           ;buggy_lights.c: 31:             LATEbits.LATE7 = 0;
  9781   0037A0  9E7D               	bcf	125,7,c	;volatile
  9782                           
  9783                           ;buggy_lights.c: 32:             LATAbits.LATA3 = 0;
  9784   0037A2  9679               	bcf	121,3,c	;volatile
  9785                           
  9786                           ;buggy_lights.c: 36:             TRISGbits.TRISG1 = 0;
  9787   0037A4  9287               	bcf	135,1,c	;volatile
  9788                           
  9789                           ;buggy_lights.c: 37:             TRISAbits.TRISA4 = 0;
  9790   0037A6  9881               	bcf	129,4,c	;volatile
  9791                           
  9792                           ;buggy_lights.c: 38:             TRISFbits.TRISF7 = 0;
  9793   0037A8  9E86               	bcf	134,7,c	;volatile
  9794                           
  9795                           ;buggy_lights.c: 40:             LATGbits.LATG1 = 0;
  9796   0037AA  927F               	bcf	127,1,c	;volatile
  9797                           
  9798                           ;buggy_lights.c: 41:             LATAbits.LATA4 = 0;
  9799   0037AC  9879               	bcf	121,4,c	;volatile
  9800                           
  9801                           ;buggy_lights.c: 42:             LATFbits.LATF7 = 0;
  9802   0037AE  9E7E               	bcf	126,7,c	;volatile
  9803   0037B0  0012               	return		;funcret
  9804   0037B2                     __end_of_buggy_lights_init:
  9805                           	callstack 0
  9806                           
  9807 ;; *************** function _Timer0_init *****************
  9808 ;; Defined at:
  9809 ;;		line 7 in file "timers.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;		None
  9812 ;; Auto vars:     Size  Location     Type
  9813 ;;		None
  9814 ;; Return value:  Size  Location     Type
  9815 ;;                  1    wreg      void 
  9816 ;; Registers used:
  9817 ;;		wreg, status,2, cstack
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9827 ;;Total ram usage:        0 bytes
  9828 ;; Hardware stack levels used: 1
  9829 ;; Hardware stack levels required when called: 3
  9830 ;; This function calls:
  9831 ;;		_reset_timer
  9832 ;; This function is called by:
  9833 ;;		_main
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           	psect	text66
  9838   0038C2                     __ptext66:
  9839                           	callstack 0
  9840   0038C2                     _Timer0_init:
  9841                           	callstack 27
  9842   0038C2                     
  9843                           ;timers.c: 9:     T0CON1bits.T0CS = 0b010;
  9844   0038C2  50D6               	movf	214,w,c	;volatile
  9845   0038C4  0B1F               	andlw	-225
  9846   0038C6  0940               	iorlw	64
  9847   0038C8  6ED6               	movwf	214,c	;volatile
  9848   0038CA                     
  9849                           ;timers.c: 10:     T0CON1bits.T0ASYNC = 1;
  9850   0038CA  88D6               	bsf	214,4,c	;volatile
  9851   0038CC                     
  9852                           ;timers.c: 14:     T0CON0bits.T016BIT = 1;
  9853   0038CC  88D5               	bsf	213,4,c	;volatile
  9854                           
  9855                           ;timers.c: 15:     T0CON1bits.T0CKPS = 0b1110;
  9856   0038CE  50D6               	movf	214,w,c	;volatile
  9857   0038D0  0BF0               	andlw	-16
  9858   0038D2  090E               	iorlw	14
  9859   0038D4  6ED6               	movwf	214,c	;volatile
  9860   0038D6                     
  9861                           ;timers.c: 20:     reset_timer();
  9862   0038D6  ECD0  F01C         	call	_reset_timer	;wreg free
  9863   0038DA                     
  9864                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
  9865   0038DA  010E               	movlb	14	; () banked
  9866   0038DC  8B29               	bsf	41,5,b	;volatile
  9867   0038DE                     
  9868                           ; BSR set to: 14
  9869                           ;timers.c: 23:     INTCONbits.PEIE = 1;
  9870   0038DE  8CF2               	bsf	242,6,c	;volatile
  9871   0038E0                     
  9872                           ; BSR set to: 14
  9873                           ;timers.c: 24:     INTCONbits.GIE = 1;
  9874   0038E0  8EF2               	bsf	242,7,c	;volatile
  9875   0038E2                     
  9876                           ; BSR set to: 14
  9877   0038E2  0012               	return		;funcret
  9878   0038E4                     __end_of_Timer0_init:
  9879                           	callstack 0
  9880                           
  9881 ;; *************** function _reset_timer *****************
  9882 ;; Defined at:
  9883 ;;		line 70 in file "timers.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;		None
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  1    wreg      void 
  9890 ;; Registers used:
  9891 ;;		wreg, status,2, cstack
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9901 ;;Total ram usage:        0 bytes
  9902 ;; Hardware stack levels used: 1
  9903 ;; Hardware stack levels required when called: 2
  9904 ;; This function calls:
  9905 ;;		_write_timer
  9906 ;; This function is called by:
  9907 ;;		_Timer0_init
  9908 ;;		_forward_navigation
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text67
  9913   0039A0                     __ptext67:
  9914                           	callstack 0
  9915   0039A0                     _reset_timer:
  9916                           	callstack 27
  9917   0039A0                     
  9918                           ;timers.c: 72:     write_timer(0, 0);
  9919   0039A0  0E00               	movlw	0
  9920   0039A2  6E01               	movwf	write_timer@tL^0,c
  9921   0039A4  0E00               	movlw	0
  9922   0039A6  ECD6  F01C         	call	_write_timer
  9923   0039AA  0012               	return		;funcret
  9924   0039AC                     __end_of_reset_timer:
  9925                           	callstack 0
  9926                           
  9927 ;; *************** function _write_timer *****************
  9928 ;; Defined at:
  9929 ;;		line 58 in file "timers.c"
  9930 ;; Parameters:    Size  Location     Type
  9931 ;;  tH              1    wreg     unsigned char 
  9932 ;;  tL              1    0[COMRAM] unsigned char 
  9933 ;; Auto vars:     Size  Location     Type
  9934 ;;  tH              1    1[COMRAM] unsigned char 
  9935 ;; Return value:  Size  Location     Type
  9936 ;;                  1    wreg      void 
  9937 ;; Registers used:
  9938 ;;		wreg
  9939 ;; Tracked objects:
  9940 ;;		On entry : 0/0
  9941 ;;		On exit  : 0/0
  9942 ;;		Unchanged: 0/0
  9943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9944 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9947 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9948 ;;Total ram usage:        2 bytes
  9949 ;; Hardware stack levels used: 1
  9950 ;; Hardware stack levels required when called: 1
  9951 ;; This function calls:
  9952 ;;		Nothing
  9953 ;; This function is called by:
  9954 ;;		_reset_timer
  9955 ;;		_return_to_sender
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           	psect	text68
  9960   0039AC                     __ptext68:
  9961                           	callstack 0
  9962   0039AC                     _write_timer:
  9963                           	callstack 28
  9964                           
  9965                           ;incstack = 0
  9966                           ;write_timer@tH stored from wreg
  9967   0039AC  6E02               	movwf	write_timer@tH^0,c
  9968   0039AE                     
  9969                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
  9970   0039AE  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  9971   0039B2                     
  9972                           ;timers.c: 64:     TMR0L = tL;
  9973   0039B2  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  9974   0039B6  0012               	return		;funcret
  9975   0039B8                     __end_of_write_timer:
  9976                           	callstack 0
  9977                           
  9978 ;; *************** function _ISR *****************
  9979 ;; Defined at:
  9980 ;;		line 254 in file "timers.c"
  9981 ;; Parameters:    Size  Location     Type
  9982 ;;		None
  9983 ;; Auto vars:     Size  Location     Type
  9984 ;;		None
  9985 ;; Return value:  Size  Location     Type
  9986 ;;                  1    wreg      void 
  9987 ;; Registers used:
  9988 ;;		wreg, status,2
  9989 ;; Tracked objects:
  9990 ;;		On entry : 0/0
  9991 ;;		On exit  : 0/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9998 ;;Total ram usage:        0 bytes
  9999 ;; Hardware stack levels used: 1
 10000 ;; This function calls:
 10001 ;;		Nothing
 10002 ;; This function is called by:
 10003 ;;		Interrupt level 2
 10004 ;; This function uses a non-reentrant model
 10005 ;;
 10006                           
 10007                           	psect	intcode
 10008   000008                     __pintcode:
 10009                           	callstack 0
 10010   000008                     _ISR:
 10011                           	callstack 23
 10012                           
 10013                           ;incstack = 0
 10014   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 10015   00000A                     
 10016                           ;timers.c: 257:     if (PIR0bits.TMR0IF) {
 10017   00000A  010E               	movlb	14	; () banked
 10018   00000C  AB33               	btfss	51,5,b	;volatile
 10019   00000E  EF0B  F000         	goto	i2u167_41
 10020   000012  EF0D  F000         	goto	i2u167_40
 10021   000016                     i2u167_41:
 10022   000016  EF1C  F000         	goto	i2l744
 10023   00001A                     i2u167_40:
 10024   00001A                     
 10025                           ; BSR set to: 14
 10026                           ;timers.c: 258:         if (returning) {
 10027   00001A  505D               	movf	_returning^0,w,c
 10028   00001C  B4D8               	btfsc	status,2,c
 10029   00001E  EF13  F000         	goto	i2u168_41
 10030   000022  EF15  F000         	goto	i2u168_40
 10031   000026                     i2u168_41:
 10032   000026  EF19  F000         	goto	i2l2649
 10033   00002A                     i2u168_40:
 10034   00002A                     
 10035                           ; BSR set to: 14
 10036                           ;timers.c: 260:             return_flag = 1;
 10037   00002A  0E01               	movlw	1
 10038   00002C  6E5C               	movwf	_return_flag^0,c
 10039                           
 10040                           ;timers.c: 261:         } else {
 10041   00002E  EF1B  F000         	goto	i2l2651
 10042   000032                     i2l2649:
 10043                           
 10044                           ; BSR set to: 14
 10045                           ;timers.c: 263:             lost_flag = 1;
 10046   000032  0E01               	movlw	1
 10047   000034  6E5B               	movwf	_lost_flag^0,c
 10048   000036                     i2l2651:
 10049                           
 10050                           ; BSR set to: 14
 10051                           ;timers.c: 267:         PIR0bits.TMR0IF = 0;
 10052   000036  9B33               	bcf	51,5,b	;volatile
 10053   000038                     i2l744:
 10054                           
 10055                           ; BSR set to: 14
 10056   000038  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 10057   00003A  0011               	retfie		f
 10058   00003C                     __end_of_ISR:
 10059                           	callstack 0
 10060                           
 10061                           	psect	rparam
 10062   000000                     
 10063                           	psect	temp
 10064   00005E                     btemp:
 10065                           	callstack 0
 10066   00005E                     	ds	1
 10067   000000                     int$flags	set	btemp
 10068   000000                     wtemp8	set	btemp+1
 10069   000000                     ttemp5	set	btemp+1
 10070   000000                     ttemp6	set	btemp+4
 10071   000000                     ttemp7	set	btemp+8
 10072                           
 10073                           	psect	idloc
 10074                           
 10075                           ;Config register IDLOC0 @ 0x200000
 10076                           ;	unspecified, using default values
 10077   200000                     	org	2097152
 10078   200000  FFFF               	dw	65535
 10079                           
 10080                           ;Config register IDLOC1 @ 0x200002
 10081                           ;	unspecified, using default values
 10082   200002                     	org	2097154
 10083   200002  FFFF               	dw	65535
 10084                           
 10085                           ;Config register IDLOC2 @ 0x200004
 10086                           ;	unspecified, using default values
 10087   200004                     	org	2097156
 10088   200004  FFFF               	dw	65535
 10089                           
 10090                           ;Config register IDLOC3 @ 0x200006
 10091                           ;	unspecified, using default values
 10092   200006                     	org	2097158
 10093   200006  FFFF               	dw	65535
 10094                           
 10095                           ;Config register IDLOC4 @ 0x200008
 10096                           ;	unspecified, using default values
 10097   200008                     	org	2097160
 10098   200008  FFFF               	dw	65535
 10099                           
 10100                           ;Config register IDLOC5 @ 0x20000A
 10101                           ;	unspecified, using default values
 10102   20000A                     	org	2097162
 10103   20000A  FFFF               	dw	65535
 10104                           
 10105                           ;Config register IDLOC6 @ 0x20000C
 10106                           ;	unspecified, using default values
 10107   20000C                     	org	2097164
 10108   20000C  FFFF               	dw	65535
 10109                           
 10110                           ;Config register IDLOC7 @ 0x20000E
 10111                           ;	unspecified, using default values
 10112   20000E                     	org	2097166
 10113   20000E  FFFF               	dw	65535
 10114                           
 10115                           	psect	config
 10116                           
 10117                           ;Config register CONFIG1L @ 0x300000
 10118                           ;	External Oscillator mode Selection bits
 10119                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 10120                           ;	Power-up default value for COSC bits
 10121                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 10122   300000                     	org	3145728
 10123   300000  AA                 	db	170
 10124                           
 10125                           ;Config register CONFIG1H @ 0x300001
 10126                           ;	unspecified, using default values
 10127                           ;	Clock Out Enable bit
 10128                           ;	CLKOUTEN = 0x1, unprogrammed default
 10129                           ;	Clock Switch Enable bit
 10130                           ;	CSWEN = 0x1, unprogrammed default
 10131                           ;	Fail-Safe Clock Monitor Enable bit
 10132                           ;	FCMEN = 0x1, unprogrammed default
 10133   300001                     	org	3145729
 10134   300001  FF                 	db	255
 10135                           
 10136                           ;Config register CONFIG2L @ 0x300002
 10137                           ;	unspecified, using default values
 10138                           ;	Master Clear Enable bit
 10139                           ;	MCLRE = 0x1, unprogrammed default
 10140                           ;	Power-up Timer Enable bit
 10141                           ;	PWRTE = 0x1, unprogrammed default
 10142                           ;	Low-power BOR enable bit
 10143                           ;	LPBOREN = 0x1, unprogrammed default
 10144                           ;	Brown-out Reset Enable bits
 10145                           ;	BOREN = 0x3, unprogrammed default
 10146   300002                     	org	3145730
 10147   300002  FF                 	db	255
 10148                           
 10149                           ;Config register CONFIG2H @ 0x300003
 10150                           ;	unspecified, using default values
 10151                           ;	Brown Out Reset Voltage selection bits
 10152                           ;	BORV = 0x3, unprogrammed default
 10153                           ;	ZCD Disable bit
 10154                           ;	ZCD = 0x1, unprogrammed default
 10155                           ;	PPSLOCK bit One-Way Set Enable bit
 10156                           ;	PPS1WAY = 0x1, unprogrammed default
 10157                           ;	Stack Full/Underflow Reset Enable bit
 10158                           ;	STVREN = 0x1, unprogrammed default
 10159                           ;	Debugger Enable bit
 10160                           ;	DEBUG = 0x1, unprogrammed default
 10161                           ;	Extended Instruction Set Enable bit
 10162                           ;	XINST = 0x1, unprogrammed default
 10163   300003                     	org	3145731
 10164   300003  FF                 	db	255
 10165                           
 10166                           ;Config register CONFIG3L @ 0x300004
 10167                           ;	WDT Period Select bits
 10168                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 10169                           ;	WDT operating mode
 10170                           ;	WDTE = OFF, WDT Disabled
 10171   300004                     	org	3145732
 10172   300004  9F                 	db	159
 10173                           
 10174                           ;Config register CONFIG3H @ 0x300005
 10175                           ;	unspecified, using default values
 10176                           ;	WDT Window Select bits
 10177                           ;	WDTCWS = 0x7, unprogrammed default
 10178                           ;	WDT input clock selector
 10179                           ;	WDTCCS = 0x7, unprogrammed default
 10180   300005                     	org	3145733
 10181   300005  FF                 	db	255
 10182                           
 10183                           ;Config register CONFIG4L @ 0x300006
 10184                           ;	unspecified, using default values
 10185                           ;	Write Protection Block 0
 10186                           ;	WRT0 = 0x1, unprogrammed default
 10187                           ;	Write Protection Block 1
 10188                           ;	WRT1 = 0x1, unprogrammed default
 10189                           ;	Write Protection Block 2
 10190                           ;	WRT2 = 0x1, unprogrammed default
 10191                           ;	Write Protection Block 3
 10192                           ;	WRT3 = 0x1, unprogrammed default
 10193                           ;	Write Protection Block 3
 10194                           ;	WRT4 = 0x1, unprogrammed default
 10195                           ;	Write Protection Block 3
 10196                           ;	WRT5 = 0x1, unprogrammed default
 10197                           ;	Write Protection Block 3
 10198                           ;	WRT6 = 0x1, unprogrammed default
 10199                           ;	Write Protection Block 3
 10200                           ;	WRT7 = 0x1, unprogrammed default
 10201   300006                     	org	3145734
 10202   300006  FF                 	db	255
 10203                           
 10204                           ;Config register CONFIG4H @ 0x300007
 10205                           ;	unspecified, using default values
 10206                           ;	Configuration Register Write Protection bit
 10207                           ;	WRTC = 0x1, unprogrammed default
 10208                           ;	Boot Block Write Protection bit
 10209                           ;	WRTB = 0x1, unprogrammed default
 10210                           ;	Data EEPROM Write Protection bit
 10211                           ;	WRTD = 0x1, unprogrammed default
 10212                           ;	Scanner Enable bit
 10213                           ;	SCANE = 0x1, unprogrammed default
 10214                           ;	Low Voltage Programming Enable bit
 10215                           ;	LVP = 0x1, unprogrammed default
 10216   300007                     	org	3145735
 10217   300007  FF                 	db	255
 10218                           
 10219                           ;Config register CONFIG5L @ 0x300008
 10220                           ;	unspecified, using default values
 10221                           ;	UserNVM Program Memory Code Protection bit
 10222                           ;	CP = 0x1, unprogrammed default
 10223                           ;	DataNVM Memory Code Protection bit
 10224                           ;	CPD = 0x1, unprogrammed default
 10225   300008                     	org	3145736
 10226   300008  FF                 	db	255
 10227                           
 10228                           ;Config register CONFIG5H @ 0x300009
 10229                           ;	unspecified, using default values
 10230   300009                     	org	3145737
 10231   300009  FF                 	db	255
 10232                           
 10233                           ;Config register CONFIG6L @ 0x30000A
 10234                           ;	unspecified, using default values
 10235                           ;	Table Read Protection Block 0
 10236                           ;	EBTR0 = 0x1, unprogrammed default
 10237                           ;	Table Read Protection Block 1
 10238                           ;	EBTR1 = 0x1, unprogrammed default
 10239                           ;	Table Read Protection Block 2
 10240                           ;	EBTR2 = 0x1, unprogrammed default
 10241                           ;	Table Read Protection Block 3
 10242                           ;	EBTR3 = 0x1, unprogrammed default
 10243                           ;	Table Read Protection Block 4
 10244                           ;	EBTR4 = 0x1, unprogrammed default
 10245                           ;	Table Read Protection Block 5
 10246                           ;	EBTR5 = 0x1, unprogrammed default
 10247                           ;	Table Read Protection Block 6
 10248                           ;	EBTR6 = 0x1, unprogrammed default
 10249                           ;	Table Read Protection Block 7
 10250                           ;	EBTR7 = 0x1, unprogrammed default
 10251   30000A                     	org	3145738
 10252   30000A  FF                 	db	255
 10253                           
 10254                           ;Config register CONFIG6H @ 0x30000B
 10255                           ;	unspecified, using default values
 10256                           ;	Boot Block Table Read Protection bit
 10257                           ;	EBTRB = 0x1, unprogrammed default
 10258   30000B                     	org	3145739
 10259   30000B  FF                 	db	255
 10260                           tosu	equ	0xFFF
 10261                           tosh	equ	0xFFE
 10262                           tosl	equ	0xFFD
 10263                           stkptr	equ	0xFFC
 10264                           pclatu	equ	0xFFB
 10265                           pclath	equ	0xFFA
 10266                           pcl	equ	0xFF9
 10267                           tblptru	equ	0xFF8
 10268                           tblptrh	equ	0xFF7
 10269                           tblptrl	equ	0xFF6
 10270                           tablat	equ	0xFF5
 10271                           prodh	equ	0xFF4
 10272                           prodl	equ	0xFF3
 10273                           indf0	equ	0xFEF
 10274                           postinc0	equ	0xFEE
 10275                           postdec0	equ	0xFED
 10276                           preinc0	equ	0xFEC
 10277                           plusw0	equ	0xFEB
 10278                           fsr0h	equ	0xFEA
 10279                           fsr0l	equ	0xFE9
 10280                           wreg	equ	0xFE8
 10281                           indf1	equ	0xFE7
 10282                           postinc1	equ	0xFE6
 10283                           postdec1	equ	0xFE5
 10284                           preinc1	equ	0xFE4
 10285                           plusw1	equ	0xFE3
 10286                           fsr1h	equ	0xFE2
 10287                           fsr1l	equ	0xFE1
 10288                           bsr	equ	0xFE0
 10289                           indf2	equ	0xFDF
 10290                           postinc2	equ	0xFDE
 10291                           postdec2	equ	0xFDD
 10292                           preinc2	equ	0xFDC
 10293                           plusw2	equ	0xFDB
 10294                           fsr2h	equ	0xFDA
 10295                           fsr2l	equ	0xFD9
 10296                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        27
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      93
    BANK0           160     32     106
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    average_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    card_blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_cyan@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_cyan@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_white@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_white@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    colour_to_key@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    colour_to_key@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    convert_HSV@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    convert_HSV@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    forward_navigation@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward_navigation@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    forward_navigation@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    forward_navigation@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    manoeuvre_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_manoeuvre(BANK0[20]), 

    max_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    min_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    pick_card@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    pick_card@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    read_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    read_timer@tH	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerH(COMRAM[1]), 

    read_timer@tL	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerL(COMRAM[1]), 

    read_trail@man	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@mann(COMRAM[1]), 

    read_trail@tH	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerH(COMRAM[1]), 

    read_trail@tL	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerL(COMRAM[1]), 

    return_to_sender@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    return_to_sender@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    S1144DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1144DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2827$buffer	PTR unsigned char  size(2) Largest target is 0

    S2827$source	PTR const unsigned char  size(2) Largest target is 0

    scale_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    squareReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    squareReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_high(BANK0[20]), 

    timer_low_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_low(BANK0[20]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    UTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    UTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    wait_for_wall@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_forward_navigation
    _return_to_sender->_pick_card
    _forward_navigation->_convert_HSV
    _wait_for_wall->_read_RGBC
    _scale_RGB->___fltol
    ___fltol->___flmul
    ___flmul->___xxtofl
    _pick_card->_card_blue
    _pick_card->_card_cyan
    _pick_card->_card_green
    _pick_card->_card_orange
    _pick_card->_card_pink
    _pick_card->_card_red
    _pick_card->_card_yellow
    _card_yellow->_headbuttReverse
    _card_yellow->_squareReverse
    _card_yellow->_turnLeft90
    _card_yellow->_turnRight90
    _card_white->_UTurn
    _card_white->_headbuttReverse
    _card_red->_headbuttReverse
    _card_red->_turnLeft90
    _card_red->_turnRight90
    _card_pink->_headbuttReverse
    _card_pink->_squareReverse
    _card_pink->_turnLeft90
    _card_pink->_turnRight90
    _squareReverse->_fullSpeedReverse
    _card_orange->_headbuttReverse
    _card_orange->_turnLeft135
    _card_orange->_turnRight135
    _card_green->_headbuttReverse
    _card_green->_turnLeft90
    _card_green->_turnRight90
    _turnRight90->_turnRight
    _turnLeft90->_turnLeft
    _card_cyan->_headbuttReverse
    _card_cyan->_turnLeft135
    _card_cyan->_turnRight135
    _turnRight135->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft135->_turnLeft
    _card_blue->_UTurn
    _card_blue->_headbuttReverse
    _headbuttReverse->_fullSpeedReverse
    _fullSpeedReverse->_setMotorPWM
    _UTurn->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _convert_HSV->___lldiv
    _average_RGBC->___lldiv
    _read_RGBC->_color_read_Blue
    _read_RGBC->_color_read_Clear
    _read_RGBC->_color_read_Green
    _read_RGBC->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  382106
                                             74 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                 _forward_navigation
                    _initDCmotorsPWM
                         _initUSART4
                   _return_to_sender
 ---------------------------------------------------------------------------------
 (1) _return_to_sender                                     5     3      2  181907
                                             38 COMRAM     5     3      2
                     _fullSpeedAhead
                          _pick_card
                         _read_trail
                        _start_timer
                               _stop
                         _stop_timer
                   _toggle_main_beam
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _toggle_main_beam                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_trail                                           3     0      3     294
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward_navigation                                   9     5      4  198870
                                             65 COMRAM     9     5      4
                       _average_RGBC
                      _colour_to_key
                        _convert_HSV
                     _fullSpeedAhead
                          _pick_card
                         _read_timer
                        _reset_timer
                          _scale_RGB
                        _start_timer
                               _stop
                         _stop_timer
               _toggle_tricolour_LED
                      _wait_for_wall
                        _write_trail
 ---------------------------------------------------------------------------------
 (2) _write_trail                                          3     1      2     218
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _wait_for_wall                                        4     2      2     910
                                             12 COMRAM     4     2      2
                          _read_RGBC
 ---------------------------------------------------------------------------------
 (2) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _scale_RGB                                            3     2      1    5963
                                             49 COMRAM     3     2      1
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1236
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1143
                                             39 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3420
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_timer                                           2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _pick_card                                            6     2      4  175154
                                             32 COMRAM     6     2      4
                          _card_blue
                          _card_cyan
                         _card_green
                        _card_orange
                          _card_pink
                           _card_red
                         _card_white
                        _card_yellow
 ---------------------------------------------------------------------------------
 (3) _card_yellow                                          5     2      3   28538
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_white                                           2     0      2   15132
                                             27 COMRAM     2     0      2
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (3) _card_red                                             5     2      3   21938
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_pink                                            5     2      3   28538
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _squareReverse                                        4     2      2    6512
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (3) _card_orange                                          5     2      3   21330
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _card_green                                           5     2      3   21938
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _turnRight90                                          4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnLeft90                                           4     2      2    6664
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_cyan                                            5     2      3   21330
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                         4     2      2    6208
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (5) _turnRight                                            5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                          4     2      2    6360
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_blue                                            5     2      3   15274
                                             27 COMRAM     5     2      3
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (4) _headbuttReverse                                      4     2      2    8336
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (5) _toggle_brake_lights                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _fullSpeedReverse                                     5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _UTurn                                                4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
            _toggle_right_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (5) _turnLeft                                             5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _toggle_right_indicators                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _toggle_left_indicators                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    3373
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    1829
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _convert_HSV                                         52    50      2    5717
                                             13 COMRAM    52    50      2
                            ___lldiv
                             ___lmul
                            _max_RGB
                            _min_RGB
 ---------------------------------------------------------------------------------
 (3) _min_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _max_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1434
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _colour_to_key                                        5     3      2     932
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _average_RGBC                                        20    19      1    3012
                                             13 COMRAM    20    19      1
                            ___lldiv
                          _read_RGBC
 ---------------------------------------------------------------------------------
 (3) _read_RGBC                                            1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (4) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1834
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (6) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _forward_navigation
     _average_RGBC
       ___lldiv
       _read_RGBC
         _color_read_Blue
           _I2C_2_Master_Read
             _I2C_2_Master_Idle
           _I2C_2_Master_RepStart
             _I2C_2_Master_Idle
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Clear
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Green
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Red
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
     _colour_to_key
     _convert_HSV
       ___lldiv
       ___lmul
       _max_RGB
       _min_RGB
     _fullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _pick_card
       _card_blue
         _UTurn
           _stop
             _setMotorPWM
           _toggle_left_indicators
           _toggle_right_indicators
           _turnLeft
             _setMotorPWM
         _headbuttReverse
           _fullSpeedReverse
             _setMotorPWM
           _stop
           _toggle_brake_lights
       _card_cyan
         _headbuttReverse
         _turnLeft135
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight135
           _stop
           _toggle_right_indicators
           _turnRight
             _setMotorPWM
       _card_green
         _headbuttReverse
         _turnLeft90
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight90
           _stop
           _toggle_right_indicators
           _turnRight
       _card_orange
         _headbuttReverse
         _turnLeft135
         _turnRight135
       _card_pink
         _headbuttReverse
         _squareReverse
           _fullSpeedReverse
           _stop
           _toggle_brake_lights
         _turnLeft90
         _turnRight90
       _card_red
         _headbuttReverse
         _turnLeft90
         _turnRight90
       _card_white
         _UTurn
         _headbuttReverse
       _card_yellow
         _headbuttReverse
         _squareReverse
         _turnLeft90
         _turnRight90
     _read_timer
     _reset_timer
     _scale_RGB
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _start_timer
     _stop
     _stop_timer
     _toggle_tricolour_LED
     _wait_for_wall
       _read_RGBC
     _write_trail
   _initDCmotorsPWM
   _initUSART4
   _return_to_sender
     _fullSpeedAhead
     _pick_card
     _read_trail
     _start_timer
     _stop
     _stop_timer
     _toggle_main_beam
     _write_timer

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      6A       5       66.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5D       1       98.9%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      9      0       0      57        0.0%
BITBIGSFRlllhhh      9      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C7      61        0.0%
DATA                 0      0      C7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 14 19:24:10 2024

                   _turn180Delay 00C0                  ??_wait_for_wall 000F                   _color_read_Red 33B8  
                _color_read_Blue 34A8                  _trail_timer_low 0074              card_green@backtrack 001E  
                             l30 38C0                               l42 3902                               l27 37B0  
                             l36 3852                               l45 28E0                               l71 3942  
                             l39 3922                               l80 34F6                               l74 3406  
                             l83 34A6                               l68 3782                               l92 1F6E  
                             l77 3456                               l86 33B6                               l99 353A  
            ___wmul@multiplicand 0003                 _trail_timer_high 0088                 _color_read_Clear 3458  
               _color_read_Green 3408                              l102 2FE2                              l104 301C  
                            l112 2818                              l107 2F66                              l140 1948  
                            l109 2FA0                              l320 3804                              l128 14E4  
                            l232 2400                              l240 2E24                              l225 2D96  
                            l323 3806                              l139 1946                              l332 39C0  
                            l341 35BE                              l261 292A                              l245 2A9A  
                            l253 29E2                              l326 382C                              l335 39CA  
                            l264 299A                              l248 2B0A                              l272 2BC0  
                            l256 2A52                              l329 39D4                              l281 36A6  
                            l338 399E                              l290 374E                              l275 3716  
                            l284 366C                              l436 24B2                              l269 2B50  
                            l293 3632                              l541 3162                              l278 36DE  
                            l702 39D8                              l711 39AA                              l287 357C  
                            l439 253E                              l705 3976                              l562 2EA4  
                            l466 3960                              l714 35F8                              l555 3302  
                            l708 39B6                              l548 3232                              l717 37DA  
                            l726 22AC                              l583 329A                              l576 31CA  
                            l736 2D06                              l569 2F24                              l586 3878  
                            l747 389E                              l781 2C64                              l774 2C54  
                            l758 30EA                              l759 30FA                              l599 2742  
                            l696 38E2                              l699 39DC                              _ISR 0008  
         ??_toggle_tricolour_LED 0001                      _start_timer 39DA                              wreg 0FE8  
       __end_of_toggle_main_beam 3854                     ___flmul@aexp 0020                     ___flmul@bexp 0021  
                   ?_convert_HSV 000E                     ___flmul@sign 001B                     ___flmul@temp 0026  
                   ___flmul@prod 0022                   min_RGB@min_val 0005                      _squareDelay 00BC  
                           ?_ISR 0001                     ___fltol@exp1 0031                             l1044 2646  
                           l3001 3458                             l1402 1FC6                             l3003 349E  
                           l3011 36F0                             l3101 2F98                             l1245 3090  
                           l3013 3706                             l3021 36B8                             l1405 2122  
                           l1238 3088                             l3031 367E                             l3015 3712  
                           l3007 36E0                             l3023 36CE                             l1416 20BA  
                           l3033 3696                             l3041 3644                             l3009 36E4  
                           l3025 36DA                             l3017 36A8                             l3121 31D0  
                           l3113 3138                             l3105 30FC                             l1361 1A0E  
                           l1409 205E                             l1370 1C7C                             l3211 30A2  
                           l3051 3550                             l3035 36A2                             l3027 366E  
                           l3043 365C                             l3019 36AC                             l3123 31EC  
                           l3107 3100                             l3203 3854                             l1371 1C6A  
                           l3205 39AE                             l3221 2BD2                             l3213 30B0  
                           l3053 3568                             l3061 371C                             l3141 32D8  
                           l3133 329C                             l3029 3672                             l3045 3668  
                           l3037 3634                             l3109 311C                             l3301 1AD4  
                           l1365 1D72                             l3207 39B2                             l3231 2C14  
                           l3223 2BE8                             l3215 30C0                             l3055 3574  
                           l3047 353C                             l3063 3728                             l3135 32A0  
                           l3039 3638                             l3127 3208                             l3119 31CC  
                           l3071 35FE                             l3151 2E52                             l3311 1B36  
                           l3303 1AE0                             l1368 1C04                             l3233 2C32  
                           l3225 2BF0                             l3217 30CA                             l3209 3092  
                           l3081 2FA2                             l3057 3578                             l3049 3544  
                           l3065 373E                             l3137 32BC                             l3073 360A  
                           l3161 2EA6                             l3321 1BCC                             l3313 1B42  
                           l3305 1AF0                             l3241 194A                             l1378 1D34  
                           l3235 2C42                             l3227 2BFC                             l3219 2BC2  
                           l3083 2FB0                             l3067 374A                             l3059 3718  
                           l3075 3622                             l3163 2EAA                             l3155 2E7A  
                           l3147 2E26                             l3331 1C22                             l3323 1BEA  
                           l3315 1B5E                             l3307 1B0A                             l3251 1986  
                           l3243 1956                             l3411 2636                             l3403 25FA  
                           l3237 2C44                             l3229 2C0A                             l3501 1F4A  
                           l3085 2FD0                             l3093 2F26                             l3077 362E  
                           l3069 35FA                             l3165 2ED2                             l3149 2E2A  
                           l3341 1C8C                             l3333 1C26                             l3325 1BF4  
                           l3317 1B88                             l3309 1B1A                             l3261 19B8  
                           l3253 1996                             l3245 1964                             l3405 2606  
                           l3421 1FD6                             l3239 2C4E                             l3079 3362  
                           l3503 1F5C                             l3087 3002                             l3095 2F34  
                           l3191 3238                             l3183 31A0                             l3175 3164  
                           l4151 2E8E                             l3351 1CEE                             l3343 1C98  
                           l3335 1C34                             l3327 1C02                             l3319 1BBE  
                           l3271 19F8                             l3263 19C6                             l3255 199C  
                           l3247 1966                             l3407 2616                             l3431 2014  
                           l3423 1FEC                             l3415 1F72                             l3089 3014  
                           l3097 2F54                             l3601 1352                             l3521 0E42  
                           l4161 3284                             l3193 3254                             l3177 3168  
                           l3169 2EFA                             l4153 314C                             l3361 1D56  
                           l3353 1D02                             l3345 1CA6                             l3337 1C62  
                           l3329 1C14                             l3281 1A42                             l3273 19FE  
                           l3265 19C8                             l3257 19AC                             l3249 1976  
                           l3409 2626                             l3441 209C                             l3433 2046  
                           l3417 1F82                             l3513 352A                             l3505 34F8  
                           l3099 2F86                             l3611 1414                             l3603 135E  
                           l3531 0E9A                             l3523 0E52                             l4163 32EC  
                           l3179 3184                             l4155 2F0E                             l3363 1D58  
                           l3355 1D1C                             l3347 1CD0                             l3291 1A92  
                           l3283 1A4E                             l3275 1A1E                             l3267 19D8  
                           l3259 19B2                             l3371 2542                             l3451 20F2  
                           l3443 20AA                             l3435 2048                             l3427 2000  
                           l3419 1F90                             l3515 2744                             l3507 34FC  
                           l3701 1876                             l3621 147A                             l3605 1370  
                           l3541 0F48                             l3533 0EC4                             l3613 141C  
                           l3525 0E5E                             l3517 0E1A                             l2821 3026  
                           l2813 387A                             l2901 2DB2                             l3197 3270  
                           l3189 3234                             l4157 31B4                             l4149 26FC  
                           l3357 1D38                             l3365 1D5E                             l3349 1CD4  
                           l3293 1A9E                             l3285 1A58                             l3277 1A2E  
                           l3269 19E8                             l3381 2598                             l3373 2558  
                           l3453 2102                             l3445 20C8                             l3437 2054  
                           l3429 2008                             l3509 3504                             l3461 382E  
                           l3471 37EE                             l3711 18E0                             l3703 187A  
                           l3631 14E6                             l3623 14AA                             l3615 142E  
                           l3607 13B0                             l3551 1008                             l3543 0F78  
                           l3535 0EC4                             l3527 0E70                             l3519 0E32  
                           l2831 305C                             l2823 3038                             l2815 3896  
                           l2911 2DE8                             l2903 2DBA                             l4159 321C  
                           l3367 1D62                             l3359 1D48                             l3295 1AAA  
                           l3287 1A6E                             l3383 25A8                             l3455 2110  
                           l3447 20CA                             l3439 2090                             l3463 281A  
                           l3473 37F0                             l3465 37DC                             l3801 375E  
                           l3481 1DBC                             l3713 1900                             l3705 189A  
                           l3641 1566                             l3633 14EA                             l3625 14B2  
                           l3617 143A                             l3609 13E4                             l3561 10BC  
                           l3553 103C                             l3537 0ED4                             l3545 0F84  
                           l3529 0E7C                             l2833 3072                             l2825 3040  
                           l2841 22AE                             l3721 28E2                             l2905 2DD0  
                           l2913 2DF8                             l2921 2A68                             l3297 1AB8  
                           l3289 1A7A                             l3393 25D2                             l3385 25AC  
                           l3377 256C                             l3457 2112                             l3449 20CE  
                           l3475 37F2                             l3467 37E6                             l3803 376E  
                           l3491 1E48                             l3483 1DC4                             l3715 1920  
                           l3707 18BA                             l3651 15EA                             l3635 1506  
                           l3643 156A                             l3627 14C0                             l3619 1446  
                           l3571 1172                             l3563 10C8                             l3555 106C  
                           l3547 0F90                             l3539 0F14                             l2835 307A  
                           l2827 3048                             l2819 301E                             l2851 236A  
                           l2843 22C8                             l3731 2942                             l3723 28EA  
                           l2915 2E0E                             l2907 2DD8                             l2931 2AC2  
                           l2923 2A7A                             l3299 1AC4                             l3395 25DC  
                           l3387 25BA                             l3379 2596                             l3811 2D3E  
                           l3469 37EC                             l3477 3926                             l3805 3778  
                           l3485 1DE2                             l3493 1E4A                             l3717 1942  
                           l3709 18DC                             l3661 166E                             l3645 1588  
                           l3653 15EE                             l3637 1522                             l3629 14D2  
                           l3581 1208                             l3565 10D2                             l3573 117E  
                           l3549 0FC4                             l3557 1074                             l2837 307C  
                           l2829 3056                             l2853 2384                             l2845 2316  
                           l3741 2982                             l3733 294A                             l3725 28F8  
                           l2909 2DE0                             l2933 2ACA                             l2925 2A92  
                           l2917 2A54                             l2861 38A0                             l2941 29A4  
                           l3397 25E6                             l3901 2240                             l3821 2D7C  
                           l3813 2D42                             l2871 3996                             l3495 1E5A  
                           l3487 1E04                             l3479 1D74                             l3671 16F2  
                           l3655 160C                             l3663 1672                             l3647 15A6  
                           l3639 1544                             l3591 1294                             l3583 1238  
                           l3575 118A                             l3567 110E                             l3559 1096  
                           l2839 3082                             l2855 23C4                             l2847 2328  
                           l3735 2952                             l3727 290A                             l2863 3904  
                           l2927 2AB2                             l2935 2ADA                             l2919 2A5C  
                           l2951 2A02                             l2943 29B2                             l3751 2688  
                           l3743 2648                             l3903 224E                             l3911 229C  
                           l3823 2D7E                             l3815 2D66                             l3807 2D08  
                           l3831 3944                             l2857 3806                             l2873 399A  
                           l2881 39BC                             l3497 1F2A                             l3489 1E26  
                           l3681 1772                             l3665 1690                             l3673 16F6  
                           l3657 162A                             l3649 15C8                             l3593 12A6  
                           l3577 1194                             l3569 1142                             l3585 1240  
                           l2849 232C                             l3737 295A                             l3729 2922  
                           l2865 38E4                             l2937 2AF2                             l2929 2ABA  
                           l2961 2B0C                             l2953 2A0A                             l2945 29C2  
                           l3753 269C                             l3745 264C                             l3905 2262  
                           l3825 2D88                             l3817 2D70                             l3809 2D18  
                           l3841 395E                             l3833 394E                             l3921 2C98  
                           l3913 2C66                             l3851 38DA                             l3843 38C2  
                           l2859 3816                             l2867 39CC                             l2875 39C2  
                           l2891 35BA                             l2883 3580                             l3499 1F38  
                           l3691 17F2                             l3675 1712                             l3683 1776  
                           l3667 16AE                             l3659 164C                             l3595 12E2  
                           l3587 1262                             l3579 11D4                             l3739 296A  
                           l2971 2B68                             l2963 2B14                             l2955 2A12  
                           l2947 29DA                             l2939 299C                             l3755 26B0  
                           l3747 2660                             l3763 26E8                             l3771 39DA  
                           l3907 2274                             l3827 2D8A                             l3819 2D72  
                           l3835 3950                             l3931 2CCE                             l3923 2CAC  
                           l3915 2C6A                             l3853 38DE                             l3845 38CA  
                           l2869 39D0                             l2877 39C6                             l2893 35BC  
                           l2885 3584                             l3685 1792                             l3693 17F6  
                           l3677 172E                             l3669 16D0                             l3597 1316  
                           l3589 1288                             l2981 2BA8                             l2973 2B70  
                           l2965 2B20                             l2949 29FA                             l2957 2A22  
                           l3757 26C4                             l3749 2674                             l3773 39D6  
                           l3909 2278                             l3861 2130                             l3829 2D94  
                           l3837 395A                             l3781 35D8                             l3933 2CDE  
                           l3925 2CB0                             l3917 2C76                             l3941 2CF6  
                           l3855 38E0                             l3847 38CC                             l2887 358C  
                           l2879 39B8                             l2991 344E                             l2983 33B8  
                           l3695 1814                             l3687 17AE                             l3679 1750  
                           l3599 1346                             l2975 2B78                             l2967 2B30  
                           l2959 2A3A                             l3759 26D8                             l3775 3962  
                           l3791 37D6                             l3871 216C                             l3863 2138  
                           l3839 395C                             l3783 35E8                             l3935 2CEA  
                           l3927 2CBE                             l3919 2C86                             l3951 246C  
                           l3943 2402                             l3769 39A0                             l3849 38D6  
                           l2889 3594                             l2985 33FE                             l3697 1832  
                           l3689 17D0                             l2897 2D98                             l2977 2B80  
                           l2969 2B48                             l3793 37D8                             l3785 37B4  
                           l3881 21A4                             l3873 2170                             l3865 2144  
                           l3857 2124                             l3777 35C0                             l3937 2CEE  
                           l3929 2CC2                             l3961 2498                             l3953 2474  
                           l3945 2448                             l3795 3784                             l2995 34A8  
                           l3699 1854                             l2899 2D9C                             l2979 2B90  
                           l3787 37D2                             l3891 21E2                             l3883 21B2  
                           l3875 2188                             l3867 2150                             l3859 2128  
                           l3779 35C8                             l3939 2CF2                             l3971 24A6  
                           l3963 249C                             l3955 247C                             l3947 2450  
                           l3797 3750                             l2997 34EE                             l2989 3408  
                           l3789 37D4                             l3893 21E6                             l3885 21B6  
                           l3877 2190                             l3869 2154                             l3981 24C0  
                           l3973 24A8                             l3965 24A0                             l3957 2484  
                           l3949 2458                             l3799 3754                             l3895 2208  
                           l3887 21CE                             l3879 2198                             l3983 2506  
                           l3975 24AA                             l3967 24A2                             l3959 2494  
                           l3897 221A                             l3889 21DE                             l3985 251E  
                           l3977 24AC                             l3969 24A4                             l3899 221E  
                           l3987 2532                             l3979 24B0                             STR_1 0E0F  
                           STR_2 0E14                             STR_5 0E01                             u2000 2FD0  
                           u2001 2FCC                             u2010 3002                             u2011 2FFE  
                           u2020 2F54                             u2100 1976                             u2021 2F50  
                           u2101 1972                             u2030 2F86                             u2110 1986  
                           u2031 2F82                             u2111 1982                             u3000 189A  
                           u2040 30B0                             u2200 1C34                             u2120 19C6  
                           u3001 1896                             u2041 30AC                             u2201 1C30  
                           u2121 19C2                             u3010 18BA                             u2050 30EA  
                           u2210 1C62                             u2130 19D8                             u3011 18B6  
                           u2051 30E6                             u2211 1C5E                             u2131 19D4  
                           u2060 2BE8                             u3020 18DC                             u2220 1C78  
                           u2140 19E8                             u2300 25BA                             u3100 21DE  
                           u2061 2BE4                             u3021 18D8                             u2221 1C74  
                           u2141 19E4                             u2301 25B6                             u3101 21DA  
                           u2070 2C0A                             u3030 1900                             u2230 1C8C  
                           u2150 1A1E                             u2310 25CE                             u3110 21F8  
                           u2071 2C06                             u3031 18FC                             u2231 1C88  
                           u2151 1A1A                             u2311 25CA                             u3111 21F0  
                           u2080 2C32                             u3040 1920                             u2240 1CA6  
                           u2160 1A2E                             u2320 25F6                             u2400 20AA  
                           u3200 2C98                     _BAUD4CONbits 0EE9                             u2081 2C2E  
                           u3041 191C                             u2241 1CA2                             u2161 1A2A  
                           u2321 25F2                             u2401 20A6                             u3201 2C94  
                           u3050 1942                             u2250 1CEE                             u2170 1BA8  
                           u2090 1964                             u2330 2616                             u2410 20BA  
                           u3130 221A                             u3210 2CDE                             u3051 193E  
                           u2251 1CEA                             u2091 1960                             u2331 2612  
                           u2411 20B6                             u3131 2216                             u3211 2CDA  
                           u1700 3056                             u3060 2922                             u2260 1D1C  
                           u2180 1C02                             u2340 2626                             u2420 20C8  
                           u3140 2230                             u3220 2D06                             u1701 3052  
                           u3061 291E                             u2261 1D18                             u2181 1BFE  
                           u2341 2622                             u2421 20C4                             u3141 2228  
                           u3221 2D02                             u1710 3072                             u3070 2942  
                           u2270 1D56                             u2190 1C22                             u2430 2102  
                           u2350 1F82                             u2510 286C                             u3230 24C0  
                           u1711 306E                             u3071 293E                             u2271 1D52  
                           u2191 1C1E                             u2175 1B9E                             u2431 20FE  
                           u2351 1F7E                             u2511 2864                             u3231 24BC  
                           u1720 22C8                             u3080 2982                             u1800 38F6  
                           u2280 2558                             u2440 2110                             u2360 1F90  
                           u2600 3526                             u3160 2274                             u3128 21FA  
                           u3240 24D2                             u1721 22C4                             u3081 297E  
                           u1801 38EE                             u2281 2554                             u2441 210C  
                           u2361 1F8C                             u2601 3522                             u3161 2270  
                           u3241 24CA                             u1730 2384                             u3090 299A  
                           u2290 258C                             u2370 1FEC                             u2530 2890  
                           u2610 353A                             u3170 228A                             u2450 3840  
                           _T2PR 0FBC                             u1731 2380                             u3091 2996  
                           u2371 1FE8                             u2531 2888                             u2611 3536  
                           u3171 2282                             u3307 21C0                             u2451 3838  
                           u1740 3816                             u1820 35A8                             u2620 0E70  
                           u1900 2AF2                             u2380 2042                             u2508 284C  
                           u3260 24F4                             u1741 3812                             u1821 35A0  
                           u2621 0E6C                             u1901 2AEE                             u3317 3614  
                           u2381 203E                             u3261 24EC                             u1750 382C  
                           u2710 142E                             u2630 0E9A                             u1910 2B0A  
                           u2390 208C                             u2550 28B0                             u2470 282C  
                           u3190 22AC                             u3158 2232                             u1751 3828  
                           u2711 142A                             u2631 0E96                             u1911 2B06  
                           u3407 2AD0                             u3327 36C2                             u2295 2582  
                           u2391 2088                             u2551 28A8                             u2471 2824  
                           u3191 22A8                             u2800 160C                             u2720 1506  
                           u2640 0EC4                             u1840 2DB2                             u1760 38B2  
                           u1920 29DA                             u2528 286E                             u2801 1608  
                           u2721 1502                             u2705 1360                             u2641 0EC0  
                           u3417 2DEE                             u1841 2DAE                             u1761 38AA  
                           u1921 29D6                             u3337 36FA                             u2810 162A  
                           u2730 1522                             u2650 1096                             u1690 3038  
                           u1850 2DD0                             u1818 38F8                             u1930 29FA  
                           u2570 28D0                             u2490 284A                             u3258 24D4  
                           u2811 1626                             u2731 151E                             u2651 1092  
                           u1691 3034                             u3427 2960                             u1851 2DCC  
                           u1931 29F6                             u3347 364E                             u2571 28C8  
                           u2491 2842                             u2900 1750                             u2820 164C  
                           u2740 1544                             u2660 10BC                             u1860 2E0E  
                           u1780 3916                             u1940 2A3A                             u2548 2892  
                           u3188 228C                             u2468 3842                             u3437 3764  
                           u2901 174C                             u2821 1648                             u2741 1540  
                           u2661 10B8                             u1861 2E0A                             u1781 390E  
                           u1941 2A36                             u3357 2A18                             u1838 35AA  
                           u2590 1E5A                             u2910 1772                             u2830 166E  
                           u2750 1566                             u2670 1262                             u1870 2E24  
                           u1950 2A52                             u3278 24F6                             u2591 1E56  
                           u2911 176E                             u2831 166A                             u2751 1562  
                           u2671 125E                             u1871 2E20                             u3367 3688  
                           u1951 2A4E                             u3287 2510                             u2920 1792  
                           u2840 1690                             u2760 1588                             u2680 1288  
                           u1880 2A92                             u1960 2B48                             u2568 28B2  
                           u2488 282E                             u2921 178E                             u2841 168C  
                           u2761 1584                             u2681 1284                             u1881 2A8E  
                           u1961 2B44                             u3377 3732                             u3297 217A  
                           u2930 17AE                             u2850 16AE                             u2770 15A6  
                           u1890 2AB2                             u1970 2B68                             u1778 38B4  
                           u2931 17AA                             u2851 16AA                             u2771 15A2  
                           u1891 2AAE                             u3387 2B86                             u1971 2B64  
                           u2940 17D0                             u2860 16D0                             u2780 15C8  
                           u1980 2BA8                             u2588 28D2                             u2941 17CC  
                           u2861 16CC                             u2781 15C4                             u3397 355A  
                           u1981 2BA4                             u2950 17F2                             u2870 16F2  
                           u2790 15EA                             u1798 3918                             u1990 2BC0  
                           u2951 17EE                             u2871 16EE                             u2791 15E6  
                           u2695 1296                             u1991 2BBC                             u2960 1814  
                           u2880 1712                             u2961 1810                             u2881 170E  
                           u2970 1832                             u2890 172E                             u2971 182E  
                           u2891 172A                             u2980 1854                             u2981 1850  
                           u2990 1876                             u2991 1872                    _colour_to_key 14E6  
                           _main 2402                             fsr1h 0FE2                             fsr2h 0FDA  
                           indf1 0FE7                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             btemp 005E                             _stop 2D98  
                           prodh 0FF4                             prodl 0FF3                   ??_average_RGBC 000F  
                           start 003C               average_RGBC@temp_B 001A               average_RGBC@temp_C 001E  
             average_RGBC@temp_G 0016               average_RGBC@temp_R 0012           __end_of_color_read_Red 3408  
              headbuttReverse@mL 0018                headbuttReverse@mR 0019                     ___param_bank 0000  
                    _turnLeft135 366E                            ??_ISR 0001                    write_timer@tH 0002  
                  write_timer@tL 0001                    write_trail@tH 0003                    write_trail@tL 0001  
                    _turnRight90 36A8          _toggle_right_indicators 38E4                    ___fltol@sign1 0030  
                          ?_main 0001               _timer_high_pointer 0051                  __end_of___flmul 1D74  
                __end_of___fltol 2648                  __end_of___lldiv 2C66                            ?_stop 0013  
                __end_of___lwdiv 3092                            i2l744 0038                            _TMR0H 0FD4  
                          _TMR0L 0FD3                 ?_headbuttReverse 0018              ___lmul@multiplicand 0005  
                          _UTurn 353C       __end_of_I2C_2_Master_Start 39D6                      _write_timer 39AC  
     __end_of_I2C_2_Master_Write 39A0                      _write_trail 37B2                  __end_of_max_RGB 301E  
                __end_of_min_RGB 2FA2                   ?_colour_to_key 0001                _turnRight135Delay 00C2  
                          tablat 0FF5                  _turnLeft90Delay 00C8                            plusw2 0FDB  
                          ttemp5 005F                            ttemp6 0062                            ttemp7 0066  
                          status 0FD8                            wtemp8 005F                 _return_to_sender 2C66  
        __end_of_color_read_Blue 34F8                    average_RGBC@i 0011                    average_RGBC@p 000E  
          _I2C_2_Master_RepStart 39B8                  ?_color_read_Red 0005                  __initialization 3304  
                   __end_of_main 2542                     __end_of_stop 2E26                           ??_main 004B  
                         ??_stop 0015                    __activetblptr 0003                   write_trail@man 0002  
                   _turnRight135 3634                           ?_UTurn 0018                   _bottomGearLeft 0056  
                   ?_setMotorPWM 000E                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                    _squareReverse 35FA  
                         _RC0PPS 0E62                           _RE2PPS 0E74                           _RD5PPS 0E6F  
                         _RC7PPS 0E69                           _RD6PPS 0E70                           _RE4PPS 0E76  
                         i2l2651 0036                           i2l2643 000A                           i2l2645 001A  
                         i2l2647 002A                           i2l2649 0032                           _RG6PPS 0E88  
       __end_of_color_click_init 3784                           _RX4PPS 0E15                           _TX4REG 0EE4  
               __end_of_card_red 3164                 __end_of___xxtofl 2124                 _fullSpeedReverse 2B0C  
               _turnLeft135Delay 00C4                    ??_Timer0_init 0003                     ?_reset_timer 0001  
                   _CCPTMRS0bits 0FAD                     convert_HSV@C 0040                     convert_HSV@M 003E  
                         ___lmul 3092                     convert_HSV@m 001A                           ___wmul 387A  
                      ??___flmul 0017                        ??___fltol 002C                        ??___lldiv 0009  
      ??_toggle_right_indicators 0001                        ??___lwdiv 000B         ??_toggle_left_indicators 0001  
           forward_navigation@p1 0044             forward_navigation@p2 0045                           clear_0 334A  
           forward_navigation@mL 0042             forward_navigation@mR 0043               fullSpeedReverse@mL 0013  
             fullSpeedReverse@mR 0014                           isa$std 0001                        ??_max_RGB 0003  
             card_blue@backtrack 001E                        ??_min_RGB 0003                     __pdataCOMRAM 004D  
              _timer_low_pointer 0050           return_to_sender@timerH 0029           return_to_sender@timerL 002A  
           __end_of_average_RGBC 1F70                     __mediumconst 0000                           tblptrh 0FF7  
                         tblptrl 0FF6                           tblptru 0FF8              _toggle_brake_lights 38A0  
                ??_colour_to_key 0003                   ?_squareReverse 0018                           stop@mL 0013  
                         stop@mR 0014                ??_initDCmotorsPWM 0003                 __end_of_turnLeft 2B0C  
            convert_HSV@temp_610 0038              convert_HSV@temp_611 0028              convert_HSV@temp_612 002C  
            convert_HSV@temp_613 0030              convert_HSV@temp_614 0034              convert_HSV@temp_615 0020  
                   ___xxtofl@arg 000B                     ___xxtofl@exp 000A                     ___xxtofl@val 0001  
              _buggy_lights_init 3784                       __accesstop 0060          __end_of__initialization 3358  
       __end_of_color_read_Clear 34A8         __end_of_color_read_Green 3458                    card_orange@mL 001C  
                  card_orange@mR 001D           ?_I2C_2_Master_RepStart 0001               ?_buggy_lights_init 0001  
                  ___rparam_used 0001                       ___fltol@f1 0028                 ?_color_read_Blue 0005  
           ?_toggle_brake_lights 0001                   __pcstackCOMRAM 0001             _wall_threshold_clear 004D  
                  __end_of_UTurn 357E                      pick_card@mL 0021                      pick_card@mR 0022  
                   __pidataBANK0 3978              ??_buggy_lights_init 0001              __end_of_Timer0_init 38E4  
                  card_yellow@mL 001C                    card_yellow@mR 001D       __end_of_forward_navigation 22AE  
                   ?_start_timer 0001                          ??_UTurn 001A                ?_toggle_main_beam 0001  
__end_of_toggle_right_indicators 3904        __end_of_buggy_lights_init 37B2                       _card_green 31CC  
             ??_toggle_main_beam 0001                       __pbssBANK0 0060                       _card_white 3854  
              _color_writetoaddr 3924                     _T2CLKCONbits 0FBF            ??_toggle_brake_lights 0001  
                   ?_turnLeft135 0018               ?_color_writetoaddr 0003                          ?___lmul 0001  
      fullSpeedReverse@rightGear 0017             card_yellow@backtrack 001E                          ?___wmul 0001  
                _bottomGearRight 0055            __end_of_wait_for_wall 353C                     ?_turnRight90 0018  
                 ___lmul@product 0009              ??_color_writetoaddr 0004         __end_of_return_to_sender 2D08  
                      ?_card_red 001C                        ?___xxtofl 0001                  ??_squareReverse 001A  
                        _SP4BRGH 0EE6                          _SP4BRGL 0EE5                     ?_write_timer 0001  
                   ?_write_trail 0001                          _SSP2ADD 0ED6                          _SSP2BUF 0ED5  
              __end_of_card_blue 3304                __end_of_card_cyan 329C                __end_of_card_pink 2F26  
         color_writetoaddr@value 0003                 ??_color_read_Red 0007                          UTurn@mL 0018  
                        UTurn@mR 0019        __end_of_color_writetoaddr 3944               _I2C_2_Master_Start 39CC  
                     _initUSART4 3944               _I2C_2_Master_Write 3994                          __Hparam 0000  
                        __Lparam 0000                color_read_Red@tmp 000A                      _Timer0_init 38C2  
                     card_red@mL 001C                       card_red@mR 001D                 _turningRightGear 0053  
                        ___flmul 194A                          ___fltol 2542                          ___lldiv 2BC2  
                  convert_HSV@p1 000E              ?_I2C_2_Master_Start 0001                    convert_HSV@p2 000F  
                        ___lwdiv 301E              ?_I2C_2_Master_Write 0001                wait_for_wall@loss 000E  
                   __psmallconst 0E00                     turnLeft90@mL 0018                     turnLeft90@mR 0019  
                        __pcinit 3304                          __ramtop 0E00                        ?_turnLeft 0013  
                        __ptext0 2402                          __ptext1 2C66                          __ptext2 382E  
                        __ptext3 35C0                          __ptext4 3944                          __ptext5 2D08  
                        __ptext6 2124                          __ptext7 37B2                          __ptext8 34F8  
                        __ptext9 281A                       _read_timer 3962                    ??_card_orange 001F  
                     _read_trail 35C0                __end_of_read_RGBC 33B8                          _max_RGB 2FA2  
                        _min_RGB 2F26                    ??_card_yellow 001F                        _T2CONbits 0FBD  
                     ??_card_red 001F                       ??___xxtofl 0005                __end_of_scale_RGB 281A  
       __end_of_fullSpeedReverse 2BC2                        _T2HLTbits 0FBE                __end_of_pick_card 2744  
         fullSpeedAhead@leftGear 0016             ??_I2C_2_Master_Start 0002             ??_I2C_2_Master_Write 0002  
                    ?_card_green 001C             end_of_initialization 3358                      ?_card_white 001C  
         _toggle_left_indicators 3904         forward_navigation@timerH 0048         forward_navigation@timerL 0049  
              ?_color_click_init 0001                  ___lldiv@divisor 0005                  colour_to_key@p1 0001  
                colour_to_key@p2 0002               ??_color_click_init 0005                  ___lldiv@counter 000D  
                   _average_RGBC 1D74             convert_HSV@hue_scale 003C                          postdec1 0FE5  
                        postdec2 0FDD                  squareReverse@mL 0018                  squareReverse@mR 0019  
                        postinc0 0FEE                          postinc1 0FE6                          postinc2 0FDE  
                _initDCmotorsPWM 2D08                       ??_turnLeft 0015                        _PORTFbits 0F8E  
             setMotorPWM@negDuty 0012                __end_of_turnRight 2A54             convert_HSV@sat_scale 0018  
                   read_timer@tH 0001                     read_timer@tL 0002                    ___xxtofl@sign 0009  
                      _TRISAbits 0F81               setMotorPWM@posDuty 0011                     read_trail@tH 0001  
                   read_trail@tL 0002                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88              __end_of_card_orange 31CC                 fullSpeedAhead@mL 0013  
              card_red@backtrack 001E                 fullSpeedAhead@mR 0014         color_writetoaddr@address 0004  
            __end_of_card_yellow 2EA6          ??_I2C_2_Master_RepStart 0002             card_orange@backtrack 001E  
                    ___flmul@grs 001C                      _CCP1CONbits 0FAB                ?_color_read_Clear 0005  
                    _CCP2CONbits 0FA7                ?_color_read_Green 0005                      _CCP3CONbits 0F26  
                    ?_initUSART4 0001                      _CCP4CONbits 0F22                       main@motorL 00A2  
                     main@motorR 00AB               ??_color_read_Clear 0007               ??_color_read_Green 0007  
                     _stop_timer 39D6                       _turnLeft90 36E0                     pick_card@key 0024  
                 _fullSpeedAhead 28E2                   __end_of___lmul 30FC                   __end_of___wmul 38A0  
                  __pidataCOMRAM 3986                      ?_read_timer 0001                      ?_read_trail 0001  
           return_to_sender@mann 002B              color_read_Clear@tmp 000A              start_initialization 3304  
                  ??_convert_HSV 0010                      __end_of_ISR 003C                 _turnRight90Delay 00C6  
          __end_of_colour_to_key 194A               _forward_navigation 2124                       read_RGBC@p 000C  
            color_read_Green@tmp 000A         ?_toggle_right_indicators 0001              ?_forward_navigation 0042  
              ??_headbuttReverse 001A          __end_of_initDCmotorsPWM 2D98           __end_of_fullSpeedAhead 299C  
                       ??___lmul 0009                         ??___wmul 0005                     card_green@mL 001C  
                   card_green@mR 001D                      __pdataBANK0 00BC                       scale_RGB@p 0032  
                    _card_orange 3164                      _card_yellow 2E26                   max_RGB@max_val 0005  
             turnRight@rightGear 0017             ??_forward_navigation 0046                ?_return_to_sender 0027  
                      ___flmul@a 0013                        ___flmul@b 000F                      __pbssCOMRAM 005A  
                  __pcstackBANK0 009C               ??_return_to_sender 0029                     card_white@mL 001C  
                   card_white@mR 001D               return_to_sender@mL 0027               return_to_sender@mR 0028  
                convert_HSV@temp 0024      __end_of_toggle_brake_lights 38C2              __end_of_convert_HSV 14E6  
              turnLeft@rightGear 0017                        _card_blue 329C                        _card_cyan 3234  
                      _card_pink 2EA6     __end_of_toggle_tricolour_LED 28E2                 ___lwdiv@dividend 0007  
                   ?_Timer0_init 0001                      ?_stop_timer 0001                      ?_turnLeft90 0018  
                ?_fullSpeedAhead 0013                        __pintcode 0008                         ?___flmul 000F  
                       ?___fltol 0028                         ?___lldiv 0001                         ?___lwdiv 0007  
                _turningLeftGear 0054             I2C_2_Master_Read@ack 0003             I2C_2_Master_Read@tmp 0004  
                       ?_max_RGB 0001                         ?_min_RGB 0001                      __smallconst 0E00  
                  ?_turnRight135 0018                _I2C_2_Master_Idle 3806                _I2C_2_Master_Init 37DC  
              _I2C_2_Master_Read 357E                _I2C_2_Master_Stop 39C2                ?_fullSpeedReverse 0013  
                      _read_RGBC 3362               ?_I2C_2_Master_Idle 0001          ?_toggle_left_indicators 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 000F  
          __end_of_squareReverse 3634               ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000B  
             pick_card@backtrack 0023                    _headbuttDelay 00BE         initDCmotorsPWM@PWMperiod 0001  
                   ??_card_green 001F               ??_fullSpeedReverse 0015                        _scale_RGB 2744  
                      _rampDelay 0052                     ??_card_white 001E                        _pick_card 2648  
             card_cyan@backtrack 001E              ??_I2C_2_Master_Idle 0001              ??_I2C_2_Master_Init 0001  
            ??_I2C_2_Master_Read 0002                   ___wmul@product 0005                         _LATAbits 0F79  
                     ?_card_blue 001C              ??_I2C_2_Master_Stop 0002                         _LATCbits 0F7B  
                     ?_card_cyan 001C                         _LATDbits 0F7C                         _LATEbits 0F7D  
                       _LATFbits 0F7E                         _LATGbits 0F7F                       ?_card_pink 001C  
                       _LATHbits 0F80                         _PIE0bits 0E29                    ??_reset_timer 0003  
                    turnRight@mL 0013                      turnRight@mR 0014                        _lost_flag 005B  
                       i2u167_40 001A                         i2u167_41 0016                         _PIR0bits 0E33  
                       i2u168_40 002A                         i2u168_41 0026                         _PIR4bits 0E37  
               ?_initDCmotorsPWM 0001                         _SSP2CON2 0EDA                         _SSP2STAT 0ED8  
                      _returning 005D               __end_of_card_green 3234        __end_of_I2C_2_Master_Idle 382E  
      __end_of_I2C_2_Master_Init 3806        __end_of_I2C_2_Master_Read 35C0                ___wmul@multiplier 0001  
             __end_of_card_white 387A                   ??_turnRight135 001A        __end_of_I2C_2_Master_Stop 39CC  
                   setMotorPWM@m 000E      I2C_2_Master_Write@data_byte 0002   __end_of_toggle_left_indicators 3924  
              ??_color_read_Blue 0007                      _convert_HSV 0E1A                       ?_read_RGBC 000C  
                main@RGBC_colour 00B4                        _turnRight 299C                ___lmul@multiplier 0001  
                      copy_data0 3318                        copy_data1 3338                       ?_scale_RGB 0032  
                     ?_pick_card 0021               card_pink@backtrack 001E    __end_of_I2C_2_Master_RepStart 39C2  
             color_read_Blue@tmp 000A              __end_of_setMotorPWM 2402                     ??_initUSART4 0001  
              turnRight@leftGear 0016                         __Hrparam 0000                 _toggle_main_beam 382E  
                    card_blue@mL 001C                      card_blue@mR 001D                         __Lrparam 0000  
                 wait_for_wall@p 000D                      card_cyan@mL 001C                      card_cyan@mR 001D  
                   _sample_count 0059                 turnLeft@leftGear 0016                      card_pink@mL 001C  
                    card_pink@mR 001D              __end_of_reset_timer 39AC                    _wait_for_wall 34F8  
                 turnRight135@mL 0018                   turnRight135@mR 0019                    turnLeft135@mL 0018  
                  turnLeft135@mR 0019                     ??_read_timer 0003                     ??_read_trail 0004  
                 convert_HSV@hue 001E                   convert_HSV@sat 001C                       _ANSELDbits 0EA7  
                     _ANSELFbits 0EB4                    ??_start_timer 0001                         _card_red 30FC  
                       ___xxtofl 1F70                       _T0CON0bits 0FD5                       _T0CON1bits 0FD6  
           _toggle_tricolour_LED 281A                  ___lwdiv@divisor 0009               __end_of_initUSART4 3962  
                ___lwdiv@counter 000D                       ?_turnRight 0013                         __ptext10 39D6  
                       __ptext11 39DA                         __ptext20 30FC                         __ptext12 2744  
                       __ptext21 2EA6                         __ptext13 1F70                         __ptext30 366E  
                       __ptext22 35FA                         __ptext14 2542                         __ptext31 329C  
                       __ptext23 3164                         __ptext15 194A                         __ptext40 28E2  
                       __ptext32 3718                         __ptext24 31CC                         __ptext16 3962  
                       __ptext41 22AE                         __ptext33 38A0                         __ptext25 36A8  
                       __ptext17 2648                         __ptext50 3362                         __ptext42 387A  
                       __ptext34 2B0C                         __ptext26 36E0                         __ptext18 2E26  
                       __ptext51 33B8                         __ptext43 301E                         __ptext35 353C  
                       __ptext27 3234                         __ptext19 3854                         __ptext60 3994  
                       __ptext52 3408                         __ptext44 0E1A                         __ptext36 2A54  
                       __ptext28 3634                         __ptext61 39C2                         __ptext53 3458  
                       __ptext45 2F26                         __ptext37 38E4                         __ptext29 299C  
                       __ptext62 39CC                         __ptext54 34A8                         __ptext46 2FA2  
                       __ptext38 3904                         __ptext63 3806                         __ptext55 39B8  
                       __ptext47 3092                         __ptext39 2D98                         __ptext64 37DC  
                       __ptext56 357E                         __ptext48 14E6                         __ptext65 3784  
                       __ptext57 2BC2                         __ptext49 1D74                         __ptext66 38C2  
                       __ptext58 3750                         __ptext67 39A0                         __ptext59 3924  
                       __ptext68 39AC                     _SSP2CON1bits 0ED9                  _headbuttReverse 3718  
                   _SSP2CON2bits 0EDA                      ??_card_blue 001F                      ??_card_cyan 001F  
                    ??_card_pink 001F         fullSpeedReverse@leftGear 0016                       turnLeft@mL 0013  
                     turnLeft@mR 0014           forward_navigation@mann 004A               __end_of_read_timer 3978  
             __end_of_read_trail 35FA                    ??_turnLeft135 001A                         isa$xinst 0000  
                     _RC4STAbits 0EE7                         int$flags 005E                    ??_turnRight90 001A  
                 ?_wait_for_wall 000D                         _turnLeft 2A54                         max_RGB@p 0001  
                   ?_card_orange 001C                         min_RGB@p 0001                     ?_card_yellow 001C  
                     _INTCONbits 0FF2            ?_toggle_tricolour_LED 0001                    ??_write_timer 0002  
                  ??_write_trail 0003                      ??_read_RGBC 000D                      _setMotorPWM 22AE  
                    ??_scale_RGB 0033              __end_of_start_timer 39DE                         intlevel2 0000  
                  turnRight90@mL 0018                    turnRight90@mR 0019                      ??_pick_card 0025  
        fullSpeedAhead@rightGear 0017                     _topGearRight 0057                _manoeuvre_pointer 004F  
               ___lldiv@dividend 0001                 ??_fullSpeedAhead 0015             __end_of_turnRight135 366E  
               colour_to_key@key 0005                   main@HSV_colour 009C                      _reset_timer 39A0  
                   ??_stop_timer 0001                     ??_turnLeft90 001A                 _color_click_init 3750  
            __end_of_turnLeft135 36A8                      _topGearLeft 0058                       _SSP2DATPPS 0E1D  
               ___lldiv@quotient 0009          __end_of_headbuttReverse 3750                       _SSP2CLKPPS 0E1C  
            __end_of_turnRight90 36E0                  _trail_manoeuvre 0060                      ??_turnRight 0015  
                    _return_flag 005C               __end_of_stop_timer 39DA               __end_of_turnLeft90 3718  
                _manoeuvre_count 005A                       _TX4STAbits 0EE8              __end_of_write_timer 39B8  
            __end_of_write_trail 37DC                    ?_average_RGBC 000E                    read_trail@man 0003  
