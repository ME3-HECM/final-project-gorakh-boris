

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 26 11:39:02 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    15   000000                     
    16                           ; Generated 21/07/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F67K40 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50   000000                     
    51                           	psect	idataCOMRAM
    52   000F14                     __pidataCOMRAM:
    53                           	callstack 0
    54                           
    55                           ;initializer for _turn180Delay
    56   000F14  01FE               	dw	510
    57                           
    58                           ;initializer for _turnRight90Delay
    59   000F16  00AF               	dw	175
    60                           
    61                           ;initializer for _turnLeft90Delay
    62   000F18  00AF               	dw	175
    63                           
    64                           ;initializer for _forward1Delay
    65   000F1A  00C8               	dw	200
    66                           
    67                           ;initializer for _turningGear
    68   000F1C  2A                 	db	42
    69                           
    70                           ;initializer for _topGear
    71   000F1D  45                 	db	69
    72                           
    73                           ;initializer for _rampDelay
    74   000F1E  08                 	db	8
    75   000000                     _RC7PPS	set	3689
    76   000000                     _RE2PPS	set	3700
    77   000000                     _CCPR4H	set	3873
    78   000000                     _CCPR3H	set	3877
    79   000000                     _CCPR2H	set	4006
    80   000000                     _CCPR1H	set	4010
    81   000000                     _CCP1CONbits	set	4011
    82   000000                     _CCPTMRS0bits	set	4013
    83   000000                     _T2PR	set	4028
    84   000000                     _T2CONbits	set	4029
    85   000000                     _CCP2CONbits	set	4007
    86   000000                     _CCP3CONbits	set	3878
    87   000000                     _LATCbits	set	3963
    88   000000                     _LATEbits	set	3965
    89   000000                     _TRISCbits	set	3971
    90   000000                     _TRISEbits	set	3973
    91   000000                     _CCP4CONbits	set	3874
    92   000000                     _TRISGbits	set	3975
    93   000000                     _LATGbits	set	3967
    94   000000                     _RE4PPS	set	3702
    95   000000                     _RG6PPS	set	3720
    96   000000                     _T2CLKCONbits	set	4031
    97   000000                     _T2HLTbits	set	4030
    98                           
    99                           ; #config settings
   100                           
   101                           	psect	cinit
   102   000EEE                     __pcinit:
   103                           	callstack 0
   104   000EEE                     start_initialization:
   105                           	callstack 0
   106   000EEE                     __initialization:
   107                           	callstack 0
   108                           
   109                           ; Initialize objects allocated to COMRAM (11 bytes)
   110                           ; load TBLPTR registers with __pidataCOMRAM
   111   000EEE  0E14               	movlw	low __pidataCOMRAM
   112   000EF0  6EF6               	movwf	tblptrl,c
   113   000EF2  0E0F               	movlw	high __pidataCOMRAM
   114   000EF4  6EF7               	movwf	tblptrh,c
   115   000EF6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   116   000EF8  6EF8               	movwf	tblptru,c
   117   000EFA  EE00  F015         	lfsr	0,__pdataCOMRAM
   118   000EFE  EE10 F00B          	lfsr	1,11
   119   000F02                     copy_data0:
   120   000F02  0009               	tblrd		*+
   121   000F04  CFF5 FFEE          	movff	tablat,postinc0
   122   000F08  50E5               	movf	postdec1,w,c
   123   000F0A  50E1               	movf	fsr1l,w,c
   124   000F0C  E1FA               	bnz	copy_data0
   125   000F0E                     end_of_initialization:
   126                           	callstack 0
   127   000F0E                     __end_of__initialization:
   128                           	callstack 0
   129   000F0E  0100               	movlb	0
   130   000F10  EF49  F007         	goto	_main	;jump to C main() function
   131                           
   132                           	psect	dataCOMRAM
   133   000015                     __pdataCOMRAM:
   134                           	callstack 0
   135   000015                     _turn180Delay:
   136                           	callstack 0
   137   000015                     	ds	2
   138   000017                     _turnRight90Delay:
   139                           	callstack 0
   140   000017                     	ds	2
   141   000019                     _turnLeft90Delay:
   142                           	callstack 0
   143   000019                     	ds	2
   144   00001B                     _forward1Delay:
   145                           	callstack 0
   146   00001B                     	ds	2
   147   00001D                     _turningGear:
   148                           	callstack 0
   149   00001D                     	ds	1
   150   00001E                     _topGear:
   151                           	callstack 0
   152   00001E                     	ds	1
   153   00001F                     _rampDelay:
   154                           	callstack 0
   155   00001F                     	ds	1
   156                           
   157                           	psect	cstackCOMRAM
   158   000001                     __pcstackCOMRAM:
   159                           	callstack 0
   160   000001                     initDCmotorsPWM@PWMperiod:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x0
   164   000001                     	ds	2
   165   000003                     main@motorL:
   166                           	callstack 0
   167                           
   168                           ; 9 bytes @ 0x2
   169   000003                     	ds	9
   170   00000C                     main@motorR:
   171                           	callstack 0
   172                           
   173                           ; 9 bytes @ 0xB
   174   00000C                     	ds	9
   175                           
   176 ;;
   177 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   178 ;;
   179 ;; *************** function _main *****************
   180 ;; Defined at:
   181 ;;		line 21 in file "main.c"
   182 ;; Parameters:    Size  Location     Type
   183 ;;		None
   184 ;; Auto vars:     Size  Location     Type
   185 ;;  motorR          9   11[COMRAM] struct DC_motor
   186 ;;  motorL          9    2[COMRAM] struct DC_motor
   187 ;;  PWMcycle        2    0        unsigned int 
   188 ;; Return value:  Size  Location     Type
   189 ;;                  1    wreg      void 
   190 ;; Registers used:
   191 ;;		wreg, status,2, status,0, cstack
   192 ;; Tracked objects:
   193 ;;		On entry : 0/0
   194 ;;		On exit  : 0/0
   195 ;;		Unchanged: 0/0
   196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   198 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   200 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   201 ;;Total ram usage:       18 bytes
   202 ;; Hardware stack levels required when called: 1
   203 ;; This function calls:
   204 ;;		_initDCmotorsPWM
   205 ;; This function is called by:
   206 ;;		Startup code after reset
   207 ;; This function uses a non-reentrant model
   208 ;;
   209                           
   210                           	psect	text0
   211   000E92                     __ptext0:
   212                           	callstack 0
   213   000E92                     _main:
   214                           	callstack 30
   215   000E92                     
   216                           ;main.c: 23:     initDCmotorsPWM(PWMcycle);
   217   000E92  0E00               	movlw	0
   218   000E94  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   219   000E96  0E63               	movlw	99
   220   000E98  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   221   000E9A  EC01  F007         	call	_initDCmotorsPWM	;wreg free
   222   000E9E                     
   223                           ;main.c: 25:     struct DC_motor motorL, motorR;;main.c: 27:     motorL.power = 0;
   224   000E9E  0E00               	movlw	0
   225   000EA0  6E03               	movwf	main@motorL^0,c
   226   000EA2                     
   227                           ;main.c: 28:     motorL.direction = 1;
   228   000EA2  0E01               	movlw	1
   229   000EA4  6E04               	movwf	(main@motorL+1)^0,c
   230   000EA6                     
   231                           ;main.c: 29:     motorL.brakemode = 1;
   232   000EA6  0E01               	movlw	1
   233   000EA8  6E05               	movwf	(main@motorL+2)^0,c
   234   000EAA                     
   235                           ;main.c: 30:     motorL.PWMperiod = PWMcycle;
   236   000EAA  0E00               	movlw	0
   237   000EAC  6E07               	movwf	(main@motorL+4)^0,c
   238   000EAE  0E63               	movlw	99
   239   000EB0  6E06               	movwf	(main@motorL+3)^0,c
   240   000EB2                     
   241                           ;main.c: 31:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   242   000EB2  0EAA               	movlw	170
   243   000EB4  6E08               	movwf	(main@motorL+5)^0,c
   244   000EB6  0E0F               	movlw	15
   245   000EB8  6E09               	movwf	(main@motorL+6)^0,c
   246   000EBA                     
   247                           ;main.c: 32:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   248   000EBA  0EA6               	movlw	166
   249   000EBC  6E0A               	movwf	(main@motorL+7)^0,c
   250   000EBE  0E0F               	movlw	15
   251   000EC0  6E0B               	movwf	(main@motorL+8)^0,c
   252   000EC2                     
   253                           ;main.c: 34:     motorR.power = 0;
   254   000EC2  0E00               	movlw	0
   255   000EC4  6E0C               	movwf	main@motorR^0,c
   256   000EC6                     
   257                           ;main.c: 35:     motorR.direction = 1;
   258   000EC6  0E01               	movlw	1
   259   000EC8  6E0D               	movwf	(main@motorR+1)^0,c
   260   000ECA                     
   261                           ;main.c: 36:     motorR.brakemode = 1;
   262   000ECA  0E01               	movlw	1
   263   000ECC  6E0E               	movwf	(main@motorR+2)^0,c
   264   000ECE                     
   265                           ;main.c: 37:     motorR.PWMperiod = PWMcycle;
   266   000ECE  0E00               	movlw	0
   267   000ED0  6E10               	movwf	(main@motorR+4)^0,c
   268   000ED2  0E63               	movlw	99
   269   000ED4  6E0F               	movwf	(main@motorR+3)^0,c
   270   000ED6                     
   271                           ;main.c: 38:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   272   000ED6  0E25               	movlw	37
   273   000ED8  6E11               	movwf	(main@motorR+5)^0,c
   274   000EDA  0E0F               	movlw	15
   275   000EDC  6E12               	movwf	(main@motorR+6)^0,c
   276   000EDE                     
   277                           ;main.c: 39:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   278   000EDE  0E21               	movlw	33
   279   000EE0  6E13               	movwf	(main@motorR+7)^0,c
   280   000EE2  0E0F               	movlw	15
   281   000EE4  6E14               	movwf	(main@motorR+8)^0,c
   282   000EE6                     l29:
   283   000EE6  EF73  F007         	goto	l29
   284   000EEA  EF00  F000         	goto	start
   285   000EEE                     __end_of_main:
   286                           	callstack 0
   287                           
   288 ;; *************** function _initDCmotorsPWM *****************
   289 ;; Defined at:
   290 ;;		line 5 in file "dc_motor.c"
   291 ;; Parameters:    Size  Location     Type
   292 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   293 ;; Auto vars:     Size  Location     Type
   294 ;;		None
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, status,2
   299 ;; Tracked objects:
   300 ;;		On entry : 0/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   304 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   307 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   308 ;;Total ram usage:        2 bytes
   309 ;; Hardware stack levels used: 1
   310 ;; This function calls:
   311 ;;		Nothing
   312 ;; This function is called by:
   313 ;;		_main
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317                           	psect	text1
   318   000E02                     __ptext1:
   319                           	callstack 0
   320   000E02                     _initDCmotorsPWM:
   321                           	callstack 30
   322   000E02                     
   323                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   324   000E02  9485               	bcf	133,2,c	;volatile
   325                           
   326                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   327   000E04  9885               	bcf	133,4,c	;volatile
   328                           
   329                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   330   000E06  9E83               	bcf	131,7,c	;volatile
   331                           
   332                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   333   000E08  9C87               	bcf	135,6,c	;volatile
   334                           
   335                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   336   000E0A  947D               	bcf	125,2,c	;volatile
   337                           
   338                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   339   000E0C  987D               	bcf	125,4,c	;volatile
   340                           
   341                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   342   000E0E  9E7B               	bcf	123,7,c	;volatile
   343                           
   344                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   345   000E10  9C7F               	bcf	127,6,c	;volatile
   346   000E12                     
   347                           ;dc_motor.c: 18:     RE2PPS=0x05;
   348   000E12  0E05               	movlw	5
   349   000E14  010E               	movlb	14	; () banked
   350   000E16  6F74               	movwf	116,b	;volatile
   351                           
   352                           ;dc_motor.c: 19:     RE4PPS=0x06;
   353   000E18  0E06               	movlw	6
   354   000E1A  6F76               	movwf	118,b	;volatile
   355                           
   356                           ;dc_motor.c: 20:     RC7PPS=0x07;
   357   000E1C  0E07               	movlw	7
   358   000E1E  6F69               	movwf	105,b	;volatile
   359                           
   360                           ;dc_motor.c: 21:     RG6PPS=0x08;
   361   000E20  0E08               	movlw	8
   362   000E22  6F88               	movwf	136,b	;volatile
   363                           
   364                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   365   000E24  50BD               	movf	189,w,c	;volatile
   366   000E26  0B8F               	andlw	-113
   367   000E28  0940               	iorlw	64
   368   000E2A  6EBD               	movwf	189,c	;volatile
   369                           
   370                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   371   000E2C  0EE0               	movlw	-32
   372   000E2E  16BE               	andwf	190,f,c	;volatile
   373                           
   374                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   375   000E30  50BF               	movf	191,w,c	;volatile
   376   000E32  0BF0               	andlw	-16
   377   000E34  0901               	iorlw	1
   378   000E36  6EBF               	movwf	191,c	;volatile
   379   000E38                     
   380                           ; BSR set to: 14
   381                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   382   000E38  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   383   000E3C                     
   384                           ; BSR set to: 14
   385                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   386   000E3C  8EBD               	bsf	189,7,c	;volatile
   387                           
   388                           ;dc_motor.c: 35:     CCPR1H=0;
   389   000E3E  0E00               	movlw	0
   390   000E40  6EAA               	movwf	170,c	;volatile
   391                           
   392                           ;dc_motor.c: 36:     CCPR2H=0;
   393   000E42  0E00               	movlw	0
   394   000E44  6EA6               	movwf	166,c	;volatile
   395                           
   396                           ;dc_motor.c: 37:     CCPR3H=0;
   397   000E46  0E00               	movlw	0
   398   000E48  010F               	movlb	15	; () banked
   399   000E4A  6F25               	movwf	37,b	;volatile
   400                           
   401                           ;dc_motor.c: 38:     CCPR4H=0;
   402   000E4C  0E00               	movlw	0
   403   000E4E  6F21               	movwf	33,b	;volatile
   404                           
   405                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   406   000E50  0EFC               	movlw	-4
   407   000E52  16AD               	andwf	173,f,c	;volatile
   408                           
   409                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   410   000E54  0EF3               	movlw	-13
   411   000E56  16AD               	andwf	173,f,c	;volatile
   412                           
   413                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   414   000E58  0ECF               	movlw	-49
   415   000E5A  16AD               	andwf	173,f,c	;volatile
   416                           
   417                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   418   000E5C  0E3F               	movlw	-193
   419   000E5E  16AD               	andwf	173,f,c	;volatile
   420   000E60                     
   421                           ; BSR set to: 15
   422                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   423   000E60  88AB               	bsf	171,4,c	;volatile
   424                           
   425                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   426   000E62  50AB               	movf	171,w,c	;volatile
   427   000E64  0BF0               	andlw	-16
   428   000E66  090C               	iorlw	12
   429   000E68  6EAB               	movwf	171,c	;volatile
   430   000E6A                     
   431                           ; BSR set to: 15
   432                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   433   000E6A  8EAB               	bsf	171,7,c	;volatile
   434   000E6C                     
   435                           ; BSR set to: 15
   436                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   437   000E6C  88A7               	bsf	167,4,c	;volatile
   438                           
   439                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   440   000E6E  50A7               	movf	167,w,c	;volatile
   441   000E70  0BF0               	andlw	-16
   442   000E72  090C               	iorlw	12
   443   000E74  6EA7               	movwf	167,c	;volatile
   444   000E76                     
   445                           ; BSR set to: 15
   446                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   447   000E76  8EA7               	bsf	167,7,c	;volatile
   448   000E78                     
   449                           ; BSR set to: 15
   450                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   451   000E78  8926               	bsf	38,4,b	;volatile
   452                           
   453                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   454   000E7A  5126               	movf	38,w,b	;volatile
   455   000E7C  0BF0               	andlw	-16
   456   000E7E  090C               	iorlw	12
   457   000E80  6F26               	movwf	38,b	;volatile
   458   000E82                     
   459                           ; BSR set to: 15
   460                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   461   000E82  8F26               	bsf	38,7,b	;volatile
   462   000E84                     
   463                           ; BSR set to: 15
   464                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   465   000E84  8922               	bsf	34,4,b	;volatile
   466                           
   467                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   468   000E86  5122               	movf	34,w,b	;volatile
   469   000E88  0BF0               	andlw	-16
   470   000E8A  090C               	iorlw	12
   471   000E8C  6F22               	movwf	34,b	;volatile
   472   000E8E                     
   473                           ; BSR set to: 15
   474                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   475   000E8E  8F22               	bsf	34,7,b	;volatile
   476   000E90                     
   477                           ; BSR set to: 15
   478   000E90  0012               	return		;funcret
   479   000E92                     __end_of_initDCmotorsPWM:
   480                           	callstack 0
   481                           
   482                           	psect	smallconst
   483   000E00                     __psmallconst:
   484                           	callstack 0
   485   000E00  00                 	db	0
   486   000E01  00                 	db	0	; dummy byte at the end
   487   000000                     
   488                           	psect	rparam
   489   000000                     
   490                           	psect	config
   491                           
   492                           ;Config register CONFIG1L @ 0x300000
   493                           ;	External Oscillator mode Selection bits
   494                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   495                           ;	Power-up default value for COSC bits
   496                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   497   300000                     	org	3145728
   498   300000  AA                 	db	170
   499                           
   500                           ;Config register CONFIG1H @ 0x300001
   501                           ;	unspecified, using default values
   502                           ;	Clock Out Enable bit
   503                           ;	CLKOUTEN = 0x1, unprogrammed default
   504                           ;	Clock Switch Enable bit
   505                           ;	CSWEN = 0x1, unprogrammed default
   506                           ;	Fail-Safe Clock Monitor Enable bit
   507                           ;	FCMEN = 0x1, unprogrammed default
   508   300001                     	org	3145729
   509   300001  FF                 	db	255
   510                           
   511                           ;Config register CONFIG3L @ 0x300004
   512                           ;	WDT Period Select bits
   513                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   514                           ;	WDT operating mode
   515                           ;	WDTE = OFF, WDT Disabled
   516   300004                     	org	3145732
   517   300004  9F                 	db	159
   518                           
   519                           ;Config register CONFIG3H @ 0x300005
   520                           ;	unspecified, using default values
   521                           ;	WDT Window Select bits
   522                           ;	WDTCWS = 0x7, unprogrammed default
   523                           ;	WDT input clock selector
   524                           ;	WDTCCS = 0x7, unprogrammed default
   525   300005                     	org	3145733
   526   300005  FF                 	db	255
   527                           tosu	equ	0xFFF
   528                           tosh	equ	0xFFE
   529                           tosl	equ	0xFFD
   530                           stkptr	equ	0xFFC
   531                           pclatu	equ	0xFFB
   532                           pclath	equ	0xFFA
   533                           pcl	equ	0xFF9
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           tblptrl	equ	0xFF6
   537                           tablat	equ	0xFF5
   538                           prodh	equ	0xFF4
   539                           prodl	equ	0xFF3
   540                           indf0	equ	0xFEF
   541                           postinc0	equ	0xFEE
   542                           postdec0	equ	0xFED
   543                           preinc0	equ	0xFEC
   544                           plusw0	equ	0xFEB
   545                           fsr0h	equ	0xFEA
   546                           fsr0l	equ	0xFE9
   547                           wreg	equ	0xFE8
   548                           indf1	equ	0xFE7
   549                           postinc1	equ	0xFE6
   550                           postdec1	equ	0xFE5
   551                           preinc1	equ	0xFE4
   552                           plusw1	equ	0xFE3
   553                           fsr1h	equ	0xFE2
   554                           fsr1l	equ	0xFE1
   555                           bsr	equ	0xFE0
   556                           indf2	equ	0xFDF
   557                           postinc2	equ	0xFDE
   558                           postdec2	equ	0xFDD
   559                           preinc2	equ	0xFDC
   560                           plusw2	equ	0xFDB
   561                           fsr2h	equ	0xFDA
   562                           fsr2l	equ	0xFD9
   563                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     20      31
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0     407
                                              2 COMRAM    18    18      0
                    _initDCmotorsPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initDCmotorsPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      50        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRllllhh     98      0       0      44        0.0%
BITBIGSFRllllll     7A      0       0      48        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     14      1F       1       32.6%
BITBIGSFRllhlll     54      0       0      42        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRllhhh      1E      0       0      36        0.0%
BITBIGSFRllllhh     11      0       0      45        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRlllllh      A      0       0      47        0.0%
BITBIGSFRllhllh      3      0       0      39        0.0%
BITBIGSFRlllh        2      0       0      43        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRllllhl      1      0       0      46        0.0%
BITBIGSFRllhlll      1      0       0      41        0.0%
BITBIGSFRllhllh      1      0       0      40        0.0%
BITBIGSFRllhlh       1      0       0      38        0.0%
BITBIGSFRllhhl       1      0       0      37        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1F      49        0.0%
DATA                 0      0      1F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 26 11:39:02 2024

            _turn180Delay 0015                        l30 0EE6                        l29 0EE6  
                      l97 0E90                       l998 0E02                      l1000 0E12  
                    l1010 0E6C                      l1002 0E38                      l1020 0E8E  
                    l1012 0E76                      l1004 0E3C                      l1014 0E78  
                    l1006 0E60                      l1030 0EA6                      l1022 0E92  
                    l1016 0E82                      l1008 0E6A                      l1040 0EC6  
                    l1032 0EAA                      l1024 0E92                      l1018 0E84  
                    l1042 0ECA                      l1034 0EB2                      l1026 0E9E  
                    l1044 0ECE                      l1036 0EBA                      l1028 0EA2  
                    l1046 0ED6                      l1038 0EC2                      l1048 0EDE  
                    _T2PR 0FBC                      _main 0E92                      fsr1l 0FE1  
                    start 0000              ___param_bank 0000                     ?_main 0001  
             _turningGear 001D                     tablat 0FF5           _turnLeft90Delay 0019  
         __initialization 0EEE              __end_of_main 0EEE                    ??_main 0003  
           __activetblptr 0000                    _CCPR1H 0FAA                    _CCPR2H 0FA6  
                  _CCPR3H 0F25                    _CCPR4H 0F21                    _RE2PPS 0E74  
                  _RC7PPS 0E69                    _RE4PPS 0E76                    _RG6PPS 0E88  
            _CCPTMRS0bits 0FAD                    isa$std 0001              __pdataCOMRAM 0015  
            __mediumconst 0000                    tblptrh 0FF7                    tblptrl 0FF6  
                  tblptru 0FF8         ??_initDCmotorsPWM 0003                __accesstop 0060  
 __end_of__initialization 0F0E             ___rparam_used 0001            __pcstackCOMRAM 0001  
           _forward1Delay 001B              _T2CLKCONbits 0FBF                   __Hparam 0000  
                 __Lparam 0000              __psmallconst 0E00                   __pcinit 0EEE  
                 __ramtop 0E00                   __ptext0 0E92                   __ptext1 0E02  
               _T2CONbits 0FBD                 _T2HLTbits 0FBE                   _topGear 001E  
    end_of_initialization 0F0E                   postdec1 0FE5                   postinc0 0FEE  
         _initDCmotorsPWM 0E02                 _TRISCbits 0F83                 _TRISEbits 0F85  
               _TRISGbits 0F87               _CCP1CONbits 0FAB               _CCP2CONbits 0FA7  
             _CCP3CONbits 0F26               _CCP4CONbits 0F22                main@motorL 0003  
              main@motorR 000C             __pidataCOMRAM 0F14       start_initialization 0EEE  
        _turnRight90Delay 0017   __end_of_initDCmotorsPWM 0E92               __smallconst 0E00  
initDCmotorsPWM@PWMperiod 0001                 _rampDelay 001F                  _LATCbits 0F7B  
                _LATEbits 0F7D                  _LATGbits 0F7F          ?_initDCmotorsPWM 0001  
               copy_data0 0F02                  __Hrparam 0000                  __Lrparam 0000  
                isa$xinst 0000  
