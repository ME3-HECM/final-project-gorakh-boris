

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 26 13:39:55 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16   000000                     
    17                           ; Generated 21/07/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F67K40 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51   000000                     
    52                           	psect	idataCOMRAM
    53   000FC6                     __pidataCOMRAM:
    54                           	callstack 0
    55                           
    56                           ;initializer for _turn180Delay
    57   000FC6  01FE               	dw	510
    58                           
    59                           ;initializer for _turnRight135Delay
    60   000FC8  012C               	dw	300
    61                           
    62                           ;initializer for _turnLeft135Delay
    63   000FCA  012C               	dw	300
    64                           
    65                           ;initializer for _turnRight90Delay
    66   000FCC  00AF               	dw	175
    67                           
    68                           ;initializer for _turnLeft90Delay
    69   000FCE  00AF               	dw	175
    70                           
    71                           ;initializer for _forward1Delay
    72   000FD0  00C8               	dw	200
    73                           
    74                           ;initializer for _turningGear
    75   000FD2  2A                 	db	42
    76                           
    77                           ;initializer for _topAdjustSide
    78   000FD3  01                 	db	1
    79                           
    80                           ;initializer for _topAdjustPower
    81   000FD4  02                 	db	2
    82                           
    83                           ;initializer for _topGear
    84   000FD5  1E                 	db	30
    85                           
    86                           ;initializer for _rampDelay
    87   000FD6  08                 	db	8
    88   000000                     _TRISFbits	set	3974
    89   000000                     _TRISDbits	set	3972
    90   000000                     _LATGbits	set	3967
    91   000000                     _LATEbits	set	3965
    92   000000                     _TRISGbits	set	3975
    93   000000                     _LATHbits	set	3968
    94   000000                     _LATFbits	set	3966
    95   000000                     _RC7PPS	set	3689
    96   000000                     _RE2PPS	set	3700
    97   000000                     _CCPR4H	set	3873
    98   000000                     _CCPR3H	set	3877
    99   000000                     _CCPR2H	set	4006
   100   000000                     _CCPR1H	set	4010
   101   000000                     _CCP1CONbits	set	4011
   102   000000                     _CCPTMRS0bits	set	4013
   103   000000                     _T2PR	set	4028
   104   000000                     _T2CONbits	set	4029
   105   000000                     _CCP2CONbits	set	4007
   106   000000                     _CCP3CONbits	set	3878
   107   000000                     _LATCbits	set	3963
   108   000000                     _LATDbits	set	3964
   109   000000                     _CCP4CONbits	set	3874
   110   000000                     _TRISCbits	set	3971
   111   000000                     _TRISEbits	set	3973
   112   000000                     _TRISHbits	set	3976
   113   000000                     _RE4PPS	set	3702
   114   000000                     _RG6PPS	set	3720
   115   000000                     _T2CLKCONbits	set	4031
   116   000000                     _T2HLTbits	set	4030
   117                           
   118                           ; #config settings
   119                           
   120                           	psect	cinit
   121   000F8A                     __pcinit:
   122                           	callstack 0
   123   000F8A                     start_initialization:
   124                           	callstack 0
   125   000F8A                     __initialization:
   126                           	callstack 0
   127                           
   128                           ; Initialize objects allocated to COMRAM (17 bytes)
   129                           ; load TBLPTR registers with __pidataCOMRAM
   130   000F8A  0EC6               	movlw	low __pidataCOMRAM
   131   000F8C  6EF6               	movwf	tblptrl,c
   132   000F8E  0E0F               	movlw	high __pidataCOMRAM
   133   000F90  6EF7               	movwf	tblptrh,c
   134   000F92  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   135   000F94  6EF8               	movwf	tblptru,c
   136   000F96  EE00  F017         	lfsr	0,__pdataCOMRAM
   137   000F9A  EE10 F011          	lfsr	1,17
   138   000F9E                     copy_data0:
   139   000F9E  0009               	tblrd		*+
   140   000FA0  CFF5 FFEE          	movff	tablat,postinc0
   141   000FA4  50E5               	movf	postdec1,w,c
   142   000FA6  50E1               	movf	fsr1l,w,c
   143   000FA8  E1FA               	bnz	copy_data0
   144   000FAA                     end_of_initialization:
   145                           	callstack 0
   146   000FAA                     __end_of__initialization:
   147                           	callstack 0
   148   000FAA  0100               	movlb	0
   149   000FAC  EF01  F007         	goto	_main	;jump to C main() function
   150                           
   151                           	psect	dataCOMRAM
   152   000017                     __pdataCOMRAM:
   153                           	callstack 0
   154   000017                     _turn180Delay:
   155                           	callstack 0
   156   000017                     	ds	2
   157   000019                     _turnRight135Delay:
   158                           	callstack 0
   159   000019                     	ds	2
   160   00001B                     _turnLeft135Delay:
   161                           	callstack 0
   162   00001B                     	ds	2
   163   00001D                     _turnRight90Delay:
   164                           	callstack 0
   165   00001D                     	ds	2
   166   00001F                     _turnLeft90Delay:
   167                           	callstack 0
   168   00001F                     	ds	2
   169   000021                     _forward1Delay:
   170                           	callstack 0
   171   000021                     	ds	2
   172   000023                     _turningGear:
   173                           	callstack 0
   174   000023                     	ds	1
   175   000024                     _topAdjustSide:
   176                           	callstack 0
   177   000024                     	ds	1
   178   000025                     _topAdjustPower:
   179                           	callstack 0
   180   000025                     	ds	1
   181   000026                     _topGear:
   182                           	callstack 0
   183   000026                     	ds	1
   184   000027                     _rampDelay:
   185                           	callstack 0
   186   000027                     	ds	1
   187                           
   188                           	psect	cstackCOMRAM
   189   000001                     __pcstackCOMRAM:
   190                           	callstack 0
   191   000001                     initDCmotorsPWM@PWMperiod:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x0
   195   000001                     	ds	2
   196   000003                     ??_main:
   197                           
   198                           ; 1 bytes @ 0x2
   199   000003                     	ds	2
   200   000005                     main@motorL:
   201                           	callstack 0
   202                           
   203                           ; 9 bytes @ 0x4
   204   000005                     	ds	9
   205   00000E                     main@motorR:
   206                           	callstack 0
   207                           
   208                           ; 9 bytes @ 0xD
   209   00000E                     	ds	9
   210                           
   211 ;;
   212 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   213 ;;
   214 ;; *************** function _main *****************
   215 ;; Defined at:
   216 ;;		line 23 in file "main.c"
   217 ;; Parameters:    Size  Location     Type
   218 ;;		None
   219 ;; Auto vars:     Size  Location     Type
   220 ;;  motorR          9   13[COMRAM] struct DC_motor
   221 ;;  motorL          9    4[COMRAM] struct DC_motor
   222 ;;  PWMcycle        2    0        unsigned int 
   223 ;; Return value:  Size  Location     Type
   224 ;;                  1    wreg      void 
   225 ;; Registers used:
   226 ;;		wreg, status,2, status,0, cstack
   227 ;; Tracked objects:
   228 ;;		On entry : 0/0
   229 ;;		On exit  : 0/0
   230 ;;		Unchanged: 0/0
   231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   233 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   234 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   235 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   236 ;;Total ram usage:       20 bytes
   237 ;; Hardware stack levels required when called: 1
   238 ;; This function calls:
   239 ;;		_buggy_lights_init
   240 ;;		_initDCmotorsPWM
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246                           	psect	text0
   247   000E02                     __ptext0:
   248                           	callstack 0
   249   000E02                     _main:
   250                           	callstack 30
   251   000E02                     
   252                           ;main.c: 25:     initDCmotorsPWM(PWMcycle);
   253   000E02  0E00               	movlw	0
   254   000E04  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   255   000E06  0E63               	movlw	99
   256   000E08  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   257   000E0A  EC7D  F007         	call	_initDCmotorsPWM	;wreg free
   258   000E0E                     
   259                           ;main.c: 27:     struct DC_motor motorL, motorR;;main.c: 29:     motorL.power = 0;
   260   000E0E  0E00               	movlw	0
   261   000E10  6E05               	movwf	main@motorL^0,c
   262   000E12                     
   263                           ;main.c: 30:     motorL.direction = 1;
   264   000E12  0E01               	movlw	1
   265   000E14  6E06               	movwf	(main@motorL+1)^0,c
   266   000E16                     
   267                           ;main.c: 31:     motorL.brakemode = 1;
   268   000E16  0E01               	movlw	1
   269   000E18  6E07               	movwf	(main@motorL+2)^0,c
   270   000E1A                     
   271                           ;main.c: 32:     motorL.PWMperiod = PWMcycle;
   272   000E1A  0E00               	movlw	0
   273   000E1C  6E09               	movwf	(main@motorL+4)^0,c
   274   000E1E  0E63               	movlw	99
   275   000E20  6E08               	movwf	(main@motorL+3)^0,c
   276   000E22                     
   277                           ;main.c: 33:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   278   000E22  0EAA               	movlw	170
   279   000E24  6E0A               	movwf	(main@motorL+5)^0,c
   280   000E26  0E0F               	movlw	15
   281   000E28  6E0B               	movwf	(main@motorL+6)^0,c
   282   000E2A                     
   283                           ;main.c: 34:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   284   000E2A  0EA6               	movlw	166
   285   000E2C  6E0C               	movwf	(main@motorL+7)^0,c
   286   000E2E  0E0F               	movlw	15
   287   000E30  6E0D               	movwf	(main@motorL+8)^0,c
   288   000E32                     
   289                           ;main.c: 36:     motorR.power = 0;
   290   000E32  0E00               	movlw	0
   291   000E34  6E0E               	movwf	main@motorR^0,c
   292   000E36                     
   293                           ;main.c: 37:     motorR.direction = 1;
   294   000E36  0E01               	movlw	1
   295   000E38  6E0F               	movwf	(main@motorR+1)^0,c
   296   000E3A                     
   297                           ;main.c: 38:     motorR.brakemode = 1;
   298   000E3A  0E01               	movlw	1
   299   000E3C  6E10               	movwf	(main@motorR+2)^0,c
   300   000E3E                     
   301                           ;main.c: 39:     motorR.PWMperiod = PWMcycle;
   302   000E3E  0E00               	movlw	0
   303   000E40  6E12               	movwf	(main@motorR+4)^0,c
   304   000E42  0E63               	movlw	99
   305   000E44  6E11               	movwf	(main@motorR+3)^0,c
   306   000E46                     
   307                           ;main.c: 40:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   308   000E46  0E25               	movlw	37
   309   000E48  6E13               	movwf	(main@motorR+5)^0,c
   310   000E4A  0E0F               	movlw	15
   311   000E4C  6E14               	movwf	(main@motorR+6)^0,c
   312   000E4E                     
   313                           ;main.c: 41:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   314   000E4E  0E21               	movlw	33
   315   000E50  6E15               	movwf	(main@motorR+7)^0,c
   316   000E52  0E0F               	movlw	15
   317   000E54  6E16               	movwf	(main@motorR+8)^0,c
   318                           
   319                           ;main.c: 43:     buggy_lights_init();
   320   000E56  ECD8  F007         	call	_buggy_lights_init	;wreg free
   321   000E5A                     l1131:
   322                           
   323                           ;main.c: 47:         LATDbits.LATD4 = !LATDbits.LATD4;
   324   000E5A  A87C               	btfss	124,4,c	;volatile
   325   000E5C  EF32  F007         	goto	u271
   326   000E60  EF36  F007         	goto	u270
   327   000E64                     u271:
   328   000E64  6A03               	clrf	??_main^0,c
   329   000E66  2A03               	incf	??_main^0,f,c
   330   000E68  EF37  F007         	goto	u288
   331   000E6C                     u270:
   332   000E6C  6A03               	clrf	??_main^0,c
   333   000E6E                     u288:
   334   000E6E  3A03               	swapf	??_main^0,f,c
   335   000E70  507C               	movf	124,w,c	;volatile
   336   000E72  1803               	xorwf	??_main^0,w,c
   337   000E74  0BEF               	andlw	-17
   338   000E76  1803               	xorwf	??_main^0,w,c
   339   000E78  6E7C               	movwf	124,c	;volatile
   340   000E7A                     
   341                           ;main.c: 48:         LATDbits.LATD3 = !LATDbits.LATD3;
   342   000E7A  A67C               	btfss	124,3,c	;volatile
   343   000E7C  EF42  F007         	goto	u291
   344   000E80  EF46  F007         	goto	u290
   345   000E84                     u291:
   346   000E84  6A03               	clrf	??_main^0,c
   347   000E86  2A03               	incf	??_main^0,f,c
   348   000E88  EF47  F007         	goto	u308
   349   000E8C                     u290:
   350   000E8C  6A03               	clrf	??_main^0,c
   351   000E8E                     u308:
   352   000E8E  4603               	rlncf	??_main^0,f,c
   353   000E90  4603               	rlncf	??_main^0,f,c
   354   000E92  4603               	rlncf	??_main^0,f,c
   355   000E94  507C               	movf	124,w,c	;volatile
   356   000E96  1803               	xorwf	??_main^0,w,c
   357   000E98  0BF7               	andlw	-9
   358   000E9A  1803               	xorwf	??_main^0,w,c
   359   000E9C  6E7C               	movwf	124,c	;volatile
   360   000E9E                     
   361                           ;main.c: 49:         _delay((unsigned long)((500)*(64000000/4000.0)));
   362   000E9E  0E29               	movlw	41
   363   000EA0  6E04               	movwf	(??_main+1)^0,c
   364   000EA2  0E96               	movlw	150
   365   000EA4  6E03               	movwf	??_main^0,c
   366   000EA6  0E7F               	movlw	127
   367   000EA8                     u357:
   368   000EA8  2EE8               	decfsz	wreg,f,c
   369   000EAA  D7FE               	bra	u357
   370   000EAC  2E03               	decfsz	??_main^0,f,c
   371   000EAE  D7FC               	bra	u357
   372   000EB0  2E04               	decfsz	(??_main+1)^0,f,c
   373   000EB2  D7FA               	bra	u357
   374   000EB4  0000               	nop	
   375   000EB6                     
   376                           ;main.c: 50:         LATFbits.LATF0 = !LATFbits.LATF0;
   377   000EB6  A07E               	btfss	126,0,c	;volatile
   378   000EB8  EF60  F007         	goto	u311
   379   000EBC  EF64  F007         	goto	u310
   380   000EC0                     u311:
   381   000EC0  6A03               	clrf	??_main^0,c
   382   000EC2  2A03               	incf	??_main^0,f,c
   383   000EC4  EF65  F007         	goto	u328
   384   000EC8                     u310:
   385   000EC8  6A03               	clrf	??_main^0,c
   386   000ECA                     u328:
   387   000ECA  507E               	movf	126,w,c	;volatile
   388   000ECC  1803               	xorwf	??_main^0,w,c
   389   000ECE  0BFE               	andlw	-2
   390   000ED0  1803               	xorwf	??_main^0,w,c
   391   000ED2  6E7E               	movwf	126,c	;volatile
   392   000ED4                     
   393                           ;main.c: 51:         LATHbits.LATH0 = !LATHbits.LATH0;
   394   000ED4  A080               	btfss	128,0,c	;volatile
   395   000ED6  EF6F  F007         	goto	u331
   396   000EDA  EF73  F007         	goto	u330
   397   000EDE                     u331:
   398   000EDE  6A03               	clrf	??_main^0,c
   399   000EE0  2A03               	incf	??_main^0,f,c
   400   000EE2  EF74  F007         	goto	u348
   401   000EE6                     u330:
   402   000EE6  6A03               	clrf	??_main^0,c
   403   000EE8                     u348:
   404   000EE8  5080               	movf	128,w,c	;volatile
   405   000EEA  1803               	xorwf	??_main^0,w,c
   406   000EEC  0BFE               	andlw	-2
   407   000EEE  1803               	xorwf	??_main^0,w,c
   408   000EF0  6E80               	movwf	128,c	;volatile
   409   000EF2  EF2D  F007         	goto	l1131
   410   000EF6  EF00  F000         	goto	start
   411   000EFA                     __end_of_main:
   412                           	callstack 0
   413                           
   414 ;; *************** function _initDCmotorsPWM *****************
   415 ;; Defined at:
   416 ;;		line 5 in file "dc_motor.c"
   417 ;; Parameters:    Size  Location     Type
   418 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   419 ;; Auto vars:     Size  Location     Type
   420 ;;		None
   421 ;; Return value:  Size  Location     Type
   422 ;;                  1    wreg      void 
   423 ;; Registers used:
   424 ;;		wreg, status,2
   425 ;; Tracked objects:
   426 ;;		On entry : 0/0
   427 ;;		On exit  : 0/0
   428 ;;		Unchanged: 0/0
   429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   434 ;;Total ram usage:        2 bytes
   435 ;; Hardware stack levels used: 1
   436 ;; This function calls:
   437 ;;		Nothing
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           	psect	text1
   444   000EFA                     __ptext1:
   445                           	callstack 0
   446   000EFA                     _initDCmotorsPWM:
   447                           	callstack 30
   448   000EFA                     
   449                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   450   000EFA  9485               	bcf	133,2,c	;volatile
   451                           
   452                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   453   000EFC  9885               	bcf	133,4,c	;volatile
   454                           
   455                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   456   000EFE  9E83               	bcf	131,7,c	;volatile
   457                           
   458                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   459   000F00  9C87               	bcf	135,6,c	;volatile
   460                           
   461                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   462   000F02  947D               	bcf	125,2,c	;volatile
   463                           
   464                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   465   000F04  987D               	bcf	125,4,c	;volatile
   466                           
   467                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   468   000F06  9E7B               	bcf	123,7,c	;volatile
   469                           
   470                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   471   000F08  9C7F               	bcf	127,6,c	;volatile
   472   000F0A                     
   473                           ;dc_motor.c: 18:     RE2PPS=0x05;
   474   000F0A  0E05               	movlw	5
   475   000F0C  010E               	movlb	14	; () banked
   476   000F0E  6F74               	movwf	116,b	;volatile
   477                           
   478                           ;dc_motor.c: 19:     RE4PPS=0x06;
   479   000F10  0E06               	movlw	6
   480   000F12  6F76               	movwf	118,b	;volatile
   481                           
   482                           ;dc_motor.c: 20:     RC7PPS=0x07;
   483   000F14  0E07               	movlw	7
   484   000F16  6F69               	movwf	105,b	;volatile
   485                           
   486                           ;dc_motor.c: 21:     RG6PPS=0x08;
   487   000F18  0E08               	movlw	8
   488   000F1A  6F88               	movwf	136,b	;volatile
   489                           
   490                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   491   000F1C  50BD               	movf	189,w,c	;volatile
   492   000F1E  0B8F               	andlw	-113
   493   000F20  0940               	iorlw	64
   494   000F22  6EBD               	movwf	189,c	;volatile
   495                           
   496                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   497   000F24  0EE0               	movlw	-32
   498   000F26  16BE               	andwf	190,f,c	;volatile
   499                           
   500                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   501   000F28  50BF               	movf	191,w,c	;volatile
   502   000F2A  0BF0               	andlw	-16
   503   000F2C  0901               	iorlw	1
   504   000F2E  6EBF               	movwf	191,c	;volatile
   505   000F30                     
   506                           ; BSR set to: 14
   507                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   508   000F30  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   509   000F34                     
   510                           ; BSR set to: 14
   511                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   512   000F34  8EBD               	bsf	189,7,c	;volatile
   513                           
   514                           ;dc_motor.c: 35:     CCPR1H=0;
   515   000F36  0E00               	movlw	0
   516   000F38  6EAA               	movwf	170,c	;volatile
   517                           
   518                           ;dc_motor.c: 36:     CCPR2H=0;
   519   000F3A  0E00               	movlw	0
   520   000F3C  6EA6               	movwf	166,c	;volatile
   521                           
   522                           ;dc_motor.c: 37:     CCPR3H=0;
   523   000F3E  0E00               	movlw	0
   524   000F40  010F               	movlb	15	; () banked
   525   000F42  6F25               	movwf	37,b	;volatile
   526                           
   527                           ;dc_motor.c: 38:     CCPR4H=0;
   528   000F44  0E00               	movlw	0
   529   000F46  6F21               	movwf	33,b	;volatile
   530                           
   531                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   532   000F48  0EFC               	movlw	-4
   533   000F4A  16AD               	andwf	173,f,c	;volatile
   534                           
   535                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   536   000F4C  0EF3               	movlw	-13
   537   000F4E  16AD               	andwf	173,f,c	;volatile
   538                           
   539                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   540   000F50  0ECF               	movlw	-49
   541   000F52  16AD               	andwf	173,f,c	;volatile
   542                           
   543                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   544   000F54  0E3F               	movlw	-193
   545   000F56  16AD               	andwf	173,f,c	;volatile
   546   000F58                     
   547                           ; BSR set to: 15
   548                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   549   000F58  88AB               	bsf	171,4,c	;volatile
   550                           
   551                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   552   000F5A  50AB               	movf	171,w,c	;volatile
   553   000F5C  0BF0               	andlw	-16
   554   000F5E  090C               	iorlw	12
   555   000F60  6EAB               	movwf	171,c	;volatile
   556   000F62                     
   557                           ; BSR set to: 15
   558                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   559   000F62  8EAB               	bsf	171,7,c	;volatile
   560   000F64                     
   561                           ; BSR set to: 15
   562                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   563   000F64  88A7               	bsf	167,4,c	;volatile
   564                           
   565                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   566   000F66  50A7               	movf	167,w,c	;volatile
   567   000F68  0BF0               	andlw	-16
   568   000F6A  090C               	iorlw	12
   569   000F6C  6EA7               	movwf	167,c	;volatile
   570   000F6E                     
   571                           ; BSR set to: 15
   572                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   573   000F6E  8EA7               	bsf	167,7,c	;volatile
   574   000F70                     
   575                           ; BSR set to: 15
   576                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   577   000F70  8926               	bsf	38,4,b	;volatile
   578                           
   579                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   580   000F72  5126               	movf	38,w,b	;volatile
   581   000F74  0BF0               	andlw	-16
   582   000F76  090C               	iorlw	12
   583   000F78  6F26               	movwf	38,b	;volatile
   584   000F7A                     
   585                           ; BSR set to: 15
   586                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   587   000F7A  8F26               	bsf	38,7,b	;volatile
   588   000F7C                     
   589                           ; BSR set to: 15
   590                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   591   000F7C  8922               	bsf	34,4,b	;volatile
   592                           
   593                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   594   000F7E  5122               	movf	34,w,b	;volatile
   595   000F80  0BF0               	andlw	-16
   596   000F82  090C               	iorlw	12
   597   000F84  6F22               	movwf	34,b	;volatile
   598   000F86                     
   599                           ; BSR set to: 15
   600                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   601   000F86  8F22               	bsf	34,7,b	;volatile
   602   000F88                     
   603                           ; BSR set to: 15
   604   000F88  0012               	return		;funcret
   605   000F8A                     __end_of_initDCmotorsPWM:
   606                           	callstack 0
   607                           
   608 ;; *************** function _buggy_lights_init *****************
   609 ;; Defined at:
   610 ;;		line 4 in file "buggy_lights.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;		None
   615 ;; Return value:  Size  Location     Type
   616 ;;                  1    wreg      void 
   617 ;; Registers used:
   618 ;;		None
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   628 ;;Total ram usage:        0 bytes
   629 ;; Hardware stack levels used: 1
   630 ;; This function calls:
   631 ;;		Nothing
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text2
   638   000FB0                     __ptext2:
   639                           	callstack 0
   640   000FB0                     _buggy_lights_init:
   641                           	callstack 30
   642   000FB0                     
   643                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
   644   000FB0  9884               	bcf	132,4,c	;volatile
   645                           
   646                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
   647   000FB2  9288               	bcf	136,1,c	;volatile
   648                           
   649                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
   650   000FB4  9684               	bcf	132,3,c	;volatile
   651                           
   652                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
   653   000FB6  9086               	bcf	134,0,c	;volatile
   654                           
   655                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
   656   000FB8  9088               	bcf	136,0,c	;volatile
   657                           
   658                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
   659   000FBA  887C               	bsf	124,4,c	;volatile
   660                           
   661                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
   662   000FBC  8280               	bsf	128,1,c	;volatile
   663                           
   664                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
   665   000FBE  867C               	bsf	124,3,c	;volatile
   666                           
   667                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
   668   000FC0  807E               	bsf	126,0,c	;volatile
   669                           
   670                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
   671   000FC2  8080               	bsf	128,0,c	;volatile
   672   000FC4  0012               	return		;funcret
   673   000FC6                     __end_of_buggy_lights_init:
   674                           	callstack 0
   675                           
   676                           	psect	smallconst
   677   000E00                     __psmallconst:
   678                           	callstack 0
   679   000E00  00                 	db	0
   680   000E01  00                 	db	0	; dummy byte at the end
   681   000000                     
   682                           	psect	rparam
   683   000000                     
   684                           	psect	config
   685                           
   686                           ;Config register CONFIG1L @ 0x300000
   687                           ;	External Oscillator mode Selection bits
   688                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   689                           ;	Power-up default value for COSC bits
   690                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   691   300000                     	org	3145728
   692   300000  AA                 	db	170
   693                           
   694                           ;Config register CONFIG1H @ 0x300001
   695                           ;	unspecified, using default values
   696                           ;	Clock Out Enable bit
   697                           ;	CLKOUTEN = 0x1, unprogrammed default
   698                           ;	Clock Switch Enable bit
   699                           ;	CSWEN = 0x1, unprogrammed default
   700                           ;	Fail-Safe Clock Monitor Enable bit
   701                           ;	FCMEN = 0x1, unprogrammed default
   702   300001                     	org	3145729
   703   300001  FF                 	db	255
   704                           
   705                           ;Config register CONFIG3L @ 0x300004
   706                           ;	WDT Period Select bits
   707                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   708                           ;	WDT operating mode
   709                           ;	WDTE = OFF, WDT Disabled
   710   300004                     	org	3145732
   711   300004  9F                 	db	159
   712                           
   713                           ;Config register CONFIG3H @ 0x300005
   714                           ;	unspecified, using default values
   715                           ;	WDT Window Select bits
   716                           ;	WDTCWS = 0x7, unprogrammed default
   717                           ;	WDT input clock selector
   718                           ;	WDTCCS = 0x7, unprogrammed default
   719   300005                     	org	3145733
   720   300005  FF                 	db	255
   721                           tosu	equ	0xFFF
   722                           tosh	equ	0xFFE
   723                           tosl	equ	0xFFD
   724                           stkptr	equ	0xFFC
   725                           pclatu	equ	0xFFB
   726                           pclath	equ	0xFFA
   727                           pcl	equ	0xFF9
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           prodh	equ	0xFF4
   733                           prodl	equ	0xFF3
   734                           indf0	equ	0xFEF
   735                           postinc0	equ	0xFEE
   736                           postdec0	equ	0xFED
   737                           preinc0	equ	0xFEC
   738                           plusw0	equ	0xFEB
   739                           fsr0h	equ	0xFEA
   740                           fsr0l	equ	0xFE9
   741                           wreg	equ	0xFE8
   742                           indf1	equ	0xFE7
   743                           postinc1	equ	0xFE6
   744                           postdec1	equ	0xFE5
   745                           preinc1	equ	0xFE4
   746                           plusw1	equ	0xFE3
   747                           fsr1h	equ	0xFE2
   748                           fsr1l	equ	0xFE1
   749                           bsr	equ	0xFE0
   750                           indf2	equ	0xFDF
   751                           postinc2	equ	0xFDE
   752                           postdec2	equ	0xFDD
   753                           preinc2	equ	0xFDC
   754                           plusw2	equ	0xFDB
   755                           fsr2h	equ	0xFDA
   756                           fsr2l	equ	0xFD9
   757                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      39
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    S29DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    S29DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRllllll[1]), CCPR4H(BITBIGSFRllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRllllll[1]), CCPR3H(BITBIGSFRllllll[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0     407
                                              2 COMRAM    20    20      0
                  _buggy_lights_init
                    _initDCmotorsPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _initDCmotorsPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRllllhh     98      0       0      40        0.0%
BITBIGSFRllllll     7A      0       0      44        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      27       1       41.1%
BITBIGSFRllhl       54      0       0      38        0.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRllhhhh     1D      0       0      36        0.0%
BITBIGSFRllllhh     11      0       0      41        0.0%
BITBIGSFRhlh         E      0       0      33        0.0%
BITBIGSFRlllllh      A      0       0      43        0.0%
BITBIGSFRllhhhh      2      0       0      37        0.0%
BITBIGSFRlllh        2      0       0      39        0.0%
BITBIGSFRlh          2      0       0      35        0.0%
BITBIGSFRllllhl      1      0       0      42        0.0%
BITBIGSFRhll         1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      27      45        0.0%
DATA                 0      0      27       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 26 13:39:55 2024

             _turn180Delay 0017                        l123 0F88                        l197 0FC4  
                      l913 0FB0                        u310 0EC8                        u311 0EC0  
                      u330 0EE6                        u331 0EDE                        u308 0E8E  
                      u270 0E6C                        u271 0E64                        u328 0ECA  
                      u290 0E8C                        u291 0E84                        u348 0EE8  
                      u357 0EA8                        u288 0E6E                        wreg 0FE8  
                     l1101 0F86                       l1111 0E16                       l1103 0E02  
                     l1121 0E36                       l1113 0E1A                       l1105 0E02  
                     l1131 0E5A                       l1123 0E3A                       l1115 0E22  
                     l1107 0E0E                       l1133 0E7A                       l1125 0E3E  
                     l1117 0E2A                       l1109 0E12                       l1135 0E9E  
                     l1127 0E46                       l1119 0E32                       l1081 0F0A  
                     l1137 0EB6                       l1129 0E4E                       l1091 0F64  
                     l1083 0F30                       l1139 0ED4                       l1093 0F6E  
                     l1085 0F34                       l1095 0F70                       l1087 0F58  
                     l1079 0EFA                       l1097 0F7A                       l1089 0F62  
                     l1099 0F7C                       _T2PR 0FBC                       _main 0E02  
                     fsr1l 0FE1                       start 0000               ___param_bank 0000  
                    ?_main 0001                _turningGear 0023          _turnRight135Delay 0019  
                    tablat 0FF5            _turnLeft90Delay 001F            __initialization 0F8A  
             __end_of_main 0EFA                     ??_main 0003              __activetblptr 0000  
                   _CCPR1H 0FAA                     _CCPR2H 0FA6                     _CCPR3H 0F25  
                   _CCPR4H 0F21                     _RE2PPS 0E74                     _RC7PPS 0E69  
                   _RE4PPS 0E76                     _RG6PPS 0E88           _turnLeft135Delay 001B  
             _CCPTMRS0bits 0FAD                     isa$std 0001               __pdataCOMRAM 0017  
             __mediumconst 0000                     tblptrh 0FF7                     tblptrl 0FF6  
                   tblptru 0FF8          ??_initDCmotorsPWM 0003          _buggy_lights_init 0FB0  
               __accesstop 0060    __end_of__initialization 0FAA         ?_buggy_lights_init 0001  
            ___rparam_used 0001             __pcstackCOMRAM 0001        ??_buggy_lights_init 0001  
            _forward1Delay 0021  __end_of_buggy_lights_init 0FC6               _T2CLKCONbits 0FBF  
                  __Hparam 0000                    __Lparam 0000               __psmallconst 0E00  
                  __pcinit 0F8A                    __ramtop 0E00                    __ptext0 0E02  
                  __ptext1 0EFA                    __ptext2 0FB0                  _T2CONbits 0FBD  
                _T2HLTbits 0FBE                    _topGear 0026       end_of_initialization 0FAA  
                  postdec1 0FE5                    postinc0 0FEE            _initDCmotorsPWM 0EFA  
                _TRISCbits 0F83                  _TRISDbits 0F84                  _TRISEbits 0F85  
                _TRISFbits 0F86                  _TRISGbits 0F87                  _TRISHbits 0F88  
              _CCP1CONbits 0FAB                _CCP2CONbits 0FA7                _CCP3CONbits 0F26  
              _CCP4CONbits 0F22                 main@motorL 0005                 main@motorR 000E  
            __pidataCOMRAM 0FC6        start_initialization 0F8A           _turnRight90Delay 001D  
  __end_of_initDCmotorsPWM 0F8A             _topAdjustPower 0025                __smallconst 0E00  
 initDCmotorsPWM@PWMperiod 0001                  _rampDelay 0027                   _LATCbits 0F7B  
                 _LATDbits 0F7C                   _LATEbits 0F7D                   _LATFbits 0F7E  
                 _LATGbits 0F7F                   _LATHbits 0F80           ?_initDCmotorsPWM 0001  
                copy_data0 0F9E                   __Hrparam 0000                   __Lrparam 0000  
            _topAdjustSide 0024                   isa$xinst 0000  
