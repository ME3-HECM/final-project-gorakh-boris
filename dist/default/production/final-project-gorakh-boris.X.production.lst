

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 26 16:04:31 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Generated 21/07/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F67K40 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     
    62                           	psect	idataCOMRAM
    63   001462                     __pidataCOMRAM:
    64                           	callstack 0
    65                           
    66                           ;initializer for _squareDelay
    67   001462  012C               	dw	300
    68                           
    69                           ;initializer for _headbuttDelay
    70   001464  0046               	dw	70
    71                           
    72                           ;initializer for _turn180Delay
    73   001466  01FE               	dw	510
    74                           
    75                           ;initializer for _turnRight135Delay
    76   001468  012C               	dw	300
    77                           
    78                           ;initializer for _turnLeft135Delay
    79   00146A  012C               	dw	300
    80                           
    81                           ;initializer for _turnRight90Delay
    82   00146C  00AF               	dw	175
    83                           
    84                           ;initializer for _turnLeft90Delay
    85   00146E  00AF               	dw	175
    86                           
    87                           ;initializer for _turningGear
    88   001470  2A                 	db	42
    89                           
    90                           ;initializer for _topGearRight
    91   001471  20                 	db	32
    92                           
    93                           ;initializer for _topGearLeft
    94   001472  1E                 	db	30
    95                           
    96                           ;initializer for _rampDelay
    97   001473  08                 	db	8
    98   000000                     _LATGbits	set	3967
    99   000000                     _LATEbits	set	3965
   100   000000                     _TRISGbits	set	3975
   101   000000                     _TRISEbits	set	3973
   102   000000                     _LATFbits	set	3966
   103   000000                     _LATHbits	set	3968
   104   000000                     _TRISFbits	set	3974
   105   000000                     _TRISHbits	set	3976
   106   000000                     _SSP2CON2bits	set	3802
   107   000000                     _SSP2CLKPPS	set	3612
   108   000000                     _SSP2DATPPS	set	3613
   109   000000                     _RC7PPS	set	3689
   110   000000                     _RE2PPS	set	3700
   111   000000                     _LATCbits	set	3963
   112   000000                     _LATDbits	set	3964
   113   000000                     _TRISDbits	set	3972
   114   000000                     _T2PR	set	4028
   115   000000                     _T2CONbits	set	4029
   116   000000                     _CCPR2H	set	4006
   117   000000                     _CCPR1H	set	4010
   118   000000                     _TRISCbits	set	3971
   119   000000                     _RE4PPS	set	3702
   120   000000                     _RG6PPS	set	3720
   121   000000                     _RD5PPS	set	3695
   122   000000                     _ANSELDbits	set	3751
   123   000000                     _SSP2ADD	set	3798
   124   000000                     _SSP2CON1bits	set	3801
   125   000000                     _CCPR4H	set	3873
   126   000000                     _CCPR3H	set	3877
   127   000000                     _T2CLKCONbits	set	4031
   128   000000                     _T2HLTbits	set	4030
   129   000000                     _CCP1CONbits	set	4011
   130   000000                     _CCPTMRS0bits	set	4013
   131   000000                     _CCP2CONbits	set	4007
   132   000000                     _CCP3CONbits	set	3878
   133   000000                     _CCP4CONbits	set	3874
   134   000000                     _SSP2CON2	set	3802
   135   000000                     _SSP2STAT	set	3800
   136   000000                     _SSP2BUF	set	3797
   137   000000                     _RD6PPS	set	3696
   138                           
   139                           ; #config settings
   140                           
   141                           	psect	cinit
   142   0013DA                     __pcinit:
   143                           	callstack 0
   144   0013DA                     start_initialization:
   145                           	callstack 0
   146   0013DA                     __initialization:
   147                           	callstack 0
   148                           
   149                           ; Initialize objects allocated to COMRAM (18 bytes)
   150                           ; load TBLPTR registers with __pidataCOMRAM
   151   0013DA  0E62               	movlw	low __pidataCOMRAM
   152   0013DC  6EF6               	movwf	tblptrl,c
   153   0013DE  0E14               	movlw	high __pidataCOMRAM
   154   0013E0  6EF7               	movwf	tblptrh,c
   155   0013E2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   156   0013E4  6EF8               	movwf	tblptru,c
   157   0013E6  EE00  F032         	lfsr	0,__pdataCOMRAM
   158   0013EA  EE10 F012          	lfsr	1,18
   159   0013EE                     copy_data0:
   160   0013EE  0009               	tblrd		*+
   161   0013F0  CFF5 FFEE          	movff	tablat,postinc0
   162   0013F4  50E5               	movf	postdec1,w,c
   163   0013F6  50E1               	movf	fsr1l,w,c
   164   0013F8  E1FA               	bnz	copy_data0
   165   0013FA                     end_of_initialization:
   166                           	callstack 0
   167   0013FA                     __end_of__initialization:
   168                           	callstack 0
   169   0013FA  0100               	movlb	0
   170   0013FC  EF3E  F009         	goto	_main	;jump to C main() function
   171                           
   172                           	psect	dataCOMRAM
   173   000032                     __pdataCOMRAM:
   174                           	callstack 0
   175   000032                     _squareDelay:
   176                           	callstack 0
   177   000032                     	ds	2
   178   000034                     _headbuttDelay:
   179                           	callstack 0
   180   000034                     	ds	2
   181   000036                     _turn180Delay:
   182                           	callstack 0
   183   000036                     	ds	2
   184   000038                     _turnRight135Delay:
   185                           	callstack 0
   186   000038                     	ds	2
   187   00003A                     _turnLeft135Delay:
   188                           	callstack 0
   189   00003A                     	ds	2
   190   00003C                     _turnRight90Delay:
   191                           	callstack 0
   192   00003C                     	ds	2
   193   00003E                     _turnLeft90Delay:
   194                           	callstack 0
   195   00003E                     	ds	2
   196   000040                     _turningGear:
   197                           	callstack 0
   198   000040                     	ds	1
   199   000041                     _topGearRight:
   200                           	callstack 0
   201   000041                     	ds	1
   202   000042                     _topGearLeft:
   203                           	callstack 0
   204   000042                     	ds	1
   205   000043                     _rampDelay:
   206                           	callstack 0
   207   000043                     	ds	1
   208                           
   209                           	psect	cstackCOMRAM
   210   000001                     __pcstackCOMRAM:
   211                           	callstack 0
   212   000001                     ??_lights_flashing:
   213   000001                     ?___wmul:
   214                           	callstack 0
   215   000001                     initDCmotorsPWM@PWMperiod:
   216                           	callstack 0
   217   000001                     ___wmul@multiplier:
   218                           	callstack 0
   219                           
   220                           ; 2 bytes @ 0x0
   221   000001                     	ds	2
   222   000003                     ___wmul@multiplicand:
   223                           	callstack 0
   224                           
   225                           ; 2 bytes @ 0x2
   226   000003                     	ds	2
   227   000005                     ___wmul@product:
   228                           	callstack 0
   229                           
   230                           ; 2 bytes @ 0x4
   231   000005                     	ds	2
   232   000007                     ?___lwdiv:
   233                           	callstack 0
   234   000007                     ___lwdiv@dividend:
   235                           	callstack 0
   236                           
   237                           ; 2 bytes @ 0x6
   238   000007                     	ds	2
   239   000009                     ___lwdiv@divisor:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x8
   243   000009                     	ds	2
   244   00000B                     ___lwdiv@quotient:
   245                           	callstack 0
   246                           
   247                           ; 2 bytes @ 0xA
   248   00000B                     	ds	2
   249   00000D                     ___lwdiv@counter:
   250                           	callstack 0
   251                           
   252                           ; 1 bytes @ 0xC
   253   00000D                     	ds	1
   254   00000E                     setMotorPWM@m:
   255                           	callstack 0
   256                           
   257                           ; 1 bytes @ 0xD
   258   00000E                     	ds	1
   259   00000F                     ??_setMotorPWM:
   260                           
   261                           ; 1 bytes @ 0xE
   262   00000F                     	ds	2
   263   000011                     setMotorPWM@posDuty:
   264                           	callstack 0
   265                           
   266                           ; 1 bytes @ 0x10
   267   000011                     	ds	1
   268   000012                     setMotorPWM@negDuty:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x11
   272   000012                     	ds	1
   273   000013                     stop@mL:
   274                           	callstack 0
   275   000013                     turnLeft@mL:
   276                           	callstack 0
   277   000013                     fullSpeedReverse@mL:
   278                           	callstack 0
   279                           
   280                           ; 1 bytes @ 0x12
   281   000013                     	ds	1
   282   000014                     stop@mR:
   283                           	callstack 0
   284   000014                     turnLeft@mR:
   285                           	callstack 0
   286   000014                     fullSpeedReverse@mR:
   287                           	callstack 0
   288                           
   289                           ; 1 bytes @ 0x13
   290   000014                     	ds	1
   291   000015                     ??_stop:
   292   000015                     ??_turnLeft:
   293   000015                     ??_fullSpeedReverse:
   294                           
   295                           ; 1 bytes @ 0x14
   296   000015                     	ds	1
   297   000016                     turnLeft@leftGear:
   298                           	callstack 0
   299   000016                     fullSpeedReverse@leftGear:
   300                           	callstack 0
   301                           
   302                           ; 1 bytes @ 0x15
   303   000016                     	ds	1
   304   000017                     turnLeft@rightGear:
   305                           	callstack 0
   306   000017                     fullSpeedReverse@rightGear:
   307                           	callstack 0
   308                           
   309                           ; 1 bytes @ 0x16
   310   000017                     	ds	1
   311   000018                     UTurn@mL:
   312                           	callstack 0
   313   000018                     headbuttReverse@mL:
   314                           	callstack 0
   315                           
   316                           ; 1 bytes @ 0x17
   317   000018                     	ds	1
   318   000019                     UTurn@mR:
   319                           	callstack 0
   320   000019                     headbuttReverse@mR:
   321                           	callstack 0
   322                           
   323                           ; 1 bytes @ 0x18
   324   000019                     	ds	1
   325   00001A                     ??_UTurn:
   326   00001A                     ??_headbuttReverse:
   327                           
   328                           ; 1 bytes @ 0x19
   329   00001A                     	ds	2
   330   00001C                     cardWhite@mL:
   331                           	callstack 0
   332                           
   333                           ; 1 bytes @ 0x1B
   334   00001C                     	ds	1
   335   00001D                     cardWhite@mR:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0x1C
   339   00001D                     	ds	1
   340   00001E                     ??_main:
   341                           
   342                           ; 1 bytes @ 0x1D
   343   00001E                     	ds	2
   344   000020                     main@motorL:
   345                           	callstack 0
   346                           
   347                           ; 9 bytes @ 0x1F
   348   000020                     	ds	9
   349   000029                     main@motorR:
   350                           	callstack 0
   351                           
   352                           ; 9 bytes @ 0x28
   353   000029                     	ds	9
   354                           
   355 ;;
   356 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   357 ;;
   358 ;; *************** function _main *****************
   359 ;; Defined at:
   360 ;;		line 23 in file "main.c"
   361 ;; Parameters:    Size  Location     Type
   362 ;;		None
   363 ;; Auto vars:     Size  Location     Type
   364 ;;  motorR          9   40[COMRAM] struct DC_motor
   365 ;;  motorL          9   31[COMRAM] struct DC_motor
   366 ;;  PWMcycle        2    0        unsigned int 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   377 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   378 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   379 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   380 ;;Total ram usage:       20 bytes
   381 ;; Hardware stack levels required when called: 5
   382 ;; This function calls:
   383 ;;		_buggy_lights_init
   384 ;;		_cardWhite
   385 ;;		_initDCmotorsPWM
   386 ;;		_lights_flashing
   387 ;; This function is called by:
   388 ;;		Startup code after reset
   389 ;; This function uses a non-reentrant model
   390 ;;
   391                           
   392                           	psect	text0
   393   00127C                     __ptext0:
   394                           	callstack 0
   395   00127C                     _main:
   396                           	callstack 26
   397   00127C                     
   398                           ;main.c: 24:     _delay((unsigned long)((500)*(64000000/4000.0)));
   399   00127C  0E29               	movlw	41
   400   00127E  6E1F               	movwf	(??_main+1)^0,c
   401   001280  0E96               	movlw	150
   402   001282  6E1E               	movwf	??_main^0,c
   403   001284  0E7F               	movlw	127
   404   001286                     u997:
   405   001286  2EE8               	decfsz	wreg,f,c
   406   001288  D7FE               	bra	u997
   407   00128A  2E1E               	decfsz	??_main^0,f,c
   408   00128C  D7FC               	bra	u997
   409   00128E  2E1F               	decfsz	(??_main+1)^0,f,c
   410   001290  D7FA               	bra	u997
   411   001292  0000               	nop	
   412   001294                     
   413                           ;main.c: 27:     initDCmotorsPWM(PWMcycle);
   414   001294  0E00               	movlw	0
   415   001296  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   416   001298  0E63               	movlw	99
   417   00129A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   418   00129C  ECAF  F008         	call	_initDCmotorsPWM	;wreg free
   419   0012A0                     
   420                           ;main.c: 29:     struct DC_motor motorL, motorR;;main.c: 31:     motorL.power = 0;
   421   0012A0  0E00               	movlw	0
   422   0012A2  6E20               	movwf	main@motorL^0,c
   423   0012A4                     
   424                           ;main.c: 32:     motorL.direction = 1;
   425   0012A4  0E01               	movlw	1
   426   0012A6  6E21               	movwf	(main@motorL+1)^0,c
   427   0012A8                     
   428                           ;main.c: 33:     motorL.brakemode = 1;
   429   0012A8  0E01               	movlw	1
   430   0012AA  6E22               	movwf	(main@motorL+2)^0,c
   431   0012AC                     
   432                           ;main.c: 34:     motorL.PWMperiod = PWMcycle;
   433   0012AC  0E00               	movlw	0
   434   0012AE  6E24               	movwf	(main@motorL+4)^0,c
   435   0012B0  0E63               	movlw	99
   436   0012B2  6E23               	movwf	(main@motorL+3)^0,c
   437   0012B4                     
   438                           ;main.c: 35:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   439   0012B4  0EAA               	movlw	170
   440   0012B6  6E25               	movwf	(main@motorL+5)^0,c
   441   0012B8  0E0F               	movlw	15
   442   0012BA  6E26               	movwf	(main@motorL+6)^0,c
   443   0012BC                     
   444                           ;main.c: 36:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   445   0012BC  0EA6               	movlw	166
   446   0012BE  6E27               	movwf	(main@motorL+7)^0,c
   447   0012C0  0E0F               	movlw	15
   448   0012C2  6E28               	movwf	(main@motorL+8)^0,c
   449   0012C4                     
   450                           ;main.c: 38:     motorR.power = 0;
   451   0012C4  0E00               	movlw	0
   452   0012C6  6E29               	movwf	main@motorR^0,c
   453   0012C8                     
   454                           ;main.c: 39:     motorR.direction = 1;
   455   0012C8  0E01               	movlw	1
   456   0012CA  6E2A               	movwf	(main@motorR+1)^0,c
   457   0012CC                     
   458                           ;main.c: 40:     motorR.brakemode = 1;
   459   0012CC  0E01               	movlw	1
   460   0012CE  6E2B               	movwf	(main@motorR+2)^0,c
   461   0012D0                     
   462                           ;main.c: 41:     motorR.PWMperiod = PWMcycle;
   463   0012D0  0E00               	movlw	0
   464   0012D2  6E2D               	movwf	(main@motorR+4)^0,c
   465   0012D4  0E63               	movlw	99
   466   0012D6  6E2C               	movwf	(main@motorR+3)^0,c
   467   0012D8                     
   468                           ;main.c: 42:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   469   0012D8  0E25               	movlw	37
   470   0012DA  6E2E               	movwf	(main@motorR+5)^0,c
   471   0012DC  0E0F               	movlw	15
   472   0012DE  6E2F               	movwf	(main@motorR+6)^0,c
   473   0012E0                     
   474                           ;main.c: 43:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   475   0012E0  0E21               	movlw	33
   476   0012E2  6E30               	movwf	(main@motorR+7)^0,c
   477   0012E4  0E0F               	movlw	15
   478   0012E6  6E31               	movwf	(main@motorR+8)^0,c
   479   0012E8                     
   480                           ;main.c: 45:     buggy_lights_init();
   481   0012E8  EC26  F00A         	call	_buggy_lights_init	;wreg free
   482   0012EC                     
   483                           ;main.c: 47:     cardWhite(&motorL, &motorR);
   484   0012EC  0E20               	movlw	low main@motorL
   485   0012EE  6E1C               	movwf	cardWhite@mL^0,c
   486   0012F0  0E29               	movlw	low main@motorR
   487   0012F2  6E1D               	movwf	cardWhite@mR^0,c
   488   0012F4  EC00  F00A         	call	_cardWhite	;wreg free
   489   0012F8                     l1814:
   490                           
   491                           ;main.c: 50:         lights_flashing();
   492   0012F8  EC62  F008         	call	_lights_flashing	;wreg free
   493   0012FC  EF7C  F009         	goto	l1814
   494   001300  EF00  F000         	goto	start
   495   001304                     __end_of_main:
   496                           	callstack 0
   497                           
   498 ;; *************** function _lights_flashing *****************
   499 ;; Defined at:
   500 ;;		line 21 in file "buggy_lights.c"
   501 ;; Parameters:    Size  Location     Type
   502 ;;		None
   503 ;; Auto vars:     Size  Location     Type
   504 ;;		None
   505 ;; Return value:  Size  Location     Type
   506 ;;                  1    wreg      void 
   507 ;; Registers used:
   508 ;;		wreg, status,2, status,0
   509 ;; Tracked objects:
   510 ;;		On entry : 0/0
   511 ;;		On exit  : 0/0
   512 ;;		Unchanged: 0/0
   513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   516 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   518 ;;Total ram usage:        2 bytes
   519 ;; Hardware stack levels used: 1
   520 ;; This function calls:
   521 ;;		Nothing
   522 ;; This function is called by:
   523 ;;		_main
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527                           	psect	text1
   528   0010C4                     __ptext1:
   529                           	callstack 0
   530   0010C4                     _lights_flashing:
   531                           	callstack 30
   532   0010C4                     
   533                           ;buggy_lights.c: 23:     LATDbits.LATD4 = !LATDbits.LATD4;
   534   0010C4  A87C               	btfss	124,4,c	;volatile
   535   0010C6  EF67  F008         	goto	u181
   536   0010CA  EF6B  F008         	goto	u180
   537   0010CE                     u181:
   538   0010CE  6A01               	clrf	??_lights_flashing^0,c
   539   0010D0  2A01               	incf	??_lights_flashing^0,f,c
   540   0010D2  EF6C  F008         	goto	u198
   541   0010D6                     u180:
   542   0010D6  6A01               	clrf	??_lights_flashing^0,c
   543   0010D8                     u198:
   544   0010D8  3A01               	swapf	??_lights_flashing^0,f,c
   545   0010DA  507C               	movf	124,w,c	;volatile
   546   0010DC  1801               	xorwf	??_lights_flashing^0,w,c
   547   0010DE  0BEF               	andlw	-17
   548   0010E0  1801               	xorwf	??_lights_flashing^0,w,c
   549   0010E2  6E7C               	movwf	124,c	;volatile
   550                           
   551                           ;buggy_lights.c: 24:     LATDbits.LATD3 = !LATDbits.LATD3;
   552   0010E4  A67C               	btfss	124,3,c	;volatile
   553   0010E6  EF77  F008         	goto	u201
   554   0010EA  EF7B  F008         	goto	u200
   555   0010EE                     u201:
   556   0010EE  6A01               	clrf	??_lights_flashing^0,c
   557   0010F0  2A01               	incf	??_lights_flashing^0,f,c
   558   0010F2  EF7C  F008         	goto	u218
   559   0010F6                     u200:
   560   0010F6  6A01               	clrf	??_lights_flashing^0,c
   561   0010F8                     u218:
   562   0010F8  4601               	rlncf	??_lights_flashing^0,f,c
   563   0010FA  4601               	rlncf	??_lights_flashing^0,f,c
   564   0010FC  4601               	rlncf	??_lights_flashing^0,f,c
   565   0010FE  507C               	movf	124,w,c	;volatile
   566   001100  1801               	xorwf	??_lights_flashing^0,w,c
   567   001102  0BF7               	andlw	-9
   568   001104  1801               	xorwf	??_lights_flashing^0,w,c
   569   001106  6E7C               	movwf	124,c	;volatile
   570   001108                     
   571                           ;buggy_lights.c: 25:     _delay((unsigned long)((500)*(64000000/4000.0)));
   572   001108  0E29               	movlw	41
   573   00110A  6E02               	movwf	(??_lights_flashing+1)^0,c
   574   00110C  0E96               	movlw	150
   575   00110E  6E01               	movwf	??_lights_flashing^0,c
   576   001110  0E7F               	movlw	127
   577   001112                     u1007:
   578   001112  2EE8               	decfsz	wreg,f,c
   579   001114  D7FE               	bra	u1007
   580   001116  2E01               	decfsz	??_lights_flashing^0,f,c
   581   001118  D7FC               	bra	u1007
   582   00111A  2E02               	decfsz	(??_lights_flashing+1)^0,f,c
   583   00111C  D7FA               	bra	u1007
   584   00111E  0000               	nop	
   585   001120                     
   586                           ;buggy_lights.c: 26:     LATFbits.LATF0 = !LATFbits.LATF0;
   587   001120  A07E               	btfss	126,0,c	;volatile
   588   001122  EF95  F008         	goto	u221
   589   001126  EF99  F008         	goto	u220
   590   00112A                     u221:
   591   00112A  6A01               	clrf	??_lights_flashing^0,c
   592   00112C  2A01               	incf	??_lights_flashing^0,f,c
   593   00112E  EF9A  F008         	goto	u238
   594   001132                     u220:
   595   001132  6A01               	clrf	??_lights_flashing^0,c
   596   001134                     u238:
   597   001134  507E               	movf	126,w,c	;volatile
   598   001136  1801               	xorwf	??_lights_flashing^0,w,c
   599   001138  0BFE               	andlw	-2
   600   00113A  1801               	xorwf	??_lights_flashing^0,w,c
   601   00113C  6E7E               	movwf	126,c	;volatile
   602   00113E                     
   603                           ;buggy_lights.c: 27:     LATHbits.LATH0 = !LATHbits.LATH0;
   604   00113E  A080               	btfss	128,0,c	;volatile
   605   001140  EFA4  F008         	goto	u241
   606   001144  EFA8  F008         	goto	u240
   607   001148                     u241:
   608   001148  6A01               	clrf	??_lights_flashing^0,c
   609   00114A  2A01               	incf	??_lights_flashing^0,f,c
   610   00114C  EFA9  F008         	goto	u258
   611   001150                     u240:
   612   001150  6A01               	clrf	??_lights_flashing^0,c
   613   001152                     u258:
   614   001152  5080               	movf	128,w,c	;volatile
   615   001154  1801               	xorwf	??_lights_flashing^0,w,c
   616   001156  0BFE               	andlw	-2
   617   001158  1801               	xorwf	??_lights_flashing^0,w,c
   618   00115A  6E80               	movwf	128,c	;volatile
   619   00115C  0012               	return		;funcret
   620   00115E                     __end_of_lights_flashing:
   621                           	callstack 0
   622                           
   623 ;; *************** function _initDCmotorsPWM *****************
   624 ;; Defined at:
   625 ;;		line 5 in file "dc_motor.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;		None
   630 ;; Return value:  Size  Location     Type
   631 ;;                  1    wreg      void 
   632 ;; Registers used:
   633 ;;		wreg, status,2
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   639 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   642 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   643 ;;Total ram usage:        2 bytes
   644 ;; Hardware stack levels used: 1
   645 ;; This function calls:
   646 ;;		Nothing
   647 ;; This function is called by:
   648 ;;		_main
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652                           	psect	text2
   653   00115E                     __ptext2:
   654                           	callstack 0
   655   00115E                     _initDCmotorsPWM:
   656                           	callstack 30
   657   00115E                     
   658                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   659   00115E  9485               	bcf	133,2,c	;volatile
   660                           
   661                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   662   001160  9885               	bcf	133,4,c	;volatile
   663                           
   664                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   665   001162  9E83               	bcf	131,7,c	;volatile
   666                           
   667                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   668   001164  9C87               	bcf	135,6,c	;volatile
   669                           
   670                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   671   001166  947D               	bcf	125,2,c	;volatile
   672                           
   673                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   674   001168  987D               	bcf	125,4,c	;volatile
   675                           
   676                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   677   00116A  9E7B               	bcf	123,7,c	;volatile
   678                           
   679                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   680   00116C  9C7F               	bcf	127,6,c	;volatile
   681   00116E                     
   682                           ;dc_motor.c: 18:     RE2PPS=0x05;
   683   00116E  0E05               	movlw	5
   684   001170  010E               	movlb	14	; () banked
   685   001172  6F74               	movwf	116,b	;volatile
   686                           
   687                           ;dc_motor.c: 19:     RE4PPS=0x06;
   688   001174  0E06               	movlw	6
   689   001176  6F76               	movwf	118,b	;volatile
   690                           
   691                           ;dc_motor.c: 20:     RC7PPS=0x07;
   692   001178  0E07               	movlw	7
   693   00117A  6F69               	movwf	105,b	;volatile
   694                           
   695                           ;dc_motor.c: 21:     RG6PPS=0x08;
   696   00117C  0E08               	movlw	8
   697   00117E  6F88               	movwf	136,b	;volatile
   698                           
   699                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   700   001180  50BD               	movf	189,w,c	;volatile
   701   001182  0B8F               	andlw	-113
   702   001184  0940               	iorlw	64
   703   001186  6EBD               	movwf	189,c	;volatile
   704                           
   705                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   706   001188  0EE0               	movlw	-32
   707   00118A  16BE               	andwf	190,f,c	;volatile
   708                           
   709                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   710   00118C  50BF               	movf	191,w,c	;volatile
   711   00118E  0BF0               	andlw	-16
   712   001190  0901               	iorlw	1
   713   001192  6EBF               	movwf	191,c	;volatile
   714   001194                     
   715                           ; BSR set to: 14
   716                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   717   001194  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   718   001198                     
   719                           ; BSR set to: 14
   720                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   721   001198  8EBD               	bsf	189,7,c	;volatile
   722                           
   723                           ;dc_motor.c: 35:     CCPR1H=0;
   724   00119A  0E00               	movlw	0
   725   00119C  6EAA               	movwf	170,c	;volatile
   726                           
   727                           ;dc_motor.c: 36:     CCPR2H=0;
   728   00119E  0E00               	movlw	0
   729   0011A0  6EA6               	movwf	166,c	;volatile
   730                           
   731                           ;dc_motor.c: 37:     CCPR3H=0;
   732   0011A2  0E00               	movlw	0
   733   0011A4  010F               	movlb	15	; () banked
   734   0011A6  6F25               	movwf	37,b	;volatile
   735                           
   736                           ;dc_motor.c: 38:     CCPR4H=0;
   737   0011A8  0E00               	movlw	0
   738   0011AA  6F21               	movwf	33,b	;volatile
   739                           
   740                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   741   0011AC  0EFC               	movlw	-4
   742   0011AE  16AD               	andwf	173,f,c	;volatile
   743                           
   744                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   745   0011B0  0EF3               	movlw	-13
   746   0011B2  16AD               	andwf	173,f,c	;volatile
   747                           
   748                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   749   0011B4  0ECF               	movlw	-49
   750   0011B6  16AD               	andwf	173,f,c	;volatile
   751                           
   752                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   753   0011B8  0E3F               	movlw	-193
   754   0011BA  16AD               	andwf	173,f,c	;volatile
   755   0011BC                     
   756                           ; BSR set to: 15
   757                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   758   0011BC  88AB               	bsf	171,4,c	;volatile
   759                           
   760                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   761   0011BE  50AB               	movf	171,w,c	;volatile
   762   0011C0  0BF0               	andlw	-16
   763   0011C2  090C               	iorlw	12
   764   0011C4  6EAB               	movwf	171,c	;volatile
   765   0011C6                     
   766                           ; BSR set to: 15
   767                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   768   0011C6  8EAB               	bsf	171,7,c	;volatile
   769   0011C8                     
   770                           ; BSR set to: 15
   771                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   772   0011C8  88A7               	bsf	167,4,c	;volatile
   773                           
   774                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   775   0011CA  50A7               	movf	167,w,c	;volatile
   776   0011CC  0BF0               	andlw	-16
   777   0011CE  090C               	iorlw	12
   778   0011D0  6EA7               	movwf	167,c	;volatile
   779   0011D2                     
   780                           ; BSR set to: 15
   781                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   782   0011D2  8EA7               	bsf	167,7,c	;volatile
   783   0011D4                     
   784                           ; BSR set to: 15
   785                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   786   0011D4  8926               	bsf	38,4,b	;volatile
   787                           
   788                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   789   0011D6  5126               	movf	38,w,b	;volatile
   790   0011D8  0BF0               	andlw	-16
   791   0011DA  090C               	iorlw	12
   792   0011DC  6F26               	movwf	38,b	;volatile
   793   0011DE                     
   794                           ; BSR set to: 15
   795                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   796   0011DE  8F26               	bsf	38,7,b	;volatile
   797   0011E0                     
   798                           ; BSR set to: 15
   799                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   800   0011E0  8922               	bsf	34,4,b	;volatile
   801                           
   802                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   803   0011E2  5122               	movf	34,w,b	;volatile
   804   0011E4  0BF0               	andlw	-16
   805   0011E6  090C               	iorlw	12
   806   0011E8  6F22               	movwf	34,b	;volatile
   807   0011EA                     
   808                           ; BSR set to: 15
   809                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   810   0011EA  8F22               	bsf	34,7,b	;volatile
   811   0011EC                     
   812                           ; BSR set to: 15
   813   0011EC  0012               	return		;funcret
   814   0011EE                     __end_of_initDCmotorsPWM:
   815                           	callstack 0
   816                           
   817 ;; *************** function _cardWhite *****************
   818 ;; Defined at:
   819 ;;		line 18 in file "manoeuvres.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;  mL              1   27[COMRAM] PTR struct DC_motor
   822 ;;		 -> main@motorL(9), 
   823 ;;  mR              1   28[COMRAM] PTR struct DC_motor
   824 ;;		 -> main@motorR(9), 
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   840 ;;Total ram usage:        2 bytes
   841 ;; Hardware stack levels used: 1
   842 ;; Hardware stack levels required when called: 4
   843 ;; This function calls:
   844 ;;		_UTurn
   845 ;;		_headbuttReverse
   846 ;; This function is called by:
   847 ;;		_main
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text3
   852   001400                     __ptext3:
   853                           	callstack 0
   854   001400                     _cardWhite:
   855                           	callstack 26
   856   001400                     
   857                           ;manoeuvres.c: 18: void cardWhite(DC_motor *mL, DC_motor *mR);manoeuvres.c: 19: {;manoeu
      +                          vres.c: 20:     headbuttReverse(mL, mR);
   858   001400  C01C  F018         	movff	cardWhite@mL,headbuttReverse@mL
   859   001404  C01D  F019         	movff	cardWhite@mR,headbuttReverse@mR
   860   001408  ECD5  F009         	call	_headbuttReverse	;wreg free
   861                           
   862                           ;manoeuvres.c: 21:     UTurn(mL, mR);
   863   00140C  C01C  F018         	movff	cardWhite@mL,UTurn@mL
   864   001410  C01D  F019         	movff	cardWhite@mR,UTurn@mR
   865   001414  ECBC  F009         	call	_UTurn	;wreg free
   866                           
   867                           ;manoeuvres.c: 22:     headbuttReverse(mL, mR);
   868   001418  C01C  F018         	movff	cardWhite@mL,headbuttReverse@mL
   869   00141C  C01D  F019         	movff	cardWhite@mR,headbuttReverse@mR
   870   001420  ECD5  F009         	call	_headbuttReverse	;wreg free
   871   001424  0012               	return		;funcret
   872   001426                     __end_of_cardWhite:
   873                           	callstack 0
   874                           
   875 ;; *************** function _headbuttReverse *****************
   876 ;; Defined at:
   877 ;;		line 199 in file "dc_motor.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;  mL              1   23[COMRAM] PTR struct DC_motor
   880 ;;		 -> main@motorL(9), 
   881 ;;  mR              1   24[COMRAM] PTR struct DC_motor
   882 ;;		 -> main@motorR(9), 
   883 ;; Auto vars:     Size  Location     Type
   884 ;;		None
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   894 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   896 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   897 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   898 ;;Total ram usage:        4 bytes
   899 ;; Hardware stack levels used: 1
   900 ;; Hardware stack levels required when called: 3
   901 ;; This function calls:
   902 ;;		_fullSpeedReverse
   903 ;;		_stop
   904 ;; This function is called by:
   905 ;;		_cardWhite
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           	psect	text4
   910   0013AA                     __ptext4:
   911                           	callstack 0
   912   0013AA                     _headbuttReverse:
   913                           	callstack 26
   914   0013AA                     
   915                           ;dc_motor.c: 199: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 200: {;dc
      +                          _motor.c: 201:     fullSpeedReverse(mL, mR);
   916   0013AA  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
   917   0013AE  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
   918   0013B2  EC07  F008         	call	_fullSpeedReverse	;wreg free
   919   0013B6                     
   920                           ;dc_motor.c: 202:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
   921   0013B6  0E06               	movlw	6
   922   0013B8  6E1B               	movwf	(??_headbuttReverse+1)^0,c
   923   0013BA  0EAF               	movlw	175
   924   0013BC  6E1A               	movwf	??_headbuttReverse^0,c
   925   0013BE  0E86               	movlw	134
   926   0013C0                     u1017:
   927   0013C0  2EE8               	decfsz	wreg,f,c
   928   0013C2  D7FE               	bra	u1017
   929   0013C4  2E1A               	decfsz	??_headbuttReverse^0,f,c
   930   0013C6  D7FC               	bra	u1017
   931   0013C8  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
   932   0013CA  D7FA               	bra	u1017
   933   0013CC                     
   934                           ;dc_motor.c: 203:     stop(mL, mR);
   935   0013CC  C018  F013         	movff	headbuttReverse@mL,stop@mL
   936   0013D0  C019  F014         	movff	headbuttReverse@mR,stop@mR
   937   0013D4  ECF7  F008         	call	_stop	;wreg free
   938   0013D8  0012               	return		;funcret
   939   0013DA                     __end_of_headbuttReverse:
   940                           	callstack 0
   941                           
   942 ;; *************** function _fullSpeedReverse *****************
   943 ;; Defined at:
   944 ;;		line 149 in file "dc_motor.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  mL              1   18[COMRAM] PTR struct DC_motor
   947 ;;		 -> main@motorL(9), 
   948 ;;  mR              1   19[COMRAM] PTR struct DC_motor
   949 ;;		 -> main@motorR(9), 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  rightGear       1   22[COMRAM] unsigned char 
   952 ;;  leftGear        1   21[COMRAM] unsigned char 
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   962 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   963 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   965 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   966 ;;Total ram usage:        5 bytes
   967 ;; Hardware stack levels used: 1
   968 ;; Hardware stack levels required when called: 2
   969 ;; This function calls:
   970 ;;		_setMotorPWM
   971 ;; This function is called by:
   972 ;;		_headbuttReverse
   973 ;;		_squareReverse
   974 ;; This function uses a non-reentrant model
   975 ;;
   976                           
   977                           	psect	text5
   978   00100E                     __ptext5:
   979                           	callstack 0
   980   00100E                     _fullSpeedReverse:
   981                           	callstack 26
   982   00100E  0E1E               	movlw	30
   983   001010  6E16               	movwf	fullSpeedReverse@leftGear^0,c
   984   001012  0E20               	movlw	32
   985   001014  6E17               	movwf	fullSpeedReverse@rightGear^0,c
   986   001016                     
   987                           ;dc_motor.c: 153:     (mL -> direction) = 0;
   988   001016  5013               	movf	fullSpeedReverse@mL^0,w,c
   989   001018  6ED9               	movwf	fsr2l,c
   990   00101A  6ADA               	clrf	fsr2h,c
   991   00101C  0E01               	movlw	1
   992   00101E  26D9               	addwf	fsr2l,f,c
   993   001020  6ADF               	clrf	indf2,c
   994   001022                     
   995                           ;dc_motor.c: 154:     (mR -> direction) = 0;
   996   001022  5014               	movf	fullSpeedReverse@mR^0,w,c
   997   001024  6ED9               	movwf	fsr2l,c
   998   001026  6ADA               	clrf	fsr2h,c
   999   001028  0E01               	movlw	1
  1000   00102A  26D9               	addwf	fsr2l,f,c
  1001   00102C  6ADF               	clrf	indf2,c
  1002                           
  1003                           ;dc_motor.c: 155:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1004   00102E  EF49  F008         	goto	l1664
  1005   001032                     l1652:
  1006                           
  1007                           ;dc_motor.c: 156:         if (mL->power<leftGear) {mL->power++;}
  1008   001032  5013               	movf	fullSpeedReverse@mL^0,w,c
  1009   001034  6ED9               	movwf	fsr2l,c
  1010   001036  6ADA               	clrf	fsr2h,c
  1011   001038  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  1012   00103A  5CDE               	subwf	postinc2,w,c
  1013   00103C  B0D8               	btfsc	status,0,c
  1014   00103E  EF23  F008         	goto	u871
  1015   001042  EF25  F008         	goto	u870
  1016   001046                     u871:
  1017   001046  EF29  F008         	goto	l162
  1018   00104A                     u870:
  1019   00104A  5013               	movf	fullSpeedReverse@mL^0,w,c
  1020   00104C  6ED9               	movwf	fsr2l,c
  1021   00104E  6ADA               	clrf	fsr2h,c
  1022   001050  2ADF               	incf	indf2,f,c
  1023   001052                     l162:
  1024                           
  1025                           ;dc_motor.c: 157:         if (mR->power<rightGear) {mR->power++;}
  1026   001052  5014               	movf	fullSpeedReverse@mR^0,w,c
  1027   001054  6ED9               	movwf	fsr2l,c
  1028   001056  6ADA               	clrf	fsr2h,c
  1029   001058  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  1030   00105A  5CDE               	subwf	postinc2,w,c
  1031   00105C  B0D8               	btfsc	status,0,c
  1032   00105E  EF33  F008         	goto	u881
  1033   001062  EF35  F008         	goto	u880
  1034   001066                     u881:
  1035   001066  EF39  F008         	goto	l1658
  1036   00106A                     u880:
  1037   00106A  5014               	movf	fullSpeedReverse@mR^0,w,c
  1038   00106C  6ED9               	movwf	fsr2l,c
  1039   00106E  6ADA               	clrf	fsr2h,c
  1040   001070  2ADF               	incf	indf2,f,c
  1041   001072                     l1658:
  1042                           
  1043                           ;dc_motor.c: 158:         setMotorPWM(mL);
  1044   001072  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  1045   001076  EC01  F007         	call	_setMotorPWM	;wreg free
  1046   00107A                     
  1047                           ;dc_motor.c: 159:         setMotorPWM(mR);
  1048   00107A  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  1049   00107E  EC01  F007         	call	_setMotorPWM	;wreg free
  1050   001082                     
  1051                           ;dc_motor.c: 160:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1052   001082  0EA7               	movlw	167
  1053   001084  6E15               	movwf	??_fullSpeedReverse^0,c
  1054   001086  0E3A               	movlw	58
  1055   001088                     u1027:
  1056   001088  2EE8               	decfsz	wreg,f,c
  1057   00108A  D7FE               	bra	u1027
  1058   00108C  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  1059   00108E  D7FC               	bra	u1027
  1060   001090  D000               	nop2	
  1061   001092                     l1664:
  1062                           
  1063                           ;dc_motor.c: 155:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1064   001092  5013               	movf	fullSpeedReverse@mL^0,w,c
  1065   001094  6ED9               	movwf	fsr2l,c
  1066   001096  6ADA               	clrf	fsr2h,c
  1067   001098  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  1068   00109A  5CDE               	subwf	postinc2,w,c
  1069   00109C  A0D8               	btfss	status,0,c
  1070   00109E  EF53  F008         	goto	u891
  1071   0010A2  EF55  F008         	goto	u890
  1072   0010A6                     u891:
  1073   0010A6  EF19  F008         	goto	l1652
  1074   0010AA                     u890:
  1075   0010AA  5014               	movf	fullSpeedReverse@mR^0,w,c
  1076   0010AC  6ED9               	movwf	fsr2l,c
  1077   0010AE  6ADA               	clrf	fsr2h,c
  1078   0010B0  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  1079   0010B2  5CDE               	subwf	postinc2,w,c
  1080   0010B4  A0D8               	btfss	status,0,c
  1081   0010B6  EF5F  F008         	goto	u901
  1082   0010BA  EF61  F008         	goto	u900
  1083   0010BE                     u901:
  1084   0010BE  EF19  F008         	goto	l1652
  1085   0010C2                     u900:
  1086   0010C2  0012               	return		;funcret
  1087   0010C4                     __end_of_fullSpeedReverse:
  1088                           	callstack 0
  1089                           
  1090 ;; *************** function _UTurn *****************
  1091 ;; Defined at:
  1092 ;;		line 192 in file "dc_motor.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  1095 ;;		 -> main@motorL(9), 
  1096 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  1097 ;;		 -> main@motorR(9), 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;		None
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      void 
  1102 ;; Registers used:
  1103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1112 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1113 ;;Total ram usage:        4 bytes
  1114 ;; Hardware stack levels used: 1
  1115 ;; Hardware stack levels required when called: 3
  1116 ;; This function calls:
  1117 ;;		_stop
  1118 ;;		_turnLeft
  1119 ;; This function is called by:
  1120 ;;		_cardWhite
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           	psect	text6
  1125   001378                     __ptext6:
  1126                           	callstack 0
  1127   001378                     _UTurn:
  1128                           	callstack 26
  1129   001378                     
  1130                           ;dc_motor.c: 192: void UTurn(DC_motor *mL, DC_motor *mR);dc_motor.c: 193: {;dc_motor.c: 
      +                          194:     turnLeft(mL, mR);
  1131   001378  C018  F013         	movff	UTurn@mL,turnLeft@mL
  1132   00137C  C019  F014         	movff	UTurn@mR,turnLeft@mR
  1133   001380  ECAB  F007         	call	_turnLeft	;wreg free
  1134   001384                     
  1135                           ;dc_motor.c: 195:     _delay((unsigned long)((turn180Delay)*(64000000/4000.0)));
  1136   001384  0E2A               	movlw	42
  1137   001386  6E1B               	movwf	(??_UTurn+1)^0,c
  1138   001388  0E66               	movlw	102
  1139   00138A  6E1A               	movwf	??_UTurn^0,c
  1140   00138C  0E49               	movlw	73
  1141   00138E                     u1037:
  1142   00138E  2EE8               	decfsz	wreg,f,c
  1143   001390  D7FE               	bra	u1037
  1144   001392  2E1A               	decfsz	??_UTurn^0,f,c
  1145   001394  D7FC               	bra	u1037
  1146   001396  2E1B               	decfsz	(??_UTurn+1)^0,f,c
  1147   001398  D7FA               	bra	u1037
  1148   00139A  0000               	nop	
  1149   00139C                     
  1150                           ;dc_motor.c: 196:     stop(mL, mR);
  1151   00139C  C018  F013         	movff	UTurn@mL,stop@mL
  1152   0013A0  C019  F014         	movff	UTurn@mR,stop@mR
  1153   0013A4  ECF7  F008         	call	_stop	;wreg free
  1154   0013A8  0012               	return		;funcret
  1155   0013AA                     __end_of_UTurn:
  1156                           	callstack 0
  1157                           
  1158 ;; *************** function _turnLeft *****************
  1159 ;; Defined at:
  1160 ;;		line 102 in file "dc_motor.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1163 ;;		 -> main@motorL(9), 
  1164 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1165 ;;		 -> main@motorR(9), 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  rightGear       1   22[COMRAM] unsigned char 
  1168 ;;  leftGear        1   21[COMRAM] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1179 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1182 ;;Total ram usage:        5 bytes
  1183 ;; Hardware stack levels used: 1
  1184 ;; Hardware stack levels required when called: 2
  1185 ;; This function calls:
  1186 ;;		_setMotorPWM
  1187 ;; This function is called by:
  1188 ;;		_UTurn
  1189 ;;		_turnLeft90
  1190 ;;		_turnLeft135
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text7
  1195   000F56                     __ptext7:
  1196                           	callstack 0
  1197   000F56                     _turnLeft:
  1198                           	callstack 26
  1199   000F56  0E2A               	movlw	42
  1200   000F58  6E16               	movwf	turnLeft@leftGear^0,c
  1201   000F5A  0E2A               	movlw	42
  1202   000F5C  6E17               	movwf	turnLeft@rightGear^0,c
  1203   000F5E                     
  1204                           ;dc_motor.c: 106:     (mL->direction) = 0;
  1205   000F5E  5013               	movf	turnLeft@mL^0,w,c
  1206   000F60  6ED9               	movwf	fsr2l,c
  1207   000F62  6ADA               	clrf	fsr2h,c
  1208   000F64  0E01               	movlw	1
  1209   000F66  26D9               	addwf	fsr2l,f,c
  1210   000F68  6ADF               	clrf	indf2,c
  1211   000F6A                     
  1212                           ;dc_motor.c: 107:     (mR->direction) = 1;
  1213   000F6A  5014               	movf	turnLeft@mR^0,w,c
  1214   000F6C  6ED9               	movwf	fsr2l,c
  1215   000F6E  6ADA               	clrf	fsr2h,c
  1216   000F70  0E01               	movlw	1
  1217   000F72  26D9               	addwf	fsr2l,f,c
  1218   000F74  0E01               	movlw	1
  1219   000F76  6EDF               	movwf	indf2,c
  1220                           
  1221                           ;dc_motor.c: 108:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1222   000F78  EFEE  F007         	goto	l1642
  1223   000F7C                     l1630:
  1224                           
  1225                           ;dc_motor.c: 109:         if (mL->power<leftGear) {mL->power++;}
  1226   000F7C  5013               	movf	turnLeft@mL^0,w,c
  1227   000F7E  6ED9               	movwf	fsr2l,c
  1228   000F80  6ADA               	clrf	fsr2h,c
  1229   000F82  5016               	movf	turnLeft@leftGear^0,w,c
  1230   000F84  5CDE               	subwf	postinc2,w,c
  1231   000F86  B0D8               	btfsc	status,0,c
  1232   000F88  EFC8  F007         	goto	u831
  1233   000F8C  EFCA  F007         	goto	u830
  1234   000F90                     u831:
  1235   000F90  EFCE  F007         	goto	l138
  1236   000F94                     u830:
  1237   000F94  5013               	movf	turnLeft@mL^0,w,c
  1238   000F96  6ED9               	movwf	fsr2l,c
  1239   000F98  6ADA               	clrf	fsr2h,c
  1240   000F9A  2ADF               	incf	indf2,f,c
  1241   000F9C                     l138:
  1242                           
  1243                           ;dc_motor.c: 110:         if (mR->power<rightGear) {mR->power++;}
  1244   000F9C  5014               	movf	turnLeft@mR^0,w,c
  1245   000F9E  6ED9               	movwf	fsr2l,c
  1246   000FA0  6ADA               	clrf	fsr2h,c
  1247   000FA2  5017               	movf	turnLeft@rightGear^0,w,c
  1248   000FA4  5CDE               	subwf	postinc2,w,c
  1249   000FA6  B0D8               	btfsc	status,0,c
  1250   000FA8  EFD8  F007         	goto	u841
  1251   000FAC  EFDA  F007         	goto	u840
  1252   000FB0                     u841:
  1253   000FB0  EFDE  F007         	goto	l1636
  1254   000FB4                     u840:
  1255   000FB4  5014               	movf	turnLeft@mR^0,w,c
  1256   000FB6  6ED9               	movwf	fsr2l,c
  1257   000FB8  6ADA               	clrf	fsr2h,c
  1258   000FBA  2ADF               	incf	indf2,f,c
  1259   000FBC                     l1636:
  1260                           
  1261                           ;dc_motor.c: 111:         setMotorPWM(mL);
  1262   000FBC  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  1263   000FC0  EC01  F007         	call	_setMotorPWM	;wreg free
  1264   000FC4                     
  1265                           ;dc_motor.c: 112:         setMotorPWM(mR);
  1266   000FC4  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  1267   000FC8  EC01  F007         	call	_setMotorPWM	;wreg free
  1268   000FCC                     
  1269                           ;dc_motor.c: 113:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1270   000FCC  0EA7               	movlw	167
  1271   000FCE  6E15               	movwf	??_turnLeft^0,c
  1272   000FD0  0E3A               	movlw	58
  1273   000FD2                     u1047:
  1274   000FD2  2EE8               	decfsz	wreg,f,c
  1275   000FD4  D7FE               	bra	u1047
  1276   000FD6  2E15               	decfsz	??_turnLeft^0,f,c
  1277   000FD8  D7FC               	bra	u1047
  1278   000FDA  D000               	nop2	
  1279   000FDC                     l1642:
  1280                           
  1281                           ;dc_motor.c: 108:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1282   000FDC  5013               	movf	turnLeft@mL^0,w,c
  1283   000FDE  6ED9               	movwf	fsr2l,c
  1284   000FE0  6ADA               	clrf	fsr2h,c
  1285   000FE2  5016               	movf	turnLeft@leftGear^0,w,c
  1286   000FE4  5CDE               	subwf	postinc2,w,c
  1287   000FE6  A0D8               	btfss	status,0,c
  1288   000FE8  EFF8  F007         	goto	u851
  1289   000FEC  EFFA  F007         	goto	u850
  1290   000FF0                     u851:
  1291   000FF0  EFBE  F007         	goto	l1630
  1292   000FF4                     u850:
  1293   000FF4  5014               	movf	turnLeft@mR^0,w,c
  1294   000FF6  6ED9               	movwf	fsr2l,c
  1295   000FF8  6ADA               	clrf	fsr2h,c
  1296   000FFA  5017               	movf	turnLeft@rightGear^0,w,c
  1297   000FFC  5CDE               	subwf	postinc2,w,c
  1298   000FFE  A0D8               	btfss	status,0,c
  1299   001000  EF04  F008         	goto	u861
  1300   001004  EF06  F008         	goto	u860
  1301   001008                     u861:
  1302   001008  EFBE  F007         	goto	l1630
  1303   00100C                     u860:
  1304   00100C  0012               	return		;funcret
  1305   00100E                     __end_of_turnLeft:
  1306                           	callstack 0
  1307                           
  1308 ;; *************** function _stop *****************
  1309 ;; Defined at:
  1310 ;;		line 88 in file "dc_motor.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1313 ;;		 -> main@motorL(9), 
  1314 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1315 ;;		 -> main@motorR(9), 
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;		None
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1330 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1331 ;;Total ram usage:        3 bytes
  1332 ;; Hardware stack levels used: 1
  1333 ;; Hardware stack levels required when called: 2
  1334 ;; This function calls:
  1335 ;;		_setMotorPWM
  1336 ;; This function is called by:
  1337 ;;		_UTurn
  1338 ;;		_headbuttReverse
  1339 ;;		_turnLeft90
  1340 ;;		_turnRight90
  1341 ;;		_turnLeft135
  1342 ;;		_turnRight135
  1343 ;;		_squareReverse
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347                           	psect	text8
  1348   0011EE                     __ptext8:
  1349                           	callstack 0
  1350   0011EE                     _stop:
  1351                           	callstack 26
  1352   0011EE                     
  1353                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 92:
      +                               while ((mL->power>0) || (mR->power>0)){
  1354   0011EE  EF27  F009         	goto	l1620
  1355   0011F2                     l1606:
  1356                           
  1357                           ;dc_motor.c: 93:         if (mL->power>0) {mL->power--;}
  1358   0011F2  5013               	movf	stop@mL^0,w,c
  1359   0011F4  6ED9               	movwf	fsr2l,c
  1360   0011F6  6ADA               	clrf	fsr2h,c
  1361   0011F8  50DF               	movf	indf2,w,c
  1362   0011FA  B4D8               	btfsc	status,2,c
  1363   0011FC  EF02  F009         	goto	u791
  1364   001200  EF04  F009         	goto	u790
  1365   001204                     u791:
  1366   001204  EF08  F009         	goto	l1610
  1367   001208                     u790:
  1368   001208  5013               	movf	stop@mL^0,w,c
  1369   00120A  6ED9               	movwf	fsr2l,c
  1370   00120C  6ADA               	clrf	fsr2h,c
  1371   00120E  06DF               	decf	indf2,f,c
  1372   001210                     l1610:
  1373                           
  1374                           ;dc_motor.c: 94:         if (mR->power>0) {mR->power--;}
  1375   001210  5014               	movf	stop@mR^0,w,c
  1376   001212  6ED9               	movwf	fsr2l,c
  1377   001214  6ADA               	clrf	fsr2h,c
  1378   001216  50DF               	movf	indf2,w,c
  1379   001218  B4D8               	btfsc	status,2,c
  1380   00121A  EF11  F009         	goto	u801
  1381   00121E  EF13  F009         	goto	u800
  1382   001222                     u801:
  1383   001222  EF17  F009         	goto	l1614
  1384   001226                     u800:
  1385   001226  5014               	movf	stop@mR^0,w,c
  1386   001228  6ED9               	movwf	fsr2l,c
  1387   00122A  6ADA               	clrf	fsr2h,c
  1388   00122C  06DF               	decf	indf2,f,c
  1389   00122E                     l1614:
  1390                           
  1391                           ;dc_motor.c: 95:         setMotorPWM(mL);
  1392   00122E  C013  F00E         	movff	stop@mL,setMotorPWM@m
  1393   001232  EC01  F007         	call	_setMotorPWM	;wreg free
  1394   001236                     
  1395                           ;dc_motor.c: 96:         setMotorPWM(mR);
  1396   001236  C014  F00E         	movff	stop@mR,setMotorPWM@m
  1397   00123A  EC01  F007         	call	_setMotorPWM	;wreg free
  1398   00123E                     
  1399                           ;dc_motor.c: 97:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1400   00123E  0EA7               	movlw	167
  1401   001240  6E15               	movwf	??_stop^0,c
  1402   001242  0E3A               	movlw	58
  1403   001244                     u1057:
  1404   001244  2EE8               	decfsz	wreg,f,c
  1405   001246  D7FE               	bra	u1057
  1406   001248  2E15               	decfsz	??_stop^0,f,c
  1407   00124A  D7FC               	bra	u1057
  1408   00124C  D000               	nop2	
  1409   00124E                     l1620:
  1410                           
  1411                           ;dc_motor.c: 92:     while ((mL->power>0) || (mR->power>0)){
  1412   00124E  5013               	movf	stop@mL^0,w,c
  1413   001250  6ED9               	movwf	fsr2l,c
  1414   001252  6ADA               	clrf	fsr2h,c
  1415   001254  50DF               	movf	indf2,w,c
  1416   001256  A4D8               	btfss	status,2,c
  1417   001258  EF30  F009         	goto	u811
  1418   00125C  EF32  F009         	goto	u810
  1419   001260                     u811:
  1420   001260  EFF9  F008         	goto	l1606
  1421   001264                     u810:
  1422   001264  5014               	movf	stop@mR^0,w,c
  1423   001266  6ED9               	movwf	fsr2l,c
  1424   001268  6ADA               	clrf	fsr2h,c
  1425   00126A  50DF               	movf	indf2,w,c
  1426   00126C  A4D8               	btfss	status,2,c
  1427   00126E  EF3B  F009         	goto	u821
  1428   001272  EF3D  F009         	goto	u820
  1429   001276                     u821:
  1430   001276  EFF9  F008         	goto	l1606
  1431   00127A                     u820:
  1432   00127A  0012               	return		;funcret
  1433   00127C                     __end_of_stop:
  1434                           	callstack 0
  1435                           
  1436 ;; *************** function _setMotorPWM *****************
  1437 ;; Defined at:
  1438 ;;		line 65 in file "dc_motor.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1441 ;;		 -> main@motorR(9), main@motorL(9), 
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;  negDuty         1   17[COMRAM] unsigned char 
  1444 ;;  posDuty         1   16[COMRAM] unsigned char 
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  1    wreg      void 
  1447 ;; Registers used:
  1448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1454 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1455 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1456 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1457 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1458 ;;Total ram usage:        5 bytes
  1459 ;; Hardware stack levels used: 1
  1460 ;; Hardware stack levels required when called: 1
  1461 ;; This function calls:
  1462 ;;		___lwdiv
  1463 ;;		___wmul
  1464 ;; This function is called by:
  1465 ;;		_stop
  1466 ;;		_turnLeft
  1467 ;;		_fullSpeedReverse
  1468 ;;		_turnRight
  1469 ;;		_fullSpeedAhead
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text9
  1474   000E02                     __ptext9:
  1475                           	callstack 0
  1476   000E02                     _setMotorPWM:
  1477                           	callstack 26
  1478   000E02                     
  1479                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  1480   000E02  500E               	movf	setMotorPWM@m^0,w,c
  1481   000E04  6ED9               	movwf	fsr2l,c
  1482   000E06  6ADA               	clrf	fsr2h,c
  1483   000E08  0E02               	movlw	2
  1484   000E0A  26D9               	addwf	fsr2l,f,c
  1485   000E0C  50DF               	movf	indf2,w,c
  1486   000E0E  B4D8               	btfsc	status,2,c
  1487   000E10  EF0C  F007         	goto	u771
  1488   000E14  EF0E  F007         	goto	u770
  1489   000E18                     u771:
  1490   000E18  EF3E  F007         	goto	l1594
  1491   000E1C                     u770:
  1492   000E1C                     
  1493                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1494   000E1C  500E               	movf	setMotorPWM@m^0,w,c
  1495   000E1E  6ED9               	movwf	fsr2l,c
  1496   000E20  6ADA               	clrf	fsr2h,c
  1497   000E22  50DF               	movf	indf2,w,c
  1498   000E24  6E0F               	movwf	??_setMotorPWM^0,c
  1499   000E26  500F               	movf	??_setMotorPWM^0,w,c
  1500   000E28  6E01               	movwf	___wmul@multiplier^0,c
  1501   000E2A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1502   000E2C  500E               	movf	setMotorPWM@m^0,w,c
  1503   000E2E  6ED9               	movwf	fsr2l,c
  1504   000E30  6ADA               	clrf	fsr2h,c
  1505   000E32  0E03               	movlw	3
  1506   000E34  26D9               	addwf	fsr2l,f,c
  1507   000E36  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1508   000E3A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1509   000E3E  EC13  F00A         	call	___wmul	;wreg free
  1510   000E42  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1511   000E46  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1512   000E4A  0E00               	movlw	0
  1513   000E4C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1514   000E4E  0E64               	movlw	100
  1515   000E50  6E09               	movwf	___lwdiv@divisor^0,c
  1516   000E52  EC82  F009         	call	___lwdiv	;wreg free
  1517   000E56  500E               	movf	setMotorPWM@m^0,w,c
  1518   000E58  6ED9               	movwf	fsr2l,c
  1519   000E5A  6ADA               	clrf	fsr2h,c
  1520   000E5C  0E03               	movlw	3
  1521   000E5E  26D9               	addwf	fsr2l,f,c
  1522   000E60  50DF               	movf	indf2,w,c
  1523   000E62  6E10               	movwf	(??_setMotorPWM+1)^0,c
  1524   000E64  5007               	movf	?___lwdiv^0,w,c
  1525   000E66  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  1526   000E68  6E11               	movwf	setMotorPWM@posDuty^0,c
  1527   000E6A                     
  1528                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  1529   000E6A  500E               	movf	setMotorPWM@m^0,w,c
  1530   000E6C  6ED9               	movwf	fsr2l,c
  1531   000E6E  6ADA               	clrf	fsr2h,c
  1532   000E70  0E03               	movlw	3
  1533   000E72  26D9               	addwf	fsr2l,f,c
  1534   000E74  50DF               	movf	indf2,w,c
  1535   000E76  6E12               	movwf	setMotorPWM@negDuty^0,c
  1536                           
  1537                           ;dc_motor.c: 72:     }
  1538   000E78  EF5F  F007         	goto	l1598
  1539   000E7C                     l1594:
  1540                           
  1541                           ;dc_motor.c: 74:         posDuty=0;
  1542   000E7C  0E00               	movlw	0
  1543   000E7E  6E11               	movwf	setMotorPWM@posDuty^0,c
  1544   000E80                     
  1545                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1546   000E80  500E               	movf	setMotorPWM@m^0,w,c
  1547   000E82  6ED9               	movwf	fsr2l,c
  1548   000E84  6ADA               	clrf	fsr2h,c
  1549   000E86  50DF               	movf	indf2,w,c
  1550   000E88  6E0F               	movwf	??_setMotorPWM^0,c
  1551   000E8A  500F               	movf	??_setMotorPWM^0,w,c
  1552   000E8C  6E01               	movwf	___wmul@multiplier^0,c
  1553   000E8E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1554   000E90  500E               	movf	setMotorPWM@m^0,w,c
  1555   000E92  6ED9               	movwf	fsr2l,c
  1556   000E94  6ADA               	clrf	fsr2h,c
  1557   000E96  0E03               	movlw	3
  1558   000E98  26D9               	addwf	fsr2l,f,c
  1559   000E9A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1560   000E9E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1561   000EA2  EC13  F00A         	call	___wmul	;wreg free
  1562   000EA6  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1563   000EAA  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1564   000EAE  0E00               	movlw	0
  1565   000EB0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1566   000EB2  0E64               	movlw	100
  1567   000EB4  6E09               	movwf	___lwdiv@divisor^0,c
  1568   000EB6  EC82  F009         	call	___lwdiv	;wreg free
  1569   000EBA  5007               	movf	?___lwdiv^0,w,c
  1570   000EBC  6E12               	movwf	setMotorPWM@negDuty^0,c
  1571   000EBE                     l1598:
  1572                           
  1573                           ;dc_motor.c: 78:     if (m->direction) {
  1574   000EBE  500E               	movf	setMotorPWM@m^0,w,c
  1575   000EC0  6ED9               	movwf	fsr2l,c
  1576   000EC2  6ADA               	clrf	fsr2h,c
  1577   000EC4  0E01               	movlw	1
  1578   000EC6  26D9               	addwf	fsr2l,f,c
  1579   000EC8  50DF               	movf	indf2,w,c
  1580   000ECA  B4D8               	btfsc	status,2,c
  1581   000ECC  EF6A  F007         	goto	u781
  1582   000ED0  EF6C  F007         	goto	u780
  1583   000ED4                     u781:
  1584   000ED4  EF8C  F007         	goto	l1602
  1585   000ED8                     u780:
  1586   000ED8                     
  1587                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  1588   000ED8  500E               	movf	setMotorPWM@m^0,w,c
  1589   000EDA  6ED9               	movwf	fsr2l,c
  1590   000EDC  6ADA               	clrf	fsr2h,c
  1591   000EDE  0E05               	movlw	5
  1592   000EE0  26D9               	addwf	fsr2l,f,c
  1593   000EE2  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1594   000EE6  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1595   000EEA  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1596   000EEE  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1597   000EF2  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1598                           
  1599                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  1600   000EF6  500E               	movf	setMotorPWM@m^0,w,c
  1601   000EF8  6ED9               	movwf	fsr2l,c
  1602   000EFA  6ADA               	clrf	fsr2h,c
  1603   000EFC  0E07               	movlw	7
  1604   000EFE  26D9               	addwf	fsr2l,f,c
  1605   000F00  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1606   000F04  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1607   000F08  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1608   000F0C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1609   000F10  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1610                           
  1611                           ;dc_motor.c: 81:     } else {
  1612   000F14  EFAA  F007         	goto	l125
  1613   000F18                     l1602:
  1614                           
  1615                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  1616   000F18  500E               	movf	setMotorPWM@m^0,w,c
  1617   000F1A  6ED9               	movwf	fsr2l,c
  1618   000F1C  6ADA               	clrf	fsr2h,c
  1619   000F1E  0E05               	movlw	5
  1620   000F20  26D9               	addwf	fsr2l,f,c
  1621   000F22  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1622   000F26  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1623   000F2A  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1624   000F2E  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1625   000F32  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1626                           
  1627                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  1628   000F36  500E               	movf	setMotorPWM@m^0,w,c
  1629   000F38  6ED9               	movwf	fsr2l,c
  1630   000F3A  6ADA               	clrf	fsr2h,c
  1631   000F3C  0E07               	movlw	7
  1632   000F3E  26D9               	addwf	fsr2l,f,c
  1633   000F40  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1634   000F44  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1635   000F48  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1636   000F4C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1637   000F50  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1638   000F54                     l125:
  1639   000F54  0012               	return		;funcret
  1640   000F56                     __end_of_setMotorPWM:
  1641                           	callstack 0
  1642                           
  1643 ;; *************** function ___wmul *****************
  1644 ;; Defined at:
  1645 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;  multiplier      2    0[COMRAM] unsigned int 
  1648 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  product         2    4[COMRAM] unsigned int 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  2    0[COMRAM] unsigned int 
  1653 ;; Registers used:
  1654 ;;		wreg, status,2, status,0, prodl, prodh
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1660 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1661 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1663 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1664 ;;Total ram usage:        6 bytes
  1665 ;; Hardware stack levels used: 1
  1666 ;; This function calls:
  1667 ;;		Nothing
  1668 ;; This function is called by:
  1669 ;;		_setMotorPWM
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           	psect	text10
  1674   001426                     __ptext10:
  1675                           	callstack 0
  1676   001426                     ___wmul:
  1677                           	callstack 26
  1678   001426  5001               	movf	___wmul@multiplier^0,w,c
  1679   001428  0203               	mulwf	___wmul@multiplicand^0,c
  1680   00142A  CFF3 F005          	movff	prodl,___wmul@product
  1681   00142E  CFF4 F006          	movff	prodh,___wmul@product+1
  1682   001432  5001               	movf	___wmul@multiplier^0,w,c
  1683   001434  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1684   001436  50F3               	movf	243,w,c
  1685   001438  2606               	addwf	(___wmul@product+1)^0,f,c
  1686   00143A  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1687   00143C  0203               	mulwf	___wmul@multiplicand^0,c
  1688   00143E  50F3               	movf	243,w,c
  1689   001440  2606               	addwf	(___wmul@product+1)^0,f,c
  1690   001442  C005  F001         	movff	___wmul@product,?___wmul
  1691   001446  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1692   00144A  0012               	return		;funcret
  1693   00144C                     __end_of___wmul:
  1694                           	callstack 0
  1695                           
  1696 ;; *************** function ___lwdiv *****************
  1697 ;; Defined at:
  1698 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  dividend        2    6[COMRAM] unsigned int 
  1701 ;;  divisor         2    8[COMRAM] unsigned int 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  quotient        2   10[COMRAM] unsigned int 
  1704 ;;  counter         1   12[COMRAM] unsigned char 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  2    6[COMRAM] unsigned int 
  1707 ;; Registers used:
  1708 ;;		wreg, status,2, status,0
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1714 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1715 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1717 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1718 ;;Total ram usage:        7 bytes
  1719 ;; Hardware stack levels used: 1
  1720 ;; This function calls:
  1721 ;;		Nothing
  1722 ;; This function is called by:
  1723 ;;		_setMotorPWM
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           	psect	text11
  1728   001304                     __ptext11:
  1729                           	callstack 0
  1730   001304                     ___lwdiv:
  1731                           	callstack 26
  1732   001304  0E00               	movlw	0
  1733   001306  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  1734   001308  0E00               	movlw	0
  1735   00130A  6E0B               	movwf	___lwdiv@quotient^0,c
  1736   00130C  5009               	movf	___lwdiv@divisor^0,w,c
  1737   00130E  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1738   001310  B4D8               	btfsc	status,2,c
  1739   001312  EF8D  F009         	goto	u741
  1740   001316  EF8F  F009         	goto	u740
  1741   00131A                     u741:
  1742   00131A  EFB7  F009         	goto	l826
  1743   00131E                     u740:
  1744   00131E  0E01               	movlw	1
  1745   001320  6E0D               	movwf	___lwdiv@counter^0,c
  1746   001322  EF97  F009         	goto	l1574
  1747   001326                     l1572:
  1748   001326  90D8               	bcf	status,0,c
  1749   001328  3609               	rlcf	___lwdiv@divisor^0,f,c
  1750   00132A  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1751   00132C  2A0D               	incf	___lwdiv@counter^0,f,c
  1752   00132E                     l1574:
  1753   00132E  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1754   001330  EF9C  F009         	goto	u751
  1755   001334  EF9E  F009         	goto	u750
  1756   001338                     u751:
  1757   001338  EF93  F009         	goto	l1572
  1758   00133C                     u750:
  1759   00133C                     l1576:
  1760   00133C  90D8               	bcf	status,0,c
  1761   00133E  360B               	rlcf	___lwdiv@quotient^0,f,c
  1762   001340  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1763   001342  5009               	movf	___lwdiv@divisor^0,w,c
  1764   001344  5C07               	subwf	___lwdiv@dividend^0,w,c
  1765   001346  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1766   001348  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1767   00134A  A0D8               	btfss	status,0,c
  1768   00134C  EFAA  F009         	goto	u761
  1769   001350  EFAC  F009         	goto	u760
  1770   001354                     u761:
  1771   001354  EFB1  F009         	goto	l1584
  1772   001358                     u760:
  1773   001358  5009               	movf	___lwdiv@divisor^0,w,c
  1774   00135A  5E07               	subwf	___lwdiv@dividend^0,f,c
  1775   00135C  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1776   00135E  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1777   001360  800B               	bsf	___lwdiv@quotient^0,0,c
  1778   001362                     l1584:
  1779   001362  90D8               	bcf	status,0,c
  1780   001364  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1781   001366  3209               	rrcf	___lwdiv@divisor^0,f,c
  1782   001368  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1783   00136A  EF9E  F009         	goto	l1576
  1784   00136E                     l826:
  1785   00136E  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1786   001372  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1787   001376  0012               	return		;funcret
  1788   001378                     __end_of___lwdiv:
  1789                           	callstack 0
  1790                           
  1791 ;; *************** function _buggy_lights_init *****************
  1792 ;; Defined at:
  1793 ;;		line 4 in file "buggy_lights.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;		None
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;		None
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  1    wreg      void 
  1800 ;; Registers used:
  1801 ;;		None
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1811 ;;Total ram usage:        0 bytes
  1812 ;; Hardware stack levels used: 1
  1813 ;; This function calls:
  1814 ;;		Nothing
  1815 ;; This function is called by:
  1816 ;;		_main
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text12
  1821   00144C                     __ptext12:
  1822                           	callstack 0
  1823   00144C                     _buggy_lights_init:
  1824                           	callstack 30
  1825   00144C                     
  1826                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
  1827   00144C  9884               	bcf	132,4,c	;volatile
  1828                           
  1829                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
  1830   00144E  9288               	bcf	136,1,c	;volatile
  1831                           
  1832                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
  1833   001450  9684               	bcf	132,3,c	;volatile
  1834                           
  1835                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
  1836   001452  9086               	bcf	134,0,c	;volatile
  1837                           
  1838                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
  1839   001454  9088               	bcf	136,0,c	;volatile
  1840                           
  1841                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
  1842   001456  887C               	bsf	124,4,c	;volatile
  1843                           
  1844                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
  1845   001458  8280               	bsf	128,1,c	;volatile
  1846                           
  1847                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
  1848   00145A  867C               	bsf	124,3,c	;volatile
  1849                           
  1850                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
  1851   00145C  807E               	bsf	126,0,c	;volatile
  1852                           
  1853                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
  1854   00145E  8080               	bsf	128,0,c	;volatile
  1855   001460  0012               	return		;funcret
  1856   001462                     __end_of_buggy_lights_init:
  1857                           	callstack 0
  1858                           
  1859                           	psect	smallconst
  1860   000E00                     __psmallconst:
  1861                           	callstack 0
  1862   000E00  00                 	db	0
  1863   000E01  00                 	db	0	; dummy byte at the end
  1864   000000                     
  1865                           	psect	rparam
  1866   000000                     
  1867                           	psect	config
  1868                           
  1869                           ;Config register CONFIG1L @ 0x300000
  1870                           ;	External Oscillator mode Selection bits
  1871                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1872                           ;	Power-up default value for COSC bits
  1873                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1874   300000                     	org	3145728
  1875   300000  AA                 	db	170
  1876                           
  1877                           ;Config register CONFIG1H @ 0x300001
  1878                           ;	unspecified, using default values
  1879                           ;	Clock Out Enable bit
  1880                           ;	CLKOUTEN = 0x1, unprogrammed default
  1881                           ;	Clock Switch Enable bit
  1882                           ;	CSWEN = 0x1, unprogrammed default
  1883                           ;	Fail-Safe Clock Monitor Enable bit
  1884                           ;	FCMEN = 0x1, unprogrammed default
  1885   300001                     	org	3145729
  1886   300001  FF                 	db	255
  1887                           
  1888                           ;Config register CONFIG3L @ 0x300004
  1889                           ;	WDT Period Select bits
  1890                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  1891                           ;	WDT operating mode
  1892                           ;	WDTE = OFF, WDT Disabled
  1893   300004                     	org	3145732
  1894   300004  9F                 	db	159
  1895                           
  1896                           ;Config register CONFIG3H @ 0x300005
  1897                           ;	unspecified, using default values
  1898                           ;	WDT Window Select bits
  1899                           ;	WDTCWS = 0x7, unprogrammed default
  1900                           ;	WDT input clock selector
  1901                           ;	WDTCCS = 0x7, unprogrammed default
  1902   300005                     	org	3145733
  1903   300005  FF                 	db	255
  1904                           tosu	equ	0xFFF
  1905                           tosh	equ	0xFFE
  1906                           tosl	equ	0xFFD
  1907                           stkptr	equ	0xFFC
  1908                           pclatu	equ	0xFFB
  1909                           pclath	equ	0xFFA
  1910                           pcl	equ	0xFF9
  1911                           tblptru	equ	0xFF8
  1912                           tblptrh	equ	0xFF7
  1913                           tblptrl	equ	0xFF6
  1914                           tablat	equ	0xFF5
  1915                           prodh	equ	0xFF4
  1916                           prodl	equ	0xFF3
  1917                           indf0	equ	0xFEF
  1918                           postinc0	equ	0xFEE
  1919                           postdec0	equ	0xFED
  1920                           preinc0	equ	0xFEC
  1921                           plusw0	equ	0xFEB
  1922                           fsr0h	equ	0xFEA
  1923                           fsr0l	equ	0xFE9
  1924                           wreg	equ	0xFE8
  1925                           indf1	equ	0xFE7
  1926                           postinc1	equ	0xFE6
  1927                           postdec1	equ	0xFE5
  1928                           preinc1	equ	0xFE4
  1929                           plusw1	equ	0xFE3
  1930                           fsr1h	equ	0xFE2
  1931                           fsr1l	equ	0xFE1
  1932                           bsr	equ	0xFE0
  1933                           indf2	equ	0xFDF
  1934                           postinc2	equ	0xFDE
  1935                           postdec2	equ	0xFDD
  1936                           preinc2	equ	0xFDC
  1937                           plusw2	equ	0xFDB
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     49      67
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    cardWhite@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    cardWhite@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    S864DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    S864DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), main@motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    UTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    UTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_cardWhite
    _cardWhite->_UTurn
    _cardWhite->_headbuttReverse
    _headbuttReverse->_fullSpeedReverse
    _fullSpeedReverse->_setMotorPWM
    _UTurn->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   12599
                                             29 COMRAM    20    20      0
                  _buggy_lights_init
                          _cardWhite
                    _initDCmotorsPWM
                    _lights_flashing
 ---------------------------------------------------------------------------------
 (1) _lights_flashing                                      2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _cardWhite                                            2     0      2   12092
                                             27 COMRAM     2     0      2
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (2) _headbuttReverse                                      4     2      2    5904
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedReverse                                     5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _UTurn                                                4     2      2    5904
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _stop                                                 3     1      2    3069
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          5     4      1    1829
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _cardWhite
     _UTurn
       _stop
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _turnLeft
         _setMotorPWM
     _headbuttReverse
       _fullSpeedReverse
         _setMotorPWM
       _stop
   _initDCmotorsPWM
   _lights_flashing

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      51        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     31      43       1       70.5%
BITBIGSFRllhhhh     54      0       0      38        0.0%
BITBIGSFRllllh      4B      0       0      48        0.0%
BITBIGSFRllhhhl     46      0       0      40        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     2D      0       0      42        0.0%
BITBIGSFRlllll      2D      0       0      49        0.0%
BITBIGSFRllhhhl     1E      0       0      43        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      44        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRlllhl       5      0       0      47        0.0%
BITBIGSFRlllhh       3      0       0      46        0.0%
BITBIGSFRllhhhl      2      0       0      39        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRlhh         2      0       0      37        0.0%
BITBIGSFRllhhhl      1      0       0      41        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      45        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      43      50        0.0%
DATA                 0      0      43       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 26 16:04:31 2024

             _turn180Delay 0036                         l20 115C                         l17 1460  
      ___wmul@multiplicand 0003                        l125 0F54                        l133 127A  
                      l141 100C                        l118 11EC                        l138 0F9C  
                      l162 1052                        l180 13A8                        l332 1424  
                      l165 10C2                        l335 144A                        l183 13D8  
                      l833 1376                        l826 136E                        u200 10F6  
                      u201 10EE                        u220 1132                        u221 112A  
                      u240 1150                        u241 1148                        u218 10F8  
                      u180 10D6                        u181 10CE                        u238 1134  
                      u258 1152                        u198 10D8                        u800 1226  
                      u801 1222                        u810 1264                        u811 1260  
                      u740 131E                        u820 127A                        u900 10C2  
                      u741 131A                        u821 1276                        u901 10BE  
                      u750 133C                        u830 0F94                        u751 1338  
                      u831 0F90                        u760 1358                        u840 0FB4  
                      u761 1354                        u841 0FB0                        u770 0E1C  
                      u850 0FF4                        u771 0E18                        u851 0FF0  
                      u780 0ED8                        u860 100C                        u781 0ED4  
                      u861 1008                        u790 1208                        u870 104A  
                      u791 1204                        u871 1046                        u880 106A  
                      u881 1066                        u890 10AA                        u891 10A6  
                      u997 1286                        wreg 0FE8                _squareDelay 0032  
                     l1130 10C4                       l1132 1108                       l1134 1120  
                     l1128 144C                       l1136 113E                       l1600 0ED8  
                     l1602 0F18                       l1610 1210                       l1612 1226  
                     l1620 124E                       l1604 11EE                       l1700 11E0  
                     l1622 1264                       l1614 122E                       l1606 11F2  
                     l1630 0F7C                       l1702 11EA                       l1560 1426  
                     l1616 1236                       l1608 1208                       l1640 0FCC  
                     l1632 0F94                       l1624 0F56                       l1800 12C8  
                     l1570 131E                       l1562 1442                       l1618 123E  
                     l1634 0FB4                       l1642 0FDC                       l1626 0F5E  
                     l1650 1022                       l1810 12E8                       l1802 12CC  
                     l1580 1358                       l1572 1326                       l1644 0FF4  
                     l1636 0FBC                       l1628 0F6A                       l1660 107A  
                     l1652 1032                       l1812 12EC                       l1804 12D0  
                     l1582 1360                       l1574 132E                       l1566 1304  
                     l1590 0E1C                       l1638 0FC4                       l1670 1384  
                     l1662 1082                       l1654 104A                       l1646 100E  
                     l1726 1400                       l1814 12F8                       l1806 12D8  
                     l1584 1362                       l1576 133C                       l1568 130C  
                     l1592 0E6A                       l1672 139C                       l1656 106A  
                     l1664 1092                       l1648 1016                       l1680 115E  
                     l1808 12E0                       l1586 1368                       l1578 1342  
                     l1594 0E7C                       l1666 10AA                       l1658 1072  
                     l1674 13AA                       l1690 11C6                       l1682 116E  
                     l1596 0E80                       l1588 0E02                       l1668 1378  
                     l1676 13B6                       l1692 11C8                       l1684 1194  
                     l1780 127C                       l1598 0EBE                       l1678 13CC  
                     l1694 11D2                       l1686 1198                       l1790 12A8  
                     l1782 1294                       l1696 11D4                       l1688 11BC  
                     l1792 12AC                       l1784 1294                       l1698 11DE  
                     l1794 12B4                       l1786 12A0                       l1796 12BC  
                     l1788 12A4                       l1798 12C4                       u1007 1112  
                     u1017 13C0                       u1027 1088                       u1037 138E  
                     u1047 0FD2                       u1057 1244                       _T2PR 0FBC  
                     _main 127C                       fsr2h 0FDA                       indf2 0FDF  
                     fsr1l 0FE1                       fsr2l 0FD9                       _stop 11EE  
                     prodh 0FF4                       prodl 0FF3                       start 0000  
        headbuttReverse@mL 0018          headbuttReverse@mR 0019               ___param_bank 0000  
                    ?_main 0001                      ?_stop 0013            __end_of___lwdiv 1378  
         ?_headbuttReverse 0018                      _UTurn 1378                _turningGear 0040  
        _turnRight135Delay 0038                      tablat 0FF5            _turnLeft90Delay 003E  
                    status 0FD8            __initialization 13DA               __end_of_main 1304  
             __end_of_stop 127C                     ??_main 001E                     ??_stop 0015  
            __activetblptr 0000                     ?_UTurn 0018               ?_setMotorPWM 000E  
                   _CCPR1H 0FAA                     _CCPR2H 0FA6                     _CCPR3H 0F25  
                   _CCPR4H 0F21                     _RE2PPS 0E74                     _RD5PPS 0E6F  
                   _RC7PPS 0E69                     _RD6PPS 0E70                     _RE4PPS 0E76  
                   _RG6PPS 0E88           _fullSpeedReverse 100E           _turnLeft135Delay 003A  
             _CCPTMRS0bits 0FAD            _lights_flashing 10C4                     ___wmul 1426  
                ??___lwdiv 000B         fullSpeedReverse@mL 0013         fullSpeedReverse@mR 0014  
                   isa$std 0001               __pdataCOMRAM 0032               __mediumconst 0000  
                   tblptrh 0FF7                     tblptrl 0FF6                     tblptru 0FF8  
                   stop@mL 0013                     stop@mR 0014          ??_initDCmotorsPWM 0003  
         __end_of_turnLeft 100E          _buggy_lights_init 144C                 __accesstop 0060  
  __end_of__initialization 13FA         ?_buggy_lights_init 0001              ___rparam_used 0001  
           __pcstackCOMRAM 0001              __end_of_UTurn 13AA        ??_buggy_lights_init 0001  
                  ??_UTurn 001A  __end_of_buggy_lights_init 1462    __end_of_lights_flashing 115E  
             _T2CLKCONbits 0FBF  fullSpeedReverse@rightGear 0017                    ?___wmul 0001  
                  _SSP2ADD 0ED6                    _SSP2BUF 0ED5          __end_of_cardWhite 1426  
                  UTurn@mL 0018                    UTurn@mR 0019                    __Hparam 0000  
                  __Lparam 0000                    ___lwdiv 1304               __psmallconst 0E00  
                  __pcinit 13DA                    __ramtop 0E00                  ?_turnLeft 0013  
                  __ptext0 127C                    __ptext1 10C4                    __ptext2 115E  
                  __ptext3 1400                    __ptext4 13AA                    __ptext5 100E  
                  __ptext6 1378                    __ptext7 0F56                    __ptext8 11EE  
                  __ptext9 0E02                  _T2CONbits 0FBD   __end_of_fullSpeedReverse 10C4  
                _T2HLTbits 0FBE       end_of_initialization 13FA           ?_lights_flashing 0001  
                  postdec1 0FE5                    postdec2 0FDD                    postinc0 0FEE  
                  postinc2 0FDE            _initDCmotorsPWM 115E                 ??_turnLeft 0015  
       setMotorPWM@negDuty 0012         setMotorPWM@posDuty 0011                  _TRISCbits 0F83  
                _TRISDbits 0F84                  _TRISEbits 0F85                  _TRISFbits 0F86  
                _TRISGbits 0F87                  _TRISHbits 0F88                _CCP1CONbits 0FAB  
              _CCP2CONbits 0FA7                _CCP3CONbits 0F26                _CCP4CONbits 0F22  
               main@motorL 0020                 main@motorR 0029             __end_of___wmul 144C  
            __pidataCOMRAM 1462        start_initialization 13DA           _turnRight90Delay 003C  
        ??_headbuttReverse 001A    __end_of_initDCmotorsPWM 11EE                   ??___wmul 0005  
        turnLeft@rightGear 0017                  _cardWhite 1400           ___lwdiv@dividend 0007  
                 ?___lwdiv 0007                __smallconst 0E00          ?_fullSpeedReverse 0013  
            ??_setMotorPWM 000F           ___lwdiv@quotient 000B              _headbuttDelay 0034  
 initDCmotorsPWM@PWMperiod 0001         ??_fullSpeedReverse 0015                  _rampDelay 0043  
               ?_cardWhite 001C             ___wmul@product 0005                   _LATCbits 0F7B  
                 _LATDbits 0F7C                   _LATEbits 0F7D                   _LATFbits 0F7E  
                 _LATGbits 0F7F                   _LATHbits 0F80           ?_initDCmotorsPWM 0001  
                 _SSP2CON2 0EDA                   _SSP2STAT 0ED8          ___wmul@multiplier 0001  
             setMotorPWM@m 000E                  copy_data0 13EE                cardWhite@mL 001C  
              cardWhite@mR 001D        __end_of_setMotorPWM 0F56                   __Hrparam 0000  
                 __Lrparam 0000           turnLeft@leftGear 0016                 _ANSELDbits 0EA7  
          ___lwdiv@divisor 0009            ___lwdiv@counter 000D                   __ptext10 1426  
                 __ptext11 1304                   __ptext12 144C               _SSP2CON1bits 0ED9  
          _headbuttReverse 13AA               _SSP2CON2bits 0EDA                ??_cardWhite 001E  
 fullSpeedReverse@leftGear 0016                 turnLeft@mL 0013                 turnLeft@mR 0014  
                 isa$xinst 0000                   _turnLeft 0F56                _setMotorPWM 0E02  
             _topGearRight 0041                _topGearLeft 0042                 _SSP2DATPPS 0E1D  
        ??_lights_flashing 0001    __end_of_headbuttReverse 13DA                 _SSP2CLKPPS 0E1C  
