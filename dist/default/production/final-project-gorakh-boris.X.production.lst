

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Feb 26 16:32:42 2024

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 05/05/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F67K40 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	idataCOMRAM
    55  01FE15                     __pidataCOMRAM:
    56                           	callstack 0
    57                           
    58                           ;initializer for _turn180Delay
    59  01FE15  01FE               	dw	510
    60                           
    61                           ;initializer for _turnRight135Delay
    62  01FE17  012C               	dw	300
    63                           
    64                           ;initializer for _turnLeft135Delay
    65  01FE19  012C               	dw	300
    66                           
    67                           ;initializer for _turnRight90Delay
    68  01FE1B  00AF               	dw	175
    69                           
    70                           ;initializer for _turnLeft90Delay
    71  01FE1D  00AF               	dw	175
    72                           
    73                           ;initializer for _turningGear
    74  01FE1F  2A                 	db	42
    75                           
    76                           ;initializer for _topAdjustSide
    77  01FE20  01                 	db	1
    78                           
    79                           ;initializer for _topAdjustPower
    80  01FE21  02                 	db	2
    81                           
    82                           ;initializer for _topGear
    83  01FE22  1E                 	db	30
    84                           
    85                           ;initializer for _rampDelay
    86  01FE23  08                 	db	8
    87  0000                     _PIE4bits	set	3629
    88  0000                     _TX4REG	set	3812
    89  0000                     _RC4REG	set	3811
    90  0000                     _PIR4bits	set	3639
    91  0000                     _RC4STAbits	set	3815
    92  0000                     _SP4BRGH	set	3814
    93  0000                     _SP4BRGL	set	3813
    94  0000                     _TX4STAbits	set	3816
    95  0000                     _BAUD4CONbits	set	3817
    96  0000                     _RX4PPS	set	3605
    97  0000                     _RC0PPS	set	3682
    98  0000                     _SSP2BUF	set	3797
    99  0000                     _SSP2CON2bits	set	3802
   100  0000                     _SSP2CON2	set	3802
   101  0000                     _SSP2STAT	set	3800
   102  0000                     _RD6PPS	set	3696
   103  0000                     _RD5PPS	set	3695
   104  0000                     _SSP2CLKPPS	set	3612
   105  0000                     _SSP2DATPPS	set	3613
   106  0000                     _ANSELDbits	set	3751
   107  0000                     _SSP2ADD	set	3798
   108  0000                     _SSP2CON1bits	set	3801
   109  0000                     _RG6PPS	set	3720
   110  0000                     _RC7PPS	set	3689
   111  0000                     _RE4PPS	set	3702
   112  0000                     _RE2PPS	set	3700
   113  0000                     _CCP4CONbits	set	3874
   114  0000                     _CCP3CONbits	set	3878
   115  0000                     _CCPR4H	set	3873
   116  0000                     _CCPR3H	set	3877
   117  0000                     _CCP2CONbits	set	4007
   118  0000                     _CCP1CONbits	set	4011
   119  0000                     _CCPTMRS0bits	set	4013
   120  0000                     _T2PR	set	4028
   121  0000                     _T2CLKCONbits	set	4031
   122  0000                     _T2HLTbits	set	4030
   123  0000                     _T2CONbits	set	4029
   124  0000                     _LATGbits	set	3967
   125  0000                     _LATCbits	set	3963
   126  0000                     _LATEbits	set	3965
   127  0000                     _TRISGbits	set	3975
   128  0000                     _TRISCbits	set	3971
   129  0000                     _TRISEbits	set	3973
   130  0000                     _LATFbits	set	3966
   131  0000                     _LATHbits	set	3968
   132  0000                     _LATDbits	set	3964
   133  0000                     _TRISFbits	set	3974
   134  0000                     _TRISHbits	set	3976
   135  0000                     _TRISDbits	set	3972
   136  0000                     _CCPR2H	set	4006
   137  0000                     _CCPR1H	set	4010
   138                           
   139                           ; #config settings
   140                           
   141                           	psect	cinit
   142  01FE3A                     __pcinit:
   143                           	callstack 0
   144  01FE3A                     start_initialization:
   145                           	callstack 0
   146  01FE3A                     __initialization:
   147                           	callstack 0
   148                           
   149                           ; Initialize objects allocated to COMRAM (15 bytes)
   150                           ; load TBLPTR registers with __pidataCOMRAM
   151  01FE3A  0E15               	movlw	low __pidataCOMRAM
   152  01FE3C  6EF6               	movwf	tblptrl,c
   153  01FE3E  0EFE               	movlw	high __pidataCOMRAM
   154  01FE40  6EF7               	movwf	tblptrh,c
   155  01FE42  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
   156  01FE44  6EF8               	movwf	tblptru,c
   157  01FE46  EE00  F02F         	lfsr	0,__pdataCOMRAM
   158  01FE4A  EE10 F00F          	lfsr	1,15
   159  01FE4E                     copy_data0:
   160  01FE4E  0009               	tblrd		*+
   161  01FE50  CFF5 FFEE          	movff	tablat,postinc0
   162  01FE54  50E5               	movf	postdec1,w,c
   163  01FE56  50E1               	movf	fsr1l,w,c
   164  01FE58  E1FA               	bnz	copy_data0
   165                           
   166                           ; Clear objects allocated to BANK0 (60 bytes)
   167  01FE5A  EE00  F060         	lfsr	0,__pbssBANK0
   168  01FE5E  0E3C               	movlw	60
   169  01FE60                     clear_0:
   170  01FE60  6AEE               	clrf	postinc0,c
   171  01FE62  06E8               	decf	wreg,f,c
   172  01FE64  E1FD               	bnz	clear_0
   173                           
   174                           ; Clear objects allocated to COMRAM (24 bytes)
   175  01FE66  EE00  F001         	lfsr	0,__pbssCOMRAM
   176  01FE6A  0E18               	movlw	24
   177  01FE6C                     clear_1:
   178  01FE6C  6AEE               	clrf	postinc0,c
   179  01FE6E  06E8               	decf	wreg,f,c
   180  01FE70  E1FD               	bnz	clear_1
   181  01FE72                     end_of_initialization:
   182                           	callstack 0
   183  01FE72                     __end_of__initialization:
   184                           	callstack 0
   185  01FE72  0100               	movlb	0
   186  01FE74  EF84  F0FF         	goto	_main	;jump to C main() function
   187                           
   188                           	psect	bssCOMRAM
   189  000001                     __pbssCOMRAM:
   190                           	callstack 0
   191  000001                     _EUSART4RXbuf:
   192                           	callstack 0
   193  000001                     	ds	20
   194  000015                     _TxBufReadCnt:
   195                           	callstack 0
   196  000015                     	ds	1
   197  000016                     _TxBufWriteCnt:
   198                           	callstack 0
   199  000016                     	ds	1
   200  000017                     _RxBufReadCnt:
   201                           	callstack 0
   202  000017                     	ds	1
   203  000018                     _RxBufWriteCnt:
   204                           	callstack 0
   205  000018                     	ds	1
   206                           
   207                           	psect	dataCOMRAM
   208  00002F                     __pdataCOMRAM:
   209                           	callstack 0
   210  00002F                     _turn180Delay:
   211                           	callstack 0
   212  00002F                     	ds	2
   213  000031                     _turnRight135Delay:
   214                           	callstack 0
   215  000031                     	ds	2
   216  000033                     _turnLeft135Delay:
   217                           	callstack 0
   218  000033                     	ds	2
   219  000035                     _turnRight90Delay:
   220                           	callstack 0
   221  000035                     	ds	2
   222  000037                     _turnLeft90Delay:
   223                           	callstack 0
   224  000037                     	ds	2
   225  000039                     _turningGear:
   226                           	callstack 0
   227  000039                     	ds	1
   228  00003A                     _topAdjustSide:
   229                           	callstack 0
   230  00003A                     	ds	1
   231  00003B                     _topAdjustPower:
   232                           	callstack 0
   233  00003B                     	ds	1
   234  00003C                     _topGear:
   235                           	callstack 0
   236  00003C                     	ds	1
   237  00003D                     _rampDelay:
   238                           	callstack 0
   239  00003D                     	ds	1
   240                           
   241                           	psect	bssBANK0
   242  000060                     __pbssBANK0:
   243                           	callstack 0
   244  000060                     _EUSART4TXbuf:
   245                           	callstack 0
   246  000060                     	ds	60
   247                           
   248                           	psect	cstackCOMRAM
   249  000019                     __pcstackCOMRAM:
   250                           	callstack 0
   251  000019                     initDCmotorsPWM@PWMperiod:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x0
   255  000019                     	ds	2
   256  00001B                     ??_main:
   257                           
   258                           ; 1 bytes @ 0x2
   259  00001B                     	ds	2
   260  00001D                     main@motorL:
   261                           	callstack 0
   262                           
   263                           ; 9 bytes @ 0x4
   264  00001D                     	ds	9
   265  000026                     main@motorR:
   266                           	callstack 0
   267                           
   268                           ; 9 bytes @ 0xD
   269  000026                     	ds	9
   270                           
   271 ;;
   272 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   273 ;;
   274 ;; *************** function _main *****************
   275 ;; Defined at:
   276 ;;		line 23 in file "main.c"
   277 ;; Parameters:    Size  Location     Type
   278 ;;		None
   279 ;; Auto vars:     Size  Location     Type
   280 ;;  motorR          9   13[COMRAM] struct DC_motor
   281 ;;  motorL          9    4[COMRAM] struct DC_motor
   282 ;;  PWMcycle        2    0        unsigned int 
   283 ;; Return value:  Size  Location     Type
   284 ;;                  1    wreg      void 
   285 ;; Registers used:
   286 ;;		wreg, status,2, status,0, cstack
   287 ;; Tracked objects:
   288 ;;		On entry : 0/0
   289 ;;		On exit  : 0/0
   290 ;;		Unchanged: 0/0
   291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   293 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   295 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   296 ;;Total ram usage:       20 bytes
   297 ;; Hardware stack levels required when called: 1
   298 ;; This function calls:
   299 ;;		_buggy_lights_init
   300 ;;		_initDCmotorsPWM
   301 ;; This function is called by:
   302 ;;		Startup code after reset
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306                           	psect	text0
   307  01FF08                     __ptext0:
   308                           	callstack 0
   309  01FF08                     _main:
   310                           	callstack 30
   311  01FF08                     
   312                           ;main.c: 25:     initDCmotorsPWM(PWMcycle);
   313  01FF08  0E00               	movlw	0
   314  01FF0A  6E1A               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   315  01FF0C  0E63               	movlw	99
   316  01FF0E  6E19               	movwf	initDCmotorsPWM@PWMperiod^0,c
   317  01FF10  EC3C  F0FF         	call	_initDCmotorsPWM	;wreg free
   318  01FF14                     
   319                           ;main.c: 27:     struct DC_motor motorL, motorR;;main.c: 29:     motorL.power = 0;
   320  01FF14  0E00               	movlw	0
   321  01FF16  6E1D               	movwf	main@motorL^0,c
   322  01FF18                     
   323                           ;main.c: 30:     motorL.direction = 1;
   324  01FF18  0E01               	movlw	1
   325  01FF1A  6E1E               	movwf	(main@motorL+1)^0,c
   326  01FF1C                     
   327                           ;main.c: 31:     motorL.brakemode = 1;
   328  01FF1C  0E01               	movlw	1
   329  01FF1E  6E1F               	movwf	(main@motorL+2)^0,c
   330  01FF20                     
   331                           ;main.c: 32:     motorL.PWMperiod = PWMcycle;
   332  01FF20  0E00               	movlw	0
   333  01FF22  6E21               	movwf	(main@motorL+4)^0,c
   334  01FF24  0E63               	movlw	99
   335  01FF26  6E20               	movwf	(main@motorL+3)^0,c
   336  01FF28                     
   337                           ;main.c: 33:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   338  01FF28  0EAA               	movlw	170
   339  01FF2A  6E22               	movwf	(main@motorL+5)^0,c
   340  01FF2C  0E0F               	movlw	15
   341  01FF2E  6E23               	movwf	(main@motorL+6)^0,c
   342  01FF30                     
   343                           ;main.c: 34:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   344  01FF30  0EA6               	movlw	166
   345  01FF32  6E24               	movwf	(main@motorL+7)^0,c
   346  01FF34  0E0F               	movlw	15
   347  01FF36  6E25               	movwf	(main@motorL+8)^0,c
   348  01FF38                     
   349                           ;main.c: 36:     motorR.power = 0;
   350  01FF38  0E00               	movlw	0
   351  01FF3A  6E26               	movwf	main@motorR^0,c
   352  01FF3C                     
   353                           ;main.c: 37:     motorR.direction = 1;
   354  01FF3C  0E01               	movlw	1
   355  01FF3E  6E27               	movwf	(main@motorR+1)^0,c
   356  01FF40                     
   357                           ;main.c: 38:     motorR.brakemode = 1;
   358  01FF40  0E01               	movlw	1
   359  01FF42  6E28               	movwf	(main@motorR+2)^0,c
   360  01FF44                     
   361                           ;main.c: 39:     motorR.PWMperiod = PWMcycle;
   362  01FF44  0E00               	movlw	0
   363  01FF46  6E2A               	movwf	(main@motorR+4)^0,c
   364  01FF48  0E63               	movlw	99
   365  01FF4A  6E29               	movwf	(main@motorR+3)^0,c
   366  01FF4C                     
   367                           ;main.c: 40:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   368  01FF4C  0E25               	movlw	37
   369  01FF4E  6E2B               	movwf	(main@motorR+5)^0,c
   370  01FF50  0E0F               	movlw	15
   371  01FF52  6E2C               	movwf	(main@motorR+6)^0,c
   372  01FF54                     
   373                           ;main.c: 41:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   374  01FF54  0E21               	movlw	33
   375  01FF56  6E2D               	movwf	(main@motorR+7)^0,c
   376  01FF58  0E0F               	movlw	15
   377  01FF5A  6E2E               	movwf	(main@motorR+8)^0,c
   378                           
   379                           ;main.c: 43:     buggy_lights_init();
   380  01FF5C  EC12  F0FF         	call	_buggy_lights_init	;wreg free
   381  01FF60                     l1404:
   382                           
   383                           ;main.c: 47:         LATDbits.LATD4 = !LATDbits.LATD4;
   384  01FF60  A87C               	btfss	124,4,c	;volatile
   385  01FF62  EFB5  F0FF         	goto	u311
   386  01FF66  EFB9  F0FF         	goto	u310
   387  01FF6A                     u311:
   388  01FF6A  6A1B               	clrf	??_main^0,c
   389  01FF6C  2A1B               	incf	??_main^0,f,c
   390  01FF6E  EFBA  F0FF         	goto	u328
   391  01FF72                     u310:
   392  01FF72  6A1B               	clrf	??_main^0,c
   393  01FF74                     u328:
   394  01FF74  3A1B               	swapf	??_main^0,f,c
   395  01FF76  507C               	movf	124,w,c	;volatile
   396  01FF78  181B               	xorwf	??_main^0,w,c
   397  01FF7A  0BEF               	andlw	-17
   398  01FF7C  181B               	xorwf	??_main^0,w,c
   399  01FF7E  6E7C               	movwf	124,c	;volatile
   400  01FF80                     
   401                           ;main.c: 48:         LATDbits.LATD3 = !LATDbits.LATD3;
   402  01FF80  A67C               	btfss	124,3,c	;volatile
   403  01FF82  EFC5  F0FF         	goto	u331
   404  01FF86  EFC9  F0FF         	goto	u330
   405  01FF8A                     u331:
   406  01FF8A  6A1B               	clrf	??_main^0,c
   407  01FF8C  2A1B               	incf	??_main^0,f,c
   408  01FF8E  EFCA  F0FF         	goto	u348
   409  01FF92                     u330:
   410  01FF92  6A1B               	clrf	??_main^0,c
   411  01FF94                     u348:
   412  01FF94  461B               	rlncf	??_main^0,f,c
   413  01FF96  461B               	rlncf	??_main^0,f,c
   414  01FF98  461B               	rlncf	??_main^0,f,c
   415  01FF9A  507C               	movf	124,w,c	;volatile
   416  01FF9C  181B               	xorwf	??_main^0,w,c
   417  01FF9E  0BF7               	andlw	-9
   418  01FFA0  181B               	xorwf	??_main^0,w,c
   419  01FFA2  6E7C               	movwf	124,c	;volatile
   420  01FFA4                     
   421                           ;main.c: 49:         _delay((unsigned long)((500)*(64000000/4000.0)));
   422  01FFA4  0E29               	movlw	41
   423  01FFA6  6E1C               	movwf	(??_main+1)^0,c
   424  01FFA8  0E96               	movlw	150
   425  01FFAA  6E1B               	movwf	??_main^0,c
   426  01FFAC  0E7F               	movlw	127
   427  01FFAE                     u417:
   428  01FFAE  2EE8               	decfsz	wreg,f,c
   429  01FFB0  D7FE               	bra	u417
   430  01FFB2  2E1B               	decfsz	??_main^0,f,c
   431  01FFB4  D7FC               	bra	u417
   432  01FFB6  2E1C               	decfsz	(??_main+1)^0,f,c
   433  01FFB8  D7FA               	bra	u417
   434  01FFBA  F000               	nop	
   435  01FFBC                     
   436                           ;main.c: 50:         LATFbits.LATF0 = !LATFbits.LATF0;
   437  01FFBC  A07E               	btfss	126,0,c	;volatile
   438  01FFBE  EFE3  F0FF         	goto	u351
   439  01FFC2  EFE7  F0FF         	goto	u350
   440  01FFC6                     u351:
   441  01FFC6  6A1B               	clrf	??_main^0,c
   442  01FFC8  2A1B               	incf	??_main^0,f,c
   443  01FFCA  EFE8  F0FF         	goto	u368
   444  01FFCE                     u350:
   445  01FFCE  6A1B               	clrf	??_main^0,c
   446  01FFD0                     u368:
   447  01FFD0  507E               	movf	126,w,c	;volatile
   448  01FFD2  181B               	xorwf	??_main^0,w,c
   449  01FFD4  0BFE               	andlw	-2
   450  01FFD6  181B               	xorwf	??_main^0,w,c
   451  01FFD8  6E7E               	movwf	126,c	;volatile
   452  01FFDA                     
   453                           ;main.c: 51:         LATHbits.LATH0 = !LATHbits.LATH0;
   454  01FFDA  A080               	btfss	128,0,c	;volatile
   455  01FFDC  EFF2  F0FF         	goto	u371
   456  01FFE0  EFF6  F0FF         	goto	u370
   457  01FFE4                     u371:
   458  01FFE4  6A1B               	clrf	??_main^0,c
   459  01FFE6  2A1B               	incf	??_main^0,f,c
   460  01FFE8  EFF7  F0FF         	goto	u388
   461  01FFEC                     u370:
   462  01FFEC  6A1B               	clrf	??_main^0,c
   463  01FFEE                     u388:
   464  01FFEE  5080               	movf	128,w,c	;volatile
   465  01FFF0  181B               	xorwf	??_main^0,w,c
   466  01FFF2  0BFE               	andlw	-2
   467  01FFF4  181B               	xorwf	??_main^0,w,c
   468  01FFF6  6E80               	movwf	128,c	;volatile
   469  01FFF8  EFB0  F0FF         	goto	l1404
   470  01FFFC  EF00  F000         	goto	start
   471  020000                     __end_of_main:
   472                           	callstack 0
   473                           
   474 ;; *************** function _initDCmotorsPWM *****************
   475 ;; Defined at:
   476 ;;		line 5 in file "dc_motor.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, status,2
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   490 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   493 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   494 ;;Total ram usage:        2 bytes
   495 ;; Hardware stack levels used: 1
   496 ;; This function calls:
   497 ;;		Nothing
   498 ;; This function is called by:
   499 ;;		_main
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           	psect	text1
   504  01FE78                     __ptext1:
   505                           	callstack 0
   506  01FE78                     _initDCmotorsPWM:
   507                           	callstack 30
   508  01FE78                     
   509                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   510  01FE78  9485               	bcf	133,2,c	;volatile
   511                           
   512                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   513  01FE7A  9885               	bcf	133,4,c	;volatile
   514                           
   515                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   516  01FE7C  9E83               	bcf	131,7,c	;volatile
   517                           
   518                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   519  01FE7E  9C87               	bcf	135,6,c	;volatile
   520                           
   521                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   522  01FE80  947D               	bcf	125,2,c	;volatile
   523                           
   524                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   525  01FE82  987D               	bcf	125,4,c	;volatile
   526                           
   527                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   528  01FE84  9E7B               	bcf	123,7,c	;volatile
   529                           
   530                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   531  01FE86  9C7F               	bcf	127,6,c	;volatile
   532  01FE88                     
   533                           ;dc_motor.c: 18:     RE2PPS=0x05;
   534  01FE88  0E05               	movlw	5
   535  01FE8A  010E               	movlb	14	; () banked
   536  01FE8C  6F74               	movwf	116,b	;volatile
   537                           
   538                           ;dc_motor.c: 19:     RE4PPS=0x06;
   539  01FE8E  0E06               	movlw	6
   540  01FE90  6F76               	movwf	118,b	;volatile
   541                           
   542                           ;dc_motor.c: 20:     RC7PPS=0x07;
   543  01FE92  0E07               	movlw	7
   544  01FE94  6F69               	movwf	105,b	;volatile
   545                           
   546                           ;dc_motor.c: 21:     RG6PPS=0x08;
   547  01FE96  0E08               	movlw	8
   548  01FE98  6F88               	movwf	136,b	;volatile
   549                           
   550                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   551  01FE9A  50BD               	movf	189,w,c	;volatile
   552  01FE9C  0B8F               	andlw	-113
   553  01FE9E  0940               	iorlw	64
   554  01FEA0  6EBD               	movwf	189,c	;volatile
   555                           
   556                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   557  01FEA2  0EE0               	movlw	-32
   558  01FEA4  16BE               	andwf	190,f,c	;volatile
   559                           
   560                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   561  01FEA6  50BF               	movf	191,w,c	;volatile
   562  01FEA8  0BF0               	andlw	-16
   563  01FEAA  0901               	iorlw	1
   564  01FEAC  6EBF               	movwf	191,c	;volatile
   565  01FEAE                     
   566                           ; BSR set to: 14
   567                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   568  01FEAE  C019  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   569  01FEB2                     
   570                           ; BSR set to: 14
   571                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   572  01FEB2  8EBD               	bsf	189,7,c	;volatile
   573                           
   574                           ;dc_motor.c: 35:     CCPR1H=0;
   575  01FEB4  0E00               	movlw	0
   576  01FEB6  6EAA               	movwf	170,c	;volatile
   577                           
   578                           ;dc_motor.c: 36:     CCPR2H=0;
   579  01FEB8  0E00               	movlw	0
   580  01FEBA  6EA6               	movwf	166,c	;volatile
   581                           
   582                           ;dc_motor.c: 37:     CCPR3H=0;
   583  01FEBC  0E00               	movlw	0
   584  01FEBE  010F               	movlb	15	; () banked
   585  01FEC0  6F25               	movwf	37,b	;volatile
   586                           
   587                           ;dc_motor.c: 38:     CCPR4H=0;
   588  01FEC2  0E00               	movlw	0
   589  01FEC4  6F21               	movwf	33,b	;volatile
   590                           
   591                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   592  01FEC6  0EFC               	movlw	-4
   593  01FEC8  16AD               	andwf	173,f,c	;volatile
   594                           
   595                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   596  01FECA  0EF3               	movlw	-13
   597  01FECC  16AD               	andwf	173,f,c	;volatile
   598                           
   599                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   600  01FECE  0ECF               	movlw	-49
   601  01FED0  16AD               	andwf	173,f,c	;volatile
   602                           
   603                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   604  01FED2  0E3F               	movlw	-193
   605  01FED4  16AD               	andwf	173,f,c	;volatile
   606  01FED6                     
   607                           ; BSR set to: 15
   608                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   609  01FED6  88AB               	bsf	171,4,c	;volatile
   610                           
   611                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   612  01FED8  50AB               	movf	171,w,c	;volatile
   613  01FEDA  0BF0               	andlw	-16
   614  01FEDC  090C               	iorlw	12
   615  01FEDE  6EAB               	movwf	171,c	;volatile
   616  01FEE0                     
   617                           ; BSR set to: 15
   618                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   619  01FEE0  8EAB               	bsf	171,7,c	;volatile
   620  01FEE2                     
   621                           ; BSR set to: 15
   622                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   623  01FEE2  88A7               	bsf	167,4,c	;volatile
   624                           
   625                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   626  01FEE4  50A7               	movf	167,w,c	;volatile
   627  01FEE6  0BF0               	andlw	-16
   628  01FEE8  090C               	iorlw	12
   629  01FEEA  6EA7               	movwf	167,c	;volatile
   630  01FEEC                     
   631                           ; BSR set to: 15
   632                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   633  01FEEC  8EA7               	bsf	167,7,c	;volatile
   634  01FEEE                     
   635                           ; BSR set to: 15
   636                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   637  01FEEE  8926               	bsf	38,4,b	;volatile
   638                           
   639                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   640  01FEF0  5126               	movf	38,w,b	;volatile
   641  01FEF2  0BF0               	andlw	-16
   642  01FEF4  090C               	iorlw	12
   643  01FEF6  6F26               	movwf	38,b	;volatile
   644  01FEF8                     
   645                           ; BSR set to: 15
   646                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   647  01FEF8  8F26               	bsf	38,7,b	;volatile
   648  01FEFA                     
   649                           ; BSR set to: 15
   650                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   651  01FEFA  8922               	bsf	34,4,b	;volatile
   652                           
   653                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   654  01FEFC  5122               	movf	34,w,b	;volatile
   655  01FEFE  0BF0               	andlw	-16
   656  01FF00  090C               	iorlw	12
   657  01FF02  6F22               	movwf	34,b	;volatile
   658  01FF04                     
   659                           ; BSR set to: 15
   660                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   661  01FF04  8F22               	bsf	34,7,b	;volatile
   662  01FF06                     
   663                           ; BSR set to: 15
   664  01FF06  0012               	return		;funcret
   665  01FF08                     __end_of_initDCmotorsPWM:
   666                           	callstack 0
   667                           
   668 ;; *************** function _buggy_lights_init *****************
   669 ;; Defined at:
   670 ;;		line 4 in file "buggy_lights.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;		None
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		None
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   688 ;;Total ram usage:        0 bytes
   689 ;; Hardware stack levels used: 1
   690 ;; This function calls:
   691 ;;		Nothing
   692 ;; This function is called by:
   693 ;;		_main
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           	psect	text2
   698  01FE24                     __ptext2:
   699                           	callstack 0
   700  01FE24                     _buggy_lights_init:
   701                           	callstack 30
   702  01FE24                     
   703                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
   704  01FE24  9884               	bcf	132,4,c	;volatile
   705                           
   706                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
   707  01FE26  9288               	bcf	136,1,c	;volatile
   708                           
   709                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
   710  01FE28  9684               	bcf	132,3,c	;volatile
   711                           
   712                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
   713  01FE2A  9086               	bcf	134,0,c	;volatile
   714                           
   715                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
   716  01FE2C  9088               	bcf	136,0,c	;volatile
   717                           
   718                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
   719  01FE2E  887C               	bsf	124,4,c	;volatile
   720                           
   721                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
   722  01FE30  8280               	bsf	128,1,c	;volatile
   723                           
   724                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
   725  01FE32  867C               	bsf	124,3,c	;volatile
   726                           
   727                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
   728  01FE34  807E               	bsf	126,0,c	;volatile
   729                           
   730                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
   731  01FE36  8080               	bsf	128,0,c	;volatile
   732  01FE38  0012               	return		;funcret
   733  01FE3A                     __end_of_buggy_lights_init:
   734                           	callstack 0
   735  0000                     
   736                           	psect	rparam
   737  0000                     
   738                           	psect	idloc
   739                           
   740                           ;Config register IDLOC0 @ 0x200000
   741                           ;	unspecified, using default values
   742  200000                     	org	2097152
   743  200000  0FFF               	dw	4095
   744                           
   745                           ;Config register IDLOC1 @ 0x200002
   746                           ;	unspecified, using default values
   747  200002                     	org	2097154
   748  200002  0FFF               	dw	4095
   749                           
   750                           ;Config register IDLOC2 @ 0x200004
   751                           ;	unspecified, using default values
   752  200004                     	org	2097156
   753  200004  0FFF               	dw	4095
   754                           
   755                           ;Config register IDLOC3 @ 0x200006
   756                           ;	unspecified, using default values
   757  200006                     	org	2097158
   758  200006  0FFF               	dw	4095
   759                           
   760                           ;Config register IDLOC4 @ 0x200008
   761                           ;	unspecified, using default values
   762  200008                     	org	2097160
   763  200008  0FFF               	dw	4095
   764                           
   765                           ;Config register IDLOC5 @ 0x20000A
   766                           ;	unspecified, using default values
   767  20000A                     	org	2097162
   768  20000A  0FFF               	dw	4095
   769                           
   770                           ;Config register IDLOC6 @ 0x20000C
   771                           ;	unspecified, using default values
   772  20000C                     	org	2097164
   773  20000C  0FFF               	dw	4095
   774                           
   775                           ;Config register IDLOC7 @ 0x20000E
   776                           ;	unspecified, using default values
   777  20000E                     	org	2097166
   778  20000E  0FFF               	dw	4095
   779                           
   780                           	psect	config
   781                           
   782                           ;Config register CONFIG1L @ 0x300000
   783                           ;	External Oscillator mode Selection bits
   784                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   785                           ;	Power-up default value for COSC bits
   786                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   787  300000                     	org	3145728
   788  300000  AA                 	db	170
   789                           
   790                           ;Config register CONFIG1H @ 0x300001
   791                           ;	unspecified, using default values
   792                           ;	Clock Out Enable bit
   793                           ;	CLKOUTEN = 0x1, unprogrammed default
   794                           ;	Clock Switch Enable bit
   795                           ;	CSWEN = 0x1, unprogrammed default
   796                           ;	Fail-Safe Clock Monitor Enable bit
   797                           ;	FCMEN = 0x1, unprogrammed default
   798  300001                     	org	3145729
   799  300001  FF                 	db	255
   800                           
   801                           ;Config register CONFIG2L @ 0x300002
   802                           ;	unspecified, using default values
   803                           ;	Master Clear Enable bit
   804                           ;	MCLRE = 0x1, unprogrammed default
   805                           ;	Power-up Timer Enable bit
   806                           ;	PWRTE = 0x1, unprogrammed default
   807                           ;	Low-power BOR enable bit
   808                           ;	LPBOREN = 0x1, unprogrammed default
   809                           ;	Brown-out Reset Enable bits
   810                           ;	BOREN = 0x3, unprogrammed default
   811  300002                     	org	3145730
   812  300002  FF                 	db	255
   813                           
   814                           ;Config register CONFIG2H @ 0x300003
   815                           ;	unspecified, using default values
   816                           ;	Brown Out Reset Voltage selection bits
   817                           ;	BORV = 0x3, unprogrammed default
   818                           ;	ZCD Disable bit
   819                           ;	ZCD = 0x1, unprogrammed default
   820                           ;	PPSLOCK bit One-Way Set Enable bit
   821                           ;	PPS1WAY = 0x1, unprogrammed default
   822                           ;	Stack Full/Underflow Reset Enable bit
   823                           ;	STVREN = 0x1, unprogrammed default
   824                           ;	Debugger Enable bit
   825                           ;	DEBUG = 0x1, unprogrammed default
   826                           ;	Extended Instruction Set Enable bit
   827                           ;	XINST = 0x1, unprogrammed default
   828  300003                     	org	3145731
   829  300003  FF                 	db	255
   830                           
   831                           ;Config register CONFIG3L @ 0x300004
   832                           ;	WDT Period Select bits
   833                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
   834                           ;	WDT operating mode
   835                           ;	WDTE = OFF, WDT Disabled
   836  300004                     	org	3145732
   837  300004  9F                 	db	159
   838                           
   839                           ;Config register CONFIG3H @ 0x300005
   840                           ;	unspecified, using default values
   841                           ;	WDT Window Select bits
   842                           ;	WDTCWS = 0x7, unprogrammed default
   843                           ;	WDT input clock selector
   844                           ;	WDTCCS = 0x7, unprogrammed default
   845  300005                     	org	3145733
   846  300005  FF                 	db	255
   847                           
   848                           ;Config register CONFIG4L @ 0x300006
   849                           ;	unspecified, using default values
   850                           ;	Write Protection Block 0
   851                           ;	WRT0 = 0x1, unprogrammed default
   852                           ;	Write Protection Block 1
   853                           ;	WRT1 = 0x1, unprogrammed default
   854                           ;	Write Protection Block 2
   855                           ;	WRT2 = 0x1, unprogrammed default
   856                           ;	Write Protection Block 3
   857                           ;	WRT3 = 0x1, unprogrammed default
   858                           ;	Write Protection Block 3
   859                           ;	WRT4 = 0x1, unprogrammed default
   860                           ;	Write Protection Block 3
   861                           ;	WRT5 = 0x1, unprogrammed default
   862                           ;	Write Protection Block 3
   863                           ;	WRT6 = 0x1, unprogrammed default
   864                           ;	Write Protection Block 3
   865                           ;	WRT7 = 0x1, unprogrammed default
   866  300006                     	org	3145734
   867  300006  FF                 	db	255
   868                           
   869                           ;Config register CONFIG4H @ 0x300007
   870                           ;	unspecified, using default values
   871                           ;	Configuration Register Write Protection bit
   872                           ;	WRTC = 0x1, unprogrammed default
   873                           ;	Boot Block Write Protection bit
   874                           ;	WRTB = 0x1, unprogrammed default
   875                           ;	Data EEPROM Write Protection bit
   876                           ;	WRTD = 0x1, unprogrammed default
   877                           ;	Scanner Enable bit
   878                           ;	SCANE = 0x1, unprogrammed default
   879                           ;	Low Voltage Programming Enable bit
   880                           ;	LVP = 0x1, unprogrammed default
   881  300007                     	org	3145735
   882  300007  FF                 	db	255
   883                           
   884                           ;Config register CONFIG5L @ 0x300008
   885                           ;	unspecified, using default values
   886                           ;	UserNVM Program Memory Code Protection bit
   887                           ;	CP = 0x1, unprogrammed default
   888                           ;	DataNVM Memory Code Protection bit
   889                           ;	CPD = 0x1, unprogrammed default
   890  300008                     	org	3145736
   891  300008  FF                 	db	255
   892                           
   893                           ;Config register CONFIG5H @ 0x300009
   894                           ;	unspecified, using default values
   895  300009                     	org	3145737
   896  300009  FF                 	db	255
   897                           
   898                           ;Config register CONFIG6L @ 0x30000A
   899                           ;	unspecified, using default values
   900                           ;	Table Read Protection Block 0
   901                           ;	EBTR0 = 0x1, unprogrammed default
   902                           ;	Table Read Protection Block 1
   903                           ;	EBTR1 = 0x1, unprogrammed default
   904                           ;	Table Read Protection Block 2
   905                           ;	EBTR2 = 0x1, unprogrammed default
   906                           ;	Table Read Protection Block 3
   907                           ;	EBTR3 = 0x1, unprogrammed default
   908                           ;	Table Read Protection Block 4
   909                           ;	EBTR4 = 0x1, unprogrammed default
   910                           ;	Table Read Protection Block 5
   911                           ;	EBTR5 = 0x1, unprogrammed default
   912                           ;	Table Read Protection Block 6
   913                           ;	EBTR6 = 0x1, unprogrammed default
   914                           ;	Table Read Protection Block 7
   915                           ;	EBTR7 = 0x1, unprogrammed default
   916  30000A                     	org	3145738
   917  30000A  FF                 	db	255
   918                           
   919                           ;Config register CONFIG6H @ 0x30000B
   920                           ;	unspecified, using default values
   921                           ;	Boot Block Table Read Protection bit
   922                           ;	EBTRB = 0x1, unprogrammed default
   923  30000B                     	org	3145739
   924  30000B  FF                 	db	255
   925                           tosu	equ	0xFFF
   926                           tosh	equ	0xFFE
   927                           tosl	equ	0xFFD
   928                           stkptr	equ	0xFFC
   929                           pclatu	equ	0xFFB
   930                           pclath	equ	0xFFA
   931                           pcl	equ	0xFF9
   932                           tblptru	equ	0xFF8
   933                           tblptrh	equ	0xFF7
   934                           tblptrl	equ	0xFF6
   935                           tablat	equ	0xFF5
   936                           prodh	equ	0xFF4
   937                           prodl	equ	0xFF3
   938                           indf0	equ	0xFEF
   939                           postinc0	equ	0xFEE
   940                           postdec0	equ	0xFED
   941                           preinc0	equ	0xFEC
   942                           plusw0	equ	0xFEB
   943                           fsr0h	equ	0xFEA
   944                           fsr0l	equ	0xFE9
   945                           wreg	equ	0xFE8
   946                           indf1	equ	0xFE7
   947                           postinc1	equ	0xFE6
   948                           postdec1	equ	0xFE5
   949                           preinc1	equ	0xFE4
   950                           plusw1	equ	0xFE3
   951                           fsr1h	equ	0xFE2
   952                           fsr1l	equ	0xFE1
   953                           bsr	equ	0xFE0
   954                           indf2	equ	0xFDF
   955                           postinc2	equ	0xFDE
   956                           postdec2	equ	0xFDD
   957                           preinc2	equ	0xFDC
   958                           plusw2	equ	0xFDB
   959                           fsr2h	equ	0xFDA
   960                           fsr2l	equ	0xFD9
   961                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        15
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      61
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    S842DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(SFR_2[1]), CCPR2H(SFR_3[1]), 

    S842DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(SFR_2[1]), CCPR1H(SFR_3[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0     407
                                              2 COMRAM    20    20      0
                  _buggy_lights_init
                    _initDCmotorsPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _initDCmotorsPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      3D       1       64.2%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      79       8        0.0%
DATA                 0      0      79       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Feb 26 16:32:42 2024

              _turn180Delay 002F                          l15 FE38                          l86 FF06  
                       u310 FF72                         u311 FF6A                         u330 FF92  
                       u331 FF8A                         u350 FFCE                         u351 FFC6  
                       u328 FF74                         u417 FFAE                         u370 FFEC  
                       u371 FFE4                         u348 FF94                         u368 FFD0  
                       u388 FFEE                         wreg 000FE8                        l1080 FE24  
                      l1400 FF4C                        l1410 FFBC                        l1402 FF54  
                      l1412 FFDA                        l1404 FF60                        l1406 FF80  
                      l1360 FED6                        l1352 FE78                        l1408 FFA4  
                      l1370 FEF8                        l1362 FEE0                        l1354 FE88  
                      l1372 FEFA                        l1364 FEE2                        l1356 FEAE  
                      l1380 FF14                        l1374 FF04                        l1366 FEEC  
                      l1358 FEB2                        l1390 FF30                        l1382 FF18  
                      l1368 FEEE                        l1392 FF38                        l1384 FF1C  
                      l1376 FF08                        l1394 FF3C                        l1386 FF20  
                      l1378 FF08                        l1396 FF40                        l1388 FF28  
                      l1398 FF44                _BAUD4CONbits 000EE9                        _T2PR 000FBC  
                      _main FF08                        fsr1l 000FE1                        start 0000  
              ___param_bank 000000                       ?_main 0019    __size_of_initDCmotorsPWM 0090  
               _turningGear 0039           _turnRight135Delay 0031                       tablat 000FF5  
           _turnLeft90Delay 0037             __initialization FE3A                __end_of_main 0000  
                    ??_main 001B               __activetblptr 000000                      _CCPR1H 000FAA  
                    _CCPR2H 000FA6                      _CCPR3H 000F25                      _CCPR4H 000F21  
                    _RC0PPS 000E62                      _RC4REG 000EE3                      _RE2PPS 000E74  
                    _RC7PPS 000E69                      _RD5PPS 000E6F                      _RE4PPS 000E76  
                    _RD6PPS 000E70                      _RG6PPS 000E88                      _RX4PPS 000E15  
                    _TX4REG 000EE4            _turnLeft135Delay 0033                _CCPTMRS0bits 000FAD  
                    clear_0 FE60                      clear_1 FE6C                      isa$std 000001  
              __pdataCOMRAM 002F                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8           ??_initDCmotorsPWM 001B           _buggy_lights_init FE24  
                __accesstop 0060     __end_of__initialization FE72          ?_buggy_lights_init 0019  
             ___rparam_used 000001              __pcstackCOMRAM 0019         ??_buggy_lights_init 0019  
 __end_of_buggy_lights_init FE3A                  __pbssBANK0 0060                _T2CLKCONbits 000FBF  
                   _SP4BRGH 000EE6                     _SP4BRGL 000EE5                     _SSP2ADD 000ED6  
                   _SSP2BUF 000ED5                     __Hparam 0000                     __Lparam 0000  
                   __pcinit FE3A                     __ramtop 0E00                     __ptext0 FF08  
                   __ptext1 FE78                     __ptext2 FE24                   _T2CONbits 000FBD  
                 _T2HLTbits 000FBE               _RxBufWriteCnt 0018                     _topGear 003C  
__size_of_buggy_lights_init 0016        end_of_initialization FE72                     postdec1 000FE5  
                   postinc0 000FEE             _initDCmotorsPWM FE78                   _TRISCbits 000F83  
                 _TRISDbits 000F84                   _TRISEbits 000F85                   _TRISFbits 000F86  
                 _TRISGbits 000F87                   _TRISHbits 000F88                 _CCP1CONbits 000FAB  
              _EUSART4RXbuf 0001                _EUSART4TXbuf 0060                 _CCP2CONbits 000FA7  
               _CCP3CONbits 000F26                 _CCP4CONbits 000F22                  main@motorL 001D  
                main@motorR 0026               __pidataCOMRAM FE15         start_initialization FE3A  
             _TxBufWriteCnt 0016            _turnRight90Delay 0035     __end_of_initDCmotorsPWM FF08  
            _topAdjustPower 003B                 __pbssCOMRAM 0001                _RxBufReadCnt 0017  
  initDCmotorsPWM@PWMperiod 0019                   _rampDelay 003D                    _LATCbits 000F7B  
                  _LATDbits 000F7C                    _LATEbits 000F7D                    _LATFbits 000F7E  
                  _LATGbits 000F7F                    _LATHbits 000F80                    _PIE4bits 000E2D  
                  _PIR4bits 000E37            ?_initDCmotorsPWM 0019                    _SSP2CON2 000EDA  
                  _SSP2STAT 000ED8                _TxBufReadCnt 0015                   copy_data0 FE4E  
                  __Hrparam 0000                    __Lrparam 0000               _topAdjustSide 003A  
                _ANSELDbits 000EA7                _SSP2CON1bits 000ED9                _SSP2CON2bits 000EDA  
             __size_of_main 00F8                    isa$xinst 000000                  _RC4STAbits 000EE7  
                _SSP2DATPPS 000E1D                  _SSP2CLKPPS 000E1C                  _TX4STAbits 000EE8  
