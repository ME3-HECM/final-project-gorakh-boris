

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Mar 14 19:54:10 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    89                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    90   000000                     
    91                           ; Generated 21/07/2023 GMT
    92                           ; 
    93                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution. Publication is not required when
   107                           ;        this file is used in an embedded application.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F67K40 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125   000000                     
   126                           	psect	idataCOMRAM
   127   0039A8                     __pidataCOMRAM:
   128                           	callstack 0
   129                           
   130                           ;initializer for _wall_threshold_clear
   131   0039A8  0032               	dw	50
   132                           
   133                           ;initializer for _manoeuvre_pointer
   134   0039AA  60                 	db	low _trail_manoeuvre
   135                           
   136                           ;initializer for _timer_low_pointer
   137   0039AB  74                 	db	low _trail_timer_low
   138                           
   139                           ;initializer for _timer_high_pointer
   140   0039AC  88                 	db	low _trail_timer_high
   141                           
   142                           ;initializer for _rampDelay
   143   0039AD  08                 	db	8
   144                           
   145                           ;initializer for _turningRightGear
   146   0039AE  28                 	db	40
   147                           
   148                           ;initializer for _turningLeftGear
   149   0039AF  28                 	db	40
   150                           
   151                           ;initializer for _bottomGearRight
   152   0039B0  15                 	db	21
   153                           
   154                           ;initializer for _bottomGearLeft
   155   0039B1  14                 	db	20
   156                           
   157                           ;initializer for _topGearRight
   158   0039B2  14                 	db	20
   159                           
   160                           ;initializer for _topGearLeft
   161   0039B3  14                 	db	20
   162                           
   163                           ;initializer for _sample_count
   164   0039B4  14                 	db	20
   165                           
   166                           	psect	idataBANK0
   167   00399A                     __pidataBANK0:
   168                           	callstack 0
   169                           
   170                           ;initializer for _squareDelay
   171   00399A  0988               	dw	2440
   172                           
   173                           ;initializer for _headbuttDelay
   174   00399C  0334               	dw	820
   175                           
   176                           ;initializer for _turn180Delay
   177   00399E  017C               	dw	380
   178                           
   179                           ;initializer for _turnRight135Delay
   180   0039A0  0106               	dw	262
   181                           
   182                           ;initializer for _turnLeft135Delay
   183   0039A2  00FA               	dw	250
   184                           
   185                           ;initializer for _turnRight90Delay
   186   0039A4  005C               	dw	92
   187                           
   188                           ;initializer for _turnLeft90Delay
   189   0039A6  0054               	dw	84
   190   000000                     _TMR0H	set	4052
   191   000000                     _RC4STAbits	set	3815
   192   000000                     _SP4BRGH	set	3814
   193   000000                     _LATEbits	set	3965
   194   000000                     _LATGbits	set	3967
   195   000000                     _TRISEbits	set	3973
   196   000000                     _TRISGbits	set	3975
   197   000000                     _LATFbits	set	3966
   198   000000                     _LATHbits	set	3968
   199   000000                     _TRISFbits	set	3974
   200   000000                     _TRISHbits	set	3976
   201   000000                     _SSP2CON2bits	set	3802
   202   000000                     _RX4PPS	set	3605
   203   000000                     _SSP2CLKPPS	set	3612
   204   000000                     _SSP2DATPPS	set	3613
   205   000000                     _RC7PPS	set	3689
   206   000000                     _RE2PPS	set	3700
   207   000000                     _LATAbits	set	3961
   208   000000                     _LATDbits	set	3964
   209   000000                     _TRISDbits	set	3972
   210   000000                     _PORTFbits	set	3982
   211   000000                     _T2PR	set	4028
   212   000000                     _T2CONbits	set	4029
   213   000000                     _CCPR2H	set	4006
   214   000000                     _CCPR1H	set	4010
   215   000000                     _TRISCbits	set	3971
   216   000000                     _TRISAbits	set	3969
   217   000000                     _LATCbits	set	3963
   218   000000                     _RE4PPS	set	3702
   219   000000                     _RG6PPS	set	3720
   220   000000                     _RD5PPS	set	3695
   221   000000                     _ANSELDbits	set	3751
   222   000000                     _SSP2ADD	set	3798
   223   000000                     _SSP2CON1bits	set	3801
   224   000000                     _CCPR4H	set	3873
   225   000000                     _CCPR3H	set	3877
   226   000000                     _TMR0L	set	4051
   227   000000                     _T0CON0bits	set	4053
   228   000000                     _T0CON1bits	set	4054
   229   000000                     _T2CLKCONbits	set	4031
   230   000000                     _T2HLTbits	set	4030
   231   000000                     _CCP1CONbits	set	4011
   232   000000                     _CCPTMRS0bits	set	4013
   233   000000                     _CCP2CONbits	set	4007
   234   000000                     _CCP3CONbits	set	3878
   235   000000                     _CCP4CONbits	set	3874
   236   000000                     _TX4REG	set	3812
   237   000000                     _SP4BRGL	set	3813
   238   000000                     _TX4STAbits	set	3816
   239   000000                     _BAUD4CONbits	set	3817
   240   000000                     _SSP2CON2	set	3802
   241   000000                     _SSP2STAT	set	3800
   242   000000                     _ANSELFbits	set	3764
   243   000000                     _SSP2BUF	set	3797
   244   000000                     _PIE0bits	set	3625
   245   000000                     _PIR4bits	set	3639
   246   000000                     _RC0PPS	set	3682
   247   000000                     _RD6PPS	set	3696
   248   000000                     _INTCONbits	set	4082
   249   000000                     _PIR0bits	set	3635
   250                           
   251                           	psect	smallconst
   252   000E00                     __psmallconst:
   253                           	callstack 0
   254   000E00  00                 	db	0
   255   000E01                     STR_5:
   256                           
   257                           ; BSR set to: 14
   258   000E01  25                 	db	37
   259   000E02  75                 	db	117	;'u'
   260   000E03  20                 	db	32
   261   000E04  25                 	db	37
   262   000E05  75                 	db	117	;'u'
   263   000E06  20                 	db	32
   264   000E07  25                 	db	37
   265   000E08  75                 	db	117	;'u'
   266   000E09  20                 	db	32
   267   000E0A  25                 	db	37
   268   000E0B  75                 	db	117	;'u'
   269   000E0C  20                 	db	32
   270   000E0D  0D                 	db	13
   271   000E0E  00                 	db	0
   272   000E0F                     STR_1:
   273                           
   274                           ; BSR set to: 14
   275   000E0F  25                 	db	37
   276   000E10  64                 	db	100	;'d'
   277   000E11  20                 	db	32
   278   000E12  0D                 	db	13
   279   000E13  00                 	db	0
   280   000E14                     STR_2:
   281                           
   282                           ; BSR set to: 14
   283   000E14  25                 	db	37
   284   000E15  64                 	db	100	;'d'
   285   000E16  20                 	db	32
   286   000E17  00                 	db	0
   287   000E18  00                 	db	0	; dummy byte at the end
   288   000000                     
   289                           ; #config settings
   290                           
   291                           	psect	cinit
   292   003326                     __pcinit:
   293                           	callstack 0
   294   003326                     start_initialization:
   295                           	callstack 0
   296   003326                     __initialization:
   297                           	callstack 0
   298                           
   299                           ; Initialize objects allocated to BANK0 (14 bytes)
   300                           ; load TBLPTR registers with __pidataBANK0
   301   003326  0E9A               	movlw	low __pidataBANK0
   302   003328  6EF6               	movwf	tblptrl,c
   303   00332A  0E39               	movlw	high __pidataBANK0
   304   00332C  6EF7               	movwf	tblptrh,c
   305   00332E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   306   003330  6EF8               	movwf	tblptru,c
   307   003332  EE00  F0BC         	lfsr	0,__pdataBANK0
   308   003336  EE10 F00E          	lfsr	1,14
   309   00333A                     copy_data0:
   310   00333A  0009               	tblrd		*+
   311   00333C  CFF5 FFEE          	movff	tablat,postinc0
   312   003340  50E5               	movf	postdec1,w,c
   313   003342  50E1               	movf	fsr1l,w,c
   314   003344  E1FA               	bnz	copy_data0
   315                           
   316                           ; Initialize objects allocated to COMRAM (13 bytes)
   317                           ; load TBLPTR registers with __pidataCOMRAM
   318   003346  0EA8               	movlw	low __pidataCOMRAM
   319   003348  6EF6               	movwf	tblptrl,c
   320   00334A  0E39               	movlw	high __pidataCOMRAM
   321   00334C  6EF7               	movwf	tblptrh,c
   322   00334E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   323   003350  6EF8               	movwf	tblptru,c
   324   003352  EE00  F04D         	lfsr	0,__pdataCOMRAM
   325   003356  EE10 F00D          	lfsr	1,13
   326   00335A                     copy_data1:
   327   00335A  0009               	tblrd		*+
   328   00335C  CFF5 FFEE          	movff	tablat,postinc0
   329   003360  50E5               	movf	postdec1,w,c
   330   003362  50E1               	movf	fsr1l,w,c
   331   003364  E1FA               	bnz	copy_data1
   332                           
   333                           ; Clear objects allocated to BANK0 (60 bytes)
   334   003366  EE00  F060         	lfsr	0,__pbssBANK0
   335   00336A  0E3C               	movlw	60
   336   00336C                     clear_0:
   337   00336C  6AEE               	clrf	postinc0,c
   338   00336E  06E8               	decf	wreg,f,c
   339   003370  E1FD               	bnz	clear_0
   340                           
   341                           ; Clear objects allocated to COMRAM (4 bytes)
   342   003372  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   343   003374  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   344   003376  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   345   003378  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   346   00337A                     end_of_initialization:
   347                           	callstack 0
   348   00337A                     __end_of__initialization:
   349                           	callstack 0
   350   00337A  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   351   00337C  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   352   00337E  0100               	movlb	0
   353   003380  EF12  F012         	goto	_main	;jump to C main() function
   354                           
   355                           	psect	bssCOMRAM
   356   00005A                     __pbssCOMRAM:
   357                           	callstack 0
   358   00005A                     _manoeuvre_count:
   359                           	callstack 0
   360   00005A                     	ds	1
   361   00005B                     _lost_flag:
   362                           	callstack 0
   363   00005B                     	ds	1
   364   00005C                     _return_flag:
   365                           	callstack 0
   366   00005C                     	ds	1
   367   00005D                     _returning:
   368                           	callstack 0
   369   00005D                     	ds	1
   370                           
   371                           	psect	dataCOMRAM
   372   00004D                     __pdataCOMRAM:
   373                           	callstack 0
   374   00004D                     _wall_threshold_clear:
   375                           	callstack 0
   376   00004D                     	ds	2
   377   00004F                     _manoeuvre_pointer:
   378                           	callstack 0
   379   00004F                     	ds	1
   380   000050                     _timer_low_pointer:
   381                           	callstack 0
   382   000050                     	ds	1
   383   000051                     _timer_high_pointer:
   384                           	callstack 0
   385   000051                     	ds	1
   386   000052                     _rampDelay:
   387                           	callstack 0
   388   000052                     	ds	1
   389   000053                     _turningRightGear:
   390                           	callstack 0
   391   000053                     	ds	1
   392   000054                     _turningLeftGear:
   393                           	callstack 0
   394   000054                     	ds	1
   395   000055                     _bottomGearRight:
   396                           	callstack 0
   397   000055                     	ds	1
   398   000056                     _bottomGearLeft:
   399                           	callstack 0
   400   000056                     	ds	1
   401   000057                     _topGearRight:
   402                           	callstack 0
   403   000057                     	ds	1
   404   000058                     _topGearLeft:
   405                           	callstack 0
   406   000058                     	ds	1
   407   000059                     _sample_count:
   408                           	callstack 0
   409   000059                     	ds	1
   410                           
   411                           	psect	bssBANK0
   412   000060                     __pbssBANK0:
   413                           	callstack 0
   414   000060                     _trail_manoeuvre:
   415                           	callstack 0
   416   000060                     	ds	20
   417   000074                     _trail_timer_low:
   418                           	callstack 0
   419   000074                     	ds	20
   420   000088                     _trail_timer_high:
   421                           	callstack 0
   422   000088                     	ds	20
   423                           
   424                           	psect	dataBANK0
   425   0000BC                     __pdataBANK0:
   426                           	callstack 0
   427   0000BC                     _squareDelay:
   428                           	callstack 0
   429   0000BC                     	ds	2
   430   0000BE                     _headbuttDelay:
   431                           	callstack 0
   432   0000BE                     	ds	2
   433   0000C0                     _turn180Delay:
   434                           	callstack 0
   435   0000C0                     	ds	2
   436   0000C2                     _turnRight135Delay:
   437                           	callstack 0
   438   0000C2                     	ds	2
   439   0000C4                     _turnLeft135Delay:
   440                           	callstack 0
   441   0000C4                     	ds	2
   442   0000C6                     _turnRight90Delay:
   443                           	callstack 0
   444   0000C6                     	ds	2
   445   0000C8                     _turnLeft90Delay:
   446                           	callstack 0
   447   0000C8                     	ds	2
   448                           
   449                           	psect	cstackBANK0
   450   00009C                     __pcstackBANK0:
   451                           	callstack 0
   452   00009C                     main@HSV_colour:
   453                           	callstack 0
   454                           
   455                           ; 6 bytes @ 0x0
   456   00009C                     	ds	6
   457   0000A2                     main@motorL:
   458                           	callstack 0
   459                           
   460                           ; 9 bytes @ 0x6
   461   0000A2                     	ds	9
   462   0000AB                     main@motorR:
   463                           	callstack 0
   464                           
   465                           ; 9 bytes @ 0xF
   466   0000AB                     	ds	9
   467   0000B4                     main@RGBC_colour:
   468                           	callstack 0
   469                           
   470                           ; 8 bytes @ 0x18
   471   0000B4                     	ds	8
   472                           
   473                           	psect	cstackCOMRAM
   474   000001                     __pcstackCOMRAM:
   475                           	callstack 0
   476   000001                     ??_toggle_brake_lights:
   477   000001                     ??_toggle_main_beam:
   478   000001                     ??_toggle_left_indicators:
   479   000001                     ??_toggle_right_indicators:
   480   000001                     ??_toggle_tricolour_LED:
   481   000001                     ??_I2C_2_Master_Idle:
   482   000001                     ?_max_RGB:
   483                           	callstack 0
   484   000001                     ?_min_RGB:
   485                           	callstack 0
   486   000001                     ?___wmul:
   487                           	callstack 0
   488   000001                     ?___lmul:
   489                           	callstack 0
   490   000001                     ?___lldiv:
   491                           	callstack 0
   492   000001                     ?___xxtofl:
   493                           	callstack 0
   494   000001                     max_RGB@p:
   495                           	callstack 0
   496   000001                     min_RGB@p:
   497                           	callstack 0
   498   000001                     colour_to_key@p1:
   499                           	callstack 0
   500   000001                     read_timer@tH:
   501                           	callstack 0
   502   000001                     write_timer@tL:
   503                           	callstack 0
   504   000001                     read_trail@tH:
   505                           	callstack 0
   506   000001                     write_trail@tL:
   507                           	callstack 0
   508   000001                     initDCmotorsPWM@PWMperiod:
   509                           	callstack 0
   510   000001                     ___wmul@multiplier:
   511                           	callstack 0
   512   000001                     ___lmul@multiplier:
   513                           	callstack 0
   514   000001                     ___lldiv@dividend:
   515                           	callstack 0
   516   000001                     ___xxtofl@val:
   517                           	callstack 0
   518                           
   519                           ; 4 bytes @ 0x0
   520   000001                     	ds	1
   521   000002                     ??_I2C_2_Master_Read:
   522   000002                     colour_to_key@p2:
   523                           	callstack 0
   524   000002                     I2C_2_Master_Write@data_byte:
   525                           	callstack 0
   526   000002                     read_timer@tL:
   527                           	callstack 0
   528   000002                     write_timer@tH:
   529                           	callstack 0
   530   000002                     read_trail@tL:
   531                           	callstack 0
   532   000002                     write_trail@man:
   533                           	callstack 0
   534                           
   535                           ; 1 bytes @ 0x1
   536   000002                     	ds	1
   537   000003                     color_writetoaddr@value:
   538                           	callstack 0
   539   000003                     I2C_2_Master_Read@ack:
   540                           	callstack 0
   541   000003                     read_trail@man:
   542                           	callstack 0
   543   000003                     write_trail@tH:
   544                           	callstack 0
   545   000003                     ___wmul@multiplicand:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x2
   549   000003                     	ds	1
   550   000004                     color_writetoaddr@address:
   551                           	callstack 0
   552   000004                     I2C_2_Master_Read@tmp:
   553                           	callstack 0
   554                           
   555                           ; 1 bytes @ 0x3
   556   000004                     	ds	1
   557   000005                     ??_color_click_init:
   558   000005                     ??___xxtofl:
   559   000005                     ?_color_read_Red:
   560                           	callstack 0
   561   000005                     ?_color_read_Green:
   562                           	callstack 0
   563   000005                     ?_color_read_Blue:
   564                           	callstack 0
   565   000005                     ?_color_read_Clear:
   566                           	callstack 0
   567   000005                     colour_to_key@key:
   568                           	callstack 0
   569   000005                     max_RGB@max_val:
   570                           	callstack 0
   571   000005                     min_RGB@min_val:
   572                           	callstack 0
   573   000005                     ___wmul@product:
   574                           	callstack 0
   575   000005                     ___lmul@multiplicand:
   576                           	callstack 0
   577   000005                     ___lldiv@divisor:
   578                           	callstack 0
   579                           
   580                           ; 4 bytes @ 0x4
   581   000005                     	ds	2
   582   000007                     ??_color_read_Red:
   583   000007                     ??_color_read_Green:
   584   000007                     ??_color_read_Blue:
   585   000007                     ??_color_read_Clear:
   586   000007                     ?___lwdiv:
   587                           	callstack 0
   588   000007                     ___lwdiv@dividend:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x6
   592   000007                     	ds	2
   593   000009                     ___xxtofl@sign:
   594                           	callstack 0
   595   000009                     ___lwdiv@divisor:
   596                           	callstack 0
   597   000009                     ___lmul@product:
   598                           	callstack 0
   599   000009                     ___lldiv@quotient:
   600                           	callstack 0
   601                           
   602                           ; 4 bytes @ 0x8
   603   000009                     	ds	1
   604   00000A                     ___xxtofl@exp:
   605                           	callstack 0
   606   00000A                     color_read_Red@tmp:
   607                           	callstack 0
   608   00000A                     color_read_Green@tmp:
   609                           	callstack 0
   610   00000A                     color_read_Blue@tmp:
   611                           	callstack 0
   612   00000A                     color_read_Clear@tmp:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x9
   616   00000A                     	ds	1
   617   00000B                     ___lwdiv@quotient:
   618                           	callstack 0
   619   00000B                     ___xxtofl@arg:
   620                           	callstack 0
   621                           
   622                           ; 4 bytes @ 0xA
   623   00000B                     	ds	1
   624   00000C                     read_RGBC@p:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0xB
   628   00000C                     	ds	1
   629   00000D                     wait_for_wall@p:
   630                           	callstack 0
   631   00000D                     ___lldiv@counter:
   632                           	callstack 0
   633   00000D                     ___lwdiv@counter:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0xC
   637   00000D                     	ds	1
   638   00000E                     average_RGBC@p:
   639                           	callstack 0
   640   00000E                     wait_for_wall@loss:
   641                           	callstack 0
   642   00000E                     convert_HSV@p1:
   643                           	callstack 0
   644   00000E                     setMotorPWM@m:
   645                           	callstack 0
   646                           
   647                           ; 1 bytes @ 0xD
   648   00000E                     	ds	1
   649   00000F                     ??_average_RGBC:
   650   00000F                     ??_setMotorPWM:
   651   00000F                     ?___flmul:
   652                           	callstack 0
   653   00000F                     convert_HSV@p2:
   654                           	callstack 0
   655   00000F                     ___flmul@b:
   656                           	callstack 0
   657                           
   658                           ; 4 bytes @ 0xE
   659   00000F                     	ds	1
   660   000010                     ??_convert_HSV:
   661                           
   662                           ; 1 bytes @ 0xF
   663   000010                     	ds	1
   664   000011                     average_RGBC@i:
   665                           	callstack 0
   666   000011                     setMotorPWM@posDuty:
   667                           	callstack 0
   668                           
   669                           ; 1 bytes @ 0x10
   670   000011                     	ds	1
   671   000012                     setMotorPWM@negDuty:
   672                           	callstack 0
   673   000012                     average_RGBC@temp_R:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x11
   677   000012                     	ds	1
   678   000013                     stop@mL:
   679                           	callstack 0
   680   000013                     turnLeft@mL:
   681                           	callstack 0
   682   000013                     turnRight@mL:
   683                           	callstack 0
   684   000013                     fullSpeedAhead@mL:
   685                           	callstack 0
   686   000013                     fullSpeedReverse@mL:
   687                           	callstack 0
   688   000013                     ___flmul@a:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x12
   692   000013                     	ds	1
   693   000014                     stop@mR:
   694                           	callstack 0
   695   000014                     turnLeft@mR:
   696                           	callstack 0
   697   000014                     turnRight@mR:
   698                           	callstack 0
   699   000014                     fullSpeedAhead@mR:
   700                           	callstack 0
   701   000014                     fullSpeedReverse@mR:
   702                           	callstack 0
   703                           
   704                           ; 1 bytes @ 0x13
   705   000014                     	ds	1
   706   000015                     ??_stop:
   707   000015                     ??_turnLeft:
   708   000015                     ??_turnRight:
   709   000015                     ??_fullSpeedAhead:
   710   000015                     ??_fullSpeedReverse:
   711                           
   712                           ; 1 bytes @ 0x14
   713   000015                     	ds	1
   714   000016                     turnLeft@leftGear:
   715                           	callstack 0
   716   000016                     turnRight@leftGear:
   717                           	callstack 0
   718   000016                     fullSpeedAhead@leftGear:
   719                           	callstack 0
   720   000016                     fullSpeedReverse@leftGear:
   721                           	callstack 0
   722   000016                     average_RGBC@temp_G:
   723                           	callstack 0
   724                           
   725                           ; 4 bytes @ 0x15
   726   000016                     	ds	1
   727   000017                     ??___flmul:
   728   000017                     turnLeft@rightGear:
   729                           	callstack 0
   730   000017                     turnRight@rightGear:
   731                           	callstack 0
   732   000017                     fullSpeedAhead@rightGear:
   733                           	callstack 0
   734   000017                     fullSpeedReverse@rightGear:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x16
   738   000017                     	ds	1
   739   000018                     turnLeft90@mL:
   740                           	callstack 0
   741   000018                     turnRight90@mL:
   742                           	callstack 0
   743   000018                     turnLeft135@mL:
   744                           	callstack 0
   745   000018                     turnRight135@mL:
   746                           	callstack 0
   747   000018                     UTurn@mL:
   748                           	callstack 0
   749   000018                     headbuttReverse@mL:
   750                           	callstack 0
   751   000018                     squareReverse@mL:
   752                           	callstack 0
   753   000018                     convert_HSV@sat_scale:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x17
   757   000018                     	ds	1
   758   000019                     turnLeft90@mR:
   759                           	callstack 0
   760   000019                     turnRight90@mR:
   761                           	callstack 0
   762   000019                     turnLeft135@mR:
   763                           	callstack 0
   764   000019                     turnRight135@mR:
   765                           	callstack 0
   766   000019                     UTurn@mR:
   767                           	callstack 0
   768   000019                     headbuttReverse@mR:
   769                           	callstack 0
   770   000019                     squareReverse@mR:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0x18
   774   000019                     	ds	1
   775   00001A                     ??_turnLeft90:
   776   00001A                     ??_turnRight90:
   777   00001A                     ??_turnLeft135:
   778   00001A                     ??_turnRight135:
   779   00001A                     ??_UTurn:
   780   00001A                     ??_headbuttReverse:
   781   00001A                     ??_squareReverse:
   782   00001A                     convert_HSV@m:
   783                           	callstack 0
   784   00001A                     average_RGBC@temp_B:
   785                           	callstack 0
   786                           
   787                           ; 4 bytes @ 0x19
   788   00001A                     	ds	1
   789   00001B                     ___flmul@sign:
   790                           	callstack 0
   791                           
   792                           ; 1 bytes @ 0x1A
   793   00001B                     	ds	1
   794   00001C                     card_red@mL:
   795                           	callstack 0
   796   00001C                     card_green@mL:
   797                           	callstack 0
   798   00001C                     card_blue@mL:
   799                           	callstack 0
   800   00001C                     card_yellow@mL:
   801                           	callstack 0
   802   00001C                     card_pink@mL:
   803                           	callstack 0
   804   00001C                     card_orange@mL:
   805                           	callstack 0
   806   00001C                     card_cyan@mL:
   807                           	callstack 0
   808   00001C                     card_white@mL:
   809                           	callstack 0
   810   00001C                     convert_HSV@sat:
   811                           	callstack 0
   812   00001C                     ___flmul@grs:
   813                           	callstack 0
   814                           
   815                           ; 4 bytes @ 0x1B
   816   00001C                     	ds	1
   817   00001D                     card_red@mR:
   818                           	callstack 0
   819   00001D                     card_green@mR:
   820                           	callstack 0
   821   00001D                     card_blue@mR:
   822                           	callstack 0
   823   00001D                     card_yellow@mR:
   824                           	callstack 0
   825   00001D                     card_pink@mR:
   826                           	callstack 0
   827   00001D                     card_orange@mR:
   828                           	callstack 0
   829   00001D                     card_cyan@mR:
   830                           	callstack 0
   831   00001D                     card_white@mR:
   832                           	callstack 0
   833                           
   834                           ; 1 bytes @ 0x1C
   835   00001D                     	ds	1
   836   00001E                     card_red@backtrack:
   837                           	callstack 0
   838   00001E                     card_green@backtrack:
   839                           	callstack 0
   840   00001E                     card_blue@backtrack:
   841                           	callstack 0
   842   00001E                     card_yellow@backtrack:
   843                           	callstack 0
   844   00001E                     card_pink@backtrack:
   845                           	callstack 0
   846   00001E                     card_orange@backtrack:
   847                           	callstack 0
   848   00001E                     card_cyan@backtrack:
   849                           	callstack 0
   850   00001E                     convert_HSV@hue:
   851                           	callstack 0
   852   00001E                     average_RGBC@temp_C:
   853                           	callstack 0
   854                           
   855                           ; 4 bytes @ 0x1D
   856   00001E                     	ds	1
   857   00001F                     ??_card_red:
   858   00001F                     ??_card_green:
   859   00001F                     ??_card_blue:
   860   00001F                     ??_card_yellow:
   861   00001F                     ??_card_pink:
   862   00001F                     ??_card_orange:
   863   00001F                     ??_card_cyan:
   864                           
   865                           ; 1 bytes @ 0x1E
   866   00001F                     	ds	1
   867   000020                     ___flmul@aexp:
   868                           	callstack 0
   869   000020                     convert_HSV@temp_615:
   870                           	callstack 0
   871                           
   872                           ; 4 bytes @ 0x1F
   873   000020                     	ds	1
   874   000021                     pick_card@mL:
   875                           	callstack 0
   876   000021                     ___flmul@bexp:
   877                           	callstack 0
   878                           
   879                           ; 1 bytes @ 0x20
   880   000021                     	ds	1
   881   000022                     pick_card@mR:
   882                           	callstack 0
   883   000022                     ___flmul@prod:
   884                           	callstack 0
   885                           
   886                           ; 4 bytes @ 0x21
   887   000022                     	ds	1
   888   000023                     pick_card@backtrack:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x22
   892   000023                     	ds	1
   893   000024                     pick_card@key:
   894                           	callstack 0
   895   000024                     convert_HSV@temp:
   896                           	callstack 0
   897                           
   898                           ; 4 bytes @ 0x23
   899   000024                     	ds	1
   900   000025                     ??_pick_card:
   901                           
   902                           ; 1 bytes @ 0x24
   903   000025                     	ds	1
   904   000026                     ___flmul@temp:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x25
   908   000026                     	ds	1
   909   000027                     return_to_sender@mL:
   910                           	callstack 0
   911                           
   912                           ; 1 bytes @ 0x26
   913   000027                     	ds	1
   914   000028                     ?___fltol:
   915                           	callstack 0
   916   000028                     return_to_sender@mR:
   917                           	callstack 0
   918   000028                     convert_HSV@temp_611:
   919                           	callstack 0
   920   000028                     ___fltol@f1:
   921                           	callstack 0
   922                           
   923                           ; 4 bytes @ 0x27
   924   000028                     	ds	1
   925   000029                     return_to_sender@timerH:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0x28
   929   000029                     	ds	1
   930   00002A                     return_to_sender@timerL:
   931                           	callstack 0
   932                           
   933                           ; 1 bytes @ 0x29
   934   00002A                     	ds	1
   935   00002B                     return_to_sender@mann:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x2A
   939   00002B                     	ds	1
   940   00002C                     ??___fltol:
   941   00002C                     convert_HSV@temp_612:
   942                           	callstack 0
   943                           
   944                           ; 4 bytes @ 0x2B
   945   00002C                     	ds	4
   946   000030                     ___fltol@sign1:
   947                           	callstack 0
   948   000030                     convert_HSV@temp_613:
   949                           	callstack 0
   950                           
   951                           ; 4 bytes @ 0x2F
   952   000030                     	ds	1
   953   000031                     ___fltol@exp1:
   954                           	callstack 0
   955                           
   956                           ; 1 bytes @ 0x30
   957   000031                     	ds	1
   958   000032                     scale_RGB@p:
   959                           	callstack 0
   960                           
   961                           ; 1 bytes @ 0x31
   962   000032                     	ds	1
   963   000033                     ??_scale_RGB:
   964                           
   965                           ; 1 bytes @ 0x32
   966   000033                     	ds	1
   967   000034                     convert_HSV@temp_614:
   968                           	callstack 0
   969                           
   970                           ; 4 bytes @ 0x33
   971   000034                     	ds	4
   972   000038                     convert_HSV@temp_610:
   973                           	callstack 0
   974                           
   975                           ; 4 bytes @ 0x37
   976   000038                     	ds	4
   977   00003C                     convert_HSV@hue_scale:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x3B
   981   00003C                     	ds	2
   982   00003E                     convert_HSV@M:
   983                           	callstack 0
   984                           
   985                           ; 2 bytes @ 0x3D
   986   00003E                     	ds	2
   987   000040                     convert_HSV@C:
   988                           	callstack 0
   989                           
   990                           ; 2 bytes @ 0x3F
   991   000040                     	ds	2
   992   000042                     forward_navigation@mL:
   993                           	callstack 0
   994                           
   995                           ; 1 bytes @ 0x41
   996   000042                     	ds	1
   997   000043                     forward_navigation@mR:
   998                           	callstack 0
   999                           
  1000                           ; 1 bytes @ 0x42
  1001   000043                     	ds	1
  1002   000044                     forward_navigation@p1:
  1003                           	callstack 0
  1004                           
  1005                           ; 1 bytes @ 0x43
  1006   000044                     	ds	1
  1007   000045                     forward_navigation@p2:
  1008                           	callstack 0
  1009                           
  1010                           ; 1 bytes @ 0x44
  1011   000045                     	ds	1
  1012   000046                     ??_forward_navigation:
  1013                           
  1014                           ; 1 bytes @ 0x45
  1015   000046                     	ds	2
  1016   000048                     forward_navigation@timerH:
  1017                           	callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x47
  1020   000048                     	ds	1
  1021   000049                     forward_navigation@timerL:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x48
  1025   000049                     	ds	1
  1026   00004A                     forward_navigation@mann:
  1027                           	callstack 0
  1028                           
  1029                           ; 1 bytes @ 0x49
  1030   00004A                     	ds	1
  1031   00004B                     ??_main:
  1032                           
  1033                           ; 1 bytes @ 0x4A
  1034   00004B                     	ds	2
  1035                           
  1036 ;;
  1037 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1038 ;;
  1039 ;; *************** function _main *****************
  1040 ;; Defined at:
  1041 ;;		line 31 in file "main.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;  motorR          9   15[BANK0 ] struct DC_motor
  1046 ;;  motorL          9    6[BANK0 ] struct DC_motor
  1047 ;;  RGBC_colour     8   24[BANK0 ] struct RGBC_val
  1048 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
  1049 ;;  PWMcycle        2    0        unsigned int 
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1060 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1062 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1063 ;;Total ram usage:       34 bytes
  1064 ;; Hardware stack levels required when called: 8
  1065 ;; This function calls:
  1066 ;;		_Timer0_init
  1067 ;;		_buggy_lights_init
  1068 ;;		_color_click_init
  1069 ;;		_forward_navigation
  1070 ;;		_initDCmotorsPWM
  1071 ;;		_initUSART4
  1072 ;;		_return_to_sender
  1073 ;; This function is called by:
  1074 ;;		Startup code after reset
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text0
  1079   002424                     __ptext0:
  1080                           	callstack 0
  1081   002424                     _main:
  1082                           	callstack 23
  1083   002424                     
  1084                           ;main.c: 32:     struct RGBC_val RGBC_colour;;main.c: 33:         RGBC_colour.R = 0;
  1085   002424  0E00               	movlw	0
  1086   002426  0100               	movlb	0	; () banked
  1087   002428  6FB5               	movwf	(main@RGBC_colour+1)& (0+255),b
  1088   00242A  0E00               	movlw	0
  1089   00242C  6FB4               	movwf	main@RGBC_colour& (0+255),b
  1090                           
  1091                           ;main.c: 34:         RGBC_colour.G = 0;
  1092   00242E  0E00               	movlw	0
  1093   002430  6FB7               	movwf	(main@RGBC_colour+3)& (0+255),b
  1094   002432  0E00               	movlw	0
  1095   002434  6FB6               	movwf	(main@RGBC_colour+2)& (0+255),b
  1096                           
  1097                           ;main.c: 35:         RGBC_colour.B = 0;
  1098   002436  0E00               	movlw	0
  1099   002438  6FB9               	movwf	(main@RGBC_colour+5)& (0+255),b
  1100   00243A  0E00               	movlw	0
  1101   00243C  6FB8               	movwf	(main@RGBC_colour+4)& (0+255),b
  1102                           
  1103                           ;main.c: 36:         RGBC_colour.C = 0;
  1104   00243E  0E00               	movlw	0
  1105   002440  6FBB               	movwf	(main@RGBC_colour+7)& (0+255),b
  1106   002442  0E00               	movlw	0
  1107   002444  6FBA               	movwf	(main@RGBC_colour+6)& (0+255),b
  1108                           
  1109                           ;main.c: 38:     struct HSV_val HSV_colour;;main.c: 39:         HSV_colour.H = 0;
  1110   002446  0E00               	movlw	0
  1111   002448  6F9D               	movwf	(main@HSV_colour+1)& (0+255),b
  1112   00244A  0E00               	movlw	0
  1113   00244C  6F9C               	movwf	main@HSV_colour& (0+255),b
  1114                           
  1115                           ;main.c: 40:         HSV_colour.S = 0;
  1116   00244E  0E00               	movlw	0
  1117   002450  6F9F               	movwf	(main@HSV_colour+3)& (0+255),b
  1118   002452  0E00               	movlw	0
  1119   002454  6F9E               	movwf	(main@HSV_colour+2)& (0+255),b
  1120                           
  1121                           ;main.c: 41:         HSV_colour.V = 0;
  1122   002456  0E00               	movlw	0
  1123   002458  6FA1               	movwf	(main@HSV_colour+5)& (0+255),b
  1124   00245A  0E00               	movlw	0
  1125   00245C  6FA0               	movwf	(main@HSV_colour+4)& (0+255),b
  1126                           
  1127                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 45:         motorL.power = 0;
  1128   00245E  0E00               	movlw	0
  1129   002460  6FA2               	movwf	main@motorL& (0+255),b
  1130                           
  1131                           ;main.c: 46:         motorL.direction = 1;
  1132   002462  0E01               	movlw	1
  1133   002464  6FA3               	movwf	(main@motorL+1)& (0+255),b
  1134                           
  1135                           ;main.c: 47:         motorL.brakemode = 1;
  1136   002466  0E01               	movlw	1
  1137   002468  6FA4               	movwf	(main@motorL+2)& (0+255),b
  1138   00246A                     
  1139                           ; BSR set to: 0
  1140                           ;main.c: 48:         motorL.PWMperiod = PWMcycle;
  1141   00246A  0E00               	movlw	0
  1142   00246C  6FA6               	movwf	(main@motorL+4)& (0+255),b
  1143   00246E  0E63               	movlw	99
  1144   002470  6FA5               	movwf	(main@motorL+3)& (0+255),b
  1145   002472                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 49:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1148   002472  0EAA               	movlw	170
  1149   002474  6FA7               	movwf	(main@motorL+5)& (0+255),b
  1150   002476  0E0F               	movlw	15
  1151   002478  6FA8               	movwf	(main@motorL+6)& (0+255),b
  1152   00247A                     
  1153                           ; BSR set to: 0
  1154                           ;main.c: 50:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1155   00247A  0EA6               	movlw	166
  1156   00247C  6FA9               	movwf	(main@motorL+7)& (0+255),b
  1157   00247E  0E0F               	movlw	15
  1158   002480  6FAA               	movwf	(main@motorL+8)& (0+255),b
  1159                           
  1160                           ;main.c: 51:         motorR.power = 0;
  1161   002482  0E00               	movlw	0
  1162   002484  6FAB               	movwf	main@motorR& (0+255),b
  1163                           
  1164                           ;main.c: 52:         motorR.direction = 1;
  1165   002486  0E01               	movlw	1
  1166   002488  6FAC               	movwf	(main@motorR+1)& (0+255),b
  1167                           
  1168                           ;main.c: 53:         motorR.brakemode = 1;
  1169   00248A  0E01               	movlw	1
  1170   00248C  6FAD               	movwf	(main@motorR+2)& (0+255),b
  1171   00248E                     
  1172                           ; BSR set to: 0
  1173                           ;main.c: 54:         motorR.PWMperiod = PWMcycle;
  1174   00248E  0E00               	movlw	0
  1175   002490  6FAF               	movwf	(main@motorR+4)& (0+255),b
  1176   002492  0E63               	movlw	99
  1177   002494  6FAE               	movwf	(main@motorR+3)& (0+255),b
  1178   002496                     
  1179                           ; BSR set to: 0
  1180                           ;main.c: 55:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1181   002496  0E25               	movlw	37
  1182   002498  6FB0               	movwf	(main@motorR+5)& (0+255),b
  1183   00249A  0E0F               	movlw	15
  1184   00249C  6FB1               	movwf	(main@motorR+6)& (0+255),b
  1185   00249E                     
  1186                           ; BSR set to: 0
  1187                           ;main.c: 56:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1188   00249E  0E21               	movlw	33
  1189   0024A0  6FB2               	movwf	(main@motorR+7)& (0+255),b
  1190   0024A2  0E0F               	movlw	15
  1191   0024A4  6FB3               	movwf	(main@motorR+8)& (0+255),b
  1192   0024A6                     
  1193                           ; BSR set to: 0
  1194                           ;main.c: 59:     initDCmotorsPWM(PWMcycle);
  1195   0024A6  0E00               	movlw	0
  1196   0024A8  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1197   0024AA  0E63               	movlw	99
  1198   0024AC  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1199   0024AE  EC95  F016         	call	_initDCmotorsPWM	;wreg free
  1200                           
  1201                           ;main.c: 60:     buggy_lights_init();
  1202   0024B2  ECD3  F01B         	call	_buggy_lights_init	;wreg free
  1203   0024B6                     
  1204                           ;main.c: 61:     color_click_init();
  1205   0024B6  ECB9  F01B         	call	_color_click_init	;wreg free
  1206   0024BA                     
  1207                           ;main.c: 62:     initUSART4();
  1208   0024BA  ECB3  F01C         	call	_initUSART4	;wreg free
  1209   0024BE                     
  1210                           ;main.c: 63:     Timer0_init();
  1211   0024BE  EC72  F01C         	call	_Timer0_init	;wreg free
  1212   0024C2                     
  1213                           ;main.c: 67:         TRISDbits.TRISD7 = 0;
  1214   0024C2  9E84               	bcf	132,7,c	;volatile
  1215   0024C4                     
  1216                           ;main.c: 68:         TRISHbits.TRISH3 = 0;
  1217   0024C4  9688               	bcf	136,3,c	;volatile
  1218   0024C6                     
  1219                           ;main.c: 70:         LATDbits.LATD7 = 0;
  1220   0024C6  9E7C               	bcf	124,7,c	;volatile
  1221   0024C8                     
  1222                           ;main.c: 71:         LATHbits.LATH3 = 0;
  1223   0024C8  9680               	bcf	128,3,c	;volatile
  1224   0024CA                     
  1225                           ;main.c: 75:         TRISFbits.TRISF2 = 1;
  1226   0024CA  8486               	bsf	134,2,c	;volatile
  1227   0024CC                     
  1228                           ;main.c: 76:         TRISFbits.TRISF3 = 1;
  1229   0024CC  8686               	bsf	134,3,c	;volatile
  1230   0024CE                     
  1231                           ;main.c: 78:         ANSELFbits.ANSELF2 = 0;
  1232   0024CE  010E               	movlb	14	; () banked
  1233   0024D0  95B4               	bcf	180,2,b	;volatile
  1234   0024D2                     
  1235                           ; BSR set to: 14
  1236                           ;main.c: 79:         ANSELFbits.ANSELF3 = 0;
  1237   0024D2  97B4               	bcf	180,3,b	;volatile
  1238   0024D4                     l436:
  1239   0024D4  B68E               	btfsc	142,3,c	;volatile
  1240   0024D6  EF6F  F012         	goto	u3271
  1241   0024DA  EF71  F012         	goto	u3270
  1242   0024DE                     u3271:
  1243   0024DE  EF6A  F012         	goto	l436
  1244   0024E2                     u3270:
  1245   0024E2                     
  1246                           ;main.c: 85:     LATDbits.LATD7 = !LATDbits.LATD7;
  1247   0024E2  AE7C               	btfss	124,7,c	;volatile
  1248   0024E4  EF76  F012         	goto	u3281
  1249   0024E8  EF7A  F012         	goto	u3280
  1250   0024EC                     u3281:
  1251   0024EC  6A4B               	clrf	??_main^0,c
  1252   0024EE  2A4B               	incf	??_main^0,f,c
  1253   0024F0  EF7B  F012         	goto	u3298
  1254   0024F4                     u3280:
  1255   0024F4  6A4B               	clrf	??_main^0,c
  1256   0024F6                     u3298:
  1257   0024F6  324B               	rrcf	??_main^0,f,c
  1258   0024F8  324B               	rrcf	??_main^0,f,c
  1259   0024FA  507C               	movf	124,w,c	;volatile
  1260   0024FC  184B               	xorwf	??_main^0,w,c
  1261   0024FE  0B7F               	andlw	-129
  1262   002500  184B               	xorwf	??_main^0,w,c
  1263   002502  6E7C               	movwf	124,c	;volatile
  1264                           
  1265                           ;main.c: 86:     LATHbits.LATH3 = !LATHbits.LATH3;
  1266   002504  A680               	btfss	128,3,c	;volatile
  1267   002506  EF87  F012         	goto	u3301
  1268   00250A  EF8B  F012         	goto	u3300
  1269   00250E                     u3301:
  1270   00250E  6A4B               	clrf	??_main^0,c
  1271   002510  2A4B               	incf	??_main^0,f,c
  1272   002512  EF8C  F012         	goto	u3318
  1273   002516                     u3300:
  1274   002516  6A4B               	clrf	??_main^0,c
  1275   002518                     u3318:
  1276   002518  464B               	rlncf	??_main^0,f,c
  1277   00251A  464B               	rlncf	??_main^0,f,c
  1278   00251C  464B               	rlncf	??_main^0,f,c
  1279   00251E  5080               	movf	128,w,c	;volatile
  1280   002520  184B               	xorwf	??_main^0,w,c
  1281   002522  0BF7               	andlw	-9
  1282   002524  184B               	xorwf	??_main^0,w,c
  1283   002526  6E80               	movwf	128,c	;volatile
  1284   002528                     
  1285                           ;main.c: 89:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1286   002528  0E52               	movlw	82
  1287   00252A  6E4C               	movwf	(??_main+1)^0,c
  1288   00252C  0E2B               	movlw	43
  1289   00252E  6E4B               	movwf	??_main^0,c
  1290   002530  0E00               	movlw	0
  1291   002532                     u3327:
  1292   002532  2EE8               	decfsz	wreg,f,c
  1293   002534  D7FE               	bra	u3327
  1294   002536  2E4B               	decfsz	??_main^0,f,c
  1295   002538  D7FC               	bra	u3327
  1296   00253A  2E4C               	decfsz	(??_main+1)^0,f,c
  1297   00253C  D7FA               	bra	u3327
  1298   00253E  D000               	nop2	
  1299   002540                     
  1300                           ;main.c: 92:     forward_navigation(&motorL, &motorR, &HSV_colour, &RGBC_colour);
  1301   002540  0EA2               	movlw	low main@motorL
  1302   002542  6E42               	movwf	forward_navigation@mL^0,c
  1303   002544  0EAB               	movlw	low main@motorR
  1304   002546  6E43               	movwf	forward_navigation@mR^0,c
  1305   002548  0E9C               	movlw	low main@HSV_colour
  1306   00254A  6E44               	movwf	forward_navigation@p1^0,c
  1307   00254C  0EB4               	movlw	low main@RGBC_colour
  1308   00254E  6E45               	movwf	forward_navigation@p2^0,c
  1309   002550  EC92  F010         	call	_forward_navigation	;wreg free
  1310   002554                     
  1311                           ;main.c: 93:     return_to_sender(&motorL, &motorR);
  1312   002554  0EA2               	movlw	low main@motorL
  1313   002556  6E27               	movwf	return_to_sender@mL^0,c
  1314   002558  0EAB               	movlw	low main@motorR
  1315   00255A  6E28               	movwf	return_to_sender@mR^0,c
  1316   00255C  EC44  F016         	call	_return_to_sender	;wreg free
  1317   002560  EF1E  F000         	goto	start
  1318   002564                     __end_of_main:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _return_to_sender *****************
  1322 ;; Defined at:
  1323 ;;		line 207 in file "timers.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  mL              1   38[COMRAM] PTR struct DC_motor
  1326 ;;		 -> main@motorL(9), 
  1327 ;;  mR              1   39[COMRAM] PTR struct DC_motor
  1328 ;;		 -> main@motorR(9), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  mann            1   42[COMRAM] unsigned char 
  1331 ;;  timerL          1   41[COMRAM] unsigned char 
  1332 ;;  timerH          1   40[COMRAM] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1343 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1345 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1346 ;;Total ram usage:        5 bytes
  1347 ;; Hardware stack levels used: 1
  1348 ;; Hardware stack levels required when called: 7
  1349 ;; This function calls:
  1350 ;;		_fullSpeedAhead
  1351 ;;		_pick_card
  1352 ;;		_read_trail
  1353 ;;		_start_timer
  1354 ;;		_stop
  1355 ;;		_stop_timer
  1356 ;;		_toggle_main_beam
  1357 ;;		_write_timer
  1358 ;; This function is called by:
  1359 ;;		_main
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text1
  1364   002C88                     __ptext1:
  1365                           	callstack 0
  1366   002C88                     _return_to_sender:
  1367                           	callstack 23
  1368   002C88                     
  1369                           ;timers.c: 207: void return_to_sender(DC_motor *mL, DC_motor *mR);timers.c: 208: {;timer
      +                          s.c: 210:     while (manoeuvre_count != 0) {
  1370   002C88  EF8C  F016         	goto	l3951
  1371   002C8C                     l3925:
  1372                           
  1373                           ;timers.c: 213:         unsigned char timerH = 0;
  1374   002C8C  0E00               	movlw	0
  1375   002C8E  6E29               	movwf	return_to_sender@timerH^0,c
  1376                           
  1377                           ;timers.c: 214:         unsigned char timerL = 0;
  1378   002C90  0E00               	movlw	0
  1379   002C92  6E2A               	movwf	return_to_sender@timerL^0,c
  1380                           
  1381                           ;timers.c: 215:         unsigned char mann = 0;
  1382   002C94  0E00               	movlw	0
  1383   002C96  6E2B               	movwf	return_to_sender@mann^0,c
  1384   002C98                     
  1385                           ;timers.c: 218:         read_trail(&timerH, &timerL, &mann);
  1386   002C98  0E29               	movlw	low return_to_sender@timerH
  1387   002C9A  6E01               	movwf	read_trail@tH^0,c
  1388   002C9C  0E2A               	movlw	low return_to_sender@timerL
  1389   002C9E  6E02               	movwf	read_trail@tL^0,c
  1390   002CA0  0E2B               	movlw	low return_to_sender@mann
  1391   002CA2  6E03               	movwf	read_trail@man^0,c
  1392   002CA4  ECF0  F01A         	call	_read_trail	;wreg free
  1393   002CA8                     
  1394                           ;timers.c: 221:         if (mann != 8) {
  1395   002CA8  0E08               	movlw	8
  1396   002CAA  182B               	xorwf	return_to_sender@mann^0,w,c
  1397   002CAC  B4D8               	btfsc	status,2,c
  1398   002CAE  EF5B  F016         	goto	u3241
  1399   002CB2  EF5D  F016         	goto	u3240
  1400   002CB6                     u3241:
  1401   002CB6  EF67  F016         	goto	l3933
  1402   002CBA                     u3240:
  1403   002CBA                     
  1404                           ;timers.c: 222:             pick_card(mL, mR, returning, mann);
  1405   002CBA  C027  F021         	movff	return_to_sender@mL,pick_card@mL
  1406   002CBE  C028  F022         	movff	return_to_sender@mR,pick_card@mR
  1407   002CC2  C05D  F023         	movff	_returning,pick_card@backtrack
  1408   002CC6  C02B  F024         	movff	return_to_sender@mann,pick_card@key
  1409   002CCA  EC35  F013         	call	_pick_card	;wreg free
  1410   002CCE                     l3933:
  1411                           
  1412                           ;timers.c: 226:         toggle_main_beam();
  1413   002CCE  EC28  F01C         	call	_toggle_main_beam	;wreg free
  1414   002CD2                     
  1415                           ;timers.c: 229:         write_timer(0b11111111 - timerH, 0b11111111 - timerL);
  1416   002CD2  502A               	movf	return_to_sender@timerL^0,w,c
  1417   002CD4  0AFF               	xorlw	255
  1418   002CD6  6E01               	movwf	write_timer@tL^0,c
  1419   002CD8  5029               	movf	return_to_sender@timerH^0,w,c
  1420   002CDA  0AFF               	xorlw	255
  1421   002CDC  ECE7  F01C         	call	_write_timer
  1422   002CE0                     
  1423                           ;timers.c: 230:         start_timer();
  1424   002CE0  ECFE  F01C         	call	_start_timer	;wreg free
  1425   002CE4                     
  1426                           ;timers.c: 231:         fullSpeedAhead(mL, mR);
  1427   002CE4  C027  F013         	movff	return_to_sender@mL,fullSpeedAhead@mL
  1428   002CE8  C028  F014         	movff	return_to_sender@mR,fullSpeedAhead@mR
  1429   002CEC  EC82  F014         	call	_fullSpeedAhead	;wreg free
  1430   002CF0                     l3941:
  1431   002CF0  505C               	movf	_return_flag^0,w,c
  1432   002CF2  B4D8               	btfsc	status,2,c
  1433   002CF4  EF7E  F016         	goto	u3251
  1434   002CF8  EF80  F016         	goto	u3250
  1435   002CFC                     u3251:
  1436   002CFC  EF78  F016         	goto	l3941
  1437   002D00                     u3250:
  1438   002D00                     
  1439                           ;timers.c: 237:         stop(mL, mR);
  1440   002D00  C027  F013         	movff	return_to_sender@mL,stop@mL
  1441   002D04  C028  F014         	movff	return_to_sender@mR,stop@mR
  1442   002D08  ECDD  F016         	call	_stop	;wreg free
  1443   002D0C                     
  1444                           ;timers.c: 238:         stop_timer();
  1445   002D0C  ECFC  F01C         	call	_stop_timer	;wreg free
  1446   002D10                     
  1447                           ;timers.c: 239:         return_flag = 0;
  1448   002D10  0E00               	movlw	0
  1449   002D12  6E5C               	movwf	_return_flag^0,c
  1450   002D14                     
  1451                           ;timers.c: 242:         toggle_main_beam();
  1452   002D14  EC28  F01C         	call	_toggle_main_beam	;wreg free
  1453   002D18                     l3951:
  1454                           
  1455                           ;timers.c: 210:     while (manoeuvre_count != 0) {
  1456   002D18  505A               	movf	_manoeuvre_count^0,w,c
  1457   002D1A  A4D8               	btfss	status,2,c
  1458   002D1C  EF92  F016         	goto	u3261
  1459   002D20  EF94  F016         	goto	u3260
  1460   002D24                     u3261:
  1461   002D24  EF46  F016         	goto	l3925
  1462   002D28                     u3260:
  1463   002D28  0012               	return		;funcret
  1464   002D2A                     __end_of_return_to_sender:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _toggle_main_beam *****************
  1468 ;; Defined at:
  1469 ;;		line 66 in file "buggy_lights.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels used: 1
  1489 ;; Hardware stack levels required when called: 1
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_return_to_sender
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text2
  1498   003850                     __ptext2:
  1499                           	callstack 0
  1500   003850                     _toggle_main_beam:
  1501                           	callstack 28
  1502   003850                     
  1503                           ;buggy_lights.c: 69:     LATDbits.LATD3 = !LATDbits.LATD3;
  1504   003850  A67C               	btfss	124,3,c	;volatile
  1505   003852  EF2D  F01C         	goto	u2471
  1506   003856  EF31  F01C         	goto	u2470
  1507   00385A                     u2471:
  1508   00385A  6A01               	clrf	??_toggle_main_beam^0,c
  1509   00385C  2A01               	incf	??_toggle_main_beam^0,f,c
  1510   00385E  EF32  F01C         	goto	u2488
  1511   003862                     u2470:
  1512   003862  6A01               	clrf	??_toggle_main_beam^0,c
  1513   003864                     u2488:
  1514   003864  4601               	rlncf	??_toggle_main_beam^0,f,c
  1515   003866  4601               	rlncf	??_toggle_main_beam^0,f,c
  1516   003868  4601               	rlncf	??_toggle_main_beam^0,f,c
  1517   00386A  507C               	movf	124,w,c	;volatile
  1518   00386C  1801               	xorwf	??_toggle_main_beam^0,w,c
  1519   00386E  0BF7               	andlw	-9
  1520   003870  1801               	xorwf	??_toggle_main_beam^0,w,c
  1521   003872  6E7C               	movwf	124,c	;volatile
  1522   003874  0012               	return		;funcret
  1523   003876                     __end_of_toggle_main_beam:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _read_trail *****************
  1527 ;; Defined at:
  1528 ;;		line 81 in file "timers.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  tH              1    0[COMRAM] PTR unsigned char 
  1531 ;;		 -> return_to_sender@timerH(1), 
  1532 ;;  tL              1    1[COMRAM] PTR unsigned char 
  1533 ;;		 -> return_to_sender@timerL(1), 
  1534 ;;  man             1    2[COMRAM] PTR unsigned char 
  1535 ;;		 -> return_to_sender@mann(1), 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1547 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1550 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1551 ;;Total ram usage:        3 bytes
  1552 ;; Hardware stack levels used: 1
  1553 ;; Hardware stack levels required when called: 1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_return_to_sender
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text3
  1562   0035E0                     __ptext3:
  1563                           	callstack 0
  1564   0035E0                     _read_trail:
  1565                           	callstack 28
  1566   0035E0                     
  1567                           ;timers.c: 81: void read_trail(unsigned char *tH, unsigned char *tL, unsigned char *man)
      +                          ;timers.c: 82: {;timers.c: 83:     timer_high_pointer --;
  1568   0035E0  0651               	decf	_timer_high_pointer^0,f,c
  1569                           
  1570                           ;timers.c: 84:     timer_low_pointer --;
  1571   0035E2  0650               	decf	_timer_low_pointer^0,f,c
  1572                           
  1573                           ;timers.c: 85:     manoeuvre_pointer --;
  1574   0035E4  064F               	decf	_manoeuvre_pointer^0,f,c
  1575                           
  1576                           ;timers.c: 87:     manoeuvre_count --;
  1577   0035E6  065A               	decf	_manoeuvre_count^0,f,c
  1578   0035E8                     
  1579                           ;timers.c: 89:     *tH = *timer_high_pointer;
  1580   0035E8  5051               	movf	_timer_high_pointer^0,w,c
  1581   0035EA  6ED9               	movwf	fsr2l,c
  1582   0035EC  6ADA               	clrf	fsr2h,c
  1583   0035EE  5001               	movf	read_trail@tH^0,w,c
  1584   0035F0  6EE1               	movwf	fsr1l,c
  1585   0035F2  6AE2               	clrf	fsr1h,c
  1586   0035F4  CFDF FFE7          	movff	indf2,indf1
  1587   0035F8                     
  1588                           ;timers.c: 90:     *tL = *timer_low_pointer;
  1589   0035F8  5050               	movf	_timer_low_pointer^0,w,c
  1590   0035FA  6ED9               	movwf	fsr2l,c
  1591   0035FC  6ADA               	clrf	fsr2h,c
  1592   0035FE  5002               	movf	read_trail@tL^0,w,c
  1593   003600  6EE1               	movwf	fsr1l,c
  1594   003602  6AE2               	clrf	fsr1h,c
  1595   003604  CFDF FFE7          	movff	indf2,indf1
  1596   003608                     
  1597                           ;timers.c: 91:     *man = *manoeuvre_pointer;
  1598   003608  504F               	movf	_manoeuvre_pointer^0,w,c
  1599   00360A  6ED9               	movwf	fsr2l,c
  1600   00360C  6ADA               	clrf	fsr2h,c
  1601   00360E  5003               	movf	read_trail@man^0,w,c
  1602   003610  6EE1               	movwf	fsr1l,c
  1603   003612  6AE2               	clrf	fsr1h,c
  1604   003614  CFDF FFE7          	movff	indf2,indf1
  1605   003618  0012               	return		;funcret
  1606   00361A                     __end_of_read_trail:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _initUSART4 *****************
  1610 ;; Defined at:
  1611 ;;		line 8 in file "serial.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1629 ;;Total ram usage:        0 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text4
  1640   003966                     __ptext4:
  1641                           	callstack 0
  1642   003966                     _initUSART4:
  1643                           	callstack 29
  1644   003966                     
  1645                           ;serial.c: 9:     RC0PPS = 0x12;
  1646   003966  0E12               	movlw	18
  1647   003968  010E               	movlb	14	; () banked
  1648   00396A  6F62               	movwf	98,b	;volatile
  1649                           
  1650                           ;serial.c: 10:     RX4PPS = 0x11;
  1651   00396C  0E11               	movlw	17
  1652   00396E  6F15               	movwf	21,b	;volatile
  1653   003970                     
  1654                           ; BSR set to: 14
  1655                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1656   003970  97E9               	bcf	233,3,b	;volatile
  1657   003972                     
  1658                           ; BSR set to: 14
  1659                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1660   003972  95E8               	bcf	232,2,b	;volatile
  1661                           
  1662                           ;serial.c: 14:     SP4BRGL = 51;
  1663   003974  0E33               	movlw	51
  1664   003976  6FE5               	movwf	229,b	;volatile
  1665                           
  1666                           ;serial.c: 15:     SP4BRGH = 0;
  1667   003978  0E00               	movlw	0
  1668   00397A  6FE6               	movwf	230,b	;volatile
  1669   00397C                     
  1670                           ; BSR set to: 14
  1671                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1672   00397C  89E7               	bsf	231,4,b	;volatile
  1673   00397E                     
  1674                           ; BSR set to: 14
  1675                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1676   00397E  8BE8               	bsf	232,5,b	;volatile
  1677   003980                     
  1678                           ; BSR set to: 14
  1679                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1680   003980  8FE7               	bsf	231,7,b	;volatile
  1681   003982                     
  1682                           ; BSR set to: 14
  1683   003982  0012               	return		;funcret
  1684   003984                     __end_of_initUSART4:
  1685                           	callstack 0
  1686                           
  1687 ;; *************** function _initDCmotorsPWM *****************
  1688 ;; Defined at:
  1689 ;;		line 7 in file "dc_motor.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg, status,2
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1703 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1707 ;;Total ram usage:        2 bytes
  1708 ;; Hardware stack levels used: 1
  1709 ;; Hardware stack levels required when called: 1
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text5
  1718   002D2A                     __ptext5:
  1719                           	callstack 0
  1720   002D2A                     _initDCmotorsPWM:
  1721                           	callstack 29
  1722   002D2A                     
  1723                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
  1724   002D2A  9485               	bcf	133,2,c	;volatile
  1725                           
  1726                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1727   002D2C  9885               	bcf	133,4,c	;volatile
  1728                           
  1729                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
  1730   002D2E  9E83               	bcf	131,7,c	;volatile
  1731                           
  1732                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
  1733   002D30  9C87               	bcf	135,6,c	;volatile
  1734                           
  1735                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
  1736   002D32  947D               	bcf	125,2,c	;volatile
  1737                           
  1738                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
  1739   002D34  987D               	bcf	125,4,c	;volatile
  1740                           
  1741                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
  1742   002D36  9E7B               	bcf	123,7,c	;volatile
  1743                           
  1744                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
  1745   002D38  9C7F               	bcf	127,6,c	;volatile
  1746   002D3A                     
  1747                           ;dc_motor.c: 19:     RE2PPS=0x05;
  1748   002D3A  0E05               	movlw	5
  1749   002D3C  010E               	movlb	14	; () banked
  1750   002D3E  6F74               	movwf	116,b	;volatile
  1751                           
  1752                           ;dc_motor.c: 20:     RE4PPS=0x06;
  1753   002D40  0E06               	movlw	6
  1754   002D42  6F76               	movwf	118,b	;volatile
  1755                           
  1756                           ;dc_motor.c: 21:     RC7PPS=0x07;
  1757   002D44  0E07               	movlw	7
  1758   002D46  6F69               	movwf	105,b	;volatile
  1759                           
  1760                           ;dc_motor.c: 22:     RG6PPS=0x08;
  1761   002D48  0E08               	movlw	8
  1762   002D4A  6F88               	movwf	136,b	;volatile
  1763                           
  1764                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  1765   002D4C  50BD               	movf	189,w,c	;volatile
  1766   002D4E  0B8F               	andlw	-113
  1767   002D50  0940               	iorlw	64
  1768   002D52  6EBD               	movwf	189,c	;volatile
  1769                           
  1770                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  1771   002D54  0EE0               	movlw	-32
  1772   002D56  16BE               	andwf	190,f,c	;volatile
  1773                           
  1774                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  1775   002D58  50BF               	movf	191,w,c	;volatile
  1776   002D5A  0BF0               	andlw	-16
  1777   002D5C  0901               	iorlw	1
  1778   002D5E  6EBF               	movwf	191,c	;volatile
  1779   002D60                     
  1780                           ; BSR set to: 14
  1781                           ;dc_motor.c: 32:     T2PR=(unsigned char)PWMperiod;
  1782   002D60  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1783   002D64                     
  1784                           ; BSR set to: 14
  1785                           ;dc_motor.c: 33:     T2CONbits.ON=1;
  1786   002D64  8EBD               	bsf	189,7,c	;volatile
  1787                           
  1788                           ;dc_motor.c: 37:         CCPR1H=0;
  1789   002D66  0E00               	movlw	0
  1790   002D68  6EAA               	movwf	170,c	;volatile
  1791                           
  1792                           ;dc_motor.c: 38:         CCPR2H=0;
  1793   002D6A  0E00               	movlw	0
  1794   002D6C  6EA6               	movwf	166,c	;volatile
  1795                           
  1796                           ;dc_motor.c: 39:         CCPR3H=0;
  1797   002D6E  0E00               	movlw	0
  1798   002D70  010F               	movlb	15	; () banked
  1799   002D72  6F25               	movwf	37,b	;volatile
  1800                           
  1801                           ;dc_motor.c: 40:         CCPR4H=0;
  1802   002D74  0E00               	movlw	0
  1803   002D76  6F21               	movwf	33,b	;volatile
  1804                           
  1805                           ;dc_motor.c: 43:         CCPTMRS0bits.C1TSEL=0;
  1806   002D78  0EFC               	movlw	-4
  1807   002D7A  16AD               	andwf	173,f,c	;volatile
  1808                           
  1809                           ;dc_motor.c: 44:         CCPTMRS0bits.C2TSEL=0;
  1810   002D7C  0EF3               	movlw	-13
  1811   002D7E  16AD               	andwf	173,f,c	;volatile
  1812                           
  1813                           ;dc_motor.c: 45:         CCPTMRS0bits.C3TSEL=0;
  1814   002D80  0ECF               	movlw	-49
  1815   002D82  16AD               	andwf	173,f,c	;volatile
  1816                           
  1817                           ;dc_motor.c: 46:         CCPTMRS0bits.C4TSEL=0;
  1818   002D84  0E3F               	movlw	-193
  1819   002D86  16AD               	andwf	173,f,c	;volatile
  1820   002D88                     
  1821                           ; BSR set to: 15
  1822                           ;dc_motor.c: 49:         CCP1CONbits.FMT=1;
  1823   002D88  88AB               	bsf	171,4,c	;volatile
  1824                           
  1825                           ;dc_motor.c: 50:         CCP1CONbits.CCP1MODE=0b1100;
  1826   002D8A  50AB               	movf	171,w,c	;volatile
  1827   002D8C  0BF0               	andlw	-16
  1828   002D8E  090C               	iorlw	12
  1829   002D90  6EAB               	movwf	171,c	;volatile
  1830   002D92                     
  1831                           ; BSR set to: 15
  1832                           ;dc_motor.c: 51:         CCP1CONbits.EN=1;
  1833   002D92  8EAB               	bsf	171,7,c	;volatile
  1834   002D94                     
  1835                           ; BSR set to: 15
  1836                           ;dc_motor.c: 53:         CCP2CONbits.FMT=1;
  1837   002D94  88A7               	bsf	167,4,c	;volatile
  1838                           
  1839                           ;dc_motor.c: 54:         CCP2CONbits.CCP2MODE=0b1100;
  1840   002D96  50A7               	movf	167,w,c	;volatile
  1841   002D98  0BF0               	andlw	-16
  1842   002D9A  090C               	iorlw	12
  1843   002D9C  6EA7               	movwf	167,c	;volatile
  1844   002D9E                     
  1845                           ; BSR set to: 15
  1846                           ;dc_motor.c: 55:         CCP2CONbits.EN=1;
  1847   002D9E  8EA7               	bsf	167,7,c	;volatile
  1848   002DA0                     
  1849                           ; BSR set to: 15
  1850                           ;dc_motor.c: 57:         CCP3CONbits.FMT=1;
  1851   002DA0  8926               	bsf	38,4,b	;volatile
  1852                           
  1853                           ;dc_motor.c: 58:         CCP3CONbits.CCP3MODE=0b1100;
  1854   002DA2  5126               	movf	38,w,b	;volatile
  1855   002DA4  0BF0               	andlw	-16
  1856   002DA6  090C               	iorlw	12
  1857   002DA8  6F26               	movwf	38,b	;volatile
  1858   002DAA                     
  1859                           ; BSR set to: 15
  1860                           ;dc_motor.c: 59:         CCP3CONbits.EN=1;
  1861   002DAA  8F26               	bsf	38,7,b	;volatile
  1862   002DAC                     
  1863                           ; BSR set to: 15
  1864                           ;dc_motor.c: 61:         CCP4CONbits.FMT=1;
  1865   002DAC  8922               	bsf	34,4,b	;volatile
  1866                           
  1867                           ;dc_motor.c: 62:         CCP4CONbits.CCP4MODE=0b1100;
  1868   002DAE  5122               	movf	34,w,b	;volatile
  1869   002DB0  0BF0               	andlw	-16
  1870   002DB2  090C               	iorlw	12
  1871   002DB4  6F22               	movwf	34,b	;volatile
  1872   002DB6                     
  1873                           ; BSR set to: 15
  1874                           ;dc_motor.c: 63:         CCP4CONbits.EN=1;
  1875   002DB6  8F22               	bsf	34,7,b	;volatile
  1876   002DB8                     
  1877                           ; BSR set to: 15
  1878   002DB8  0012               	return		;funcret
  1879   002DBA                     __end_of_initDCmotorsPWM:
  1880                           	callstack 0
  1881                           
  1882 ;; *************** function _forward_navigation *****************
  1883 ;; Defined at:
  1884 ;;		line 116 in file "timers.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  mL              1   65[COMRAM] PTR struct DC_motor
  1887 ;;		 -> main@motorL(9), 
  1888 ;;  mR              1   66[COMRAM] PTR struct DC_motor
  1889 ;;		 -> main@motorR(9), 
  1890 ;;  p1              1   67[COMRAM] PTR struct HSV_val
  1891 ;;		 -> main@HSV_colour(6), 
  1892 ;;  p2              1   68[COMRAM] PTR struct RGBC_val
  1893 ;;		 -> main@RGBC_colour(8), 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  mann            1   73[COMRAM] unsigned char 
  1896 ;;  timerL          1   72[COMRAM] unsigned char 
  1897 ;;  timerH          1   71[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1911 ;;Total ram usage:        9 bytes
  1912 ;; Hardware stack levels used: 1
  1913 ;; Hardware stack levels required when called: 7
  1914 ;; This function calls:
  1915 ;;		_average_RGBC
  1916 ;;		_colour_to_key
  1917 ;;		_convert_HSV
  1918 ;;		_fullSpeedAhead
  1919 ;;		_pick_card
  1920 ;;		_read_timer
  1921 ;;		_reset_timer
  1922 ;;		_scale_RGB
  1923 ;;		_start_timer
  1924 ;;		_stop
  1925 ;;		_stop_timer
  1926 ;;		_toggle_tricolour_LED
  1927 ;;		_wait_for_wall
  1928 ;;		_write_trail
  1929 ;; This function is called by:
  1930 ;;		_main
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text6
  1935   002124                     __ptext6:
  1936                           	callstack 0
  1937   002124                     _forward_navigation:
  1938                           	callstack 23
  1939   002124                     
  1940                           ;timers.c: 116: void forward_navigation(DC_motor *mL, DC_motor *mR, HSV_val *p1, RGBC_va
      +                          l *p2);timers.c: 117: {;timers.c: 119:     while (!returning) {
  1941   002124  EF5F  F011         	goto	l3921
  1942   002128                     l3865:
  1943                           
  1944                           ;timers.c: 122:         unsigned char timerH = 0;
  1945   002128  0E00               	movlw	0
  1946   00212A  6E48               	movwf	forward_navigation@timerH^0,c
  1947                           
  1948                           ;timers.c: 123:         unsigned char timerL = 0;
  1949   00212C  0E00               	movlw	0
  1950   00212E  6E49               	movwf	forward_navigation@timerL^0,c
  1951   002130                     
  1952                           ;timers.c: 127:         reset_timer();
  1953   002130  ECE1  F01C         	call	_reset_timer	;wreg free
  1954                           
  1955                           ;timers.c: 128:         start_timer();
  1956   002134  ECFE  F01C         	call	_start_timer	;wreg free
  1957   002138                     
  1958                           ;timers.c: 129:         fullSpeedAhead(mL, mR);
  1959   002138  C042  F013         	movff	forward_navigation@mL,fullSpeedAhead@mL
  1960   00213C  C043  F014         	movff	forward_navigation@mR,fullSpeedAhead@mR
  1961   002140  EC82  F014         	call	_fullSpeedAhead	;wreg free
  1962   002144                     
  1963                           ;timers.c: 132:         wait_for_wall(p2, lost_flag);
  1964   002144  C045  F00D         	movff	forward_navigation@p2,wait_for_wall@p
  1965   002148  C05B  F00E         	movff	_lost_flag,wait_for_wall@loss
  1966   00214C  EC8D  F01A         	call	_wait_for_wall	;wreg free
  1967   002150                     
  1968                           ;timers.c: 135:         stop_timer();
  1969   002150  ECFC  F01C         	call	_stop_timer	;wreg free
  1970   002154                     
  1971                           ;timers.c: 136:         read_timer(&timerH, &timerL);
  1972   002154  0E48               	movlw	low forward_navigation@timerH
  1973   002156  6E01               	movwf	read_timer@tH^0,c
  1974   002158  0E49               	movlw	low forward_navigation@timerL
  1975   00215A  6E02               	movwf	read_timer@tL^0,c
  1976   00215C  ECC2  F01C         	call	_read_timer	;wreg free
  1977                           
  1978                           ;timers.c: 137:         stop(mL, mR);
  1979   002160  C042  F013         	movff	forward_navigation@mL,stop@mL
  1980   002164  C043  F014         	movff	forward_navigation@mR,stop@mR
  1981   002168  ECDD  F016         	call	_stop	;wreg free
  1982   00216C                     
  1983                           ;timers.c: 140:         toggle_tricolour_LED();
  1984   00216C  EC1E  F014         	call	_toggle_tricolour_LED	;wreg free
  1985   002170                     
  1986                           ;timers.c: 141:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1987   002170  0E11               	movlw	17
  1988   002172  6E47               	movwf	(??_forward_navigation+1)^0,c
  1989   002174  0E3C               	movlw	60
  1990   002176  6E46               	movwf	??_forward_navigation^0,c
  1991   002178  0ECB               	movlw	203
  1992   00217A                     u3337:
  1993   00217A  2EE8               	decfsz	wreg,f,c
  1994   00217C  D7FE               	bra	u3337
  1995   00217E  2E46               	decfsz	??_forward_navigation^0,f,c
  1996   002180  D7FC               	bra	u3337
  1997   002182  2E47               	decfsz	(??_forward_navigation+1)^0,f,c
  1998   002184  D7FA               	bra	u3337
  1999   002186  0000               	nop	
  2000   002188                     
  2001                           ;timers.c: 144:         average_RGBC(p2);
  2002   002188  C045  F00E         	movff	forward_navigation@p2,average_RGBC@p
  2003   00218C  ECBA  F00E         	call	_average_RGBC	;wreg free
  2004   002190                     
  2005                           ;timers.c: 145:         scale_RGB(p2);
  2006   002190  C045  F032         	movff	forward_navigation@p2,scale_RGB@p
  2007   002194  ECB3  F013         	call	_scale_RGB	;wreg free
  2008   002198                     
  2009                           ;timers.c: 146:         convert_HSV(p1, p2);
  2010   002198  C044  F00E         	movff	forward_navigation@p1,convert_HSV@p1
  2011   00219C  C045  F00F         	movff	forward_navigation@p2,convert_HSV@p2
  2012   0021A0  EC0D  F007         	call	_convert_HSV	;wreg free
  2013   0021A4                     
  2014                           ;timers.c: 147:         mann = colour_to_key(p1, p2);
  2015   0021A4  C044  F001         	movff	forward_navigation@p1,colour_to_key@p1
  2016   0021A8  C045  F002         	movff	forward_navigation@p2,colour_to_key@p2
  2017   0021AC  EC73  F00A         	call	_colour_to_key	;wreg free
  2018   0021B0  6E4A               	movwf	forward_navigation@mann^0,c
  2019   0021B2                     
  2020                           ;timers.c: 150:         toggle_tricolour_LED();
  2021   0021B2  EC1E  F014         	call	_toggle_tricolour_LED	;wreg free
  2022   0021B6                     
  2023                           ;timers.c: 151:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2024   0021B6  0E11               	movlw	17
  2025   0021B8  6E47               	movwf	(??_forward_navigation+1)^0,c
  2026   0021BA  0E3C               	movlw	60
  2027   0021BC  6E46               	movwf	??_forward_navigation^0,c
  2028   0021BE  0ECB               	movlw	203
  2029   0021C0                     u3347:
  2030   0021C0  2EE8               	decfsz	wreg,f,c
  2031   0021C2  D7FE               	bra	u3347
  2032   0021C4  2E46               	decfsz	??_forward_navigation^0,f,c
  2033   0021C6  D7FC               	bra	u3347
  2034   0021C8  2E47               	decfsz	(??_forward_navigation+1)^0,f,c
  2035   0021CA  D7FA               	bra	u3347
  2036   0021CC  0000               	nop	
  2037   0021CE                     
  2038                           ;timers.c: 154:         if (lost_flag) {
  2039   0021CE  505B               	movf	_lost_flag^0,w,c
  2040   0021D0  B4D8               	btfsc	status,2,c
  2041   0021D2  EFED  F010         	goto	u3121
  2042   0021D6  EFEF  F010         	goto	u3120
  2043   0021DA                     u3121:
  2044   0021DA  EF04  F011         	goto	l3901
  2045   0021DE                     u3120:
  2046   0021DE                     
  2047                           ;timers.c: 157:             timerH = 0b11111111;
  2048   0021DE  6848               	setf	forward_navigation@timerH^0,c
  2049                           
  2050                           ;timers.c: 158:             timerL = 0b11111111;
  2051   0021E0  6849               	setf	forward_navigation@timerL^0,c
  2052   0021E2                     
  2053                           ;timers.c: 161:             mann = 8;
  2054   0021E2  0E08               	movlw	8
  2055   0021E4  6E4A               	movwf	forward_navigation@mann^0,c
  2056   0021E6                     
  2057                           ;timers.c: 164:             LATDbits.LATD7 = !LATDbits.LATD7;
  2058   0021E6  AE7C               	btfss	124,7,c	;volatile
  2059   0021E8  EFF8  F010         	goto	u3131
  2060   0021EC  EFFC  F010         	goto	u3130
  2061   0021F0                     u3131:
  2062   0021F0  6A46               	clrf	??_forward_navigation^0,c
  2063   0021F2  2A46               	incf	??_forward_navigation^0,f,c
  2064   0021F4  EFFD  F010         	goto	u3148
  2065   0021F8                     u3130:
  2066   0021F8  6A46               	clrf	??_forward_navigation^0,c
  2067   0021FA                     u3148:
  2068   0021FA  3246               	rrcf	??_forward_navigation^0,f,c
  2069   0021FC  3246               	rrcf	??_forward_navigation^0,f,c
  2070   0021FE  507C               	movf	124,w,c	;volatile
  2071   002200  1846               	xorwf	??_forward_navigation^0,w,c
  2072   002202  0B7F               	andlw	-129
  2073   002204  1846               	xorwf	??_forward_navigation^0,w,c
  2074   002206  6E7C               	movwf	124,c	;volatile
  2075   002208                     l3901:
  2076                           
  2077                           ;timers.c: 169:         if (manoeuvre_count == 19 || mann == 9 || mann == 0) {
  2078   002208  0E13               	movlw	19
  2079   00220A  185A               	xorwf	_manoeuvre_count^0,w,c
  2080   00220C  B4D8               	btfsc	status,2,c
  2081   00220E  EF0B  F011         	goto	u3151
  2082   002212  EF0D  F011         	goto	u3150
  2083   002216                     u3151:
  2084   002216  EF1E  F011         	goto	l3907
  2085   00221A                     u3150:
  2086   00221A  0E09               	movlw	9
  2087   00221C  184A               	xorwf	forward_navigation@mann^0,w,c
  2088   00221E  B4D8               	btfsc	status,2,c
  2089   002220  EF14  F011         	goto	u3161
  2090   002224  EF16  F011         	goto	u3160
  2091   002228                     u3161:
  2092   002228  EF1E  F011         	goto	l3907
  2093   00222C                     u3160:
  2094   00222C  504A               	movf	forward_navigation@mann^0,w,c
  2095   00222E  A4D8               	btfss	status,2,c
  2096   002230  EF1C  F011         	goto	u3171
  2097   002234  EF1E  F011         	goto	u3170
  2098   002238                     u3171:
  2099   002238  EF31  F011         	goto	l3911
  2100   00223C                     u3170:
  2101   00223C                     l3907:
  2102                           
  2103                           ;timers.c: 172:             mann = 8;
  2104   00223C  0E08               	movlw	8
  2105   00223E  6E4A               	movwf	forward_navigation@mann^0,c
  2106   002240                     
  2107                           ;timers.c: 175:             LATDbits.LATD7 = !LATDbits.LATD7;
  2108   002240  AE7C               	btfss	124,7,c	;volatile
  2109   002242  EF25  F011         	goto	u3181
  2110   002246  EF29  F011         	goto	u3180
  2111   00224A                     u3181:
  2112   00224A  6A46               	clrf	??_forward_navigation^0,c
  2113   00224C  2A46               	incf	??_forward_navigation^0,f,c
  2114   00224E  EF2A  F011         	goto	u3198
  2115   002252                     u3180:
  2116   002252  6A46               	clrf	??_forward_navigation^0,c
  2117   002254                     u3198:
  2118   002254  3246               	rrcf	??_forward_navigation^0,f,c
  2119   002256  3246               	rrcf	??_forward_navigation^0,f,c
  2120   002258  507C               	movf	124,w,c	;volatile
  2121   00225A  1846               	xorwf	??_forward_navigation^0,w,c
  2122   00225C  0B7F               	andlw	-129
  2123   00225E  1846               	xorwf	??_forward_navigation^0,w,c
  2124   002260  6E7C               	movwf	124,c	;volatile
  2125   002262                     l3911:
  2126                           
  2127                           ;timers.c: 179:         write_trail(timerH, timerL, mann);
  2128   002262  C049  F001         	movff	forward_navigation@timerL,write_trail@tL
  2129   002266  C04A  F002         	movff	forward_navigation@mann,write_trail@man
  2130   00226A  5048               	movf	forward_navigation@timerH^0,w,c
  2131   00226C  ECEA  F01B         	call	_write_trail
  2132   002270                     
  2133                           ;timers.c: 182:         pick_card(mL, mR, returning, mann);
  2134   002270  C042  F021         	movff	forward_navigation@mL,pick_card@mL
  2135   002274  C043  F022         	movff	forward_navigation@mR,pick_card@mR
  2136   002278  C05D  F023         	movff	_returning,pick_card@backtrack
  2137   00227C  C04A  F024         	movff	forward_navigation@mann,pick_card@key
  2138   002280  EC35  F013         	call	_pick_card	;wreg free
  2139   002284                     
  2140                           ;timers.c: 185:         if (mann == 8) {
  2141   002284  0E08               	movlw	8
  2142   002286  184A               	xorwf	forward_navigation@mann^0,w,c
  2143   002288  A4D8               	btfss	status,2,c
  2144   00228A  EF49  F011         	goto	u3201
  2145   00228E  EF4B  F011         	goto	u3200
  2146   002292                     u3201:
  2147   002292  EF5F  F011         	goto	l3921
  2148   002296                     u3200:
  2149   002296                     
  2150                           ;timers.c: 188:             returning = 1;
  2151   002296  0E01               	movlw	1
  2152   002298  6E5D               	movwf	_returning^0,c
  2153   00229A                     
  2154                           ;timers.c: 191:             LATHbits.LATH3 = !LATHbits.LATH3;
  2155   00229A  A680               	btfss	128,3,c	;volatile
  2156   00229C  EF52  F011         	goto	u3211
  2157   0022A0  EF56  F011         	goto	u3210
  2158   0022A4                     u3211:
  2159   0022A4  6A46               	clrf	??_forward_navigation^0,c
  2160   0022A6  2A46               	incf	??_forward_navigation^0,f,c
  2161   0022A8  EF57  F011         	goto	u3228
  2162   0022AC                     u3210:
  2163   0022AC  6A46               	clrf	??_forward_navigation^0,c
  2164   0022AE                     u3228:
  2165   0022AE  4646               	rlncf	??_forward_navigation^0,f,c
  2166   0022B0  4646               	rlncf	??_forward_navigation^0,f,c
  2167   0022B2  4646               	rlncf	??_forward_navigation^0,f,c
  2168   0022B4  5080               	movf	128,w,c	;volatile
  2169   0022B6  1846               	xorwf	??_forward_navigation^0,w,c
  2170   0022B8  0BF7               	andlw	-9
  2171   0022BA  1846               	xorwf	??_forward_navigation^0,w,c
  2172   0022BC  6E80               	movwf	128,c	;volatile
  2173   0022BE                     l3921:
  2174                           
  2175                           ;timers.c: 119:     while (!returning) {
  2176   0022BE  505D               	movf	_returning^0,w,c
  2177   0022C0  B4D8               	btfsc	status,2,c
  2178   0022C2  EF65  F011         	goto	u3231
  2179   0022C6  EF67  F011         	goto	u3230
  2180   0022CA                     u3231:
  2181   0022CA  EF94  F010         	goto	l3865
  2182   0022CE                     u3230:
  2183   0022CE  0012               	return		;funcret
  2184   0022D0                     __end_of_forward_navigation:
  2185                           	callstack 0
  2186                           
  2187 ;; *************** function _write_trail *****************
  2188 ;; Defined at:
  2189 ;;		line 100 in file "timers.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;  tH              1    wreg     unsigned char 
  2192 ;;  tL              1    0[COMRAM] unsigned char 
  2193 ;;  man             1    1[COMRAM] unsigned char 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  tH              1    2[COMRAM] unsigned char 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2206 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2208 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2209 ;;Total ram usage:        3 bytes
  2210 ;; Hardware stack levels used: 1
  2211 ;; Hardware stack levels required when called: 1
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_forward_navigation
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text7
  2220   0037D4                     __ptext7:
  2221                           	callstack 0
  2222   0037D4                     _write_trail:
  2223                           	callstack 28
  2224                           
  2225                           ;incstack = 0
  2226                           ;write_trail@tH stored from wreg
  2227   0037D4  6E03               	movwf	write_trail@tH^0,c
  2228   0037D6                     
  2229                           ;timers.c: 100: void write_trail(unsigned char tH, unsigned char tL, unsigned char man);
      +                          timers.c: 101: {;timers.c: 102:     *timer_high_pointer = tH;
  2230   0037D6  5051               	movf	_timer_high_pointer^0,w,c
  2231   0037D8  6ED9               	movwf	fsr2l,c
  2232   0037DA  6ADA               	clrf	fsr2h,c
  2233   0037DC  C003  FFDF         	movff	write_trail@tH,indf2
  2234                           
  2235                           ;timers.c: 103:     *timer_low_pointer = tL;
  2236   0037E0  5050               	movf	_timer_low_pointer^0,w,c
  2237   0037E2  6ED9               	movwf	fsr2l,c
  2238   0037E4  6ADA               	clrf	fsr2h,c
  2239   0037E6  C001  FFDF         	movff	write_trail@tL,indf2
  2240                           
  2241                           ;timers.c: 104:     *manoeuvre_pointer = man;
  2242   0037EA  504F               	movf	_manoeuvre_pointer^0,w,c
  2243   0037EC  6ED9               	movwf	fsr2l,c
  2244   0037EE  6ADA               	clrf	fsr2h,c
  2245   0037F0  C002  FFDF         	movff	write_trail@man,indf2
  2246   0037F4                     
  2247                           ;timers.c: 106:     timer_high_pointer ++;
  2248   0037F4  2A51               	incf	_timer_high_pointer^0,f,c
  2249   0037F6                     
  2250                           ;timers.c: 107:     timer_low_pointer ++;
  2251   0037F6  2A50               	incf	_timer_low_pointer^0,f,c
  2252   0037F8                     
  2253                           ;timers.c: 108:     manoeuvre_pointer ++;
  2254   0037F8  2A4F               	incf	_manoeuvre_pointer^0,f,c
  2255   0037FA                     
  2256                           ;timers.c: 110:     manoeuvre_count ++;
  2257   0037FA  2A5A               	incf	_manoeuvre_count^0,f,c
  2258   0037FC  0012               	return		;funcret
  2259   0037FE                     __end_of_write_trail:
  2260                           	callstack 0
  2261                           
  2262 ;; *************** function _wait_for_wall *****************
  2263 ;; Defined at:
  2264 ;;		line 161 in file "color.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  p               1   12[COMRAM] PTR struct RGBC_val
  2267 ;;		 -> main@RGBC_colour(8), 
  2268 ;;  loss            1   13[COMRAM] unsigned char 
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;		None
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      void 
  2273 ;; Registers used:
  2274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2283 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2284 ;;Total ram usage:        4 bytes
  2285 ;; Hardware stack levels used: 1
  2286 ;; Hardware stack levels required when called: 5
  2287 ;; This function calls:
  2288 ;;		_read_RGBC
  2289 ;; This function is called by:
  2290 ;;		_forward_navigation
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text8
  2295   00351A                     __ptext8:
  2296                           	callstack 0
  2297   00351A                     _wait_for_wall:
  2298                           	callstack 24
  2299   00351A                     
  2300                           ;color.c: 161: void wait_for_wall(struct RGBC_val *p, unsigned char loss);color.c: 162: 
      +                          {;color.c: 164:     while (!loss) {
  2301   00351A  EFA6  F01A         	goto	l3519
  2302   00351E                     l3513:
  2303                           
  2304                           ;color.c: 167:         read_RGBC(p);
  2305   00351E  C00D  F00C         	movff	wait_for_wall@p,read_RGBC@p
  2306   003522  ECC2  F019         	call	_read_RGBC	;wreg free
  2307   003526  500D               	movf	wait_for_wall@p^0,w,c
  2308   003528  6ED9               	movwf	fsr2l,c
  2309   00352A  6ADA               	clrf	fsr2h,c
  2310   00352C  0E06               	movlw	6
  2311   00352E  26D9               	addwf	fsr2l,f,c
  2312   003530  0E01               	movlw	1
  2313   003532  50DB               	movf	plusw2,w,c
  2314   003534  E107               	bnz	u2621
  2315   003536  0E32               	movlw	50
  2316   003538  5CDE               	subwf	postinc2,w,c
  2317   00353A  B0D8               	btfsc	status,0,c
  2318   00353C  EFA2  F01A         	goto	u2621
  2319   003540  EFA4  F01A         	goto	u2620
  2320   003544                     u2621:
  2321   003544  EFA6  F01A         	goto	l3519
  2322   003548                     u2620:
  2323   003548  EFAE  F01A         	goto	l99
  2324   00354C                     l3519:
  2325                           
  2326                           ;color.c: 164:     while (!loss) {
  2327   00354C  500E               	movf	wait_for_wall@loss^0,w,c
  2328   00354E  B4D8               	btfsc	status,2,c
  2329   003550  EFAC  F01A         	goto	u2631
  2330   003554  EFAE  F01A         	goto	u2630
  2331   003558                     u2631:
  2332   003558  EF8F  F01A         	goto	l3513
  2333   00355C                     u2630:
  2334   00355C                     l99:
  2335   00355C  0012               	return		;funcret
  2336   00355E                     __end_of_wait_for_wall:
  2337                           	callstack 0
  2338                           
  2339 ;; *************** function _toggle_tricolour_LED *****************
  2340 ;; Defined at:
  2341 ;;		line 93 in file "buggy_lights.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;		None
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;		None
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, status,0
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2357 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2358 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2359 ;;Total ram usage:        1 bytes
  2360 ;; Hardware stack levels used: 1
  2361 ;; Hardware stack levels required when called: 1
  2362 ;; This function calls:
  2363 ;;		Nothing
  2364 ;; This function is called by:
  2365 ;;		_forward_navigation
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text9
  2370   00283C                     __ptext9:
  2371                           	callstack 0
  2372   00283C                     _toggle_tricolour_LED:
  2373                           	callstack 28
  2374   00283C                     
  2375                           ;buggy_lights.c: 97:         LATGbits.LATG0 = !LATGbits.LATG0;
  2376   00283C  A07F               	btfss	127,0,c	;volatile
  2377   00283E  EF23  F014         	goto	u2491
  2378   002842  EF27  F014         	goto	u2490
  2379   002846                     u2491:
  2380   002846  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2381   002848  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2382   00284A  EF28  F014         	goto	u2508
  2383   00284E                     u2490:
  2384   00284E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2385   002850                     u2508:
  2386   002850  507F               	movf	127,w,c	;volatile
  2387   002852  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2388   002854  0BFE               	andlw	-2
  2389   002856  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2390   002858  6E7F               	movwf	127,c	;volatile
  2391                           
  2392                           ;buggy_lights.c: 98:         LATEbits.LATE7 = !LATEbits.LATE7;
  2393   00285A  AE7D               	btfss	125,7,c	;volatile
  2394   00285C  EF32  F014         	goto	u2511
  2395   002860  EF36  F014         	goto	u2510
  2396   002864                     u2511:
  2397   002864  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2398   002866  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2399   002868  EF37  F014         	goto	u2528
  2400   00286C                     u2510:
  2401   00286C  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2402   00286E                     u2528:
  2403   00286E  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2404   002870  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2405   002872  507D               	movf	125,w,c	;volatile
  2406   002874  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2407   002876  0B7F               	andlw	-129
  2408   002878  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2409   00287A  6E7D               	movwf	125,c	;volatile
  2410                           
  2411                           ;buggy_lights.c: 99:         LATAbits.LATA3 = !LATAbits.LATA3;
  2412   00287C  A679               	btfss	121,3,c	;volatile
  2413   00287E  EF43  F014         	goto	u2531
  2414   002882  EF47  F014         	goto	u2530
  2415   002886                     u2531:
  2416   002886  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2417   002888  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2418   00288A  EF48  F014         	goto	u2548
  2419   00288E                     u2530:
  2420   00288E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2421   002890                     u2548:
  2422   002890  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2423   002892  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2424   002894  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2425   002896  5079               	movf	121,w,c	;volatile
  2426   002898  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2427   00289A  0BF7               	andlw	-9
  2428   00289C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2429   00289E  6E79               	movwf	121,c	;volatile
  2430                           
  2431                           ;buggy_lights.c: 103:         LATGbits.LATG1 = !LATGbits.LATG1;
  2432   0028A0  A27F               	btfss	127,1,c	;volatile
  2433   0028A2  EF55  F014         	goto	u2551
  2434   0028A6  EF59  F014         	goto	u2550
  2435   0028AA                     u2551:
  2436   0028AA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2437   0028AC  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2438   0028AE  EF5A  F014         	goto	u2568
  2439   0028B2                     u2550:
  2440   0028B2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2441   0028B4                     u2568:
  2442   0028B4  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2443   0028B6  507F               	movf	127,w,c	;volatile
  2444   0028B8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2445   0028BA  0BFD               	andlw	-3
  2446   0028BC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2447   0028BE  6E7F               	movwf	127,c	;volatile
  2448                           
  2449                           ;buggy_lights.c: 104:         LATAbits.LATA4 = !LATAbits.LATA4;
  2450   0028C0  A879               	btfss	121,4,c	;volatile
  2451   0028C2  EF65  F014         	goto	u2571
  2452   0028C6  EF69  F014         	goto	u2570
  2453   0028CA                     u2571:
  2454   0028CA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2455   0028CC  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2456   0028CE  EF6A  F014         	goto	u2588
  2457   0028D2                     u2570:
  2458   0028D2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2459   0028D4                     u2588:
  2460   0028D4  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  2461   0028D6  5079               	movf	121,w,c	;volatile
  2462   0028D8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2463   0028DA  0BEF               	andlw	-17
  2464   0028DC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2465   0028DE  6E79               	movwf	121,c	;volatile
  2466                           
  2467                           ;buggy_lights.c: 105:         LATFbits.LATF7 = !LATFbits.LATF7;
  2468   0028E0  AE7E               	btfss	126,7,c	;volatile
  2469   0028E2  EF75  F014         	goto	u2591
  2470   0028E6  EF79  F014         	goto	u2590
  2471   0028EA                     u2591:
  2472   0028EA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2473   0028EC  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2474   0028EE  EF7A  F014         	goto	u2608
  2475   0028F2                     u2590:
  2476   0028F2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2477   0028F4                     u2608:
  2478   0028F4  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2479   0028F6  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2480   0028F8  507E               	movf	126,w,c	;volatile
  2481   0028FA  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2482   0028FC  0B7F               	andlw	-129
  2483   0028FE  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2484   002900  6E7E               	movwf	126,c	;volatile
  2485   002902  0012               	return		;funcret
  2486   002904                     __end_of_toggle_tricolour_LED:
  2487                           	callstack 0
  2488                           
  2489 ;; *************** function _stop_timer *****************
  2490 ;; Defined at:
  2491 ;;		line 38 in file "timers.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;		None
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		None
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2509 ;;Total ram usage:        0 bytes
  2510 ;; Hardware stack levels used: 1
  2511 ;; Hardware stack levels required when called: 1
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_forward_navigation
  2516 ;;		_return_to_sender
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           	psect	text10
  2521   0039F8                     __ptext10:
  2522                           	callstack 0
  2523   0039F8                     _stop_timer:
  2524                           	callstack 28
  2525   0039F8                     
  2526                           ;timers.c: 40:     T0CON0bits.T0EN = 0;
  2527   0039F8  9ED5               	bcf	213,7,c	;volatile
  2528   0039FA  0012               	return		;funcret
  2529   0039FC                     __end_of_stop_timer:
  2530                           	callstack 0
  2531                           
  2532 ;; *************** function _start_timer *****************
  2533 ;; Defined at:
  2534 ;;		line 30 in file "timers.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		None
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2552 ;;Total ram usage:        0 bytes
  2553 ;; Hardware stack levels used: 1
  2554 ;; Hardware stack levels required when called: 1
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_forward_navigation
  2559 ;;		_return_to_sender
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text11
  2564   0039FC                     __ptext11:
  2565                           	callstack 0
  2566   0039FC                     _start_timer:
  2567                           	callstack 28
  2568   0039FC                     
  2569                           ;timers.c: 32:     T0CON0bits.T0EN = 1;
  2570   0039FC  8ED5               	bsf	213,7,c	;volatile
  2571   0039FE  0012               	return		;funcret
  2572   003A00                     __end_of_start_timer:
  2573                           	callstack 0
  2574                           
  2575 ;; *************** function _scale_RGB *****************
  2576 ;; Defined at:
  2577 ;;		line 199 in file "color.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  p               1   49[COMRAM] PTR struct RGBC_val
  2580 ;;		 -> main@RGBC_colour(8), 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;		None
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2592 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2594 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2595 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2596 ;;Total ram usage:        3 bytes
  2597 ;; Hardware stack levels used: 1
  2598 ;; Hardware stack levels required when called: 2
  2599 ;; This function calls:
  2600 ;;		___flmul
  2601 ;;		___fltol
  2602 ;;		___xxtofl
  2603 ;; This function is called by:
  2604 ;;		_forward_navigation
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           	psect	text12
  2609   002766                     __ptext12:
  2610                           	callstack 0
  2611   002766                     _scale_RGB:
  2612                           	callstack 27
  2613   002766                     
  2614                           ;color.c: 199: void scale_RGB(struct RGBC_val *p);color.c: 200: {;color.c: 201:     p->R
      +                           *= 0.5;
  2615   002766  0E00               	movlw	0
  2616   002768  6E13               	movwf	___flmul@a^0,c
  2617   00276A  0E00               	movlw	0
  2618   00276C  6E14               	movwf	(___flmul@a+1)^0,c
  2619   00276E  0E00               	movlw	0
  2620   002770  6E15               	movwf	(___flmul@a+2)^0,c
  2621   002772  0E3F               	movlw	63
  2622   002774  6E16               	movwf	(___flmul@a+3)^0,c
  2623   002776  5032               	movf	scale_RGB@p^0,w,c
  2624   002778  6ED9               	movwf	fsr2l,c
  2625   00277A  6ADA               	clrf	fsr2h,c
  2626   00277C  CFDE F033          	movff	postinc2,??_scale_RGB
  2627   002780  CFDD F034          	movff	postdec2,??_scale_RGB+1
  2628   002784  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  2629   002788  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  2630   00278C  6A03               	clrf	(___xxtofl@val+2)^0,c
  2631   00278E  6A04               	clrf	(___xxtofl@val+3)^0,c
  2632   002790  0E00               	movlw	0
  2633   002792  ECB8  F00F         	call	___xxtofl
  2634   002796  C001  F00F         	movff	?___xxtofl,___flmul@b
  2635   00279A  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2636   00279E  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2637   0027A2  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2638   0027A6  ECA5  F00C         	call	___flmul	;wreg free
  2639   0027AA  C00F  F028         	movff	?___flmul,___fltol@f1
  2640   0027AE  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  2641   0027B2  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  2642   0027B6  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  2643   0027BA  ECB2  F012         	call	___fltol	;wreg free
  2644   0027BE  5032               	movf	scale_RGB@p^0,w,c
  2645   0027C0  6ED9               	movwf	fsr2l,c
  2646   0027C2  6ADA               	clrf	fsr2h,c
  2647   0027C4  C028  FFDE         	movff	?___fltol,postinc2
  2648   0027C8  C029  FFDD         	movff	?___fltol+1,postdec2
  2649                           
  2650                           ;color.c: 202:     p->G *= 0.7;
  2651   0027CC  0E33               	movlw	51
  2652   0027CE  6E13               	movwf	___flmul@a^0,c
  2653   0027D0  0E33               	movlw	51
  2654   0027D2  6E14               	movwf	(___flmul@a+1)^0,c
  2655   0027D4  0E33               	movlw	51
  2656   0027D6  6E15               	movwf	(___flmul@a+2)^0,c
  2657   0027D8  0E3F               	movlw	63
  2658   0027DA  6E16               	movwf	(___flmul@a+3)^0,c
  2659   0027DC  5032               	movf	scale_RGB@p^0,w,c
  2660   0027DE  6ED9               	movwf	fsr2l,c
  2661   0027E0  6ADA               	clrf	fsr2h,c
  2662   0027E2  0E02               	movlw	2
  2663   0027E4  26D9               	addwf	fsr2l,f,c
  2664   0027E6  CFDE F033          	movff	postinc2,??_scale_RGB
  2665   0027EA  CFDD F034          	movff	postdec2,??_scale_RGB+1
  2666   0027EE  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  2667   0027F2  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  2668   0027F6  6A03               	clrf	(___xxtofl@val+2)^0,c
  2669   0027F8  6A04               	clrf	(___xxtofl@val+3)^0,c
  2670   0027FA  0E00               	movlw	0
  2671   0027FC  ECB8  F00F         	call	___xxtofl
  2672   002800  C001  F00F         	movff	?___xxtofl,___flmul@b
  2673   002804  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2674   002808  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2675   00280C  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2676   002810  ECA5  F00C         	call	___flmul	;wreg free
  2677   002814  C00F  F028         	movff	?___flmul,___fltol@f1
  2678   002818  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  2679   00281C  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  2680   002820  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  2681   002824  ECB2  F012         	call	___fltol	;wreg free
  2682   002828  5032               	movf	scale_RGB@p^0,w,c
  2683   00282A  6ED9               	movwf	fsr2l,c
  2684   00282C  6ADA               	clrf	fsr2h,c
  2685   00282E  0E02               	movlw	2
  2686   002830  26D9               	addwf	fsr2l,f,c
  2687   002832  C028  FFDE         	movff	?___fltol,postinc2
  2688   002836  C029  FFDD         	movff	?___fltol+1,postdec2
  2689   00283A  0012               	return		;funcret
  2690   00283C                     __end_of_scale_RGB:
  2691                           	callstack 0
  2692                           
  2693 ;; *************** function ___xxtofl *****************
  2694 ;; Defined at:
  2695 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  sign            1    wreg     unsigned char 
  2698 ;;  val             4    0[COMRAM] long 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  sign            1    8[COMRAM] unsigned char 
  2701 ;;  arg             4   10[COMRAM] unsigned long 
  2702 ;;  exp             1    9[COMRAM] unsigned char 
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  4    0[COMRAM] unsigned char 
  2705 ;; Registers used:
  2706 ;;		wreg, status,2, status,0
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2712 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2713 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2714 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2715 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2716 ;;Total ram usage:       14 bytes
  2717 ;; Hardware stack levels used: 1
  2718 ;; Hardware stack levels required when called: 1
  2719 ;; This function calls:
  2720 ;;		Nothing
  2721 ;; This function is called by:
  2722 ;;		_scale_RGB
  2723 ;;		_stop
  2724 ;;		_turnLeft
  2725 ;;		_turnRight
  2726 ;;		_fullSpeedAhead
  2727 ;;		_fullSpeedReverse
  2728 ;;		_turnLeft90
  2729 ;;		_turnRight90
  2730 ;;		_turnLeft135
  2731 ;;		_turnRight135
  2732 ;;		_UTurn
  2733 ;;		_headbuttReverse
  2734 ;;		_squareReverse
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text13
  2739   001F70                     __ptext13:
  2740                           	callstack 0
  2741   001F70                     ___xxtofl:
  2742                           	callstack 27
  2743                           
  2744                           ;incstack = 0
  2745                           ;___xxtofl@sign stored from wreg
  2746   001F70  6E09               	movwf	___xxtofl@sign^0,c
  2747   001F72  5009               	movf	___xxtofl@sign^0,w,c
  2748   001F74  B4D8               	btfsc	status,2,c
  2749   001F76  EFBF  F00F         	goto	u2371
  2750   001F7A  EFC1  F00F         	goto	u2370
  2751   001F7E                     u2371:
  2752   001F7E  EFE3  F00F         	goto	l1404
  2753   001F82                     u2370:
  2754   001F82  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2755   001F84  EFC8  F00F         	goto	u2380
  2756   001F88  EFC6  F00F         	goto	u2381
  2757   001F8C                     u2381:
  2758   001F8C  EFE3  F00F         	goto	l1404
  2759   001F90                     u2380:
  2760   001F90  C001  F005         	movff	___xxtofl@val,??___xxtofl
  2761   001F94  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  2762   001F98  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  2763   001F9C  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  2764   001FA0  1E05               	comf	??___xxtofl^0,f,c
  2765   001FA2  1E06               	comf	(??___xxtofl+1)^0,f,c
  2766   001FA4  1E07               	comf	(??___xxtofl+2)^0,f,c
  2767   001FA6  1E08               	comf	(??___xxtofl+3)^0,f,c
  2768   001FA8  2A05               	incf	??___xxtofl^0,f,c
  2769   001FAA  0E00               	movlw	0
  2770   001FAC  2206               	addwfc	(??___xxtofl+1)^0,f,c
  2771   001FAE  2207               	addwfc	(??___xxtofl+2)^0,f,c
  2772   001FB0  2208               	addwfc	(??___xxtofl+3)^0,f,c
  2773   001FB2  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  2774   001FB6  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  2775   001FBA  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  2776   001FBE  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  2777   001FC2  EFEB  F00F         	goto	l3427
  2778   001FC6                     l1404:
  2779   001FC6  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  2780   001FCA  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2781   001FCE  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2782   001FD2  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2783   001FD6                     l3427:
  2784   001FD6  5001               	movf	___xxtofl@val^0,w,c
  2785   001FD8  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  2786   001FDA  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  2787   001FDC  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  2788   001FDE  A4D8               	btfss	status,2,c
  2789   001FE0  EFF4  F00F         	goto	u2391
  2790   001FE4  EFF6  F00F         	goto	u2390
  2791   001FE8                     u2391:
  2792   001FE8  EF00  F010         	goto	l3433
  2793   001FEC                     u2390:
  2794   001FEC  0E00               	movlw	0
  2795   001FEE  6E01               	movwf	?___xxtofl^0,c
  2796   001FF0  0E00               	movlw	0
  2797   001FF2  6E02               	movwf	(?___xxtofl+1)^0,c
  2798   001FF4  0E00               	movlw	0
  2799   001FF6  6E03               	movwf	(?___xxtofl+2)^0,c
  2800   001FF8  0E00               	movlw	0
  2801   001FFA  6E04               	movwf	(?___xxtofl+3)^0,c
  2802   001FFC  EF91  F010         	goto	l1407
  2803   002000                     l3433:
  2804   002000  0E96               	movlw	150
  2805   002002  6E0A               	movwf	___xxtofl@exp^0,c
  2806   002004  EF0A  F010         	goto	l3437
  2807   002008                     l3435:
  2808   002008  2A0A               	incf	___xxtofl@exp^0,f,c
  2809   00200A  90D8               	bcf	status,0,c
  2810   00200C  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2811   00200E  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2812   002010  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2813   002012  320B               	rrcf	___xxtofl@arg^0,f,c
  2814   002014                     l3437:
  2815   002014  0E00               	movlw	0
  2816   002016  140B               	andwf	___xxtofl@arg^0,w,c
  2817   002018  6E05               	movwf	??___xxtofl^0,c
  2818   00201A  0E00               	movlw	0
  2819   00201C  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2820   00201E  6E06               	movwf	(??___xxtofl+1)^0,c
  2821   002020  0E00               	movlw	0
  2822   002022  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2823   002024  6E07               	movwf	(??___xxtofl+2)^0,c
  2824   002026  0EFE               	movlw	254
  2825   002028  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2826   00202A  6E08               	movwf	(??___xxtofl+3)^0,c
  2827   00202C  5005               	movf	??___xxtofl^0,w,c
  2828   00202E  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2829   002030  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2830   002032  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2831   002034  A4D8               	btfss	status,2,c
  2832   002036  EF1F  F010         	goto	u2401
  2833   00203A  EF21  F010         	goto	u2400
  2834   00203E                     u2401:
  2835   00203E  EF04  F010         	goto	l3435
  2836   002042                     u2400:
  2837   002042  EF2F  F010         	goto	l1411
  2838   002046                     l3439:
  2839   002046  2A0A               	incf	___xxtofl@exp^0,f,c
  2840   002048  0E01               	movlw	1
  2841   00204A  260B               	addwf	___xxtofl@arg^0,f,c
  2842   00204C  0E00               	movlw	0
  2843   00204E  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  2844   002050  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  2845   002052  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  2846   002054  90D8               	bcf	status,0,c
  2847   002056  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  2848   002058  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  2849   00205A  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  2850   00205C  320B               	rrcf	___xxtofl@arg^0,f,c
  2851   00205E                     l1411:
  2852   00205E  0E00               	movlw	0
  2853   002060  140B               	andwf	___xxtofl@arg^0,w,c
  2854   002062  6E05               	movwf	??___xxtofl^0,c
  2855   002064  0E00               	movlw	0
  2856   002066  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  2857   002068  6E06               	movwf	(??___xxtofl+1)^0,c
  2858   00206A  0E00               	movlw	0
  2859   00206C  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  2860   00206E  6E07               	movwf	(??___xxtofl+2)^0,c
  2861   002070  0EFF               	movlw	255
  2862   002072  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  2863   002074  6E08               	movwf	(??___xxtofl+3)^0,c
  2864   002076  5005               	movf	??___xxtofl^0,w,c
  2865   002078  1006               	iorwf	(??___xxtofl+1)^0,w,c
  2866   00207A  1007               	iorwf	(??___xxtofl+2)^0,w,c
  2867   00207C  1008               	iorwf	(??___xxtofl+3)^0,w,c
  2868   00207E  A4D8               	btfss	status,2,c
  2869   002080  EF44  F010         	goto	u2411
  2870   002084  EF46  F010         	goto	u2410
  2871   002088                     u2411:
  2872   002088  EF23  F010         	goto	l3439
  2873   00208C                     u2410:
  2874   00208C  EF4E  F010         	goto	l3447
  2875   002090                     l3445:
  2876   002090  060A               	decf	___xxtofl@exp^0,f,c
  2877   002092  90D8               	bcf	status,0,c
  2878   002094  360B               	rlcf	___xxtofl@arg^0,f,c
  2879   002096  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  2880   002098  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  2881   00209A  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  2882   00209C                     l3447:
  2883   00209C  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  2884   00209E  EF53  F010         	goto	u2421
  2885   0020A2  EF55  F010         	goto	u2420
  2886   0020A6                     u2421:
  2887   0020A6  EF5D  F010         	goto	l1418
  2888   0020AA                     u2420:
  2889   0020AA  0E02               	movlw	2
  2890   0020AC  600A               	cpfslt	___xxtofl@exp^0,c
  2891   0020AE  EF5B  F010         	goto	u2431
  2892   0020B2  EF5D  F010         	goto	u2430
  2893   0020B6                     u2431:
  2894   0020B6  EF48  F010         	goto	l3445
  2895   0020BA                     u2430:
  2896   0020BA                     l1418:
  2897   0020BA  B00A               	btfsc	___xxtofl@exp^0,0,c
  2898   0020BC  EF62  F010         	goto	u2441
  2899   0020C0  EF64  F010         	goto	u2440
  2900   0020C4                     u2441:
  2901   0020C4  EF65  F010         	goto	l3453
  2902   0020C8                     u2440:
  2903   0020C8  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  2904   0020CA                     l3453:
  2905   0020CA  90D8               	bcf	status,0,c
  2906   0020CC  320A               	rrcf	___xxtofl@exp^0,f,c
  2907   0020CE  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  2908   0020D2  6A06               	clrf	(??___xxtofl+1)^0,c
  2909   0020D4  6A07               	clrf	(??___xxtofl+2)^0,c
  2910   0020D6  6A08               	clrf	(??___xxtofl+3)^0,c
  2911   0020D8  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  2912   0020DC  6A07               	clrf	(??___xxtofl+2)^0,c
  2913   0020DE  6A06               	clrf	(??___xxtofl+1)^0,c
  2914   0020E0  6A05               	clrf	??___xxtofl^0,c
  2915   0020E2  5005               	movf	??___xxtofl^0,w,c
  2916   0020E4  120B               	iorwf	___xxtofl@arg^0,f,c
  2917   0020E6  5006               	movf	(??___xxtofl+1)^0,w,c
  2918   0020E8  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  2919   0020EA  5007               	movf	(??___xxtofl+2)^0,w,c
  2920   0020EC  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  2921   0020EE  5008               	movf	(??___xxtofl+3)^0,w,c
  2922   0020F0  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  2923   0020F2  5009               	movf	___xxtofl@sign^0,w,c
  2924   0020F4  B4D8               	btfsc	status,2,c
  2925   0020F6  EF7F  F010         	goto	u2451
  2926   0020FA  EF81  F010         	goto	u2450
  2927   0020FE                     u2451:
  2928   0020FE  EF89  F010         	goto	l3463
  2929   002102                     u2450:
  2930   002102  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  2931   002104  EF88  F010         	goto	u2460
  2932   002108  EF86  F010         	goto	u2461
  2933   00210C                     u2461:
  2934   00210C  EF89  F010         	goto	l3463
  2935   002110                     u2460:
  2936   002110  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  2937   002112                     l3463:
  2938   002112  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  2939   002116  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  2940   00211A  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  2941   00211E  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  2942   002122                     l1407:
  2943   002122  0012               	return		;funcret
  2944   002124                     __end_of___xxtofl:
  2945                           	callstack 0
  2946                           
  2947 ;; *************** function ___fltol *****************
  2948 ;; Defined at:
  2949 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  f1              4   39[COMRAM] unsigned char 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  exp1            1   48[COMRAM] unsigned char 
  2954 ;;  sign1           1   47[COMRAM] unsigned char 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  4   39[COMRAM] long 
  2957 ;; Registers used:
  2958 ;;		wreg, status,2, status,0
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2966 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2967 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2968 ;;Total ram usage:       10 bytes
  2969 ;; Hardware stack levels used: 1
  2970 ;; Hardware stack levels required when called: 1
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_scale_RGB
  2975 ;;		_stop
  2976 ;;		_turnLeft
  2977 ;;		_turnRight
  2978 ;;		_fullSpeedAhead
  2979 ;;		_fullSpeedReverse
  2980 ;;		_turnLeft90
  2981 ;;		_turnRight90
  2982 ;;		_turnLeft135
  2983 ;;		_turnRight135
  2984 ;;		_UTurn
  2985 ;;		_headbuttReverse
  2986 ;;		_squareReverse
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text14
  2991   002564                     __ptext14:
  2992                           	callstack 0
  2993   002564                     ___fltol:
  2994                           	callstack 27
  2995   002564  342A               	rlcf	(___fltol@f1+2)^0,w,c
  2996   002566  342B               	rlcf	(___fltol@f1+3)^0,w,c
  2997   002568  6E31               	movwf	___fltol@exp1^0,c
  2998   00256A  5031               	movf	___fltol@exp1^0,w,c
  2999   00256C  A4D8               	btfss	status,2,c
  3000   00256E  EFBB  F012         	goto	u2301
  3001   002572  EFBD  F012         	goto	u2300
  3002   002576                     u2301:
  3003   002576  EFC7  F012         	goto	l3383
  3004   00257A                     u2300:
  3005   00257A                     l3379:
  3006   00257A  0E00               	movlw	0
  3007   00257C  6E28               	movwf	?___fltol^0,c
  3008   00257E  0E00               	movlw	0
  3009   002580  6E29               	movwf	(?___fltol+1)^0,c
  3010   002582  0E00               	movlw	0
  3011   002584  6E2A               	movwf	(?___fltol+2)^0,c
  3012   002586  0E00               	movlw	0
  3013   002588  6E2B               	movwf	(?___fltol+3)^0,c
  3014   00258A  EF34  F013         	goto	l1046
  3015   00258E                     l3383:
  3016   00258E  C028  F02C         	movff	___fltol@f1,??___fltol
  3017   002592  C029  F02D         	movff	___fltol@f1+1,??___fltol+1
  3018   002596  C02A  F02E         	movff	___fltol@f1+2,??___fltol+2
  3019   00259A  C02B  F02F         	movff	___fltol@f1+3,??___fltol+3
  3020   00259E  0E20               	movlw	32
  3021   0025A0  EFD7  F012         	goto	u2310
  3022   0025A4                     u2315:
  3023   0025A4  90D8               	bcf	status,0,c
  3024   0025A6  322F               	rrcf	(??___fltol+3)^0,f,c
  3025   0025A8  322E               	rrcf	(??___fltol+2)^0,f,c
  3026   0025AA  322D               	rrcf	(??___fltol+1)^0,f,c
  3027   0025AC  322C               	rrcf	??___fltol^0,f,c
  3028   0025AE                     u2310:
  3029   0025AE  2EE8               	decfsz	wreg,f,c
  3030   0025B0  EFD2  F012         	goto	u2315
  3031   0025B4  502C               	movf	??___fltol^0,w,c
  3032   0025B6  6E30               	movwf	___fltol@sign1^0,c
  3033   0025B8  8E2A               	bsf	(___fltol@f1+2)^0,7,c
  3034   0025BA  0EFF               	movlw	255
  3035   0025BC  1628               	andwf	___fltol@f1^0,f,c
  3036   0025BE  0EFF               	movlw	255
  3037   0025C0  1629               	andwf	(___fltol@f1+1)^0,f,c
  3038   0025C2  0EFF               	movlw	255
  3039   0025C4  162A               	andwf	(___fltol@f1+2)^0,f,c
  3040   0025C6  0E00               	movlw	0
  3041   0025C8  162B               	andwf	(___fltol@f1+3)^0,f,c
  3042   0025CA  0E96               	movlw	150
  3043   0025CC  5E31               	subwf	___fltol@exp1^0,f,c
  3044   0025CE  BE31               	btfsc	___fltol@exp1^0,7,c
  3045   0025D0  EFEE  F012         	goto	u2320
  3046   0025D4  EFEC  F012         	goto	u2321
  3047   0025D8                     u2321:
  3048   0025D8  EF04  F013         	goto	l3403
  3049   0025DC                     u2320:
  3050   0025DC  5031               	movf	___fltol@exp1^0,w,c
  3051   0025DE  0A80               	xorlw	128
  3052   0025E0  0F97               	addlw	151
  3053   0025E2  B0D8               	btfsc	status,0,c
  3054   0025E4  EFF6  F012         	goto	u2331
  3055   0025E8  EFF8  F012         	goto	u2330
  3056   0025EC                     u2331:
  3057   0025EC  EFFA  F012         	goto	l3399
  3058   0025F0                     u2330:
  3059   0025F0  EFBD  F012         	goto	l3379
  3060   0025F4                     l3399:
  3061   0025F4  90D8               	bcf	status,0,c
  3062   0025F6  322B               	rrcf	(___fltol@f1+3)^0,f,c
  3063   0025F8  322A               	rrcf	(___fltol@f1+2)^0,f,c
  3064   0025FA  3229               	rrcf	(___fltol@f1+1)^0,f,c
  3065   0025FC  3228               	rrcf	___fltol@f1^0,f,c
  3066   0025FE  3E31               	incfsz	___fltol@exp1^0,f,c
  3067   002600  EFFA  F012         	goto	l3399
  3068   002604  EF1C  F013         	goto	l3413
  3069   002608                     l3403:
  3070   002608  0E1F               	movlw	31
  3071   00260A  6431               	cpfsgt	___fltol@exp1^0,c
  3072   00260C  EF0A  F013         	goto	u2341
  3073   002610  EF0C  F013         	goto	u2340
  3074   002614                     u2341:
  3075   002614  EF14  F013         	goto	l3411
  3076   002618                     u2340:
  3077   002618  EFBD  F012         	goto	l3379
  3078   00261C                     l3409:
  3079   00261C  90D8               	bcf	status,0,c
  3080   00261E  3628               	rlcf	___fltol@f1^0,f,c
  3081   002620  3629               	rlcf	(___fltol@f1+1)^0,f,c
  3082   002622  362A               	rlcf	(___fltol@f1+2)^0,f,c
  3083   002624  362B               	rlcf	(___fltol@f1+3)^0,f,c
  3084   002626  0631               	decf	___fltol@exp1^0,f,c
  3085   002628                     l3411:
  3086   002628  5031               	movf	___fltol@exp1^0,w,c
  3087   00262A  A4D8               	btfss	status,2,c
  3088   00262C  EF1A  F013         	goto	u2351
  3089   002630  EF1C  F013         	goto	u2350
  3090   002634                     u2351:
  3091   002634  EF0E  F013         	goto	l3409
  3092   002638                     u2350:
  3093   002638                     l3413:
  3094   002638  5030               	movf	___fltol@sign1^0,w,c
  3095   00263A  B4D8               	btfsc	status,2,c
  3096   00263C  EF22  F013         	goto	u2361
  3097   002640  EF24  F013         	goto	u2360
  3098   002644                     u2361:
  3099   002644  EF2C  F013         	goto	l3417
  3100   002648                     u2360:
  3101   002648  1E2B               	comf	(___fltol@f1+3)^0,f,c
  3102   00264A  1E2A               	comf	(___fltol@f1+2)^0,f,c
  3103   00264C  1E29               	comf	(___fltol@f1+1)^0,f,c
  3104   00264E  6C28               	negf	___fltol@f1^0,c
  3105   002650  0E00               	movlw	0
  3106   002652  2229               	addwfc	(___fltol@f1+1)^0,f,c
  3107   002654  222A               	addwfc	(___fltol@f1+2)^0,f,c
  3108   002656  222B               	addwfc	(___fltol@f1+3)^0,f,c
  3109   002658                     l3417:
  3110   002658  C028  F028         	movff	___fltol@f1,?___fltol
  3111   00265C  C029  F029         	movff	___fltol@f1+1,?___fltol+1
  3112   002660  C02A  F02A         	movff	___fltol@f1+2,?___fltol+2
  3113   002664  C02B  F02B         	movff	___fltol@f1+3,?___fltol+3
  3114   002668                     l1046:
  3115   002668  0012               	return		;funcret
  3116   00266A                     __end_of___fltol:
  3117                           	callstack 0
  3118                           
  3119 ;; *************** function ___flmul *****************
  3120 ;; Defined at:
  3121 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  b               4   14[COMRAM] long 
  3124 ;;  a               4   18[COMRAM] long 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  prod            4   33[COMRAM] struct .
  3127 ;;  grs             4   27[COMRAM] unsigned long 
  3128 ;;  temp            2   37[COMRAM] struct .
  3129 ;;  bexp            1   32[COMRAM] unsigned char 
  3130 ;;  aexp            1   31[COMRAM] unsigned char 
  3131 ;;  sign            1   26[COMRAM] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  4   14[COMRAM] unsigned char 
  3134 ;; Registers used:
  3135 ;;		wreg, status,2, status,0, prodl, prodh
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3141 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3142 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3143 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3144 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3145 ;;Total ram usage:       25 bytes
  3146 ;; Hardware stack levels used: 1
  3147 ;; Hardware stack levels required when called: 1
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_scale_RGB
  3152 ;;		_stop
  3153 ;;		_turnLeft
  3154 ;;		_turnRight
  3155 ;;		_fullSpeedAhead
  3156 ;;		_fullSpeedReverse
  3157 ;;		_turnLeft90
  3158 ;;		_turnRight90
  3159 ;;		_turnLeft135
  3160 ;;		_turnRight135
  3161 ;;		_UTurn
  3162 ;;		_headbuttReverse
  3163 ;;		_squareReverse
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text15
  3168   00194A                     __ptext15:
  3169                           	callstack 0
  3170   00194A                     ___flmul:
  3171                           	callstack 27
  3172   00194A  5012               	movf	(___flmul@b+3)^0,w,c
  3173   00194C  0B80               	andlw	128
  3174   00194E  6E1B               	movwf	___flmul@sign^0,c
  3175   001950  5012               	movf	(___flmul@b+3)^0,w,c
  3176   001952  2412               	addwf	(___flmul@b+3)^0,w,c
  3177   001954  6E21               	movwf	___flmul@bexp^0,c
  3178   001956  AE11               	btfss	(___flmul@b+2)^0,7,c
  3179   001958  EFB0  F00C         	goto	u2111
  3180   00195C  EFB2  F00C         	goto	u2110
  3181   001960                     u2111:
  3182   001960  EFB3  F00C         	goto	l3253
  3183   001964                     u2110:
  3184   001964  8021               	bsf	___flmul@bexp^0,0,c
  3185   001966                     l3253:
  3186   001966  5021               	movf	___flmul@bexp^0,w,c
  3187   001968  B4D8               	btfsc	status,2,c
  3188   00196A  EFB9  F00C         	goto	u2121
  3189   00196E  EFBB  F00C         	goto	u2120
  3190   001972                     u2121:
  3191   001972  EFCE  F00C         	goto	l3261
  3192   001976                     u2120:
  3193   001976  2821               	incf	___flmul@bexp^0,w,c
  3194   001978  A4D8               	btfss	status,2,c
  3195   00197A  EFC1  F00C         	goto	u2131
  3196   00197E  EFC3  F00C         	goto	u2130
  3197   001982                     u2131:
  3198   001982  EFCB  F00C         	goto	l3259
  3199   001986                     u2130:
  3200   001986  0E00               	movlw	0
  3201   001988  6E0F               	movwf	___flmul@b^0,c
  3202   00198A  0E00               	movlw	0
  3203   00198C  6E10               	movwf	(___flmul@b+1)^0,c
  3204   00198E  0E00               	movlw	0
  3205   001990  6E11               	movwf	(___flmul@b+2)^0,c
  3206   001992  0E00               	movlw	0
  3207   001994  6E12               	movwf	(___flmul@b+3)^0,c
  3208   001996                     l3259:
  3209   001996  8E11               	bsf	(___flmul@b+2)^0,7,c
  3210   001998  EFD6  F00C         	goto	l3263
  3211   00199C                     l3261:
  3212   00199C  0E00               	movlw	0
  3213   00199E  6E0F               	movwf	___flmul@b^0,c
  3214   0019A0  0E00               	movlw	0
  3215   0019A2  6E10               	movwf	(___flmul@b+1)^0,c
  3216   0019A4  0E00               	movlw	0
  3217   0019A6  6E11               	movwf	(___flmul@b+2)^0,c
  3218   0019A8  0E00               	movlw	0
  3219   0019AA  6E12               	movwf	(___flmul@b+3)^0,c
  3220   0019AC                     l3263:
  3221   0019AC  5016               	movf	(___flmul@a+3)^0,w,c
  3222   0019AE  0B80               	andlw	128
  3223   0019B0  1A1B               	xorwf	___flmul@sign^0,f,c
  3224   0019B2  5016               	movf	(___flmul@a+3)^0,w,c
  3225   0019B4  2416               	addwf	(___flmul@a+3)^0,w,c
  3226   0019B6  6E20               	movwf	___flmul@aexp^0,c
  3227   0019B8  AE15               	btfss	(___flmul@a+2)^0,7,c
  3228   0019BA  EFE1  F00C         	goto	u2141
  3229   0019BE  EFE3  F00C         	goto	u2140
  3230   0019C2                     u2141:
  3231   0019C2  EFE4  F00C         	goto	l3271
  3232   0019C6                     u2140:
  3233   0019C6  8020               	bsf	___flmul@aexp^0,0,c
  3234   0019C8                     l3271:
  3235   0019C8  5020               	movf	___flmul@aexp^0,w,c
  3236   0019CA  B4D8               	btfsc	status,2,c
  3237   0019CC  EFEA  F00C         	goto	u2151
  3238   0019D0  EFEC  F00C         	goto	u2150
  3239   0019D4                     u2151:
  3240   0019D4  EFFF  F00C         	goto	l3279
  3241   0019D8                     u2150:
  3242   0019D8  2820               	incf	___flmul@aexp^0,w,c
  3243   0019DA  A4D8               	btfss	status,2,c
  3244   0019DC  EFF2  F00C         	goto	u2161
  3245   0019E0  EFF4  F00C         	goto	u2160
  3246   0019E4                     u2161:
  3247   0019E4  EFFC  F00C         	goto	l3277
  3248   0019E8                     u2160:
  3249   0019E8  0E00               	movlw	0
  3250   0019EA  6E13               	movwf	___flmul@a^0,c
  3251   0019EC  0E00               	movlw	0
  3252   0019EE  6E14               	movwf	(___flmul@a+1)^0,c
  3253   0019F0  0E00               	movlw	0
  3254   0019F2  6E15               	movwf	(___flmul@a+2)^0,c
  3255   0019F4  0E00               	movlw	0
  3256   0019F6  6E16               	movwf	(___flmul@a+3)^0,c
  3257   0019F8                     l3277:
  3258   0019F8  8E15               	bsf	(___flmul@a+2)^0,7,c
  3259   0019FA  EF07  F00D         	goto	l1363
  3260   0019FE                     l3279:
  3261   0019FE  0E00               	movlw	0
  3262   001A00  6E13               	movwf	___flmul@a^0,c
  3263   001A02  0E00               	movlw	0
  3264   001A04  6E14               	movwf	(___flmul@a+1)^0,c
  3265   001A06  0E00               	movlw	0
  3266   001A08  6E15               	movwf	(___flmul@a+2)^0,c
  3267   001A0A  0E00               	movlw	0
  3268   001A0C  6E16               	movwf	(___flmul@a+3)^0,c
  3269   001A0E                     l1363:
  3270   001A0E  5020               	movf	___flmul@aexp^0,w,c
  3271   001A10  B4D8               	btfsc	status,2,c
  3272   001A12  EF0D  F00D         	goto	u2171
  3273   001A16  EF0F  F00D         	goto	u2170
  3274   001A1A                     u2171:
  3275   001A1A  EF17  F00D         	goto	l3283
  3276   001A1E                     u2170:
  3277   001A1E  5021               	movf	___flmul@bexp^0,w,c
  3278   001A20  A4D8               	btfss	status,2,c
  3279   001A22  EF15  F00D         	goto	u2181
  3280   001A26  EF17  F00D         	goto	u2180
  3281   001A2A                     u2181:
  3282   001A2A  EF21  F00D         	goto	l3287
  3283   001A2E                     u2180:
  3284   001A2E                     l3283:
  3285   001A2E  0E00               	movlw	0
  3286   001A30  6E0F               	movwf	?___flmul^0,c
  3287   001A32  0E00               	movlw	0
  3288   001A34  6E10               	movwf	(?___flmul+1)^0,c
  3289   001A36  0E00               	movlw	0
  3290   001A38  6E11               	movwf	(?___flmul+2)^0,c
  3291   001A3A  0E00               	movlw	0
  3292   001A3C  6E12               	movwf	(?___flmul+3)^0,c
  3293   001A3E  EFB9  F00E         	goto	l1367
  3294   001A42                     l3287:
  3295   001A42  5015               	movf	(___flmul@a+2)^0,w,c
  3296   001A44  020F               	mulwf	___flmul@b^0,c
  3297   001A46  CFF3 F026          	movff	prodl,___flmul@temp
  3298   001A4A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3299   001A4E  5026               	movf	___flmul@temp^0,w,c
  3300   001A50  6E1C               	movwf	___flmul@grs^0,c
  3301   001A52  6A1D               	clrf	(___flmul@grs+1)^0,c
  3302   001A54  6A1E               	clrf	(___flmul@grs+2)^0,c
  3303   001A56  6A1F               	clrf	(___flmul@grs+3)^0,c
  3304   001A58  5027               	movf	(___flmul@temp+1)^0,w,c
  3305   001A5A  6E22               	movwf	___flmul@prod^0,c
  3306   001A5C  6A23               	clrf	(___flmul@prod+1)^0,c
  3307   001A5E  6A24               	clrf	(___flmul@prod+2)^0,c
  3308   001A60  6A25               	clrf	(___flmul@prod+3)^0,c
  3309   001A62  5014               	movf	(___flmul@a+1)^0,w,c
  3310   001A64  0210               	mulwf	(___flmul@b+1)^0,c
  3311   001A66  CFF3 F026          	movff	prodl,___flmul@temp
  3312   001A6A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3313   001A6E  5026               	movf	___flmul@temp^0,w,c
  3314   001A70  261C               	addwf	___flmul@grs^0,f,c
  3315   001A72  0E00               	movlw	0
  3316   001A74  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3317   001A76  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3318   001A78  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3319   001A7A  5027               	movf	(___flmul@temp+1)^0,w,c
  3320   001A7C  2622               	addwf	___flmul@prod^0,f,c
  3321   001A7E  0E00               	movlw	0
  3322   001A80  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3323   001A82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3324   001A84  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3325   001A86  5013               	movf	___flmul@a^0,w,c
  3326   001A88  0211               	mulwf	(___flmul@b+2)^0,c
  3327   001A8A  CFF3 F026          	movff	prodl,___flmul@temp
  3328   001A8E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3329   001A92  5026               	movf	___flmul@temp^0,w,c
  3330   001A94  261C               	addwf	___flmul@grs^0,f,c
  3331   001A96  0E00               	movlw	0
  3332   001A98  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3333   001A9A  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3334   001A9C  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3335   001A9E  5027               	movf	(___flmul@temp+1)^0,w,c
  3336   001AA0  2622               	addwf	___flmul@prod^0,f,c
  3337   001AA2  0E00               	movlw	0
  3338   001AA4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3339   001AA6  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3340   001AA8  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3341   001AAA  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3342   001AAE  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3343   001AB2  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3344   001AB6  6A1C               	clrf	___flmul@grs^0,c
  3345   001AB8  5013               	movf	___flmul@a^0,w,c
  3346   001ABA  0210               	mulwf	(___flmul@b+1)^0,c
  3347   001ABC  CFF3 F026          	movff	prodl,___flmul@temp
  3348   001AC0  CFF4 F027          	movff	prodh,___flmul@temp+1
  3349   001AC4  5026               	movf	___flmul@temp^0,w,c
  3350   001AC6  261C               	addwf	___flmul@grs^0,f,c
  3351   001AC8  5027               	movf	(___flmul@temp+1)^0,w,c
  3352   001ACA  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3353   001ACC  0E00               	movlw	0
  3354   001ACE  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3355   001AD0  0E00               	movlw	0
  3356   001AD2  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3357   001AD4  5014               	movf	(___flmul@a+1)^0,w,c
  3358   001AD6  020F               	mulwf	___flmul@b^0,c
  3359   001AD8  CFF3 F026          	movff	prodl,___flmul@temp
  3360   001ADC  CFF4 F027          	movff	prodh,___flmul@temp+1
  3361   001AE0  5026               	movf	___flmul@temp^0,w,c
  3362   001AE2  261C               	addwf	___flmul@grs^0,f,c
  3363   001AE4  5027               	movf	(___flmul@temp+1)^0,w,c
  3364   001AE6  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3365   001AE8  0E00               	movlw	0
  3366   001AEA  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3367   001AEC  0E00               	movlw	0
  3368   001AEE  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3369   001AF0  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3370   001AF4  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3371   001AF8  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3372   001AFC  6A1C               	clrf	___flmul@grs^0,c
  3373   001AFE  5013               	movf	___flmul@a^0,w,c
  3374   001B00  020F               	mulwf	___flmul@b^0,c
  3375   001B02  CFF3 F026          	movff	prodl,___flmul@temp
  3376   001B06  CFF4 F027          	movff	prodh,___flmul@temp+1
  3377   001B0A  5026               	movf	___flmul@temp^0,w,c
  3378   001B0C  261C               	addwf	___flmul@grs^0,f,c
  3379   001B0E  5027               	movf	(___flmul@temp+1)^0,w,c
  3380   001B10  221D               	addwfc	(___flmul@grs+1)^0,f,c
  3381   001B12  0E00               	movlw	0
  3382   001B14  221E               	addwfc	(___flmul@grs+2)^0,f,c
  3383   001B16  0E00               	movlw	0
  3384   001B18  221F               	addwfc	(___flmul@grs+3)^0,f,c
  3385   001B1A  5015               	movf	(___flmul@a+2)^0,w,c
  3386   001B1C  0210               	mulwf	(___flmul@b+1)^0,c
  3387   001B1E  CFF3 F026          	movff	prodl,___flmul@temp
  3388   001B22  CFF4 F027          	movff	prodh,___flmul@temp+1
  3389   001B26  5026               	movf	___flmul@temp^0,w,c
  3390   001B28  2622               	addwf	___flmul@prod^0,f,c
  3391   001B2A  5027               	movf	(___flmul@temp+1)^0,w,c
  3392   001B2C  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3393   001B2E  0E00               	movlw	0
  3394   001B30  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3395   001B32  0E00               	movlw	0
  3396   001B34  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3397   001B36  5014               	movf	(___flmul@a+1)^0,w,c
  3398   001B38  0211               	mulwf	(___flmul@b+2)^0,c
  3399   001B3A  CFF3 F026          	movff	prodl,___flmul@temp
  3400   001B3E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3401   001B42  5026               	movf	___flmul@temp^0,w,c
  3402   001B44  2622               	addwf	___flmul@prod^0,f,c
  3403   001B46  5027               	movf	(___flmul@temp+1)^0,w,c
  3404   001B48  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3405   001B4A  0E00               	movlw	0
  3406   001B4C  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3407   001B4E  0E00               	movlw	0
  3408   001B50  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3409   001B52  5015               	movf	(___flmul@a+2)^0,w,c
  3410   001B54  0211               	mulwf	(___flmul@b+2)^0,c
  3411   001B56  CFF3 F026          	movff	prodl,___flmul@temp
  3412   001B5A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3413   001B5E  5026               	movf	___flmul@temp^0,w,c
  3414   001B60  6E17               	movwf	??___flmul^0,c
  3415   001B62  5027               	movf	(___flmul@temp+1)^0,w,c
  3416   001B64  6E18               	movwf	(??___flmul+1)^0,c
  3417   001B66  6A19               	clrf	(??___flmul+2)^0,c
  3418   001B68  6A1A               	clrf	(??___flmul+3)^0,c
  3419   001B6A  C019  F01A         	movff	??___flmul+2,??___flmul+3
  3420   001B6E  C018  F019         	movff	??___flmul+1,??___flmul+2
  3421   001B72  C017  F018         	movff	??___flmul,??___flmul+1
  3422   001B76  6A17               	clrf	??___flmul^0,c
  3423   001B78  5017               	movf	??___flmul^0,w,c
  3424   001B7A  2622               	addwf	___flmul@prod^0,f,c
  3425   001B7C  5018               	movf	(??___flmul+1)^0,w,c
  3426   001B7E  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3427   001B80  5019               	movf	(??___flmul+2)^0,w,c
  3428   001B82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3429   001B84  501A               	movf	(??___flmul+3)^0,w,c
  3430   001B86  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3431   001B88  C01C  F017         	movff	___flmul@grs,??___flmul
  3432   001B8C  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  3433   001B90  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  3434   001B94  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  3435   001B98  0E19               	movlw	25
  3436   001B9A  EFD4  F00D         	goto	u2190
  3437   001B9E                     u2195:
  3438   001B9E  90D8               	bcf	status,0,c
  3439   001BA0  321A               	rrcf	(??___flmul+3)^0,f,c
  3440   001BA2  3219               	rrcf	(??___flmul+2)^0,f,c
  3441   001BA4  3218               	rrcf	(??___flmul+1)^0,f,c
  3442   001BA6  3217               	rrcf	??___flmul^0,f,c
  3443   001BA8                     u2190:
  3444   001BA8  2EE8               	decfsz	wreg,f,c
  3445   001BAA  EFCF  F00D         	goto	u2195
  3446   001BAE  5017               	movf	??___flmul^0,w,c
  3447   001BB0  2622               	addwf	___flmul@prod^0,f,c
  3448   001BB2  5018               	movf	(??___flmul+1)^0,w,c
  3449   001BB4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3450   001BB6  5019               	movf	(??___flmul+2)^0,w,c
  3451   001BB8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3452   001BBA  501A               	movf	(??___flmul+3)^0,w,c
  3453   001BBC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3454   001BBE  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3455   001BC2  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3456   001BC6  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3457   001BCA  6A1C               	clrf	___flmul@grs^0,c
  3458   001BCC  5020               	movf	___flmul@aexp^0,w,c
  3459   001BCE  C021  F017         	movff	___flmul@bexp,??___flmul
  3460   001BD2  6A18               	clrf	(??___flmul+1)^0,c
  3461   001BD4  2617               	addwf	??___flmul^0,f,c
  3462   001BD6  0E00               	movlw	0
  3463   001BD8  2218               	addwfc	(??___flmul+1)^0,f,c
  3464   001BDA  0E82               	movlw	130
  3465   001BDC  2417               	addwf	??___flmul^0,w,c
  3466   001BDE  6E26               	movwf	___flmul@temp^0,c
  3467   001BE0  0EFF               	movlw	255
  3468   001BE2  2018               	addwfc	(??___flmul+1)^0,w,c
  3469   001BE4  6E27               	movwf	(___flmul@temp+1)^0,c
  3470   001BE6  EF0A  F00E         	goto	l3335
  3471   001BEA                     l3329:
  3472   001BEA  90D8               	bcf	status,0,c
  3473   001BEC  3622               	rlcf	___flmul@prod^0,f,c
  3474   001BEE  3623               	rlcf	(___flmul@prod+1)^0,f,c
  3475   001BF0  3624               	rlcf	(___flmul@prod+2)^0,f,c
  3476   001BF2  3625               	rlcf	(___flmul@prod+3)^0,f,c
  3477   001BF4  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  3478   001BF6  EFFF  F00D         	goto	u2201
  3479   001BFA  EF01  F00E         	goto	u2200
  3480   001BFE                     u2201:
  3481   001BFE  EF02  F00E         	goto	l1370
  3482   001C02                     u2200:
  3483   001C02  8022               	bsf	___flmul@prod^0,0,c
  3484   001C04                     l1370:
  3485   001C04  90D8               	bcf	status,0,c
  3486   001C06  361C               	rlcf	___flmul@grs^0,f,c
  3487   001C08  361D               	rlcf	(___flmul@grs+1)^0,f,c
  3488   001C0A  361E               	rlcf	(___flmul@grs+2)^0,f,c
  3489   001C0C  361F               	rlcf	(___flmul@grs+3)^0,f,c
  3490   001C0E  0626               	decf	___flmul@temp^0,f,c
  3491   001C10  A0D8               	btfss	status,0,c
  3492   001C12  0627               	decf	(___flmul@temp+1)^0,f,c
  3493   001C14                     l3335:
  3494   001C14  AE24               	btfss	(___flmul@prod+2)^0,7,c
  3495   001C16  EF0F  F00E         	goto	u2211
  3496   001C1A  EF11  F00E         	goto	u2210
  3497   001C1E                     u2211:
  3498   001C1E  EFF5  F00D         	goto	l3329
  3499   001C22                     u2210:
  3500   001C22  0E00               	movlw	0
  3501   001C24  6E20               	movwf	___flmul@aexp^0,c
  3502   001C26  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  3503   001C28  EF18  F00E         	goto	u2221
  3504   001C2C  EF1A  F00E         	goto	u2220
  3505   001C30                     u2221:
  3506   001C30  EF3E  F00E         	goto	l1372
  3507   001C34                     u2220:
  3508   001C34  0EFF               	movlw	255
  3509   001C36  141C               	andwf	___flmul@grs^0,w,c
  3510   001C38  6E17               	movwf	??___flmul^0,c
  3511   001C3A  0EFF               	movlw	255
  3512   001C3C  141D               	andwf	(___flmul@grs+1)^0,w,c
  3513   001C3E  6E18               	movwf	(??___flmul+1)^0,c
  3514   001C40  0EFF               	movlw	255
  3515   001C42  141E               	andwf	(___flmul@grs+2)^0,w,c
  3516   001C44  6E19               	movwf	(??___flmul+2)^0,c
  3517   001C46  0E7F               	movlw	127
  3518   001C48  141F               	andwf	(___flmul@grs+3)^0,w,c
  3519   001C4A  6E1A               	movwf	(??___flmul+3)^0,c
  3520   001C4C  5017               	movf	??___flmul^0,w,c
  3521   001C4E  1018               	iorwf	(??___flmul+1)^0,w,c
  3522   001C50  1019               	iorwf	(??___flmul+2)^0,w,c
  3523   001C52  101A               	iorwf	(??___flmul+3)^0,w,c
  3524   001C54  B4D8               	btfsc	status,2,c
  3525   001C56  EF2F  F00E         	goto	u2231
  3526   001C5A  EF31  F00E         	goto	u2230
  3527   001C5E                     u2231:
  3528   001C5E  EF35  F00E         	goto	l1373
  3529   001C62                     u2230:
  3530   001C62                     l3343:
  3531   001C62  0E01               	movlw	1
  3532   001C64  6E20               	movwf	___flmul@aexp^0,c
  3533   001C66  EF3E  F00E         	goto	l1372
  3534   001C6A                     l1373:
  3535   001C6A  A022               	btfss	___flmul@prod^0,0,c
  3536   001C6C  EF3A  F00E         	goto	u2241
  3537   001C70  EF3C  F00E         	goto	u2240
  3538   001C74                     u2241:
  3539   001C74  EF3E  F00E         	goto	l1372
  3540   001C78                     u2240:
  3541   001C78  EF31  F00E         	goto	l3343
  3542   001C7C                     l1372:
  3543   001C7C  5020               	movf	___flmul@aexp^0,w,c
  3544   001C7E  B4D8               	btfsc	status,2,c
  3545   001C80  EF44  F00E         	goto	u2251
  3546   001C84  EF46  F00E         	goto	u2250
  3547   001C88                     u2251:
  3548   001C88  EF6A  F00E         	goto	l3355
  3549   001C8C                     u2250:
  3550   001C8C  0E01               	movlw	1
  3551   001C8E  2622               	addwf	___flmul@prod^0,f,c
  3552   001C90  0E00               	movlw	0
  3553   001C92  2223               	addwfc	(___flmul@prod+1)^0,f,c
  3554   001C94  2224               	addwfc	(___flmul@prod+2)^0,f,c
  3555   001C96  2225               	addwfc	(___flmul@prod+3)^0,f,c
  3556   001C98  A025               	btfss	(___flmul@prod+3)^0,0,c
  3557   001C9A  EF51  F00E         	goto	u2261
  3558   001C9E  EF53  F00E         	goto	u2260
  3559   001CA2                     u2261:
  3560   001CA2  EF6A  F00E         	goto	l3355
  3561   001CA6                     u2260:
  3562   001CA6  C022  F017         	movff	___flmul@prod,??___flmul
  3563   001CAA  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  3564   001CAE  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  3565   001CB2  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  3566   001CB6  341A               	rlcf	(??___flmul+3)^0,w,c
  3567   001CB8  321A               	rrcf	(??___flmul+3)^0,f,c
  3568   001CBA  3219               	rrcf	(??___flmul+2)^0,f,c
  3569   001CBC  3218               	rrcf	(??___flmul+1)^0,f,c
  3570   001CBE  3217               	rrcf	??___flmul^0,f,c
  3571   001CC0  C017  F022         	movff	??___flmul,___flmul@prod
  3572   001CC4  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  3573   001CC8  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  3574   001CCC  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  3575   001CD0  4A26               	infsnz	___flmul@temp^0,f,c
  3576   001CD2  2A27               	incf	(___flmul@temp+1)^0,f,c
  3577   001CD4                     l3355:
  3578   001CD4  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  3579   001CD6  EF75  F00E         	goto	u2271
  3580   001CDA  5027               	movf	(___flmul@temp+1)^0,w,c
  3581   001CDC  E108               	bnz	u2270
  3582   001CDE  2826               	incf	___flmul@temp^0,w,c
  3583   001CE0  A0D8               	btfss	status,0,c
  3584   001CE2  EF75  F00E         	goto	u2271
  3585   001CE6  EF77  F00E         	goto	u2270
  3586   001CEA                     u2271:
  3587   001CEA  EF81  F00E         	goto	l3359
  3588   001CEE                     u2270:
  3589   001CEE  0E00               	movlw	0
  3590   001CF0  6E22               	movwf	___flmul@prod^0,c
  3591   001CF2  0E00               	movlw	0
  3592   001CF4  6E23               	movwf	(___flmul@prod+1)^0,c
  3593   001CF6  0E80               	movlw	128
  3594   001CF8  6E24               	movwf	(___flmul@prod+2)^0,c
  3595   001CFA  0E7F               	movlw	127
  3596   001CFC  6E25               	movwf	(___flmul@prod+3)^0,c
  3597   001CFE  EFAF  F00E         	goto	l3371
  3598   001D02                     l3359:
  3599   001D02  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  3600   001D04  EF8E  F00E         	goto	u2280
  3601   001D08  5027               	movf	(___flmul@temp+1)^0,w,c
  3602   001D0A  E106               	bnz	u2281
  3603   001D0C  0426               	decf	___flmul@temp^0,w,c
  3604   001D0E  B0D8               	btfsc	status,0,c
  3605   001D10  EF8C  F00E         	goto	u2281
  3606   001D14  EF8E  F00E         	goto	u2280
  3607   001D18                     u2281:
  3608   001D18  EF9A  F00E         	goto	l1380
  3609   001D1C                     u2280:
  3610   001D1C  0E00               	movlw	0
  3611   001D1E  6E22               	movwf	___flmul@prod^0,c
  3612   001D20  0E00               	movlw	0
  3613   001D22  6E23               	movwf	(___flmul@prod+1)^0,c
  3614   001D24  0E00               	movlw	0
  3615   001D26  6E24               	movwf	(___flmul@prod+2)^0,c
  3616   001D28  0E00               	movlw	0
  3617   001D2A  6E25               	movwf	(___flmul@prod+3)^0,c
  3618   001D2C  0E00               	movlw	0
  3619   001D2E  6E1B               	movwf	___flmul@sign^0,c
  3620   001D30  EFAF  F00E         	goto	l3371
  3621   001D34                     l1380:
  3622   001D34  C026  F021         	movff	___flmul@temp,___flmul@bexp
  3623   001D38  0EFF               	movlw	255
  3624   001D3A  1622               	andwf	___flmul@prod^0,f,c
  3625   001D3C  0EFF               	movlw	255
  3626   001D3E  1623               	andwf	(___flmul@prod+1)^0,f,c
  3627   001D40  0E7F               	movlw	127
  3628   001D42  1624               	andwf	(___flmul@prod+2)^0,f,c
  3629   001D44  0E00               	movlw	0
  3630   001D46  1625               	andwf	(___flmul@prod+3)^0,f,c
  3631   001D48  A021               	btfss	___flmul@bexp^0,0,c
  3632   001D4A  EFA9  F00E         	goto	u2291
  3633   001D4E  EFAB  F00E         	goto	u2290
  3634   001D52                     u2291:
  3635   001D52  EFAC  F00E         	goto	l3369
  3636   001D56                     u2290:
  3637   001D56  8E24               	bsf	(___flmul@prod+2)^0,7,c
  3638   001D58                     l3369:
  3639   001D58  90D8               	bcf	status,0,c
  3640   001D5A  3021               	rrcf	___flmul@bexp^0,w,c
  3641   001D5C  6E25               	movwf	(___flmul@prod+3)^0,c
  3642   001D5E                     l3371:
  3643   001D5E  501B               	movf	___flmul@sign^0,w,c
  3644   001D60  1225               	iorwf	(___flmul@prod+3)^0,f,c
  3645   001D62  C022  F00F         	movff	___flmul@prod,?___flmul
  3646   001D66  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  3647   001D6A  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  3648   001D6E  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  3649   001D72                     l1367:
  3650   001D72  0012               	return		;funcret
  3651   001D74                     __end_of___flmul:
  3652                           	callstack 0
  3653                           
  3654 ;; *************** function _read_timer *****************
  3655 ;; Defined at:
  3656 ;;		line 46 in file "timers.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;  tH              1    0[COMRAM] PTR unsigned char 
  3659 ;;		 -> forward_navigation@timerH(1), 
  3660 ;;  tL              1    1[COMRAM] PTR unsigned char 
  3661 ;;		 -> forward_navigation@timerL(1), 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;		None
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, fsr2l, fsr2h, status,2
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3673 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3677 ;;Total ram usage:        2 bytes
  3678 ;; Hardware stack levels used: 1
  3679 ;; Hardware stack levels required when called: 1
  3680 ;; This function calls:
  3681 ;;		Nothing
  3682 ;; This function is called by:
  3683 ;;		_forward_navigation
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text16
  3688   003984                     __ptext16:
  3689                           	callstack 0
  3690   003984                     _read_timer:
  3691                           	callstack 28
  3692   003984                     
  3693                           ;timers.c: 46: void read_timer(unsigned char *tH, unsigned char *tL);timers.c: 47: {;tim
      +                          ers.c: 51:     *tL = TMR0L;
  3694   003984  5002               	movf	read_timer@tL^0,w,c
  3695   003986  6ED9               	movwf	fsr2l,c
  3696   003988  6ADA               	clrf	fsr2h,c
  3697   00398A  CFD3 FFDF          	movff	4051,indf2	;volatile
  3698                           
  3699                           ;timers.c: 52:     *tH = TMR0H;
  3700   00398E  5001               	movf	read_timer@tH^0,w,c
  3701   003990  6ED9               	movwf	fsr2l,c
  3702   003992  6ADA               	clrf	fsr2h,c
  3703   003994  CFD4 FFDF          	movff	4052,indf2	;volatile
  3704   003998  0012               	return		;funcret
  3705   00399A                     __end_of_read_timer:
  3706                           	callstack 0
  3707                           
  3708 ;; *************** function _pick_card *****************
  3709 ;; Defined at:
  3710 ;;		line 141 in file "manoeuvres.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  3713 ;;		 -> main@motorL(9), 
  3714 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  3715 ;;		 -> main@motorR(9), 
  3716 ;;  backtrack       1   34[COMRAM] unsigned char 
  3717 ;;  key             1   35[COMRAM] unsigned char 
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3731 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3732 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3733 ;;Total ram usage:        6 bytes
  3734 ;; Hardware stack levels used: 1
  3735 ;; Hardware stack levels required when called: 6
  3736 ;; This function calls:
  3737 ;;		_card_blue
  3738 ;;		_card_cyan
  3739 ;;		_card_green
  3740 ;;		_card_orange
  3741 ;;		_card_pink
  3742 ;;		_card_red
  3743 ;;		_card_white
  3744 ;;		_card_yellow
  3745 ;; This function is called by:
  3746 ;;		_forward_navigation
  3747 ;;		_return_to_sender
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text17
  3752   00266A                     __ptext17:
  3753                           	callstack 0
  3754   00266A                     _pick_card:
  3755                           	callstack 23
  3756   00266A                     
  3757                           ;manoeuvres.c: 141: void pick_card(DC_motor *mL, DC_motor *mR, unsigned char backtrack, 
      +                          unsigned char key);manoeuvres.c: 142: {;manoeuvres.c: 143:     switch (key) {
  3758   00266A  EF85  F013         	goto	l3769
  3759   00266E                     l3751:
  3760                           
  3761                           ;manoeuvres.c: 145:             card_red(mL, mR, backtrack);
  3762   00266E  C021  F01C         	movff	pick_card@mL,card_red@mL
  3763   002672  C022  F01D         	movff	pick_card@mR,card_red@mR
  3764   002676  C023  F01E         	movff	pick_card@backtrack,card_red@backtrack
  3765   00267A  EC8F  F018         	call	_card_red	;wreg free
  3766                           
  3767                           ;manoeuvres.c: 146:             break;
  3768   00267E  EFB2  F013         	goto	l599
  3769   002682                     l3753:
  3770                           
  3771                           ;manoeuvres.c: 148:             card_green(mL, mR, backtrack);
  3772   002682  C021  F01C         	movff	pick_card@mL,card_green@mL
  3773   002686  C022  F01D         	movff	pick_card@mR,card_green@mR
  3774   00268A  C023  F01E         	movff	pick_card@backtrack,card_green@backtrack
  3775   00268E  ECF7  F018         	call	_card_green	;wreg free
  3776                           
  3777                           ;manoeuvres.c: 149:             break;
  3778   002692  EFB2  F013         	goto	l599
  3779   002696                     l3755:
  3780                           
  3781                           ;manoeuvres.c: 151:             card_blue(mL, mR, backtrack);
  3782   002696  C021  F01C         	movff	pick_card@mL,card_blue@mL
  3783   00269A  C022  F01D         	movff	pick_card@mR,card_blue@mR
  3784   00269E  C023  F01E         	movff	pick_card@backtrack,card_blue@backtrack
  3785   0026A2  EC5F  F019         	call	_card_blue	;wreg free
  3786                           
  3787                           ;manoeuvres.c: 152:             break;
  3788   0026A6  EFB2  F013         	goto	l599
  3789   0026AA                     l3757:
  3790                           
  3791                           ;manoeuvres.c: 154:             card_yellow(mL, mR, backtrack);
  3792   0026AA  C021  F01C         	movff	pick_card@mL,card_yellow@mL
  3793   0026AE  C022  F01D         	movff	pick_card@mR,card_yellow@mR
  3794   0026B2  C023  F01E         	movff	pick_card@backtrack,card_yellow@backtrack
  3795   0026B6  EC24  F017         	call	_card_yellow	;wreg free
  3796                           
  3797                           ;manoeuvres.c: 155:             break;
  3798   0026BA  EFB2  F013         	goto	l599
  3799   0026BE                     l3759:
  3800                           
  3801                           ;manoeuvres.c: 157:             card_pink(mL, mR, backtrack);
  3802   0026BE  C021  F01C         	movff	pick_card@mL,card_pink@mL
  3803   0026C2  C022  F01D         	movff	pick_card@mR,card_pink@mR
  3804   0026C6  C023  F01E         	movff	pick_card@backtrack,card_pink@backtrack
  3805   0026CA  EC64  F017         	call	_card_pink	;wreg free
  3806                           
  3807                           ;manoeuvres.c: 158:             break;
  3808   0026CE  EFB2  F013         	goto	l599
  3809   0026D2                     l3761:
  3810                           
  3811                           ;manoeuvres.c: 160:             card_orange(mL, mR, backtrack);
  3812   0026D2  C021  F01C         	movff	pick_card@mL,card_orange@mL
  3813   0026D6  C022  F01D         	movff	pick_card@mR,card_orange@mR
  3814   0026DA  C023  F01E         	movff	pick_card@backtrack,card_orange@backtrack
  3815   0026DE  ECC3  F018         	call	_card_orange	;wreg free
  3816                           
  3817                           ;manoeuvres.c: 161:             break;
  3818   0026E2  EFB2  F013         	goto	l599
  3819   0026E6                     l3763:
  3820                           
  3821                           ;manoeuvres.c: 163:             card_cyan(mL, mR, backtrack);
  3822   0026E6  C021  F01C         	movff	pick_card@mL,card_cyan@mL
  3823   0026EA  C022  F01D         	movff	pick_card@mR,card_cyan@mR
  3824   0026EE  C023  F01E         	movff	pick_card@backtrack,card_cyan@backtrack
  3825   0026F2  EC2B  F019         	call	_card_cyan	;wreg free
  3826                           
  3827                           ;manoeuvres.c: 164:             break;
  3828   0026F6  EFB2  F013         	goto	l599
  3829   0026FA                     l3765:
  3830                           
  3831                           ;manoeuvres.c: 166:             card_white(mL, mR);
  3832   0026FA  C021  F01C         	movff	pick_card@mL,card_white@mL
  3833   0026FE  C022  F01D         	movff	pick_card@mR,card_white@mR
  3834   002702  EC3B  F01C         	call	_card_white	;wreg free
  3835                           
  3836                           ;manoeuvres.c: 167:             break;
  3837   002706  EFB2  F013         	goto	l599
  3838   00270A                     l3769:
  3839   00270A  5024               	movf	pick_card@key^0,w,c
  3840   00270C  6E25               	movwf	??_pick_card^0,c
  3841   00270E  6A26               	clrf	(??_pick_card+1)^0,c
  3842                           
  3843                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3844                           ; Switch size 1, requested type "simple"
  3845                           ; Number of cases is 1, Range of values is 0 to 0
  3846                           ; switch strategies available:
  3847                           ; Name         Instructions Cycles
  3848                           ; simple_byte            4     3 (average)
  3849                           ;	Chosen strategy is simple_byte
  3850   002710  5026               	movf	(??_pick_card+1)^0,w,c
  3851   002712  0A00               	xorlw	0	; case 0
  3852   002714  B4D8               	btfsc	status,2,c
  3853   002716  EF8F  F013         	goto	l4159
  3854   00271A  EFB2  F013         	goto	l599
  3855   00271E                     l4159:
  3856                           
  3857                           ; Switch size 1, requested type "simple"
  3858                           ; Number of cases is 8, Range of values is 1 to 8
  3859                           ; switch strategies available:
  3860                           ; Name         Instructions Cycles
  3861                           ; simple_byte           25    13 (average)
  3862                           ;	Chosen strategy is simple_byte
  3863   00271E  5025               	movf	??_pick_card^0,w,c
  3864   002720  0A01               	xorlw	1	; case 1
  3865   002722  B4D8               	btfsc	status,2,c
  3866   002724  EF37  F013         	goto	l3751
  3867   002728  0A03               	xorlw	3	; case 2
  3868   00272A  B4D8               	btfsc	status,2,c
  3869   00272C  EF41  F013         	goto	l3753
  3870   002730  0A01               	xorlw	1	; case 3
  3871   002732  B4D8               	btfsc	status,2,c
  3872   002734  EF4B  F013         	goto	l3755
  3873   002738  0A07               	xorlw	7	; case 4
  3874   00273A  B4D8               	btfsc	status,2,c
  3875   00273C  EF55  F013         	goto	l3757
  3876   002740  0A01               	xorlw	1	; case 5
  3877   002742  B4D8               	btfsc	status,2,c
  3878   002744  EF5F  F013         	goto	l3759
  3879   002748  0A03               	xorlw	3	; case 6
  3880   00274A  B4D8               	btfsc	status,2,c
  3881   00274C  EF69  F013         	goto	l3761
  3882   002750  0A01               	xorlw	1	; case 7
  3883   002752  B4D8               	btfsc	status,2,c
  3884   002754  EF73  F013         	goto	l3763
  3885   002758  0A0F               	xorlw	15	; case 8
  3886   00275A  B4D8               	btfsc	status,2,c
  3887   00275C  EF7D  F013         	goto	l3765
  3888   002760  EFB2  F013         	goto	l599
  3889   002764                     l599:
  3890   002764  0012               	return		;funcret
  3891   002766                     __end_of_pick_card:
  3892                           	callstack 0
  3893                           
  3894 ;; *************** function _card_yellow *****************
  3895 ;; Defined at:
  3896 ;;		line 58 in file "manoeuvres.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  3899 ;;		 -> main@motorL(9), 
  3900 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  3901 ;;		 -> main@motorR(9), 
  3902 ;;  backtrack       1   29[COMRAM] unsigned char 
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;		None
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      void 
  3907 ;; Registers used:
  3908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3914 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3916 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3917 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3918 ;;Total ram usage:        5 bytes
  3919 ;; Hardware stack levels used: 1
  3920 ;; Hardware stack levels required when called: 5
  3921 ;; This function calls:
  3922 ;;		_headbuttReverse
  3923 ;;		_squareReverse
  3924 ;;		_turnLeft90
  3925 ;;		_turnRight90
  3926 ;; This function is called by:
  3927 ;;		_pick_card
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text18
  3932   002E48                     __ptext18:
  3933                           	callstack 0
  3934   002E48                     _card_yellow:
  3935                           	callstack 23
  3936   002E48                     
  3937                           ;manoeuvres.c: 58: void card_yellow(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 59: {;manoeuvres.c: 60:     switch (backtrack) {
  3938   002E48  EF4E  F017         	goto	l3161
  3939   002E4C                     l3155:
  3940                           
  3941                           ;manoeuvres.c: 62:             headbuttReverse(mL, mR);
  3942   002E4C  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  3943   002E50  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  3944   002E54  EC9D  F01B         	call	_headbuttReverse	;wreg free
  3945                           
  3946                           ;manoeuvres.c: 63:             squareReverse(mL, mR);
  3947   002E58  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  3948   002E5C  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  3949   002E60  EC0D  F01B         	call	_squareReverse	;wreg free
  3950                           
  3951                           ;manoeuvres.c: 64:             turnRight90(mL, mR);
  3952   002E64  C01C  F018         	movff	card_yellow@mL,turnRight90@mL
  3953   002E68  C01D  F019         	movff	card_yellow@mR,turnRight90@mR
  3954   002E6C  EC2A  F01B         	call	_turnRight90	;wreg free
  3955                           
  3956                           ;manoeuvres.c: 65:             break;
  3957   002E70  EF63  F017         	goto	l562
  3958   002E74                     l3157:
  3959                           
  3960                           ;manoeuvres.c: 67:             turnLeft90(mL, mR);
  3961   002E74  C01C  F018         	movff	card_yellow@mL,turnLeft90@mL
  3962   002E78  C01D  F019         	movff	card_yellow@mR,turnLeft90@mR
  3963   002E7C  EC81  F01B         	call	_turnLeft90	;wreg free
  3964                           
  3965                           ;manoeuvres.c: 68:             squareReverse(mL, mR);
  3966   002E80  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  3967   002E84  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  3968   002E88  EC0D  F01B         	call	_squareReverse	;wreg free
  3969                           
  3970                           ;manoeuvres.c: 69:             headbuttReverse(mL, mR);
  3971   002E8C  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  3972   002E90  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  3973   002E94  EC9D  F01B         	call	_headbuttReverse	;wreg free
  3974                           
  3975                           ;manoeuvres.c: 70:             break;
  3976   002E98  EF63  F017         	goto	l562
  3977   002E9C                     l3161:
  3978   002E9C  501E               	movf	card_yellow@backtrack^0,w,c
  3979   002E9E  6E1F               	movwf	??_card_yellow^0,c
  3980   002EA0  6A20               	clrf	(??_card_yellow+1)^0,c
  3981                           
  3982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3983                           ; Switch size 1, requested type "simple"
  3984                           ; Number of cases is 1, Range of values is 0 to 0
  3985                           ; switch strategies available:
  3986                           ; Name         Instructions Cycles
  3987                           ; simple_byte            4     3 (average)
  3988                           ;	Chosen strategy is simple_byte
  3989   002EA2  5020               	movf	(??_card_yellow+1)^0,w,c
  3990   002EA4  0A00               	xorlw	0	; case 0
  3991   002EA6  B4D8               	btfsc	status,2,c
  3992   002EA8  EF58  F017         	goto	l4161
  3993   002EAC  EF63  F017         	goto	l562
  3994   002EB0                     l4161:
  3995                           
  3996                           ; Switch size 1, requested type "simple"
  3997                           ; Number of cases is 2, Range of values is 0 to 1
  3998                           ; switch strategies available:
  3999                           ; Name         Instructions Cycles
  4000                           ; simple_byte            7     4 (average)
  4001                           ;	Chosen strategy is simple_byte
  4002   002EB0  501F               	movf	??_card_yellow^0,w,c
  4003   002EB2  0A00               	xorlw	0	; case 0
  4004   002EB4  B4D8               	btfsc	status,2,c
  4005   002EB6  EF26  F017         	goto	l3155
  4006   002EBA  0A01               	xorlw	1	; case 1
  4007   002EBC  B4D8               	btfsc	status,2,c
  4008   002EBE  EF3A  F017         	goto	l3157
  4009   002EC2  EF63  F017         	goto	l562
  4010   002EC6                     l562:
  4011   002EC6  0012               	return		;funcret
  4012   002EC8                     __end_of_card_yellow:
  4013                           	callstack 0
  4014                           
  4015 ;; *************** function _card_white *****************
  4016 ;; Defined at:
  4017 ;;		line 131 in file "manoeuvres.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4020 ;;		 -> main@motorL(9), 
  4021 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4022 ;;		 -> main@motorR(9), 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4037 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4038 ;;Total ram usage:        2 bytes
  4039 ;; Hardware stack levels used: 1
  4040 ;; Hardware stack levels required when called: 5
  4041 ;; This function calls:
  4042 ;;		_UTurn
  4043 ;;		_headbuttReverse
  4044 ;; This function is called by:
  4045 ;;		_pick_card
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text19
  4050   003876                     __ptext19:
  4051                           	callstack 0
  4052   003876                     _card_white:
  4053                           	callstack 23
  4054   003876                     
  4055                           ;manoeuvres.c: 131: void card_white(DC_motor *mL, DC_motor *mR);manoeuvres.c: 132: {;man
      +                          oeuvres.c: 133:     headbuttReverse(mL, mR);
  4056   003876  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  4057   00387A  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  4058   00387E  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4059                           
  4060                           ;manoeuvres.c: 134:     UTurn(mL, mR);
  4061   003882  C01C  F018         	movff	card_white@mL,UTurn@mL
  4062   003886  C01D  F019         	movff	card_white@mR,UTurn@mR
  4063   00388A  ECD0  F01A         	call	_UTurn	;wreg free
  4064                           
  4065                           ;manoeuvres.c: 135:     headbuttReverse(mL, mR);
  4066   00388E  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  4067   003892  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  4068   003896  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4069   00389A  0012               	return		;funcret
  4070   00389C                     __end_of_card_white:
  4071                           	callstack 0
  4072                           
  4073 ;; *************** function _card_red *****************
  4074 ;; Defined at:
  4075 ;;		line 7 in file "manoeuvres.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4078 ;;		 -> main@motorL(9), 
  4079 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4080 ;;		 -> main@motorR(9), 
  4081 ;;  backtrack       1   29[COMRAM] unsigned char 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;		None
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  1    wreg      void 
  4086 ;; Registers used:
  4087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4093 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4095 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4096 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4097 ;;Total ram usage:        5 bytes
  4098 ;; Hardware stack levels used: 1
  4099 ;; Hardware stack levels required when called: 5
  4100 ;; This function calls:
  4101 ;;		_headbuttReverse
  4102 ;;		_turnLeft90
  4103 ;;		_turnRight90
  4104 ;; This function is called by:
  4105 ;;		_pick_card
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text20
  4110   00311E                     __ptext20:
  4111                           	callstack 0
  4112   00311E                     _card_red:
  4113                           	callstack 23
  4114   00311E                     
  4115                           ;manoeuvres.c: 7: void card_red(DC_motor *mL, DC_motor *mR, unsigned char backtrack);man
      +                          oeuvres.c: 8: {;manoeuvres.c: 9:     switch (backtrack) {
  4116   00311E  EFAD  F018         	goto	l3119
  4117   003122                     l3113:
  4118                           
  4119                           ;manoeuvres.c: 11:             headbuttReverse(mL, mR);
  4120   003122  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  4121   003126  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  4122   00312A  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4123                           
  4124                           ;manoeuvres.c: 12:             turnRight90(mL, mR);
  4125   00312E  C01C  F018         	movff	card_red@mL,turnRight90@mL
  4126   003132  C01D  F019         	movff	card_red@mR,turnRight90@mR
  4127   003136  EC2A  F01B         	call	_turnRight90	;wreg free
  4128                           
  4129                           ;manoeuvres.c: 13:             break;
  4130   00313A  EFC2  F018         	goto	l541
  4131   00313E                     l3115:
  4132                           
  4133                           ;manoeuvres.c: 15:             turnLeft90(mL, mR);
  4134   00313E  C01C  F018         	movff	card_red@mL,turnLeft90@mL
  4135   003142  C01D  F019         	movff	card_red@mR,turnLeft90@mR
  4136   003146  EC81  F01B         	call	_turnLeft90	;wreg free
  4137                           
  4138                           ;manoeuvres.c: 16:             headbuttReverse(mL, mR);
  4139   00314A  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  4140   00314E  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  4141   003152  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4142                           
  4143                           ;manoeuvres.c: 17:             break;
  4144   003156  EFC2  F018         	goto	l541
  4145   00315A                     l3119:
  4146   00315A  501E               	movf	card_red@backtrack^0,w,c
  4147   00315C  6E1F               	movwf	??_card_red^0,c
  4148   00315E  6A20               	clrf	(??_card_red+1)^0,c
  4149                           
  4150                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4151                           ; Switch size 1, requested type "simple"
  4152                           ; Number of cases is 1, Range of values is 0 to 0
  4153                           ; switch strategies available:
  4154                           ; Name         Instructions Cycles
  4155                           ; simple_byte            4     3 (average)
  4156                           ;	Chosen strategy is simple_byte
  4157   003160  5020               	movf	(??_card_red+1)^0,w,c
  4158   003162  0A00               	xorlw	0	; case 0
  4159   003164  B4D8               	btfsc	status,2,c
  4160   003166  EFB7  F018         	goto	l4163
  4161   00316A  EFC2  F018         	goto	l541
  4162   00316E                     l4163:
  4163                           
  4164                           ; Switch size 1, requested type "simple"
  4165                           ; Number of cases is 2, Range of values is 0 to 1
  4166                           ; switch strategies available:
  4167                           ; Name         Instructions Cycles
  4168                           ; simple_byte            7     4 (average)
  4169                           ;	Chosen strategy is simple_byte
  4170   00316E  501F               	movf	??_card_red^0,w,c
  4171   003170  0A00               	xorlw	0	; case 0
  4172   003172  B4D8               	btfsc	status,2,c
  4173   003174  EF91  F018         	goto	l3113
  4174   003178  0A01               	xorlw	1	; case 1
  4175   00317A  B4D8               	btfsc	status,2,c
  4176   00317C  EF9F  F018         	goto	l3115
  4177   003180  EFC2  F018         	goto	l541
  4178   003184                     l541:
  4179   003184  0012               	return		;funcret
  4180   003186                     __end_of_card_red:
  4181                           	callstack 0
  4182                           
  4183 ;; *************** function _card_pink *****************
  4184 ;; Defined at:
  4185 ;;		line 77 in file "manoeuvres.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4188 ;;		 -> main@motorL(9), 
  4189 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4190 ;;		 -> main@motorR(9), 
  4191 ;;  backtrack       1   29[COMRAM] unsigned char 
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;		None
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4203 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4205 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4206 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;Total ram usage:        5 bytes
  4208 ;; Hardware stack levels used: 1
  4209 ;; Hardware stack levels required when called: 5
  4210 ;; This function calls:
  4211 ;;		_headbuttReverse
  4212 ;;		_squareReverse
  4213 ;;		_turnLeft90
  4214 ;;		_turnRight90
  4215 ;; This function is called by:
  4216 ;;		_pick_card
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text21
  4221   002EC8                     __ptext21:
  4222                           	callstack 0
  4223   002EC8                     _card_pink:
  4224                           	callstack 23
  4225   002EC8                     
  4226                           ;manoeuvres.c: 77: void card_pink(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 78: {;manoeuvres.c: 79:     switch (backtrack) {
  4227   002EC8  EF8E  F017         	goto	l3175
  4228   002ECC                     l3169:
  4229                           
  4230                           ;manoeuvres.c: 81:             headbuttReverse(mL, mR);
  4231   002ECC  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  4232   002ED0  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  4233   002ED4  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4234                           
  4235                           ;manoeuvres.c: 82:             squareReverse(mL, mR);
  4236   002ED8  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  4237   002EDC  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  4238   002EE0  EC0D  F01B         	call	_squareReverse	;wreg free
  4239                           
  4240                           ;manoeuvres.c: 83:             turnLeft90(mL, mR);
  4241   002EE4  C01C  F018         	movff	card_pink@mL,turnLeft90@mL
  4242   002EE8  C01D  F019         	movff	card_pink@mR,turnLeft90@mR
  4243   002EEC  EC81  F01B         	call	_turnLeft90	;wreg free
  4244                           
  4245                           ;manoeuvres.c: 84:             break;
  4246   002EF0  EFA3  F017         	goto	l569
  4247   002EF4                     l3171:
  4248                           
  4249                           ;manoeuvres.c: 86:             turnRight90(mL, mR);
  4250   002EF4  C01C  F018         	movff	card_pink@mL,turnRight90@mL
  4251   002EF8  C01D  F019         	movff	card_pink@mR,turnRight90@mR
  4252   002EFC  EC2A  F01B         	call	_turnRight90	;wreg free
  4253                           
  4254                           ;manoeuvres.c: 87:             squareReverse(mL, mR);
  4255   002F00  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  4256   002F04  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  4257   002F08  EC0D  F01B         	call	_squareReverse	;wreg free
  4258                           
  4259                           ;manoeuvres.c: 88:             headbuttReverse(mL, mR);
  4260   002F0C  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  4261   002F10  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  4262   002F14  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4263                           
  4264                           ;manoeuvres.c: 89:             break;
  4265   002F18  EFA3  F017         	goto	l569
  4266   002F1C                     l3175:
  4267   002F1C  501E               	movf	card_pink@backtrack^0,w,c
  4268   002F1E  6E1F               	movwf	??_card_pink^0,c
  4269   002F20  6A20               	clrf	(??_card_pink+1)^0,c
  4270                           
  4271                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4272                           ; Switch size 1, requested type "simple"
  4273                           ; Number of cases is 1, Range of values is 0 to 0
  4274                           ; switch strategies available:
  4275                           ; Name         Instructions Cycles
  4276                           ; simple_byte            4     3 (average)
  4277                           ;	Chosen strategy is simple_byte
  4278   002F22  5020               	movf	(??_card_pink+1)^0,w,c
  4279   002F24  0A00               	xorlw	0	; case 0
  4280   002F26  B4D8               	btfsc	status,2,c
  4281   002F28  EF98  F017         	goto	l4165
  4282   002F2C  EFA3  F017         	goto	l569
  4283   002F30                     l4165:
  4284                           
  4285                           ; Switch size 1, requested type "simple"
  4286                           ; Number of cases is 2, Range of values is 0 to 1
  4287                           ; switch strategies available:
  4288                           ; Name         Instructions Cycles
  4289                           ; simple_byte            7     4 (average)
  4290                           ;	Chosen strategy is simple_byte
  4291   002F30  501F               	movf	??_card_pink^0,w,c
  4292   002F32  0A00               	xorlw	0	; case 0
  4293   002F34  B4D8               	btfsc	status,2,c
  4294   002F36  EF66  F017         	goto	l3169
  4295   002F3A  0A01               	xorlw	1	; case 1
  4296   002F3C  B4D8               	btfsc	status,2,c
  4297   002F3E  EF7A  F017         	goto	l3171
  4298   002F42  EFA3  F017         	goto	l569
  4299   002F46                     l569:
  4300   002F46  0012               	return		;funcret
  4301   002F48                     __end_of_card_pink:
  4302                           	callstack 0
  4303                           
  4304 ;; *************** function _squareReverse *****************
  4305 ;; Defined at:
  4306 ;;		line 315 in file "dc_motor.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4309 ;;		 -> main@motorL(9), 
  4310 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4311 ;;		 -> main@motorR(9), 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      void 
  4316 ;; Registers used:
  4317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4323 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4325 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4326 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4327 ;;Total ram usage:        4 bytes
  4328 ;; Hardware stack levels used: 1
  4329 ;; Hardware stack levels required when called: 4
  4330 ;; This function calls:
  4331 ;;		_fullSpeedReverse
  4332 ;;		_stop
  4333 ;;		_toggle_brake_lights
  4334 ;; This function is called by:
  4335 ;;		_card_yellow
  4336 ;;		_card_pink
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text22
  4341   00361A                     __ptext22:
  4342                           	callstack 0
  4343   00361A                     _squareReverse:
  4344                           	callstack 23
  4345   00361A                     
  4346                           ;dc_motor.c: 315: void squareReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 316: {;dc_m
      +                          otor.c: 317:     toggle_brake_lights();
  4347   00361A  EC61  F01C         	call	_toggle_brake_lights	;wreg free
  4348   00361E                     
  4349                           ;dc_motor.c: 318:     fullSpeedReverse(mL, mR);
  4350   00361E  C018  F013         	movff	squareReverse@mL,fullSpeedReverse@mL
  4351   003622  C019  F014         	movff	squareReverse@mR,fullSpeedReverse@mR
  4352   003626  EC97  F015         	call	_fullSpeedReverse	;wreg free
  4353   00362A                     
  4354                           ;dc_motor.c: 319:     _delay((unsigned long)((squareDelay)*(64000000/4000.0)));
  4355   00362A  0EC7               	movlw	199
  4356   00362C  6E1B               	movwf	(??_squareReverse+1)^0,c
  4357   00362E  0E0D               	movlw	13
  4358   003630  6E1A               	movwf	??_squareReverse^0,c
  4359   003632  0EC6               	movlw	198
  4360   003634                     u3357:
  4361   003634  2EE8               	decfsz	wreg,f,c
  4362   003636  D7FE               	bra	u3357
  4363   003638  2E1A               	decfsz	??_squareReverse^0,f,c
  4364   00363A  D7FC               	bra	u3357
  4365   00363C  2E1B               	decfsz	(??_squareReverse+1)^0,f,c
  4366   00363E  D7FA               	bra	u3357
  4367   003640  D000               	nop2	
  4368   003642                     
  4369                           ;dc_motor.c: 320:     stop(mL, mR);
  4370   003642  C018  F013         	movff	squareReverse@mL,stop@mL
  4371   003646  C019  F014         	movff	squareReverse@mR,stop@mR
  4372   00364A  ECDD  F016         	call	_stop	;wreg free
  4373   00364E                     
  4374                           ;dc_motor.c: 321:     toggle_brake_lights();
  4375   00364E  EC61  F01C         	call	_toggle_brake_lights	;wreg free
  4376   003652  0012               	return		;funcret
  4377   003654                     __end_of_squareReverse:
  4378                           	callstack 0
  4379                           
  4380 ;; *************** function _card_orange *****************
  4381 ;; Defined at:
  4382 ;;		line 96 in file "manoeuvres.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4385 ;;		 -> main@motorL(9), 
  4386 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4387 ;;		 -> main@motorR(9), 
  4388 ;;  backtrack       1   29[COMRAM] unsigned char 
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  1    wreg      void 
  4393 ;; Registers used:
  4394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4400 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4403 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4404 ;;Total ram usage:        5 bytes
  4405 ;; Hardware stack levels used: 1
  4406 ;; Hardware stack levels required when called: 5
  4407 ;; This function calls:
  4408 ;;		_headbuttReverse
  4409 ;;		_turnLeft135
  4410 ;;		_turnRight135
  4411 ;; This function is called by:
  4412 ;;		_pick_card
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text23
  4417   003186                     __ptext23:
  4418                           	callstack 0
  4419   003186                     _card_orange:
  4420                           	callstack 23
  4421   003186                     
  4422                           ;manoeuvres.c: 96: void card_orange(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 97: {;manoeuvres.c: 98:     switch (backtrack) {
  4423   003186  EFE1  F018         	goto	l3189
  4424   00318A                     l3183:
  4425                           
  4426                           ;manoeuvres.c: 100:             headbuttReverse(mL, mR);
  4427   00318A  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  4428   00318E  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  4429   003192  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4430                           
  4431                           ;manoeuvres.c: 101:             turnRight135(mL, mR);
  4432   003196  C01C  F018         	movff	card_orange@mL,turnRight135@mL
  4433   00319A  C01D  F019         	movff	card_orange@mR,turnRight135@mR
  4434   00319E  EC47  F01B         	call	_turnRight135	;wreg free
  4435                           
  4436                           ;manoeuvres.c: 102:             break;
  4437   0031A2  EFF6  F018         	goto	l576
  4438   0031A6                     l3185:
  4439                           
  4440                           ;manoeuvres.c: 104:             turnLeft135(mL, mR);
  4441   0031A6  C01C  F018         	movff	card_orange@mL,turnLeft135@mL
  4442   0031AA  C01D  F019         	movff	card_orange@mR,turnLeft135@mR
  4443   0031AE  EC64  F01B         	call	_turnLeft135	;wreg free
  4444                           
  4445                           ;manoeuvres.c: 105:             headbuttReverse(mL, mR);
  4446   0031B2  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  4447   0031B6  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  4448   0031BA  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4449                           
  4450                           ;manoeuvres.c: 106:             break;
  4451   0031BE  EFF6  F018         	goto	l576
  4452   0031C2                     l3189:
  4453   0031C2  501E               	movf	card_orange@backtrack^0,w,c
  4454   0031C4  6E1F               	movwf	??_card_orange^0,c
  4455   0031C6  6A20               	clrf	(??_card_orange+1)^0,c
  4456                           
  4457                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4458                           ; Switch size 1, requested type "simple"
  4459                           ; Number of cases is 1, Range of values is 0 to 0
  4460                           ; switch strategies available:
  4461                           ; Name         Instructions Cycles
  4462                           ; simple_byte            4     3 (average)
  4463                           ;	Chosen strategy is simple_byte
  4464   0031C8  5020               	movf	(??_card_orange+1)^0,w,c
  4465   0031CA  0A00               	xorlw	0	; case 0
  4466   0031CC  B4D8               	btfsc	status,2,c
  4467   0031CE  EFEB  F018         	goto	l4167
  4468   0031D2  EFF6  F018         	goto	l576
  4469   0031D6                     l4167:
  4470                           
  4471                           ; Switch size 1, requested type "simple"
  4472                           ; Number of cases is 2, Range of values is 0 to 1
  4473                           ; switch strategies available:
  4474                           ; Name         Instructions Cycles
  4475                           ; simple_byte            7     4 (average)
  4476                           ;	Chosen strategy is simple_byte
  4477   0031D6  501F               	movf	??_card_orange^0,w,c
  4478   0031D8  0A00               	xorlw	0	; case 0
  4479   0031DA  B4D8               	btfsc	status,2,c
  4480   0031DC  EFC5  F018         	goto	l3183
  4481   0031E0  0A01               	xorlw	1	; case 1
  4482   0031E2  B4D8               	btfsc	status,2,c
  4483   0031E4  EFD3  F018         	goto	l3185
  4484   0031E8  EFF6  F018         	goto	l576
  4485   0031EC                     l576:
  4486   0031EC  0012               	return		;funcret
  4487   0031EE                     __end_of_card_orange:
  4488                           	callstack 0
  4489                           
  4490 ;; *************** function _card_green *****************
  4491 ;; Defined at:
  4492 ;;		line 24 in file "manoeuvres.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4495 ;;		 -> main@motorL(9), 
  4496 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4497 ;;		 -> main@motorR(9), 
  4498 ;;  backtrack       1   29[COMRAM] unsigned char 
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;		None
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  1    wreg      void 
  4503 ;; Registers used:
  4504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4510 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4512 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4513 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4514 ;;Total ram usage:        5 bytes
  4515 ;; Hardware stack levels used: 1
  4516 ;; Hardware stack levels required when called: 5
  4517 ;; This function calls:
  4518 ;;		_headbuttReverse
  4519 ;;		_turnLeft90
  4520 ;;		_turnRight90
  4521 ;; This function is called by:
  4522 ;;		_pick_card
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text24
  4527   0031EE                     __ptext24:
  4528                           	callstack 0
  4529   0031EE                     _card_green:
  4530                           	callstack 23
  4531   0031EE                     
  4532                           ;manoeuvres.c: 24: void card_green(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 25: {;manoeuvres.c: 26:     switch (backtrack) {
  4533   0031EE  EF15  F019         	goto	l3133
  4534   0031F2                     l3127:
  4535                           
  4536                           ;manoeuvres.c: 28:             headbuttReverse(mL, mR);
  4537   0031F2  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  4538   0031F6  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  4539   0031FA  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4540                           
  4541                           ;manoeuvres.c: 29:             turnLeft90(mL, mR);
  4542   0031FE  C01C  F018         	movff	card_green@mL,turnLeft90@mL
  4543   003202  C01D  F019         	movff	card_green@mR,turnLeft90@mR
  4544   003206  EC81  F01B         	call	_turnLeft90	;wreg free
  4545                           
  4546                           ;manoeuvres.c: 30:             break;
  4547   00320A  EF2A  F019         	goto	l548
  4548   00320E                     l3129:
  4549                           
  4550                           ;manoeuvres.c: 32:             turnRight90(mL, mR);
  4551   00320E  C01C  F018         	movff	card_green@mL,turnRight90@mL
  4552   003212  C01D  F019         	movff	card_green@mR,turnRight90@mR
  4553   003216  EC2A  F01B         	call	_turnRight90	;wreg free
  4554                           
  4555                           ;manoeuvres.c: 33:             headbuttReverse(mL, mR);
  4556   00321A  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  4557   00321E  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  4558   003222  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4559                           
  4560                           ;manoeuvres.c: 34:             break;
  4561   003226  EF2A  F019         	goto	l548
  4562   00322A                     l3133:
  4563   00322A  501E               	movf	card_green@backtrack^0,w,c
  4564   00322C  6E1F               	movwf	??_card_green^0,c
  4565   00322E  6A20               	clrf	(??_card_green+1)^0,c
  4566                           
  4567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4568                           ; Switch size 1, requested type "simple"
  4569                           ; Number of cases is 1, Range of values is 0 to 0
  4570                           ; switch strategies available:
  4571                           ; Name         Instructions Cycles
  4572                           ; simple_byte            4     3 (average)
  4573                           ;	Chosen strategy is simple_byte
  4574   003230  5020               	movf	(??_card_green+1)^0,w,c
  4575   003232  0A00               	xorlw	0	; case 0
  4576   003234  B4D8               	btfsc	status,2,c
  4577   003236  EF1F  F019         	goto	l4169
  4578   00323A  EF2A  F019         	goto	l548
  4579   00323E                     l4169:
  4580                           
  4581                           ; Switch size 1, requested type "simple"
  4582                           ; Number of cases is 2, Range of values is 0 to 1
  4583                           ; switch strategies available:
  4584                           ; Name         Instructions Cycles
  4585                           ; simple_byte            7     4 (average)
  4586                           ;	Chosen strategy is simple_byte
  4587   00323E  501F               	movf	??_card_green^0,w,c
  4588   003240  0A00               	xorlw	0	; case 0
  4589   003242  B4D8               	btfsc	status,2,c
  4590   003244  EFF9  F018         	goto	l3127
  4591   003248  0A01               	xorlw	1	; case 1
  4592   00324A  B4D8               	btfsc	status,2,c
  4593   00324C  EF07  F019         	goto	l3129
  4594   003250  EF2A  F019         	goto	l548
  4595   003254                     l548:
  4596   003254  0012               	return		;funcret
  4597   003256                     __end_of_card_green:
  4598                           	callstack 0
  4599                           
  4600 ;; *************** function _turnRight90 *****************
  4601 ;; Defined at:
  4602 ;;		line 253 in file "dc_motor.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4605 ;;		 -> main@motorL(9), 
  4606 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4607 ;;		 -> main@motorR(9), 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;		None
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      void 
  4612 ;; Registers used:
  4613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4621 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4622 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4623 ;;Total ram usage:        4 bytes
  4624 ;; Hardware stack levels used: 1
  4625 ;; Hardware stack levels required when called: 4
  4626 ;; This function calls:
  4627 ;;		_stop
  4628 ;;		_toggle_right_indicators
  4629 ;;		_turnRight
  4630 ;; This function is called by:
  4631 ;;		_card_red
  4632 ;;		_card_green
  4633 ;;		_card_yellow
  4634 ;;		_card_pink
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text25
  4639   003654                     __ptext25:
  4640                           	callstack 0
  4641   003654                     _turnRight90:
  4642                           	callstack 23
  4643   003654                     
  4644                           ;dc_motor.c: 253: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 254: {;dc_mot
      +                          or.c: 255:     toggle_right_indicators();
  4645   003654  EC83  F01C         	call	_toggle_right_indicators	;wreg free
  4646   003658                     
  4647                           ;dc_motor.c: 256:     turnRight(mL, mR);
  4648   003658  C018  F013         	movff	turnRight90@mL,turnRight@mL
  4649   00365C  C019  F014         	movff	turnRight90@mR,turnRight@mR
  4650   003660  ECDF  F014         	call	_turnRight	;wreg free
  4651   003664                     
  4652                           ;dc_motor.c: 257:     _delay((unsigned long)((turnRight90Delay)*(64000000/4000.0)));
  4653   003664  0E08               	movlw	8
  4654   003666  6E1B               	movwf	(??_turnRight90+1)^0,c
  4655   003668  0E78               	movlw	120
  4656   00366A  6E1A               	movwf	??_turnRight90^0,c
  4657   00366C  0EA9               	movlw	169
  4658   00366E                     u3367:
  4659   00366E  2EE8               	decfsz	wreg,f,c
  4660   003670  D7FE               	bra	u3367
  4661   003672  2E1A               	decfsz	??_turnRight90^0,f,c
  4662   003674  D7FC               	bra	u3367
  4663   003676  2E1B               	decfsz	(??_turnRight90+1)^0,f,c
  4664   003678  D7FA               	bra	u3367
  4665   00367A  0000               	nop	
  4666   00367C                     
  4667                           ;dc_motor.c: 258:     stop(mL, mR);
  4668   00367C  C018  F013         	movff	turnRight90@mL,stop@mL
  4669   003680  C019  F014         	movff	turnRight90@mR,stop@mR
  4670   003684  ECDD  F016         	call	_stop	;wreg free
  4671   003688                     
  4672                           ;dc_motor.c: 259:     toggle_right_indicators();
  4673   003688  EC83  F01C         	call	_toggle_right_indicators	;wreg free
  4674   00368C  0012               	return		;funcret
  4675   00368E                     __end_of_turnRight90:
  4676                           	callstack 0
  4677                           
  4678 ;; *************** function _turnLeft90 *****************
  4679 ;; Defined at:
  4680 ;;		line 241 in file "dc_motor.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4683 ;;		 -> main@motorL(9), 
  4684 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4685 ;;		 -> main@motorR(9), 
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;		None
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  1    wreg      void 
  4690 ;; Registers used:
  4691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4697 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4699 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4700 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4701 ;;Total ram usage:        4 bytes
  4702 ;; Hardware stack levels used: 1
  4703 ;; Hardware stack levels required when called: 4
  4704 ;; This function calls:
  4705 ;;		_stop
  4706 ;;		_toggle_left_indicators
  4707 ;;		_turnLeft
  4708 ;; This function is called by:
  4709 ;;		_card_red
  4710 ;;		_card_green
  4711 ;;		_card_yellow
  4712 ;;		_card_pink
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text26
  4717   003702                     __ptext26:
  4718                           	callstack 0
  4719   003702                     _turnLeft90:
  4720                           	callstack 23
  4721   003702                     
  4722                           ;dc_motor.c: 241: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 242: {;dc_moto
      +                          r.c: 243:     toggle_left_indicators();
  4723   003702  EC93  F01C         	call	_toggle_left_indicators	;wreg free
  4724   003706                     
  4725                           ;dc_motor.c: 244:     turnLeft(mL, mR);
  4726   003706  C018  F013         	movff	turnLeft90@mL,turnLeft@mL
  4727   00370A  C019  F014         	movff	turnLeft90@mR,turnLeft@mR
  4728   00370E  EC3B  F015         	call	_turnLeft	;wreg free
  4729   003712                     
  4730                           ;dc_motor.c: 245:     _delay((unsigned long)((turnLeft90Delay)*(64000000/4000.0)));
  4731   003712  0E07               	movlw	7
  4732   003714  6E1B               	movwf	(??_turnLeft90+1)^0,c
  4733   003716  0ED2               	movlw	210
  4734   003718  6E1A               	movwf	??_turnLeft90^0,c
  4735   00371A  0E6E               	movlw	110
  4736   00371C                     u3377:
  4737   00371C  2EE8               	decfsz	wreg,f,c
  4738   00371E  D7FE               	bra	u3377
  4739   003720  2E1A               	decfsz	??_turnLeft90^0,f,c
  4740   003722  D7FC               	bra	u3377
  4741   003724  2E1B               	decfsz	(??_turnLeft90+1)^0,f,c
  4742   003726  D7FA               	bra	u3377
  4743   003728                     
  4744                           ;dc_motor.c: 246:     stop(mL, mR);
  4745   003728  C018  F013         	movff	turnLeft90@mL,stop@mL
  4746   00372C  C019  F014         	movff	turnLeft90@mR,stop@mR
  4747   003730  ECDD  F016         	call	_stop	;wreg free
  4748   003734                     
  4749                           ;dc_motor.c: 247:     toggle_left_indicators();
  4750   003734  EC93  F01C         	call	_toggle_left_indicators	;wreg free
  4751   003738  0012               	return		;funcret
  4752   00373A                     __end_of_turnLeft90:
  4753                           	callstack 0
  4754                           
  4755 ;; *************** function _card_cyan *****************
  4756 ;; Defined at:
  4757 ;;		line 113 in file "manoeuvres.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  4760 ;;		 -> main@motorL(9), 
  4761 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  4762 ;;		 -> main@motorR(9), 
  4763 ;;  backtrack       1   29[COMRAM] unsigned char 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;		None
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      void 
  4768 ;; Registers used:
  4769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4775 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4777 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4778 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4779 ;;Total ram usage:        5 bytes
  4780 ;; Hardware stack levels used: 1
  4781 ;; Hardware stack levels required when called: 5
  4782 ;; This function calls:
  4783 ;;		_headbuttReverse
  4784 ;;		_turnLeft135
  4785 ;;		_turnRight135
  4786 ;; This function is called by:
  4787 ;;		_pick_card
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text27
  4792   003256                     __ptext27:
  4793                           	callstack 0
  4794   003256                     _card_cyan:
  4795                           	callstack 23
  4796   003256                     
  4797                           ;manoeuvres.c: 113: void card_cyan(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 114: {;manoeuvres.c: 115:     switch (backtrack) {
  4798   003256  EF49  F019         	goto	l3203
  4799   00325A                     l3197:
  4800                           
  4801                           ;manoeuvres.c: 117:             headbuttReverse(mL, mR);
  4802   00325A  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  4803   00325E  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  4804   003262  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4805                           
  4806                           ;manoeuvres.c: 118:             turnLeft135(mL, mR);
  4807   003266  C01C  F018         	movff	card_cyan@mL,turnLeft135@mL
  4808   00326A  C01D  F019         	movff	card_cyan@mR,turnLeft135@mR
  4809   00326E  EC64  F01B         	call	_turnLeft135	;wreg free
  4810                           
  4811                           ;manoeuvres.c: 119:             break;
  4812   003272  EF5E  F019         	goto	l583
  4813   003276                     l3199:
  4814                           
  4815                           ;manoeuvres.c: 121:             turnRight135(mL, mR);
  4816   003276  C01C  F018         	movff	card_cyan@mL,turnRight135@mL
  4817   00327A  C01D  F019         	movff	card_cyan@mR,turnRight135@mR
  4818   00327E  EC47  F01B         	call	_turnRight135	;wreg free
  4819                           
  4820                           ;manoeuvres.c: 122:             headbuttReverse(mL, mR);
  4821   003282  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  4822   003286  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  4823   00328A  EC9D  F01B         	call	_headbuttReverse	;wreg free
  4824                           
  4825                           ;manoeuvres.c: 123:             break;
  4826   00328E  EF5E  F019         	goto	l583
  4827   003292                     l3203:
  4828   003292  501E               	movf	card_cyan@backtrack^0,w,c
  4829   003294  6E1F               	movwf	??_card_cyan^0,c
  4830   003296  6A20               	clrf	(??_card_cyan+1)^0,c
  4831                           
  4832                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4833                           ; Switch size 1, requested type "simple"
  4834                           ; Number of cases is 1, Range of values is 0 to 0
  4835                           ; switch strategies available:
  4836                           ; Name         Instructions Cycles
  4837                           ; simple_byte            4     3 (average)
  4838                           ;	Chosen strategy is simple_byte
  4839   003298  5020               	movf	(??_card_cyan+1)^0,w,c
  4840   00329A  0A00               	xorlw	0	; case 0
  4841   00329C  B4D8               	btfsc	status,2,c
  4842   00329E  EF53  F019         	goto	l4171
  4843   0032A2  EF5E  F019         	goto	l583
  4844   0032A6                     l4171:
  4845                           
  4846                           ; Switch size 1, requested type "simple"
  4847                           ; Number of cases is 2, Range of values is 0 to 1
  4848                           ; switch strategies available:
  4849                           ; Name         Instructions Cycles
  4850                           ; simple_byte            7     4 (average)
  4851                           ;	Chosen strategy is simple_byte
  4852   0032A6  501F               	movf	??_card_cyan^0,w,c
  4853   0032A8  0A00               	xorlw	0	; case 0
  4854   0032AA  B4D8               	btfsc	status,2,c
  4855   0032AC  EF2D  F019         	goto	l3197
  4856   0032B0  0A01               	xorlw	1	; case 1
  4857   0032B2  B4D8               	btfsc	status,2,c
  4858   0032B4  EF3B  F019         	goto	l3199
  4859   0032B8  EF5E  F019         	goto	l583
  4860   0032BC                     l583:
  4861   0032BC  0012               	return		;funcret
  4862   0032BE                     __end_of_card_cyan:
  4863                           	callstack 0
  4864                           
  4865 ;; *************** function _turnRight135 *****************
  4866 ;; Defined at:
  4867 ;;		line 277 in file "dc_motor.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  4870 ;;		 -> main@motorL(9), 
  4871 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  4872 ;;		 -> main@motorR(9), 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4884 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4886 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4887 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4888 ;;Total ram usage:        4 bytes
  4889 ;; Hardware stack levels used: 1
  4890 ;; Hardware stack levels required when called: 4
  4891 ;; This function calls:
  4892 ;;		_stop
  4893 ;;		_toggle_right_indicators
  4894 ;;		_turnRight
  4895 ;; This function is called by:
  4896 ;;		_card_orange
  4897 ;;		_card_cyan
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           	psect	text28
  4902   00368E                     __ptext28:
  4903                           	callstack 0
  4904   00368E                     _turnRight135:
  4905                           	callstack 23
  4906   00368E                     
  4907                           ;dc_motor.c: 277: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 278: {;dc_mo
      +                          tor.c: 279:     toggle_right_indicators();
  4908   00368E  EC83  F01C         	call	_toggle_right_indicators	;wreg free
  4909   003692                     
  4910                           ;dc_motor.c: 280:     turnRight(mL, mR);
  4911   003692  C018  F013         	movff	turnRight135@mL,turnRight@mL
  4912   003696  C019  F014         	movff	turnRight135@mR,turnRight@mR
  4913   00369A  ECDF  F014         	call	_turnRight	;wreg free
  4914   00369E                     
  4915                           ;dc_motor.c: 281:     _delay((unsigned long)((turnRight135Delay)*(64000000/4000.0)));
  4916   00369E  0E16               	movlw	22
  4917   0036A0  6E1B               	movwf	(??_turnRight135+1)^0,c
  4918   0036A2  0E45               	movlw	69
  4919   0036A4  6E1A               	movwf	??_turnRight135^0,c
  4920   0036A6  0E17               	movlw	23
  4921   0036A8                     u3387:
  4922   0036A8  2EE8               	decfsz	wreg,f,c
  4923   0036AA  D7FE               	bra	u3387
  4924   0036AC  2E1A               	decfsz	??_turnRight135^0,f,c
  4925   0036AE  D7FC               	bra	u3387
  4926   0036B0  2E1B               	decfsz	(??_turnRight135+1)^0,f,c
  4927   0036B2  D7FA               	bra	u3387
  4928   0036B4  0000               	nop	
  4929   0036B6                     
  4930                           ;dc_motor.c: 282:     stop(mL, mR);
  4931   0036B6  C018  F013         	movff	turnRight135@mL,stop@mL
  4932   0036BA  C019  F014         	movff	turnRight135@mR,stop@mR
  4933   0036BE  ECDD  F016         	call	_stop	;wreg free
  4934   0036C2                     
  4935                           ;dc_motor.c: 283:     toggle_right_indicators();
  4936   0036C2  EC83  F01C         	call	_toggle_right_indicators	;wreg free
  4937   0036C6  0012               	return		;funcret
  4938   0036C8                     __end_of_turnRight135:
  4939                           	callstack 0
  4940                           
  4941 ;; *************** function _turnRight *****************
  4942 ;; Defined at:
  4943 ;;		line 148 in file "dc_motor.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  4946 ;;		 -> main@motorL(9), 
  4947 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  4948 ;;		 -> main@motorR(9), 
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;  rightGear       1   22[COMRAM] unsigned char 
  4951 ;;  leftGear        1   21[COMRAM] unsigned char 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4961 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4963 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4964 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4965 ;;Total ram usage:        5 bytes
  4966 ;; Hardware stack levels used: 1
  4967 ;; Hardware stack levels required when called: 3
  4968 ;; This function calls:
  4969 ;;		_setMotorPWM
  4970 ;; This function is called by:
  4971 ;;		_turnRight90
  4972 ;;		_turnRight135
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text29
  4977   0029BE                     __ptext29:
  4978                           	callstack 0
  4979   0029BE                     _turnRight:
  4980                           	callstack 23
  4981   0029BE  0E28               	movlw	40
  4982   0029C0  6E16               	movwf	turnRight@leftGear^0,c
  4983   0029C2  0E28               	movlw	40
  4984   0029C4  6E17               	movwf	turnRight@rightGear^0,c
  4985   0029C6                     
  4986                           ;dc_motor.c: 155:     (mL->direction) = 1;
  4987   0029C6  5013               	movf	turnRight@mL^0,w,c
  4988   0029C8  6ED9               	movwf	fsr2l,c
  4989   0029CA  6ADA               	clrf	fsr2h,c
  4990   0029CC  0E01               	movlw	1
  4991   0029CE  26D9               	addwf	fsr2l,f,c
  4992   0029D0  0E01               	movlw	1
  4993   0029D2  6EDF               	movwf	indf2,c
  4994   0029D4                     
  4995                           ;dc_motor.c: 156:     (mR->direction) = 0;
  4996   0029D4  5014               	movf	turnRight@mR^0,w,c
  4997   0029D6  6ED9               	movwf	fsr2l,c
  4998   0029D8  6ADA               	clrf	fsr2h,c
  4999   0029DA  0E01               	movlw	1
  5000   0029DC  26D9               	addwf	fsr2l,f,c
  5001   0029DE  6ADF               	clrf	indf2,c
  5002                           
  5003                           ;dc_motor.c: 159:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5004   0029E0  EF22  F015         	goto	l2963
  5005   0029E4                     l2951:
  5006                           
  5007                           ;dc_motor.c: 162:         if (mL->power < leftGear) {mL->power++;}
  5008   0029E4  5013               	movf	turnRight@mL^0,w,c
  5009   0029E6  6ED9               	movwf	fsr2l,c
  5010   0029E8  6ADA               	clrf	fsr2h,c
  5011   0029EA  5016               	movf	turnRight@leftGear^0,w,c
  5012   0029EC  5CDE               	subwf	postinc2,w,c
  5013   0029EE  B0D8               	btfsc	status,0,c
  5014   0029F0  EFFC  F014         	goto	u1941
  5015   0029F4  EFFE  F014         	goto	u1940
  5016   0029F8                     u1941:
  5017   0029F8  EF02  F015         	goto	l253
  5018   0029FC                     u1940:
  5019   0029FC  5013               	movf	turnRight@mL^0,w,c
  5020   0029FE  6ED9               	movwf	fsr2l,c
  5021   002A00  6ADA               	clrf	fsr2h,c
  5022   002A02  2ADF               	incf	indf2,f,c
  5023   002A04                     l253:
  5024                           
  5025                           ;dc_motor.c: 165:         if (mR->power < rightGear) {mR->power++;}
  5026   002A04  5014               	movf	turnRight@mR^0,w,c
  5027   002A06  6ED9               	movwf	fsr2l,c
  5028   002A08  6ADA               	clrf	fsr2h,c
  5029   002A0A  5017               	movf	turnRight@rightGear^0,w,c
  5030   002A0C  5CDE               	subwf	postinc2,w,c
  5031   002A0E  B0D8               	btfsc	status,0,c
  5032   002A10  EF0C  F015         	goto	u1951
  5033   002A14  EF0E  F015         	goto	u1950
  5034   002A18                     u1951:
  5035   002A18  EF12  F015         	goto	l2957
  5036   002A1C                     u1950:
  5037   002A1C  5014               	movf	turnRight@mR^0,w,c
  5038   002A1E  6ED9               	movwf	fsr2l,c
  5039   002A20  6ADA               	clrf	fsr2h,c
  5040   002A22  2ADF               	incf	indf2,f,c
  5041   002A24                     l2957:
  5042                           
  5043                           ;dc_motor.c: 168:         setMotorPWM(mL);
  5044   002A24  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  5045   002A28  EC68  F011         	call	_setMotorPWM	;wreg free
  5046   002A2C                     
  5047                           ;dc_motor.c: 169:         setMotorPWM(mR);
  5048   002A2C  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  5049   002A30  EC68  F011         	call	_setMotorPWM	;wreg free
  5050   002A34                     
  5051                           ;dc_motor.c: 172:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5052   002A34  0EA7               	movlw	167
  5053   002A36  6E15               	movwf	??_turnRight^0,c
  5054   002A38  0E3A               	movlw	58
  5055   002A3A                     u3397:
  5056   002A3A  2EE8               	decfsz	wreg,f,c
  5057   002A3C  D7FE               	bra	u3397
  5058   002A3E  2E15               	decfsz	??_turnRight^0,f,c
  5059   002A40  D7FC               	bra	u3397
  5060   002A42  D000               	nop2	
  5061   002A44                     l2963:
  5062                           
  5063                           ;dc_motor.c: 159:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5064   002A44  5013               	movf	turnRight@mL^0,w,c
  5065   002A46  6ED9               	movwf	fsr2l,c
  5066   002A48  6ADA               	clrf	fsr2h,c
  5067   002A4A  5016               	movf	turnRight@leftGear^0,w,c
  5068   002A4C  5CDE               	subwf	postinc2,w,c
  5069   002A4E  A0D8               	btfss	status,0,c
  5070   002A50  EF2C  F015         	goto	u1961
  5071   002A54  EF2E  F015         	goto	u1960
  5072   002A58                     u1961:
  5073   002A58  EFF2  F014         	goto	l2951
  5074   002A5C                     u1960:
  5075   002A5C  5014               	movf	turnRight@mR^0,w,c
  5076   002A5E  6ED9               	movwf	fsr2l,c
  5077   002A60  6ADA               	clrf	fsr2h,c
  5078   002A62  5017               	movf	turnRight@rightGear^0,w,c
  5079   002A64  5CDE               	subwf	postinc2,w,c
  5080   002A66  A0D8               	btfss	status,0,c
  5081   002A68  EF38  F015         	goto	u1971
  5082   002A6C  EF3A  F015         	goto	u1970
  5083   002A70                     u1971:
  5084   002A70  EFF2  F014         	goto	l2951
  5085   002A74                     u1970:
  5086   002A74  0012               	return		;funcret
  5087   002A76                     __end_of_turnRight:
  5088                           	callstack 0
  5089                           
  5090 ;; *************** function _turnLeft135 *****************
  5091 ;; Defined at:
  5092 ;;		line 265 in file "dc_motor.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5095 ;;		 -> main@motorL(9), 
  5096 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5097 ;;		 -> main@motorR(9), 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;		None
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  1    wreg      void 
  5102 ;; Registers used:
  5103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5112 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5113 ;;Total ram usage:        4 bytes
  5114 ;; Hardware stack levels used: 1
  5115 ;; Hardware stack levels required when called: 4
  5116 ;; This function calls:
  5117 ;;		_stop
  5118 ;;		_toggle_left_indicators
  5119 ;;		_turnLeft
  5120 ;; This function is called by:
  5121 ;;		_card_orange
  5122 ;;		_card_cyan
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text30
  5127   0036C8                     __ptext30:
  5128                           	callstack 0
  5129   0036C8                     _turnLeft135:
  5130                           	callstack 23
  5131   0036C8                     
  5132                           ;dc_motor.c: 265: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 266: {;dc_mot
      +                          or.c: 267:     toggle_left_indicators();
  5133   0036C8  EC93  F01C         	call	_toggle_left_indicators	;wreg free
  5134   0036CC                     
  5135                           ;dc_motor.c: 268:     turnLeft(mL, mR);
  5136   0036CC  C018  F013         	movff	turnLeft135@mL,turnLeft@mL
  5137   0036D0  C019  F014         	movff	turnLeft135@mR,turnLeft@mR
  5138   0036D4  EC3B  F015         	call	_turnLeft	;wreg free
  5139   0036D8                     
  5140                           ;dc_motor.c: 269:     _delay((unsigned long)((turnLeft135Delay)*(64000000/4000.0)));
  5141   0036D8  0E15               	movlw	21
  5142   0036DA  6E1B               	movwf	(??_turnLeft135+1)^0,c
  5143   0036DC  0E4B               	movlw	75
  5144   0036DE  6E1A               	movwf	??_turnLeft135^0,c
  5145   0036E0  0EBE               	movlw	190
  5146   0036E2                     u3407:
  5147   0036E2  2EE8               	decfsz	wreg,f,c
  5148   0036E4  D7FE               	bra	u3407
  5149   0036E6  2E1A               	decfsz	??_turnLeft135^0,f,c
  5150   0036E8  D7FC               	bra	u3407
  5151   0036EA  2E1B               	decfsz	(??_turnLeft135+1)^0,f,c
  5152   0036EC  D7FA               	bra	u3407
  5153   0036EE  D000               	nop2	
  5154   0036F0                     
  5155                           ;dc_motor.c: 270:     stop(mL, mR);
  5156   0036F0  C018  F013         	movff	turnLeft135@mL,stop@mL
  5157   0036F4  C019  F014         	movff	turnLeft135@mR,stop@mR
  5158   0036F8  ECDD  F016         	call	_stop	;wreg free
  5159   0036FC                     
  5160                           ;dc_motor.c: 271:     toggle_left_indicators();
  5161   0036FC  EC93  F01C         	call	_toggle_left_indicators	;wreg free
  5162   003700  0012               	return		;funcret
  5163   003702                     __end_of_turnLeft135:
  5164                           	callstack 0
  5165                           
  5166 ;; *************** function _card_blue *****************
  5167 ;; Defined at:
  5168 ;;		line 41 in file "manoeuvres.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5171 ;;		 -> main@motorL(9), 
  5172 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5173 ;;		 -> main@motorR(9), 
  5174 ;;  backtrack       1   29[COMRAM] unsigned char 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;		None
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  1    wreg      void 
  5179 ;; Registers used:
  5180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5186 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5188 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5189 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5190 ;;Total ram usage:        5 bytes
  5191 ;; Hardware stack levels used: 1
  5192 ;; Hardware stack levels required when called: 5
  5193 ;; This function calls:
  5194 ;;		_UTurn
  5195 ;;		_headbuttReverse
  5196 ;; This function is called by:
  5197 ;;		_pick_card
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text31
  5202   0032BE                     __ptext31:
  5203                           	callstack 0
  5204   0032BE                     _card_blue:
  5205                           	callstack 23
  5206   0032BE                     
  5207                           ;manoeuvres.c: 41: void card_blue(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 42: {;manoeuvres.c: 43:     switch (backtrack) {
  5208   0032BE  EF7D  F019         	goto	l3147
  5209   0032C2                     l3141:
  5210                           
  5211                           ;manoeuvres.c: 45:             headbuttReverse(mL, mR);
  5212   0032C2  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  5213   0032C6  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  5214   0032CA  EC9D  F01B         	call	_headbuttReverse	;wreg free
  5215                           
  5216                           ;manoeuvres.c: 46:             UTurn(mL, mR);
  5217   0032CE  C01C  F018         	movff	card_blue@mL,UTurn@mL
  5218   0032D2  C01D  F019         	movff	card_blue@mR,UTurn@mR
  5219   0032D6  ECD0  F01A         	call	_UTurn	;wreg free
  5220                           
  5221                           ;manoeuvres.c: 47:             break;
  5222   0032DA  EF92  F019         	goto	l555
  5223   0032DE                     l3143:
  5224                           
  5225                           ;manoeuvres.c: 49:             UTurn(mL, mR);
  5226   0032DE  C01C  F018         	movff	card_blue@mL,UTurn@mL
  5227   0032E2  C01D  F019         	movff	card_blue@mR,UTurn@mR
  5228   0032E6  ECD0  F01A         	call	_UTurn	;wreg free
  5229                           
  5230                           ;manoeuvres.c: 50:             headbuttReverse(mL, mR);
  5231   0032EA  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  5232   0032EE  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  5233   0032F2  EC9D  F01B         	call	_headbuttReverse	;wreg free
  5234                           
  5235                           ;manoeuvres.c: 51:             break;
  5236   0032F6  EF92  F019         	goto	l555
  5237   0032FA                     l3147:
  5238   0032FA  501E               	movf	card_blue@backtrack^0,w,c
  5239   0032FC  6E1F               	movwf	??_card_blue^0,c
  5240   0032FE  6A20               	clrf	(??_card_blue+1)^0,c
  5241                           
  5242                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5243                           ; Switch size 1, requested type "simple"
  5244                           ; Number of cases is 1, Range of values is 0 to 0
  5245                           ; switch strategies available:
  5246                           ; Name         Instructions Cycles
  5247                           ; simple_byte            4     3 (average)
  5248                           ;	Chosen strategy is simple_byte
  5249   003300  5020               	movf	(??_card_blue+1)^0,w,c
  5250   003302  0A00               	xorlw	0	; case 0
  5251   003304  B4D8               	btfsc	status,2,c
  5252   003306  EF87  F019         	goto	l4173
  5253   00330A  EF92  F019         	goto	l555
  5254   00330E                     l4173:
  5255                           
  5256                           ; Switch size 1, requested type "simple"
  5257                           ; Number of cases is 2, Range of values is 0 to 1
  5258                           ; switch strategies available:
  5259                           ; Name         Instructions Cycles
  5260                           ; simple_byte            7     4 (average)
  5261                           ;	Chosen strategy is simple_byte
  5262   00330E  501F               	movf	??_card_blue^0,w,c
  5263   003310  0A00               	xorlw	0	; case 0
  5264   003312  B4D8               	btfsc	status,2,c
  5265   003314  EF61  F019         	goto	l3141
  5266   003318  0A01               	xorlw	1	; case 1
  5267   00331A  B4D8               	btfsc	status,2,c
  5268   00331C  EF6F  F019         	goto	l3143
  5269   003320  EF92  F019         	goto	l555
  5270   003324                     l555:
  5271   003324  0012               	return		;funcret
  5272   003326                     __end_of_card_blue:
  5273                           	callstack 0
  5274                           
  5275 ;; *************** function _headbuttReverse *****************
  5276 ;; Defined at:
  5277 ;;		line 303 in file "dc_motor.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5280 ;;		 -> main@motorL(9), 
  5281 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5282 ;;		 -> main@motorR(9), 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;		None
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      void 
  5287 ;; Registers used:
  5288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5296 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5297 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5298 ;;Total ram usage:        4 bytes
  5299 ;; Hardware stack levels used: 1
  5300 ;; Hardware stack levels required when called: 4
  5301 ;; This function calls:
  5302 ;;		_fullSpeedReverse
  5303 ;;		_stop
  5304 ;;		_toggle_brake_lights
  5305 ;; This function is called by:
  5306 ;;		_card_red
  5307 ;;		_card_green
  5308 ;;		_card_blue
  5309 ;;		_card_yellow
  5310 ;;		_card_pink
  5311 ;;		_card_orange
  5312 ;;		_card_cyan
  5313 ;;		_card_white
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text32
  5318   00373A                     __ptext32:
  5319                           	callstack 0
  5320   00373A                     _headbuttReverse:
  5321                           	callstack 23
  5322   00373A                     
  5323                           ;dc_motor.c: 303: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 304: {;dc
      +                          _motor.c: 305:     toggle_brake_lights();
  5324   00373A  EC61  F01C         	call	_toggle_brake_lights	;wreg free
  5325   00373E                     
  5326                           ;dc_motor.c: 306:     fullSpeedReverse(mL, mR);
  5327   00373E  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
  5328   003742  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
  5329   003746  EC97  F015         	call	_fullSpeedReverse	;wreg free
  5330   00374A                     
  5331                           ;dc_motor.c: 307:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
  5332   00374A  0E43               	movlw	67
  5333   00374C  6E1B               	movwf	(??_headbuttReverse+1)^0,c
  5334   00374E  0E8F               	movlw	143
  5335   003750  6E1A               	movwf	??_headbuttReverse^0,c
  5336   003752  0EC8               	movlw	200
  5337   003754                     u3417:
  5338   003754  2EE8               	decfsz	wreg,f,c
  5339   003756  D7FE               	bra	u3417
  5340   003758  2E1A               	decfsz	??_headbuttReverse^0,f,c
  5341   00375A  D7FC               	bra	u3417
  5342   00375C  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
  5343   00375E  D7FA               	bra	u3417
  5344   003760                     
  5345                           ;dc_motor.c: 308:     stop(mL, mR);
  5346   003760  C018  F013         	movff	headbuttReverse@mL,stop@mL
  5347   003764  C019  F014         	movff	headbuttReverse@mR,stop@mR
  5348   003768  ECDD  F016         	call	_stop	;wreg free
  5349   00376C                     
  5350                           ;dc_motor.c: 309:     toggle_brake_lights();
  5351   00376C  EC61  F01C         	call	_toggle_brake_lights	;wreg free
  5352   003770  0012               	return		;funcret
  5353   003772                     __end_of_headbuttReverse:
  5354                           	callstack 0
  5355                           
  5356 ;; *************** function _toggle_brake_lights *****************
  5357 ;; Defined at:
  5358 ;;		line 48 in file "buggy_lights.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;		None
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  1    wreg      void 
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5375 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5376 ;;Total ram usage:        1 bytes
  5377 ;; Hardware stack levels used: 1
  5378 ;; Hardware stack levels required when called: 1
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_headbuttReverse
  5383 ;;		_squareReverse
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text33
  5388   0038C2                     __ptext33:
  5389                           	callstack 0
  5390   0038C2                     _toggle_brake_lights:
  5391                           	callstack 25
  5392   0038C2                     
  5393                           ;buggy_lights.c: 51:     LATDbits.LATD4 = !LATDbits.LATD4;
  5394   0038C2  A87C               	btfss	124,4,c	;volatile
  5395   0038C4  EF66  F01C         	goto	u1781
  5396   0038C8  EF6A  F01C         	goto	u1780
  5397   0038CC                     u1781:
  5398   0038CC  6A01               	clrf	??_toggle_brake_lights^0,c
  5399   0038CE  2A01               	incf	??_toggle_brake_lights^0,f,c
  5400   0038D0  EF6B  F01C         	goto	u1798
  5401   0038D4                     u1780:
  5402   0038D4  6A01               	clrf	??_toggle_brake_lights^0,c
  5403   0038D6                     u1798:
  5404   0038D6  3A01               	swapf	??_toggle_brake_lights^0,f,c
  5405   0038D8  507C               	movf	124,w,c	;volatile
  5406   0038DA  1801               	xorwf	??_toggle_brake_lights^0,w,c
  5407   0038DC  0BEF               	andlw	-17
  5408   0038DE  1801               	xorwf	??_toggle_brake_lights^0,w,c
  5409   0038E0  6E7C               	movwf	124,c	;volatile
  5410   0038E2  0012               	return		;funcret
  5411   0038E4                     __end_of_toggle_brake_lights:
  5412                           	callstack 0
  5413                           
  5414 ;; *************** function _fullSpeedReverse *****************
  5415 ;; Defined at:
  5416 ;;		line 210 in file "dc_motor.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5419 ;;		 -> main@motorL(9), 
  5420 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5421 ;;		 -> main@motorR(9), 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  rightGear       1   22[COMRAM] unsigned char 
  5424 ;;  leftGear        1   21[COMRAM] unsigned char 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  1    wreg      void 
  5427 ;; Registers used:
  5428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5434 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5435 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5436 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5437 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5438 ;;Total ram usage:        5 bytes
  5439 ;; Hardware stack levels used: 1
  5440 ;; Hardware stack levels required when called: 3
  5441 ;; This function calls:
  5442 ;;		_setMotorPWM
  5443 ;; This function is called by:
  5444 ;;		_headbuttReverse
  5445 ;;		_squareReverse
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text34
  5450   002B2E                     __ptext34:
  5451                           	callstack 0
  5452   002B2E                     _fullSpeedReverse:
  5453                           	callstack 23
  5454   002B2E  0E14               	movlw	20
  5455   002B30  6E16               	movwf	fullSpeedReverse@leftGear^0,c
  5456   002B32  0E15               	movlw	21
  5457   002B34  6E17               	movwf	fullSpeedReverse@rightGear^0,c
  5458   002B36                     
  5459                           ;dc_motor.c: 217:     (mL->direction) = 0;
  5460   002B36  5013               	movf	fullSpeedReverse@mL^0,w,c
  5461   002B38  6ED9               	movwf	fsr2l,c
  5462   002B3A  6ADA               	clrf	fsr2h,c
  5463   002B3C  0E01               	movlw	1
  5464   002B3E  26D9               	addwf	fsr2l,f,c
  5465   002B40  6ADF               	clrf	indf2,c
  5466   002B42                     
  5467                           ;dc_motor.c: 218:     (mR->direction) = 0;
  5468   002B42  5014               	movf	fullSpeedReverse@mR^0,w,c
  5469   002B44  6ED9               	movwf	fsr2l,c
  5470   002B46  6ADA               	clrf	fsr2h,c
  5471   002B48  0E01               	movlw	1
  5472   002B4A  26D9               	addwf	fsr2l,f,c
  5473   002B4C  6ADF               	clrf	indf2,c
  5474                           
  5475                           ;dc_motor.c: 221:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5476   002B4E  EFD9  F015         	goto	l2985
  5477   002B52                     l2973:
  5478                           
  5479                           ;dc_motor.c: 224:         if (mL->power < leftGear) {mL->power++;}
  5480   002B52  5013               	movf	fullSpeedReverse@mL^0,w,c
  5481   002B54  6ED9               	movwf	fsr2l,c
  5482   002B56  6ADA               	clrf	fsr2h,c
  5483   002B58  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  5484   002B5A  5CDE               	subwf	postinc2,w,c
  5485   002B5C  B0D8               	btfsc	status,0,c
  5486   002B5E  EFB3  F015         	goto	u1981
  5487   002B62  EFB5  F015         	goto	u1980
  5488   002B66                     u1981:
  5489   002B66  EFB9  F015         	goto	l269
  5490   002B6A                     u1980:
  5491   002B6A  5013               	movf	fullSpeedReverse@mL^0,w,c
  5492   002B6C  6ED9               	movwf	fsr2l,c
  5493   002B6E  6ADA               	clrf	fsr2h,c
  5494   002B70  2ADF               	incf	indf2,f,c
  5495   002B72                     l269:
  5496                           
  5497                           ;dc_motor.c: 227:         if (mR->power < rightGear) {mR->power++;}
  5498   002B72  5014               	movf	fullSpeedReverse@mR^0,w,c
  5499   002B74  6ED9               	movwf	fsr2l,c
  5500   002B76  6ADA               	clrf	fsr2h,c
  5501   002B78  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  5502   002B7A  5CDE               	subwf	postinc2,w,c
  5503   002B7C  B0D8               	btfsc	status,0,c
  5504   002B7E  EFC3  F015         	goto	u1991
  5505   002B82  EFC5  F015         	goto	u1990
  5506   002B86                     u1991:
  5507   002B86  EFC9  F015         	goto	l2979
  5508   002B8A                     u1990:
  5509   002B8A  5014               	movf	fullSpeedReverse@mR^0,w,c
  5510   002B8C  6ED9               	movwf	fsr2l,c
  5511   002B8E  6ADA               	clrf	fsr2h,c
  5512   002B90  2ADF               	incf	indf2,f,c
  5513   002B92                     l2979:
  5514                           
  5515                           ;dc_motor.c: 230:         setMotorPWM(mL);
  5516   002B92  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  5517   002B96  EC68  F011         	call	_setMotorPWM	;wreg free
  5518   002B9A                     
  5519                           ;dc_motor.c: 231:         setMotorPWM(mR);
  5520   002B9A  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  5521   002B9E  EC68  F011         	call	_setMotorPWM	;wreg free
  5522   002BA2                     
  5523                           ;dc_motor.c: 234:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5524   002BA2  0EA7               	movlw	167
  5525   002BA4  6E15               	movwf	??_fullSpeedReverse^0,c
  5526   002BA6  0E3A               	movlw	58
  5527   002BA8                     u3427:
  5528   002BA8  2EE8               	decfsz	wreg,f,c
  5529   002BAA  D7FE               	bra	u3427
  5530   002BAC  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  5531   002BAE  D7FC               	bra	u3427
  5532   002BB0  D000               	nop2	
  5533   002BB2                     l2985:
  5534                           
  5535                           ;dc_motor.c: 221:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5536   002BB2  5013               	movf	fullSpeedReverse@mL^0,w,c
  5537   002BB4  6ED9               	movwf	fsr2l,c
  5538   002BB6  6ADA               	clrf	fsr2h,c
  5539   002BB8  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  5540   002BBA  5CDE               	subwf	postinc2,w,c
  5541   002BBC  A0D8               	btfss	status,0,c
  5542   002BBE  EFE3  F015         	goto	u2001
  5543   002BC2  EFE5  F015         	goto	u2000
  5544   002BC6                     u2001:
  5545   002BC6  EFA9  F015         	goto	l2973
  5546   002BCA                     u2000:
  5547   002BCA  5014               	movf	fullSpeedReverse@mR^0,w,c
  5548   002BCC  6ED9               	movwf	fsr2l,c
  5549   002BCE  6ADA               	clrf	fsr2h,c
  5550   002BD0  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  5551   002BD2  5CDE               	subwf	postinc2,w,c
  5552   002BD4  A0D8               	btfss	status,0,c
  5553   002BD6  EFEF  F015         	goto	u2011
  5554   002BDA  EFF1  F015         	goto	u2010
  5555   002BDE                     u2011:
  5556   002BDE  EFA9  F015         	goto	l2973
  5557   002BE2                     u2010:
  5558   002BE2  0012               	return		;funcret
  5559   002BE4                     __end_of_fullSpeedReverse:
  5560                           	callstack 0
  5561                           
  5562 ;; *************** function _UTurn *****************
  5563 ;; Defined at:
  5564 ;;		line 289 in file "dc_motor.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  5567 ;;		 -> main@motorL(9), 
  5568 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  5569 ;;		 -> main@motorR(9), 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;		None
  5572 ;; Return value:  Size  Location     Type
  5573 ;;                  1    wreg      void 
  5574 ;; Registers used:
  5575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5581 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5583 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5584 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5585 ;;Total ram usage:        4 bytes
  5586 ;; Hardware stack levels used: 1
  5587 ;; Hardware stack levels required when called: 4
  5588 ;; This function calls:
  5589 ;;		_stop
  5590 ;;		_toggle_left_indicators
  5591 ;;		_toggle_right_indicators
  5592 ;;		_turnLeft
  5593 ;; This function is called by:
  5594 ;;		_card_blue
  5595 ;;		_card_white
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text35
  5600   0035A0                     __ptext35:
  5601                           	callstack 0
  5602   0035A0                     _UTurn:
  5603                           	callstack 23
  5604   0035A0                     
  5605                           ;dc_motor.c: 289: void UTurn(DC_motor *mL, DC_motor *mR);dc_motor.c: 290: {;dc_motor.c: 
      +                          291:     toggle_left_indicators();
  5606   0035A0  EC93  F01C         	call	_toggle_left_indicators	;wreg free
  5607                           
  5608                           ;dc_motor.c: 292:     toggle_right_indicators();
  5609   0035A4  EC83  F01C         	call	_toggle_right_indicators	;wreg free
  5610   0035A8                     
  5611                           ;dc_motor.c: 293:     turnLeft(mL, mR);
  5612   0035A8  C018  F013         	movff	UTurn@mL,turnLeft@mL
  5613   0035AC  C019  F014         	movff	UTurn@mR,turnLeft@mR
  5614   0035B0  EC3B  F015         	call	_turnLeft	;wreg free
  5615   0035B4                     
  5616                           ;dc_motor.c: 294:     _delay((unsigned long)((turn180Delay)*(64000000/4000.0)));
  5617   0035B4  0E1F               	movlw	31
  5618   0035B6  6E1B               	movwf	(??_UTurn+1)^0,c
  5619   0035B8  0ED9               	movlw	217
  5620   0035BA  6E1A               	movwf	??_UTurn^0,c
  5621   0035BC  0E04               	movlw	4
  5622   0035BE                     u3437:
  5623   0035BE  2EE8               	decfsz	wreg,f,c
  5624   0035C0  D7FE               	bra	u3437
  5625   0035C2  2E1A               	decfsz	??_UTurn^0,f,c
  5626   0035C4  D7FC               	bra	u3437
  5627   0035C6  2E1B               	decfsz	(??_UTurn+1)^0,f,c
  5628   0035C8  D7FA               	bra	u3437
  5629   0035CA                     
  5630                           ;dc_motor.c: 295:     stop(mL, mR);
  5631   0035CA  C018  F013         	movff	UTurn@mL,stop@mL
  5632   0035CE  C019  F014         	movff	UTurn@mR,stop@mR
  5633   0035D2  ECDD  F016         	call	_stop	;wreg free
  5634   0035D6                     
  5635                           ;dc_motor.c: 296:     toggle_left_indicators();
  5636   0035D6  EC93  F01C         	call	_toggle_left_indicators	;wreg free
  5637   0035DA                     
  5638                           ;dc_motor.c: 297:     toggle_right_indicators();
  5639   0035DA  EC83  F01C         	call	_toggle_right_indicators	;wreg free
  5640   0035DE  0012               	return		;funcret
  5641   0035E0                     __end_of_UTurn:
  5642                           	callstack 0
  5643                           
  5644 ;; *************** function _turnLeft *****************
  5645 ;; Defined at:
  5646 ;;		line 117 in file "dc_motor.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5649 ;;		 -> main@motorL(9), 
  5650 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5651 ;;		 -> main@motorR(9), 
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;  rightGear       1   22[COMRAM] unsigned char 
  5654 ;;  leftGear        1   21[COMRAM] unsigned char 
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5664 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5665 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5666 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5667 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5668 ;;Total ram usage:        5 bytes
  5669 ;; Hardware stack levels used: 1
  5670 ;; Hardware stack levels required when called: 3
  5671 ;; This function calls:
  5672 ;;		_setMotorPWM
  5673 ;; This function is called by:
  5674 ;;		_turnLeft90
  5675 ;;		_turnLeft135
  5676 ;;		_UTurn
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text36
  5681   002A76                     __ptext36:
  5682                           	callstack 0
  5683   002A76                     _turnLeft:
  5684                           	callstack 23
  5685   002A76  0E28               	movlw	40
  5686   002A78  6E16               	movwf	turnLeft@leftGear^0,c
  5687   002A7A  0E28               	movlw	40
  5688   002A7C  6E17               	movwf	turnLeft@rightGear^0,c
  5689   002A7E                     
  5690                           ;dc_motor.c: 124:     (mL->direction) = 0;
  5691   002A7E  5013               	movf	turnLeft@mL^0,w,c
  5692   002A80  6ED9               	movwf	fsr2l,c
  5693   002A82  6ADA               	clrf	fsr2h,c
  5694   002A84  0E01               	movlw	1
  5695   002A86  26D9               	addwf	fsr2l,f,c
  5696   002A88  6ADF               	clrf	indf2,c
  5697   002A8A                     
  5698                           ;dc_motor.c: 125:     (mR->direction) = 1;
  5699   002A8A  5014               	movf	turnLeft@mR^0,w,c
  5700   002A8C  6ED9               	movwf	fsr2l,c
  5701   002A8E  6ADA               	clrf	fsr2h,c
  5702   002A90  0E01               	movlw	1
  5703   002A92  26D9               	addwf	fsr2l,f,c
  5704   002A94  0E01               	movlw	1
  5705   002A96  6EDF               	movwf	indf2,c
  5706                           
  5707                           ;dc_motor.c: 128:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5708   002A98  EF7E  F015         	goto	l2941
  5709   002A9C                     l2929:
  5710                           
  5711                           ;dc_motor.c: 131:         if (mL->power < leftGear) {mL->power++;}
  5712   002A9C  5013               	movf	turnLeft@mL^0,w,c
  5713   002A9E  6ED9               	movwf	fsr2l,c
  5714   002AA0  6ADA               	clrf	fsr2h,c
  5715   002AA2  5016               	movf	turnLeft@leftGear^0,w,c
  5716   002AA4  5CDE               	subwf	postinc2,w,c
  5717   002AA6  B0D8               	btfsc	status,0,c
  5718   002AA8  EF58  F015         	goto	u1901
  5719   002AAC  EF5A  F015         	goto	u1900
  5720   002AB0                     u1901:
  5721   002AB0  EF5E  F015         	goto	l245
  5722   002AB4                     u1900:
  5723   002AB4  5013               	movf	turnLeft@mL^0,w,c
  5724   002AB6  6ED9               	movwf	fsr2l,c
  5725   002AB8  6ADA               	clrf	fsr2h,c
  5726   002ABA  2ADF               	incf	indf2,f,c
  5727   002ABC                     l245:
  5728                           
  5729                           ;dc_motor.c: 134:         if (mR->power < rightGear) {mR->power++;}
  5730   002ABC  5014               	movf	turnLeft@mR^0,w,c
  5731   002ABE  6ED9               	movwf	fsr2l,c
  5732   002AC0  6ADA               	clrf	fsr2h,c
  5733   002AC2  5017               	movf	turnLeft@rightGear^0,w,c
  5734   002AC4  5CDE               	subwf	postinc2,w,c
  5735   002AC6  B0D8               	btfsc	status,0,c
  5736   002AC8  EF68  F015         	goto	u1911
  5737   002ACC  EF6A  F015         	goto	u1910
  5738   002AD0                     u1911:
  5739   002AD0  EF6E  F015         	goto	l2935
  5740   002AD4                     u1910:
  5741   002AD4  5014               	movf	turnLeft@mR^0,w,c
  5742   002AD6  6ED9               	movwf	fsr2l,c
  5743   002AD8  6ADA               	clrf	fsr2h,c
  5744   002ADA  2ADF               	incf	indf2,f,c
  5745   002ADC                     l2935:
  5746                           
  5747                           ;dc_motor.c: 137:         setMotorPWM(mL);
  5748   002ADC  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5749   002AE0  EC68  F011         	call	_setMotorPWM	;wreg free
  5750   002AE4                     
  5751                           ;dc_motor.c: 138:         setMotorPWM(mR);
  5752   002AE4  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5753   002AE8  EC68  F011         	call	_setMotorPWM	;wreg free
  5754   002AEC                     
  5755                           ;dc_motor.c: 141:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  5756   002AEC  0EA7               	movlw	167
  5757   002AEE  6E15               	movwf	??_turnLeft^0,c
  5758   002AF0  0E3A               	movlw	58
  5759   002AF2                     u3447:
  5760   002AF2  2EE8               	decfsz	wreg,f,c
  5761   002AF4  D7FE               	bra	u3447
  5762   002AF6  2E15               	decfsz	??_turnLeft^0,f,c
  5763   002AF8  D7FC               	bra	u3447
  5764   002AFA  D000               	nop2	
  5765   002AFC                     l2941:
  5766                           
  5767                           ;dc_motor.c: 128:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  5768   002AFC  5013               	movf	turnLeft@mL^0,w,c
  5769   002AFE  6ED9               	movwf	fsr2l,c
  5770   002B00  6ADA               	clrf	fsr2h,c
  5771   002B02  5016               	movf	turnLeft@leftGear^0,w,c
  5772   002B04  5CDE               	subwf	postinc2,w,c
  5773   002B06  A0D8               	btfss	status,0,c
  5774   002B08  EF88  F015         	goto	u1921
  5775   002B0C  EF8A  F015         	goto	u1920
  5776   002B10                     u1921:
  5777   002B10  EF4E  F015         	goto	l2929
  5778   002B14                     u1920:
  5779   002B14  5014               	movf	turnLeft@mR^0,w,c
  5780   002B16  6ED9               	movwf	fsr2l,c
  5781   002B18  6ADA               	clrf	fsr2h,c
  5782   002B1A  5017               	movf	turnLeft@rightGear^0,w,c
  5783   002B1C  5CDE               	subwf	postinc2,w,c
  5784   002B1E  A0D8               	btfss	status,0,c
  5785   002B20  EF94  F015         	goto	u1931
  5786   002B24  EF96  F015         	goto	u1930
  5787   002B28                     u1931:
  5788   002B28  EF4E  F015         	goto	l2929
  5789   002B2C                     u1930:
  5790   002B2C  0012               	return		;funcret
  5791   002B2E                     __end_of_turnLeft:
  5792                           	callstack 0
  5793                           
  5794 ;; *************** function _toggle_right_indicators *****************
  5795 ;; Defined at:
  5796 ;;		line 84 in file "buggy_lights.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;		None
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5812 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5814 ;;Total ram usage:        1 bytes
  5815 ;; Hardware stack levels used: 1
  5816 ;; Hardware stack levels required when called: 1
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_turnRight90
  5821 ;;		_turnRight135
  5822 ;;		_UTurn
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text37
  5827   003906                     __ptext37:
  5828                           	callstack 0
  5829   003906                     _toggle_right_indicators:
  5830                           	callstack 25
  5831   003906                     
  5832                           ;buggy_lights.c: 87:     LATHbits.LATH0 = !LATHbits.LATH0;
  5833   003906  A080               	btfss	128,0,c	;volatile
  5834   003908  EF88  F01C         	goto	u1821
  5835   00390C  EF8C  F01C         	goto	u1820
  5836   003910                     u1821:
  5837   003910  6A01               	clrf	??_toggle_right_indicators^0,c
  5838   003912  2A01               	incf	??_toggle_right_indicators^0,f,c
  5839   003914  EF8D  F01C         	goto	u1838
  5840   003918                     u1820:
  5841   003918  6A01               	clrf	??_toggle_right_indicators^0,c
  5842   00391A                     u1838:
  5843   00391A  5080               	movf	128,w,c	;volatile
  5844   00391C  1801               	xorwf	??_toggle_right_indicators^0,w,c
  5845   00391E  0BFE               	andlw	-2
  5846   003920  1801               	xorwf	??_toggle_right_indicators^0,w,c
  5847   003922  6E80               	movwf	128,c	;volatile
  5848   003924  0012               	return		;funcret
  5849   003926                     __end_of_toggle_right_indicators:
  5850                           	callstack 0
  5851                           
  5852 ;; *************** function _toggle_left_indicators *****************
  5853 ;; Defined at:
  5854 ;;		line 75 in file "buggy_lights.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;		None
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2, status,0
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5870 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5871 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5872 ;;Total ram usage:        1 bytes
  5873 ;; Hardware stack levels used: 1
  5874 ;; Hardware stack levels required when called: 1
  5875 ;; This function calls:
  5876 ;;		Nothing
  5877 ;; This function is called by:
  5878 ;;		_turnLeft90
  5879 ;;		_turnLeft135
  5880 ;;		_UTurn
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text38
  5885   003926                     __ptext38:
  5886                           	callstack 0
  5887   003926                     _toggle_left_indicators:
  5888                           	callstack 25
  5889   003926                     
  5890                           ;buggy_lights.c: 78:     LATFbits.LATF0 = !LATFbits.LATF0;
  5891   003926  A07E               	btfss	126,0,c	;volatile
  5892   003928  EF98  F01C         	goto	u1801
  5893   00392C  EF9C  F01C         	goto	u1800
  5894   003930                     u1801:
  5895   003930  6A01               	clrf	??_toggle_left_indicators^0,c
  5896   003932  2A01               	incf	??_toggle_left_indicators^0,f,c
  5897   003934  EF9D  F01C         	goto	u1818
  5898   003938                     u1800:
  5899   003938  6A01               	clrf	??_toggle_left_indicators^0,c
  5900   00393A                     u1818:
  5901   00393A  507E               	movf	126,w,c	;volatile
  5902   00393C  1801               	xorwf	??_toggle_left_indicators^0,w,c
  5903   00393E  0BFE               	andlw	-2
  5904   003940  1801               	xorwf	??_toggle_left_indicators^0,w,c
  5905   003942  6E7E               	movwf	126,c	;volatile
  5906   003944  0012               	return		;funcret
  5907   003946                     __end_of_toggle_left_indicators:
  5908                           	callstack 0
  5909                           
  5910 ;; *************** function _stop *****************
  5911 ;; Defined at:
  5912 ;;		line 94 in file "dc_motor.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  5915 ;;		 -> main@motorL(9), 
  5916 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  5917 ;;		 -> main@motorR(9), 
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;		None
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      void 
  5922 ;; Registers used:
  5923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5929 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5931 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5932 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5933 ;;Total ram usage:        3 bytes
  5934 ;; Hardware stack levels used: 1
  5935 ;; Hardware stack levels required when called: 3
  5936 ;; This function calls:
  5937 ;;		_setMotorPWM
  5938 ;; This function is called by:
  5939 ;;		_turnLeft90
  5940 ;;		_turnRight90
  5941 ;;		_turnLeft135
  5942 ;;		_turnRight135
  5943 ;;		_UTurn
  5944 ;;		_headbuttReverse
  5945 ;;		_squareReverse
  5946 ;;		_forward_navigation
  5947 ;;		_return_to_sender
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           	psect	text39
  5952   002DBA                     __ptext39:
  5953                           	callstack 0
  5954   002DBA                     _stop:
  5955                           	callstack 26
  5956   002DBA                     
  5957                           ;dc_motor.c: 94: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 95: {;dc_motor.c: 97:
      +                               while ((mL->power > 0) || (mR->power > 0)){
  5958   002DBA  EF0D  F017         	goto	l2919
  5959   002DBE                     l2905:
  5960                           
  5961                           ;dc_motor.c: 100:         if (mL->power > 0) {mL->power--;}
  5962   002DBE  5013               	movf	stop@mL^0,w,c
  5963   002DC0  6ED9               	movwf	fsr2l,c
  5964   002DC2  6ADA               	clrf	fsr2h,c
  5965   002DC4  50DF               	movf	indf2,w,c
  5966   002DC6  B4D8               	btfsc	status,2,c
  5967   002DC8  EFE8  F016         	goto	u1861
  5968   002DCC  EFEA  F016         	goto	u1860
  5969   002DD0                     u1861:
  5970   002DD0  EFEE  F016         	goto	l2909
  5971   002DD4                     u1860:
  5972   002DD4  5013               	movf	stop@mL^0,w,c
  5973   002DD6  6ED9               	movwf	fsr2l,c
  5974   002DD8  6ADA               	clrf	fsr2h,c
  5975   002DDA  06DF               	decf	indf2,f,c
  5976   002DDC                     l2909:
  5977                           
  5978                           ;dc_motor.c: 103:         if (mR->power > 0) {mR->power--;}
  5979   002DDC  5014               	movf	stop@mR^0,w,c
  5980   002DDE  6ED9               	movwf	fsr2l,c
  5981   002DE0  6ADA               	clrf	fsr2h,c
  5982   002DE2  50DF               	movf	indf2,w,c
  5983   002DE4  B4D8               	btfsc	status,2,c
  5984   002DE6  EFF7  F016         	goto	u1871
  5985   002DEA  EFF9  F016         	goto	u1870
  5986   002DEE                     u1871:
  5987   002DEE  EFFD  F016         	goto	l2913
  5988   002DF2                     u1870:
  5989   002DF2  5014               	movf	stop@mR^0,w,c
  5990   002DF4  6ED9               	movwf	fsr2l,c
  5991   002DF6  6ADA               	clrf	fsr2h,c
  5992   002DF8  06DF               	decf	indf2,f,c
  5993   002DFA                     l2913:
  5994                           
  5995                           ;dc_motor.c: 106:         setMotorPWM(mL);
  5996   002DFA  C013  F00E         	movff	stop@mL,setMotorPWM@m
  5997   002DFE  EC68  F011         	call	_setMotorPWM	;wreg free
  5998   002E02                     
  5999                           ;dc_motor.c: 107:         setMotorPWM(mR);
  6000   002E02  C014  F00E         	movff	stop@mR,setMotorPWM@m
  6001   002E06  EC68  F011         	call	_setMotorPWM	;wreg free
  6002   002E0A                     
  6003                           ;dc_motor.c: 110:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  6004   002E0A  0EA7               	movlw	167
  6005   002E0C  6E15               	movwf	??_stop^0,c
  6006   002E0E  0E3A               	movlw	58
  6007   002E10                     u3457:
  6008   002E10  2EE8               	decfsz	wreg,f,c
  6009   002E12  D7FE               	bra	u3457
  6010   002E14  2E15               	decfsz	??_stop^0,f,c
  6011   002E16  D7FC               	bra	u3457
  6012   002E18  D000               	nop2	
  6013   002E1A                     l2919:
  6014                           
  6015                           ;dc_motor.c: 97:     while ((mL->power > 0) || (mR->power > 0)){
  6016   002E1A  5013               	movf	stop@mL^0,w,c
  6017   002E1C  6ED9               	movwf	fsr2l,c
  6018   002E1E  6ADA               	clrf	fsr2h,c
  6019   002E20  50DF               	movf	indf2,w,c
  6020   002E22  A4D8               	btfss	status,2,c
  6021   002E24  EF16  F017         	goto	u1881
  6022   002E28  EF18  F017         	goto	u1880
  6023   002E2C                     u1881:
  6024   002E2C  EFDF  F016         	goto	l2905
  6025   002E30                     u1880:
  6026   002E30  5014               	movf	stop@mR^0,w,c
  6027   002E32  6ED9               	movwf	fsr2l,c
  6028   002E34  6ADA               	clrf	fsr2h,c
  6029   002E36  50DF               	movf	indf2,w,c
  6030   002E38  A4D8               	btfss	status,2,c
  6031   002E3A  EF21  F017         	goto	u1891
  6032   002E3E  EF23  F017         	goto	u1890
  6033   002E42                     u1891:
  6034   002E42  EFDF  F016         	goto	l2905
  6035   002E46                     u1890:
  6036   002E46  0012               	return		;funcret
  6037   002E48                     __end_of_stop:
  6038                           	callstack 0
  6039                           
  6040 ;; *************** function _fullSpeedAhead *****************
  6041 ;; Defined at:
  6042 ;;		line 179 in file "dc_motor.c"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6045 ;;		 -> main@motorL(9), 
  6046 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6047 ;;		 -> main@motorR(9), 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  rightGear       1   22[COMRAM] unsigned char 
  6050 ;;  leftGear        1   21[COMRAM] unsigned char 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  1    wreg      void 
  6053 ;; Registers used:
  6054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : 0/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6060 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6061 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6062 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6063 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6064 ;;Total ram usage:        5 bytes
  6065 ;; Hardware stack levels used: 1
  6066 ;; Hardware stack levels required when called: 3
  6067 ;; This function calls:
  6068 ;;		_setMotorPWM
  6069 ;; This function is called by:
  6070 ;;		_forward_navigation
  6071 ;;		_return_to_sender
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           	psect	text40
  6076   002904                     __ptext40:
  6077                           	callstack 0
  6078   002904                     _fullSpeedAhead:
  6079                           	callstack 26
  6080   002904  0E14               	movlw	20
  6081   002906  6E16               	movwf	fullSpeedAhead@leftGear^0,c
  6082   002908  0E14               	movlw	20
  6083   00290A  6E17               	movwf	fullSpeedAhead@rightGear^0,c
  6084   00290C                     
  6085                           ;dc_motor.c: 186:     (mL->direction) = 1;
  6086   00290C  5013               	movf	fullSpeedAhead@mL^0,w,c
  6087   00290E  6ED9               	movwf	fsr2l,c
  6088   002910  6ADA               	clrf	fsr2h,c
  6089   002912  0E01               	movlw	1
  6090   002914  26D9               	addwf	fsr2l,f,c
  6091   002916  0E01               	movlw	1
  6092   002918  6EDF               	movwf	indf2,c
  6093   00291A                     
  6094                           ;dc_motor.c: 187:     (mR->direction) = 1;
  6095   00291A  5014               	movf	fullSpeedAhead@mR^0,w,c
  6096   00291C  6ED9               	movwf	fsr2l,c
  6097   00291E  6ADA               	clrf	fsr2h,c
  6098   002920  0E01               	movlw	1
  6099   002922  26D9               	addwf	fsr2l,f,c
  6100   002924  0E01               	movlw	1
  6101   002926  6EDF               	movwf	indf2,c
  6102                           
  6103                           ;dc_motor.c: 190:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  6104   002928  EFC6  F014         	goto	l3745
  6105   00292C                     l3733:
  6106                           
  6107                           ;dc_motor.c: 193:         if (mL->power < leftGear) {mL->power++;}
  6108   00292C  5013               	movf	fullSpeedAhead@mL^0,w,c
  6109   00292E  6ED9               	movwf	fsr2l,c
  6110   002930  6ADA               	clrf	fsr2h,c
  6111   002932  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  6112   002934  5CDE               	subwf	postinc2,w,c
  6113   002936  B0D8               	btfsc	status,0,c
  6114   002938  EFA0  F014         	goto	u3081
  6115   00293C  EFA2  F014         	goto	u3080
  6116   002940                     u3081:
  6117   002940  EFA6  F014         	goto	l261
  6118   002944                     u3080:
  6119   002944  5013               	movf	fullSpeedAhead@mL^0,w,c
  6120   002946  6ED9               	movwf	fsr2l,c
  6121   002948  6ADA               	clrf	fsr2h,c
  6122   00294A  2ADF               	incf	indf2,f,c
  6123   00294C                     l261:
  6124                           
  6125                           ;dc_motor.c: 196:         if (mR->power < rightGear) {mR->power++;}
  6126   00294C  5014               	movf	fullSpeedAhead@mR^0,w,c
  6127   00294E  6ED9               	movwf	fsr2l,c
  6128   002950  6ADA               	clrf	fsr2h,c
  6129   002952  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  6130   002954  5CDE               	subwf	postinc2,w,c
  6131   002956  B0D8               	btfsc	status,0,c
  6132   002958  EFB0  F014         	goto	u3091
  6133   00295C  EFB2  F014         	goto	u3090
  6134   002960                     u3091:
  6135   002960  EFB6  F014         	goto	l3739
  6136   002964                     u3090:
  6137   002964  5014               	movf	fullSpeedAhead@mR^0,w,c
  6138   002966  6ED9               	movwf	fsr2l,c
  6139   002968  6ADA               	clrf	fsr2h,c
  6140   00296A  2ADF               	incf	indf2,f,c
  6141   00296C                     l3739:
  6142                           
  6143                           ;dc_motor.c: 199:         setMotorPWM(mL);
  6144   00296C  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  6145   002970  EC68  F011         	call	_setMotorPWM	;wreg free
  6146   002974                     
  6147                           ;dc_motor.c: 200:         setMotorPWM(mR);
  6148   002974  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  6149   002978  EC68  F011         	call	_setMotorPWM	;wreg free
  6150   00297C                     
  6151                           ;dc_motor.c: 203:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  6152   00297C  0EA7               	movlw	167
  6153   00297E  6E15               	movwf	??_fullSpeedAhead^0,c
  6154   002980  0E3A               	movlw	58
  6155   002982                     u3467:
  6156   002982  2EE8               	decfsz	wreg,f,c
  6157   002984  D7FE               	bra	u3467
  6158   002986  2E15               	decfsz	??_fullSpeedAhead^0,f,c
  6159   002988  D7FC               	bra	u3467
  6160   00298A  D000               	nop2	
  6161   00298C                     l3745:
  6162                           
  6163                           ;dc_motor.c: 190:     while ((mL->power < leftGear) || (mR->power < rightGear)){
  6164   00298C  5013               	movf	fullSpeedAhead@mL^0,w,c
  6165   00298E  6ED9               	movwf	fsr2l,c
  6166   002990  6ADA               	clrf	fsr2h,c
  6167   002992  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  6168   002994  5CDE               	subwf	postinc2,w,c
  6169   002996  A0D8               	btfss	status,0,c
  6170   002998  EFD0  F014         	goto	u3101
  6171   00299C  EFD2  F014         	goto	u3100
  6172   0029A0                     u3101:
  6173   0029A0  EF96  F014         	goto	l3733
  6174   0029A4                     u3100:
  6175   0029A4  5014               	movf	fullSpeedAhead@mR^0,w,c
  6176   0029A6  6ED9               	movwf	fsr2l,c
  6177   0029A8  6ADA               	clrf	fsr2h,c
  6178   0029AA  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  6179   0029AC  5CDE               	subwf	postinc2,w,c
  6180   0029AE  A0D8               	btfss	status,0,c
  6181   0029B0  EFDC  F014         	goto	u3111
  6182   0029B4  EFDE  F014         	goto	u3110
  6183   0029B8                     u3111:
  6184   0029B8  EF96  F014         	goto	l3733
  6185   0029BC                     u3110:
  6186   0029BC  0012               	return		;funcret
  6187   0029BE                     __end_of_fullSpeedAhead:
  6188                           	callstack 0
  6189                           
  6190 ;; *************** function _setMotorPWM *****************
  6191 ;; Defined at:
  6192 ;;		line 69 in file "dc_motor.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;  m               1   13[COMRAM] PTR struct DC_motor
  6195 ;;		 -> main@motorR(9), main@motorL(9), 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  negDuty         1   17[COMRAM] unsigned char 
  6198 ;;  posDuty         1   16[COMRAM] unsigned char 
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  1    wreg      void 
  6201 ;; Registers used:
  6202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6208 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6210 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6211 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6212 ;;Total ram usage:        5 bytes
  6213 ;; Hardware stack levels used: 1
  6214 ;; Hardware stack levels required when called: 2
  6215 ;; This function calls:
  6216 ;;		___lwdiv
  6217 ;;		___wmul
  6218 ;; This function is called by:
  6219 ;;		_stop
  6220 ;;		_turnLeft
  6221 ;;		_turnRight
  6222 ;;		_fullSpeedAhead
  6223 ;;		_fullSpeedReverse
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text41
  6228   0022D0                     __ptext41:
  6229                           	callstack 0
  6230   0022D0                     _setMotorPWM:
  6231                           	callstack 26
  6232   0022D0                     
  6233                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6234   0022D0  500E               	movf	setMotorPWM@m^0,w,c
  6235   0022D2  6ED9               	movwf	fsr2l,c
  6236   0022D4  6ADA               	clrf	fsr2h,c
  6237   0022D6  0E02               	movlw	2
  6238   0022D8  26D9               	addwf	fsr2l,f,c
  6239   0022DA  50DF               	movf	indf2,w,c
  6240   0022DC  B4D8               	btfsc	status,2,c
  6241   0022DE  EF73  F011         	goto	u1741
  6242   0022E2  EF75  F011         	goto	u1740
  6243   0022E6                     u1741:
  6244   0022E6  EFA5  F011         	goto	l2853
  6245   0022EA                     u1740:
  6246   0022EA                     
  6247                           ;dc_motor.c: 74:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  6248   0022EA  500E               	movf	setMotorPWM@m^0,w,c
  6249   0022EC  6ED9               	movwf	fsr2l,c
  6250   0022EE  6ADA               	clrf	fsr2h,c
  6251   0022F0  50DF               	movf	indf2,w,c
  6252   0022F2  6E0F               	movwf	??_setMotorPWM^0,c
  6253   0022F4  500F               	movf	??_setMotorPWM^0,w,c
  6254   0022F6  6E01               	movwf	___wmul@multiplier^0,c
  6255   0022F8  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6256   0022FA  500E               	movf	setMotorPWM@m^0,w,c
  6257   0022FC  6ED9               	movwf	fsr2l,c
  6258   0022FE  6ADA               	clrf	fsr2h,c
  6259   002300  0E03               	movlw	3
  6260   002302  26D9               	addwf	fsr2l,f,c
  6261   002304  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6262   002308  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6263   00230C  EC4E  F01C         	call	___wmul	;wreg free
  6264   002310  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6265   002314  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6266   002318  0E00               	movlw	0
  6267   00231A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6268   00231C  0E64               	movlw	100
  6269   00231E  6E09               	movwf	___lwdiv@divisor^0,c
  6270   002320  EC20  F018         	call	___lwdiv	;wreg free
  6271   002324  500E               	movf	setMotorPWM@m^0,w,c
  6272   002326  6ED9               	movwf	fsr2l,c
  6273   002328  6ADA               	clrf	fsr2h,c
  6274   00232A  0E03               	movlw	3
  6275   00232C  26D9               	addwf	fsr2l,f,c
  6276   00232E  50DF               	movf	indf2,w,c
  6277   002330  6E10               	movwf	(??_setMotorPWM+1)^0,c
  6278   002332  5007               	movf	?___lwdiv^0,w,c
  6279   002334  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  6280   002336  6E11               	movwf	setMotorPWM@posDuty^0,c
  6281   002338                     
  6282                           ;dc_motor.c: 75:         negDuty=(unsigned char)(m->PWMperiod);
  6283   002338  500E               	movf	setMotorPWM@m^0,w,c
  6284   00233A  6ED9               	movwf	fsr2l,c
  6285   00233C  6ADA               	clrf	fsr2h,c
  6286   00233E  0E03               	movlw	3
  6287   002340  26D9               	addwf	fsr2l,f,c
  6288   002342  50DF               	movf	indf2,w,c
  6289   002344  6E12               	movwf	setMotorPWM@negDuty^0,c
  6290                           
  6291                           ;dc_motor.c: 76:     }
  6292   002346  EFC6  F011         	goto	l2857
  6293   00234A                     l2853:
  6294                           
  6295                           ;dc_motor.c: 78:         posDuty=0;
  6296   00234A  0E00               	movlw	0
  6297   00234C  6E11               	movwf	setMotorPWM@posDuty^0,c
  6298   00234E                     
  6299                           ;dc_motor.c: 79:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  6300   00234E  500E               	movf	setMotorPWM@m^0,w,c
  6301   002350  6ED9               	movwf	fsr2l,c
  6302   002352  6ADA               	clrf	fsr2h,c
  6303   002354  50DF               	movf	indf2,w,c
  6304   002356  6E0F               	movwf	??_setMotorPWM^0,c
  6305   002358  500F               	movf	??_setMotorPWM^0,w,c
  6306   00235A  6E01               	movwf	___wmul@multiplier^0,c
  6307   00235C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6308   00235E  500E               	movf	setMotorPWM@m^0,w,c
  6309   002360  6ED9               	movwf	fsr2l,c
  6310   002362  6ADA               	clrf	fsr2h,c
  6311   002364  0E03               	movlw	3
  6312   002366  26D9               	addwf	fsr2l,f,c
  6313   002368  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6314   00236C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6315   002370  EC4E  F01C         	call	___wmul	;wreg free
  6316   002374  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6317   002378  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6318   00237C  0E00               	movlw	0
  6319   00237E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6320   002380  0E64               	movlw	100
  6321   002382  6E09               	movwf	___lwdiv@divisor^0,c
  6322   002384  EC20  F018         	call	___lwdiv	;wreg free
  6323   002388  5007               	movf	?___lwdiv^0,w,c
  6324   00238A  6E12               	movwf	setMotorPWM@negDuty^0,c
  6325   00238C                     l2857:
  6326                           
  6327                           ;dc_motor.c: 82:     if (m->direction) {
  6328   00238C  500E               	movf	setMotorPWM@m^0,w,c
  6329   00238E  6ED9               	movwf	fsr2l,c
  6330   002390  6ADA               	clrf	fsr2h,c
  6331   002392  0E01               	movlw	1
  6332   002394  26D9               	addwf	fsr2l,f,c
  6333   002396  50DF               	movf	indf2,w,c
  6334   002398  B4D8               	btfsc	status,2,c
  6335   00239A  EFD1  F011         	goto	u1751
  6336   00239E  EFD3  F011         	goto	u1750
  6337   0023A2                     u1751:
  6338   0023A2  EFF3  F011         	goto	l2861
  6339   0023A6                     u1750:
  6340   0023A6                     
  6341                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6342   0023A6  500E               	movf	setMotorPWM@m^0,w,c
  6343   0023A8  6ED9               	movwf	fsr2l,c
  6344   0023AA  6ADA               	clrf	fsr2h,c
  6345   0023AC  0E05               	movlw	5
  6346   0023AE  26D9               	addwf	fsr2l,f,c
  6347   0023B0  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6348   0023B4  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6349   0023B8  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6350   0023BC  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6351   0023C0  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6352                           
  6353                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6354   0023C4  500E               	movf	setMotorPWM@m^0,w,c
  6355   0023C6  6ED9               	movwf	fsr2l,c
  6356   0023C8  6ADA               	clrf	fsr2h,c
  6357   0023CA  0E07               	movlw	7
  6358   0023CC  26D9               	addwf	fsr2l,f,c
  6359   0023CE  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6360   0023D2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6361   0023D6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6362   0023DA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6363   0023DE  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6364                           
  6365                           ;dc_motor.c: 85:     } else {
  6366   0023E2  EF11  F012         	goto	l232
  6367   0023E6                     l2861:
  6368                           
  6369                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6370   0023E6  500E               	movf	setMotorPWM@m^0,w,c
  6371   0023E8  6ED9               	movwf	fsr2l,c
  6372   0023EA  6ADA               	clrf	fsr2h,c
  6373   0023EC  0E05               	movlw	5
  6374   0023EE  26D9               	addwf	fsr2l,f,c
  6375   0023F0  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6376   0023F4  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6377   0023F8  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6378   0023FC  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6379   002400  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  6380                           
  6381                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6382   002404  500E               	movf	setMotorPWM@m^0,w,c
  6383   002406  6ED9               	movwf	fsr2l,c
  6384   002408  6ADA               	clrf	fsr2h,c
  6385   00240A  0E07               	movlw	7
  6386   00240C  26D9               	addwf	fsr2l,f,c
  6387   00240E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  6388   002412  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  6389   002416  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  6390   00241A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6391   00241E  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  6392   002422                     l232:
  6393   002422  0012               	return		;funcret
  6394   002424                     __end_of_setMotorPWM:
  6395                           	callstack 0
  6396                           
  6397 ;; *************** function ___wmul *****************
  6398 ;; Defined at:
  6399 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;  multiplier      2    0[COMRAM] unsigned int 
  6402 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;  product         2    4[COMRAM] unsigned int 
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  2    0[COMRAM] unsigned int 
  6407 ;; Registers used:
  6408 ;;		wreg, status,2, status,0, prodl, prodh
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/0
  6411 ;;		On exit  : 0/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6414 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6415 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6417 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6418 ;;Total ram usage:        6 bytes
  6419 ;; Hardware stack levels used: 1
  6420 ;; Hardware stack levels required when called: 1
  6421 ;; This function calls:
  6422 ;;		Nothing
  6423 ;; This function is called by:
  6424 ;;		_setMotorPWM
  6425 ;; This function uses a non-reentrant model
  6426 ;;
  6427                           
  6428                           	psect	text42
  6429   00389C                     __ptext42:
  6430                           	callstack 0
  6431   00389C                     ___wmul:
  6432                           	callstack 26
  6433   00389C  5001               	movf	___wmul@multiplier^0,w,c
  6434   00389E  0203               	mulwf	___wmul@multiplicand^0,c
  6435   0038A0  CFF3 F005          	movff	prodl,___wmul@product
  6436   0038A4  CFF4 F006          	movff	prodh,___wmul@product+1
  6437   0038A8  5001               	movf	___wmul@multiplier^0,w,c
  6438   0038AA  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  6439   0038AC  50F3               	movf	243,w,c
  6440   0038AE  2606               	addwf	(___wmul@product+1)^0,f,c
  6441   0038B0  5002               	movf	(___wmul@multiplier+1)^0,w,c
  6442   0038B2  0203               	mulwf	___wmul@multiplicand^0,c
  6443   0038B4  50F3               	movf	243,w,c
  6444   0038B6  2606               	addwf	(___wmul@product+1)^0,f,c
  6445   0038B8  C005  F001         	movff	___wmul@product,?___wmul
  6446   0038BC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6447   0038C0  0012               	return		;funcret
  6448   0038C2                     __end_of___wmul:
  6449                           	callstack 0
  6450                           
  6451 ;; *************** function ___lwdiv *****************
  6452 ;; Defined at:
  6453 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  dividend        2    6[COMRAM] unsigned int 
  6456 ;;  divisor         2    8[COMRAM] unsigned int 
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;  quotient        2   10[COMRAM] unsigned int 
  6459 ;;  counter         1   12[COMRAM] unsigned char 
  6460 ;; Return value:  Size  Location     Type
  6461 ;;                  2    6[COMRAM] unsigned int 
  6462 ;; Registers used:
  6463 ;;		wreg, status,2, status,0
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6470 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6472 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6473 ;;Total ram usage:        7 bytes
  6474 ;; Hardware stack levels used: 1
  6475 ;; Hardware stack levels required when called: 1
  6476 ;; This function calls:
  6477 ;;		Nothing
  6478 ;; This function is called by:
  6479 ;;		_setMotorPWM
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           	psect	text43
  6484   003040                     __ptext43:
  6485                           	callstack 0
  6486   003040                     ___lwdiv:
  6487                           	callstack 26
  6488   003040  0E00               	movlw	0
  6489   003042  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6490   003044  0E00               	movlw	0
  6491   003046  6E0B               	movwf	___lwdiv@quotient^0,c
  6492   003048  5009               	movf	___lwdiv@divisor^0,w,c
  6493   00304A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6494   00304C  B4D8               	btfsc	status,2,c
  6495   00304E  EF2B  F018         	goto	u1711
  6496   003052  EF2D  F018         	goto	u1710
  6497   003056                     u1711:
  6498   003056  EF55  F018         	goto	l1240
  6499   00305A                     u1710:
  6500   00305A  0E01               	movlw	1
  6501   00305C  6E0D               	movwf	___lwdiv@counter^0,c
  6502   00305E  EF35  F018         	goto	l2833
  6503   003062                     l2831:
  6504   003062  90D8               	bcf	status,0,c
  6505   003064  3609               	rlcf	___lwdiv@divisor^0,f,c
  6506   003066  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6507   003068  2A0D               	incf	___lwdiv@counter^0,f,c
  6508   00306A                     l2833:
  6509   00306A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6510   00306C  EF3A  F018         	goto	u1721
  6511   003070  EF3C  F018         	goto	u1720
  6512   003074                     u1721:
  6513   003074  EF31  F018         	goto	l2831
  6514   003078                     u1720:
  6515   003078                     l2835:
  6516   003078  90D8               	bcf	status,0,c
  6517   00307A  360B               	rlcf	___lwdiv@quotient^0,f,c
  6518   00307C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6519   00307E  5009               	movf	___lwdiv@divisor^0,w,c
  6520   003080  5C07               	subwf	___lwdiv@dividend^0,w,c
  6521   003082  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6522   003084  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6523   003086  A0D8               	btfss	status,0,c
  6524   003088  EF48  F018         	goto	u1731
  6525   00308C  EF4A  F018         	goto	u1730
  6526   003090                     u1731:
  6527   003090  EF4F  F018         	goto	l2843
  6528   003094                     u1730:
  6529   003094  5009               	movf	___lwdiv@divisor^0,w,c
  6530   003096  5E07               	subwf	___lwdiv@dividend^0,f,c
  6531   003098  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6532   00309A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6533   00309C  800B               	bsf	___lwdiv@quotient^0,0,c
  6534   00309E                     l2843:
  6535   00309E  90D8               	bcf	status,0,c
  6536   0030A0  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6537   0030A2  3209               	rrcf	___lwdiv@divisor^0,f,c
  6538   0030A4  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6539   0030A6  EF3C  F018         	goto	l2835
  6540   0030AA                     l1240:
  6541   0030AA  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6542   0030AE  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6543   0030B2  0012               	return		;funcret
  6544   0030B4                     __end_of___lwdiv:
  6545                           	callstack 0
  6546                           
  6547 ;; *************** function _convert_HSV *****************
  6548 ;; Defined at:
  6549 ;;		line 211 in file "color.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  6552 ;;		 -> main@HSV_colour(6), 
  6553 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  6554 ;;		 -> main@RGBC_colour(8), 
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;  temp            4   51[COMRAM] unsigned long 
  6557 ;;  temp            4   47[COMRAM] unsigned long 
  6558 ;;  temp            4   43[COMRAM] unsigned long 
  6559 ;;  temp            4   39[COMRAM] unsigned long 
  6560 ;;  temp            4   55[COMRAM] unsigned long 
  6561 ;;  temp            4   35[COMRAM] unsigned long 
  6562 ;;  temp            4   31[COMRAM] unsigned long 
  6563 ;;  C               2   63[COMRAM] unsigned int 
  6564 ;;  M               2   61[COMRAM] unsigned int 
  6565 ;;  hue_scale       2   59[COMRAM] unsigned int 
  6566 ;;  hue             2   29[COMRAM] unsigned int 
  6567 ;;  sat             2   27[COMRAM] unsigned int 
  6568 ;;  m               2   25[COMRAM] unsigned int 
  6569 ;;  sat_scale       2   23[COMRAM] unsigned int 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  1    wreg      void 
  6572 ;; Registers used:
  6573 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6579 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6580 ;;      Locals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6581 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6582 ;;      Totals:        52       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6583 ;;Total ram usage:       52 bytes
  6584 ;; Hardware stack levels used: 1
  6585 ;; Hardware stack levels required when called: 2
  6586 ;; This function calls:
  6587 ;;		___lldiv
  6588 ;;		___lmul
  6589 ;;		_max_RGB
  6590 ;;		_min_RGB
  6591 ;; This function is called by:
  6592 ;;		_forward_navigation
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           	psect	text44
  6597   000E1A                     __ptext44:
  6598                           	callstack 0
  6599   000E1A                     _convert_HSV:
  6600                           	callstack 27
  6601   000E1A                     
  6602                           ;color.c: 211: void convert_HSV(struct HSV_val *p1, struct RGBC_val *p2);color.c: 212: {
      +                          ;color.c: 213:     unsigned int hue = 0;
  6603   000E1A  0E00               	movlw	0
  6604   000E1C  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  6605   000E1E  0E00               	movlw	0
  6606   000E20  6E1E               	movwf	convert_HSV@hue^0,c
  6607                           
  6608                           ;color.c: 215:     unsigned int hue_scale = 60;
  6609   000E22  0E00               	movlw	0
  6610   000E24  6E3D               	movwf	(convert_HSV@hue_scale+1)^0,c
  6611   000E26  0E3C               	movlw	60
  6612   000E28  6E3C               	movwf	convert_HSV@hue_scale^0,c
  6613                           
  6614                           ;color.c: 216:     unsigned int sat_scale = 100;
  6615   000E2A  0E00               	movlw	0
  6616   000E2C  6E19               	movwf	(convert_HSV@sat_scale+1)^0,c
  6617   000E2E  0E64               	movlw	100
  6618   000E30  6E18               	movwf	convert_HSV@sat_scale^0,c
  6619   000E32                     
  6620                           ;color.c: 218:     unsigned int M = max_RGB(p2);
  6621   000E32  C00F  F001         	movff	convert_HSV@p2,max_RGB@p
  6622   000E36  ECE2  F017         	call	_max_RGB	;wreg free
  6623   000E3A  C001  F03E         	movff	?_max_RGB,convert_HSV@M
  6624   000E3E  C002  F03F         	movff	?_max_RGB+1,convert_HSV@M+1
  6625   000E42                     
  6626                           ;color.c: 219:     unsigned int m = min_RGB(p2);
  6627   000E42  C00F  F001         	movff	convert_HSV@p2,min_RGB@p
  6628   000E46  ECA4  F017         	call	_min_RGB	;wreg free
  6629   000E4A  C001  F01A         	movff	?_min_RGB,convert_HSV@m
  6630   000E4E  C002  F01B         	movff	?_min_RGB+1,convert_HSV@m+1
  6631   000E52                     
  6632                           ;color.c: 220:     unsigned int C = M - m;
  6633   000E52  501A               	movf	convert_HSV@m^0,w,c
  6634   000E54  5C3E               	subwf	convert_HSV@M^0,w,c
  6635   000E56  6E40               	movwf	convert_HSV@C^0,c
  6636   000E58  501B               	movf	(convert_HSV@m+1)^0,w,c
  6637   000E5A  583F               	subwfb	(convert_HSV@M+1)^0,w,c
  6638   000E5C  6E41               	movwf	(convert_HSV@C+1)^0,c
  6639   000E5E                     
  6640                           ;color.c: 222:     if (C == 0) {
  6641   000E5E  5040               	movf	convert_HSV@C^0,w,c
  6642   000E60  1041               	iorwf	(convert_HSV@C+1)^0,w,c
  6643   000E62  A4D8               	btfss	status,2,c
  6644   000E64  EF36  F007         	goto	u2641
  6645   000E68  EF38  F007         	goto	u2640
  6646   000E6C                     u2641:
  6647   000E6C  EF3E  F007         	goto	l3535
  6648   000E70                     u2640:
  6649   000E70                     
  6650                           ;color.c: 223:         hue = 0;
  6651   000E70  0E00               	movlw	0
  6652   000E72  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  6653   000E74  0E00               	movlw	0
  6654   000E76  6E1E               	movwf	convert_HSV@hue^0,c
  6655                           
  6656                           ;color.c: 224:     } else {
  6657   000E78  EF0E  F00A         	goto	l3619
  6658   000E7C                     l3535:
  6659                           
  6660                           ;color.c: 234:         if (M == p2->R) {
  6661   000E7C  500F               	movf	convert_HSV@p2^0,w,c
  6662   000E7E  6ED9               	movwf	fsr2l,c
  6663   000E80  6ADA               	clrf	fsr2h,c
  6664   000E82  503E               	movf	convert_HSV@M^0,w,c
  6665   000E84  18DE               	xorwf	postinc2,w,c
  6666   000E86  E107               	bnz	u2651
  6667   000E88  503F               	movf	(convert_HSV@M+1)^0,w,c
  6668   000E8A  18DE               	xorwf	postinc2,w,c
  6669   000E8C  A4D8               	btfss	status,2,c
  6670   000E8E  EF4B  F007         	goto	u2651
  6671   000E92  EF4D  F007         	goto	u2650
  6672   000E96                     u2651:
  6673   000E96  EF3A  F008         	goto	l3563
  6674   000E9A                     u2650:
  6675   000E9A                     
  6676                           ;color.c: 235:             if (p2->G >= p2->B) {
  6677   000E9A  500F               	movf	convert_HSV@p2^0,w,c
  6678   000E9C  6ED9               	movwf	fsr2l,c
  6679   000E9E  6ADA               	clrf	fsr2h,c
  6680   000EA0  0E04               	movlw	4
  6681   000EA2  26D9               	addwf	fsr2l,f,c
  6682   000EA4  500F               	movf	convert_HSV@p2^0,w,c
  6683   000EA6  6EE1               	movwf	fsr1l,c
  6684   000EA8  6AE2               	clrf	fsr1h,c
  6685   000EAA  0E02               	movlw	2
  6686   000EAC  26E1               	addwf	fsr1l,f,c
  6687   000EAE  50DE               	movf	postinc2,w,c
  6688   000EB0  5CE6               	subwf	postinc1,w,c
  6689   000EB2  50DE               	movf	postinc2,w,c
  6690   000EB4  58E6               	subwfb	postinc1,w,c
  6691   000EB6  A0D8               	btfss	status,0,c
  6692   000EB8  EF60  F007         	goto	u2661
  6693   000EBC  EF62  F007         	goto	u2660
  6694   000EC0                     u2661:
  6695   000EC0  EFC2  F007         	goto	l3551
  6696   000EC4                     u2660:
  6697   000EC4                     
  6698                           ;color.c: 239:                 temp *= 0;
  6699   000EC4  0E00               	movlw	0
  6700   000EC6  6E24               	movwf	convert_HSV@temp^0,c
  6701   000EC8  0E00               	movlw	0
  6702   000ECA  6E25               	movwf	(convert_HSV@temp+1)^0,c
  6703   000ECC  0E00               	movlw	0
  6704   000ECE  6E26               	movwf	(convert_HSV@temp+2)^0,c
  6705   000ED0  0E00               	movlw	0
  6706   000ED2  6E27               	movwf	(convert_HSV@temp+3)^0,c
  6707   000ED4                     
  6708                           ;color.c: 240:                 temp += (unsigned long)(p2->G - p2->B);
  6709   000ED4  500F               	movf	convert_HSV@p2^0,w,c
  6710   000ED6  6ED9               	movwf	fsr2l,c
  6711   000ED8  6ADA               	clrf	fsr2h,c
  6712   000EDA  0E04               	movlw	4
  6713   000EDC  26D9               	addwf	fsr2l,f,c
  6714   000EDE  CFDE F010          	movff	postinc2,??_convert_HSV
  6715   000EE2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6716   000EE6  500F               	movf	convert_HSV@p2^0,w,c
  6717   000EE8  6ED9               	movwf	fsr2l,c
  6718   000EEA  6ADA               	clrf	fsr2h,c
  6719   000EEC  0E02               	movlw	2
  6720   000EEE  26D9               	addwf	fsr2l,f,c
  6721   000EF0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6722   000EF4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6723   000EF8  5010               	movf	??_convert_HSV^0,w,c
  6724   000EFA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6725   000EFC  6E14               	movwf	(??_convert_HSV+4)^0,c
  6726   000EFE  5011               	movf	(??_convert_HSV+1)^0,w,c
  6727   000F00  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6728   000F02  6E15               	movwf	(??_convert_HSV+5)^0,c
  6729   000F04  5014               	movf	(??_convert_HSV+4)^0,w,c
  6730   000F06  2624               	addwf	convert_HSV@temp^0,f,c
  6731   000F08  5015               	movf	(??_convert_HSV+5)^0,w,c
  6732   000F0A  2225               	addwfc	(convert_HSV@temp+1)^0,f,c
  6733   000F0C  0E00               	movlw	0
  6734   000F0E  2226               	addwfc	(convert_HSV@temp+2)^0,f,c
  6735   000F10  0E00               	movlw	0
  6736   000F12  2227               	addwfc	(convert_HSV@temp+3)^0,f,c
  6737   000F14                     
  6738                           ;color.c: 241:                 temp *= (unsigned long)hue_scale;
  6739   000F14  C024  F001         	movff	convert_HSV@temp,___lmul@multiplier
  6740   000F18  C025  F002         	movff	convert_HSV@temp+1,___lmul@multiplier+1
  6741   000F1C  C026  F003         	movff	convert_HSV@temp+2,___lmul@multiplier+2
  6742   000F20  C027  F004         	movff	convert_HSV@temp+3,___lmul@multiplier+3
  6743   000F24  0E3C               	movlw	60
  6744   000F26  6E05               	movwf	___lmul@multiplicand^0,c
  6745   000F28  0E00               	movlw	0
  6746   000F2A  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6747   000F2C  0E00               	movlw	0
  6748   000F2E  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6749   000F30  0E00               	movlw	0
  6750   000F32  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6751   000F34  EC5A  F018         	call	___lmul	;wreg free
  6752   000F38  C001  F024         	movff	?___lmul,convert_HSV@temp
  6753   000F3C  C002  F025         	movff	?___lmul+1,convert_HSV@temp+1
  6754   000F40  C003  F026         	movff	?___lmul+2,convert_HSV@temp+2
  6755   000F44  C004  F027         	movff	?___lmul+3,convert_HSV@temp+3
  6756   000F48                     
  6757                           ;color.c: 242:                 temp /= (unsigned long)C;
  6758   000F48  C024  F001         	movff	convert_HSV@temp,___lldiv@dividend
  6759   000F4C  C025  F002         	movff	convert_HSV@temp+1,___lldiv@dividend+1
  6760   000F50  C026  F003         	movff	convert_HSV@temp+2,___lldiv@dividend+2
  6761   000F54  C027  F004         	movff	convert_HSV@temp+3,___lldiv@dividend+3
  6762   000F58  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6763   000F5C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6764   000F60  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6765   000F62  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6766   000F64  ECF2  F015         	call	___lldiv	;wreg free
  6767   000F68  C001  F024         	movff	?___lldiv,convert_HSV@temp
  6768   000F6C  C002  F025         	movff	?___lldiv+1,convert_HSV@temp+1
  6769   000F70  C003  F026         	movff	?___lldiv+2,convert_HSV@temp+2
  6770   000F74  C004  F027         	movff	?___lldiv+3,convert_HSV@temp+3
  6771   000F78                     
  6772                           ;color.c: 243:                 hue = (unsigned int)temp;
  6773   000F78  C024  F01E         	movff	convert_HSV@temp,convert_HSV@hue
  6774   000F7C  C025  F01F         	movff	convert_HSV@temp+1,convert_HSV@hue+1
  6775                           
  6776                           ;color.c: 244:             } else {
  6777   000F80  EF3A  F008         	goto	l3563
  6778   000F84                     l3551:
  6779                           
  6780                           ;color.c: 246:                 unsigned long temp;;color.c: 247:                 temp = 
      +                          (unsigned long)C;
  6781   000F84  C040  F038         	movff	convert_HSV@C,convert_HSV@temp_610
  6782   000F88  C041  F039         	movff	convert_HSV@C+1,convert_HSV@temp_610+1
  6783   000F8C  6A3A               	clrf	(convert_HSV@temp_610+2)^0,c
  6784   000F8E  6A3B               	clrf	(convert_HSV@temp_610+3)^0,c
  6785   000F90                     
  6786                           ;color.c: 248:                 temp *= 6;
  6787   000F90  C038  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  6788   000F94  C039  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  6789   000F98  C03A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  6790   000F9C  C03B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  6791   000FA0  0E06               	movlw	6
  6792   000FA2  6E05               	movwf	___lmul@multiplicand^0,c
  6793   000FA4  0E00               	movlw	0
  6794   000FA6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6795   000FA8  0E00               	movlw	0
  6796   000FAA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6797   000FAC  0E00               	movlw	0
  6798   000FAE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6799   000FB0  EC5A  F018         	call	___lmul	;wreg free
  6800   000FB4  C001  F038         	movff	?___lmul,convert_HSV@temp_610
  6801   000FB8  C002  F039         	movff	?___lmul+1,convert_HSV@temp_610+1
  6802   000FBC  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_610+2
  6803   000FC0  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_610+3
  6804   000FC4                     
  6805                           ;color.c: 249:                 temp -= (unsigned long)(p2->B - p2->G);
  6806   000FC4  500F               	movf	convert_HSV@p2^0,w,c
  6807   000FC6  6ED9               	movwf	fsr2l,c
  6808   000FC8  6ADA               	clrf	fsr2h,c
  6809   000FCA  0E02               	movlw	2
  6810   000FCC  26D9               	addwf	fsr2l,f,c
  6811   000FCE  CFDE F010          	movff	postinc2,??_convert_HSV
  6812   000FD2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6813   000FD6  500F               	movf	convert_HSV@p2^0,w,c
  6814   000FD8  6ED9               	movwf	fsr2l,c
  6815   000FDA  6ADA               	clrf	fsr2h,c
  6816   000FDC  0E04               	movlw	4
  6817   000FDE  26D9               	addwf	fsr2l,f,c
  6818   000FE0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6819   000FE4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6820   000FE8  5010               	movf	??_convert_HSV^0,w,c
  6821   000FEA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6822   000FEC  6E14               	movwf	(??_convert_HSV+4)^0,c
  6823   000FEE  5011               	movf	(??_convert_HSV+1)^0,w,c
  6824   000FF0  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6825   000FF2  6E15               	movwf	(??_convert_HSV+5)^0,c
  6826   000FF4  6A16               	clrf	(??_convert_HSV+6)^0,c
  6827   000FF6  6A17               	clrf	(??_convert_HSV+7)^0,c
  6828   000FF8  5014               	movf	(??_convert_HSV+4)^0,w,c
  6829   000FFA  5E38               	subwf	convert_HSV@temp_610^0,f,c
  6830   000FFC  5015               	movf	(??_convert_HSV+5)^0,w,c
  6831   000FFE  5A39               	subwfb	(convert_HSV@temp_610+1)^0,f,c
  6832   001000  5016               	movf	(??_convert_HSV+6)^0,w,c
  6833   001002  5A3A               	subwfb	(convert_HSV@temp_610+2)^0,f,c
  6834   001004  5017               	movf	(??_convert_HSV+7)^0,w,c
  6835   001006  5A3B               	subwfb	(convert_HSV@temp_610+3)^0,f,c
  6836   001008                     
  6837                           ;color.c: 250:                 temp *= (unsigned long)hue_scale;
  6838   001008  C038  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  6839   00100C  C039  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  6840   001010  C03A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  6841   001014  C03B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  6842   001018  0E3C               	movlw	60
  6843   00101A  6E05               	movwf	___lmul@multiplicand^0,c
  6844   00101C  0E00               	movlw	0
  6845   00101E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6846   001020  0E00               	movlw	0
  6847   001022  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6848   001024  0E00               	movlw	0
  6849   001026  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6850   001028  EC5A  F018         	call	___lmul	;wreg free
  6851   00102C  C001  F038         	movff	?___lmul,convert_HSV@temp_610
  6852   001030  C002  F039         	movff	?___lmul+1,convert_HSV@temp_610+1
  6853   001034  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_610+2
  6854   001038  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_610+3
  6855   00103C                     
  6856                           ;color.c: 251:                 temp /= (unsigned long)C;
  6857   00103C  C038  F001         	movff	convert_HSV@temp_610,___lldiv@dividend
  6858   001040  C039  F002         	movff	convert_HSV@temp_610+1,___lldiv@dividend+1
  6859   001044  C03A  F003         	movff	convert_HSV@temp_610+2,___lldiv@dividend+2
  6860   001048  C03B  F004         	movff	convert_HSV@temp_610+3,___lldiv@dividend+3
  6861   00104C  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6862   001050  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6863   001054  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6864   001056  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6865   001058  ECF2  F015         	call	___lldiv	;wreg free
  6866   00105C  C001  F038         	movff	?___lldiv,convert_HSV@temp_610
  6867   001060  C002  F039         	movff	?___lldiv+1,convert_HSV@temp_610+1
  6868   001064  C003  F03A         	movff	?___lldiv+2,convert_HSV@temp_610+2
  6869   001068  C004  F03B         	movff	?___lldiv+3,convert_HSV@temp_610+3
  6870   00106C                     
  6871                           ;color.c: 252:                 hue = (unsigned int)temp;
  6872   00106C  C038  F01E         	movff	convert_HSV@temp_610,convert_HSV@hue
  6873   001070  C039  F01F         	movff	convert_HSV@temp_610+1,convert_HSV@hue+1
  6874   001074                     l3563:
  6875                           
  6876                           ;color.c: 255:         if (M == p2->G) {
  6877   001074  500F               	movf	convert_HSV@p2^0,w,c
  6878   001076  6ED9               	movwf	fsr2l,c
  6879   001078  6ADA               	clrf	fsr2h,c
  6880   00107A  0E02               	movlw	2
  6881   00107C  26D9               	addwf	fsr2l,f,c
  6882   00107E  503E               	movf	convert_HSV@M^0,w,c
  6883   001080  18DE               	xorwf	postinc2,w,c
  6884   001082  E107               	bnz	u2671
  6885   001084  503F               	movf	(convert_HSV@M+1)^0,w,c
  6886   001086  18DE               	xorwf	postinc2,w,c
  6887   001088  A4D8               	btfss	status,2,c
  6888   00108A  EF49  F008         	goto	u2671
  6889   00108E  EF4B  F008         	goto	u2670
  6890   001092                     u2671:
  6891   001092  EF20  F009         	goto	l3591
  6892   001096                     u2670:
  6893   001096                     
  6894                           ;color.c: 256:             if (p2->B >= p2->R) {
  6895   001096  500F               	movf	convert_HSV@p2^0,w,c
  6896   001098  6ED9               	movwf	fsr2l,c
  6897   00109A  6ADA               	clrf	fsr2h,c
  6898   00109C  500F               	movf	convert_HSV@p2^0,w,c
  6899   00109E  6EE1               	movwf	fsr1l,c
  6900   0010A0  6AE2               	clrf	fsr1h,c
  6901   0010A2  0E04               	movlw	4
  6902   0010A4  26E1               	addwf	fsr1l,f,c
  6903   0010A6  50DE               	movf	postinc2,w,c
  6904   0010A8  5CE6               	subwf	postinc1,w,c
  6905   0010AA  50DE               	movf	postinc2,w,c
  6906   0010AC  58E6               	subwfb	postinc1,w,c
  6907   0010AE  A0D8               	btfss	status,0,c
  6908   0010B0  EF5C  F008         	goto	u2681
  6909   0010B4  EF5E  F008         	goto	u2680
  6910   0010B8                     u2681:
  6911   0010B8  EFBF  F008         	goto	l3579
  6912   0010BC                     u2680:
  6913   0010BC                     
  6914                           ;color.c: 258:                 unsigned long temp;;color.c: 259:                 temp = 
      +                          (unsigned long)C;
  6915   0010BC  C040  F028         	movff	convert_HSV@C,convert_HSV@temp_611
  6916   0010C0  C041  F029         	movff	convert_HSV@C+1,convert_HSV@temp_611+1
  6917   0010C4  6A2A               	clrf	(convert_HSV@temp_611+2)^0,c
  6918   0010C6  6A2B               	clrf	(convert_HSV@temp_611+3)^0,c
  6919   0010C8                     
  6920                           ;color.c: 260:                 temp *= 2;
  6921   0010C8  90D8               	bcf	status,0,c
  6922   0010CA  3628               	rlcf	convert_HSV@temp_611^0,f,c
  6923   0010CC  3629               	rlcf	(convert_HSV@temp_611+1)^0,f,c
  6924   0010CE  362A               	rlcf	(convert_HSV@temp_611+2)^0,f,c
  6925   0010D0  362B               	rlcf	(convert_HSV@temp_611+3)^0,f,c
  6926   0010D2                     
  6927                           ;color.c: 261:                 temp += (unsigned long)(p2->B - p2->R);
  6928   0010D2  500F               	movf	convert_HSV@p2^0,w,c
  6929   0010D4  6ED9               	movwf	fsr2l,c
  6930   0010D6  6ADA               	clrf	fsr2h,c
  6931   0010D8  CFDE F010          	movff	postinc2,??_convert_HSV
  6932   0010DC  CFDD F011          	movff	postdec2,??_convert_HSV+1
  6933   0010E0  500F               	movf	convert_HSV@p2^0,w,c
  6934   0010E2  6ED9               	movwf	fsr2l,c
  6935   0010E4  6ADA               	clrf	fsr2h,c
  6936   0010E6  0E04               	movlw	4
  6937   0010E8  26D9               	addwf	fsr2l,f,c
  6938   0010EA  CFDE F012          	movff	postinc2,??_convert_HSV+2
  6939   0010EE  CFDD F013          	movff	postdec2,??_convert_HSV+3
  6940   0010F2  5010               	movf	??_convert_HSV^0,w,c
  6941   0010F4  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  6942   0010F6  6E14               	movwf	(??_convert_HSV+4)^0,c
  6943   0010F8  5011               	movf	(??_convert_HSV+1)^0,w,c
  6944   0010FA  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  6945   0010FC  6E15               	movwf	(??_convert_HSV+5)^0,c
  6946   0010FE  5014               	movf	(??_convert_HSV+4)^0,w,c
  6947   001100  2628               	addwf	convert_HSV@temp_611^0,f,c
  6948   001102  5015               	movf	(??_convert_HSV+5)^0,w,c
  6949   001104  2229               	addwfc	(convert_HSV@temp_611+1)^0,f,c
  6950   001106  0E00               	movlw	0
  6951   001108  222A               	addwfc	(convert_HSV@temp_611+2)^0,f,c
  6952   00110A  0E00               	movlw	0
  6953   00110C  222B               	addwfc	(convert_HSV@temp_611+3)^0,f,c
  6954   00110E                     
  6955                           ;color.c: 262:                 temp *= (unsigned long)hue_scale;
  6956   00110E  C028  F001         	movff	convert_HSV@temp_611,___lmul@multiplier
  6957   001112  C029  F002         	movff	convert_HSV@temp_611+1,___lmul@multiplier+1
  6958   001116  C02A  F003         	movff	convert_HSV@temp_611+2,___lmul@multiplier+2
  6959   00111A  C02B  F004         	movff	convert_HSV@temp_611+3,___lmul@multiplier+3
  6960   00111E  0E3C               	movlw	60
  6961   001120  6E05               	movwf	___lmul@multiplicand^0,c
  6962   001122  0E00               	movlw	0
  6963   001124  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  6964   001126  0E00               	movlw	0
  6965   001128  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  6966   00112A  0E00               	movlw	0
  6967   00112C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  6968   00112E  EC5A  F018         	call	___lmul	;wreg free
  6969   001132  C001  F028         	movff	?___lmul,convert_HSV@temp_611
  6970   001136  C002  F029         	movff	?___lmul+1,convert_HSV@temp_611+1
  6971   00113A  C003  F02A         	movff	?___lmul+2,convert_HSV@temp_611+2
  6972   00113E  C004  F02B         	movff	?___lmul+3,convert_HSV@temp_611+3
  6973   001142                     
  6974                           ;color.c: 263:                 temp /= (unsigned long)C;
  6975   001142  C028  F001         	movff	convert_HSV@temp_611,___lldiv@dividend
  6976   001146  C029  F002         	movff	convert_HSV@temp_611+1,___lldiv@dividend+1
  6977   00114A  C02A  F003         	movff	convert_HSV@temp_611+2,___lldiv@dividend+2
  6978   00114E  C02B  F004         	movff	convert_HSV@temp_611+3,___lldiv@dividend+3
  6979   001152  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  6980   001156  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  6981   00115A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  6982   00115C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  6983   00115E  ECF2  F015         	call	___lldiv	;wreg free
  6984   001162  C001  F028         	movff	?___lldiv,convert_HSV@temp_611
  6985   001166  C002  F029         	movff	?___lldiv+1,convert_HSV@temp_611+1
  6986   00116A  C003  F02A         	movff	?___lldiv+2,convert_HSV@temp_611+2
  6987   00116E  C004  F02B         	movff	?___lldiv+3,convert_HSV@temp_611+3
  6988   001172                     
  6989                           ;color.c: 264:                 hue = (unsigned int)temp;
  6990   001172  C028  F01E         	movff	convert_HSV@temp_611,convert_HSV@hue
  6991   001176  C029  F01F         	movff	convert_HSV@temp_611+1,convert_HSV@hue+1
  6992                           
  6993                           ;color.c: 265:             } else {
  6994   00117A  EF20  F009         	goto	l3591
  6995   00117E                     l3579:
  6996                           
  6997                           ;color.c: 267:                 unsigned long temp;;color.c: 268:                 temp = 
      +                          (unsigned long)C;
  6998   00117E  C040  F02C         	movff	convert_HSV@C,convert_HSV@temp_612
  6999   001182  C041  F02D         	movff	convert_HSV@C+1,convert_HSV@temp_612+1
  7000   001186  6A2E               	clrf	(convert_HSV@temp_612+2)^0,c
  7001   001188  6A2F               	clrf	(convert_HSV@temp_612+3)^0,c
  7002   00118A                     
  7003                           ;color.c: 269:                 temp *= 2;
  7004   00118A  90D8               	bcf	status,0,c
  7005   00118C  362C               	rlcf	convert_HSV@temp_612^0,f,c
  7006   00118E  362D               	rlcf	(convert_HSV@temp_612+1)^0,f,c
  7007   001190  362E               	rlcf	(convert_HSV@temp_612+2)^0,f,c
  7008   001192  362F               	rlcf	(convert_HSV@temp_612+3)^0,f,c
  7009   001194                     
  7010                           ;color.c: 270:                 temp -= (unsigned long)(p2->R - p2->B);
  7011   001194  500F               	movf	convert_HSV@p2^0,w,c
  7012   001196  6ED9               	movwf	fsr2l,c
  7013   001198  6ADA               	clrf	fsr2h,c
  7014   00119A  0E04               	movlw	4
  7015   00119C  26D9               	addwf	fsr2l,f,c
  7016   00119E  CFDE F010          	movff	postinc2,??_convert_HSV
  7017   0011A2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7018   0011A6  500F               	movf	convert_HSV@p2^0,w,c
  7019   0011A8  6ED9               	movwf	fsr2l,c
  7020   0011AA  6ADA               	clrf	fsr2h,c
  7021   0011AC  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7022   0011B0  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7023   0011B4  5010               	movf	??_convert_HSV^0,w,c
  7024   0011B6  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7025   0011B8  6E14               	movwf	(??_convert_HSV+4)^0,c
  7026   0011BA  5011               	movf	(??_convert_HSV+1)^0,w,c
  7027   0011BC  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7028   0011BE  6E15               	movwf	(??_convert_HSV+5)^0,c
  7029   0011C0  6A16               	clrf	(??_convert_HSV+6)^0,c
  7030   0011C2  6A17               	clrf	(??_convert_HSV+7)^0,c
  7031   0011C4  5014               	movf	(??_convert_HSV+4)^0,w,c
  7032   0011C6  5E2C               	subwf	convert_HSV@temp_612^0,f,c
  7033   0011C8  5015               	movf	(??_convert_HSV+5)^0,w,c
  7034   0011CA  5A2D               	subwfb	(convert_HSV@temp_612+1)^0,f,c
  7035   0011CC  5016               	movf	(??_convert_HSV+6)^0,w,c
  7036   0011CE  5A2E               	subwfb	(convert_HSV@temp_612+2)^0,f,c
  7037   0011D0  5017               	movf	(??_convert_HSV+7)^0,w,c
  7038   0011D2  5A2F               	subwfb	(convert_HSV@temp_612+3)^0,f,c
  7039   0011D4                     
  7040                           ;color.c: 271:                 temp *= (unsigned long)hue_scale;
  7041   0011D4  C02C  F001         	movff	convert_HSV@temp_612,___lmul@multiplier
  7042   0011D8  C02D  F002         	movff	convert_HSV@temp_612+1,___lmul@multiplier+1
  7043   0011DC  C02E  F003         	movff	convert_HSV@temp_612+2,___lmul@multiplier+2
  7044   0011E0  C02F  F004         	movff	convert_HSV@temp_612+3,___lmul@multiplier+3
  7045   0011E4  0E3C               	movlw	60
  7046   0011E6  6E05               	movwf	___lmul@multiplicand^0,c
  7047   0011E8  0E00               	movlw	0
  7048   0011EA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7049   0011EC  0E00               	movlw	0
  7050   0011EE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7051   0011F0  0E00               	movlw	0
  7052   0011F2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7053   0011F4  EC5A  F018         	call	___lmul	;wreg free
  7054   0011F8  C001  F02C         	movff	?___lmul,convert_HSV@temp_612
  7055   0011FC  C002  F02D         	movff	?___lmul+1,convert_HSV@temp_612+1
  7056   001200  C003  F02E         	movff	?___lmul+2,convert_HSV@temp_612+2
  7057   001204  C004  F02F         	movff	?___lmul+3,convert_HSV@temp_612+3
  7058   001208                     
  7059                           ;color.c: 272:                 temp /= (unsigned long)C;
  7060   001208  C02C  F001         	movff	convert_HSV@temp_612,___lldiv@dividend
  7061   00120C  C02D  F002         	movff	convert_HSV@temp_612+1,___lldiv@dividend+1
  7062   001210  C02E  F003         	movff	convert_HSV@temp_612+2,___lldiv@dividend+2
  7063   001214  C02F  F004         	movff	convert_HSV@temp_612+3,___lldiv@dividend+3
  7064   001218  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7065   00121C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7066   001220  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7067   001222  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7068   001224  ECF2  F015         	call	___lldiv	;wreg free
  7069   001228  C001  F02C         	movff	?___lldiv,convert_HSV@temp_612
  7070   00122C  C002  F02D         	movff	?___lldiv+1,convert_HSV@temp_612+1
  7071   001230  C003  F02E         	movff	?___lldiv+2,convert_HSV@temp_612+2
  7072   001234  C004  F02F         	movff	?___lldiv+3,convert_HSV@temp_612+3
  7073   001238                     
  7074                           ;color.c: 273:                 hue = (unsigned int)temp;
  7075   001238  C02C  F01E         	movff	convert_HSV@temp_612,convert_HSV@hue
  7076   00123C  C02D  F01F         	movff	convert_HSV@temp_612+1,convert_HSV@hue+1
  7077   001240                     l3591:
  7078                           
  7079                           ;color.c: 276:         if (M == p2->B) {
  7080   001240  500F               	movf	convert_HSV@p2^0,w,c
  7081   001242  6ED9               	movwf	fsr2l,c
  7082   001244  6ADA               	clrf	fsr2h,c
  7083   001246  0E04               	movlw	4
  7084   001248  26D9               	addwf	fsr2l,f,c
  7085   00124A  503E               	movf	convert_HSV@M^0,w,c
  7086   00124C  18DE               	xorwf	postinc2,w,c
  7087   00124E  E107               	bnz	u2691
  7088   001250  503F               	movf	(convert_HSV@M+1)^0,w,c
  7089   001252  18DE               	xorwf	postinc2,w,c
  7090   001254  A4D8               	btfss	status,2,c
  7091   001256  EF2F  F009         	goto	u2691
  7092   00125A  EF31  F009         	goto	u2690
  7093   00125E                     u2691:
  7094   00125E  EF0E  F00A         	goto	l3619
  7095   001262                     u2690:
  7096   001262                     
  7097                           ;color.c: 277:             if (p2->R >= p2->G) {
  7098   001262  500F               	movf	convert_HSV@p2^0,w,c
  7099   001264  6ED9               	movwf	fsr2l,c
  7100   001266  6ADA               	clrf	fsr2h,c
  7101   001268  0E02               	movlw	2
  7102   00126A  26D9               	addwf	fsr2l,f,c
  7103   00126C  500F               	movf	convert_HSV@p2^0,w,c
  7104   00126E  6EE1               	movwf	fsr1l,c
  7105   001270  6AE2               	clrf	fsr1h,c
  7106   001272  50DE               	movf	postinc2,w,c
  7107   001274  5CE6               	subwf	postinc1,w,c
  7108   001276  50DE               	movf	postinc2,w,c
  7109   001278  58E6               	subwfb	postinc1,w,c
  7110   00127A  A0D8               	btfss	status,0,c
  7111   00127C  EF42  F009         	goto	u2701
  7112   001280  EF44  F009         	goto	u2700
  7113   001284                     u2701:
  7114   001284  EFA9  F009         	goto	l3607
  7115   001288                     u2700:
  7116   001288                     
  7117                           ;color.c: 279:                 unsigned long temp;;color.c: 280:                 temp = 
      +                          (unsigned long)C;
  7118   001288  C040  F030         	movff	convert_HSV@C,convert_HSV@temp_613
  7119   00128C  C041  F031         	movff	convert_HSV@C+1,convert_HSV@temp_613+1
  7120   001290  6A32               	clrf	(convert_HSV@temp_613+2)^0,c
  7121   001292  6A33               	clrf	(convert_HSV@temp_613+3)^0,c
  7122   001294                     
  7123                           ;color.c: 281:                 temp *= 4;
  7124   001294  0E02               	movlw	2
  7125   001296                     u2715:
  7126   001296  90D8               	bcf	status,0,c
  7127   001298  3630               	rlcf	convert_HSV@temp_613^0,f,c
  7128   00129A  3631               	rlcf	(convert_HSV@temp_613+1)^0,f,c
  7129   00129C  3632               	rlcf	(convert_HSV@temp_613+2)^0,f,c
  7130   00129E  3633               	rlcf	(convert_HSV@temp_613+3)^0,f,c
  7131   0012A0  2EE8               	decfsz	wreg,f,c
  7132   0012A2  EF4B  F009         	goto	u2715
  7133   0012A6                     
  7134                           ;color.c: 282:                 temp += (unsigned long)(p2->R - p2->G);
  7135   0012A6  500F               	movf	convert_HSV@p2^0,w,c
  7136   0012A8  6ED9               	movwf	fsr2l,c
  7137   0012AA  6ADA               	clrf	fsr2h,c
  7138   0012AC  0E02               	movlw	2
  7139   0012AE  26D9               	addwf	fsr2l,f,c
  7140   0012B0  CFDE F010          	movff	postinc2,??_convert_HSV
  7141   0012B4  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7142   0012B8  500F               	movf	convert_HSV@p2^0,w,c
  7143   0012BA  6ED9               	movwf	fsr2l,c
  7144   0012BC  6ADA               	clrf	fsr2h,c
  7145   0012BE  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7146   0012C2  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7147   0012C6  5010               	movf	??_convert_HSV^0,w,c
  7148   0012C8  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7149   0012CA  6E14               	movwf	(??_convert_HSV+4)^0,c
  7150   0012CC  5011               	movf	(??_convert_HSV+1)^0,w,c
  7151   0012CE  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7152   0012D0  6E15               	movwf	(??_convert_HSV+5)^0,c
  7153   0012D2  5014               	movf	(??_convert_HSV+4)^0,w,c
  7154   0012D4  2630               	addwf	convert_HSV@temp_613^0,f,c
  7155   0012D6  5015               	movf	(??_convert_HSV+5)^0,w,c
  7156   0012D8  2231               	addwfc	(convert_HSV@temp_613+1)^0,f,c
  7157   0012DA  0E00               	movlw	0
  7158   0012DC  2232               	addwfc	(convert_HSV@temp_613+2)^0,f,c
  7159   0012DE  0E00               	movlw	0
  7160   0012E0  2233               	addwfc	(convert_HSV@temp_613+3)^0,f,c
  7161   0012E2                     
  7162                           ;color.c: 283:                 temp *= (unsigned long)hue_scale;
  7163   0012E2  C030  F001         	movff	convert_HSV@temp_613,___lmul@multiplier
  7164   0012E6  C031  F002         	movff	convert_HSV@temp_613+1,___lmul@multiplier+1
  7165   0012EA  C032  F003         	movff	convert_HSV@temp_613+2,___lmul@multiplier+2
  7166   0012EE  C033  F004         	movff	convert_HSV@temp_613+3,___lmul@multiplier+3
  7167   0012F2  0E3C               	movlw	60
  7168   0012F4  6E05               	movwf	___lmul@multiplicand^0,c
  7169   0012F6  0E00               	movlw	0
  7170   0012F8  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7171   0012FA  0E00               	movlw	0
  7172   0012FC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7173   0012FE  0E00               	movlw	0
  7174   001300  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7175   001302  EC5A  F018         	call	___lmul	;wreg free
  7176   001306  C001  F030         	movff	?___lmul,convert_HSV@temp_613
  7177   00130A  C002  F031         	movff	?___lmul+1,convert_HSV@temp_613+1
  7178   00130E  C003  F032         	movff	?___lmul+2,convert_HSV@temp_613+2
  7179   001312  C004  F033         	movff	?___lmul+3,convert_HSV@temp_613+3
  7180   001316                     
  7181                           ;color.c: 284:                 temp /= (unsigned long)C;
  7182   001316  C030  F001         	movff	convert_HSV@temp_613,___lldiv@dividend
  7183   00131A  C031  F002         	movff	convert_HSV@temp_613+1,___lldiv@dividend+1
  7184   00131E  C032  F003         	movff	convert_HSV@temp_613+2,___lldiv@dividend+2
  7185   001322  C033  F004         	movff	convert_HSV@temp_613+3,___lldiv@dividend+3
  7186   001326  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7187   00132A  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7188   00132E  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7189   001330  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7190   001332  ECF2  F015         	call	___lldiv	;wreg free
  7191   001336  C001  F030         	movff	?___lldiv,convert_HSV@temp_613
  7192   00133A  C002  F031         	movff	?___lldiv+1,convert_HSV@temp_613+1
  7193   00133E  C003  F032         	movff	?___lldiv+2,convert_HSV@temp_613+2
  7194   001342  C004  F033         	movff	?___lldiv+3,convert_HSV@temp_613+3
  7195   001346                     
  7196                           ;color.c: 285:                 hue = (unsigned int)temp;
  7197   001346  C030  F01E         	movff	convert_HSV@temp_613,convert_HSV@hue
  7198   00134A  C031  F01F         	movff	convert_HSV@temp_613+1,convert_HSV@hue+1
  7199                           
  7200                           ;color.c: 286:             } else {
  7201   00134E  EF0E  F00A         	goto	l3619
  7202   001352                     l3607:
  7203                           
  7204                           ;color.c: 288:                 unsigned long temp;;color.c: 289:                 temp = 
      +                          (unsigned long)C;
  7205   001352  C040  F034         	movff	convert_HSV@C,convert_HSV@temp_614
  7206   001356  C041  F035         	movff	convert_HSV@C+1,convert_HSV@temp_614+1
  7207   00135A  6A36               	clrf	(convert_HSV@temp_614+2)^0,c
  7208   00135C  6A37               	clrf	(convert_HSV@temp_614+3)^0,c
  7209   00135E                     
  7210                           ;color.c: 290:                 temp *= 4;
  7211   00135E  0E02               	movlw	2
  7212   001360                     u2725:
  7213   001360  90D8               	bcf	status,0,c
  7214   001362  3634               	rlcf	convert_HSV@temp_614^0,f,c
  7215   001364  3635               	rlcf	(convert_HSV@temp_614+1)^0,f,c
  7216   001366  3636               	rlcf	(convert_HSV@temp_614+2)^0,f,c
  7217   001368  3637               	rlcf	(convert_HSV@temp_614+3)^0,f,c
  7218   00136A  2EE8               	decfsz	wreg,f,c
  7219   00136C  EFB0  F009         	goto	u2725
  7220   001370                     
  7221                           ;color.c: 291:                 temp -= (unsigned long)(p2->G - p2->R);
  7222   001370  500F               	movf	convert_HSV@p2^0,w,c
  7223   001372  6ED9               	movwf	fsr2l,c
  7224   001374  6ADA               	clrf	fsr2h,c
  7225   001376  CFDE F010          	movff	postinc2,??_convert_HSV
  7226   00137A  CFDD F011          	movff	postdec2,??_convert_HSV+1
  7227   00137E  500F               	movf	convert_HSV@p2^0,w,c
  7228   001380  6ED9               	movwf	fsr2l,c
  7229   001382  6ADA               	clrf	fsr2h,c
  7230   001384  0E02               	movlw	2
  7231   001386  26D9               	addwf	fsr2l,f,c
  7232   001388  CFDE F012          	movff	postinc2,??_convert_HSV+2
  7233   00138C  CFDD F013          	movff	postdec2,??_convert_HSV+3
  7234   001390  5010               	movf	??_convert_HSV^0,w,c
  7235   001392  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  7236   001394  6E14               	movwf	(??_convert_HSV+4)^0,c
  7237   001396  5011               	movf	(??_convert_HSV+1)^0,w,c
  7238   001398  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  7239   00139A  6E15               	movwf	(??_convert_HSV+5)^0,c
  7240   00139C  6A16               	clrf	(??_convert_HSV+6)^0,c
  7241   00139E  6A17               	clrf	(??_convert_HSV+7)^0,c
  7242   0013A0  5014               	movf	(??_convert_HSV+4)^0,w,c
  7243   0013A2  5E34               	subwf	convert_HSV@temp_614^0,f,c
  7244   0013A4  5015               	movf	(??_convert_HSV+5)^0,w,c
  7245   0013A6  5A35               	subwfb	(convert_HSV@temp_614+1)^0,f,c
  7246   0013A8  5016               	movf	(??_convert_HSV+6)^0,w,c
  7247   0013AA  5A36               	subwfb	(convert_HSV@temp_614+2)^0,f,c
  7248   0013AC  5017               	movf	(??_convert_HSV+7)^0,w,c
  7249   0013AE  5A37               	subwfb	(convert_HSV@temp_614+3)^0,f,c
  7250   0013B0                     
  7251                           ;color.c: 292:                 temp *= (unsigned long)hue_scale;
  7252   0013B0  C034  F001         	movff	convert_HSV@temp_614,___lmul@multiplier
  7253   0013B4  C035  F002         	movff	convert_HSV@temp_614+1,___lmul@multiplier+1
  7254   0013B8  C036  F003         	movff	convert_HSV@temp_614+2,___lmul@multiplier+2
  7255   0013BC  C037  F004         	movff	convert_HSV@temp_614+3,___lmul@multiplier+3
  7256   0013C0  0E3C               	movlw	60
  7257   0013C2  6E05               	movwf	___lmul@multiplicand^0,c
  7258   0013C4  0E00               	movlw	0
  7259   0013C6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7260   0013C8  0E00               	movlw	0
  7261   0013CA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7262   0013CC  0E00               	movlw	0
  7263   0013CE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7264   0013D0  EC5A  F018         	call	___lmul	;wreg free
  7265   0013D4  C001  F034         	movff	?___lmul,convert_HSV@temp_614
  7266   0013D8  C002  F035         	movff	?___lmul+1,convert_HSV@temp_614+1
  7267   0013DC  C003  F036         	movff	?___lmul+2,convert_HSV@temp_614+2
  7268   0013E0  C004  F037         	movff	?___lmul+3,convert_HSV@temp_614+3
  7269   0013E4                     
  7270                           ;color.c: 293:                 temp /= (unsigned long)C;
  7271   0013E4  C034  F001         	movff	convert_HSV@temp_614,___lldiv@dividend
  7272   0013E8  C035  F002         	movff	convert_HSV@temp_614+1,___lldiv@dividend+1
  7273   0013EC  C036  F003         	movff	convert_HSV@temp_614+2,___lldiv@dividend+2
  7274   0013F0  C037  F004         	movff	convert_HSV@temp_614+3,___lldiv@dividend+3
  7275   0013F4  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  7276   0013F8  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  7277   0013FC  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7278   0013FE  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7279   001400  ECF2  F015         	call	___lldiv	;wreg free
  7280   001404  C001  F034         	movff	?___lldiv,convert_HSV@temp_614
  7281   001408  C002  F035         	movff	?___lldiv+1,convert_HSV@temp_614+1
  7282   00140C  C003  F036         	movff	?___lldiv+2,convert_HSV@temp_614+2
  7283   001410  C004  F037         	movff	?___lldiv+3,convert_HSV@temp_614+3
  7284   001414                     
  7285                           ;color.c: 294:                 hue = (unsigned int)temp;
  7286   001414  C034  F01E         	movff	convert_HSV@temp_614,convert_HSV@hue
  7287   001418  C035  F01F         	movff	convert_HSV@temp_614+1,convert_HSV@hue+1
  7288   00141C                     l3619:
  7289                           
  7290                           ;color.c: 299:     if (M == 0) {
  7291   00141C  503E               	movf	convert_HSV@M^0,w,c
  7292   00141E  103F               	iorwf	(convert_HSV@M+1)^0,w,c
  7293   001420  A4D8               	btfss	status,2,c
  7294   001422  EF15  F00A         	goto	u2731
  7295   001426  EF17  F00A         	goto	u2730
  7296   00142A                     u2731:
  7297   00142A  EF1D  F00A         	goto	l3623
  7298   00142E                     u2730:
  7299   00142E                     
  7300                           ;color.c: 300:         sat = 0;
  7301   00142E  0E00               	movlw	0
  7302   001430  6E1D               	movwf	(convert_HSV@sat+1)^0,c
  7303   001432  0E00               	movlw	0
  7304   001434  6E1C               	movwf	convert_HSV@sat^0,c
  7305                           
  7306                           ;color.c: 301:     } else {
  7307   001436  EF59  F00A         	goto	l3631
  7308   00143A                     l3623:
  7309                           
  7310                           ;color.c: 303:         unsigned long temp;;color.c: 304:         temp = (unsigned long)C
      +                          ;
  7311   00143A  C040  F020         	movff	convert_HSV@C,convert_HSV@temp_615
  7312   00143E  C041  F021         	movff	convert_HSV@C+1,convert_HSV@temp_615+1
  7313   001442  6A22               	clrf	(convert_HSV@temp_615+2)^0,c
  7314   001444  6A23               	clrf	(convert_HSV@temp_615+3)^0,c
  7315   001446                     
  7316                           ;color.c: 305:         temp *= (unsigned long)sat_scale;
  7317   001446  C020  F001         	movff	convert_HSV@temp_615,___lmul@multiplier
  7318   00144A  C021  F002         	movff	convert_HSV@temp_615+1,___lmul@multiplier+1
  7319   00144E  C022  F003         	movff	convert_HSV@temp_615+2,___lmul@multiplier+2
  7320   001452  C023  F004         	movff	convert_HSV@temp_615+3,___lmul@multiplier+3
  7321   001456  0E64               	movlw	100
  7322   001458  6E05               	movwf	___lmul@multiplicand^0,c
  7323   00145A  0E00               	movlw	0
  7324   00145C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  7325   00145E  0E00               	movlw	0
  7326   001460  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  7327   001462  0E00               	movlw	0
  7328   001464  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  7329   001466  EC5A  F018         	call	___lmul	;wreg free
  7330   00146A  C001  F020         	movff	?___lmul,convert_HSV@temp_615
  7331   00146E  C002  F021         	movff	?___lmul+1,convert_HSV@temp_615+1
  7332   001472  C003  F022         	movff	?___lmul+2,convert_HSV@temp_615+2
  7333   001476  C004  F023         	movff	?___lmul+3,convert_HSV@temp_615+3
  7334   00147A                     
  7335                           ;color.c: 306:         temp /= (unsigned long)M;
  7336   00147A  C020  F001         	movff	convert_HSV@temp_615,___lldiv@dividend
  7337   00147E  C021  F002         	movff	convert_HSV@temp_615+1,___lldiv@dividend+1
  7338   001482  C022  F003         	movff	convert_HSV@temp_615+2,___lldiv@dividend+2
  7339   001486  C023  F004         	movff	convert_HSV@temp_615+3,___lldiv@dividend+3
  7340   00148A  C03E  F005         	movff	convert_HSV@M,___lldiv@divisor
  7341   00148E  C03F  F006         	movff	convert_HSV@M+1,___lldiv@divisor+1
  7342   001492  6A07               	clrf	(___lldiv@divisor+2)^0,c
  7343   001494  6A08               	clrf	(___lldiv@divisor+3)^0,c
  7344   001496  ECF2  F015         	call	___lldiv	;wreg free
  7345   00149A  C001  F020         	movff	?___lldiv,convert_HSV@temp_615
  7346   00149E  C002  F021         	movff	?___lldiv+1,convert_HSV@temp_615+1
  7347   0014A2  C003  F022         	movff	?___lldiv+2,convert_HSV@temp_615+2
  7348   0014A6  C004  F023         	movff	?___lldiv+3,convert_HSV@temp_615+3
  7349   0014AA                     
  7350                           ;color.c: 307:         sat = (unsigned int)temp;
  7351   0014AA  C020  F01C         	movff	convert_HSV@temp_615,convert_HSV@sat
  7352   0014AE  C021  F01D         	movff	convert_HSV@temp_615+1,convert_HSV@sat+1
  7353   0014B2                     l3631:
  7354                           
  7355                           ;color.c: 310:     p1->H = hue;
  7356   0014B2  500E               	movf	convert_HSV@p1^0,w,c
  7357   0014B4  6ED9               	movwf	fsr2l,c
  7358   0014B6  6ADA               	clrf	fsr2h,c
  7359   0014B8  C01E  FFDE         	movff	convert_HSV@hue,postinc2
  7360   0014BC  C01F  FFDD         	movff	convert_HSV@hue+1,postdec2
  7361   0014C0                     
  7362                           ;color.c: 311:     p1->S = sat;
  7363   0014C0  500E               	movf	convert_HSV@p1^0,w,c
  7364   0014C2  6ED9               	movwf	fsr2l,c
  7365   0014C4  6ADA               	clrf	fsr2h,c
  7366   0014C6  0E02               	movlw	2
  7367   0014C8  26D9               	addwf	fsr2l,f,c
  7368   0014CA  C01C  FFDE         	movff	convert_HSV@sat,postinc2
  7369   0014CE  C01D  FFDD         	movff	convert_HSV@sat+1,postdec2
  7370   0014D2                     
  7371                           ;color.c: 312:     p1->V = M;
  7372   0014D2  500E               	movf	convert_HSV@p1^0,w,c
  7373   0014D4  6ED9               	movwf	fsr2l,c
  7374   0014D6  6ADA               	clrf	fsr2h,c
  7375   0014D8  0E04               	movlw	4
  7376   0014DA  26D9               	addwf	fsr2l,f,c
  7377   0014DC  C03E  FFDE         	movff	convert_HSV@M,postinc2
  7378   0014E0  C03F  FFDD         	movff	convert_HSV@M+1,postdec2
  7379   0014E4  0012               	return		;funcret
  7380   0014E6                     __end_of_convert_HSV:
  7381                           	callstack 0
  7382                           
  7383 ;; *************** function _min_RGB *****************
  7384 ;; Defined at:
  7385 ;;		line 188 in file "color.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  7388 ;;		 -> main@RGBC_colour(8), 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;  min_val         2    4[COMRAM] unsigned int 
  7391 ;; Return value:  Size  Location     Type
  7392 ;;                  2    0[COMRAM] unsigned int 
  7393 ;; Registers used:
  7394 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7395 ;; Tracked objects:
  7396 ;;		On entry : 0/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7401 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7403 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7404 ;;Total ram usage:        6 bytes
  7405 ;; Hardware stack levels used: 1
  7406 ;; Hardware stack levels required when called: 1
  7407 ;; This function calls:
  7408 ;;		Nothing
  7409 ;; This function is called by:
  7410 ;;		_convert_HSV
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           	psect	text45
  7415   002F48                     __ptext45:
  7416                           	callstack 0
  7417   002F48                     _min_RGB:
  7418                           	callstack 27
  7419   002F48                     
  7420                           ;color.c: 188: unsigned int min_RGB(struct RGBC_val *p);color.c: 189: {;color.c: 190:   
      +                            unsigned int min_val = p->R;
  7421   002F48  5001               	movf	min_RGB@p^0,w,c
  7422   002F4A  6ED9               	movwf	fsr2l,c
  7423   002F4C  6ADA               	clrf	fsr2h,c
  7424   002F4E  CFDE F005          	movff	postinc2,min_RGB@min_val
  7425   002F52  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7426   002F56                     
  7427                           ;color.c: 191:     if (p->G < min_val) {min_val = p->G;}
  7428   002F56  5001               	movf	min_RGB@p^0,w,c
  7429   002F58  6ED9               	movwf	fsr2l,c
  7430   002F5A  6ADA               	clrf	fsr2h,c
  7431   002F5C  0E02               	movlw	2
  7432   002F5E  26D9               	addwf	fsr2l,f,c
  7433   002F60  5005               	movf	min_RGB@min_val^0,w,c
  7434   002F62  5CDE               	subwf	postinc2,w,c
  7435   002F64  5006               	movf	(min_RGB@min_val+1)^0,w,c
  7436   002F66  58DE               	subwfb	postinc2,w,c
  7437   002F68  B0D8               	btfsc	status,0,c
  7438   002F6A  EFB9  F017         	goto	u2041
  7439   002F6E  EFBB  F017         	goto	u2040
  7440   002F72                     u2041:
  7441   002F72  EFC4  F017         	goto	l107
  7442   002F76                     u2040:
  7443   002F76  5001               	movf	min_RGB@p^0,w,c
  7444   002F78  6ED9               	movwf	fsr2l,c
  7445   002F7A  6ADA               	clrf	fsr2h,c
  7446   002F7C  0E02               	movlw	2
  7447   002F7E  26D9               	addwf	fsr2l,f,c
  7448   002F80  CFDE F005          	movff	postinc2,min_RGB@min_val
  7449   002F84  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7450   002F88                     l107:
  7451                           
  7452                           ;color.c: 192:     if (p->B < min_val) {min_val = p->B;}
  7453   002F88  5001               	movf	min_RGB@p^0,w,c
  7454   002F8A  6ED9               	movwf	fsr2l,c
  7455   002F8C  6ADA               	clrf	fsr2h,c
  7456   002F8E  0E04               	movlw	4
  7457   002F90  26D9               	addwf	fsr2l,f,c
  7458   002F92  5005               	movf	min_RGB@min_val^0,w,c
  7459   002F94  5CDE               	subwf	postinc2,w,c
  7460   002F96  5006               	movf	(min_RGB@min_val+1)^0,w,c
  7461   002F98  58DE               	subwfb	postinc2,w,c
  7462   002F9A  B0D8               	btfsc	status,0,c
  7463   002F9C  EFD2  F017         	goto	u2051
  7464   002FA0  EFD4  F017         	goto	u2050
  7465   002FA4                     u2051:
  7466   002FA4  EFDD  F017         	goto	l3107
  7467   002FA8                     u2050:
  7468   002FA8  5001               	movf	min_RGB@p^0,w,c
  7469   002FAA  6ED9               	movwf	fsr2l,c
  7470   002FAC  6ADA               	clrf	fsr2h,c
  7471   002FAE  0E04               	movlw	4
  7472   002FB0  26D9               	addwf	fsr2l,f,c
  7473   002FB2  CFDE F005          	movff	postinc2,min_RGB@min_val
  7474   002FB6  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  7475   002FBA                     l3107:
  7476                           
  7477                           ;color.c: 193:     return min_val;
  7478   002FBA  C005  F001         	movff	min_RGB@min_val,?_min_RGB
  7479   002FBE  C006  F002         	movff	min_RGB@min_val+1,?_min_RGB+1
  7480   002FC2  0012               	return		;funcret
  7481   002FC4                     __end_of_min_RGB:
  7482                           	callstack 0
  7483                           
  7484 ;; *************** function _max_RGB *****************
  7485 ;; Defined at:
  7486 ;;		line 177 in file "color.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  7489 ;;		 -> main@RGBC_colour(8), 
  7490 ;; Auto vars:     Size  Location     Type
  7491 ;;  max_val         2    4[COMRAM] unsigned int 
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  2    0[COMRAM] unsigned int 
  7494 ;; Registers used:
  7495 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7496 ;; Tracked objects:
  7497 ;;		On entry : 0/0
  7498 ;;		On exit  : 0/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7503 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7504 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7505 ;;Total ram usage:        6 bytes
  7506 ;; Hardware stack levels used: 1
  7507 ;; Hardware stack levels required when called: 1
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_convert_HSV
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           	psect	text46
  7516   002FC4                     __ptext46:
  7517                           	callstack 0
  7518   002FC4                     _max_RGB:
  7519                           	callstack 27
  7520   002FC4                     
  7521                           ;color.c: 177: unsigned int max_RGB(struct RGBC_val *p);color.c: 178: {;color.c: 179:   
      +                            unsigned int max_val = p->R;
  7522   002FC4  5001               	movf	max_RGB@p^0,w,c
  7523   002FC6  6ED9               	movwf	fsr2l,c
  7524   002FC8  6ADA               	clrf	fsr2h,c
  7525   002FCA  CFDE F005          	movff	postinc2,max_RGB@max_val
  7526   002FCE  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7527   002FD2                     
  7528                           ;color.c: 180:     if (p->G > max_val) {max_val = p->G;}
  7529   002FD2  5001               	movf	max_RGB@p^0,w,c
  7530   002FD4  6ED9               	movwf	fsr2l,c
  7531   002FD6  6ADA               	clrf	fsr2h,c
  7532   002FD8  0E02               	movlw	2
  7533   002FDA  26D9               	addwf	fsr2l,f,c
  7534   002FDC  50DE               	movf	postinc2,w,c
  7535   002FDE  5C05               	subwf	max_RGB@max_val^0,w,c
  7536   002FE0  50DE               	movf	postinc2,w,c
  7537   002FE2  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  7538   002FE4  B0D8               	btfsc	status,0,c
  7539   002FE6  EFF7  F017         	goto	u2021
  7540   002FEA  EFF9  F017         	goto	u2020
  7541   002FEE                     u2021:
  7542   002FEE  EF02  F018         	goto	l102
  7543   002FF2                     u2020:
  7544   002FF2  5001               	movf	max_RGB@p^0,w,c
  7545   002FF4  6ED9               	movwf	fsr2l,c
  7546   002FF6  6ADA               	clrf	fsr2h,c
  7547   002FF8  0E02               	movlw	2
  7548   002FFA  26D9               	addwf	fsr2l,f,c
  7549   002FFC  CFDE F005          	movff	postinc2,max_RGB@max_val
  7550   003000  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7551   003004                     l102:
  7552                           
  7553                           ;color.c: 181:     if (p->B > max_val) {max_val = p->B;}
  7554   003004  5001               	movf	max_RGB@p^0,w,c
  7555   003006  6ED9               	movwf	fsr2l,c
  7556   003008  6ADA               	clrf	fsr2h,c
  7557   00300A  0E04               	movlw	4
  7558   00300C  26D9               	addwf	fsr2l,f,c
  7559   00300E  50DE               	movf	postinc2,w,c
  7560   003010  5C05               	subwf	max_RGB@max_val^0,w,c
  7561   003012  50DE               	movf	postinc2,w,c
  7562   003014  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  7563   003016  B0D8               	btfsc	status,0,c
  7564   003018  EF10  F018         	goto	u2031
  7565   00301C  EF12  F018         	goto	u2030
  7566   003020                     u2031:
  7567   003020  EF1B  F018         	goto	l3095
  7568   003024                     u2030:
  7569   003024  5001               	movf	max_RGB@p^0,w,c
  7570   003026  6ED9               	movwf	fsr2l,c
  7571   003028  6ADA               	clrf	fsr2h,c
  7572   00302A  0E04               	movlw	4
  7573   00302C  26D9               	addwf	fsr2l,f,c
  7574   00302E  CFDE F005          	movff	postinc2,max_RGB@max_val
  7575   003032  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  7576   003036                     l3095:
  7577                           
  7578                           ;color.c: 182:     return max_val;
  7579   003036  C005  F001         	movff	max_RGB@max_val,?_max_RGB
  7580   00303A  C006  F002         	movff	max_RGB@max_val+1,?_max_RGB+1
  7581   00303E  0012               	return		;funcret
  7582   003040                     __end_of_max_RGB:
  7583                           	callstack 0
  7584                           
  7585 ;; *************** function ___lmul *****************
  7586 ;; Defined at:
  7587 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  multiplier      4    0[COMRAM] unsigned long 
  7590 ;;  multiplicand    4    4[COMRAM] unsigned long 
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;  product         4    8[COMRAM] unsigned long 
  7593 ;; Return value:  Size  Location     Type
  7594 ;;                  4    0[COMRAM] unsigned long 
  7595 ;; Registers used:
  7596 ;;		wreg, status,2, status,0
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/0
  7599 ;;		On exit  : 0/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7602 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7603 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7605 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7606 ;;Total ram usage:       12 bytes
  7607 ;; Hardware stack levels used: 1
  7608 ;; Hardware stack levels required when called: 1
  7609 ;; This function calls:
  7610 ;;		Nothing
  7611 ;; This function is called by:
  7612 ;;		_convert_HSV
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text47
  7617   0030B4                     __ptext47:
  7618                           	callstack 0
  7619   0030B4                     ___lmul:
  7620                           	callstack 27
  7621   0030B4  0E00               	movlw	0
  7622   0030B6  6E09               	movwf	___lmul@product^0,c
  7623   0030B8  0E00               	movlw	0
  7624   0030BA  6E0A               	movwf	(___lmul@product+1)^0,c
  7625   0030BC  0E00               	movlw	0
  7626   0030BE  6E0B               	movwf	(___lmul@product+2)^0,c
  7627   0030C0  0E00               	movlw	0
  7628   0030C2  6E0C               	movwf	(___lmul@product+3)^0,c
  7629   0030C4                     l3217:
  7630   0030C4  A001               	btfss	___lmul@multiplier^0,0,c
  7631   0030C6  EF67  F018         	goto	u2061
  7632   0030CA  EF69  F018         	goto	u2060
  7633   0030CE                     u2061:
  7634   0030CE  EF71  F018         	goto	l3221
  7635   0030D2                     u2060:
  7636   0030D2  5005               	movf	___lmul@multiplicand^0,w,c
  7637   0030D4  2609               	addwf	___lmul@product^0,f,c
  7638   0030D6  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  7639   0030D8  220A               	addwfc	(___lmul@product+1)^0,f,c
  7640   0030DA  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  7641   0030DC  220B               	addwfc	(___lmul@product+2)^0,f,c
  7642   0030DE  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  7643   0030E0  220C               	addwfc	(___lmul@product+3)^0,f,c
  7644   0030E2                     l3221:
  7645   0030E2  90D8               	bcf	status,0,c
  7646   0030E4  3605               	rlcf	___lmul@multiplicand^0,f,c
  7647   0030E6  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  7648   0030E8  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  7649   0030EA  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  7650   0030EC  90D8               	bcf	status,0,c
  7651   0030EE  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  7652   0030F0  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  7653   0030F2  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  7654   0030F4  3201               	rrcf	___lmul@multiplier^0,f,c
  7655   0030F6  5001               	movf	___lmul@multiplier^0,w,c
  7656   0030F8  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  7657   0030FA  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  7658   0030FC  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  7659   0030FE  A4D8               	btfss	status,2,c
  7660   003100  EF84  F018         	goto	u2071
  7661   003104  EF86  F018         	goto	u2070
  7662   003108                     u2071:
  7663   003108  EF62  F018         	goto	l3217
  7664   00310C                     u2070:
  7665   00310C  C009  F001         	movff	___lmul@product,?___lmul
  7666   003110  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  7667   003114  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  7668   003118  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  7669   00311C  0012               	return		;funcret
  7670   00311E                     __end_of___lmul:
  7671                           	callstack 0
  7672                           
  7673 ;; *************** function _colour_to_key *****************
  7674 ;; Defined at:
  7675 ;;		line 320 in file "color.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;  p1              1    0[COMRAM] PTR struct HSV_val
  7678 ;;		 -> main@HSV_colour(6), 
  7679 ;;  p2              1    1[COMRAM] PTR struct RGBC_val
  7680 ;;		 -> main@RGBC_colour(8), 
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;  key             1    4[COMRAM] unsigned char 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      unsigned char 
  7685 ;; Registers used:
  7686 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7692 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7694 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7695 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7696 ;;Total ram usage:        5 bytes
  7697 ;; Hardware stack levels used: 1
  7698 ;; Hardware stack levels required when called: 1
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_forward_navigation
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text48
  7707   0014E6                     __ptext48:
  7708                           	callstack 0
  7709   0014E6                     _colour_to_key:
  7710                           	callstack 28
  7711   0014E6                     
  7712                           ;color.c: 320: unsigned char colour_to_key(struct HSV_val *p1, struct RGBC_val *p2);colo
      +                          r.c: 321: {;color.c: 323:     unsigned char key = 0;
  7713   0014E6  0E00               	movlw	0
  7714   0014E8  6E05               	movwf	colour_to_key@key^0,c
  7715   0014EA                     
  7716                           ;color.c: 326:     if ( ((293 <= p1->H) && (p1->H <= 360)) &&
  7717   0014EA  5001               	movf	colour_to_key@p1^0,w,c
  7718   0014EC  6ED9               	movwf	fsr2l,c
  7719   0014EE  6ADA               	clrf	fsr2h,c
  7720   0014F0  0E25               	movlw	37
  7721   0014F2  5CDE               	subwf	postinc2,w,c
  7722   0014F4  0E01               	movlw	1
  7723   0014F6  58DE               	subwfb	postinc2,w,c
  7724   0014F8  A0D8               	btfss	status,0,c
  7725   0014FA  EF81  F00A         	goto	u2741
  7726   0014FE  EF83  F00A         	goto	u2740
  7727   001502                     u2741:
  7728   001502  EFB5  F00A         	goto	l3649
  7729   001506                     u2740:
  7730   001506  5001               	movf	colour_to_key@p1^0,w,c
  7731   001508  6ED9               	movwf	fsr2l,c
  7732   00150A  6ADA               	clrf	fsr2h,c
  7733   00150C  0E69               	movlw	105
  7734   00150E  5CDE               	subwf	postinc2,w,c
  7735   001510  0E01               	movlw	1
  7736   001512  58DE               	subwfb	postinc2,w,c
  7737   001514  B0D8               	btfsc	status,0,c
  7738   001516  EF8F  F00A         	goto	u2751
  7739   00151A  EF91  F00A         	goto	u2750
  7740   00151E                     u2751:
  7741   00151E  EFB5  F00A         	goto	l3649
  7742   001522                     u2750:
  7743   001522  5001               	movf	colour_to_key@p1^0,w,c
  7744   001524  6ED9               	movwf	fsr2l,c
  7745   001526  6ADA               	clrf	fsr2h,c
  7746   001528  0E02               	movlw	2
  7747   00152A  26D9               	addwf	fsr2l,f,c
  7748   00152C  0E01               	movlw	1
  7749   00152E  50DB               	movf	plusw2,w,c
  7750   001530  E109               	bnz	u2760
  7751   001532  0E2E               	movlw	46
  7752   001534  5CDE               	subwf	postinc2,w,c
  7753   001536  A0D8               	btfss	status,0,c
  7754   001538  EFA0  F00A         	goto	u2761
  7755   00153C  EFA2  F00A         	goto	u2760
  7756   001540                     u2761:
  7757   001540  EFB5  F00A         	goto	l3649
  7758   001544                     u2760:
  7759   001544  5001               	movf	colour_to_key@p1^0,w,c
  7760   001546  6ED9               	movwf	fsr2l,c
  7761   001548  6ADA               	clrf	fsr2h,c
  7762   00154A  0E02               	movlw	2
  7763   00154C  26D9               	addwf	fsr2l,f,c
  7764   00154E  0E01               	movlw	1
  7765   001550  50DB               	movf	plusw2,w,c
  7766   001552  E107               	bnz	u2771
  7767   001554  0E5B               	movlw	91
  7768   001556  5CDE               	subwf	postinc2,w,c
  7769   001558  B0D8               	btfsc	status,0,c
  7770   00155A  EFB1  F00A         	goto	u2771
  7771   00155E  EFB3  F00A         	goto	u2770
  7772   001562                     u2771:
  7773   001562  EFB5  F00A         	goto	l3649
  7774   001566                     u2770:
  7775   001566                     
  7776                           ;color.c: 327:          ((46 <= p1->S) && (p1->S <= 90))) {;color.c: 328:         key = 
      +                          1;
  7777   001566  0E01               	movlw	1
  7778   001568  6E05               	movwf	colour_to_key@key^0,c
  7779   00156A                     l3649:
  7780                           
  7781                           ;color.c: 332:     if ( ((113 <= p1->H) && (p1->H <= 153)) &&
  7782   00156A  5001               	movf	colour_to_key@p1^0,w,c
  7783   00156C  6ED9               	movwf	fsr2l,c
  7784   00156E  6ADA               	clrf	fsr2h,c
  7785   001570  0E01               	movlw	1
  7786   001572  50DB               	movf	plusw2,w,c
  7787   001574  E109               	bnz	u2780
  7788   001576  0E71               	movlw	113
  7789   001578  5CDE               	subwf	postinc2,w,c
  7790   00157A  A0D8               	btfss	status,0,c
  7791   00157C  EFC2  F00A         	goto	u2781
  7792   001580  EFC4  F00A         	goto	u2780
  7793   001584                     u2781:
  7794   001584  EFF7  F00A         	goto	l3659
  7795   001588                     u2780:
  7796   001588  5001               	movf	colour_to_key@p1^0,w,c
  7797   00158A  6ED9               	movwf	fsr2l,c
  7798   00158C  6ADA               	clrf	fsr2h,c
  7799   00158E  0E01               	movlw	1
  7800   001590  50DB               	movf	plusw2,w,c
  7801   001592  E107               	bnz	u2791
  7802   001594  0E9A               	movlw	154
  7803   001596  5CDE               	subwf	postinc2,w,c
  7804   001598  B0D8               	btfsc	status,0,c
  7805   00159A  EFD1  F00A         	goto	u2791
  7806   00159E  EFD3  F00A         	goto	u2790
  7807   0015A2                     u2791:
  7808   0015A2  EFF7  F00A         	goto	l3659
  7809   0015A6                     u2790:
  7810   0015A6  5001               	movf	colour_to_key@p1^0,w,c
  7811   0015A8  6ED9               	movwf	fsr2l,c
  7812   0015AA  6ADA               	clrf	fsr2h,c
  7813   0015AC  0E02               	movlw	2
  7814   0015AE  26D9               	addwf	fsr2l,f,c
  7815   0015B0  0E01               	movlw	1
  7816   0015B2  50DB               	movf	plusw2,w,c
  7817   0015B4  E109               	bnz	u2800
  7818   0015B6  0E0D               	movlw	13
  7819   0015B8  5CDE               	subwf	postinc2,w,c
  7820   0015BA  A0D8               	btfss	status,0,c
  7821   0015BC  EFE2  F00A         	goto	u2801
  7822   0015C0  EFE4  F00A         	goto	u2800
  7823   0015C4                     u2801:
  7824   0015C4  EFF7  F00A         	goto	l3659
  7825   0015C8                     u2800:
  7826   0015C8  5001               	movf	colour_to_key@p1^0,w,c
  7827   0015CA  6ED9               	movwf	fsr2l,c
  7828   0015CC  6ADA               	clrf	fsr2h,c
  7829   0015CE  0E02               	movlw	2
  7830   0015D0  26D9               	addwf	fsr2l,f,c
  7831   0015D2  0E01               	movlw	1
  7832   0015D4  50DB               	movf	plusw2,w,c
  7833   0015D6  E107               	bnz	u2811
  7834   0015D8  0E2C               	movlw	44
  7835   0015DA  5CDE               	subwf	postinc2,w,c
  7836   0015DC  B0D8               	btfsc	status,0,c
  7837   0015DE  EFF3  F00A         	goto	u2811
  7838   0015E2  EFF5  F00A         	goto	u2810
  7839   0015E6                     u2811:
  7840   0015E6  EFF7  F00A         	goto	l3659
  7841   0015EA                     u2810:
  7842   0015EA                     
  7843                           ;color.c: 333:          ((13 <= p1->S) && (p1->S <= 43))) {;color.c: 334:         key = 
      +                          2;
  7844   0015EA  0E02               	movlw	2
  7845   0015EC  6E05               	movwf	colour_to_key@key^0,c
  7846   0015EE                     l3659:
  7847                           
  7848                           ;color.c: 338:     if ( ((180 <= p1->H) && (p1->H <= 244)) &&
  7849   0015EE  5001               	movf	colour_to_key@p1^0,w,c
  7850   0015F0  6ED9               	movwf	fsr2l,c
  7851   0015F2  6ADA               	clrf	fsr2h,c
  7852   0015F4  0E01               	movlw	1
  7853   0015F6  50DB               	movf	plusw2,w,c
  7854   0015F8  E109               	bnz	u2820
  7855   0015FA  0EB4               	movlw	180
  7856   0015FC  5CDE               	subwf	postinc2,w,c
  7857   0015FE  A0D8               	btfss	status,0,c
  7858   001600  EF04  F00B         	goto	u2821
  7859   001604  EF06  F00B         	goto	u2820
  7860   001608                     u2821:
  7861   001608  EF39  F00B         	goto	l3669
  7862   00160C                     u2820:
  7863   00160C  5001               	movf	colour_to_key@p1^0,w,c
  7864   00160E  6ED9               	movwf	fsr2l,c
  7865   001610  6ADA               	clrf	fsr2h,c
  7866   001612  0E01               	movlw	1
  7867   001614  50DB               	movf	plusw2,w,c
  7868   001616  E107               	bnz	u2831
  7869   001618  0EF5               	movlw	245
  7870   00161A  5CDE               	subwf	postinc2,w,c
  7871   00161C  B0D8               	btfsc	status,0,c
  7872   00161E  EF13  F00B         	goto	u2831
  7873   001622  EF15  F00B         	goto	u2830
  7874   001626                     u2831:
  7875   001626  EF39  F00B         	goto	l3669
  7876   00162A                     u2830:
  7877   00162A  5001               	movf	colour_to_key@p1^0,w,c
  7878   00162C  6ED9               	movwf	fsr2l,c
  7879   00162E  6ADA               	clrf	fsr2h,c
  7880   001630  0E02               	movlw	2
  7881   001632  26D9               	addwf	fsr2l,f,c
  7882   001634  0E01               	movlw	1
  7883   001636  50DB               	movf	plusw2,w,c
  7884   001638  E109               	bnz	u2840
  7885   00163A  0E0D               	movlw	13
  7886   00163C  5CDE               	subwf	postinc2,w,c
  7887   00163E  A0D8               	btfss	status,0,c
  7888   001640  EF24  F00B         	goto	u2841
  7889   001644  EF26  F00B         	goto	u2840
  7890   001648                     u2841:
  7891   001648  EF39  F00B         	goto	l3669
  7892   00164C                     u2840:
  7893   00164C  5001               	movf	colour_to_key@p1^0,w,c
  7894   00164E  6ED9               	movwf	fsr2l,c
  7895   001650  6ADA               	clrf	fsr2h,c
  7896   001652  0E02               	movlw	2
  7897   001654  26D9               	addwf	fsr2l,f,c
  7898   001656  0E01               	movlw	1
  7899   001658  50DB               	movf	plusw2,w,c
  7900   00165A  E107               	bnz	u2851
  7901   00165C  0E39               	movlw	57
  7902   00165E  5CDE               	subwf	postinc2,w,c
  7903   001660  B0D8               	btfsc	status,0,c
  7904   001662  EF35  F00B         	goto	u2851
  7905   001666  EF37  F00B         	goto	u2850
  7906   00166A                     u2851:
  7907   00166A  EF39  F00B         	goto	l3669
  7908   00166E                     u2850:
  7909   00166E                     
  7910                           ;color.c: 339:          ((13 <= p1->S) && (p1->S <= 56))) {;color.c: 340:         key = 
      +                          3;
  7911   00166E  0E03               	movlw	3
  7912   001670  6E05               	movwf	colour_to_key@key^0,c
  7913   001672                     l3669:
  7914                           
  7915                           ;color.c: 344:     if ( ((10 <= p1->H) && (p1->H <= 31)) &&
  7916   001672  5001               	movf	colour_to_key@p1^0,w,c
  7917   001674  6ED9               	movwf	fsr2l,c
  7918   001676  6ADA               	clrf	fsr2h,c
  7919   001678  0E01               	movlw	1
  7920   00167A  50DB               	movf	plusw2,w,c
  7921   00167C  E109               	bnz	u2860
  7922   00167E  0E0A               	movlw	10
  7923   001680  5CDE               	subwf	postinc2,w,c
  7924   001682  A0D8               	btfss	status,0,c
  7925   001684  EF46  F00B         	goto	u2861
  7926   001688  EF48  F00B         	goto	u2860
  7927   00168C                     u2861:
  7928   00168C  EF7B  F00B         	goto	l3679
  7929   001690                     u2860:
  7930   001690  5001               	movf	colour_to_key@p1^0,w,c
  7931   001692  6ED9               	movwf	fsr2l,c
  7932   001694  6ADA               	clrf	fsr2h,c
  7933   001696  0E01               	movlw	1
  7934   001698  50DB               	movf	plusw2,w,c
  7935   00169A  E107               	bnz	u2871
  7936   00169C  0E20               	movlw	32
  7937   00169E  5CDE               	subwf	postinc2,w,c
  7938   0016A0  B0D8               	btfsc	status,0,c
  7939   0016A2  EF55  F00B         	goto	u2871
  7940   0016A6  EF57  F00B         	goto	u2870
  7941   0016AA                     u2871:
  7942   0016AA  EF7B  F00B         	goto	l3679
  7943   0016AE                     u2870:
  7944   0016AE  5001               	movf	colour_to_key@p1^0,w,c
  7945   0016B0  6ED9               	movwf	fsr2l,c
  7946   0016B2  6ADA               	clrf	fsr2h,c
  7947   0016B4  0E02               	movlw	2
  7948   0016B6  26D9               	addwf	fsr2l,f,c
  7949   0016B8  0E01               	movlw	1
  7950   0016BA  50DB               	movf	plusw2,w,c
  7951   0016BC  E109               	bnz	u2880
  7952   0016BE  0E11               	movlw	17
  7953   0016C0  5CDE               	subwf	postinc2,w,c
  7954   0016C2  A0D8               	btfss	status,0,c
  7955   0016C4  EF66  F00B         	goto	u2881
  7956   0016C8  EF68  F00B         	goto	u2880
  7957   0016CC                     u2881:
  7958   0016CC  EF7B  F00B         	goto	l3679
  7959   0016D0                     u2880:
  7960   0016D0  5001               	movf	colour_to_key@p1^0,w,c
  7961   0016D2  6ED9               	movwf	fsr2l,c
  7962   0016D4  6ADA               	clrf	fsr2h,c
  7963   0016D6  0E02               	movlw	2
  7964   0016D8  26D9               	addwf	fsr2l,f,c
  7965   0016DA  0E01               	movlw	1
  7966   0016DC  50DB               	movf	plusw2,w,c
  7967   0016DE  E107               	bnz	u2891
  7968   0016E0  0E21               	movlw	33
  7969   0016E2  5CDE               	subwf	postinc2,w,c
  7970   0016E4  B0D8               	btfsc	status,0,c
  7971   0016E6  EF77  F00B         	goto	u2891
  7972   0016EA  EF79  F00B         	goto	u2890
  7973   0016EE                     u2891:
  7974   0016EE  EF7B  F00B         	goto	l3679
  7975   0016F2                     u2890:
  7976   0016F2                     
  7977                           ;color.c: 345:          ((17 <= p1->S) && (p1->S <= 32))) {;color.c: 346:         key = 
      +                          4;
  7978   0016F2  0E04               	movlw	4
  7979   0016F4  6E05               	movwf	colour_to_key@key^0,c
  7980   0016F6                     l3679:
  7981                           
  7982                           ;color.c: 350:     if ( ((279 <= p1->H) && (p1->H <= 360)) &&
  7983   0016F6  5001               	movf	colour_to_key@p1^0,w,c
  7984   0016F8  6ED9               	movwf	fsr2l,c
  7985   0016FA  6ADA               	clrf	fsr2h,c
  7986   0016FC  0E17               	movlw	23
  7987   0016FE  5CDE               	subwf	postinc2,w,c
  7988   001700  0E01               	movlw	1
  7989   001702  58DE               	subwfb	postinc2,w,c
  7990   001704  A0D8               	btfss	status,0,c
  7991   001706  EF87  F00B         	goto	u2901
  7992   00170A  EF89  F00B         	goto	u2900
  7993   00170E                     u2901:
  7994   00170E  EFBB  F00B         	goto	l3689
  7995   001712                     u2900:
  7996   001712  5001               	movf	colour_to_key@p1^0,w,c
  7997   001714  6ED9               	movwf	fsr2l,c
  7998   001716  6ADA               	clrf	fsr2h,c
  7999   001718  0E69               	movlw	105
  8000   00171A  5CDE               	subwf	postinc2,w,c
  8001   00171C  0E01               	movlw	1
  8002   00171E  58DE               	subwfb	postinc2,w,c
  8003   001720  B0D8               	btfsc	status,0,c
  8004   001722  EF95  F00B         	goto	u2911
  8005   001726  EF97  F00B         	goto	u2910
  8006   00172A                     u2911:
  8007   00172A  EFBB  F00B         	goto	l3689
  8008   00172E                     u2910:
  8009   00172E  5001               	movf	colour_to_key@p1^0,w,c
  8010   001730  6ED9               	movwf	fsr2l,c
  8011   001732  6ADA               	clrf	fsr2h,c
  8012   001734  0E02               	movlw	2
  8013   001736  26D9               	addwf	fsr2l,f,c
  8014   001738  0E01               	movlw	1
  8015   00173A  50DB               	movf	plusw2,w,c
  8016   00173C  E109               	bnz	u2920
  8017   00173E  0E0B               	movlw	11
  8018   001740  5CDE               	subwf	postinc2,w,c
  8019   001742  A0D8               	btfss	status,0,c
  8020   001744  EFA6  F00B         	goto	u2921
  8021   001748  EFA8  F00B         	goto	u2920
  8022   00174C                     u2921:
  8023   00174C  EFBB  F00B         	goto	l3689
  8024   001750                     u2920:
  8025   001750  5001               	movf	colour_to_key@p1^0,w,c
  8026   001752  6ED9               	movwf	fsr2l,c
  8027   001754  6ADA               	clrf	fsr2h,c
  8028   001756  0E02               	movlw	2
  8029   001758  26D9               	addwf	fsr2l,f,c
  8030   00175A  0E01               	movlw	1
  8031   00175C  50DB               	movf	plusw2,w,c
  8032   00175E  E107               	bnz	u2931
  8033   001760  0E10               	movlw	16
  8034   001762  5CDE               	subwf	postinc2,w,c
  8035   001764  B0D8               	btfsc	status,0,c
  8036   001766  EFB7  F00B         	goto	u2931
  8037   00176A  EFB9  F00B         	goto	u2930
  8038   00176E                     u2931:
  8039   00176E  EFBB  F00B         	goto	l3689
  8040   001772                     u2930:
  8041   001772                     
  8042                           ;color.c: 351:          ((11 <= p1->S) && (p1->S <= 15))) {;color.c: 352:         key = 
      +                          5;
  8043   001772  0E05               	movlw	5
  8044   001774  6E05               	movwf	colour_to_key@key^0,c
  8045   001776                     l3689:
  8046                           
  8047                           ;color.c: 356:     if ( ((298 <= p1->H) && (p1->H <= 360)) &&
  8048   001776  5001               	movf	colour_to_key@p1^0,w,c
  8049   001778  6ED9               	movwf	fsr2l,c
  8050   00177A  6ADA               	clrf	fsr2h,c
  8051   00177C  0E2A               	movlw	42
  8052   00177E  5CDE               	subwf	postinc2,w,c
  8053   001780  0E01               	movlw	1
  8054   001782  58DE               	subwfb	postinc2,w,c
  8055   001784  A0D8               	btfss	status,0,c
  8056   001786  EFC7  F00B         	goto	u2941
  8057   00178A  EFC9  F00B         	goto	u2940
  8058   00178E                     u2941:
  8059   00178E  EFFB  F00B         	goto	l3699
  8060   001792                     u2940:
  8061   001792  5001               	movf	colour_to_key@p1^0,w,c
  8062   001794  6ED9               	movwf	fsr2l,c
  8063   001796  6ADA               	clrf	fsr2h,c
  8064   001798  0E69               	movlw	105
  8065   00179A  5CDE               	subwf	postinc2,w,c
  8066   00179C  0E01               	movlw	1
  8067   00179E  58DE               	subwfb	postinc2,w,c
  8068   0017A0  B0D8               	btfsc	status,0,c
  8069   0017A2  EFD5  F00B         	goto	u2951
  8070   0017A6  EFD7  F00B         	goto	u2950
  8071   0017AA                     u2951:
  8072   0017AA  EFFB  F00B         	goto	l3699
  8073   0017AE                     u2950:
  8074   0017AE  5001               	movf	colour_to_key@p1^0,w,c
  8075   0017B0  6ED9               	movwf	fsr2l,c
  8076   0017B2  6ADA               	clrf	fsr2h,c
  8077   0017B4  0E02               	movlw	2
  8078   0017B6  26D9               	addwf	fsr2l,f,c
  8079   0017B8  0E01               	movlw	1
  8080   0017BA  50DB               	movf	plusw2,w,c
  8081   0017BC  E109               	bnz	u2960
  8082   0017BE  0E14               	movlw	20
  8083   0017C0  5CDE               	subwf	postinc2,w,c
  8084   0017C2  A0D8               	btfss	status,0,c
  8085   0017C4  EFE6  F00B         	goto	u2961
  8086   0017C8  EFE8  F00B         	goto	u2960
  8087   0017CC                     u2961:
  8088   0017CC  EFFB  F00B         	goto	l3699
  8089   0017D0                     u2960:
  8090   0017D0  5001               	movf	colour_to_key@p1^0,w,c
  8091   0017D2  6ED9               	movwf	fsr2l,c
  8092   0017D4  6ADA               	clrf	fsr2h,c
  8093   0017D6  0E02               	movlw	2
  8094   0017D8  26D9               	addwf	fsr2l,f,c
  8095   0017DA  0E01               	movlw	1
  8096   0017DC  50DB               	movf	plusw2,w,c
  8097   0017DE  E107               	bnz	u2971
  8098   0017E0  0E2E               	movlw	46
  8099   0017E2  5CDE               	subwf	postinc2,w,c
  8100   0017E4  B0D8               	btfsc	status,0,c
  8101   0017E6  EFF7  F00B         	goto	u2971
  8102   0017EA  EFF9  F00B         	goto	u2970
  8103   0017EE                     u2971:
  8104   0017EE  EFFB  F00B         	goto	l3699
  8105   0017F2                     u2970:
  8106   0017F2                     
  8107                           ;color.c: 357:          ((20 <= p1->S) && (p1->S <= 45))) {;color.c: 358:         key = 
      +                          6;
  8108   0017F2  0E06               	movlw	6
  8109   0017F4  6E05               	movwf	colour_to_key@key^0,c
  8110   0017F6                     l3699:
  8111                           
  8112                           ;color.c: 362:     if ( ((154 <= p1->H) && (p1->H <= 207)) &&
  8113   0017F6  5001               	movf	colour_to_key@p1^0,w,c
  8114   0017F8  6ED9               	movwf	fsr2l,c
  8115   0017FA  6ADA               	clrf	fsr2h,c
  8116   0017FC  0E01               	movlw	1
  8117   0017FE  50DB               	movf	plusw2,w,c
  8118   001800  E109               	bnz	u2980
  8119   001802  0E9A               	movlw	154
  8120   001804  5CDE               	subwf	postinc2,w,c
  8121   001806  A0D8               	btfss	status,0,c
  8122   001808  EF08  F00C         	goto	u2981
  8123   00180C  EF0A  F00C         	goto	u2980
  8124   001810                     u2981:
  8125   001810  EF3D  F00C         	goto	l3709
  8126   001814                     u2980:
  8127   001814  5001               	movf	colour_to_key@p1^0,w,c
  8128   001816  6ED9               	movwf	fsr2l,c
  8129   001818  6ADA               	clrf	fsr2h,c
  8130   00181A  0E01               	movlw	1
  8131   00181C  50DB               	movf	plusw2,w,c
  8132   00181E  E107               	bnz	u2991
  8133   001820  0ED0               	movlw	208
  8134   001822  5CDE               	subwf	postinc2,w,c
  8135   001824  B0D8               	btfsc	status,0,c
  8136   001826  EF17  F00C         	goto	u2991
  8137   00182A  EF19  F00C         	goto	u2990
  8138   00182E                     u2991:
  8139   00182E  EF3D  F00C         	goto	l3709
  8140   001832                     u2990:
  8141   001832  5001               	movf	colour_to_key@p1^0,w,c
  8142   001834  6ED9               	movwf	fsr2l,c
  8143   001836  6ADA               	clrf	fsr2h,c
  8144   001838  0E02               	movlw	2
  8145   00183A  26D9               	addwf	fsr2l,f,c
  8146   00183C  0E01               	movlw	1
  8147   00183E  50DB               	movf	plusw2,w,c
  8148   001840  E109               	bnz	u3000
  8149   001842  0E0D               	movlw	13
  8150   001844  5CDE               	subwf	postinc2,w,c
  8151   001846  A0D8               	btfss	status,0,c
  8152   001848  EF28  F00C         	goto	u3001
  8153   00184C  EF2A  F00C         	goto	u3000
  8154   001850                     u3001:
  8155   001850  EF3D  F00C         	goto	l3709
  8156   001854                     u3000:
  8157   001854  5001               	movf	colour_to_key@p1^0,w,c
  8158   001856  6ED9               	movwf	fsr2l,c
  8159   001858  6ADA               	clrf	fsr2h,c
  8160   00185A  0E02               	movlw	2
  8161   00185C  26D9               	addwf	fsr2l,f,c
  8162   00185E  0E01               	movlw	1
  8163   001860  50DB               	movf	plusw2,w,c
  8164   001862  E107               	bnz	u3011
  8165   001864  0E2E               	movlw	46
  8166   001866  5CDE               	subwf	postinc2,w,c
  8167   001868  B0D8               	btfsc	status,0,c
  8168   00186A  EF39  F00C         	goto	u3011
  8169   00186E  EF3B  F00C         	goto	u3010
  8170   001872                     u3011:
  8171   001872  EF3D  F00C         	goto	l3709
  8172   001876                     u3010:
  8173   001876                     
  8174                           ;color.c: 363:          ((13 <= p1->S) && (p1->S <= 45))) {;color.c: 364:         key = 
      +                          7;
  8175   001876  0E07               	movlw	7
  8176   001878  6E05               	movwf	colour_to_key@key^0,c
  8177   00187A                     l3709:
  8178                           
  8179                           ;color.c: 368:     if ( ((3000 <= p2->C) && (p2->C <= 40000)) &&
  8180   00187A  5002               	movf	colour_to_key@p2^0,w,c
  8181   00187C  6ED9               	movwf	fsr2l,c
  8182   00187E  6ADA               	clrf	fsr2h,c
  8183   001880  0E06               	movlw	6
  8184   001882  26D9               	addwf	fsr2l,f,c
  8185   001884  0EB8               	movlw	184
  8186   001886  5CDE               	subwf	postinc2,w,c
  8187   001888  0E0B               	movlw	11
  8188   00188A  58DE               	subwfb	postinc2,w,c
  8189   00188C  A0D8               	btfss	status,0,c
  8190   00188E  EF4B  F00C         	goto	u3021
  8191   001892  EF4D  F00C         	goto	u3020
  8192   001896                     u3021:
  8193   001896  EF70  F00C         	goto	l3717
  8194   00189A                     u3020:
  8195   00189A  5002               	movf	colour_to_key@p2^0,w,c
  8196   00189C  6ED9               	movwf	fsr2l,c
  8197   00189E  6ADA               	clrf	fsr2h,c
  8198   0018A0  0E06               	movlw	6
  8199   0018A2  26D9               	addwf	fsr2l,f,c
  8200   0018A4  0E41               	movlw	65
  8201   0018A6  5CDE               	subwf	postinc2,w,c
  8202   0018A8  0E9C               	movlw	156
  8203   0018AA  58DE               	subwfb	postinc2,w,c
  8204   0018AC  B0D8               	btfsc	status,0,c
  8205   0018AE  EF5B  F00C         	goto	u3031
  8206   0018B2  EF5D  F00C         	goto	u3030
  8207   0018B6                     u3031:
  8208   0018B6  EF70  F00C         	goto	l3717
  8209   0018BA                     u3030:
  8210   0018BA  5001               	movf	colour_to_key@p1^0,w,c
  8211   0018BC  6ED9               	movwf	fsr2l,c
  8212   0018BE  6ADA               	clrf	fsr2h,c
  8213   0018C0  0E02               	movlw	2
  8214   0018C2  26D9               	addwf	fsr2l,f,c
  8215   0018C4  0E01               	movlw	1
  8216   0018C6  50DB               	movf	plusw2,w,c
  8217   0018C8  E107               	bnz	u3041
  8218   0018CA  0E0B               	movlw	11
  8219   0018CC  5CDE               	subwf	postinc2,w,c
  8220   0018CE  B0D8               	btfsc	status,0,c
  8221   0018D0  EF6C  F00C         	goto	u3041
  8222   0018D4  EF6E  F00C         	goto	u3040
  8223   0018D8                     u3041:
  8224   0018D8  EF70  F00C         	goto	l3717
  8225   0018DC                     u3040:
  8226   0018DC                     
  8227                           ;color.c: 369:          ((p1->S <= 10))) {;color.c: 370:         key = 8;
  8228   0018DC  0E08               	movlw	8
  8229   0018DE  6E05               	movwf	colour_to_key@key^0,c
  8230   0018E0                     l3717:
  8231                           
  8232                           ;color.c: 374:     if ( ((1000 <= p2->C) && (p2->C <= 2600)) &&
  8233   0018E0  5002               	movf	colour_to_key@p2^0,w,c
  8234   0018E2  6ED9               	movwf	fsr2l,c
  8235   0018E4  6ADA               	clrf	fsr2h,c
  8236   0018E6  0E06               	movlw	6
  8237   0018E8  26D9               	addwf	fsr2l,f,c
  8238   0018EA  0EE8               	movlw	232
  8239   0018EC  5CDE               	subwf	postinc2,w,c
  8240   0018EE  0E03               	movlw	3
  8241   0018F0  58DE               	subwfb	postinc2,w,c
  8242   0018F2  A0D8               	btfss	status,0,c
  8243   0018F4  EF7E  F00C         	goto	u3051
  8244   0018F8  EF80  F00C         	goto	u3050
  8245   0018FC                     u3051:
  8246   0018FC  EFA3  F00C         	goto	l139
  8247   001900                     u3050:
  8248   001900  5002               	movf	colour_to_key@p2^0,w,c
  8249   001902  6ED9               	movwf	fsr2l,c
  8250   001904  6ADA               	clrf	fsr2h,c
  8251   001906  0E06               	movlw	6
  8252   001908  26D9               	addwf	fsr2l,f,c
  8253   00190A  0E29               	movlw	41
  8254   00190C  5CDE               	subwf	postinc2,w,c
  8255   00190E  0E0A               	movlw	10
  8256   001910  58DE               	subwfb	postinc2,w,c
  8257   001912  B0D8               	btfsc	status,0,c
  8258   001914  EF8E  F00C         	goto	u3061
  8259   001918  EF90  F00C         	goto	u3060
  8260   00191C                     u3061:
  8261   00191C  EFA3  F00C         	goto	l139
  8262   001920                     u3060:
  8263   001920  5001               	movf	colour_to_key@p1^0,w,c
  8264   001922  6ED9               	movwf	fsr2l,c
  8265   001924  6ADA               	clrf	fsr2h,c
  8266   001926  0E02               	movlw	2
  8267   001928  26D9               	addwf	fsr2l,f,c
  8268   00192A  0E01               	movlw	1
  8269   00192C  50DB               	movf	plusw2,w,c
  8270   00192E  E107               	bnz	u3071
  8271   001930  0E0D               	movlw	13
  8272   001932  5CDE               	subwf	postinc2,w,c
  8273   001934  B0D8               	btfsc	status,0,c
  8274   001936  EF9F  F00C         	goto	u3071
  8275   00193A  EFA1  F00C         	goto	u3070
  8276   00193E                     u3071:
  8277   00193E  EFA3  F00C         	goto	l139
  8278   001942                     u3070:
  8279   001942                     
  8280                           ;color.c: 375:          ((p1->S <= 12))) {;color.c: 376:         key = 9;
  8281   001942  0E09               	movlw	9
  8282   001944  6E05               	movwf	colour_to_key@key^0,c
  8283   001946                     l139:
  8284                           
  8285                           ;color.c: 379:     return key;
  8286   001946  5005               	movf	colour_to_key@key^0,w,c
  8287   001948  0012               	return		;funcret
  8288   00194A                     __end_of_colour_to_key:
  8289                           	callstack 0
  8290                           
  8291 ;; *************** function _average_RGBC *****************
  8292 ;; Defined at:
  8293 ;;		line 124 in file "color.c"
  8294 ;; Parameters:    Size  Location     Type
  8295 ;;  p               1   13[COMRAM] PTR struct RGBC_val
  8296 ;;		 -> main@RGBC_colour(8), 
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;  i               1   16[COMRAM] unsigned char 
  8299 ;;  temp_C          4   29[COMRAM] unsigned long 
  8300 ;;  temp_B          4   25[COMRAM] unsigned long 
  8301 ;;  temp_G          4   21[COMRAM] unsigned long 
  8302 ;;  temp_R          4   17[COMRAM] unsigned long 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      void 
  8305 ;; Registers used:
  8306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8312 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8313 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8314 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8315 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8316 ;;Total ram usage:       20 bytes
  8317 ;; Hardware stack levels used: 1
  8318 ;; Hardware stack levels required when called: 5
  8319 ;; This function calls:
  8320 ;;		___lldiv
  8321 ;;		_read_RGBC
  8322 ;; This function is called by:
  8323 ;;		_forward_navigation
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           	psect	text49
  8328   001D74                     __ptext49:
  8329                           	callstack 0
  8330   001D74                     _average_RGBC:
  8331                           	callstack 24
  8332   001D74                     
  8333                           ;color.c: 124: void average_RGBC(struct RGBC_val *p);color.c: 125: {;color.c: 127:     u
      +                          nsigned long temp_R = 0;
  8334   001D74  0E00               	movlw	0
  8335   001D76  6E12               	movwf	average_RGBC@temp_R^0,c
  8336   001D78  0E00               	movlw	0
  8337   001D7A  6E13               	movwf	(average_RGBC@temp_R+1)^0,c
  8338   001D7C  0E00               	movlw	0
  8339   001D7E  6E14               	movwf	(average_RGBC@temp_R+2)^0,c
  8340   001D80  0E00               	movlw	0
  8341   001D82  6E15               	movwf	(average_RGBC@temp_R+3)^0,c
  8342                           
  8343                           ;color.c: 128:     unsigned long temp_G = 0;
  8344   001D84  0E00               	movlw	0
  8345   001D86  6E16               	movwf	average_RGBC@temp_G^0,c
  8346   001D88  0E00               	movlw	0
  8347   001D8A  6E17               	movwf	(average_RGBC@temp_G+1)^0,c
  8348   001D8C  0E00               	movlw	0
  8349   001D8E  6E18               	movwf	(average_RGBC@temp_G+2)^0,c
  8350   001D90  0E00               	movlw	0
  8351   001D92  6E19               	movwf	(average_RGBC@temp_G+3)^0,c
  8352                           
  8353                           ;color.c: 129:     unsigned long temp_B = 0;
  8354   001D94  0E00               	movlw	0
  8355   001D96  6E1A               	movwf	average_RGBC@temp_B^0,c
  8356   001D98  0E00               	movlw	0
  8357   001D9A  6E1B               	movwf	(average_RGBC@temp_B+1)^0,c
  8358   001D9C  0E00               	movlw	0
  8359   001D9E  6E1C               	movwf	(average_RGBC@temp_B+2)^0,c
  8360   001DA0  0E00               	movlw	0
  8361   001DA2  6E1D               	movwf	(average_RGBC@temp_B+3)^0,c
  8362                           
  8363                           ;color.c: 130:     unsigned long temp_C = 0;
  8364   001DA4  0E00               	movlw	0
  8365   001DA6  6E1E               	movwf	average_RGBC@temp_C^0,c
  8366   001DA8  0E00               	movlw	0
  8367   001DAA  6E1F               	movwf	(average_RGBC@temp_C+1)^0,c
  8368   001DAC  0E00               	movlw	0
  8369   001DAE  6E20               	movwf	(average_RGBC@temp_C+2)^0,c
  8370   001DB0  0E00               	movlw	0
  8371   001DB2  6E21               	movwf	(average_RGBC@temp_C+3)^0,c
  8372                           
  8373                           ;color.c: 133:     for (unsigned char i = 0; i < sample_count; i++) {
  8374   001DB4  0E00               	movlw	0
  8375   001DB6  6E11               	movwf	average_RGBC@i^0,c
  8376   001DB8  EF25  F00F         	goto	l3499
  8377   001DBC                     l3487:
  8378                           
  8379                           ;color.c: 136:         read_RGBC(p);
  8380   001DBC  C00E  F00C         	movff	average_RGBC@p,read_RGBC@p
  8381   001DC0  ECC2  F019         	call	_read_RGBC	;wreg free
  8382   001DC4                     
  8383                           ;color.c: 139:         temp_R += (unsigned long)p->R;
  8384   001DC4  500E               	movf	average_RGBC@p^0,w,c
  8385   001DC6  6ED9               	movwf	fsr2l,c
  8386   001DC8  6ADA               	clrf	fsr2h,c
  8387   001DCA  CFDE F00F          	movff	postinc2,??_average_RGBC
  8388   001DCE  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8389   001DD2  500F               	movf	??_average_RGBC^0,w,c
  8390   001DD4  2612               	addwf	average_RGBC@temp_R^0,f,c
  8391   001DD6  5010               	movf	(??_average_RGBC+1)^0,w,c
  8392   001DD8  2213               	addwfc	(average_RGBC@temp_R+1)^0,f,c
  8393   001DDA  0E00               	movlw	0
  8394   001DDC  2214               	addwfc	(average_RGBC@temp_R+2)^0,f,c
  8395   001DDE  0E00               	movlw	0
  8396   001DE0  2215               	addwfc	(average_RGBC@temp_R+3)^0,f,c
  8397   001DE2                     
  8398                           ;color.c: 140:         temp_G += (unsigned long)p->G;
  8399   001DE2  500E               	movf	average_RGBC@p^0,w,c
  8400   001DE4  6ED9               	movwf	fsr2l,c
  8401   001DE6  6ADA               	clrf	fsr2h,c
  8402   001DE8  0E02               	movlw	2
  8403   001DEA  26D9               	addwf	fsr2l,f,c
  8404   001DEC  CFDE F00F          	movff	postinc2,??_average_RGBC
  8405   001DF0  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8406   001DF4  500F               	movf	??_average_RGBC^0,w,c
  8407   001DF6  2616               	addwf	average_RGBC@temp_G^0,f,c
  8408   001DF8  5010               	movf	(??_average_RGBC+1)^0,w,c
  8409   001DFA  2217               	addwfc	(average_RGBC@temp_G+1)^0,f,c
  8410   001DFC  0E00               	movlw	0
  8411   001DFE  2218               	addwfc	(average_RGBC@temp_G+2)^0,f,c
  8412   001E00  0E00               	movlw	0
  8413   001E02  2219               	addwfc	(average_RGBC@temp_G+3)^0,f,c
  8414   001E04                     
  8415                           ;color.c: 141:         temp_B += (unsigned long)p->B;
  8416   001E04  500E               	movf	average_RGBC@p^0,w,c
  8417   001E06  6ED9               	movwf	fsr2l,c
  8418   001E08  6ADA               	clrf	fsr2h,c
  8419   001E0A  0E04               	movlw	4
  8420   001E0C  26D9               	addwf	fsr2l,f,c
  8421   001E0E  CFDE F00F          	movff	postinc2,??_average_RGBC
  8422   001E12  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8423   001E16  500F               	movf	??_average_RGBC^0,w,c
  8424   001E18  261A               	addwf	average_RGBC@temp_B^0,f,c
  8425   001E1A  5010               	movf	(??_average_RGBC+1)^0,w,c
  8426   001E1C  221B               	addwfc	(average_RGBC@temp_B+1)^0,f,c
  8427   001E1E  0E00               	movlw	0
  8428   001E20  221C               	addwfc	(average_RGBC@temp_B+2)^0,f,c
  8429   001E22  0E00               	movlw	0
  8430   001E24  221D               	addwfc	(average_RGBC@temp_B+3)^0,f,c
  8431   001E26                     
  8432                           ;color.c: 142:         temp_C += (unsigned long)p->C;
  8433   001E26  500E               	movf	average_RGBC@p^0,w,c
  8434   001E28  6ED9               	movwf	fsr2l,c
  8435   001E2A  6ADA               	clrf	fsr2h,c
  8436   001E2C  0E06               	movlw	6
  8437   001E2E  26D9               	addwf	fsr2l,f,c
  8438   001E30  CFDE F00F          	movff	postinc2,??_average_RGBC
  8439   001E34  CFDD F010          	movff	postdec2,??_average_RGBC+1
  8440   001E38  500F               	movf	??_average_RGBC^0,w,c
  8441   001E3A  261E               	addwf	average_RGBC@temp_C^0,f,c
  8442   001E3C  5010               	movf	(??_average_RGBC+1)^0,w,c
  8443   001E3E  221F               	addwfc	(average_RGBC@temp_C+1)^0,f,c
  8444   001E40  0E00               	movlw	0
  8445   001E42  2220               	addwfc	(average_RGBC@temp_C+2)^0,f,c
  8446   001E44  0E00               	movlw	0
  8447   001E46  2221               	addwfc	(average_RGBC@temp_C+3)^0,f,c
  8448   001E48                     
  8449                           ;color.c: 143:     }
  8450   001E48  2A11               	incf	average_RGBC@i^0,f,c
  8451   001E4A                     l3499:
  8452   001E4A  0E13               	movlw	19
  8453   001E4C  6411               	cpfsgt	average_RGBC@i^0,c
  8454   001E4E  EF2B  F00F         	goto	u2611
  8455   001E52  EF2D  F00F         	goto	u2610
  8456   001E56                     u2611:
  8457   001E56  EFDE  F00E         	goto	l3487
  8458   001E5A                     u2610:
  8459   001E5A  C012  F001         	movff	average_RGBC@temp_R,___lldiv@dividend
  8460   001E5E  C013  F002         	movff	average_RGBC@temp_R+1,___lldiv@dividend+1
  8461   001E62  C014  F003         	movff	average_RGBC@temp_R+2,___lldiv@dividend+2
  8462   001E66  C015  F004         	movff	average_RGBC@temp_R+3,___lldiv@dividend+3
  8463   001E6A  0E14               	movlw	20
  8464   001E6C  6E05               	movwf	___lldiv@divisor^0,c
  8465   001E6E  0E00               	movlw	0
  8466   001E70  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8467   001E72  0E00               	movlw	0
  8468   001E74  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8469   001E76  0E00               	movlw	0
  8470   001E78  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8471   001E7A  ECF2  F015         	call	___lldiv	;wreg free
  8472   001E7E  C001  F012         	movff	?___lldiv,average_RGBC@temp_R
  8473   001E82  C002  F013         	movff	?___lldiv+1,average_RGBC@temp_R+1
  8474   001E86  C003  F014         	movff	?___lldiv+2,average_RGBC@temp_R+2
  8475   001E8A  C004  F015         	movff	?___lldiv+3,average_RGBC@temp_R+3
  8476   001E8E  C016  F001         	movff	average_RGBC@temp_G,___lldiv@dividend
  8477   001E92  C017  F002         	movff	average_RGBC@temp_G+1,___lldiv@dividend+1
  8478   001E96  C018  F003         	movff	average_RGBC@temp_G+2,___lldiv@dividend+2
  8479   001E9A  C019  F004         	movff	average_RGBC@temp_G+3,___lldiv@dividend+3
  8480   001E9E  0E14               	movlw	20
  8481   001EA0  6E05               	movwf	___lldiv@divisor^0,c
  8482   001EA2  0E00               	movlw	0
  8483   001EA4  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8484   001EA6  0E00               	movlw	0
  8485   001EA8  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8486   001EAA  0E00               	movlw	0
  8487   001EAC  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8488   001EAE  ECF2  F015         	call	___lldiv	;wreg free
  8489   001EB2  C001  F016         	movff	?___lldiv,average_RGBC@temp_G
  8490   001EB6  C002  F017         	movff	?___lldiv+1,average_RGBC@temp_G+1
  8491   001EBA  C003  F018         	movff	?___lldiv+2,average_RGBC@temp_G+2
  8492   001EBE  C004  F019         	movff	?___lldiv+3,average_RGBC@temp_G+3
  8493   001EC2  C01A  F001         	movff	average_RGBC@temp_B,___lldiv@dividend
  8494   001EC6  C01B  F002         	movff	average_RGBC@temp_B+1,___lldiv@dividend+1
  8495   001ECA  C01C  F003         	movff	average_RGBC@temp_B+2,___lldiv@dividend+2
  8496   001ECE  C01D  F004         	movff	average_RGBC@temp_B+3,___lldiv@dividend+3
  8497   001ED2  0E14               	movlw	20
  8498   001ED4  6E05               	movwf	___lldiv@divisor^0,c
  8499   001ED6  0E00               	movlw	0
  8500   001ED8  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8501   001EDA  0E00               	movlw	0
  8502   001EDC  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8503   001EDE  0E00               	movlw	0
  8504   001EE0  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8505   001EE2  ECF2  F015         	call	___lldiv	;wreg free
  8506   001EE6  C001  F01A         	movff	?___lldiv,average_RGBC@temp_B
  8507   001EEA  C002  F01B         	movff	?___lldiv+1,average_RGBC@temp_B+1
  8508   001EEE  C003  F01C         	movff	?___lldiv+2,average_RGBC@temp_B+2
  8509   001EF2  C004  F01D         	movff	?___lldiv+3,average_RGBC@temp_B+3
  8510   001EF6  C01E  F001         	movff	average_RGBC@temp_C,___lldiv@dividend
  8511   001EFA  C01F  F002         	movff	average_RGBC@temp_C+1,___lldiv@dividend+1
  8512   001EFE  C020  F003         	movff	average_RGBC@temp_C+2,___lldiv@dividend+2
  8513   001F02  C021  F004         	movff	average_RGBC@temp_C+3,___lldiv@dividend+3
  8514   001F06  0E14               	movlw	20
  8515   001F08  6E05               	movwf	___lldiv@divisor^0,c
  8516   001F0A  0E00               	movlw	0
  8517   001F0C  6E06               	movwf	(___lldiv@divisor+1)^0,c
  8518   001F0E  0E00               	movlw	0
  8519   001F10  6E07               	movwf	(___lldiv@divisor+2)^0,c
  8520   001F12  0E00               	movlw	0
  8521   001F14  6E08               	movwf	(___lldiv@divisor+3)^0,c
  8522   001F16  ECF2  F015         	call	___lldiv	;wreg free
  8523   001F1A  C001  F01E         	movff	?___lldiv,average_RGBC@temp_C
  8524   001F1E  C002  F01F         	movff	?___lldiv+1,average_RGBC@temp_C+1
  8525   001F22  C003  F020         	movff	?___lldiv+2,average_RGBC@temp_C+2
  8526   001F26  C004  F021         	movff	?___lldiv+3,average_RGBC@temp_C+3
  8527   001F2A                     
  8528                           ;color.c: 152:     p->R = (unsigned int)temp_R;
  8529   001F2A  500E               	movf	average_RGBC@p^0,w,c
  8530   001F2C  6ED9               	movwf	fsr2l,c
  8531   001F2E  6ADA               	clrf	fsr2h,c
  8532   001F30  C012  FFDE         	movff	average_RGBC@temp_R,postinc2
  8533   001F34  C013  FFDD         	movff	average_RGBC@temp_R+1,postdec2
  8534   001F38                     
  8535                           ;color.c: 153:     p->G = (unsigned int)temp_G;
  8536   001F38  500E               	movf	average_RGBC@p^0,w,c
  8537   001F3A  6ED9               	movwf	fsr2l,c
  8538   001F3C  6ADA               	clrf	fsr2h,c
  8539   001F3E  0E02               	movlw	2
  8540   001F40  26D9               	addwf	fsr2l,f,c
  8541   001F42  C016  FFDE         	movff	average_RGBC@temp_G,postinc2
  8542   001F46  C017  FFDD         	movff	average_RGBC@temp_G+1,postdec2
  8543   001F4A                     
  8544                           ;color.c: 154:     p->B = (unsigned int)temp_B;
  8545   001F4A  500E               	movf	average_RGBC@p^0,w,c
  8546   001F4C  6ED9               	movwf	fsr2l,c
  8547   001F4E  6ADA               	clrf	fsr2h,c
  8548   001F50  0E04               	movlw	4
  8549   001F52  26D9               	addwf	fsr2l,f,c
  8550   001F54  C01A  FFDE         	movff	average_RGBC@temp_B,postinc2
  8551   001F58  C01B  FFDD         	movff	average_RGBC@temp_B+1,postdec2
  8552   001F5C                     
  8553                           ;color.c: 155:     p->C = (unsigned int)temp_C;
  8554   001F5C  500E               	movf	average_RGBC@p^0,w,c
  8555   001F5E  6ED9               	movwf	fsr2l,c
  8556   001F60  6ADA               	clrf	fsr2h,c
  8557   001F62  0E06               	movlw	6
  8558   001F64  26D9               	addwf	fsr2l,f,c
  8559   001F66  C01E  FFDE         	movff	average_RGBC@temp_C,postinc2
  8560   001F6A  C01F  FFDD         	movff	average_RGBC@temp_C+1,postdec2
  8561   001F6E  0012               	return		;funcret
  8562   001F70                     __end_of_average_RGBC:
  8563                           	callstack 0
  8564                           
  8565 ;; *************** function _read_RGBC *****************
  8566 ;; Defined at:
  8567 ;;		line 112 in file "color.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  8570 ;;		 -> main@RGBC_colour(8), 
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;		None
  8573 ;; Return value:  Size  Location     Type
  8574 ;;                  1    wreg      void 
  8575 ;; Registers used:
  8576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8577 ;; Tracked objects:
  8578 ;;		On entry : 0/0
  8579 ;;		On exit  : 0/0
  8580 ;;		Unchanged: 0/0
  8581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8582 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8586 ;;Total ram usage:        1 bytes
  8587 ;; Hardware stack levels used: 1
  8588 ;; Hardware stack levels required when called: 4
  8589 ;; This function calls:
  8590 ;;		_color_read_Blue
  8591 ;;		_color_read_Clear
  8592 ;;		_color_read_Green
  8593 ;;		_color_read_Red
  8594 ;; This function is called by:
  8595 ;;		_average_RGBC
  8596 ;;		_wait_for_wall
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           	psect	text50
  8601   003384                     __ptext50:
  8602                           	callstack 0
  8603   003384                     _read_RGBC:
  8604                           	callstack 24
  8605   003384                     
  8606                           ;color.c: 112: void read_RGBC(struct RGBC_val *p);color.c: 113: {;color.c: 114:     p->R
      +                           = color_read_Red();
  8607   003384  ECED  F019         	call	_color_read_Red	;wreg free
  8608   003388  500C               	movf	read_RGBC@p^0,w,c
  8609   00338A  6ED9               	movwf	fsr2l,c
  8610   00338C  6ADA               	clrf	fsr2h,c
  8611   00338E  C005  FFDE         	movff	?_color_read_Red,postinc2
  8612   003392  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  8613                           
  8614                           ;color.c: 115:     p->G = color_read_Green();
  8615   003396  EC15  F01A         	call	_color_read_Green	;wreg free
  8616   00339A  500C               	movf	read_RGBC@p^0,w,c
  8617   00339C  6ED9               	movwf	fsr2l,c
  8618   00339E  6ADA               	clrf	fsr2h,c
  8619   0033A0  0E02               	movlw	2
  8620   0033A2  26D9               	addwf	fsr2l,f,c
  8621   0033A4  C005  FFDE         	movff	?_color_read_Green,postinc2
  8622   0033A8  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  8623                           
  8624                           ;color.c: 116:     p->B = color_read_Blue();
  8625   0033AC  EC65  F01A         	call	_color_read_Blue	;wreg free
  8626   0033B0  500C               	movf	read_RGBC@p^0,w,c
  8627   0033B2  6ED9               	movwf	fsr2l,c
  8628   0033B4  6ADA               	clrf	fsr2h,c
  8629   0033B6  0E04               	movlw	4
  8630   0033B8  26D9               	addwf	fsr2l,f,c
  8631   0033BA  C005  FFDE         	movff	?_color_read_Blue,postinc2
  8632   0033BE  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  8633                           
  8634                           ;color.c: 117:     p->C = color_read_Clear();
  8635   0033C2  EC3D  F01A         	call	_color_read_Clear	;wreg free
  8636   0033C6  500C               	movf	read_RGBC@p^0,w,c
  8637   0033C8  6ED9               	movwf	fsr2l,c
  8638   0033CA  6ADA               	clrf	fsr2h,c
  8639   0033CC  0E06               	movlw	6
  8640   0033CE  26D9               	addwf	fsr2l,f,c
  8641   0033D0  C005  FFDE         	movff	?_color_read_Clear,postinc2
  8642   0033D4  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  8643   0033D8  0012               	return		;funcret
  8644   0033DA                     __end_of_read_RGBC:
  8645                           	callstack 0
  8646                           
  8647 ;; *************** function _color_read_Red *****************
  8648 ;; Defined at:
  8649 ;;		line 40 in file "color.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;		None
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;  tmp             2    9[COMRAM] unsigned int 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  2    4[COMRAM] unsigned int 
  8656 ;; Registers used:
  8657 ;;		wreg, status,2, status,0, cstack
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8663 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8665 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8666 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8667 ;;Total ram usage:        7 bytes
  8668 ;; Hardware stack levels used: 1
  8669 ;; Hardware stack levels required when called: 3
  8670 ;; This function calls:
  8671 ;;		_I2C_2_Master_Read
  8672 ;;		_I2C_2_Master_RepStart
  8673 ;;		_I2C_2_Master_Start
  8674 ;;		_I2C_2_Master_Stop
  8675 ;;		_I2C_2_Master_Write
  8676 ;; This function is called by:
  8677 ;;		_read_RGBC
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           	psect	text51
  8682   0033DA                     __ptext51:
  8683                           	callstack 0
  8684   0033DA                     _color_read_Red:
  8685                           	callstack 24
  8686   0033DA                     
  8687                           ;color.c: 42:  unsigned int tmp;;color.c: 43:  I2C_2_Master_Start();
  8688   0033DA  ECF7  F01C         	call	_I2C_2_Master_Start	;wreg free
  8689                           
  8690                           ;color.c: 44:  I2C_2_Master_Write(0x52 | 0x00);
  8691   0033DE  0E52               	movlw	82
  8692   0033E0  ECDB  F01C         	call	_I2C_2_Master_Write
  8693                           
  8694                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  8695   0033E4  0EB6               	movlw	182
  8696   0033E6  ECDB  F01C         	call	_I2C_2_Master_Write
  8697                           
  8698                           ;color.c: 46:  I2C_2_Master_RepStart();
  8699   0033EA  ECED  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8700                           
  8701                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  8702   0033EE  0E53               	movlw	83
  8703   0033F0  ECDB  F01C         	call	_I2C_2_Master_Write
  8704                           
  8705                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  8706   0033F4  0E01               	movlw	1
  8707   0033F6  ECAF  F01A         	call	_I2C_2_Master_Read
  8708   0033FA  6E07               	movwf	??_color_read_Red^0,c
  8709   0033FC  5007               	movf	??_color_read_Red^0,w,c
  8710   0033FE  6E0A               	movwf	color_read_Red@tmp^0,c
  8711   003400  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  8712                           
  8713                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8714   003402  0E00               	movlw	0
  8715   003404  ECAF  F01A         	call	_I2C_2_Master_Read
  8716   003408  6E07               	movwf	??_color_read_Red^0,c
  8717   00340A  5007               	movf	??_color_read_Red^0,w,c
  8718   00340C  6E09               	movwf	(??_color_read_Red+2)^0,c
  8719   00340E  6A08               	clrf	(??_color_read_Red+1)^0,c
  8720   003410  500A               	movf	color_read_Red@tmp^0,w,c
  8721   003412  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  8722   003414  6E0A               	movwf	color_read_Red@tmp^0,c
  8723   003416  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  8724   003418  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  8725   00341A  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  8726                           
  8727                           ;color.c: 50:  I2C_2_Master_Stop();
  8728   00341C  ECF2  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8729   003420                     
  8730                           ;color.c: 51:  return tmp;
  8731   003420  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  8732   003424  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8733   003428  0012               	return		;funcret
  8734   00342A                     __end_of_color_read_Red:
  8735                           	callstack 0
  8736                           
  8737 ;; *************** function _color_read_Green *****************
  8738 ;; Defined at:
  8739 ;;		line 58 in file "color.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;		None
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;  tmp             2    9[COMRAM] unsigned int 
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  2    4[COMRAM] unsigned int 
  8746 ;; Registers used:
  8747 ;;		wreg, status,2, status,0, cstack
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8755 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8756 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8757 ;;Total ram usage:        7 bytes
  8758 ;; Hardware stack levels used: 1
  8759 ;; Hardware stack levels required when called: 3
  8760 ;; This function calls:
  8761 ;;		_I2C_2_Master_Read
  8762 ;;		_I2C_2_Master_RepStart
  8763 ;;		_I2C_2_Master_Start
  8764 ;;		_I2C_2_Master_Stop
  8765 ;;		_I2C_2_Master_Write
  8766 ;; This function is called by:
  8767 ;;		_read_RGBC
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text52
  8772   00342A                     __ptext52:
  8773                           	callstack 0
  8774   00342A                     _color_read_Green:
  8775                           	callstack 24
  8776   00342A                     
  8777                           ;color.c: 60:     unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
  8778   00342A  ECF7  F01C         	call	_I2C_2_Master_Start	;wreg free
  8779                           
  8780                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  8781   00342E  0E52               	movlw	82
  8782   003430  ECDB  F01C         	call	_I2C_2_Master_Write
  8783                           
  8784                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x18);
  8785   003434  0EB8               	movlw	184
  8786   003436  ECDB  F01C         	call	_I2C_2_Master_Write
  8787                           
  8788                           ;color.c: 64:  I2C_2_Master_RepStart();
  8789   00343A  ECED  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8790                           
  8791                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  8792   00343E  0E53               	movlw	83
  8793   003440  ECDB  F01C         	call	_I2C_2_Master_Write
  8794                           
  8795                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  8796   003444  0E01               	movlw	1
  8797   003446  ECAF  F01A         	call	_I2C_2_Master_Read
  8798   00344A  6E07               	movwf	??_color_read_Green^0,c
  8799   00344C  5007               	movf	??_color_read_Green^0,w,c
  8800   00344E  6E0A               	movwf	color_read_Green@tmp^0,c
  8801   003450  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  8802                           
  8803                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8804   003452  0E00               	movlw	0
  8805   003454  ECAF  F01A         	call	_I2C_2_Master_Read
  8806   003458  6E07               	movwf	??_color_read_Green^0,c
  8807   00345A  5007               	movf	??_color_read_Green^0,w,c
  8808   00345C  6E09               	movwf	(??_color_read_Green+2)^0,c
  8809   00345E  6A08               	clrf	(??_color_read_Green+1)^0,c
  8810   003460  500A               	movf	color_read_Green@tmp^0,w,c
  8811   003462  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  8812   003464  6E0A               	movwf	color_read_Green@tmp^0,c
  8813   003466  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  8814   003468  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  8815   00346A  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  8816                           
  8817                           ;color.c: 68:  I2C_2_Master_Stop();
  8818   00346C  ECF2  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8819   003470                     
  8820                           ;color.c: 69:  return tmp;
  8821   003470  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  8822   003474  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8823   003478  0012               	return		;funcret
  8824   00347A                     __end_of_color_read_Green:
  8825                           	callstack 0
  8826                           
  8827 ;; *************** function _color_read_Clear *****************
  8828 ;; Defined at:
  8829 ;;		line 94 in file "color.c"
  8830 ;; Parameters:    Size  Location     Type
  8831 ;;		None
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;  tmp             2    9[COMRAM] unsigned int 
  8834 ;; Return value:  Size  Location     Type
  8835 ;;                  2    4[COMRAM] unsigned int 
  8836 ;; Registers used:
  8837 ;;		wreg, status,2, status,0, cstack
  8838 ;; Tracked objects:
  8839 ;;		On entry : 0/0
  8840 ;;		On exit  : 0/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8843 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8845 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8846 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8847 ;;Total ram usage:        7 bytes
  8848 ;; Hardware stack levels used: 1
  8849 ;; Hardware stack levels required when called: 3
  8850 ;; This function calls:
  8851 ;;		_I2C_2_Master_Read
  8852 ;;		_I2C_2_Master_RepStart
  8853 ;;		_I2C_2_Master_Start
  8854 ;;		_I2C_2_Master_Stop
  8855 ;;		_I2C_2_Master_Write
  8856 ;; This function is called by:
  8857 ;;		_read_RGBC
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           	psect	text53
  8862   00347A                     __ptext53:
  8863                           	callstack 0
  8864   00347A                     _color_read_Clear:
  8865                           	callstack 24
  8866   00347A                     
  8867                           ;color.c: 96:     unsigned int tmp;;color.c: 97:  I2C_2_Master_Start();
  8868   00347A  ECF7  F01C         	call	_I2C_2_Master_Start	;wreg free
  8869                           
  8870                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
  8871   00347E  0E52               	movlw	82
  8872   003480  ECDB  F01C         	call	_I2C_2_Master_Write
  8873                           
  8874                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  8875   003484  0EB4               	movlw	180
  8876   003486  ECDB  F01C         	call	_I2C_2_Master_Write
  8877                           
  8878                           ;color.c: 100:  I2C_2_Master_RepStart();
  8879   00348A  ECED  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8880                           
  8881                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  8882   00348E  0E53               	movlw	83
  8883   003490  ECDB  F01C         	call	_I2C_2_Master_Write
  8884                           
  8885                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  8886   003494  0E01               	movlw	1
  8887   003496  ECAF  F01A         	call	_I2C_2_Master_Read
  8888   00349A  6E07               	movwf	??_color_read_Clear^0,c
  8889   00349C  5007               	movf	??_color_read_Clear^0,w,c
  8890   00349E  6E0A               	movwf	color_read_Clear@tmp^0,c
  8891   0034A0  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  8892                           
  8893                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8894   0034A2  0E00               	movlw	0
  8895   0034A4  ECAF  F01A         	call	_I2C_2_Master_Read
  8896   0034A8  6E07               	movwf	??_color_read_Clear^0,c
  8897   0034AA  5007               	movf	??_color_read_Clear^0,w,c
  8898   0034AC  6E09               	movwf	(??_color_read_Clear+2)^0,c
  8899   0034AE  6A08               	clrf	(??_color_read_Clear+1)^0,c
  8900   0034B0  500A               	movf	color_read_Clear@tmp^0,w,c
  8901   0034B2  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  8902   0034B4  6E0A               	movwf	color_read_Clear@tmp^0,c
  8903   0034B6  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  8904   0034B8  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  8905   0034BA  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  8906                           
  8907                           ;color.c: 104:  I2C_2_Master_Stop();
  8908   0034BC  ECF2  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8909   0034C0                     
  8910                           ;color.c: 105:  return tmp;
  8911   0034C0  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  8912   0034C4  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8913   0034C8  0012               	return		;funcret
  8914   0034CA                     __end_of_color_read_Clear:
  8915                           	callstack 0
  8916                           
  8917 ;; *************** function _color_read_Blue *****************
  8918 ;; Defined at:
  8919 ;;		line 76 in file "color.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;		None
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;  tmp             2    9[COMRAM] unsigned int 
  8924 ;; Return value:  Size  Location     Type
  8925 ;;                  2    4[COMRAM] unsigned int 
  8926 ;; Registers used:
  8927 ;;		wreg, status,2, status,0, cstack
  8928 ;; Tracked objects:
  8929 ;;		On entry : 0/0
  8930 ;;		On exit  : 0/0
  8931 ;;		Unchanged: 0/0
  8932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8935 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8936 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8937 ;;Total ram usage:        7 bytes
  8938 ;; Hardware stack levels used: 1
  8939 ;; Hardware stack levels required when called: 3
  8940 ;; This function calls:
  8941 ;;		_I2C_2_Master_Read
  8942 ;;		_I2C_2_Master_RepStart
  8943 ;;		_I2C_2_Master_Start
  8944 ;;		_I2C_2_Master_Stop
  8945 ;;		_I2C_2_Master_Write
  8946 ;; This function is called by:
  8947 ;;		_read_RGBC
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           	psect	text54
  8952   0034CA                     __ptext54:
  8953                           	callstack 0
  8954   0034CA                     _color_read_Blue:
  8955                           	callstack 24
  8956   0034CA                     
  8957                           ;color.c: 78:     unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  8958   0034CA  ECF7  F01C         	call	_I2C_2_Master_Start	;wreg free
  8959                           
  8960                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  8961   0034CE  0E52               	movlw	82
  8962   0034D0  ECDB  F01C         	call	_I2C_2_Master_Write
  8963                           
  8964                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x1A);
  8965   0034D4  0EBA               	movlw	186
  8966   0034D6  ECDB  F01C         	call	_I2C_2_Master_Write
  8967                           
  8968                           ;color.c: 82:  I2C_2_Master_RepStart();
  8969   0034DA  ECED  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8970                           
  8971                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  8972   0034DE  0E53               	movlw	83
  8973   0034E0  ECDB  F01C         	call	_I2C_2_Master_Write
  8974                           
  8975                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  8976   0034E4  0E01               	movlw	1
  8977   0034E6  ECAF  F01A         	call	_I2C_2_Master_Read
  8978   0034EA  6E07               	movwf	??_color_read_Blue^0,c
  8979   0034EC  5007               	movf	??_color_read_Blue^0,w,c
  8980   0034EE  6E0A               	movwf	color_read_Blue@tmp^0,c
  8981   0034F0  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  8982                           
  8983                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8984   0034F2  0E00               	movlw	0
  8985   0034F4  ECAF  F01A         	call	_I2C_2_Master_Read
  8986   0034F8  6E07               	movwf	??_color_read_Blue^0,c
  8987   0034FA  5007               	movf	??_color_read_Blue^0,w,c
  8988   0034FC  6E09               	movwf	(??_color_read_Blue+2)^0,c
  8989   0034FE  6A08               	clrf	(??_color_read_Blue+1)^0,c
  8990   003500  500A               	movf	color_read_Blue@tmp^0,w,c
  8991   003502  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  8992   003504  6E0A               	movwf	color_read_Blue@tmp^0,c
  8993   003506  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  8994   003508  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  8995   00350A  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  8996                           
  8997                           ;color.c: 86:  I2C_2_Master_Stop();
  8998   00350C  ECF2  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8999   003510                     
  9000                           ;color.c: 87:  return tmp;
  9001   003510  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  9002   003514  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  9003   003518  0012               	return		;funcret
  9004   00351A                     __end_of_color_read_Blue:
  9005                           	callstack 0
  9006                           
  9007 ;; *************** function _I2C_2_Master_RepStart *****************
  9008 ;; Defined at:
  9009 ;;		line 33 in file "i2c.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;		None
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;		None
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      void 
  9016 ;; Registers used:
  9017 ;;		wreg, status,2, status,0, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9027 ;;Total ram usage:        0 bytes
  9028 ;; Hardware stack levels used: 1
  9029 ;; Hardware stack levels required when called: 2
  9030 ;; This function calls:
  9031 ;;		_I2C_2_Master_Idle
  9032 ;; This function is called by:
  9033 ;;		_color_read_Red
  9034 ;;		_color_read_Green
  9035 ;;		_color_read_Blue
  9036 ;;		_color_read_Clear
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           	psect	text55
  9041   0039DA                     __ptext55:
  9042                           	callstack 0
  9043   0039DA                     _I2C_2_Master_RepStart:
  9044                           	callstack 24
  9045   0039DA                     
  9046                           ;i2c.c: 35:   I2C_2_Master_Idle();
  9047   0039DA  EC14  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9048   0039DE                     
  9049                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  9050   0039DE  010E               	movlb	14	; () banked
  9051   0039E0  83DA               	bsf	218,1,b	;volatile
  9052   0039E2                     
  9053                           ; BSR set to: 14
  9054   0039E2  0012               	return		;funcret
  9055   0039E4                     __end_of_I2C_2_Master_RepStart:
  9056                           	callstack 0
  9057                           
  9058 ;; *************** function _I2C_2_Master_Read *****************
  9059 ;; Defined at:
  9060 ;;		line 51 in file "i2c.c"
  9061 ;; Parameters:    Size  Location     Type
  9062 ;;  ack             1    wreg     unsigned char 
  9063 ;; Auto vars:     Size  Location     Type
  9064 ;;  ack             1    2[COMRAM] unsigned char 
  9065 ;;  tmp             1    3[COMRAM] unsigned char 
  9066 ;; Return value:  Size  Location     Type
  9067 ;;                  1    wreg      unsigned char 
  9068 ;; Registers used:
  9069 ;;		wreg, status,2, status,0, cstack
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9077 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9078 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9079 ;;Total ram usage:        3 bytes
  9080 ;; Hardware stack levels used: 1
  9081 ;; Hardware stack levels required when called: 2
  9082 ;; This function calls:
  9083 ;;		_I2C_2_Master_Idle
  9084 ;; This function is called by:
  9085 ;;		_color_read_Red
  9086 ;;		_color_read_Green
  9087 ;;		_color_read_Blue
  9088 ;;		_color_read_Clear
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           	psect	text56
  9093   00355E                     __ptext56:
  9094                           	callstack 0
  9095   00355E                     _I2C_2_Master_Read:
  9096                           	callstack 24
  9097                           
  9098                           ; BSR set to: 14
  9099                           ;incstack = 0
  9100                           ;I2C_2_Master_Read@ack stored from wreg
  9101   00355E  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  9102   003560                     
  9103                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  9104   003560  EC14  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9105   003564                     
  9106                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  9107   003564  010E               	movlb	14	; () banked
  9108   003566  87DA               	bsf	218,3,b	;volatile
  9109                           
  9110                           ;i2c.c: 56:   I2C_2_Master_Idle();
  9111   003568  EC14  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9112   00356C                     
  9113                           ;i2c.c: 57:   tmp = SSP2BUF;
  9114   00356C  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  9115                           
  9116                           ;i2c.c: 58:   I2C_2_Master_Idle();
  9117   003570  EC14  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9118   003574                     
  9119                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  9120   003574  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  9121   003576  B4D8               	btfsc	status,2,c
  9122   003578  EFC0  F01A         	goto	u1841
  9123   00357C  EFC4  F01A         	goto	u1840
  9124   003580                     u1841:
  9125   003580  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9126   003582  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  9127   003584  EFC5  F01A         	goto	u1858
  9128   003588                     u1840:
  9129   003588  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9130   00358A                     u1858:
  9131   00358A  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  9132   00358C  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  9133   00358E  010E               	movlb	14	; () banked
  9134   003590  51DA               	movf	218,w,b	;volatile
  9135   003592  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9136   003594  0BDF               	andlw	-33
  9137   003596  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9138   003598  6FDA               	movwf	218,b	;volatile
  9139   00359A                     
  9140                           ; BSR set to: 14
  9141                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  9142   00359A  89DA               	bsf	218,4,b	;volatile
  9143   00359C                     
  9144                           ; BSR set to: 14
  9145                           ;i2c.c: 61:   return tmp;
  9146   00359C  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  9147   00359E                     
  9148                           ; BSR set to: 14
  9149   00359E  0012               	return		;funcret
  9150   0035A0                     __end_of_I2C_2_Master_Read:
  9151                           	callstack 0
  9152                           
  9153 ;; *************** function ___lldiv *****************
  9154 ;; Defined at:
  9155 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;  dividend        4    0[COMRAM] unsigned long 
  9158 ;;  divisor         4    4[COMRAM] unsigned long 
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  quotient        4    8[COMRAM] unsigned long 
  9161 ;;  counter         1   12[COMRAM] unsigned char 
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  4    0[COMRAM] unsigned long 
  9164 ;; Registers used:
  9165 ;;		wreg, status,2, status,0
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9171 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9172 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9174 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9175 ;;Total ram usage:       13 bytes
  9176 ;; Hardware stack levels used: 1
  9177 ;; Hardware stack levels required when called: 1
  9178 ;; This function calls:
  9179 ;;		Nothing
  9180 ;; This function is called by:
  9181 ;;		_average_RGBC
  9182 ;;		_convert_HSV
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           	psect	text57
  9187   002BE4                     __ptext57:
  9188                           	callstack 0
  9189   002BE4                     ___lldiv:
  9190                           	callstack 27
  9191   002BE4  0E00               	movlw	0
  9192   002BE6  6E09               	movwf	___lldiv@quotient^0,c
  9193   002BE8  0E00               	movlw	0
  9194   002BEA  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  9195   002BEC  0E00               	movlw	0
  9196   002BEE  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  9197   002BF0  0E00               	movlw	0
  9198   002BF2  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  9199   002BF4  5005               	movf	___lldiv@divisor^0,w,c
  9200   002BF6  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  9201   002BF8  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  9202   002BFA  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  9203   002BFC  B4D8               	btfsc	status,2,c
  9204   002BFE  EF03  F016         	goto	u2081
  9205   002C02  EF05  F016         	goto	u2080
  9206   002C06                     u2081:
  9207   002C06  EF3B  F016         	goto	l776
  9208   002C0A                     u2080:
  9209   002C0A  0E01               	movlw	1
  9210   002C0C  6E0D               	movwf	___lldiv@counter^0,c
  9211   002C0E  EF0F  F016         	goto	l3233
  9212   002C12                     l3231:
  9213   002C12  90D8               	bcf	status,0,c
  9214   002C14  3605               	rlcf	___lldiv@divisor^0,f,c
  9215   002C16  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  9216   002C18  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  9217   002C1A  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  9218   002C1C  2A0D               	incf	___lldiv@counter^0,f,c
  9219   002C1E                     l3233:
  9220   002C1E  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  9221   002C20  EF14  F016         	goto	u2091
  9222   002C24  EF16  F016         	goto	u2090
  9223   002C28                     u2091:
  9224   002C28  EF09  F016         	goto	l3231
  9225   002C2C                     u2090:
  9226   002C2C                     l3235:
  9227   002C2C  90D8               	bcf	status,0,c
  9228   002C2E  3609               	rlcf	___lldiv@quotient^0,f,c
  9229   002C30  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  9230   002C32  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  9231   002C34  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  9232   002C36  5005               	movf	___lldiv@divisor^0,w,c
  9233   002C38  5C01               	subwf	___lldiv@dividend^0,w,c
  9234   002C3A  5006               	movf	(___lldiv@divisor+1)^0,w,c
  9235   002C3C  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  9236   002C3E  5007               	movf	(___lldiv@divisor+2)^0,w,c
  9237   002C40  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  9238   002C42  5008               	movf	(___lldiv@divisor+3)^0,w,c
  9239   002C44  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  9240   002C46  A0D8               	btfss	status,0,c
  9241   002C48  EF28  F016         	goto	u2101
  9242   002C4C  EF2A  F016         	goto	u2100
  9243   002C50                     u2101:
  9244   002C50  EF33  F016         	goto	l3243
  9245   002C54                     u2100:
  9246   002C54  5005               	movf	___lldiv@divisor^0,w,c
  9247   002C56  5E01               	subwf	___lldiv@dividend^0,f,c
  9248   002C58  5006               	movf	(___lldiv@divisor+1)^0,w,c
  9249   002C5A  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  9250   002C5C  5007               	movf	(___lldiv@divisor+2)^0,w,c
  9251   002C5E  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  9252   002C60  5008               	movf	(___lldiv@divisor+3)^0,w,c
  9253   002C62  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  9254   002C64  8009               	bsf	___lldiv@quotient^0,0,c
  9255   002C66                     l3243:
  9256   002C66  90D8               	bcf	status,0,c
  9257   002C68  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  9258   002C6A  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  9259   002C6C  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  9260   002C6E  3205               	rrcf	___lldiv@divisor^0,f,c
  9261   002C70  2E0D               	decfsz	___lldiv@counter^0,f,c
  9262   002C72  EF16  F016         	goto	l3235
  9263   002C76                     l776:
  9264   002C76  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9265   002C7A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9266   002C7E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9267   002C82  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9268   002C86  0012               	return		;funcret
  9269   002C88                     __end_of___lldiv:
  9270                           	callstack 0
  9271                           
  9272 ;; *************** function _color_click_init *****************
  9273 ;; Defined at:
  9274 ;;		line 7 in file "color.c"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;		None
  9277 ;; Auto vars:     Size  Location     Type
  9278 ;;		None
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  1    wreg      void 
  9281 ;; Registers used:
  9282 ;;		wreg, status,2, status,0, cstack
  9283 ;; Tracked objects:
  9284 ;;		On entry : 0/0
  9285 ;;		On exit  : 0/0
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9291 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9292 ;;Total ram usage:        1 bytes
  9293 ;; Hardware stack levels used: 1
  9294 ;; Hardware stack levels required when called: 4
  9295 ;; This function calls:
  9296 ;;		_I2C_2_Master_Init
  9297 ;;		_color_writetoaddr
  9298 ;; This function is called by:
  9299 ;;		_main
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           	psect	text58
  9304   003772                     __ptext58:
  9305                           	callstack 0
  9306   003772                     _color_click_init:
  9307                           	callstack 26
  9308   003772                     
  9309                           ;color.c: 10:     I2C_2_Master_Init();
  9310   003772  ECFF  F01B         	call	_I2C_2_Master_Init	;wreg free
  9311   003776                     
  9312                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
  9313   003776  0E01               	movlw	1
  9314   003778  6E03               	movwf	color_writetoaddr@value^0,c
  9315   00377A  0E00               	movlw	0
  9316   00377C  ECA3  F01C         	call	_color_writetoaddr
  9317   003780                     
  9318                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  9319   003780  0E3F               	movlw	63
  9320   003782  6E05               	movwf	??_color_click_init^0,c
  9321   003784  0E55               	movlw	85
  9322   003786                     u3477:
  9323   003786  2EE8               	decfsz	wreg,f,c
  9324   003788  D7FE               	bra	u3477
  9325   00378A  2E05               	decfsz	??_color_click_init^0,f,c
  9326   00378C  D7FC               	bra	u3477
  9327   00378E  0000               	nop	
  9328   003790                     
  9329                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  9330   003790  0E03               	movlw	3
  9331   003792  6E03               	movwf	color_writetoaddr@value^0,c
  9332   003794  0E00               	movlw	0
  9333   003796  ECA3  F01C         	call	_color_writetoaddr
  9334   00379A                     
  9335                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  9336   00379A  0ED5               	movlw	213
  9337   00379C  6E03               	movwf	color_writetoaddr@value^0,c
  9338   00379E  0E01               	movlw	1
  9339   0037A0  ECA3  F01C         	call	_color_writetoaddr
  9340   0037A4  0012               	return		;funcret
  9341   0037A6                     __end_of_color_click_init:
  9342                           	callstack 0
  9343                           
  9344 ;; *************** function _color_writetoaddr *****************
  9345 ;; Defined at:
  9346 ;;		line 28 in file "color.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  address         1    wreg     unsigned char 
  9349 ;;  value           1    2[COMRAM] unsigned char 
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;  address         1    3[COMRAM] unsigned char 
  9352 ;; Return value:  Size  Location     Type
  9353 ;;                  1    wreg      void 
  9354 ;; Registers used:
  9355 ;;		wreg, status,2, status,0, cstack
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9361 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9365 ;;Total ram usage:        2 bytes
  9366 ;; Hardware stack levels used: 1
  9367 ;; Hardware stack levels required when called: 3
  9368 ;; This function calls:
  9369 ;;		_I2C_2_Master_Start
  9370 ;;		_I2C_2_Master_Stop
  9371 ;;		_I2C_2_Master_Write
  9372 ;; This function is called by:
  9373 ;;		_color_click_init
  9374 ;; This function uses a non-reentrant model
  9375 ;;
  9376                           
  9377                           	psect	text59
  9378   003946                     __ptext59:
  9379                           	callstack 0
  9380   003946                     _color_writetoaddr:
  9381                           	callstack 26
  9382                           
  9383                           ;incstack = 0
  9384                           ;color_writetoaddr@address stored from wreg
  9385   003946  6E04               	movwf	color_writetoaddr@address^0,c
  9386   003948                     
  9387                           ;color.c: 29:     I2C_2_Master_Start();
  9388   003948  ECF7  F01C         	call	_I2C_2_Master_Start	;wreg free
  9389                           
  9390                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  9391   00394C  0E52               	movlw	82
  9392   00394E  ECDB  F01C         	call	_I2C_2_Master_Write
  9393                           
  9394                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  9395   003952  5004               	movf	color_writetoaddr@address^0,w,c
  9396   003954  0980               	iorlw	128
  9397   003956  ECDB  F01C         	call	_I2C_2_Master_Write
  9398                           
  9399                           ;color.c: 32:     I2C_2_Master_Write(value);
  9400   00395A  5003               	movf	color_writetoaddr@value^0,w,c
  9401   00395C  ECDB  F01C         	call	_I2C_2_Master_Write
  9402                           
  9403                           ;color.c: 33:     I2C_2_Master_Stop();
  9404   003960  ECF2  F01C         	call	_I2C_2_Master_Stop	;wreg free
  9405   003964  0012               	return		;funcret
  9406   003966                     __end_of_color_writetoaddr:
  9407                           	callstack 0
  9408                           
  9409 ;; *************** function _I2C_2_Master_Write *****************
  9410 ;; Defined at:
  9411 ;;		line 45 in file "i2c.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;  data_byte       1    wreg     unsigned char 
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;  data_byte       1    1[COMRAM] unsigned char 
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  1    wreg      void 
  9418 ;; Registers used:
  9419 ;;		wreg, status,2, status,0, cstack
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9426 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9429 ;;Total ram usage:        1 bytes
  9430 ;; Hardware stack levels used: 1
  9431 ;; Hardware stack levels required when called: 2
  9432 ;; This function calls:
  9433 ;;		_I2C_2_Master_Idle
  9434 ;; This function is called by:
  9435 ;;		_color_writetoaddr
  9436 ;;		_color_read_Red
  9437 ;;		_color_read_Green
  9438 ;;		_color_read_Blue
  9439 ;;		_color_read_Clear
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text60
  9444   0039B6                     __ptext60:
  9445                           	callstack 0
  9446   0039B6                     _I2C_2_Master_Write:
  9447                           	callstack 24
  9448                           
  9449                           ;incstack = 0
  9450                           ;I2C_2_Master_Write@data_byte stored from wreg
  9451   0039B6  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  9452   0039B8                     
  9453                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  9454   0039B8  EC14  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9455   0039BC                     
  9456                           ;i2c.c: 48:   SSP2BUF = data_byte;
  9457   0039BC  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  9458   0039C0  0012               	return		;funcret
  9459   0039C2                     __end_of_I2C_2_Master_Write:
  9460                           	callstack 0
  9461                           
  9462 ;; *************** function _I2C_2_Master_Stop *****************
  9463 ;; Defined at:
  9464 ;;		line 39 in file "i2c.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;		None
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;		None
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  1    wreg      void 
  9471 ;; Registers used:
  9472 ;;		wreg, status,2, status,0, cstack
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9482 ;;Total ram usage:        0 bytes
  9483 ;; Hardware stack levels used: 1
  9484 ;; Hardware stack levels required when called: 2
  9485 ;; This function calls:
  9486 ;;		_I2C_2_Master_Idle
  9487 ;; This function is called by:
  9488 ;;		_color_writetoaddr
  9489 ;;		_color_read_Red
  9490 ;;		_color_read_Green
  9491 ;;		_color_read_Blue
  9492 ;;		_color_read_Clear
  9493 ;; This function uses a non-reentrant model
  9494 ;;
  9495                           
  9496                           	psect	text61
  9497   0039E4                     __ptext61:
  9498                           	callstack 0
  9499   0039E4                     _I2C_2_Master_Stop:
  9500                           	callstack 24
  9501   0039E4                     
  9502                           ;i2c.c: 41:   I2C_2_Master_Idle();
  9503   0039E4  EC14  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9504   0039E8                     
  9505                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  9506   0039E8  010E               	movlb	14	; () banked
  9507   0039EA  85DA               	bsf	218,2,b	;volatile
  9508   0039EC                     
  9509                           ; BSR set to: 14
  9510   0039EC  0012               	return		;funcret
  9511   0039EE                     __end_of_I2C_2_Master_Stop:
  9512                           	callstack 0
  9513                           
  9514 ;; *************** function _I2C_2_Master_Start *****************
  9515 ;; Defined at:
  9516 ;;		line 27 in file "i2c.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;		None
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;		None
  9521 ;; Return value:  Size  Location     Type
  9522 ;;                  1    wreg      void 
  9523 ;; Registers used:
  9524 ;;		wreg, status,2, status,0, cstack
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9534 ;;Total ram usage:        0 bytes
  9535 ;; Hardware stack levels used: 1
  9536 ;; Hardware stack levels required when called: 2
  9537 ;; This function calls:
  9538 ;;		_I2C_2_Master_Idle
  9539 ;; This function is called by:
  9540 ;;		_color_writetoaddr
  9541 ;;		_color_read_Red
  9542 ;;		_color_read_Green
  9543 ;;		_color_read_Blue
  9544 ;;		_color_read_Clear
  9545 ;; This function uses a non-reentrant model
  9546 ;;
  9547                           
  9548                           	psect	text62
  9549   0039EE                     __ptext62:
  9550                           	callstack 0
  9551   0039EE                     _I2C_2_Master_Start:
  9552                           	callstack 24
  9553   0039EE                     
  9554                           ;i2c.c: 29:   I2C_2_Master_Idle();
  9555   0039EE  EC14  F01C         	call	_I2C_2_Master_Idle	;wreg free
  9556   0039F2                     
  9557                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  9558   0039F2  010E               	movlb	14	; () banked
  9559   0039F4  81DA               	bsf	218,0,b	;volatile
  9560   0039F6                     
  9561                           ; BSR set to: 14
  9562   0039F6  0012               	return		;funcret
  9563   0039F8                     __end_of_I2C_2_Master_Start:
  9564                           	callstack 0
  9565                           
  9566 ;; *************** function _I2C_2_Master_Idle *****************
  9567 ;; Defined at:
  9568 ;;		line 22 in file "i2c.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;		None
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;		None
  9573 ;; Return value:  Size  Location     Type
  9574 ;;                  1    wreg      void 
  9575 ;; Registers used:
  9576 ;;		wreg, status,2, status,0
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9584 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9586 ;;Total ram usage:        1 bytes
  9587 ;; Hardware stack levels used: 1
  9588 ;; Hardware stack levels required when called: 1
  9589 ;; This function calls:
  9590 ;;		Nothing
  9591 ;; This function is called by:
  9592 ;;		_I2C_2_Master_Start
  9593 ;;		_I2C_2_Master_RepStart
  9594 ;;		_I2C_2_Master_Stop
  9595 ;;		_I2C_2_Master_Write
  9596 ;;		_I2C_2_Master_Read
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           	psect	text63
  9601   003828                     __ptext63:
  9602                           	callstack 0
  9603   003828                     _I2C_2_Master_Idle:
  9604                           	callstack 24
  9605   003828                     l323:
  9606   003828  010E               	movlb	14	; () banked
  9607   00382A  B5D8               	btfsc	216,2,b	;volatile
  9608   00382C  EF1A  F01C         	goto	u1761
  9609   003830  EF1C  F01C         	goto	u1760
  9610   003834                     u1761:
  9611   003834  EF14  F01C         	goto	l323
  9612   003838                     u1760:
  9613   003838                     
  9614                           ; BSR set to: 14
  9615   003838  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9616   00383C  0E1F               	movlw	31
  9617   00383E  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  9618   003840  A4D8               	btfss	status,2,c
  9619   003842  EF25  F01C         	goto	u1771
  9620   003846  EF27  F01C         	goto	u1770
  9621   00384A                     u1771:
  9622   00384A  EF14  F01C         	goto	l323
  9623   00384E                     u1770:
  9624   00384E                     
  9625                           ; BSR set to: 14
  9626   00384E  0012               	return		;funcret
  9627   003850                     __end_of_I2C_2_Master_Idle:
  9628                           	callstack 0
  9629                           
  9630 ;; *************** function _I2C_2_Master_Init *****************
  9631 ;; Defined at:
  9632 ;;		line 4 in file "i2c.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;		None
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;		None
  9637 ;; Return value:  Size  Location     Type
  9638 ;;                  1    wreg      void 
  9639 ;; Registers used:
  9640 ;;		wreg, status,2
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9650 ;;Total ram usage:        0 bytes
  9651 ;; Hardware stack levels used: 1
  9652 ;; Hardware stack levels required when called: 1
  9653 ;; This function calls:
  9654 ;;		Nothing
  9655 ;; This function is called by:
  9656 ;;		_color_click_init
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	text64
  9661   0037FE                     __ptext64:
  9662                           	callstack 0
  9663   0037FE                     _I2C_2_Master_Init:
  9664                           	callstack 28
  9665   0037FE                     
  9666                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  9667   0037FE  010E               	movlb	14	; () banked
  9668   003800  51D9               	movf	217,w,b	;volatile
  9669   003802  0BF0               	andlw	-16
  9670   003804  0908               	iorlw	8
  9671   003806  6FD9               	movwf	217,b	;volatile
  9672   003808                     
  9673                           ; BSR set to: 14
  9674                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  9675   003808  8BD9               	bsf	217,5,b	;volatile
  9676                           
  9677                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  9678   00380A  0E9F               	movlw	159
  9679   00380C  6FD6               	movwf	214,b	;volatile
  9680   00380E                     
  9681                           ; BSR set to: 14
  9682                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  9683   00380E  8A84               	bsf	132,5,c	;volatile
  9684   003810                     
  9685                           ; BSR set to: 14
  9686                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  9687   003810  8C84               	bsf	132,6,c	;volatile
  9688   003812                     
  9689                           ; BSR set to: 14
  9690                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  9691   003812  9BA7               	bcf	167,5,b	;volatile
  9692   003814                     
  9693                           ; BSR set to: 14
  9694                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  9695   003814  9DA7               	bcf	167,6,b	;volatile
  9696                           
  9697                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  9698   003816  0E1D               	movlw	29
  9699   003818  6F1D               	movwf	29,b	;volatile
  9700                           
  9701                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  9702   00381A  0E1E               	movlw	30
  9703   00381C  6F1C               	movwf	28,b	;volatile
  9704                           
  9705                           ;i2c.c: 18:   RD5PPS=0x1C;
  9706   00381E  0E1C               	movlw	28
  9707   003820  6F6F               	movwf	111,b	;volatile
  9708                           
  9709                           ;i2c.c: 19:   RD6PPS=0x1B;
  9710   003822  0E1B               	movlw	27
  9711   003824  6F70               	movwf	112,b	;volatile
  9712   003826                     
  9713                           ; BSR set to: 14
  9714   003826  0012               	return		;funcret
  9715   003828                     __end_of_I2C_2_Master_Init:
  9716                           	callstack 0
  9717                           
  9718 ;; *************** function _buggy_lights_init *****************
  9719 ;; Defined at:
  9720 ;;		line 7 in file "buggy_lights.c"
  9721 ;; Parameters:    Size  Location     Type
  9722 ;;		None
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;		None
  9725 ;; Return value:  Size  Location     Type
  9726 ;;                  1    wreg      void 
  9727 ;; Registers used:
  9728 ;;		None
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9738 ;;Total ram usage:        0 bytes
  9739 ;; Hardware stack levels used: 1
  9740 ;; Hardware stack levels required when called: 1
  9741 ;; This function calls:
  9742 ;;		Nothing
  9743 ;; This function is called by:
  9744 ;;		_main
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           	psect	text65
  9749   0037A6                     __ptext65:
  9750                           	callstack 0
  9751   0037A6                     _buggy_lights_init:
  9752                           	callstack 29
  9753   0037A6                     
  9754                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
  9755   0037A6  9884               	bcf	132,4,c	;volatile
  9756                           
  9757                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
  9758   0037A8  9288               	bcf	136,1,c	;volatile
  9759                           
  9760                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
  9761   0037AA  9684               	bcf	132,3,c	;volatile
  9762                           
  9763                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
  9764   0037AC  9086               	bcf	134,0,c	;volatile
  9765                           
  9766                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
  9767   0037AE  9088               	bcf	136,0,c	;volatile
  9768                           
  9769                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
  9770   0037B0  987C               	bcf	124,4,c	;volatile
  9771                           
  9772                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
  9773   0037B2  9280               	bcf	128,1,c	;volatile
  9774                           
  9775                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
  9776   0037B4  967C               	bcf	124,3,c	;volatile
  9777                           
  9778                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
  9779   0037B6  907E               	bcf	126,0,c	;volatile
  9780                           
  9781                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
  9782   0037B8  9080               	bcf	128,0,c	;volatile
  9783                           
  9784                           ;buggy_lights.c: 26:             TRISGbits.TRISG0 = 0;
  9785   0037BA  9087               	bcf	135,0,c	;volatile
  9786                           
  9787                           ;buggy_lights.c: 27:             TRISEbits.TRISE7 = 0;
  9788   0037BC  9E85               	bcf	133,7,c	;volatile
  9789                           
  9790                           ;buggy_lights.c: 28:             TRISAbits.TRISA3 = 0;
  9791   0037BE  9681               	bcf	129,3,c	;volatile
  9792                           
  9793                           ;buggy_lights.c: 30:             LATGbits.LATG0 = 0;
  9794   0037C0  907F               	bcf	127,0,c	;volatile
  9795                           
  9796                           ;buggy_lights.c: 31:             LATEbits.LATE7 = 0;
  9797   0037C2  9E7D               	bcf	125,7,c	;volatile
  9798                           
  9799                           ;buggy_lights.c: 32:             LATAbits.LATA3 = 0;
  9800   0037C4  9679               	bcf	121,3,c	;volatile
  9801                           
  9802                           ;buggy_lights.c: 36:             TRISGbits.TRISG1 = 0;
  9803   0037C6  9287               	bcf	135,1,c	;volatile
  9804                           
  9805                           ;buggy_lights.c: 37:             TRISAbits.TRISA4 = 0;
  9806   0037C8  9881               	bcf	129,4,c	;volatile
  9807                           
  9808                           ;buggy_lights.c: 38:             TRISFbits.TRISF7 = 0;
  9809   0037CA  9E86               	bcf	134,7,c	;volatile
  9810                           
  9811                           ;buggy_lights.c: 40:             LATGbits.LATG1 = 0;
  9812   0037CC  927F               	bcf	127,1,c	;volatile
  9813                           
  9814                           ;buggy_lights.c: 41:             LATAbits.LATA4 = 0;
  9815   0037CE  9879               	bcf	121,4,c	;volatile
  9816                           
  9817                           ;buggy_lights.c: 42:             LATFbits.LATF7 = 0;
  9818   0037D0  9E7E               	bcf	126,7,c	;volatile
  9819   0037D2  0012               	return		;funcret
  9820   0037D4                     __end_of_buggy_lights_init:
  9821                           	callstack 0
  9822                           
  9823 ;; *************** function _Timer0_init *****************
  9824 ;; Defined at:
  9825 ;;		line 7 in file "timers.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;		None
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;		None
  9830 ;; Return value:  Size  Location     Type
  9831 ;;                  1    wreg      void 
  9832 ;; Registers used:
  9833 ;;		wreg, status,2, cstack
  9834 ;; Tracked objects:
  9835 ;;		On entry : 0/0
  9836 ;;		On exit  : 0/0
  9837 ;;		Unchanged: 0/0
  9838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9843 ;;Total ram usage:        0 bytes
  9844 ;; Hardware stack levels used: 1
  9845 ;; Hardware stack levels required when called: 3
  9846 ;; This function calls:
  9847 ;;		_reset_timer
  9848 ;; This function is called by:
  9849 ;;		_main
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           	psect	text66
  9854   0038E4                     __ptext66:
  9855                           	callstack 0
  9856   0038E4                     _Timer0_init:
  9857                           	callstack 27
  9858   0038E4                     
  9859                           ;timers.c: 9:     T0CON1bits.T0CS = 0b010;
  9860   0038E4  50D6               	movf	214,w,c	;volatile
  9861   0038E6  0B1F               	andlw	-225
  9862   0038E8  0940               	iorlw	64
  9863   0038EA  6ED6               	movwf	214,c	;volatile
  9864   0038EC                     
  9865                           ;timers.c: 10:     T0CON1bits.T0ASYNC = 1;
  9866   0038EC  88D6               	bsf	214,4,c	;volatile
  9867   0038EE                     
  9868                           ;timers.c: 14:     T0CON0bits.T016BIT = 1;
  9869   0038EE  88D5               	bsf	213,4,c	;volatile
  9870                           
  9871                           ;timers.c: 15:     T0CON1bits.T0CKPS = 0b1110;
  9872   0038F0  50D6               	movf	214,w,c	;volatile
  9873   0038F2  0BF0               	andlw	-16
  9874   0038F4  090E               	iorlw	14
  9875   0038F6  6ED6               	movwf	214,c	;volatile
  9876   0038F8                     
  9877                           ;timers.c: 20:     reset_timer();
  9878   0038F8  ECE1  F01C         	call	_reset_timer	;wreg free
  9879   0038FC                     
  9880                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
  9881   0038FC  010E               	movlb	14	; () banked
  9882   0038FE  8B29               	bsf	41,5,b	;volatile
  9883   003900                     
  9884                           ; BSR set to: 14
  9885                           ;timers.c: 23:     INTCONbits.PEIE = 1;
  9886   003900  8CF2               	bsf	242,6,c	;volatile
  9887   003902                     
  9888                           ; BSR set to: 14
  9889                           ;timers.c: 24:     INTCONbits.GIE = 1;
  9890   003902  8EF2               	bsf	242,7,c	;volatile
  9891   003904                     
  9892                           ; BSR set to: 14
  9893   003904  0012               	return		;funcret
  9894   003906                     __end_of_Timer0_init:
  9895                           	callstack 0
  9896                           
  9897 ;; *************** function _reset_timer *****************
  9898 ;; Defined at:
  9899 ;;		line 70 in file "timers.c"
  9900 ;; Parameters:    Size  Location     Type
  9901 ;;		None
  9902 ;; Auto vars:     Size  Location     Type
  9903 ;;		None
  9904 ;; Return value:  Size  Location     Type
  9905 ;;                  1    wreg      void 
  9906 ;; Registers used:
  9907 ;;		wreg, status,2, cstack
  9908 ;; Tracked objects:
  9909 ;;		On entry : 0/0
  9910 ;;		On exit  : 0/0
  9911 ;;		Unchanged: 0/0
  9912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9917 ;;Total ram usage:        0 bytes
  9918 ;; Hardware stack levels used: 1
  9919 ;; Hardware stack levels required when called: 2
  9920 ;; This function calls:
  9921 ;;		_write_timer
  9922 ;; This function is called by:
  9923 ;;		_Timer0_init
  9924 ;;		_forward_navigation
  9925 ;; This function uses a non-reentrant model
  9926 ;;
  9927                           
  9928                           	psect	text67
  9929   0039C2                     __ptext67:
  9930                           	callstack 0
  9931   0039C2                     _reset_timer:
  9932                           	callstack 27
  9933   0039C2                     
  9934                           ;timers.c: 72:     write_timer(0, 0);
  9935   0039C2  0E00               	movlw	0
  9936   0039C4  6E01               	movwf	write_timer@tL^0,c
  9937   0039C6  0E00               	movlw	0
  9938   0039C8  ECE7  F01C         	call	_write_timer
  9939   0039CC  0012               	return		;funcret
  9940   0039CE                     __end_of_reset_timer:
  9941                           	callstack 0
  9942                           
  9943 ;; *************** function _write_timer *****************
  9944 ;; Defined at:
  9945 ;;		line 58 in file "timers.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;  tH              1    wreg     unsigned char 
  9948 ;;  tL              1    0[COMRAM] unsigned char 
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;  tH              1    1[COMRAM] unsigned char 
  9951 ;; Return value:  Size  Location     Type
  9952 ;;                  1    wreg      void 
  9953 ;; Registers used:
  9954 ;;		wreg
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9960 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9963 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9964 ;;Total ram usage:        2 bytes
  9965 ;; Hardware stack levels used: 1
  9966 ;; Hardware stack levels required when called: 1
  9967 ;; This function calls:
  9968 ;;		Nothing
  9969 ;; This function is called by:
  9970 ;;		_reset_timer
  9971 ;;		_return_to_sender
  9972 ;; This function uses a non-reentrant model
  9973 ;;
  9974                           
  9975                           	psect	text68
  9976   0039CE                     __ptext68:
  9977                           	callstack 0
  9978   0039CE                     _write_timer:
  9979                           	callstack 28
  9980                           
  9981                           ;incstack = 0
  9982                           ;write_timer@tH stored from wreg
  9983   0039CE  6E02               	movwf	write_timer@tH^0,c
  9984   0039D0                     
  9985                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
  9986   0039D0  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  9987   0039D4                     
  9988                           ;timers.c: 64:     TMR0L = tL;
  9989   0039D4  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  9990   0039D8  0012               	return		;funcret
  9991   0039DA                     __end_of_write_timer:
  9992                           	callstack 0
  9993                           
  9994 ;; *************** function _ISR *****************
  9995 ;; Defined at:
  9996 ;;		line 255 in file "timers.c"
  9997 ;; Parameters:    Size  Location     Type
  9998 ;;		None
  9999 ;; Auto vars:     Size  Location     Type
 10000 ;;		None
 10001 ;; Return value:  Size  Location     Type
 10002 ;;                  1    wreg      void 
 10003 ;; Registers used:
 10004 ;;		wreg, status,2
 10005 ;; Tracked objects:
 10006 ;;		On entry : 0/0
 10007 ;;		On exit  : 0/0
 10008 ;;		Unchanged: 0/0
 10009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10014 ;;Total ram usage:        0 bytes
 10015 ;; Hardware stack levels used: 1
 10016 ;; This function calls:
 10017 ;;		Nothing
 10018 ;; This function is called by:
 10019 ;;		Interrupt level 2
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           	psect	intcode
 10024   000008                     __pintcode:
 10025                           	callstack 0
 10026   000008                     _ISR:
 10027                           	callstack 23
 10028                           
 10029                           ;incstack = 0
 10030   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 10031   00000A                     
 10032                           ;timers.c: 258:     if (PIR0bits.TMR0IF) {
 10033   00000A  010E               	movlb	14	; () banked
 10034   00000C  AB33               	btfss	51,5,b	;volatile
 10035   00000E  EF0B  F000         	goto	i2u169_41
 10036   000012  EF0D  F000         	goto	i2u169_40
 10037   000016                     i2u169_41:
 10038   000016  EF1C  F000         	goto	i2l746
 10039   00001A                     i2u169_40:
 10040   00001A                     
 10041                           ; BSR set to: 14
 10042                           ;timers.c: 259:         if (returning) {
 10043   00001A  505D               	movf	_returning^0,w,c
 10044   00001C  B4D8               	btfsc	status,2,c
 10045   00001E  EF13  F000         	goto	i2u170_41
 10046   000022  EF15  F000         	goto	i2u170_40
 10047   000026                     i2u170_41:
 10048   000026  EF19  F000         	goto	i2l2655
 10049   00002A                     i2u170_40:
 10050   00002A                     
 10051                           ; BSR set to: 14
 10052                           ;timers.c: 261:             return_flag = 1;
 10053   00002A  0E01               	movlw	1
 10054   00002C  6E5C               	movwf	_return_flag^0,c
 10055                           
 10056                           ;timers.c: 262:         } else {
 10057   00002E  EF1B  F000         	goto	i2l2657
 10058   000032                     i2l2655:
 10059                           
 10060                           ; BSR set to: 14
 10061                           ;timers.c: 264:             lost_flag = 1;
 10062   000032  0E01               	movlw	1
 10063   000034  6E5B               	movwf	_lost_flag^0,c
 10064   000036                     i2l2657:
 10065                           
 10066                           ; BSR set to: 14
 10067                           ;timers.c: 268:         PIR0bits.TMR0IF = 0;
 10068   000036  9B33               	bcf	51,5,b	;volatile
 10069   000038                     i2l746:
 10070                           
 10071                           ; BSR set to: 14
 10072   000038  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 10073   00003A  0011               	retfie		f
 10074   00003C                     __end_of_ISR:
 10075                           	callstack 0
 10076                           
 10077                           	psect	rparam
 10078   000000                     
 10079                           	psect	temp
 10080   00005E                     btemp:
 10081                           	callstack 0
 10082   00005E                     	ds	1
 10083   000000                     int$flags	set	btemp
 10084   000000                     wtemp8	set	btemp+1
 10085   000000                     ttemp5	set	btemp+1
 10086   000000                     ttemp6	set	btemp+4
 10087   000000                     ttemp7	set	btemp+8
 10088                           
 10089                           	psect	idloc
 10090                           
 10091                           ;Config register IDLOC0 @ 0x200000
 10092                           ;	unspecified, using default values
 10093   200000                     	org	2097152
 10094   200000  FFFF               	dw	65535
 10095                           
 10096                           ;Config register IDLOC1 @ 0x200002
 10097                           ;	unspecified, using default values
 10098   200002                     	org	2097154
 10099   200002  FFFF               	dw	65535
 10100                           
 10101                           ;Config register IDLOC2 @ 0x200004
 10102                           ;	unspecified, using default values
 10103   200004                     	org	2097156
 10104   200004  FFFF               	dw	65535
 10105                           
 10106                           ;Config register IDLOC3 @ 0x200006
 10107                           ;	unspecified, using default values
 10108   200006                     	org	2097158
 10109   200006  FFFF               	dw	65535
 10110                           
 10111                           ;Config register IDLOC4 @ 0x200008
 10112                           ;	unspecified, using default values
 10113   200008                     	org	2097160
 10114   200008  FFFF               	dw	65535
 10115                           
 10116                           ;Config register IDLOC5 @ 0x20000A
 10117                           ;	unspecified, using default values
 10118   20000A                     	org	2097162
 10119   20000A  FFFF               	dw	65535
 10120                           
 10121                           ;Config register IDLOC6 @ 0x20000C
 10122                           ;	unspecified, using default values
 10123   20000C                     	org	2097164
 10124   20000C  FFFF               	dw	65535
 10125                           
 10126                           ;Config register IDLOC7 @ 0x20000E
 10127                           ;	unspecified, using default values
 10128   20000E                     	org	2097166
 10129   20000E  FFFF               	dw	65535
 10130                           
 10131                           	psect	config
 10132                           
 10133                           ;Config register CONFIG1L @ 0x300000
 10134                           ;	External Oscillator mode Selection bits
 10135                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 10136                           ;	Power-up default value for COSC bits
 10137                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 10138   300000                     	org	3145728
 10139   300000  AA                 	db	170
 10140                           
 10141                           ;Config register CONFIG1H @ 0x300001
 10142                           ;	unspecified, using default values
 10143                           ;	Clock Out Enable bit
 10144                           ;	CLKOUTEN = 0x1, unprogrammed default
 10145                           ;	Clock Switch Enable bit
 10146                           ;	CSWEN = 0x1, unprogrammed default
 10147                           ;	Fail-Safe Clock Monitor Enable bit
 10148                           ;	FCMEN = 0x1, unprogrammed default
 10149   300001                     	org	3145729
 10150   300001  FF                 	db	255
 10151                           
 10152                           ;Config register CONFIG2L @ 0x300002
 10153                           ;	unspecified, using default values
 10154                           ;	Master Clear Enable bit
 10155                           ;	MCLRE = 0x1, unprogrammed default
 10156                           ;	Power-up Timer Enable bit
 10157                           ;	PWRTE = 0x1, unprogrammed default
 10158                           ;	Low-power BOR enable bit
 10159                           ;	LPBOREN = 0x1, unprogrammed default
 10160                           ;	Brown-out Reset Enable bits
 10161                           ;	BOREN = 0x3, unprogrammed default
 10162   300002                     	org	3145730
 10163   300002  FF                 	db	255
 10164                           
 10165                           ;Config register CONFIG2H @ 0x300003
 10166                           ;	unspecified, using default values
 10167                           ;	Brown Out Reset Voltage selection bits
 10168                           ;	BORV = 0x3, unprogrammed default
 10169                           ;	ZCD Disable bit
 10170                           ;	ZCD = 0x1, unprogrammed default
 10171                           ;	PPSLOCK bit One-Way Set Enable bit
 10172                           ;	PPS1WAY = 0x1, unprogrammed default
 10173                           ;	Stack Full/Underflow Reset Enable bit
 10174                           ;	STVREN = 0x1, unprogrammed default
 10175                           ;	Debugger Enable bit
 10176                           ;	DEBUG = 0x1, unprogrammed default
 10177                           ;	Extended Instruction Set Enable bit
 10178                           ;	XINST = 0x1, unprogrammed default
 10179   300003                     	org	3145731
 10180   300003  FF                 	db	255
 10181                           
 10182                           ;Config register CONFIG3L @ 0x300004
 10183                           ;	WDT Period Select bits
 10184                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 10185                           ;	WDT operating mode
 10186                           ;	WDTE = OFF, WDT Disabled
 10187   300004                     	org	3145732
 10188   300004  9F                 	db	159
 10189                           
 10190                           ;Config register CONFIG3H @ 0x300005
 10191                           ;	unspecified, using default values
 10192                           ;	WDT Window Select bits
 10193                           ;	WDTCWS = 0x7, unprogrammed default
 10194                           ;	WDT input clock selector
 10195                           ;	WDTCCS = 0x7, unprogrammed default
 10196   300005                     	org	3145733
 10197   300005  FF                 	db	255
 10198                           
 10199                           ;Config register CONFIG4L @ 0x300006
 10200                           ;	unspecified, using default values
 10201                           ;	Write Protection Block 0
 10202                           ;	WRT0 = 0x1, unprogrammed default
 10203                           ;	Write Protection Block 1
 10204                           ;	WRT1 = 0x1, unprogrammed default
 10205                           ;	Write Protection Block 2
 10206                           ;	WRT2 = 0x1, unprogrammed default
 10207                           ;	Write Protection Block 3
 10208                           ;	WRT3 = 0x1, unprogrammed default
 10209                           ;	Write Protection Block 3
 10210                           ;	WRT4 = 0x1, unprogrammed default
 10211                           ;	Write Protection Block 3
 10212                           ;	WRT5 = 0x1, unprogrammed default
 10213                           ;	Write Protection Block 3
 10214                           ;	WRT6 = 0x1, unprogrammed default
 10215                           ;	Write Protection Block 3
 10216                           ;	WRT7 = 0x1, unprogrammed default
 10217   300006                     	org	3145734
 10218   300006  FF                 	db	255
 10219                           
 10220                           ;Config register CONFIG4H @ 0x300007
 10221                           ;	unspecified, using default values
 10222                           ;	Configuration Register Write Protection bit
 10223                           ;	WRTC = 0x1, unprogrammed default
 10224                           ;	Boot Block Write Protection bit
 10225                           ;	WRTB = 0x1, unprogrammed default
 10226                           ;	Data EEPROM Write Protection bit
 10227                           ;	WRTD = 0x1, unprogrammed default
 10228                           ;	Scanner Enable bit
 10229                           ;	SCANE = 0x1, unprogrammed default
 10230                           ;	Low Voltage Programming Enable bit
 10231                           ;	LVP = 0x1, unprogrammed default
 10232   300007                     	org	3145735
 10233   300007  FF                 	db	255
 10234                           
 10235                           ;Config register CONFIG5L @ 0x300008
 10236                           ;	unspecified, using default values
 10237                           ;	UserNVM Program Memory Code Protection bit
 10238                           ;	CP = 0x1, unprogrammed default
 10239                           ;	DataNVM Memory Code Protection bit
 10240                           ;	CPD = 0x1, unprogrammed default
 10241   300008                     	org	3145736
 10242   300008  FF                 	db	255
 10243                           
 10244                           ;Config register CONFIG5H @ 0x300009
 10245                           ;	unspecified, using default values
 10246   300009                     	org	3145737
 10247   300009  FF                 	db	255
 10248                           
 10249                           ;Config register CONFIG6L @ 0x30000A
 10250                           ;	unspecified, using default values
 10251                           ;	Table Read Protection Block 0
 10252                           ;	EBTR0 = 0x1, unprogrammed default
 10253                           ;	Table Read Protection Block 1
 10254                           ;	EBTR1 = 0x1, unprogrammed default
 10255                           ;	Table Read Protection Block 2
 10256                           ;	EBTR2 = 0x1, unprogrammed default
 10257                           ;	Table Read Protection Block 3
 10258                           ;	EBTR3 = 0x1, unprogrammed default
 10259                           ;	Table Read Protection Block 4
 10260                           ;	EBTR4 = 0x1, unprogrammed default
 10261                           ;	Table Read Protection Block 5
 10262                           ;	EBTR5 = 0x1, unprogrammed default
 10263                           ;	Table Read Protection Block 6
 10264                           ;	EBTR6 = 0x1, unprogrammed default
 10265                           ;	Table Read Protection Block 7
 10266                           ;	EBTR7 = 0x1, unprogrammed default
 10267   30000A                     	org	3145738
 10268   30000A  FF                 	db	255
 10269                           
 10270                           ;Config register CONFIG6H @ 0x30000B
 10271                           ;	unspecified, using default values
 10272                           ;	Boot Block Table Read Protection bit
 10273                           ;	EBTRB = 0x1, unprogrammed default
 10274   30000B                     	org	3145739
 10275   30000B  FF                 	db	255
 10276                           tosu	equ	0xFFF
 10277                           tosh	equ	0xFFE
 10278                           tosl	equ	0xFFD
 10279                           stkptr	equ	0xFFC
 10280                           pclatu	equ	0xFFB
 10281                           pclath	equ	0xFFA
 10282                           pcl	equ	0xFF9
 10283                           tblptru	equ	0xFF8
 10284                           tblptrh	equ	0xFF7
 10285                           tblptrl	equ	0xFF6
 10286                           tablat	equ	0xFF5
 10287                           prodh	equ	0xFF4
 10288                           prodl	equ	0xFF3
 10289                           indf0	equ	0xFEF
 10290                           postinc0	equ	0xFEE
 10291                           postdec0	equ	0xFED
 10292                           preinc0	equ	0xFEC
 10293                           plusw0	equ	0xFEB
 10294                           fsr0h	equ	0xFEA
 10295                           fsr0l	equ	0xFE9
 10296                           wreg	equ	0xFE8
 10297                           indf1	equ	0xFE7
 10298                           postinc1	equ	0xFE6
 10299                           postdec1	equ	0xFE5
 10300                           preinc1	equ	0xFE4
 10301                           plusw1	equ	0xFE3
 10302                           fsr1h	equ	0xFE2
 10303                           fsr1l	equ	0xFE1
 10304                           bsr	equ	0xFE0
 10305                           indf2	equ	0xFDF
 10306                           postinc2	equ	0xFDE
 10307                           postdec2	equ	0xFDD
 10308                           preinc2	equ	0xFDC
 10309                           plusw2	equ	0xFDB
 10310                           fsr2h	equ	0xFDA
 10311                           fsr2l	equ	0xFD9
 10312                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        27
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      93
    BANK0           160     32     106
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    average_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    card_blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_cyan@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_cyan@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_white@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_white@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    colour_to_key@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    colour_to_key@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    convert_HSV@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    convert_HSV@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    forward_navigation@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward_navigation@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    forward_navigation@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    forward_navigation@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    manoeuvre_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_manoeuvre(BANK0[20]), 

    max_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    min_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    pick_card@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    pick_card@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    read_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    read_timer@tH	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerH(COMRAM[1]), 

    read_timer@tL	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerL(COMRAM[1]), 

    read_trail@man	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@mann(COMRAM[1]), 

    read_trail@tH	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerH(COMRAM[1]), 

    read_trail@tL	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerL(COMRAM[1]), 

    return_to_sender@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    return_to_sender@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    S1144DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1144DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2827$buffer	PTR unsigned char  size(2) Largest target is 0

    S2827$source	PTR const unsigned char  size(2) Largest target is 0

    scale_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    squareReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    squareReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_high(BANK0[20]), 

    timer_low_pointer	PTR unsigned char  size(1) Largest target is 20
		 -> trail_timer_low(BANK0[20]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    UTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    UTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    wait_for_wall@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_forward_navigation
    _return_to_sender->_pick_card
    _forward_navigation->_convert_HSV
    _wait_for_wall->_read_RGBC
    _scale_RGB->___fltol
    ___fltol->___flmul
    ___flmul->___xxtofl
    _pick_card->_card_blue
    _pick_card->_card_cyan
    _pick_card->_card_green
    _pick_card->_card_orange
    _pick_card->_card_pink
    _pick_card->_card_red
    _pick_card->_card_yellow
    _card_yellow->_headbuttReverse
    _card_yellow->_squareReverse
    _card_yellow->_turnLeft90
    _card_yellow->_turnRight90
    _card_white->_UTurn
    _card_white->_headbuttReverse
    _card_red->_headbuttReverse
    _card_red->_turnLeft90
    _card_red->_turnRight90
    _card_pink->_headbuttReverse
    _card_pink->_squareReverse
    _card_pink->_turnLeft90
    _card_pink->_turnRight90
    _squareReverse->_fullSpeedReverse
    _card_orange->_headbuttReverse
    _card_orange->_turnLeft135
    _card_orange->_turnRight135
    _card_green->_headbuttReverse
    _card_green->_turnLeft90
    _card_green->_turnRight90
    _turnRight90->_turnRight
    _turnLeft90->_turnLeft
    _card_cyan->_headbuttReverse
    _card_cyan->_turnLeft135
    _card_cyan->_turnRight135
    _turnRight135->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft135->_turnLeft
    _card_blue->_UTurn
    _card_blue->_headbuttReverse
    _headbuttReverse->_fullSpeedReverse
    _fullSpeedReverse->_setMotorPWM
    _UTurn->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _convert_HSV->___lldiv
    _average_RGBC->___lldiv
    _read_RGBC->_color_read_Blue
    _read_RGBC->_color_read_Clear
    _read_RGBC->_color_read_Green
    _read_RGBC->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  382150
                                             74 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                 _forward_navigation
                    _initDCmotorsPWM
                         _initUSART4
                   _return_to_sender
 ---------------------------------------------------------------------------------
 (1) _return_to_sender                                     5     3      2  181907
                                             38 COMRAM     5     3      2
                     _fullSpeedAhead
                          _pick_card
                         _read_trail
                        _start_timer
                               _stop
                         _stop_timer
                   _toggle_main_beam
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _toggle_main_beam                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_trail                                           3     0      3     294
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward_navigation                                   9     5      4  198914
                                             65 COMRAM     9     5      4
                       _average_RGBC
                      _colour_to_key
                        _convert_HSV
                     _fullSpeedAhead
                          _pick_card
                         _read_timer
                        _reset_timer
                          _scale_RGB
                        _start_timer
                               _stop
                         _stop_timer
               _toggle_tricolour_LED
                      _wait_for_wall
                        _write_trail
 ---------------------------------------------------------------------------------
 (2) _write_trail                                          3     1      2     218
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _wait_for_wall                                        4     2      2     910
                                             12 COMRAM     4     2      2
                          _read_RGBC
 ---------------------------------------------------------------------------------
 (2) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _scale_RGB                                            3     2      1    5963
                                             49 COMRAM     3     2      1
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1236
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1143
                                             39 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3420
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_timer                                           2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _pick_card                                            6     2      4  175154
                                             32 COMRAM     6     2      4
                          _card_blue
                          _card_cyan
                         _card_green
                        _card_orange
                          _card_pink
                           _card_red
                         _card_white
                        _card_yellow
 ---------------------------------------------------------------------------------
 (3) _card_yellow                                          5     2      3   28538
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_white                                           2     0      2   15132
                                             27 COMRAM     2     0      2
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (3) _card_red                                             5     2      3   21938
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_pink                                            5     2      3   28538
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _squareReverse                                        4     2      2    6512
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (3) _card_orange                                          5     2      3   21330
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _card_green                                           5     2      3   21938
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _turnRight90                                          4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnLeft90                                           4     2      2    6664
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_cyan                                            5     2      3   21330
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                         4     2      2    6208
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (5) _turnRight                                            5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                          4     2      2    6360
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_blue                                            5     2      3   15274
                                             27 COMRAM     5     2      3
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (4) _headbuttReverse                                      4     2      2    8336
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (5) _toggle_brake_lights                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _fullSpeedReverse                                     5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _UTurn                                                4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
            _toggle_right_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (5) _turnLeft                                             5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _toggle_right_indicators                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _toggle_left_indicators                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    3373
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    1829
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _convert_HSV                                         52    50      2    5717
                                             13 COMRAM    52    50      2
                            ___lldiv
                             ___lmul
                            _max_RGB
                            _min_RGB
 ---------------------------------------------------------------------------------
 (3) _min_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _max_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1434
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _colour_to_key                                        5     3      2     932
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _average_RGBC                                        20    19      1    3012
                                             13 COMRAM    20    19      1
                            ___lldiv
                          _read_RGBC
 ---------------------------------------------------------------------------------
 (3) _read_RGBC                                            1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (4) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1834
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (6) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _forward_navigation
     _average_RGBC
       ___lldiv
       _read_RGBC
         _color_read_Blue
           _I2C_2_Master_Read
             _I2C_2_Master_Idle
           _I2C_2_Master_RepStart
             _I2C_2_Master_Idle
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Clear
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Green
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Red
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
     _colour_to_key
     _convert_HSV
       ___lldiv
       ___lmul
       _max_RGB
       _min_RGB
     _fullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _pick_card
       _card_blue
         _UTurn
           _stop
             _setMotorPWM
           _toggle_left_indicators
           _toggle_right_indicators
           _turnLeft
             _setMotorPWM
         _headbuttReverse
           _fullSpeedReverse
             _setMotorPWM
           _stop
           _toggle_brake_lights
       _card_cyan
         _headbuttReverse
         _turnLeft135
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight135
           _stop
           _toggle_right_indicators
           _turnRight
             _setMotorPWM
       _card_green
         _headbuttReverse
         _turnLeft90
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight90
           _stop
           _toggle_right_indicators
           _turnRight
       _card_orange
         _headbuttReverse
         _turnLeft135
         _turnRight135
       _card_pink
         _headbuttReverse
         _squareReverse
           _fullSpeedReverse
           _stop
           _toggle_brake_lights
         _turnLeft90
         _turnRight90
       _card_red
         _headbuttReverse
         _turnLeft90
         _turnRight90
       _card_white
         _UTurn
         _headbuttReverse
       _card_yellow
         _headbuttReverse
         _squareReverse
         _turnLeft90
         _turnRight90
     _read_timer
     _reset_timer
     _scale_RGB
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _start_timer
     _stop
     _stop_timer
     _toggle_tricolour_LED
     _wait_for_wall
       _read_RGBC
     _write_trail
   _initDCmotorsPWM
   _initUSART4
   _return_to_sender
     _fullSpeedAhead
     _pick_card
     _read_trail
     _start_timer
     _stop
     _stop_timer
     _toggle_main_beam
     _write_timer

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      6A       5       66.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5D       1       98.9%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      9      0       0      57        0.0%
BITBIGSFRlllhhh      9      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C7      61        0.0%
DATA                 0      0      C7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Mar 14 19:54:10 2024

                   _turn180Delay 00C0                  ??_wait_for_wall 000F                   _color_read_Red 33DA  
                _color_read_Blue 34CA                  _trail_timer_low 0074              card_green@backtrack 001E  
                             l30 38E2                               l42 3924                               l27 37D2  
                             l36 3874                               l45 2902                               l71 3964  
                             l39 3944                               l80 3518                               l74 3428  
                             l83 34C8                               l68 37A4                               l92 1F6E  
                             l77 3478                               l86 33D8                               l99 355C  
            ___wmul@multiplicand 0003                 _trail_timer_high 0088                 _color_read_Clear 347A  
               _color_read_Green 342A                              l102 3004                              l104 303E  
                            l112 283A                              l107 2F88                              l140 1948  
                            l109 2FC2                              l320 3826                              l128 14E4  
                            l232 2422                              l240 2E46                              l225 2DB8  
                            l323 3828                              l139 1946                              l332 39E2  
                            l341 359E                              l261 294C                              l245 2ABC  
                            l253 2A04                              l326 384E                              l335 39EC  
                            l264 29BC                              l248 2B2C                              l272 2BE2  
                            l256 2A74                              l329 39F6                              l281 3700  
                            l338 39C0                              l290 3770                              l275 3738  
                            l284 36C6                              l436 24D4                              l269 2B72  
                            l293 3652                              l541 3184                              l278 368C  
                            l702 39FA                              l711 39CC                              l287 35DE  
                            l439 2560                              l705 3998                              l562 2EC6  
                            l466 3982                              l714 3618                              l555 3324  
                            l708 39D8                              l548 3254                              l717 37FC  
                            l583 32BC                              l760 310C                              l576 31EC  
                            l728 22CE                              l761 311C                              l569 2F46  
                            l586 389A                              l738 2D28                              l749 38C0  
                            l783 2C86                              l599 2764                              l696 3904  
                            l776 2C76                              l699 39FE                              _ISR 0008  
         ??_toggle_tricolour_LED 0001                      _start_timer 39FC                              wreg 0FE8  
       __end_of_toggle_main_beam 3876                     ___flmul@aexp 0020                     ___flmul@bexp 0021  
                   ?_convert_HSV 000E                     ___flmul@sign 001B                     ___flmul@temp 0026  
                   ___flmul@prod 0022                   min_RGB@min_val 0005                      _squareDelay 00BC  
                           ?_ISR 0001                     ___fltol@exp1 0031                             l1046 2668  
                           l1240 30AA                             l3001 34CA                             l3003 3510  
                           l1411 205E                             l1404 1FC6                             l3101 2F56  
                           l3021 3734                             l3013 3702                             l3007 347A  
                           l3103 2F76                             l1247 30B2                             l3015 3706  
                           l3031 3688                             l3023 3654                             l3111 311E  
                           l1407 2122                             l3009 34C0                             l3105 2FA8  
                           l3041 36FC                             l3033 36C8                             l3017 3712  
                           l3025 3658                             l3113 3122                             l1370 1C04  
                           l1418 20BA                             l3211 39D0                             l3107 2FBA  
                           l3035 36CC                             l3051 36C2                             l3043 368E  
                           l3203 3292                             l3019 3728                             l3027 3664  
                           l3115 313E                             l1363 1A0E                             l1380 1D34  
                           l1372 1C7C                             l3213 39D4                             l3221 30E2  
                           l3061 35D6                             l3053 35A0                             l3141 32C2  
                           l3037 36D8                             l3045 3692                             l3029 367C  
                           l3133 322A                             l3125 31EE                             l1373 1C6A  
                           l3301 1AAA                             l3231 2C12                             l3223 30EC  
                           l3215 30B4                             l3063 35DA                             l3055 35A8  
                           l3071 3760                             l3143 32DE                             l3039 36F0  
                           l3047 369E                             l3127 31F2                             l3119 315A  
                           l3311 1AF0                             l3303 1AB8                             l1367 1D72  
                           l3241 2C64                             l3233 2C1E                             l3225 2BE4  
                           l3217 30C4                             l3057 35B4                             l3073 376C  
                           l3065 373A                             l3049 36B6                             l3129 320E  
                           l3081 3642                             l3209 3876                             l3161 2E9C  
                           l3153 2E48                             l3321 1B5E                             l3313 1B0A  
                           l3305 1AC4                             l3401 25FE                             l3243 2C66  
                           l3235 2C2C                             l3227 2BF4                             l3219 30D2  
                           l3091 2FF2                             l3059 35CA                             l3067 373E  
                           l3147 32FA                             l3139 32BE                             l3083 364E  
                           l3075 361A                             l3171 2EF4                             l3155 2E4C  
                           l3331 1BF4                             l3323 1B88                             l3315 1B1A  
                           l3307 1AD4                             l3251 1964                             l3411 2628  
                           l3403 2608                             l3245 2C70                             l3237 2C36  
                           l3229 2C0A                             l3085 3384                             l3501 1E5A  
                           l3093 3024                             l3069 374A                             l3181 3186  
                           l3077 361E                             l3157 2E74                             l3341 1C34  
                           l3333 1C02                             l3325 1BBE                             l3317 1B36  
                           l3309 1AE0                             l3261 199C                             l3253 1966  
                           l3413 2638                             l3421 1F72                             l3239 2C54  
                           l3503 1F2A                             l3095 3036                             l3087 2FC4  
                           l3183 318A                             l3079 362A                             l3175 2F1C  
                           l3167 2EC8                             l3351 1CA6                             l3343 1C62  
                           l3335 1C14                             l3327 1BCC                             l3319 1B42  
                           l3271 19C8                             l3263 19AC                             l3255 1976  
                           l3247 194A                             l3415 2648                             l3423 1F82  
                           l3511 351A                             l3505 1F38                             l3089 2FD2  
                           l3601 12E2                             l3185 31A6                             l3169 2ECC  
                           l4161 2EB0                             l3361 1D1C                             l3353 1CD0  
                           l3337 1C22                             l3329 1BEA                             l3281 1A1E  
                           l3273 19D8                             l3265 19B2                             l3257 1986  
                           l3249 1956                             l3417 2658                             l3409 261C  
                           l3441 2048                             l3433 2000                             l3425 1F90  
                           l3521 2766                             l3513 351E                             l3507 1F4A  
                           l3099 2F48                             l3611 1370                             l3603 1316  
                           l3531 0E5E                             l3523 0E1A                             l4171 32A6  
                           l3195 3256                             l4163 316E                             l3363 1D38  
                           l3371 1D5E                             l3347 1C8C                             l3355 1CD4  
                           l3339 1C26                             l3291 1A58                             l3283 1A2E  
                           l3275 19E8                             l3267 19B8                             l3259 1996  
                           l3451 20C8                             l3443 2054                             l3435 2008  
                           l3427 1FD6                             l3515 3526                             l3509 1F5C  
                           l3701 1814                             l3621 142E                             l3613 13B0  
                           l3605 1346                             l3541 0EC4                             l3533 0E70  
                           l3525 0E32                             l2821 38B8                             l4173 330E  
                           l3197 325A                             l3189 31C2                             l4165 2F30  
                           l3373 1D62                             l3365 1D48                             l3357 1CEE  
                           l3349 1C98                             l3293 1A6E                             l3277 19F8  
                           l3269 19C6                             l3461 2110                             l3453 20CA  
                           l3445 2090                             l3437 2014                             l3429 1FEC  
                           l3471 37FE                             l3711 189A                             l3703 1832  
                           l3631 14B2                             l3623 143A                             l3615 13E4  
                           l3607 1352                             l3543 0ED4                             l3551 0F84  
                           l3535 0E7C                             l3527 0E42                             l2831 3062  
                           l2911 2DF2                             l2903 2DBA                             l3199 3276  
                           l4167 31D6                             l4159 271E                             l3367 1D56  
                           l3359 1D02                             l3295 1A7A                             l3287 1A42  
                           l3279 19FE                             l3391 25CE                             l3383 258E  
                           l3463 2112                             l3455 20CE                             l3447 209C  
                           l3439 2046                             l3519 354C                             l3801 37A6  
                           l3481 3814                             l3473 3808                             l3721 1920  
                           l3713 18BA                             l3705 1854                             l3641 1506  
                           l3633 14C0                             l3625 1446                             l3617 1414  
                           l3609 135E                             l3561 106C                             l3553 0F90  
                           l3545 0F14                             l3537 0E9A                             l3529 0E52  
                           l2841 309C                             l2833 306A                             l2825 3040  
                           l2921 2E30                             l2913 2DFA                             l2905 2DBE  
                           l4169 323E                             l3369 1D58                             l3297 1A92  
                           l3289 1A4E                             l3393 25DC                             l3385 25B8  
                           l3377 2564                             l3457 20F2                             l3449 20AA  
                           l3475 380E                             l3483 3948                             l3811 379A  
                           l3803 3772                             l3491 1DE2                             l3723 1942  
                           l3715 18DC                             l3707 1876                             l3651 1588  
                           l3643 1522                             l3635 14D2                             l3627 147A  
                           l3571 10D2                             l3555 0FC4                             l3547 0F48  
                           l3539 0EC4                             l3563 1074                             l3619 141C  
                           l2843 309E                             l2835 3078                             l2827 3048  
                           l2819 389C                             l2851 2338                             l3731 291A  
                           l2915 2E02                             l2907 2DD4                             l2931 2AB4  
                           l2923 2A76                             l3299 1A9E                             l3387 25BA  
                           l3379 257A                             l3459 2102                             l3467 3850  
                           l3477 3810                             l3805 3776                             l3493 1E04  
                           l3485 1D74                             l3717 18E0                             l3709 187A  
                           l3661 160C                             l3653 15A6                             l3645 1544  
                           l3637 14E6                             l3629 14AA                             l3581 118A  
                           l3573 110E                             l3565 1096                             l3557 1008  
                           l3549 0F78                             l2845 30A4                             l2837 307E  
                           l2829 305A                             l2861 23E6                             l2853 234A  
                           l3741 2974                             l3733 292C                             l2917 2E0A  
                           l2909 2DDC                             l2933 2AD4                             l2941 2AFC  
                           l2925 2A7E                             l3389 25CA                             l3469 283C  
                           l3901 2208                             l3821 2D88                             l3813 2D2A  
                           l3479 3812                             l2863 3828                             l3807 3780  
                           l3495 1E26                             l3487 1DBC                             l3719 1900  
                           l3671 1690                             l3663 162A                             l3655 15C8  
                           l3647 1566                             l3639 14EA                             l3583 1194  
                           l3575 1142                             l3567 10BC                             l3591 1240  
                           l3559 103C                             l2839 3094                             l2855 234E  
                           l2847 22D0                             l3743 297C                             l3735 2944  
                           l3727 2904                             l2919 2E1A                             l2871 3906  
                           l2943 2B14                             l2935 2ADC                             l2927 2A8A  
                           l2951 29E4                             l3751 266E                             l3399 25F4  
                           l3911 2262                             l3903 221A                             l3831 2DAA  
                           l3823 2D92                             l3815 2D3A                             l2865 3838  
                           l2873 39EE                             l2881 39E4                             l3809 3790  
                           l3497 1E48                             l3489 1DC4                             l3681 1712  
                           l3673 16AE                             l3665 164C                             l3657 15EA  
                           l3649 156A                             l3593 1262                             l3585 11D4  
                           l3577 1172                             l3569 10C8                             l2857 238C  
                           l2849 22EA                             l3737 2964                             l3745 298C  
                           l3729 290C                             l2937 2AE4                             l2929 2A9C  
                           l2961 2A34                             l2953 29FC                             l2945 29BE  
                           l3761 26D2                             l3753 2682                             l3913 2270  
                           l3905 222C                             l3921 22BE                             l3833 2DAC  
                           l3825 2D94                             l3817 2D60                             l3841 3972  
                           l3851 38EC                             l2875 39F2                             l2883 39E8  
                           l2891 3564                             l3499 1E4A                             l3691 1792  
                           l3683 172E                             l3675 16D0                             l3667 166E  
                           l3659 15EE                             l3595 1288                             l3587 1208  
                           l3579 117E                             l2859 23A6                             l3747 29A4  
                           l3739 296C                             l2939 2AEC                             l2971 2B42  
                           l2867 38C2                             l2955 2A1C                             l2963 2A44  
                           l2947 29C6                             l3763 26E6                             l3755 2696  
                           l3915 2284                             l3907 223C                             l3835 2DB6  
                           l3827 2D9E                             l3819 2D64                             l3843 397C  
                           l3931 2CBA                             l3923 2C88                             l3861 3902  
                           l3853 38EE                             l2877 39B8                             l2893 356C  
                           l2885 39DA                             l3693 17AE                             l3685 1750  
                           l3677 16F2                             l3669 1672                             l3597 1294  
                           l3589 1238                             l2869 3926                             l2981 2B9A  
                           l2973 2B52                             l2965 2A5C                             l2957 2A24  
                           l2949 29D4                             l3765 26FA                             l3757 26AA  
                           l3749 266A                             l3781 3984                             l3917 2296  
                           l3909 2240                             l3829 2DA0                             l3845 397E  
                           l3837 3966                             l3941 2CF0                             l3933 2CCE  
                           l3925 2C8C                             l3775 39C2                             l3855 38F8  
                           l2879 39BC                             l2895 3574                             l2887 39DE  
                           l2991 3420                             l3695 17D0                             l3687 1772  
                           l3679 16F6                             l3599 12A6                             l2983 2BA2  
                           l2975 2B6A                             l2967 2B2E                             l2959 2A2C  
                           l3759 26BE                             l3791 37D6                             l3919 229A  
                           l3871 2144                             l3863 2124                             l3847 3980  
                           l3839 3970                             l3783 35E0                             l3943 2D00  
                           l3935 2CD2                             l3927 2C98                             l3951 2D18  
                           l3857 38FC                             l3849 38E4                             l2897 359A  
                           l2889 3560                             l3697 17F2                             l3689 1776  
                           l2977 2B8A                             l2985 2BB2                             l2969 2B36  
                           l3769 270A                             l3777 39FC                             l3793 37F4  
                           l3881 2188                             l3873 2150                             l3865 2128  
                           l3785 35E8                             l3945 2D0C                             l3937 2CE0  
                           l3929 2CA8                             l3961 248E                             l3953 2424  
                           l3859 3900                             l2899 359C                             l2995 342A  
                           l3699 17F6                             l2987 2BCA                             l2979 2B92  
                           l3779 39F8                             l3795 37F6                             l3891 21B6  
                           l3883 2190                             l3875 2154                             l3867 2130  
                           l3787 35F8                             l3947 2D10                             l3939 2CE4  
                           l3971 24BA                             l3963 2496                             l3955 246A  
                           l2997 3470                             l2989 33DA                             l3797 37F8  
                           l3893 21CE                             l3885 2198                             l3877 216C  
                           l3869 2138                             l3789 3608                             l3949 2D14  
                           l3981 24C8                             l3973 24BE                             l3965 249E  
                           l3957 2472                             l3799 37FA                             l3895 21DE  
                           l3887 21A4                             l3879 2170                             l3991 24E2  
                           l3983 24CA                             l3975 24C2                             l3967 24A6  
                           l3959 247A                             l3897 21E2                             l3889 21B2  
                           l3993 2528                             l3985 24CC                             l3977 24C4  
                           l3969 24B6                             l3899 21E6                             l3995 2540  
                           l3987 24CE                             l3979 24C6                             l3997 2554  
                           l3989 24D2                             STR_1 0E0F                             STR_2 0E14  
                           STR_5 0E01                             u2000 2BCA                             u2001 2BC6  
                           u2010 2BE2                             u2011 2BDE                             u2100 2C54  
                           u2020 2FF2                             u2101 2C50                             u2021 2FEE  
                           u2030 3024                             u2110 1964                             u2031 3020  
                           u2111 1960                             u3000 1854                             u2040 2F76  
                           u2200 1C02                             u2120 1976                             u3001 1850  
                           u2041 2F72                             u2201 1BFE                             u2121 1972  
                           u3010 1876                             u2050 2FA8                             u2210 1C22  
                           u2130 1986                             u3011 1872                             u2051 2FA4  
                           u2211 1C1E                             u2131 1982                             u3020 189A  
                           u2060 30D2                             u3100 29A4                             u2220 1C34  
                           u2140 19C6                             u2300 257A                             u3021 1896  
                           u2061 30CE                             u3101 29A0                             u2221 1C30  
                           u2141 19C2                             u2301 2576                             u3030 18BA  
                           u2070 310C                             u3110 29BC                             u2230 1C62  
                           u2150 19D8                             u2310 25AE                             u3031 18B6  
                           u2071 3108                             u3111 29B8                             u2231 1C5E  
                           u2151 19D4                             u2080 2C0A                             u3040 18DC  
                           u2240 1C78                             u2160 19E8                             u2320 25DC  
                           u2400 2042                             u3200 2296                             u3120 21DE  
                   _BAUD4CONbits 0EE9                             u2081 2C06                             u3041 18D8  
                           u2241 1C74                             u2161 19E4                             u2321 25D8  
                           u2401 203E                             u3201 2292                             u3121 21DA  
                           u2090 2C2C                             u3050 1900                             u2250 1C8C  
                           u2170 1A1E                             u2330 25F0                             u2410 208C  
                           u3210 22AC                             u3130 21F8                             u2091 2C28  
                           u3051 18FC                             u2251 1C88                             u2171 1A1A  
                           u2331 25EC                             u2315 25A4                             u2411 2088  
                           u3211 22A4                             u3131 21F0                             u3060 1920  
                           u2260 1CA6                             u2180 1A2E                             u2340 2618  
                           u2420 20AA                             u3300 2516                             u3061 191C  
                           u2261 1CA2                             u2181 1A2A                             u2341 2614  
                           u2421 20A6                             u3301 250E                             u3070 1942  
                           u1710 305A                             u2270 1CEE                             u2190 1BA8  
                           u2350 2638                             u2430 20BA                             u2510 286C  
                           u3230 22CE                             u3150 221A                             u3071 193E  
                           u1711 3056                             u2271 1CEA                             u2351 2634  
                           u2431 20B6                             u2511 2864                             u3231 22CA  
                           u3151 2216                             u1720 3078                             u3080 2944  
                           u1800 3938                             u2280 1D1C                             u2360 2648  
                           u2440 20C8                             u3160 222C                             u3240 2CBA  
                           u1721 3074                             u3081 2940                             u1801 3930  
                           u2281 1D18                             u2361 2644                             u2441 20C4  
                           u3161 2228                             u3241 2CB6                             u2610 1E5A  
                           u1730 3094                             u3090 2964                             u2290 1D56  
                           u2450 2102                             u2370 1F82                             u2530 288E  
                           u3170 223C                             u3250 2D00                             _T2PR 0FBC  
                           u2611 1E56                             u1731 3090                             u3091 2960  
                           u2291 1D52                             u2195 1B9E                             u2451 20FE  
                           u2371 1F7E                             u2531 2886                             u3171 2238  
                           u3251 2CFC                             u2700 1288                             u1740 22EA  
                           u1820 3918                             u1900 2AB4                             u2460 2110  
                           u2380 1F90                             u2508 2850                             u2620 3548  
                           u3228 22AE                             u3180 2252                             u3148 21FA  
                           u3260 2D28                             u2701 1284                             u1741 22E6  
                           u1821 3910                             u1901 2AB0                             u2461 210C  
                           u2381 1F8C                             u2621 3544                             u3181 224A  
                           u3261 2D24                             u1750 23A6                             u1910 2AD4  
                           u2390 1FEC                             u2550 28B2                             u2630 355C  
                           u2470 3862                             u3318 2518                             u3270 24E2  
                           u1751 23A2                             u1911 2AD0                             u3407 36E2  
                           u2391 1FE8                             u2551 28AA                             u2631 3558  
                           u2471 385A                             u3327 2532                             u3271 24DE  
                           u1760 3838                             u1840 3588                             u2800 15C8  
                           u2640 0E70                             u1920 2B14                             u2608 28F4  
                           u2528 286E                             u3280 24F4                             u1761 3834  
                           u1841 3580                             u2801 15C4                             u2641 0E6C  
                           u1921 2B10                             u3417 3754                             u3337 217A  
                           u3281 24EC                             u1770 384E                             u2810 15EA  
                           u2730 142E                             u2650 0E9A                             u1818 393A  
                           u1930 2B2C                             u2570 28D2                             u2490 284E  
                           u1771 384A                             u2811 15E6                             u2731 142A  
                           u2715 1296                             u2651 0E96                             u1931 2B28  
                           u3427 2BA8                             u2571 28CA                             u2491 2846  
                           u3347 21C0                             u2900 1712                             u2820 160C  
                           u2740 1506                             u2660 0EC4                             u1860 2DD4  
                           u1780 38D4                             u1940 29FC                             u2548 2890  
                           u2901 170E                             u2821 1608                             u2741 1502  
                           u2725 1360                             u2661 0EC0                             u1861 2DD0  
                           u3437 35BE                             u1781 38CC                             u1941 29F8  
                           u3357 3634                             u2910 172E                             u2830 162A  
                           u2750 1522                             u2670 1096                             u1870 2DF2  
                           u1838 391A                             u1950 2A1C                             u2590 28F2  
                           u3198 2254                             u2911 172A                             u2831 1626  
                           u2751 151E                             u2671 1092                             u1871 2DEE  
                           u3447 2AF2                             u1951 2A18                             u3367 366E  
                           u2591 28EA                             u2920 1750                             u2840 164C  
                           u2760 1544                             u2680 10BC                             u1880 2E30  
                           u1960 2A5C                             u2568 28B4                             u2488 3864  
                           u2921 174C                             u2841 1648                             u2761 1540  
                           u2681 10B8                             u1881 2E2C                             u3457 2E10  
                           u1961 2A58                             u3377 371C                             u1858 358A  
                           u2930 1772                             u2850 166E                             u2770 1566  
                           u2690 1262                             u1890 2E46                             u1970 2A74  
                           u3298 24F6                             u2931 176E                             u2851 166A  
                           u2771 1562                             u2691 125E                             u3467 2982  
                           u1891 2E42                             u1971 2A70                             u3387 36A8  
                           u2940 1792                             u2860 1690                             u2780 1588  
                           u1980 2B6A                             u2588 28D4                             u3477 3786  
                           u2941 178E                             u2861 168C                             u2781 1584  
                           u1981 2B66                             u3397 2A3A                             u2950 17AE  
                           u2870 16AE                             u2790 15A6                             u1990 2B8A  
                           u1798 38D6                             u2951 17AA                             u2871 16AA  
                           u2791 15A2                             u1991 2B86                             u2960 17D0  
                           u2880 16D0                             u2961 17CC                             u2881 16CC  
                           u2970 17F2                             u2890 16F2                             u2971 17EE  
                           u2891 16EE                             u2980 1814                             u2981 1810  
                           u2990 1832                             u2991 182E                    _colour_to_key 14E6  
                           _main 2424                             fsr1h 0FE2                             fsr2h 0FDA  
                           indf1 0FE7                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             btemp 005E                             _stop 2DBA  
                           prodh 0FF4                             prodl 0FF3                   ??_average_RGBC 000F  
                           start 003C               average_RGBC@temp_B 001A               average_RGBC@temp_C 001E  
             average_RGBC@temp_G 0016               average_RGBC@temp_R 0012           __end_of_color_read_Red 342A  
              headbuttReverse@mL 0018                headbuttReverse@mR 0019                     ___param_bank 0000  
                    _turnLeft135 36C8                            ??_ISR 0001                    write_timer@tH 0002  
                  write_timer@tL 0001                    write_trail@tH 0003                    write_trail@tL 0001  
                    _turnRight90 3654          _toggle_right_indicators 3906                    ___fltol@sign1 0030  
                          ?_main 0001               _timer_high_pointer 0051                  __end_of___flmul 1D74  
                __end_of___fltol 266A                  __end_of___lldiv 2C88                            ?_stop 0013  
                __end_of___lwdiv 30B4                            i2l746 0038                            _TMR0H 0FD4  
                          _TMR0L 0FD3                 ?_headbuttReverse 0018              ___lmul@multiplicand 0005  
                          _UTurn 35A0       __end_of_I2C_2_Master_Start 39F8                      _write_timer 39CE  
     __end_of_I2C_2_Master_Write 39C2                      _write_trail 37D4                  __end_of_max_RGB 3040  
                __end_of_min_RGB 2FC4                   ?_colour_to_key 0001                _turnRight135Delay 00C2  
                          tablat 0FF5                  _turnLeft90Delay 00C8                            plusw2 0FDB  
                          ttemp5 005F                            ttemp6 0062                            ttemp7 0066  
                          status 0FD8                            wtemp8 005F                 _return_to_sender 2C88  
        __end_of_color_read_Blue 351A                    average_RGBC@i 0011                    average_RGBC@p 000E  
          _I2C_2_Master_RepStart 39DA                  ?_color_read_Red 0005                  __initialization 3326  
                   __end_of_main 2564                     __end_of_stop 2E48                           ??_main 004B  
                         ??_stop 0015                    __activetblptr 0003                   write_trail@man 0002  
                   _turnRight135 368E                           ?_UTurn 0018                   _bottomGearLeft 0056  
                   ?_setMotorPWM 000E                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                    _squareReverse 361A  
                         _RC0PPS 0E62                           _RE2PPS 0E74                           _RD5PPS 0E6F  
                         _RC7PPS 0E69                           _RD6PPS 0E70                           _RE4PPS 0E76  
                         i2l2651 001A                           i2l2653 002A                           i2l2655 0032  
                         i2l2657 0036                           i2l2649 000A                           _RG6PPS 0E88  
       __end_of_color_click_init 37A6                           _RX4PPS 0E15                           _TX4REG 0EE4  
               __end_of_card_red 3186                 __end_of___xxtofl 2124                 _fullSpeedReverse 2B2E  
               _turnLeft135Delay 00C4                    ??_Timer0_init 0003                     ?_reset_timer 0001  
                   _CCPTMRS0bits 0FAD                     convert_HSV@C 0040                     convert_HSV@M 003E  
                         ___lmul 30B4                     convert_HSV@m 001A                           ___wmul 389C  
                      ??___flmul 0017                        ??___fltol 002C                        ??___lldiv 0009  
      ??_toggle_right_indicators 0001                        ??___lwdiv 000B         ??_toggle_left_indicators 0001  
           forward_navigation@p1 0044             forward_navigation@p2 0045                           clear_0 336C  
           forward_navigation@mL 0042             forward_navigation@mR 0043               fullSpeedReverse@mL 0013  
             fullSpeedReverse@mR 0014                           isa$std 0001                        ??_max_RGB 0003  
             card_blue@backtrack 001E                        ??_min_RGB 0003                     __pdataCOMRAM 004D  
              _timer_low_pointer 0050           return_to_sender@timerH 0029           return_to_sender@timerL 002A  
           __end_of_average_RGBC 1F70                     __mediumconst 0000                           tblptrh 0FF7  
                         tblptrl 0FF6                           tblptru 0FF8              _toggle_brake_lights 38C2  
                ??_colour_to_key 0003                   ?_squareReverse 0018                           stop@mL 0013  
                         stop@mR 0014                ??_initDCmotorsPWM 0003                 __end_of_turnLeft 2B2E  
            convert_HSV@temp_610 0038              convert_HSV@temp_611 0028              convert_HSV@temp_612 002C  
            convert_HSV@temp_613 0030              convert_HSV@temp_614 0034              convert_HSV@temp_615 0020  
                   ___xxtofl@arg 000B                     ___xxtofl@exp 000A                     ___xxtofl@val 0001  
              _buggy_lights_init 37A6                       __accesstop 0060          __end_of__initialization 337A  
       __end_of_color_read_Clear 34CA         __end_of_color_read_Green 347A                    card_orange@mL 001C  
                  card_orange@mR 001D           ?_I2C_2_Master_RepStart 0001               ?_buggy_lights_init 0001  
                  ___rparam_used 0001                       ___fltol@f1 0028                 ?_color_read_Blue 0005  
           ?_toggle_brake_lights 0001                   __pcstackCOMRAM 0001             _wall_threshold_clear 004D  
                  __end_of_UTurn 35E0                      pick_card@mL 0021                      pick_card@mR 0022  
                   __pidataBANK0 399A              ??_buggy_lights_init 0001              __end_of_Timer0_init 3906  
                  card_yellow@mL 001C                    card_yellow@mR 001D       __end_of_forward_navigation 22D0  
                   ?_start_timer 0001                          ??_UTurn 001A                ?_toggle_main_beam 0001  
__end_of_toggle_right_indicators 3926        __end_of_buggy_lights_init 37D4                       _card_green 31EE  
             ??_toggle_main_beam 0001                       __pbssBANK0 0060                       _card_white 3876  
              _color_writetoaddr 3946                     _T2CLKCONbits 0FBF            ??_toggle_brake_lights 0001  
                   ?_turnLeft135 0018               ?_color_writetoaddr 0003                          ?___lmul 0001  
      fullSpeedReverse@rightGear 0017             card_yellow@backtrack 001E                          ?___wmul 0001  
                _bottomGearRight 0055            __end_of_wait_for_wall 355E                     ?_turnRight90 0018  
                 ___lmul@product 0009              ??_color_writetoaddr 0004         __end_of_return_to_sender 2D2A  
                      ?_card_red 001C                        ?___xxtofl 0001                  ??_squareReverse 001A  
                        _SP4BRGH 0EE6                          _SP4BRGL 0EE5                     ?_write_timer 0001  
                   ?_write_trail 0001                          _SSP2ADD 0ED6                          _SSP2BUF 0ED5  
              __end_of_card_blue 3326                __end_of_card_cyan 32BE                __end_of_card_pink 2F48  
         color_writetoaddr@value 0003                 ??_color_read_Red 0007                          UTurn@mL 0018  
                        UTurn@mR 0019        __end_of_color_writetoaddr 3966               _I2C_2_Master_Start 39EE  
                     _initUSART4 3966               _I2C_2_Master_Write 39B6                          __Hparam 0000  
                        __Lparam 0000                color_read_Red@tmp 000A                      _Timer0_init 38E4  
                     card_red@mL 001C                       card_red@mR 001D                 _turningRightGear 0053  
                        ___flmul 194A                          ___fltol 2564                          ___lldiv 2BE4  
                  convert_HSV@p1 000E              ?_I2C_2_Master_Start 0001                    convert_HSV@p2 000F  
                        ___lwdiv 3040              ?_I2C_2_Master_Write 0001                wait_for_wall@loss 000E  
                   __psmallconst 0E00                     turnLeft90@mL 0018                     turnLeft90@mR 0019  
                        __pcinit 3326                          __ramtop 0E00                        ?_turnLeft 0013  
                        __ptext0 2424                          __ptext1 2C88                          __ptext2 3850  
                        __ptext3 35E0                          __ptext4 3966                          __ptext5 2D2A  
                        __ptext6 2124                          __ptext7 37D4                          __ptext8 351A  
                        __ptext9 283C                       _read_timer 3984                    ??_card_orange 001F  
                     _read_trail 35E0                __end_of_read_RGBC 33DA                          _max_RGB 2FC4  
                        _min_RGB 2F48                    ??_card_yellow 001F                        _T2CONbits 0FBD  
                     ??_card_red 001F                       ??___xxtofl 0005                __end_of_scale_RGB 283C  
       __end_of_fullSpeedReverse 2BE4                        _T2HLTbits 0FBE                __end_of_pick_card 2766  
         fullSpeedAhead@leftGear 0016             ??_I2C_2_Master_Start 0002             ??_I2C_2_Master_Write 0002  
                    ?_card_green 001C             end_of_initialization 337A                      ?_card_white 001C  
         _toggle_left_indicators 3926         forward_navigation@timerH 0048         forward_navigation@timerL 0049  
              ?_color_click_init 0001                  ___lldiv@divisor 0005                  colour_to_key@p1 0001  
                colour_to_key@p2 0002               ??_color_click_init 0005                  ___lldiv@counter 000D  
                   _average_RGBC 1D74             convert_HSV@hue_scale 003C                          postdec1 0FE5  
                        postdec2 0FDD                  squareReverse@mL 0018                  squareReverse@mR 0019  
                        postinc0 0FEE                          postinc1 0FE6                          postinc2 0FDE  
                _initDCmotorsPWM 2D2A                       ??_turnLeft 0015                        _PORTFbits 0F8E  
             setMotorPWM@negDuty 0012                __end_of_turnRight 2A76             convert_HSV@sat_scale 0018  
                   read_timer@tH 0001                     read_timer@tL 0002                    ___xxtofl@sign 0009  
                      _TRISAbits 0F81               setMotorPWM@posDuty 0011                     read_trail@tH 0001  
                   read_trail@tL 0002                        _TRISCbits 0F83                        _TRISDbits 0F84  
                      _TRISEbits 0F85                        _TRISFbits 0F86                        _TRISGbits 0F87  
                      _TRISHbits 0F88              __end_of_card_orange 31EE                 fullSpeedAhead@mL 0013  
              card_red@backtrack 001E                 fullSpeedAhead@mR 0014         color_writetoaddr@address 0004  
            __end_of_card_yellow 2EC8          ??_I2C_2_Master_RepStart 0002             card_orange@backtrack 001E  
                    ___flmul@grs 001C                      _CCP1CONbits 0FAB                ?_color_read_Clear 0005  
                    _CCP2CONbits 0FA7                ?_color_read_Green 0005                      _CCP3CONbits 0F26  
                    ?_initUSART4 0001                      _CCP4CONbits 0F22                       main@motorL 00A2  
                     main@motorR 00AB               ??_color_read_Clear 0007               ??_color_read_Green 0007  
                     _stop_timer 39F8                       _turnLeft90 3702                     pick_card@key 0024  
                 _fullSpeedAhead 2904                   __end_of___lmul 311E                   __end_of___wmul 38C2  
                  __pidataCOMRAM 39A8                      ?_read_timer 0001                      ?_read_trail 0001  
           return_to_sender@mann 002B              color_read_Clear@tmp 000A              start_initialization 3326  
                  ??_convert_HSV 0010                      __end_of_ISR 003C                 _turnRight90Delay 00C6  
          __end_of_colour_to_key 194A               _forward_navigation 2124                       read_RGBC@p 000C  
            color_read_Green@tmp 000A         ?_toggle_right_indicators 0001              ?_forward_navigation 0042  
              ??_headbuttReverse 001A          __end_of_initDCmotorsPWM 2DBA           __end_of_fullSpeedAhead 29BE  
                       ??___lmul 0009                         ??___wmul 0005                     card_green@mL 001C  
                   card_green@mR 001D                      __pdataBANK0 00BC                       scale_RGB@p 0032  
                    _card_orange 3186                      _card_yellow 2E48                   max_RGB@max_val 0005  
             turnRight@rightGear 0017             ??_forward_navigation 0046                ?_return_to_sender 0027  
                      ___flmul@a 0013                        ___flmul@b 000F                      __pbssCOMRAM 005A  
                  __pcstackBANK0 009C               ??_return_to_sender 0029                     card_white@mL 001C  
                   card_white@mR 001D               return_to_sender@mL 0027               return_to_sender@mR 0028  
                convert_HSV@temp 0024      __end_of_toggle_brake_lights 38E4              __end_of_convert_HSV 14E6  
              turnLeft@rightGear 0017                        _card_blue 32BE                        _card_cyan 3256  
                      _card_pink 2EC8     __end_of_toggle_tricolour_LED 2904                 ___lwdiv@dividend 0007  
                   ?_Timer0_init 0001                      ?_stop_timer 0001                      ?_turnLeft90 0018  
                ?_fullSpeedAhead 0013                        __pintcode 0008                         ?___flmul 000F  
                       ?___fltol 0028                         ?___lldiv 0001                         ?___lwdiv 0007  
                _turningLeftGear 0054             I2C_2_Master_Read@ack 0003             I2C_2_Master_Read@tmp 0004  
                       ?_max_RGB 0001                         ?_min_RGB 0001                      __smallconst 0E00  
                  ?_turnRight135 0018                _I2C_2_Master_Idle 3828                _I2C_2_Master_Init 37FE  
              _I2C_2_Master_Read 355E                _I2C_2_Master_Stop 39E4                ?_fullSpeedReverse 0013  
                      _read_RGBC 3384               ?_I2C_2_Master_Idle 0001          ?_toggle_left_indicators 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 000F  
          __end_of_squareReverse 3654               ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000B  
             pick_card@backtrack 0023                    _headbuttDelay 00BE         initDCmotorsPWM@PWMperiod 0001  
                   ??_card_green 001F               ??_fullSpeedReverse 0015                        _scale_RGB 2766  
                      _rampDelay 0052                     ??_card_white 001E                        _pick_card 266A  
             card_cyan@backtrack 001E              ??_I2C_2_Master_Idle 0001              ??_I2C_2_Master_Init 0001  
            ??_I2C_2_Master_Read 0002                   ___wmul@product 0005                         _LATAbits 0F79  
                     ?_card_blue 001C              ??_I2C_2_Master_Stop 0002                         _LATCbits 0F7B  
                     ?_card_cyan 001C                         _LATDbits 0F7C                         _LATEbits 0F7D  
                       _LATFbits 0F7E                         _LATGbits 0F7F                       ?_card_pink 001C  
                       _LATHbits 0F80                         _PIE0bits 0E29                    ??_reset_timer 0003  
                    turnRight@mL 0013                      turnRight@mR 0014                         i2u170_40 002A  
                       i2u170_41 0026                        _lost_flag 005B                         _PIR0bits 0E33  
                       i2u169_40 001A                         i2u169_41 0016                         _PIR4bits 0E37  
               ?_initDCmotorsPWM 0001                         _SSP2CON2 0EDA                         _SSP2STAT 0ED8  
                      _returning 005D               __end_of_card_green 3256        __end_of_I2C_2_Master_Idle 3850  
      __end_of_I2C_2_Master_Init 3828        __end_of_I2C_2_Master_Read 35A0                ___wmul@multiplier 0001  
             __end_of_card_white 389C                   ??_turnRight135 001A        __end_of_I2C_2_Master_Stop 39EE  
                   setMotorPWM@m 000E      I2C_2_Master_Write@data_byte 0002   __end_of_toggle_left_indicators 3946  
              ??_color_read_Blue 0007                      _convert_HSV 0E1A                       ?_read_RGBC 000C  
                main@RGBC_colour 00B4                        _turnRight 29BE                ___lmul@multiplier 0001  
                      copy_data0 333A                        copy_data1 335A                       ?_scale_RGB 0032  
                     ?_pick_card 0021               card_pink@backtrack 001E    __end_of_I2C_2_Master_RepStart 39E4  
             color_read_Blue@tmp 000A              __end_of_setMotorPWM 2424                     ??_initUSART4 0001  
              turnRight@leftGear 0016                         __Hrparam 0000                 _toggle_main_beam 3850  
                    card_blue@mL 001C                      card_blue@mR 001D                         __Lrparam 0000  
                 wait_for_wall@p 000D                      card_cyan@mL 001C                      card_cyan@mR 001D  
                   _sample_count 0059                 turnLeft@leftGear 0016                      card_pink@mL 001C  
                    card_pink@mR 001D              __end_of_reset_timer 39CE                    _wait_for_wall 351A  
                 turnRight135@mL 0018                   turnRight135@mR 0019                    turnLeft135@mL 0018  
                  turnLeft135@mR 0019                     ??_read_timer 0003                     ??_read_trail 0004  
                 convert_HSV@hue 001E                   convert_HSV@sat 001C                       _ANSELDbits 0EA7  
                     _ANSELFbits 0EB4                    ??_start_timer 0001                         _card_red 311E  
                       ___xxtofl 1F70                       _T0CON0bits 0FD5                       _T0CON1bits 0FD6  
           _toggle_tricolour_LED 283C                  ___lwdiv@divisor 0009               __end_of_initUSART4 3984  
                ___lwdiv@counter 000D                       ?_turnRight 0013                         __ptext10 39F8  
                       __ptext11 39FC                         __ptext20 311E                         __ptext12 2766  
                       __ptext21 2EC8                         __ptext13 1F70                         __ptext30 36C8  
                       __ptext22 361A                         __ptext14 2564                         __ptext31 32BE  
                       __ptext23 3186                         __ptext15 194A                         __ptext40 2904  
                       __ptext32 373A                         __ptext24 31EE                         __ptext16 3984  
                       __ptext41 22D0                         __ptext33 38C2                         __ptext25 3654  
                       __ptext17 266A                         __ptext50 3384                         __ptext42 389C  
                       __ptext34 2B2E                         __ptext26 3702                         __ptext18 2E48  
                       __ptext51 33DA                         __ptext43 3040                         __ptext35 35A0  
                       __ptext27 3256                         __ptext19 3876                         __ptext60 39B6  
                       __ptext52 342A                         __ptext44 0E1A                         __ptext36 2A76  
                       __ptext28 368E                         __ptext61 39E4                         __ptext53 347A  
                       __ptext45 2F48                         __ptext37 3906                         __ptext29 29BE  
                       __ptext62 39EE                         __ptext54 34CA                         __ptext46 2FC4  
                       __ptext38 3926                         __ptext63 3828                         __ptext55 39DA  
                       __ptext47 30B4                         __ptext39 2DBA                         __ptext64 37FE  
                       __ptext56 355E                         __ptext48 14E6                         __ptext65 37A6  
                       __ptext57 2BE4                         __ptext49 1D74                         __ptext66 38E4  
                       __ptext58 3772                         __ptext67 39C2                         __ptext59 3946  
                       __ptext68 39CE                     _SSP2CON1bits 0ED9                  _headbuttReverse 373A  
                   _SSP2CON2bits 0EDA                      ??_card_blue 001F                      ??_card_cyan 001F  
                    ??_card_pink 001F         fullSpeedReverse@leftGear 0016                       turnLeft@mL 0013  
                     turnLeft@mR 0014           forward_navigation@mann 004A               __end_of_read_timer 399A  
             __end_of_read_trail 361A                    ??_turnLeft135 001A                         isa$xinst 0000  
                     _RC4STAbits 0EE7                         int$flags 005E                    ??_turnRight90 001A  
                 ?_wait_for_wall 000D                         _turnLeft 2A76                         max_RGB@p 0001  
                   ?_card_orange 001C                         min_RGB@p 0001                     ?_card_yellow 001C  
                     _INTCONbits 0FF2            ?_toggle_tricolour_LED 0001                    ??_write_timer 0002  
                  ??_write_trail 0003                      ??_read_RGBC 000D                      _setMotorPWM 22D0  
                    ??_scale_RGB 0033              __end_of_start_timer 3A00                         intlevel2 0000  
                  turnRight90@mL 0018                    turnRight90@mR 0019                      ??_pick_card 0025  
        fullSpeedAhead@rightGear 0017                     _topGearRight 0057                _manoeuvre_pointer 004F  
               ___lldiv@dividend 0001                 ??_fullSpeedAhead 0015             __end_of_turnRight135 36C8  
               colour_to_key@key 0005                   main@HSV_colour 009C                      _reset_timer 39C2  
                   ??_stop_timer 0001                     ??_turnLeft90 001A                 _color_click_init 3772  
            __end_of_turnLeft135 3702                      _topGearLeft 0058                       _SSP2DATPPS 0E1D  
               ___lldiv@quotient 0009          __end_of_headbuttReverse 3772                       _SSP2CLKPPS 0E1C  
            __end_of_turnRight90 368E                  _trail_manoeuvre 0060                      ??_turnRight 0015  
                    _return_flag 005C               __end_of_stop_timer 39FC               __end_of_turnLeft90 373A  
                _manoeuvre_count 005A                       _TX4STAbits 0EE8              __end_of_write_timer 39DA  
            __end_of_write_trail 37FE                    ?_average_RGBC 000E                    read_trail@man 0003  
