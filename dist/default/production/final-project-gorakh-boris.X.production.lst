

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 15:36:43 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=2
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=2
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   100                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   101                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   102                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   103                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   104                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   105   000000                     
   106                           ; Generated 21/07/2023 GMT
   107                           ; 
   108                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   109                           ; All rights reserved.
   110                           ; 
   111                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   112                           ; 
   113                           ; Redistribution and use in source and binary forms, with or without modification, are
   114                           ; permitted provided that the following conditions are met:
   115                           ; 
   116                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   117                           ;        conditions and the following disclaimer.
   118                           ; 
   119                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   120                           ;        of conditions and the following disclaimer in the documentation and/or other
   121                           ;        materials provided with the distribution. Publication is not required when
   122                           ;        this file is used in an embedded application.
   123                           ; 
   124                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   125                           ;        software without specific prior written permission.
   126                           ; 
   127                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   128                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   129                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   130                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   131                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   132                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   133                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   134                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   135                           ; 
   136                           ; 
   137                           ; Code-generator required, PIC18F67K40 Definitions
   138                           ; 
   139                           ; SFR Addresses
   140   000000                     
   141                           	psect	idataBANK0
   142   0041B0                     __pidataBANK0:
   143                           	callstack 0
   144                           
   145                           ;initializer for _manoeuvre_pointer
   146   0041B0  A6                 	db	low _trail_manoeuvre
   147   0041B1  01                 	db	high _trail_manoeuvre
   148                           
   149                           ;initializer for _timer_low_pointer
   150   0041B2  BA                 	db	low _trail_timer_low
   151   0041B3  01                 	db	high _trail_timer_low
   152                           
   153                           ;initializer for _timer_high_pointer
   154   0041B4  CE                 	db	low _trail_timer_high
   155   0041B5  01                 	db	high _trail_timer_high
   156                           
   157                           ;initializer for _squareDelay
   158   0041B6  0988               	dw	2440
   159                           
   160                           ;initializer for _headbuttDelay
   161   0041B8  0334               	dw	820
   162                           
   163                           ;initializer for _turn180Delay
   164   0041BA  0190               	dw	400
   165                           
   166                           ;initializer for _turnRight135Delay
   167   0041BC  0106               	dw	262
   168                           
   169                           ;initializer for _turnLeft135Delay
   170   0041BE  00FA               	dw	250
   171                           
   172                           ;initializer for _turnRight90Delay
   173   0041C0  006C               	dw	108
   174                           
   175                           ;initializer for _turnLeft90Delay
   176   0041C2  0054               	dw	84
   177                           
   178                           ;initializer for _wall_threshold_clear
   179   0041C4  0032               	dw	50
   180                           
   181                           ;initializer for _turningRightGear
   182   0041C6  28                 	db	40
   183                           
   184                           ;initializer for _turningLeftGear
   185   0041C7  28                 	db	40
   186                           
   187                           ;initializer for _bottomGearRight
   188   0041C8  15                 	db	21
   189                           
   190                           ;initializer for _bottomGearLeft
   191   0041C9  14                 	db	20
   192                           
   193                           ;initializer for _topGearRight
   194   0041CA  14                 	db	20
   195                           
   196                           ;initializer for _topGearLeft
   197   0041CB  14                 	db	20
   198                           
   199                           ;initializer for _rampDelay
   200   0041CC  08                 	db	8
   201                           
   202                           ;initializer for _sample_count
   203   0041CD  14                 	db	20
   204   000000                     _TMR0H	set	4052
   205   000000                     _RC4STAbits	set	3815
   206   000000                     _SP4BRGH	set	3814
   207   000000                     _LATEbits	set	3965
   208   000000                     _TRISEbits	set	3973
   209   000000                     _LATGbits	set	3967
   210   000000                     _TRISGbits	set	3975
   211   000000                     _LATFbits	set	3966
   212   000000                     _LATHbits	set	3968
   213   000000                     _TRISFbits	set	3974
   214   000000                     _TRISHbits	set	3976
   215   000000                     _SSP2CON2bits	set	3802
   216   000000                     _RX4PPS	set	3605
   217   000000                     _SSP2CLKPPS	set	3612
   218   000000                     _SSP2DATPPS	set	3613
   219   000000                     _RC7PPS	set	3689
   220   000000                     _RE2PPS	set	3700
   221   000000                     _LATAbits	set	3961
   222   000000                     _LATDbits	set	3964
   223   000000                     _TRISDbits	set	3972
   224   000000                     _PORTFbits	set	3982
   225   000000                     _T2PR	set	4028
   226   000000                     _T2CONbits	set	4029
   227   000000                     _CCPR2H	set	4006
   228   000000                     _CCPR1H	set	4010
   229   000000                     _TRISCbits	set	3971
   230   000000                     _TRISAbits	set	3969
   231   000000                     _LATCbits	set	3963
   232   000000                     _RE4PPS	set	3702
   233   000000                     _RG6PPS	set	3720
   234   000000                     _RD5PPS	set	3695
   235   000000                     _ANSELDbits	set	3751
   236   000000                     _SSP2ADD	set	3798
   237   000000                     _SSP2CON1bits	set	3801
   238   000000                     _CCPR4H	set	3873
   239   000000                     _CCPR3H	set	3877
   240   000000                     _TMR0L	set	4051
   241   000000                     _T0CON0bits	set	4053
   242   000000                     _T0CON1bits	set	4054
   243   000000                     _T2CLKCONbits	set	4031
   244   000000                     _T2HLTbits	set	4030
   245   000000                     _CCP1CONbits	set	4011
   246   000000                     _CCPTMRS0bits	set	4013
   247   000000                     _CCP2CONbits	set	4007
   248   000000                     _CCP3CONbits	set	3878
   249   000000                     _CCP4CONbits	set	3874
   250   000000                     _TX4REG	set	3812
   251   000000                     _SP4BRGL	set	3813
   252   000000                     _TX4STAbits	set	3816
   253   000000                     _BAUD4CONbits	set	3817
   254   000000                     _SSP2CON2	set	3802
   255   000000                     _SSP2STAT	set	3800
   256   000000                     _ANSELFbits	set	3764
   257   000000                     _SSP2BUF	set	3797
   258   000000                     _PIE0bits	set	3625
   259   000000                     _PIR4bits	set	3639
   260   000000                     _RC0PPS	set	3682
   261   000000                     _RD6PPS	set	3696
   262   000000                     _INTCONbits	set	4082
   263   000000                     _PIR0bits	set	3635
   264                           
   265                           	psect	smallconst
   266   000E00                     __psmallconst:
   267                           	callstack 0
   268   000E00  00                 	db	0
   269   000E01                     STR_5:
   270                           
   271                           ; BSR set to: 14
   272   000E01  25                 	db	37
   273   000E02  75                 	db	117	;'u'
   274   000E03  20                 	db	32
   275   000E04  25                 	db	37
   276   000E05  75                 	db	117	;'u'
   277   000E06  20                 	db	32
   278   000E07  25                 	db	37
   279   000E08  75                 	db	117	;'u'
   280   000E09  20                 	db	32
   281   000E0A  25                 	db	37
   282   000E0B  75                 	db	117	;'u'
   283   000E0C  20                 	db	32
   284   000E0D  0D                 	db	13
   285   000E0E  00                 	db	0
   286   000E0F                     STR_1:
   287                           
   288                           ; BSR set to: 14
   289   000E0F  25                 	db	37
   290   000E10  64                 	db	100	;'d'
   291   000E11  20                 	db	32
   292   000E12  0D                 	db	13
   293   000E13  00                 	db	0
   294   000E14                     STR_2:
   295                           
   296                           ; BSR set to: 14
   297   000E14  25                 	db	37
   298   000E15  64                 	db	100	;'d'
   299   000E16  20                 	db	32
   300   000E17  00                 	db	0
   301   000E18  00                 	db	0	; dummy byte at the end
   302   000000                     
   303                           ; #config settings
   304                           
   305                           	psect	cinit
   306   003CEE                     __pcinit:
   307                           	callstack 0
   308   003CEE                     start_initialization:
   309                           	callstack 0
   310   003CEE                     __initialization:
   311                           	callstack 0
   312                           
   313                           ; Initialize objects allocated to BANK0 (30 bytes)
   314                           ; load TBLPTR registers with __pidataBANK0
   315   003CEE  0EB0               	movlw	low __pidataBANK0
   316   003CF0  6EF6               	movwf	tblptrl,c
   317   003CF2  0E41               	movlw	high __pidataBANK0
   318   003CF4  6EF7               	movwf	tblptrh,c
   319   003CF6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   320   003CF8  6EF8               	movwf	tblptru,c
   321   003CFA  EE00  F0AA         	lfsr	0,__pdataBANK0
   322   003CFE  EE10 F01E          	lfsr	1,30
   323   003D02                     copy_data0:
   324   003D02  0009               	tblrd		*+
   325   003D04  CFF5 FFEE          	movff	tablat,postinc0
   326   003D08  50E5               	movf	postdec1,w,c
   327   003D0A  50E1               	movf	fsr1l,w,c
   328   003D0C  E1FA               	bnz	copy_data0
   329                           
   330                           ; Clear objects allocated to BANK1 (62 bytes)
   331   003D0E  EE01  F0A4         	lfsr	0,__pbssBANK1
   332   003D12  0E3E               	movlw	62
   333   003D14                     clear_0:
   334   003D14  6AEE               	clrf	postinc0,c
   335   003D16  06E8               	decf	wreg,f,c
   336   003D18  E1FD               	bnz	clear_0
   337                           
   338                           ; Clear objects allocated to BANK0 (40 bytes)
   339   003D1A  EE00  F060         	lfsr	0,__pbssBANK0
   340   003D1E  0E28               	movlw	40
   341   003D20                     clear_1:
   342   003D20  6AEE               	clrf	postinc0,c
   343   003D22  06E8               	decf	wreg,f,c
   344   003D24  E1FD               	bnz	clear_1
   345                           
   346                           ; Clear objects allocated to COMRAM (1 bytes)
   347   003D26  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   348   003D28                     end_of_initialization:
   349                           	callstack 0
   350   003D28                     __end_of__initialization:
   351                           	callstack 0
   352   003D28  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   353   003D2A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   354   003D2C  0100               	movlb	0
   355   003D2E  EF92  F013         	goto	_main	;jump to C main() function
   356                           
   357                           	psect	bssCOMRAM
   358   00005E                     __pbssCOMRAM:
   359                           	callstack 0
   360   00005E                     _returning:
   361                           	callstack 0
   362   00005E                     	ds	1
   363                           
   364                           	psect	bssBANK0
   365   000060                     __pbssBANK0:
   366                           	callstack 0
   367   000060                     _dbuf:
   368                           	callstack 0
   369   000060                     	ds	32
   370   000080                     _nout:
   371                           	callstack 0
   372   000080                     	ds	2
   373   000082                     _width:
   374                           	callstack 0
   375   000082                     	ds	2
   376   000084                     _prec:
   377                           	callstack 0
   378   000084                     	ds	2
   379   000086                     _flags:
   380                           	callstack 0
   381   000086                     	ds	1
   382   000087                     _return_flag:
   383                           	callstack 0
   384   000087                     	ds	1
   385                           
   386                           	psect	dataBANK0
   387   0000AA                     __pdataBANK0:
   388                           	callstack 0
   389   0000AA                     _manoeuvre_pointer:
   390                           	callstack 0
   391   0000AA                     	ds	2
   392   0000AC                     _timer_low_pointer:
   393                           	callstack 0
   394   0000AC                     	ds	2
   395   0000AE                     _timer_high_pointer:
   396                           	callstack 0
   397   0000AE                     	ds	2
   398   0000B0                     _squareDelay:
   399                           	callstack 0
   400   0000B0                     	ds	2
   401   0000B2                     _headbuttDelay:
   402                           	callstack 0
   403   0000B2                     	ds	2
   404   0000B4                     _turn180Delay:
   405                           	callstack 0
   406   0000B4                     	ds	2
   407   0000B6                     _turnRight135Delay:
   408                           	callstack 0
   409   0000B6                     	ds	2
   410   0000B8                     _turnLeft135Delay:
   411                           	callstack 0
   412   0000B8                     	ds	2
   413   0000BA                     _turnRight90Delay:
   414                           	callstack 0
   415   0000BA                     	ds	2
   416   0000BC                     _turnLeft90Delay:
   417                           	callstack 0
   418   0000BC                     	ds	2
   419   0000BE                     _wall_threshold_clear:
   420                           	callstack 0
   421   0000BE                     	ds	2
   422   0000C0                     _turningRightGear:
   423                           	callstack 0
   424   0000C0                     	ds	1
   425   0000C1                     _turningLeftGear:
   426                           	callstack 0
   427   0000C1                     	ds	1
   428   0000C2                     _bottomGearRight:
   429                           	callstack 0
   430   0000C2                     	ds	1
   431   0000C3                     _bottomGearLeft:
   432                           	callstack 0
   433   0000C3                     	ds	1
   434   0000C4                     _topGearRight:
   435                           	callstack 0
   436   0000C4                     	ds	1
   437   0000C5                     _topGearLeft:
   438                           	callstack 0
   439   0000C5                     	ds	1
   440   0000C6                     _rampDelay:
   441                           	callstack 0
   442   0000C6                     	ds	1
   443   0000C7                     _sample_count:
   444                           	callstack 0
   445   0000C7                     	ds	1
   446                           
   447                           	psect	bssBANK1
   448   0001A4                     __pbssBANK1:
   449                           	callstack 0
   450   0001A4                     _manoeuvre_count:
   451                           	callstack 0
   452   0001A4                     	ds	1
   453   0001A5                     _lost_flag:
   454                           	callstack 0
   455   0001A5                     	ds	1
   456   0001A6                     _trail_manoeuvre:
   457                           	callstack 0
   458   0001A6                     	ds	20
   459   0001BA                     _trail_timer_low:
   460                           	callstack 0
   461   0001BA                     	ds	20
   462   0001CE                     _trail_timer_high:
   463                           	callstack 0
   464   0001CE                     	ds	20
   465                           
   466                           	psect	cstackBANK1
   467   000100                     __pcstackBANK1:
   468                           	callstack 0
   469   000100                     sendArrayCharSerial4@tempStr:
   470                           	callstack 0
   471                           
   472                           ; 161 bytes @ 0x0
   473   000100                     	ds	161
   474   0001A1                     sendArrayCharSerial4@index:
   475                           	callstack 0
   476                           
   477                           ; 1 bytes @ 0xA1
   478   0001A1                     	ds	1
   479   0001A2                     sendArrayCharSerial4@i:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0xA2
   483   0001A2                     	ds	2
   484                           
   485                           	psect	cstackBANK0
   486   000088                     __pcstackBANK0:
   487                           	callstack 0
   488   000088                     ??_main:
   489                           
   490                           ; 1 bytes @ 0x0
   491   000088                     	ds	2
   492   00008A                     main@HSV_colour:
   493                           	callstack 0
   494                           
   495                           ; 6 bytes @ 0x2
   496   00008A                     	ds	6
   497   000090                     main@motorL:
   498                           	callstack 0
   499                           
   500                           ; 9 bytes @ 0x8
   501   000090                     	ds	9
   502   000099                     main@motorR:
   503                           	callstack 0
   504                           
   505                           ; 9 bytes @ 0x11
   506   000099                     	ds	9
   507   0000A2                     main@RGBC_colour:
   508                           	callstack 0
   509                           
   510                           ; 8 bytes @ 0x1A
   511   0000A2                     	ds	8
   512                           
   513                           	psect	cstackCOMRAM
   514   000001                     __pcstackCOMRAM:
   515                           	callstack 0
   516   000001                     ??_toggle_brake_lights:
   517   000001                     ??_toggle_main_beam:
   518   000001                     ??_toggle_left_indicators:
   519   000001                     ??_toggle_right_indicators:
   520   000001                     ??_toggle_tricolour_LED:
   521   000001                     ??_I2C_2_Master_Idle:
   522   000001                     ?_max_RGB:
   523                           	callstack 0
   524   000001                     ?_min_RGB:
   525                           	callstack 0
   526   000001                     ?___wmul:
   527                           	callstack 0
   528   000001                     ?___awdiv:
   529                           	callstack 0
   530   000001                     ?___awmod:
   531                           	callstack 0
   532   000001                     ?___lwmod:
   533                           	callstack 0
   534   000001                     ?___lmul:
   535                           	callstack 0
   536   000001                     ?___lldiv:
   537                           	callstack 0
   538   000001                     ?___xxtofl:
   539                           	callstack 0
   540   000001                     max_RGB@p:
   541                           	callstack 0
   542   000001                     min_RGB@p:
   543                           	callstack 0
   544   000001                     colour_to_key@p1:
   545                           	callstack 0
   546   000001                     sendCharSerial4@charToSend:
   547                           	callstack 0
   548   000001                     read_timer@tH:
   549                           	callstack 0
   550   000001                     write_timer@tL:
   551                           	callstack 0
   552   000001                     read_trail@tH:
   553                           	callstack 0
   554   000001                     write_trail@tL:
   555                           	callstack 0
   556   000001                     initDCmotorsPWM@PWMperiod:
   557                           	callstack 0
   558   000001                     ___wmul@multiplier:
   559                           	callstack 0
   560   000001                     ___awdiv@dividend:
   561                           	callstack 0
   562   000001                     ___awmod@dividend:
   563                           	callstack 0
   564   000001                     ___lwmod@dividend:
   565                           	callstack 0
   566   000001                     fputc@c:
   567                           	callstack 0
   568   000001                     ___lmul@multiplier:
   569                           	callstack 0
   570   000001                     ___lldiv@dividend:
   571                           	callstack 0
   572   000001                     ___xxtofl@val:
   573                           	callstack 0
   574                           
   575                           ; 4 bytes @ 0x0
   576   000001                     	ds	1
   577   000002                     ??_I2C_2_Master_Read:
   578   000002                     colour_to_key@p2:
   579                           	callstack 0
   580   000002                     I2C_2_Master_Write@data_byte:
   581                           	callstack 0
   582   000002                     read_timer@tL:
   583                           	callstack 0
   584   000002                     write_timer@tH:
   585                           	callstack 0
   586   000002                     read_trail@tL:
   587                           	callstack 0
   588   000002                     write_trail@man:
   589                           	callstack 0
   590   000002                     sendStringSerial4@string:
   591                           	callstack 0
   592                           
   593                           ; 2 bytes @ 0x1
   594   000002                     	ds	1
   595   000003                     color_writetoaddr@value:
   596                           	callstack 0
   597   000003                     I2C_2_Master_Read@ack:
   598                           	callstack 0
   599   000003                     read_trail@man:
   600                           	callstack 0
   601   000003                     write_trail@tH:
   602                           	callstack 0
   603   000003                     fputc@fp:
   604                           	callstack 0
   605   000003                     ___wmul@multiplicand:
   606                           	callstack 0
   607   000003                     ___awdiv@divisor:
   608                           	callstack 0
   609   000003                     ___awmod@divisor:
   610                           	callstack 0
   611   000003                     ___lwmod@divisor:
   612                           	callstack 0
   613                           
   614                           ; 2 bytes @ 0x2
   615   000003                     	ds	1
   616   000004                     ??_fputc:
   617   000004                     color_writetoaddr@address:
   618                           	callstack 0
   619   000004                     I2C_2_Master_Read@tmp:
   620                           	callstack 0
   621                           
   622                           ; 1 bytes @ 0x3
   623   000004                     	ds	1
   624   000005                     ??_color_click_init:
   625   000005                     ??___xxtofl:
   626   000005                     ?_color_read_Red:
   627                           	callstack 0
   628   000005                     ?_color_read_Green:
   629                           	callstack 0
   630   000005                     ?_color_read_Blue:
   631                           	callstack 0
   632   000005                     ?_color_read_Clear:
   633                           	callstack 0
   634   000005                     colour_to_key@key:
   635                           	callstack 0
   636   000005                     ___awdiv@counter:
   637                           	callstack 0
   638   000005                     ___awmod@counter:
   639                           	callstack 0
   640   000005                     ___lwmod@counter:
   641                           	callstack 0
   642   000005                     max_RGB@max_val:
   643                           	callstack 0
   644   000005                     min_RGB@min_val:
   645                           	callstack 0
   646   000005                     ___wmul@product:
   647                           	callstack 0
   648   000005                     ___lmul@multiplicand:
   649                           	callstack 0
   650   000005                     ___lldiv@divisor:
   651                           	callstack 0
   652                           
   653                           ; 4 bytes @ 0x4
   654   000005                     	ds	1
   655   000006                     ___awdiv@sign:
   656                           	callstack 0
   657   000006                     ___awmod@sign:
   658                           	callstack 0
   659                           
   660                           ; 1 bytes @ 0x5
   661   000006                     	ds	1
   662   000007                     ??_color_read_Red:
   663   000007                     ??_color_read_Green:
   664   000007                     ??_color_read_Blue:
   665   000007                     ??_color_read_Clear:
   666   000007                     ?_abs:
   667                           	callstack 0
   668   000007                     ?___lwdiv:
   669                           	callstack 0
   670   000007                     ___awdiv@quotient:
   671                           	callstack 0
   672   000007                     ___lwdiv@dividend:
   673                           	callstack 0
   674   000007                     abs@a:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x6
   678   000007                     	ds	2
   679   000009                     ??_abs:
   680   000009                     ___xxtofl@sign:
   681                           	callstack 0
   682   000009                     ___lwdiv@divisor:
   683                           	callstack 0
   684   000009                     ___lmul@product:
   685                           	callstack 0
   686   000009                     ___lldiv@quotient:
   687                           	callstack 0
   688                           
   689                           ; 4 bytes @ 0x8
   690   000009                     	ds	1
   691   00000A                     ___xxtofl@exp:
   692                           	callstack 0
   693   00000A                     color_read_Red@tmp:
   694                           	callstack 0
   695   00000A                     color_read_Green@tmp:
   696                           	callstack 0
   697   00000A                     color_read_Blue@tmp:
   698                           	callstack 0
   699   00000A                     color_read_Clear@tmp:
   700                           	callstack 0
   701                           
   702                           ; 2 bytes @ 0x9
   703   00000A                     	ds	1
   704   00000B                     ___lwdiv@quotient:
   705                           	callstack 0
   706   00000B                     ___xxtofl@arg:
   707                           	callstack 0
   708                           
   709                           ; 4 bytes @ 0xA
   710   00000B                     	ds	1
   711   00000C                     getRGBCval@p:
   712                           	callstack 0
   713                           
   714                           ; 1 bytes @ 0xB
   715   00000C                     	ds	1
   716   00000D                     wait_for_wall@p:
   717                           	callstack 0
   718   00000D                     ___lldiv@counter:
   719                           	callstack 0
   720   00000D                     ___lwdiv@counter:
   721                           	callstack 0
   722                           
   723                           ; 1 bytes @ 0xC
   724   00000D                     	ds	1
   725   00000E                     ?_vfpfcnvrt:
   726                           	callstack 0
   727   00000E                     average_RGBC@p:
   728                           	callstack 0
   729   00000E                     wait_for_wall@loss:
   730                           	callstack 0
   731   00000E                     convert_HSV@p1:
   732                           	callstack 0
   733   00000E                     setMotorPWM@m:
   734                           	callstack 0
   735   00000E                     vfpfcnvrt@fp:
   736                           	callstack 0
   737                           
   738                           ; 1 bytes @ 0xD
   739   00000E                     	ds	1
   740   00000F                     ??_average_RGBC:
   741   00000F                     ??_setMotorPWM:
   742   00000F                     ?___flmul:
   743                           	callstack 0
   744   00000F                     convert_HSV@p2:
   745                           	callstack 0
   746   00000F                     vfpfcnvrt@fmt:
   747                           	callstack 0
   748   00000F                     ___flmul@b:
   749                           	callstack 0
   750                           
   751                           ; 4 bytes @ 0xE
   752   00000F                     	ds	1
   753   000010                     ??_convert_HSV:
   754   000010                     vfpfcnvrt@ap:
   755                           	callstack 0
   756                           
   757                           ; 1 bytes @ 0xF
   758   000010                     	ds	1
   759   000011                     ??_vfpfcnvrt:
   760   000011                     average_RGBC@i:
   761                           	callstack 0
   762   000011                     setMotorPWM@posDuty:
   763                           	callstack 0
   764                           
   765                           ; 1 bytes @ 0x10
   766   000011                     	ds	1
   767   000012                     setMotorPWM@negDuty:
   768                           	callstack 0
   769   000012                     average_RGBC@temp_R:
   770                           	callstack 0
   771                           
   772                           ; 4 bytes @ 0x11
   773   000012                     	ds	1
   774   000013                     stop@mL:
   775                           	callstack 0
   776   000013                     turnLeft@mL:
   777                           	callstack 0
   778   000013                     turnRight@mL:
   779                           	callstack 0
   780   000013                     fullSpeedAhead@mL:
   781                           	callstack 0
   782   000013                     fullSpeedReverse@mL:
   783                           	callstack 0
   784   000013                     vfpfcnvrt@done:
   785                           	callstack 0
   786   000013                     ___flmul@a:
   787                           	callstack 0
   788                           
   789                           ; 4 bytes @ 0x12
   790   000013                     	ds	1
   791   000014                     stop@mR:
   792                           	callstack 0
   793   000014                     turnLeft@mR:
   794                           	callstack 0
   795   000014                     turnRight@mR:
   796                           	callstack 0
   797   000014                     fullSpeedAhead@mR:
   798                           	callstack 0
   799   000014                     fullSpeedReverse@mR:
   800                           	callstack 0
   801   000014                     vfpfcnvrt@cnt:
   802                           	callstack 0
   803                           
   804                           ; 2 bytes @ 0x13
   805   000014                     	ds	1
   806   000015                     ??_stop:
   807   000015                     ??_turnLeft:
   808   000015                     ??_turnRight:
   809   000015                     ??_fullSpeedAhead:
   810   000015                     ??_fullSpeedReverse:
   811                           
   812                           ; 1 bytes @ 0x14
   813   000015                     	ds	1
   814   000016                     turnLeft@leftGear:
   815                           	callstack 0
   816   000016                     turnRight@leftGear:
   817                           	callstack 0
   818   000016                     fullSpeedAhead@leftGear:
   819                           	callstack 0
   820   000016                     fullSpeedReverse@leftGear:
   821                           	callstack 0
   822   000016                     vfpfcnvrt@cp:
   823                           	callstack 0
   824   000016                     average_RGBC@temp_G:
   825                           	callstack 0
   826                           
   827                           ; 4 bytes @ 0x15
   828   000016                     	ds	1
   829   000017                     ??___flmul:
   830   000017                     turnLeft@rightGear:
   831                           	callstack 0
   832   000017                     turnRight@rightGear:
   833                           	callstack 0
   834   000017                     fullSpeedAhead@rightGear:
   835                           	callstack 0
   836   000017                     fullSpeedReverse@rightGear:
   837                           	callstack 0
   838   000017                     vfpfcnvrt@convarg:
   839                           	callstack 0
   840                           
   841                           ; 4 bytes @ 0x16
   842   000017                     	ds	1
   843   000018                     turnLeft90@mL:
   844                           	callstack 0
   845   000018                     turnRight90@mL:
   846                           	callstack 0
   847   000018                     turnLeft135@mL:
   848                           	callstack 0
   849   000018                     turnRight135@mL:
   850                           	callstack 0
   851   000018                     UTurn@mL:
   852                           	callstack 0
   853   000018                     headbuttReverse@mL:
   854                           	callstack 0
   855   000018                     squareReverse@mL:
   856                           	callstack 0
   857   000018                     convert_HSV@sat_scale:
   858                           	callstack 0
   859                           
   860                           ; 2 bytes @ 0x17
   861   000018                     	ds	1
   862   000019                     turnLeft90@mR:
   863                           	callstack 0
   864   000019                     turnRight90@mR:
   865                           	callstack 0
   866   000019                     turnLeft135@mR:
   867                           	callstack 0
   868   000019                     turnRight135@mR:
   869                           	callstack 0
   870   000019                     UTurn@mR:
   871                           	callstack 0
   872   000019                     headbuttReverse@mR:
   873                           	callstack 0
   874   000019                     squareReverse@mR:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x18
   878   000019                     	ds	1
   879   00001A                     ??_turnLeft90:
   880   00001A                     ??_turnRight90:
   881   00001A                     ??_turnLeft135:
   882   00001A                     ??_turnRight135:
   883   00001A                     ??_UTurn:
   884   00001A                     ??_headbuttReverse:
   885   00001A                     ??_squareReverse:
   886   00001A                     convert_HSV@m:
   887                           	callstack 0
   888   00001A                     average_RGBC@temp_B:
   889                           	callstack 0
   890                           
   891                           ; 4 bytes @ 0x19
   892   00001A                     	ds	1
   893   00001B                     ___flmul@sign:
   894                           	callstack 0
   895   00001B                     vfpfcnvrt@c:
   896                           	callstack 0
   897                           
   898                           ; 1 bytes @ 0x1A
   899   00001B                     	ds	1
   900   00001C                     ?_vfprintf:
   901                           	callstack 0
   902   00001C                     card_red@mL:
   903                           	callstack 0
   904   00001C                     card_green@mL:
   905                           	callstack 0
   906   00001C                     card_blue@mL:
   907                           	callstack 0
   908   00001C                     card_yellow@mL:
   909                           	callstack 0
   910   00001C                     card_pink@mL:
   911                           	callstack 0
   912   00001C                     card_orange@mL:
   913                           	callstack 0
   914   00001C                     card_cyan@mL:
   915                           	callstack 0
   916   00001C                     card_white@mL:
   917                           	callstack 0
   918   00001C                     vfprintf@fp:
   919                           	callstack 0
   920   00001C                     convert_HSV@sat:
   921                           	callstack 0
   922   00001C                     ___flmul@grs:
   923                           	callstack 0
   924                           
   925                           ; 4 bytes @ 0x1B
   926   00001C                     	ds	1
   927   00001D                     card_red@mR:
   928                           	callstack 0
   929   00001D                     card_green@mR:
   930                           	callstack 0
   931   00001D                     card_blue@mR:
   932                           	callstack 0
   933   00001D                     card_yellow@mR:
   934                           	callstack 0
   935   00001D                     card_pink@mR:
   936                           	callstack 0
   937   00001D                     card_orange@mR:
   938                           	callstack 0
   939   00001D                     card_cyan@mR:
   940                           	callstack 0
   941   00001D                     card_white@mR:
   942                           	callstack 0
   943   00001D                     vfprintf@fmt:
   944                           	callstack 0
   945                           
   946                           ; 1 bytes @ 0x1C
   947   00001D                     	ds	1
   948   00001E                     card_red@backtrack:
   949                           	callstack 0
   950   00001E                     card_green@backtrack:
   951                           	callstack 0
   952   00001E                     card_blue@backtrack:
   953                           	callstack 0
   954   00001E                     card_yellow@backtrack:
   955                           	callstack 0
   956   00001E                     card_pink@backtrack:
   957                           	callstack 0
   958   00001E                     card_orange@backtrack:
   959                           	callstack 0
   960   00001E                     card_cyan@backtrack:
   961                           	callstack 0
   962   00001E                     vfprintf@ap:
   963                           	callstack 0
   964   00001E                     convert_HSV@hue:
   965                           	callstack 0
   966   00001E                     average_RGBC@temp_C:
   967                           	callstack 0
   968                           
   969                           ; 4 bytes @ 0x1D
   970   00001E                     	ds	1
   971   00001F                     ??_card_red:
   972   00001F                     ??_card_green:
   973   00001F                     ??_card_blue:
   974   00001F                     ??_card_yellow:
   975   00001F                     ??_card_pink:
   976   00001F                     ??_card_orange:
   977   00001F                     ??_card_cyan:
   978   00001F                     vfprintf@cfmt:
   979                           	callstack 0
   980                           
   981                           ; 1 bytes @ 0x1E
   982   00001F                     	ds	1
   983   000020                     ?_sprintf:
   984                           	callstack 0
   985   000020                     ___flmul@aexp:
   986                           	callstack 0
   987   000020                     sprintf@s:
   988                           	callstack 0
   989   000020                     convert_HSV@temp_614:
   990                           	callstack 0
   991                           
   992                           ; 4 bytes @ 0x1F
   993   000020                     	ds	1
   994   000021                     pick_card@mL:
   995                           	callstack 0
   996   000021                     ___flmul@bexp:
   997                           	callstack 0
   998                           
   999                           ; 1 bytes @ 0x20
  1000   000021                     	ds	1
  1001   000022                     pick_card@mR:
  1002                           	callstack 0
  1003   000022                     sprintf@fmt:
  1004                           	callstack 0
  1005   000022                     ___flmul@prod:
  1006                           	callstack 0
  1007                           
  1008                           ; 4 bytes @ 0x21
  1009   000022                     	ds	1
  1010   000023                     pick_card@backtrack:
  1011                           	callstack 0
  1012                           
  1013                           ; 1 bytes @ 0x22
  1014   000023                     	ds	1
  1015   000024                     pick_card@key:
  1016                           	callstack 0
  1017   000024                     convert_HSV@temp:
  1018                           	callstack 0
  1019                           
  1020                           ; 4 bytes @ 0x23
  1021   000024                     	ds	1
  1022   000025                     ??_pick_card:
  1023                           
  1024                           ; 1 bytes @ 0x24
  1025   000025                     	ds	1
  1026   000026                     ___flmul@temp:
  1027                           	callstack 0
  1028                           
  1029                           ; 2 bytes @ 0x25
  1030   000026                     	ds	2
  1031   000028                     ?___fltol:
  1032                           	callstack 0
  1033   000028                     convert_HSV@temp_610:
  1034                           	callstack 0
  1035   000028                     ___fltol@f1:
  1036                           	callstack 0
  1037                           
  1038                           ; 4 bytes @ 0x27
  1039   000028                     	ds	3
  1040   00002B                     sprintf@ret:
  1041                           	callstack 0
  1042                           
  1043                           ; 2 bytes @ 0x2A
  1044   00002B                     	ds	1
  1045   00002C                     ??___fltol:
  1046   00002C                     convert_HSV@temp_611:
  1047                           	callstack 0
  1048                           
  1049                           ; 4 bytes @ 0x2B
  1050   00002C                     	ds	1
  1051   00002D                     sprintf@ap:
  1052                           	callstack 0
  1053                           
  1054                           ; 1 bytes @ 0x2C
  1055   00002D                     	ds	1
  1056   00002E                     sprintf@f:
  1057                           	callstack 0
  1058                           
  1059                           ; 12 bytes @ 0x2D
  1060   00002E                     	ds	2
  1061   000030                     ___fltol@sign1:
  1062                           	callstack 0
  1063   000030                     convert_HSV@temp_612:
  1064                           	callstack 0
  1065                           
  1066                           ; 4 bytes @ 0x2F
  1067   000030                     	ds	1
  1068   000031                     ___fltol@exp1:
  1069                           	callstack 0
  1070                           
  1071                           ; 1 bytes @ 0x30
  1072   000031                     	ds	1
  1073   000032                     scale_RGB@p:
  1074                           	callstack 0
  1075                           
  1076                           ; 1 bytes @ 0x31
  1077   000032                     	ds	1
  1078   000033                     ??_scale_RGB:
  1079                           
  1080                           ; 1 bytes @ 0x32
  1081   000033                     	ds	1
  1082   000034                     convert_HSV@temp_613:
  1083                           	callstack 0
  1084                           
  1085                           ; 4 bytes @ 0x33
  1086   000034                     	ds	4
  1087   000038                     convert_HSV@temp_609:
  1088                           	callstack 0
  1089                           
  1090                           ; 4 bytes @ 0x37
  1091   000038                     	ds	2
  1092   00003A                     sendRGBCvalSerial4@col_val:
  1093                           	callstack 0
  1094   00003A                     sendHSVvalSerial4@col_val:
  1095                           	callstack 0
  1096   00003A                     sendIntSerial4@integer:
  1097                           	callstack 0
  1098   00003A                     sendArrayCharSerial4@arr:
  1099                           	callstack 0
  1100                           
  1101                           ; 2 bytes @ 0x39
  1102   00003A                     	ds	1
  1103   00003B                     sendHSVvalSerial4@tempStr:
  1104                           	callstack 0
  1105   00003B                     sendRGBCvalSerial4@tempStr:
  1106                           	callstack 0
  1107                           
  1108                           ; 26 bytes @ 0x3A
  1109   00003B                     	ds	1
  1110   00003C                     ??_sendArrayCharSerial4:
  1111   00003C                     convert_HSV@hue_scale:
  1112                           	callstack 0
  1113   00003C                     sendIntSerial4@string:
  1114                           	callstack 0
  1115                           
  1116                           ; 17 bytes @ 0x3B
  1117   00003C                     	ds	2
  1118   00003E                     convert_HSV@M:
  1119                           	callstack 0
  1120                           
  1121                           ; 2 bytes @ 0x3D
  1122   00003E                     	ds	2
  1123   000040                     convert_HSV@C:
  1124                           	callstack 0
  1125                           
  1126                           ; 2 bytes @ 0x3F
  1127   000040                     	ds	13
  1128   00004D                     return_to_sender@mL:
  1129                           	callstack 0
  1130                           
  1131                           ; 1 bytes @ 0x4C
  1132   00004D                     	ds	1
  1133   00004E                     return_to_sender@mR:
  1134                           	callstack 0
  1135                           
  1136                           ; 1 bytes @ 0x4D
  1137   00004E                     	ds	1
  1138   00004F                     return_to_sender@timerH:
  1139                           	callstack 0
  1140                           
  1141                           ; 1 bytes @ 0x4E
  1142   00004F                     	ds	1
  1143   000050                     return_to_sender@timerL:
  1144                           	callstack 0
  1145                           
  1146                           ; 1 bytes @ 0x4F
  1147   000050                     	ds	1
  1148   000051                     return_to_sender@mann:
  1149                           	callstack 0
  1150                           
  1151                           ; 1 bytes @ 0x50
  1152   000051                     	ds	4
  1153   000055                     forward_navigation@mL:
  1154                           	callstack 0
  1155                           
  1156                           ; 1 bytes @ 0x54
  1157   000055                     	ds	1
  1158   000056                     forward_navigation@mR:
  1159                           	callstack 0
  1160                           
  1161                           ; 1 bytes @ 0x55
  1162   000056                     	ds	1
  1163   000057                     forward_navigation@p1:
  1164                           	callstack 0
  1165                           
  1166                           ; 1 bytes @ 0x56
  1167   000057                     	ds	1
  1168   000058                     forward_navigation@p2:
  1169                           	callstack 0
  1170                           
  1171                           ; 1 bytes @ 0x57
  1172   000058                     	ds	1
  1173   000059                     ??_forward_navigation:
  1174                           
  1175                           ; 1 bytes @ 0x58
  1176   000059                     	ds	2
  1177   00005B                     forward_navigation@timerH:
  1178                           	callstack 0
  1179                           
  1180                           ; 1 bytes @ 0x5A
  1181   00005B                     	ds	1
  1182   00005C                     forward_navigation@timerL:
  1183                           	callstack 0
  1184                           
  1185                           ; 1 bytes @ 0x5B
  1186   00005C                     	ds	1
  1187   00005D                     forward_navigation@mann:
  1188                           	callstack 0
  1189                           
  1190                           ; 1 bytes @ 0x5C
  1191   00005D                     	ds	1
  1192                           
  1193 ;;
  1194 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1195 ;;
  1196 ;; *************** function _main *****************
  1197 ;; Defined at:
  1198 ;;		line 29 in file "main.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  motorR          9   17[BANK0 ] struct DC_motor
  1203 ;;  motorL          9    8[BANK0 ] struct DC_motor
  1204 ;;  RGBC_colour     8   26[BANK0 ] struct RGBC_val
  1205 ;;  HSV_colour      6    2[BANK0 ] struct HSV_val
  1206 ;;  PWMcycle        2    0        unsigned int 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1217 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1218 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1219 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1220 ;;Total ram usage:       34 bytes
  1221 ;; Hardware stack levels required when called: 8
  1222 ;; This function calls:
  1223 ;;		_Timer0_init
  1224 ;;		_buggy_lights_init
  1225 ;;		_color_click_init
  1226 ;;		_forward_navigation
  1227 ;;		_initDCmotorsPWM
  1228 ;;		_initUSART4
  1229 ;;		_return_to_sender
  1230 ;; This function is called by:
  1231 ;;		Startup code after reset
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text0
  1236   002724                     __ptext0:
  1237                           	callstack 0
  1238   002724                     _main:
  1239                           	callstack 23
  1240   002724                     
  1241                           ;main.c: 30:     struct RGBC_val RGBC_colour;;main.c: 31:         RGBC_colour.R = 0;
  1242   002724  0E00               	movlw	0
  1243   002726  0100               	movlb	0	; () banked
  1244   002728  6FA3               	movwf	(main@RGBC_colour+1)& (0+255),b
  1245   00272A  0E00               	movlw	0
  1246   00272C  6FA2               	movwf	main@RGBC_colour& (0+255),b
  1247                           
  1248                           ;main.c: 32:         RGBC_colour.G = 0;
  1249   00272E  0E00               	movlw	0
  1250   002730  6FA5               	movwf	(main@RGBC_colour+3)& (0+255),b
  1251   002732  0E00               	movlw	0
  1252   002734  6FA4               	movwf	(main@RGBC_colour+2)& (0+255),b
  1253                           
  1254                           ;main.c: 33:         RGBC_colour.B = 0;
  1255   002736  0E00               	movlw	0
  1256   002738  6FA7               	movwf	(main@RGBC_colour+5)& (0+255),b
  1257   00273A  0E00               	movlw	0
  1258   00273C  6FA6               	movwf	(main@RGBC_colour+4)& (0+255),b
  1259                           
  1260                           ;main.c: 34:         RGBC_colour.C = 0;
  1261   00273E  0E00               	movlw	0
  1262   002740  6FA9               	movwf	(main@RGBC_colour+7)& (0+255),b
  1263   002742  0E00               	movlw	0
  1264   002744  6FA8               	movwf	(main@RGBC_colour+6)& (0+255),b
  1265                           
  1266                           ;main.c: 36:     struct HSV_val HSV_colour;;main.c: 37:         HSV_colour.H = 0;
  1267   002746  0E00               	movlw	0
  1268   002748  6F8B               	movwf	(main@HSV_colour+1)& (0+255),b
  1269   00274A  0E00               	movlw	0
  1270   00274C  6F8A               	movwf	main@HSV_colour& (0+255),b
  1271                           
  1272                           ;main.c: 38:         HSV_colour.S = 0;
  1273   00274E  0E00               	movlw	0
  1274   002750  6F8D               	movwf	(main@HSV_colour+3)& (0+255),b
  1275   002752  0E00               	movlw	0
  1276   002754  6F8C               	movwf	(main@HSV_colour+2)& (0+255),b
  1277                           
  1278                           ;main.c: 39:         HSV_colour.V = 0;
  1279   002756  0E00               	movlw	0
  1280   002758  6F8F               	movwf	(main@HSV_colour+5)& (0+255),b
  1281   00275A  0E00               	movlw	0
  1282   00275C  6F8E               	movwf	(main@HSV_colour+4)& (0+255),b
  1283                           
  1284                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 43:         motorL.power = 0;
  1285   00275E  0E00               	movlw	0
  1286   002760  6F90               	movwf	main@motorL& (0+255),b
  1287                           
  1288                           ;main.c: 44:         motorL.direction = 1;
  1289   002762  0E01               	movlw	1
  1290   002764  6F91               	movwf	(main@motorL+1)& (0+255),b
  1291                           
  1292                           ;main.c: 45:         motorL.brakemode = 1;
  1293   002766  0E01               	movlw	1
  1294   002768  6F92               	movwf	(main@motorL+2)& (0+255),b
  1295   00276A                     
  1296                           ; BSR set to: 0
  1297                           ;main.c: 46:         motorL.PWMperiod = PWMcycle;
  1298   00276A  0E00               	movlw	0
  1299   00276C  6F94               	movwf	(main@motorL+4)& (0+255),b
  1300   00276E  0E63               	movlw	99
  1301   002770  6F93               	movwf	(main@motorL+3)& (0+255),b
  1302   002772                     
  1303                           ; BSR set to: 0
  1304                           ;main.c: 47:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1305   002772  0EAA               	movlw	170
  1306   002774  6F95               	movwf	(main@motorL+5)& (0+255),b
  1307   002776  0E0F               	movlw	15
  1308   002778  6F96               	movwf	(main@motorL+6)& (0+255),b
  1309   00277A                     
  1310                           ; BSR set to: 0
  1311                           ;main.c: 48:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1312   00277A  0EA6               	movlw	166
  1313   00277C  6F97               	movwf	(main@motorL+7)& (0+255),b
  1314   00277E  0E0F               	movlw	15
  1315   002780  6F98               	movwf	(main@motorL+8)& (0+255),b
  1316                           
  1317                           ;main.c: 49:         motorR.power = 0;
  1318   002782  0E00               	movlw	0
  1319   002784  6F99               	movwf	main@motorR& (0+255),b
  1320                           
  1321                           ;main.c: 50:         motorR.direction = 1;
  1322   002786  0E01               	movlw	1
  1323   002788  6F9A               	movwf	(main@motorR+1)& (0+255),b
  1324                           
  1325                           ;main.c: 51:         motorR.brakemode = 1;
  1326   00278A  0E01               	movlw	1
  1327   00278C  6F9B               	movwf	(main@motorR+2)& (0+255),b
  1328   00278E                     
  1329                           ; BSR set to: 0
  1330                           ;main.c: 52:         motorR.PWMperiod = PWMcycle;
  1331   00278E  0E00               	movlw	0
  1332   002790  6F9D               	movwf	(main@motorR+4)& (0+255),b
  1333   002792  0E63               	movlw	99
  1334   002794  6F9C               	movwf	(main@motorR+3)& (0+255),b
  1335   002796                     
  1336                           ; BSR set to: 0
  1337                           ;main.c: 53:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1338   002796  0E25               	movlw	37
  1339   002798  6F9E               	movwf	(main@motorR+5)& (0+255),b
  1340   00279A  0E0F               	movlw	15
  1341   00279C  6F9F               	movwf	(main@motorR+6)& (0+255),b
  1342   00279E                     
  1343                           ; BSR set to: 0
  1344                           ;main.c: 54:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1345   00279E  0E21               	movlw	33
  1346   0027A0  6FA0               	movwf	(main@motorR+7)& (0+255),b
  1347   0027A2  0E0F               	movlw	15
  1348   0027A4  6FA1               	movwf	(main@motorR+8)& (0+255),b
  1349   0027A6                     
  1350                           ; BSR set to: 0
  1351                           ;main.c: 57:     initDCmotorsPWM(PWMcycle);
  1352   0027A6  0E00               	movlw	0
  1353   0027A8  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1354   0027AA  0E63               	movlw	99
  1355   0027AC  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1356   0027AE  EC42  F019         	call	_initDCmotorsPWM	;wreg free
  1357                           
  1358                           ;main.c: 58:     buggy_lights_init();
  1359   0027B2  ECF9  F01F         	call	_buggy_lights_init	;wreg free
  1360   0027B6                     
  1361                           ;main.c: 59:     color_click_init();
  1362   0027B6  ECDF  F01F         	call	_color_click_init	;wreg free
  1363   0027BA                     
  1364                           ;main.c: 60:     initUSART4();
  1365   0027BA  ECE7  F020         	call	_initUSART4	;wreg free
  1366   0027BE                     
  1367                           ;main.c: 61:     Timer0_init();
  1368   0027BE  EC39  F020         	call	_Timer0_init	;wreg free
  1369   0027C2                     
  1370                           ;main.c: 65:         TRISDbits.TRISD7 = 0;
  1371   0027C2  9E84               	bcf	132,7,c	;volatile
  1372   0027C4                     
  1373                           ;main.c: 66:         TRISHbits.TRISH3 = 0;
  1374   0027C4  9688               	bcf	136,3,c	;volatile
  1375   0027C6                     
  1376                           ;main.c: 68:         LATDbits.LATD7 = 0;
  1377   0027C6  9E7C               	bcf	124,7,c	;volatile
  1378   0027C8                     
  1379                           ;main.c: 69:         LATHbits.LATH3 = 0;
  1380   0027C8  9680               	bcf	128,3,c	;volatile
  1381   0027CA                     
  1382                           ;main.c: 73:         TRISFbits.TRISF2 = 1;
  1383   0027CA  8486               	bsf	134,2,c	;volatile
  1384   0027CC                     
  1385                           ;main.c: 74:         TRISFbits.TRISF3 = 1;
  1386   0027CC  8686               	bsf	134,3,c	;volatile
  1387   0027CE                     
  1388                           ;main.c: 76:         ANSELFbits.ANSELF2 = 0;
  1389   0027CE  010E               	movlb	14	; () banked
  1390   0027D0  95B4               	bcf	180,2,b	;volatile
  1391   0027D2                     
  1392                           ; BSR set to: 14
  1393                           ;main.c: 77:         ANSELFbits.ANSELF3 = 0;
  1394   0027D2  97B4               	bcf	180,3,b	;volatile
  1395   0027D4                     l433:
  1396   0027D4  B68E               	btfsc	142,3,c	;volatile
  1397   0027D6  EFEF  F013         	goto	u4081
  1398   0027DA  EFF1  F013         	goto	u4080
  1399   0027DE                     u4081:
  1400   0027DE  EFEA  F013         	goto	l433
  1401   0027E2                     u4080:
  1402   0027E2                     
  1403                           ;main.c: 80:     LATDbits.LATD7 = !LATDbits.LATD7;
  1404   0027E2  AE7C               	btfss	124,7,c	;volatile
  1405   0027E4  EFF6  F013         	goto	u4091
  1406   0027E8  EFFB  F013         	goto	u4090
  1407   0027EC                     u4091:
  1408   0027EC  0100               	movlb	0	; () banked
  1409   0027EE  6B88               	clrf	??_main& (0+255),b
  1410   0027F0  2B88               	incf	??_main& (0+255),f,b
  1411   0027F2  EFFD  F013         	goto	u4108
  1412   0027F6                     u4090:
  1413   0027F6  0100               	movlb	0	; () banked
  1414   0027F8  6B88               	clrf	??_main& (0+255),b
  1415   0027FA                     u4108:
  1416   0027FA  3388               	rrcf	??_main& (0+255),f,b
  1417   0027FC  3388               	rrcf	??_main& (0+255),f,b
  1418   0027FE  507C               	movf	124,w,c	;volatile
  1419   002800  1988               	xorwf	??_main& (0+255),w,b
  1420   002802  0B7F               	andlw	-129
  1421   002804  1988               	xorwf	??_main& (0+255),w,b
  1422   002806  6E7C               	movwf	124,c	;volatile
  1423                           
  1424                           ;main.c: 81:     LATHbits.LATH3 = !LATHbits.LATH3;
  1425   002808  A680               	btfss	128,3,c	;volatile
  1426   00280A  EF09  F014         	goto	u4111
  1427   00280E  EF0D  F014         	goto	u4110
  1428   002812                     u4111:
  1429   002812  6B88               	clrf	??_main& (0+255),b
  1430   002814  2B88               	incf	??_main& (0+255),f,b
  1431   002816  EF0F  F014         	goto	u4128
  1432   00281A                     u4110:
  1433   00281A  0100               	movlb	0	; () banked
  1434   00281C  6B88               	clrf	??_main& (0+255),b
  1435   00281E                     u4128:
  1436   00281E  4788               	rlncf	??_main& (0+255),f,b
  1437   002820  4788               	rlncf	??_main& (0+255),f,b
  1438   002822  4788               	rlncf	??_main& (0+255),f,b
  1439   002824  5080               	movf	128,w,c	;volatile
  1440   002826  1988               	xorwf	??_main& (0+255),w,b
  1441   002828  0BF7               	andlw	-9
  1442   00282A  1988               	xorwf	??_main& (0+255),w,b
  1443   00282C  6E80               	movwf	128,c	;volatile
  1444   00282E                     
  1445                           ; BSR set to: 0
  1446                           ;main.c: 82:      _delay((unsigned long)((1000)*(64000000/4000.0)));
  1447   00282E  0E52               	movlw	82
  1448   002830  0100               	movlb	0	; () banked
  1449   002832  6F89               	movwf	(??_main+1)& (0+255),b
  1450   002834  0E2B               	movlw	43
  1451   002836  6F88               	movwf	??_main& (0+255),b
  1452   002838  0E00               	movlw	0
  1453   00283A                     u4137:
  1454   00283A  2EE8               	decfsz	wreg,f,c
  1455   00283C  D7FE               	bra	u4137
  1456   00283E  2F88               	decfsz	??_main& (0+255),f,b
  1457   002840  D7FC               	bra	u4137
  1458   002842  2F89               	decfsz	(??_main+1)& (0+255),f,b
  1459   002844  D7FA               	bra	u4137
  1460   002846  0000               	nop	
  1461   002848                     
  1462                           ;main.c: 84:     forward_navigation(&motorL, &motorR, &HSV_colour, &RGBC_colour);
  1463   002848  0E90               	movlw	low main@motorL
  1464   00284A  6E55               	movwf	forward_navigation@mL^0,c
  1465   00284C  0E99               	movlw	low main@motorR
  1466   00284E  6E56               	movwf	forward_navigation@mR^0,c
  1467   002850  0E8A               	movlw	low main@HSV_colour
  1468   002852  6E57               	movwf	forward_navigation@p1^0,c
  1469   002854  0EA2               	movlw	low main@RGBC_colour
  1470   002856  6E58               	movwf	forward_navigation@p2^0,c
  1471   002858  EC18  F012         	call	_forward_navigation	;wreg free
  1472   00285C                     
  1473                           ;main.c: 85:     return_to_sender(&motorL, &motorR);
  1474   00285C  0E90               	movlw	low main@motorL
  1475   00285E  6E4D               	movwf	return_to_sender@mL^0,c
  1476   002860  0E99               	movlw	low main@motorR
  1477   002862  6E4E               	movwf	return_to_sender@mR^0,c
  1478   002864  EC06  F016         	call	_return_to_sender	;wreg free
  1479   002868  EF21  F000         	goto	start
  1480   00286C                     __end_of_main:
  1481                           	callstack 0
  1482                           
  1483 ;; *************** function _return_to_sender *****************
  1484 ;; Defined at:
  1485 ;;		line 182 in file "timers.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  mL              1   76[COMRAM] PTR struct DC_motor
  1488 ;;		 -> main@motorL(9), 
  1489 ;;  mR              1   77[COMRAM] PTR struct DC_motor
  1490 ;;		 -> main@motorR(9), 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  mann            1   80[COMRAM] unsigned char 
  1493 ;;  timerL          1   79[COMRAM] unsigned char 
  1494 ;;  timerH          1   78[COMRAM] unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1505 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1507 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1508 ;;Total ram usage:        5 bytes
  1509 ;; Hardware stack levels used: 1
  1510 ;; Hardware stack levels required when called: 7
  1511 ;; This function calls:
  1512 ;;		_fullSpeedAhead
  1513 ;;		_pick_card
  1514 ;;		_read_trail
  1515 ;;		_sendIntSerial4
  1516 ;;		_start_timer
  1517 ;;		_stop
  1518 ;;		_stop_timer
  1519 ;;		_toggle_main_beam
  1520 ;;		_write_timer
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	text1
  1527   002C0C                     __ptext1:
  1528                           	callstack 0
  1529   002C0C                     _return_to_sender:
  1530                           	callstack 23
  1531   002C0C                     
  1532                           ;timers.c: 182: void return_to_sender(DC_motor *mL, DC_motor *mR);timers.c: 183: {;timer
      +                          s.c: 184:     while (manoeuvre_count != 0) {
  1533   002C0C  EF5F  F016         	goto	l4595
  1534   002C10                     l4563:
  1535                           
  1536                           ; BSR set to: 1
  1537                           ;timers.c: 185:         unsigned char timerH = 0;
  1538   002C10  0E00               	movlw	0
  1539   002C12  6E4F               	movwf	return_to_sender@timerH^0,c
  1540                           
  1541                           ;timers.c: 186:         unsigned char timerL = 0;
  1542   002C14  0E00               	movlw	0
  1543   002C16  6E50               	movwf	return_to_sender@timerL^0,c
  1544                           
  1545                           ;timers.c: 187:         unsigned char mann = 0;
  1546   002C18  0E00               	movlw	0
  1547   002C1A  6E51               	movwf	return_to_sender@mann^0,c
  1548   002C1C                     
  1549                           ; BSR set to: 1
  1550                           ;timers.c: 189:         read_trail(&timerH, &timerL, &mann);
  1551   002C1C  0E4F               	movlw	low return_to_sender@timerH
  1552   002C1E  6E01               	movwf	read_trail@tH^0,c
  1553   002C20  0E50               	movlw	low return_to_sender@timerL
  1554   002C22  6E02               	movwf	read_trail@tL^0,c
  1555   002C24  0E51               	movlw	low return_to_sender@mann
  1556   002C26  6E03               	movwf	read_trail@man^0,c
  1557   002C28  EC63  F01D         	call	_read_trail	;wreg free
  1558   002C2C                     
  1559                           ;timers.c: 190:         sendIntSerial4(timerH);
  1560   002C2C  C04F  F03A         	movff	return_to_sender@timerH,sendIntSerial4@integer
  1561   002C30  6A3B               	clrf	(sendIntSerial4@integer+1)^0,c
  1562   002C32  EC86  F020         	call	_sendIntSerial4	;wreg free
  1563   002C36                     
  1564                           ;timers.c: 191:         sendIntSerial4(timerL);
  1565   002C36  C050  F03A         	movff	return_to_sender@timerL,sendIntSerial4@integer
  1566   002C3A  6A3B               	clrf	(sendIntSerial4@integer+1)^0,c
  1567   002C3C  EC86  F020         	call	_sendIntSerial4	;wreg free
  1568   002C40                     
  1569                           ;timers.c: 192:         sendIntSerial4(mann);
  1570   002C40  C051  F03A         	movff	return_to_sender@mann,sendIntSerial4@integer
  1571   002C44  6A3B               	clrf	(sendIntSerial4@integer+1)^0,c
  1572   002C46  EC86  F020         	call	_sendIntSerial4	;wreg free
  1573   002C4A                     
  1574                           ;timers.c: 193:         if (mann != 8) {
  1575   002C4A  0E08               	movlw	8
  1576   002C4C  1851               	xorwf	return_to_sender@mann^0,w,c
  1577   002C4E  B4D8               	btfsc	status,2,c
  1578   002C50  EF2C  F016         	goto	u3891
  1579   002C54  EF2E  F016         	goto	u3890
  1580   002C58                     u3891:
  1581   002C58  EF38  F016         	goto	l4577
  1582   002C5C                     u3890:
  1583   002C5C                     
  1584                           ;timers.c: 194:             pick_card(mL, mR, returning, mann);
  1585   002C5C  C04D  F021         	movff	return_to_sender@mL,pick_card@mL
  1586   002C60  C04E  F022         	movff	return_to_sender@mR,pick_card@mR
  1587   002C64  C05E  F023         	movff	_returning,pick_card@backtrack
  1588   002C68  C051  F024         	movff	return_to_sender@mann,pick_card@key
  1589   002C6C  ECB9  F014         	call	_pick_card	;wreg free
  1590   002C70                     l4577:
  1591                           
  1592                           ;timers.c: 197:         toggle_main_beam();
  1593   002C70  EC4D  F020         	call	_toggle_main_beam	;wreg free
  1594   002C74                     
  1595                           ;timers.c: 198:         write_timer(0b11111111 - timerH, 0b11111111 - timerL);
  1596   002C74  5050               	movf	return_to_sender@timerL^0,w,c
  1597   002C76  0AFF               	xorlw	255
  1598   002C78  6E01               	movwf	write_timer@tL^0,c
  1599   002C7A  504F               	movf	return_to_sender@timerH^0,w,c
  1600   002C7C  0AFF               	xorlw	255
  1601   002C7E  EC19  F021         	call	_write_timer
  1602   002C82                     
  1603                           ;timers.c: 199:         start_timer();
  1604   002C82  EC30  F021         	call	_start_timer	;wreg free
  1605   002C86                     
  1606                           ;timers.c: 200:         fullSpeedAhead(mL, mR);
  1607   002C86  C04D  F013         	movff	return_to_sender@mL,fullSpeedAhead@mL
  1608   002C8A  C04E  F014         	movff	return_to_sender@mR,fullSpeedAhead@mR
  1609   002C8E  EC28  F017         	call	_fullSpeedAhead	;wreg free
  1610   002C92                     l4585:
  1611   002C92  0100               	movlb	0	; () banked
  1612   002C94  5187               	movf	_return_flag& (0+255),w,b
  1613   002C96  B4D8               	btfsc	status,2,c
  1614   002C98  EF50  F016         	goto	u3901
  1615   002C9C  EF52  F016         	goto	u3900
  1616   002CA0                     u3901:
  1617   002CA0  EF49  F016         	goto	l4585
  1618   002CA4                     u3900:
  1619   002CA4                     
  1620                           ; BSR set to: 0
  1621                           ;timers.c: 204:         stop(mL, mR);
  1622   002CA4  C04D  F013         	movff	return_to_sender@mL,stop@mL
  1623   002CA8  C04E  F014         	movff	return_to_sender@mR,stop@mR
  1624   002CAC  EC8A  F019         	call	_stop	;wreg free
  1625   002CB0                     
  1626                           ;timers.c: 205:         stop_timer();
  1627   002CB0  EC2E  F021         	call	_stop_timer	;wreg free
  1628   002CB4                     
  1629                           ;timers.c: 206:         return_flag = 0;
  1630   002CB4  0E00               	movlw	0
  1631   002CB6  0100               	movlb	0	; () banked
  1632   002CB8  6F87               	movwf	_return_flag& (0+255),b
  1633   002CBA                     
  1634                           ; BSR set to: 0
  1635                           ;timers.c: 207:         toggle_main_beam();
  1636   002CBA  EC4D  F020         	call	_toggle_main_beam	;wreg free
  1637   002CBE                     l4595:
  1638                           
  1639                           ;timers.c: 184:     while (manoeuvre_count != 0) {
  1640   002CBE  0101               	movlb	1	; () banked
  1641   002CC0  51A4               	movf	_manoeuvre_count& (0+255),w,b
  1642   002CC2  A4D8               	btfss	status,2,c
  1643   002CC4  EF66  F016         	goto	u3911
  1644   002CC8  EF68  F016         	goto	u3910
  1645   002CCC                     u3911:
  1646   002CCC  EF08  F016         	goto	l4563
  1647   002CD0                     u3910:
  1648   002CD0                     
  1649                           ; BSR set to: 1
  1650   002CD0  0012               	return		;funcret
  1651   002CD2                     __end_of_return_to_sender:
  1652                           	callstack 0
  1653                           
  1654 ;; *************** function _toggle_main_beam *****************
  1655 ;; Defined at:
  1656 ;;		line 57 in file "buggy_lights.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      void 
  1663 ;; Registers used:
  1664 ;;		wreg, status,2, status,0
  1665 ;; Tracked objects:
  1666 ;;		On entry : 0/0
  1667 ;;		On exit  : 0/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1673 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1674 ;;Total ram usage:        1 bytes
  1675 ;; Hardware stack levels used: 1
  1676 ;; Hardware stack levels required when called: 1
  1677 ;; This function calls:
  1678 ;;		Nothing
  1679 ;; This function is called by:
  1680 ;;		_return_to_sender
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text2
  1685   00409A                     __ptext2:
  1686                           	callstack 0
  1687   00409A                     _toggle_main_beam:
  1688                           	callstack 28
  1689   00409A                     
  1690                           ;buggy_lights.c: 60:     LATDbits.LATD3 = !LATDbits.LATD3;
  1691   00409A  A67C               	btfss	124,3,c	;volatile
  1692   00409C  EF52  F020         	goto	u3151
  1693   0040A0  EF56  F020         	goto	u3150
  1694   0040A4                     u3151:
  1695   0040A4  6A01               	clrf	??_toggle_main_beam^0,c
  1696   0040A6  2A01               	incf	??_toggle_main_beam^0,f,c
  1697   0040A8  EF57  F020         	goto	u3168
  1698   0040AC                     u3150:
  1699   0040AC  6A01               	clrf	??_toggle_main_beam^0,c
  1700   0040AE                     u3168:
  1701   0040AE  4601               	rlncf	??_toggle_main_beam^0,f,c
  1702   0040B0  4601               	rlncf	??_toggle_main_beam^0,f,c
  1703   0040B2  4601               	rlncf	??_toggle_main_beam^0,f,c
  1704   0040B4  507C               	movf	124,w,c	;volatile
  1705   0040B6  1801               	xorwf	??_toggle_main_beam^0,w,c
  1706   0040B8  0BF7               	andlw	-9
  1707   0040BA  1801               	xorwf	??_toggle_main_beam^0,w,c
  1708   0040BC  6E7C               	movwf	124,c	;volatile
  1709   0040BE  0012               	return		;funcret
  1710   0040C0                     __end_of_toggle_main_beam:
  1711                           	callstack 0
  1712                           
  1713 ;; *************** function _sendIntSerial4 *****************
  1714 ;; Defined at:
  1715 ;;		line 43 in file "serial.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  integer         2   57[COMRAM] int 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  string         17   59[COMRAM] unsigned char [17]
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1729 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1730 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1732 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1733 ;;Total ram usage:       19 bytes
  1734 ;; Hardware stack levels used: 1
  1735 ;; Hardware stack levels required when called: 6
  1736 ;; This function calls:
  1737 ;;		_sendStringSerial4
  1738 ;;		_sprintf
  1739 ;; This function is called by:
  1740 ;;		_return_to_sender
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text3
  1745   00410C                     __ptext3:
  1746                           	callstack 0
  1747   00410C                     _sendIntSerial4:
  1748                           	callstack 23
  1749   00410C                     
  1750                           ;serial.c: 45:     char string[sizeof(int) * 8 + 1];;serial.c: 46:     sprintf(string, "
      +                          %d \r", integer);
  1751   00410C  0E3C               	movlw	low sendIntSerial4@string
  1752   00410E  6E20               	movwf	sprintf@s^0,c
  1753   004110  6A21               	clrf	(sprintf@s+1)^0,c
  1754   004112  0E0F               	movlw	low STR_1
  1755   004114  6E22               	movwf	sprintf@fmt^0,c
  1756   004116  C03A  F023         	movff	sendIntSerial4@integer,?_sprintf+3
  1757   00411A  C03B  F024         	movff	sendIntSerial4@integer+1,?_sprintf+4
  1758   00411E  EC51  F01E         	call	_sprintf	;wreg free
  1759   004122                     
  1760                           ;serial.c: 47:     sendStringSerial4(string);
  1761   004122  0E3C               	movlw	low sendIntSerial4@string
  1762   004124  6E02               	movwf	sendStringSerial4@string^0,c
  1763   004126  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1764   004128  ECAD  F01C         	call	_sendStringSerial4	;wreg free
  1765   00412C  0012               	return		;funcret
  1766   00412E                     __end_of_sendIntSerial4:
  1767                           	callstack 0
  1768                           
  1769 ;; *************** function _read_trail *****************
  1770 ;; Defined at:
  1771 ;;		line 81 in file "timers.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  tH              1    0[COMRAM] PTR unsigned char 
  1774 ;;		 -> return_to_sender@timerH(1), 
  1775 ;;  tL              1    1[COMRAM] PTR unsigned char 
  1776 ;;		 -> return_to_sender@timerL(1), 
  1777 ;;  man             1    2[COMRAM] PTR unsigned char 
  1778 ;;		 -> return_to_sender@mann(1), 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1790 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1793 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1794 ;;Total ram usage:        3 bytes
  1795 ;; Hardware stack levels used: 1
  1796 ;; Hardware stack levels required when called: 1
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_return_to_sender
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text4
  1805   003AC6                     __ptext4:
  1806                           	callstack 0
  1807   003AC6                     _read_trail:
  1808                           	callstack 28
  1809   003AC6                     
  1810                           ;timers.c: 81: void read_trail(unsigned char *tH, unsigned char *tL, unsigned char *man)
      +                          ;timers.c: 82: {;timers.c: 83:     timer_high_pointer --;
  1811   003AC6  0100               	movlb	0	; () banked
  1812   003AC8  07AE               	decf	_timer_high_pointer& (0+255),f,b
  1813   003ACA  A0D8               	btfss	status,0,c
  1814   003ACC  07AF               	decf	(_timer_high_pointer+1)& (0+255),f,b
  1815                           
  1816                           ;timers.c: 84:     timer_low_pointer --;
  1817   003ACE  07AC               	decf	_timer_low_pointer& (0+255),f,b
  1818   003AD0  A0D8               	btfss	status,0,c
  1819   003AD2  07AD               	decf	(_timer_low_pointer+1)& (0+255),f,b
  1820                           
  1821                           ;timers.c: 85:     manoeuvre_pointer --;
  1822   003AD4  07AA               	decf	_manoeuvre_pointer& (0+255),f,b
  1823   003AD6  A0D8               	btfss	status,0,c
  1824   003AD8  07AB               	decf	(_manoeuvre_pointer+1)& (0+255),f,b
  1825                           
  1826                           ;timers.c: 87:     manoeuvre_count --;
  1827   003ADA  0101               	movlb	1	; () banked
  1828   003ADC  07A4               	decf	_manoeuvre_count& (0+255),f,b
  1829   003ADE                     
  1830                           ; BSR set to: 1
  1831                           ;timers.c: 89:     *tH = *timer_high_pointer;
  1832   003ADE  C0AE  FFD9         	movff	_timer_high_pointer,fsr2l
  1833   003AE2  C0AF  FFDA         	movff	_timer_high_pointer+1,fsr2h
  1834   003AE6  5001               	movf	read_trail@tH^0,w,c
  1835   003AE8  6EE1               	movwf	fsr1l,c
  1836   003AEA  6AE2               	clrf	fsr1h,c
  1837   003AEC  CFDF FFE7          	movff	indf2,indf1
  1838   003AF0                     
  1839                           ; BSR set to: 1
  1840                           ;timers.c: 90:     *tL = *timer_low_pointer;
  1841   003AF0  C0AC  FFD9         	movff	_timer_low_pointer,fsr2l
  1842   003AF4  C0AD  FFDA         	movff	_timer_low_pointer+1,fsr2h
  1843   003AF8  5002               	movf	read_trail@tL^0,w,c
  1844   003AFA  6EE1               	movwf	fsr1l,c
  1845   003AFC  6AE2               	clrf	fsr1h,c
  1846   003AFE  CFDF FFE7          	movff	indf2,indf1
  1847   003B02                     
  1848                           ; BSR set to: 1
  1849                           ;timers.c: 91:     *man = *manoeuvre_pointer;
  1850   003B02  C0AA  FFD9         	movff	_manoeuvre_pointer,fsr2l
  1851   003B06  C0AB  FFDA         	movff	_manoeuvre_pointer+1,fsr2h
  1852   003B0A  5003               	movf	read_trail@man^0,w,c
  1853   003B0C  6EE1               	movwf	fsr1l,c
  1854   003B0E  6AE2               	clrf	fsr1h,c
  1855   003B10  CFDF FFE7          	movff	indf2,indf1
  1856   003B14                     
  1857                           ; BSR set to: 1
  1858   003B14  0012               	return		;funcret
  1859   003B16                     __end_of_read_trail:
  1860                           	callstack 0
  1861                           
  1862 ;; *************** function _initUSART4 *****************
  1863 ;; Defined at:
  1864 ;;		line 8 in file "serial.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;		None
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;		None
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  1    wreg      void 
  1871 ;; Registers used:
  1872 ;;		wreg, status,2
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1882 ;;Total ram usage:        0 bytes
  1883 ;; Hardware stack levels used: 1
  1884 ;; Hardware stack levels required when called: 1
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_main
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text5
  1893   0041CE                     __ptext5:
  1894                           	callstack 0
  1895   0041CE                     _initUSART4:
  1896                           	callstack 29
  1897   0041CE                     
  1898                           ;serial.c: 9:     RC0PPS = 0x12;
  1899   0041CE  0E12               	movlw	18
  1900   0041D0  010E               	movlb	14	; () banked
  1901   0041D2  6F62               	movwf	98,b	;volatile
  1902                           
  1903                           ;serial.c: 10:     RX4PPS = 0x11;
  1904   0041D4  0E11               	movlw	17
  1905   0041D6  6F15               	movwf	21,b	;volatile
  1906   0041D8                     
  1907                           ; BSR set to: 14
  1908                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1909   0041D8  97E9               	bcf	233,3,b	;volatile
  1910   0041DA                     
  1911                           ; BSR set to: 14
  1912                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1913   0041DA  95E8               	bcf	232,2,b	;volatile
  1914                           
  1915                           ;serial.c: 14:     SP4BRGL = 51;
  1916   0041DC  0E33               	movlw	51
  1917   0041DE  6FE5               	movwf	229,b	;volatile
  1918                           
  1919                           ;serial.c: 15:     SP4BRGH = 0;
  1920   0041E0  0E00               	movlw	0
  1921   0041E2  6FE6               	movwf	230,b	;volatile
  1922   0041E4                     
  1923                           ; BSR set to: 14
  1924                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1925   0041E4  89E7               	bsf	231,4,b	;volatile
  1926   0041E6                     
  1927                           ; BSR set to: 14
  1928                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1929   0041E6  8BE8               	bsf	232,5,b	;volatile
  1930   0041E8                     
  1931                           ; BSR set to: 14
  1932                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1933   0041E8  8FE7               	bsf	231,7,b	;volatile
  1934   0041EA                     
  1935                           ; BSR set to: 14
  1936   0041EA  0012               	return		;funcret
  1937   0041EC                     __end_of_initUSART4:
  1938                           	callstack 0
  1939                           
  1940 ;; *************** function _initDCmotorsPWM *****************
  1941 ;; Defined at:
  1942 ;;		line 7 in file "dc_motor.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;		None
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, status,2
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1956 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1959 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1960 ;;Total ram usage:        2 bytes
  1961 ;; Hardware stack levels used: 1
  1962 ;; Hardware stack levels required when called: 1
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_main
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           	psect	text6
  1971   003284                     __ptext6:
  1972                           	callstack 0
  1973   003284                     _initDCmotorsPWM:
  1974                           	callstack 29
  1975   003284                     
  1976                           ;dc_motor.c: 9:     TRISEbits.TRISE2 = 0;
  1977   003284  9485               	bcf	133,2,c	;volatile
  1978                           
  1979                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1980   003286  9885               	bcf	133,4,c	;volatile
  1981                           
  1982                           ;dc_motor.c: 11:     TRISCbits.TRISC7 = 0;
  1983   003288  9E83               	bcf	131,7,c	;volatile
  1984                           
  1985                           ;dc_motor.c: 12:     TRISGbits.TRISG6 = 0;
  1986   00328A  9C87               	bcf	135,6,c	;volatile
  1987                           
  1988                           ;dc_motor.c: 13:     LATEbits.LATE2 = 0;
  1989   00328C  947D               	bcf	125,2,c	;volatile
  1990                           
  1991                           ;dc_motor.c: 14:     LATEbits.LATE4 = 0;
  1992   00328E  987D               	bcf	125,4,c	;volatile
  1993                           
  1994                           ;dc_motor.c: 15:     LATCbits.LATC7 = 0;
  1995   003290  9E7B               	bcf	123,7,c	;volatile
  1996                           
  1997                           ;dc_motor.c: 16:     LATGbits.LATG6 = 0;
  1998   003292  9C7F               	bcf	127,6,c	;volatile
  1999   003294                     
  2000                           ;dc_motor.c: 19:     RE2PPS=0x05;
  2001   003294  0E05               	movlw	5
  2002   003296  010E               	movlb	14	; () banked
  2003   003298  6F74               	movwf	116,b	;volatile
  2004                           
  2005                           ;dc_motor.c: 20:     RE4PPS=0x06;
  2006   00329A  0E06               	movlw	6
  2007   00329C  6F76               	movwf	118,b	;volatile
  2008                           
  2009                           ;dc_motor.c: 21:     RC7PPS=0x07;
  2010   00329E  0E07               	movlw	7
  2011   0032A0  6F69               	movwf	105,b	;volatile
  2012                           
  2013                           ;dc_motor.c: 22:     RG6PPS=0x08;
  2014   0032A2  0E08               	movlw	8
  2015   0032A4  6F88               	movwf	136,b	;volatile
  2016                           
  2017                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b100;
  2018   0032A6  50BD               	movf	189,w,c	;volatile
  2019   0032A8  0B8F               	andlw	-113
  2020   0032AA  0940               	iorlw	64
  2021   0032AC  6EBD               	movwf	189,c	;volatile
  2022                           
  2023                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
  2024   0032AE  0EE0               	movlw	-32
  2025   0032B0  16BE               	andwf	190,f,c	;volatile
  2026                           
  2027                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
  2028   0032B2  50BF               	movf	191,w,c	;volatile
  2029   0032B4  0BF0               	andlw	-16
  2030   0032B6  0901               	iorlw	1
  2031   0032B8  6EBF               	movwf	191,c	;volatile
  2032   0032BA                     
  2033                           ; BSR set to: 14
  2034                           ;dc_motor.c: 31:     T2PR=(unsigned char)PWMperiod;
  2035   0032BA  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2036   0032BE                     
  2037                           ; BSR set to: 14
  2038                           ;dc_motor.c: 32:     T2CONbits.ON=1;
  2039   0032BE  8EBD               	bsf	189,7,c	;volatile
  2040                           
  2041                           ;dc_motor.c: 36:         CCPR1H=0;
  2042   0032C0  0E00               	movlw	0
  2043   0032C2  6EAA               	movwf	170,c	;volatile
  2044                           
  2045                           ;dc_motor.c: 37:         CCPR2H=0;
  2046   0032C4  0E00               	movlw	0
  2047   0032C6  6EA6               	movwf	166,c	;volatile
  2048                           
  2049                           ;dc_motor.c: 38:         CCPR3H=0;
  2050   0032C8  0E00               	movlw	0
  2051   0032CA  010F               	movlb	15	; () banked
  2052   0032CC  6F25               	movwf	37,b	;volatile
  2053                           
  2054                           ;dc_motor.c: 39:         CCPR4H=0;
  2055   0032CE  0E00               	movlw	0
  2056   0032D0  6F21               	movwf	33,b	;volatile
  2057                           
  2058                           ;dc_motor.c: 42:         CCPTMRS0bits.C1TSEL=0;
  2059   0032D2  0EFC               	movlw	-4
  2060   0032D4  16AD               	andwf	173,f,c	;volatile
  2061                           
  2062                           ;dc_motor.c: 43:         CCPTMRS0bits.C2TSEL=0;
  2063   0032D6  0EF3               	movlw	-13
  2064   0032D8  16AD               	andwf	173,f,c	;volatile
  2065                           
  2066                           ;dc_motor.c: 44:         CCPTMRS0bits.C3TSEL=0;
  2067   0032DA  0ECF               	movlw	-49
  2068   0032DC  16AD               	andwf	173,f,c	;volatile
  2069                           
  2070                           ;dc_motor.c: 45:         CCPTMRS0bits.C4TSEL=0;
  2071   0032DE  0E3F               	movlw	-193
  2072   0032E0  16AD               	andwf	173,f,c	;volatile
  2073   0032E2                     
  2074                           ; BSR set to: 15
  2075                           ;dc_motor.c: 48:         CCP1CONbits.FMT=1;
  2076   0032E2  88AB               	bsf	171,4,c	;volatile
  2077                           
  2078                           ;dc_motor.c: 49:         CCP1CONbits.CCP1MODE=0b1100;
  2079   0032E4  50AB               	movf	171,w,c	;volatile
  2080   0032E6  0BF0               	andlw	-16
  2081   0032E8  090C               	iorlw	12
  2082   0032EA  6EAB               	movwf	171,c	;volatile
  2083   0032EC                     
  2084                           ; BSR set to: 15
  2085                           ;dc_motor.c: 50:         CCP1CONbits.EN=1;
  2086   0032EC  8EAB               	bsf	171,7,c	;volatile
  2087   0032EE                     
  2088                           ; BSR set to: 15
  2089                           ;dc_motor.c: 52:         CCP2CONbits.FMT=1;
  2090   0032EE  88A7               	bsf	167,4,c	;volatile
  2091                           
  2092                           ;dc_motor.c: 53:         CCP2CONbits.CCP2MODE=0b1100;
  2093   0032F0  50A7               	movf	167,w,c	;volatile
  2094   0032F2  0BF0               	andlw	-16
  2095   0032F4  090C               	iorlw	12
  2096   0032F6  6EA7               	movwf	167,c	;volatile
  2097   0032F8                     
  2098                           ; BSR set to: 15
  2099                           ;dc_motor.c: 54:         CCP2CONbits.EN=1;
  2100   0032F8  8EA7               	bsf	167,7,c	;volatile
  2101   0032FA                     
  2102                           ; BSR set to: 15
  2103                           ;dc_motor.c: 56:         CCP3CONbits.FMT=1;
  2104   0032FA  8926               	bsf	38,4,b	;volatile
  2105                           
  2106                           ;dc_motor.c: 57:         CCP3CONbits.CCP3MODE=0b1100;
  2107   0032FC  5126               	movf	38,w,b	;volatile
  2108   0032FE  0BF0               	andlw	-16
  2109   003300  090C               	iorlw	12
  2110   003302  6F26               	movwf	38,b	;volatile
  2111   003304                     
  2112                           ; BSR set to: 15
  2113                           ;dc_motor.c: 58:         CCP3CONbits.EN=1;
  2114   003304  8F26               	bsf	38,7,b	;volatile
  2115   003306                     
  2116                           ; BSR set to: 15
  2117                           ;dc_motor.c: 60:         CCP4CONbits.FMT=1;
  2118   003306  8922               	bsf	34,4,b	;volatile
  2119                           
  2120                           ;dc_motor.c: 61:         CCP4CONbits.CCP4MODE=0b1100;
  2121   003308  5122               	movf	34,w,b	;volatile
  2122   00330A  0BF0               	andlw	-16
  2123   00330C  090C               	iorlw	12
  2124   00330E  6F22               	movwf	34,b	;volatile
  2125   003310                     
  2126                           ; BSR set to: 15
  2127                           ;dc_motor.c: 62:         CCP4CONbits.EN=1;
  2128   003310  8F22               	bsf	34,7,b	;volatile
  2129   003312                     
  2130                           ; BSR set to: 15
  2131   003312  0012               	return		;funcret
  2132   003314                     __end_of_initDCmotorsPWM:
  2133                           	callstack 0
  2134                           
  2135 ;; *************** function _forward_navigation *****************
  2136 ;; Defined at:
  2137 ;;		line 116 in file "timers.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  mL              1   84[COMRAM] PTR struct DC_motor
  2140 ;;		 -> main@motorL(9), 
  2141 ;;  mR              1   85[COMRAM] PTR struct DC_motor
  2142 ;;		 -> main@motorR(9), 
  2143 ;;  p1              1   86[COMRAM] PTR struct HSV_val
  2144 ;;		 -> main@HSV_colour(6), 
  2145 ;;  p2              1   87[COMRAM] PTR struct RGBC_val
  2146 ;;		 -> main@RGBC_colour(8), 
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;  mann            1   92[COMRAM] unsigned char 
  2149 ;;  timerL          1   91[COMRAM] unsigned char 
  2150 ;;  timerH          1   90[COMRAM] unsigned char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      void 
  2153 ;; Registers used:
  2154 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2160 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2161 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2162 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2163 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2164 ;;Total ram usage:        9 bytes
  2165 ;; Hardware stack levels used: 1
  2166 ;; Hardware stack levels required when called: 7
  2167 ;; This function calls:
  2168 ;;		_average_RGBC
  2169 ;;		_colour_to_key
  2170 ;;		_convert_HSV
  2171 ;;		_fullSpeedAhead
  2172 ;;		_pick_card
  2173 ;;		_read_timer
  2174 ;;		_reset_timer
  2175 ;;		_scale_RGB
  2176 ;;		_sendArrayCharSerial4
  2177 ;;		_sendHSVvalSerial4
  2178 ;;		_sendRGBCvalSerial4
  2179 ;;		_start_timer
  2180 ;;		_stop
  2181 ;;		_stop_timer
  2182 ;;		_toggle_tricolour_LED
  2183 ;;		_wait_for_wall
  2184 ;;		_write_trail
  2185 ;; This function is called by:
  2186 ;;		_main
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text7
  2191   002430                     __ptext7:
  2192                           	callstack 0
  2193   002430                     _forward_navigation:
  2194                           	callstack 23
  2195   002430                     
  2196                           ;timers.c: 116: void forward_navigation(DC_motor *mL, DC_motor *mR, HSV_val *p1, RGBC_va
      +                          l *p2);timers.c: 117: {;timers.c: 118:     while (!returning) {
  2197   002430  EFDF  F012         	goto	l4919
  2198   002434                     l4859:
  2199                           
  2200                           ;timers.c: 119:         unsigned char timerH = 0;
  2201   002434  0E00               	movlw	0
  2202   002436  6E5B               	movwf	forward_navigation@timerH^0,c
  2203                           
  2204                           ;timers.c: 120:         unsigned char timerL = 0;
  2205   002438  0E00               	movlw	0
  2206   00243A  6E5C               	movwf	forward_navigation@timerL^0,c
  2207   00243C                     
  2208                           ;timers.c: 123:         reset_timer();
  2209   00243C  EC13  F021         	call	_reset_timer	;wreg free
  2210                           
  2211                           ;timers.c: 124:         start_timer();
  2212   002440  EC30  F021         	call	_start_timer	;wreg free
  2213   002444                     
  2214                           ;timers.c: 125:         fullSpeedAhead(mL, mR);
  2215   002444  C055  F013         	movff	forward_navigation@mL,fullSpeedAhead@mL
  2216   002448  C056  F014         	movff	forward_navigation@mR,fullSpeedAhead@mR
  2217   00244C  EC28  F017         	call	_fullSpeedAhead	;wreg free
  2218   002450                     
  2219                           ;timers.c: 127:         wait_for_wall(p2, lost_flag);
  2220   002450  C058  F00D         	movff	forward_navigation@p2,wait_for_wall@p
  2221   002454  C1A5  F00E         	movff	_lost_flag,wait_for_wall@loss
  2222   002458  EC99  F01E         	call	_wait_for_wall	;wreg free
  2223   00245C                     
  2224                           ;timers.c: 129:         read_timer(&timerH, &timerL);
  2225   00245C  0E5B               	movlw	low forward_navigation@timerH
  2226   00245E  6E01               	movwf	read_timer@tH^0,c
  2227   002460  0E5C               	movlw	low forward_navigation@timerL
  2228   002462  6E02               	movwf	read_timer@tL^0,c
  2229   002464  EC02  F021         	call	_read_timer	;wreg free
  2230   002468                     
  2231                           ;timers.c: 130:         stop_timer();
  2232   002468  EC2E  F021         	call	_stop_timer	;wreg free
  2233                           
  2234                           ;timers.c: 131:         stop(mL, mR);
  2235   00246C  C055  F013         	movff	forward_navigation@mL,stop@mL
  2236   002470  C056  F014         	movff	forward_navigation@mR,stop@mR
  2237   002474  EC8A  F019         	call	_stop	;wreg free
  2238   002478                     
  2239                           ;timers.c: 133:         toggle_tricolour_LED();
  2240   002478  ECA2  F015         	call	_toggle_tricolour_LED	;wreg free
  2241   00247C                     
  2242                           ;timers.c: 134:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2243   00247C  0E11               	movlw	17
  2244   00247E  6E5A               	movwf	(??_forward_navigation+1)^0,c
  2245   002480  0E3C               	movlw	60
  2246   002482  6E59               	movwf	??_forward_navigation^0,c
  2247   002484  0ECB               	movlw	203
  2248   002486                     u4147:
  2249   002486  2EE8               	decfsz	wreg,f,c
  2250   002488  D7FE               	bra	u4147
  2251   00248A  2E59               	decfsz	??_forward_navigation^0,f,c
  2252   00248C  D7FC               	bra	u4147
  2253   00248E  2E5A               	decfsz	(??_forward_navigation+1)^0,f,c
  2254   002490  D7FA               	bra	u4147
  2255   002492  0000               	nop	
  2256   002494                     
  2257                           ;timers.c: 136:         average_RGBC(p2);
  2258   002494  C058  F00E         	movff	forward_navigation@p2,average_RGBC@p
  2259   002498  EC40  F010         	call	_average_RGBC	;wreg free
  2260   00249C                     
  2261                           ;timers.c: 137:         scale_RGB(p2);
  2262   00249C  C058  F032         	movff	forward_navigation@p2,scale_RGB@p
  2263   0024A0  EC37  F015         	call	_scale_RGB	;wreg free
  2264   0024A4                     
  2265                           ;timers.c: 139:         convert_HSV(p1, p2);
  2266   0024A4  C057  F00E         	movff	forward_navigation@p1,convert_HSV@p1
  2267   0024A8  C058  F00F         	movff	forward_navigation@p2,convert_HSV@p2
  2268   0024AC  EC0D  F007         	call	_convert_HSV	;wreg free
  2269   0024B0                     
  2270                           ;timers.c: 140:         mann = colour_to_key(p1, p2);
  2271   0024B0  C057  F001         	movff	forward_navigation@p1,colour_to_key@p1
  2272   0024B4  C058  F002         	movff	forward_navigation@p2,colour_to_key@p2
  2273   0024B8  EC73  F00A         	call	_colour_to_key	;wreg free
  2274   0024BC  6E5D               	movwf	forward_navigation@mann^0,c
  2275   0024BE                     
  2276                           ;timers.c: 142:         toggle_tricolour_LED();
  2277   0024BE  ECA2  F015         	call	_toggle_tricolour_LED	;wreg free
  2278   0024C2                     
  2279                           ;timers.c: 143:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2280   0024C2  0E11               	movlw	17
  2281   0024C4  6E5A               	movwf	(??_forward_navigation+1)^0,c
  2282   0024C6  0E3C               	movlw	60
  2283   0024C8  6E59               	movwf	??_forward_navigation^0,c
  2284   0024CA  0ECB               	movlw	203
  2285   0024CC                     u4157:
  2286   0024CC  2EE8               	decfsz	wreg,f,c
  2287   0024CE  D7FE               	bra	u4157
  2288   0024D0  2E59               	decfsz	??_forward_navigation^0,f,c
  2289   0024D2  D7FC               	bra	u4157
  2290   0024D4  2E5A               	decfsz	(??_forward_navigation+1)^0,f,c
  2291   0024D6  D7FA               	bra	u4157
  2292   0024D8  0000               	nop	
  2293   0024DA                     
  2294                           ;timers.c: 152:         if (lost_flag) {
  2295   0024DA  0101               	movlb	1	; () banked
  2296   0024DC  51A5               	movf	_lost_flag& (0+255),w,b
  2297   0024DE  B4D8               	btfsc	status,2,c
  2298   0024E0  EF74  F012         	goto	u4001
  2299   0024E4  EF76  F012         	goto	u4000
  2300   0024E8                     u4001:
  2301   0024E8  EF8B  F012         	goto	l4895
  2302   0024EC                     u4000:
  2303   0024EC                     
  2304                           ; BSR set to: 1
  2305                           ;timers.c: 153:             timerH = 0b11111111;
  2306   0024EC  685B               	setf	forward_navigation@timerH^0,c
  2307                           
  2308                           ;timers.c: 154:             timerL = 0b11111111;
  2309   0024EE  685C               	setf	forward_navigation@timerL^0,c
  2310   0024F0                     
  2311                           ; BSR set to: 1
  2312                           ;timers.c: 155:             mann = 8;
  2313   0024F0  0E08               	movlw	8
  2314   0024F2  6E5D               	movwf	forward_navigation@mann^0,c
  2315   0024F4                     
  2316                           ; BSR set to: 1
  2317                           ;timers.c: 156:             LATDbits.LATD7 = !LATDbits.LATD7;
  2318   0024F4  AE7C               	btfss	124,7,c	;volatile
  2319   0024F6  EF7F  F012         	goto	u4011
  2320   0024FA  EF83  F012         	goto	u4010
  2321   0024FE                     u4011:
  2322   0024FE  6A59               	clrf	??_forward_navigation^0,c
  2323   002500  2A59               	incf	??_forward_navigation^0,f,c
  2324   002502  EF84  F012         	goto	u4028
  2325   002506                     u4010:
  2326   002506  6A59               	clrf	??_forward_navigation^0,c
  2327   002508                     u4028:
  2328   002508  3259               	rrcf	??_forward_navigation^0,f,c
  2329   00250A  3259               	rrcf	??_forward_navigation^0,f,c
  2330   00250C  507C               	movf	124,w,c	;volatile
  2331   00250E  1859               	xorwf	??_forward_navigation^0,w,c
  2332   002510  0B7F               	andlw	-129
  2333   002512  1859               	xorwf	??_forward_navigation^0,w,c
  2334   002514  6E7C               	movwf	124,c	;volatile
  2335   002516                     l4895:
  2336                           
  2337                           ;timers.c: 159:         if (manoeuvre_count == 19) {
  2338   002516  0E13               	movlw	19
  2339   002518  0101               	movlb	1	; () banked
  2340   00251A  19A4               	xorwf	_manoeuvre_count& (0+255),w,b
  2341   00251C  A4D8               	btfss	status,2,c
  2342   00251E  EF93  F012         	goto	u4031
  2343   002522  EF95  F012         	goto	u4030
  2344   002526                     u4031:
  2345   002526  EF97  F012         	goto	l4899
  2346   00252A                     u4030:
  2347   00252A                     
  2348                           ; BSR set to: 1
  2349                           ;timers.c: 160:             mann = 8;
  2350   00252A  0E08               	movlw	8
  2351   00252C  6E5D               	movwf	forward_navigation@mann^0,c
  2352   00252E                     l4899:
  2353                           
  2354                           ; BSR set to: 1
  2355                           ;timers.c: 163:         write_trail(timerH, timerL, mann);
  2356   00252E  C05C  F001         	movff	forward_navigation@timerL,write_trail@tL
  2357   002532  C05D  F002         	movff	forward_navigation@mann,write_trail@man
  2358   002536  505B               	movf	forward_navigation@timerH^0,w,c
  2359   002538  ECFD  F01E         	call	_write_trail
  2360   00253C                     
  2361                           ;timers.c: 164:         pick_card(mL, mR, returning, mann);
  2362   00253C  C055  F021         	movff	forward_navigation@mL,pick_card@mL
  2363   002540  C056  F022         	movff	forward_navigation@mR,pick_card@mR
  2364   002544  C05E  F023         	movff	_returning,pick_card@backtrack
  2365   002548  C05D  F024         	movff	forward_navigation@mann,pick_card@key
  2366   00254C  ECB9  F014         	call	_pick_card	;wreg free
  2367   002550                     
  2368                           ;timers.c: 166:         if (mann == 8) {
  2369   002550  0E08               	movlw	8
  2370   002552  185D               	xorwf	forward_navigation@mann^0,w,c
  2371   002554  A4D8               	btfss	status,2,c
  2372   002556  EFAF  F012         	goto	u4041
  2373   00255A  EFB1  F012         	goto	u4040
  2374   00255E                     u4041:
  2375   00255E  EFC5  F012         	goto	l4909
  2376   002562                     u4040:
  2377   002562                     
  2378                           ;timers.c: 167:             returning = 1;
  2379   002562  0E01               	movlw	1
  2380   002564  6E5E               	movwf	_returning^0,c
  2381   002566                     
  2382                           ;timers.c: 168:             LATHbits.LATH3 = !LATHbits.LATH3;
  2383   002566  A680               	btfss	128,3,c	;volatile
  2384   002568  EFB8  F012         	goto	u4051
  2385   00256C  EFBC  F012         	goto	u4050
  2386   002570                     u4051:
  2387   002570  6A59               	clrf	??_forward_navigation^0,c
  2388   002572  2A59               	incf	??_forward_navigation^0,f,c
  2389   002574  EFBD  F012         	goto	u4068
  2390   002578                     u4050:
  2391   002578  6A59               	clrf	??_forward_navigation^0,c
  2392   00257A                     u4068:
  2393   00257A  4659               	rlncf	??_forward_navigation^0,f,c
  2394   00257C  4659               	rlncf	??_forward_navigation^0,f,c
  2395   00257E  4659               	rlncf	??_forward_navigation^0,f,c
  2396   002580  5080               	movf	128,w,c	;volatile
  2397   002582  1859               	xorwf	??_forward_navigation^0,w,c
  2398   002584  0BF7               	andlw	-9
  2399   002586  1859               	xorwf	??_forward_navigation^0,w,c
  2400   002588  6E80               	movwf	128,c	;volatile
  2401   00258A                     l4909:
  2402                           
  2403                           ;timers.c: 171:         sendRGBCvalSerial4(p2);
  2404   00258A  C058  F03A         	movff	forward_navigation@p2,sendRGBCvalSerial4@col_val
  2405   00258E  ECDE  F01C         	call	_sendRGBCvalSerial4	;wreg free
  2406   002592                     
  2407                           ;timers.c: 172:         sendHSVvalSerial4(p1);
  2408   002592  C057  F03A         	movff	forward_navigation@p1,sendHSVvalSerial4@col_val
  2409   002596  EC2B  F01E         	call	_sendHSVvalSerial4	;wreg free
  2410   00259A                     
  2411                           ;timers.c: 173:         sendArrayCharSerial4(trail_timer_high);
  2412   00259A  0ECE               	movlw	low _trail_timer_high
  2413   00259C  6E3A               	movwf	sendArrayCharSerial4@arr^0,c
  2414   00259E  0E01               	movlw	high _trail_timer_high
  2415   0025A0  6E3B               	movwf	(sendArrayCharSerial4@arr+1)^0,c
  2416   0025A2  ECCD  F01A         	call	_sendArrayCharSerial4	;wreg free
  2417   0025A6                     
  2418                           ;timers.c: 174:         sendArrayCharSerial4(trail_timer_low);
  2419   0025A6  0EBA               	movlw	low _trail_timer_low
  2420   0025A8  6E3A               	movwf	sendArrayCharSerial4@arr^0,c
  2421   0025AA  0E01               	movlw	high _trail_timer_low
  2422   0025AC  6E3B               	movwf	(sendArrayCharSerial4@arr+1)^0,c
  2423   0025AE  ECCD  F01A         	call	_sendArrayCharSerial4	;wreg free
  2424   0025B2                     
  2425                           ;timers.c: 175:         sendArrayCharSerial4(trail_manoeuvre);
  2426   0025B2  0EA6               	movlw	low _trail_manoeuvre
  2427   0025B4  6E3A               	movwf	sendArrayCharSerial4@arr^0,c
  2428   0025B6  0E01               	movlw	high _trail_manoeuvre
  2429   0025B8  6E3B               	movwf	(sendArrayCharSerial4@arr+1)^0,c
  2430   0025BA  ECCD  F01A         	call	_sendArrayCharSerial4	;wreg free
  2431   0025BE                     l4919:
  2432                           
  2433                           ;timers.c: 118:     while (!returning) {
  2434   0025BE  505E               	movf	_returning^0,w,c
  2435   0025C0  B4D8               	btfsc	status,2,c
  2436   0025C2  EFE5  F012         	goto	u4071
  2437   0025C6  EFE7  F012         	goto	u4070
  2438   0025CA                     u4071:
  2439   0025CA  EF1A  F012         	goto	l4859
  2440   0025CE                     u4070:
  2441   0025CE  0012               	return		;funcret
  2442   0025D0                     __end_of_forward_navigation:
  2443                           	callstack 0
  2444                           
  2445 ;; *************** function _write_trail *****************
  2446 ;; Defined at:
  2447 ;;		line 100 in file "timers.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;  tH              1    wreg     unsigned char 
  2450 ;;  tL              1    0[COMRAM] unsigned char 
  2451 ;;  man             1    1[COMRAM] unsigned char 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  tH              1    2[COMRAM] unsigned char 
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  1    wreg      void 
  2456 ;; Registers used:
  2457 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2463 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2466 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2467 ;;Total ram usage:        3 bytes
  2468 ;; Hardware stack levels used: 1
  2469 ;; Hardware stack levels required when called: 1
  2470 ;; This function calls:
  2471 ;;		Nothing
  2472 ;; This function is called by:
  2473 ;;		_forward_navigation
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text8
  2478   003DFA                     __ptext8:
  2479                           	callstack 0
  2480   003DFA                     _write_trail:
  2481                           	callstack 28
  2482                           
  2483                           ;incstack = 0
  2484                           ;write_trail@tH stored from wreg
  2485   003DFA  6E03               	movwf	write_trail@tH^0,c
  2486   003DFC                     
  2487                           ;timers.c: 100: void write_trail(unsigned char tH, unsigned char tL, unsigned char man);
      +                          timers.c: 101: {;timers.c: 102:     *timer_high_pointer = tH;
  2488   003DFC  C0AE  FFD9         	movff	_timer_high_pointer,fsr2l
  2489   003E00  C0AF  FFDA         	movff	_timer_high_pointer+1,fsr2h
  2490   003E04  C003  FFDF         	movff	write_trail@tH,indf2
  2491   003E08                     
  2492                           ;timers.c: 103:     *timer_low_pointer = tL;
  2493   003E08  C0AC  FFD9         	movff	_timer_low_pointer,fsr2l
  2494   003E0C  C0AD  FFDA         	movff	_timer_low_pointer+1,fsr2h
  2495   003E10  C001  FFDF         	movff	write_trail@tL,indf2
  2496   003E14                     
  2497                           ;timers.c: 104:     *manoeuvre_pointer = man;
  2498   003E14  C0AA  FFD9         	movff	_manoeuvre_pointer,fsr2l
  2499   003E18  C0AB  FFDA         	movff	_manoeuvre_pointer+1,fsr2h
  2500   003E1C  C002  FFDF         	movff	write_trail@man,indf2
  2501   003E20                     
  2502                           ;timers.c: 106:     timer_high_pointer ++;
  2503   003E20  0100               	movlb	0	; () banked
  2504   003E22  4BAE               	infsnz	_timer_high_pointer& (0+255),f,b
  2505   003E24  2BAF               	incf	(_timer_high_pointer+1)& (0+255),f,b
  2506   003E26                     
  2507                           ; BSR set to: 0
  2508                           ;timers.c: 107:     timer_low_pointer ++;
  2509   003E26  4BAC               	infsnz	_timer_low_pointer& (0+255),f,b
  2510   003E28  2BAD               	incf	(_timer_low_pointer+1)& (0+255),f,b
  2511   003E2A                     
  2512                           ; BSR set to: 0
  2513                           ;timers.c: 108:     manoeuvre_pointer ++;
  2514   003E2A  4BAA               	infsnz	_manoeuvre_pointer& (0+255),f,b
  2515   003E2C  2BAB               	incf	(_manoeuvre_pointer+1)& (0+255),f,b
  2516   003E2E                     
  2517                           ; BSR set to: 0
  2518                           ;timers.c: 110:     manoeuvre_count ++;
  2519   003E2E  0101               	movlb	1	; () banked
  2520   003E30  2BA4               	incf	_manoeuvre_count& (0+255),f,b
  2521   003E32                     
  2522                           ; BSR set to: 1
  2523   003E32  0012               	return		;funcret
  2524   003E34                     __end_of_write_trail:
  2525                           	callstack 0
  2526                           
  2527 ;; *************** function _wait_for_wall *****************
  2528 ;; Defined at:
  2529 ;;		line 162 in file "color.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;  p               1   12[COMRAM] PTR struct RGBC_val
  2532 ;;		 -> main@RGBC_colour(8), 
  2533 ;;  loss            1   13[COMRAM] unsigned char 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2545 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2547 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2548 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2549 ;;Total ram usage:        4 bytes
  2550 ;; Hardware stack levels used: 1
  2551 ;; Hardware stack levels required when called: 5
  2552 ;; This function calls:
  2553 ;;		_getRGBCval
  2554 ;; This function is called by:
  2555 ;;		_forward_navigation
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text9
  2560   003D32                     __ptext9:
  2561                           	callstack 0
  2562   003D32                     _wait_for_wall:
  2563                           	callstack 24
  2564   003D32                     
  2565                           ;color.c: 162: void wait_for_wall(struct RGBC_val *p, unsigned char loss);color.c: 163: 
      +                          {;color.c: 164:     while (!loss) {
  2566   003D32  EFB2  F01E         	goto	l4121
  2567   003D36                     l4115:
  2568                           
  2569                           ;color.c: 165:         getRGBCval(p);
  2570   003D36  C00D  F00C         	movff	wait_for_wall@p,getRGBCval@p
  2571   003D3A  EC38  F01D         	call	_getRGBCval	;wreg free
  2572   003D3E  500D               	movf	wait_for_wall@p^0,w,c
  2573   003D40  6ED9               	movwf	fsr2l,c
  2574   003D42  6ADA               	clrf	fsr2h,c
  2575   003D44  0E06               	movlw	6
  2576   003D46  26D9               	addwf	fsr2l,f,c
  2577   003D48  0E01               	movlw	1
  2578   003D4A  50DB               	movf	plusw2,w,c
  2579   003D4C  E107               	bnz	u3301
  2580   003D4E  0E32               	movlw	50
  2581   003D50  5CDE               	subwf	postinc2,w,c
  2582   003D52  B0D8               	btfsc	status,0,c
  2583   003D54  EFAE  F01E         	goto	u3301
  2584   003D58  EFB0  F01E         	goto	u3300
  2585   003D5C                     u3301:
  2586   003D5C  EFB2  F01E         	goto	l4121
  2587   003D60                     u3300:
  2588   003D60  EFBA  F01E         	goto	l96
  2589   003D64                     l4121:
  2590                           
  2591                           ;color.c: 164:     while (!loss) {
  2592   003D64  500E               	movf	wait_for_wall@loss^0,w,c
  2593   003D66  B4D8               	btfsc	status,2,c
  2594   003D68  EFB8  F01E         	goto	u3311
  2595   003D6C  EFBA  F01E         	goto	u3310
  2596   003D70                     u3311:
  2597   003D70  EF9B  F01E         	goto	l4115
  2598   003D74                     u3310:
  2599   003D74                     l96:
  2600   003D74  0012               	return		;funcret
  2601   003D76                     __end_of_wait_for_wall:
  2602                           	callstack 0
  2603                           
  2604 ;; *************** function _toggle_tricolour_LED *****************
  2605 ;; Defined at:
  2606 ;;		line 84 in file "buggy_lights.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, status,2, status,0
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;Total ram usage:        1 bytes
  2625 ;; Hardware stack levels used: 1
  2626 ;; Hardware stack levels required when called: 1
  2627 ;; This function calls:
  2628 ;;		Nothing
  2629 ;; This function is called by:
  2630 ;;		_forward_navigation
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text10
  2635   002B44                     __ptext10:
  2636                           	callstack 0
  2637   002B44                     _toggle_tricolour_LED:
  2638                           	callstack 28
  2639   002B44                     
  2640                           ;buggy_lights.c: 88:         LATGbits.LATG1 = !LATGbits.LATG1;
  2641   002B44  A27F               	btfss	127,1,c	;volatile
  2642   002B46  EFA7  F015         	goto	u3171
  2643   002B4A  EFAB  F015         	goto	u3170
  2644   002B4E                     u3171:
  2645   002B4E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2646   002B50  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2647   002B52  EFAC  F015         	goto	u3188
  2648   002B56                     u3170:
  2649   002B56  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2650   002B58                     u3188:
  2651   002B58  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2652   002B5A  507F               	movf	127,w,c	;volatile
  2653   002B5C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2654   002B5E  0BFD               	andlw	-3
  2655   002B60  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2656   002B62  6E7F               	movwf	127,c	;volatile
  2657                           
  2658                           ;buggy_lights.c: 89:         LATAbits.LATA4 = !LATAbits.LATA4;
  2659   002B64  A879               	btfss	121,4,c	;volatile
  2660   002B66  EFB7  F015         	goto	u3191
  2661   002B6A  EFBB  F015         	goto	u3190
  2662   002B6E                     u3191:
  2663   002B6E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2664   002B70  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2665   002B72  EFBC  F015         	goto	u3208
  2666   002B76                     u3190:
  2667   002B76  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2668   002B78                     u3208:
  2669   002B78  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  2670   002B7A  5079               	movf	121,w,c	;volatile
  2671   002B7C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2672   002B7E  0BEF               	andlw	-17
  2673   002B80  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2674   002B82  6E79               	movwf	121,c	;volatile
  2675                           
  2676                           ;buggy_lights.c: 90:         LATFbits.LATF7 = !LATFbits.LATF7;
  2677   002B84  AE7E               	btfss	126,7,c	;volatile
  2678   002B86  EFC7  F015         	goto	u3211
  2679   002B8A  EFCB  F015         	goto	u3210
  2680   002B8E                     u3211:
  2681   002B8E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2682   002B90  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2683   002B92  EFCC  F015         	goto	u3228
  2684   002B96                     u3210:
  2685   002B96  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2686   002B98                     u3228:
  2687   002B98  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2688   002B9A  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2689   002B9C  507E               	movf	126,w,c	;volatile
  2690   002B9E  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2691   002BA0  0B7F               	andlw	-129
  2692   002BA2  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2693   002BA4  6E7E               	movwf	126,c	;volatile
  2694                           
  2695                           ;buggy_lights.c: 93:         LATGbits.LATG0 = !LATGbits.LATG0;
  2696   002BA6  A07F               	btfss	127,0,c	;volatile
  2697   002BA8  EFD8  F015         	goto	u3231
  2698   002BAC  EFDC  F015         	goto	u3230
  2699   002BB0                     u3231:
  2700   002BB0  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2701   002BB2  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2702   002BB4  EFDD  F015         	goto	u3248
  2703   002BB8                     u3230:
  2704   002BB8  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2705   002BBA                     u3248:
  2706   002BBA  507F               	movf	127,w,c	;volatile
  2707   002BBC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2708   002BBE  0BFE               	andlw	-2
  2709   002BC0  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2710   002BC2  6E7F               	movwf	127,c	;volatile
  2711                           
  2712                           ;buggy_lights.c: 94:         LATEbits.LATE7 = !LATEbits.LATE7;
  2713   002BC4  AE7D               	btfss	125,7,c	;volatile
  2714   002BC6  EFE7  F015         	goto	u3251
  2715   002BCA  EFEB  F015         	goto	u3250
  2716   002BCE                     u3251:
  2717   002BCE  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2718   002BD0  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2719   002BD2  EFEC  F015         	goto	u3268
  2720   002BD6                     u3250:
  2721   002BD6  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2722   002BD8                     u3268:
  2723   002BD8  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2724   002BDA  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  2725   002BDC  507D               	movf	125,w,c	;volatile
  2726   002BDE  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2727   002BE0  0B7F               	andlw	-129
  2728   002BE2  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2729   002BE4  6E7D               	movwf	125,c	;volatile
  2730                           
  2731                           ;buggy_lights.c: 95:         LATAbits.LATA3 = !LATAbits.LATA3;
  2732   002BE6  A679               	btfss	121,3,c	;volatile
  2733   002BE8  EFF8  F015         	goto	u3271
  2734   002BEC  EFFC  F015         	goto	u3270
  2735   002BF0                     u3271:
  2736   002BF0  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2737   002BF2  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  2738   002BF4  EFFD  F015         	goto	u3288
  2739   002BF8                     u3270:
  2740   002BF8  6A01               	clrf	??_toggle_tricolour_LED^0,c
  2741   002BFA                     u3288:
  2742   002BFA  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2743   002BFC  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2744   002BFE  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  2745   002C00  5079               	movf	121,w,c	;volatile
  2746   002C02  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2747   002C04  0BF7               	andlw	-9
  2748   002C06  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  2749   002C08  6E79               	movwf	121,c	;volatile
  2750   002C0A  0012               	return		;funcret
  2751   002C0C                     __end_of_toggle_tricolour_LED:
  2752                           	callstack 0
  2753                           
  2754 ;; *************** function _stop_timer *****************
  2755 ;; Defined at:
  2756 ;;		line 38 in file "timers.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		None
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2774 ;;Total ram usage:        0 bytes
  2775 ;; Hardware stack levels used: 1
  2776 ;; Hardware stack levels required when called: 1
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_forward_navigation
  2781 ;;		_return_to_sender
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text11
  2786   00425C                     __ptext11:
  2787                           	callstack 0
  2788   00425C                     _stop_timer:
  2789                           	callstack 28
  2790   00425C                     
  2791                           ;timers.c: 40:     T0CON0bits.T0EN=0;
  2792   00425C  9ED5               	bcf	213,7,c	;volatile
  2793   00425E  0012               	return		;funcret
  2794   004260                     __end_of_stop_timer:
  2795                           	callstack 0
  2796                           
  2797 ;; *************** function _sendRGBCvalSerial4 *****************
  2798 ;; Defined at:
  2799 ;;		line 67 in file "serial.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;  col_val         1   57[COMRAM] PTR struct RGBC_val
  2802 ;;		 -> main@RGBC_colour(8), 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  tempStr        26   58[COMRAM] unsigned char [26]
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2814 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2815 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2817 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2818 ;;Total ram usage:       27 bytes
  2819 ;; Hardware stack levels used: 1
  2820 ;; Hardware stack levels required when called: 6
  2821 ;; This function calls:
  2822 ;;		_sendStringSerial4
  2823 ;;		_sprintf
  2824 ;; This function is called by:
  2825 ;;		_forward_navigation
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	text12
  2830   0039BC                     __ptext12:
  2831                           	callstack 0
  2832   0039BC                     _sendRGBCvalSerial4:
  2833                           	callstack 23
  2834   0039BC                     
  2835                           ;serial.c: 68:     char tempStr[26];;serial.c: 70:     sprintf(tempStr, "%u %u %u %u \r"
      +                          , col_val->R, col_val->G, col_val->B, col_val->C);
  2836   0039BC  0E3B               	movlw	low sendRGBCvalSerial4@tempStr
  2837   0039BE  6E20               	movwf	sprintf@s^0,c
  2838   0039C0  6A21               	clrf	(sprintf@s+1)^0,c
  2839   0039C2  0E01               	movlw	low STR_5
  2840   0039C4  6E22               	movwf	sprintf@fmt^0,c
  2841   0039C6  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2842   0039C8  6ED9               	movwf	fsr2l,c
  2843   0039CA  6ADA               	clrf	fsr2h,c
  2844   0039CC  CFDE F023          	movff	postinc2,?_sprintf+3
  2845   0039D0  CFDD F024          	movff	postdec2,?_sprintf+4
  2846   0039D4  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2847   0039D6  6ED9               	movwf	fsr2l,c
  2848   0039D8  6ADA               	clrf	fsr2h,c
  2849   0039DA  0E02               	movlw	2
  2850   0039DC  26D9               	addwf	fsr2l,f,c
  2851   0039DE  CFDE F025          	movff	postinc2,?_sprintf+5
  2852   0039E2  CFDD F026          	movff	postdec2,?_sprintf+6
  2853   0039E6  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2854   0039E8  6ED9               	movwf	fsr2l,c
  2855   0039EA  6ADA               	clrf	fsr2h,c
  2856   0039EC  0E04               	movlw	4
  2857   0039EE  26D9               	addwf	fsr2l,f,c
  2858   0039F0  CFDE F027          	movff	postinc2,?_sprintf+7
  2859   0039F4  CFDD F028          	movff	postdec2,?_sprintf+8
  2860   0039F8  503A               	movf	sendRGBCvalSerial4@col_val^0,w,c
  2861   0039FA  6ED9               	movwf	fsr2l,c
  2862   0039FC  6ADA               	clrf	fsr2h,c
  2863   0039FE  0E06               	movlw	6
  2864   003A00  26D9               	addwf	fsr2l,f,c
  2865   003A02  CFDE F029          	movff	postinc2,?_sprintf+9
  2866   003A06  CFDD F02A          	movff	postdec2,?_sprintf+10
  2867   003A0A  EC51  F01E         	call	_sprintf	;wreg free
  2868   003A0E                     
  2869                           ;serial.c: 71:     sendStringSerial4(tempStr);
  2870   003A0E  0E3B               	movlw	low sendRGBCvalSerial4@tempStr
  2871   003A10  6E02               	movwf	sendStringSerial4@string^0,c
  2872   003A12  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2873   003A14  ECAD  F01C         	call	_sendStringSerial4	;wreg free
  2874   003A18  0012               	return		;funcret
  2875   003A1A                     __end_of_sendRGBCvalSerial4:
  2876                           	callstack 0
  2877                           
  2878 ;; *************** function _sendHSVvalSerial4 *****************
  2879 ;; Defined at:
  2880 ;;		line 77 in file "serial.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;  col_val         1   57[COMRAM] PTR struct HSV_val
  2883 ;;		 -> main@HSV_colour(6), 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  tempStr        21   58[COMRAM] unsigned char [21]
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      void 
  2888 ;; Registers used:
  2889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2895 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2896 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2898 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2899 ;;Total ram usage:       22 bytes
  2900 ;; Hardware stack levels used: 1
  2901 ;; Hardware stack levels required when called: 6
  2902 ;; This function calls:
  2903 ;;		_sendStringSerial4
  2904 ;;		_sprintf
  2905 ;; This function is called by:
  2906 ;;		_forward_navigation
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text13
  2911   003C56                     __ptext13:
  2912                           	callstack 0
  2913   003C56                     _sendHSVvalSerial4:
  2914                           	callstack 23
  2915   003C56                     
  2916                           ;serial.c: 78:     char tempStr[21];;serial.c: 80:     sprintf(tempStr, "%u %u %u \r", c
      +                          ol_val->H, col_val->S, col_val->V);
  2917   003C56  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  2918   003C58  6E20               	movwf	sprintf@s^0,c
  2919   003C5A  6A21               	clrf	(sprintf@s+1)^0,c
  2920   003C5C  0E04               	movlw	low (STR_5+3)
  2921   003C5E  6E22               	movwf	sprintf@fmt^0,c
  2922   003C60  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  2923   003C62  6ED9               	movwf	fsr2l,c
  2924   003C64  6ADA               	clrf	fsr2h,c
  2925   003C66  CFDE F023          	movff	postinc2,?_sprintf+3
  2926   003C6A  CFDD F024          	movff	postdec2,?_sprintf+4
  2927   003C6E  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  2928   003C70  6ED9               	movwf	fsr2l,c
  2929   003C72  6ADA               	clrf	fsr2h,c
  2930   003C74  0E02               	movlw	2
  2931   003C76  26D9               	addwf	fsr2l,f,c
  2932   003C78  CFDE F025          	movff	postinc2,?_sprintf+5
  2933   003C7C  CFDD F026          	movff	postdec2,?_sprintf+6
  2934   003C80  503A               	movf	sendHSVvalSerial4@col_val^0,w,c
  2935   003C82  6ED9               	movwf	fsr2l,c
  2936   003C84  6ADA               	clrf	fsr2h,c
  2937   003C86  0E04               	movlw	4
  2938   003C88  26D9               	addwf	fsr2l,f,c
  2939   003C8A  CFDE F027          	movff	postinc2,?_sprintf+7
  2940   003C8E  CFDD F028          	movff	postdec2,?_sprintf+8
  2941   003C92  EC51  F01E         	call	_sprintf	;wreg free
  2942   003C96                     
  2943                           ;serial.c: 81:     sendStringSerial4(tempStr);
  2944   003C96  0E3B               	movlw	low sendHSVvalSerial4@tempStr
  2945   003C98  6E02               	movwf	sendStringSerial4@string^0,c
  2946   003C9A  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  2947   003C9C  ECAD  F01C         	call	_sendStringSerial4	;wreg free
  2948   003CA0  0012               	return		;funcret
  2949   003CA2                     __end_of_sendHSVvalSerial4:
  2950                           	callstack 0
  2951                           
  2952 ;; *************** function _sendArrayCharSerial4 *****************
  2953 ;; Defined at:
  2954 ;;		line 53 in file "serial.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  arr             2   57[COMRAM] PTR unsigned char 
  2957 ;;		 -> trail_manoeuvre(20), trail_timer_low(20), trail_timer_high(20), 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  i               2  162[BANK1 ] unsigned int 
  2960 ;;  tempStr       161    0[BANK1 ] unsigned char [161]
  2961 ;;  index           1  161[BANK1 ] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2971 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2972 ;;      Locals:         0       0     164       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2973 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2974 ;;      Totals:         3       0     164       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2975 ;;Total ram usage:      167 bytes
  2976 ;; Hardware stack levels used: 1
  2977 ;; Hardware stack levels required when called: 6
  2978 ;; This function calls:
  2979 ;;		_sendStringSerial4
  2980 ;;		_sprintf
  2981 ;; This function is called by:
  2982 ;;		_forward_navigation
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text14
  2987   00359A                     __ptext14:
  2988                           	callstack 0
  2989   00359A                     _sendArrayCharSerial4:
  2990                           	callstack 23
  2991   00359A                     
  2992                           ;serial.c: 55:     unsigned char index = 0;
  2993   00359A  0E00               	movlw	0
  2994   00359C  0101               	movlb	1	; () banked
  2995   00359E  6FA1               	movwf	sendArrayCharSerial4@index& (0+255),b
  2996                           
  2997                           ;serial.c: 56:     char tempStr[20 * 8 + 1];;serial.c: 57:     for (unsigned int i = 0; 
      +                          i < 20; i++) {
  2998   0035A0  0E00               	movlw	0
  2999   0035A2  6FA3               	movwf	(sendArrayCharSerial4@i+1)& (0+255),b
  3000   0035A4  0E00               	movlw	0
  3001   0035A6  6FA2               	movwf	sendArrayCharSerial4@i& (0+255),b
  3002   0035A8                     l4849:
  3003                           
  3004                           ; BSR set to: 1
  3005                           ;serial.c: 58:         index += sprintf(&tempStr[index], "%d ", arr[i]);
  3006   0035A8  0E00               	movlw	low sendArrayCharSerial4@tempStr
  3007   0035AA  25A1               	addwf	sendArrayCharSerial4@index& (0+255),w,b
  3008   0035AC  6E20               	movwf	sprintf@s^0,c
  3009   0035AE  6A21               	clrf	(sprintf@s+1)^0,c
  3010   0035B0  0E01               	movlw	high sendArrayCharSerial4@tempStr
  3011   0035B2  2221               	addwfc	(sprintf@s+1)^0,f,c
  3012   0035B4  0E14               	movlw	low STR_2
  3013   0035B6  6E22               	movwf	sprintf@fmt^0,c
  3014   0035B8  51A2               	movf	sendArrayCharSerial4@i& (0+255),w,b
  3015   0035BA  243A               	addwf	sendArrayCharSerial4@arr^0,w,c
  3016   0035BC  6ED9               	movwf	fsr2l,c
  3017   0035BE  51A3               	movf	(sendArrayCharSerial4@i+1)& (0+255),w,b
  3018   0035C0  203B               	addwfc	(sendArrayCharSerial4@arr+1)^0,w,c
  3019   0035C2  6EDA               	movwf	fsr2h,c
  3020   0035C4  50DF               	movf	indf2,w,c
  3021   0035C6  6E3C               	movwf	??_sendArrayCharSerial4^0,c
  3022   0035C8  503C               	movf	??_sendArrayCharSerial4^0,w,c
  3023   0035CA  6E23               	movwf	(?_sprintf+3)^0,c
  3024   0035CC  6A24               	clrf	(?_sprintf+4)^0,c
  3025   0035CE  EC51  F01E         	call	_sprintf	;wreg free
  3026   0035D2  5020               	movf	?_sprintf^0,w,c
  3027   0035D4  0101               	movlb	1	; () banked
  3028   0035D6  27A1               	addwf	sendArrayCharSerial4@index& (0+255),f,b
  3029   0035D8                     
  3030                           ; BSR set to: 1
  3031                           ;serial.c: 59:     }
  3032   0035D8  4BA2               	infsnz	sendArrayCharSerial4@i& (0+255),f,b
  3033   0035DA  2BA3               	incf	(sendArrayCharSerial4@i+1)& (0+255),f,b
  3034   0035DC                     
  3035                           ; BSR set to: 1
  3036   0035DC  51A3               	movf	(sendArrayCharSerial4@i+1)& (0+255),w,b
  3037   0035DE  E109               	bnz	u3990
  3038   0035E0  0E14               	movlw	20
  3039   0035E2  5DA2               	subwf	sendArrayCharSerial4@i& (0+255),w,b
  3040   0035E4  A0D8               	btfss	status,0,c
  3041   0035E6  EFF7  F01A         	goto	u3991
  3042   0035EA  EFF9  F01A         	goto	u3990
  3043   0035EE                     u3991:
  3044   0035EE  EFD4  F01A         	goto	l4849
  3045   0035F2                     u3990:
  3046   0035F2                     
  3047                           ; BSR set to: 1
  3048                           ;serial.c: 60:     sendStringSerial4(tempStr);
  3049   0035F2  0E00               	movlw	low sendArrayCharSerial4@tempStr
  3050   0035F4  6E02               	movwf	sendStringSerial4@string^0,c
  3051   0035F6  0E01               	movlw	high sendArrayCharSerial4@tempStr
  3052   0035F8  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  3053   0035FA  ECAD  F01C         	call	_sendStringSerial4	;wreg free
  3054                           
  3055                           ;serial.c: 61:     sendStringSerial4(" \r");
  3056   0035FE  0E11               	movlw	low (STR_1+2)
  3057   003600  6E02               	movwf	sendStringSerial4@string^0,c
  3058   003602  5002               	movf	sendStringSerial4@string^0,w,c
  3059   003604  A4D8               	btfss	status,2,c
  3060   003606  0E0E               	movlw	high __smallconst
  3061   003608  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  3062   00360A  ECAD  F01C         	call	_sendStringSerial4	;wreg free
  3063   00360E  0012               	return		;funcret
  3064   003610                     __end_of_sendArrayCharSerial4:
  3065                           	callstack 0
  3066                           
  3067 ;; *************** function _sprintf *****************
  3068 ;; Defined at:
  3069 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  s               2   31[COMRAM] PTR unsigned char 
  3072 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), sendArrayCharSerial4@tempStr(161), sendIntSerial4
      +@string(17), 
  3073 ;;  fmt             1   33[COMRAM] PTR const unsigned char 
  3074 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  f              12   45[COMRAM] struct _IO_FILE
  3077 ;;  ret             2   42[COMRAM] int 
  3078 ;;  ap              1   44[COMRAM] PTR void [1]
  3079 ;;		 -> ?_sprintf(2), 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  2   31[COMRAM] int 
  3082 ;; Registers used:
  3083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3089 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3090 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3092 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3093 ;;Total ram usage:       26 bytes
  3094 ;; Hardware stack levels used: 1
  3095 ;; Hardware stack levels required when called: 5
  3096 ;; This function calls:
  3097 ;;		_vfprintf
  3098 ;; This function is called by:
  3099 ;;		_sendIntSerial4
  3100 ;;		_sendArrayCharSerial4
  3101 ;;		_sendRGBCvalSerial4
  3102 ;;		_sendHSVvalSerial4
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text15
  3107   003CA2                     __ptext15:
  3108                           	callstack 0
  3109   003CA2                     _sprintf:
  3110                           	callstack 23
  3111   003CA2  0E23               	movlw	low (?_sprintf+3)
  3112   003CA4  6E2D               	movwf	sprintf@ap^0,c
  3113   003CA6  C020  F02E         	movff	sprintf@s,sprintf@f
  3114   003CAA  C021  F02F         	movff	sprintf@s+1,sprintf@f+1
  3115   003CAE  0E00               	movlw	0
  3116   003CB0  6E32               	movwf	(sprintf@f+4)^0,c
  3117   003CB2  0E00               	movlw	0
  3118   003CB4  6E31               	movwf	(sprintf@f+3)^0,c
  3119   003CB6  0E00               	movlw	0
  3120   003CB8  6E39               	movwf	(sprintf@f+11)^0,c
  3121   003CBA  0E00               	movlw	0
  3122   003CBC  6E38               	movwf	(sprintf@f+10)^0,c
  3123   003CBE  0E2E               	movlw	low sprintf@f
  3124   003CC0  6E1C               	movwf	vfprintf@fp^0,c
  3125   003CC2  C022  F01D         	movff	sprintf@fmt,vfprintf@fmt
  3126   003CC6  0E2D               	movlw	low sprintf@ap
  3127   003CC8  6E1E               	movwf	vfprintf@ap^0,c
  3128   003CCA  EC0D  F01D         	call	_vfprintf	;wreg free
  3129   003CCE  C01C  F02B         	movff	?_vfprintf,sprintf@ret
  3130   003CD2  C01D  F02C         	movff	?_vfprintf+1,sprintf@ret+1
  3131   003CD6  5031               	movf	(sprintf@f+3)^0,w,c
  3132   003CD8  2420               	addwf	sprintf@s^0,w,c
  3133   003CDA  6ED9               	movwf	fsr2l,c
  3134   003CDC  5032               	movf	(sprintf@f+4)^0,w,c
  3135   003CDE  2021               	addwfc	(sprintf@s+1)^0,w,c
  3136   003CE0  6EDA               	movwf	fsr2h,c
  3137   003CE2  6ADF               	clrf	indf2,c
  3138   003CE4  C02B  F020         	movff	sprintf@ret,?_sprintf
  3139   003CE8  C02C  F021         	movff	sprintf@ret+1,?_sprintf+1
  3140   003CEC  0012               	return		;funcret
  3141   003CEE                     __end_of_sprintf:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _vfprintf *****************
  3145 ;; Defined at:
  3146 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  fp              1   27[COMRAM] PTR struct _IO_FILE
  3149 ;;		 -> sprintf@f(12), 
  3150 ;;  fmt             1   28[COMRAM] PTR const unsigned char 
  3151 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  3152 ;;  ap              1   29[COMRAM] PTR PTR void 
  3153 ;;		 -> sprintf@ap(1), 
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  cfmt            1   30[COMRAM] PTR unsigned char 
  3156 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  2   27[COMRAM] int 
  3159 ;; Registers used:
  3160 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3166 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3169 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3170 ;;Total ram usage:        4 bytes
  3171 ;; Hardware stack levels used: 1
  3172 ;; Hardware stack levels required when called: 4
  3173 ;; This function calls:
  3174 ;;		_vfpfcnvrt
  3175 ;; This function is called by:
  3176 ;;		_sprintf
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text16
  3181   003A1A                     __ptext16:
  3182                           	callstack 0
  3183   003A1A                     _vfprintf:
  3184                           	callstack 23
  3185   003A1A                     
  3186                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  3187   003A1A  C01D  F01F         	movff	vfprintf@fmt,vfprintf@cfmt
  3188   003A1E                     
  3189                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  3190   003A1E  0E00               	movlw	0
  3191   003A20  0100               	movlb	0	; () banked
  3192   003A22  6F81               	movwf	(_nout+1)& (0+255),b
  3193   003A24  0E00               	movlw	0
  3194   003A26  6F80               	movwf	_nout& (0+255),b
  3195                           
  3196                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3197   003A28  EF23  F01D         	goto	l3663
  3198   003A2C                     l3661:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  3202   003A2C  C01C  F00E         	movff	vfprintf@fp,vfpfcnvrt@fp
  3203   003A30  0E1F               	movlw	low vfprintf@cfmt
  3204   003A32  6E0F               	movwf	vfpfcnvrt@fmt^0,c
  3205   003A34  C01E  F010         	movff	vfprintf@ap,vfpfcnvrt@ap
  3206   003A38  ECBA  F00E         	call	_vfpfcnvrt	;wreg free
  3207   003A3C  500E               	movf	?_vfpfcnvrt^0,w,c
  3208   003A3E  0100               	movlb	0	; () banked
  3209   003A40  2780               	addwf	_nout& (0+255),f,b
  3210   003A42  500F               	movf	(?_vfpfcnvrt+1)^0,w,c
  3211   003A44  2381               	addwfc	(_nout+1)& (0+255),f,b
  3212   003A46                     l3663:
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3216   003A46  C01F  FFF6         	movff	vfprintf@cfmt,tblptrl
  3217   003A4A                     	if	1	;There is more than 1 active tblptr byte
  3218   003A4A  0E0E               	movlw	high __smallconst
  3219   003A4C  6EF7               	movwf	tblptrh,c
  3220   003A4E                     	endif
  3221   003A4E                     	if	0	;tblptru may be non-zero
  3222   003A4E                     	endif
  3223   003A4E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3224   003A4E  0E00               	movlw	low (__smallconst shr (0+16))
  3225   003A50  6EF8               	movwf	tblptru,c
  3226   003A52                     	endif
  3227   003A52  0008               	tblrd		*
  3228   003A54  50F5               	movf	tablat,w,c
  3229   003A56  0900               	iorlw	0
  3230   003A58  A4D8               	btfss	status,2,c
  3231   003A5A  EF31  F01D         	goto	u2661
  3232   003A5E  EF33  F01D         	goto	u2660
  3233   003A62                     u2661:
  3234   003A62  EF16  F01D         	goto	l3661
  3235   003A66                     u2660:
  3236   003A66                     
  3237                           ; BSR set to: 0
  3238                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  3239   003A66  C080  F01C         	movff	_nout,?_vfprintf
  3240   003A6A  C081  F01D         	movff	_nout+1,?_vfprintf+1
  3241   003A6E                     
  3242                           ; BSR set to: 0
  3243   003A6E  0012               	return		;funcret
  3244   003A70                     __end_of_vfprintf:
  3245                           	callstack 0
  3246                           
  3247 ;; *************** function _vfpfcnvrt *****************
  3248 ;; Defined at:
  3249 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  3252 ;;		 -> sprintf@f(12), 
  3253 ;;  fmt             1   14[COMRAM] PTR PTR unsigned char 
  3254 ;;		 -> vfprintf@cfmt(1), 
  3255 ;;  ap              1   15[COMRAM] PTR PTR void 
  3256 ;;		 -> sprintf@ap(1), 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  convarg         4   22[COMRAM] struct .
  3259 ;;  cnt             2   19[COMRAM] int 
  3260 ;;  c               1   26[COMRAM] unsigned char 
  3261 ;;  cp              1   21[COMRAM] PTR unsigned char 
  3262 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  3263 ;;  done            1   18[COMRAM] _Bool 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  2   13[COMRAM] int 
  3266 ;; Registers used:
  3267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3273 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3274 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3276 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3277 ;;Total ram usage:       14 bytes
  3278 ;; Hardware stack levels used: 1
  3279 ;; Hardware stack levels required when called: 3
  3280 ;; This function calls:
  3281 ;;		___awdiv
  3282 ;;		___awmod
  3283 ;;		___lwdiv
  3284 ;;		___lwmod
  3285 ;;		_abs
  3286 ;;		_fputc
  3287 ;; This function is called by:
  3288 ;;		_vfprintf
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text17
  3293   001D74                     __ptext17:
  3294                           	callstack 0
  3295   001D74                     _vfpfcnvrt:
  3296                           	callstack 23
  3297   001D74                     
  3298                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  3299   001D74  0E00               	movlw	0
  3300   001D76  6E15               	movwf	(vfpfcnvrt@cnt+1)^0,c
  3301   001D78  0E00               	movlw	0
  3302   001D7A  6E14               	movwf	vfpfcnvrt@cnt^0,c
  3303   001D7C                     
  3304                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  3305   001D7C  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3306   001D7E  6ED9               	movwf	fsr2l,c
  3307   001D80  6ADA               	clrf	fsr2h,c
  3308   001D82  CFDF FFF6          	movff	indf2,tblptrl
  3309   001D86                     	if	1	;There is more than 1 active tblptr byte
  3310   001D86  0E0E               	movlw	high __smallconst
  3311   001D88  6EF7               	movwf	tblptrh,c
  3312   001D8A                     	endif
  3313   001D8A                     	if	0	;tblptru may be non-zero
  3314   001D8A                     	endif
  3315   001D8A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3316   001D8A  0E00               	movlw	low (__smallconst shr (0+16))
  3317   001D8C  6EF8               	movwf	tblptru,c
  3318   001D8E                     	endif
  3319   001D8E  0008               	tblrd		*
  3320   001D90  50F5               	movf	tablat,w,c
  3321   001D92  0A25               	xorlw	37
  3322   001D94  A4D8               	btfss	status,2,c
  3323   001D96  EFCF  F00E         	goto	u2511
  3324   001D9A  EFD1  F00E         	goto	u2510
  3325   001D9E                     u2511:
  3326   001D9E  EF26  F010         	goto	l3543
  3327   001DA2                     u2510:
  3328   001DA2                     
  3329                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3330   001DA2  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3331   001DA4  6ED9               	movwf	fsr2l,c
  3332   001DA6  6ADA               	clrf	fsr2h,c
  3333   001DA8  2ADF               	incf	indf2,f,c
  3334   001DAA                     
  3335                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3336   001DAA  0E00               	movlw	0
  3337   001DAC  0100               	movlb	0	; () banked
  3338   001DAE  6F83               	movwf	(_width+1)& (0+255),b
  3339   001DB0  0E00               	movlw	0
  3340   001DB2  6F82               	movwf	_width& (0+255),b
  3341   001DB4  C082  F086         	movff	_width,_flags
  3342   001DB8                     
  3343                           ; BSR set to: 0
  3344                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3345   001DB8  6984               	setf	_prec& (0+255),b
  3346   001DBA  6985               	setf	(_prec+1)& (0+255),b
  3347   001DBC                     
  3348                           ; BSR set to: 0
  3349                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3350   001DBC  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3351   001DBE  6ED9               	movwf	fsr2l,c
  3352   001DC0  6ADA               	clrf	fsr2h,c
  3353   001DC2  50DF               	movf	indf2,w,c
  3354   001DC4  6E16               	movwf	vfpfcnvrt@cp^0,c
  3355   001DC6                     
  3356                           ; BSR set to: 0
  3357                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3358   001DC6  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3359   001DCA                     	if	1	;There is more than 1 active tblptr byte
  3360   001DCA  0E0E               	movlw	high __smallconst
  3361   001DCC  6EF7               	movwf	tblptrh,c
  3362   001DCE                     	endif
  3363   001DCE                     	if	0	;tblptru may be non-zero
  3364   001DCE                     	endif
  3365   001DCE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3366   001DCE  0E00               	movlw	low (__smallconst shr (0+16))
  3367   001DD0  6EF8               	movwf	tblptru,c
  3368   001DD2                     	endif
  3369   001DD2  0008               	tblrd		*
  3370   001DD4  50F5               	movf	tablat,w,c
  3371   001DD6  0A64               	xorlw	100
  3372   001DD8  B4D8               	btfsc	status,2,c
  3373   001DDA  EFF1  F00E         	goto	u2521
  3374   001DDE  EFF3  F00E         	goto	u2520
  3375   001DE2                     u2521:
  3376   001DE2  EF03  F00F         	goto	l3479
  3377   001DE6                     u2520:
  3378   001DE6                     
  3379                           ; BSR set to: 0
  3380   001DE6  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3381   001DEA                     	if	1	;There is more than 1 active tblptr byte
  3382   001DEA  0E0E               	movlw	high __smallconst
  3383   001DEC  6EF7               	movwf	tblptrh,c
  3384   001DEE                     	endif
  3385   001DEE                     	if	0	;tblptru may be non-zero
  3386   001DEE                     	endif
  3387   001DEE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3388   001DEE  0E00               	movlw	low (__smallconst shr (0+16))
  3389   001DF0  6EF8               	movwf	tblptru,c
  3390   001DF2                     	endif
  3391   001DF2  0008               	tblrd		*
  3392   001DF4  50F5               	movf	tablat,w,c
  3393   001DF6  0A69               	xorlw	105
  3394   001DF8  A4D8               	btfss	status,2,c
  3395   001DFA  EF01  F00F         	goto	u2531
  3396   001DFE  EF03  F00F         	goto	u2530
  3397   001E02                     u2531:
  3398   001E02  EF91  F00F         	goto	l3509
  3399   001E06                     u2530:
  3400   001E06                     l3479:
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3404   001E06  5010               	movf	vfpfcnvrt@ap^0,w,c
  3405   001E08  6ED9               	movwf	fsr2l,c
  3406   001E0A  6ADA               	clrf	fsr2h,c
  3407   001E0C  0E02               	movlw	2
  3408   001E0E  26DF               	addwf	indf2,f,c
  3409   001E10  5CDF               	subwf	indf2,w,c
  3410   001E12  6ED9               	movwf	fsr2l,c
  3411   001E14  6ADA               	clrf	fsr2h,c
  3412   001E16  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  3413   001E1A  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  3414   001E1E                     
  3415                           ; BSR set to: 0
  3416                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3417   001E1E  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3418   001E20  6ED9               	movwf	fsr2l,c
  3419   001E22  6ADA               	clrf	fsr2h,c
  3420   001E24  2816               	incf	vfpfcnvrt@cp^0,w,c
  3421   001E26  6EDF               	movwf	indf2,c
  3422   001E28                     
  3423                           ; BSR set to: 0
  3424                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  3425   001E28  0E20               	movlw	32
  3426   001E2A  6E1B               	movwf	vfpfcnvrt@c^0,c
  3427                           
  3428                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  3429   001E2C  BE18               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  3430   001E2E  EF1B  F00F         	goto	u2541
  3431   001E32  EF1E  F00F         	goto	u2540
  3432   001E36                     u2541:
  3433   001E36  0E01               	movlw	1
  3434   001E38  EF1F  F00F         	goto	u2550
  3435   001E3C                     u2540:
  3436   001E3C  0E00               	movlw	0
  3437   001E3E                     u2550:
  3438   001E3E  6E13               	movwf	vfpfcnvrt@done^0,c
  3439   001E40                     l3485:
  3440                           
  3441                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  3442   001E40  061B               	decf	vfpfcnvrt@c^0,f,c
  3443   001E42  501B               	movf	vfpfcnvrt@c^0,w,c
  3444   001E44  0F60               	addlw	low _dbuf
  3445   001E46  6ED9               	movwf	fsr2l,c
  3446   001E48  6ADA               	clrf	fsr2h,c
  3447   001E4A  C017  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  3448   001E4E  C018  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  3449   001E52  0E00               	movlw	0
  3450   001E54  6E04               	movwf	(___awmod@divisor+1)^0,c
  3451   001E56  0E0A               	movlw	10
  3452   001E58  6E03               	movwf	___awmod@divisor^0,c
  3453   001E5A  EC98  F018         	call	___awmod	;wreg free
  3454   001E5E  C001  F007         	movff	?___awmod,abs@a
  3455   001E62  C002  F008         	movff	?___awmod+1,abs@a+1
  3456   001E66  ECC5  F01F         	call	_abs	;wreg free
  3457   001E6A  5007               	movf	?_abs^0,w,c
  3458   001E6C  0F30               	addlw	48
  3459   001E6E  6EDF               	movwf	indf2,c
  3460   001E70                     
  3461                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  3462   001E70  C017  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  3463   001E74  C018  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  3464   001E78  0E00               	movlw	0
  3465   001E7A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3466   001E7C  0E0A               	movlw	10
  3467   001E7E  6E03               	movwf	___awdiv@divisor^0,c
  3468   001E80  EC69  F016         	call	___awdiv	;wreg free
  3469   001E84  C001  F017         	movff	?___awdiv,vfpfcnvrt@convarg
  3470   001E88  C002  F018         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  3471   001E8C                     
  3472                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  3473   001E8C  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  3474   001E8E  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  3475   001E90                     
  3476                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  3477   001E90  5017               	movf	vfpfcnvrt@convarg^0,w,c
  3478   001E92  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3479   001E94  B4D8               	btfsc	status,2,c
  3480   001E96  EF4F  F00F         	goto	u2561
  3481   001E9A  EF51  F00F         	goto	u2560
  3482   001E9E                     u2561:
  3483   001E9E  EF59  F00F         	goto	l3495
  3484   001EA2                     u2560:
  3485   001EA2  501B               	movf	vfpfcnvrt@c^0,w,c
  3486   001EA4  A4D8               	btfss	status,2,c
  3487   001EA6  EF57  F00F         	goto	u2571
  3488   001EAA  EF59  F00F         	goto	u2570
  3489   001EAE                     u2571:
  3490   001EAE  EF20  F00F         	goto	l3485
  3491   001EB2                     u2570:
  3492   001EB2                     l3495:
  3493                           
  3494                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  3495   001EB2  501B               	movf	vfpfcnvrt@c^0,w,c
  3496   001EB4  B4D8               	btfsc	status,2,c
  3497   001EB6  EF5F  F00F         	goto	u2581
  3498   001EBA  EF61  F00F         	goto	u2580
  3499   001EBE                     u2581:
  3500   001EBE  EF82  F00F         	goto	l3507
  3501   001EC2                     u2580:
  3502   001EC2  5013               	movf	vfpfcnvrt@done^0,w,c
  3503   001EC4  B4D8               	btfsc	status,2,c
  3504   001EC6  EF67  F00F         	goto	u2591
  3505   001ECA  EF69  F00F         	goto	u2590
  3506   001ECE                     u2591:
  3507   001ECE  EF82  F00F         	goto	l3507
  3508   001ED2                     u2590:
  3509   001ED2                     
  3510                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  3511   001ED2  061B               	decf	vfpfcnvrt@c^0,f,c
  3512   001ED4  501B               	movf	vfpfcnvrt@c^0,w,c
  3513   001ED6  0F60               	addlw	low _dbuf
  3514   001ED8  6ED9               	movwf	fsr2l,c
  3515   001EDA  6ADA               	clrf	fsr2h,c
  3516   001EDC  0E2D               	movlw	45
  3517   001EDE  6EDF               	movwf	indf2,c
  3518   001EE0                     
  3519                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  3520   001EE0  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  3521   001EE2  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  3522   001EE4  EF82  F00F         	goto	l3507
  3523   001EE8                     l3503:
  3524                           
  3525                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  3526   001EE8  501B               	movf	vfpfcnvrt@c^0,w,c
  3527   001EEA  0F60               	addlw	low _dbuf
  3528   001EEC  6ED9               	movwf	fsr2l,c
  3529   001EEE  6ADA               	clrf	fsr2h,c
  3530   001EF0  50DF               	movf	indf2,w,c
  3531   001EF2  6E11               	movwf	??_vfpfcnvrt^0,c
  3532   001EF4  5011               	movf	??_vfpfcnvrt^0,w,c
  3533   001EF6  6E01               	movwf	fputc@c^0,c
  3534   001EF8  6A02               	clrf	(fputc@c+1)^0,c
  3535   001EFA  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3536   001EFE  ECCB  F016         	call	_fputc	;wreg free
  3537   001F02  2A1B               	incf	vfpfcnvrt@c^0,f,c
  3538   001F04                     l3507:
  3539                           
  3540                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  3541   001F04  0E20               	movlw	32
  3542   001F06  181B               	xorwf	vfpfcnvrt@c^0,w,c
  3543   001F08  A4D8               	btfss	status,2,c
  3544   001F0A  EF89  F00F         	goto	u2601
  3545   001F0E  EF8B  F00F         	goto	u2600
  3546   001F12                     u2601:
  3547   001F12  EF74  F00F         	goto	l3503
  3548   001F16                     u2600:
  3549   001F16                     l1473:
  3550                           
  3551                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  3552   001F16  C014  F00E         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  3553   001F1A  C015  F00F         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  3554   001F1E  EF3F  F010         	goto	l1474
  3555   001F22                     l3509:
  3556                           
  3557                           ; BSR set to: 0
  3558   001F22  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3559   001F26                     	if	1	;There is more than 1 active tblptr byte
  3560   001F26  0E0E               	movlw	high __smallconst
  3561   001F28  6EF7               	movwf	tblptrh,c
  3562   001F2A                     	endif
  3563   001F2A                     	if	0	;tblptru may be non-zero
  3564   001F2A                     	endif
  3565   001F2A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3566   001F2A  0E00               	movlw	low (__smallconst shr (0+16))
  3567   001F2C  6EF8               	movwf	tblptru,c
  3568   001F2E                     	endif
  3569   001F2E  0008               	tblrd		*
  3570   001F30  50F5               	movf	tablat,w,c
  3571   001F32  0A75               	xorlw	117
  3572   001F34  A4D8               	btfss	status,2,c
  3573   001F36  EF9F  F00F         	goto	u2611
  3574   001F3A  EFA1  F00F         	goto	u2610
  3575   001F3E                     u2611:
  3576   001F3E  EF1C  F010         	goto	l3537
  3577   001F42                     u2610:
  3578   001F42                     
  3579                           ; BSR set to: 0
  3580                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  3581   001F42  5010               	movf	vfpfcnvrt@ap^0,w,c
  3582   001F44  6ED9               	movwf	fsr2l,c
  3583   001F46  6ADA               	clrf	fsr2h,c
  3584   001F48  0E02               	movlw	2
  3585   001F4A  26DF               	addwf	indf2,f,c
  3586   001F4C  5CDF               	subwf	indf2,w,c
  3587   001F4E  6ED9               	movwf	fsr2l,c
  3588   001F50  6ADA               	clrf	fsr2h,c
  3589   001F52  CFDE F017          	movff	postinc2,vfpfcnvrt@convarg
  3590   001F56  CFDE F018          	movff	postinc2,vfpfcnvrt@convarg+1
  3591   001F5A                     
  3592                           ; BSR set to: 0
  3593                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  3594   001F5A  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3595   001F5C  6ED9               	movwf	fsr2l,c
  3596   001F5E  6ADA               	clrf	fsr2h,c
  3597   001F60  2816               	incf	vfpfcnvrt@cp^0,w,c
  3598   001F62  6EDF               	movwf	indf2,c
  3599                           
  3600                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  3601   001F64  EF04  F010         	goto	l3535
  3602   001F68                     l3515:
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  3606   001F68  0E20               	movlw	32
  3607   001F6A  6E1B               	movwf	vfpfcnvrt@c^0,c
  3608   001F6C                     l3517:
  3609                           
  3610                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  3611   001F6C  061B               	decf	vfpfcnvrt@c^0,f,c
  3612   001F6E  501B               	movf	vfpfcnvrt@c^0,w,c
  3613   001F70  0F60               	addlw	low _dbuf
  3614   001F72  6ED9               	movwf	fsr2l,c
  3615   001F74  6ADA               	clrf	fsr2h,c
  3616   001F76  C017  F001         	movff	vfpfcnvrt@convarg,___lwmod@dividend
  3617   001F7A  C018  F002         	movff	vfpfcnvrt@convarg+1,___lwmod@dividend+1
  3618   001F7E  0E00               	movlw	0
  3619   001F80  6E04               	movwf	(___lwmod@divisor+1)^0,c
  3620   001F82  0E0A               	movlw	10
  3621   001F84  6E03               	movwf	___lwmod@divisor^0,c
  3622   001F86  EC7B  F01C         	call	___lwmod	;wreg free
  3623   001F8A  5001               	movf	?___lwmod^0,w,c
  3624   001F8C  0F30               	addlw	48
  3625   001F8E  6EDF               	movwf	indf2,c
  3626   001F90                     
  3627                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  3628   001F90  C017  F007         	movff	vfpfcnvrt@convarg,___lwdiv@dividend
  3629   001F94  C018  F008         	movff	vfpfcnvrt@convarg+1,___lwdiv@dividend+1
  3630   001F98  0E00               	movlw	0
  3631   001F9A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3632   001F9C  0E0A               	movlw	10
  3633   001F9E  6E09               	movwf	___lwdiv@divisor^0,c
  3634   001FA0  EC08  F01B         	call	___lwdiv	;wreg free
  3635   001FA4  C007  F017         	movff	?___lwdiv,vfpfcnvrt@convarg
  3636   001FA8  C008  F018         	movff	?___lwdiv+1,vfpfcnvrt@convarg+1
  3637   001FAC                     
  3638                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1530:       cnt++
      +                          ;
  3639   001FAC  4A14               	infsnz	vfpfcnvrt@cnt^0,f,c
  3640   001FAE  2A15               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  3641   001FB0                     
  3642                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  3643   001FB0  5017               	movf	vfpfcnvrt@convarg^0,w,c
  3644   001FB2  1018               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3645   001FB4  B4D8               	btfsc	status,2,c
  3646   001FB6  EFDF  F00F         	goto	u2621
  3647   001FBA  EFE1  F00F         	goto	u2620
  3648   001FBE                     u2621:
  3649   001FBE  EFF9  F00F         	goto	l3531
  3650   001FC2                     u2620:
  3651   001FC2  501B               	movf	vfpfcnvrt@c^0,w,c
  3652   001FC4  A4D8               	btfss	status,2,c
  3653   001FC6  EFE7  F00F         	goto	u2631
  3654   001FCA  EFE9  F00F         	goto	u2630
  3655   001FCE                     u2631:
  3656   001FCE  EFB6  F00F         	goto	l3517
  3657   001FD2                     u2630:
  3658   001FD2  EFF9  F00F         	goto	l3531
  3659   001FD6                     l3527:
  3660                           
  3661                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  3662   001FD6  501B               	movf	vfpfcnvrt@c^0,w,c
  3663   001FD8  0F60               	addlw	low _dbuf
  3664   001FDA  6ED9               	movwf	fsr2l,c
  3665   001FDC  6ADA               	clrf	fsr2h,c
  3666   001FDE  50DF               	movf	indf2,w,c
  3667   001FE0  6E11               	movwf	??_vfpfcnvrt^0,c
  3668   001FE2  5011               	movf	??_vfpfcnvrt^0,w,c
  3669   001FE4  6E01               	movwf	fputc@c^0,c
  3670   001FE6  6A02               	clrf	(fputc@c+1)^0,c
  3671   001FE8  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3672   001FEC  ECCB  F016         	call	_fputc	;wreg free
  3673   001FF0  2A1B               	incf	vfpfcnvrt@c^0,f,c
  3674   001FF2                     l3531:
  3675                           
  3676                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  3677   001FF2  0E20               	movlw	32
  3678   001FF4  181B               	xorwf	vfpfcnvrt@c^0,w,c
  3679   001FF6  A4D8               	btfss	status,2,c
  3680   001FF8  EF00  F010         	goto	u2641
  3681   001FFC  EF02  F010         	goto	u2640
  3682   002000                     u2641:
  3683   002000  EFEB  F00F         	goto	l3527
  3684   002004                     u2640:
  3685   002004  EF8B  F00F         	goto	l1473
  3686   002008                     l3535:
  3687                           
  3688                           ; BSR set to: 0
  3689   002008  C016  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3690   00200C                     	if	1	;There is more than 1 active tblptr byte
  3691   00200C  0E0E               	movlw	high __smallconst
  3692   00200E  6EF7               	movwf	tblptrh,c
  3693   002010                     	endif
  3694   002010                     	if	0	;tblptru may be non-zero
  3695   002010                     	endif
  3696   002010                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3697   002010  0E00               	movlw	low (__smallconst shr (0+16))
  3698   002012  6EF8               	movwf	tblptru,c
  3699   002014                     	endif
  3700   002014  0008               	tblrd		*
  3701   002016  50F5               	movf	tablat,w,c
  3702   002018  6E11               	movwf	??_vfpfcnvrt^0,c
  3703   00201A  6A12               	clrf	(??_vfpfcnvrt+1)^0,c
  3704                           
  3705                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3706                           ; Switch size 1, requested type "simple"
  3707                           ; Number of cases is 1, Range of values is 0 to 0
  3708                           ; switch strategies available:
  3709                           ; Name         Instructions Cycles
  3710                           ; simple_byte            4     3 (average)
  3711                           ;	Chosen strategy is simple_byte
  3712   00201C  5012               	movf	(??_vfpfcnvrt+1)^0,w,c
  3713   00201E  0A00               	xorlw	0	; case 0
  3714   002020  B4D8               	btfsc	status,2,c
  3715   002022  EF15  F010         	goto	l5157
  3716   002026  EF1C  F010         	goto	l3537
  3717   00202A                     l5157:
  3718                           
  3719                           ; BSR set to: 0
  3720                           ; Switch size 1, requested type "simple"
  3721                           ; Number of cases is 1, Range of values is 117 to 117
  3722                           ; switch strategies available:
  3723                           ; Name         Instructions Cycles
  3724                           ; simple_byte            4     3 (average)
  3725                           ;	Chosen strategy is simple_byte
  3726   00202A  5011               	movf	??_vfpfcnvrt^0,w,c
  3727   00202C  0A75               	xorlw	117	; case 117
  3728   00202E  B4D8               	btfsc	status,2,c
  3729   002030  EFB4  F00F         	goto	l3515
  3730   002034  EF1C  F010         	goto	l3537
  3731   002038                     l3537:
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3735   002038  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3736   00203A  6ED9               	movwf	fsr2l,c
  3737   00203C  6ADA               	clrf	fsr2h,c
  3738   00203E  2ADF               	incf	indf2,f,c
  3739   002040                     
  3740                           ; BSR set to: 0
  3741                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  3742   002040  0E00               	movlw	0
  3743   002042  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  3744   002044  0E00               	movlw	0
  3745   002046  6E0E               	movwf	?_vfpfcnvrt^0,c
  3746   002048  EF3F  F010         	goto	l1474
  3747   00204C                     l3543:
  3748                           
  3749                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3750   00204C  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3751   00204E  6ED9               	movwf	fsr2l,c
  3752   002050  6ADA               	clrf	fsr2h,c
  3753   002052  CFDF FFF6          	movff	indf2,tblptrl
  3754   002056                     	if	1	;There is more than 1 active tblptr byte
  3755   002056  0E0E               	movlw	high __smallconst
  3756   002058  6EF7               	movwf	tblptrh,c
  3757   00205A                     	endif
  3758   00205A                     	if	0	;tblptru may be non-zero
  3759   00205A                     	endif
  3760   00205A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3761   00205A  0E00               	movlw	low (__smallconst shr (0+16))
  3762   00205C  6EF8               	movwf	tblptru,c
  3763   00205E                     	endif
  3764   00205E  0008               	tblrd		*
  3765   002060  50F5               	movf	tablat,w,c
  3766   002062  6E01               	movwf	fputc@c^0,c
  3767   002064  6A02               	clrf	(fputc@c+1)^0,c
  3768   002066  C00E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3769   00206A  ECCB  F016         	call	_fputc	;wreg free
  3770   00206E                     
  3771                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  3772   00206E  500F               	movf	vfpfcnvrt@fmt^0,w,c
  3773   002070  6ED9               	movwf	fsr2l,c
  3774   002072  6ADA               	clrf	fsr2h,c
  3775   002074  2ADF               	incf	indf2,f,c
  3776   002076                     
  3777                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  3778   002076  0E00               	movlw	0
  3779   002078  6E0F               	movwf	(?_vfpfcnvrt+1)^0,c
  3780   00207A  0E01               	movlw	1
  3781   00207C  6E0E               	movwf	?_vfpfcnvrt^0,c
  3782   00207E                     l1474:
  3783   00207E  0012               	return		;funcret
  3784   002080                     __end_of_vfpfcnvrt:
  3785                           	callstack 0
  3786                           
  3787 ;; *************** function _fputc *****************
  3788 ;; Defined at:
  3789 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;  c               2    0[COMRAM] int 
  3792 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  3793 ;;		 -> sprintf@f(12), 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  2    0[COMRAM] int 
  3798 ;; Registers used:
  3799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3805 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3807 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3808 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3809 ;;Total ram usage:        8 bytes
  3810 ;; Hardware stack levels used: 1
  3811 ;; Hardware stack levels required when called: 2
  3812 ;; This function calls:
  3813 ;;		_putch
  3814 ;; This function is called by:
  3815 ;;		_vfpfcnvrt
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text18
  3820   002D96                     __ptext18:
  3821                           	callstack 0
  3822   002D96                     _fputc:
  3823                           	callstack 23
  3824   002D96  5003               	movf	fputc@fp^0,w,c
  3825   002D98  B4D8               	btfsc	status,2,c
  3826   002D9A  EFD1  F016         	goto	u2221
  3827   002D9E  EFD3  F016         	goto	u2220
  3828   002DA2                     u2221:
  3829   002DA2  EFDB  F016         	goto	l3327
  3830   002DA6                     u2220:
  3831   002DA6  5003               	movf	fputc@fp^0,w,c
  3832   002DA8  A4D8               	btfss	status,2,c
  3833   002DAA  EFD9  F016         	goto	u2231
  3834   002DAE  EFDB  F016         	goto	u2230
  3835   002DB2                     u2231:
  3836   002DB2  EFE0  F016         	goto	l3329
  3837   002DB6                     u2230:
  3838   002DB6                     l3327:
  3839   002DB6  5001               	movf	fputc@c^0,w,c
  3840   002DB8  EC32  F021         	call	_putch
  3841   002DBC  EF27  F017         	goto	l1512
  3842   002DC0                     l3329:
  3843   002DC0  5003               	movf	fputc@fp^0,w,c
  3844   002DC2  6ED9               	movwf	fsr2l,c
  3845   002DC4  6ADA               	clrf	fsr2h,c
  3846   002DC6  0E0A               	movlw	10
  3847   002DC8  26D9               	addwf	fsr2l,f,c
  3848   002DCA  50DE               	movf	postinc2,w,c
  3849   002DCC  10DE               	iorwf	postinc2,w,c
  3850   002DCE  B4D8               	btfsc	status,2,c
  3851   002DD0  EFEC  F016         	goto	u2241
  3852   002DD4  EFEE  F016         	goto	u2240
  3853   002DD8                     u2241:
  3854   002DD8  EF07  F017         	goto	l3333
  3855   002DDC                     u2240:
  3856   002DDC  5003               	movf	fputc@fp^0,w,c
  3857   002DDE  6ED9               	movwf	fsr2l,c
  3858   002DE0  6ADA               	clrf	fsr2h,c
  3859   002DE2  0E0A               	movlw	10
  3860   002DE4  26D9               	addwf	fsr2l,f,c
  3861   002DE6  5003               	movf	fputc@fp^0,w,c
  3862   002DE8  6EE1               	movwf	fsr1l,c
  3863   002DEA  6AE2               	clrf	fsr1h,c
  3864   002DEC  0E03               	movlw	3
  3865   002DEE  26E1               	addwf	fsr1l,f,c
  3866   002DF0  50DE               	movf	postinc2,w,c
  3867   002DF2  5CE6               	subwf	postinc1,w,c
  3868   002DF4  50E6               	movf	postinc1,w,c
  3869   002DF6  0A80               	xorlw	128
  3870   002DF8  6E08               	movwf	(??_fputc+4)^0,c
  3871   002DFA  50DE               	movf	postinc2,w,c
  3872   002DFC  0A80               	xorlw	128
  3873   002DFE  5808               	subwfb	(??_fputc+4)^0,w,c
  3874   002E00  B0D8               	btfsc	status,0,c
  3875   002E02  EF05  F017         	goto	u2251
  3876   002E06  EF07  F017         	goto	u2250
  3877   002E0A                     u2251:
  3878   002E0A  EF27  F017         	goto	l1512
  3879   002E0E                     u2250:
  3880   002E0E                     l3333:
  3881   002E0E  5003               	movf	fputc@fp^0,w,c
  3882   002E10  6ED9               	movwf	fsr2l,c
  3883   002E12  6ADA               	clrf	fsr2h,c
  3884   002E14  0E03               	movlw	3
  3885   002E16  26D9               	addwf	fsr2l,f,c
  3886   002E18  CFDE F004          	movff	postinc2,??_fputc
  3887   002E1C  CFDD F005          	movff	postdec2,??_fputc+1
  3888   002E20  5003               	movf	fputc@fp^0,w,c
  3889   002E22  6ED9               	movwf	fsr2l,c
  3890   002E24  6ADA               	clrf	fsr2h,c
  3891   002E26  CFDE F006          	movff	postinc2,??_fputc+2
  3892   002E2A  CFDD F007          	movff	postdec2,??_fputc+3
  3893   002E2E  5004               	movf	??_fputc^0,w,c
  3894   002E30  2406               	addwf	(??_fputc+2)^0,w,c
  3895   002E32  6ED9               	movwf	fsr2l,c
  3896   002E34  5005               	movf	(??_fputc+1)^0,w,c
  3897   002E36  2007               	addwfc	(??_fputc+3)^0,w,c
  3898   002E38  6EDA               	movwf	fsr2h,c
  3899   002E3A  C001  FFDF         	movff	fputc@c,indf2
  3900   002E3E  5003               	movf	fputc@fp^0,w,c
  3901   002E40  6ED9               	movwf	fsr2l,c
  3902   002E42  6ADA               	clrf	fsr2h,c
  3903   002E44  0E03               	movlw	3
  3904   002E46  26D9               	addwf	fsr2l,f,c
  3905   002E48  2ADE               	incf	postinc2,f,c
  3906   002E4A  0E00               	movlw	0
  3907   002E4C  22DD               	addwfc	postdec2,f,c
  3908   002E4E                     l1512:
  3909   002E4E  0012               	return		;funcret
  3910   002E50                     __end_of_fputc:
  3911                           	callstack 0
  3912                           
  3913 ;; *************** function _putch *****************
  3914 ;; Defined at:
  3915 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  c               1    wreg     unsigned char 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  c               1    0[COMRAM] unsigned char 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3933 ;;Total ram usage:        0 bytes
  3934 ;; Hardware stack levels used: 1
  3935 ;; Hardware stack levels required when called: 1
  3936 ;; This function calls:
  3937 ;;		Nothing
  3938 ;; This function is called by:
  3939 ;;		_fputc
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           	psect	text19
  3944   004264                     __ptext19:
  3945                           	callstack 0
  3946   004264                     _putch:
  3947                           	callstack 23
  3948   004264  0012               	return		;funcret
  3949   004266                     __end_of_putch:
  3950                           	callstack 0
  3951                           
  3952 ;; *************** function _abs *****************
  3953 ;; Defined at:
  3954 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;  a               2    6[COMRAM] int 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  2    6[COMRAM] int 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3972 ;;Total ram usage:        4 bytes
  3973 ;; Hardware stack levels used: 1
  3974 ;; Hardware stack levels required when called: 1
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_vfpfcnvrt
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text20
  3983   003F8A                     __ptext20:
  3984                           	callstack 0
  3985   003F8A                     _abs:
  3986                           	callstack 24
  3987   003F8A  BE08               	btfsc	(abs@a+1)^0,7,c
  3988   003F8C  EFCA  F01F         	goto	u2261
  3989   003F90  EFCC  F01F         	goto	u2260
  3990   003F94                     u2261:
  3991   003F94  EFD2  F01F         	goto	l1497
  3992   003F98                     u2260:
  3993   003F98  C007  F007         	movff	abs@a,?_abs
  3994   003F9C  C008  F008         	movff	abs@a+1,?_abs+1
  3995   003FA0  EFDE  F01F         	goto	l1500
  3996   003FA4                     l1497:
  3997   003FA4  C007  F009         	movff	abs@a,??_abs
  3998   003FA8  C008  F00A         	movff	abs@a+1,??_abs+1
  3999   003FAC  1E09               	comf	??_abs^0,f,c
  4000   003FAE  1E0A               	comf	(??_abs+1)^0,f,c
  4001   003FB0  4A09               	infsnz	??_abs^0,f,c
  4002   003FB2  2A0A               	incf	(??_abs+1)^0,f,c
  4003   003FB4  C009  F007         	movff	??_abs,?_abs
  4004   003FB8  C00A  F008         	movff	??_abs+1,?_abs+1
  4005   003FBC                     l1500:
  4006   003FBC  0012               	return		;funcret
  4007   003FBE                     __end_of_abs:
  4008                           	callstack 0
  4009                           
  4010 ;; *************** function ___lwmod *****************
  4011 ;; Defined at:
  4012 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  dividend        2    0[COMRAM] unsigned int 
  4015 ;;  divisor         2    2[COMRAM] unsigned int 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  counter         1    4[COMRAM] unsigned char 
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  2    0[COMRAM] unsigned int 
  4020 ;; Registers used:
  4021 ;;		wreg, status,2, status,0
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4027 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4030 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4031 ;;Total ram usage:        5 bytes
  4032 ;; Hardware stack levels used: 1
  4033 ;; Hardware stack levels required when called: 1
  4034 ;; This function calls:
  4035 ;;		Nothing
  4036 ;; This function is called by:
  4037 ;;		_vfpfcnvrt
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text21
  4042   0038F6                     __ptext21:
  4043                           	callstack 0
  4044   0038F6                     ___lwmod:
  4045                           	callstack 24
  4046   0038F6  5003               	movf	___lwmod@divisor^0,w,c
  4047   0038F8  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  4048   0038FA  B4D8               	btfsc	status,2,c
  4049   0038FC  EF82  F01C         	goto	u2191
  4050   003900  EF84  F01C         	goto	u2190
  4051   003904                     u2191:
  4052   003904  EFA8  F01C         	goto	l1255
  4053   003908                     u2190:
  4054   003908  0E01               	movlw	1
  4055   00390A  6E05               	movwf	___lwmod@counter^0,c
  4056   00390C  EF8C  F01C         	goto	l3313
  4057   003910                     l3311:
  4058   003910  90D8               	bcf	status,0,c
  4059   003912  3603               	rlcf	___lwmod@divisor^0,f,c
  4060   003914  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  4061   003916  2A05               	incf	___lwmod@counter^0,f,c
  4062   003918                     l3313:
  4063   003918  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  4064   00391A  EF91  F01C         	goto	u2201
  4065   00391E  EF93  F01C         	goto	u2200
  4066   003922                     u2201:
  4067   003922  EF88  F01C         	goto	l3311
  4068   003926                     u2200:
  4069   003926                     l3315:
  4070   003926  5003               	movf	___lwmod@divisor^0,w,c
  4071   003928  5C01               	subwf	___lwmod@dividend^0,w,c
  4072   00392A  5004               	movf	(___lwmod@divisor+1)^0,w,c
  4073   00392C  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  4074   00392E  A0D8               	btfss	status,0,c
  4075   003930  EF9C  F01C         	goto	u2211
  4076   003934  EF9E  F01C         	goto	u2210
  4077   003938                     u2211:
  4078   003938  EFA2  F01C         	goto	l3319
  4079   00393C                     u2210:
  4080   00393C  5003               	movf	___lwmod@divisor^0,w,c
  4081   00393E  5E01               	subwf	___lwmod@dividend^0,f,c
  4082   003940  5004               	movf	(___lwmod@divisor+1)^0,w,c
  4083   003942  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  4084   003944                     l3319:
  4085   003944  90D8               	bcf	status,0,c
  4086   003946  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  4087   003948  3203               	rrcf	___lwmod@divisor^0,f,c
  4088   00394A  2E05               	decfsz	___lwmod@counter^0,f,c
  4089   00394C  EF93  F01C         	goto	l3315
  4090   003950                     l1255:
  4091   003950  C001  F001         	movff	___lwmod@dividend,?___lwmod
  4092   003954  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  4093   003958  0012               	return		;funcret
  4094   00395A                     __end_of___lwmod:
  4095                           	callstack 0
  4096                           
  4097 ;; *************** function ___awmod *****************
  4098 ;; Defined at:
  4099 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  dividend        2    0[COMRAM] int 
  4102 ;;  divisor         2    2[COMRAM] int 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  sign            1    5[COMRAM] unsigned char 
  4105 ;;  counter         1    4[COMRAM] unsigned char 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  2    0[COMRAM] int 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4115 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4118 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4119 ;;Total ram usage:        6 bytes
  4120 ;; Hardware stack levels used: 1
  4121 ;; Hardware stack levels required when called: 1
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_vfpfcnvrt
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text22
  4130   003130                     __ptext22:
  4131                           	callstack 0
  4132   003130                     ___awmod:
  4133                           	callstack 24
  4134   003130  0E00               	movlw	0
  4135   003132  6E06               	movwf	___awmod@sign^0,c
  4136   003134  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  4137   003136  EFA1  F018         	goto	u2130
  4138   00313A  EF9F  F018         	goto	u2131
  4139   00313E                     u2131:
  4140   00313E  EFA7  F018         	goto	l3279
  4141   003142                     u2130:
  4142   003142  6C01               	negf	___awmod@dividend^0,c
  4143   003144  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4144   003146  B0D8               	btfsc	status,0,c
  4145   003148  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4146   00314A  0E01               	movlw	1
  4147   00314C  6E06               	movwf	___awmod@sign^0,c
  4148   00314E                     l3279:
  4149   00314E  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  4150   003150  EFAE  F018         	goto	u2140
  4151   003154  EFAC  F018         	goto	u2141
  4152   003158                     u2141:
  4153   003158  EFB2  F018         	goto	l3283
  4154   00315C                     u2140:
  4155   00315C  6C03               	negf	___awmod@divisor^0,c
  4156   00315E  1E04               	comf	(___awmod@divisor+1)^0,f,c
  4157   003160  B0D8               	btfsc	status,0,c
  4158   003162  2A04               	incf	(___awmod@divisor+1)^0,f,c
  4159   003164                     l3283:
  4160   003164  5003               	movf	___awmod@divisor^0,w,c
  4161   003166  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  4162   003168  B4D8               	btfsc	status,2,c
  4163   00316A  EFB9  F018         	goto	u2151
  4164   00316E  EFBB  F018         	goto	u2150
  4165   003172                     u2151:
  4166   003172  EFDF  F018         	goto	l3299
  4167   003176                     u2150:
  4168   003176  0E01               	movlw	1
  4169   003178  6E05               	movwf	___awmod@counter^0,c
  4170   00317A  EFC3  F018         	goto	l3289
  4171   00317E                     l3287:
  4172   00317E  90D8               	bcf	status,0,c
  4173   003180  3603               	rlcf	___awmod@divisor^0,f,c
  4174   003182  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  4175   003184  2A05               	incf	___awmod@counter^0,f,c
  4176   003186                     l3289:
  4177   003186  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  4178   003188  EFC8  F018         	goto	u2161
  4179   00318C  EFCA  F018         	goto	u2160
  4180   003190                     u2161:
  4181   003190  EFBF  F018         	goto	l3287
  4182   003194                     u2160:
  4183   003194                     l3291:
  4184   003194  5003               	movf	___awmod@divisor^0,w,c
  4185   003196  5C01               	subwf	___awmod@dividend^0,w,c
  4186   003198  5004               	movf	(___awmod@divisor+1)^0,w,c
  4187   00319A  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  4188   00319C  A0D8               	btfss	status,0,c
  4189   00319E  EFD3  F018         	goto	u2171
  4190   0031A2  EFD5  F018         	goto	u2170
  4191   0031A6                     u2171:
  4192   0031A6  EFD9  F018         	goto	l3295
  4193   0031AA                     u2170:
  4194   0031AA  5003               	movf	___awmod@divisor^0,w,c
  4195   0031AC  5E01               	subwf	___awmod@dividend^0,f,c
  4196   0031AE  5004               	movf	(___awmod@divisor+1)^0,w,c
  4197   0031B0  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  4198   0031B2                     l3295:
  4199   0031B2  90D8               	bcf	status,0,c
  4200   0031B4  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  4201   0031B6  3203               	rrcf	___awmod@divisor^0,f,c
  4202   0031B8  2E05               	decfsz	___awmod@counter^0,f,c
  4203   0031BA  EFCA  F018         	goto	l3291
  4204   0031BE                     l3299:
  4205   0031BE  5006               	movf	___awmod@sign^0,w,c
  4206   0031C0  B4D8               	btfsc	status,2,c
  4207   0031C2  EFE5  F018         	goto	u2181
  4208   0031C6  EFE7  F018         	goto	u2180
  4209   0031CA                     u2181:
  4210   0031CA  EFEB  F018         	goto	l3303
  4211   0031CE                     u2180:
  4212   0031CE  6C01               	negf	___awmod@dividend^0,c
  4213   0031D0  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4214   0031D2  B0D8               	btfsc	status,0,c
  4215   0031D4  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4216   0031D6                     l3303:
  4217   0031D6  C001  F001         	movff	___awmod@dividend,?___awmod
  4218   0031DA  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4219   0031DE  0012               	return		;funcret
  4220   0031E0                     __end_of___awmod:
  4221                           	callstack 0
  4222                           
  4223 ;; *************** function ___awdiv *****************
  4224 ;; Defined at:
  4225 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;  dividend        2    0[COMRAM] int 
  4228 ;;  divisor         2    2[COMRAM] int 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  quotient        2    6[COMRAM] int 
  4231 ;;  sign            1    5[COMRAM] unsigned char 
  4232 ;;  counter         1    4[COMRAM] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  2    0[COMRAM] int 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4242 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4243 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4245 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;Total ram usage:        8 bytes
  4247 ;; Hardware stack levels used: 1
  4248 ;; Hardware stack levels required when called: 1
  4249 ;; This function calls:
  4250 ;;		Nothing
  4251 ;; This function is called by:
  4252 ;;		_vfpfcnvrt
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text23
  4257   002CD2                     __ptext23:
  4258                           	callstack 0
  4259   002CD2                     ___awdiv:
  4260                           	callstack 24
  4261   002CD2  0E00               	movlw	0
  4262   002CD4  6E06               	movwf	___awdiv@sign^0,c
  4263   002CD6  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  4264   002CD8  EF72  F016         	goto	u2070
  4265   002CDC  EF70  F016         	goto	u2071
  4266   002CE0                     u2071:
  4267   002CE0  EF78  F016         	goto	l3235
  4268   002CE4                     u2070:
  4269   002CE4  6C03               	negf	___awdiv@divisor^0,c
  4270   002CE6  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  4271   002CE8  B0D8               	btfsc	status,0,c
  4272   002CEA  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  4273   002CEC  0E01               	movlw	1
  4274   002CEE  6E06               	movwf	___awdiv@sign^0,c
  4275   002CF0                     l3235:
  4276   002CF0  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  4277   002CF2  EF7F  F016         	goto	u2080
  4278   002CF6  EF7D  F016         	goto	u2081
  4279   002CFA                     u2081:
  4280   002CFA  EF85  F016         	goto	l3241
  4281   002CFE                     u2080:
  4282   002CFE  6C01               	negf	___awdiv@dividend^0,c
  4283   002D00  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  4284   002D02  B0D8               	btfsc	status,0,c
  4285   002D04  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  4286   002D06  0E01               	movlw	1
  4287   002D08  1A06               	xorwf	___awdiv@sign^0,f,c
  4288   002D0A                     l3241:
  4289   002D0A  0E00               	movlw	0
  4290   002D0C  6E08               	movwf	(___awdiv@quotient+1)^0,c
  4291   002D0E  0E00               	movlw	0
  4292   002D10  6E07               	movwf	___awdiv@quotient^0,c
  4293   002D12  5003               	movf	___awdiv@divisor^0,w,c
  4294   002D14  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  4295   002D16  B4D8               	btfsc	status,2,c
  4296   002D18  EF90  F016         	goto	u2091
  4297   002D1C  EF92  F016         	goto	u2090
  4298   002D20                     u2091:
  4299   002D20  EFBA  F016         	goto	l3263
  4300   002D24                     u2090:
  4301   002D24  0E01               	movlw	1
  4302   002D26  6E05               	movwf	___awdiv@counter^0,c
  4303   002D28  EF9A  F016         	goto	l3249
  4304   002D2C                     l3247:
  4305   002D2C  90D8               	bcf	status,0,c
  4306   002D2E  3603               	rlcf	___awdiv@divisor^0,f,c
  4307   002D30  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  4308   002D32  2A05               	incf	___awdiv@counter^0,f,c
  4309   002D34                     l3249:
  4310   002D34  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4311   002D36  EF9F  F016         	goto	u2101
  4312   002D3A  EFA1  F016         	goto	u2100
  4313   002D3E                     u2101:
  4314   002D3E  EF96  F016         	goto	l3247
  4315   002D42                     u2100:
  4316   002D42                     l3251:
  4317   002D42  90D8               	bcf	status,0,c
  4318   002D44  3607               	rlcf	___awdiv@quotient^0,f,c
  4319   002D46  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  4320   002D48  5003               	movf	___awdiv@divisor^0,w,c
  4321   002D4A  5C01               	subwf	___awdiv@dividend^0,w,c
  4322   002D4C  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4323   002D4E  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  4324   002D50  A0D8               	btfss	status,0,c
  4325   002D52  EFAD  F016         	goto	u2111
  4326   002D56  EFAF  F016         	goto	u2110
  4327   002D5A                     u2111:
  4328   002D5A  EFB4  F016         	goto	l3259
  4329   002D5E                     u2110:
  4330   002D5E  5003               	movf	___awdiv@divisor^0,w,c
  4331   002D60  5E01               	subwf	___awdiv@dividend^0,f,c
  4332   002D62  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4333   002D64  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  4334   002D66  8007               	bsf	___awdiv@quotient^0,0,c
  4335   002D68                     l3259:
  4336   002D68  90D8               	bcf	status,0,c
  4337   002D6A  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  4338   002D6C  3203               	rrcf	___awdiv@divisor^0,f,c
  4339   002D6E  2E05               	decfsz	___awdiv@counter^0,f,c
  4340   002D70  EFA1  F016         	goto	l3251
  4341   002D74                     l3263:
  4342   002D74  5006               	movf	___awdiv@sign^0,w,c
  4343   002D76  B4D8               	btfsc	status,2,c
  4344   002D78  EFC0  F016         	goto	u2121
  4345   002D7C  EFC2  F016         	goto	u2120
  4346   002D80                     u2121:
  4347   002D80  EFC6  F016         	goto	l3267
  4348   002D84                     u2120:
  4349   002D84  6C07               	negf	___awdiv@quotient^0,c
  4350   002D86  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  4351   002D88  B0D8               	btfsc	status,0,c
  4352   002D8A  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  4353   002D8C                     l3267:
  4354   002D8C  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4355   002D90  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4356   002D94  0012               	return		;funcret
  4357   002D96                     __end_of___awdiv:
  4358                           	callstack 0
  4359                           
  4360 ;; *************** function _sendStringSerial4 *****************
  4361 ;; Defined at:
  4362 ;;		line 33 in file "serial.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  string          2    1[COMRAM] PTR unsigned char 
  4365 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), STR_4(3), sendArrayCharSerial4@tempStr(161), 
  4366 ;;		 -> sendIntSerial4@string(17), 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;		None
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4378 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4381 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4382 ;;Total ram usage:        2 bytes
  4383 ;; Hardware stack levels used: 1
  4384 ;; Hardware stack levels required when called: 2
  4385 ;; This function calls:
  4386 ;;		_sendCharSerial4
  4387 ;; This function is called by:
  4388 ;;		_sendIntSerial4
  4389 ;;		_sendArrayCharSerial4
  4390 ;;		_sendRGBCvalSerial4
  4391 ;;		_sendHSVvalSerial4
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           	psect	text24
  4396   00395A                     __ptext24:
  4397                           	callstack 0
  4398   00395A                     _sendStringSerial4:
  4399                           	callstack 26
  4400   00395A                     
  4401                           ;serial.c: 35:     while(*string != 0){
  4402   00395A  EFC4  F01C         	goto	l3697
  4403   00395E                     l3693:
  4404                           
  4405                           ;serial.c: 36:   sendCharSerial4(*string++);
  4406   00395E  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  4407   003962  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  4408   003966  0E00               	movlw	low (__smallconst shr (0+16))
  4409   003968  6EF8               	movwf	tblptru,c
  4410   00396A  0E0D               	movlw	(high __ramtop+-1)
  4411   00396C  64F7               	cpfsgt	tblptrh,c
  4412   00396E  D003               	bra	u2717
  4413   003970  0008               	tblrd		*
  4414   003972  50F5               	movf	tablat,w,c
  4415   003974  D005               	bra	u2710
  4416   003976                     u2717:
  4417   003976  CFF6 FFE1          	movff	tblptrl,fsr1l
  4418   00397A  CFF7 FFE2          	movff	tblptrh,fsr1h
  4419   00397E  50E7               	movf	indf1,w,c
  4420   003980                     u2710:
  4421   003980  ECF6  F020         	call	_sendCharSerial4
  4422   003984  4A02               	infsnz	sendStringSerial4@string^0,f,c
  4423   003986  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  4424   003988                     l3697:
  4425                           
  4426                           ;serial.c: 35:     while(*string != 0){
  4427   003988  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  4428   00398C  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  4429   003990  0E00               	movlw	low (__smallconst shr (0+16))
  4430   003992  6EF8               	movwf	tblptru,c
  4431   003994  0E0D               	movlw	(high __ramtop+-1)
  4432   003996  64F7               	cpfsgt	tblptrh,c
  4433   003998  D003               	bra	u2727
  4434   00399A  0008               	tblrd		*
  4435   00399C  50F5               	movf	tablat,w,c
  4436   00399E  D005               	bra	u2720
  4437   0039A0                     u2727:
  4438   0039A0  CFF6 FFE1          	movff	tblptrl,fsr1l
  4439   0039A4  CFF7 FFE2          	movff	tblptrh,fsr1h
  4440   0039A8  50E7               	movf	indf1,w,c
  4441   0039AA                     u2720:
  4442   0039AA  0900               	iorlw	0
  4443   0039AC  A4D8               	btfss	status,2,c
  4444   0039AE  EFDB  F01C         	goto	u2731
  4445   0039B2  EFDD  F01C         	goto	u2730
  4446   0039B6                     u2731:
  4447   0039B6  EFAF  F01C         	goto	l3693
  4448   0039BA                     u2730:
  4449   0039BA  0012               	return		;funcret
  4450   0039BC                     __end_of_sendStringSerial4:
  4451                           	callstack 0
  4452                           
  4453 ;; *************** function _sendCharSerial4 *****************
  4454 ;; Defined at:
  4455 ;;		line 25 in file "serial.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;  charToSend      1    wreg     unsigned char 
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  charToSend      1    0[COMRAM] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      void 
  4462 ;; Registers used:
  4463 ;;		wreg
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4472 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4473 ;;Total ram usage:        1 bytes
  4474 ;; Hardware stack levels used: 1
  4475 ;; Hardware stack levels required when called: 1
  4476 ;; This function calls:
  4477 ;;		Nothing
  4478 ;; This function is called by:
  4479 ;;		_sendStringSerial4
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text25
  4484   0041EC                     __ptext25:
  4485                           	callstack 0
  4486   0041EC                     _sendCharSerial4:
  4487                           	callstack 26
  4488                           
  4489                           ;incstack = 0
  4490                           ;sendCharSerial4@charToSend stored from wreg
  4491   0041EC  6E01               	movwf	sendCharSerial4@charToSend^0,c
  4492   0041EE                     l466:
  4493   0041EE  010E               	movlb	14	; () banked
  4494   0041F0  A537               	btfss	55,2,b	;volatile
  4495   0041F2  EFFD  F020         	goto	u2651
  4496   0041F6  EFFF  F020         	goto	u2650
  4497   0041FA                     u2651:
  4498   0041FA  EFF7  F020         	goto	l466
  4499   0041FE                     u2650:
  4500   0041FE                     
  4501                           ; BSR set to: 14
  4502                           ;serial.c: 27:     TX4REG = charToSend;
  4503   0041FE  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4504   004202                     
  4505                           ; BSR set to: 14
  4506   004202  0012               	return		;funcret
  4507   004204                     __end_of_sendCharSerial4:
  4508                           	callstack 0
  4509                           
  4510 ;; *************** function _scale_RGB *****************
  4511 ;; Defined at:
  4512 ;;		line 197 in file "color.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;  p               1   49[COMRAM] PTR struct RGBC_val
  4515 ;;		 -> main@RGBC_colour(8), 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;		None
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  1    wreg      void 
  4520 ;; Registers used:
  4521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4527 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4529 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4530 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4531 ;;Total ram usage:        3 bytes
  4532 ;; Hardware stack levels used: 1
  4533 ;; Hardware stack levels required when called: 2
  4534 ;; This function calls:
  4535 ;;		___flmul
  4536 ;;		___fltol
  4537 ;;		___xxtofl
  4538 ;; This function is called by:
  4539 ;;		_forward_navigation
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text26
  4544   002A6E                     __ptext26:
  4545                           	callstack 0
  4546   002A6E                     _scale_RGB:
  4547                           	callstack 27
  4548   002A6E                     
  4549                           ;color.c: 197: void scale_RGB(struct RGBC_val *p);color.c: 198: {;color.c: 199:     p->R
      +                           *= 0.5;
  4550   002A6E  0E00               	movlw	0
  4551   002A70  6E13               	movwf	___flmul@a^0,c
  4552   002A72  0E00               	movlw	0
  4553   002A74  6E14               	movwf	(___flmul@a+1)^0,c
  4554   002A76  0E00               	movlw	0
  4555   002A78  6E15               	movwf	(___flmul@a+2)^0,c
  4556   002A7A  0E3F               	movlw	63
  4557   002A7C  6E16               	movwf	(___flmul@a+3)^0,c
  4558   002A7E  5032               	movf	scale_RGB@p^0,w,c
  4559   002A80  6ED9               	movwf	fsr2l,c
  4560   002A82  6ADA               	clrf	fsr2h,c
  4561   002A84  CFDE F033          	movff	postinc2,??_scale_RGB
  4562   002A88  CFDD F034          	movff	postdec2,??_scale_RGB+1
  4563   002A8C  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  4564   002A90  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  4565   002A94  6A03               	clrf	(___xxtofl@val+2)^0,c
  4566   002A96  6A04               	clrf	(___xxtofl@val+3)^0,c
  4567   002A98  0E00               	movlw	0
  4568   002A9A  EC3E  F011         	call	___xxtofl
  4569   002A9E  C001  F00F         	movff	?___xxtofl,___flmul@b
  4570   002AA2  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  4571   002AA6  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  4572   002AAA  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  4573   002AAE  ECA5  F00C         	call	___flmul	;wreg free
  4574   002AB2  C00F  F028         	movff	?___flmul,___fltol@f1
  4575   002AB6  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  4576   002ABA  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  4577   002ABE  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  4578   002AC2  EC36  F014         	call	___fltol	;wreg free
  4579   002AC6  5032               	movf	scale_RGB@p^0,w,c
  4580   002AC8  6ED9               	movwf	fsr2l,c
  4581   002ACA  6ADA               	clrf	fsr2h,c
  4582   002ACC  C028  FFDE         	movff	?___fltol,postinc2
  4583   002AD0  C029  FFDD         	movff	?___fltol+1,postdec2
  4584                           
  4585                           ;color.c: 200:     p->G *= 0.7;
  4586   002AD4  0E33               	movlw	51
  4587   002AD6  6E13               	movwf	___flmul@a^0,c
  4588   002AD8  0E33               	movlw	51
  4589   002ADA  6E14               	movwf	(___flmul@a+1)^0,c
  4590   002ADC  0E33               	movlw	51
  4591   002ADE  6E15               	movwf	(___flmul@a+2)^0,c
  4592   002AE0  0E3F               	movlw	63
  4593   002AE2  6E16               	movwf	(___flmul@a+3)^0,c
  4594   002AE4  5032               	movf	scale_RGB@p^0,w,c
  4595   002AE6  6ED9               	movwf	fsr2l,c
  4596   002AE8  6ADA               	clrf	fsr2h,c
  4597   002AEA  0E02               	movlw	2
  4598   002AEC  26D9               	addwf	fsr2l,f,c
  4599   002AEE  CFDE F033          	movff	postinc2,??_scale_RGB
  4600   002AF2  CFDD F034          	movff	postdec2,??_scale_RGB+1
  4601   002AF6  C033  F001         	movff	??_scale_RGB,___xxtofl@val
  4602   002AFA  C034  F002         	movff	??_scale_RGB+1,___xxtofl@val+1
  4603   002AFE  6A03               	clrf	(___xxtofl@val+2)^0,c
  4604   002B00  6A04               	clrf	(___xxtofl@val+3)^0,c
  4605   002B02  0E00               	movlw	0
  4606   002B04  EC3E  F011         	call	___xxtofl
  4607   002B08  C001  F00F         	movff	?___xxtofl,___flmul@b
  4608   002B0C  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  4609   002B10  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  4610   002B14  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  4611   002B18  ECA5  F00C         	call	___flmul	;wreg free
  4612   002B1C  C00F  F028         	movff	?___flmul,___fltol@f1
  4613   002B20  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  4614   002B24  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  4615   002B28  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  4616   002B2C  EC36  F014         	call	___fltol	;wreg free
  4617   002B30  5032               	movf	scale_RGB@p^0,w,c
  4618   002B32  6ED9               	movwf	fsr2l,c
  4619   002B34  6ADA               	clrf	fsr2h,c
  4620   002B36  0E02               	movlw	2
  4621   002B38  26D9               	addwf	fsr2l,f,c
  4622   002B3A  C028  FFDE         	movff	?___fltol,postinc2
  4623   002B3E  C029  FFDD         	movff	?___fltol+1,postdec2
  4624   002B42  0012               	return		;funcret
  4625   002B44                     __end_of_scale_RGB:
  4626                           	callstack 0
  4627                           
  4628 ;; *************** function ___xxtofl *****************
  4629 ;; Defined at:
  4630 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  sign            1    wreg     unsigned char 
  4633 ;;  val             4    0[COMRAM] long 
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;  sign            1    8[COMRAM] unsigned char 
  4636 ;;  arg             4   10[COMRAM] unsigned long 
  4637 ;;  exp             1    9[COMRAM] unsigned char 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  4    0[COMRAM] unsigned char 
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4648 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4649 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4650 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4651 ;;Total ram usage:       14 bytes
  4652 ;; Hardware stack levels used: 1
  4653 ;; Hardware stack levels required when called: 1
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_scale_RGB
  4658 ;;		_stop
  4659 ;;		_turnLeft
  4660 ;;		_turnRight
  4661 ;;		_fullSpeedAhead
  4662 ;;		_fullSpeedReverse
  4663 ;;		_turnLeft90
  4664 ;;		_turnRight90
  4665 ;;		_turnLeft135
  4666 ;;		_turnRight135
  4667 ;;		_UTurn
  4668 ;;		_headbuttReverse
  4669 ;;		_squareReverse
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text27
  4674   00227C                     __ptext27:
  4675                           	callstack 0
  4676   00227C                     ___xxtofl:
  4677                           	callstack 27
  4678                           
  4679                           ;incstack = 0
  4680                           ;___xxtofl@sign stored from wreg
  4681   00227C  6E09               	movwf	___xxtofl@sign^0,c
  4682   00227E  5009               	movf	___xxtofl@sign^0,w,c
  4683   002280  B4D8               	btfsc	status,2,c
  4684   002282  EF45  F011         	goto	u3051
  4685   002286  EF47  F011         	goto	u3050
  4686   00228A                     u3051:
  4687   00228A  EF69  F011         	goto	l1409
  4688   00228E                     u3050:
  4689   00228E  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  4690   002290  EF4E  F011         	goto	u3060
  4691   002294  EF4C  F011         	goto	u3061
  4692   002298                     u3061:
  4693   002298  EF69  F011         	goto	l1409
  4694   00229C                     u3060:
  4695   00229C  C001  F005         	movff	___xxtofl@val,??___xxtofl
  4696   0022A0  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  4697   0022A4  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  4698   0022A8  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  4699   0022AC  1E05               	comf	??___xxtofl^0,f,c
  4700   0022AE  1E06               	comf	(??___xxtofl+1)^0,f,c
  4701   0022B0  1E07               	comf	(??___xxtofl+2)^0,f,c
  4702   0022B2  1E08               	comf	(??___xxtofl+3)^0,f,c
  4703   0022B4  2A05               	incf	??___xxtofl^0,f,c
  4704   0022B6  0E00               	movlw	0
  4705   0022B8  2206               	addwfc	(??___xxtofl+1)^0,f,c
  4706   0022BA  2207               	addwfc	(??___xxtofl+2)^0,f,c
  4707   0022BC  2208               	addwfc	(??___xxtofl+3)^0,f,c
  4708   0022BE  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  4709   0022C2  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  4710   0022C6  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  4711   0022CA  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  4712   0022CE  EF71  F011         	goto	l4029
  4713   0022D2                     l1409:
  4714   0022D2  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  4715   0022D6  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4716   0022DA  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4717   0022DE  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4718   0022E2                     l4029:
  4719   0022E2  5001               	movf	___xxtofl@val^0,w,c
  4720   0022E4  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  4721   0022E6  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  4722   0022E8  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  4723   0022EA  A4D8               	btfss	status,2,c
  4724   0022EC  EF7A  F011         	goto	u3071
  4725   0022F0  EF7C  F011         	goto	u3070
  4726   0022F4                     u3071:
  4727   0022F4  EF86  F011         	goto	l4035
  4728   0022F8                     u3070:
  4729   0022F8  0E00               	movlw	0
  4730   0022FA  6E01               	movwf	?___xxtofl^0,c
  4731   0022FC  0E00               	movlw	0
  4732   0022FE  6E02               	movwf	(?___xxtofl+1)^0,c
  4733   002300  0E00               	movlw	0
  4734   002302  6E03               	movwf	(?___xxtofl+2)^0,c
  4735   002304  0E00               	movlw	0
  4736   002306  6E04               	movwf	(?___xxtofl+3)^0,c
  4737   002308  EF17  F012         	goto	l1412
  4738   00230C                     l4035:
  4739   00230C  0E96               	movlw	150
  4740   00230E  6E0A               	movwf	___xxtofl@exp^0,c
  4741   002310  EF90  F011         	goto	l4039
  4742   002314                     l4037:
  4743   002314  2A0A               	incf	___xxtofl@exp^0,f,c
  4744   002316  90D8               	bcf	status,0,c
  4745   002318  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4746   00231A  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4747   00231C  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4748   00231E  320B               	rrcf	___xxtofl@arg^0,f,c
  4749   002320                     l4039:
  4750   002320  0E00               	movlw	0
  4751   002322  140B               	andwf	___xxtofl@arg^0,w,c
  4752   002324  6E05               	movwf	??___xxtofl^0,c
  4753   002326  0E00               	movlw	0
  4754   002328  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4755   00232A  6E06               	movwf	(??___xxtofl+1)^0,c
  4756   00232C  0E00               	movlw	0
  4757   00232E  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4758   002330  6E07               	movwf	(??___xxtofl+2)^0,c
  4759   002332  0EFE               	movlw	254
  4760   002334  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4761   002336  6E08               	movwf	(??___xxtofl+3)^0,c
  4762   002338  5005               	movf	??___xxtofl^0,w,c
  4763   00233A  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4764   00233C  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4765   00233E  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4766   002340  A4D8               	btfss	status,2,c
  4767   002342  EFA5  F011         	goto	u3081
  4768   002346  EFA7  F011         	goto	u3080
  4769   00234A                     u3081:
  4770   00234A  EF8A  F011         	goto	l4037
  4771   00234E                     u3080:
  4772   00234E  EFB5  F011         	goto	l1416
  4773   002352                     l4041:
  4774   002352  2A0A               	incf	___xxtofl@exp^0,f,c
  4775   002354  0E01               	movlw	1
  4776   002356  260B               	addwf	___xxtofl@arg^0,f,c
  4777   002358  0E00               	movlw	0
  4778   00235A  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  4779   00235C  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  4780   00235E  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  4781   002360  90D8               	bcf	status,0,c
  4782   002362  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4783   002364  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4784   002366  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4785   002368  320B               	rrcf	___xxtofl@arg^0,f,c
  4786   00236A                     l1416:
  4787   00236A  0E00               	movlw	0
  4788   00236C  140B               	andwf	___xxtofl@arg^0,w,c
  4789   00236E  6E05               	movwf	??___xxtofl^0,c
  4790   002370  0E00               	movlw	0
  4791   002372  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4792   002374  6E06               	movwf	(??___xxtofl+1)^0,c
  4793   002376  0E00               	movlw	0
  4794   002378  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4795   00237A  6E07               	movwf	(??___xxtofl+2)^0,c
  4796   00237C  0EFF               	movlw	255
  4797   00237E  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4798   002380  6E08               	movwf	(??___xxtofl+3)^0,c
  4799   002382  5005               	movf	??___xxtofl^0,w,c
  4800   002384  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4801   002386  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4802   002388  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4803   00238A  A4D8               	btfss	status,2,c
  4804   00238C  EFCA  F011         	goto	u3091
  4805   002390  EFCC  F011         	goto	u3090
  4806   002394                     u3091:
  4807   002394  EFA9  F011         	goto	l4041
  4808   002398                     u3090:
  4809   002398  EFD4  F011         	goto	l4049
  4810   00239C                     l4047:
  4811   00239C  060A               	decf	___xxtofl@exp^0,f,c
  4812   00239E  90D8               	bcf	status,0,c
  4813   0023A0  360B               	rlcf	___xxtofl@arg^0,f,c
  4814   0023A2  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  4815   0023A4  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  4816   0023A6  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  4817   0023A8                     l4049:
  4818   0023A8  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  4819   0023AA  EFD9  F011         	goto	u3101
  4820   0023AE  EFDB  F011         	goto	u3100
  4821   0023B2                     u3101:
  4822   0023B2  EFE3  F011         	goto	l1423
  4823   0023B6                     u3100:
  4824   0023B6  0E02               	movlw	2
  4825   0023B8  600A               	cpfslt	___xxtofl@exp^0,c
  4826   0023BA  EFE1  F011         	goto	u3111
  4827   0023BE  EFE3  F011         	goto	u3110
  4828   0023C2                     u3111:
  4829   0023C2  EFCE  F011         	goto	l4047
  4830   0023C6                     u3110:
  4831   0023C6                     l1423:
  4832   0023C6  B00A               	btfsc	___xxtofl@exp^0,0,c
  4833   0023C8  EFE8  F011         	goto	u3121
  4834   0023CC  EFEA  F011         	goto	u3120
  4835   0023D0                     u3121:
  4836   0023D0  EFEB  F011         	goto	l4055
  4837   0023D4                     u3120:
  4838   0023D4  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  4839   0023D6                     l4055:
  4840   0023D6  90D8               	bcf	status,0,c
  4841   0023D8  320A               	rrcf	___xxtofl@exp^0,f,c
  4842   0023DA  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  4843   0023DE  6A06               	clrf	(??___xxtofl+1)^0,c
  4844   0023E0  6A07               	clrf	(??___xxtofl+2)^0,c
  4845   0023E2  6A08               	clrf	(??___xxtofl+3)^0,c
  4846   0023E4  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  4847   0023E8  6A07               	clrf	(??___xxtofl+2)^0,c
  4848   0023EA  6A06               	clrf	(??___xxtofl+1)^0,c
  4849   0023EC  6A05               	clrf	??___xxtofl^0,c
  4850   0023EE  5005               	movf	??___xxtofl^0,w,c
  4851   0023F0  120B               	iorwf	___xxtofl@arg^0,f,c
  4852   0023F2  5006               	movf	(??___xxtofl+1)^0,w,c
  4853   0023F4  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  4854   0023F6  5007               	movf	(??___xxtofl+2)^0,w,c
  4855   0023F8  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  4856   0023FA  5008               	movf	(??___xxtofl+3)^0,w,c
  4857   0023FC  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  4858   0023FE  5009               	movf	___xxtofl@sign^0,w,c
  4859   002400  B4D8               	btfsc	status,2,c
  4860   002402  EF05  F012         	goto	u3131
  4861   002406  EF07  F012         	goto	u3130
  4862   00240A                     u3131:
  4863   00240A  EF0F  F012         	goto	l4065
  4864   00240E                     u3130:
  4865   00240E  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  4866   002410  EF0E  F012         	goto	u3140
  4867   002414  EF0C  F012         	goto	u3141
  4868   002418                     u3141:
  4869   002418  EF0F  F012         	goto	l4065
  4870   00241C                     u3140:
  4871   00241C  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  4872   00241E                     l4065:
  4873   00241E  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  4874   002422  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  4875   002426  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  4876   00242A  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  4877   00242E                     l1412:
  4878   00242E  0012               	return		;funcret
  4879   002430                     __end_of___xxtofl:
  4880                           	callstack 0
  4881                           
  4882 ;; *************** function ___fltol *****************
  4883 ;; Defined at:
  4884 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  f1              4   39[COMRAM] unsigned char 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  exp1            1   48[COMRAM] unsigned char 
  4889 ;;  sign1           1   47[COMRAM] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  4   39[COMRAM] long 
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4899 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4901 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4902 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4903 ;;Total ram usage:       10 bytes
  4904 ;; Hardware stack levels used: 1
  4905 ;; Hardware stack levels required when called: 1
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		_scale_RGB
  4910 ;;		_stop
  4911 ;;		_turnLeft
  4912 ;;		_turnRight
  4913 ;;		_fullSpeedAhead
  4914 ;;		_fullSpeedReverse
  4915 ;;		_turnLeft90
  4916 ;;		_turnRight90
  4917 ;;		_turnLeft135
  4918 ;;		_turnRight135
  4919 ;;		_UTurn
  4920 ;;		_headbuttReverse
  4921 ;;		_squareReverse
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text28
  4926   00286C                     __ptext28:
  4927                           	callstack 0
  4928   00286C                     ___fltol:
  4929                           	callstack 27
  4930   00286C  342A               	rlcf	(___fltol@f1+2)^0,w,c
  4931   00286E  342B               	rlcf	(___fltol@f1+3)^0,w,c
  4932   002870  6E31               	movwf	___fltol@exp1^0,c
  4933   002872  5031               	movf	___fltol@exp1^0,w,c
  4934   002874  A4D8               	btfss	status,2,c
  4935   002876  EF3F  F014         	goto	u2981
  4936   00287A  EF41  F014         	goto	u2980
  4937   00287E                     u2981:
  4938   00287E  EF4B  F014         	goto	l3985
  4939   002882                     u2980:
  4940   002882                     l3981:
  4941   002882  0E00               	movlw	0
  4942   002884  6E28               	movwf	?___fltol^0,c
  4943   002886  0E00               	movlw	0
  4944   002888  6E29               	movwf	(?___fltol+1)^0,c
  4945   00288A  0E00               	movlw	0
  4946   00288C  6E2A               	movwf	(?___fltol+2)^0,c
  4947   00288E  0E00               	movlw	0
  4948   002890  6E2B               	movwf	(?___fltol+3)^0,c
  4949   002892  EFB8  F014         	goto	l1051
  4950   002896                     l3985:
  4951   002896  C028  F02C         	movff	___fltol@f1,??___fltol
  4952   00289A  C029  F02D         	movff	___fltol@f1+1,??___fltol+1
  4953   00289E  C02A  F02E         	movff	___fltol@f1+2,??___fltol+2
  4954   0028A2  C02B  F02F         	movff	___fltol@f1+3,??___fltol+3
  4955   0028A6  0E20               	movlw	32
  4956   0028A8  EF5B  F014         	goto	u2990
  4957   0028AC                     u2995:
  4958   0028AC  90D8               	bcf	status,0,c
  4959   0028AE  322F               	rrcf	(??___fltol+3)^0,f,c
  4960   0028B0  322E               	rrcf	(??___fltol+2)^0,f,c
  4961   0028B2  322D               	rrcf	(??___fltol+1)^0,f,c
  4962   0028B4  322C               	rrcf	??___fltol^0,f,c
  4963   0028B6                     u2990:
  4964   0028B6  2EE8               	decfsz	wreg,f,c
  4965   0028B8  EF56  F014         	goto	u2995
  4966   0028BC  502C               	movf	??___fltol^0,w,c
  4967   0028BE  6E30               	movwf	___fltol@sign1^0,c
  4968   0028C0  8E2A               	bsf	(___fltol@f1+2)^0,7,c
  4969   0028C2  0EFF               	movlw	255
  4970   0028C4  1628               	andwf	___fltol@f1^0,f,c
  4971   0028C6  0EFF               	movlw	255
  4972   0028C8  1629               	andwf	(___fltol@f1+1)^0,f,c
  4973   0028CA  0EFF               	movlw	255
  4974   0028CC  162A               	andwf	(___fltol@f1+2)^0,f,c
  4975   0028CE  0E00               	movlw	0
  4976   0028D0  162B               	andwf	(___fltol@f1+3)^0,f,c
  4977   0028D2  0E96               	movlw	150
  4978   0028D4  5E31               	subwf	___fltol@exp1^0,f,c
  4979   0028D6  BE31               	btfsc	___fltol@exp1^0,7,c
  4980   0028D8  EF72  F014         	goto	u3000
  4981   0028DC  EF70  F014         	goto	u3001
  4982   0028E0                     u3001:
  4983   0028E0  EF88  F014         	goto	l4005
  4984   0028E4                     u3000:
  4985   0028E4  5031               	movf	___fltol@exp1^0,w,c
  4986   0028E6  0A80               	xorlw	128
  4987   0028E8  0F97               	addlw	151
  4988   0028EA  B0D8               	btfsc	status,0,c
  4989   0028EC  EF7A  F014         	goto	u3011
  4990   0028F0  EF7C  F014         	goto	u3010
  4991   0028F4                     u3011:
  4992   0028F4  EF7E  F014         	goto	l4001
  4993   0028F8                     u3010:
  4994   0028F8  EF41  F014         	goto	l3981
  4995   0028FC                     l4001:
  4996   0028FC  90D8               	bcf	status,0,c
  4997   0028FE  322B               	rrcf	(___fltol@f1+3)^0,f,c
  4998   002900  322A               	rrcf	(___fltol@f1+2)^0,f,c
  4999   002902  3229               	rrcf	(___fltol@f1+1)^0,f,c
  5000   002904  3228               	rrcf	___fltol@f1^0,f,c
  5001   002906  3E31               	incfsz	___fltol@exp1^0,f,c
  5002   002908  EF7E  F014         	goto	l4001
  5003   00290C  EFA0  F014         	goto	l4015
  5004   002910                     l4005:
  5005   002910  0E1F               	movlw	31
  5006   002912  6431               	cpfsgt	___fltol@exp1^0,c
  5007   002914  EF8E  F014         	goto	u3021
  5008   002918  EF90  F014         	goto	u3020
  5009   00291C                     u3021:
  5010   00291C  EF98  F014         	goto	l4013
  5011   002920                     u3020:
  5012   002920  EF41  F014         	goto	l3981
  5013   002924                     l4011:
  5014   002924  90D8               	bcf	status,0,c
  5015   002926  3628               	rlcf	___fltol@f1^0,f,c
  5016   002928  3629               	rlcf	(___fltol@f1+1)^0,f,c
  5017   00292A  362A               	rlcf	(___fltol@f1+2)^0,f,c
  5018   00292C  362B               	rlcf	(___fltol@f1+3)^0,f,c
  5019   00292E  0631               	decf	___fltol@exp1^0,f,c
  5020   002930                     l4013:
  5021   002930  5031               	movf	___fltol@exp1^0,w,c
  5022   002932  A4D8               	btfss	status,2,c
  5023   002934  EF9E  F014         	goto	u3031
  5024   002938  EFA0  F014         	goto	u3030
  5025   00293C                     u3031:
  5026   00293C  EF92  F014         	goto	l4011
  5027   002940                     u3030:
  5028   002940                     l4015:
  5029   002940  5030               	movf	___fltol@sign1^0,w,c
  5030   002942  B4D8               	btfsc	status,2,c
  5031   002944  EFA6  F014         	goto	u3041
  5032   002948  EFA8  F014         	goto	u3040
  5033   00294C                     u3041:
  5034   00294C  EFB0  F014         	goto	l4019
  5035   002950                     u3040:
  5036   002950  1E2B               	comf	(___fltol@f1+3)^0,f,c
  5037   002952  1E2A               	comf	(___fltol@f1+2)^0,f,c
  5038   002954  1E29               	comf	(___fltol@f1+1)^0,f,c
  5039   002956  6C28               	negf	___fltol@f1^0,c
  5040   002958  0E00               	movlw	0
  5041   00295A  2229               	addwfc	(___fltol@f1+1)^0,f,c
  5042   00295C  222A               	addwfc	(___fltol@f1+2)^0,f,c
  5043   00295E  222B               	addwfc	(___fltol@f1+3)^0,f,c
  5044   002960                     l4019:
  5045   002960  C028  F028         	movff	___fltol@f1,?___fltol
  5046   002964  C029  F029         	movff	___fltol@f1+1,?___fltol+1
  5047   002968  C02A  F02A         	movff	___fltol@f1+2,?___fltol+2
  5048   00296C  C02B  F02B         	movff	___fltol@f1+3,?___fltol+3
  5049   002970                     l1051:
  5050   002970  0012               	return		;funcret
  5051   002972                     __end_of___fltol:
  5052                           	callstack 0
  5053                           
  5054 ;; *************** function ___flmul *****************
  5055 ;; Defined at:
  5056 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  b               4   14[COMRAM] long 
  5059 ;;  a               4   18[COMRAM] long 
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  prod            4   33[COMRAM] struct .
  5062 ;;  grs             4   27[COMRAM] unsigned long 
  5063 ;;  temp            2   37[COMRAM] struct .
  5064 ;;  bexp            1   32[COMRAM] unsigned char 
  5065 ;;  aexp            1   31[COMRAM] unsigned char 
  5066 ;;  sign            1   26[COMRAM] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  4   14[COMRAM] unsigned char 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0, prodl, prodh
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5076 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5077 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5078 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5079 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5080 ;;Total ram usage:       25 bytes
  5081 ;; Hardware stack levels used: 1
  5082 ;; Hardware stack levels required when called: 1
  5083 ;; This function calls:
  5084 ;;		Nothing
  5085 ;; This function is called by:
  5086 ;;		_scale_RGB
  5087 ;;		_stop
  5088 ;;		_turnLeft
  5089 ;;		_turnRight
  5090 ;;		_fullSpeedAhead
  5091 ;;		_fullSpeedReverse
  5092 ;;		_turnLeft90
  5093 ;;		_turnRight90
  5094 ;;		_turnLeft135
  5095 ;;		_turnRight135
  5096 ;;		_UTurn
  5097 ;;		_headbuttReverse
  5098 ;;		_squareReverse
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text29
  5103   00194A                     __ptext29:
  5104                           	callstack 0
  5105   00194A                     ___flmul:
  5106                           	callstack 27
  5107   00194A  5012               	movf	(___flmul@b+3)^0,w,c
  5108   00194C  0B80               	andlw	128
  5109   00194E  6E1B               	movwf	___flmul@sign^0,c
  5110   001950  5012               	movf	(___flmul@b+3)^0,w,c
  5111   001952  2412               	addwf	(___flmul@b+3)^0,w,c
  5112   001954  6E21               	movwf	___flmul@bexp^0,c
  5113   001956  AE11               	btfss	(___flmul@b+2)^0,7,c
  5114   001958  EFB0  F00C         	goto	u2791
  5115   00195C  EFB2  F00C         	goto	u2790
  5116   001960                     u2791:
  5117   001960  EFB3  F00C         	goto	l3855
  5118   001964                     u2790:
  5119   001964  8021               	bsf	___flmul@bexp^0,0,c
  5120   001966                     l3855:
  5121   001966  5021               	movf	___flmul@bexp^0,w,c
  5122   001968  B4D8               	btfsc	status,2,c
  5123   00196A  EFB9  F00C         	goto	u2801
  5124   00196E  EFBB  F00C         	goto	u2800
  5125   001972                     u2801:
  5126   001972  EFCE  F00C         	goto	l3863
  5127   001976                     u2800:
  5128   001976  2821               	incf	___flmul@bexp^0,w,c
  5129   001978  A4D8               	btfss	status,2,c
  5130   00197A  EFC1  F00C         	goto	u2811
  5131   00197E  EFC3  F00C         	goto	u2810
  5132   001982                     u2811:
  5133   001982  EFCB  F00C         	goto	l3861
  5134   001986                     u2810:
  5135   001986  0E00               	movlw	0
  5136   001988  6E0F               	movwf	___flmul@b^0,c
  5137   00198A  0E00               	movlw	0
  5138   00198C  6E10               	movwf	(___flmul@b+1)^0,c
  5139   00198E  0E00               	movlw	0
  5140   001990  6E11               	movwf	(___flmul@b+2)^0,c
  5141   001992  0E00               	movlw	0
  5142   001994  6E12               	movwf	(___flmul@b+3)^0,c
  5143   001996                     l3861:
  5144   001996  8E11               	bsf	(___flmul@b+2)^0,7,c
  5145   001998  EFD6  F00C         	goto	l3865
  5146   00199C                     l3863:
  5147   00199C  0E00               	movlw	0
  5148   00199E  6E0F               	movwf	___flmul@b^0,c
  5149   0019A0  0E00               	movlw	0
  5150   0019A2  6E10               	movwf	(___flmul@b+1)^0,c
  5151   0019A4  0E00               	movlw	0
  5152   0019A6  6E11               	movwf	(___flmul@b+2)^0,c
  5153   0019A8  0E00               	movlw	0
  5154   0019AA  6E12               	movwf	(___flmul@b+3)^0,c
  5155   0019AC                     l3865:
  5156   0019AC  5016               	movf	(___flmul@a+3)^0,w,c
  5157   0019AE  0B80               	andlw	128
  5158   0019B0  1A1B               	xorwf	___flmul@sign^0,f,c
  5159   0019B2  5016               	movf	(___flmul@a+3)^0,w,c
  5160   0019B4  2416               	addwf	(___flmul@a+3)^0,w,c
  5161   0019B6  6E20               	movwf	___flmul@aexp^0,c
  5162   0019B8  AE15               	btfss	(___flmul@a+2)^0,7,c
  5163   0019BA  EFE1  F00C         	goto	u2821
  5164   0019BE  EFE3  F00C         	goto	u2820
  5165   0019C2                     u2821:
  5166   0019C2  EFE4  F00C         	goto	l3873
  5167   0019C6                     u2820:
  5168   0019C6  8020               	bsf	___flmul@aexp^0,0,c
  5169   0019C8                     l3873:
  5170   0019C8  5020               	movf	___flmul@aexp^0,w,c
  5171   0019CA  B4D8               	btfsc	status,2,c
  5172   0019CC  EFEA  F00C         	goto	u2831
  5173   0019D0  EFEC  F00C         	goto	u2830
  5174   0019D4                     u2831:
  5175   0019D4  EFFF  F00C         	goto	l3881
  5176   0019D8                     u2830:
  5177   0019D8  2820               	incf	___flmul@aexp^0,w,c
  5178   0019DA  A4D8               	btfss	status,2,c
  5179   0019DC  EFF2  F00C         	goto	u2841
  5180   0019E0  EFF4  F00C         	goto	u2840
  5181   0019E4                     u2841:
  5182   0019E4  EFFC  F00C         	goto	l3879
  5183   0019E8                     u2840:
  5184   0019E8  0E00               	movlw	0
  5185   0019EA  6E13               	movwf	___flmul@a^0,c
  5186   0019EC  0E00               	movlw	0
  5187   0019EE  6E14               	movwf	(___flmul@a+1)^0,c
  5188   0019F0  0E00               	movlw	0
  5189   0019F2  6E15               	movwf	(___flmul@a+2)^0,c
  5190   0019F4  0E00               	movlw	0
  5191   0019F6  6E16               	movwf	(___flmul@a+3)^0,c
  5192   0019F8                     l3879:
  5193   0019F8  8E15               	bsf	(___flmul@a+2)^0,7,c
  5194   0019FA  EF07  F00D         	goto	l1368
  5195   0019FE                     l3881:
  5196   0019FE  0E00               	movlw	0
  5197   001A00  6E13               	movwf	___flmul@a^0,c
  5198   001A02  0E00               	movlw	0
  5199   001A04  6E14               	movwf	(___flmul@a+1)^0,c
  5200   001A06  0E00               	movlw	0
  5201   001A08  6E15               	movwf	(___flmul@a+2)^0,c
  5202   001A0A  0E00               	movlw	0
  5203   001A0C  6E16               	movwf	(___flmul@a+3)^0,c
  5204   001A0E                     l1368:
  5205   001A0E  5020               	movf	___flmul@aexp^0,w,c
  5206   001A10  B4D8               	btfsc	status,2,c
  5207   001A12  EF0D  F00D         	goto	u2851
  5208   001A16  EF0F  F00D         	goto	u2850
  5209   001A1A                     u2851:
  5210   001A1A  EF17  F00D         	goto	l3885
  5211   001A1E                     u2850:
  5212   001A1E  5021               	movf	___flmul@bexp^0,w,c
  5213   001A20  A4D8               	btfss	status,2,c
  5214   001A22  EF15  F00D         	goto	u2861
  5215   001A26  EF17  F00D         	goto	u2860
  5216   001A2A                     u2861:
  5217   001A2A  EF21  F00D         	goto	l3889
  5218   001A2E                     u2860:
  5219   001A2E                     l3885:
  5220   001A2E  0E00               	movlw	0
  5221   001A30  6E0F               	movwf	?___flmul^0,c
  5222   001A32  0E00               	movlw	0
  5223   001A34  6E10               	movwf	(?___flmul+1)^0,c
  5224   001A36  0E00               	movlw	0
  5225   001A38  6E11               	movwf	(?___flmul+2)^0,c
  5226   001A3A  0E00               	movlw	0
  5227   001A3C  6E12               	movwf	(?___flmul+3)^0,c
  5228   001A3E  EFB9  F00E         	goto	l1372
  5229   001A42                     l3889:
  5230   001A42  5015               	movf	(___flmul@a+2)^0,w,c
  5231   001A44  020F               	mulwf	___flmul@b^0,c
  5232   001A46  CFF3 F026          	movff	prodl,___flmul@temp
  5233   001A4A  CFF4 F027          	movff	prodh,___flmul@temp+1
  5234   001A4E  5026               	movf	___flmul@temp^0,w,c
  5235   001A50  6E1C               	movwf	___flmul@grs^0,c
  5236   001A52  6A1D               	clrf	(___flmul@grs+1)^0,c
  5237   001A54  6A1E               	clrf	(___flmul@grs+2)^0,c
  5238   001A56  6A1F               	clrf	(___flmul@grs+3)^0,c
  5239   001A58  5027               	movf	(___flmul@temp+1)^0,w,c
  5240   001A5A  6E22               	movwf	___flmul@prod^0,c
  5241   001A5C  6A23               	clrf	(___flmul@prod+1)^0,c
  5242   001A5E  6A24               	clrf	(___flmul@prod+2)^0,c
  5243   001A60  6A25               	clrf	(___flmul@prod+3)^0,c
  5244   001A62  5014               	movf	(___flmul@a+1)^0,w,c
  5245   001A64  0210               	mulwf	(___flmul@b+1)^0,c
  5246   001A66  CFF3 F026          	movff	prodl,___flmul@temp
  5247   001A6A  CFF4 F027          	movff	prodh,___flmul@temp+1
  5248   001A6E  5026               	movf	___flmul@temp^0,w,c
  5249   001A70  261C               	addwf	___flmul@grs^0,f,c
  5250   001A72  0E00               	movlw	0
  5251   001A74  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5252   001A76  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5253   001A78  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5254   001A7A  5027               	movf	(___flmul@temp+1)^0,w,c
  5255   001A7C  2622               	addwf	___flmul@prod^0,f,c
  5256   001A7E  0E00               	movlw	0
  5257   001A80  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5258   001A82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5259   001A84  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5260   001A86  5013               	movf	___flmul@a^0,w,c
  5261   001A88  0211               	mulwf	(___flmul@b+2)^0,c
  5262   001A8A  CFF3 F026          	movff	prodl,___flmul@temp
  5263   001A8E  CFF4 F027          	movff	prodh,___flmul@temp+1
  5264   001A92  5026               	movf	___flmul@temp^0,w,c
  5265   001A94  261C               	addwf	___flmul@grs^0,f,c
  5266   001A96  0E00               	movlw	0
  5267   001A98  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5268   001A9A  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5269   001A9C  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5270   001A9E  5027               	movf	(___flmul@temp+1)^0,w,c
  5271   001AA0  2622               	addwf	___flmul@prod^0,f,c
  5272   001AA2  0E00               	movlw	0
  5273   001AA4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5274   001AA6  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5275   001AA8  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5276   001AAA  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  5277   001AAE  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  5278   001AB2  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  5279   001AB6  6A1C               	clrf	___flmul@grs^0,c
  5280   001AB8  5013               	movf	___flmul@a^0,w,c
  5281   001ABA  0210               	mulwf	(___flmul@b+1)^0,c
  5282   001ABC  CFF3 F026          	movff	prodl,___flmul@temp
  5283   001AC0  CFF4 F027          	movff	prodh,___flmul@temp+1
  5284   001AC4  5026               	movf	___flmul@temp^0,w,c
  5285   001AC6  261C               	addwf	___flmul@grs^0,f,c
  5286   001AC8  5027               	movf	(___flmul@temp+1)^0,w,c
  5287   001ACA  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5288   001ACC  0E00               	movlw	0
  5289   001ACE  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5290   001AD0  0E00               	movlw	0
  5291   001AD2  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5292   001AD4  5014               	movf	(___flmul@a+1)^0,w,c
  5293   001AD6  020F               	mulwf	___flmul@b^0,c
  5294   001AD8  CFF3 F026          	movff	prodl,___flmul@temp
  5295   001ADC  CFF4 F027          	movff	prodh,___flmul@temp+1
  5296   001AE0  5026               	movf	___flmul@temp^0,w,c
  5297   001AE2  261C               	addwf	___flmul@grs^0,f,c
  5298   001AE4  5027               	movf	(___flmul@temp+1)^0,w,c
  5299   001AE6  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5300   001AE8  0E00               	movlw	0
  5301   001AEA  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5302   001AEC  0E00               	movlw	0
  5303   001AEE  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5304   001AF0  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  5305   001AF4  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  5306   001AF8  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  5307   001AFC  6A1C               	clrf	___flmul@grs^0,c
  5308   001AFE  5013               	movf	___flmul@a^0,w,c
  5309   001B00  020F               	mulwf	___flmul@b^0,c
  5310   001B02  CFF3 F026          	movff	prodl,___flmul@temp
  5311   001B06  CFF4 F027          	movff	prodh,___flmul@temp+1
  5312   001B0A  5026               	movf	___flmul@temp^0,w,c
  5313   001B0C  261C               	addwf	___flmul@grs^0,f,c
  5314   001B0E  5027               	movf	(___flmul@temp+1)^0,w,c
  5315   001B10  221D               	addwfc	(___flmul@grs+1)^0,f,c
  5316   001B12  0E00               	movlw	0
  5317   001B14  221E               	addwfc	(___flmul@grs+2)^0,f,c
  5318   001B16  0E00               	movlw	0
  5319   001B18  221F               	addwfc	(___flmul@grs+3)^0,f,c
  5320   001B1A  5015               	movf	(___flmul@a+2)^0,w,c
  5321   001B1C  0210               	mulwf	(___flmul@b+1)^0,c
  5322   001B1E  CFF3 F026          	movff	prodl,___flmul@temp
  5323   001B22  CFF4 F027          	movff	prodh,___flmul@temp+1
  5324   001B26  5026               	movf	___flmul@temp^0,w,c
  5325   001B28  2622               	addwf	___flmul@prod^0,f,c
  5326   001B2A  5027               	movf	(___flmul@temp+1)^0,w,c
  5327   001B2C  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5328   001B2E  0E00               	movlw	0
  5329   001B30  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5330   001B32  0E00               	movlw	0
  5331   001B34  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5332   001B36  5014               	movf	(___flmul@a+1)^0,w,c
  5333   001B38  0211               	mulwf	(___flmul@b+2)^0,c
  5334   001B3A  CFF3 F026          	movff	prodl,___flmul@temp
  5335   001B3E  CFF4 F027          	movff	prodh,___flmul@temp+1
  5336   001B42  5026               	movf	___flmul@temp^0,w,c
  5337   001B44  2622               	addwf	___flmul@prod^0,f,c
  5338   001B46  5027               	movf	(___flmul@temp+1)^0,w,c
  5339   001B48  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5340   001B4A  0E00               	movlw	0
  5341   001B4C  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5342   001B4E  0E00               	movlw	0
  5343   001B50  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5344   001B52  5015               	movf	(___flmul@a+2)^0,w,c
  5345   001B54  0211               	mulwf	(___flmul@b+2)^0,c
  5346   001B56  CFF3 F026          	movff	prodl,___flmul@temp
  5347   001B5A  CFF4 F027          	movff	prodh,___flmul@temp+1
  5348   001B5E  5026               	movf	___flmul@temp^0,w,c
  5349   001B60  6E17               	movwf	??___flmul^0,c
  5350   001B62  5027               	movf	(___flmul@temp+1)^0,w,c
  5351   001B64  6E18               	movwf	(??___flmul+1)^0,c
  5352   001B66  6A19               	clrf	(??___flmul+2)^0,c
  5353   001B68  6A1A               	clrf	(??___flmul+3)^0,c
  5354   001B6A  C019  F01A         	movff	??___flmul+2,??___flmul+3
  5355   001B6E  C018  F019         	movff	??___flmul+1,??___flmul+2
  5356   001B72  C017  F018         	movff	??___flmul,??___flmul+1
  5357   001B76  6A17               	clrf	??___flmul^0,c
  5358   001B78  5017               	movf	??___flmul^0,w,c
  5359   001B7A  2622               	addwf	___flmul@prod^0,f,c
  5360   001B7C  5018               	movf	(??___flmul+1)^0,w,c
  5361   001B7E  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5362   001B80  5019               	movf	(??___flmul+2)^0,w,c
  5363   001B82  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5364   001B84  501A               	movf	(??___flmul+3)^0,w,c
  5365   001B86  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5366   001B88  C01C  F017         	movff	___flmul@grs,??___flmul
  5367   001B8C  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  5368   001B90  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  5369   001B94  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  5370   001B98  0E19               	movlw	25
  5371   001B9A  EFD4  F00D         	goto	u2870
  5372   001B9E                     u2875:
  5373   001B9E  90D8               	bcf	status,0,c
  5374   001BA0  321A               	rrcf	(??___flmul+3)^0,f,c
  5375   001BA2  3219               	rrcf	(??___flmul+2)^0,f,c
  5376   001BA4  3218               	rrcf	(??___flmul+1)^0,f,c
  5377   001BA6  3217               	rrcf	??___flmul^0,f,c
  5378   001BA8                     u2870:
  5379   001BA8  2EE8               	decfsz	wreg,f,c
  5380   001BAA  EFCF  F00D         	goto	u2875
  5381   001BAE  5017               	movf	??___flmul^0,w,c
  5382   001BB0  2622               	addwf	___flmul@prod^0,f,c
  5383   001BB2  5018               	movf	(??___flmul+1)^0,w,c
  5384   001BB4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5385   001BB6  5019               	movf	(??___flmul+2)^0,w,c
  5386   001BB8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5387   001BBA  501A               	movf	(??___flmul+3)^0,w,c
  5388   001BBC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5389   001BBE  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  5390   001BC2  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  5391   001BC6  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  5392   001BCA  6A1C               	clrf	___flmul@grs^0,c
  5393   001BCC  5020               	movf	___flmul@aexp^0,w,c
  5394   001BCE  C021  F017         	movff	___flmul@bexp,??___flmul
  5395   001BD2  6A18               	clrf	(??___flmul+1)^0,c
  5396   001BD4  2617               	addwf	??___flmul^0,f,c
  5397   001BD6  0E00               	movlw	0
  5398   001BD8  2218               	addwfc	(??___flmul+1)^0,f,c
  5399   001BDA  0E82               	movlw	130
  5400   001BDC  2417               	addwf	??___flmul^0,w,c
  5401   001BDE  6E26               	movwf	___flmul@temp^0,c
  5402   001BE0  0EFF               	movlw	255
  5403   001BE2  2018               	addwfc	(??___flmul+1)^0,w,c
  5404   001BE4  6E27               	movwf	(___flmul@temp+1)^0,c
  5405   001BE6  EF0A  F00E         	goto	l3937
  5406   001BEA                     l3931:
  5407   001BEA  90D8               	bcf	status,0,c
  5408   001BEC  3622               	rlcf	___flmul@prod^0,f,c
  5409   001BEE  3623               	rlcf	(___flmul@prod+1)^0,f,c
  5410   001BF0  3624               	rlcf	(___flmul@prod+2)^0,f,c
  5411   001BF2  3625               	rlcf	(___flmul@prod+3)^0,f,c
  5412   001BF4  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  5413   001BF6  EFFF  F00D         	goto	u2881
  5414   001BFA  EF01  F00E         	goto	u2880
  5415   001BFE                     u2881:
  5416   001BFE  EF02  F00E         	goto	l1375
  5417   001C02                     u2880:
  5418   001C02  8022               	bsf	___flmul@prod^0,0,c
  5419   001C04                     l1375:
  5420   001C04  90D8               	bcf	status,0,c
  5421   001C06  361C               	rlcf	___flmul@grs^0,f,c
  5422   001C08  361D               	rlcf	(___flmul@grs+1)^0,f,c
  5423   001C0A  361E               	rlcf	(___flmul@grs+2)^0,f,c
  5424   001C0C  361F               	rlcf	(___flmul@grs+3)^0,f,c
  5425   001C0E  0626               	decf	___flmul@temp^0,f,c
  5426   001C10  A0D8               	btfss	status,0,c
  5427   001C12  0627               	decf	(___flmul@temp+1)^0,f,c
  5428   001C14                     l3937:
  5429   001C14  AE24               	btfss	(___flmul@prod+2)^0,7,c
  5430   001C16  EF0F  F00E         	goto	u2891
  5431   001C1A  EF11  F00E         	goto	u2890
  5432   001C1E                     u2891:
  5433   001C1E  EFF5  F00D         	goto	l3931
  5434   001C22                     u2890:
  5435   001C22  0E00               	movlw	0
  5436   001C24  6E20               	movwf	___flmul@aexp^0,c
  5437   001C26  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  5438   001C28  EF18  F00E         	goto	u2901
  5439   001C2C  EF1A  F00E         	goto	u2900
  5440   001C30                     u2901:
  5441   001C30  EF3E  F00E         	goto	l1377
  5442   001C34                     u2900:
  5443   001C34  0EFF               	movlw	255
  5444   001C36  141C               	andwf	___flmul@grs^0,w,c
  5445   001C38  6E17               	movwf	??___flmul^0,c
  5446   001C3A  0EFF               	movlw	255
  5447   001C3C  141D               	andwf	(___flmul@grs+1)^0,w,c
  5448   001C3E  6E18               	movwf	(??___flmul+1)^0,c
  5449   001C40  0EFF               	movlw	255
  5450   001C42  141E               	andwf	(___flmul@grs+2)^0,w,c
  5451   001C44  6E19               	movwf	(??___flmul+2)^0,c
  5452   001C46  0E7F               	movlw	127
  5453   001C48  141F               	andwf	(___flmul@grs+3)^0,w,c
  5454   001C4A  6E1A               	movwf	(??___flmul+3)^0,c
  5455   001C4C  5017               	movf	??___flmul^0,w,c
  5456   001C4E  1018               	iorwf	(??___flmul+1)^0,w,c
  5457   001C50  1019               	iorwf	(??___flmul+2)^0,w,c
  5458   001C52  101A               	iorwf	(??___flmul+3)^0,w,c
  5459   001C54  B4D8               	btfsc	status,2,c
  5460   001C56  EF2F  F00E         	goto	u2911
  5461   001C5A  EF31  F00E         	goto	u2910
  5462   001C5E                     u2911:
  5463   001C5E  EF35  F00E         	goto	l1378
  5464   001C62                     u2910:
  5465   001C62                     l3945:
  5466   001C62  0E01               	movlw	1
  5467   001C64  6E20               	movwf	___flmul@aexp^0,c
  5468   001C66  EF3E  F00E         	goto	l1377
  5469   001C6A                     l1378:
  5470   001C6A  A022               	btfss	___flmul@prod^0,0,c
  5471   001C6C  EF3A  F00E         	goto	u2921
  5472   001C70  EF3C  F00E         	goto	u2920
  5473   001C74                     u2921:
  5474   001C74  EF3E  F00E         	goto	l1377
  5475   001C78                     u2920:
  5476   001C78  EF31  F00E         	goto	l3945
  5477   001C7C                     l1377:
  5478   001C7C  5020               	movf	___flmul@aexp^0,w,c
  5479   001C7E  B4D8               	btfsc	status,2,c
  5480   001C80  EF44  F00E         	goto	u2931
  5481   001C84  EF46  F00E         	goto	u2930
  5482   001C88                     u2931:
  5483   001C88  EF6A  F00E         	goto	l3957
  5484   001C8C                     u2930:
  5485   001C8C  0E01               	movlw	1
  5486   001C8E  2622               	addwf	___flmul@prod^0,f,c
  5487   001C90  0E00               	movlw	0
  5488   001C92  2223               	addwfc	(___flmul@prod+1)^0,f,c
  5489   001C94  2224               	addwfc	(___flmul@prod+2)^0,f,c
  5490   001C96  2225               	addwfc	(___flmul@prod+3)^0,f,c
  5491   001C98  A025               	btfss	(___flmul@prod+3)^0,0,c
  5492   001C9A  EF51  F00E         	goto	u2941
  5493   001C9E  EF53  F00E         	goto	u2940
  5494   001CA2                     u2941:
  5495   001CA2  EF6A  F00E         	goto	l3957
  5496   001CA6                     u2940:
  5497   001CA6  C022  F017         	movff	___flmul@prod,??___flmul
  5498   001CAA  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  5499   001CAE  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  5500   001CB2  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  5501   001CB6  341A               	rlcf	(??___flmul+3)^0,w,c
  5502   001CB8  321A               	rrcf	(??___flmul+3)^0,f,c
  5503   001CBA  3219               	rrcf	(??___flmul+2)^0,f,c
  5504   001CBC  3218               	rrcf	(??___flmul+1)^0,f,c
  5505   001CBE  3217               	rrcf	??___flmul^0,f,c
  5506   001CC0  C017  F022         	movff	??___flmul,___flmul@prod
  5507   001CC4  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  5508   001CC8  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  5509   001CCC  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  5510   001CD0  4A26               	infsnz	___flmul@temp^0,f,c
  5511   001CD2  2A27               	incf	(___flmul@temp+1)^0,f,c
  5512   001CD4                     l3957:
  5513   001CD4  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  5514   001CD6  EF75  F00E         	goto	u2951
  5515   001CDA  5027               	movf	(___flmul@temp+1)^0,w,c
  5516   001CDC  E108               	bnz	u2950
  5517   001CDE  2826               	incf	___flmul@temp^0,w,c
  5518   001CE0  A0D8               	btfss	status,0,c
  5519   001CE2  EF75  F00E         	goto	u2951
  5520   001CE6  EF77  F00E         	goto	u2950
  5521   001CEA                     u2951:
  5522   001CEA  EF81  F00E         	goto	l3961
  5523   001CEE                     u2950:
  5524   001CEE  0E00               	movlw	0
  5525   001CF0  6E22               	movwf	___flmul@prod^0,c
  5526   001CF2  0E00               	movlw	0
  5527   001CF4  6E23               	movwf	(___flmul@prod+1)^0,c
  5528   001CF6  0E80               	movlw	128
  5529   001CF8  6E24               	movwf	(___flmul@prod+2)^0,c
  5530   001CFA  0E7F               	movlw	127
  5531   001CFC  6E25               	movwf	(___flmul@prod+3)^0,c
  5532   001CFE  EFAF  F00E         	goto	l3973
  5533   001D02                     l3961:
  5534   001D02  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  5535   001D04  EF8E  F00E         	goto	u2960
  5536   001D08  5027               	movf	(___flmul@temp+1)^0,w,c
  5537   001D0A  E106               	bnz	u2961
  5538   001D0C  0426               	decf	___flmul@temp^0,w,c
  5539   001D0E  B0D8               	btfsc	status,0,c
  5540   001D10  EF8C  F00E         	goto	u2961
  5541   001D14  EF8E  F00E         	goto	u2960
  5542   001D18                     u2961:
  5543   001D18  EF9A  F00E         	goto	l1385
  5544   001D1C                     u2960:
  5545   001D1C  0E00               	movlw	0
  5546   001D1E  6E22               	movwf	___flmul@prod^0,c
  5547   001D20  0E00               	movlw	0
  5548   001D22  6E23               	movwf	(___flmul@prod+1)^0,c
  5549   001D24  0E00               	movlw	0
  5550   001D26  6E24               	movwf	(___flmul@prod+2)^0,c
  5551   001D28  0E00               	movlw	0
  5552   001D2A  6E25               	movwf	(___flmul@prod+3)^0,c
  5553   001D2C  0E00               	movlw	0
  5554   001D2E  6E1B               	movwf	___flmul@sign^0,c
  5555   001D30  EFAF  F00E         	goto	l3973
  5556   001D34                     l1385:
  5557   001D34  C026  F021         	movff	___flmul@temp,___flmul@bexp
  5558   001D38  0EFF               	movlw	255
  5559   001D3A  1622               	andwf	___flmul@prod^0,f,c
  5560   001D3C  0EFF               	movlw	255
  5561   001D3E  1623               	andwf	(___flmul@prod+1)^0,f,c
  5562   001D40  0E7F               	movlw	127
  5563   001D42  1624               	andwf	(___flmul@prod+2)^0,f,c
  5564   001D44  0E00               	movlw	0
  5565   001D46  1625               	andwf	(___flmul@prod+3)^0,f,c
  5566   001D48  A021               	btfss	___flmul@bexp^0,0,c
  5567   001D4A  EFA9  F00E         	goto	u2971
  5568   001D4E  EFAB  F00E         	goto	u2970
  5569   001D52                     u2971:
  5570   001D52  EFAC  F00E         	goto	l3971
  5571   001D56                     u2970:
  5572   001D56  8E24               	bsf	(___flmul@prod+2)^0,7,c
  5573   001D58                     l3971:
  5574   001D58  90D8               	bcf	status,0,c
  5575   001D5A  3021               	rrcf	___flmul@bexp^0,w,c
  5576   001D5C  6E25               	movwf	(___flmul@prod+3)^0,c
  5577   001D5E                     l3973:
  5578   001D5E  501B               	movf	___flmul@sign^0,w,c
  5579   001D60  1225               	iorwf	(___flmul@prod+3)^0,f,c
  5580   001D62  C022  F00F         	movff	___flmul@prod,?___flmul
  5581   001D66  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  5582   001D6A  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  5583   001D6E  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  5584   001D72                     l1372:
  5585   001D72  0012               	return		;funcret
  5586   001D74                     __end_of___flmul:
  5587                           	callstack 0
  5588                           
  5589 ;; *************** function _read_timer *****************
  5590 ;; Defined at:
  5591 ;;		line 46 in file "timers.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  tH              1    0[COMRAM] PTR unsigned char 
  5594 ;;		 -> forward_navigation@timerH(1), 
  5595 ;;  tL              1    1[COMRAM] PTR unsigned char 
  5596 ;;		 -> forward_navigation@timerL(1), 
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;		None
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  1    wreg      void 
  5601 ;; Registers used:
  5602 ;;		wreg, fsr2l, fsr2h, status,2
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5611 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5612 ;;Total ram usage:        2 bytes
  5613 ;; Hardware stack levels used: 1
  5614 ;; Hardware stack levels required when called: 1
  5615 ;; This function calls:
  5616 ;;		Nothing
  5617 ;; This function is called by:
  5618 ;;		_forward_navigation
  5619 ;; This function uses a non-reentrant model
  5620 ;;
  5621                           
  5622                           	psect	text30
  5623   004204                     __ptext30:
  5624                           	callstack 0
  5625   004204                     _read_timer:
  5626                           	callstack 28
  5627   004204                     
  5628                           ;timers.c: 46: void read_timer(unsigned char *tH, unsigned char *tL);timers.c: 47: {;tim
      +                          ers.c: 51:     *tL = TMR0L;
  5629   004204  5002               	movf	read_timer@tL^0,w,c
  5630   004206  6ED9               	movwf	fsr2l,c
  5631   004208  6ADA               	clrf	fsr2h,c
  5632   00420A  CFD3 FFDF          	movff	4051,indf2	;volatile
  5633                           
  5634                           ;timers.c: 52:     *tH = TMR0H;
  5635   00420E  5001               	movf	read_timer@tH^0,w,c
  5636   004210  6ED9               	movwf	fsr2l,c
  5637   004212  6ADA               	clrf	fsr2h,c
  5638   004214  CFD4 FFDF          	movff	4052,indf2	;volatile
  5639   004218  0012               	return		;funcret
  5640   00421A                     __end_of_read_timer:
  5641                           	callstack 0
  5642                           
  5643 ;; *************** function _pick_card *****************
  5644 ;; Defined at:
  5645 ;;		line 141 in file "manoeuvres.c"
  5646 ;; Parameters:    Size  Location     Type
  5647 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  5648 ;;		 -> main@motorL(9), 
  5649 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  5650 ;;		 -> main@motorR(9), 
  5651 ;;  backtrack       1   34[COMRAM] unsigned char 
  5652 ;;  key             1   35[COMRAM] unsigned char 
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;		None
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5664 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5666 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5667 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5668 ;;Total ram usage:        6 bytes
  5669 ;; Hardware stack levels used: 1
  5670 ;; Hardware stack levels required when called: 6
  5671 ;; This function calls:
  5672 ;;		_card_blue
  5673 ;;		_card_cyan
  5674 ;;		_card_green
  5675 ;;		_card_orange
  5676 ;;		_card_pink
  5677 ;;		_card_red
  5678 ;;		_card_white
  5679 ;;		_card_yellow
  5680 ;; This function is called by:
  5681 ;;		_forward_navigation
  5682 ;;		_return_to_sender
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text31
  5687   002972                     __ptext31:
  5688                           	callstack 0
  5689   002972                     _pick_card:
  5690                           	callstack 23
  5691   002972                     
  5692                           ;manoeuvres.c: 141: void pick_card(DC_motor *mL, DC_motor *mR, unsigned char backtrack, 
      +                          unsigned char key);manoeuvres.c: 142: {;manoeuvres.c: 143:     switch (key) {
  5693   002972  EF09  F015         	goto	l4397
  5694   002976                     l4379:
  5695                           
  5696                           ;manoeuvres.c: 145:             card_red(mL, mR, backtrack);
  5697   002976  C021  F01C         	movff	pick_card@mL,card_red@mL
  5698   00297A  C022  F01D         	movff	pick_card@mR,card_red@mR
  5699   00297E  C023  F01E         	movff	pick_card@backtrack,card_red@backtrack
  5700   002982  EC77  F01B         	call	_card_red	;wreg free
  5701                           
  5702                           ;manoeuvres.c: 146:             break;
  5703   002986  EF36  F015         	goto	l596
  5704   00298A                     l4381:
  5705                           
  5706                           ;manoeuvres.c: 148:             card_green(mL, mR, backtrack);
  5707   00298A  C021  F01C         	movff	pick_card@mL,card_green@mL
  5708   00298E  C022  F01D         	movff	pick_card@mR,card_green@mR
  5709   002992  C023  F01E         	movff	pick_card@backtrack,card_green@backtrack
  5710   002996  ECDF  F01B         	call	_card_green	;wreg free
  5711                           
  5712                           ;manoeuvres.c: 149:             break;
  5713   00299A  EF36  F015         	goto	l596
  5714   00299E                     l4383:
  5715                           
  5716                           ;manoeuvres.c: 151:             card_blue(mL, mR, backtrack);
  5717   00299E  C021  F01C         	movff	pick_card@mL,card_blue@mL
  5718   0029A2  C022  F01D         	movff	pick_card@mR,card_blue@mR
  5719   0029A6  C023  F01E         	movff	pick_card@backtrack,card_blue@backtrack
  5720   0029AA  EC47  F01C         	call	_card_blue	;wreg free
  5721                           
  5722                           ;manoeuvres.c: 152:             break;
  5723   0029AE  EF36  F015         	goto	l596
  5724   0029B2                     l4385:
  5725                           
  5726                           ;manoeuvres.c: 154:             card_yellow(mL, mR, backtrack);
  5727   0029B2  C021  F01C         	movff	pick_card@mL,card_yellow@mL
  5728   0029B6  C022  F01D         	movff	pick_card@mR,card_yellow@mR
  5729   0029BA  C023  F01E         	movff	pick_card@backtrack,card_yellow@backtrack
  5730   0029BE  ECD1  F019         	call	_card_yellow	;wreg free
  5731                           
  5732                           ;manoeuvres.c: 155:             break;
  5733   0029C2  EF36  F015         	goto	l596
  5734   0029C6                     l4387:
  5735                           
  5736                           ;manoeuvres.c: 157:             card_pink(mL, mR, backtrack);
  5737   0029C6  C021  F01C         	movff	pick_card@mL,card_pink@mL
  5738   0029CA  C022  F01D         	movff	pick_card@mR,card_pink@mR
  5739   0029CE  C023  F01E         	movff	pick_card@backtrack,card_pink@backtrack
  5740   0029D2  EC11  F01A         	call	_card_pink	;wreg free
  5741                           
  5742                           ;manoeuvres.c: 158:             break;
  5743   0029D6  EF36  F015         	goto	l596
  5744   0029DA                     l4389:
  5745                           
  5746                           ;manoeuvres.c: 160:             card_orange(mL, mR, backtrack);
  5747   0029DA  C021  F01C         	movff	pick_card@mL,card_orange@mL
  5748   0029DE  C022  F01D         	movff	pick_card@mR,card_orange@mR
  5749   0029E2  C023  F01E         	movff	pick_card@backtrack,card_orange@backtrack
  5750   0029E6  ECAB  F01B         	call	_card_orange	;wreg free
  5751                           
  5752                           ;manoeuvres.c: 161:             break;
  5753   0029EA  EF36  F015         	goto	l596
  5754   0029EE                     l4391:
  5755                           
  5756                           ;manoeuvres.c: 163:             card_cyan(mL, mR, backtrack);
  5757   0029EE  C021  F01C         	movff	pick_card@mL,card_cyan@mL
  5758   0029F2  C022  F01D         	movff	pick_card@mR,card_cyan@mR
  5759   0029F6  C023  F01E         	movff	pick_card@backtrack,card_cyan@backtrack
  5760   0029FA  EC13  F01C         	call	_card_cyan	;wreg free
  5761                           
  5762                           ;manoeuvres.c: 164:             break;
  5763   0029FE  EF36  F015         	goto	l596
  5764   002A02                     l4393:
  5765                           
  5766                           ;manoeuvres.c: 166:             card_white(mL, mR);
  5767   002A02  C021  F01C         	movff	pick_card@mL,card_white@mL
  5768   002A06  C022  F01D         	movff	pick_card@mR,card_white@mR
  5769   002A0A  EC60  F020         	call	_card_white	;wreg free
  5770                           
  5771                           ;manoeuvres.c: 167:             break;
  5772   002A0E  EF36  F015         	goto	l596
  5773   002A12                     l4397:
  5774   002A12  5024               	movf	pick_card@key^0,w,c
  5775   002A14  6E25               	movwf	??_pick_card^0,c
  5776   002A16  6A26               	clrf	(??_pick_card+1)^0,c
  5777                           
  5778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5779                           ; Switch size 1, requested type "simple"
  5780                           ; Number of cases is 1, Range of values is 0 to 0
  5781                           ; switch strategies available:
  5782                           ; Name         Instructions Cycles
  5783                           ; simple_byte            4     3 (average)
  5784                           ;	Chosen strategy is simple_byte
  5785   002A18  5026               	movf	(??_pick_card+1)^0,w,c
  5786   002A1A  0A00               	xorlw	0	; case 0
  5787   002A1C  B4D8               	btfsc	status,2,c
  5788   002A1E  EF13  F015         	goto	l5159
  5789   002A22  EF36  F015         	goto	l596
  5790   002A26                     l5159:
  5791                           
  5792                           ; Switch size 1, requested type "simple"
  5793                           ; Number of cases is 8, Range of values is 1 to 8
  5794                           ; switch strategies available:
  5795                           ; Name         Instructions Cycles
  5796                           ; simple_byte           25    13 (average)
  5797                           ;	Chosen strategy is simple_byte
  5798   002A26  5025               	movf	??_pick_card^0,w,c
  5799   002A28  0A01               	xorlw	1	; case 1
  5800   002A2A  B4D8               	btfsc	status,2,c
  5801   002A2C  EFBB  F014         	goto	l4379
  5802   002A30  0A03               	xorlw	3	; case 2
  5803   002A32  B4D8               	btfsc	status,2,c
  5804   002A34  EFC5  F014         	goto	l4381
  5805   002A38  0A01               	xorlw	1	; case 3
  5806   002A3A  B4D8               	btfsc	status,2,c
  5807   002A3C  EFCF  F014         	goto	l4383
  5808   002A40  0A07               	xorlw	7	; case 4
  5809   002A42  B4D8               	btfsc	status,2,c
  5810   002A44  EFD9  F014         	goto	l4385
  5811   002A48  0A01               	xorlw	1	; case 5
  5812   002A4A  B4D8               	btfsc	status,2,c
  5813   002A4C  EFE3  F014         	goto	l4387
  5814   002A50  0A03               	xorlw	3	; case 6
  5815   002A52  B4D8               	btfsc	status,2,c
  5816   002A54  EFED  F014         	goto	l4389
  5817   002A58  0A01               	xorlw	1	; case 7
  5818   002A5A  B4D8               	btfsc	status,2,c
  5819   002A5C  EFF7  F014         	goto	l4391
  5820   002A60  0A0F               	xorlw	15	; case 8
  5821   002A62  B4D8               	btfsc	status,2,c
  5822   002A64  EF01  F015         	goto	l4393
  5823   002A68  EF36  F015         	goto	l596
  5824   002A6C                     l596:
  5825   002A6C  0012               	return		;funcret
  5826   002A6E                     __end_of_pick_card:
  5827                           	callstack 0
  5828                           
  5829 ;; *************** function _card_yellow *****************
  5830 ;; Defined at:
  5831 ;;		line 58 in file "manoeuvres.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5834 ;;		 -> main@motorL(9), 
  5835 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5836 ;;		 -> main@motorR(9), 
  5837 ;;  backtrack       1   29[COMRAM] unsigned char 
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;		None
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  1    wreg      void 
  5842 ;; Registers used:
  5843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5849 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5851 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5852 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5853 ;;Total ram usage:        5 bytes
  5854 ;; Hardware stack levels used: 1
  5855 ;; Hardware stack levels required when called: 5
  5856 ;; This function calls:
  5857 ;;		_headbuttReverse
  5858 ;;		_squareReverse
  5859 ;;		_turnLeft90
  5860 ;;		_turnRight90
  5861 ;; This function is called by:
  5862 ;;		_pick_card
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text32
  5867   0033A2                     __ptext32:
  5868                           	callstack 0
  5869   0033A2                     _card_yellow:
  5870                           	callstack 23
  5871   0033A2                     
  5872                           ;manoeuvres.c: 58: void card_yellow(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 59: {;manoeuvres.c: 60:     switch (backtrack) {
  5873   0033A2  EFFB  F019         	goto	l3763
  5874   0033A6                     l3757:
  5875                           
  5876                           ;manoeuvres.c: 62:             headbuttReverse(mL, mR);
  5877   0033A6  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  5878   0033AA  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  5879   0033AE  ECA9  F01F         	call	_headbuttReverse	;wreg free
  5880                           
  5881                           ;manoeuvres.c: 63:             squareReverse(mL, mR);
  5882   0033B2  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  5883   0033B6  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  5884   0033BA  EC1A  F01F         	call	_squareReverse	;wreg free
  5885                           
  5886                           ;manoeuvres.c: 64:             turnRight90(mL, mR);
  5887   0033BE  C01C  F018         	movff	card_yellow@mL,turnRight90@mL
  5888   0033C2  C01D  F019         	movff	card_yellow@mR,turnRight90@mR
  5889   0033C6  EC71  F01F         	call	_turnRight90	;wreg free
  5890                           
  5891                           ;manoeuvres.c: 65:             break;
  5892   0033CA  EF10  F01A         	goto	l559
  5893   0033CE                     l3759:
  5894                           
  5895                           ;manoeuvres.c: 67:             turnLeft90(mL, mR);
  5896   0033CE  C01C  F018         	movff	card_yellow@mL,turnLeft90@mL
  5897   0033D2  C01D  F019         	movff	card_yellow@mR,turnLeft90@mR
  5898   0033D6  EC8D  F01F         	call	_turnLeft90	;wreg free
  5899                           
  5900                           ;manoeuvres.c: 68:             squareReverse(mL, mR);
  5901   0033DA  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  5902   0033DE  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  5903   0033E2  EC1A  F01F         	call	_squareReverse	;wreg free
  5904                           
  5905                           ;manoeuvres.c: 69:             headbuttReverse(mL, mR);
  5906   0033E6  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  5907   0033EA  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  5908   0033EE  ECA9  F01F         	call	_headbuttReverse	;wreg free
  5909                           
  5910                           ;manoeuvres.c: 70:             break;
  5911   0033F2  EF10  F01A         	goto	l559
  5912   0033F6                     l3763:
  5913   0033F6  501E               	movf	card_yellow@backtrack^0,w,c
  5914   0033F8  6E1F               	movwf	??_card_yellow^0,c
  5915   0033FA  6A20               	clrf	(??_card_yellow+1)^0,c
  5916                           
  5917                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5918                           ; Switch size 1, requested type "simple"
  5919                           ; Number of cases is 1, Range of values is 0 to 0
  5920                           ; switch strategies available:
  5921                           ; Name         Instructions Cycles
  5922                           ; simple_byte            4     3 (average)
  5923                           ;	Chosen strategy is simple_byte
  5924   0033FC  5020               	movf	(??_card_yellow+1)^0,w,c
  5925   0033FE  0A00               	xorlw	0	; case 0
  5926   003400  B4D8               	btfsc	status,2,c
  5927   003402  EF05  F01A         	goto	l5161
  5928   003406  EF10  F01A         	goto	l559
  5929   00340A                     l5161:
  5930                           
  5931                           ; Switch size 1, requested type "simple"
  5932                           ; Number of cases is 2, Range of values is 0 to 1
  5933                           ; switch strategies available:
  5934                           ; Name         Instructions Cycles
  5935                           ; simple_byte            7     4 (average)
  5936                           ;	Chosen strategy is simple_byte
  5937   00340A  501F               	movf	??_card_yellow^0,w,c
  5938   00340C  0A00               	xorlw	0	; case 0
  5939   00340E  B4D8               	btfsc	status,2,c
  5940   003410  EFD3  F019         	goto	l3757
  5941   003414  0A01               	xorlw	1	; case 1
  5942   003416  B4D8               	btfsc	status,2,c
  5943   003418  EFE7  F019         	goto	l3759
  5944   00341C  EF10  F01A         	goto	l559
  5945   003420                     l559:
  5946   003420  0012               	return		;funcret
  5947   003422                     __end_of_card_yellow:
  5948                           	callstack 0
  5949                           
  5950 ;; *************** function _card_white *****************
  5951 ;; Defined at:
  5952 ;;		line 131 in file "manoeuvres.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5955 ;;		 -> main@motorL(9), 
  5956 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5957 ;;		 -> main@motorR(9), 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;		None
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      void 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5972 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5973 ;;Total ram usage:        2 bytes
  5974 ;; Hardware stack levels used: 1
  5975 ;; Hardware stack levels required when called: 5
  5976 ;; This function calls:
  5977 ;;		_UTurn
  5978 ;;		_headbuttReverse
  5979 ;; This function is called by:
  5980 ;;		_pick_card
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           	psect	text33
  5985   0040C0                     __ptext33:
  5986                           	callstack 0
  5987   0040C0                     _card_white:
  5988                           	callstack 23
  5989   0040C0                     
  5990                           ;manoeuvres.c: 131: void card_white(DC_motor *mL, DC_motor *mR);manoeuvres.c: 132: {;man
      +                          oeuvres.c: 133:     headbuttReverse(mL, mR);
  5991   0040C0  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  5992   0040C4  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  5993   0040C8  ECA9  F01F         	call	_headbuttReverse	;wreg free
  5994                           
  5995                           ;manoeuvres.c: 134:     UTurn(mL, mR);
  5996   0040CC  C01C  F018         	movff	card_white@mL,UTurn@mL
  5997   0040D0  C01D  F019         	movff	card_white@mR,UTurn@mR
  5998   0040D4  ECBB  F01E         	call	_UTurn	;wreg free
  5999                           
  6000                           ;manoeuvres.c: 135:     headbuttReverse(mL, mR);
  6001   0040D8  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  6002   0040DC  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  6003   0040E0  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6004   0040E4  0012               	return		;funcret
  6005   0040E6                     __end_of_card_white:
  6006                           	callstack 0
  6007                           
  6008 ;; *************** function _card_red *****************
  6009 ;; Defined at:
  6010 ;;		line 7 in file "manoeuvres.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6013 ;;		 -> main@motorL(9), 
  6014 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6015 ;;		 -> main@motorR(9), 
  6016 ;;  backtrack       1   29[COMRAM] unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      void 
  6021 ;; Registers used:
  6022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6028 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6030 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6031 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6032 ;;Total ram usage:        5 bytes
  6033 ;; Hardware stack levels used: 1
  6034 ;; Hardware stack levels required when called: 5
  6035 ;; This function calls:
  6036 ;;		_headbuttReverse
  6037 ;;		_turnLeft90
  6038 ;;		_turnRight90
  6039 ;; This function is called by:
  6040 ;;		_pick_card
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text34
  6045   0036EE                     __ptext34:
  6046                           	callstack 0
  6047   0036EE                     _card_red:
  6048                           	callstack 23
  6049   0036EE                     
  6050                           ;manoeuvres.c: 7: void card_red(DC_motor *mL, DC_motor *mR, unsigned char backtrack);man
      +                          oeuvres.c: 8: {;manoeuvres.c: 9:     switch (backtrack) {
  6051   0036EE  EF95  F01B         	goto	l3721
  6052   0036F2                     l3715:
  6053                           
  6054                           ;manoeuvres.c: 11:             headbuttReverse(mL, mR);
  6055   0036F2  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  6056   0036F6  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  6057   0036FA  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6058                           
  6059                           ;manoeuvres.c: 12:             turnRight90(mL, mR);
  6060   0036FE  C01C  F018         	movff	card_red@mL,turnRight90@mL
  6061   003702  C01D  F019         	movff	card_red@mR,turnRight90@mR
  6062   003706  EC71  F01F         	call	_turnRight90	;wreg free
  6063                           
  6064                           ;manoeuvres.c: 13:             break;
  6065   00370A  EFAA  F01B         	goto	l538
  6066   00370E                     l3717:
  6067                           
  6068                           ;manoeuvres.c: 15:             turnLeft90(mL, mR);
  6069   00370E  C01C  F018         	movff	card_red@mL,turnLeft90@mL
  6070   003712  C01D  F019         	movff	card_red@mR,turnLeft90@mR
  6071   003716  EC8D  F01F         	call	_turnLeft90	;wreg free
  6072                           
  6073                           ;manoeuvres.c: 16:             headbuttReverse(mL, mR);
  6074   00371A  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  6075   00371E  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  6076   003722  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6077                           
  6078                           ;manoeuvres.c: 17:             break;
  6079   003726  EFAA  F01B         	goto	l538
  6080   00372A                     l3721:
  6081   00372A  501E               	movf	card_red@backtrack^0,w,c
  6082   00372C  6E1F               	movwf	??_card_red^0,c
  6083   00372E  6A20               	clrf	(??_card_red+1)^0,c
  6084                           
  6085                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6086                           ; Switch size 1, requested type "simple"
  6087                           ; Number of cases is 1, Range of values is 0 to 0
  6088                           ; switch strategies available:
  6089                           ; Name         Instructions Cycles
  6090                           ; simple_byte            4     3 (average)
  6091                           ;	Chosen strategy is simple_byte
  6092   003730  5020               	movf	(??_card_red+1)^0,w,c
  6093   003732  0A00               	xorlw	0	; case 0
  6094   003734  B4D8               	btfsc	status,2,c
  6095   003736  EF9F  F01B         	goto	l5163
  6096   00373A  EFAA  F01B         	goto	l538
  6097   00373E                     l5163:
  6098                           
  6099                           ; Switch size 1, requested type "simple"
  6100                           ; Number of cases is 2, Range of values is 0 to 1
  6101                           ; switch strategies available:
  6102                           ; Name         Instructions Cycles
  6103                           ; simple_byte            7     4 (average)
  6104                           ;	Chosen strategy is simple_byte
  6105   00373E  501F               	movf	??_card_red^0,w,c
  6106   003740  0A00               	xorlw	0	; case 0
  6107   003742  B4D8               	btfsc	status,2,c
  6108   003744  EF79  F01B         	goto	l3715
  6109   003748  0A01               	xorlw	1	; case 1
  6110   00374A  B4D8               	btfsc	status,2,c
  6111   00374C  EF87  F01B         	goto	l3717
  6112   003750  EFAA  F01B         	goto	l538
  6113   003754                     l538:
  6114   003754  0012               	return		;funcret
  6115   003756                     __end_of_card_red:
  6116                           	callstack 0
  6117                           
  6118 ;; *************** function _card_pink *****************
  6119 ;; Defined at:
  6120 ;;		line 77 in file "manoeuvres.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6123 ;;		 -> main@motorL(9), 
  6124 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6125 ;;		 -> main@motorR(9), 
  6126 ;;  backtrack       1   29[COMRAM] unsigned char 
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;		None
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  1    wreg      void 
  6131 ;; Registers used:
  6132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/0
  6135 ;;		On exit  : 0/0
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6138 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6140 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6141 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6142 ;;Total ram usage:        5 bytes
  6143 ;; Hardware stack levels used: 1
  6144 ;; Hardware stack levels required when called: 5
  6145 ;; This function calls:
  6146 ;;		_headbuttReverse
  6147 ;;		_squareReverse
  6148 ;;		_turnLeft90
  6149 ;;		_turnRight90
  6150 ;; This function is called by:
  6151 ;;		_pick_card
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           	psect	text35
  6156   003422                     __ptext35:
  6157                           	callstack 0
  6158   003422                     _card_pink:
  6159                           	callstack 23
  6160   003422                     
  6161                           ;manoeuvres.c: 77: void card_pink(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 78: {;manoeuvres.c: 79:     switch (backtrack) {
  6162   003422  EF3B  F01A         	goto	l3777
  6163   003426                     l3771:
  6164                           
  6165                           ;manoeuvres.c: 81:             headbuttReverse(mL, mR);
  6166   003426  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  6167   00342A  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  6168   00342E  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6169                           
  6170                           ;manoeuvres.c: 82:             squareReverse(mL, mR);
  6171   003432  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  6172   003436  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  6173   00343A  EC1A  F01F         	call	_squareReverse	;wreg free
  6174                           
  6175                           ;manoeuvres.c: 83:             turnLeft90(mL, mR);
  6176   00343E  C01C  F018         	movff	card_pink@mL,turnLeft90@mL
  6177   003442  C01D  F019         	movff	card_pink@mR,turnLeft90@mR
  6178   003446  EC8D  F01F         	call	_turnLeft90	;wreg free
  6179                           
  6180                           ;manoeuvres.c: 84:             break;
  6181   00344A  EF50  F01A         	goto	l566
  6182   00344E                     l3773:
  6183                           
  6184                           ;manoeuvres.c: 86:             turnRight90(mL, mR);
  6185   00344E  C01C  F018         	movff	card_pink@mL,turnRight90@mL
  6186   003452  C01D  F019         	movff	card_pink@mR,turnRight90@mR
  6187   003456  EC71  F01F         	call	_turnRight90	;wreg free
  6188                           
  6189                           ;manoeuvres.c: 87:             squareReverse(mL, mR);
  6190   00345A  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  6191   00345E  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  6192   003462  EC1A  F01F         	call	_squareReverse	;wreg free
  6193                           
  6194                           ;manoeuvres.c: 88:             headbuttReverse(mL, mR);
  6195   003466  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  6196   00346A  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  6197   00346E  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6198                           
  6199                           ;manoeuvres.c: 89:             break;
  6200   003472  EF50  F01A         	goto	l566
  6201   003476                     l3777:
  6202   003476  501E               	movf	card_pink@backtrack^0,w,c
  6203   003478  6E1F               	movwf	??_card_pink^0,c
  6204   00347A  6A20               	clrf	(??_card_pink+1)^0,c
  6205                           
  6206                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6207                           ; Switch size 1, requested type "simple"
  6208                           ; Number of cases is 1, Range of values is 0 to 0
  6209                           ; switch strategies available:
  6210                           ; Name         Instructions Cycles
  6211                           ; simple_byte            4     3 (average)
  6212                           ;	Chosen strategy is simple_byte
  6213   00347C  5020               	movf	(??_card_pink+1)^0,w,c
  6214   00347E  0A00               	xorlw	0	; case 0
  6215   003480  B4D8               	btfsc	status,2,c
  6216   003482  EF45  F01A         	goto	l5165
  6217   003486  EF50  F01A         	goto	l566
  6218   00348A                     l5165:
  6219                           
  6220                           ; Switch size 1, requested type "simple"
  6221                           ; Number of cases is 2, Range of values is 0 to 1
  6222                           ; switch strategies available:
  6223                           ; Name         Instructions Cycles
  6224                           ; simple_byte            7     4 (average)
  6225                           ;	Chosen strategy is simple_byte
  6226   00348A  501F               	movf	??_card_pink^0,w,c
  6227   00348C  0A00               	xorlw	0	; case 0
  6228   00348E  B4D8               	btfsc	status,2,c
  6229   003490  EF13  F01A         	goto	l3771
  6230   003494  0A01               	xorlw	1	; case 1
  6231   003496  B4D8               	btfsc	status,2,c
  6232   003498  EF27  F01A         	goto	l3773
  6233   00349C  EF50  F01A         	goto	l566
  6234   0034A0                     l566:
  6235   0034A0  0012               	return		;funcret
  6236   0034A2                     __end_of_card_pink:
  6237                           	callstack 0
  6238                           
  6239 ;; *************** function _squareReverse *****************
  6240 ;; Defined at:
  6241 ;;		line 265 in file "dc_motor.c"
  6242 ;; Parameters:    Size  Location     Type
  6243 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6244 ;;		 -> main@motorL(9), 
  6245 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6246 ;;		 -> main@motorR(9), 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;		None
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6260 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6261 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6262 ;;Total ram usage:        4 bytes
  6263 ;; Hardware stack levels used: 1
  6264 ;; Hardware stack levels required when called: 4
  6265 ;; This function calls:
  6266 ;;		_fullSpeedReverse
  6267 ;;		_stop
  6268 ;;		_toggle_brake_lights
  6269 ;; This function is called by:
  6270 ;;		_card_yellow
  6271 ;;		_card_pink
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           	psect	text36
  6276   003E34                     __ptext36:
  6277                           	callstack 0
  6278   003E34                     _squareReverse:
  6279                           	callstack 23
  6280   003E34                     
  6281                           ;dc_motor.c: 265: void squareReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 266: {;dc_m
      +                          otor.c: 267:     toggle_brake_lights();
  6282   003E34  EC97  F020         	call	_toggle_brake_lights	;wreg free
  6283   003E38                     
  6284                           ;dc_motor.c: 269:     fullSpeedReverse(mL, mR);
  6285   003E38  C018  F013         	movff	squareReverse@mL,fullSpeedReverse@mL
  6286   003E3C  C019  F014         	movff	squareReverse@mR,fullSpeedReverse@mR
  6287   003E40  EC3D  F018         	call	_fullSpeedReverse	;wreg free
  6288   003E44                     
  6289                           ;dc_motor.c: 270:     _delay((unsigned long)((squareDelay)*(64000000/4000.0)));
  6290   003E44  0EC7               	movlw	199
  6291   003E46  6E1B               	movwf	(??_squareReverse+1)^0,c
  6292   003E48  0E0D               	movlw	13
  6293   003E4A  6E1A               	movwf	??_squareReverse^0,c
  6294   003E4C  0EC6               	movlw	198
  6295   003E4E                     u4167:
  6296   003E4E  2EE8               	decfsz	wreg,f,c
  6297   003E50  D7FE               	bra	u4167
  6298   003E52  2E1A               	decfsz	??_squareReverse^0,f,c
  6299   003E54  D7FC               	bra	u4167
  6300   003E56  2E1B               	decfsz	(??_squareReverse+1)^0,f,c
  6301   003E58  D7FA               	bra	u4167
  6302   003E5A  D000               	nop2	
  6303   003E5C                     
  6304                           ;dc_motor.c: 271:     stop(mL, mR);
  6305   003E5C  C018  F013         	movff	squareReverse@mL,stop@mL
  6306   003E60  C019  F014         	movff	squareReverse@mR,stop@mR
  6307   003E64  EC8A  F019         	call	_stop	;wreg free
  6308   003E68                     
  6309                           ;dc_motor.c: 273:     toggle_brake_lights();
  6310   003E68  EC97  F020         	call	_toggle_brake_lights	;wreg free
  6311   003E6C  0012               	return		;funcret
  6312   003E6E                     __end_of_squareReverse:
  6313                           	callstack 0
  6314                           
  6315 ;; *************** function _card_orange *****************
  6316 ;; Defined at:
  6317 ;;		line 96 in file "manoeuvres.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6320 ;;		 -> main@motorL(9), 
  6321 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6322 ;;		 -> main@motorR(9), 
  6323 ;;  backtrack       1   29[COMRAM] unsigned char 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;		None
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      void 
  6328 ;; Registers used:
  6329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6335 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6337 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6338 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6339 ;;Total ram usage:        5 bytes
  6340 ;; Hardware stack levels used: 1
  6341 ;; Hardware stack levels required when called: 5
  6342 ;; This function calls:
  6343 ;;		_headbuttReverse
  6344 ;;		_turnLeft135
  6345 ;;		_turnRight135
  6346 ;; This function is called by:
  6347 ;;		_pick_card
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           	psect	text37
  6352   003756                     __ptext37:
  6353                           	callstack 0
  6354   003756                     _card_orange:
  6355                           	callstack 23
  6356   003756                     
  6357                           ;manoeuvres.c: 96: void card_orange(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 97: {;manoeuvres.c: 98:     switch (backtrack) {
  6358   003756  EFC9  F01B         	goto	l3791
  6359   00375A                     l3785:
  6360                           
  6361                           ;manoeuvres.c: 100:             headbuttReverse(mL, mR);
  6362   00375A  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  6363   00375E  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  6364   003762  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6365                           
  6366                           ;manoeuvres.c: 101:             turnRight135(mL, mR);
  6367   003766  C01C  F018         	movff	card_orange@mL,turnRight135@mL
  6368   00376A  C01D  F019         	movff	card_orange@mR,turnRight135@mR
  6369   00376E  EC37  F01F         	call	_turnRight135	;wreg free
  6370                           
  6371                           ;manoeuvres.c: 102:             break;
  6372   003772  EFDE  F01B         	goto	l573
  6373   003776                     l3787:
  6374                           
  6375                           ;manoeuvres.c: 104:             turnLeft135(mL, mR);
  6376   003776  C01C  F018         	movff	card_orange@mL,turnLeft135@mL
  6377   00377A  C01D  F019         	movff	card_orange@mR,turnLeft135@mR
  6378   00377E  EC54  F01F         	call	_turnLeft135	;wreg free
  6379                           
  6380                           ;manoeuvres.c: 105:             headbuttReverse(mL, mR);
  6381   003782  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  6382   003786  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  6383   00378A  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6384                           
  6385                           ;manoeuvres.c: 106:             break;
  6386   00378E  EFDE  F01B         	goto	l573
  6387   003792                     l3791:
  6388   003792  501E               	movf	card_orange@backtrack^0,w,c
  6389   003794  6E1F               	movwf	??_card_orange^0,c
  6390   003796  6A20               	clrf	(??_card_orange+1)^0,c
  6391                           
  6392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6393                           ; Switch size 1, requested type "simple"
  6394                           ; Number of cases is 1, Range of values is 0 to 0
  6395                           ; switch strategies available:
  6396                           ; Name         Instructions Cycles
  6397                           ; simple_byte            4     3 (average)
  6398                           ;	Chosen strategy is simple_byte
  6399   003798  5020               	movf	(??_card_orange+1)^0,w,c
  6400   00379A  0A00               	xorlw	0	; case 0
  6401   00379C  B4D8               	btfsc	status,2,c
  6402   00379E  EFD3  F01B         	goto	l5167
  6403   0037A2  EFDE  F01B         	goto	l573
  6404   0037A6                     l5167:
  6405                           
  6406                           ; Switch size 1, requested type "simple"
  6407                           ; Number of cases is 2, Range of values is 0 to 1
  6408                           ; switch strategies available:
  6409                           ; Name         Instructions Cycles
  6410                           ; simple_byte            7     4 (average)
  6411                           ;	Chosen strategy is simple_byte
  6412   0037A6  501F               	movf	??_card_orange^0,w,c
  6413   0037A8  0A00               	xorlw	0	; case 0
  6414   0037AA  B4D8               	btfsc	status,2,c
  6415   0037AC  EFAD  F01B         	goto	l3785
  6416   0037B0  0A01               	xorlw	1	; case 1
  6417   0037B2  B4D8               	btfsc	status,2,c
  6418   0037B4  EFBB  F01B         	goto	l3787
  6419   0037B8  EFDE  F01B         	goto	l573
  6420   0037BC                     l573:
  6421   0037BC  0012               	return		;funcret
  6422   0037BE                     __end_of_card_orange:
  6423                           	callstack 0
  6424                           
  6425 ;; *************** function _card_green *****************
  6426 ;; Defined at:
  6427 ;;		line 24 in file "manoeuvres.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6430 ;;		 -> main@motorL(9), 
  6431 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6432 ;;		 -> main@motorR(9), 
  6433 ;;  backtrack       1   29[COMRAM] unsigned char 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;		None
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  1    wreg      void 
  6438 ;; Registers used:
  6439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6445 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6447 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6448 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6449 ;;Total ram usage:        5 bytes
  6450 ;; Hardware stack levels used: 1
  6451 ;; Hardware stack levels required when called: 5
  6452 ;; This function calls:
  6453 ;;		_headbuttReverse
  6454 ;;		_turnLeft90
  6455 ;;		_turnRight90
  6456 ;; This function is called by:
  6457 ;;		_pick_card
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text38
  6462   0037BE                     __ptext38:
  6463                           	callstack 0
  6464   0037BE                     _card_green:
  6465                           	callstack 23
  6466   0037BE                     
  6467                           ;manoeuvres.c: 24: void card_green(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 25: {;manoeuvres.c: 26:     switch (backtrack) {
  6468   0037BE  EFFD  F01B         	goto	l3735
  6469   0037C2                     l3729:
  6470                           
  6471                           ;manoeuvres.c: 28:             headbuttReverse(mL, mR);
  6472   0037C2  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  6473   0037C6  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  6474   0037CA  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6475                           
  6476                           ;manoeuvres.c: 29:             turnLeft90(mL, mR);
  6477   0037CE  C01C  F018         	movff	card_green@mL,turnLeft90@mL
  6478   0037D2  C01D  F019         	movff	card_green@mR,turnLeft90@mR
  6479   0037D6  EC8D  F01F         	call	_turnLeft90	;wreg free
  6480                           
  6481                           ;manoeuvres.c: 30:             break;
  6482   0037DA  EF12  F01C         	goto	l545
  6483   0037DE                     l3731:
  6484                           
  6485                           ;manoeuvres.c: 32:             turnRight90(mL, mR);
  6486   0037DE  C01C  F018         	movff	card_green@mL,turnRight90@mL
  6487   0037E2  C01D  F019         	movff	card_green@mR,turnRight90@mR
  6488   0037E6  EC71  F01F         	call	_turnRight90	;wreg free
  6489                           
  6490                           ;manoeuvres.c: 33:             headbuttReverse(mL, mR);
  6491   0037EA  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  6492   0037EE  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  6493   0037F2  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6494                           
  6495                           ;manoeuvres.c: 34:             break;
  6496   0037F6  EF12  F01C         	goto	l545
  6497   0037FA                     l3735:
  6498   0037FA  501E               	movf	card_green@backtrack^0,w,c
  6499   0037FC  6E1F               	movwf	??_card_green^0,c
  6500   0037FE  6A20               	clrf	(??_card_green+1)^0,c
  6501                           
  6502                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6503                           ; Switch size 1, requested type "simple"
  6504                           ; Number of cases is 1, Range of values is 0 to 0
  6505                           ; switch strategies available:
  6506                           ; Name         Instructions Cycles
  6507                           ; simple_byte            4     3 (average)
  6508                           ;	Chosen strategy is simple_byte
  6509   003800  5020               	movf	(??_card_green+1)^0,w,c
  6510   003802  0A00               	xorlw	0	; case 0
  6511   003804  B4D8               	btfsc	status,2,c
  6512   003806  EF07  F01C         	goto	l5169
  6513   00380A  EF12  F01C         	goto	l545
  6514   00380E                     l5169:
  6515                           
  6516                           ; Switch size 1, requested type "simple"
  6517                           ; Number of cases is 2, Range of values is 0 to 1
  6518                           ; switch strategies available:
  6519                           ; Name         Instructions Cycles
  6520                           ; simple_byte            7     4 (average)
  6521                           ;	Chosen strategy is simple_byte
  6522   00380E  501F               	movf	??_card_green^0,w,c
  6523   003810  0A00               	xorlw	0	; case 0
  6524   003812  B4D8               	btfsc	status,2,c
  6525   003814  EFE1  F01B         	goto	l3729
  6526   003818  0A01               	xorlw	1	; case 1
  6527   00381A  B4D8               	btfsc	status,2,c
  6528   00381C  EFEF  F01B         	goto	l3731
  6529   003820  EF12  F01C         	goto	l545
  6530   003824                     l545:
  6531   003824  0012               	return		;funcret
  6532   003826                     __end_of_card_green:
  6533                           	callstack 0
  6534                           
  6535 ;; *************** function _turnRight90 *****************
  6536 ;; Defined at:
  6537 ;;		line 193 in file "dc_motor.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6540 ;;		 -> main@motorL(9), 
  6541 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6542 ;;		 -> main@motorR(9), 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      void 
  6547 ;; Registers used:
  6548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6556 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6557 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6558 ;;Total ram usage:        4 bytes
  6559 ;; Hardware stack levels used: 1
  6560 ;; Hardware stack levels required when called: 4
  6561 ;; This function calls:
  6562 ;;		_stop
  6563 ;;		_toggle_right_indicators
  6564 ;;		_turnRight
  6565 ;; This function is called by:
  6566 ;;		_card_red
  6567 ;;		_card_green
  6568 ;;		_card_yellow
  6569 ;;		_card_pink
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text39
  6574   003EE2                     __ptext39:
  6575                           	callstack 0
  6576   003EE2                     _turnRight90:
  6577                           	callstack 23
  6578   003EE2                     
  6579                           ;dc_motor.c: 193: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 194: {;dc_mot
      +                          or.c: 195:     toggle_right_indicators();
  6580   003EE2  ECA8  F020         	call	_toggle_right_indicators	;wreg free
  6581   003EE6                     
  6582                           ;dc_motor.c: 197:     turnRight(mL, mR);
  6583   003EE6  C018  F013         	movff	turnRight90@mL,turnRight@mL
  6584   003EEA  C019  F014         	movff	turnRight90@mR,turnRight@mR
  6585   003EEE  EC85  F017         	call	_turnRight	;wreg free
  6586   003EF2                     
  6587                           ;dc_motor.c: 198:     _delay((unsigned long)((turnRight90Delay)*(64000000/4000.0)));
  6588   003EF2  0E09               	movlw	9
  6589   003EF4  6E1B               	movwf	(??_turnRight90+1)^0,c
  6590   003EF6  0EC5               	movlw	197
  6591   003EF8  6E1A               	movwf	??_turnRight90^0,c
  6592   003EFA  0E20               	movlw	32
  6593   003EFC                     u4177:
  6594   003EFC  2EE8               	decfsz	wreg,f,c
  6595   003EFE  D7FE               	bra	u4177
  6596   003F00  2E1A               	decfsz	??_turnRight90^0,f,c
  6597   003F02  D7FC               	bra	u4177
  6598   003F04  2E1B               	decfsz	(??_turnRight90+1)^0,f,c
  6599   003F06  D7FA               	bra	u4177
  6600   003F08                     
  6601                           ;dc_motor.c: 199:     stop(mL, mR);
  6602   003F08  C018  F013         	movff	turnRight90@mL,stop@mL
  6603   003F0C  C019  F014         	movff	turnRight90@mR,stop@mR
  6604   003F10  EC8A  F019         	call	_stop	;wreg free
  6605   003F14                     
  6606                           ;dc_motor.c: 201:     toggle_right_indicators();
  6607   003F14  ECA8  F020         	call	_toggle_right_indicators	;wreg free
  6608   003F18  0012               	return		;funcret
  6609   003F1A                     __end_of_turnRight90:
  6610                           	callstack 0
  6611                           
  6612 ;; *************** function _turnLeft90 *****************
  6613 ;; Defined at:
  6614 ;;		line 179 in file "dc_motor.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6617 ;;		 -> main@motorL(9), 
  6618 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6619 ;;		 -> main@motorR(9), 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;		None
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  1    wreg      void 
  6624 ;; Registers used:
  6625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6631 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6633 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6634 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6635 ;;Total ram usage:        4 bytes
  6636 ;; Hardware stack levels used: 1
  6637 ;; Hardware stack levels required when called: 4
  6638 ;; This function calls:
  6639 ;;		_stop
  6640 ;;		_toggle_left_indicators
  6641 ;;		_turnLeft
  6642 ;; This function is called by:
  6643 ;;		_card_red
  6644 ;;		_card_green
  6645 ;;		_card_yellow
  6646 ;;		_card_pink
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           	psect	text40
  6651   003F1A                     __ptext40:
  6652                           	callstack 0
  6653   003F1A                     _turnLeft90:
  6654                           	callstack 23
  6655   003F1A                     
  6656                           ;dc_motor.c: 179: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 180: {;dc_moto
      +                          r.c: 181:     toggle_left_indicators();
  6657   003F1A  ECB8  F020         	call	_toggle_left_indicators	;wreg free
  6658   003F1E                     
  6659                           ;dc_motor.c: 183:     turnLeft(mL, mR);
  6660   003F1E  C018  F013         	movff	turnLeft90@mL,turnLeft@mL
  6661   003F22  C019  F014         	movff	turnLeft90@mR,turnLeft@mR
  6662   003F26  ECE1  F017         	call	_turnLeft	;wreg free
  6663   003F2A                     
  6664                           ;dc_motor.c: 184:     _delay((unsigned long)((turnLeft90Delay)*(64000000/4000.0)));
  6665   003F2A  0E07               	movlw	7
  6666   003F2C  6E1B               	movwf	(??_turnLeft90+1)^0,c
  6667   003F2E  0ED2               	movlw	210
  6668   003F30  6E1A               	movwf	??_turnLeft90^0,c
  6669   003F32  0E6E               	movlw	110
  6670   003F34                     u4187:
  6671   003F34  2EE8               	decfsz	wreg,f,c
  6672   003F36  D7FE               	bra	u4187
  6673   003F38  2E1A               	decfsz	??_turnLeft90^0,f,c
  6674   003F3A  D7FC               	bra	u4187
  6675   003F3C  2E1B               	decfsz	(??_turnLeft90+1)^0,f,c
  6676   003F3E  D7FA               	bra	u4187
  6677   003F40                     
  6678                           ;dc_motor.c: 185:     stop(mL, mR);
  6679   003F40  C018  F013         	movff	turnLeft90@mL,stop@mL
  6680   003F44  C019  F014         	movff	turnLeft90@mR,stop@mR
  6681   003F48  EC8A  F019         	call	_stop	;wreg free
  6682   003F4C                     
  6683                           ;dc_motor.c: 187:     toggle_left_indicators();
  6684   003F4C  ECB8  F020         	call	_toggle_left_indicators	;wreg free
  6685   003F50  0012               	return		;funcret
  6686   003F52                     __end_of_turnLeft90:
  6687                           	callstack 0
  6688                           
  6689 ;; *************** function _card_cyan *****************
  6690 ;; Defined at:
  6691 ;;		line 113 in file "manoeuvres.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6694 ;;		 -> main@motorL(9), 
  6695 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6696 ;;		 -> main@motorR(9), 
  6697 ;;  backtrack       1   29[COMRAM] unsigned char 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6709 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6711 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6712 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6713 ;;Total ram usage:        5 bytes
  6714 ;; Hardware stack levels used: 1
  6715 ;; Hardware stack levels required when called: 5
  6716 ;; This function calls:
  6717 ;;		_headbuttReverse
  6718 ;;		_turnLeft135
  6719 ;;		_turnRight135
  6720 ;; This function is called by:
  6721 ;;		_pick_card
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text41
  6726   003826                     __ptext41:
  6727                           	callstack 0
  6728   003826                     _card_cyan:
  6729                           	callstack 23
  6730   003826                     
  6731                           ;manoeuvres.c: 113: void card_cyan(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 114: {;manoeuvres.c: 115:     switch (backtrack) {
  6732   003826  EF31  F01C         	goto	l3805
  6733   00382A                     l3799:
  6734                           
  6735                           ;manoeuvres.c: 117:             headbuttReverse(mL, mR);
  6736   00382A  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  6737   00382E  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  6738   003832  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6739                           
  6740                           ;manoeuvres.c: 118:             turnLeft135(mL, mR);
  6741   003836  C01C  F018         	movff	card_cyan@mL,turnLeft135@mL
  6742   00383A  C01D  F019         	movff	card_cyan@mR,turnLeft135@mR
  6743   00383E  EC54  F01F         	call	_turnLeft135	;wreg free
  6744                           
  6745                           ;manoeuvres.c: 119:             break;
  6746   003842  EF46  F01C         	goto	l580
  6747   003846                     l3801:
  6748                           
  6749                           ;manoeuvres.c: 121:             turnRight135(mL, mR);
  6750   003846  C01C  F018         	movff	card_cyan@mL,turnRight135@mL
  6751   00384A  C01D  F019         	movff	card_cyan@mR,turnRight135@mR
  6752   00384E  EC37  F01F         	call	_turnRight135	;wreg free
  6753                           
  6754                           ;manoeuvres.c: 122:             headbuttReverse(mL, mR);
  6755   003852  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  6756   003856  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  6757   00385A  ECA9  F01F         	call	_headbuttReverse	;wreg free
  6758                           
  6759                           ;manoeuvres.c: 123:             break;
  6760   00385E  EF46  F01C         	goto	l580
  6761   003862                     l3805:
  6762   003862  501E               	movf	card_cyan@backtrack^0,w,c
  6763   003864  6E1F               	movwf	??_card_cyan^0,c
  6764   003866  6A20               	clrf	(??_card_cyan+1)^0,c
  6765                           
  6766                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6767                           ; Switch size 1, requested type "simple"
  6768                           ; Number of cases is 1, Range of values is 0 to 0
  6769                           ; switch strategies available:
  6770                           ; Name         Instructions Cycles
  6771                           ; simple_byte            4     3 (average)
  6772                           ;	Chosen strategy is simple_byte
  6773   003868  5020               	movf	(??_card_cyan+1)^0,w,c
  6774   00386A  0A00               	xorlw	0	; case 0
  6775   00386C  B4D8               	btfsc	status,2,c
  6776   00386E  EF3B  F01C         	goto	l5171
  6777   003872  EF46  F01C         	goto	l580
  6778   003876                     l5171:
  6779                           
  6780                           ; Switch size 1, requested type "simple"
  6781                           ; Number of cases is 2, Range of values is 0 to 1
  6782                           ; switch strategies available:
  6783                           ; Name         Instructions Cycles
  6784                           ; simple_byte            7     4 (average)
  6785                           ;	Chosen strategy is simple_byte
  6786   003876  501F               	movf	??_card_cyan^0,w,c
  6787   003878  0A00               	xorlw	0	; case 0
  6788   00387A  B4D8               	btfsc	status,2,c
  6789   00387C  EF15  F01C         	goto	l3799
  6790   003880  0A01               	xorlw	1	; case 1
  6791   003882  B4D8               	btfsc	status,2,c
  6792   003884  EF23  F01C         	goto	l3801
  6793   003888  EF46  F01C         	goto	l580
  6794   00388C                     l580:
  6795   00388C  0012               	return		;funcret
  6796   00388E                     __end_of_card_cyan:
  6797                           	callstack 0
  6798                           
  6799 ;; *************** function _turnRight135 *****************
  6800 ;; Defined at:
  6801 ;;		line 221 in file "dc_motor.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6804 ;;		 -> main@motorL(9), 
  6805 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6806 ;;		 -> main@motorR(9), 
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;		None
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  1    wreg      void 
  6811 ;; Registers used:
  6812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6818 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6820 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6821 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6822 ;;Total ram usage:        4 bytes
  6823 ;; Hardware stack levels used: 1
  6824 ;; Hardware stack levels required when called: 4
  6825 ;; This function calls:
  6826 ;;		_stop
  6827 ;;		_toggle_right_indicators
  6828 ;;		_turnRight
  6829 ;; This function is called by:
  6830 ;;		_card_orange
  6831 ;;		_card_cyan
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           	psect	text42
  6836   003E6E                     __ptext42:
  6837                           	callstack 0
  6838   003E6E                     _turnRight135:
  6839                           	callstack 23
  6840   003E6E                     
  6841                           ;dc_motor.c: 221: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 222: {;dc_mo
      +                          tor.c: 223:     toggle_right_indicators();
  6842   003E6E  ECA8  F020         	call	_toggle_right_indicators	;wreg free
  6843   003E72                     
  6844                           ;dc_motor.c: 225:     turnRight(mL, mR);
  6845   003E72  C018  F013         	movff	turnRight135@mL,turnRight@mL
  6846   003E76  C019  F014         	movff	turnRight135@mR,turnRight@mR
  6847   003E7A  EC85  F017         	call	_turnRight	;wreg free
  6848   003E7E                     
  6849                           ;dc_motor.c: 226:     _delay((unsigned long)((turnRight135Delay)*(64000000/4000.0)));
  6850   003E7E  0E16               	movlw	22
  6851   003E80  6E1B               	movwf	(??_turnRight135+1)^0,c
  6852   003E82  0E45               	movlw	69
  6853   003E84  6E1A               	movwf	??_turnRight135^0,c
  6854   003E86  0E17               	movlw	23
  6855   003E88                     u4197:
  6856   003E88  2EE8               	decfsz	wreg,f,c
  6857   003E8A  D7FE               	bra	u4197
  6858   003E8C  2E1A               	decfsz	??_turnRight135^0,f,c
  6859   003E8E  D7FC               	bra	u4197
  6860   003E90  2E1B               	decfsz	(??_turnRight135+1)^0,f,c
  6861   003E92  D7FA               	bra	u4197
  6862   003E94  0000               	nop	
  6863   003E96                     
  6864                           ;dc_motor.c: 227:     stop(mL, mR);
  6865   003E96  C018  F013         	movff	turnRight135@mL,stop@mL
  6866   003E9A  C019  F014         	movff	turnRight135@mR,stop@mR
  6867   003E9E  EC8A  F019         	call	_stop	;wreg free
  6868   003EA2                     
  6869                           ;dc_motor.c: 229:     toggle_right_indicators();
  6870   003EA2  ECA8  F020         	call	_toggle_right_indicators	;wreg free
  6871   003EA6  0012               	return		;funcret
  6872   003EA8                     __end_of_turnRight135:
  6873                           	callstack 0
  6874                           
  6875 ;; *************** function _turnRight *****************
  6876 ;; Defined at:
  6877 ;;		line 125 in file "dc_motor.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6880 ;;		 -> main@motorL(9), 
  6881 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6882 ;;		 -> main@motorR(9), 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  rightGear       1   22[COMRAM] unsigned char 
  6885 ;;  leftGear        1   21[COMRAM] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6895 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6896 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6897 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6898 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6899 ;;Total ram usage:        5 bytes
  6900 ;; Hardware stack levels used: 1
  6901 ;; Hardware stack levels required when called: 3
  6902 ;; This function calls:
  6903 ;;		_setMotorPWM
  6904 ;; This function is called by:
  6905 ;;		_turnRight90
  6906 ;;		_turnRight135
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text43
  6911   002F0A                     __ptext43:
  6912                           	callstack 0
  6913   002F0A                     _turnRight:
  6914                           	callstack 23
  6915   002F0A  0E28               	movlw	40
  6916   002F0C  6E16               	movwf	turnRight@leftGear^0,c
  6917   002F0E  0E28               	movlw	40
  6918   002F10  6E17               	movwf	turnRight@rightGear^0,c
  6919   002F12                     
  6920                           ;dc_motor.c: 129:     (mL->direction) = 1;
  6921   002F12  5013               	movf	turnRight@mL^0,w,c
  6922   002F14  6ED9               	movwf	fsr2l,c
  6923   002F16  6ADA               	clrf	fsr2h,c
  6924   002F18  0E01               	movlw	1
  6925   002F1A  26D9               	addwf	fsr2l,f,c
  6926   002F1C  0E01               	movlw	1
  6927   002F1E  6EDF               	movwf	indf2,c
  6928   002F20                     
  6929                           ;dc_motor.c: 130:     (mR->direction) = 0;
  6930   002F20  5014               	movf	turnRight@mR^0,w,c
  6931   002F22  6ED9               	movwf	fsr2l,c
  6932   002F24  6ADA               	clrf	fsr2h,c
  6933   002F26  0E01               	movlw	1
  6934   002F28  26D9               	addwf	fsr2l,f,c
  6935   002F2A  6ADF               	clrf	indf2,c
  6936                           
  6937                           ;dc_motor.c: 131:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  6938   002F2C  EFC8  F017         	goto	l3437
  6939   002F30                     l3425:
  6940                           
  6941                           ;dc_motor.c: 132:         if (mL->power<leftGear) {mL->power++;}
  6942   002F30  5013               	movf	turnRight@mL^0,w,c
  6943   002F32  6ED9               	movwf	fsr2l,c
  6944   002F34  6ADA               	clrf	fsr2h,c
  6945   002F36  5016               	movf	turnRight@leftGear^0,w,c
  6946   002F38  5CDE               	subwf	postinc2,w,c
  6947   002F3A  B0D8               	btfsc	status,0,c
  6948   002F3C  EFA2  F017         	goto	u2431
  6949   002F40  EFA4  F017         	goto	u2430
  6950   002F44                     u2431:
  6951   002F44  EFA8  F017         	goto	l250
  6952   002F48                     u2430:
  6953   002F48  5013               	movf	turnRight@mL^0,w,c
  6954   002F4A  6ED9               	movwf	fsr2l,c
  6955   002F4C  6ADA               	clrf	fsr2h,c
  6956   002F4E  2ADF               	incf	indf2,f,c
  6957   002F50                     l250:
  6958                           
  6959                           ;dc_motor.c: 133:         if (mR->power<rightGear) {mR->power++;}
  6960   002F50  5014               	movf	turnRight@mR^0,w,c
  6961   002F52  6ED9               	movwf	fsr2l,c
  6962   002F54  6ADA               	clrf	fsr2h,c
  6963   002F56  5017               	movf	turnRight@rightGear^0,w,c
  6964   002F58  5CDE               	subwf	postinc2,w,c
  6965   002F5A  B0D8               	btfsc	status,0,c
  6966   002F5C  EFB2  F017         	goto	u2441
  6967   002F60  EFB4  F017         	goto	u2440
  6968   002F64                     u2441:
  6969   002F64  EFB8  F017         	goto	l3431
  6970   002F68                     u2440:
  6971   002F68  5014               	movf	turnRight@mR^0,w,c
  6972   002F6A  6ED9               	movwf	fsr2l,c
  6973   002F6C  6ADA               	clrf	fsr2h,c
  6974   002F6E  2ADF               	incf	indf2,f,c
  6975   002F70                     l3431:
  6976                           
  6977                           ;dc_motor.c: 134:         setMotorPWM(mL);
  6978   002F70  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  6979   002F74  ECE8  F012         	call	_setMotorPWM	;wreg free
  6980   002F78                     
  6981                           ;dc_motor.c: 135:         setMotorPWM(mR);
  6982   002F78  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  6983   002F7C  ECE8  F012         	call	_setMotorPWM	;wreg free
  6984   002F80                     
  6985                           ;dc_motor.c: 136:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  6986   002F80  0EA7               	movlw	167
  6987   002F82  6E15               	movwf	??_turnRight^0,c
  6988   002F84  0E3A               	movlw	58
  6989   002F86                     u4207:
  6990   002F86  2EE8               	decfsz	wreg,f,c
  6991   002F88  D7FE               	bra	u4207
  6992   002F8A  2E15               	decfsz	??_turnRight^0,f,c
  6993   002F8C  D7FC               	bra	u4207
  6994   002F8E  D000               	nop2	
  6995   002F90                     l3437:
  6996                           
  6997                           ;dc_motor.c: 131:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  6998   002F90  5013               	movf	turnRight@mL^0,w,c
  6999   002F92  6ED9               	movwf	fsr2l,c
  7000   002F94  6ADA               	clrf	fsr2h,c
  7001   002F96  5016               	movf	turnRight@leftGear^0,w,c
  7002   002F98  5CDE               	subwf	postinc2,w,c
  7003   002F9A  A0D8               	btfss	status,0,c
  7004   002F9C  EFD2  F017         	goto	u2451
  7005   002FA0  EFD4  F017         	goto	u2450
  7006   002FA4                     u2451:
  7007   002FA4  EF98  F017         	goto	l3425
  7008   002FA8                     u2450:
  7009   002FA8  5014               	movf	turnRight@mR^0,w,c
  7010   002FAA  6ED9               	movwf	fsr2l,c
  7011   002FAC  6ADA               	clrf	fsr2h,c
  7012   002FAE  5017               	movf	turnRight@rightGear^0,w,c
  7013   002FB0  5CDE               	subwf	postinc2,w,c
  7014   002FB2  A0D8               	btfss	status,0,c
  7015   002FB4  EFDE  F017         	goto	u2461
  7016   002FB8  EFE0  F017         	goto	u2460
  7017   002FBC                     u2461:
  7018   002FBC  EF98  F017         	goto	l3425
  7019   002FC0                     u2460:
  7020   002FC0  0012               	return		;funcret
  7021   002FC2                     __end_of_turnRight:
  7022                           	callstack 0
  7023                           
  7024 ;; *************** function _turnLeft135 *****************
  7025 ;; Defined at:
  7026 ;;		line 207 in file "dc_motor.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7029 ;;		 -> main@motorL(9), 
  7030 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7031 ;;		 -> main@motorR(9), 
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;		None
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7045 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7046 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7047 ;;Total ram usage:        4 bytes
  7048 ;; Hardware stack levels used: 1
  7049 ;; Hardware stack levels required when called: 4
  7050 ;; This function calls:
  7051 ;;		_stop
  7052 ;;		_toggle_left_indicators
  7053 ;;		_turnLeft
  7054 ;; This function is called by:
  7055 ;;		_card_orange
  7056 ;;		_card_cyan
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text44
  7061   003EA8                     __ptext44:
  7062                           	callstack 0
  7063   003EA8                     _turnLeft135:
  7064                           	callstack 23
  7065   003EA8                     
  7066                           ;dc_motor.c: 207: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 208: {;dc_mot
      +                          or.c: 209:     toggle_left_indicators();
  7067   003EA8  ECB8  F020         	call	_toggle_left_indicators	;wreg free
  7068   003EAC                     
  7069                           ;dc_motor.c: 211:     turnLeft(mL, mR);
  7070   003EAC  C018  F013         	movff	turnLeft135@mL,turnLeft@mL
  7071   003EB0  C019  F014         	movff	turnLeft135@mR,turnLeft@mR
  7072   003EB4  ECE1  F017         	call	_turnLeft	;wreg free
  7073   003EB8                     
  7074                           ;dc_motor.c: 212:     _delay((unsigned long)((turnLeft135Delay)*(64000000/4000.0)));
  7075   003EB8  0E15               	movlw	21
  7076   003EBA  6E1B               	movwf	(??_turnLeft135+1)^0,c
  7077   003EBC  0E4B               	movlw	75
  7078   003EBE  6E1A               	movwf	??_turnLeft135^0,c
  7079   003EC0  0EBE               	movlw	190
  7080   003EC2                     u4217:
  7081   003EC2  2EE8               	decfsz	wreg,f,c
  7082   003EC4  D7FE               	bra	u4217
  7083   003EC6  2E1A               	decfsz	??_turnLeft135^0,f,c
  7084   003EC8  D7FC               	bra	u4217
  7085   003ECA  2E1B               	decfsz	(??_turnLeft135+1)^0,f,c
  7086   003ECC  D7FA               	bra	u4217
  7087   003ECE  D000               	nop2	
  7088   003ED0                     
  7089                           ;dc_motor.c: 213:     stop(mL, mR);
  7090   003ED0  C018  F013         	movff	turnLeft135@mL,stop@mL
  7091   003ED4  C019  F014         	movff	turnLeft135@mR,stop@mR
  7092   003ED8  EC8A  F019         	call	_stop	;wreg free
  7093   003EDC                     
  7094                           ;dc_motor.c: 215:     toggle_left_indicators();
  7095   003EDC  ECB8  F020         	call	_toggle_left_indicators	;wreg free
  7096   003EE0  0012               	return		;funcret
  7097   003EE2                     __end_of_turnLeft135:
  7098                           	callstack 0
  7099                           
  7100 ;; *************** function _card_blue *****************
  7101 ;; Defined at:
  7102 ;;		line 41 in file "manoeuvres.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  7105 ;;		 -> main@motorL(9), 
  7106 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  7107 ;;		 -> main@motorR(9), 
  7108 ;;  backtrack       1   29[COMRAM] unsigned char 
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;		None
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      void 
  7113 ;; Registers used:
  7114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 0/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7120 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7122 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7123 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7124 ;;Total ram usage:        5 bytes
  7125 ;; Hardware stack levels used: 1
  7126 ;; Hardware stack levels required when called: 5
  7127 ;; This function calls:
  7128 ;;		_UTurn
  7129 ;;		_headbuttReverse
  7130 ;; This function is called by:
  7131 ;;		_pick_card
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           	psect	text45
  7136   00388E                     __ptext45:
  7137                           	callstack 0
  7138   00388E                     _card_blue:
  7139                           	callstack 23
  7140   00388E                     
  7141                           ;manoeuvres.c: 41: void card_blue(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 42: {;manoeuvres.c: 43:     switch (backtrack) {
  7142   00388E  EF65  F01C         	goto	l3749
  7143   003892                     l3743:
  7144                           
  7145                           ;manoeuvres.c: 45:             headbuttReverse(mL, mR);
  7146   003892  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  7147   003896  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  7148   00389A  ECA9  F01F         	call	_headbuttReverse	;wreg free
  7149                           
  7150                           ;manoeuvres.c: 46:             UTurn(mL, mR);
  7151   00389E  C01C  F018         	movff	card_blue@mL,UTurn@mL
  7152   0038A2  C01D  F019         	movff	card_blue@mR,UTurn@mR
  7153   0038A6  ECBB  F01E         	call	_UTurn	;wreg free
  7154                           
  7155                           ;manoeuvres.c: 47:             break;
  7156   0038AA  EF7A  F01C         	goto	l552
  7157   0038AE                     l3745:
  7158                           
  7159                           ;manoeuvres.c: 49:             UTurn(mL, mR);
  7160   0038AE  C01C  F018         	movff	card_blue@mL,UTurn@mL
  7161   0038B2  C01D  F019         	movff	card_blue@mR,UTurn@mR
  7162   0038B6  ECBB  F01E         	call	_UTurn	;wreg free
  7163                           
  7164                           ;manoeuvres.c: 50:             headbuttReverse(mL, mR);
  7165   0038BA  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  7166   0038BE  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  7167   0038C2  ECA9  F01F         	call	_headbuttReverse	;wreg free
  7168                           
  7169                           ;manoeuvres.c: 51:             break;
  7170   0038C6  EF7A  F01C         	goto	l552
  7171   0038CA                     l3749:
  7172   0038CA  501E               	movf	card_blue@backtrack^0,w,c
  7173   0038CC  6E1F               	movwf	??_card_blue^0,c
  7174   0038CE  6A20               	clrf	(??_card_blue+1)^0,c
  7175                           
  7176                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7177                           ; Switch size 1, requested type "simple"
  7178                           ; Number of cases is 1, Range of values is 0 to 0
  7179                           ; switch strategies available:
  7180                           ; Name         Instructions Cycles
  7181                           ; simple_byte            4     3 (average)
  7182                           ;	Chosen strategy is simple_byte
  7183   0038D0  5020               	movf	(??_card_blue+1)^0,w,c
  7184   0038D2  0A00               	xorlw	0	; case 0
  7185   0038D4  B4D8               	btfsc	status,2,c
  7186   0038D6  EF6F  F01C         	goto	l5173
  7187   0038DA  EF7A  F01C         	goto	l552
  7188   0038DE                     l5173:
  7189                           
  7190                           ; Switch size 1, requested type "simple"
  7191                           ; Number of cases is 2, Range of values is 0 to 1
  7192                           ; switch strategies available:
  7193                           ; Name         Instructions Cycles
  7194                           ; simple_byte            7     4 (average)
  7195                           ;	Chosen strategy is simple_byte
  7196   0038DE  501F               	movf	??_card_blue^0,w,c
  7197   0038E0  0A00               	xorlw	0	; case 0
  7198   0038E2  B4D8               	btfsc	status,2,c
  7199   0038E4  EF49  F01C         	goto	l3743
  7200   0038E8  0A01               	xorlw	1	; case 1
  7201   0038EA  B4D8               	btfsc	status,2,c
  7202   0038EC  EF57  F01C         	goto	l3745
  7203   0038F0  EF7A  F01C         	goto	l552
  7204   0038F4                     l552:
  7205   0038F4  0012               	return		;funcret
  7206   0038F6                     __end_of_card_blue:
  7207                           	callstack 0
  7208                           
  7209 ;; *************** function _headbuttReverse *****************
  7210 ;; Defined at:
  7211 ;;		line 251 in file "dc_motor.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7214 ;;		 -> main@motorL(9), 
  7215 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7216 ;;		 -> main@motorR(9), 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;		None
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      void 
  7221 ;; Registers used:
  7222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7228 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7230 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7231 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7232 ;;Total ram usage:        4 bytes
  7233 ;; Hardware stack levels used: 1
  7234 ;; Hardware stack levels required when called: 4
  7235 ;; This function calls:
  7236 ;;		_fullSpeedReverse
  7237 ;;		_stop
  7238 ;;		_toggle_brake_lights
  7239 ;; This function is called by:
  7240 ;;		_card_red
  7241 ;;		_card_green
  7242 ;;		_card_blue
  7243 ;;		_card_yellow
  7244 ;;		_card_pink
  7245 ;;		_card_orange
  7246 ;;		_card_cyan
  7247 ;;		_card_white
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text46
  7252   003F52                     __ptext46:
  7253                           	callstack 0
  7254   003F52                     _headbuttReverse:
  7255                           	callstack 23
  7256   003F52                     
  7257                           ;dc_motor.c: 251: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 252: {;dc
      +                          _motor.c: 253:     toggle_brake_lights();
  7258   003F52  EC97  F020         	call	_toggle_brake_lights	;wreg free
  7259   003F56                     
  7260                           ;dc_motor.c: 255:     fullSpeedReverse(mL, mR);
  7261   003F56  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
  7262   003F5A  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
  7263   003F5E  EC3D  F018         	call	_fullSpeedReverse	;wreg free
  7264   003F62                     
  7265                           ;dc_motor.c: 256:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
  7266   003F62  0E43               	movlw	67
  7267   003F64  6E1B               	movwf	(??_headbuttReverse+1)^0,c
  7268   003F66  0E8F               	movlw	143
  7269   003F68  6E1A               	movwf	??_headbuttReverse^0,c
  7270   003F6A  0EC8               	movlw	200
  7271   003F6C                     u4227:
  7272   003F6C  2EE8               	decfsz	wreg,f,c
  7273   003F6E  D7FE               	bra	u4227
  7274   003F70  2E1A               	decfsz	??_headbuttReverse^0,f,c
  7275   003F72  D7FC               	bra	u4227
  7276   003F74  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
  7277   003F76  D7FA               	bra	u4227
  7278   003F78                     
  7279                           ;dc_motor.c: 257:     stop(mL, mR);
  7280   003F78  C018  F013         	movff	headbuttReverse@mL,stop@mL
  7281   003F7C  C019  F014         	movff	headbuttReverse@mR,stop@mR
  7282   003F80  EC8A  F019         	call	_stop	;wreg free
  7283   003F84                     
  7284                           ;dc_motor.c: 259:     toggle_brake_lights();
  7285   003F84  EC97  F020         	call	_toggle_brake_lights	;wreg free
  7286   003F88  0012               	return		;funcret
  7287   003F8A                     __end_of_headbuttReverse:
  7288                           	callstack 0
  7289                           
  7290 ;; *************** function _toggle_brake_lights *****************
  7291 ;; Defined at:
  7292 ;;		line 48 in file "buggy_lights.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;		None
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;		None
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  1    wreg      void 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7310 ;;Total ram usage:        1 bytes
  7311 ;; Hardware stack levels used: 1
  7312 ;; Hardware stack levels required when called: 1
  7313 ;; This function calls:
  7314 ;;		Nothing
  7315 ;; This function is called by:
  7316 ;;		_headbuttReverse
  7317 ;;		_squareReverse
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           	psect	text47
  7322   00412E                     __ptext47:
  7323                           	callstack 0
  7324   00412E                     _toggle_brake_lights:
  7325                           	callstack 25
  7326   00412E                     
  7327                           ;buggy_lights.c: 51:     LATDbits.LATD4 = !LATDbits.LATD4;
  7328   00412E  A87C               	btfss	124,4,c	;volatile
  7329   004130  EF9C  F020         	goto	u2271
  7330   004134  EFA0  F020         	goto	u2270
  7331   004138                     u2271:
  7332   004138  6A01               	clrf	??_toggle_brake_lights^0,c
  7333   00413A  2A01               	incf	??_toggle_brake_lights^0,f,c
  7334   00413C  EFA1  F020         	goto	u2288
  7335   004140                     u2270:
  7336   004140  6A01               	clrf	??_toggle_brake_lights^0,c
  7337   004142                     u2288:
  7338   004142  3A01               	swapf	??_toggle_brake_lights^0,f,c
  7339   004144  507C               	movf	124,w,c	;volatile
  7340   004146  1801               	xorwf	??_toggle_brake_lights^0,w,c
  7341   004148  0BEF               	andlw	-17
  7342   00414A  1801               	xorwf	??_toggle_brake_lights^0,w,c
  7343   00414C  6E7C               	movwf	124,c	;volatile
  7344   00414E  0012               	return		;funcret
  7345   004150                     __end_of_toggle_brake_lights:
  7346                           	callstack 0
  7347                           
  7348 ;; *************** function _fullSpeedReverse *****************
  7349 ;; Defined at:
  7350 ;;		line 161 in file "dc_motor.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7353 ;;		 -> main@motorL(9), 
  7354 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7355 ;;		 -> main@motorR(9), 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  rightGear       1   22[COMRAM] unsigned char 
  7358 ;;  leftGear        1   21[COMRAM] unsigned char 
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  1    wreg      void 
  7361 ;; Registers used:
  7362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7368 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7369 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7370 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7371 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7372 ;;Total ram usage:        5 bytes
  7373 ;; Hardware stack levels used: 1
  7374 ;; Hardware stack levels required when called: 3
  7375 ;; This function calls:
  7376 ;;		_setMotorPWM
  7377 ;; This function is called by:
  7378 ;;		_headbuttReverse
  7379 ;;		_squareReverse
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text48
  7384   00307A                     __ptext48:
  7385                           	callstack 0
  7386   00307A                     _fullSpeedReverse:
  7387                           	callstack 23
  7388   00307A  0E14               	movlw	20
  7389   00307C  6E16               	movwf	fullSpeedReverse@leftGear^0,c
  7390   00307E  0E15               	movlw	21
  7391   003080  6E17               	movwf	fullSpeedReverse@rightGear^0,c
  7392   003082                     
  7393                           ;dc_motor.c: 165:     (mL->direction) = 0;
  7394   003082  5013               	movf	fullSpeedReverse@mL^0,w,c
  7395   003084  6ED9               	movwf	fsr2l,c
  7396   003086  6ADA               	clrf	fsr2h,c
  7397   003088  0E01               	movlw	1
  7398   00308A  26D9               	addwf	fsr2l,f,c
  7399   00308C  6ADF               	clrf	indf2,c
  7400   00308E                     
  7401                           ;dc_motor.c: 166:     (mR->direction) = 0;
  7402   00308E  5014               	movf	fullSpeedReverse@mR^0,w,c
  7403   003090  6ED9               	movwf	fsr2l,c
  7404   003092  6ADA               	clrf	fsr2h,c
  7405   003094  0E01               	movlw	1
  7406   003096  26D9               	addwf	fsr2l,f,c
  7407   003098  6ADF               	clrf	indf2,c
  7408                           
  7409                           ;dc_motor.c: 167:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7410   00309A  EF7F  F018         	goto	l3459
  7411   00309E                     l3447:
  7412                           
  7413                           ;dc_motor.c: 168:         if (mL->power<leftGear) {mL->power++;}
  7414   00309E  5013               	movf	fullSpeedReverse@mL^0,w,c
  7415   0030A0  6ED9               	movwf	fsr2l,c
  7416   0030A2  6ADA               	clrf	fsr2h,c
  7417   0030A4  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  7418   0030A6  5CDE               	subwf	postinc2,w,c
  7419   0030A8  B0D8               	btfsc	status,0,c
  7420   0030AA  EF59  F018         	goto	u2471
  7421   0030AE  EF5B  F018         	goto	u2470
  7422   0030B2                     u2471:
  7423   0030B2  EF5F  F018         	goto	l266
  7424   0030B6                     u2470:
  7425   0030B6  5013               	movf	fullSpeedReverse@mL^0,w,c
  7426   0030B8  6ED9               	movwf	fsr2l,c
  7427   0030BA  6ADA               	clrf	fsr2h,c
  7428   0030BC  2ADF               	incf	indf2,f,c
  7429   0030BE                     l266:
  7430                           
  7431                           ;dc_motor.c: 169:         if (mR->power<rightGear) {mR->power++;}
  7432   0030BE  5014               	movf	fullSpeedReverse@mR^0,w,c
  7433   0030C0  6ED9               	movwf	fsr2l,c
  7434   0030C2  6ADA               	clrf	fsr2h,c
  7435   0030C4  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  7436   0030C6  5CDE               	subwf	postinc2,w,c
  7437   0030C8  B0D8               	btfsc	status,0,c
  7438   0030CA  EF69  F018         	goto	u2481
  7439   0030CE  EF6B  F018         	goto	u2480
  7440   0030D2                     u2481:
  7441   0030D2  EF6F  F018         	goto	l3453
  7442   0030D6                     u2480:
  7443   0030D6  5014               	movf	fullSpeedReverse@mR^0,w,c
  7444   0030D8  6ED9               	movwf	fsr2l,c
  7445   0030DA  6ADA               	clrf	fsr2h,c
  7446   0030DC  2ADF               	incf	indf2,f,c
  7447   0030DE                     l3453:
  7448                           
  7449                           ;dc_motor.c: 170:         setMotorPWM(mL);
  7450   0030DE  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  7451   0030E2  ECE8  F012         	call	_setMotorPWM	;wreg free
  7452   0030E6                     
  7453                           ;dc_motor.c: 171:         setMotorPWM(mR);
  7454   0030E6  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  7455   0030EA  ECE8  F012         	call	_setMotorPWM	;wreg free
  7456   0030EE                     
  7457                           ;dc_motor.c: 172:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7458   0030EE  0EA7               	movlw	167
  7459   0030F0  6E15               	movwf	??_fullSpeedReverse^0,c
  7460   0030F2  0E3A               	movlw	58
  7461   0030F4                     u4237:
  7462   0030F4  2EE8               	decfsz	wreg,f,c
  7463   0030F6  D7FE               	bra	u4237
  7464   0030F8  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  7465   0030FA  D7FC               	bra	u4237
  7466   0030FC  D000               	nop2	
  7467   0030FE                     l3459:
  7468                           
  7469                           ;dc_motor.c: 167:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7470   0030FE  5013               	movf	fullSpeedReverse@mL^0,w,c
  7471   003100  6ED9               	movwf	fsr2l,c
  7472   003102  6ADA               	clrf	fsr2h,c
  7473   003104  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  7474   003106  5CDE               	subwf	postinc2,w,c
  7475   003108  A0D8               	btfss	status,0,c
  7476   00310A  EF89  F018         	goto	u2491
  7477   00310E  EF8B  F018         	goto	u2490
  7478   003112                     u2491:
  7479   003112  EF4F  F018         	goto	l3447
  7480   003116                     u2490:
  7481   003116  5014               	movf	fullSpeedReverse@mR^0,w,c
  7482   003118  6ED9               	movwf	fsr2l,c
  7483   00311A  6ADA               	clrf	fsr2h,c
  7484   00311C  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  7485   00311E  5CDE               	subwf	postinc2,w,c
  7486   003120  A0D8               	btfss	status,0,c
  7487   003122  EF95  F018         	goto	u2501
  7488   003126  EF97  F018         	goto	u2500
  7489   00312A                     u2501:
  7490   00312A  EF4F  F018         	goto	l3447
  7491   00312E                     u2500:
  7492   00312E  0012               	return		;funcret
  7493   003130                     __end_of_fullSpeedReverse:
  7494                           	callstack 0
  7495                           
  7496 ;; *************** function _UTurn *****************
  7497 ;; Defined at:
  7498 ;;		line 235 in file "dc_motor.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7501 ;;		 -> main@motorL(9), 
  7502 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7503 ;;		 -> main@motorR(9), 
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;		None
  7506 ;; Return value:  Size  Location     Type
  7507 ;;                  1    wreg      void 
  7508 ;; Registers used:
  7509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7517 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7518 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7519 ;;Total ram usage:        4 bytes
  7520 ;; Hardware stack levels used: 1
  7521 ;; Hardware stack levels required when called: 4
  7522 ;; This function calls:
  7523 ;;		_stop
  7524 ;;		_toggle_left_indicators
  7525 ;;		_toggle_right_indicators
  7526 ;;		_turnLeft
  7527 ;; This function is called by:
  7528 ;;		_card_blue
  7529 ;;		_card_white
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           	psect	text49
  7534   003D76                     __ptext49:
  7535                           	callstack 0
  7536   003D76                     _UTurn:
  7537                           	callstack 23
  7538   003D76                     
  7539                           ;dc_motor.c: 235: void UTurn(DC_motor *mL, DC_motor *mR);dc_motor.c: 236: {;dc_motor.c: 
      +                          237:     toggle_left_indicators();
  7540   003D76  ECB8  F020         	call	_toggle_left_indicators	;wreg free
  7541                           
  7542                           ;dc_motor.c: 238:     toggle_right_indicators();
  7543   003D7A  ECA8  F020         	call	_toggle_right_indicators	;wreg free
  7544   003D7E                     
  7545                           ;dc_motor.c: 240:     turnLeft(mL, mR);
  7546   003D7E  C018  F013         	movff	UTurn@mL,turnLeft@mL
  7547   003D82  C019  F014         	movff	UTurn@mR,turnLeft@mR
  7548   003D86  ECE1  F017         	call	_turnLeft	;wreg free
  7549   003D8A                     
  7550                           ;dc_motor.c: 241:     _delay((unsigned long)((turn180Delay)*(64000000/4000.0)));
  7551   003D8A  0E21               	movlw	33
  7552   003D8C  6E1B               	movwf	(??_UTurn+1)^0,c
  7553   003D8E  0E78               	movlw	120
  7554   003D90  6E1A               	movwf	??_UTurn^0,c
  7555   003D92  0E98               	movlw	152
  7556   003D94                     u4247:
  7557   003D94  2EE8               	decfsz	wreg,f,c
  7558   003D96  D7FE               	bra	u4247
  7559   003D98  2E1A               	decfsz	??_UTurn^0,f,c
  7560   003D9A  D7FC               	bra	u4247
  7561   003D9C  2E1B               	decfsz	(??_UTurn+1)^0,f,c
  7562   003D9E  D7FA               	bra	u4247
  7563   003DA0  D000               	nop2	
  7564   003DA2                     
  7565                           ;dc_motor.c: 242:     stop(mL, mR);
  7566   003DA2  C018  F013         	movff	UTurn@mL,stop@mL
  7567   003DA6  C019  F014         	movff	UTurn@mR,stop@mR
  7568   003DAA  EC8A  F019         	call	_stop	;wreg free
  7569   003DAE                     
  7570                           ;dc_motor.c: 244:     toggle_left_indicators();
  7571   003DAE  ECB8  F020         	call	_toggle_left_indicators	;wreg free
  7572   003DB2                     
  7573                           ;dc_motor.c: 245:     toggle_right_indicators();
  7574   003DB2  ECA8  F020         	call	_toggle_right_indicators	;wreg free
  7575   003DB6  0012               	return		;funcret
  7576   003DB8                     __end_of_UTurn:
  7577                           	callstack 0
  7578                           
  7579 ;; *************** function _turnLeft *****************
  7580 ;; Defined at:
  7581 ;;		line 107 in file "dc_motor.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7584 ;;		 -> main@motorL(9), 
  7585 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7586 ;;		 -> main@motorR(9), 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;  rightGear       1   22[COMRAM] unsigned char 
  7589 ;;  leftGear        1   21[COMRAM] unsigned char 
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7599 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7602 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7603 ;;Total ram usage:        5 bytes
  7604 ;; Hardware stack levels used: 1
  7605 ;; Hardware stack levels required when called: 3
  7606 ;; This function calls:
  7607 ;;		_setMotorPWM
  7608 ;; This function is called by:
  7609 ;;		_turnLeft90
  7610 ;;		_turnLeft135
  7611 ;;		_UTurn
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           	psect	text50
  7616   002FC2                     __ptext50:
  7617                           	callstack 0
  7618   002FC2                     _turnLeft:
  7619                           	callstack 23
  7620   002FC2  0E28               	movlw	40
  7621   002FC4  6E16               	movwf	turnLeft@leftGear^0,c
  7622   002FC6  0E28               	movlw	40
  7623   002FC8  6E17               	movwf	turnLeft@rightGear^0,c
  7624   002FCA                     
  7625                           ;dc_motor.c: 111:     (mL->direction) = 0;
  7626   002FCA  5013               	movf	turnLeft@mL^0,w,c
  7627   002FCC  6ED9               	movwf	fsr2l,c
  7628   002FCE  6ADA               	clrf	fsr2h,c
  7629   002FD0  0E01               	movlw	1
  7630   002FD2  26D9               	addwf	fsr2l,f,c
  7631   002FD4  6ADF               	clrf	indf2,c
  7632   002FD6                     
  7633                           ;dc_motor.c: 112:     (mR->direction) = 1;
  7634   002FD6  5014               	movf	turnLeft@mR^0,w,c
  7635   002FD8  6ED9               	movwf	fsr2l,c
  7636   002FDA  6ADA               	clrf	fsr2h,c
  7637   002FDC  0E01               	movlw	1
  7638   002FDE  26D9               	addwf	fsr2l,f,c
  7639   002FE0  0E01               	movlw	1
  7640   002FE2  6EDF               	movwf	indf2,c
  7641                           
  7642                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7643   002FE4  EF24  F018         	goto	l3415
  7644   002FE8                     l3403:
  7645                           
  7646                           ;dc_motor.c: 114:         if (mL->power<leftGear) {mL->power++;}
  7647   002FE8  5013               	movf	turnLeft@mL^0,w,c
  7648   002FEA  6ED9               	movwf	fsr2l,c
  7649   002FEC  6ADA               	clrf	fsr2h,c
  7650   002FEE  5016               	movf	turnLeft@leftGear^0,w,c
  7651   002FF0  5CDE               	subwf	postinc2,w,c
  7652   002FF2  B0D8               	btfsc	status,0,c
  7653   002FF4  EFFE  F017         	goto	u2391
  7654   002FF8  EF00  F018         	goto	u2390
  7655   002FFC                     u2391:
  7656   002FFC  EF04  F018         	goto	l242
  7657   003000                     u2390:
  7658   003000  5013               	movf	turnLeft@mL^0,w,c
  7659   003002  6ED9               	movwf	fsr2l,c
  7660   003004  6ADA               	clrf	fsr2h,c
  7661   003006  2ADF               	incf	indf2,f,c
  7662   003008                     l242:
  7663                           
  7664                           ;dc_motor.c: 115:         if (mR->power<rightGear) {mR->power++;}
  7665   003008  5014               	movf	turnLeft@mR^0,w,c
  7666   00300A  6ED9               	movwf	fsr2l,c
  7667   00300C  6ADA               	clrf	fsr2h,c
  7668   00300E  5017               	movf	turnLeft@rightGear^0,w,c
  7669   003010  5CDE               	subwf	postinc2,w,c
  7670   003012  B0D8               	btfsc	status,0,c
  7671   003014  EF0E  F018         	goto	u2401
  7672   003018  EF10  F018         	goto	u2400
  7673   00301C                     u2401:
  7674   00301C  EF14  F018         	goto	l3409
  7675   003020                     u2400:
  7676   003020  5014               	movf	turnLeft@mR^0,w,c
  7677   003022  6ED9               	movwf	fsr2l,c
  7678   003024  6ADA               	clrf	fsr2h,c
  7679   003026  2ADF               	incf	indf2,f,c
  7680   003028                     l3409:
  7681                           
  7682                           ;dc_motor.c: 116:         setMotorPWM(mL);
  7683   003028  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  7684   00302C  ECE8  F012         	call	_setMotorPWM	;wreg free
  7685   003030                     
  7686                           ;dc_motor.c: 117:         setMotorPWM(mR);
  7687   003030  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  7688   003034  ECE8  F012         	call	_setMotorPWM	;wreg free
  7689   003038                     
  7690                           ;dc_motor.c: 118:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7691   003038  0EA7               	movlw	167
  7692   00303A  6E15               	movwf	??_turnLeft^0,c
  7693   00303C  0E3A               	movlw	58
  7694   00303E                     u4257:
  7695   00303E  2EE8               	decfsz	wreg,f,c
  7696   003040  D7FE               	bra	u4257
  7697   003042  2E15               	decfsz	??_turnLeft^0,f,c
  7698   003044  D7FC               	bra	u4257
  7699   003046  D000               	nop2	
  7700   003048                     l3415:
  7701                           
  7702                           ;dc_motor.c: 113:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7703   003048  5013               	movf	turnLeft@mL^0,w,c
  7704   00304A  6ED9               	movwf	fsr2l,c
  7705   00304C  6ADA               	clrf	fsr2h,c
  7706   00304E  5016               	movf	turnLeft@leftGear^0,w,c
  7707   003050  5CDE               	subwf	postinc2,w,c
  7708   003052  A0D8               	btfss	status,0,c
  7709   003054  EF2E  F018         	goto	u2411
  7710   003058  EF30  F018         	goto	u2410
  7711   00305C                     u2411:
  7712   00305C  EFF4  F017         	goto	l3403
  7713   003060                     u2410:
  7714   003060  5014               	movf	turnLeft@mR^0,w,c
  7715   003062  6ED9               	movwf	fsr2l,c
  7716   003064  6ADA               	clrf	fsr2h,c
  7717   003066  5017               	movf	turnLeft@rightGear^0,w,c
  7718   003068  5CDE               	subwf	postinc2,w,c
  7719   00306A  A0D8               	btfss	status,0,c
  7720   00306C  EF3A  F018         	goto	u2421
  7721   003070  EF3C  F018         	goto	u2420
  7722   003074                     u2421:
  7723   003074  EFF4  F017         	goto	l3403
  7724   003078                     u2420:
  7725   003078  0012               	return		;funcret
  7726   00307A                     __end_of_turnLeft:
  7727                           	callstack 0
  7728                           
  7729 ;; *************** function _toggle_right_indicators *****************
  7730 ;; Defined at:
  7731 ;;		line 75 in file "buggy_lights.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;		None
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;		None
  7736 ;; Return value:  Size  Location     Type
  7737 ;;                  1    wreg      void 
  7738 ;; Registers used:
  7739 ;;		wreg, status,2, status,0
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7747 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7749 ;;Total ram usage:        1 bytes
  7750 ;; Hardware stack levels used: 1
  7751 ;; Hardware stack levels required when called: 1
  7752 ;; This function calls:
  7753 ;;		Nothing
  7754 ;; This function is called by:
  7755 ;;		_turnRight90
  7756 ;;		_turnRight135
  7757 ;;		_UTurn
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           	psect	text51
  7762   004150                     __ptext51:
  7763                           	callstack 0
  7764   004150                     _toggle_right_indicators:
  7765                           	callstack 25
  7766   004150                     
  7767                           ;buggy_lights.c: 78:     LATHbits.LATH0 = !LATHbits.LATH0;
  7768   004150  A080               	btfss	128,0,c	;volatile
  7769   004152  EFAD  F020         	goto	u2311
  7770   004156  EFB1  F020         	goto	u2310
  7771   00415A                     u2311:
  7772   00415A  6A01               	clrf	??_toggle_right_indicators^0,c
  7773   00415C  2A01               	incf	??_toggle_right_indicators^0,f,c
  7774   00415E  EFB2  F020         	goto	u2328
  7775   004162                     u2310:
  7776   004162  6A01               	clrf	??_toggle_right_indicators^0,c
  7777   004164                     u2328:
  7778   004164  5080               	movf	128,w,c	;volatile
  7779   004166  1801               	xorwf	??_toggle_right_indicators^0,w,c
  7780   004168  0BFE               	andlw	-2
  7781   00416A  1801               	xorwf	??_toggle_right_indicators^0,w,c
  7782   00416C  6E80               	movwf	128,c	;volatile
  7783   00416E  0012               	return		;funcret
  7784   004170                     __end_of_toggle_right_indicators:
  7785                           	callstack 0
  7786                           
  7787 ;; *************** function _toggle_left_indicators *****************
  7788 ;; Defined at:
  7789 ;;		line 66 in file "buggy_lights.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;		None
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1    wreg      void 
  7796 ;; Registers used:
  7797 ;;		wreg, status,2, status,0
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7807 ;;Total ram usage:        1 bytes
  7808 ;; Hardware stack levels used: 1
  7809 ;; Hardware stack levels required when called: 1
  7810 ;; This function calls:
  7811 ;;		Nothing
  7812 ;; This function is called by:
  7813 ;;		_turnLeft90
  7814 ;;		_turnLeft135
  7815 ;;		_UTurn
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text52
  7820   004170                     __ptext52:
  7821                           	callstack 0
  7822   004170                     _toggle_left_indicators:
  7823                           	callstack 25
  7824   004170                     
  7825                           ;buggy_lights.c: 69:     LATFbits.LATF0 = !LATFbits.LATF0;
  7826   004170  A07E               	btfss	126,0,c	;volatile
  7827   004172  EFBD  F020         	goto	u2291
  7828   004176  EFC1  F020         	goto	u2290
  7829   00417A                     u2291:
  7830   00417A  6A01               	clrf	??_toggle_left_indicators^0,c
  7831   00417C  2A01               	incf	??_toggle_left_indicators^0,f,c
  7832   00417E  EFC2  F020         	goto	u2308
  7833   004182                     u2290:
  7834   004182  6A01               	clrf	??_toggle_left_indicators^0,c
  7835   004184                     u2308:
  7836   004184  507E               	movf	126,w,c	;volatile
  7837   004186  1801               	xorwf	??_toggle_left_indicators^0,w,c
  7838   004188  0BFE               	andlw	-2
  7839   00418A  1801               	xorwf	??_toggle_left_indicators^0,w,c
  7840   00418C  6E7E               	movwf	126,c	;volatile
  7841   00418E  0012               	return		;funcret
  7842   004190                     __end_of_toggle_left_indicators:
  7843                           	callstack 0
  7844                           
  7845 ;; *************** function _stop *****************
  7846 ;; Defined at:
  7847 ;;		line 93 in file "dc_motor.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7850 ;;		 -> main@motorL(9), 
  7851 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7852 ;;		 -> main@motorR(9), 
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;		None
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      void 
  7857 ;; Registers used:
  7858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7867 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7868 ;;Total ram usage:        3 bytes
  7869 ;; Hardware stack levels used: 1
  7870 ;; Hardware stack levels required when called: 3
  7871 ;; This function calls:
  7872 ;;		_setMotorPWM
  7873 ;; This function is called by:
  7874 ;;		_turnLeft90
  7875 ;;		_turnRight90
  7876 ;;		_turnLeft135
  7877 ;;		_turnRight135
  7878 ;;		_UTurn
  7879 ;;		_headbuttReverse
  7880 ;;		_squareReverse
  7881 ;;		_forward_navigation
  7882 ;;		_return_to_sender
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           	psect	text53
  7887   003314                     __ptext53:
  7888                           	callstack 0
  7889   003314                     _stop:
  7890                           	callstack 26
  7891   003314                     
  7892                           ;dc_motor.c: 93: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 94: {;dc_motor.c: 95:
      +                               while ((mL->power>0) || (mR->power>0)){
  7893   003314  EFBA  F019         	goto	l3393
  7894   003318                     l3379:
  7895                           
  7896                           ;dc_motor.c: 96:         if (mL->power>0) {mL->power--;}
  7897   003318  5013               	movf	stop@mL^0,w,c
  7898   00331A  6ED9               	movwf	fsr2l,c
  7899   00331C  6ADA               	clrf	fsr2h,c
  7900   00331E  50DF               	movf	indf2,w,c
  7901   003320  B4D8               	btfsc	status,2,c
  7902   003322  EF95  F019         	goto	u2351
  7903   003326  EF97  F019         	goto	u2350
  7904   00332A                     u2351:
  7905   00332A  EF9B  F019         	goto	l3383
  7906   00332E                     u2350:
  7907   00332E  5013               	movf	stop@mL^0,w,c
  7908   003330  6ED9               	movwf	fsr2l,c
  7909   003332  6ADA               	clrf	fsr2h,c
  7910   003334  06DF               	decf	indf2,f,c
  7911   003336                     l3383:
  7912                           
  7913                           ;dc_motor.c: 97:         if (mR->power>0) {mR->power--;}
  7914   003336  5014               	movf	stop@mR^0,w,c
  7915   003338  6ED9               	movwf	fsr2l,c
  7916   00333A  6ADA               	clrf	fsr2h,c
  7917   00333C  50DF               	movf	indf2,w,c
  7918   00333E  B4D8               	btfsc	status,2,c
  7919   003340  EFA4  F019         	goto	u2361
  7920   003344  EFA6  F019         	goto	u2360
  7921   003348                     u2361:
  7922   003348  EFAA  F019         	goto	l3387
  7923   00334C                     u2360:
  7924   00334C  5014               	movf	stop@mR^0,w,c
  7925   00334E  6ED9               	movwf	fsr2l,c
  7926   003350  6ADA               	clrf	fsr2h,c
  7927   003352  06DF               	decf	indf2,f,c
  7928   003354                     l3387:
  7929                           
  7930                           ;dc_motor.c: 98:         setMotorPWM(mL);
  7931   003354  C013  F00E         	movff	stop@mL,setMotorPWM@m
  7932   003358  ECE8  F012         	call	_setMotorPWM	;wreg free
  7933   00335C                     
  7934                           ;dc_motor.c: 99:         setMotorPWM(mR);
  7935   00335C  C014  F00E         	movff	stop@mR,setMotorPWM@m
  7936   003360  ECE8  F012         	call	_setMotorPWM	;wreg free
  7937   003364                     
  7938                           ;dc_motor.c: 100:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7939   003364  0EA7               	movlw	167
  7940   003366  6E15               	movwf	??_stop^0,c
  7941   003368  0E3A               	movlw	58
  7942   00336A                     u4267:
  7943   00336A  2EE8               	decfsz	wreg,f,c
  7944   00336C  D7FE               	bra	u4267
  7945   00336E  2E15               	decfsz	??_stop^0,f,c
  7946   003370  D7FC               	bra	u4267
  7947   003372  D000               	nop2	
  7948   003374                     l3393:
  7949                           
  7950                           ;dc_motor.c: 95:     while ((mL->power>0) || (mR->power>0)){
  7951   003374  5013               	movf	stop@mL^0,w,c
  7952   003376  6ED9               	movwf	fsr2l,c
  7953   003378  6ADA               	clrf	fsr2h,c
  7954   00337A  50DF               	movf	indf2,w,c
  7955   00337C  A4D8               	btfss	status,2,c
  7956   00337E  EFC3  F019         	goto	u2371
  7957   003382  EFC5  F019         	goto	u2370
  7958   003386                     u2371:
  7959   003386  EF8C  F019         	goto	l3379
  7960   00338A                     u2370:
  7961   00338A  5014               	movf	stop@mR^0,w,c
  7962   00338C  6ED9               	movwf	fsr2l,c
  7963   00338E  6ADA               	clrf	fsr2h,c
  7964   003390  50DF               	movf	indf2,w,c
  7965   003392  A4D8               	btfss	status,2,c
  7966   003394  EFCE  F019         	goto	u2381
  7967   003398  EFD0  F019         	goto	u2380
  7968   00339C                     u2381:
  7969   00339C  EF8C  F019         	goto	l3379
  7970   0033A0                     u2380:
  7971   0033A0  0012               	return		;funcret
  7972   0033A2                     __end_of_stop:
  7973                           	callstack 0
  7974                           
  7975 ;; *************** function _fullSpeedAhead *****************
  7976 ;; Defined at:
  7977 ;;		line 143 in file "dc_motor.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7980 ;;		 -> main@motorL(9), 
  7981 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7982 ;;		 -> main@motorR(9), 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  rightGear       1   22[COMRAM] unsigned char 
  7985 ;;  leftGear        1   21[COMRAM] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      void 
  7988 ;; Registers used:
  7989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7995 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7996 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7998 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7999 ;;Total ram usage:        5 bytes
  8000 ;; Hardware stack levels used: 1
  8001 ;; Hardware stack levels required when called: 3
  8002 ;; This function calls:
  8003 ;;		_setMotorPWM
  8004 ;; This function is called by:
  8005 ;;		_forward_navigation
  8006 ;;		_return_to_sender
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           	psect	text54
  8011   002E50                     __ptext54:
  8012                           	callstack 0
  8013   002E50                     _fullSpeedAhead:
  8014                           	callstack 26
  8015   002E50  0E14               	movlw	20
  8016   002E52  6E16               	movwf	fullSpeedAhead@leftGear^0,c
  8017   002E54  0E14               	movlw	20
  8018   002E56  6E17               	movwf	fullSpeedAhead@rightGear^0,c
  8019   002E58                     
  8020                           ;dc_motor.c: 147:     (mL->direction) = 1;
  8021   002E58  5013               	movf	fullSpeedAhead@mL^0,w,c
  8022   002E5A  6ED9               	movwf	fsr2l,c
  8023   002E5C  6ADA               	clrf	fsr2h,c
  8024   002E5E  0E01               	movlw	1
  8025   002E60  26D9               	addwf	fsr2l,f,c
  8026   002E62  0E01               	movlw	1
  8027   002E64  6EDF               	movwf	indf2,c
  8028   002E66                     
  8029                           ;dc_motor.c: 148:     (mR->direction) = 1;
  8030   002E66  5014               	movf	fullSpeedAhead@mR^0,w,c
  8031   002E68  6ED9               	movwf	fsr2l,c
  8032   002E6A  6ADA               	clrf	fsr2h,c
  8033   002E6C  0E01               	movlw	1
  8034   002E6E  26D9               	addwf	fsr2l,f,c
  8035   002E70  0E01               	movlw	1
  8036   002E72  6EDF               	movwf	indf2,c
  8037                           
  8038                           ;dc_motor.c: 149:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  8039   002E74  EF6C  F017         	goto	l4347
  8040   002E78                     l4335:
  8041                           
  8042                           ;dc_motor.c: 150:         if (mL->power<leftGear) {mL->power++;}
  8043   002E78  5013               	movf	fullSpeedAhead@mL^0,w,c
  8044   002E7A  6ED9               	movwf	fsr2l,c
  8045   002E7C  6ADA               	clrf	fsr2h,c
  8046   002E7E  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  8047   002E80  5CDE               	subwf	postinc2,w,c
  8048   002E82  B0D8               	btfsc	status,0,c
  8049   002E84  EF46  F017         	goto	u3761
  8050   002E88  EF48  F017         	goto	u3760
  8051   002E8C                     u3761:
  8052   002E8C  EF4C  F017         	goto	l258
  8053   002E90                     u3760:
  8054   002E90  5013               	movf	fullSpeedAhead@mL^0,w,c
  8055   002E92  6ED9               	movwf	fsr2l,c
  8056   002E94  6ADA               	clrf	fsr2h,c
  8057   002E96  2ADF               	incf	indf2,f,c
  8058   002E98                     l258:
  8059                           
  8060                           ;dc_motor.c: 151:         if (mR->power<rightGear) {mR->power++;}
  8061   002E98  5014               	movf	fullSpeedAhead@mR^0,w,c
  8062   002E9A  6ED9               	movwf	fsr2l,c
  8063   002E9C  6ADA               	clrf	fsr2h,c
  8064   002E9E  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  8065   002EA0  5CDE               	subwf	postinc2,w,c
  8066   002EA2  B0D8               	btfsc	status,0,c
  8067   002EA4  EF56  F017         	goto	u3771
  8068   002EA8  EF58  F017         	goto	u3770
  8069   002EAC                     u3771:
  8070   002EAC  EF5C  F017         	goto	l4341
  8071   002EB0                     u3770:
  8072   002EB0  5014               	movf	fullSpeedAhead@mR^0,w,c
  8073   002EB2  6ED9               	movwf	fsr2l,c
  8074   002EB4  6ADA               	clrf	fsr2h,c
  8075   002EB6  2ADF               	incf	indf2,f,c
  8076   002EB8                     l4341:
  8077                           
  8078                           ;dc_motor.c: 152:         setMotorPWM(mL);
  8079   002EB8  C013  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  8080   002EBC  ECE8  F012         	call	_setMotorPWM	;wreg free
  8081   002EC0                     
  8082                           ;dc_motor.c: 153:         setMotorPWM(mR);
  8083   002EC0  C014  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  8084   002EC4  ECE8  F012         	call	_setMotorPWM	;wreg free
  8085   002EC8                     
  8086                           ;dc_motor.c: 154:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  8087   002EC8  0EA7               	movlw	167
  8088   002ECA  6E15               	movwf	??_fullSpeedAhead^0,c
  8089   002ECC  0E3A               	movlw	58
  8090   002ECE                     u4277:
  8091   002ECE  2EE8               	decfsz	wreg,f,c
  8092   002ED0  D7FE               	bra	u4277
  8093   002ED2  2E15               	decfsz	??_fullSpeedAhead^0,f,c
  8094   002ED4  D7FC               	bra	u4277
  8095   002ED6  D000               	nop2	
  8096   002ED8                     l4347:
  8097                           
  8098                           ;dc_motor.c: 149:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  8099   002ED8  5013               	movf	fullSpeedAhead@mL^0,w,c
  8100   002EDA  6ED9               	movwf	fsr2l,c
  8101   002EDC  6ADA               	clrf	fsr2h,c
  8102   002EDE  5016               	movf	fullSpeedAhead@leftGear^0,w,c
  8103   002EE0  5CDE               	subwf	postinc2,w,c
  8104   002EE2  A0D8               	btfss	status,0,c
  8105   002EE4  EF76  F017         	goto	u3781
  8106   002EE8  EF78  F017         	goto	u3780
  8107   002EEC                     u3781:
  8108   002EEC  EF3C  F017         	goto	l4335
  8109   002EF0                     u3780:
  8110   002EF0  5014               	movf	fullSpeedAhead@mR^0,w,c
  8111   002EF2  6ED9               	movwf	fsr2l,c
  8112   002EF4  6ADA               	clrf	fsr2h,c
  8113   002EF6  5017               	movf	fullSpeedAhead@rightGear^0,w,c
  8114   002EF8  5CDE               	subwf	postinc2,w,c
  8115   002EFA  A0D8               	btfss	status,0,c
  8116   002EFC  EF82  F017         	goto	u3791
  8117   002F00  EF84  F017         	goto	u3790
  8118   002F04                     u3791:
  8119   002F04  EF3C  F017         	goto	l4335
  8120   002F08                     u3790:
  8121   002F08  0012               	return		;funcret
  8122   002F0A                     __end_of_fullSpeedAhead:
  8123                           	callstack 0
  8124                           
  8125 ;; *************** function _setMotorPWM *****************
  8126 ;; Defined at:
  8127 ;;		line 68 in file "dc_motor.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;  m               1   13[COMRAM] PTR struct DC_motor
  8130 ;;		 -> main@motorR(9), main@motorL(9), 
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;  negDuty         1   17[COMRAM] unsigned char 
  8133 ;;  posDuty         1   16[COMRAM] unsigned char 
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  1    wreg      void 
  8136 ;; Registers used:
  8137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8143 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8145 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8146 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8147 ;;Total ram usage:        5 bytes
  8148 ;; Hardware stack levels used: 1
  8149 ;; Hardware stack levels required when called: 2
  8150 ;; This function calls:
  8151 ;;		___lwdiv
  8152 ;;		___wmul
  8153 ;; This function is called by:
  8154 ;;		_stop
  8155 ;;		_turnLeft
  8156 ;;		_turnRight
  8157 ;;		_fullSpeedAhead
  8158 ;;		_fullSpeedReverse
  8159 ;; This function uses a non-reentrant model
  8160 ;;
  8161                           
  8162                           	psect	text55
  8163   0025D0                     __ptext55:
  8164                           	callstack 0
  8165   0025D0                     _setMotorPWM:
  8166                           	callstack 26
  8167   0025D0                     
  8168                           ;dc_motor.c: 68: void setMotorPWM(DC_motor *m);dc_motor.c: 69: {;dc_motor.c: 70:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 72:     if(m->brakemode) {
  8169   0025D0  500E               	movf	setMotorPWM@m^0,w,c
  8170   0025D2  6ED9               	movwf	fsr2l,c
  8171   0025D4  6ADA               	clrf	fsr2h,c
  8172   0025D6  0E02               	movlw	2
  8173   0025D8  26D9               	addwf	fsr2l,f,c
  8174   0025DA  50DF               	movf	indf2,w,c
  8175   0025DC  B4D8               	btfsc	status,2,c
  8176   0025DE  EFF3  F012         	goto	u2031
  8177   0025E2  EFF5  F012         	goto	u2030
  8178   0025E6                     u2031:
  8179   0025E6  EF25  F013         	goto	l3213
  8180   0025EA                     u2030:
  8181   0025EA                     
  8182                           ;dc_motor.c: 73:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  8183   0025EA  500E               	movf	setMotorPWM@m^0,w,c
  8184   0025EC  6ED9               	movwf	fsr2l,c
  8185   0025EE  6ADA               	clrf	fsr2h,c
  8186   0025F0  50DF               	movf	indf2,w,c
  8187   0025F2  6E0F               	movwf	??_setMotorPWM^0,c
  8188   0025F4  500F               	movf	??_setMotorPWM^0,w,c
  8189   0025F6  6E01               	movwf	___wmul@multiplier^0,c
  8190   0025F8  6A02               	clrf	(___wmul@multiplier+1)^0,c
  8191   0025FA  500E               	movf	setMotorPWM@m^0,w,c
  8192   0025FC  6ED9               	movwf	fsr2l,c
  8193   0025FE  6ADA               	clrf	fsr2h,c
  8194   002600  0E03               	movlw	3
  8195   002602  26D9               	addwf	fsr2l,f,c
  8196   002604  CFDE F003          	movff	postinc2,___wmul@multiplicand
  8197   002608  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  8198   00260C  EC73  F020         	call	___wmul	;wreg free
  8199   002610  C001  F007         	movff	?___wmul,___lwdiv@dividend
  8200   002614  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  8201   002618  0E00               	movlw	0
  8202   00261A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  8203   00261C  0E64               	movlw	100
  8204   00261E  6E09               	movwf	___lwdiv@divisor^0,c
  8205   002620  EC08  F01B         	call	___lwdiv	;wreg free
  8206   002624  500E               	movf	setMotorPWM@m^0,w,c
  8207   002626  6ED9               	movwf	fsr2l,c
  8208   002628  6ADA               	clrf	fsr2h,c
  8209   00262A  0E03               	movlw	3
  8210   00262C  26D9               	addwf	fsr2l,f,c
  8211   00262E  50DF               	movf	indf2,w,c
  8212   002630  6E10               	movwf	(??_setMotorPWM+1)^0,c
  8213   002632  5007               	movf	?___lwdiv^0,w,c
  8214   002634  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  8215   002636  6E11               	movwf	setMotorPWM@posDuty^0,c
  8216   002638                     
  8217                           ;dc_motor.c: 74:         negDuty=(unsigned char)(m->PWMperiod);
  8218   002638  500E               	movf	setMotorPWM@m^0,w,c
  8219   00263A  6ED9               	movwf	fsr2l,c
  8220   00263C  6ADA               	clrf	fsr2h,c
  8221   00263E  0E03               	movlw	3
  8222   002640  26D9               	addwf	fsr2l,f,c
  8223   002642  50DF               	movf	indf2,w,c
  8224   002644  6E12               	movwf	setMotorPWM@negDuty^0,c
  8225                           
  8226                           ;dc_motor.c: 75:     }
  8227   002646  EF46  F013         	goto	l3217
  8228   00264A                     l3213:
  8229                           
  8230                           ;dc_motor.c: 77:         posDuty=0;
  8231   00264A  0E00               	movlw	0
  8232   00264C  6E11               	movwf	setMotorPWM@posDuty^0,c
  8233   00264E                     
  8234                           ;dc_motor.c: 78:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  8235   00264E  500E               	movf	setMotorPWM@m^0,w,c
  8236   002650  6ED9               	movwf	fsr2l,c
  8237   002652  6ADA               	clrf	fsr2h,c
  8238   002654  50DF               	movf	indf2,w,c
  8239   002656  6E0F               	movwf	??_setMotorPWM^0,c
  8240   002658  500F               	movf	??_setMotorPWM^0,w,c
  8241   00265A  6E01               	movwf	___wmul@multiplier^0,c
  8242   00265C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  8243   00265E  500E               	movf	setMotorPWM@m^0,w,c
  8244   002660  6ED9               	movwf	fsr2l,c
  8245   002662  6ADA               	clrf	fsr2h,c
  8246   002664  0E03               	movlw	3
  8247   002666  26D9               	addwf	fsr2l,f,c
  8248   002668  CFDE F003          	movff	postinc2,___wmul@multiplicand
  8249   00266C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  8250   002670  EC73  F020         	call	___wmul	;wreg free
  8251   002674  C001  F007         	movff	?___wmul,___lwdiv@dividend
  8252   002678  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  8253   00267C  0E00               	movlw	0
  8254   00267E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  8255   002680  0E64               	movlw	100
  8256   002682  6E09               	movwf	___lwdiv@divisor^0,c
  8257   002684  EC08  F01B         	call	___lwdiv	;wreg free
  8258   002688  5007               	movf	?___lwdiv^0,w,c
  8259   00268A  6E12               	movwf	setMotorPWM@negDuty^0,c
  8260   00268C                     l3217:
  8261                           
  8262                           ;dc_motor.c: 81:     if (m->direction) {
  8263   00268C  500E               	movf	setMotorPWM@m^0,w,c
  8264   00268E  6ED9               	movwf	fsr2l,c
  8265   002690  6ADA               	clrf	fsr2h,c
  8266   002692  0E01               	movlw	1
  8267   002694  26D9               	addwf	fsr2l,f,c
  8268   002696  50DF               	movf	indf2,w,c
  8269   002698  B4D8               	btfsc	status,2,c
  8270   00269A  EF51  F013         	goto	u2041
  8271   00269E  EF53  F013         	goto	u2040
  8272   0026A2                     u2041:
  8273   0026A2  EF73  F013         	goto	l3221
  8274   0026A6                     u2040:
  8275   0026A6                     
  8276                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=posDuty;
  8277   0026A6  500E               	movf	setMotorPWM@m^0,w,c
  8278   0026A8  6ED9               	movwf	fsr2l,c
  8279   0026AA  6ADA               	clrf	fsr2h,c
  8280   0026AC  0E05               	movlw	5
  8281   0026AE  26D9               	addwf	fsr2l,f,c
  8282   0026B0  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8283   0026B4  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8284   0026B8  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8285   0026BC  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8286   0026C0  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  8287                           
  8288                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=negDuty;
  8289   0026C4  500E               	movf	setMotorPWM@m^0,w,c
  8290   0026C6  6ED9               	movwf	fsr2l,c
  8291   0026C8  6ADA               	clrf	fsr2h,c
  8292   0026CA  0E07               	movlw	7
  8293   0026CC  26D9               	addwf	fsr2l,f,c
  8294   0026CE  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8295   0026D2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8296   0026D6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8297   0026DA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8298   0026DE  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  8299                           
  8300                           ;dc_motor.c: 84:     } else {
  8301   0026E2  EF91  F013         	goto	l229
  8302   0026E6                     l3221:
  8303                           
  8304                           ;dc_motor.c: 85:         *(m->posDutyHighByte)=negDuty;
  8305   0026E6  500E               	movf	setMotorPWM@m^0,w,c
  8306   0026E8  6ED9               	movwf	fsr2l,c
  8307   0026EA  6ADA               	clrf	fsr2h,c
  8308   0026EC  0E05               	movlw	5
  8309   0026EE  26D9               	addwf	fsr2l,f,c
  8310   0026F0  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8311   0026F4  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8312   0026F8  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8313   0026FC  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8314   002700  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  8315                           
  8316                           ;dc_motor.c: 86:         *(m->negDutyHighByte)=posDuty;
  8317   002704  500E               	movf	setMotorPWM@m^0,w,c
  8318   002706  6ED9               	movwf	fsr2l,c
  8319   002708  6ADA               	clrf	fsr2h,c
  8320   00270A  0E07               	movlw	7
  8321   00270C  26D9               	addwf	fsr2l,f,c
  8322   00270E  CFDE F00F          	movff	postinc2,??_setMotorPWM
  8323   002712  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  8324   002716  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  8325   00271A  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8326   00271E  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  8327   002722                     l229:
  8328   002722  0012               	return		;funcret
  8329   002724                     __end_of_setMotorPWM:
  8330                           	callstack 0
  8331                           
  8332 ;; *************** function ___wmul *****************
  8333 ;; Defined at:
  8334 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  multiplier      2    0[COMRAM] unsigned int 
  8337 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  product         2    4[COMRAM] unsigned int 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  2    0[COMRAM] unsigned int 
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0, prodl, prodh
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8349 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8352 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8353 ;;Total ram usage:        6 bytes
  8354 ;; Hardware stack levels used: 1
  8355 ;; Hardware stack levels required when called: 1
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_setMotorPWM
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           	psect	text56
  8364   0040E6                     __ptext56:
  8365                           	callstack 0
  8366   0040E6                     ___wmul:
  8367                           	callstack 26
  8368   0040E6  5001               	movf	___wmul@multiplier^0,w,c
  8369   0040E8  0203               	mulwf	___wmul@multiplicand^0,c
  8370   0040EA  CFF3 F005          	movff	prodl,___wmul@product
  8371   0040EE  CFF4 F006          	movff	prodh,___wmul@product+1
  8372   0040F2  5001               	movf	___wmul@multiplier^0,w,c
  8373   0040F4  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  8374   0040F6  50F3               	movf	243,w,c
  8375   0040F8  2606               	addwf	(___wmul@product+1)^0,f,c
  8376   0040FA  5002               	movf	(___wmul@multiplier+1)^0,w,c
  8377   0040FC  0203               	mulwf	___wmul@multiplicand^0,c
  8378   0040FE  50F3               	movf	243,w,c
  8379   004100  2606               	addwf	(___wmul@product+1)^0,f,c
  8380   004102  C005  F001         	movff	___wmul@product,?___wmul
  8381   004106  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8382   00410A  0012               	return		;funcret
  8383   00410C                     __end_of___wmul:
  8384                           	callstack 0
  8385                           
  8386 ;; *************** function ___lwdiv *****************
  8387 ;; Defined at:
  8388 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  dividend        2    6[COMRAM] unsigned int 
  8391 ;;  divisor         2    8[COMRAM] unsigned int 
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;  quotient        2   10[COMRAM] unsigned int 
  8394 ;;  counter         1   12[COMRAM] unsigned char 
  8395 ;; Return value:  Size  Location     Type
  8396 ;;                  2    6[COMRAM] unsigned int 
  8397 ;; Registers used:
  8398 ;;		wreg, status,2, status,0
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : 0/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8404 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8405 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8407 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8408 ;;Total ram usage:        7 bytes
  8409 ;; Hardware stack levels used: 1
  8410 ;; Hardware stack levels required when called: 1
  8411 ;; This function calls:
  8412 ;;		Nothing
  8413 ;; This function is called by:
  8414 ;;		_setMotorPWM
  8415 ;;		_vfpfcnvrt
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           	psect	text57
  8420   003610                     __ptext57:
  8421                           	callstack 0
  8422   003610                     ___lwdiv:
  8423                           	callstack 26
  8424   003610  0E00               	movlw	0
  8425   003612  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  8426   003614  0E00               	movlw	0
  8427   003616  6E0B               	movwf	___lwdiv@quotient^0,c
  8428   003618  5009               	movf	___lwdiv@divisor^0,w,c
  8429   00361A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8430   00361C  B4D8               	btfsc	status,2,c
  8431   00361E  EF13  F01B         	goto	u2001
  8432   003622  EF15  F01B         	goto	u2000
  8433   003626                     u2001:
  8434   003626  EF3D  F01B         	goto	l1245
  8435   00362A                     u2000:
  8436   00362A  0E01               	movlw	1
  8437   00362C  6E0D               	movwf	___lwdiv@counter^0,c
  8438   00362E  EF1D  F01B         	goto	l3193
  8439   003632                     l3191:
  8440   003632  90D8               	bcf	status,0,c
  8441   003634  3609               	rlcf	___lwdiv@divisor^0,f,c
  8442   003636  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8443   003638  2A0D               	incf	___lwdiv@counter^0,f,c
  8444   00363A                     l3193:
  8445   00363A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  8446   00363C  EF22  F01B         	goto	u2011
  8447   003640  EF24  F01B         	goto	u2010
  8448   003644                     u2011:
  8449   003644  EF19  F01B         	goto	l3191
  8450   003648                     u2010:
  8451   003648                     l3195:
  8452   003648  90D8               	bcf	status,0,c
  8453   00364A  360B               	rlcf	___lwdiv@quotient^0,f,c
  8454   00364C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8455   00364E  5009               	movf	___lwdiv@divisor^0,w,c
  8456   003650  5C07               	subwf	___lwdiv@dividend^0,w,c
  8457   003652  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  8458   003654  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8459   003656  A0D8               	btfss	status,0,c
  8460   003658  EF30  F01B         	goto	u2021
  8461   00365C  EF32  F01B         	goto	u2020
  8462   003660                     u2021:
  8463   003660  EF37  F01B         	goto	l3203
  8464   003664                     u2020:
  8465   003664  5009               	movf	___lwdiv@divisor^0,w,c
  8466   003666  5E07               	subwf	___lwdiv@dividend^0,f,c
  8467   003668  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  8468   00366A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8469   00366C  800B               	bsf	___lwdiv@quotient^0,0,c
  8470   00366E                     l3203:
  8471   00366E  90D8               	bcf	status,0,c
  8472   003670  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8473   003672  3209               	rrcf	___lwdiv@divisor^0,f,c
  8474   003674  2E0D               	decfsz	___lwdiv@counter^0,f,c
  8475   003676  EF24  F01B         	goto	l3195
  8476   00367A                     l1245:
  8477   00367A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  8478   00367E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8479   003682  0012               	return		;funcret
  8480   003684                     __end_of___lwdiv:
  8481                           	callstack 0
  8482                           
  8483 ;; *************** function _convert_HSV *****************
  8484 ;; Defined at:
  8485 ;;		line 209 in file "color.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  8488 ;;		 -> main@HSV_colour(6), 
  8489 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  8490 ;;		 -> main@RGBC_colour(8), 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  temp            4   51[COMRAM] unsigned long 
  8493 ;;  temp            4   47[COMRAM] unsigned long 
  8494 ;;  temp            4   43[COMRAM] unsigned long 
  8495 ;;  temp            4   39[COMRAM] unsigned long 
  8496 ;;  temp            4   55[COMRAM] unsigned long 
  8497 ;;  temp            4   35[COMRAM] unsigned long 
  8498 ;;  temp            4   31[COMRAM] unsigned long 
  8499 ;;  C               2   63[COMRAM] unsigned int 
  8500 ;;  M               2   61[COMRAM] unsigned int 
  8501 ;;  hue_scale       2   59[COMRAM] unsigned int 
  8502 ;;  hue             2   29[COMRAM] unsigned int 
  8503 ;;  sat             2   27[COMRAM] unsigned int 
  8504 ;;  m               2   25[COMRAM] unsigned int 
  8505 ;;  sat_scale       2   23[COMRAM] unsigned int 
  8506 ;; Return value:  Size  Location     Type
  8507 ;;                  1    wreg      void 
  8508 ;; Registers used:
  8509 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8516 ;;      Locals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8517 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8518 ;;      Totals:        52       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8519 ;;Total ram usage:       52 bytes
  8520 ;; Hardware stack levels used: 1
  8521 ;; Hardware stack levels required when called: 2
  8522 ;; This function calls:
  8523 ;;		___lldiv
  8524 ;;		___lmul
  8525 ;;		_max_RGB
  8526 ;;		_min_RGB
  8527 ;; This function is called by:
  8528 ;;		_forward_navigation
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           	psect	text58
  8533   000E1A                     __ptext58:
  8534                           	callstack 0
  8535   000E1A                     _convert_HSV:
  8536                           	callstack 27
  8537   000E1A                     
  8538                           ;color.c: 209: void convert_HSV(struct HSV_val *p1,struct RGBC_val *p2);color.c: 210: {;
      +                          color.c: 211:     unsigned int hue = 0;
  8539   000E1A  0E00               	movlw	0
  8540   000E1C  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  8541   000E1E  0E00               	movlw	0
  8542   000E20  6E1E               	movwf	convert_HSV@hue^0,c
  8543                           
  8544                           ;color.c: 213:     unsigned int hue_scale = 60;
  8545   000E22  0E00               	movlw	0
  8546   000E24  6E3D               	movwf	(convert_HSV@hue_scale+1)^0,c
  8547   000E26  0E3C               	movlw	60
  8548   000E28  6E3C               	movwf	convert_HSV@hue_scale^0,c
  8549                           
  8550                           ;color.c: 214:     unsigned int sat_scale = 100;
  8551   000E2A  0E00               	movlw	0
  8552   000E2C  6E19               	movwf	(convert_HSV@sat_scale+1)^0,c
  8553   000E2E  0E64               	movlw	100
  8554   000E30  6E18               	movwf	convert_HSV@sat_scale^0,c
  8555   000E32                     
  8556                           ;color.c: 216:     unsigned int M = max_RGB(p2);
  8557   000E32  C00F  F001         	movff	convert_HSV@p2,max_RGB@p
  8558   000E36  EC8F  F01A         	call	_max_RGB	;wreg free
  8559   000E3A  C001  F03E         	movff	?_max_RGB,convert_HSV@M
  8560   000E3E  C002  F03F         	movff	?_max_RGB+1,convert_HSV@M+1
  8561   000E42                     
  8562                           ;color.c: 217:     unsigned int m = min_RGB(p2);
  8563   000E42  C00F  F001         	movff	convert_HSV@p2,min_RGB@p
  8564   000E46  EC51  F01A         	call	_min_RGB	;wreg free
  8565   000E4A  C001  F01A         	movff	?_min_RGB,convert_HSV@m
  8566   000E4E  C002  F01B         	movff	?_min_RGB+1,convert_HSV@m+1
  8567   000E52                     
  8568                           ;color.c: 218:     unsigned int C = M - m;
  8569   000E52  501A               	movf	convert_HSV@m^0,w,c
  8570   000E54  5C3E               	subwf	convert_HSV@M^0,w,c
  8571   000E56  6E40               	movwf	convert_HSV@C^0,c
  8572   000E58  501B               	movf	(convert_HSV@m+1)^0,w,c
  8573   000E5A  583F               	subwfb	(convert_HSV@M+1)^0,w,c
  8574   000E5C  6E41               	movwf	(convert_HSV@C+1)^0,c
  8575   000E5E                     
  8576                           ;color.c: 220:     if (C == 0) {
  8577   000E5E  5040               	movf	convert_HSV@C^0,w,c
  8578   000E60  1041               	iorwf	(convert_HSV@C+1)^0,w,c
  8579   000E62  A4D8               	btfss	status,2,c
  8580   000E64  EF36  F007         	goto	u3321
  8581   000E68  EF38  F007         	goto	u3320
  8582   000E6C                     u3321:
  8583   000E6C  EF3E  F007         	goto	l4137
  8584   000E70                     u3320:
  8585   000E70                     
  8586                           ;color.c: 221:         hue = 0;
  8587   000E70  0E00               	movlw	0
  8588   000E72  6E1F               	movwf	(convert_HSV@hue+1)^0,c
  8589   000E74  0E00               	movlw	0
  8590   000E76  6E1E               	movwf	convert_HSV@hue^0,c
  8591                           
  8592                           ;color.c: 222:     } else {
  8593   000E78  EF0E  F00A         	goto	l4221
  8594   000E7C                     l4137:
  8595                           
  8596                           ;color.c: 232:         if (M == p2->R) {
  8597   000E7C  500F               	movf	convert_HSV@p2^0,w,c
  8598   000E7E  6ED9               	movwf	fsr2l,c
  8599   000E80  6ADA               	clrf	fsr2h,c
  8600   000E82  503E               	movf	convert_HSV@M^0,w,c
  8601   000E84  18DE               	xorwf	postinc2,w,c
  8602   000E86  E107               	bnz	u3331
  8603   000E88  503F               	movf	(convert_HSV@M+1)^0,w,c
  8604   000E8A  18DE               	xorwf	postinc2,w,c
  8605   000E8C  A4D8               	btfss	status,2,c
  8606   000E8E  EF4B  F007         	goto	u3331
  8607   000E92  EF4D  F007         	goto	u3330
  8608   000E96                     u3331:
  8609   000E96  EF3A  F008         	goto	l4165
  8610   000E9A                     u3330:
  8611   000E9A                     
  8612                           ;color.c: 233:             if (p2->G >= p2->B) {
  8613   000E9A  500F               	movf	convert_HSV@p2^0,w,c
  8614   000E9C  6ED9               	movwf	fsr2l,c
  8615   000E9E  6ADA               	clrf	fsr2h,c
  8616   000EA0  0E04               	movlw	4
  8617   000EA2  26D9               	addwf	fsr2l,f,c
  8618   000EA4  500F               	movf	convert_HSV@p2^0,w,c
  8619   000EA6  6EE1               	movwf	fsr1l,c
  8620   000EA8  6AE2               	clrf	fsr1h,c
  8621   000EAA  0E02               	movlw	2
  8622   000EAC  26E1               	addwf	fsr1l,f,c
  8623   000EAE  50DE               	movf	postinc2,w,c
  8624   000EB0  5CE6               	subwf	postinc1,w,c
  8625   000EB2  50DE               	movf	postinc2,w,c
  8626   000EB4  58E6               	subwfb	postinc1,w,c
  8627   000EB6  A0D8               	btfss	status,0,c
  8628   000EB8  EF60  F007         	goto	u3341
  8629   000EBC  EF62  F007         	goto	u3340
  8630   000EC0                     u3341:
  8631   000EC0  EFC2  F007         	goto	l4153
  8632   000EC4                     u3340:
  8633   000EC4                     
  8634                           ;color.c: 237:                 temp *= 0;
  8635   000EC4  0E00               	movlw	0
  8636   000EC6  6E24               	movwf	convert_HSV@temp^0,c
  8637   000EC8  0E00               	movlw	0
  8638   000ECA  6E25               	movwf	(convert_HSV@temp+1)^0,c
  8639   000ECC  0E00               	movlw	0
  8640   000ECE  6E26               	movwf	(convert_HSV@temp+2)^0,c
  8641   000ED0  0E00               	movlw	0
  8642   000ED2  6E27               	movwf	(convert_HSV@temp+3)^0,c
  8643   000ED4                     
  8644                           ;color.c: 238:                 temp += (unsigned long)(p2->G - p2->B);
  8645   000ED4  500F               	movf	convert_HSV@p2^0,w,c
  8646   000ED6  6ED9               	movwf	fsr2l,c
  8647   000ED8  6ADA               	clrf	fsr2h,c
  8648   000EDA  0E04               	movlw	4
  8649   000EDC  26D9               	addwf	fsr2l,f,c
  8650   000EDE  CFDE F010          	movff	postinc2,??_convert_HSV
  8651   000EE2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8652   000EE6  500F               	movf	convert_HSV@p2^0,w,c
  8653   000EE8  6ED9               	movwf	fsr2l,c
  8654   000EEA  6ADA               	clrf	fsr2h,c
  8655   000EEC  0E02               	movlw	2
  8656   000EEE  26D9               	addwf	fsr2l,f,c
  8657   000EF0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8658   000EF4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8659   000EF8  5010               	movf	??_convert_HSV^0,w,c
  8660   000EFA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8661   000EFC  6E14               	movwf	(??_convert_HSV+4)^0,c
  8662   000EFE  5011               	movf	(??_convert_HSV+1)^0,w,c
  8663   000F00  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8664   000F02  6E15               	movwf	(??_convert_HSV+5)^0,c
  8665   000F04  5014               	movf	(??_convert_HSV+4)^0,w,c
  8666   000F06  2624               	addwf	convert_HSV@temp^0,f,c
  8667   000F08  5015               	movf	(??_convert_HSV+5)^0,w,c
  8668   000F0A  2225               	addwfc	(convert_HSV@temp+1)^0,f,c
  8669   000F0C  0E00               	movlw	0
  8670   000F0E  2226               	addwfc	(convert_HSV@temp+2)^0,f,c
  8671   000F10  0E00               	movlw	0
  8672   000F12  2227               	addwfc	(convert_HSV@temp+3)^0,f,c
  8673   000F14                     
  8674                           ;color.c: 239:                 temp *= (unsigned long)hue_scale;
  8675   000F14  C024  F001         	movff	convert_HSV@temp,___lmul@multiplier
  8676   000F18  C025  F002         	movff	convert_HSV@temp+1,___lmul@multiplier+1
  8677   000F1C  C026  F003         	movff	convert_HSV@temp+2,___lmul@multiplier+2
  8678   000F20  C027  F004         	movff	convert_HSV@temp+3,___lmul@multiplier+3
  8679   000F24  0E3C               	movlw	60
  8680   000F26  6E05               	movwf	___lmul@multiplicand^0,c
  8681   000F28  0E00               	movlw	0
  8682   000F2A  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8683   000F2C  0E00               	movlw	0
  8684   000F2E  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8685   000F30  0E00               	movlw	0
  8686   000F32  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8687   000F34  EC42  F01B         	call	___lmul	;wreg free
  8688   000F38  C001  F024         	movff	?___lmul,convert_HSV@temp
  8689   000F3C  C002  F025         	movff	?___lmul+1,convert_HSV@temp+1
  8690   000F40  C003  F026         	movff	?___lmul+2,convert_HSV@temp+2
  8691   000F44  C004  F027         	movff	?___lmul+3,convert_HSV@temp+3
  8692   000F48                     
  8693                           ;color.c: 240:                 temp /= (unsigned long)C;
  8694   000F48  C024  F001         	movff	convert_HSV@temp,___lldiv@dividend
  8695   000F4C  C025  F002         	movff	convert_HSV@temp+1,___lldiv@dividend+1
  8696   000F50  C026  F003         	movff	convert_HSV@temp+2,___lldiv@dividend+2
  8697   000F54  C027  F004         	movff	convert_HSV@temp+3,___lldiv@dividend+3
  8698   000F58  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  8699   000F5C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  8700   000F60  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8701   000F62  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8702   000F64  ECF0  F018         	call	___lldiv	;wreg free
  8703   000F68  C001  F024         	movff	?___lldiv,convert_HSV@temp
  8704   000F6C  C002  F025         	movff	?___lldiv+1,convert_HSV@temp+1
  8705   000F70  C003  F026         	movff	?___lldiv+2,convert_HSV@temp+2
  8706   000F74  C004  F027         	movff	?___lldiv+3,convert_HSV@temp+3
  8707   000F78                     
  8708                           ;color.c: 241:                 hue = (unsigned int)temp;
  8709   000F78  C024  F01E         	movff	convert_HSV@temp,convert_HSV@hue
  8710   000F7C  C025  F01F         	movff	convert_HSV@temp+1,convert_HSV@hue+1
  8711                           
  8712                           ;color.c: 242:             } else {
  8713   000F80  EF3A  F008         	goto	l4165
  8714   000F84                     l4153:
  8715                           
  8716                           ;color.c: 244:                 unsigned long temp;;color.c: 245:                 temp = 
      +                          (unsigned long)C;
  8717   000F84  C040  F038         	movff	convert_HSV@C,convert_HSV@temp_609
  8718   000F88  C041  F039         	movff	convert_HSV@C+1,convert_HSV@temp_609+1
  8719   000F8C  6A3A               	clrf	(convert_HSV@temp_609+2)^0,c
  8720   000F8E  6A3B               	clrf	(convert_HSV@temp_609+3)^0,c
  8721   000F90                     
  8722                           ;color.c: 246:                 temp *= 6;
  8723   000F90  C038  F001         	movff	convert_HSV@temp_609,___lmul@multiplier
  8724   000F94  C039  F002         	movff	convert_HSV@temp_609+1,___lmul@multiplier+1
  8725   000F98  C03A  F003         	movff	convert_HSV@temp_609+2,___lmul@multiplier+2
  8726   000F9C  C03B  F004         	movff	convert_HSV@temp_609+3,___lmul@multiplier+3
  8727   000FA0  0E06               	movlw	6
  8728   000FA2  6E05               	movwf	___lmul@multiplicand^0,c
  8729   000FA4  0E00               	movlw	0
  8730   000FA6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8731   000FA8  0E00               	movlw	0
  8732   000FAA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8733   000FAC  0E00               	movlw	0
  8734   000FAE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8735   000FB0  EC42  F01B         	call	___lmul	;wreg free
  8736   000FB4  C001  F038         	movff	?___lmul,convert_HSV@temp_609
  8737   000FB8  C002  F039         	movff	?___lmul+1,convert_HSV@temp_609+1
  8738   000FBC  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_609+2
  8739   000FC0  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_609+3
  8740   000FC4                     
  8741                           ;color.c: 247:                 temp -= (unsigned long)(p2->B - p2->G);
  8742   000FC4  500F               	movf	convert_HSV@p2^0,w,c
  8743   000FC6  6ED9               	movwf	fsr2l,c
  8744   000FC8  6ADA               	clrf	fsr2h,c
  8745   000FCA  0E02               	movlw	2
  8746   000FCC  26D9               	addwf	fsr2l,f,c
  8747   000FCE  CFDE F010          	movff	postinc2,??_convert_HSV
  8748   000FD2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8749   000FD6  500F               	movf	convert_HSV@p2^0,w,c
  8750   000FD8  6ED9               	movwf	fsr2l,c
  8751   000FDA  6ADA               	clrf	fsr2h,c
  8752   000FDC  0E04               	movlw	4
  8753   000FDE  26D9               	addwf	fsr2l,f,c
  8754   000FE0  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8755   000FE4  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8756   000FE8  5010               	movf	??_convert_HSV^0,w,c
  8757   000FEA  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8758   000FEC  6E14               	movwf	(??_convert_HSV+4)^0,c
  8759   000FEE  5011               	movf	(??_convert_HSV+1)^0,w,c
  8760   000FF0  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8761   000FF2  6E15               	movwf	(??_convert_HSV+5)^0,c
  8762   000FF4  6A16               	clrf	(??_convert_HSV+6)^0,c
  8763   000FF6  6A17               	clrf	(??_convert_HSV+7)^0,c
  8764   000FF8  5014               	movf	(??_convert_HSV+4)^0,w,c
  8765   000FFA  5E38               	subwf	convert_HSV@temp_609^0,f,c
  8766   000FFC  5015               	movf	(??_convert_HSV+5)^0,w,c
  8767   000FFE  5A39               	subwfb	(convert_HSV@temp_609+1)^0,f,c
  8768   001000  5016               	movf	(??_convert_HSV+6)^0,w,c
  8769   001002  5A3A               	subwfb	(convert_HSV@temp_609+2)^0,f,c
  8770   001004  5017               	movf	(??_convert_HSV+7)^0,w,c
  8771   001006  5A3B               	subwfb	(convert_HSV@temp_609+3)^0,f,c
  8772   001008                     
  8773                           ;color.c: 248:                 temp *= (unsigned long)hue_scale;
  8774   001008  C038  F001         	movff	convert_HSV@temp_609,___lmul@multiplier
  8775   00100C  C039  F002         	movff	convert_HSV@temp_609+1,___lmul@multiplier+1
  8776   001010  C03A  F003         	movff	convert_HSV@temp_609+2,___lmul@multiplier+2
  8777   001014  C03B  F004         	movff	convert_HSV@temp_609+3,___lmul@multiplier+3
  8778   001018  0E3C               	movlw	60
  8779   00101A  6E05               	movwf	___lmul@multiplicand^0,c
  8780   00101C  0E00               	movlw	0
  8781   00101E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8782   001020  0E00               	movlw	0
  8783   001022  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8784   001024  0E00               	movlw	0
  8785   001026  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8786   001028  EC42  F01B         	call	___lmul	;wreg free
  8787   00102C  C001  F038         	movff	?___lmul,convert_HSV@temp_609
  8788   001030  C002  F039         	movff	?___lmul+1,convert_HSV@temp_609+1
  8789   001034  C003  F03A         	movff	?___lmul+2,convert_HSV@temp_609+2
  8790   001038  C004  F03B         	movff	?___lmul+3,convert_HSV@temp_609+3
  8791   00103C                     
  8792                           ;color.c: 249:                 temp /= (unsigned long)C;
  8793   00103C  C038  F001         	movff	convert_HSV@temp_609,___lldiv@dividend
  8794   001040  C039  F002         	movff	convert_HSV@temp_609+1,___lldiv@dividend+1
  8795   001044  C03A  F003         	movff	convert_HSV@temp_609+2,___lldiv@dividend+2
  8796   001048  C03B  F004         	movff	convert_HSV@temp_609+3,___lldiv@dividend+3
  8797   00104C  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  8798   001050  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  8799   001054  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8800   001056  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8801   001058  ECF0  F018         	call	___lldiv	;wreg free
  8802   00105C  C001  F038         	movff	?___lldiv,convert_HSV@temp_609
  8803   001060  C002  F039         	movff	?___lldiv+1,convert_HSV@temp_609+1
  8804   001064  C003  F03A         	movff	?___lldiv+2,convert_HSV@temp_609+2
  8805   001068  C004  F03B         	movff	?___lldiv+3,convert_HSV@temp_609+3
  8806   00106C                     
  8807                           ;color.c: 250:                 hue = (unsigned int)temp;
  8808   00106C  C038  F01E         	movff	convert_HSV@temp_609,convert_HSV@hue
  8809   001070  C039  F01F         	movff	convert_HSV@temp_609+1,convert_HSV@hue+1
  8810   001074                     l4165:
  8811                           
  8812                           ;color.c: 253:         if (M == p2->G) {
  8813   001074  500F               	movf	convert_HSV@p2^0,w,c
  8814   001076  6ED9               	movwf	fsr2l,c
  8815   001078  6ADA               	clrf	fsr2h,c
  8816   00107A  0E02               	movlw	2
  8817   00107C  26D9               	addwf	fsr2l,f,c
  8818   00107E  503E               	movf	convert_HSV@M^0,w,c
  8819   001080  18DE               	xorwf	postinc2,w,c
  8820   001082  E107               	bnz	u3351
  8821   001084  503F               	movf	(convert_HSV@M+1)^0,w,c
  8822   001086  18DE               	xorwf	postinc2,w,c
  8823   001088  A4D8               	btfss	status,2,c
  8824   00108A  EF49  F008         	goto	u3351
  8825   00108E  EF4B  F008         	goto	u3350
  8826   001092                     u3351:
  8827   001092  EF20  F009         	goto	l4193
  8828   001096                     u3350:
  8829   001096                     
  8830                           ;color.c: 254:             if (p2->B >= p2->R) {
  8831   001096  500F               	movf	convert_HSV@p2^0,w,c
  8832   001098  6ED9               	movwf	fsr2l,c
  8833   00109A  6ADA               	clrf	fsr2h,c
  8834   00109C  500F               	movf	convert_HSV@p2^0,w,c
  8835   00109E  6EE1               	movwf	fsr1l,c
  8836   0010A0  6AE2               	clrf	fsr1h,c
  8837   0010A2  0E04               	movlw	4
  8838   0010A4  26E1               	addwf	fsr1l,f,c
  8839   0010A6  50DE               	movf	postinc2,w,c
  8840   0010A8  5CE6               	subwf	postinc1,w,c
  8841   0010AA  50DE               	movf	postinc2,w,c
  8842   0010AC  58E6               	subwfb	postinc1,w,c
  8843   0010AE  A0D8               	btfss	status,0,c
  8844   0010B0  EF5C  F008         	goto	u3361
  8845   0010B4  EF5E  F008         	goto	u3360
  8846   0010B8                     u3361:
  8847   0010B8  EFBF  F008         	goto	l4181
  8848   0010BC                     u3360:
  8849   0010BC                     
  8850                           ;color.c: 256:                 unsigned long temp;;color.c: 257:                 temp = 
      +                          (unsigned long)C;
  8851   0010BC  C040  F028         	movff	convert_HSV@C,convert_HSV@temp_610
  8852   0010C0  C041  F029         	movff	convert_HSV@C+1,convert_HSV@temp_610+1
  8853   0010C4  6A2A               	clrf	(convert_HSV@temp_610+2)^0,c
  8854   0010C6  6A2B               	clrf	(convert_HSV@temp_610+3)^0,c
  8855   0010C8                     
  8856                           ;color.c: 258:                 temp *= 2;
  8857   0010C8  90D8               	bcf	status,0,c
  8858   0010CA  3628               	rlcf	convert_HSV@temp_610^0,f,c
  8859   0010CC  3629               	rlcf	(convert_HSV@temp_610+1)^0,f,c
  8860   0010CE  362A               	rlcf	(convert_HSV@temp_610+2)^0,f,c
  8861   0010D0  362B               	rlcf	(convert_HSV@temp_610+3)^0,f,c
  8862   0010D2                     
  8863                           ;color.c: 259:                 temp += (unsigned long)(p2->B - p2->R);
  8864   0010D2  500F               	movf	convert_HSV@p2^0,w,c
  8865   0010D4  6ED9               	movwf	fsr2l,c
  8866   0010D6  6ADA               	clrf	fsr2h,c
  8867   0010D8  CFDE F010          	movff	postinc2,??_convert_HSV
  8868   0010DC  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8869   0010E0  500F               	movf	convert_HSV@p2^0,w,c
  8870   0010E2  6ED9               	movwf	fsr2l,c
  8871   0010E4  6ADA               	clrf	fsr2h,c
  8872   0010E6  0E04               	movlw	4
  8873   0010E8  26D9               	addwf	fsr2l,f,c
  8874   0010EA  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8875   0010EE  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8876   0010F2  5010               	movf	??_convert_HSV^0,w,c
  8877   0010F4  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8878   0010F6  6E14               	movwf	(??_convert_HSV+4)^0,c
  8879   0010F8  5011               	movf	(??_convert_HSV+1)^0,w,c
  8880   0010FA  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8881   0010FC  6E15               	movwf	(??_convert_HSV+5)^0,c
  8882   0010FE  5014               	movf	(??_convert_HSV+4)^0,w,c
  8883   001100  2628               	addwf	convert_HSV@temp_610^0,f,c
  8884   001102  5015               	movf	(??_convert_HSV+5)^0,w,c
  8885   001104  2229               	addwfc	(convert_HSV@temp_610+1)^0,f,c
  8886   001106  0E00               	movlw	0
  8887   001108  222A               	addwfc	(convert_HSV@temp_610+2)^0,f,c
  8888   00110A  0E00               	movlw	0
  8889   00110C  222B               	addwfc	(convert_HSV@temp_610+3)^0,f,c
  8890   00110E                     
  8891                           ;color.c: 260:                 temp *= (unsigned long)hue_scale;
  8892   00110E  C028  F001         	movff	convert_HSV@temp_610,___lmul@multiplier
  8893   001112  C029  F002         	movff	convert_HSV@temp_610+1,___lmul@multiplier+1
  8894   001116  C02A  F003         	movff	convert_HSV@temp_610+2,___lmul@multiplier+2
  8895   00111A  C02B  F004         	movff	convert_HSV@temp_610+3,___lmul@multiplier+3
  8896   00111E  0E3C               	movlw	60
  8897   001120  6E05               	movwf	___lmul@multiplicand^0,c
  8898   001122  0E00               	movlw	0
  8899   001124  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8900   001126  0E00               	movlw	0
  8901   001128  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8902   00112A  0E00               	movlw	0
  8903   00112C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8904   00112E  EC42  F01B         	call	___lmul	;wreg free
  8905   001132  C001  F028         	movff	?___lmul,convert_HSV@temp_610
  8906   001136  C002  F029         	movff	?___lmul+1,convert_HSV@temp_610+1
  8907   00113A  C003  F02A         	movff	?___lmul+2,convert_HSV@temp_610+2
  8908   00113E  C004  F02B         	movff	?___lmul+3,convert_HSV@temp_610+3
  8909   001142                     
  8910                           ;color.c: 261:                 temp /= (unsigned long)C;
  8911   001142  C028  F001         	movff	convert_HSV@temp_610,___lldiv@dividend
  8912   001146  C029  F002         	movff	convert_HSV@temp_610+1,___lldiv@dividend+1
  8913   00114A  C02A  F003         	movff	convert_HSV@temp_610+2,___lldiv@dividend+2
  8914   00114E  C02B  F004         	movff	convert_HSV@temp_610+3,___lldiv@dividend+3
  8915   001152  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  8916   001156  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  8917   00115A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  8918   00115C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  8919   00115E  ECF0  F018         	call	___lldiv	;wreg free
  8920   001162  C001  F028         	movff	?___lldiv,convert_HSV@temp_610
  8921   001166  C002  F029         	movff	?___lldiv+1,convert_HSV@temp_610+1
  8922   00116A  C003  F02A         	movff	?___lldiv+2,convert_HSV@temp_610+2
  8923   00116E  C004  F02B         	movff	?___lldiv+3,convert_HSV@temp_610+3
  8924   001172                     
  8925                           ;color.c: 262:                 hue = (unsigned int)temp;
  8926   001172  C028  F01E         	movff	convert_HSV@temp_610,convert_HSV@hue
  8927   001176  C029  F01F         	movff	convert_HSV@temp_610+1,convert_HSV@hue+1
  8928                           
  8929                           ;color.c: 263:             } else {
  8930   00117A  EF20  F009         	goto	l4193
  8931   00117E                     l4181:
  8932                           
  8933                           ;color.c: 265:                 unsigned long temp;;color.c: 266:                 temp = 
      +                          (unsigned long)C;
  8934   00117E  C040  F02C         	movff	convert_HSV@C,convert_HSV@temp_611
  8935   001182  C041  F02D         	movff	convert_HSV@C+1,convert_HSV@temp_611+1
  8936   001186  6A2E               	clrf	(convert_HSV@temp_611+2)^0,c
  8937   001188  6A2F               	clrf	(convert_HSV@temp_611+3)^0,c
  8938   00118A                     
  8939                           ;color.c: 267:                 temp *= 2;
  8940   00118A  90D8               	bcf	status,0,c
  8941   00118C  362C               	rlcf	convert_HSV@temp_611^0,f,c
  8942   00118E  362D               	rlcf	(convert_HSV@temp_611+1)^0,f,c
  8943   001190  362E               	rlcf	(convert_HSV@temp_611+2)^0,f,c
  8944   001192  362F               	rlcf	(convert_HSV@temp_611+3)^0,f,c
  8945   001194                     
  8946                           ;color.c: 268:                 temp -= (unsigned long)(p2->R - p2->B);
  8947   001194  500F               	movf	convert_HSV@p2^0,w,c
  8948   001196  6ED9               	movwf	fsr2l,c
  8949   001198  6ADA               	clrf	fsr2h,c
  8950   00119A  0E04               	movlw	4
  8951   00119C  26D9               	addwf	fsr2l,f,c
  8952   00119E  CFDE F010          	movff	postinc2,??_convert_HSV
  8953   0011A2  CFDD F011          	movff	postdec2,??_convert_HSV+1
  8954   0011A6  500F               	movf	convert_HSV@p2^0,w,c
  8955   0011A8  6ED9               	movwf	fsr2l,c
  8956   0011AA  6ADA               	clrf	fsr2h,c
  8957   0011AC  CFDE F012          	movff	postinc2,??_convert_HSV+2
  8958   0011B0  CFDD F013          	movff	postdec2,??_convert_HSV+3
  8959   0011B4  5010               	movf	??_convert_HSV^0,w,c
  8960   0011B6  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  8961   0011B8  6E14               	movwf	(??_convert_HSV+4)^0,c
  8962   0011BA  5011               	movf	(??_convert_HSV+1)^0,w,c
  8963   0011BC  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  8964   0011BE  6E15               	movwf	(??_convert_HSV+5)^0,c
  8965   0011C0  6A16               	clrf	(??_convert_HSV+6)^0,c
  8966   0011C2  6A17               	clrf	(??_convert_HSV+7)^0,c
  8967   0011C4  5014               	movf	(??_convert_HSV+4)^0,w,c
  8968   0011C6  5E2C               	subwf	convert_HSV@temp_611^0,f,c
  8969   0011C8  5015               	movf	(??_convert_HSV+5)^0,w,c
  8970   0011CA  5A2D               	subwfb	(convert_HSV@temp_611+1)^0,f,c
  8971   0011CC  5016               	movf	(??_convert_HSV+6)^0,w,c
  8972   0011CE  5A2E               	subwfb	(convert_HSV@temp_611+2)^0,f,c
  8973   0011D0  5017               	movf	(??_convert_HSV+7)^0,w,c
  8974   0011D2  5A2F               	subwfb	(convert_HSV@temp_611+3)^0,f,c
  8975   0011D4                     
  8976                           ;color.c: 269:                 temp *= (unsigned long)hue_scale;
  8977   0011D4  C02C  F001         	movff	convert_HSV@temp_611,___lmul@multiplier
  8978   0011D8  C02D  F002         	movff	convert_HSV@temp_611+1,___lmul@multiplier+1
  8979   0011DC  C02E  F003         	movff	convert_HSV@temp_611+2,___lmul@multiplier+2
  8980   0011E0  C02F  F004         	movff	convert_HSV@temp_611+3,___lmul@multiplier+3
  8981   0011E4  0E3C               	movlw	60
  8982   0011E6  6E05               	movwf	___lmul@multiplicand^0,c
  8983   0011E8  0E00               	movlw	0
  8984   0011EA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  8985   0011EC  0E00               	movlw	0
  8986   0011EE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  8987   0011F0  0E00               	movlw	0
  8988   0011F2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  8989   0011F4  EC42  F01B         	call	___lmul	;wreg free
  8990   0011F8  C001  F02C         	movff	?___lmul,convert_HSV@temp_611
  8991   0011FC  C002  F02D         	movff	?___lmul+1,convert_HSV@temp_611+1
  8992   001200  C003  F02E         	movff	?___lmul+2,convert_HSV@temp_611+2
  8993   001204  C004  F02F         	movff	?___lmul+3,convert_HSV@temp_611+3
  8994   001208                     
  8995                           ;color.c: 270:                 temp /= (unsigned long)C;
  8996   001208  C02C  F001         	movff	convert_HSV@temp_611,___lldiv@dividend
  8997   00120C  C02D  F002         	movff	convert_HSV@temp_611+1,___lldiv@dividend+1
  8998   001210  C02E  F003         	movff	convert_HSV@temp_611+2,___lldiv@dividend+2
  8999   001214  C02F  F004         	movff	convert_HSV@temp_611+3,___lldiv@dividend+3
  9000   001218  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  9001   00121C  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  9002   001220  6A07               	clrf	(___lldiv@divisor+2)^0,c
  9003   001222  6A08               	clrf	(___lldiv@divisor+3)^0,c
  9004   001224  ECF0  F018         	call	___lldiv	;wreg free
  9005   001228  C001  F02C         	movff	?___lldiv,convert_HSV@temp_611
  9006   00122C  C002  F02D         	movff	?___lldiv+1,convert_HSV@temp_611+1
  9007   001230  C003  F02E         	movff	?___lldiv+2,convert_HSV@temp_611+2
  9008   001234  C004  F02F         	movff	?___lldiv+3,convert_HSV@temp_611+3
  9009   001238                     
  9010                           ;color.c: 271:                 hue = (unsigned int)temp;
  9011   001238  C02C  F01E         	movff	convert_HSV@temp_611,convert_HSV@hue
  9012   00123C  C02D  F01F         	movff	convert_HSV@temp_611+1,convert_HSV@hue+1
  9013   001240                     l4193:
  9014                           
  9015                           ;color.c: 274:         if (M == p2->B) {
  9016   001240  500F               	movf	convert_HSV@p2^0,w,c
  9017   001242  6ED9               	movwf	fsr2l,c
  9018   001244  6ADA               	clrf	fsr2h,c
  9019   001246  0E04               	movlw	4
  9020   001248  26D9               	addwf	fsr2l,f,c
  9021   00124A  503E               	movf	convert_HSV@M^0,w,c
  9022   00124C  18DE               	xorwf	postinc2,w,c
  9023   00124E  E107               	bnz	u3371
  9024   001250  503F               	movf	(convert_HSV@M+1)^0,w,c
  9025   001252  18DE               	xorwf	postinc2,w,c
  9026   001254  A4D8               	btfss	status,2,c
  9027   001256  EF2F  F009         	goto	u3371
  9028   00125A  EF31  F009         	goto	u3370
  9029   00125E                     u3371:
  9030   00125E  EF0E  F00A         	goto	l4221
  9031   001262                     u3370:
  9032   001262                     
  9033                           ;color.c: 275:             if (p2->R >= p2->G) {
  9034   001262  500F               	movf	convert_HSV@p2^0,w,c
  9035   001264  6ED9               	movwf	fsr2l,c
  9036   001266  6ADA               	clrf	fsr2h,c
  9037   001268  0E02               	movlw	2
  9038   00126A  26D9               	addwf	fsr2l,f,c
  9039   00126C  500F               	movf	convert_HSV@p2^0,w,c
  9040   00126E  6EE1               	movwf	fsr1l,c
  9041   001270  6AE2               	clrf	fsr1h,c
  9042   001272  50DE               	movf	postinc2,w,c
  9043   001274  5CE6               	subwf	postinc1,w,c
  9044   001276  50DE               	movf	postinc2,w,c
  9045   001278  58E6               	subwfb	postinc1,w,c
  9046   00127A  A0D8               	btfss	status,0,c
  9047   00127C  EF42  F009         	goto	u3381
  9048   001280  EF44  F009         	goto	u3380
  9049   001284                     u3381:
  9050   001284  EFA9  F009         	goto	l4209
  9051   001288                     u3380:
  9052   001288                     
  9053                           ;color.c: 277:                 unsigned long temp;;color.c: 278:                 temp = 
      +                          (unsigned long)C;
  9054   001288  C040  F030         	movff	convert_HSV@C,convert_HSV@temp_612
  9055   00128C  C041  F031         	movff	convert_HSV@C+1,convert_HSV@temp_612+1
  9056   001290  6A32               	clrf	(convert_HSV@temp_612+2)^0,c
  9057   001292  6A33               	clrf	(convert_HSV@temp_612+3)^0,c
  9058   001294                     
  9059                           ;color.c: 279:                 temp *= 4;
  9060   001294  0E02               	movlw	2
  9061   001296                     u3395:
  9062   001296  90D8               	bcf	status,0,c
  9063   001298  3630               	rlcf	convert_HSV@temp_612^0,f,c
  9064   00129A  3631               	rlcf	(convert_HSV@temp_612+1)^0,f,c
  9065   00129C  3632               	rlcf	(convert_HSV@temp_612+2)^0,f,c
  9066   00129E  3633               	rlcf	(convert_HSV@temp_612+3)^0,f,c
  9067   0012A0  2EE8               	decfsz	wreg,f,c
  9068   0012A2  EF4B  F009         	goto	u3395
  9069   0012A6                     
  9070                           ;color.c: 280:                 temp += (unsigned long)(p2->R - p2->G);
  9071   0012A6  500F               	movf	convert_HSV@p2^0,w,c
  9072   0012A8  6ED9               	movwf	fsr2l,c
  9073   0012AA  6ADA               	clrf	fsr2h,c
  9074   0012AC  0E02               	movlw	2
  9075   0012AE  26D9               	addwf	fsr2l,f,c
  9076   0012B0  CFDE F010          	movff	postinc2,??_convert_HSV
  9077   0012B4  CFDD F011          	movff	postdec2,??_convert_HSV+1
  9078   0012B8  500F               	movf	convert_HSV@p2^0,w,c
  9079   0012BA  6ED9               	movwf	fsr2l,c
  9080   0012BC  6ADA               	clrf	fsr2h,c
  9081   0012BE  CFDE F012          	movff	postinc2,??_convert_HSV+2
  9082   0012C2  CFDD F013          	movff	postdec2,??_convert_HSV+3
  9083   0012C6  5010               	movf	??_convert_HSV^0,w,c
  9084   0012C8  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  9085   0012CA  6E14               	movwf	(??_convert_HSV+4)^0,c
  9086   0012CC  5011               	movf	(??_convert_HSV+1)^0,w,c
  9087   0012CE  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  9088   0012D0  6E15               	movwf	(??_convert_HSV+5)^0,c
  9089   0012D2  5014               	movf	(??_convert_HSV+4)^0,w,c
  9090   0012D4  2630               	addwf	convert_HSV@temp_612^0,f,c
  9091   0012D6  5015               	movf	(??_convert_HSV+5)^0,w,c
  9092   0012D8  2231               	addwfc	(convert_HSV@temp_612+1)^0,f,c
  9093   0012DA  0E00               	movlw	0
  9094   0012DC  2232               	addwfc	(convert_HSV@temp_612+2)^0,f,c
  9095   0012DE  0E00               	movlw	0
  9096   0012E0  2233               	addwfc	(convert_HSV@temp_612+3)^0,f,c
  9097   0012E2                     
  9098                           ;color.c: 281:                 temp *= (unsigned long)hue_scale;
  9099   0012E2  C030  F001         	movff	convert_HSV@temp_612,___lmul@multiplier
  9100   0012E6  C031  F002         	movff	convert_HSV@temp_612+1,___lmul@multiplier+1
  9101   0012EA  C032  F003         	movff	convert_HSV@temp_612+2,___lmul@multiplier+2
  9102   0012EE  C033  F004         	movff	convert_HSV@temp_612+3,___lmul@multiplier+3
  9103   0012F2  0E3C               	movlw	60
  9104   0012F4  6E05               	movwf	___lmul@multiplicand^0,c
  9105   0012F6  0E00               	movlw	0
  9106   0012F8  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  9107   0012FA  0E00               	movlw	0
  9108   0012FC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  9109   0012FE  0E00               	movlw	0
  9110   001300  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  9111   001302  EC42  F01B         	call	___lmul	;wreg free
  9112   001306  C001  F030         	movff	?___lmul,convert_HSV@temp_612
  9113   00130A  C002  F031         	movff	?___lmul+1,convert_HSV@temp_612+1
  9114   00130E  C003  F032         	movff	?___lmul+2,convert_HSV@temp_612+2
  9115   001312  C004  F033         	movff	?___lmul+3,convert_HSV@temp_612+3
  9116   001316                     
  9117                           ;color.c: 282:                 temp /= (unsigned long)C;
  9118   001316  C030  F001         	movff	convert_HSV@temp_612,___lldiv@dividend
  9119   00131A  C031  F002         	movff	convert_HSV@temp_612+1,___lldiv@dividend+1
  9120   00131E  C032  F003         	movff	convert_HSV@temp_612+2,___lldiv@dividend+2
  9121   001322  C033  F004         	movff	convert_HSV@temp_612+3,___lldiv@dividend+3
  9122   001326  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  9123   00132A  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  9124   00132E  6A07               	clrf	(___lldiv@divisor+2)^0,c
  9125   001330  6A08               	clrf	(___lldiv@divisor+3)^0,c
  9126   001332  ECF0  F018         	call	___lldiv	;wreg free
  9127   001336  C001  F030         	movff	?___lldiv,convert_HSV@temp_612
  9128   00133A  C002  F031         	movff	?___lldiv+1,convert_HSV@temp_612+1
  9129   00133E  C003  F032         	movff	?___lldiv+2,convert_HSV@temp_612+2
  9130   001342  C004  F033         	movff	?___lldiv+3,convert_HSV@temp_612+3
  9131   001346                     
  9132                           ;color.c: 283:                 hue = (unsigned int)temp;
  9133   001346  C030  F01E         	movff	convert_HSV@temp_612,convert_HSV@hue
  9134   00134A  C031  F01F         	movff	convert_HSV@temp_612+1,convert_HSV@hue+1
  9135                           
  9136                           ;color.c: 284:             } else {
  9137   00134E  EF0E  F00A         	goto	l4221
  9138   001352                     l4209:
  9139                           
  9140                           ;color.c: 286:                 unsigned long temp;;color.c: 287:                 temp = 
      +                          (unsigned long)C;
  9141   001352  C040  F034         	movff	convert_HSV@C,convert_HSV@temp_613
  9142   001356  C041  F035         	movff	convert_HSV@C+1,convert_HSV@temp_613+1
  9143   00135A  6A36               	clrf	(convert_HSV@temp_613+2)^0,c
  9144   00135C  6A37               	clrf	(convert_HSV@temp_613+3)^0,c
  9145   00135E                     
  9146                           ;color.c: 288:                 temp *= 4;
  9147   00135E  0E02               	movlw	2
  9148   001360                     u3405:
  9149   001360  90D8               	bcf	status,0,c
  9150   001362  3634               	rlcf	convert_HSV@temp_613^0,f,c
  9151   001364  3635               	rlcf	(convert_HSV@temp_613+1)^0,f,c
  9152   001366  3636               	rlcf	(convert_HSV@temp_613+2)^0,f,c
  9153   001368  3637               	rlcf	(convert_HSV@temp_613+3)^0,f,c
  9154   00136A  2EE8               	decfsz	wreg,f,c
  9155   00136C  EFB0  F009         	goto	u3405
  9156   001370                     
  9157                           ;color.c: 289:                 temp -= (unsigned long)(p2->G - p2->R);
  9158   001370  500F               	movf	convert_HSV@p2^0,w,c
  9159   001372  6ED9               	movwf	fsr2l,c
  9160   001374  6ADA               	clrf	fsr2h,c
  9161   001376  CFDE F010          	movff	postinc2,??_convert_HSV
  9162   00137A  CFDD F011          	movff	postdec2,??_convert_HSV+1
  9163   00137E  500F               	movf	convert_HSV@p2^0,w,c
  9164   001380  6ED9               	movwf	fsr2l,c
  9165   001382  6ADA               	clrf	fsr2h,c
  9166   001384  0E02               	movlw	2
  9167   001386  26D9               	addwf	fsr2l,f,c
  9168   001388  CFDE F012          	movff	postinc2,??_convert_HSV+2
  9169   00138C  CFDD F013          	movff	postdec2,??_convert_HSV+3
  9170   001390  5010               	movf	??_convert_HSV^0,w,c
  9171   001392  5C12               	subwf	(??_convert_HSV+2)^0,w,c
  9172   001394  6E14               	movwf	(??_convert_HSV+4)^0,c
  9173   001396  5011               	movf	(??_convert_HSV+1)^0,w,c
  9174   001398  5813               	subwfb	(??_convert_HSV+3)^0,w,c
  9175   00139A  6E15               	movwf	(??_convert_HSV+5)^0,c
  9176   00139C  6A16               	clrf	(??_convert_HSV+6)^0,c
  9177   00139E  6A17               	clrf	(??_convert_HSV+7)^0,c
  9178   0013A0  5014               	movf	(??_convert_HSV+4)^0,w,c
  9179   0013A2  5E34               	subwf	convert_HSV@temp_613^0,f,c
  9180   0013A4  5015               	movf	(??_convert_HSV+5)^0,w,c
  9181   0013A6  5A35               	subwfb	(convert_HSV@temp_613+1)^0,f,c
  9182   0013A8  5016               	movf	(??_convert_HSV+6)^0,w,c
  9183   0013AA  5A36               	subwfb	(convert_HSV@temp_613+2)^0,f,c
  9184   0013AC  5017               	movf	(??_convert_HSV+7)^0,w,c
  9185   0013AE  5A37               	subwfb	(convert_HSV@temp_613+3)^0,f,c
  9186   0013B0                     
  9187                           ;color.c: 290:                 temp *= (unsigned long)hue_scale;
  9188   0013B0  C034  F001         	movff	convert_HSV@temp_613,___lmul@multiplier
  9189   0013B4  C035  F002         	movff	convert_HSV@temp_613+1,___lmul@multiplier+1
  9190   0013B8  C036  F003         	movff	convert_HSV@temp_613+2,___lmul@multiplier+2
  9191   0013BC  C037  F004         	movff	convert_HSV@temp_613+3,___lmul@multiplier+3
  9192   0013C0  0E3C               	movlw	60
  9193   0013C2  6E05               	movwf	___lmul@multiplicand^0,c
  9194   0013C4  0E00               	movlw	0
  9195   0013C6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  9196   0013C8  0E00               	movlw	0
  9197   0013CA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  9198   0013CC  0E00               	movlw	0
  9199   0013CE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  9200   0013D0  EC42  F01B         	call	___lmul	;wreg free
  9201   0013D4  C001  F034         	movff	?___lmul,convert_HSV@temp_613
  9202   0013D8  C002  F035         	movff	?___lmul+1,convert_HSV@temp_613+1
  9203   0013DC  C003  F036         	movff	?___lmul+2,convert_HSV@temp_613+2
  9204   0013E0  C004  F037         	movff	?___lmul+3,convert_HSV@temp_613+3
  9205   0013E4                     
  9206                           ;color.c: 291:                 temp /= (unsigned long)C;
  9207   0013E4  C034  F001         	movff	convert_HSV@temp_613,___lldiv@dividend
  9208   0013E8  C035  F002         	movff	convert_HSV@temp_613+1,___lldiv@dividend+1
  9209   0013EC  C036  F003         	movff	convert_HSV@temp_613+2,___lldiv@dividend+2
  9210   0013F0  C037  F004         	movff	convert_HSV@temp_613+3,___lldiv@dividend+3
  9211   0013F4  C040  F005         	movff	convert_HSV@C,___lldiv@divisor
  9212   0013F8  C041  F006         	movff	convert_HSV@C+1,___lldiv@divisor+1
  9213   0013FC  6A07               	clrf	(___lldiv@divisor+2)^0,c
  9214   0013FE  6A08               	clrf	(___lldiv@divisor+3)^0,c
  9215   001400  ECF0  F018         	call	___lldiv	;wreg free
  9216   001404  C001  F034         	movff	?___lldiv,convert_HSV@temp_613
  9217   001408  C002  F035         	movff	?___lldiv+1,convert_HSV@temp_613+1
  9218   00140C  C003  F036         	movff	?___lldiv+2,convert_HSV@temp_613+2
  9219   001410  C004  F037         	movff	?___lldiv+3,convert_HSV@temp_613+3
  9220   001414                     
  9221                           ;color.c: 292:                 hue = (unsigned int)temp;
  9222   001414  C034  F01E         	movff	convert_HSV@temp_613,convert_HSV@hue
  9223   001418  C035  F01F         	movff	convert_HSV@temp_613+1,convert_HSV@hue+1
  9224   00141C                     l4221:
  9225                           
  9226                           ;color.c: 297:     if (M == 0) {
  9227   00141C  503E               	movf	convert_HSV@M^0,w,c
  9228   00141E  103F               	iorwf	(convert_HSV@M+1)^0,w,c
  9229   001420  A4D8               	btfss	status,2,c
  9230   001422  EF15  F00A         	goto	u3411
  9231   001426  EF17  F00A         	goto	u3410
  9232   00142A                     u3411:
  9233   00142A  EF1D  F00A         	goto	l4225
  9234   00142E                     u3410:
  9235   00142E                     
  9236                           ;color.c: 298:         sat = 0;
  9237   00142E  0E00               	movlw	0
  9238   001430  6E1D               	movwf	(convert_HSV@sat+1)^0,c
  9239   001432  0E00               	movlw	0
  9240   001434  6E1C               	movwf	convert_HSV@sat^0,c
  9241                           
  9242                           ;color.c: 299:     } else {
  9243   001436  EF59  F00A         	goto	l4233
  9244   00143A                     l4225:
  9245                           
  9246                           ;color.c: 301:         unsigned long temp;;color.c: 302:         temp = (unsigned long)C
      +                          ;
  9247   00143A  C040  F020         	movff	convert_HSV@C,convert_HSV@temp_614
  9248   00143E  C041  F021         	movff	convert_HSV@C+1,convert_HSV@temp_614+1
  9249   001442  6A22               	clrf	(convert_HSV@temp_614+2)^0,c
  9250   001444  6A23               	clrf	(convert_HSV@temp_614+3)^0,c
  9251   001446                     
  9252                           ;color.c: 303:         temp *= (unsigned long)sat_scale;
  9253   001446  C020  F001         	movff	convert_HSV@temp_614,___lmul@multiplier
  9254   00144A  C021  F002         	movff	convert_HSV@temp_614+1,___lmul@multiplier+1
  9255   00144E  C022  F003         	movff	convert_HSV@temp_614+2,___lmul@multiplier+2
  9256   001452  C023  F004         	movff	convert_HSV@temp_614+3,___lmul@multiplier+3
  9257   001456  0E64               	movlw	100
  9258   001458  6E05               	movwf	___lmul@multiplicand^0,c
  9259   00145A  0E00               	movlw	0
  9260   00145C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  9261   00145E  0E00               	movlw	0
  9262   001460  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  9263   001462  0E00               	movlw	0
  9264   001464  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  9265   001466  EC42  F01B         	call	___lmul	;wreg free
  9266   00146A  C001  F020         	movff	?___lmul,convert_HSV@temp_614
  9267   00146E  C002  F021         	movff	?___lmul+1,convert_HSV@temp_614+1
  9268   001472  C003  F022         	movff	?___lmul+2,convert_HSV@temp_614+2
  9269   001476  C004  F023         	movff	?___lmul+3,convert_HSV@temp_614+3
  9270   00147A                     
  9271                           ;color.c: 304:         temp /= (unsigned long)M;
  9272   00147A  C020  F001         	movff	convert_HSV@temp_614,___lldiv@dividend
  9273   00147E  C021  F002         	movff	convert_HSV@temp_614+1,___lldiv@dividend+1
  9274   001482  C022  F003         	movff	convert_HSV@temp_614+2,___lldiv@dividend+2
  9275   001486  C023  F004         	movff	convert_HSV@temp_614+3,___lldiv@dividend+3
  9276   00148A  C03E  F005         	movff	convert_HSV@M,___lldiv@divisor
  9277   00148E  C03F  F006         	movff	convert_HSV@M+1,___lldiv@divisor+1
  9278   001492  6A07               	clrf	(___lldiv@divisor+2)^0,c
  9279   001494  6A08               	clrf	(___lldiv@divisor+3)^0,c
  9280   001496  ECF0  F018         	call	___lldiv	;wreg free
  9281   00149A  C001  F020         	movff	?___lldiv,convert_HSV@temp_614
  9282   00149E  C002  F021         	movff	?___lldiv+1,convert_HSV@temp_614+1
  9283   0014A2  C003  F022         	movff	?___lldiv+2,convert_HSV@temp_614+2
  9284   0014A6  C004  F023         	movff	?___lldiv+3,convert_HSV@temp_614+3
  9285   0014AA                     
  9286                           ;color.c: 305:         sat = (unsigned int)temp;
  9287   0014AA  C020  F01C         	movff	convert_HSV@temp_614,convert_HSV@sat
  9288   0014AE  C021  F01D         	movff	convert_HSV@temp_614+1,convert_HSV@sat+1
  9289   0014B2                     l4233:
  9290                           
  9291                           ;color.c: 308:     p1->H = hue;
  9292   0014B2  500E               	movf	convert_HSV@p1^0,w,c
  9293   0014B4  6ED9               	movwf	fsr2l,c
  9294   0014B6  6ADA               	clrf	fsr2h,c
  9295   0014B8  C01E  FFDE         	movff	convert_HSV@hue,postinc2
  9296   0014BC  C01F  FFDD         	movff	convert_HSV@hue+1,postdec2
  9297   0014C0                     
  9298                           ;color.c: 309:     p1->S = sat;
  9299   0014C0  500E               	movf	convert_HSV@p1^0,w,c
  9300   0014C2  6ED9               	movwf	fsr2l,c
  9301   0014C4  6ADA               	clrf	fsr2h,c
  9302   0014C6  0E02               	movlw	2
  9303   0014C8  26D9               	addwf	fsr2l,f,c
  9304   0014CA  C01C  FFDE         	movff	convert_HSV@sat,postinc2
  9305   0014CE  C01D  FFDD         	movff	convert_HSV@sat+1,postdec2
  9306   0014D2                     
  9307                           ;color.c: 310:     p1->V = M;
  9308   0014D2  500E               	movf	convert_HSV@p1^0,w,c
  9309   0014D4  6ED9               	movwf	fsr2l,c
  9310   0014D6  6ADA               	clrf	fsr2h,c
  9311   0014D8  0E04               	movlw	4
  9312   0014DA  26D9               	addwf	fsr2l,f,c
  9313   0014DC  C03E  FFDE         	movff	convert_HSV@M,postinc2
  9314   0014E0  C03F  FFDD         	movff	convert_HSV@M+1,postdec2
  9315   0014E4  0012               	return		;funcret
  9316   0014E6                     __end_of_convert_HSV:
  9317                           	callstack 0
  9318                           
  9319 ;; *************** function _min_RGB *****************
  9320 ;; Defined at:
  9321 ;;		line 186 in file "color.c"
  9322 ;; Parameters:    Size  Location     Type
  9323 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  9324 ;;		 -> main@RGBC_colour(8), 
  9325 ;; Auto vars:     Size  Location     Type
  9326 ;;  min_val         2    4[COMRAM] unsigned int 
  9327 ;; Return value:  Size  Location     Type
  9328 ;;                  2    0[COMRAM] unsigned int 
  9329 ;; Registers used:
  9330 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9331 ;; Tracked objects:
  9332 ;;		On entry : 0/0
  9333 ;;		On exit  : 0/0
  9334 ;;		Unchanged: 0/0
  9335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9337 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9338 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9339 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9340 ;;Total ram usage:        6 bytes
  9341 ;; Hardware stack levels used: 1
  9342 ;; Hardware stack levels required when called: 1
  9343 ;; This function calls:
  9344 ;;		Nothing
  9345 ;; This function is called by:
  9346 ;;		_convert_HSV
  9347 ;; This function uses a non-reentrant model
  9348 ;;
  9349                           
  9350                           	psect	text59
  9351   0034A2                     __ptext59:
  9352                           	callstack 0
  9353   0034A2                     _min_RGB:
  9354                           	callstack 27
  9355   0034A2                     
  9356                           ;color.c: 186: unsigned int min_RGB(struct RGBC_val *p);color.c: 187: {;color.c: 188:   
      +                            unsigned int min_val = p->R;
  9357   0034A2  5001               	movf	min_RGB@p^0,w,c
  9358   0034A4  6ED9               	movwf	fsr2l,c
  9359   0034A6  6ADA               	clrf	fsr2h,c
  9360   0034A8  CFDE F005          	movff	postinc2,min_RGB@min_val
  9361   0034AC  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  9362   0034B0                     
  9363                           ;color.c: 189:     if (p->G < min_val) {min_val = p->G;}
  9364   0034B0  5001               	movf	min_RGB@p^0,w,c
  9365   0034B2  6ED9               	movwf	fsr2l,c
  9366   0034B4  6ADA               	clrf	fsr2h,c
  9367   0034B6  0E02               	movlw	2
  9368   0034B8  26D9               	addwf	fsr2l,f,c
  9369   0034BA  5005               	movf	min_RGB@min_val^0,w,c
  9370   0034BC  5CDE               	subwf	postinc2,w,c
  9371   0034BE  5006               	movf	(min_RGB@min_val+1)^0,w,c
  9372   0034C0  58DE               	subwfb	postinc2,w,c
  9373   0034C2  B0D8               	btfsc	status,0,c
  9374   0034C4  EF66  F01A         	goto	u2691
  9375   0034C8  EF68  F01A         	goto	u2690
  9376   0034CC                     u2691:
  9377   0034CC  EF71  F01A         	goto	l104
  9378   0034D0                     u2690:
  9379   0034D0  5001               	movf	min_RGB@p^0,w,c
  9380   0034D2  6ED9               	movwf	fsr2l,c
  9381   0034D4  6ADA               	clrf	fsr2h,c
  9382   0034D6  0E02               	movlw	2
  9383   0034D8  26D9               	addwf	fsr2l,f,c
  9384   0034DA  CFDE F005          	movff	postinc2,min_RGB@min_val
  9385   0034DE  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  9386   0034E2                     l104:
  9387                           
  9388                           ;color.c: 190:     if (p->B < min_val) {min_val = p->B;}
  9389   0034E2  5001               	movf	min_RGB@p^0,w,c
  9390   0034E4  6ED9               	movwf	fsr2l,c
  9391   0034E6  6ADA               	clrf	fsr2h,c
  9392   0034E8  0E04               	movlw	4
  9393   0034EA  26D9               	addwf	fsr2l,f,c
  9394   0034EC  5005               	movf	min_RGB@min_val^0,w,c
  9395   0034EE  5CDE               	subwf	postinc2,w,c
  9396   0034F0  5006               	movf	(min_RGB@min_val+1)^0,w,c
  9397   0034F2  58DE               	subwfb	postinc2,w,c
  9398   0034F4  B0D8               	btfsc	status,0,c
  9399   0034F6  EF7F  F01A         	goto	u2701
  9400   0034FA  EF81  F01A         	goto	u2700
  9401   0034FE                     u2701:
  9402   0034FE  EF8A  F01A         	goto	l3687
  9403   003502                     u2700:
  9404   003502  5001               	movf	min_RGB@p^0,w,c
  9405   003504  6ED9               	movwf	fsr2l,c
  9406   003506  6ADA               	clrf	fsr2h,c
  9407   003508  0E04               	movlw	4
  9408   00350A  26D9               	addwf	fsr2l,f,c
  9409   00350C  CFDE F005          	movff	postinc2,min_RGB@min_val
  9410   003510  CFDD F006          	movff	postdec2,min_RGB@min_val+1
  9411   003514                     l3687:
  9412                           
  9413                           ;color.c: 191:     return min_val;
  9414   003514  C005  F001         	movff	min_RGB@min_val,?_min_RGB
  9415   003518  C006  F002         	movff	min_RGB@min_val+1,?_min_RGB+1
  9416   00351C  0012               	return		;funcret
  9417   00351E                     __end_of_min_RGB:
  9418                           	callstack 0
  9419                           
  9420 ;; *************** function _max_RGB *****************
  9421 ;; Defined at:
  9422 ;;		line 175 in file "color.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;  p               1    0[COMRAM] PTR struct RGBC_val
  9425 ;;		 -> main@RGBC_colour(8), 
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;  max_val         2    4[COMRAM] unsigned int 
  9428 ;; Return value:  Size  Location     Type
  9429 ;;                  2    0[COMRAM] unsigned int 
  9430 ;; Registers used:
  9431 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9439 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9440 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9441 ;;Total ram usage:        6 bytes
  9442 ;; Hardware stack levels used: 1
  9443 ;; Hardware stack levels required when called: 1
  9444 ;; This function calls:
  9445 ;;		Nothing
  9446 ;; This function is called by:
  9447 ;;		_convert_HSV
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451                           	psect	text60
  9452   00351E                     __ptext60:
  9453                           	callstack 0
  9454   00351E                     _max_RGB:
  9455                           	callstack 27
  9456   00351E                     
  9457                           ;color.c: 175: unsigned int max_RGB(struct RGBC_val *p);color.c: 176: {;color.c: 177:   
      +                            unsigned int max_val = p->R;
  9458   00351E  5001               	movf	max_RGB@p^0,w,c
  9459   003520  6ED9               	movwf	fsr2l,c
  9460   003522  6ADA               	clrf	fsr2h,c
  9461   003524  CFDE F005          	movff	postinc2,max_RGB@max_val
  9462   003528  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  9463   00352C                     
  9464                           ;color.c: 178:     if (p->G > max_val) {max_val = p->G;}
  9465   00352C  5001               	movf	max_RGB@p^0,w,c
  9466   00352E  6ED9               	movwf	fsr2l,c
  9467   003530  6ADA               	clrf	fsr2h,c
  9468   003532  0E02               	movlw	2
  9469   003534  26D9               	addwf	fsr2l,f,c
  9470   003536  50DE               	movf	postinc2,w,c
  9471   003538  5C05               	subwf	max_RGB@max_val^0,w,c
  9472   00353A  50DE               	movf	postinc2,w,c
  9473   00353C  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  9474   00353E  B0D8               	btfsc	status,0,c
  9475   003540  EFA4  F01A         	goto	u2671
  9476   003544  EFA6  F01A         	goto	u2670
  9477   003548                     u2671:
  9478   003548  EFAF  F01A         	goto	l99
  9479   00354C                     u2670:
  9480   00354C  5001               	movf	max_RGB@p^0,w,c
  9481   00354E  6ED9               	movwf	fsr2l,c
  9482   003550  6ADA               	clrf	fsr2h,c
  9483   003552  0E02               	movlw	2
  9484   003554  26D9               	addwf	fsr2l,f,c
  9485   003556  CFDE F005          	movff	postinc2,max_RGB@max_val
  9486   00355A  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  9487   00355E                     l99:
  9488                           
  9489                           ;color.c: 179:     if (p->B > max_val) {max_val = p->B;}
  9490   00355E  5001               	movf	max_RGB@p^0,w,c
  9491   003560  6ED9               	movwf	fsr2l,c
  9492   003562  6ADA               	clrf	fsr2h,c
  9493   003564  0E04               	movlw	4
  9494   003566  26D9               	addwf	fsr2l,f,c
  9495   003568  50DE               	movf	postinc2,w,c
  9496   00356A  5C05               	subwf	max_RGB@max_val^0,w,c
  9497   00356C  50DE               	movf	postinc2,w,c
  9498   00356E  5806               	subwfb	(max_RGB@max_val+1)^0,w,c
  9499   003570  B0D8               	btfsc	status,0,c
  9500   003572  EFBD  F01A         	goto	u2681
  9501   003576  EFBF  F01A         	goto	u2680
  9502   00357A                     u2681:
  9503   00357A  EFC8  F01A         	goto	l3675
  9504   00357E                     u2680:
  9505   00357E  5001               	movf	max_RGB@p^0,w,c
  9506   003580  6ED9               	movwf	fsr2l,c
  9507   003582  6ADA               	clrf	fsr2h,c
  9508   003584  0E04               	movlw	4
  9509   003586  26D9               	addwf	fsr2l,f,c
  9510   003588  CFDE F005          	movff	postinc2,max_RGB@max_val
  9511   00358C  CFDD F006          	movff	postdec2,max_RGB@max_val+1
  9512   003590                     l3675:
  9513                           
  9514                           ;color.c: 180:     return max_val;
  9515   003590  C005  F001         	movff	max_RGB@max_val,?_max_RGB
  9516   003594  C006  F002         	movff	max_RGB@max_val+1,?_max_RGB+1
  9517   003598  0012               	return		;funcret
  9518   00359A                     __end_of_max_RGB:
  9519                           	callstack 0
  9520                           
  9521 ;; *************** function ___lmul *****************
  9522 ;; Defined at:
  9523 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  9524 ;; Parameters:    Size  Location     Type
  9525 ;;  multiplier      4    0[COMRAM] unsigned long 
  9526 ;;  multiplicand    4    4[COMRAM] unsigned long 
  9527 ;; Auto vars:     Size  Location     Type
  9528 ;;  product         4    8[COMRAM] unsigned long 
  9529 ;; Return value:  Size  Location     Type
  9530 ;;                  4    0[COMRAM] unsigned long 
  9531 ;; Registers used:
  9532 ;;		wreg, status,2, status,0
  9533 ;; Tracked objects:
  9534 ;;		On entry : 0/0
  9535 ;;		On exit  : 0/0
  9536 ;;		Unchanged: 0/0
  9537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9538 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9539 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9541 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9542 ;;Total ram usage:       12 bytes
  9543 ;; Hardware stack levels used: 1
  9544 ;; Hardware stack levels required when called: 1
  9545 ;; This function calls:
  9546 ;;		Nothing
  9547 ;; This function is called by:
  9548 ;;		_convert_HSV
  9549 ;; This function uses a non-reentrant model
  9550 ;;
  9551                           
  9552                           	psect	text61
  9553   003684                     __ptext61:
  9554                           	callstack 0
  9555   003684                     ___lmul:
  9556                           	callstack 27
  9557   003684  0E00               	movlw	0
  9558   003686  6E09               	movwf	___lmul@product^0,c
  9559   003688  0E00               	movlw	0
  9560   00368A  6E0A               	movwf	(___lmul@product+1)^0,c
  9561   00368C  0E00               	movlw	0
  9562   00368E  6E0B               	movwf	(___lmul@product+2)^0,c
  9563   003690  0E00               	movlw	0
  9564   003692  6E0C               	movwf	(___lmul@product+3)^0,c
  9565   003694                     l3819:
  9566   003694  A001               	btfss	___lmul@multiplier^0,0,c
  9567   003696  EF4F  F01B         	goto	u2741
  9568   00369A  EF51  F01B         	goto	u2740
  9569   00369E                     u2741:
  9570   00369E  EF59  F01B         	goto	l3823
  9571   0036A2                     u2740:
  9572   0036A2  5005               	movf	___lmul@multiplicand^0,w,c
  9573   0036A4  2609               	addwf	___lmul@product^0,f,c
  9574   0036A6  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  9575   0036A8  220A               	addwfc	(___lmul@product+1)^0,f,c
  9576   0036AA  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  9577   0036AC  220B               	addwfc	(___lmul@product+2)^0,f,c
  9578   0036AE  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  9579   0036B0  220C               	addwfc	(___lmul@product+3)^0,f,c
  9580   0036B2                     l3823:
  9581   0036B2  90D8               	bcf	status,0,c
  9582   0036B4  3605               	rlcf	___lmul@multiplicand^0,f,c
  9583   0036B6  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  9584   0036B8  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  9585   0036BA  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  9586   0036BC  90D8               	bcf	status,0,c
  9587   0036BE  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  9588   0036C0  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  9589   0036C2  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  9590   0036C4  3201               	rrcf	___lmul@multiplier^0,f,c
  9591   0036C6  5001               	movf	___lmul@multiplier^0,w,c
  9592   0036C8  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  9593   0036CA  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  9594   0036CC  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  9595   0036CE  A4D8               	btfss	status,2,c
  9596   0036D0  EF6C  F01B         	goto	u2751
  9597   0036D4  EF6E  F01B         	goto	u2750
  9598   0036D8                     u2751:
  9599   0036D8  EF4A  F01B         	goto	l3819
  9600   0036DC                     u2750:
  9601   0036DC  C009  F001         	movff	___lmul@product,?___lmul
  9602   0036E0  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  9603   0036E4  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  9604   0036E8  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  9605   0036EC  0012               	return		;funcret
  9606   0036EE                     __end_of___lmul:
  9607                           	callstack 0
  9608                           
  9609 ;; *************** function _colour_to_key *****************
  9610 ;; Defined at:
  9611 ;;		line 321 in file "color.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;  p1              1    0[COMRAM] PTR struct HSV_val
  9614 ;;		 -> main@HSV_colour(6), 
  9615 ;;  p2              1    1[COMRAM] PTR struct RGBC_val
  9616 ;;		 -> main@RGBC_colour(8), 
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;  key             1    4[COMRAM] unsigned char 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  1    wreg      unsigned char 
  9621 ;; Registers used:
  9622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9628 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9630 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9631 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9632 ;;Total ram usage:        5 bytes
  9633 ;; Hardware stack levels used: 1
  9634 ;; Hardware stack levels required when called: 1
  9635 ;; This function calls:
  9636 ;;		Nothing
  9637 ;; This function is called by:
  9638 ;;		_forward_navigation
  9639 ;; This function uses a non-reentrant model
  9640 ;;
  9641                           
  9642                           	psect	text62
  9643   0014E6                     __ptext62:
  9644                           	callstack 0
  9645   0014E6                     _colour_to_key:
  9646                           	callstack 28
  9647   0014E6                     
  9648                           ;color.c: 321: unsigned char colour_to_key(struct HSV_val *p1, struct RGBC_val *p2);colo
      +                          r.c: 322: {;color.c: 323:     unsigned char key = 0;
  9649   0014E6  0E00               	movlw	0
  9650   0014E8  6E05               	movwf	colour_to_key@key^0,c
  9651   0014EA                     
  9652                           ;color.c: 324:     if ( ((293 <= p1->H) && (p1->H <= 360)) &&
  9653   0014EA  5001               	movf	colour_to_key@p1^0,w,c
  9654   0014EC  6ED9               	movwf	fsr2l,c
  9655   0014EE  6ADA               	clrf	fsr2h,c
  9656   0014F0  0E25               	movlw	37
  9657   0014F2  5CDE               	subwf	postinc2,w,c
  9658   0014F4  0E01               	movlw	1
  9659   0014F6  58DE               	subwfb	postinc2,w,c
  9660   0014F8  A0D8               	btfss	status,0,c
  9661   0014FA  EF81  F00A         	goto	u3421
  9662   0014FE  EF83  F00A         	goto	u3420
  9663   001502                     u3421:
  9664   001502  EFB5  F00A         	goto	l4251
  9665   001506                     u3420:
  9666   001506  5001               	movf	colour_to_key@p1^0,w,c
  9667   001508  6ED9               	movwf	fsr2l,c
  9668   00150A  6ADA               	clrf	fsr2h,c
  9669   00150C  0E69               	movlw	105
  9670   00150E  5CDE               	subwf	postinc2,w,c
  9671   001510  0E01               	movlw	1
  9672   001512  58DE               	subwfb	postinc2,w,c
  9673   001514  B0D8               	btfsc	status,0,c
  9674   001516  EF8F  F00A         	goto	u3431
  9675   00151A  EF91  F00A         	goto	u3430
  9676   00151E                     u3431:
  9677   00151E  EFB5  F00A         	goto	l4251
  9678   001522                     u3430:
  9679   001522  5001               	movf	colour_to_key@p1^0,w,c
  9680   001524  6ED9               	movwf	fsr2l,c
  9681   001526  6ADA               	clrf	fsr2h,c
  9682   001528  0E02               	movlw	2
  9683   00152A  26D9               	addwf	fsr2l,f,c
  9684   00152C  0E01               	movlw	1
  9685   00152E  50DB               	movf	plusw2,w,c
  9686   001530  E109               	bnz	u3440
  9687   001532  0E2E               	movlw	46
  9688   001534  5CDE               	subwf	postinc2,w,c
  9689   001536  A0D8               	btfss	status,0,c
  9690   001538  EFA0  F00A         	goto	u3441
  9691   00153C  EFA2  F00A         	goto	u3440
  9692   001540                     u3441:
  9693   001540  EFB5  F00A         	goto	l4251
  9694   001544                     u3440:
  9695   001544  5001               	movf	colour_to_key@p1^0,w,c
  9696   001546  6ED9               	movwf	fsr2l,c
  9697   001548  6ADA               	clrf	fsr2h,c
  9698   00154A  0E02               	movlw	2
  9699   00154C  26D9               	addwf	fsr2l,f,c
  9700   00154E  0E01               	movlw	1
  9701   001550  50DB               	movf	plusw2,w,c
  9702   001552  E107               	bnz	u3451
  9703   001554  0E5B               	movlw	91
  9704   001556  5CDE               	subwf	postinc2,w,c
  9705   001558  B0D8               	btfsc	status,0,c
  9706   00155A  EFB1  F00A         	goto	u3451
  9707   00155E  EFB3  F00A         	goto	u3450
  9708   001562                     u3451:
  9709   001562  EFB5  F00A         	goto	l4251
  9710   001566                     u3450:
  9711   001566                     
  9712                           ;color.c: 325:          ((46 <= p1->S) && (p1->S <= 90))) {;color.c: 326:         key = 
      +                          1;
  9713   001566  0E01               	movlw	1
  9714   001568  6E05               	movwf	colour_to_key@key^0,c
  9715   00156A                     l4251:
  9716                           
  9717                           ;color.c: 329:     if ( ((113 <= p1->H) && (p1->H <= 153)) &&
  9718   00156A  5001               	movf	colour_to_key@p1^0,w,c
  9719   00156C  6ED9               	movwf	fsr2l,c
  9720   00156E  6ADA               	clrf	fsr2h,c
  9721   001570  0E01               	movlw	1
  9722   001572  50DB               	movf	plusw2,w,c
  9723   001574  E109               	bnz	u3460
  9724   001576  0E71               	movlw	113
  9725   001578  5CDE               	subwf	postinc2,w,c
  9726   00157A  A0D8               	btfss	status,0,c
  9727   00157C  EFC2  F00A         	goto	u3461
  9728   001580  EFC4  F00A         	goto	u3460
  9729   001584                     u3461:
  9730   001584  EFF7  F00A         	goto	l4261
  9731   001588                     u3460:
  9732   001588  5001               	movf	colour_to_key@p1^0,w,c
  9733   00158A  6ED9               	movwf	fsr2l,c
  9734   00158C  6ADA               	clrf	fsr2h,c
  9735   00158E  0E01               	movlw	1
  9736   001590  50DB               	movf	plusw2,w,c
  9737   001592  E107               	bnz	u3471
  9738   001594  0E9A               	movlw	154
  9739   001596  5CDE               	subwf	postinc2,w,c
  9740   001598  B0D8               	btfsc	status,0,c
  9741   00159A  EFD1  F00A         	goto	u3471
  9742   00159E  EFD3  F00A         	goto	u3470
  9743   0015A2                     u3471:
  9744   0015A2  EFF7  F00A         	goto	l4261
  9745   0015A6                     u3470:
  9746   0015A6  5001               	movf	colour_to_key@p1^0,w,c
  9747   0015A8  6ED9               	movwf	fsr2l,c
  9748   0015AA  6ADA               	clrf	fsr2h,c
  9749   0015AC  0E02               	movlw	2
  9750   0015AE  26D9               	addwf	fsr2l,f,c
  9751   0015B0  0E01               	movlw	1
  9752   0015B2  50DB               	movf	plusw2,w,c
  9753   0015B4  E109               	bnz	u3480
  9754   0015B6  0E0D               	movlw	13
  9755   0015B8  5CDE               	subwf	postinc2,w,c
  9756   0015BA  A0D8               	btfss	status,0,c
  9757   0015BC  EFE2  F00A         	goto	u3481
  9758   0015C0  EFE4  F00A         	goto	u3480
  9759   0015C4                     u3481:
  9760   0015C4  EFF7  F00A         	goto	l4261
  9761   0015C8                     u3480:
  9762   0015C8  5001               	movf	colour_to_key@p1^0,w,c
  9763   0015CA  6ED9               	movwf	fsr2l,c
  9764   0015CC  6ADA               	clrf	fsr2h,c
  9765   0015CE  0E02               	movlw	2
  9766   0015D0  26D9               	addwf	fsr2l,f,c
  9767   0015D2  0E01               	movlw	1
  9768   0015D4  50DB               	movf	plusw2,w,c
  9769   0015D6  E107               	bnz	u3491
  9770   0015D8  0E2C               	movlw	44
  9771   0015DA  5CDE               	subwf	postinc2,w,c
  9772   0015DC  B0D8               	btfsc	status,0,c
  9773   0015DE  EFF3  F00A         	goto	u3491
  9774   0015E2  EFF5  F00A         	goto	u3490
  9775   0015E6                     u3491:
  9776   0015E6  EFF7  F00A         	goto	l4261
  9777   0015EA                     u3490:
  9778   0015EA                     
  9779                           ;color.c: 330:          ((13 <= p1->S) && (p1->S <= 43))) {;color.c: 331:         key = 
      +                          2;
  9780   0015EA  0E02               	movlw	2
  9781   0015EC  6E05               	movwf	colour_to_key@key^0,c
  9782   0015EE                     l4261:
  9783                           
  9784                           ;color.c: 334:     if ( ((180 <= p1->H) && (p1->H <= 244)) &&
  9785   0015EE  5001               	movf	colour_to_key@p1^0,w,c
  9786   0015F0  6ED9               	movwf	fsr2l,c
  9787   0015F2  6ADA               	clrf	fsr2h,c
  9788   0015F4  0E01               	movlw	1
  9789   0015F6  50DB               	movf	plusw2,w,c
  9790   0015F8  E109               	bnz	u3500
  9791   0015FA  0EB4               	movlw	180
  9792   0015FC  5CDE               	subwf	postinc2,w,c
  9793   0015FE  A0D8               	btfss	status,0,c
  9794   001600  EF04  F00B         	goto	u3501
  9795   001604  EF06  F00B         	goto	u3500
  9796   001608                     u3501:
  9797   001608  EF39  F00B         	goto	l4271
  9798   00160C                     u3500:
  9799   00160C  5001               	movf	colour_to_key@p1^0,w,c
  9800   00160E  6ED9               	movwf	fsr2l,c
  9801   001610  6ADA               	clrf	fsr2h,c
  9802   001612  0E01               	movlw	1
  9803   001614  50DB               	movf	plusw2,w,c
  9804   001616  E107               	bnz	u3511
  9805   001618  0EF5               	movlw	245
  9806   00161A  5CDE               	subwf	postinc2,w,c
  9807   00161C  B0D8               	btfsc	status,0,c
  9808   00161E  EF13  F00B         	goto	u3511
  9809   001622  EF15  F00B         	goto	u3510
  9810   001626                     u3511:
  9811   001626  EF39  F00B         	goto	l4271
  9812   00162A                     u3510:
  9813   00162A  5001               	movf	colour_to_key@p1^0,w,c
  9814   00162C  6ED9               	movwf	fsr2l,c
  9815   00162E  6ADA               	clrf	fsr2h,c
  9816   001630  0E02               	movlw	2
  9817   001632  26D9               	addwf	fsr2l,f,c
  9818   001634  0E01               	movlw	1
  9819   001636  50DB               	movf	plusw2,w,c
  9820   001638  E109               	bnz	u3520
  9821   00163A  0E0D               	movlw	13
  9822   00163C  5CDE               	subwf	postinc2,w,c
  9823   00163E  A0D8               	btfss	status,0,c
  9824   001640  EF24  F00B         	goto	u3521
  9825   001644  EF26  F00B         	goto	u3520
  9826   001648                     u3521:
  9827   001648  EF39  F00B         	goto	l4271
  9828   00164C                     u3520:
  9829   00164C  5001               	movf	colour_to_key@p1^0,w,c
  9830   00164E  6ED9               	movwf	fsr2l,c
  9831   001650  6ADA               	clrf	fsr2h,c
  9832   001652  0E02               	movlw	2
  9833   001654  26D9               	addwf	fsr2l,f,c
  9834   001656  0E01               	movlw	1
  9835   001658  50DB               	movf	plusw2,w,c
  9836   00165A  E107               	bnz	u3531
  9837   00165C  0E39               	movlw	57
  9838   00165E  5CDE               	subwf	postinc2,w,c
  9839   001660  B0D8               	btfsc	status,0,c
  9840   001662  EF35  F00B         	goto	u3531
  9841   001666  EF37  F00B         	goto	u3530
  9842   00166A                     u3531:
  9843   00166A  EF39  F00B         	goto	l4271
  9844   00166E                     u3530:
  9845   00166E                     
  9846                           ;color.c: 335:          ((13 <= p1->S) && (p1->S <= 56))) {;color.c: 336:         key = 
      +                          3;
  9847   00166E  0E03               	movlw	3
  9848   001670  6E05               	movwf	colour_to_key@key^0,c
  9849   001672                     l4271:
  9850                           
  9851                           ;color.c: 339:     if ( ((10 <= p1->H) && (p1->H <= 31)) &&
  9852   001672  5001               	movf	colour_to_key@p1^0,w,c
  9853   001674  6ED9               	movwf	fsr2l,c
  9854   001676  6ADA               	clrf	fsr2h,c
  9855   001678  0E01               	movlw	1
  9856   00167A  50DB               	movf	plusw2,w,c
  9857   00167C  E109               	bnz	u3540
  9858   00167E  0E0A               	movlw	10
  9859   001680  5CDE               	subwf	postinc2,w,c
  9860   001682  A0D8               	btfss	status,0,c
  9861   001684  EF46  F00B         	goto	u3541
  9862   001688  EF48  F00B         	goto	u3540
  9863   00168C                     u3541:
  9864   00168C  EF7B  F00B         	goto	l4281
  9865   001690                     u3540:
  9866   001690  5001               	movf	colour_to_key@p1^0,w,c
  9867   001692  6ED9               	movwf	fsr2l,c
  9868   001694  6ADA               	clrf	fsr2h,c
  9869   001696  0E01               	movlw	1
  9870   001698  50DB               	movf	plusw2,w,c
  9871   00169A  E107               	bnz	u3551
  9872   00169C  0E20               	movlw	32
  9873   00169E  5CDE               	subwf	postinc2,w,c
  9874   0016A0  B0D8               	btfsc	status,0,c
  9875   0016A2  EF55  F00B         	goto	u3551
  9876   0016A6  EF57  F00B         	goto	u3550
  9877   0016AA                     u3551:
  9878   0016AA  EF7B  F00B         	goto	l4281
  9879   0016AE                     u3550:
  9880   0016AE  5001               	movf	colour_to_key@p1^0,w,c
  9881   0016B0  6ED9               	movwf	fsr2l,c
  9882   0016B2  6ADA               	clrf	fsr2h,c
  9883   0016B4  0E02               	movlw	2
  9884   0016B6  26D9               	addwf	fsr2l,f,c
  9885   0016B8  0E01               	movlw	1
  9886   0016BA  50DB               	movf	plusw2,w,c
  9887   0016BC  E109               	bnz	u3560
  9888   0016BE  0E11               	movlw	17
  9889   0016C0  5CDE               	subwf	postinc2,w,c
  9890   0016C2  A0D8               	btfss	status,0,c
  9891   0016C4  EF66  F00B         	goto	u3561
  9892   0016C8  EF68  F00B         	goto	u3560
  9893   0016CC                     u3561:
  9894   0016CC  EF7B  F00B         	goto	l4281
  9895   0016D0                     u3560:
  9896   0016D0  5001               	movf	colour_to_key@p1^0,w,c
  9897   0016D2  6ED9               	movwf	fsr2l,c
  9898   0016D4  6ADA               	clrf	fsr2h,c
  9899   0016D6  0E02               	movlw	2
  9900   0016D8  26D9               	addwf	fsr2l,f,c
  9901   0016DA  0E01               	movlw	1
  9902   0016DC  50DB               	movf	plusw2,w,c
  9903   0016DE  E107               	bnz	u3571
  9904   0016E0  0E21               	movlw	33
  9905   0016E2  5CDE               	subwf	postinc2,w,c
  9906   0016E4  B0D8               	btfsc	status,0,c
  9907   0016E6  EF77  F00B         	goto	u3571
  9908   0016EA  EF79  F00B         	goto	u3570
  9909   0016EE                     u3571:
  9910   0016EE  EF7B  F00B         	goto	l4281
  9911   0016F2                     u3570:
  9912   0016F2                     
  9913                           ;color.c: 340:          ((17 <= p1->S) && (p1->S <= 32))) {;color.c: 341:         key = 
      +                          4;
  9914   0016F2  0E04               	movlw	4
  9915   0016F4  6E05               	movwf	colour_to_key@key^0,c
  9916   0016F6                     l4281:
  9917                           
  9918                           ;color.c: 344:     if ( ((279 <= p1->H) && (p1->H <= 360)) &&
  9919   0016F6  5001               	movf	colour_to_key@p1^0,w,c
  9920   0016F8  6ED9               	movwf	fsr2l,c
  9921   0016FA  6ADA               	clrf	fsr2h,c
  9922   0016FC  0E17               	movlw	23
  9923   0016FE  5CDE               	subwf	postinc2,w,c
  9924   001700  0E01               	movlw	1
  9925   001702  58DE               	subwfb	postinc2,w,c
  9926   001704  A0D8               	btfss	status,0,c
  9927   001706  EF87  F00B         	goto	u3581
  9928   00170A  EF89  F00B         	goto	u3580
  9929   00170E                     u3581:
  9930   00170E  EFBB  F00B         	goto	l4291
  9931   001712                     u3580:
  9932   001712  5001               	movf	colour_to_key@p1^0,w,c
  9933   001714  6ED9               	movwf	fsr2l,c
  9934   001716  6ADA               	clrf	fsr2h,c
  9935   001718  0E69               	movlw	105
  9936   00171A  5CDE               	subwf	postinc2,w,c
  9937   00171C  0E01               	movlw	1
  9938   00171E  58DE               	subwfb	postinc2,w,c
  9939   001720  B0D8               	btfsc	status,0,c
  9940   001722  EF95  F00B         	goto	u3591
  9941   001726  EF97  F00B         	goto	u3590
  9942   00172A                     u3591:
  9943   00172A  EFBB  F00B         	goto	l4291
  9944   00172E                     u3590:
  9945   00172E  5001               	movf	colour_to_key@p1^0,w,c
  9946   001730  6ED9               	movwf	fsr2l,c
  9947   001732  6ADA               	clrf	fsr2h,c
  9948   001734  0E02               	movlw	2
  9949   001736  26D9               	addwf	fsr2l,f,c
  9950   001738  0E01               	movlw	1
  9951   00173A  50DB               	movf	plusw2,w,c
  9952   00173C  E109               	bnz	u3600
  9953   00173E  0E0B               	movlw	11
  9954   001740  5CDE               	subwf	postinc2,w,c
  9955   001742  A0D8               	btfss	status,0,c
  9956   001744  EFA6  F00B         	goto	u3601
  9957   001748  EFA8  F00B         	goto	u3600
  9958   00174C                     u3601:
  9959   00174C  EFBB  F00B         	goto	l4291
  9960   001750                     u3600:
  9961   001750  5001               	movf	colour_to_key@p1^0,w,c
  9962   001752  6ED9               	movwf	fsr2l,c
  9963   001754  6ADA               	clrf	fsr2h,c
  9964   001756  0E02               	movlw	2
  9965   001758  26D9               	addwf	fsr2l,f,c
  9966   00175A  0E01               	movlw	1
  9967   00175C  50DB               	movf	plusw2,w,c
  9968   00175E  E107               	bnz	u3611
  9969   001760  0E10               	movlw	16
  9970   001762  5CDE               	subwf	postinc2,w,c
  9971   001764  B0D8               	btfsc	status,0,c
  9972   001766  EFB7  F00B         	goto	u3611
  9973   00176A  EFB9  F00B         	goto	u3610
  9974   00176E                     u3611:
  9975   00176E  EFBB  F00B         	goto	l4291
  9976   001772                     u3610:
  9977   001772                     
  9978                           ;color.c: 345:          ((11 <= p1->S) && (p1->S <= 15))) {;color.c: 346:         key = 
      +                          5;
  9979   001772  0E05               	movlw	5
  9980   001774  6E05               	movwf	colour_to_key@key^0,c
  9981   001776                     l4291:
  9982                           
  9983                           ;color.c: 349:     if ( ((298 <= p1->H) && (p1->H <= 360)) &&
  9984   001776  5001               	movf	colour_to_key@p1^0,w,c
  9985   001778  6ED9               	movwf	fsr2l,c
  9986   00177A  6ADA               	clrf	fsr2h,c
  9987   00177C  0E2A               	movlw	42
  9988   00177E  5CDE               	subwf	postinc2,w,c
  9989   001780  0E01               	movlw	1
  9990   001782  58DE               	subwfb	postinc2,w,c
  9991   001784  A0D8               	btfss	status,0,c
  9992   001786  EFC7  F00B         	goto	u3621
  9993   00178A  EFC9  F00B         	goto	u3620
  9994   00178E                     u3621:
  9995   00178E  EFFB  F00B         	goto	l4301
  9996   001792                     u3620:
  9997   001792  5001               	movf	colour_to_key@p1^0,w,c
  9998   001794  6ED9               	movwf	fsr2l,c
  9999   001796  6ADA               	clrf	fsr2h,c
 10000   001798  0E69               	movlw	105
 10001   00179A  5CDE               	subwf	postinc2,w,c
 10002   00179C  0E01               	movlw	1
 10003   00179E  58DE               	subwfb	postinc2,w,c
 10004   0017A0  B0D8               	btfsc	status,0,c
 10005   0017A2  EFD5  F00B         	goto	u3631
 10006   0017A6  EFD7  F00B         	goto	u3630
 10007   0017AA                     u3631:
 10008   0017AA  EFFB  F00B         	goto	l4301
 10009   0017AE                     u3630:
 10010   0017AE  5001               	movf	colour_to_key@p1^0,w,c
 10011   0017B0  6ED9               	movwf	fsr2l,c
 10012   0017B2  6ADA               	clrf	fsr2h,c
 10013   0017B4  0E02               	movlw	2
 10014   0017B6  26D9               	addwf	fsr2l,f,c
 10015   0017B8  0E01               	movlw	1
 10016   0017BA  50DB               	movf	plusw2,w,c
 10017   0017BC  E109               	bnz	u3640
 10018   0017BE  0E14               	movlw	20
 10019   0017C0  5CDE               	subwf	postinc2,w,c
 10020   0017C2  A0D8               	btfss	status,0,c
 10021   0017C4  EFE6  F00B         	goto	u3641
 10022   0017C8  EFE8  F00B         	goto	u3640
 10023   0017CC                     u3641:
 10024   0017CC  EFFB  F00B         	goto	l4301
 10025   0017D0                     u3640:
 10026   0017D0  5001               	movf	colour_to_key@p1^0,w,c
 10027   0017D2  6ED9               	movwf	fsr2l,c
 10028   0017D4  6ADA               	clrf	fsr2h,c
 10029   0017D6  0E02               	movlw	2
 10030   0017D8  26D9               	addwf	fsr2l,f,c
 10031   0017DA  0E01               	movlw	1
 10032   0017DC  50DB               	movf	plusw2,w,c
 10033   0017DE  E107               	bnz	u3651
 10034   0017E0  0E2E               	movlw	46
 10035   0017E2  5CDE               	subwf	postinc2,w,c
 10036   0017E4  B0D8               	btfsc	status,0,c
 10037   0017E6  EFF7  F00B         	goto	u3651
 10038   0017EA  EFF9  F00B         	goto	u3650
 10039   0017EE                     u3651:
 10040   0017EE  EFFB  F00B         	goto	l4301
 10041   0017F2                     u3650:
 10042   0017F2                     
 10043                           ;color.c: 350:          ((20 <= p1->S) && (p1->S <= 45))) {;color.c: 351:         key = 
      +                          6;
 10044   0017F2  0E06               	movlw	6
 10045   0017F4  6E05               	movwf	colour_to_key@key^0,c
 10046   0017F6                     l4301:
 10047                           
 10048                           ;color.c: 354:     if ( ((154 <= p1->H) && (p1->H <= 207)) &&
 10049   0017F6  5001               	movf	colour_to_key@p1^0,w,c
 10050   0017F8  6ED9               	movwf	fsr2l,c
 10051   0017FA  6ADA               	clrf	fsr2h,c
 10052   0017FC  0E01               	movlw	1
 10053   0017FE  50DB               	movf	plusw2,w,c
 10054   001800  E109               	bnz	u3660
 10055   001802  0E9A               	movlw	154
 10056   001804  5CDE               	subwf	postinc2,w,c
 10057   001806  A0D8               	btfss	status,0,c
 10058   001808  EF08  F00C         	goto	u3661
 10059   00180C  EF0A  F00C         	goto	u3660
 10060   001810                     u3661:
 10061   001810  EF3D  F00C         	goto	l4311
 10062   001814                     u3660:
 10063   001814  5001               	movf	colour_to_key@p1^0,w,c
 10064   001816  6ED9               	movwf	fsr2l,c
 10065   001818  6ADA               	clrf	fsr2h,c
 10066   00181A  0E01               	movlw	1
 10067   00181C  50DB               	movf	plusw2,w,c
 10068   00181E  E107               	bnz	u3671
 10069   001820  0ED0               	movlw	208
 10070   001822  5CDE               	subwf	postinc2,w,c
 10071   001824  B0D8               	btfsc	status,0,c
 10072   001826  EF17  F00C         	goto	u3671
 10073   00182A  EF19  F00C         	goto	u3670
 10074   00182E                     u3671:
 10075   00182E  EF3D  F00C         	goto	l4311
 10076   001832                     u3670:
 10077   001832  5001               	movf	colour_to_key@p1^0,w,c
 10078   001834  6ED9               	movwf	fsr2l,c
 10079   001836  6ADA               	clrf	fsr2h,c
 10080   001838  0E02               	movlw	2
 10081   00183A  26D9               	addwf	fsr2l,f,c
 10082   00183C  0E01               	movlw	1
 10083   00183E  50DB               	movf	plusw2,w,c
 10084   001840  E109               	bnz	u3680
 10085   001842  0E0D               	movlw	13
 10086   001844  5CDE               	subwf	postinc2,w,c
 10087   001846  A0D8               	btfss	status,0,c
 10088   001848  EF28  F00C         	goto	u3681
 10089   00184C  EF2A  F00C         	goto	u3680
 10090   001850                     u3681:
 10091   001850  EF3D  F00C         	goto	l4311
 10092   001854                     u3680:
 10093   001854  5001               	movf	colour_to_key@p1^0,w,c
 10094   001856  6ED9               	movwf	fsr2l,c
 10095   001858  6ADA               	clrf	fsr2h,c
 10096   00185A  0E02               	movlw	2
 10097   00185C  26D9               	addwf	fsr2l,f,c
 10098   00185E  0E01               	movlw	1
 10099   001860  50DB               	movf	plusw2,w,c
 10100   001862  E107               	bnz	u3691
 10101   001864  0E2E               	movlw	46
 10102   001866  5CDE               	subwf	postinc2,w,c
 10103   001868  B0D8               	btfsc	status,0,c
 10104   00186A  EF39  F00C         	goto	u3691
 10105   00186E  EF3B  F00C         	goto	u3690
 10106   001872                     u3691:
 10107   001872  EF3D  F00C         	goto	l4311
 10108   001876                     u3690:
 10109   001876                     
 10110                           ;color.c: 355:          ((13 <= p1->S) && (p1->S <= 45))) {;color.c: 356:         key = 
      +                          7;
 10111   001876  0E07               	movlw	7
 10112   001878  6E05               	movwf	colour_to_key@key^0,c
 10113   00187A                     l4311:
 10114                           
 10115                           ;color.c: 359:     if ( ((3000 <= p2->C) && (p2->C <= 40000)) &&
 10116   00187A  5002               	movf	colour_to_key@p2^0,w,c
 10117   00187C  6ED9               	movwf	fsr2l,c
 10118   00187E  6ADA               	clrf	fsr2h,c
 10119   001880  0E06               	movlw	6
 10120   001882  26D9               	addwf	fsr2l,f,c
 10121   001884  0EB8               	movlw	184
 10122   001886  5CDE               	subwf	postinc2,w,c
 10123   001888  0E0B               	movlw	11
 10124   00188A  58DE               	subwfb	postinc2,w,c
 10125   00188C  A0D8               	btfss	status,0,c
 10126   00188E  EF4B  F00C         	goto	u3701
 10127   001892  EF4D  F00C         	goto	u3700
 10128   001896                     u3701:
 10129   001896  EF70  F00C         	goto	l4319
 10130   00189A                     u3700:
 10131   00189A  5002               	movf	colour_to_key@p2^0,w,c
 10132   00189C  6ED9               	movwf	fsr2l,c
 10133   00189E  6ADA               	clrf	fsr2h,c
 10134   0018A0  0E06               	movlw	6
 10135   0018A2  26D9               	addwf	fsr2l,f,c
 10136   0018A4  0E41               	movlw	65
 10137   0018A6  5CDE               	subwf	postinc2,w,c
 10138   0018A8  0E9C               	movlw	156
 10139   0018AA  58DE               	subwfb	postinc2,w,c
 10140   0018AC  B0D8               	btfsc	status,0,c
 10141   0018AE  EF5B  F00C         	goto	u3711
 10142   0018B2  EF5D  F00C         	goto	u3710
 10143   0018B6                     u3711:
 10144   0018B6  EF70  F00C         	goto	l4319
 10145   0018BA                     u3710:
 10146   0018BA  5001               	movf	colour_to_key@p1^0,w,c
 10147   0018BC  6ED9               	movwf	fsr2l,c
 10148   0018BE  6ADA               	clrf	fsr2h,c
 10149   0018C0  0E02               	movlw	2
 10150   0018C2  26D9               	addwf	fsr2l,f,c
 10151   0018C4  0E01               	movlw	1
 10152   0018C6  50DB               	movf	plusw2,w,c
 10153   0018C8  E107               	bnz	u3721
 10154   0018CA  0E0B               	movlw	11
 10155   0018CC  5CDE               	subwf	postinc2,w,c
 10156   0018CE  B0D8               	btfsc	status,0,c
 10157   0018D0  EF6C  F00C         	goto	u3721
 10158   0018D4  EF6E  F00C         	goto	u3720
 10159   0018D8                     u3721:
 10160   0018D8  EF70  F00C         	goto	l4319
 10161   0018DC                     u3720:
 10162   0018DC                     
 10163                           ;color.c: 360:          ((p1->S <= 10))) {;color.c: 361:         key = 8;
 10164   0018DC  0E08               	movlw	8
 10165   0018DE  6E05               	movwf	colour_to_key@key^0,c
 10166   0018E0                     l4319:
 10167                           
 10168                           ;color.c: 364:     if ( ((1000 <= p2->C) && (p2->C <= 2600)) &&
 10169   0018E0  5002               	movf	colour_to_key@p2^0,w,c
 10170   0018E2  6ED9               	movwf	fsr2l,c
 10171   0018E4  6ADA               	clrf	fsr2h,c
 10172   0018E6  0E06               	movlw	6
 10173   0018E8  26D9               	addwf	fsr2l,f,c
 10174   0018EA  0EE8               	movlw	232
 10175   0018EC  5CDE               	subwf	postinc2,w,c
 10176   0018EE  0E03               	movlw	3
 10177   0018F0  58DE               	subwfb	postinc2,w,c
 10178   0018F2  A0D8               	btfss	status,0,c
 10179   0018F4  EF7E  F00C         	goto	u3731
 10180   0018F8  EF80  F00C         	goto	u3730
 10181   0018FC                     u3731:
 10182   0018FC  EFA3  F00C         	goto	l136
 10183   001900                     u3730:
 10184   001900  5002               	movf	colour_to_key@p2^0,w,c
 10185   001902  6ED9               	movwf	fsr2l,c
 10186   001904  6ADA               	clrf	fsr2h,c
 10187   001906  0E06               	movlw	6
 10188   001908  26D9               	addwf	fsr2l,f,c
 10189   00190A  0E29               	movlw	41
 10190   00190C  5CDE               	subwf	postinc2,w,c
 10191   00190E  0E0A               	movlw	10
 10192   001910  58DE               	subwfb	postinc2,w,c
 10193   001912  B0D8               	btfsc	status,0,c
 10194   001914  EF8E  F00C         	goto	u3741
 10195   001918  EF90  F00C         	goto	u3740
 10196   00191C                     u3741:
 10197   00191C  EFA3  F00C         	goto	l136
 10198   001920                     u3740:
 10199   001920  5001               	movf	colour_to_key@p1^0,w,c
 10200   001922  6ED9               	movwf	fsr2l,c
 10201   001924  6ADA               	clrf	fsr2h,c
 10202   001926  0E02               	movlw	2
 10203   001928  26D9               	addwf	fsr2l,f,c
 10204   00192A  0E01               	movlw	1
 10205   00192C  50DB               	movf	plusw2,w,c
 10206   00192E  E107               	bnz	u3751
 10207   001930  0E0D               	movlw	13
 10208   001932  5CDE               	subwf	postinc2,w,c
 10209   001934  B0D8               	btfsc	status,0,c
 10210   001936  EF9F  F00C         	goto	u3751
 10211   00193A  EFA1  F00C         	goto	u3750
 10212   00193E                     u3751:
 10213   00193E  EFA3  F00C         	goto	l136
 10214   001942                     u3750:
 10215   001942                     
 10216                           ;color.c: 365:          ((p1->S <= 12))) {;color.c: 366:         key = 9;
 10217   001942  0E09               	movlw	9
 10218   001944  6E05               	movwf	colour_to_key@key^0,c
 10219   001946                     l136:
 10220                           
 10221                           ;color.c: 369:     return key;
 10222   001946  5005               	movf	colour_to_key@key^0,w,c
 10223   001948  0012               	return		;funcret
 10224   00194A                     __end_of_colour_to_key:
 10225                           	callstack 0
 10226                           
 10227 ;; *************** function _average_RGBC *****************
 10228 ;; Defined at:
 10229 ;;		line 124 in file "color.c"
 10230 ;; Parameters:    Size  Location     Type
 10231 ;;  p               1   13[COMRAM] PTR struct RGBC_val
 10232 ;;		 -> main@RGBC_colour(8), 
 10233 ;; Auto vars:     Size  Location     Type
 10234 ;;  i               1   16[COMRAM] unsigned char 
 10235 ;;  temp_C          4   29[COMRAM] unsigned long 
 10236 ;;  temp_B          4   25[COMRAM] unsigned long 
 10237 ;;  temp_G          4   21[COMRAM] unsigned long 
 10238 ;;  temp_R          4   17[COMRAM] unsigned long 
 10239 ;; Return value:  Size  Location     Type
 10240 ;;                  1    wreg      void 
 10241 ;; Registers used:
 10242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10243 ;; Tracked objects:
 10244 ;;		On entry : 0/0
 10245 ;;		On exit  : 0/0
 10246 ;;		Unchanged: 0/0
 10247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10248 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10249 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10250 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10251 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10252 ;;Total ram usage:       20 bytes
 10253 ;; Hardware stack levels used: 1
 10254 ;; Hardware stack levels required when called: 5
 10255 ;; This function calls:
 10256 ;;		___lldiv
 10257 ;;		_getRGBCval
 10258 ;; This function is called by:
 10259 ;;		_forward_navigation
 10260 ;; This function uses a non-reentrant model
 10261 ;;
 10262                           
 10263                           	psect	text63
 10264   002080                     __ptext63:
 10265                           	callstack 0
 10266   002080                     _average_RGBC:
 10267                           	callstack 24
 10268   002080                     
 10269                           ;color.c: 124: void average_RGBC(struct RGBC_val *p);color.c: 125: {;color.c: 127:     u
      +                          nsigned long temp_R = 0;
 10270   002080  0E00               	movlw	0
 10271   002082  6E12               	movwf	average_RGBC@temp_R^0,c
 10272   002084  0E00               	movlw	0
 10273   002086  6E13               	movwf	(average_RGBC@temp_R+1)^0,c
 10274   002088  0E00               	movlw	0
 10275   00208A  6E14               	movwf	(average_RGBC@temp_R+2)^0,c
 10276   00208C  0E00               	movlw	0
 10277   00208E  6E15               	movwf	(average_RGBC@temp_R+3)^0,c
 10278                           
 10279                           ;color.c: 128:     unsigned long temp_G = 0;
 10280   002090  0E00               	movlw	0
 10281   002092  6E16               	movwf	average_RGBC@temp_G^0,c
 10282   002094  0E00               	movlw	0
 10283   002096  6E17               	movwf	(average_RGBC@temp_G+1)^0,c
 10284   002098  0E00               	movlw	0
 10285   00209A  6E18               	movwf	(average_RGBC@temp_G+2)^0,c
 10286   00209C  0E00               	movlw	0
 10287   00209E  6E19               	movwf	(average_RGBC@temp_G+3)^0,c
 10288                           
 10289                           ;color.c: 129:     unsigned long temp_B = 0;
 10290   0020A0  0E00               	movlw	0
 10291   0020A2  6E1A               	movwf	average_RGBC@temp_B^0,c
 10292   0020A4  0E00               	movlw	0
 10293   0020A6  6E1B               	movwf	(average_RGBC@temp_B+1)^0,c
 10294   0020A8  0E00               	movlw	0
 10295   0020AA  6E1C               	movwf	(average_RGBC@temp_B+2)^0,c
 10296   0020AC  0E00               	movlw	0
 10297   0020AE  6E1D               	movwf	(average_RGBC@temp_B+3)^0,c
 10298                           
 10299                           ;color.c: 130:     unsigned long temp_C = 0;
 10300   0020B0  0E00               	movlw	0
 10301   0020B2  6E1E               	movwf	average_RGBC@temp_C^0,c
 10302   0020B4  0E00               	movlw	0
 10303   0020B6  6E1F               	movwf	(average_RGBC@temp_C+1)^0,c
 10304   0020B8  0E00               	movlw	0
 10305   0020BA  6E20               	movwf	(average_RGBC@temp_C+2)^0,c
 10306   0020BC  0E00               	movlw	0
 10307   0020BE  6E21               	movwf	(average_RGBC@temp_C+3)^0,c
 10308                           
 10309                           ;color.c: 136:     for (unsigned char i = 0; i < sample_count; i++) {
 10310   0020C0  0E00               	movlw	0
 10311   0020C2  6E11               	movwf	average_RGBC@i^0,c
 10312   0020C4  EFAB  F010         	goto	l4101
 10313   0020C8                     l4089:
 10314                           
 10315                           ;color.c: 138:         getRGBCval(p);
 10316   0020C8  C00E  F00C         	movff	average_RGBC@p,getRGBCval@p
 10317   0020CC  EC38  F01D         	call	_getRGBCval	;wreg free
 10318   0020D0                     
 10319                           ;color.c: 140:         temp_R += (unsigned long)p->R;
 10320   0020D0  500E               	movf	average_RGBC@p^0,w,c
 10321   0020D2  6ED9               	movwf	fsr2l,c
 10322   0020D4  6ADA               	clrf	fsr2h,c
 10323   0020D6  CFDE F00F          	movff	postinc2,??_average_RGBC
 10324   0020DA  CFDD F010          	movff	postdec2,??_average_RGBC+1
 10325   0020DE  500F               	movf	??_average_RGBC^0,w,c
 10326   0020E0  2612               	addwf	average_RGBC@temp_R^0,f,c
 10327   0020E2  5010               	movf	(??_average_RGBC+1)^0,w,c
 10328   0020E4  2213               	addwfc	(average_RGBC@temp_R+1)^0,f,c
 10329   0020E6  0E00               	movlw	0
 10330   0020E8  2214               	addwfc	(average_RGBC@temp_R+2)^0,f,c
 10331   0020EA  0E00               	movlw	0
 10332   0020EC  2215               	addwfc	(average_RGBC@temp_R+3)^0,f,c
 10333   0020EE                     
 10334                           ;color.c: 141:         temp_G += (unsigned long)p->G;
 10335   0020EE  500E               	movf	average_RGBC@p^0,w,c
 10336   0020F0  6ED9               	movwf	fsr2l,c
 10337   0020F2  6ADA               	clrf	fsr2h,c
 10338   0020F4  0E02               	movlw	2
 10339   0020F6  26D9               	addwf	fsr2l,f,c
 10340   0020F8  CFDE F00F          	movff	postinc2,??_average_RGBC
 10341   0020FC  CFDD F010          	movff	postdec2,??_average_RGBC+1
 10342   002100  500F               	movf	??_average_RGBC^0,w,c
 10343   002102  2616               	addwf	average_RGBC@temp_G^0,f,c
 10344   002104  5010               	movf	(??_average_RGBC+1)^0,w,c
 10345   002106  2217               	addwfc	(average_RGBC@temp_G+1)^0,f,c
 10346   002108  0E00               	movlw	0
 10347   00210A  2218               	addwfc	(average_RGBC@temp_G+2)^0,f,c
 10348   00210C  0E00               	movlw	0
 10349   00210E  2219               	addwfc	(average_RGBC@temp_G+3)^0,f,c
 10350   002110                     
 10351                           ;color.c: 142:         temp_B += (unsigned long)p->B;
 10352   002110  500E               	movf	average_RGBC@p^0,w,c
 10353   002112  6ED9               	movwf	fsr2l,c
 10354   002114  6ADA               	clrf	fsr2h,c
 10355   002116  0E04               	movlw	4
 10356   002118  26D9               	addwf	fsr2l,f,c
 10357   00211A  CFDE F00F          	movff	postinc2,??_average_RGBC
 10358   00211E  CFDD F010          	movff	postdec2,??_average_RGBC+1
 10359   002122  500F               	movf	??_average_RGBC^0,w,c
 10360   002124  261A               	addwf	average_RGBC@temp_B^0,f,c
 10361   002126  5010               	movf	(??_average_RGBC+1)^0,w,c
 10362   002128  221B               	addwfc	(average_RGBC@temp_B+1)^0,f,c
 10363   00212A  0E00               	movlw	0
 10364   00212C  221C               	addwfc	(average_RGBC@temp_B+2)^0,f,c
 10365   00212E  0E00               	movlw	0
 10366   002130  221D               	addwfc	(average_RGBC@temp_B+3)^0,f,c
 10367   002132                     
 10368                           ;color.c: 143:         temp_C += (unsigned long)p->C;
 10369   002132  500E               	movf	average_RGBC@p^0,w,c
 10370   002134  6ED9               	movwf	fsr2l,c
 10371   002136  6ADA               	clrf	fsr2h,c
 10372   002138  0E06               	movlw	6
 10373   00213A  26D9               	addwf	fsr2l,f,c
 10374   00213C  CFDE F00F          	movff	postinc2,??_average_RGBC
 10375   002140  CFDD F010          	movff	postdec2,??_average_RGBC+1
 10376   002144  500F               	movf	??_average_RGBC^0,w,c
 10377   002146  261E               	addwf	average_RGBC@temp_C^0,f,c
 10378   002148  5010               	movf	(??_average_RGBC+1)^0,w,c
 10379   00214A  221F               	addwfc	(average_RGBC@temp_C+1)^0,f,c
 10380   00214C  0E00               	movlw	0
 10381   00214E  2220               	addwfc	(average_RGBC@temp_C+2)^0,f,c
 10382   002150  0E00               	movlw	0
 10383   002152  2221               	addwfc	(average_RGBC@temp_C+3)^0,f,c
 10384   002154                     
 10385                           ;color.c: 144:     }
 10386   002154  2A11               	incf	average_RGBC@i^0,f,c
 10387   002156                     l4101:
 10388   002156  0E13               	movlw	19
 10389   002158  6411               	cpfsgt	average_RGBC@i^0,c
 10390   00215A  EFB1  F010         	goto	u3291
 10391   00215E  EFB3  F010         	goto	u3290
 10392   002162                     u3291:
 10393   002162  EF64  F010         	goto	l4089
 10394   002166                     u3290:
 10395   002166  C012  F001         	movff	average_RGBC@temp_R,___lldiv@dividend
 10396   00216A  C013  F002         	movff	average_RGBC@temp_R+1,___lldiv@dividend+1
 10397   00216E  C014  F003         	movff	average_RGBC@temp_R+2,___lldiv@dividend+2
 10398   002172  C015  F004         	movff	average_RGBC@temp_R+3,___lldiv@dividend+3
 10399   002176  0E14               	movlw	20
 10400   002178  6E05               	movwf	___lldiv@divisor^0,c
 10401   00217A  0E00               	movlw	0
 10402   00217C  6E06               	movwf	(___lldiv@divisor+1)^0,c
 10403   00217E  0E00               	movlw	0
 10404   002180  6E07               	movwf	(___lldiv@divisor+2)^0,c
 10405   002182  0E00               	movlw	0
 10406   002184  6E08               	movwf	(___lldiv@divisor+3)^0,c
 10407   002186  ECF0  F018         	call	___lldiv	;wreg free
 10408   00218A  C001  F012         	movff	?___lldiv,average_RGBC@temp_R
 10409   00218E  C002  F013         	movff	?___lldiv+1,average_RGBC@temp_R+1
 10410   002192  C003  F014         	movff	?___lldiv+2,average_RGBC@temp_R+2
 10411   002196  C004  F015         	movff	?___lldiv+3,average_RGBC@temp_R+3
 10412   00219A  C016  F001         	movff	average_RGBC@temp_G,___lldiv@dividend
 10413   00219E  C017  F002         	movff	average_RGBC@temp_G+1,___lldiv@dividend+1
 10414   0021A2  C018  F003         	movff	average_RGBC@temp_G+2,___lldiv@dividend+2
 10415   0021A6  C019  F004         	movff	average_RGBC@temp_G+3,___lldiv@dividend+3
 10416   0021AA  0E14               	movlw	20
 10417   0021AC  6E05               	movwf	___lldiv@divisor^0,c
 10418   0021AE  0E00               	movlw	0
 10419   0021B0  6E06               	movwf	(___lldiv@divisor+1)^0,c
 10420   0021B2  0E00               	movlw	0
 10421   0021B4  6E07               	movwf	(___lldiv@divisor+2)^0,c
 10422   0021B6  0E00               	movlw	0
 10423   0021B8  6E08               	movwf	(___lldiv@divisor+3)^0,c
 10424   0021BA  ECF0  F018         	call	___lldiv	;wreg free
 10425   0021BE  C001  F016         	movff	?___lldiv,average_RGBC@temp_G
 10426   0021C2  C002  F017         	movff	?___lldiv+1,average_RGBC@temp_G+1
 10427   0021C6  C003  F018         	movff	?___lldiv+2,average_RGBC@temp_G+2
 10428   0021CA  C004  F019         	movff	?___lldiv+3,average_RGBC@temp_G+3
 10429   0021CE  C01A  F001         	movff	average_RGBC@temp_B,___lldiv@dividend
 10430   0021D2  C01B  F002         	movff	average_RGBC@temp_B+1,___lldiv@dividend+1
 10431   0021D6  C01C  F003         	movff	average_RGBC@temp_B+2,___lldiv@dividend+2
 10432   0021DA  C01D  F004         	movff	average_RGBC@temp_B+3,___lldiv@dividend+3
 10433   0021DE  0E14               	movlw	20
 10434   0021E0  6E05               	movwf	___lldiv@divisor^0,c
 10435   0021E2  0E00               	movlw	0
 10436   0021E4  6E06               	movwf	(___lldiv@divisor+1)^0,c
 10437   0021E6  0E00               	movlw	0
 10438   0021E8  6E07               	movwf	(___lldiv@divisor+2)^0,c
 10439   0021EA  0E00               	movlw	0
 10440   0021EC  6E08               	movwf	(___lldiv@divisor+3)^0,c
 10441   0021EE  ECF0  F018         	call	___lldiv	;wreg free
 10442   0021F2  C001  F01A         	movff	?___lldiv,average_RGBC@temp_B
 10443   0021F6  C002  F01B         	movff	?___lldiv+1,average_RGBC@temp_B+1
 10444   0021FA  C003  F01C         	movff	?___lldiv+2,average_RGBC@temp_B+2
 10445   0021FE  C004  F01D         	movff	?___lldiv+3,average_RGBC@temp_B+3
 10446   002202  C01E  F001         	movff	average_RGBC@temp_C,___lldiv@dividend
 10447   002206  C01F  F002         	movff	average_RGBC@temp_C+1,___lldiv@dividend+1
 10448   00220A  C020  F003         	movff	average_RGBC@temp_C+2,___lldiv@dividend+2
 10449   00220E  C021  F004         	movff	average_RGBC@temp_C+3,___lldiv@dividend+3
 10450   002212  0E14               	movlw	20
 10451   002214  6E05               	movwf	___lldiv@divisor^0,c
 10452   002216  0E00               	movlw	0
 10453   002218  6E06               	movwf	(___lldiv@divisor+1)^0,c
 10454   00221A  0E00               	movlw	0
 10455   00221C  6E07               	movwf	(___lldiv@divisor+2)^0,c
 10456   00221E  0E00               	movlw	0
 10457   002220  6E08               	movwf	(___lldiv@divisor+3)^0,c
 10458   002222  ECF0  F018         	call	___lldiv	;wreg free
 10459   002226  C001  F01E         	movff	?___lldiv,average_RGBC@temp_C
 10460   00222A  C002  F01F         	movff	?___lldiv+1,average_RGBC@temp_C+1
 10461   00222E  C003  F020         	movff	?___lldiv+2,average_RGBC@temp_C+2
 10462   002232  C004  F021         	movff	?___lldiv+3,average_RGBC@temp_C+3
 10463   002236                     
 10464                           ;color.c: 153:     p->R = (unsigned int)temp_R;
 10465   002236  500E               	movf	average_RGBC@p^0,w,c
 10466   002238  6ED9               	movwf	fsr2l,c
 10467   00223A  6ADA               	clrf	fsr2h,c
 10468   00223C  C012  FFDE         	movff	average_RGBC@temp_R,postinc2
 10469   002240  C013  FFDD         	movff	average_RGBC@temp_R+1,postdec2
 10470   002244                     
 10471                           ;color.c: 154:     p->G = (unsigned int)temp_G;
 10472   002244  500E               	movf	average_RGBC@p^0,w,c
 10473   002246  6ED9               	movwf	fsr2l,c
 10474   002248  6ADA               	clrf	fsr2h,c
 10475   00224A  0E02               	movlw	2
 10476   00224C  26D9               	addwf	fsr2l,f,c
 10477   00224E  C016  FFDE         	movff	average_RGBC@temp_G,postinc2
 10478   002252  C017  FFDD         	movff	average_RGBC@temp_G+1,postdec2
 10479   002256                     
 10480                           ;color.c: 155:     p->B = (unsigned int)temp_B;
 10481   002256  500E               	movf	average_RGBC@p^0,w,c
 10482   002258  6ED9               	movwf	fsr2l,c
 10483   00225A  6ADA               	clrf	fsr2h,c
 10484   00225C  0E04               	movlw	4
 10485   00225E  26D9               	addwf	fsr2l,f,c
 10486   002260  C01A  FFDE         	movff	average_RGBC@temp_B,postinc2
 10487   002264  C01B  FFDD         	movff	average_RGBC@temp_B+1,postdec2
 10488   002268                     
 10489                           ;color.c: 156:     p->C = (unsigned int)temp_C;
 10490   002268  500E               	movf	average_RGBC@p^0,w,c
 10491   00226A  6ED9               	movwf	fsr2l,c
 10492   00226C  6ADA               	clrf	fsr2h,c
 10493   00226E  0E06               	movlw	6
 10494   002270  26D9               	addwf	fsr2l,f,c
 10495   002272  C01E  FFDE         	movff	average_RGBC@temp_C,postinc2
 10496   002276  C01F  FFDD         	movff	average_RGBC@temp_C+1,postdec2
 10497   00227A  0012               	return		;funcret
 10498   00227C                     __end_of_average_RGBC:
 10499                           	callstack 0
 10500                           
 10501 ;; *************** function _getRGBCval *****************
 10502 ;; Defined at:
 10503 ;;		line 112 in file "color.c"
 10504 ;; Parameters:    Size  Location     Type
 10505 ;;  p               1   11[COMRAM] PTR struct RGBC_val
 10506 ;;		 -> main@RGBC_colour(8), 
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;		None
 10509 ;; Return value:  Size  Location     Type
 10510 ;;                  1    wreg      void 
 10511 ;; Registers used:
 10512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10513 ;; Tracked objects:
 10514 ;;		On entry : 0/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10518 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10522 ;;Total ram usage:        1 bytes
 10523 ;; Hardware stack levels used: 1
 10524 ;; Hardware stack levels required when called: 4
 10525 ;; This function calls:
 10526 ;;		_color_read_Blue
 10527 ;;		_color_read_Clear
 10528 ;;		_color_read_Green
 10529 ;;		_color_read_Red
 10530 ;; This function is called by:
 10531 ;;		_average_RGBC
 10532 ;;		_wait_for_wall
 10533 ;; This function uses a non-reentrant model
 10534 ;;
 10535                           
 10536                           	psect	text64
 10537   003A70                     __ptext64:
 10538                           	callstack 0
 10539   003A70                     _getRGBCval:
 10540                           	callstack 24
 10541   003A70                     
 10542                           ;color.c: 112: void getRGBCval(struct RGBC_val *p);color.c: 113: {;color.c: 114:     p->
      +                          R = color_read_Red();
 10543   003A70  EC8B  F01D         	call	_color_read_Red	;wreg free
 10544   003A74  500C               	movf	getRGBCval@p^0,w,c
 10545   003A76  6ED9               	movwf	fsr2l,c
 10546   003A78  6ADA               	clrf	fsr2h,c
 10547   003A7A  C005  FFDE         	movff	?_color_read_Red,postinc2
 10548   003A7E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
 10549                           
 10550                           ;color.c: 115:     p->G = color_read_Green();
 10551   003A82  ECB3  F01D         	call	_color_read_Green	;wreg free
 10552   003A86  500C               	movf	getRGBCval@p^0,w,c
 10553   003A88  6ED9               	movwf	fsr2l,c
 10554   003A8A  6ADA               	clrf	fsr2h,c
 10555   003A8C  0E02               	movlw	2
 10556   003A8E  26D9               	addwf	fsr2l,f,c
 10557   003A90  C005  FFDE         	movff	?_color_read_Green,postinc2
 10558   003A94  C006  FFDD         	movff	?_color_read_Green+1,postdec2
 10559                           
 10560                           ;color.c: 116:     p->B = color_read_Blue();
 10561   003A98  EC03  F01E         	call	_color_read_Blue	;wreg free
 10562   003A9C  500C               	movf	getRGBCval@p^0,w,c
 10563   003A9E  6ED9               	movwf	fsr2l,c
 10564   003AA0  6ADA               	clrf	fsr2h,c
 10565   003AA2  0E04               	movlw	4
 10566   003AA4  26D9               	addwf	fsr2l,f,c
 10567   003AA6  C005  FFDE         	movff	?_color_read_Blue,postinc2
 10568   003AAA  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
 10569                           
 10570                           ;color.c: 117:     p->C = color_read_Clear();
 10571   003AAE  ECDB  F01D         	call	_color_read_Clear	;wreg free
 10572   003AB2  500C               	movf	getRGBCval@p^0,w,c
 10573   003AB4  6ED9               	movwf	fsr2l,c
 10574   003AB6  6ADA               	clrf	fsr2h,c
 10575   003AB8  0E06               	movlw	6
 10576   003ABA  26D9               	addwf	fsr2l,f,c
 10577   003ABC  C005  FFDE         	movff	?_color_read_Clear,postinc2
 10578   003AC0  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
 10579   003AC4  0012               	return		;funcret
 10580   003AC6                     __end_of_getRGBCval:
 10581                           	callstack 0
 10582                           
 10583 ;; *************** function _color_read_Red *****************
 10584 ;; Defined at:
 10585 ;;		line 40 in file "color.c"
 10586 ;; Parameters:    Size  Location     Type
 10587 ;;		None
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;  tmp             2    9[COMRAM] unsigned int 
 10590 ;; Return value:  Size  Location     Type
 10591 ;;                  2    4[COMRAM] unsigned int 
 10592 ;; Registers used:
 10593 ;;		wreg, status,2, status,0, cstack
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10599 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10601 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10602 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10603 ;;Total ram usage:        7 bytes
 10604 ;; Hardware stack levels used: 1
 10605 ;; Hardware stack levels required when called: 3
 10606 ;; This function calls:
 10607 ;;		_I2C_2_Master_Read
 10608 ;;		_I2C_2_Master_RepStart
 10609 ;;		_I2C_2_Master_Start
 10610 ;;		_I2C_2_Master_Stop
 10611 ;;		_I2C_2_Master_Write
 10612 ;; This function is called by:
 10613 ;;		_getRGBCval
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           	psect	text65
 10618   003B16                     __ptext65:
 10619                           	callstack 0
 10620   003B16                     _color_read_Red:
 10621                           	callstack 24
 10622   003B16                     
 10623                           ;color.c: 42:  unsigned int tmp;;color.c: 43:  I2C_2_Master_Start();
 10624   003B16  EC29  F021         	call	_I2C_2_Master_Start	;wreg free
 10625                           
 10626                           ;color.c: 44:  I2C_2_Master_Write(0x52 | 0x00);
 10627   003B1A  0E52               	movlw	82
 10628   003B1C  EC0D  F021         	call	_I2C_2_Master_Write
 10629                           
 10630                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
 10631   003B20  0EB6               	movlw	182
 10632   003B22  EC0D  F021         	call	_I2C_2_Master_Write
 10633                           
 10634                           ;color.c: 46:  I2C_2_Master_RepStart();
 10635   003B26  EC1F  F021         	call	_I2C_2_Master_RepStart	;wreg free
 10636                           
 10637                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
 10638   003B2A  0E53               	movlw	83
 10639   003B2C  EC0D  F021         	call	_I2C_2_Master_Write
 10640                           
 10641                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
 10642   003B30  0E01               	movlw	1
 10643   003B32  ECDC  F01E         	call	_I2C_2_Master_Read
 10644   003B36  6E07               	movwf	??_color_read_Red^0,c
 10645   003B38  5007               	movf	??_color_read_Red^0,w,c
 10646   003B3A  6E0A               	movwf	color_read_Red@tmp^0,c
 10647   003B3C  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
 10648                           
 10649                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10650   003B3E  0E00               	movlw	0
 10651   003B40  ECDC  F01E         	call	_I2C_2_Master_Read
 10652   003B44  6E07               	movwf	??_color_read_Red^0,c
 10653   003B46  5007               	movf	??_color_read_Red^0,w,c
 10654   003B48  6E09               	movwf	(??_color_read_Red+2)^0,c
 10655   003B4A  6A08               	clrf	(??_color_read_Red+1)^0,c
 10656   003B4C  500A               	movf	color_read_Red@tmp^0,w,c
 10657   003B4E  1008               	iorwf	(??_color_read_Red+1)^0,w,c
 10658   003B50  6E0A               	movwf	color_read_Red@tmp^0,c
 10659   003B52  500B               	movf	(color_read_Red@tmp+1)^0,w,c
 10660   003B54  1009               	iorwf	(??_color_read_Red+2)^0,w,c
 10661   003B56  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
 10662                           
 10663                           ;color.c: 50:  I2C_2_Master_Stop();
 10664   003B58  EC24  F021         	call	_I2C_2_Master_Stop	;wreg free
 10665   003B5C                     
 10666                           ;color.c: 51:  return tmp;
 10667   003B5C  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
 10668   003B60  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10669   003B64  0012               	return		;funcret
 10670   003B66                     __end_of_color_read_Red:
 10671                           	callstack 0
 10672                           
 10673 ;; *************** function _color_read_Green *****************
 10674 ;; Defined at:
 10675 ;;		line 58 in file "color.c"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;		None
 10678 ;; Auto vars:     Size  Location     Type
 10679 ;;  tmp             2    9[COMRAM] unsigned int 
 10680 ;; Return value:  Size  Location     Type
 10681 ;;                  2    4[COMRAM] unsigned int 
 10682 ;; Registers used:
 10683 ;;		wreg, status,2, status,0, cstack
 10684 ;; Tracked objects:
 10685 ;;		On entry : 0/0
 10686 ;;		On exit  : 0/0
 10687 ;;		Unchanged: 0/0
 10688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10691 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10692 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10693 ;;Total ram usage:        7 bytes
 10694 ;; Hardware stack levels used: 1
 10695 ;; Hardware stack levels required when called: 3
 10696 ;; This function calls:
 10697 ;;		_I2C_2_Master_Read
 10698 ;;		_I2C_2_Master_RepStart
 10699 ;;		_I2C_2_Master_Start
 10700 ;;		_I2C_2_Master_Stop
 10701 ;;		_I2C_2_Master_Write
 10702 ;; This function is called by:
 10703 ;;		_getRGBCval
 10704 ;; This function uses a non-reentrant model
 10705 ;;
 10706                           
 10707                           	psect	text66
 10708   003B66                     __ptext66:
 10709                           	callstack 0
 10710   003B66                     _color_read_Green:
 10711                           	callstack 24
 10712   003B66                     
 10713                           ;color.c: 60:     unsigned int tmp;;color.c: 61:  I2C_2_Master_Start();
 10714   003B66  EC29  F021         	call	_I2C_2_Master_Start	;wreg free
 10715                           
 10716                           ;color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
 10717   003B6A  0E52               	movlw	82
 10718   003B6C  EC0D  F021         	call	_I2C_2_Master_Write
 10719                           
 10720                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x18);
 10721   003B70  0EB8               	movlw	184
 10722   003B72  EC0D  F021         	call	_I2C_2_Master_Write
 10723                           
 10724                           ;color.c: 64:  I2C_2_Master_RepStart();
 10725   003B76  EC1F  F021         	call	_I2C_2_Master_RepStart	;wreg free
 10726                           
 10727                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
 10728   003B7A  0E53               	movlw	83
 10729   003B7C  EC0D  F021         	call	_I2C_2_Master_Write
 10730                           
 10731                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
 10732   003B80  0E01               	movlw	1
 10733   003B82  ECDC  F01E         	call	_I2C_2_Master_Read
 10734   003B86  6E07               	movwf	??_color_read_Green^0,c
 10735   003B88  5007               	movf	??_color_read_Green^0,w,c
 10736   003B8A  6E0A               	movwf	color_read_Green@tmp^0,c
 10737   003B8C  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
 10738                           
 10739                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10740   003B8E  0E00               	movlw	0
 10741   003B90  ECDC  F01E         	call	_I2C_2_Master_Read
 10742   003B94  6E07               	movwf	??_color_read_Green^0,c
 10743   003B96  5007               	movf	??_color_read_Green^0,w,c
 10744   003B98  6E09               	movwf	(??_color_read_Green+2)^0,c
 10745   003B9A  6A08               	clrf	(??_color_read_Green+1)^0,c
 10746   003B9C  500A               	movf	color_read_Green@tmp^0,w,c
 10747   003B9E  1008               	iorwf	(??_color_read_Green+1)^0,w,c
 10748   003BA0  6E0A               	movwf	color_read_Green@tmp^0,c
 10749   003BA2  500B               	movf	(color_read_Green@tmp+1)^0,w,c
 10750   003BA4  1009               	iorwf	(??_color_read_Green+2)^0,w,c
 10751   003BA6  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
 10752                           
 10753                           ;color.c: 68:  I2C_2_Master_Stop();
 10754   003BA8  EC24  F021         	call	_I2C_2_Master_Stop	;wreg free
 10755   003BAC                     
 10756                           ;color.c: 69:  return tmp;
 10757   003BAC  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
 10758   003BB0  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10759   003BB4  0012               	return		;funcret
 10760   003BB6                     __end_of_color_read_Green:
 10761                           	callstack 0
 10762                           
 10763 ;; *************** function _color_read_Clear *****************
 10764 ;; Defined at:
 10765 ;;		line 94 in file "color.c"
 10766 ;; Parameters:    Size  Location     Type
 10767 ;;		None
 10768 ;; Auto vars:     Size  Location     Type
 10769 ;;  tmp             2    9[COMRAM] unsigned int 
 10770 ;; Return value:  Size  Location     Type
 10771 ;;                  2    4[COMRAM] unsigned int 
 10772 ;; Registers used:
 10773 ;;		wreg, status,2, status,0, cstack
 10774 ;; Tracked objects:
 10775 ;;		On entry : 0/0
 10776 ;;		On exit  : 0/0
 10777 ;;		Unchanged: 0/0
 10778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10780 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10781 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10782 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10783 ;;Total ram usage:        7 bytes
 10784 ;; Hardware stack levels used: 1
 10785 ;; Hardware stack levels required when called: 3
 10786 ;; This function calls:
 10787 ;;		_I2C_2_Master_Read
 10788 ;;		_I2C_2_Master_RepStart
 10789 ;;		_I2C_2_Master_Start
 10790 ;;		_I2C_2_Master_Stop
 10791 ;;		_I2C_2_Master_Write
 10792 ;; This function is called by:
 10793 ;;		_getRGBCval
 10794 ;; This function uses a non-reentrant model
 10795 ;;
 10796                           
 10797                           	psect	text67
 10798   003BB6                     __ptext67:
 10799                           	callstack 0
 10800   003BB6                     _color_read_Clear:
 10801                           	callstack 24
 10802   003BB6                     
 10803                           ;color.c: 96:     unsigned int tmp;;color.c: 97:  I2C_2_Master_Start();
 10804   003BB6  EC29  F021         	call	_I2C_2_Master_Start	;wreg free
 10805                           
 10806                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x00);
 10807   003BBA  0E52               	movlw	82
 10808   003BBC  EC0D  F021         	call	_I2C_2_Master_Write
 10809                           
 10810                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
 10811   003BC0  0EB4               	movlw	180
 10812   003BC2  EC0D  F021         	call	_I2C_2_Master_Write
 10813                           
 10814                           ;color.c: 100:  I2C_2_Master_RepStart();
 10815   003BC6  EC1F  F021         	call	_I2C_2_Master_RepStart	;wreg free
 10816                           
 10817                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
 10818   003BCA  0E53               	movlw	83
 10819   003BCC  EC0D  F021         	call	_I2C_2_Master_Write
 10820                           
 10821                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
 10822   003BD0  0E01               	movlw	1
 10823   003BD2  ECDC  F01E         	call	_I2C_2_Master_Read
 10824   003BD6  6E07               	movwf	??_color_read_Clear^0,c
 10825   003BD8  5007               	movf	??_color_read_Clear^0,w,c
 10826   003BDA  6E0A               	movwf	color_read_Clear@tmp^0,c
 10827   003BDC  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
 10828                           
 10829                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10830   003BDE  0E00               	movlw	0
 10831   003BE0  ECDC  F01E         	call	_I2C_2_Master_Read
 10832   003BE4  6E07               	movwf	??_color_read_Clear^0,c
 10833   003BE6  5007               	movf	??_color_read_Clear^0,w,c
 10834   003BE8  6E09               	movwf	(??_color_read_Clear+2)^0,c
 10835   003BEA  6A08               	clrf	(??_color_read_Clear+1)^0,c
 10836   003BEC  500A               	movf	color_read_Clear@tmp^0,w,c
 10837   003BEE  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
 10838   003BF0  6E0A               	movwf	color_read_Clear@tmp^0,c
 10839   003BF2  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
 10840   003BF4  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
 10841   003BF6  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
 10842                           
 10843                           ;color.c: 104:  I2C_2_Master_Stop();
 10844   003BF8  EC24  F021         	call	_I2C_2_Master_Stop	;wreg free
 10845   003BFC                     
 10846                           ;color.c: 105:  return tmp;
 10847   003BFC  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
 10848   003C00  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10849   003C04  0012               	return		;funcret
 10850   003C06                     __end_of_color_read_Clear:
 10851                           	callstack 0
 10852                           
 10853 ;; *************** function _color_read_Blue *****************
 10854 ;; Defined at:
 10855 ;;		line 76 in file "color.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;		None
 10858 ;; Auto vars:     Size  Location     Type
 10859 ;;  tmp             2    9[COMRAM] unsigned int 
 10860 ;; Return value:  Size  Location     Type
 10861 ;;                  2    4[COMRAM] unsigned int 
 10862 ;; Registers used:
 10863 ;;		wreg, status,2, status,0, cstack
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10869 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10871 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10872 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10873 ;;Total ram usage:        7 bytes
 10874 ;; Hardware stack levels used: 1
 10875 ;; Hardware stack levels required when called: 3
 10876 ;; This function calls:
 10877 ;;		_I2C_2_Master_Read
 10878 ;;		_I2C_2_Master_RepStart
 10879 ;;		_I2C_2_Master_Start
 10880 ;;		_I2C_2_Master_Stop
 10881 ;;		_I2C_2_Master_Write
 10882 ;; This function is called by:
 10883 ;;		_getRGBCval
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           	psect	text68
 10888   003C06                     __ptext68:
 10889                           	callstack 0
 10890   003C06                     _color_read_Blue:
 10891                           	callstack 24
 10892   003C06                     
 10893                           ;color.c: 78:     unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
 10894   003C06  EC29  F021         	call	_I2C_2_Master_Start	;wreg free
 10895                           
 10896                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 10897   003C0A  0E52               	movlw	82
 10898   003C0C  EC0D  F021         	call	_I2C_2_Master_Write
 10899                           
 10900                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x1A);
 10901   003C10  0EBA               	movlw	186
 10902   003C12  EC0D  F021         	call	_I2C_2_Master_Write
 10903                           
 10904                           ;color.c: 82:  I2C_2_Master_RepStart();
 10905   003C16  EC1F  F021         	call	_I2C_2_Master_RepStart	;wreg free
 10906                           
 10907                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 10908   003C1A  0E53               	movlw	83
 10909   003C1C  EC0D  F021         	call	_I2C_2_Master_Write
 10910                           
 10911                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
 10912   003C20  0E01               	movlw	1
 10913   003C22  ECDC  F01E         	call	_I2C_2_Master_Read
 10914   003C26  6E07               	movwf	??_color_read_Blue^0,c
 10915   003C28  5007               	movf	??_color_read_Blue^0,w,c
 10916   003C2A  6E0A               	movwf	color_read_Blue@tmp^0,c
 10917   003C2C  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
 10918                           
 10919                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10920   003C2E  0E00               	movlw	0
 10921   003C30  ECDC  F01E         	call	_I2C_2_Master_Read
 10922   003C34  6E07               	movwf	??_color_read_Blue^0,c
 10923   003C36  5007               	movf	??_color_read_Blue^0,w,c
 10924   003C38  6E09               	movwf	(??_color_read_Blue+2)^0,c
 10925   003C3A  6A08               	clrf	(??_color_read_Blue+1)^0,c
 10926   003C3C  500A               	movf	color_read_Blue@tmp^0,w,c
 10927   003C3E  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
 10928   003C40  6E0A               	movwf	color_read_Blue@tmp^0,c
 10929   003C42  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
 10930   003C44  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
 10931   003C46  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
 10932                           
 10933                           ;color.c: 86:  I2C_2_Master_Stop();
 10934   003C48  EC24  F021         	call	_I2C_2_Master_Stop	;wreg free
 10935   003C4C                     
 10936                           ;color.c: 87:  return tmp;
 10937   003C4C  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
 10938   003C50  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10939   003C54  0012               	return		;funcret
 10940   003C56                     __end_of_color_read_Blue:
 10941                           	callstack 0
 10942                           
 10943 ;; *************** function _I2C_2_Master_RepStart *****************
 10944 ;; Defined at:
 10945 ;;		line 33 in file "i2c.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;		None
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;		None
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  1    wreg      void 
 10952 ;; Registers used:
 10953 ;;		wreg, status,2, status,0, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10963 ;;Total ram usage:        0 bytes
 10964 ;; Hardware stack levels used: 1
 10965 ;; Hardware stack levels required when called: 2
 10966 ;; This function calls:
 10967 ;;		_I2C_2_Master_Idle
 10968 ;; This function is called by:
 10969 ;;		_color_read_Red
 10970 ;;		_color_read_Green
 10971 ;;		_color_read_Blue
 10972 ;;		_color_read_Clear
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           	psect	text69
 10977   00423E                     __ptext69:
 10978                           	callstack 0
 10979   00423E                     _I2C_2_Master_RepStart:
 10980                           	callstack 24
 10981   00423E                     
 10982                           ;i2c.c: 35:   I2C_2_Master_Idle();
 10983   00423E  EC25  F020         	call	_I2C_2_Master_Idle	;wreg free
 10984   004242                     
 10985                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 10986   004242  010E               	movlb	14	; () banked
 10987   004244  83DA               	bsf	218,1,b	;volatile
 10988   004246                     
 10989                           ; BSR set to: 14
 10990   004246  0012               	return		;funcret
 10991   004248                     __end_of_I2C_2_Master_RepStart:
 10992                           	callstack 0
 10993                           
 10994 ;; *************** function _I2C_2_Master_Read *****************
 10995 ;; Defined at:
 10996 ;;		line 51 in file "i2c.c"
 10997 ;; Parameters:    Size  Location     Type
 10998 ;;  ack             1    wreg     unsigned char 
 10999 ;; Auto vars:     Size  Location     Type
 11000 ;;  ack             1    2[COMRAM] unsigned char 
 11001 ;;  tmp             1    3[COMRAM] unsigned char 
 11002 ;; Return value:  Size  Location     Type
 11003 ;;                  1    wreg      unsigned char 
 11004 ;; Registers used:
 11005 ;;		wreg, status,2, status,0, cstack
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11013 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11014 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11015 ;;Total ram usage:        3 bytes
 11016 ;; Hardware stack levels used: 1
 11017 ;; Hardware stack levels required when called: 2
 11018 ;; This function calls:
 11019 ;;		_I2C_2_Master_Idle
 11020 ;; This function is called by:
 11021 ;;		_color_read_Red
 11022 ;;		_color_read_Green
 11023 ;;		_color_read_Blue
 11024 ;;		_color_read_Clear
 11025 ;; This function uses a non-reentrant model
 11026 ;;
 11027                           
 11028                           	psect	text70
 11029   003DB8                     __ptext70:
 11030                           	callstack 0
 11031   003DB8                     _I2C_2_Master_Read:
 11032                           	callstack 24
 11033                           
 11034                           ; BSR set to: 14
 11035                           ;incstack = 0
 11036                           ;I2C_2_Master_Read@ack stored from wreg
 11037   003DB8  6E03               	movwf	I2C_2_Master_Read@ack^0,c
 11038   003DBA                     
 11039                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
 11040   003DBA  EC25  F020         	call	_I2C_2_Master_Idle	;wreg free
 11041   003DBE                     
 11042                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11043   003DBE  010E               	movlb	14	; () banked
 11044   003DC0  87DA               	bsf	218,3,b	;volatile
 11045                           
 11046                           ;i2c.c: 56:   I2C_2_Master_Idle();
 11047   003DC2  EC25  F020         	call	_I2C_2_Master_Idle	;wreg free
 11048   003DC6                     
 11049                           ;i2c.c: 57:   tmp = SSP2BUF;
 11050   003DC6  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11051                           
 11052                           ;i2c.c: 58:   I2C_2_Master_Idle();
 11053   003DCA  EC25  F020         	call	_I2C_2_Master_Idle	;wreg free
 11054   003DCE                     
 11055                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11056   003DCE  5003               	movf	I2C_2_Master_Read@ack^0,w,c
 11057   003DD0  B4D8               	btfsc	status,2,c
 11058   003DD2  EFED  F01E         	goto	u2331
 11059   003DD6  EFF1  F01E         	goto	u2330
 11060   003DDA                     u2331:
 11061   003DDA  6A02               	clrf	??_I2C_2_Master_Read^0,c
 11062   003DDC  2A02               	incf	??_I2C_2_Master_Read^0,f,c
 11063   003DDE  EFF2  F01E         	goto	u2348
 11064   003DE2                     u2330:
 11065   003DE2  6A02               	clrf	??_I2C_2_Master_Read^0,c
 11066   003DE4                     u2348:
 11067   003DE4  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
 11068   003DE6  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
 11069   003DE8  010E               	movlb	14	; () banked
 11070   003DEA  51DA               	movf	218,w,b	;volatile
 11071   003DEC  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 11072   003DEE  0BDF               	andlw	-33
 11073   003DF0  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
 11074   003DF2  6FDA               	movwf	218,b	;volatile
 11075   003DF4                     
 11076                           ; BSR set to: 14
 11077                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11078   003DF4  89DA               	bsf	218,4,b	;volatile
 11079   003DF6                     
 11080                           ; BSR set to: 14
 11081                           ;i2c.c: 61:   return tmp;
 11082   003DF6  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
 11083   003DF8                     
 11084                           ; BSR set to: 14
 11085   003DF8  0012               	return		;funcret
 11086   003DFA                     __end_of_I2C_2_Master_Read:
 11087                           	callstack 0
 11088                           
 11089 ;; *************** function ___lldiv *****************
 11090 ;; Defined at:
 11091 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
 11092 ;; Parameters:    Size  Location     Type
 11093 ;;  dividend        4    0[COMRAM] unsigned long 
 11094 ;;  divisor         4    4[COMRAM] unsigned long 
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;  quotient        4    8[COMRAM] unsigned long 
 11097 ;;  counter         1   12[COMRAM] unsigned char 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  4    0[COMRAM] unsigned long 
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11107 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11108 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11110 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11111 ;;Total ram usage:       13 bytes
 11112 ;; Hardware stack levels used: 1
 11113 ;; Hardware stack levels required when called: 1
 11114 ;; This function calls:
 11115 ;;		Nothing
 11116 ;; This function is called by:
 11117 ;;		_average_RGBC
 11118 ;;		_convert_HSV
 11119 ;; This function uses a non-reentrant model
 11120 ;;
 11121                           
 11122                           	psect	text71
 11123   0031E0                     __ptext71:
 11124                           	callstack 0
 11125   0031E0                     ___lldiv:
 11126                           	callstack 27
 11127   0031E0  0E00               	movlw	0
 11128   0031E2  6E09               	movwf	___lldiv@quotient^0,c
 11129   0031E4  0E00               	movlw	0
 11130   0031E6  6E0A               	movwf	(___lldiv@quotient+1)^0,c
 11131   0031E8  0E00               	movlw	0
 11132   0031EA  6E0B               	movwf	(___lldiv@quotient+2)^0,c
 11133   0031EC  0E00               	movlw	0
 11134   0031EE  6E0C               	movwf	(___lldiv@quotient+3)^0,c
 11135   0031F0  5005               	movf	___lldiv@divisor^0,w,c
 11136   0031F2  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
 11137   0031F4  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
 11138   0031F6  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
 11139   0031F8  B4D8               	btfsc	status,2,c
 11140   0031FA  EF01  F019         	goto	u2761
 11141   0031FE  EF03  F019         	goto	u2760
 11142   003202                     u2761:
 11143   003202  EF39  F019         	goto	l781
 11144   003206                     u2760:
 11145   003206  0E01               	movlw	1
 11146   003208  6E0D               	movwf	___lldiv@counter^0,c
 11147   00320A  EF0D  F019         	goto	l3835
 11148   00320E                     l3833:
 11149   00320E  90D8               	bcf	status,0,c
 11150   003210  3605               	rlcf	___lldiv@divisor^0,f,c
 11151   003212  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
 11152   003214  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
 11153   003216  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
 11154   003218  2A0D               	incf	___lldiv@counter^0,f,c
 11155   00321A                     l3835:
 11156   00321A  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
 11157   00321C  EF12  F019         	goto	u2771
 11158   003220  EF14  F019         	goto	u2770
 11159   003224                     u2771:
 11160   003224  EF07  F019         	goto	l3833
 11161   003228                     u2770:
 11162   003228                     l3837:
 11163   003228  90D8               	bcf	status,0,c
 11164   00322A  3609               	rlcf	___lldiv@quotient^0,f,c
 11165   00322C  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
 11166   00322E  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
 11167   003230  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
 11168   003232  5005               	movf	___lldiv@divisor^0,w,c
 11169   003234  5C01               	subwf	___lldiv@dividend^0,w,c
 11170   003236  5006               	movf	(___lldiv@divisor+1)^0,w,c
 11171   003238  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
 11172   00323A  5007               	movf	(___lldiv@divisor+2)^0,w,c
 11173   00323C  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
 11174   00323E  5008               	movf	(___lldiv@divisor+3)^0,w,c
 11175   003240  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
 11176   003242  A0D8               	btfss	status,0,c
 11177   003244  EF26  F019         	goto	u2781
 11178   003248  EF28  F019         	goto	u2780
 11179   00324C                     u2781:
 11180   00324C  EF31  F019         	goto	l3845
 11181   003250                     u2780:
 11182   003250  5005               	movf	___lldiv@divisor^0,w,c
 11183   003252  5E01               	subwf	___lldiv@dividend^0,f,c
 11184   003254  5006               	movf	(___lldiv@divisor+1)^0,w,c
 11185   003256  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
 11186   003258  5007               	movf	(___lldiv@divisor+2)^0,w,c
 11187   00325A  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
 11188   00325C  5008               	movf	(___lldiv@divisor+3)^0,w,c
 11189   00325E  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
 11190   003260  8009               	bsf	___lldiv@quotient^0,0,c
 11191   003262                     l3845:
 11192   003262  90D8               	bcf	status,0,c
 11193   003264  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
 11194   003266  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
 11195   003268  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
 11196   00326A  3205               	rrcf	___lldiv@divisor^0,f,c
 11197   00326C  2E0D               	decfsz	___lldiv@counter^0,f,c
 11198   00326E  EF14  F019         	goto	l3837
 11199   003272                     l781:
 11200   003272  C009  F001         	movff	___lldiv@quotient,?___lldiv
 11201   003276  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 11202   00327A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 11203   00327E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 11204   003282  0012               	return		;funcret
 11205   003284                     __end_of___lldiv:
 11206                           	callstack 0
 11207                           
 11208 ;; *************** function _color_click_init *****************
 11209 ;; Defined at:
 11210 ;;		line 7 in file "color.c"
 11211 ;; Parameters:    Size  Location     Type
 11212 ;;		None
 11213 ;; Auto vars:     Size  Location     Type
 11214 ;;		None
 11215 ;; Return value:  Size  Location     Type
 11216 ;;                  1    wreg      void 
 11217 ;; Registers used:
 11218 ;;		wreg, status,2, status,0, cstack
 11219 ;; Tracked objects:
 11220 ;;		On entry : 0/0
 11221 ;;		On exit  : 0/0
 11222 ;;		Unchanged: 0/0
 11223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11226 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11228 ;;Total ram usage:        1 bytes
 11229 ;; Hardware stack levels used: 1
 11230 ;; Hardware stack levels required when called: 4
 11231 ;; This function calls:
 11232 ;;		_I2C_2_Master_Init
 11233 ;;		_color_writetoaddr
 11234 ;; This function is called by:
 11235 ;;		_main
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           	psect	text72
 11240   003FBE                     __ptext72:
 11241                           	callstack 0
 11242   003FBE                     _color_click_init:
 11243                           	callstack 26
 11244   003FBE                     
 11245                           ;color.c: 10:     I2C_2_Master_Init();
 11246   003FBE  EC10  F020         	call	_I2C_2_Master_Init	;wreg free
 11247   003FC2                     
 11248                           ;color.c: 13:  color_writetoaddr(0x00, 0x01);
 11249   003FC2  0E01               	movlw	1
 11250   003FC4  6E03               	movwf	color_writetoaddr@value^0,c
 11251   003FC6  0E00               	movlw	0
 11252   003FC8  ECC8  F020         	call	_color_writetoaddr
 11253   003FCC                     
 11254                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
 11255   003FCC  0E3F               	movlw	63
 11256   003FCE  6E05               	movwf	??_color_click_init^0,c
 11257   003FD0  0E55               	movlw	85
 11258   003FD2                     u4287:
 11259   003FD2  2EE8               	decfsz	wreg,f,c
 11260   003FD4  D7FE               	bra	u4287
 11261   003FD6  2E05               	decfsz	??_color_click_init^0,f,c
 11262   003FD8  D7FC               	bra	u4287
 11263   003FDA  0000               	nop	
 11264   003FDC                     
 11265                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
 11266   003FDC  0E03               	movlw	3
 11267   003FDE  6E03               	movwf	color_writetoaddr@value^0,c
 11268   003FE0  0E00               	movlw	0
 11269   003FE2  ECC8  F020         	call	_color_writetoaddr
 11270   003FE6                     
 11271                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
 11272   003FE6  0ED5               	movlw	213
 11273   003FE8  6E03               	movwf	color_writetoaddr@value^0,c
 11274   003FEA  0E01               	movlw	1
 11275   003FEC  ECC8  F020         	call	_color_writetoaddr
 11276   003FF0  0012               	return		;funcret
 11277   003FF2                     __end_of_color_click_init:
 11278                           	callstack 0
 11279                           
 11280 ;; *************** function _color_writetoaddr *****************
 11281 ;; Defined at:
 11282 ;;		line 28 in file "color.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  address         1    wreg     unsigned char 
 11285 ;;  value           1    2[COMRAM] unsigned char 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  address         1    3[COMRAM] unsigned char 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  1    wreg      void 
 11290 ;; Registers used:
 11291 ;;		wreg, status,2, status,0, cstack
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11297 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11300 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11301 ;;Total ram usage:        2 bytes
 11302 ;; Hardware stack levels used: 1
 11303 ;; Hardware stack levels required when called: 3
 11304 ;; This function calls:
 11305 ;;		_I2C_2_Master_Start
 11306 ;;		_I2C_2_Master_Stop
 11307 ;;		_I2C_2_Master_Write
 11308 ;; This function is called by:
 11309 ;;		_color_click_init
 11310 ;; This function uses a non-reentrant model
 11311 ;;
 11312                           
 11313                           	psect	text73
 11314   004190                     __ptext73:
 11315                           	callstack 0
 11316   004190                     _color_writetoaddr:
 11317                           	callstack 26
 11318                           
 11319                           ;incstack = 0
 11320                           ;color_writetoaddr@address stored from wreg
 11321   004190  6E04               	movwf	color_writetoaddr@address^0,c
 11322   004192                     
 11323                           ;color.c: 29:     I2C_2_Master_Start();
 11324   004192  EC29  F021         	call	_I2C_2_Master_Start	;wreg free
 11325                           
 11326                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
 11327   004196  0E52               	movlw	82
 11328   004198  EC0D  F021         	call	_I2C_2_Master_Write
 11329                           
 11330                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
 11331   00419C  5004               	movf	color_writetoaddr@address^0,w,c
 11332   00419E  0980               	iorlw	128
 11333   0041A0  EC0D  F021         	call	_I2C_2_Master_Write
 11334                           
 11335                           ;color.c: 32:     I2C_2_Master_Write(value);
 11336   0041A4  5003               	movf	color_writetoaddr@value^0,w,c
 11337   0041A6  EC0D  F021         	call	_I2C_2_Master_Write
 11338                           
 11339                           ;color.c: 33:     I2C_2_Master_Stop();
 11340   0041AA  EC24  F021         	call	_I2C_2_Master_Stop	;wreg free
 11341   0041AE  0012               	return		;funcret
 11342   0041B0                     __end_of_color_writetoaddr:
 11343                           	callstack 0
 11344                           
 11345 ;; *************** function _I2C_2_Master_Write *****************
 11346 ;; Defined at:
 11347 ;;		line 45 in file "i2c.c"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;  data_byte       1    wreg     unsigned char 
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;  data_byte       1    1[COMRAM] unsigned char 
 11352 ;; Return value:  Size  Location     Type
 11353 ;;                  1    wreg      void 
 11354 ;; Registers used:
 11355 ;;		wreg, status,2, status,0, cstack
 11356 ;; Tracked objects:
 11357 ;;		On entry : 0/0
 11358 ;;		On exit  : 0/0
 11359 ;;		Unchanged: 0/0
 11360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11364 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11365 ;;Total ram usage:        1 bytes
 11366 ;; Hardware stack levels used: 1
 11367 ;; Hardware stack levels required when called: 2
 11368 ;; This function calls:
 11369 ;;		_I2C_2_Master_Idle
 11370 ;; This function is called by:
 11371 ;;		_color_writetoaddr
 11372 ;;		_color_read_Red
 11373 ;;		_color_read_Green
 11374 ;;		_color_read_Blue
 11375 ;;		_color_read_Clear
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           	psect	text74
 11380   00421A                     __ptext74:
 11381                           	callstack 0
 11382   00421A                     _I2C_2_Master_Write:
 11383                           	callstack 24
 11384                           
 11385                           ;incstack = 0
 11386                           ;I2C_2_Master_Write@data_byte stored from wreg
 11387   00421A  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
 11388   00421C                     
 11389                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 11390   00421C  EC25  F020         	call	_I2C_2_Master_Idle	;wreg free
 11391   004220                     
 11392                           ;i2c.c: 48:   SSP2BUF = data_byte;
 11393   004220  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 11394   004224  0012               	return		;funcret
 11395   004226                     __end_of_I2C_2_Master_Write:
 11396                           	callstack 0
 11397                           
 11398 ;; *************** function _I2C_2_Master_Stop *****************
 11399 ;; Defined at:
 11400 ;;		line 39 in file "i2c.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;		None
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;		None
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  1    wreg      void 
 11407 ;; Registers used:
 11408 ;;		wreg, status,2, status,0, cstack
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/0
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11418 ;;Total ram usage:        0 bytes
 11419 ;; Hardware stack levels used: 1
 11420 ;; Hardware stack levels required when called: 2
 11421 ;; This function calls:
 11422 ;;		_I2C_2_Master_Idle
 11423 ;; This function is called by:
 11424 ;;		_color_writetoaddr
 11425 ;;		_color_read_Red
 11426 ;;		_color_read_Green
 11427 ;;		_color_read_Blue
 11428 ;;		_color_read_Clear
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text75
 11433   004248                     __ptext75:
 11434                           	callstack 0
 11435   004248                     _I2C_2_Master_Stop:
 11436                           	callstack 24
 11437   004248                     
 11438                           ;i2c.c: 41:   I2C_2_Master_Idle();
 11439   004248  EC25  F020         	call	_I2C_2_Master_Idle	;wreg free
 11440   00424C                     
 11441                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 11442   00424C  010E               	movlb	14	; () banked
 11443   00424E  85DA               	bsf	218,2,b	;volatile
 11444   004250                     
 11445                           ; BSR set to: 14
 11446   004250  0012               	return		;funcret
 11447   004252                     __end_of_I2C_2_Master_Stop:
 11448                           	callstack 0
 11449                           
 11450 ;; *************** function _I2C_2_Master_Start *****************
 11451 ;; Defined at:
 11452 ;;		line 27 in file "i2c.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;		None
 11455 ;; Auto vars:     Size  Location     Type
 11456 ;;		None
 11457 ;; Return value:  Size  Location     Type
 11458 ;;                  1    wreg      void 
 11459 ;; Registers used:
 11460 ;;		wreg, status,2, status,0, cstack
 11461 ;; Tracked objects:
 11462 ;;		On entry : 0/0
 11463 ;;		On exit  : 0/0
 11464 ;;		Unchanged: 0/0
 11465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11470 ;;Total ram usage:        0 bytes
 11471 ;; Hardware stack levels used: 1
 11472 ;; Hardware stack levels required when called: 2
 11473 ;; This function calls:
 11474 ;;		_I2C_2_Master_Idle
 11475 ;; This function is called by:
 11476 ;;		_color_writetoaddr
 11477 ;;		_color_read_Red
 11478 ;;		_color_read_Green
 11479 ;;		_color_read_Blue
 11480 ;;		_color_read_Clear
 11481 ;; This function uses a non-reentrant model
 11482 ;;
 11483                           
 11484                           	psect	text76
 11485   004252                     __ptext76:
 11486                           	callstack 0
 11487   004252                     _I2C_2_Master_Start:
 11488                           	callstack 24
 11489   004252                     
 11490                           ;i2c.c: 29:   I2C_2_Master_Idle();
 11491   004252  EC25  F020         	call	_I2C_2_Master_Idle	;wreg free
 11492   004256                     
 11493                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11494   004256  010E               	movlb	14	; () banked
 11495   004258  81DA               	bsf	218,0,b	;volatile
 11496   00425A                     
 11497                           ; BSR set to: 14
 11498   00425A  0012               	return		;funcret
 11499   00425C                     __end_of_I2C_2_Master_Start:
 11500                           	callstack 0
 11501                           
 11502 ;; *************** function _I2C_2_Master_Idle *****************
 11503 ;; Defined at:
 11504 ;;		line 22 in file "i2c.c"
 11505 ;; Parameters:    Size  Location     Type
 11506 ;;		None
 11507 ;; Auto vars:     Size  Location     Type
 11508 ;;		None
 11509 ;; Return value:  Size  Location     Type
 11510 ;;                  1    wreg      void 
 11511 ;; Registers used:
 11512 ;;		wreg, status,2, status,0
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11522 ;;Total ram usage:        1 bytes
 11523 ;; Hardware stack levels used: 1
 11524 ;; Hardware stack levels required when called: 1
 11525 ;; This function calls:
 11526 ;;		Nothing
 11527 ;; This function is called by:
 11528 ;;		_I2C_2_Master_Start
 11529 ;;		_I2C_2_Master_RepStart
 11530 ;;		_I2C_2_Master_Stop
 11531 ;;		_I2C_2_Master_Write
 11532 ;;		_I2C_2_Master_Read
 11533 ;; This function uses a non-reentrant model
 11534 ;;
 11535                           
 11536                           	psect	text77
 11537   00404A                     __ptext77:
 11538                           	callstack 0
 11539   00404A                     _I2C_2_Master_Idle:
 11540                           	callstack 24
 11541   00404A                     l320:
 11542   00404A  010E               	movlb	14	; () banked
 11543   00404C  B5D8               	btfsc	216,2,b	;volatile
 11544   00404E  EF2B  F020         	goto	u2051
 11545   004052  EF2D  F020         	goto	u2050
 11546   004056                     u2051:
 11547   004056  EF25  F020         	goto	l320
 11548   00405A                     u2050:
 11549   00405A                     
 11550                           ; BSR set to: 14
 11551   00405A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11552   00405E  0E1F               	movlw	31
 11553   004060  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
 11554   004062  A4D8               	btfss	status,2,c
 11555   004064  EF36  F020         	goto	u2061
 11556   004068  EF38  F020         	goto	u2060
 11557   00406C                     u2061:
 11558   00406C  EF25  F020         	goto	l320
 11559   004070                     u2060:
 11560   004070                     
 11561                           ; BSR set to: 14
 11562   004070  0012               	return		;funcret
 11563   004072                     __end_of_I2C_2_Master_Idle:
 11564                           	callstack 0
 11565                           
 11566 ;; *************** function _I2C_2_Master_Init *****************
 11567 ;; Defined at:
 11568 ;;		line 4 in file "i2c.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;		None
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;		None
 11573 ;; Return value:  Size  Location     Type
 11574 ;;                  1    wreg      void 
 11575 ;; Registers used:
 11576 ;;		wreg, status,2
 11577 ;; Tracked objects:
 11578 ;;		On entry : 0/0
 11579 ;;		On exit  : 0/0
 11580 ;;		Unchanged: 0/0
 11581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11586 ;;Total ram usage:        0 bytes
 11587 ;; Hardware stack levels used: 1
 11588 ;; Hardware stack levels required when called: 1
 11589 ;; This function calls:
 11590 ;;		Nothing
 11591 ;; This function is called by:
 11592 ;;		_color_click_init
 11593 ;; This function uses a non-reentrant model
 11594 ;;
 11595                           
 11596                           	psect	text78
 11597   004020                     __ptext78:
 11598                           	callstack 0
 11599   004020                     _I2C_2_Master_Init:
 11600                           	callstack 28
 11601   004020                     
 11602                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
 11603   004020  010E               	movlb	14	; () banked
 11604   004022  51D9               	movf	217,w,b	;volatile
 11605   004024  0BF0               	andlw	-16
 11606   004026  0908               	iorlw	8
 11607   004028  6FD9               	movwf	217,b	;volatile
 11608   00402A                     
 11609                           ; BSR set to: 14
 11610                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
 11611   00402A  8BD9               	bsf	217,5,b	;volatile
 11612                           
 11613                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
 11614   00402C  0E9F               	movlw	159
 11615   00402E  6FD6               	movwf	214,b	;volatile
 11616   004030                     
 11617                           ; BSR set to: 14
 11618                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
 11619   004030  8A84               	bsf	132,5,c	;volatile
 11620   004032                     
 11621                           ; BSR set to: 14
 11622                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
 11623   004032  8C84               	bsf	132,6,c	;volatile
 11624   004034                     
 11625                           ; BSR set to: 14
 11626                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
 11627   004034  9BA7               	bcf	167,5,b	;volatile
 11628   004036                     
 11629                           ; BSR set to: 14
 11630                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
 11631   004036  9DA7               	bcf	167,6,b	;volatile
 11632                           
 11633                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
 11634   004038  0E1D               	movlw	29
 11635   00403A  6F1D               	movwf	29,b	;volatile
 11636                           
 11637                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
 11638   00403C  0E1E               	movlw	30
 11639   00403E  6F1C               	movwf	28,b	;volatile
 11640                           
 11641                           ;i2c.c: 18:   RD5PPS=0x1C;
 11642   004040  0E1C               	movlw	28
 11643   004042  6F6F               	movwf	111,b	;volatile
 11644                           
 11645                           ;i2c.c: 19:   RD6PPS=0x1B;
 11646   004044  0E1B               	movlw	27
 11647   004046  6F70               	movwf	112,b	;volatile
 11648   004048                     
 11649                           ; BSR set to: 14
 11650   004048  0012               	return		;funcret
 11651   00404A                     __end_of_I2C_2_Master_Init:
 11652                           	callstack 0
 11653                           
 11654 ;; *************** function _buggy_lights_init *****************
 11655 ;; Defined at:
 11656 ;;		line 7 in file "buggy_lights.c"
 11657 ;; Parameters:    Size  Location     Type
 11658 ;;		None
 11659 ;; Auto vars:     Size  Location     Type
 11660 ;;		None
 11661 ;; Return value:  Size  Location     Type
 11662 ;;                  1    wreg      void 
 11663 ;; Registers used:
 11664 ;;		None
 11665 ;; Tracked objects:
 11666 ;;		On entry : 0/0
 11667 ;;		On exit  : 0/0
 11668 ;;		Unchanged: 0/0
 11669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11674 ;;Total ram usage:        0 bytes
 11675 ;; Hardware stack levels used: 1
 11676 ;; Hardware stack levels required when called: 1
 11677 ;; This function calls:
 11678 ;;		Nothing
 11679 ;; This function is called by:
 11680 ;;		_main
 11681 ;; This function uses a non-reentrant model
 11682 ;;
 11683                           
 11684                           	psect	text79
 11685   003FF2                     __ptext79:
 11686                           	callstack 0
 11687   003FF2                     _buggy_lights_init:
 11688                           	callstack 29
 11689   003FF2                     
 11690                           ;buggy_lights.c: 11:         TRISDbits.TRISD4 = 0;
 11691   003FF2  9884               	bcf	132,4,c	;volatile
 11692                           
 11693                           ;buggy_lights.c: 12:         TRISHbits.TRISH1 = 0;
 11694   003FF4  9288               	bcf	136,1,c	;volatile
 11695                           
 11696                           ;buggy_lights.c: 13:         TRISDbits.TRISD3 = 0;
 11697   003FF6  9684               	bcf	132,3,c	;volatile
 11698                           
 11699                           ;buggy_lights.c: 14:         TRISFbits.TRISF0 = 0;
 11700   003FF8  9086               	bcf	134,0,c	;volatile
 11701                           
 11702                           ;buggy_lights.c: 15:         TRISHbits.TRISH0 = 0;
 11703   003FFA  9088               	bcf	136,0,c	;volatile
 11704                           
 11705                           ;buggy_lights.c: 17:         LATDbits.LATD4 = 0;
 11706   003FFC  987C               	bcf	124,4,c	;volatile
 11707                           
 11708                           ;buggy_lights.c: 18:         LATHbits.LATH1 = 0;
 11709   003FFE  9280               	bcf	128,1,c	;volatile
 11710                           
 11711                           ;buggy_lights.c: 19:         LATDbits.LATD3 = 0;
 11712   004000  967C               	bcf	124,3,c	;volatile
 11713                           
 11714                           ;buggy_lights.c: 20:         LATFbits.LATF0 = 0;
 11715   004002  907E               	bcf	126,0,c	;volatile
 11716                           
 11717                           ;buggy_lights.c: 21:         LATHbits.LATH0 = 0;
 11718   004004  9080               	bcf	128,0,c	;volatile
 11719                           
 11720                           ;buggy_lights.c: 26:             TRISGbits.TRISG1 = 0;
 11721   004006  9287               	bcf	135,1,c	;volatile
 11722                           
 11723                           ;buggy_lights.c: 27:             TRISAbits.TRISA4 = 0;
 11724   004008  9881               	bcf	129,4,c	;volatile
 11725                           
 11726                           ;buggy_lights.c: 28:             TRISFbits.TRISF7 = 0;
 11727   00400A  9E86               	bcf	134,7,c	;volatile
 11728                           
 11729                           ;buggy_lights.c: 30:             LATGbits.LATG1 = 0;
 11730   00400C  927F               	bcf	127,1,c	;volatile
 11731                           
 11732                           ;buggy_lights.c: 31:             LATAbits.LATA4 = 0;
 11733   00400E  9879               	bcf	121,4,c	;volatile
 11734                           
 11735                           ;buggy_lights.c: 32:             LATFbits.LATF7 = 0;
 11736   004010  9E7E               	bcf	126,7,c	;volatile
 11737                           
 11738                           ;buggy_lights.c: 36:             TRISGbits.TRISG0 = 0;
 11739   004012  9087               	bcf	135,0,c	;volatile
 11740                           
 11741                           ;buggy_lights.c: 37:             TRISEbits.TRISE7 = 0;
 11742   004014  9E85               	bcf	133,7,c	;volatile
 11743                           
 11744                           ;buggy_lights.c: 38:             TRISAbits.TRISA3 = 0;
 11745   004016  9681               	bcf	129,3,c	;volatile
 11746                           
 11747                           ;buggy_lights.c: 40:             LATGbits.LATG0 = 0;
 11748   004018  907F               	bcf	127,0,c	;volatile
 11749                           
 11750                           ;buggy_lights.c: 41:             LATEbits.LATE7 = 0;
 11751   00401A  9E7D               	bcf	125,7,c	;volatile
 11752                           
 11753                           ;buggy_lights.c: 42:             LATAbits.LATA3 = 0;
 11754   00401C  9679               	bcf	121,3,c	;volatile
 11755   00401E  0012               	return		;funcret
 11756   004020                     __end_of_buggy_lights_init:
 11757                           	callstack 0
 11758                           
 11759 ;; *************** function _Timer0_init *****************
 11760 ;; Defined at:
 11761 ;;		line 7 in file "timers.c"
 11762 ;; Parameters:    Size  Location     Type
 11763 ;;		None
 11764 ;; Auto vars:     Size  Location     Type
 11765 ;;		None
 11766 ;; Return value:  Size  Location     Type
 11767 ;;                  1    wreg      void 
 11768 ;; Registers used:
 11769 ;;		wreg, status,2, cstack
 11770 ;; Tracked objects:
 11771 ;;		On entry : 0/0
 11772 ;;		On exit  : 0/0
 11773 ;;		Unchanged: 0/0
 11774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11779 ;;Total ram usage:        0 bytes
 11780 ;; Hardware stack levels used: 1
 11781 ;; Hardware stack levels required when called: 3
 11782 ;; This function calls:
 11783 ;;		_reset_timer
 11784 ;;		_start_timer
 11785 ;; This function is called by:
 11786 ;;		_main
 11787 ;; This function uses a non-reentrant model
 11788 ;;
 11789                           
 11790                           	psect	text80
 11791   004072                     __ptext80:
 11792                           	callstack 0
 11793   004072                     _Timer0_init:
 11794                           	callstack 27
 11795   004072                     
 11796                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
 11797   004072  50D6               	movf	214,w,c	;volatile
 11798   004074  0B1F               	andlw	-225
 11799   004076  0940               	iorlw	64
 11800   004078  6ED6               	movwf	214,c	;volatile
 11801   00407A                     
 11802                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
 11803   00407A  88D6               	bsf	214,4,c	;volatile
 11804   00407C                     
 11805                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
 11806   00407C  88D5               	bsf	213,4,c	;volatile
 11807                           
 11808                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
 11809   00407E  50D6               	movf	214,w,c	;volatile
 11810   004080  0BF0               	andlw	-16
 11811   004082  090E               	iorlw	14
 11812   004084  6ED6               	movwf	214,c	;volatile
 11813   004086                     
 11814                           ;timers.c: 18:     reset_timer();
 11815   004086  EC13  F021         	call	_reset_timer	;wreg free
 11816   00408A                     
 11817                           ;timers.c: 19:     T0CON0bits.T0EN=1;
 11818   00408A  8ED5               	bsf	213,7,c	;volatile
 11819                           
 11820                           ;timers.c: 21:     start_timer();
 11821   00408C  EC30  F021         	call	_start_timer	;wreg free
 11822   004090                     
 11823                           ;timers.c: 22:     PIE0bits.TMR0IE = 1;
 11824   004090  010E               	movlb	14	; () banked
 11825   004092  8B29               	bsf	41,5,b	;volatile
 11826   004094                     
 11827                           ; BSR set to: 14
 11828                           ;timers.c: 23:     INTCONbits.PEIE = 1;
 11829   004094  8CF2               	bsf	242,6,c	;volatile
 11830   004096                     
 11831                           ; BSR set to: 14
 11832                           ;timers.c: 24:     INTCONbits.GIE = 1;
 11833   004096  8EF2               	bsf	242,7,c	;volatile
 11834   004098                     
 11835                           ; BSR set to: 14
 11836   004098  0012               	return		;funcret
 11837   00409A                     __end_of_Timer0_init:
 11838                           	callstack 0
 11839                           
 11840 ;; *************** function _start_timer *****************
 11841 ;; Defined at:
 11842 ;;		line 30 in file "timers.c"
 11843 ;; Parameters:    Size  Location     Type
 11844 ;;		None
 11845 ;; Auto vars:     Size  Location     Type
 11846 ;;		None
 11847 ;; Return value:  Size  Location     Type
 11848 ;;                  1    wreg      void 
 11849 ;; Registers used:
 11850 ;;		None
 11851 ;; Tracked objects:
 11852 ;;		On entry : 0/0
 11853 ;;		On exit  : 0/0
 11854 ;;		Unchanged: 0/0
 11855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11860 ;;Total ram usage:        0 bytes
 11861 ;; Hardware stack levels used: 1
 11862 ;; Hardware stack levels required when called: 1
 11863 ;; This function calls:
 11864 ;;		Nothing
 11865 ;; This function is called by:
 11866 ;;		_Timer0_init
 11867 ;;		_forward_navigation
 11868 ;;		_return_to_sender
 11869 ;; This function uses a non-reentrant model
 11870 ;;
 11871                           
 11872                           	psect	text81
 11873   004260                     __ptext81:
 11874                           	callstack 0
 11875   004260                     _start_timer:
 11876                           	callstack 28
 11877   004260                     
 11878                           ;timers.c: 32:     T0CON0bits.T0EN=1;
 11879   004260  8ED5               	bsf	213,7,c	;volatile
 11880   004262  0012               	return		;funcret
 11881   004264                     __end_of_start_timer:
 11882                           	callstack 0
 11883                           
 11884 ;; *************** function _reset_timer *****************
 11885 ;; Defined at:
 11886 ;;		line 70 in file "timers.c"
 11887 ;; Parameters:    Size  Location     Type
 11888 ;;		None
 11889 ;; Auto vars:     Size  Location     Type
 11890 ;;		None
 11891 ;; Return value:  Size  Location     Type
 11892 ;;                  1    wreg      void 
 11893 ;; Registers used:
 11894 ;;		wreg, status,2, cstack
 11895 ;; Tracked objects:
 11896 ;;		On entry : 0/0
 11897 ;;		On exit  : 0/0
 11898 ;;		Unchanged: 0/0
 11899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11904 ;;Total ram usage:        0 bytes
 11905 ;; Hardware stack levels used: 1
 11906 ;; Hardware stack levels required when called: 2
 11907 ;; This function calls:
 11908 ;;		_write_timer
 11909 ;; This function is called by:
 11910 ;;		_Timer0_init
 11911 ;;		_forward_navigation
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           	psect	text82
 11916   004226                     __ptext82:
 11917                           	callstack 0
 11918   004226                     _reset_timer:
 11919                           	callstack 27
 11920   004226                     
 11921                           ;timers.c: 72:     write_timer(0, 0);
 11922   004226  0E00               	movlw	0
 11923   004228  6E01               	movwf	write_timer@tL^0,c
 11924   00422A  0E00               	movlw	0
 11925   00422C  EC19  F021         	call	_write_timer
 11926   004230  0012               	return		;funcret
 11927   004232                     __end_of_reset_timer:
 11928                           	callstack 0
 11929                           
 11930 ;; *************** function _write_timer *****************
 11931 ;; Defined at:
 11932 ;;		line 58 in file "timers.c"
 11933 ;; Parameters:    Size  Location     Type
 11934 ;;  tH              1    wreg     unsigned char 
 11935 ;;  tL              1    0[COMRAM] unsigned char 
 11936 ;; Auto vars:     Size  Location     Type
 11937 ;;  tH              1    1[COMRAM] unsigned char 
 11938 ;; Return value:  Size  Location     Type
 11939 ;;                  1    wreg      void 
 11940 ;; Registers used:
 11941 ;;		wreg
 11942 ;; Tracked objects:
 11943 ;;		On entry : 0/0
 11944 ;;		On exit  : 0/0
 11945 ;;		Unchanged: 0/0
 11946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11947 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11950 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11951 ;;Total ram usage:        2 bytes
 11952 ;; Hardware stack levels used: 1
 11953 ;; Hardware stack levels required when called: 1
 11954 ;; This function calls:
 11955 ;;		Nothing
 11956 ;; This function is called by:
 11957 ;;		_reset_timer
 11958 ;;		_return_to_sender
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           	psect	text83
 11963   004232                     __ptext83:
 11964                           	callstack 0
 11965   004232                     _write_timer:
 11966                           	callstack 28
 11967                           
 11968                           ;incstack = 0
 11969                           ;write_timer@tH stored from wreg
 11970   004232  6E02               	movwf	write_timer@tH^0,c
 11971   004234                     
 11972                           ;timers.c: 58: void write_timer(unsigned char tH, unsigned char tL);timers.c: 59: {;time
      +                          rs.c: 63:     TMR0H = tH;
 11973   004234  C002  FFD4         	movff	write_timer@tH,4052	;volatile
 11974   004238                     
 11975                           ;timers.c: 64:     TMR0L = tL;
 11976   004238  C001  FFD3         	movff	write_timer@tL,4051	;volatile
 11977   00423C  0012               	return		;funcret
 11978   00423E                     __end_of_write_timer:
 11979                           	callstack 0
 11980                           
 11981 ;; *************** function _ISR *****************
 11982 ;; Defined at:
 11983 ;;		line 214 in file "timers.c"
 11984 ;; Parameters:    Size  Location     Type
 11985 ;;		None
 11986 ;; Auto vars:     Size  Location     Type
 11987 ;;		None
 11988 ;; Return value:  Size  Location     Type
 11989 ;;                  1    wreg      void 
 11990 ;; Registers used:
 11991 ;;		wreg, status,2
 11992 ;; Tracked objects:
 11993 ;;		On entry : 0/0
 11994 ;;		On exit  : 0/0
 11995 ;;		Unchanged: 0/0
 11996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12001 ;;Total ram usage:        0 bytes
 12002 ;; Hardware stack levels used: 1
 12003 ;; This function calls:
 12004 ;;		Nothing
 12005 ;; This function is called by:
 12006 ;;		Interrupt level 2
 12007 ;; This function uses a non-reentrant model
 12008 ;;
 12009                           
 12010                           	psect	intcode
 12011   000008                     __pintcode:
 12012                           	callstack 0
 12013   000008                     _ISR:
 12014                           	callstack 23
 12015                           
 12016                           ;incstack = 0
 12017   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 12018   00000A                     
 12019                           ;timers.c: 216:     if (PIR0bits.TMR0IF) {
 12020   00000A  010E               	movlb	14	; () banked
 12021   00000C  AB33               	btfss	51,5,b	;volatile
 12022   00000E  EF0B  F000         	goto	i2u397_41
 12023   000012  EF0D  F000         	goto	i2u397_40
 12024   000016                     i2u397_41:
 12025   000016  EF1F  F000         	goto	i2l751
 12026   00001A                     i2u397_40:
 12027   00001A                     
 12028                           ; BSR set to: 14
 12029                           ;timers.c: 217:         if (returning) {
 12030   00001A  505E               	movf	_returning^0,w,c
 12031   00001C  B4D8               	btfsc	status,2,c
 12032   00001E  EF13  F000         	goto	i2u398_41
 12033   000022  EF15  F000         	goto	i2u398_40
 12034   000026                     i2u398_41:
 12035   000026  EF1A  F000         	goto	i2l4649
 12036   00002A                     i2u398_40:
 12037   00002A                     
 12038                           ; BSR set to: 14
 12039                           ;timers.c: 218:             return_flag = 1;
 12040   00002A  0E01               	movlw	1
 12041   00002C  0100               	movlb	0	; () banked
 12042   00002E  6F87               	movwf	_return_flag& (0+255),b
 12043                           
 12044                           ;timers.c: 219:         } else {
 12045   000030  EF1D  F000         	goto	i2l4651
 12046   000034                     i2l4649:
 12047                           
 12048                           ; BSR set to: 14
 12049                           ;timers.c: 220:             lost_flag = 1;
 12050   000034  0E01               	movlw	1
 12051   000036  0101               	movlb	1	; () banked
 12052   000038  6FA5               	movwf	_lost_flag& (0+255),b
 12053   00003A                     i2l4651:
 12054                           
 12055                           ;timers.c: 222:         PIR0bits.TMR0IF = 0;
 12056   00003A  010E               	movlb	14	; () banked
 12057   00003C  9B33               	bcf	51,5,b	;volatile
 12058   00003E                     i2l751:
 12059                           
 12060                           ; BSR set to: 14
 12061   00003E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 12062   000040  0011               	retfie		f
 12063   000042                     __end_of_ISR:
 12064                           	callstack 0
 12065                           
 12066                           	psect	rparam
 12067   000000                     
 12068                           	psect	temp
 12069   00005F                     btemp:
 12070                           	callstack 0
 12071   00005F                     	ds	1
 12072   000000                     int$flags	set	btemp
 12073   000000                     wtemp8	set	btemp+1
 12074   000000                     ttemp5	set	btemp+1
 12075   000000                     ttemp6	set	btemp+4
 12076   000000                     ttemp7	set	btemp+8
 12077                           
 12078                           	psect	idloc
 12079                           
 12080                           ;Config register IDLOC0 @ 0x200000
 12081                           ;	unspecified, using default values
 12082   200000                     	org	2097152
 12083   200000  FFFF               	dw	65535
 12084                           
 12085                           ;Config register IDLOC1 @ 0x200002
 12086                           ;	unspecified, using default values
 12087   200002                     	org	2097154
 12088   200002  FFFF               	dw	65535
 12089                           
 12090                           ;Config register IDLOC2 @ 0x200004
 12091                           ;	unspecified, using default values
 12092   200004                     	org	2097156
 12093   200004  FFFF               	dw	65535
 12094                           
 12095                           ;Config register IDLOC3 @ 0x200006
 12096                           ;	unspecified, using default values
 12097   200006                     	org	2097158
 12098   200006  FFFF               	dw	65535
 12099                           
 12100                           ;Config register IDLOC4 @ 0x200008
 12101                           ;	unspecified, using default values
 12102   200008                     	org	2097160
 12103   200008  FFFF               	dw	65535
 12104                           
 12105                           ;Config register IDLOC5 @ 0x20000A
 12106                           ;	unspecified, using default values
 12107   20000A                     	org	2097162
 12108   20000A  FFFF               	dw	65535
 12109                           
 12110                           ;Config register IDLOC6 @ 0x20000C
 12111                           ;	unspecified, using default values
 12112   20000C                     	org	2097164
 12113   20000C  FFFF               	dw	65535
 12114                           
 12115                           ;Config register IDLOC7 @ 0x20000E
 12116                           ;	unspecified, using default values
 12117   20000E                     	org	2097166
 12118   20000E  FFFF               	dw	65535
 12119                           
 12120                           	psect	config
 12121                           
 12122                           ;Config register CONFIG1L @ 0x300000
 12123                           ;	External Oscillator mode Selection bits
 12124                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12125                           ;	Power-up default value for COSC bits
 12126                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12127   300000                     	org	3145728
 12128   300000  AA                 	db	170
 12129                           
 12130                           ;Config register CONFIG1H @ 0x300001
 12131                           ;	unspecified, using default values
 12132                           ;	Clock Out Enable bit
 12133                           ;	CLKOUTEN = 0x1, unprogrammed default
 12134                           ;	Clock Switch Enable bit
 12135                           ;	CSWEN = 0x1, unprogrammed default
 12136                           ;	Fail-Safe Clock Monitor Enable bit
 12137                           ;	FCMEN = 0x1, unprogrammed default
 12138   300001                     	org	3145729
 12139   300001  FF                 	db	255
 12140                           
 12141                           ;Config register CONFIG2L @ 0x300002
 12142                           ;	unspecified, using default values
 12143                           ;	Master Clear Enable bit
 12144                           ;	MCLRE = 0x1, unprogrammed default
 12145                           ;	Power-up Timer Enable bit
 12146                           ;	PWRTE = 0x1, unprogrammed default
 12147                           ;	Low-power BOR enable bit
 12148                           ;	LPBOREN = 0x1, unprogrammed default
 12149                           ;	Brown-out Reset Enable bits
 12150                           ;	BOREN = 0x3, unprogrammed default
 12151   300002                     	org	3145730
 12152   300002  FF                 	db	255
 12153                           
 12154                           ;Config register CONFIG2H @ 0x300003
 12155                           ;	unspecified, using default values
 12156                           ;	Brown Out Reset Voltage selection bits
 12157                           ;	BORV = 0x3, unprogrammed default
 12158                           ;	ZCD Disable bit
 12159                           ;	ZCD = 0x1, unprogrammed default
 12160                           ;	PPSLOCK bit One-Way Set Enable bit
 12161                           ;	PPS1WAY = 0x1, unprogrammed default
 12162                           ;	Stack Full/Underflow Reset Enable bit
 12163                           ;	STVREN = 0x1, unprogrammed default
 12164                           ;	Debugger Enable bit
 12165                           ;	DEBUG = 0x1, unprogrammed default
 12166                           ;	Extended Instruction Set Enable bit
 12167                           ;	XINST = 0x1, unprogrammed default
 12168   300003                     	org	3145731
 12169   300003  FF                 	db	255
 12170                           
 12171                           ;Config register CONFIG3L @ 0x300004
 12172                           ;	WDT Period Select bits
 12173                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 12174                           ;	WDT operating mode
 12175                           ;	WDTE = OFF, WDT Disabled
 12176   300004                     	org	3145732
 12177   300004  9F                 	db	159
 12178                           
 12179                           ;Config register CONFIG3H @ 0x300005
 12180                           ;	unspecified, using default values
 12181                           ;	WDT Window Select bits
 12182                           ;	WDTCWS = 0x7, unprogrammed default
 12183                           ;	WDT input clock selector
 12184                           ;	WDTCCS = 0x7, unprogrammed default
 12185   300005                     	org	3145733
 12186   300005  FF                 	db	255
 12187                           
 12188                           ;Config register CONFIG4L @ 0x300006
 12189                           ;	unspecified, using default values
 12190                           ;	Write Protection Block 0
 12191                           ;	WRT0 = 0x1, unprogrammed default
 12192                           ;	Write Protection Block 1
 12193                           ;	WRT1 = 0x1, unprogrammed default
 12194                           ;	Write Protection Block 2
 12195                           ;	WRT2 = 0x1, unprogrammed default
 12196                           ;	Write Protection Block 3
 12197                           ;	WRT3 = 0x1, unprogrammed default
 12198                           ;	Write Protection Block 3
 12199                           ;	WRT4 = 0x1, unprogrammed default
 12200                           ;	Write Protection Block 3
 12201                           ;	WRT5 = 0x1, unprogrammed default
 12202                           ;	Write Protection Block 3
 12203                           ;	WRT6 = 0x1, unprogrammed default
 12204                           ;	Write Protection Block 3
 12205                           ;	WRT7 = 0x1, unprogrammed default
 12206   300006                     	org	3145734
 12207   300006  FF                 	db	255
 12208                           
 12209                           ;Config register CONFIG4H @ 0x300007
 12210                           ;	unspecified, using default values
 12211                           ;	Configuration Register Write Protection bit
 12212                           ;	WRTC = 0x1, unprogrammed default
 12213                           ;	Boot Block Write Protection bit
 12214                           ;	WRTB = 0x1, unprogrammed default
 12215                           ;	Data EEPROM Write Protection bit
 12216                           ;	WRTD = 0x1, unprogrammed default
 12217                           ;	Scanner Enable bit
 12218                           ;	SCANE = 0x1, unprogrammed default
 12219                           ;	Low Voltage Programming Enable bit
 12220                           ;	LVP = 0x1, unprogrammed default
 12221   300007                     	org	3145735
 12222   300007  FF                 	db	255
 12223                           
 12224                           ;Config register CONFIG5L @ 0x300008
 12225                           ;	unspecified, using default values
 12226                           ;	UserNVM Program Memory Code Protection bit
 12227                           ;	CP = 0x1, unprogrammed default
 12228                           ;	DataNVM Memory Code Protection bit
 12229                           ;	CPD = 0x1, unprogrammed default
 12230   300008                     	org	3145736
 12231   300008  FF                 	db	255
 12232                           
 12233                           ;Config register CONFIG5H @ 0x300009
 12234                           ;	unspecified, using default values
 12235   300009                     	org	3145737
 12236   300009  FF                 	db	255
 12237                           
 12238                           ;Config register CONFIG6L @ 0x30000A
 12239                           ;	unspecified, using default values
 12240                           ;	Table Read Protection Block 0
 12241                           ;	EBTR0 = 0x1, unprogrammed default
 12242                           ;	Table Read Protection Block 1
 12243                           ;	EBTR1 = 0x1, unprogrammed default
 12244                           ;	Table Read Protection Block 2
 12245                           ;	EBTR2 = 0x1, unprogrammed default
 12246                           ;	Table Read Protection Block 3
 12247                           ;	EBTR3 = 0x1, unprogrammed default
 12248                           ;	Table Read Protection Block 4
 12249                           ;	EBTR4 = 0x1, unprogrammed default
 12250                           ;	Table Read Protection Block 5
 12251                           ;	EBTR5 = 0x1, unprogrammed default
 12252                           ;	Table Read Protection Block 6
 12253                           ;	EBTR6 = 0x1, unprogrammed default
 12254                           ;	Table Read Protection Block 7
 12255                           ;	EBTR7 = 0x1, unprogrammed default
 12256   30000A                     	org	3145738
 12257   30000A  FF                 	db	255
 12258                           
 12259                           ;Config register CONFIG6H @ 0x30000B
 12260                           ;	unspecified, using default values
 12261                           ;	Boot Block Table Read Protection bit
 12262                           ;	EBTRB = 0x1, unprogrammed default
 12263   30000B                     	org	3145739
 12264   30000B  FF                 	db	255
 12265                           tosu	equ	0xFFF
 12266                           tosh	equ	0xFFE
 12267                           tosl	equ	0xFFD
 12268                           stkptr	equ	0xFFC
 12269                           pclatu	equ	0xFFB
 12270                           pclath	equ	0xFFA
 12271                           pcl	equ	0xFF9
 12272                           tblptru	equ	0xFF8
 12273                           tblptrh	equ	0xFF7
 12274                           tblptrl	equ	0xFF6
 12275                           tablat	equ	0xFF5
 12276                           prodh	equ	0xFF4
 12277                           prodl	equ	0xFF3
 12278                           indf0	equ	0xFEF
 12279                           postinc0	equ	0xFEE
 12280                           postdec0	equ	0xFED
 12281                           preinc0	equ	0xFEC
 12282                           plusw0	equ	0xFEB
 12283                           fsr0h	equ	0xFEA
 12284                           fsr0l	equ	0xFE9
 12285                           wreg	equ	0xFE8
 12286                           indf1	equ	0xFE7
 12287                           postinc1	equ	0xFE6
 12288                           postdec1	equ	0xFE5
 12289                           preinc1	equ	0xFE4
 12290                           plusw1	equ	0xFE3
 12291                           fsr1h	equ	0xFE2
 12292                           fsr1l	equ	0xFE1
 12293                           bsr	equ	0xFE0
 12294                           indf2	equ	0xFDF
 12295                           postinc2	equ	0xFDE
 12296                           postdec2	equ	0xFDD
 12297                           preinc2	equ	0xFDC
 12298                           plusw2	equ	0xFDB
 12299                           fsr2h	equ	0xFDA
 12300                           fsr2l	equ	0xFD9
 12301                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        30
    BSS         103
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     93      94
    BANK0           160     34     104
    BANK1           256    164     226
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    average_RGBC@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    card_blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_cyan@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_cyan@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_white@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_white@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    card_yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    card_yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    colour_to_key@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    colour_to_key@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    convert_HSV@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    convert_HSV@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    forward_navigation@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    forward_navigation@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    forward_navigation@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    forward_navigation@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    max_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    min_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    pick_card@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    pick_card@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    read_timer@tH	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerH(COMRAM[1]), 

    read_timer@tL	PTR unsigned char  size(1) Largest target is 1
		 -> forward_navigation@timerL(COMRAM[1]), 

    read_trail@man	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@mann(COMRAM[1]), 

    read_trail@tH	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerH(COMRAM[1]), 

    read_trail@tL	PTR unsigned char  size(1) Largest target is 1
		 -> return_to_sender@timerL(COMRAM[1]), 

    return_to_sender@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    return_to_sender@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    S1143DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2837$buffer	PTR unsigned char  size(2) Largest target is 0

    S2837$source	PTR const unsigned char  size(2) Largest target is 0

    scale_RGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    sendArrayCharSerial4@arr	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), trail_timer_high(BANK1[20]), trail_timer_low(BANK1[20]), 

    sendHSVvalSerial4@col_val	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    sendRGBCvalSerial4@col_val	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 
		 -> STR_4(CODE[3]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 

    squareReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    squareReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    UTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    UTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    wait_for_wall@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@RGBC_colour(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_forward_navigation
    _return_to_sender->_sendIntSerial4
    _sendIntSerial4->_sprintf
    _forward_navigation->_sendRGBCvalSerial4
    _wait_for_wall->_getRGBCval
    _sendRGBCvalSerial4->_sprintf
    _sendHSVvalSerial4->_sprintf
    _sendArrayCharSerial4->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___lwdiv
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _scale_RGB->___fltol
    ___fltol->___flmul
    ___flmul->___xxtofl
    _pick_card->_card_blue
    _pick_card->_card_cyan
    _pick_card->_card_green
    _pick_card->_card_orange
    _pick_card->_card_pink
    _pick_card->_card_red
    _pick_card->_card_yellow
    _card_yellow->_headbuttReverse
    _card_yellow->_squareReverse
    _card_yellow->_turnLeft90
    _card_yellow->_turnRight90
    _card_white->_UTurn
    _card_white->_headbuttReverse
    _card_red->_headbuttReverse
    _card_red->_turnLeft90
    _card_red->_turnRight90
    _card_pink->_headbuttReverse
    _card_pink->_squareReverse
    _card_pink->_turnLeft90
    _card_pink->_turnRight90
    _squareReverse->_fullSpeedReverse
    _card_orange->_headbuttReverse
    _card_orange->_turnLeft135
    _card_orange->_turnRight135
    _card_green->_headbuttReverse
    _card_green->_turnLeft90
    _card_green->_turnRight90
    _turnRight90->_turnRight
    _turnLeft90->_turnLeft
    _card_cyan->_headbuttReverse
    _card_cyan->_turnLeft135
    _card_cyan->_turnRight135
    _turnRight135->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft135->_turnLeft
    _card_blue->_UTurn
    _card_blue->_headbuttReverse
    _headbuttReverse->_fullSpeedReverse
    _fullSpeedReverse->_setMotorPWM
    _UTurn->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _convert_HSV->___lldiv
    _average_RGBC->___lldiv
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _forward_navigation->_sendArrayCharSerial4

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0  421664
                                              0 BANK0     34    34      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                 _forward_navigation
                    _initDCmotorsPWM
                         _initUSART4
                   _return_to_sender
 ---------------------------------------------------------------------------------
 (1) _return_to_sender                                     5     3      2  195394
                                             76 COMRAM     5     3      2
                     _fullSpeedAhead
                          _pick_card
                         _read_trail
                     _sendIntSerial4
                        _start_timer
                               _stop
                         _stop_timer
                   _toggle_main_beam
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _toggle_main_beam                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _sendIntSerial4                                      19    17      2    5821
                                             57 COMRAM    19    17      2
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _read_trail                                           3     0      3     294
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward_navigation                                   9     5      4  224278
                                             84 COMRAM     9     5      4
                       _average_RGBC
                      _colour_to_key
                        _convert_HSV
                     _fullSpeedAhead
                          _pick_card
                         _read_timer
                        _reset_timer
                          _scale_RGB
               _sendArrayCharSerial4
                  _sendHSVvalSerial4
                 _sendRGBCvalSerial4
                        _start_timer
                               _stop
                         _stop_timer
               _toggle_tricolour_LED
                      _wait_for_wall
                        _write_trail
 ---------------------------------------------------------------------------------
 (2) _write_trail                                          3     1      2     218
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _wait_for_wall                                        4     2      2     910
                                             12 COMRAM     4     2      2
                         _getRGBCval
 ---------------------------------------------------------------------------------
 (2) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendRGBCvalSerial4                                  27    26      1    5735
                                             57 COMRAM    27    26      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sendHSVvalSerial4                                   22    21      1    5713
                                             57 COMRAM    22    21      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sendArrayCharSerial4                               167   165      2    6038
                                             57 COMRAM     3     1      2
                                              0 BANK1    164   164      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             26    15     11    5074
                                             31 COMRAM    26    15     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             4     1      3    4249
                                             27 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           14    11      3    3897
                                             13 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3     934
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _sendStringSerial4                                    2     0      2     447
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (4) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _scale_RGB                                            3     2      1    5963
                                             49 COMRAM     3     2      1
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1236
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1143
                                             39 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3420
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_timer                                           2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _pick_card                                            6     2      4  182450
                                             32 COMRAM     6     2      4
                          _card_blue
                          _card_cyan
                         _card_green
                        _card_orange
                          _card_pink
                           _card_red
                         _card_white
                        _card_yellow
 ---------------------------------------------------------------------------------
 (3) _card_yellow                                          5     2      3   29754
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_white                                           2     0      2   15740
                                             27 COMRAM     2     0      2
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (3) _card_red                                             5     2      3   22850
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_pink                                            5     2      3   29754
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _squareReverse                                        4     2      2    6816
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (3) _card_orange                                          5     2      3   22242
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _card_green                                           5     2      3   22850
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _turnRight90                                          4     2      2    6816
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnLeft90                                           4     2      2    6968
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_cyan                                            5     2      3   22242
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                         4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
            _toggle_right_indicators
                          _turnRight
 ---------------------------------------------------------------------------------
 (5) _turnRight                                            5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                          4     2      2    6664
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_blue                                            5     2      3   15882
                                             27 COMRAM     5     2      3
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (4) _headbuttReverse                                      4     2      2    8640
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
                _toggle_brake_lights
 ---------------------------------------------------------------------------------
 (5) _toggle_brake_lights                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _fullSpeedReverse                                     5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _UTurn                                                4     2      2    6816
                                             23 COMRAM     4     2      2
                               _stop
             _toggle_left_indicators
            _toggle_right_indicators
                           _turnLeft
 ---------------------------------------------------------------------------------
 (5) _turnLeft                                             5     3      2    2747
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _toggle_right_indicators                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _toggle_left_indicators                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _stop                                                 3     1      2    3525
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          5     4      1    1981
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     510
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _convert_HSV                                         52    50      2    5717
                                             13 COMRAM    52    50      2
                            ___lldiv
                             ___lmul
                            _max_RGB
                            _min_RGB
 ---------------------------------------------------------------------------------
 (3) _min_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _max_RGB                                              6     4      2     255
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    1434
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _colour_to_key                                        5     3      2     932
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _average_RGBC                                        20    19      1    3012
                                             13 COMRAM    20    19      1
                            ___lldiv
                         _getRGBCval
 ---------------------------------------------------------------------------------
 (3) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (4) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1834
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (6) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (2) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
     _start_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _forward_navigation
     _average_RGBC
       ___lldiv
       _getRGBCval
         _color_read_Blue
           _I2C_2_Master_Read
             _I2C_2_Master_Idle
           _I2C_2_Master_RepStart
             _I2C_2_Master_Idle
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Clear
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Green
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
         _color_read_Red
           _I2C_2_Master_Read
           _I2C_2_Master_RepStart
           _I2C_2_Master_Start
           _I2C_2_Master_Stop
           _I2C_2_Master_Write
     _colour_to_key
     _convert_HSV
       ___lldiv
       ___lmul
       _max_RGB
       _min_RGB
     _fullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _pick_card
       _card_blue
         _UTurn
           _stop
             _setMotorPWM
           _toggle_left_indicators
           _toggle_right_indicators
           _turnLeft
             _setMotorPWM
         _headbuttReverse
           _fullSpeedReverse
             _setMotorPWM
           _stop
           _toggle_brake_lights
       _card_cyan
         _headbuttReverse
         _turnLeft135
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight135
           _stop
           _toggle_right_indicators
           _turnRight
             _setMotorPWM
       _card_green
         _headbuttReverse
         _turnLeft90
           _stop
           _toggle_left_indicators
           _turnLeft
         _turnRight90
           _stop
           _toggle_right_indicators
           _turnRight
       _card_orange
         _headbuttReverse
         _turnLeft135
         _turnRight135
       _card_pink
         _headbuttReverse
         _squareReverse
           _fullSpeedReverse
           _stop
           _toggle_brake_lights
         _turnLeft90
         _turnRight90
       _card_red
         _headbuttReverse
         _turnLeft90
         _turnRight90
       _card_white
         _UTurn
         _headbuttReverse
       _card_yellow
         _headbuttReverse
         _squareReverse
         _turnLeft90
         _turnRight90
     _read_timer
     _reset_timer
     _scale_RGB
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _sendArrayCharSerial4
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             ___lwdiv
             ___lwmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _sendHSVvalSerial4
       _sendStringSerial4
       _sprintf
     _sendRGBCvalSerial4
       _sendStringSerial4
       _sprintf
     _start_timer
     _stop
     _stop_timer
     _toggle_tricolour_LED
     _wait_for_wall
       _getRGBCval
     _write_trail
   _initDCmotorsPWM
   _initUSART4
   _return_to_sender
     _fullSpeedAhead
     _pick_card
     _read_trail
     _sendIntSerial4
       _sendStringSerial4
       _sprintf
     _start_timer
     _stop
     _stop_timer
     _toggle_main_beam
     _write_timer

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     A4      E2       7       88.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      68       5       65.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5D      5E       1      100.0%
BITBIGSFRlllhhh     52      0       0      42        0.0%
BITBIGSFRlllhhh     37      0       0      44        0.0%
BITBIGSFRlllllh     2A      0       0      55        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRlllhhh     20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      48        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      9      0       0      57        0.0%
BITBIGSFRlllhhh      9      0       0      45        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRlllllh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      56        0.0%
BITBIGSFRllllhh      3      0       0      52        0.0%
BITBIGSFRlllhhh      2      0       0      43        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      46        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      51        0.0%
BITBIGSFRllh         1      0       0      41        0.0%
BITBIGSFRlhh         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A8      61        0.0%
DATA                 0      0     1A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 15:36:43 2024

                   _turn180Delay 00B4                  ??_wait_for_wall 000F                   _color_read_Red 3B16  
                _color_read_Blue 3C06                  _trail_timer_low 01BA           ??_sendArrayCharSerial4 003C  
            card_green@backtrack 001E                               l30 414E                               l33 40BE  
                             l42 2C0A                               l27 401E                               l36 418E  
                             l71 3B64                               l39 416E                               l80 3C04  
                             l65 3FF0                               l74 3BB4                               l83 3AC4  
                             l68 41AE                               l77 3C54                               l96 3D74  
                             l89 227A                               l99 355E                     ___awdiv@sign 0006  
            ___wmul@multiplicand 0003                 _trail_timer_high 01CE                 _color_read_Clear 3BB6  
               _color_read_Green 3B66                              l101 3598                              l104 34E2  
                            l106 351C                              l125 14E4                              l109 2B42  
                            l222 3312                              l320 404A                              l136 1946  
                            l137 1948                              l242 3008                              l250 2F50  
                            l323 4070                              l332 4250                              l317 4048  
                            l229 2722                              l261 2F08                              l237 33A0  
                            l245 3078                              l253 2FC0                              l326 425A  
                            l335 4224                              l272 3F50                              l329 4246  
                            l281 3EA6                              l433 27D4                              l338 3DF8  
                            l258 2E98                              l266 30BE                              l290 3E6C  
                            l275 3F18                              l284 3DB6                              l436 2868  
                            l269 312E                              l278 3EE0                              l703 4098  
                            l287 3F88                              l463 41EA                              l552 38F4  
                            l712 4218                              l545 3824                              l721 3B14  
                            l706 4262                              l538 3754                              l466 41EE  
                            l715 423C                              l475 39BA                              l483 360E  
                            l580 388C                              l724 3E32                              l573 37BC  
                            l469 4202                              l709 425E                              l733 25CE  
                            l718 4230                              l566 34A0                              l486 3A18  
                            l478 412C                              l583 40E4                              l559 3420  
                            l743 2CD0                              l489 3CA0                              l754 410A  
                            l596 2A6C                              l781 3272                              l765 36DC  
                            l766 36EC                              l788 3282                              l985 2D94  
                            l998 31DE                              _ISR 0008           ??_toggle_tricolour_LED 0001  
                            _abs 3F8A                      _start_timer 4260                     ___awmod@sign 0006  
                            wreg 0FE8         __end_of_toggle_main_beam 40C0                     ___flmul@aexp 0020  
                   ___flmul@bexp 0021                     ?_convert_HSV 000E                     ___flmul@sign 001B  
                   ___flmul@temp 0026                     ___flmul@prod 0022                   min_RGB@min_val 0005  
                    _squareDelay 00B0                             ?_ISR 0001                     ___fltol@exp1 0031  
                           l1051 2970                             ?_abs 0007                             l1252 3682  
                           l1412 242E                             l1500 3FBC                             l1245 367A  
                           l1262 3958                             l1423 23C6                             l1255 3950  
                           l1416 236A                             l1512 2E4E                             l1432 3CEC  
                           l3201 366C                             l4001 28FC                             l1409 22D2  
                           l3203 366E                             l3211 2638                             l4011 2924  
                           l4003 2906                             l1523 4264                             l1372 1D72  
                           l4101 2156                             l3205 3674                             l3221 26E6  
                           l3213 264A                             l4013 2930                             l4005 2910  
                           l3301 31CE                             l3223 404A                             l4111 2268  
                           l4103 2166                             l3215 264E                             l3207 25D0  
                           l1375 1C04                             l4015 2940                             l4031 22F8  
                           l4023 227E                             l3231 2CE4                             l3303 31D6  
                           l3311 3910                             l1368 1A0E                             l3225 405A  
                           l4105 2236                             l4201 12A6                             l3217 268C  
                           l3209 25EA                             l3401 2FD6                             l1385 1D34  
                           l1377 1C7C                             l4017 2950                             l4041 2352  
                           l4025 228E                             l3241 2D0A                             l3233 2CEC  
                           l3321 394A                             l3313 3918                             l1473 1F16  
                           l4121 3D64                             l4113 3D32                             l1378 1C6A  
                           l1474 207E                             l4107 2244                             l4211 135E  
                           l4203 12E2                             l4131 0E52                             l3219 26A6  
                           l3411 3030                             l3403 2FE8                             l4019 2960  
                           l4051 23B6                             l4043 2354                             l4035 230C  
                           l4027 229C                             l4123 2A6E                             l3251 2D42  
                           l3243 2D12                             l3235 2CF0                             l3227 2CD2  
                           l3315 3926                             l3307 38F6                             l3331 2DDC  
                           l3323 2D96                             l4115 3D36                             l1492 3A66  
                           l4109 2256                             l4301 17F6                             l4213 1370  
                           l4205 1316                             l4141 0EC4                             l4221 141C  
                           l4133 0E5E                             l4125 0E1A                             l3181 4102  
                           l3413 3038                             l3405 3000                             l3341 412E  
                           l3421 2F12                             l4061 240E                             l4053 23D4  
                           l4045 2360                             l4037 2314                             l4029 22E2  
                           l3261 2D6E                             l3253 2D48                             l3245 2D24  
                           l3237 2CFE                             l3229 2CD6                             l3317 393C  
                           l3309 3908                             l3333 2E0E                             l3325 2DA6  
                           l3501 1EE0                             l1493 3A6E                             l4117 3D3E  
                           l3351 421C                             l4303 1814                             l4311 187A  
                           l4231 14AA                             l4223 142E                             l4215 13B0  
                           l4207 1346                             l4151 0F78                             l4143 0EC4  
                           l4135 0E70                             l4127 0E32                             l3191 3632  
                           l3343 4170                             l3407 3020                             l3415 3048  
                           l3431 2F70                             l3423 2F20                             l4063 241C  
                           l4055 23D6                             l4047 239C                             l4039 2320  
                           l3255 2D5E                             l3247 2D2C                             l3263 2D74  
                           l3239 2D06                             l3271 3130                             l3319 3944  
                           l3327 2DB6                             l3511 1F42                             l3503 1EE8  
                           l4071 2B44                             l4081 4034                             l4073 4020  
                           l3353 4220                             l3361 4242                             l4321 1900  
                           l4313 189A                             l4305 1832                             l4241 14EA  
                           l4233 14B2                             l4225 143A                             l4217 13E4  
                           l4209 1352                             l4161 103C                             l4145 0ED4  
                           l4153 0F84                             l4137 0E7C                             l4129 0E42  
                           l3193 363A                             l3185 3610                             l3345 4150  
                           l3417 3060                             l3409 3028                             l3441 307A  
                           l3601 3EA8                             l3433 2F78                             l3425 2F30  
                           l4065 241E                             l4057 23DA                             l4049 23A8  
                           l3265 2D84                             l3257 2D66                             l3249 2D34  
                           l3281 315C                             l3273 3134                             l1497 3FA4  
                           l3337 3F8A                             l3329 2DC0                             l3521 1FAC  
                           l3513 1F5A                             l3505 1F02                             l4403 4226  
                           l4083 4036                             l4075 402A                             l3347 4252  
                           l3355 4248                             l3371 3DF4                             l3363 3DBA  
                           l4091 20D0                             l4323 1920                             l4315 18BA  
                           l4307 1854                             l4243 1506                             l4251 156A  
                           l4235 14C0                             l4227 1446                             l4219 1414  
                           l4171 10C8                             l4163 106C                             l4155 0F90  
                           l4147 0F14                             l4139 0E9A                             l3195 3648  
                           l3187 3618                             l3179 40E6                             l4331 2E58  
                           l3451 30D6                             l3443 3082                             l3603 3EAC  
                           l3435 2F80                             l3427 2F48                             l3419 2F0A  
                           l3611 3E6E                             l4059 23FE                             l3267 2D8C  
                           l3259 2D68                             l3291 3194                             l3283 3164  
                           l3275 3142                             l3339 3F98                             l3531 1FF2  
                           l3523 1FB0                             l3515 1F68                             l3507 1F04  
                           l4411 3AC6                             l4405 4260                             l4077 4030  
                           l3349 4256                             l3357 424C                             l4085 4192  
                           l3373 3DF6                             l3365 3DBE                             l4093 20EE  
                           l4325 1942                             l4317 18DC                             l4309 1876  
                           l4253 1588                             l4261 15EE                             l4245 1522  
                           l4237 14D2                             l4229 147A                             l4173 10D2  
                           l4181 117E                             l4157 0FC4                             l4149 0F48  
                           l4165 1074                             l3197 364E                             l3189 362A  
                           l4341 2EB8                             l4333 2E66                             l3381 332E  
                           l3621 3D76                             l3461 3116                             l3453 30DE  
                           l3445 308E                             l3605 3EB8                             l3429 2F68  
                           l3437 2F90                             l3613 3E72                             l3293 31AA  
                           l3285 3176                             l3277 314A                             l3525 1FC2  
                           l3517 1F6C                             l3509 1F22                             l3701 3CAE  
                           l4421 3E08                             l4413 3ADE                             l4069 409A  
                           l4079 4032                             l3367 3DC6                             l3359 423E  
                           l4095 2110                             l4087 2080                             l4319 18E0  
                           l4263 160C                             l4271 1672                             l4255 15A6  
                           l4247 1544                             l4239 14E6                             l4191 1238  
                           l4183 118A                             l4175 110E                             l4167 1096  
                           l4159 1008                             l3199 3664                             l4343 2EC0  
                           l4335 2E78                             l3391 3364                             l3383 3336  
                           l3631 3DB2                             l3623 3D7E                             l3455 30E6  
                           l3447 309E                             l3607 3ED0                             l3439 2FA8  
                           l3615 3E7E                             l3295 31B2                             l3287 317E  
                           l3279 314E                             l3527 1FD6                             l3519 1F90  
                           l3535 2008                             l3471 1DB8                             l3543 204C  
                           l3463 1D74                             l3703 3CB6                             l4407 425C  
                           l4431 3E2E                             l4423 3E14                             l4415 3AF0  
                           l4351 410C                             l4433 3FF2                             l4441 3FDC  
                           l3369 3DCE                             l4097 2132                             l4089 20C8  
                           l4273 1690                             l4281 16F6                             l4265 162A  
                           l4257 15C8                             l4249 1566                             l4185 1194  
                           l4177 1142                             l4169 10BC                             l4193 1240  
                           l4345 2EC8                             l4337 2E90                             l4329 2E50  
                           l3385 334C                             l3393 3374                             l3377 3314  
                           l3625 3D8A                             l3457 30EE                             l3449 30B6  
                           l3641 3F84                             l3633 3F52                             l3609 3EDC  
                           l3617 3E96                             l3801 3846                             l3721 372A  
                           l3713 36EE                             l5161 340A                             l4409 4204  
                           l3297 31B8                             l3289 3186                             l3545 206E  
                           l3529 1FF0                             l3537 2038                             l3481 1E1E  
                           l3473 1DBC                             l3465 1D7C                             l3705 3CBE  
                           l4425 3E20                             l4417 3B02                             l4353 4122  
                           l4443 3FE6                             l4435 3FBE                             l3571 3C4C  
                           l3563 3B66                             l4099 2154                             l4283 1712  
                           l4291 1776                             l4275 16AE                             l4267 164C  
                           l4259 15EA                             l4195 1262                             l4187 11D4  
                           l4179 1172                             l4339 2EB0                             l4347 2ED8  
                           l3395 338A                             l3387 3354                             l3379 3318  
                           l3627 3DA2                             l3459 30FE                             l3635 3F56  
                           l3619 3EA2                             l5171 3876                             l3731 37DE  
                           l3651 3E68                             l3643 3E34                             l5163 373E  
                           l3715 36F2                             l3811 40C0                             l3299 31BE  
                           l3547 2076                             l3539 2040                             l3491 1E90  
                           l3483 1E28                             l3475 1DC6                             l3467 1DA2  
                           l3707 3CD6                             l4371 3A0E                             l4427 3E26  
                           l4419 3DFC                             l4451 32BE                             l3813 4234  
                           l4437 3FC2                             l3565 3BAC                             l3557 3B16  
                           l4293 1792                             l4285 172E                             l4277 16D0  
                           l4269 166E                             l3821 36A2                             l4197 1288  
                           l4189 1208                             l4349 2EF0                             l3389 335C  
                           l3397 2FC2                             l3629 3DAE                             l3637 3F62  
                           l5173 38DE                             l3741 388E                             l3805 3862  
                           l3581 3F1A                             l3645 3E38                             l5165 348A  
                           l3717 370E                             l4381 298A                             l3901 1A9E  
                           l3653 41EE                             l5157 202A                             l3493 1EA2  
                           l3485 1E40                             l3477 1DE6                             l3469 1DAA  
                           l3661 3A2C                             l3709 3CE4                             l4373 3C56  
                           l4429 3E2A                             l4461 32FA                             l4453 32E2  
                           l4445 3284                             l3815 4238                             l4439 3FCC  
                           l3831 3206                             l3575 3BB6                             l3559 3B5C  
                           l4295 17AE                             l4287 1750                             l4279 16F2  
                           l3823 36B2                             l3671 354C                             l4199 1294  
                           l3399 2FCA                             l3639 3F78                             l3743 3892  
                           l3583 3F1E                             l3591 3EE2                             l3735 37FA  
                           l3727 37BE                             l5167 37A6                             l3647 3E44  
                           l5159 2A26                             l4391 29EE                             l4383 299E  
                           l3911 1AE0                             l3903 1AAA                             l3655 41FE  
                           l3495 1EB2                             l3487 1E70                             l3479 1E06  
                           l3663 3A46                             l4375 3C96                             l4463 3304  
                           l4455 32EC                             l4447 3294                             l4471 41D8  
                           l4481 4072                             l3841 3250                             l3833 320E  
                           l3569 3C06                             l3577 3BFC                             l3665 3A70  
                           l4297 17D0                             l4289 1772                             l3825 36BC  
                           l3817 3684                             l3673 357E                             l3681 34B0  
                           l3745 38AE                             l3585 3F2A                             l3593 3EE6  
                           l5169 380E                             l3729 37C2                             l3649 3E5C  
                           l4393 2A02                             l4385 29B2                             l4377 2972  
                           l3921 1B42                             l3913 1AF0                             l3905 1AB8  
                           l3497 1EC2                             l3489 1E8C                             l3657 3A1A  
                           l4369 39BC                             l4465 3306                             l4457 32EE  
                           l4449 32BA                             l4473 41DA                             l4561 2C0C  
                           l4491 4090                             l4483 407A                             l3843 3260  
                           l3835 321A                             l3827 31E0                             l4299 17F2  
                           l3819 3694                             l3675 3590                             l3667 351E  
                           l3683 34D0                             l3587 3F40                             l3595 3EF2  
                           l3771 3426                             l3763 33F6                             l3755 33A2  
                           l4387 29C6                             l4379 2976                             l3931 1BEA  
                           l3923 1B5E                             l3915 1B0A                             l3907 1AC4  
                           l3851 1956                             l3691 395A                             l3499 1ED2  
                           l3659 3A1E                             l4467 3310                             l4459 32F8  
                           l4475 41E4                             l4571 2C40                             l4563 2C10  
                           l4493 4094                             l4485 407C                             l3845 3262  
                           l3837 3228                             l3829 31F0                             l3669 352C  
                           l3685 3502                             l3749 38CA                             l3589 3F4C  
                           l3597 3F08                             l3773 344E                             l3757 33A6  
                           l4389 29DA                             l4397 2A12                             l3941 1C26  
                           l3933 1BF4                             l3925 1B88                             l3917 1B1A  
                           l3909 1AD4                             l3861 1996                             l3853 1964  
                           l3693 395E                             l4901 253C                             l4477 41E6  
                           l4469 41CE                             l4581 2C82                             l4573 2C4A  
                           l4565 2C1C                             l4495 4096                             l4487 4086  
                           l3847 326C                             l3839 3232                             l3687 3514  
                           l3679 34A2                             l3599 3F14                             l3791 3792  
                           l3783 3756                             l3759 33CE                             l3951 1C98  
                           l3943 1C34                             l3935 1C02                             l3927 1BBE  
                           l3919 1B36                             l3871 19C6                             l3863 199C  
                           l3855 1966                             l3695 3984                             l4911 2592  
                           l4903 2550                             l4479 41E8                             l4591 2CB4  
                           l4583 2C86                             l4575 2C5C                             l4567 2C2C  
                           l4489 408A                             l3785 375A                             l3777 3476  
                           l3769 3422                             l3961 1D02                             l3953 1CA6  
                           l3945 1C62                             l3937 1C14                             l3929 1BCC  
                           l3881 19FE                             l3873 19C8                             l3865 19AC  
                           l3857 1976                             l3849 194A                             l3697 3988  
                           l4913 259A                             l4905 2562                             l4593 2CBA  
                           l4585 2C92                             l4577 2C70                             l4569 2C36  
                           l4921 2724                             l3787 3776                             l3971 1D58  
                           l3963 1D1C                             l3955 1CD0                             l3939 1C22  
                           l3891 1A4E                             l3883 1A1E                             l3875 19D8  
                           l3867 19B2                             l3859 1986                             l3699 3CA2  
                           l4851 35D8                             l4843 359A                             l4915 25A6  
                           l4907 2566                             l4587 2CA4                             l4579 2C74  
                           l4595 2CBE                             l4931 2796                             l4923 276A  
                           l3797 3826                             l3965 1D38                             l3973 1D5E  
                           l3949 1C8C                             l3957 1CD4                             l3893 1A58  
                           l3885 1A2E                             l3877 19E8                             l3869 19B8  
                           l3981 2882                             l4853 35DC                             l4917 25B2  
                           l4909 258A                             l4861 243C                             l4589 2CB0  
                           l4941 27BE                             l4933 279E                             l4925 2772  
                           l3799 382A                             l3975 1D62                             l3967 1D48  
                           l3959 1CEE                             l3895 1A6E                             l3879 19F8  
                           l3991 28D2                             l4855 35F2                             l4871 2478  
                           l4863 2444                             l4919 25BE                             l4951 27CA  
                           l4943 27C2                             l4935 27A6                             l4927 277A  
                           l3969 1D56                             l3897 1A7A                             l3889 1A42  
                           l3993 28D6                             l3985 2896                             l4849 35A8  
                           l4881 24B0                             l4873 247C                             l4865 2450  
                           l4857 2430                             l4961 282E                             l4953 27CC  
                           l4945 27C4                             l4937 27B6                             l4929 278E  
                           l3899 1A92                             l3995 28E4                             l3987 28C0  
                           l3979 286C                             l4891 24F0                             l4883 24BE  
                           l4875 2494                             l4867 245C                             l4859 2434  
                           l4963 2848                             l4955 27CE                             l4947 27C6  
                           l4939 27BA                             l3989 28C2                             l4893 24F4  
                           l4885 24C2                             l4877 249C                             l4869 2468  
                           l4965 285C                             l4957 27D2                             l4949 27C8  
                           l4895 2516                             l4887 24DA                             l4879 24A4  
                           l4959 27E2                             l4897 252A                             l4889 24EC  
                           l4899 252E                             STR_1 0E0F                             STR_2 0E14  
                           STR_3 0E14                             STR_4 0E11                             STR_5 0E01  
                           STR_6 0E04                             u2000 362A                             u2001 3626  
                           u2010 3648                             u2011 3644                             u2020 3664  
                           u2100 2D42                             u2021 3660                             u2101 2D3E  
                           u2030 25EA                             u2110 2D5E                             u2031 25E6  
                           u2111 2D5A                             u2040 26A6                             u3000 28E4  
                           u2120 2D84                             u2200 3926                             u2041 26A2  
                           u3001 28E0                             u2121 2D80                             u2201 3922  
                           u2050 405A                             u3010 28F8                             u2130 3142  
                           u2210 393C                             u2051 4056                             u3011 28F4  
                           u2131 313E                             u2211 3938                             u2060 4070  
                           u3020 2920                             u3100 23B6                             u2140 315C  
                           u2220 2DA6                             u2061 406C                             u3021 291C  
                           u3101 23B2                             u2141 3158                             u2221 2DA2  
                           u2310 4162                             u3030 2940                             u3110 23C6  
                           u2070 2CE4                             u2150 3176                             u2230 2DB6  
                           u2311 415A                             u3031 293C                             u3111 23C2  
                           u2071 2CE0                             u2151 3172                             u2231 2DB2  
                           u2400 3020                             u3040 2950                             u3120 23D4  
                           u2080 2CFE                             u2160 3194                             u2240 2DDC  
                           u4000 24EC                     _BAUD4CONbits 0EE9                             u2401 301C  
                           u3041 294C                             u3121 23D0                             u2081 2CFA  
                           u2161 3190                             u2241 2DD8                             u4001 24E8  
                           u2330 3DE2                             u2410 3060                             u3130 240E  
                           u3050 228E                             u2090 2D24                             u2170 31AA  
                           u2250 2E0E                             u3210 2B96                             u4010 2506  
                           u2331 3DDA                             u2411 305C                             u3131 240A  
                           u3051 228A                             u2091 2D20                             u2171 31A6  
                           u2251 2E0A                             u3211 2B8E                             u4011 24FE  
                           u2308 4184                             u2420 3078                             u2500 312E  
                           u3140 241C                             u3060 229C                             u2180 31CE  
                           u2260 3F98                             u3300 3D60                             u2421 3074  
                           u2501 312A                             u3141 2418                             u3061 2298  
                           u2181 31CA                             u2261 3F94                             u3301 3D5C  
                           u2350 332E                             u2270 4140                             u2430 2F48  
                           u3070 22F8                             u2190 3908                             u2510 1DA2  
                           u3230 2BB8                             u3310 3D74                             u4030 252A  
                           u3150 40AC                             u4110 281A                             u2351 332A  
                           u2271 4138                             u2431 2F44                             u3071 22F4  
                           u2191 3904                             u2511 1D9E                             u3231 2BB0  
                           u3311 3D70                             u4031 2526                             u3151 40A4  
                           u4111 2812                             u3320 0E70                             u2360 334C  
                           u2328 4164                             u2440 2F68                             u3080 234E  
                           u2600 1F16                             u2520 1DE6                             u3208 2B78  
                           u4040 2562                             u3321 0E6C                             u2361 3348  
                           u2441 2F64                             u3081 234A                             u2601 1F12  
                           u2521 1DE2                             u4041 255E                             u3410 142E  
                           u3330 0E9A                             u2370 338A                             u2290 4182  
                           u2450 2FA8                             u3090 2398                             u2610 1F42  
                           u2530 1E06                             u3250 2BD6                             u3170 2B56  
                           u4050 2578                             _T2PR 0FBC                             u3411 142A  
                           u3331 0E96                             u2371 3386                             u2291 417A  
                           u2451 2FA4                             u3091 2394                             u2611 1F3E  
                           u2531 1E02                             u3251 2BCE                             u3171 2B4E  
                           u4051 2570                             u2348 3DE4                             u3500 160C  
                           u3420 1506                             u2700 3502                             u3340 0EC4  
                           u2380 33A0                             u2460 2FC0                             u2620 1FC2  
                           u2540 1E3C                             u3228 2B98                             u4028 2508  
                           u4108 27FA                             u3501 1608                             u3421 1502  
                           u2701 34FE                             u3405 1360                             u3341 0EC0  
                           u2381 339C                             u2461 2FBC                             u2621 1FBE  
                           u2541 1E36                             u3510 162A                             u3430 1522  
                           u3350 1096                             u2390 3000                             u2470 30B6  
                           u2710 3980                             u2630 1FD2                             u2550 1E3E  
                           u3270 2BF8                             u3190 2B76                             u4070 25CE  
                           u3511 1626                             u3431 151E                             u3351 1092  
                           u2391 2FFC                             u2471 30B2                             u4207 2F86  
                           u2631 1FCE                             u3271 2BF0                             u3191 2B6E  
                           u4071 25CA                             u3600 1750                             u3520 164C  
                           u3440 1544                             u3360 10BC                             u2480 30D6  
                           u2288 4142                             u2800 1976                             u2720 39AA  
                           u2640 2004                             u2560 1EA2                             u3248 2BBA  
                           u3168 40AE                             u4128 281E                             u4080 27E2  
                           u3601 174C                             u3521 1648                             u3441 1540  
                           u3361 10B8                             u2481 30D2                             u4217 3EC2  
                           u2801 1972                             u2641 2000                             u2561 1E9E  
                           u4137 283A                             u4081 27DE                             u3290 2166  
                           u3610 1772                             u3530 166E                             u3450 1566  
                           u3370 1262                             u2490 3116                             u2810 1986  
                           u2650 41FE                             u2730 39BA                             u2570 1EB2  
                           u4090 27F6                             u3291 2162                             u3611 176E  
                           u3531 166A                             u3451 1562                             u3371 125E  
                           u2491 3112                             u4227 3F6C                             u2811 1982  
                           u2651 41FA                             u2731 39B6                             u2571 1EAE  
                           u4147 2486                             u4091 27EC                             u3700 189A  
                           u3620 1792                             u3540 1690                             u3460 1588  
                           u2740 36A2                             u3380 1288                             u2900 1C34  
                           u2820 19C6                             u2580 1EC2                             u2660 3A66  
                           u3268 2BD8                             u3188 2B58                             u4068 257A  
                           u3701 1896                             u3621 178E                             u3541 168C  
                           u3461 1584                             u2741 369E                             u3381 1284  
                           u4237 30F4                             u2901 1C30                             u2821 19C2  
                           u2717 3976                             u2581 1EBE                             u2661 3A62  
                           u4157 24CC                             u3710 18BA                             u3630 17AE  
                           u3550 16AE                             u3470 15A6                             u2750 36DC  
                           u2670 354C                             u2910 1C62                             u2830 19D8  
                           u2590 1ED2                             u3711 18B6                             u3631 17AA  
                           u3551 16AA                             u3471 15A2                             u2751 36D8  
                           u2671 3548                             u4247 3D94                             u4167 3E4E  
                           u2911 1C5E                             u2831 19D4                             u2727 39A0  
                           u2591 1ECE                             u2760 3206                             u3720 18DC  
                           u3640 17D0                             u3560 16D0                             u3480 15C8  
                           u2680 357E                             u2920 1C78                             u2840 19E8  
                           u3288 2BFA                             u2761 3202                             u3721 18D8  
                           u3641 17CC                             u3561 16CC                             u3481 15C4  
                           u2681 357A                             u4257 303E                             u4177 3EFC  
                           u2921 1C74                             u2841 19E4                             u2770 3228  
                           u3730 1900                             u3650 17F2                             u3570 16F2  
                           u3490 15EA                             u2690 34D0                             u2930 1C8C  
                           u2850 1A1E                             u2771 3224                             u3731 18FC  
                           u3651 17EE                             u3571 16EE                             u3491 15E6  
                           u2691 34CC                             u3395 1296                             u4267 336A  
                           u4187 3F34                             u2931 1C88                             u2851 1A1A  
                           u2780 3250                             u3740 1920                             u3660 1814  
                           u3580 1712                             u2940 1CA6                             u2860 1A2E  
                           u3900 2CA4                             u2781 324C                             u3741 191C  
                           u3661 1810                             u3581 170E                             u4277 2ECE  
                           u4197 3E88                             u2941 1CA2                             u2861 1A2A  
                           u3901 2CA0                             u3750 1942                             u3670 1832  
                           u3590 172E                             u2950 1CEE                             u2870 1BA8  
                           u2790 1964                             u3910 2CD0                             u4287 3FD2  
                           u3751 193E                             u3671 182E                             u3591 172A  
                           u2951 1CEA                             u2791 1960                             u3911 2CCC  
                           u3680 1854                             u3760 2E90                             u2960 1D1C  
                           u2880 1C02                             u3681 1850                             u3761 2E8C  
                           u2961 1D18                             u2881 1BFE                             u3690 1876  
                           u3770 2EB0                             u2970 1D56                             u2890 1C22  
                           u3691 1872                             u3771 2EAC                             u2971 1D52  
                           u2891 1C1E                             u2875 1B9E                             u3780 2EF0  
                           u2980 2882                             u3781 2EEC                             u2981 287E  
                           u3790 2F08                             u2990 28B6                             u3791 2F04  
                           u3890 2C5C                             u2995 28AC                             u3891 2C58  
                           u3990 35F2                             u3991 35EE                    _colour_to_key 14E6  
                           abs@a 0007                             _dbuf 0060                             _main 2724  
                           _prec 0084                             _nout 0080                             fsr1h 0FE2  
                           fsr2h 0FDA                             indf1 0FE7                             indf2 0FDF  
                           fsr1l 0FE1                             fsr2l 0FD9                             btemp 005F  
                           _stop 3314               _sendRGBCvalSerial4 39BC                             prodh 0FF4  
                           prodl 0FF3                   ??_average_RGBC 000F                             start 0042  
             average_RGBC@temp_B 001A               average_RGBC@temp_C 001E               average_RGBC@temp_G 0016  
             average_RGBC@temp_R 0012           __end_of_color_read_Red 3B66                headbuttReverse@mL 0018  
              headbuttReverse@mR 0019                     ___param_bank 0000                      _turnLeft135 3EA8  
                          ??_ISR 0001              ?_sendRGBCvalSerial4 003A                            ??_abs 0009  
                  write_timer@tH 0002                    write_timer@tL 0001                    write_trail@tH 0003  
                  write_trail@tL 0001                      _turnRight90 3EE2          _toggle_right_indicators 4150  
                 _sendIntSerial4 410C                    ___fltol@sign1 0030                            ?_main 0001  
             _timer_high_pointer 00AE                  __end_of___awdiv 2D96                  __end_of___awmod 31E0  
                __end_of___flmul 1D74                  __end_of___fltol 2972                  __end_of___lldiv 3284  
                          ?_stop 0013                  ___awdiv@divisor 0003                  __end_of___lwdiv 3684  
                __end_of___lwmod 395A                            i2l751 003E                  ___awdiv@counter 0005  
                   vfpfcnvrt@cnt 0014                     vfpfcnvrt@fmt 000F                            _TMR0H 0FD4  
                          _TMR0L 0FD3                 ?_headbuttReverse 0018              ___lmul@multiplicand 0005  
        __end_of_sendCharSerial4 4204                            _UTurn 3D76       __end_of_I2C_2_Master_Start 425C  
                    _write_timer 4232       __end_of_I2C_2_Master_Write 4226                      _write_trail 3DFA  
                __end_of_max_RGB 359A                  __end_of_min_RGB 351E                            _flags 0086  
           ??_sendRGBCvalSerial4 003B                            _fputc 2D96                            _width 0082  
                          _putch 4264                   ?_colour_to_key 0001                _turnRight135Delay 00B6  
                          tablat 0FF5                  _turnLeft90Delay 00BC                            plusw2 0FDB  
                          ttemp5 0060                            ttemp6 0063                            ttemp7 0067  
                          status 0FD8                            wtemp8 0060                  __end_of_sprintf 3CEE  
               _return_to_sender 2C0C          __end_of_color_read_Blue 3C56                    average_RGBC@i 0011  
                  average_RGBC@p 000E            _I2C_2_Master_RepStart 423E                  ?_color_read_Red 0005  
                __initialization 3CEE                     __end_of_main 286C                     __end_of_stop 33A2  
         __end_of_sendIntSerial4 412E                           ??_main 0088                           ??_stop 0015  
                  __activetblptr 0003                   write_trail@man 0002                     _turnRight135 3E6E  
                         ?_UTurn 0018                   _bottomGearLeft 00C3                     ?_setMotorPWM 000E  
                         ?_fputc 0001                           _CCPR1H 0FAA                           _CCPR2H 0FA6  
                         _CCPR3H 0F25                           _CCPR4H 0F21                    _squareReverse 3E34  
               ___awdiv@dividend 0001                           ?_putch 0001                           _RC0PPS 0E62  
                         _RE2PPS 0E74                           _RD5PPS 0E6F                           _RC7PPS 0E69  
                         _RD6PPS 0E70                           _RE4PPS 0E76                           i2l4651 003A  
                         i2l4643 000A                           _RG6PPS 0E88                           i2l4645 001A  
                         i2l4647 002A                           i2l4649 0034                    vfpfcnvrt@done 0013  
       __end_of_color_click_init 3FF2                           _RX4PPS 0E15                           _TX4REG 0EE4  
               __end_of_card_red 3756                 __end_of___xxtofl 2430                 _fullSpeedReverse 307A  
               _turnLeft135Delay 00B8                    ??_Timer0_init 0003                     ?_reset_timer 0001  
                   _CCPTMRS0bits 0FAD        sendArrayCharSerial4@index 01A1                     vfprintf@cfmt 001F  
                   convert_HSV@C 0040                     convert_HSV@M 003E                           ___lmul 3684  
                   convert_HSV@m 001A                           ___wmul 40E6                        ??___awdiv 0005  
                      ??___awmod 0005                        ??___flmul 0017                        ??___fltol 002C  
                      ??___lldiv 0009        ??_toggle_right_indicators 0001                        ??___lwdiv 000B  
                      ??___lwmod 0005                  ?_sendIntSerial4 003A         ??_toggle_left_indicators 0001  
           forward_navigation@p1 0057             forward_navigation@p2 0058                           clear_0 3D14  
                         clear_1 3D20             forward_navigation@mL 0055             forward_navigation@mR 0056  
               ___awdiv@quotient 0007                  ___awmod@divisor 0003               fullSpeedReverse@mL 0013  
             fullSpeedReverse@mR 0014                           isa$std 0001                  ___awmod@counter 0005  
                      ??_max_RGB 0003               card_blue@backtrack 001E                        ??_min_RGB 0003  
                         fputc@c 0001                _timer_low_pointer 00AC           return_to_sender@timerH 004F  
         return_to_sender@timerL 0050             __end_of_average_RGBC 227C                     __mediumconst 0000  
                         tblptrh 0FF7                           tblptrl 0FF6                           tblptru 0FF8  
               ?_sendCharSerial4 0001              _toggle_brake_lights 412E                           putch@c 0001  
                ??_colour_to_key 0003                   ?_squareReverse 0018                 __end_of_vfprintf 3A70  
                         stop@mL 0013                           stop@mR 0014                ??_initDCmotorsPWM 0003  
                      ??_sprintf 002B                 __end_of_turnLeft 307A              convert_HSV@temp_610 0028  
            convert_HSV@temp_611 002C              convert_HSV@temp_612 0030              convert_HSV@temp_613 0034  
            convert_HSV@temp_614 0020              convert_HSV@temp_609 0038                     ___xxtofl@arg 000B  
                   ___xxtofl@exp 000A                     ___xxtofl@val 0001                _buggy_lights_init 3FF2  
                     __accesstop 0060          __end_of__initialization 3D28         __end_of_color_read_Clear 3C06  
       __end_of_color_read_Green 3BB6                    card_orange@mL 001C                    card_orange@mR 001D  
         ?_I2C_2_Master_RepStart 0001               ?_buggy_lights_init 0001                    ___rparam_used 0001  
                     ___fltol@f1 0028                 ?_color_read_Blue 0005             ?_toggle_brake_lights 0001  
                 __pcstackCOMRAM 0001             _wall_threshold_clear 00BE                    __end_of_UTurn 3DB8  
                    pick_card@mL 0021                      pick_card@mR 0022                     __pidataBANK0 41B0  
            ??_buggy_lights_init 0001                    __end_of_fputc 2E50                    __end_of_putch 4266  
            __end_of_Timer0_init 409A                    card_yellow@mL 001C                    card_yellow@mR 001D  
     __end_of_forward_navigation 25D0                     ?_start_timer 0001                          ??_UTurn 001A  
              ?_toggle_main_beam 0001  __end_of_toggle_right_indicators 4170                          ??_fputc 0004  
      __end_of_buggy_lights_init 4020                       _card_green 37BE                          ??_putch 0001  
             ??_toggle_main_beam 0001                       __pbssBANK0 0060                       __pbssBANK1 01A4  
                     _card_white 40C0                       _getRGBCval 3A70                _color_writetoaddr 4190  
                   _T2CLKCONbits 0FBF            ??_toggle_brake_lights 0001                     ?_turnLeft135 0018  
             ?_color_writetoaddr 0003                          ?___lmul 0001        fullSpeedReverse@rightGear 0017  
           card_yellow@backtrack 001E                          ?___wmul 0001                  _bottomGearRight 00C2  
          __end_of_wait_for_wall 3D76                     ?_turnRight90 0018                   ___lmul@product 0009  
            ??_color_writetoaddr 0004         __end_of_return_to_sender 2CD2                        ?_card_red 001C  
                      ?___xxtofl 0001                  ??_squareReverse 001A                          _SP4BRGH 0EE6  
                        _SP4BRGL 0EE5                     ?_write_timer 0001                     ?_write_trail 0001  
                        _SSP2ADD 0ED6                          _SSP2BUF 0ED5                __end_of_card_blue 38F6  
              __end_of_card_cyan 388E                __end_of_card_pink 34A2           color_writetoaddr@value 0003  
               ??_color_read_Red 0007                          UTurn@mL 0018                          UTurn@mR 0019  
      __end_of_color_writetoaddr 41B0               _I2C_2_Master_Start 4252                       _initUSART4 41CE  
             _I2C_2_Master_Write 421A                          __Hparam 0000                          __Lparam 0000  
              color_read_Red@tmp 000A                      _Timer0_init 4072                       card_red@mL 001C  
                     card_red@mR 001D          sendStringSerial4@string 0002                 _turningRightGear 00C0  
                        ___awdiv 2CD2                          ___awmod 3130                          ___flmul 194A  
                        ___fltol 286C                          ___lldiv 31E0                    convert_HSV@p1 000E  
            ?_I2C_2_Master_Start 0001                    convert_HSV@p2 000F                          ___lwdiv 3610  
            ?_I2C_2_Master_Write 0001                          ___lwmod 38F6                        ?_vfprintf 001C  
              wait_for_wall@loss 000E                     __psmallconst 0E00                     turnLeft90@mL 0018  
                   turnLeft90@mR 0019            sendArrayCharSerial4@i 01A2                          __pcinit 3CEE  
                        __ramtop 0E00                        ?_turnLeft 0013                          __ptext0 2724  
                        __ptext1 2C0C                          __ptext2 409A                          __ptext3 410C  
                        __ptext4 3AC6                          __ptext5 41CE                          __ptext6 3284  
                        __ptext7 2430                          __ptext8 3DFA                          __ptext9 3D32  
                     _read_timer 4204                    ??_card_orange 001F                       _read_trail 3AC6  
                        _max_RGB 351E                          _min_RGB 34A2                    ??_card_yellow 001F  
                      _T2CONbits 0FBD                       ??_card_red 001F                       ??___xxtofl 0005  
               ___awmod@dividend 0001                __end_of_scale_RGB 2B44         __end_of_fullSpeedReverse 3130  
                      _T2HLTbits 0FBE                __end_of_pick_card 2A6E           fullSpeedAhead@leftGear 0016  
                        _sprintf 3CA2             ??_I2C_2_Master_Start 0002             ??_I2C_2_Master_Write 0002  
                    ?_card_green 001C             end_of_initialization 3D28                      ?_card_white 001C  
         _toggle_left_indicators 4170                _sendHSVvalSerial4 3C56         forward_navigation@timerH 005B  
       forward_navigation@timerL 005C                      ?_getRGBCval 000C                          fputc@fp 0003  
              ?_color_click_init 0001               ?_sendHSVvalSerial4 003A                  ___lldiv@divisor 0005  
                colour_to_key@p1 0001                  colour_to_key@p2 0002               ??_color_click_init 0005  
               ??_sendIntSerial4 003C                  ___lldiv@counter 000D                     _average_RGBC 2080  
              __end_of_vfpfcnvrt 2080              ??_sendHSVvalSerial4 003B             convert_HSV@hue_scale 003C  
                        postdec1 0FE5                          postdec2 0FDD                  squareReverse@mL 0018  
                squareReverse@mR 0019                          postinc0 0FEE                          postinc1 0FE6  
                        postinc2 0FDE                 vfpfcnvrt@convarg 0017                       ??_vfprintf 001F  
                _initDCmotorsPWM 3284                       ??_turnLeft 0015             sendIntSerial4@string 003C  
                      _PORTFbits 0F8E               setMotorPWM@negDuty 0012                __end_of_turnRight 2FC2  
           convert_HSV@sat_scale 0018                     read_timer@tH 0001                     read_timer@tL 0002  
                  ___xxtofl@sign 0009                        _TRISAbits 0F81               setMotorPWM@posDuty 0011  
                   read_trail@tH 0001                     read_trail@tL 0002                        _TRISCbits 0F83  
                      _TRISDbits 0F84                        _TRISEbits 0F85                        _TRISFbits 0F86  
                      _TRISGbits 0F87                        _TRISHbits 0F88              __end_of_card_orange 37BE  
      __end_of_sendHSVvalSerial4 3CA2                 fullSpeedAhead@mL 0013                card_red@backtrack 001E  
               fullSpeedAhead@mR 0014         color_writetoaddr@address 0004              __end_of_card_yellow 3422  
        ??_I2C_2_Master_RepStart 0002             card_orange@backtrack 001E                      ___flmul@grs 001C  
                    _CCP1CONbits 0FAB                ?_color_read_Clear 0005                      _CCP2CONbits 0FA7  
              ?_color_read_Green 0005                      _CCP3CONbits 0F26                      ?_initUSART4 0001  
                    _CCP4CONbits 0F22        sendCharSerial4@charToSend 0001                       main@motorL 0090  
                     main@motorR 0099               ??_color_read_Clear 0007               ??_color_read_Green 0007  
                     _stop_timer 425C                       _turnLeft90 3F1A                     pick_card@key 0024  
                 _fullSpeedAhead 2E50                   __end_of___lmul 36EE                      vfpfcnvrt@ap 0010  
                    vfpfcnvrt@cp 0016                      vfpfcnvrt@fp 000E                   __end_of___wmul 410C  
                    ?_read_timer 0001                      ?_read_trail 0001             return_to_sender@mann 0051  
      sendRGBCvalSerial4@col_val 003A         sendHSVvalSerial4@col_val 003A              color_read_Clear@tmp 000A  
            start_initialization 3CEE                    ??_convert_HSV 0010                      __end_of_ISR 0042  
                    __end_of_abs 3FBE                 _turnRight90Delay 00BA        sendRGBCvalSerial4@tempStr 003B  
       sendHSVvalSerial4@tempStr 003B            __end_of_colour_to_key 194A               _forward_navigation 2430  
            color_read_Green@tmp 000A         ?_toggle_right_indicators 0001              ?_forward_navigation 0055  
              ??_headbuttReverse 001A          __end_of_initDCmotorsPWM 3314                      vfprintf@fmt 001D  
         __end_of_fullSpeedAhead 2F0A                         ??___lmul 0009                         ??___wmul 0005  
                   card_green@mL 001C                     card_green@mR 001D                      __pdataBANK0 00AA  
                     scale_RGB@p 0032                      _card_orange 3756                      _card_yellow 33A2  
                 max_RGB@max_val 0005               turnRight@rightGear 0017             ??_forward_navigation 0059  
              ?_return_to_sender 004D                        ___flmul@a 0013                        ___flmul@b 000F  
                    __pbssCOMRAM 005E                    __pcstackBANK0 0088                    __pcstackBANK1 0100  
             ??_return_to_sender 004F                     card_white@mL 001C                     card_white@mR 001D  
             return_to_sender@mL 004D               return_to_sender@mR 004E                  convert_HSV@temp 0024  
   __end_of_sendArrayCharSerial4 3610      __end_of_toggle_brake_lights 4150              __end_of_convert_HSV 14E6  
              turnLeft@rightGear 0017          sendArrayCharSerial4@arr 003A                        _card_blue 388E  
                      _card_cyan 3826                        _card_pink 3422     __end_of_toggle_tricolour_LED 2C0C  
               ___lwdiv@dividend 0007                     ?_Timer0_init 0001                      ?_stop_timer 0001  
                    ?_turnLeft90 0018                  ?_fullSpeedAhead 0013                        __pintcode 0008  
                       ?___awdiv 0001                         ?___awmod 0001                         ?___flmul 000F  
                       ?___fltol 0028                         ?___lldiv 0001                         ?___lwdiv 0007  
                       ?___lwmod 0001                  _turningLeftGear 00C1             I2C_2_Master_Read@ack 0003  
           I2C_2_Master_Read@tmp 0004                         ?_max_RGB 0001                         ?_min_RGB 0001  
                    __smallconst 0E00                    ?_turnRight135 0018                _I2C_2_Master_Idle 404A  
              _I2C_2_Master_Init 4020                _I2C_2_Master_Read 3DB8                _I2C_2_Master_Stop 4248  
              ?_fullSpeedReverse 0013               ?_I2C_2_Master_Idle 0001          ?_toggle_left_indicators 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 000F  
          __end_of_squareReverse 3E6E               ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000B  
             pick_card@backtrack 0023                    _headbuttDelay 00B2         initDCmotorsPWM@PWMperiod 0001  
                       ?_sprintf 0020                     ??_card_green 001F               ??_fullSpeedReverse 0015  
                      _scale_RGB 2A6E                        _rampDelay 00C6                     ??_card_white 001E  
                      _pick_card 2972               card_cyan@backtrack 001E                     ??_getRGBCval 000D  
              _sendStringSerial4 395A              ??_I2C_2_Master_Idle 0001              ??_I2C_2_Master_Init 0001  
            ??_I2C_2_Master_Read 0002                   ___wmul@product 0005                         _LATAbits 0F79  
                     ?_card_blue 001C              ??_I2C_2_Master_Stop 0002                         _LATCbits 0F7B  
                     ?_card_cyan 001C                         _LATDbits 0F7C                         _LATEbits 0F7D  
                       _LATFbits 0F7E                         _LATGbits 0F7F                       ?_card_pink 001C  
                       _LATHbits 0F80                         _PIE0bits 0E29               ?_sendStringSerial4 0002  
                  ??_reset_timer 0003                      turnRight@mL 0013                      turnRight@mR 0014  
                      _lost_flag 01A5                         _PIR0bits 0E33                         _PIR4bits 0E37  
                       i2u397_40 001A                         i2u397_41 0016                         i2u398_40 002A  
                       i2u398_41 0026                 ?_initDCmotorsPWM 0001                ??_sendCharSerial4 0001  
                       _SSP2CON2 0EDA              ??_sendStringSerial4 0004                         _SSP2STAT 0ED8  
                      _returning 005E                        _vfpfcnvrt 1D74               __end_of_card_green 3826  
      __end_of_I2C_2_Master_Idle 4072        __end_of_I2C_2_Master_Init 404A        __end_of_I2C_2_Master_Read 3DFA  
              ___wmul@multiplier 0001               __end_of_card_white 40E6                   ??_turnRight135 001A  
      __end_of_I2C_2_Master_Stop 4252                     setMotorPWM@m 000E      I2C_2_Master_Write@data_byte 0002  
             __end_of_getRGBCval 3AC6   __end_of_toggle_left_indicators 4190       __end_of_sendRGBCvalSerial4 3A1A  
              ??_color_read_Blue 0007                      _convert_HSV 0E1A                  main@RGBC_colour 00A2  
                      _turnRight 2F0A                       vfpfcnvrt@c 001B                ___lmul@multiplier 0001  
                      copy_data0 3D02        __end_of_sendStringSerial4 39BC                       ?_scale_RGB 0032  
                     ?_pick_card 0021               card_pink@backtrack 001E    __end_of_I2C_2_Master_RepStart 4248  
             color_read_Blue@tmp 000A              __end_of_setMotorPWM 2724                     ??_initUSART4 0001  
              turnRight@leftGear 0016                         __Hrparam 0000                 _toggle_main_beam 409A  
                    card_blue@mL 001C                      card_blue@mR 001D                       vfprintf@ap 001E  
                       __Lrparam 0000                       vfprintf@fp 001C                   wait_for_wall@p 000D  
                    card_cyan@mL 001C                      card_cyan@mR 001D                     _sample_count 00C7  
               turnLeft@leftGear 0016                      card_pink@mL 001C                      card_pink@mR 001D  
                     ?_vfpfcnvrt 000E              __end_of_reset_timer 4232                    _wait_for_wall 3D32  
                 turnRight135@mL 0018                   turnRight135@mR 0019             _sendArrayCharSerial4 359A  
                  turnLeft135@mL 0018                    turnLeft135@mR 0019                     ??_read_timer 0003  
                   ??_read_trail 0004                   convert_HSV@hue 001E                   convert_HSV@sat 001C  
                     _ANSELDbits 0EA7                       _ANSELFbits 0EB4                    ??_start_timer 0001  
                     sprintf@fmt 0022                       sprintf@ret 002B                         _card_red 36EE  
                       ___xxtofl 227C                       _T0CON0bits 0FD5                       _T0CON1bits 0FD6  
           _toggle_tricolour_LED 2B44                  ___lwdiv@divisor 0009               __end_of_initUSART4 41EC  
                ___lwdiv@counter 000D                       ?_turnRight 0013                         __ptext10 2B44  
                       __ptext11 425C                         __ptext20 3F8A                         __ptext12 39BC  
                       __ptext21 38F6                         __ptext13 3C56                         __ptext30 4204  
                       __ptext22 3130                         __ptext14 359A                         __ptext31 2972  
                       __ptext23 2CD2                         __ptext15 3CA2                         __ptext40 3F1A  
                       __ptext32 33A2                         __ptext24 395A                         __ptext16 3A1A  
                       __ptext41 3826                         __ptext33 40C0                         __ptext25 41EC  
                       __ptext17 1D74                         __ptext50 2FC2                         __ptext42 3E6E  
                       __ptext34 36EE                         __ptext26 2A6E                         __ptext18 2D96  
                       __ptext51 4150                         __ptext43 2F0A                         __ptext35 3422  
                       __ptext27 227C                         __ptext19 4264                         __ptext60 351E  
                       __ptext52 4170                         __ptext44 3EA8                         __ptext36 3E34  
                       __ptext28 286C                         __ptext61 3684                         __ptext53 3314  
                       __ptext45 388E                         __ptext37 3756                         __ptext29 194A  
                       __ptext70 3DB8                         __ptext62 14E6                         __ptext54 2E50  
                       __ptext46 3F52                         __ptext38 37BE                         __ptext71 31E0  
                       __ptext63 2080                         __ptext55 25D0                         __ptext47 412E  
                       __ptext39 3EE2                         __ptext80 4072                         __ptext72 3FBE  
                       __ptext64 3A70                         __ptext56 40E6                         __ptext48 307A  
                       __ptext81 4260                         __ptext73 4190                         __ptext65 3B16  
                       __ptext57 3610                         __ptext49 3D76                         __ptext82 4226  
                       __ptext74 421A                         __ptext66 3B66                         __ptext58 0E1A  
                       __ptext83 4232                         __ptext75 4248                         __ptext67 3BB6  
                       __ptext59 34A2                         __ptext76 4252                         __ptext68 3C06  
                       __ptext77 404A                         __ptext69 423E                         __ptext78 4020  
                       __ptext79 3FF2                      getRGBCval@p 000C                     _SSP2CON1bits 0ED9  
                _headbuttReverse 3F52                     _SSP2CON2bits 0EDA                      ??_card_blue 001F  
                    ??_card_cyan 001F                      ??_card_pink 001F         fullSpeedReverse@leftGear 0016  
                     turnLeft@mL 0013                       turnLeft@mR 0014           forward_navigation@mann 005D  
             __end_of_read_timer 421A               __end_of_read_trail 3B16                    ??_turnLeft135 001A  
                       isa$xinst 0000                       _RC4STAbits 0EE7                         int$flags 005F  
                       _vfprintf 3A1A                    ??_turnRight90 001A                   ?_wait_for_wall 000D  
          ?_sendArrayCharSerial4 003A                         _turnLeft 2FC2                         max_RGB@p 0001  
                   ?_card_orange 001C                         min_RGB@p 0001                     ?_card_yellow 001C  
                     _INTCONbits 0FF2            ?_toggle_tricolour_LED 0001                    ??_write_timer 0002  
                  ??_write_trail 0003                      _setMotorPWM 25D0                      ??_scale_RGB 0033  
            __end_of_start_timer 4264                         intlevel2 0000                    turnRight90@mL 0018  
                  turnRight90@mR 0019                      ??_pick_card 0025          fullSpeedAhead@rightGear 0017  
                      sprintf@ap 002D                     _topGearRight 00C4                _manoeuvre_pointer 00AA  
               ___lwmod@dividend 0001                 ___lldiv@dividend 0001                 ??_fullSpeedAhead 0015  
           __end_of_turnRight135 3EA8                 colour_to_key@key 0005                   main@HSV_colour 008A  
                    _reset_timer 4226                     ??_stop_timer 0001                     ??_turnLeft90 001A  
                    ??_vfpfcnvrt 0011                 _color_click_init 3FBE              __end_of_turnLeft135 3EE2  
          sendIntSerial4@integer 003A                      _topGearLeft 00C5                         sprintf@f 002E  
                       sprintf@s 0020                       _SSP2DATPPS 0E1D                 ___lldiv@quotient 0009  
        __end_of_headbuttReverse 3F8A                       _SSP2CLKPPS 0E1C                  ___lwmod@divisor 0003  
                ___lwmod@counter 0005              __end_of_turnRight90 3F1A                  _trail_manoeuvre 01A6  
                    ??_turnRight 0015                      _return_flag 0087               __end_of_stop_timer 4260  
             __end_of_turnLeft90 3F52                  _manoeuvre_count 01A4                       _TX4STAbits 0EE8  
                _sendCharSerial4 41EC              __end_of_write_timer 423E              __end_of_write_trail 3E34  
    sendArrayCharSerial4@tempStr 0100                    ?_average_RGBC 000E                    read_trail@man 0003  
