

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 26 16:15:30 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    28   000000                     
    29                           ; Generated 21/07/2023 GMT
    30                           ; 
    31                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F67K40 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63   000000                     
    64                           	psect	idataCOMRAM
    65   00158E                     __pidataCOMRAM:
    66                           	callstack 0
    67                           
    68                           ;initializer for _squareDelay
    69   00158E  012C               	dw	300
    70                           
    71                           ;initializer for _headbuttDelay
    72   001590  0046               	dw	70
    73                           
    74                           ;initializer for _turn180Delay
    75   001592  01FE               	dw	510
    76                           
    77                           ;initializer for _turnRight135Delay
    78   001594  012C               	dw	300
    79                           
    80                           ;initializer for _turnLeft135Delay
    81   001596  012C               	dw	300
    82                           
    83                           ;initializer for _turnRight90Delay
    84   001598  00AF               	dw	175
    85                           
    86                           ;initializer for _turnLeft90Delay
    87   00159A  00AF               	dw	175
    88                           
    89                           ;initializer for _turningGear
    90   00159C  2A                 	db	42
    91                           
    92                           ;initializer for _topGearRight
    93   00159D  20                 	db	32
    94                           
    95                           ;initializer for _topGearLeft
    96   00159E  1E                 	db	30
    97                           
    98                           ;initializer for _rampDelay
    99   00159F  08                 	db	8
   100   000000                     _LATGbits	set	3967
   101   000000                     _LATEbits	set	3965
   102   000000                     _TRISGbits	set	3975
   103   000000                     _TRISEbits	set	3973
   104   000000                     _LATFbits	set	3966
   105   000000                     _LATHbits	set	3968
   106   000000                     _TRISFbits	set	3974
   107   000000                     _TRISHbits	set	3976
   108   000000                     _SSP2CON2bits	set	3802
   109   000000                     _SSP2CLKPPS	set	3612
   110   000000                     _SSP2DATPPS	set	3613
   111   000000                     _RC7PPS	set	3689
   112   000000                     _RE2PPS	set	3700
   113   000000                     _LATCbits	set	3963
   114   000000                     _LATDbits	set	3964
   115   000000                     _TRISDbits	set	3972
   116   000000                     _T2PR	set	4028
   117   000000                     _T2CONbits	set	4029
   118   000000                     _CCPR2H	set	4006
   119   000000                     _CCPR1H	set	4010
   120   000000                     _TRISCbits	set	3971
   121   000000                     _RE4PPS	set	3702
   122   000000                     _RG6PPS	set	3720
   123   000000                     _RD5PPS	set	3695
   124   000000                     _ANSELDbits	set	3751
   125   000000                     _SSP2ADD	set	3798
   126   000000                     _SSP2CON1bits	set	3801
   127   000000                     _CCPR4H	set	3873
   128   000000                     _CCPR3H	set	3877
   129   000000                     _T2CLKCONbits	set	4031
   130   000000                     _T2HLTbits	set	4030
   131   000000                     _CCP1CONbits	set	4011
   132   000000                     _CCPTMRS0bits	set	4013
   133   000000                     _CCP2CONbits	set	4007
   134   000000                     _CCP3CONbits	set	3878
   135   000000                     _CCP4CONbits	set	3874
   136   000000                     _SSP2CON2	set	3802
   137   000000                     _SSP2STAT	set	3800
   138   000000                     _SSP2BUF	set	3797
   139   000000                     _RD6PPS	set	3696
   140                           
   141                           ; #config settings
   142                           
   143                           	psect	cinit
   144   00152C                     __pcinit:
   145                           	callstack 0
   146   00152C                     start_initialization:
   147                           	callstack 0
   148   00152C                     __initialization:
   149                           	callstack 0
   150                           
   151                           ; Initialize objects allocated to COMRAM (18 bytes)
   152                           ; load TBLPTR registers with __pidataCOMRAM
   153   00152C  0E8E               	movlw	low __pidataCOMRAM
   154   00152E  6EF6               	movwf	tblptrl,c
   155   001530  0E15               	movlw	high __pidataCOMRAM
   156   001532  6EF7               	movwf	tblptrh,c
   157   001534  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   158   001536  6EF8               	movwf	tblptru,c
   159   001538  EE00  F035         	lfsr	0,__pdataCOMRAM
   160   00153C  EE10 F012          	lfsr	1,18
   161   001540                     copy_data0:
   162   001540  0009               	tblrd		*+
   163   001542  CFF5 FFEE          	movff	tablat,postinc0
   164   001546  50E5               	movf	postdec1,w,c
   165   001548  50E1               	movf	fsr1l,w,c
   166   00154A  E1FA               	bnz	copy_data0
   167   00154C                     end_of_initialization:
   168                           	callstack 0
   169   00154C                     __end_of__initialization:
   170                           	callstack 0
   171   00154C  0100               	movlb	0
   172   00154E  EF9A  F009         	goto	_main	;jump to C main() function
   173                           
   174                           	psect	dataCOMRAM
   175   000035                     __pdataCOMRAM:
   176                           	callstack 0
   177   000035                     _squareDelay:
   178                           	callstack 0
   179   000035                     	ds	2
   180   000037                     _headbuttDelay:
   181                           	callstack 0
   182   000037                     	ds	2
   183   000039                     _turn180Delay:
   184                           	callstack 0
   185   000039                     	ds	2
   186   00003B                     _turnRight135Delay:
   187                           	callstack 0
   188   00003B                     	ds	2
   189   00003D                     _turnLeft135Delay:
   190                           	callstack 0
   191   00003D                     	ds	2
   192   00003F                     _turnRight90Delay:
   193                           	callstack 0
   194   00003F                     	ds	2
   195   000041                     _turnLeft90Delay:
   196                           	callstack 0
   197   000041                     	ds	2
   198   000043                     _turningGear:
   199                           	callstack 0
   200   000043                     	ds	1
   201   000044                     _topGearRight:
   202                           	callstack 0
   203   000044                     	ds	1
   204   000045                     _topGearLeft:
   205                           	callstack 0
   206   000045                     	ds	1
   207   000046                     _rampDelay:
   208                           	callstack 0
   209   000046                     	ds	1
   210                           
   211                           	psect	cstackCOMRAM
   212   000001                     __pcstackCOMRAM:
   213                           	callstack 0
   214   000001                     ??_lights_flashing:
   215   000001                     ?___wmul:
   216                           	callstack 0
   217   000001                     initDCmotorsPWM@PWMperiod:
   218                           	callstack 0
   219   000001                     ___wmul@multiplier:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x0
   223   000001                     	ds	2
   224   000003                     ___wmul@multiplicand:
   225                           	callstack 0
   226                           
   227                           ; 2 bytes @ 0x2
   228   000003                     	ds	2
   229   000005                     ___wmul@product:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0x4
   233   000005                     	ds	2
   234   000007                     ?___lwdiv:
   235                           	callstack 0
   236   000007                     ___lwdiv@dividend:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0x6
   240   000007                     	ds	2
   241   000009                     ___lwdiv@divisor:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0x8
   245   000009                     	ds	2
   246   00000B                     ___lwdiv@quotient:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0xA
   250   00000B                     	ds	2
   251   00000D                     ___lwdiv@counter:
   252                           	callstack 0
   253                           
   254                           ; 1 bytes @ 0xC
   255   00000D                     	ds	1
   256   00000E                     setMotorPWM@m:
   257                           	callstack 0
   258                           
   259                           ; 1 bytes @ 0xD
   260   00000E                     	ds	1
   261   00000F                     ??_setMotorPWM:
   262                           
   263                           ; 1 bytes @ 0xE
   264   00000F                     	ds	2
   265   000011                     setMotorPWM@posDuty:
   266                           	callstack 0
   267                           
   268                           ; 1 bytes @ 0x10
   269   000011                     	ds	1
   270   000012                     setMotorPWM@negDuty:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x11
   274   000012                     	ds	1
   275   000013                     stop@mL:
   276                           	callstack 0
   277   000013                     turnLeft@mL:
   278                           	callstack 0
   279   000013                     turnRight@mL:
   280                           	callstack 0
   281   000013                     fullSpeedReverse@mL:
   282                           	callstack 0
   283                           
   284                           ; 1 bytes @ 0x12
   285   000013                     	ds	1
   286   000014                     stop@mR:
   287                           	callstack 0
   288   000014                     turnLeft@mR:
   289                           	callstack 0
   290   000014                     turnRight@mR:
   291                           	callstack 0
   292   000014                     fullSpeedReverse@mR:
   293                           	callstack 0
   294                           
   295                           ; 1 bytes @ 0x13
   296   000014                     	ds	1
   297   000015                     ??_stop:
   298   000015                     ??_turnLeft:
   299   000015                     ??_turnRight:
   300   000015                     ??_fullSpeedReverse:
   301                           
   302                           ; 1 bytes @ 0x14
   303   000015                     	ds	1
   304   000016                     turnLeft@leftGear:
   305                           	callstack 0
   306   000016                     turnRight@leftGear:
   307                           	callstack 0
   308   000016                     fullSpeedReverse@leftGear:
   309                           	callstack 0
   310                           
   311                           ; 1 bytes @ 0x15
   312   000016                     	ds	1
   313   000017                     turnLeft@rightGear:
   314                           	callstack 0
   315   000017                     turnRight@rightGear:
   316                           	callstack 0
   317   000017                     fullSpeedReverse@rightGear:
   318                           	callstack 0
   319                           
   320                           ; 1 bytes @ 0x16
   321   000017                     	ds	1
   322   000018                     turnLeft135@mL:
   323                           	callstack 0
   324   000018                     turnRight135@mL:
   325                           	callstack 0
   326   000018                     headbuttReverse@mL:
   327                           	callstack 0
   328                           
   329                           ; 1 bytes @ 0x17
   330   000018                     	ds	1
   331   000019                     turnLeft135@mR:
   332                           	callstack 0
   333   000019                     turnRight135@mR:
   334                           	callstack 0
   335   000019                     headbuttReverse@mR:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0x18
   339   000019                     	ds	1
   340   00001A                     ??_turnLeft135:
   341   00001A                     ??_turnRight135:
   342   00001A                     ??_headbuttReverse:
   343                           
   344                           ; 1 bytes @ 0x19
   345   00001A                     	ds	2
   346   00001C                     cardOrange@mL:
   347                           	callstack 0
   348                           
   349                           ; 1 bytes @ 0x1B
   350   00001C                     	ds	1
   351   00001D                     cardOrange@mR:
   352                           	callstack 0
   353                           
   354                           ; 1 bytes @ 0x1C
   355   00001D                     	ds	1
   356   00001E                     cardOrange@backtrack:
   357                           	callstack 0
   358                           
   359                           ; 1 bytes @ 0x1D
   360   00001E                     	ds	1
   361   00001F                     ??_cardOrange:
   362                           
   363                           ; 1 bytes @ 0x1E
   364   00001F                     	ds	2
   365   000021                     ??_main:
   366                           
   367                           ; 1 bytes @ 0x20
   368   000021                     	ds	2
   369   000023                     main@motorL:
   370                           	callstack 0
   371                           
   372                           ; 9 bytes @ 0x22
   373   000023                     	ds	9
   374   00002C                     main@motorR:
   375                           	callstack 0
   376                           
   377                           ; 9 bytes @ 0x2B
   378   00002C                     	ds	9
   379                           
   380 ;;
   381 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   382 ;;
   383 ;; *************** function _main *****************
   384 ;; Defined at:
   385 ;;		line 23 in file "main.c"
   386 ;; Parameters:    Size  Location     Type
   387 ;;		None
   388 ;; Auto vars:     Size  Location     Type
   389 ;;  motorR          9   43[COMRAM] struct DC_motor
   390 ;;  motorL          9   34[COMRAM] struct DC_motor
   391 ;;  PWMcycle        2    0        unsigned int 
   392 ;;  backtrack       1    0        unsigned char 
   393 ;; Return value:  Size  Location     Type
   394 ;;                  1    wreg      void 
   395 ;; Registers used:
   396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   397 ;; Tracked objects:
   398 ;;		On entry : 0/0
   399 ;;		On exit  : 0/0
   400 ;;		Unchanged: 0/0
   401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   403 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   404 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   405 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   406 ;;Total ram usage:       20 bytes
   407 ;; Hardware stack levels required when called: 5
   408 ;; This function calls:
   409 ;;		_buggy_lights_init
   410 ;;		_cardOrange
   411 ;;		_initDCmotorsPWM
   412 ;;		_lights_flashing
   413 ;; This function is called by:
   414 ;;		Startup code after reset
   415 ;; This function uses a non-reentrant model
   416 ;;
   417                           
   418                           	psect	text0
   419   001334                     __ptext0:
   420                           	callstack 0
   421   001334                     _main:
   422                           	callstack 26
   423   001334                     
   424                           ;main.c: 24:     _delay((unsigned long)((500)*(64000000/4000.0)));
   425   001334  0E29               	movlw	41
   426   001336  6E22               	movwf	(??_main+1)^0,c
   427   001338  0E96               	movlw	150
   428   00133A  6E21               	movwf	??_main^0,c
   429   00133C  0E7F               	movlw	127
   430   00133E                     u997:
   431   00133E  2EE8               	decfsz	wreg,f,c
   432   001340  D7FE               	bra	u997
   433   001342  2E21               	decfsz	??_main^0,f,c
   434   001344  D7FC               	bra	u997
   435   001346  2E22               	decfsz	(??_main+1)^0,f,c
   436   001348  D7FA               	bra	u997
   437   00134A  0000               	nop	
   438   00134C                     
   439                           ;main.c: 27:     initDCmotorsPWM(PWMcycle);
   440   00134C  0E00               	movlw	0
   441   00134E  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   442   001350  0E63               	movlw	99
   443   001352  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   444   001354  EC0B  F009         	call	_initDCmotorsPWM	;wreg free
   445   001358                     
   446                           ;main.c: 29:     struct DC_motor motorL, motorR;;main.c: 31:     motorL.power = 0;
   447   001358  0E00               	movlw	0
   448   00135A  6E23               	movwf	main@motorL^0,c
   449   00135C                     
   450                           ;main.c: 32:     motorL.direction = 1;
   451   00135C  0E01               	movlw	1
   452   00135E  6E24               	movwf	(main@motorL+1)^0,c
   453   001360                     
   454                           ;main.c: 33:     motorL.brakemode = 1;
   455   001360  0E01               	movlw	1
   456   001362  6E25               	movwf	(main@motorL+2)^0,c
   457   001364                     
   458                           ;main.c: 34:     motorL.PWMperiod = PWMcycle;
   459   001364  0E00               	movlw	0
   460   001366  6E27               	movwf	(main@motorL+4)^0,c
   461   001368  0E63               	movlw	99
   462   00136A  6E26               	movwf	(main@motorL+3)^0,c
   463   00136C                     
   464                           ;main.c: 35:     motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   465   00136C  0EAA               	movlw	170
   466   00136E  6E28               	movwf	(main@motorL+5)^0,c
   467   001370  0E0F               	movlw	15
   468   001372  6E29               	movwf	(main@motorL+6)^0,c
   469   001374                     
   470                           ;main.c: 36:     motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   471   001374  0EA6               	movlw	166
   472   001376  6E2A               	movwf	(main@motorL+7)^0,c
   473   001378  0E0F               	movlw	15
   474   00137A  6E2B               	movwf	(main@motorL+8)^0,c
   475   00137C                     
   476                           ;main.c: 38:     motorR.power = 0;
   477   00137C  0E00               	movlw	0
   478   00137E  6E2C               	movwf	main@motorR^0,c
   479   001380                     
   480                           ;main.c: 39:     motorR.direction = 1;
   481   001380  0E01               	movlw	1
   482   001382  6E2D               	movwf	(main@motorR+1)^0,c
   483   001384                     
   484                           ;main.c: 40:     motorR.brakemode = 1;
   485   001384  0E01               	movlw	1
   486   001386  6E2E               	movwf	(main@motorR+2)^0,c
   487   001388                     
   488                           ;main.c: 41:     motorR.PWMperiod = PWMcycle;
   489   001388  0E00               	movlw	0
   490   00138A  6E30               	movwf	(main@motorR+4)^0,c
   491   00138C  0E63               	movlw	99
   492   00138E  6E2F               	movwf	(main@motorR+3)^0,c
   493   001390                     
   494                           ;main.c: 42:     motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   495   001390  0E25               	movlw	37
   496   001392  6E31               	movwf	(main@motorR+5)^0,c
   497   001394  0E0F               	movlw	15
   498   001396  6E32               	movwf	(main@motorR+6)^0,c
   499   001398                     
   500                           ;main.c: 43:     motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   501   001398  0E21               	movlw	33
   502   00139A  6E33               	movwf	(main@motorR+7)^0,c
   503   00139C  0E0F               	movlw	15
   504   00139E  6E34               	movwf	(main@motorR+8)^0,c
   505   0013A0                     
   506                           ;main.c: 45:     buggy_lights_init();
   507   0013A0  ECBC  F00A         	call	_buggy_lights_init	;wreg free
   508   0013A4                     
   509                           ;main.c: 49:     cardOrange(&motorL, &motorR, backtrack);
   510   0013A4  0E23               	movlw	low main@motorL
   511   0013A6  6E1C               	movwf	cardOrange@mL^0,c
   512   0013A8  0E2C               	movlw	low main@motorR
   513   0013AA  6E1D               	movwf	cardOrange@mR^0,c
   514   0013AC  0E01               	movlw	1
   515   0013AE  6E1E               	movwf	cardOrange@backtrack^0,c
   516   0013B0  EC1A  F00A         	call	_cardOrange	;wreg free
   517   0013B4                     l1890:
   518                           
   519                           ;main.c: 54:         lights_flashing();
   520   0013B4  ECBE  F008         	call	_lights_flashing	;wreg free
   521   0013B8  EFDA  F009         	goto	l1890
   522   0013BC  EF00  F000         	goto	start
   523   0013C0                     __end_of_main:
   524                           	callstack 0
   525                           
   526 ;; *************** function _lights_flashing *****************
   527 ;; Defined at:
   528 ;;		line 21 in file "buggy_lights.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;		None
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, status,2, status,0
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   544 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   545 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   546 ;;Total ram usage:        2 bytes
   547 ;; Hardware stack levels used: 1
   548 ;; This function calls:
   549 ;;		Nothing
   550 ;; This function is called by:
   551 ;;		_main
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text1
   556   00117C                     __ptext1:
   557                           	callstack 0
   558   00117C                     _lights_flashing:
   559                           	callstack 30
   560   00117C                     
   561                           ;buggy_lights.c: 23:     LATDbits.LATD4 = !LATDbits.LATD4;
   562   00117C  A87C               	btfss	124,4,c	;volatile
   563   00117E  EFC3  F008         	goto	u221
   564   001182  EFC7  F008         	goto	u220
   565   001186                     u221:
   566   001186  6A01               	clrf	??_lights_flashing^0,c
   567   001188  2A01               	incf	??_lights_flashing^0,f,c
   568   00118A  EFC8  F008         	goto	u238
   569   00118E                     u220:
   570   00118E  6A01               	clrf	??_lights_flashing^0,c
   571   001190                     u238:
   572   001190  3A01               	swapf	??_lights_flashing^0,f,c
   573   001192  507C               	movf	124,w,c	;volatile
   574   001194  1801               	xorwf	??_lights_flashing^0,w,c
   575   001196  0BEF               	andlw	-17
   576   001198  1801               	xorwf	??_lights_flashing^0,w,c
   577   00119A  6E7C               	movwf	124,c	;volatile
   578                           
   579                           ;buggy_lights.c: 24:     LATDbits.LATD3 = !LATDbits.LATD3;
   580   00119C  A67C               	btfss	124,3,c	;volatile
   581   00119E  EFD3  F008         	goto	u241
   582   0011A2  EFD7  F008         	goto	u240
   583   0011A6                     u241:
   584   0011A6  6A01               	clrf	??_lights_flashing^0,c
   585   0011A8  2A01               	incf	??_lights_flashing^0,f,c
   586   0011AA  EFD8  F008         	goto	u258
   587   0011AE                     u240:
   588   0011AE  6A01               	clrf	??_lights_flashing^0,c
   589   0011B0                     u258:
   590   0011B0  4601               	rlncf	??_lights_flashing^0,f,c
   591   0011B2  4601               	rlncf	??_lights_flashing^0,f,c
   592   0011B4  4601               	rlncf	??_lights_flashing^0,f,c
   593   0011B6  507C               	movf	124,w,c	;volatile
   594   0011B8  1801               	xorwf	??_lights_flashing^0,w,c
   595   0011BA  0BF7               	andlw	-9
   596   0011BC  1801               	xorwf	??_lights_flashing^0,w,c
   597   0011BE  6E7C               	movwf	124,c	;volatile
   598   0011C0                     
   599                           ;buggy_lights.c: 25:     _delay((unsigned long)((500)*(64000000/4000.0)));
   600   0011C0  0E29               	movlw	41
   601   0011C2  6E02               	movwf	(??_lights_flashing+1)^0,c
   602   0011C4  0E96               	movlw	150
   603   0011C6  6E01               	movwf	??_lights_flashing^0,c
   604   0011C8  0E7F               	movlw	127
   605   0011CA                     u1007:
   606   0011CA  2EE8               	decfsz	wreg,f,c
   607   0011CC  D7FE               	bra	u1007
   608   0011CE  2E01               	decfsz	??_lights_flashing^0,f,c
   609   0011D0  D7FC               	bra	u1007
   610   0011D2  2E02               	decfsz	(??_lights_flashing+1)^0,f,c
   611   0011D4  D7FA               	bra	u1007
   612   0011D6  0000               	nop	
   613   0011D8                     
   614                           ;buggy_lights.c: 26:     LATFbits.LATF0 = !LATFbits.LATF0;
   615   0011D8  A07E               	btfss	126,0,c	;volatile
   616   0011DA  EFF1  F008         	goto	u261
   617   0011DE  EFF5  F008         	goto	u260
   618   0011E2                     u261:
   619   0011E2  6A01               	clrf	??_lights_flashing^0,c
   620   0011E4  2A01               	incf	??_lights_flashing^0,f,c
   621   0011E6  EFF6  F008         	goto	u278
   622   0011EA                     u260:
   623   0011EA  6A01               	clrf	??_lights_flashing^0,c
   624   0011EC                     u278:
   625   0011EC  507E               	movf	126,w,c	;volatile
   626   0011EE  1801               	xorwf	??_lights_flashing^0,w,c
   627   0011F0  0BFE               	andlw	-2
   628   0011F2  1801               	xorwf	??_lights_flashing^0,w,c
   629   0011F4  6E7E               	movwf	126,c	;volatile
   630   0011F6                     
   631                           ;buggy_lights.c: 27:     LATHbits.LATH0 = !LATHbits.LATH0;
   632   0011F6  A080               	btfss	128,0,c	;volatile
   633   0011F8  EF00  F009         	goto	u281
   634   0011FC  EF04  F009         	goto	u280
   635   001200                     u281:
   636   001200  6A01               	clrf	??_lights_flashing^0,c
   637   001202  2A01               	incf	??_lights_flashing^0,f,c
   638   001204  EF05  F009         	goto	u298
   639   001208                     u280:
   640   001208  6A01               	clrf	??_lights_flashing^0,c
   641   00120A                     u298:
   642   00120A  5080               	movf	128,w,c	;volatile
   643   00120C  1801               	xorwf	??_lights_flashing^0,w,c
   644   00120E  0BFE               	andlw	-2
   645   001210  1801               	xorwf	??_lights_flashing^0,w,c
   646   001212  6E80               	movwf	128,c	;volatile
   647   001214  0012               	return		;funcret
   648   001216                     __end_of_lights_flashing:
   649                           	callstack 0
   650                           
   651 ;; *************** function _initDCmotorsPWM *****************
   652 ;; Defined at:
   653 ;;		line 5 in file "dc_motor.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   656 ;; Auto vars:     Size  Location     Type
   657 ;;		None
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, status,2
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   667 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   670 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   671 ;;Total ram usage:        2 bytes
   672 ;; Hardware stack levels used: 1
   673 ;; This function calls:
   674 ;;		Nothing
   675 ;; This function is called by:
   676 ;;		_main
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680                           	psect	text2
   681   001216                     __ptext2:
   682                           	callstack 0
   683   001216                     _initDCmotorsPWM:
   684                           	callstack 30
   685   001216                     
   686                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   687   001216  9485               	bcf	133,2,c	;volatile
   688                           
   689                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   690   001218  9885               	bcf	133,4,c	;volatile
   691                           
   692                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   693   00121A  9E83               	bcf	131,7,c	;volatile
   694                           
   695                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   696   00121C  9C87               	bcf	135,6,c	;volatile
   697                           
   698                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   699   00121E  947D               	bcf	125,2,c	;volatile
   700                           
   701                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   702   001220  987D               	bcf	125,4,c	;volatile
   703                           
   704                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   705   001222  9E7B               	bcf	123,7,c	;volatile
   706                           
   707                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   708   001224  9C7F               	bcf	127,6,c	;volatile
   709   001226                     
   710                           ;dc_motor.c: 18:     RE2PPS=0x05;
   711   001226  0E05               	movlw	5
   712   001228  010E               	movlb	14	; () banked
   713   00122A  6F74               	movwf	116,b	;volatile
   714                           
   715                           ;dc_motor.c: 19:     RE4PPS=0x06;
   716   00122C  0E06               	movlw	6
   717   00122E  6F76               	movwf	118,b	;volatile
   718                           
   719                           ;dc_motor.c: 20:     RC7PPS=0x07;
   720   001230  0E07               	movlw	7
   721   001232  6F69               	movwf	105,b	;volatile
   722                           
   723                           ;dc_motor.c: 21:     RG6PPS=0x08;
   724   001234  0E08               	movlw	8
   725   001236  6F88               	movwf	136,b	;volatile
   726                           
   727                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   728   001238  50BD               	movf	189,w,c	;volatile
   729   00123A  0B8F               	andlw	-113
   730   00123C  0940               	iorlw	64
   731   00123E  6EBD               	movwf	189,c	;volatile
   732                           
   733                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   734   001240  0EE0               	movlw	-32
   735   001242  16BE               	andwf	190,f,c	;volatile
   736                           
   737                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   738   001244  50BF               	movf	191,w,c	;volatile
   739   001246  0BF0               	andlw	-16
   740   001248  0901               	iorlw	1
   741   00124A  6EBF               	movwf	191,c	;volatile
   742   00124C                     
   743                           ; BSR set to: 14
   744                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   745   00124C  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   746   001250                     
   747                           ; BSR set to: 14
   748                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   749   001250  8EBD               	bsf	189,7,c	;volatile
   750                           
   751                           ;dc_motor.c: 35:     CCPR1H=0;
   752   001252  0E00               	movlw	0
   753   001254  6EAA               	movwf	170,c	;volatile
   754                           
   755                           ;dc_motor.c: 36:     CCPR2H=0;
   756   001256  0E00               	movlw	0
   757   001258  6EA6               	movwf	166,c	;volatile
   758                           
   759                           ;dc_motor.c: 37:     CCPR3H=0;
   760   00125A  0E00               	movlw	0
   761   00125C  010F               	movlb	15	; () banked
   762   00125E  6F25               	movwf	37,b	;volatile
   763                           
   764                           ;dc_motor.c: 38:     CCPR4H=0;
   765   001260  0E00               	movlw	0
   766   001262  6F21               	movwf	33,b	;volatile
   767                           
   768                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   769   001264  0EFC               	movlw	-4
   770   001266  16AD               	andwf	173,f,c	;volatile
   771                           
   772                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   773   001268  0EF3               	movlw	-13
   774   00126A  16AD               	andwf	173,f,c	;volatile
   775                           
   776                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   777   00126C  0ECF               	movlw	-49
   778   00126E  16AD               	andwf	173,f,c	;volatile
   779                           
   780                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   781   001270  0E3F               	movlw	-193
   782   001272  16AD               	andwf	173,f,c	;volatile
   783   001274                     
   784                           ; BSR set to: 15
   785                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   786   001274  88AB               	bsf	171,4,c	;volatile
   787                           
   788                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   789   001276  50AB               	movf	171,w,c	;volatile
   790   001278  0BF0               	andlw	-16
   791   00127A  090C               	iorlw	12
   792   00127C  6EAB               	movwf	171,c	;volatile
   793   00127E                     
   794                           ; BSR set to: 15
   795                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   796   00127E  8EAB               	bsf	171,7,c	;volatile
   797   001280                     
   798                           ; BSR set to: 15
   799                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
   800   001280  88A7               	bsf	167,4,c	;volatile
   801                           
   802                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
   803   001282  50A7               	movf	167,w,c	;volatile
   804   001284  0BF0               	andlw	-16
   805   001286  090C               	iorlw	12
   806   001288  6EA7               	movwf	167,c	;volatile
   807   00128A                     
   808                           ; BSR set to: 15
   809                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
   810   00128A  8EA7               	bsf	167,7,c	;volatile
   811   00128C                     
   812                           ; BSR set to: 15
   813                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
   814   00128C  8926               	bsf	38,4,b	;volatile
   815                           
   816                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
   817   00128E  5126               	movf	38,w,b	;volatile
   818   001290  0BF0               	andlw	-16
   819   001292  090C               	iorlw	12
   820   001294  6F26               	movwf	38,b	;volatile
   821   001296                     
   822                           ; BSR set to: 15
   823                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
   824   001296  8F26               	bsf	38,7,b	;volatile
   825   001298                     
   826                           ; BSR set to: 15
   827                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
   828   001298  8922               	bsf	34,4,b	;volatile
   829                           
   830                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
   831   00129A  5122               	movf	34,w,b	;volatile
   832   00129C  0BF0               	andlw	-16
   833   00129E  090C               	iorlw	12
   834   0012A0  6F22               	movwf	34,b	;volatile
   835   0012A2                     
   836                           ; BSR set to: 15
   837                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
   838   0012A2  8F22               	bsf	34,7,b	;volatile
   839   0012A4                     
   840                           ; BSR set to: 15
   841   0012A4  0012               	return		;funcret
   842   0012A6                     __end_of_initDCmotorsPWM:
   843                           	callstack 0
   844                           
   845 ;; *************** function _cardOrange *****************
   846 ;; Defined at:
   847 ;;		line 14 in file "manoeuvres.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;  mL              1   27[COMRAM] PTR struct DC_motor
   850 ;;		 -> main@motorL(9), 
   851 ;;  mR              1   28[COMRAM] PTR struct DC_motor
   852 ;;		 -> main@motorR(9), 
   853 ;;  backtrack       1   29[COMRAM] unsigned char 
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   865 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   868 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   869 ;;Total ram usage:        5 bytes
   870 ;; Hardware stack levels used: 1
   871 ;; Hardware stack levels required when called: 4
   872 ;; This function calls:
   873 ;;		_headbuttReverse
   874 ;;		_turnLeft135
   875 ;;		_turnRight135
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text3
   882   001434                     __ptext3:
   883                           	callstack 0
   884   001434                     _cardOrange:
   885                           	callstack 26
   886   001434                     
   887                           ;manoeuvres.c: 14: void cardOrange(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 15: {;manoeuvres.c: 16:     switch (backtrack) {
   888   001434  EF38  F00A         	goto	l1808
   889   001438                     l1802:
   890                           
   891                           ;manoeuvres.c: 18:             headbuttReverse(mL, mR);
   892   001438  C01C  F018         	movff	cardOrange@mL,headbuttReverse@mL
   893   00143C  C01D  F019         	movff	cardOrange@mR,headbuttReverse@mR
   894   001440  EC7E  F00A         	call	_headbuttReverse	;wreg free
   895                           
   896                           ;manoeuvres.c: 19:             turnRight135(mL, mR);
   897   001444  C01C  F018         	movff	cardOrange@mL,turnRight135@mL
   898   001448  C01D  F019         	movff	cardOrange@mR,turnRight135@mR
   899   00144C  EC4E  F00A         	call	_turnRight135	;wreg free
   900                           
   901                           ;manoeuvres.c: 20:             break;
   902   001450  EF4D  F00A         	goto	l334
   903   001454                     l1804:
   904                           
   905                           ;manoeuvres.c: 22:             turnLeft135(mL, mR);
   906   001454  C01C  F018         	movff	cardOrange@mL,turnLeft135@mL
   907   001458  C01D  F019         	movff	cardOrange@mR,turnLeft135@mR
   908   00145C  EC66  F00A         	call	_turnLeft135	;wreg free
   909                           
   910                           ;manoeuvres.c: 23:             headbuttReverse(mL, mR);
   911   001460  C01C  F018         	movff	cardOrange@mL,headbuttReverse@mL
   912   001464  C01D  F019         	movff	cardOrange@mR,headbuttReverse@mR
   913   001468  EC7E  F00A         	call	_headbuttReverse	;wreg free
   914                           
   915                           ;manoeuvres.c: 24:             break;
   916   00146C  EF4D  F00A         	goto	l334
   917   001470                     l1808:
   918   001470  501E               	movf	cardOrange@backtrack^0,w,c
   919   001472  6E1F               	movwf	??_cardOrange^0,c
   920   001474  6A20               	clrf	(??_cardOrange+1)^0,c
   921                           
   922                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   923                           ; Switch size 1, requested type "simple"
   924                           ; Number of cases is 1, Range of values is 0 to 0
   925                           ; switch strategies available:
   926                           ; Name         Instructions Cycles
   927                           ; simple_byte            4     3 (average)
   928                           ;	Chosen strategy is simple_byte
   929   001476  5020               	movf	(??_cardOrange+1)^0,w,c
   930   001478  0A00               	xorlw	0	; case 0
   931   00147A  B4D8               	btfsc	status,2,c
   932   00147C  EF42  F00A         	goto	l1928
   933   001480  EF4D  F00A         	goto	l334
   934   001484                     l1928:
   935                           
   936                           ; Switch size 1, requested type "simple"
   937                           ; Number of cases is 2, Range of values is 0 to 1
   938                           ; switch strategies available:
   939                           ; Name         Instructions Cycles
   940                           ; simple_byte            7     4 (average)
   941                           ;	Chosen strategy is simple_byte
   942   001484  501F               	movf	??_cardOrange^0,w,c
   943   001486  0A00               	xorlw	0	; case 0
   944   001488  B4D8               	btfsc	status,2,c
   945   00148A  EF1C  F00A         	goto	l1802
   946   00148E  0A01               	xorlw	1	; case 1
   947   001490  B4D8               	btfsc	status,2,c
   948   001492  EF2A  F00A         	goto	l1804
   949   001496  EF4D  F00A         	goto	l334
   950   00149A                     l334:
   951   00149A  0012               	return		;funcret
   952   00149C                     __end_of_cardOrange:
   953                           	callstack 0
   954                           
   955 ;; *************** function _turnRight135 *****************
   956 ;; Defined at:
   957 ;;		line 190 in file "dc_motor.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  mL              1   23[COMRAM] PTR struct DC_motor
   960 ;;		 -> main@motorL(9), 
   961 ;;  mR              1   24[COMRAM] PTR struct DC_motor
   962 ;;		 -> main@motorR(9), 
   963 ;; Auto vars:     Size  Location     Type
   964 ;;		None
   965 ;; Return value:  Size  Location     Type
   966 ;;                  1    wreg      void 
   967 ;; Registers used:
   968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   976 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   977 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   978 ;;Total ram usage:        4 bytes
   979 ;; Hardware stack levels used: 1
   980 ;; Hardware stack levels required when called: 3
   981 ;; This function calls:
   982 ;;		_stop
   983 ;;		_turnRight
   984 ;; This function is called by:
   985 ;;		_cardOrange
   986 ;;		_cardCyan
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text4
   991   00149C                     __ptext4:
   992                           	callstack 0
   993   00149C                     _turnRight135:
   994                           	callstack 26
   995   00149C                     
   996                           ;dc_motor.c: 190: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 191: {;dc_mo
      +                          tor.c: 192:     turnRight(mL, mR);
   997   00149C  C018  F013         	movff	turnRight135@mL,turnRight@mL
   998   0014A0  C019  F014         	movff	turnRight135@mR,turnRight@mR
   999   0014A4  ECAB  F007         	call	_turnRight	;wreg free
  1000   0014A8                     
  1001                           ;dc_motor.c: 193:     _delay((unsigned long)((turnRight135Delay)*(64000000/4000.0)));
  1002   0014A8  0E19               	movlw	25
  1003   0014AA  6E1B               	movwf	(??_turnRight135+1)^0,c
  1004   0014AC  0E5A               	movlw	90
  1005   0014AE  6E1A               	movwf	??_turnRight135^0,c
  1006   0014B0  0EB2               	movlw	178
  1007   0014B2                     u1017:
  1008   0014B2  2EE8               	decfsz	wreg,f,c
  1009   0014B4  D7FE               	bra	u1017
  1010   0014B6  2E1A               	decfsz	??_turnRight135^0,f,c
  1011   0014B8  D7FC               	bra	u1017
  1012   0014BA  2E1B               	decfsz	(??_turnRight135+1)^0,f,c
  1013   0014BC  D7FA               	bra	u1017
  1014   0014BE                     
  1015                           ;dc_motor.c: 194:     stop(mL, mR);
  1016   0014BE  C018  F013         	movff	turnRight135@mL,stop@mL
  1017   0014C2  C019  F014         	movff	turnRight135@mR,stop@mR
  1018   0014C6  EC53  F009         	call	_stop	;wreg free
  1019   0014CA  0012               	return		;funcret
  1020   0014CC                     __end_of_turnRight135:
  1021                           	callstack 0
  1022                           
  1023 ;; *************** function _turnRight *****************
  1024 ;; Defined at:
  1025 ;;		line 118 in file "dc_motor.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1028 ;;		 -> main@motorL(9), 
  1029 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1030 ;;		 -> main@motorR(9), 
  1031 ;; Auto vars:     Size  Location     Type
  1032 ;;  rightGear       1   22[COMRAM] unsigned char 
  1033 ;;  leftGear        1   21[COMRAM] unsigned char 
  1034 ;; Return value:  Size  Location     Type
  1035 ;;                  1    wreg      void 
  1036 ;; Registers used:
  1037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1038 ;; Tracked objects:
  1039 ;;		On entry : 0/0
  1040 ;;		On exit  : 0/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1045 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1046 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1047 ;;Total ram usage:        5 bytes
  1048 ;; Hardware stack levels used: 1
  1049 ;; Hardware stack levels required when called: 2
  1050 ;; This function calls:
  1051 ;;		_setMotorPWM
  1052 ;; This function is called by:
  1053 ;;		_turnRight135
  1054 ;;		_turnRight90
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           	psect	text5
  1059   000F56                     __ptext5:
  1060                           	callstack 0
  1061   000F56                     _turnRight:
  1062                           	callstack 26
  1063   000F56  0E2A               	movlw	42
  1064   000F58  6E16               	movwf	turnRight@leftGear^0,c
  1065   000F5A  0E2A               	movlw	42
  1066   000F5C  6E17               	movwf	turnRight@rightGear^0,c
  1067   000F5E                     
  1068                           ;dc_motor.c: 122:     (mL->direction) = 1;
  1069   000F5E  5013               	movf	turnRight@mL^0,w,c
  1070   000F60  6ED9               	movwf	fsr2l,c
  1071   000F62  6ADA               	clrf	fsr2h,c
  1072   000F64  0E01               	movlw	1
  1073   000F66  26D9               	addwf	fsr2l,f,c
  1074   000F68  0E01               	movlw	1
  1075   000F6A  6EDF               	movwf	indf2,c
  1076   000F6C                     
  1077                           ;dc_motor.c: 123:     (mR->direction) = 0;
  1078   000F6C  5014               	movf	turnRight@mR^0,w,c
  1079   000F6E  6ED9               	movwf	fsr2l,c
  1080   000F70  6ADA               	clrf	fsr2h,c
  1081   000F72  0E01               	movlw	1
  1082   000F74  26D9               	addwf	fsr2l,f,c
  1083   000F76  6ADF               	clrf	indf2,c
  1084                           
  1085                           ;dc_motor.c: 124:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1086   000F78  EFEE  F007         	goto	l1726
  1087   000F7C                     l1714:
  1088                           
  1089                           ;dc_motor.c: 125:         if (mL->power<leftGear) {mL->power++;}
  1090   000F7C  5013               	movf	turnRight@mL^0,w,c
  1091   000F7E  6ED9               	movwf	fsr2l,c
  1092   000F80  6ADA               	clrf	fsr2h,c
  1093   000F82  5016               	movf	turnRight@leftGear^0,w,c
  1094   000F84  5CDE               	subwf	postinc2,w,c
  1095   000F86  B0D8               	btfsc	status,0,c
  1096   000F88  EFC8  F007         	goto	u871
  1097   000F8C  EFCA  F007         	goto	u870
  1098   000F90                     u871:
  1099   000F90  EFCE  F007         	goto	l146
  1100   000F94                     u870:
  1101   000F94  5013               	movf	turnRight@mL^0,w,c
  1102   000F96  6ED9               	movwf	fsr2l,c
  1103   000F98  6ADA               	clrf	fsr2h,c
  1104   000F9A  2ADF               	incf	indf2,f,c
  1105   000F9C                     l146:
  1106                           
  1107                           ;dc_motor.c: 126:         if (mR->power<rightGear) {mR->power++;}
  1108   000F9C  5014               	movf	turnRight@mR^0,w,c
  1109   000F9E  6ED9               	movwf	fsr2l,c
  1110   000FA0  6ADA               	clrf	fsr2h,c
  1111   000FA2  5017               	movf	turnRight@rightGear^0,w,c
  1112   000FA4  5CDE               	subwf	postinc2,w,c
  1113   000FA6  B0D8               	btfsc	status,0,c
  1114   000FA8  EFD8  F007         	goto	u881
  1115   000FAC  EFDA  F007         	goto	u880
  1116   000FB0                     u881:
  1117   000FB0  EFDE  F007         	goto	l1720
  1118   000FB4                     u880:
  1119   000FB4  5014               	movf	turnRight@mR^0,w,c
  1120   000FB6  6ED9               	movwf	fsr2l,c
  1121   000FB8  6ADA               	clrf	fsr2h,c
  1122   000FBA  2ADF               	incf	indf2,f,c
  1123   000FBC                     l1720:
  1124                           
  1125                           ;dc_motor.c: 127:         setMotorPWM(mL);
  1126   000FBC  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  1127   000FC0  EC01  F007         	call	_setMotorPWM	;wreg free
  1128   000FC4                     
  1129                           ;dc_motor.c: 128:         setMotorPWM(mR);
  1130   000FC4  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  1131   000FC8  EC01  F007         	call	_setMotorPWM	;wreg free
  1132   000FCC                     
  1133                           ;dc_motor.c: 129:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1134   000FCC  0EA7               	movlw	167
  1135   000FCE  6E15               	movwf	??_turnRight^0,c
  1136   000FD0  0E3A               	movlw	58
  1137   000FD2                     u1027:
  1138   000FD2  2EE8               	decfsz	wreg,f,c
  1139   000FD4  D7FE               	bra	u1027
  1140   000FD6  2E15               	decfsz	??_turnRight^0,f,c
  1141   000FD8  D7FC               	bra	u1027
  1142   000FDA  D000               	nop2	
  1143   000FDC                     l1726:
  1144                           
  1145                           ;dc_motor.c: 124:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1146   000FDC  5013               	movf	turnRight@mL^0,w,c
  1147   000FDE  6ED9               	movwf	fsr2l,c
  1148   000FE0  6ADA               	clrf	fsr2h,c
  1149   000FE2  5016               	movf	turnRight@leftGear^0,w,c
  1150   000FE4  5CDE               	subwf	postinc2,w,c
  1151   000FE6  A0D8               	btfss	status,0,c
  1152   000FE8  EFF8  F007         	goto	u891
  1153   000FEC  EFFA  F007         	goto	u890
  1154   000FF0                     u891:
  1155   000FF0  EFBE  F007         	goto	l1714
  1156   000FF4                     u890:
  1157   000FF4  5014               	movf	turnRight@mR^0,w,c
  1158   000FF6  6ED9               	movwf	fsr2l,c
  1159   000FF8  6ADA               	clrf	fsr2h,c
  1160   000FFA  5017               	movf	turnRight@rightGear^0,w,c
  1161   000FFC  5CDE               	subwf	postinc2,w,c
  1162   000FFE  A0D8               	btfss	status,0,c
  1163   001000  EF04  F008         	goto	u901
  1164   001004  EF06  F008         	goto	u900
  1165   001008                     u901:
  1166   001008  EFBE  F007         	goto	l1714
  1167   00100C                     u900:
  1168   00100C  0012               	return		;funcret
  1169   00100E                     __end_of_turnRight:
  1170                           	callstack 0
  1171                           
  1172 ;; *************** function _turnLeft135 *****************
  1173 ;; Defined at:
  1174 ;;		line 182 in file "dc_motor.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  1177 ;;		 -> main@motorL(9), 
  1178 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  1179 ;;		 -> main@motorR(9), 
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;		None
  1182 ;; Return value:  Size  Location     Type
  1183 ;;                  1    wreg      void 
  1184 ;; Registers used:
  1185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1186 ;; Tracked objects:
  1187 ;;		On entry : 0/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1191 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1193 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1194 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1195 ;;Total ram usage:        4 bytes
  1196 ;; Hardware stack levels used: 1
  1197 ;; Hardware stack levels required when called: 3
  1198 ;; This function calls:
  1199 ;;		_stop
  1200 ;;		_turnLeft
  1201 ;; This function is called by:
  1202 ;;		_cardOrange
  1203 ;;		_cardCyan
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           	psect	text6
  1208   0014CC                     __ptext6:
  1209                           	callstack 0
  1210   0014CC                     _turnLeft135:
  1211                           	callstack 26
  1212   0014CC                     
  1213                           ;dc_motor.c: 182: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 183: {;dc_mot
      +                          or.c: 184:     turnLeft(mL, mR);
  1214   0014CC  C018  F013         	movff	turnLeft135@mL,turnLeft@mL
  1215   0014D0  C019  F014         	movff	turnLeft135@mR,turnLeft@mR
  1216   0014D4  EC07  F008         	call	_turnLeft	;wreg free
  1217   0014D8                     
  1218                           ;dc_motor.c: 185:     _delay((unsigned long)((turnLeft135Delay)*(64000000/4000.0)));
  1219   0014D8  0E19               	movlw	25
  1220   0014DA  6E1B               	movwf	(??_turnLeft135+1)^0,c
  1221   0014DC  0E5A               	movlw	90
  1222   0014DE  6E1A               	movwf	??_turnLeft135^0,c
  1223   0014E0  0EB2               	movlw	178
  1224   0014E2                     u1037:
  1225   0014E2  2EE8               	decfsz	wreg,f,c
  1226   0014E4  D7FE               	bra	u1037
  1227   0014E6  2E1A               	decfsz	??_turnLeft135^0,f,c
  1228   0014E8  D7FC               	bra	u1037
  1229   0014EA  2E1B               	decfsz	(??_turnLeft135+1)^0,f,c
  1230   0014EC  D7FA               	bra	u1037
  1231   0014EE                     
  1232                           ;dc_motor.c: 186:     stop(mL, mR);
  1233   0014EE  C018  F013         	movff	turnLeft135@mL,stop@mL
  1234   0014F2  C019  F014         	movff	turnLeft135@mR,stop@mR
  1235   0014F6  EC53  F009         	call	_stop	;wreg free
  1236   0014FA  0012               	return		;funcret
  1237   0014FC                     __end_of_turnLeft135:
  1238                           	callstack 0
  1239                           
  1240 ;; *************** function _turnLeft *****************
  1241 ;; Defined at:
  1242 ;;		line 102 in file "dc_motor.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1245 ;;		 -> main@motorL(9), 
  1246 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1247 ;;		 -> main@motorR(9), 
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;  rightGear       1   22[COMRAM] unsigned char 
  1250 ;;  leftGear        1   21[COMRAM] unsigned char 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      void 
  1253 ;; Registers used:
  1254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1261 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1262 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1263 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1264 ;;Total ram usage:        5 bytes
  1265 ;; Hardware stack levels used: 1
  1266 ;; Hardware stack levels required when called: 2
  1267 ;; This function calls:
  1268 ;;		_setMotorPWM
  1269 ;; This function is called by:
  1270 ;;		_turnLeft135
  1271 ;;		_turnLeft90
  1272 ;;		_UTurn
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text7
  1277   00100E                     __ptext7:
  1278                           	callstack 0
  1279   00100E                     _turnLeft:
  1280                           	callstack 26
  1281   00100E  0E2A               	movlw	42
  1282   001010  6E16               	movwf	turnLeft@leftGear^0,c
  1283   001012  0E2A               	movlw	42
  1284   001014  6E17               	movwf	turnLeft@rightGear^0,c
  1285   001016                     
  1286                           ;dc_motor.c: 106:     (mL->direction) = 0;
  1287   001016  5013               	movf	turnLeft@mL^0,w,c
  1288   001018  6ED9               	movwf	fsr2l,c
  1289   00101A  6ADA               	clrf	fsr2h,c
  1290   00101C  0E01               	movlw	1
  1291   00101E  26D9               	addwf	fsr2l,f,c
  1292   001020  6ADF               	clrf	indf2,c
  1293   001022                     
  1294                           ;dc_motor.c: 107:     (mR->direction) = 1;
  1295   001022  5014               	movf	turnLeft@mR^0,w,c
  1296   001024  6ED9               	movwf	fsr2l,c
  1297   001026  6ADA               	clrf	fsr2h,c
  1298   001028  0E01               	movlw	1
  1299   00102A  26D9               	addwf	fsr2l,f,c
  1300   00102C  0E01               	movlw	1
  1301   00102E  6EDF               	movwf	indf2,c
  1302                           
  1303                           ;dc_motor.c: 108:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1304   001030  EF4A  F008         	goto	l1704
  1305   001034                     l1692:
  1306                           
  1307                           ;dc_motor.c: 109:         if (mL->power<leftGear) {mL->power++;}
  1308   001034  5013               	movf	turnLeft@mL^0,w,c
  1309   001036  6ED9               	movwf	fsr2l,c
  1310   001038  6ADA               	clrf	fsr2h,c
  1311   00103A  5016               	movf	turnLeft@leftGear^0,w,c
  1312   00103C  5CDE               	subwf	postinc2,w,c
  1313   00103E  B0D8               	btfsc	status,0,c
  1314   001040  EF24  F008         	goto	u831
  1315   001044  EF26  F008         	goto	u830
  1316   001048                     u831:
  1317   001048  EF2A  F008         	goto	l138
  1318   00104C                     u830:
  1319   00104C  5013               	movf	turnLeft@mL^0,w,c
  1320   00104E  6ED9               	movwf	fsr2l,c
  1321   001050  6ADA               	clrf	fsr2h,c
  1322   001052  2ADF               	incf	indf2,f,c
  1323   001054                     l138:
  1324                           
  1325                           ;dc_motor.c: 110:         if (mR->power<rightGear) {mR->power++;}
  1326   001054  5014               	movf	turnLeft@mR^0,w,c
  1327   001056  6ED9               	movwf	fsr2l,c
  1328   001058  6ADA               	clrf	fsr2h,c
  1329   00105A  5017               	movf	turnLeft@rightGear^0,w,c
  1330   00105C  5CDE               	subwf	postinc2,w,c
  1331   00105E  B0D8               	btfsc	status,0,c
  1332   001060  EF34  F008         	goto	u841
  1333   001064  EF36  F008         	goto	u840
  1334   001068                     u841:
  1335   001068  EF3A  F008         	goto	l1698
  1336   00106C                     u840:
  1337   00106C  5014               	movf	turnLeft@mR^0,w,c
  1338   00106E  6ED9               	movwf	fsr2l,c
  1339   001070  6ADA               	clrf	fsr2h,c
  1340   001072  2ADF               	incf	indf2,f,c
  1341   001074                     l1698:
  1342                           
  1343                           ;dc_motor.c: 111:         setMotorPWM(mL);
  1344   001074  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  1345   001078  EC01  F007         	call	_setMotorPWM	;wreg free
  1346   00107C                     
  1347                           ;dc_motor.c: 112:         setMotorPWM(mR);
  1348   00107C  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  1349   001080  EC01  F007         	call	_setMotorPWM	;wreg free
  1350   001084                     
  1351                           ;dc_motor.c: 113:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1352   001084  0EA7               	movlw	167
  1353   001086  6E15               	movwf	??_turnLeft^0,c
  1354   001088  0E3A               	movlw	58
  1355   00108A                     u1047:
  1356   00108A  2EE8               	decfsz	wreg,f,c
  1357   00108C  D7FE               	bra	u1047
  1358   00108E  2E15               	decfsz	??_turnLeft^0,f,c
  1359   001090  D7FC               	bra	u1047
  1360   001092  D000               	nop2	
  1361   001094                     l1704:
  1362                           
  1363                           ;dc_motor.c: 108:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1364   001094  5013               	movf	turnLeft@mL^0,w,c
  1365   001096  6ED9               	movwf	fsr2l,c
  1366   001098  6ADA               	clrf	fsr2h,c
  1367   00109A  5016               	movf	turnLeft@leftGear^0,w,c
  1368   00109C  5CDE               	subwf	postinc2,w,c
  1369   00109E  A0D8               	btfss	status,0,c
  1370   0010A0  EF54  F008         	goto	u851
  1371   0010A4  EF56  F008         	goto	u850
  1372   0010A8                     u851:
  1373   0010A8  EF1A  F008         	goto	l1692
  1374   0010AC                     u850:
  1375   0010AC  5014               	movf	turnLeft@mR^0,w,c
  1376   0010AE  6ED9               	movwf	fsr2l,c
  1377   0010B0  6ADA               	clrf	fsr2h,c
  1378   0010B2  5017               	movf	turnLeft@rightGear^0,w,c
  1379   0010B4  5CDE               	subwf	postinc2,w,c
  1380   0010B6  A0D8               	btfss	status,0,c
  1381   0010B8  EF60  F008         	goto	u861
  1382   0010BC  EF62  F008         	goto	u860
  1383   0010C0                     u861:
  1384   0010C0  EF1A  F008         	goto	l1692
  1385   0010C4                     u860:
  1386   0010C4  0012               	return		;funcret
  1387   0010C6                     __end_of_turnLeft:
  1388                           	callstack 0
  1389                           
  1390 ;; *************** function _headbuttReverse *****************
  1391 ;; Defined at:
  1392 ;;		line 206 in file "dc_motor.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  1395 ;;		 -> main@motorL(9), 
  1396 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  1397 ;;		 -> main@motorR(9), 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;		None
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1409 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1411 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1412 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1413 ;;Total ram usage:        4 bytes
  1414 ;; Hardware stack levels used: 1
  1415 ;; Hardware stack levels required when called: 3
  1416 ;; This function calls:
  1417 ;;		_fullSpeedReverse
  1418 ;;		_stop
  1419 ;; This function is called by:
  1420 ;;		_cardOrange
  1421 ;;		_cardCyan
  1422 ;;		_cardWhite
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text8
  1427   0014FC                     __ptext8:
  1428                           	callstack 0
  1429   0014FC                     _headbuttReverse:
  1430                           	callstack 26
  1431   0014FC                     
  1432                           ;dc_motor.c: 206: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 207: {;dc
      +                          _motor.c: 208:     fullSpeedReverse(mL, mR);
  1433   0014FC  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
  1434   001500  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
  1435   001504  EC63  F008         	call	_fullSpeedReverse	;wreg free
  1436   001508                     
  1437                           ;dc_motor.c: 209:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
  1438   001508  0E06               	movlw	6
  1439   00150A  6E1B               	movwf	(??_headbuttReverse+1)^0,c
  1440   00150C  0EAF               	movlw	175
  1441   00150E  6E1A               	movwf	??_headbuttReverse^0,c
  1442   001510  0E86               	movlw	134
  1443   001512                     u1057:
  1444   001512  2EE8               	decfsz	wreg,f,c
  1445   001514  D7FE               	bra	u1057
  1446   001516  2E1A               	decfsz	??_headbuttReverse^0,f,c
  1447   001518  D7FC               	bra	u1057
  1448   00151A  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
  1449   00151C  D7FA               	bra	u1057
  1450   00151E                     
  1451                           ;dc_motor.c: 210:     stop(mL, mR);
  1452   00151E  C018  F013         	movff	headbuttReverse@mL,stop@mL
  1453   001522  C019  F014         	movff	headbuttReverse@mR,stop@mR
  1454   001526  EC53  F009         	call	_stop	;wreg free
  1455   00152A  0012               	return		;funcret
  1456   00152C                     __end_of_headbuttReverse:
  1457                           	callstack 0
  1458                           
  1459 ;; *************** function _stop *****************
  1460 ;; Defined at:
  1461 ;;		line 88 in file "dc_motor.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1464 ;;		 -> main@motorL(9), 
  1465 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1466 ;;		 -> main@motorR(9), 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1478 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1481 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1482 ;;Total ram usage:        3 bytes
  1483 ;; Hardware stack levels used: 1
  1484 ;; Hardware stack levels required when called: 2
  1485 ;; This function calls:
  1486 ;;		_setMotorPWM
  1487 ;; This function is called by:
  1488 ;;		_turnLeft135
  1489 ;;		_turnRight135
  1490 ;;		_headbuttReverse
  1491 ;;		_turnLeft90
  1492 ;;		_turnRight90
  1493 ;;		_UTurn
  1494 ;;		_squareReverse
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text9
  1499   0012A6                     __ptext9:
  1500                           	callstack 0
  1501   0012A6                     _stop:
  1502                           	callstack 26
  1503   0012A6                     
  1504                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 92:
      +                               while ((mL->power>0) || (mR->power>0)){
  1505   0012A6  EF83  F009         	goto	l1682
  1506   0012AA                     l1668:
  1507                           
  1508                           ;dc_motor.c: 93:         if (mL->power>0) {mL->power--;}
  1509   0012AA  5013               	movf	stop@mL^0,w,c
  1510   0012AC  6ED9               	movwf	fsr2l,c
  1511   0012AE  6ADA               	clrf	fsr2h,c
  1512   0012B0  50DF               	movf	indf2,w,c
  1513   0012B2  B4D8               	btfsc	status,2,c
  1514   0012B4  EF5E  F009         	goto	u791
  1515   0012B8  EF60  F009         	goto	u790
  1516   0012BC                     u791:
  1517   0012BC  EF64  F009         	goto	l1672
  1518   0012C0                     u790:
  1519   0012C0  5013               	movf	stop@mL^0,w,c
  1520   0012C2  6ED9               	movwf	fsr2l,c
  1521   0012C4  6ADA               	clrf	fsr2h,c
  1522   0012C6  06DF               	decf	indf2,f,c
  1523   0012C8                     l1672:
  1524                           
  1525                           ;dc_motor.c: 94:         if (mR->power>0) {mR->power--;}
  1526   0012C8  5014               	movf	stop@mR^0,w,c
  1527   0012CA  6ED9               	movwf	fsr2l,c
  1528   0012CC  6ADA               	clrf	fsr2h,c
  1529   0012CE  50DF               	movf	indf2,w,c
  1530   0012D0  B4D8               	btfsc	status,2,c
  1531   0012D2  EF6D  F009         	goto	u801
  1532   0012D6  EF6F  F009         	goto	u800
  1533   0012DA                     u801:
  1534   0012DA  EF73  F009         	goto	l1676
  1535   0012DE                     u800:
  1536   0012DE  5014               	movf	stop@mR^0,w,c
  1537   0012E0  6ED9               	movwf	fsr2l,c
  1538   0012E2  6ADA               	clrf	fsr2h,c
  1539   0012E4  06DF               	decf	indf2,f,c
  1540   0012E6                     l1676:
  1541                           
  1542                           ;dc_motor.c: 95:         setMotorPWM(mL);
  1543   0012E6  C013  F00E         	movff	stop@mL,setMotorPWM@m
  1544   0012EA  EC01  F007         	call	_setMotorPWM	;wreg free
  1545   0012EE                     
  1546                           ;dc_motor.c: 96:         setMotorPWM(mR);
  1547   0012EE  C014  F00E         	movff	stop@mR,setMotorPWM@m
  1548   0012F2  EC01  F007         	call	_setMotorPWM	;wreg free
  1549   0012F6                     
  1550                           ;dc_motor.c: 97:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1551   0012F6  0EA7               	movlw	167
  1552   0012F8  6E15               	movwf	??_stop^0,c
  1553   0012FA  0E3A               	movlw	58
  1554   0012FC                     u1067:
  1555   0012FC  2EE8               	decfsz	wreg,f,c
  1556   0012FE  D7FE               	bra	u1067
  1557   001300  2E15               	decfsz	??_stop^0,f,c
  1558   001302  D7FC               	bra	u1067
  1559   001304  D000               	nop2	
  1560   001306                     l1682:
  1561                           
  1562                           ;dc_motor.c: 92:     while ((mL->power>0) || (mR->power>0)){
  1563   001306  5013               	movf	stop@mL^0,w,c
  1564   001308  6ED9               	movwf	fsr2l,c
  1565   00130A  6ADA               	clrf	fsr2h,c
  1566   00130C  50DF               	movf	indf2,w,c
  1567   00130E  A4D8               	btfss	status,2,c
  1568   001310  EF8C  F009         	goto	u811
  1569   001314  EF8E  F009         	goto	u810
  1570   001318                     u811:
  1571   001318  EF55  F009         	goto	l1668
  1572   00131C                     u810:
  1573   00131C  5014               	movf	stop@mR^0,w,c
  1574   00131E  6ED9               	movwf	fsr2l,c
  1575   001320  6ADA               	clrf	fsr2h,c
  1576   001322  50DF               	movf	indf2,w,c
  1577   001324  A4D8               	btfss	status,2,c
  1578   001326  EF97  F009         	goto	u821
  1579   00132A  EF99  F009         	goto	u820
  1580   00132E                     u821:
  1581   00132E  EF55  F009         	goto	l1668
  1582   001332                     u820:
  1583   001332  0012               	return		;funcret
  1584   001334                     __end_of_stop:
  1585                           	callstack 0
  1586                           
  1587 ;; *************** function _fullSpeedReverse *****************
  1588 ;; Defined at:
  1589 ;;		line 150 in file "dc_motor.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  1592 ;;		 -> main@motorL(9), 
  1593 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  1594 ;;		 -> main@motorR(9), 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  rightGear       1   22[COMRAM] unsigned char 
  1597 ;;  leftGear        1   21[COMRAM] unsigned char 
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      void 
  1600 ;; Registers used:
  1601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1610 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1611 ;;Total ram usage:        5 bytes
  1612 ;; Hardware stack levels used: 1
  1613 ;; Hardware stack levels required when called: 2
  1614 ;; This function calls:
  1615 ;;		_setMotorPWM
  1616 ;; This function is called by:
  1617 ;;		_headbuttReverse
  1618 ;;		_squareReverse
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text10
  1623   0010C6                     __ptext10:
  1624                           	callstack 0
  1625   0010C6                     _fullSpeedReverse:
  1626                           	callstack 26
  1627   0010C6  0E1E               	movlw	30
  1628   0010C8  6E16               	movwf	fullSpeedReverse@leftGear^0,c
  1629   0010CA  0E20               	movlw	32
  1630   0010CC  6E17               	movwf	fullSpeedReverse@rightGear^0,c
  1631   0010CE                     
  1632                           ;dc_motor.c: 154:     (mL -> direction) = 0;
  1633   0010CE  5013               	movf	fullSpeedReverse@mL^0,w,c
  1634   0010D0  6ED9               	movwf	fsr2l,c
  1635   0010D2  6ADA               	clrf	fsr2h,c
  1636   0010D4  0E01               	movlw	1
  1637   0010D6  26D9               	addwf	fsr2l,f,c
  1638   0010D8  6ADF               	clrf	indf2,c
  1639   0010DA                     
  1640                           ;dc_motor.c: 155:     (mR -> direction) = 0;
  1641   0010DA  5014               	movf	fullSpeedReverse@mR^0,w,c
  1642   0010DC  6ED9               	movwf	fsr2l,c
  1643   0010DE  6ADA               	clrf	fsr2h,c
  1644   0010E0  0E01               	movlw	1
  1645   0010E2  26D9               	addwf	fsr2l,f,c
  1646   0010E4  6ADF               	clrf	indf2,c
  1647                           
  1648                           ;dc_motor.c: 156:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1649   0010E6  EFA5  F008         	goto	l1748
  1650   0010EA                     l1736:
  1651                           
  1652                           ;dc_motor.c: 157:         if (mL->power<leftGear) {mL->power++;}
  1653   0010EA  5013               	movf	fullSpeedReverse@mL^0,w,c
  1654   0010EC  6ED9               	movwf	fsr2l,c
  1655   0010EE  6ADA               	clrf	fsr2h,c
  1656   0010F0  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  1657   0010F2  5CDE               	subwf	postinc2,w,c
  1658   0010F4  B0D8               	btfsc	status,0,c
  1659   0010F6  EF7F  F008         	goto	u911
  1660   0010FA  EF81  F008         	goto	u910
  1661   0010FE                     u911:
  1662   0010FE  EF85  F008         	goto	l162
  1663   001102                     u910:
  1664   001102  5013               	movf	fullSpeedReverse@mL^0,w,c
  1665   001104  6ED9               	movwf	fsr2l,c
  1666   001106  6ADA               	clrf	fsr2h,c
  1667   001108  2ADF               	incf	indf2,f,c
  1668   00110A                     l162:
  1669                           
  1670                           ;dc_motor.c: 158:         if (mR->power<rightGear) {mR->power++;}
  1671   00110A  5014               	movf	fullSpeedReverse@mR^0,w,c
  1672   00110C  6ED9               	movwf	fsr2l,c
  1673   00110E  6ADA               	clrf	fsr2h,c
  1674   001110  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  1675   001112  5CDE               	subwf	postinc2,w,c
  1676   001114  B0D8               	btfsc	status,0,c
  1677   001116  EF8F  F008         	goto	u921
  1678   00111A  EF91  F008         	goto	u920
  1679   00111E                     u921:
  1680   00111E  EF95  F008         	goto	l1742
  1681   001122                     u920:
  1682   001122  5014               	movf	fullSpeedReverse@mR^0,w,c
  1683   001124  6ED9               	movwf	fsr2l,c
  1684   001126  6ADA               	clrf	fsr2h,c
  1685   001128  2ADF               	incf	indf2,f,c
  1686   00112A                     l1742:
  1687                           
  1688                           ;dc_motor.c: 159:         setMotorPWM(mL);
  1689   00112A  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  1690   00112E  EC01  F007         	call	_setMotorPWM	;wreg free
  1691   001132                     
  1692                           ;dc_motor.c: 160:         setMotorPWM(mR);
  1693   001132  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  1694   001136  EC01  F007         	call	_setMotorPWM	;wreg free
  1695   00113A                     
  1696                           ;dc_motor.c: 161:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  1697   00113A  0EA7               	movlw	167
  1698   00113C  6E15               	movwf	??_fullSpeedReverse^0,c
  1699   00113E  0E3A               	movlw	58
  1700   001140                     u1077:
  1701   001140  2EE8               	decfsz	wreg,f,c
  1702   001142  D7FE               	bra	u1077
  1703   001144  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  1704   001146  D7FC               	bra	u1077
  1705   001148  D000               	nop2	
  1706   00114A                     l1748:
  1707                           
  1708                           ;dc_motor.c: 156:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  1709   00114A  5013               	movf	fullSpeedReverse@mL^0,w,c
  1710   00114C  6ED9               	movwf	fsr2l,c
  1711   00114E  6ADA               	clrf	fsr2h,c
  1712   001150  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  1713   001152  5CDE               	subwf	postinc2,w,c
  1714   001154  A0D8               	btfss	status,0,c
  1715   001156  EFAF  F008         	goto	u931
  1716   00115A  EFB1  F008         	goto	u930
  1717   00115E                     u931:
  1718   00115E  EF75  F008         	goto	l1736
  1719   001162                     u930:
  1720   001162  5014               	movf	fullSpeedReverse@mR^0,w,c
  1721   001164  6ED9               	movwf	fsr2l,c
  1722   001166  6ADA               	clrf	fsr2h,c
  1723   001168  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  1724   00116A  5CDE               	subwf	postinc2,w,c
  1725   00116C  A0D8               	btfss	status,0,c
  1726   00116E  EFBB  F008         	goto	u941
  1727   001172  EFBD  F008         	goto	u940
  1728   001176                     u941:
  1729   001176  EF75  F008         	goto	l1736
  1730   00117A                     u940:
  1731   00117A  0012               	return		;funcret
  1732   00117C                     __end_of_fullSpeedReverse:
  1733                           	callstack 0
  1734                           
  1735 ;; *************** function _setMotorPWM *****************
  1736 ;; Defined at:
  1737 ;;		line 65 in file "dc_motor.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  m               1   13[COMRAM] PTR struct DC_motor
  1740 ;;		 -> main@motorR(9), main@motorL(9), 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  negDuty         1   17[COMRAM] unsigned char 
  1743 ;;  posDuty         1   16[COMRAM] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1753 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1756 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1757 ;;Total ram usage:        5 bytes
  1758 ;; Hardware stack levels used: 1
  1759 ;; Hardware stack levels required when called: 1
  1760 ;; This function calls:
  1761 ;;		___lwdiv
  1762 ;;		___wmul
  1763 ;; This function is called by:
  1764 ;;		_stop
  1765 ;;		_turnLeft
  1766 ;;		_turnRight
  1767 ;;		_fullSpeedReverse
  1768 ;;		_fullSpeedAhead
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text11
  1773   000E02                     __ptext11:
  1774                           	callstack 0
  1775   000E02                     _setMotorPWM:
  1776                           	callstack 26
  1777   000E02                     
  1778                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  1779   000E02  500E               	movf	setMotorPWM@m^0,w,c
  1780   000E04  6ED9               	movwf	fsr2l,c
  1781   000E06  6ADA               	clrf	fsr2h,c
  1782   000E08  0E02               	movlw	2
  1783   000E0A  26D9               	addwf	fsr2l,f,c
  1784   000E0C  50DF               	movf	indf2,w,c
  1785   000E0E  B4D8               	btfsc	status,2,c
  1786   000E10  EF0C  F007         	goto	u771
  1787   000E14  EF0E  F007         	goto	u770
  1788   000E18                     u771:
  1789   000E18  EF3E  F007         	goto	l1656
  1790   000E1C                     u770:
  1791   000E1C                     
  1792                           ;dc_motor.c: 70:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1793   000E1C  500E               	movf	setMotorPWM@m^0,w,c
  1794   000E1E  6ED9               	movwf	fsr2l,c
  1795   000E20  6ADA               	clrf	fsr2h,c
  1796   000E22  50DF               	movf	indf2,w,c
  1797   000E24  6E0F               	movwf	??_setMotorPWM^0,c
  1798   000E26  500F               	movf	??_setMotorPWM^0,w,c
  1799   000E28  6E01               	movwf	___wmul@multiplier^0,c
  1800   000E2A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1801   000E2C  500E               	movf	setMotorPWM@m^0,w,c
  1802   000E2E  6ED9               	movwf	fsr2l,c
  1803   000E30  6ADA               	clrf	fsr2h,c
  1804   000E32  0E03               	movlw	3
  1805   000E34  26D9               	addwf	fsr2l,f,c
  1806   000E36  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1807   000E3A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1808   000E3E  ECA9  F00A         	call	___wmul	;wreg free
  1809   000E42  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1810   000E46  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1811   000E4A  0E00               	movlw	0
  1812   000E4C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1813   000E4E  0E64               	movlw	100
  1814   000E50  6E09               	movwf	___lwdiv@divisor^0,c
  1815   000E52  ECE0  F009         	call	___lwdiv	;wreg free
  1816   000E56  500E               	movf	setMotorPWM@m^0,w,c
  1817   000E58  6ED9               	movwf	fsr2l,c
  1818   000E5A  6ADA               	clrf	fsr2h,c
  1819   000E5C  0E03               	movlw	3
  1820   000E5E  26D9               	addwf	fsr2l,f,c
  1821   000E60  50DF               	movf	indf2,w,c
  1822   000E62  6E10               	movwf	(??_setMotorPWM+1)^0,c
  1823   000E64  5007               	movf	?___lwdiv^0,w,c
  1824   000E66  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  1825   000E68  6E11               	movwf	setMotorPWM@posDuty^0,c
  1826   000E6A                     
  1827                           ;dc_motor.c: 71:         negDuty=m->PWMperiod;
  1828   000E6A  500E               	movf	setMotorPWM@m^0,w,c
  1829   000E6C  6ED9               	movwf	fsr2l,c
  1830   000E6E  6ADA               	clrf	fsr2h,c
  1831   000E70  0E03               	movlw	3
  1832   000E72  26D9               	addwf	fsr2l,f,c
  1833   000E74  50DF               	movf	indf2,w,c
  1834   000E76  6E12               	movwf	setMotorPWM@negDuty^0,c
  1835                           
  1836                           ;dc_motor.c: 72:     }
  1837   000E78  EF5F  F007         	goto	l1660
  1838   000E7C                     l1656:
  1839                           
  1840                           ;dc_motor.c: 74:         posDuty=0;
  1841   000E7C  0E00               	movlw	0
  1842   000E7E  6E11               	movwf	setMotorPWM@posDuty^0,c
  1843   000E80                     
  1844                           ;dc_motor.c: 75:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1845   000E80  500E               	movf	setMotorPWM@m^0,w,c
  1846   000E82  6ED9               	movwf	fsr2l,c
  1847   000E84  6ADA               	clrf	fsr2h,c
  1848   000E86  50DF               	movf	indf2,w,c
  1849   000E88  6E0F               	movwf	??_setMotorPWM^0,c
  1850   000E8A  500F               	movf	??_setMotorPWM^0,w,c
  1851   000E8C  6E01               	movwf	___wmul@multiplier^0,c
  1852   000E8E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1853   000E90  500E               	movf	setMotorPWM@m^0,w,c
  1854   000E92  6ED9               	movwf	fsr2l,c
  1855   000E94  6ADA               	clrf	fsr2h,c
  1856   000E96  0E03               	movlw	3
  1857   000E98  26D9               	addwf	fsr2l,f,c
  1858   000E9A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1859   000E9E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1860   000EA2  ECA9  F00A         	call	___wmul	;wreg free
  1861   000EA6  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1862   000EAA  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1863   000EAE  0E00               	movlw	0
  1864   000EB0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1865   000EB2  0E64               	movlw	100
  1866   000EB4  6E09               	movwf	___lwdiv@divisor^0,c
  1867   000EB6  ECE0  F009         	call	___lwdiv	;wreg free
  1868   000EBA  5007               	movf	?___lwdiv^0,w,c
  1869   000EBC  6E12               	movwf	setMotorPWM@negDuty^0,c
  1870   000EBE                     l1660:
  1871                           
  1872                           ;dc_motor.c: 78:     if (m->direction) {
  1873   000EBE  500E               	movf	setMotorPWM@m^0,w,c
  1874   000EC0  6ED9               	movwf	fsr2l,c
  1875   000EC2  6ADA               	clrf	fsr2h,c
  1876   000EC4  0E01               	movlw	1
  1877   000EC6  26D9               	addwf	fsr2l,f,c
  1878   000EC8  50DF               	movf	indf2,w,c
  1879   000ECA  B4D8               	btfsc	status,2,c
  1880   000ECC  EF6A  F007         	goto	u781
  1881   000ED0  EF6C  F007         	goto	u780
  1882   000ED4                     u781:
  1883   000ED4  EF8C  F007         	goto	l1664
  1884   000ED8                     u780:
  1885   000ED8                     
  1886                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  1887   000ED8  500E               	movf	setMotorPWM@m^0,w,c
  1888   000EDA  6ED9               	movwf	fsr2l,c
  1889   000EDC  6ADA               	clrf	fsr2h,c
  1890   000EDE  0E05               	movlw	5
  1891   000EE0  26D9               	addwf	fsr2l,f,c
  1892   000EE2  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1893   000EE6  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1894   000EEA  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1895   000EEE  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1896   000EF2  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1897                           
  1898                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  1899   000EF6  500E               	movf	setMotorPWM@m^0,w,c
  1900   000EF8  6ED9               	movwf	fsr2l,c
  1901   000EFA  6ADA               	clrf	fsr2h,c
  1902   000EFC  0E07               	movlw	7
  1903   000EFE  26D9               	addwf	fsr2l,f,c
  1904   000F00  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1905   000F04  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1906   000F08  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1907   000F0C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1908   000F10  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1909                           
  1910                           ;dc_motor.c: 81:     } else {
  1911   000F14  EFAA  F007         	goto	l125
  1912   000F18                     l1664:
  1913                           
  1914                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  1915   000F18  500E               	movf	setMotorPWM@m^0,w,c
  1916   000F1A  6ED9               	movwf	fsr2l,c
  1917   000F1C  6ADA               	clrf	fsr2h,c
  1918   000F1E  0E05               	movlw	5
  1919   000F20  26D9               	addwf	fsr2l,f,c
  1920   000F22  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1921   000F26  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1922   000F2A  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1923   000F2E  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1924   000F32  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  1925                           
  1926                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  1927   000F36  500E               	movf	setMotorPWM@m^0,w,c
  1928   000F38  6ED9               	movwf	fsr2l,c
  1929   000F3A  6ADA               	clrf	fsr2h,c
  1930   000F3C  0E07               	movlw	7
  1931   000F3E  26D9               	addwf	fsr2l,f,c
  1932   000F40  CFDE F00F          	movff	postinc2,??_setMotorPWM
  1933   000F44  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  1934   000F48  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  1935   000F4C  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1936   000F50  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  1937   000F54                     l125:
  1938   000F54  0012               	return		;funcret
  1939   000F56                     __end_of_setMotorPWM:
  1940                           	callstack 0
  1941                           
  1942 ;; *************** function ___wmul *****************
  1943 ;; Defined at:
  1944 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  multiplier      2    0[COMRAM] unsigned int 
  1947 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;  product         2    4[COMRAM] unsigned int 
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  2    0[COMRAM] unsigned int 
  1952 ;; Registers used:
  1953 ;;		wreg, status,2, status,0, prodl, prodh
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1959 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1962 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1963 ;;Total ram usage:        6 bytes
  1964 ;; Hardware stack levels used: 1
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_setMotorPWM
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text12
  1973   001552                     __ptext12:
  1974                           	callstack 0
  1975   001552                     ___wmul:
  1976                           	callstack 26
  1977   001552  5001               	movf	___wmul@multiplier^0,w,c
  1978   001554  0203               	mulwf	___wmul@multiplicand^0,c
  1979   001556  CFF3 F005          	movff	prodl,___wmul@product
  1980   00155A  CFF4 F006          	movff	prodh,___wmul@product+1
  1981   00155E  5001               	movf	___wmul@multiplier^0,w,c
  1982   001560  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1983   001562  50F3               	movf	243,w,c
  1984   001564  2606               	addwf	(___wmul@product+1)^0,f,c
  1985   001566  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1986   001568  0203               	mulwf	___wmul@multiplicand^0,c
  1987   00156A  50F3               	movf	243,w,c
  1988   00156C  2606               	addwf	(___wmul@product+1)^0,f,c
  1989   00156E  C005  F001         	movff	___wmul@product,?___wmul
  1990   001572  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1991   001576  0012               	return		;funcret
  1992   001578                     __end_of___wmul:
  1993                           	callstack 0
  1994                           
  1995 ;; *************** function ___lwdiv *****************
  1996 ;; Defined at:
  1997 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;  dividend        2    6[COMRAM] unsigned int 
  2000 ;;  divisor         2    8[COMRAM] unsigned int 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  quotient        2   10[COMRAM] unsigned int 
  2003 ;;  counter         1   12[COMRAM] unsigned char 
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  2    6[COMRAM] unsigned int 
  2006 ;; Registers used:
  2007 ;;		wreg, status,2, status,0
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2013 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2014 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2017 ;;Total ram usage:        7 bytes
  2018 ;; Hardware stack levels used: 1
  2019 ;; This function calls:
  2020 ;;		Nothing
  2021 ;; This function is called by:
  2022 ;;		_setMotorPWM
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           	psect	text13
  2027   0013C0                     __ptext13:
  2028                           	callstack 0
  2029   0013C0                     ___lwdiv:
  2030                           	callstack 26
  2031   0013C0  0E00               	movlw	0
  2032   0013C2  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2033   0013C4  0E00               	movlw	0
  2034   0013C6  6E0B               	movwf	___lwdiv@quotient^0,c
  2035   0013C8  5009               	movf	___lwdiv@divisor^0,w,c
  2036   0013CA  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2037   0013CC  B4D8               	btfsc	status,2,c
  2038   0013CE  EFEB  F009         	goto	u741
  2039   0013D2  EFED  F009         	goto	u740
  2040   0013D6                     u741:
  2041   0013D6  EF15  F00A         	goto	l838
  2042   0013DA                     u740:
  2043   0013DA  0E01               	movlw	1
  2044   0013DC  6E0D               	movwf	___lwdiv@counter^0,c
  2045   0013DE  EFF5  F009         	goto	l1636
  2046   0013E2                     l1634:
  2047   0013E2  90D8               	bcf	status,0,c
  2048   0013E4  3609               	rlcf	___lwdiv@divisor^0,f,c
  2049   0013E6  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2050   0013E8  2A0D               	incf	___lwdiv@counter^0,f,c
  2051   0013EA                     l1636:
  2052   0013EA  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2053   0013EC  EFFA  F009         	goto	u751
  2054   0013F0  EFFC  F009         	goto	u750
  2055   0013F4                     u751:
  2056   0013F4  EFF1  F009         	goto	l1634
  2057   0013F8                     u750:
  2058   0013F8                     l1638:
  2059   0013F8  90D8               	bcf	status,0,c
  2060   0013FA  360B               	rlcf	___lwdiv@quotient^0,f,c
  2061   0013FC  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2062   0013FE  5009               	movf	___lwdiv@divisor^0,w,c
  2063   001400  5C07               	subwf	___lwdiv@dividend^0,w,c
  2064   001402  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2065   001404  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2066   001406  A0D8               	btfss	status,0,c
  2067   001408  EF08  F00A         	goto	u761
  2068   00140C  EF0A  F00A         	goto	u760
  2069   001410                     u761:
  2070   001410  EF0F  F00A         	goto	l1646
  2071   001414                     u760:
  2072   001414  5009               	movf	___lwdiv@divisor^0,w,c
  2073   001416  5E07               	subwf	___lwdiv@dividend^0,f,c
  2074   001418  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2075   00141A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2076   00141C  800B               	bsf	___lwdiv@quotient^0,0,c
  2077   00141E                     l1646:
  2078   00141E  90D8               	bcf	status,0,c
  2079   001420  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2080   001422  3209               	rrcf	___lwdiv@divisor^0,f,c
  2081   001424  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2082   001426  EFFC  F009         	goto	l1638
  2083   00142A                     l838:
  2084   00142A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2085   00142E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2086   001432  0012               	return		;funcret
  2087   001434                     __end_of___lwdiv:
  2088                           	callstack 0
  2089                           
  2090 ;; *************** function _buggy_lights_init *****************
  2091 ;; Defined at:
  2092 ;;		line 4 in file "buggy_lights.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;		None
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		None
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2110 ;;Total ram usage:        0 bytes
  2111 ;; Hardware stack levels used: 1
  2112 ;; This function calls:
  2113 ;;		Nothing
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text14
  2120   001578                     __ptext14:
  2121                           	callstack 0
  2122   001578                     _buggy_lights_init:
  2123                           	callstack 30
  2124   001578                     
  2125                           ;buggy_lights.c: 8:     TRISDbits.TRISD4 = 0;
  2126   001578  9884               	bcf	132,4,c	;volatile
  2127                           
  2128                           ;buggy_lights.c: 9:     TRISHbits.TRISH1 = 0;
  2129   00157A  9288               	bcf	136,1,c	;volatile
  2130                           
  2131                           ;buggy_lights.c: 10:     TRISDbits.TRISD3 = 0;
  2132   00157C  9684               	bcf	132,3,c	;volatile
  2133                           
  2134                           ;buggy_lights.c: 11:     TRISFbits.TRISF0 = 0;
  2135   00157E  9086               	bcf	134,0,c	;volatile
  2136                           
  2137                           ;buggy_lights.c: 12:     TRISHbits.TRISH0 = 0;
  2138   001580  9088               	bcf	136,0,c	;volatile
  2139                           
  2140                           ;buggy_lights.c: 14:     LATDbits.LATD4 = 1;
  2141   001582  887C               	bsf	124,4,c	;volatile
  2142                           
  2143                           ;buggy_lights.c: 15:     LATHbits.LATH1 = 1;
  2144   001584  8280               	bsf	128,1,c	;volatile
  2145                           
  2146                           ;buggy_lights.c: 16:     LATDbits.LATD3 = 1;
  2147   001586  867C               	bsf	124,3,c	;volatile
  2148                           
  2149                           ;buggy_lights.c: 17:     LATFbits.LATF0 = 1;
  2150   001588  807E               	bsf	126,0,c	;volatile
  2151                           
  2152                           ;buggy_lights.c: 18:     LATHbits.LATH0 = 1;
  2153   00158A  8080               	bsf	128,0,c	;volatile
  2154   00158C  0012               	return		;funcret
  2155   00158E                     __end_of_buggy_lights_init:
  2156                           	callstack 0
  2157                           
  2158                           	psect	smallconst
  2159   000E00                     __psmallconst:
  2160                           	callstack 0
  2161   000E00  00                 	db	0
  2162   000E01  00                 	db	0	; dummy byte at the end
  2163   000000                     
  2164                           	psect	rparam
  2165   000000                     
  2166                           	psect	config
  2167                           
  2168                           ;Config register CONFIG1L @ 0x300000
  2169                           ;	External Oscillator mode Selection bits
  2170                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2171                           ;	Power-up default value for COSC bits
  2172                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2173   300000                     	org	3145728
  2174   300000  AA                 	db	170
  2175                           
  2176                           ;Config register CONFIG1H @ 0x300001
  2177                           ;	unspecified, using default values
  2178                           ;	Clock Out Enable bit
  2179                           ;	CLKOUTEN = 0x1, unprogrammed default
  2180                           ;	Clock Switch Enable bit
  2181                           ;	CSWEN = 0x1, unprogrammed default
  2182                           ;	Fail-Safe Clock Monitor Enable bit
  2183                           ;	FCMEN = 0x1, unprogrammed default
  2184   300001                     	org	3145729
  2185   300001  FF                 	db	255
  2186                           
  2187                           ;Config register CONFIG3L @ 0x300004
  2188                           ;	WDT Period Select bits
  2189                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2190                           ;	WDT operating mode
  2191                           ;	WDTE = OFF, WDT Disabled
  2192   300004                     	org	3145732
  2193   300004  9F                 	db	159
  2194                           
  2195                           ;Config register CONFIG3H @ 0x300005
  2196                           ;	unspecified, using default values
  2197                           ;	WDT Window Select bits
  2198                           ;	WDTCWS = 0x7, unprogrammed default
  2199                           ;	WDT input clock selector
  2200                           ;	WDTCCS = 0x7, unprogrammed default
  2201   300005                     	org	3145733
  2202   300005  FF                 	db	255
  2203                           tosu	equ	0xFFF
  2204                           tosh	equ	0xFFE
  2205                           tosl	equ	0xFFD
  2206                           stkptr	equ	0xFFC
  2207                           pclatu	equ	0xFFB
  2208                           pclath	equ	0xFFA
  2209                           pcl	equ	0xFF9
  2210                           tblptru	equ	0xFF8
  2211                           tblptrh	equ	0xFF7
  2212                           tblptrl	equ	0xFF6
  2213                           tablat	equ	0xFF5
  2214                           prodh	equ	0xFF4
  2215                           prodl	equ	0xFF3
  2216                           indf0	equ	0xFEF
  2217                           postinc0	equ	0xFEE
  2218                           postdec0	equ	0xFED
  2219                           preinc0	equ	0xFEC
  2220                           plusw0	equ	0xFEB
  2221                           fsr0h	equ	0xFEA
  2222                           fsr0l	equ	0xFE9
  2223                           wreg	equ	0xFE8
  2224                           indf1	equ	0xFE7
  2225                           postinc1	equ	0xFE6
  2226                           postdec1	equ	0xFE5
  2227                           preinc1	equ	0xFE4
  2228                           plusw1	equ	0xFE3
  2229                           fsr1h	equ	0xFE2
  2230                           fsr1l	equ	0xFE1
  2231                           bsr	equ	0xFE0
  2232                           indf2	equ	0xFDF
  2233                           postinc2	equ	0xFDE
  2234                           postdec2	equ	0xFDD
  2235                           preinc2	equ	0xFDC
  2236                           plusw2	equ	0xFDB
  2237                           fsr2h	equ	0xFDA
  2238                           fsr2l	equ	0xFD9
  2239                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      70
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    cardOrange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    cardOrange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    S864DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    S864DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), main@motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRllhhhlllll[1]), 


Critical Paths under _main in COMRAM

    _main->_cardOrange
    _cardOrange->_headbuttReverse
    _cardOrange->_turnLeft135
    _cardOrange->_turnRight135
    _turnRight135->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft135->_turnLeft
    _turnLeft->_setMotorPWM
    _headbuttReverse->_fullSpeedReverse
    _stop->_setMotorPWM
    _fullSpeedReverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   19440
                                             32 COMRAM    20    20      0
                  _buggy_lights_init
                         _cardOrange
                    _initDCmotorsPWM
                    _lights_flashing
 ---------------------------------------------------------------------------------
 (1) _lights_flashing                                      2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _cardOrange                                           5     2      3   18898
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (2) _turnRight135                                         4     2      2    5904
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft135                                          4     2      2    6056
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _headbuttReverse                                      4     2      2    6512
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 3     1      2    3069
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedReverse                                     5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          5     4      1    1829
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_lights_init
   _cardOrange
     _headbuttReverse
       _fullSpeedReverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
     _turnLeft135
       _stop
       _turnLeft
         _setMotorPWM
     _turnRight135
       _stop
       _turnRight
         _setMotorPWM
   _initDCmotorsPWM
   _lights_flashing

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      51        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      46       1       73.7%
BITBIGSFRllhhhh     54      0       0      38        0.0%
BITBIGSFRllllh      4B      0       0      48        0.0%
BITBIGSFRllhhhl     46      0       0      40        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     2D      0       0      42        0.0%
BITBIGSFRlllll      2D      0       0      49        0.0%
BITBIGSFRllhhhl     1E      0       0      43        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      44        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRlllhl       5      0       0      47        0.0%
BITBIGSFRlllhh       3      0       0      46        0.0%
BITBIGSFRllhhhl      2      0       0      39        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRlhh         2      0       0      37        0.0%
BITBIGSFRllhhhl      1      0       0      41        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      45        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      46      50        0.0%
DATA                 0      0      46       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 26 16:15:30 2024

             _turn180Delay 0039                         l20 1214                         l17 158C  
      ___wmul@multiplicand 0003                        l125 0F54                        l133 1332  
                      l141 10C4                        l118 12A4                        l162 110A  
                      l138 1054                        l146 0F9C                        l165 117A  
                      l149 100C                        l174 14FA                        l334 149A  
                      l183 152A                        l177 14CA                        l347 1576  
                      l845 1432                        l838 142A                        u220 118E  
                      u221 1186                        u240 11AE                        u241 11A6  
                      u260 11EA                        u261 11E2                        u238 1190  
                      u280 1208                        u281 1200                        u258 11B0  
                      u278 11EC                        u800 12DE                        u801 12DA  
                      u810 131C                        u298 120A                        u811 1318  
                      u740 13DA                        u820 1332                        u900 100C  
                      u741 13D6                        u821 132E                        u901 1008  
                      u750 13F8                        u910 1102                        u830 104C  
                      u751 13F4                        u911 10FE                        u831 1048  
                      u760 1414                        u920 1122                        u840 106C  
                      u761 1410                        u921 111E                        u841 1068  
                      u770 0E1C                        u930 1162                        u850 10AC  
                      u771 0E18                        u931 115E                        u851 10A8  
                      u780 0ED8                        u940 117A                        u860 10C4  
                      u781 0ED4                        u941 1176                        u861 10C0  
                      u790 12C0                        u870 0F94                        u791 12BC  
                      u871 0F90                        u880 0FB4                        u881 0FB0  
                      u890 0FF4                        u891 0FF0                        u997 133E  
                      wreg 0FE8                _squareDelay 0035                       l1170 117C  
                     l1172 11C0                       l1174 11D8                       l1168 1578  
                     l1176 11F6                       l1700 107C                       l1630 13C8  
                     l1622 1552                       l1702 1084                       l1710 0F5E  
                     l1640 13FE                       l1632 13DA                       l1624 156E  
                     l1704 1094                       l1720 0FBC                       l1712 0F6C  
                     l1800 1434                       l1642 1414                       l1634 13E2  
                     l1650 0E02                       l1730 10C6                       l1706 10AC  
                     l1722 0FC4                       l1714 0F7C                       l1802 1438  
                     l1644 141C                       l1636 13EA                       l1628 13C0  
                     l1660 0EBE                       l1652 0E1C                       l1740 1122  
                     l1732 10CE                       l1724 0FCC                       l1716 0F94  
                     l1708 0F56                       l1804 1454                       l1646 141E  
                     l1638 13F8                       l1662 0ED8                       l1654 0E6A  
                     l1750 1162                       l1742 112A                       l1734 10DA  
                     l1670 12C0                       l1718 0FB4                       l1726 0FDC  
                     l1648 1424                       l1664 0F18                       l1656 0E7C  
                     l1744 1132                       l1736 10EA                       l1680 12F6  
                     l1672 12C8                       l1752 14CC                       l1728 0FF4  
                     l1760 14A8                       l1808 1470                       l1658 0E80  
                     l1746 113A                       l1738 1102                       l1674 12DE  
                     l1682 1306                       l1666 12A6                       l1690 1022  
                     l1754 14D8                       l1762 14BE                       l1770 1216  
                     l1748 114A                       l1684 131C                       l1676 12E6  
                     l1668 12AA                       l1764 14FC                       l1692 1034  
                     l1756 14EE                       l1780 127E                       l1772 1226  
                     l1860 1358                       l1678 12EE                       l1766 1508  
                     l1694 104C                       l1686 100E                       l1758 149C  
                     l1790 1298                       l1782 1280                       l1774 124C  
                     l1870 1374                       l1862 135C                       l1854 1334  
                     l1768 151E                       l1696 106C                       l1688 1016  
                     l1928 1484                       l1792 12A2                       l1784 128A  
                     l1776 1250                       l1880 1390                       l1872 137C  
                     l1864 1360                       l1856 134C                       l1698 1074  
                     l1786 128C                       l1778 1274                       l1890 13B4  
                     l1882 1398                       l1874 1380                       l1866 1364  
                     l1858 134C                       l1788 1296                       l1884 13A0  
                     l1876 1384                       l1868 136C                       l1886 13A4  
                     l1878 1388                       l1888 13A4                       u1007 11CA  
                     u1017 14B2                       u1027 0FD2                       u1037 14E2  
                     u1047 108A                       u1057 1512                       u1067 12FC  
                     u1077 1140                       _T2PR 0FBC                       _main 1334  
                     fsr2h 0FDA                       indf2 0FDF                       fsr1l 0FE1  
                     fsr2l 0FD9                       _stop 12A6                       prodh 0FF4  
                     prodl 0FF3                       start 0000          headbuttReverse@mL 0018  
        headbuttReverse@mR 0019               ___param_bank 0000                _turnLeft135 14CC  
                    ?_main 0001                      ?_stop 0013            __end_of___lwdiv 1434  
         ?_headbuttReverse 0018                _turningGear 0043          _turnRight135Delay 003B  
                    tablat 0FF5            _turnLeft90Delay 0041                      status 0FD8  
          __initialization 152C               __end_of_main 13C0               __end_of_stop 1334  
                   ??_main 0021                     ??_stop 0015              __activetblptr 0003  
             _turnRight135 149C               ?_setMotorPWM 000E                     _CCPR1H 0FAA  
                   _CCPR2H 0FA6                     _CCPR3H 0F25                     _CCPR4H 0F21  
                   _RE2PPS 0E74                     _RD5PPS 0E6F                     _RC7PPS 0E69  
                   _RD6PPS 0E70                     _RE4PPS 0E76                     _RG6PPS 0E88  
         _fullSpeedReverse 10C6           _turnLeft135Delay 003D               _CCPTMRS0bits 0FAD  
          _lights_flashing 117C                     ___wmul 1552                  ??___lwdiv 000B  
       fullSpeedReverse@mL 0013         fullSpeedReverse@mR 0014                     isa$std 0001  
             __pdataCOMRAM 0035               __mediumconst 0000                     tblptrh 0FF7  
                   tblptrl 0FF6                     tblptru 0FF8                     stop@mL 0013  
                   stop@mR 0014          ??_initDCmotorsPWM 0003           __end_of_turnLeft 10C6  
        _buggy_lights_init 1578                 __accesstop 0060    __end_of__initialization 154C  
       ?_buggy_lights_init 0001              ___rparam_used 0001             __pcstackCOMRAM 0001  
      ??_buggy_lights_init 0001                 _cardOrange 1434  __end_of_buggy_lights_init 158E  
  __end_of_lights_flashing 1216               _T2CLKCONbits 0FBF               ?_turnLeft135 0018  
fullSpeedReverse@rightGear 0017                    ?___wmul 0001                    _SSP2ADD 0ED6  
                  _SSP2BUF 0ED5                    __Hparam 0000                    __Lparam 0000  
                  ___lwdiv 13C0               __psmallconst 0E00                    __pcinit 152C  
                  __ramtop 0E00                  ?_turnLeft 0013                    __ptext0 1334  
                  __ptext1 117C                    __ptext2 1216                    __ptext3 1434  
                  __ptext4 149C                    __ptext5 0F56                    __ptext6 14CC  
                  __ptext7 100E                    __ptext8 14FC                    __ptext9 12A6  
                _T2CONbits 0FBD   __end_of_fullSpeedReverse 117C                  _T2HLTbits 0FBE  
              ?_cardOrange 001C       end_of_initialization 154C           ?_lights_flashing 0001  
                  postdec1 0FE5                    postdec2 0FDD                    postinc0 0FEE  
                  postinc2 0FDE            _initDCmotorsPWM 1216                 ??_turnLeft 0015  
       setMotorPWM@negDuty 0012          __end_of_turnRight 100E         setMotorPWM@posDuty 0011  
                _TRISCbits 0F83                  _TRISDbits 0F84                  _TRISEbits 0F85  
                _TRISFbits 0F86                  _TRISGbits 0F87                  _TRISHbits 0F88  
              _CCP1CONbits 0FAB                _CCP2CONbits 0FA7                _CCP3CONbits 0F26  
              _CCP4CONbits 0F22                 main@motorL 0023                 main@motorR 002C  
      cardOrange@backtrack 001E             __end_of___wmul 1578              __pidataCOMRAM 158E  
             cardOrange@mL 001C               cardOrange@mR 001D        start_initialization 152C  
         _turnRight90Delay 003F          ??_headbuttReverse 001A    __end_of_initDCmotorsPWM 12A6  
                 ??___wmul 0005         turnRight@rightGear 0017          turnLeft@rightGear 0017  
         ___lwdiv@dividend 0007                   ?___lwdiv 0007                __smallconst 0E00  
            ?_turnRight135 0018               ??_cardOrange 001F          ?_fullSpeedReverse 0013  
            ??_setMotorPWM 000F           ___lwdiv@quotient 000B              _headbuttDelay 0037  
 initDCmotorsPWM@PWMperiod 0001         ??_fullSpeedReverse 0015                  _rampDelay 0046  
           ___wmul@product 0005                   _LATCbits 0F7B                   _LATDbits 0F7C  
                 _LATEbits 0F7D                   _LATFbits 0F7E                   _LATGbits 0F7F  
                 _LATHbits 0F80                turnRight@mL 0013                turnRight@mR 0014  
         ?_initDCmotorsPWM 0001                   _SSP2CON2 0EDA                   _SSP2STAT 0ED8  
       __end_of_cardOrange 149C          ___wmul@multiplier 0001             ??_turnRight135 001A  
             setMotorPWM@m 000E                  _turnRight 0F56                  copy_data0 1540  
      __end_of_setMotorPWM 0F56          turnRight@leftGear 0016                   __Hrparam 0000  
                 __Lrparam 0000           turnLeft@leftGear 0016             turnRight135@mL 0018  
           turnRight135@mR 0019              turnLeft135@mL 0018              turnLeft135@mR 0019  
               _ANSELDbits 0EA7            ___lwdiv@divisor 0009            ___lwdiv@counter 000D  
               ?_turnRight 0013                   __ptext10 10C6                   __ptext11 0E02  
                 __ptext12 1552                   __ptext13 13C0                   __ptext14 1578  
             _SSP2CON1bits 0ED9            _headbuttReverse 14FC               _SSP2CON2bits 0EDA  
 fullSpeedReverse@leftGear 0016                 turnLeft@mL 0013                 turnLeft@mR 0014  
            ??_turnLeft135 001A                   isa$xinst 0000                   _turnLeft 100E  
              _setMotorPWM 0E02               _topGearRight 0044       __end_of_turnRight135 14CC  
      __end_of_turnLeft135 14FC                _topGearLeft 0045                 _SSP2DATPPS 0E1D  
        ??_lights_flashing 0001    __end_of_headbuttReverse 152C                 _SSP2CLKPPS 0E1C  
              ??_turnRight 0015  
