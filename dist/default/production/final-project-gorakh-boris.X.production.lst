

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Mar 08 09:49:36 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 18/08/2023 GMT
    67                           ; 
    68                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   00252A                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _timer_high_pointer
   106   00252A  28                 	db	low _trail_timer_high
   107   00252B  01                 	db	high _trail_timer_high
   108                           
   109                           ;initializer for _turningGear
   110   00252C  2A                 	db	42
   111                           
   112                           ;initializer for _topGearRight
   113   00252D  14                 	db	20
   114                           
   115                           ;initializer for _topGearLeft
   116   00252E  14                 	db	20
   117                           
   118                           ;initializer for _rampDelay
   119   00252F  08                 	db	8
   120                           
   121                           	psect	idataBANK0
   122   0024D4                     __pidataBANK0:
   123                           	callstack 0
   124                           
   125                           ;initializer for _manoeuvre_pointer
   126   0024D4  00                 	db	low _trail_manoeuvre
   127   0024D5  01                 	db	high _trail_manoeuvre
   128                           
   129                           ;initializer for _timer_low_pointer
   130   0024D6  14                 	db	low _trail_timer_low
   131   0024D7  01                 	db	high _trail_timer_low
   132                           
   133                           ;initializer for _squareDelay
   134   0024D8  012C               	dw	300
   135                           
   136                           ;initializer for _headbuttDelay
   137   0024DA  0046               	dw	70
   138                           
   139                           ;initializer for _turn180Delay
   140   0024DC  01FE               	dw	510
   141                           
   142                           ;initializer for _turnRight135Delay
   143   0024DE  012C               	dw	300
   144                           
   145                           ;initializer for _turnLeft135Delay
   146   0024E0  012C               	dw	300
   147                           
   148                           ;initializer for _turnRight90Delay
   149   0024E2  00AF               	dw	175
   150                           
   151                           ;initializer for _turnLeft90Delay
   152   0024E4  00AF               	dw	175
   153                           
   154                           ;initializer for _wall_threshold
   155   0024E6  012C               	dw	300
   156   000000                     _TMR0H	set	4052
   157   000000                     _TX4REG	set	3812
   158   000000                     _RC4STAbits	set	3815
   159   000000                     _SP4BRGH	set	3814
   160   000000                     _LATEbits	set	3965
   161   000000                     _TRISEbits	set	3973
   162   000000                     _LATGbits	set	3967
   163   000000                     _TRISGbits	set	3975
   164   000000                     _LATFbits	set	3966
   165   000000                     _LATHbits	set	3968
   166   000000                     _TRISFbits	set	3974
   167   000000                     _TRISHbits	set	3976
   168   000000                     _SSP2CON2bits	set	3802
   169   000000                     _RX4PPS	set	3605
   170   000000                     _SSP2CLKPPS	set	3612
   171   000000                     _SSP2DATPPS	set	3613
   172   000000                     _RC7PPS	set	3689
   173   000000                     _RE2PPS	set	3700
   174   000000                     _LATAbits	set	3961
   175   000000                     _LATDbits	set	3964
   176   000000                     _TRISDbits	set	3972
   177   000000                     _T2PR	set	4028
   178   000000                     _T2CONbits	set	4029
   179   000000                     _CCPR2H	set	4006
   180   000000                     _CCPR1H	set	4010
   181   000000                     _TRISCbits	set	3971
   182   000000                     _TRISAbits	set	3969
   183   000000                     _LATCbits	set	3963
   184   000000                     _RE4PPS	set	3702
   185   000000                     _RG6PPS	set	3720
   186   000000                     _RD5PPS	set	3695
   187   000000                     _ANSELDbits	set	3751
   188   000000                     _SSP2ADD	set	3798
   189   000000                     _SSP2CON1bits	set	3801
   190   000000                     _CCPR4H	set	3873
   191   000000                     _CCPR3H	set	3877
   192   000000                     _TMR0L	set	4051
   193   000000                     _T0CON0bits	set	4053
   194   000000                     _T0CON1bits	set	4054
   195   000000                     _T2CLKCONbits	set	4031
   196   000000                     _T2HLTbits	set	4030
   197   000000                     _CCP1CONbits	set	4011
   198   000000                     _CCPTMRS0bits	set	4013
   199   000000                     _CCP2CONbits	set	4007
   200   000000                     _CCP3CONbits	set	3878
   201   000000                     _CCP4CONbits	set	3874
   202   000000                     _RC4REG	set	3811
   203   000000                     _SP4BRGL	set	3813
   204   000000                     _TX4STAbits	set	3816
   205   000000                     _BAUD4CONbits	set	3817
   206   000000                     _SSP2CON2	set	3802
   207   000000                     _SSP2STAT	set	3800
   208   000000                     _ANSELFbits	set	3764
   209   000000                     _SSP2BUF	set	3797
   210   000000                     _PIE0bits	set	3625
   211   000000                     _PIR4bits	set	3639
   212   000000                     _RC0PPS	set	3682
   213   000000                     _RD6PPS	set	3696
   214   000000                     _INTCONbits	set	4082
   215   000000                     _PIR0bits	set	3635
   216                           
   217                           	psect	smallconst
   218   000E00                     __psmallconst:
   219                           	callstack 0
   220   000E00  00                 	db	0
   221   000E01                     STR_5:
   222                           
   223                           ; BSR set to: 14
   224   000E01  25                 	db	37
   225   000E02  75                 	db	117	;'u'
   226   000E03  20                 	db	32
   227   000E04  25                 	db	37
   228   000E05  75                 	db	117	;'u'
   229   000E06  20                 	db	32
   230   000E07  25                 	db	37
   231   000E08  75                 	db	117	;'u'
   232   000E09  20                 	db	32
   233   000E0A  25                 	db	37
   234   000E0B  75                 	db	117	;'u'
   235   000E0C  20                 	db	32
   236   000E0D  0D                 	db	13
   237   000E0E  00                 	db	0
   238   000E0F                     STR_1:
   239                           
   240                           ; BSR set to: 14
   241   000E0F  25                 	db	37
   242   000E10  64                 	db	100	;'d'
   243   000E11  20                 	db	32
   244   000E12  0D                 	db	13
   245   000E13  00                 	db	0
   246   000E14                     STR_2:
   247                           
   248                           ; BSR set to: 14
   249   000E14  25                 	db	37
   250   000E15  64                 	db	100	;'d'
   251   000E16  20                 	db	32
   252   000E17  00                 	db	0
   253   000E18  00                 	db	0	; dummy byte at the end
   254   000000                     
   255                           ; #config settings
   256                           
   257                           	psect	cinit
   258   001DAC                     __pcinit:
   259                           	callstack 0
   260   001DAC                     start_initialization:
   261                           	callstack 0
   262   001DAC                     __initialization:
   263                           	callstack 0
   264                           
   265                           ; Initialize objects allocated to BANK0 (20 bytes)
   266                           ; load TBLPTR registers with __pidataBANK0
   267   001DAC  0ED4               	movlw	low __pidataBANK0
   268   001DAE  6EF6               	movwf	tblptrl,c
   269   001DB0  0E24               	movlw	high __pidataBANK0
   270   001DB2  6EF7               	movwf	tblptrh,c
   271   001DB4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   272   001DB6  6EF8               	movwf	tblptru,c
   273   001DB8  EE00  F0A6         	lfsr	0,__pdataBANK0
   274   001DBC  EE10 F014          	lfsr	1,20
   275   001DC0                     copy_data0:
   276   001DC0  0009               	tblrd		*+
   277   001DC2  CFF5 FFEE          	movff	tablat,postinc0
   278   001DC6  50E5               	movf	postdec1,w,c
   279   001DC8  50E1               	movf	fsr1l,w,c
   280   001DCA  E1FA               	bnz	copy_data0
   281                           
   282                           ; Initialize objects allocated to COMRAM (6 bytes)
   283                           ; load TBLPTR registers with __pidataCOMRAM
   284   001DCC  0E2A               	movlw	low __pidataCOMRAM
   285   001DCE  6EF6               	movwf	tblptrl,c
   286   001DD0  0E25               	movlw	high __pidataCOMRAM
   287   001DD2  6EF7               	movwf	tblptrh,c
   288   001DD4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   289   001DD6  6EF8               	movwf	tblptru,c
   290   001DD8  EE00  F054         	lfsr	0,__pdataCOMRAM
   291   001DDC  EE10 F006          	lfsr	1,6
   292   001DE0                     copy_data1:
   293   001DE0  0009               	tblrd		*+
   294   001DE2  CFF5 FFEE          	movff	tablat,postinc0
   295   001DE6  50E5               	movf	postdec1,w,c
   296   001DE8  50E1               	movf	fsr1l,w,c
   297   001DEA  E1FA               	bnz	copy_data1
   298                           
   299                           ; Clear objects allocated to BANK1 (60 bytes)
   300   001DEC  EE01  F000         	lfsr	0,__pbssBANK1
   301   001DF0  0E3C               	movlw	60
   302   001DF2                     clear_0:
   303   001DF2  6AEE               	clrf	postinc0,c
   304   001DF4  06E8               	decf	wreg,f,c
   305   001DF6  E1FD               	bnz	clear_0
   306                           
   307                           ; Clear objects allocated to BANK0 (38 bytes)
   308   001DF8  EE00  F060         	lfsr	0,__pbssBANK0
   309   001DFC  0E26               	movlw	38
   310   001DFE                     clear_1:
   311   001DFE  6AEE               	clrf	postinc0,c
   312   001E00  06E8               	decf	wreg,f,c
   313   001E02  E1FD               	bnz	clear_1
   314                           
   315                           ; Clear objects allocated to COMRAM (4 bytes)
   316   001E04  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   317   001E06  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   318   001E08  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   319   001E0A  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   320   001E0C                     end_of_initialization:
   321                           	callstack 0
   322   001E0C                     __end_of__initialization:
   323                           	callstack 0
   324   001E0C  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   325   001E0E  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   326   001E10  0100               	movlb	0
   327   001E12  EFF9  F00B         	goto	_main	;jump to C main() function
   328                           
   329                           	psect	bssCOMRAM
   330   00005A                     __pbssCOMRAM:
   331                           	callstack 0
   332   00005A                     _flags:
   333                           	callstack 0
   334   00005A                     	ds	1
   335   00005B                     _manoeuvre_count:
   336                           	callstack 0
   337   00005B                     	ds	1
   338   00005C                     _return_flag:
   339                           	callstack 0
   340   00005C                     	ds	1
   341   00005D                     _returning:
   342                           	callstack 0
   343   00005D                     	ds	1
   344                           
   345                           	psect	dataCOMRAM
   346   000054                     __pdataCOMRAM:
   347                           	callstack 0
   348   000054                     _timer_high_pointer:
   349                           	callstack 0
   350   000054                     	ds	2
   351   000056                     _turningGear:
   352                           	callstack 0
   353   000056                     	ds	1
   354   000057                     _topGearRight:
   355                           	callstack 0
   356   000057                     	ds	1
   357   000058                     _topGearLeft:
   358                           	callstack 0
   359   000058                     	ds	1
   360   000059                     _rampDelay:
   361                           	callstack 0
   362   000059                     	ds	1
   363                           
   364                           	psect	bssBANK0
   365   000060                     __pbssBANK0:
   366                           	callstack 0
   367   000060                     _dbuf:
   368                           	callstack 0
   369   000060                     	ds	32
   370   000080                     _nout:
   371                           	callstack 0
   372   000080                     	ds	2
   373   000082                     _width:
   374                           	callstack 0
   375   000082                     	ds	2
   376   000084                     _prec:
   377                           	callstack 0
   378   000084                     	ds	2
   379                           
   380                           	psect	dataBANK0
   381   0000A6                     __pdataBANK0:
   382                           	callstack 0
   383   0000A6                     _manoeuvre_pointer:
   384                           	callstack 0
   385   0000A6                     	ds	2
   386   0000A8                     _timer_low_pointer:
   387                           	callstack 0
   388   0000A8                     	ds	2
   389   0000AA                     _squareDelay:
   390                           	callstack 0
   391   0000AA                     	ds	2
   392   0000AC                     _headbuttDelay:
   393                           	callstack 0
   394   0000AC                     	ds	2
   395   0000AE                     _turn180Delay:
   396                           	callstack 0
   397   0000AE                     	ds	2
   398   0000B0                     _turnRight135Delay:
   399                           	callstack 0
   400   0000B0                     	ds	2
   401   0000B2                     _turnLeft135Delay:
   402                           	callstack 0
   403   0000B2                     	ds	2
   404   0000B4                     _turnRight90Delay:
   405                           	callstack 0
   406   0000B4                     	ds	2
   407   0000B6                     _turnLeft90Delay:
   408                           	callstack 0
   409   0000B6                     	ds	2
   410   0000B8                     _wall_threshold:
   411                           	callstack 0
   412   0000B8                     	ds	2
   413                           
   414                           	psect	bssBANK1
   415   000100                     __pbssBANK1:
   416                           	callstack 0
   417   000100                     _trail_manoeuvre:
   418                           	callstack 0
   419   000100                     	ds	20
   420   000114                     _trail_timer_low:
   421                           	callstack 0
   422   000114                     	ds	20
   423   000128                     _trail_timer_high:
   424                           	callstack 0
   425   000128                     	ds	20
   426                           
   427                           	psect	cstackBANK0
   428   000086                     __pcstackBANK0:
   429                           	callstack 0
   430   000086                     main@HSV_colour:
   431                           	callstack 0
   432                           
   433                           ; 6 bytes @ 0x0
   434   000086                     	ds	6
   435   00008C                     main@motorL:
   436                           	callstack 0
   437                           
   438                           ; 9 bytes @ 0x6
   439   00008C                     	ds	9
   440   000095                     main@motorR:
   441                           	callstack 0
   442                           
   443                           ; 9 bytes @ 0xF
   444   000095                     	ds	9
   445   00009E                     main@measured_colour:
   446                           	callstack 0
   447                           
   448                           ; 8 bytes @ 0x18
   449   00009E                     	ds	8
   450                           
   451                           	psect	cstackCOMRAM
   452   000001                     __pcstackCOMRAM:
   453                           	callstack 0
   454   000001                     ??_toggle_tricolour_LED:
   455   000001                     ??_I2C_2_Master_Idle:
   456   000001                     ?_max:
   457                           	callstack 0
   458   000001                     ?_min:
   459                           	callstack 0
   460   000001                     ?___awdiv:
   461                           	callstack 0
   462   000001                     ?___awmod:
   463                           	callstack 0
   464   000001                     ?___lwdiv:
   465                           	callstack 0
   466   000001                     ?___lwmod:
   467                           	callstack 0
   468   000001                     ?___lmul:
   469                           	callstack 0
   470   000001                     ?___lldiv:
   471                           	callstack 0
   472   000001                     sendCharSerial4@charToSend:
   473                           	callstack 0
   474   000001                     write_timer@tL:
   475                           	callstack 0
   476   000001                     max@a:
   477                           	callstack 0
   478   000001                     min@a:
   479                           	callstack 0
   480   000001                     initDCmotorsPWM@PWMperiod:
   481                           	callstack 0
   482   000001                     ___awdiv@dividend:
   483                           	callstack 0
   484   000001                     ___awmod@dividend:
   485                           	callstack 0
   486   000001                     ___lwdiv@dividend:
   487                           	callstack 0
   488   000001                     ___lwmod@dividend:
   489                           	callstack 0
   490   000001                     fputc@c:
   491                           	callstack 0
   492   000001                     ___lmul@multiplier:
   493                           	callstack 0
   494   000001                     ___lldiv@dividend:
   495                           	callstack 0
   496                           
   497                           ; 4 bytes @ 0x0
   498   000001                     	ds	1
   499   000002                     ??_I2C_2_Master_Read:
   500   000002                     I2C_2_Master_Write@data_byte:
   501                           	callstack 0
   502   000002                     write_timer@tH:
   503                           	callstack 0
   504   000002                     sendStringSerial4@string:
   505                           	callstack 0
   506                           
   507                           ; 2 bytes @ 0x1
   508   000002                     	ds	1
   509   000003                     color_writetoaddr@value:
   510                           	callstack 0
   511   000003                     I2C_2_Master_Read@ack:
   512                           	callstack 0
   513   000003                     fputc@fp:
   514                           	callstack 0
   515   000003                     max@b:
   516                           	callstack 0
   517   000003                     min@b:
   518                           	callstack 0
   519   000003                     ___awdiv@divisor:
   520                           	callstack 0
   521   000003                     ___awmod@divisor:
   522                           	callstack 0
   523   000003                     ___lwdiv@divisor:
   524                           	callstack 0
   525   000003                     ___lwmod@divisor:
   526                           	callstack 0
   527                           
   528                           ; 2 bytes @ 0x2
   529   000003                     	ds	1
   530   000004                     ??_fputc:
   531   000004                     color_writetoaddr@address:
   532                           	callstack 0
   533   000004                     I2C_2_Master_Read@tmp:
   534                           	callstack 0
   535                           
   536                           ; 1 bytes @ 0x3
   537   000004                     	ds	1
   538   000005                     ??_color_click_init:
   539   000005                     ?_color_read_Red:
   540                           	callstack 0
   541   000005                     ?_color_read_Blue:
   542                           	callstack 0
   543   000005                     ?_color_read_Green:
   544                           	callstack 0
   545   000005                     ?_color_read_Clear:
   546                           	callstack 0
   547   000005                     ___awdiv@counter:
   548                           	callstack 0
   549   000005                     ___awmod@counter:
   550                           	callstack 0
   551   000005                     ___lwmod@counter:
   552                           	callstack 0
   553   000005                     max@max_val:
   554                           	callstack 0
   555   000005                     min@min_val:
   556                           	callstack 0
   557   000005                     ___lwdiv@quotient:
   558                           	callstack 0
   559   000005                     ___lmul@multiplicand:
   560                           	callstack 0
   561   000005                     ___lldiv@divisor:
   562                           	callstack 0
   563                           
   564                           ; 4 bytes @ 0x4
   565   000005                     	ds	1
   566   000006                     ___awdiv@sign:
   567                           	callstack 0
   568   000006                     ___awmod@sign:
   569                           	callstack 0
   570                           
   571                           ; 1 bytes @ 0x5
   572   000006                     	ds	1
   573   000007                     ??_color_read_Red:
   574   000007                     ??_color_read_Blue:
   575   000007                     ??_color_read_Green:
   576   000007                     ??_color_read_Clear:
   577   000007                     ?_abs:
   578                           	callstack 0
   579   000007                     ?_maxRGB:
   580                           	callstack 0
   581   000007                     ?_minRGB:
   582                           	callstack 0
   583   000007                     maxRGB@p:
   584                           	callstack 0
   585   000007                     minRGB@p:
   586                           	callstack 0
   587   000007                     ___lwdiv@counter:
   588                           	callstack 0
   589   000007                     ___awdiv@quotient:
   590                           	callstack 0
   591   000007                     abs@a:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0x6
   595   000007                     	ds	2
   596   000009                     ??_abs:
   597   000009                     _maxRGB$3154:
   598                           	callstack 0
   599   000009                     _minRGB$3155:
   600                           	callstack 0
   601   000009                     ___lmul@product:
   602                           	callstack 0
   603   000009                     ___lldiv@quotient:
   604                           	callstack 0
   605                           
   606                           ; 4 bytes @ 0x8
   607   000009                     	ds	1
   608   00000A                     color_read_Red@tmp:
   609                           	callstack 0
   610   00000A                     color_read_Blue@tmp:
   611                           	callstack 0
   612   00000A                     color_read_Green@tmp:
   613                           	callstack 0
   614   00000A                     color_read_Clear@tmp:
   615                           	callstack 0
   616                           
   617                           ; 2 bytes @ 0x9
   618   00000A                     	ds	1
   619   00000B                     ?_vfpfcnvrt:
   620                           	callstack 0
   621   00000B                     vfpfcnvrt@fp:
   622                           	callstack 0
   623                           
   624                           ; 1 bytes @ 0xA
   625   00000B                     	ds	1
   626   00000C                     getRGBCval@p:
   627                           	callstack 0
   628   00000C                     vfpfcnvrt@fmt:
   629                           	callstack 0
   630                           
   631                           ; 1 bytes @ 0xB
   632   00000C                     	ds	1
   633   00000D                     ___lldiv@counter:
   634                           	callstack 0
   635   00000D                     vfpfcnvrt@ap:
   636                           	callstack 0
   637                           
   638                           ; 1 bytes @ 0xC
   639   00000D                     	ds	1
   640   00000E                     ??_vfpfcnvrt:
   641   00000E                     getHSVval@p1:
   642                           	callstack 0
   643                           
   644                           ; 1 bytes @ 0xD
   645   00000E                     	ds	1
   646   00000F                     getHSVval@p2:
   647                           	callstack 0
   648                           
   649                           ; 1 bytes @ 0xE
   650   00000F                     	ds	1
   651   000010                     ??_getHSVval:
   652   000010                     vfpfcnvrt@done:
   653                           	callstack 0
   654                           
   655                           ; 1 bytes @ 0xF
   656   000010                     	ds	1
   657   000011                     vfpfcnvrt@cnt:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x10
   661   000011                     	ds	2
   662   000013                     vfpfcnvrt@cp:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0x12
   666   000013                     	ds	1
   667   000014                     vfpfcnvrt@convarg:
   668                           	callstack 0
   669                           
   670                           ; 4 bytes @ 0x13
   671   000014                     	ds	4
   672   000018                     vfpfcnvrt@c:
   673                           	callstack 0
   674   000018                     getHSVval@Sz:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x17
   678   000018                     	ds	1
   679   000019                     ?_vfprintf:
   680                           	callstack 0
   681   000019                     vfprintf@fp:
   682                           	callstack 0
   683                           
   684                           ; 1 bytes @ 0x18
   685   000019                     	ds	1
   686   00001A                     vfprintf@fmt:
   687                           	callstack 0
   688   00001A                     getHSVval@m:
   689                           	callstack 0
   690                           
   691                           ; 2 bytes @ 0x19
   692   00001A                     	ds	1
   693   00001B                     vfprintf@ap:
   694                           	callstack 0
   695                           
   696                           ; 1 bytes @ 0x1A
   697   00001B                     	ds	1
   698   00001C                     vfprintf@cfmt:
   699                           	callstack 0
   700   00001C                     getHSVval@S:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x1B
   704   00001C                     	ds	1
   705   00001D                     ?_sprintf:
   706                           	callstack 0
   707   00001D                     sprintf@s:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x1C
   711   00001D                     	ds	1
   712   00001E                     getHSVval@H:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x1D
   716   00001E                     	ds	1
   717   00001F                     sprintf@fmt:
   718                           	callstack 0
   719                           
   720                           ; 1 bytes @ 0x1E
   721   00001F                     	ds	1
   722   000020                     getHSVval@temp_625:
   723                           	callstack 0
   724                           
   725                           ; 4 bytes @ 0x1F
   726   000020                     	ds	4
   727   000024                     getHSVval@temp:
   728                           	callstack 0
   729                           
   730                           ; 4 bytes @ 0x23
   731   000024                     	ds	4
   732   000028                     sprintf@ret:
   733                           	callstack 0
   734   000028                     getHSVval@temp_621:
   735                           	callstack 0
   736                           
   737                           ; 4 bytes @ 0x27
   738   000028                     	ds	2
   739   00002A                     sprintf@ap:
   740                           	callstack 0
   741                           
   742                           ; 1 bytes @ 0x29
   743   00002A                     	ds	1
   744   00002B                     sprintf@f:
   745                           	callstack 0
   746                           
   747                           ; 12 bytes @ 0x2A
   748   00002B                     	ds	1
   749   00002C                     getHSVval@temp_622:
   750                           	callstack 0
   751                           
   752                           ; 4 bytes @ 0x2B
   753   00002C                     	ds	4
   754   000030                     getHSVval@temp_623:
   755                           	callstack 0
   756                           
   757                           ; 4 bytes @ 0x2F
   758   000030                     	ds	4
   759   000034                     getHSVval@temp_624:
   760                           	callstack 0
   761                           
   762                           ; 4 bytes @ 0x33
   763   000034                     	ds	3
   764   000037                     sendRGBCvalSerial4@col_val:
   765                           	callstack 0
   766   000037                     sendHSVvalSerial4@col_val:
   767                           	callstack 0
   768                           
   769                           ; 1 bytes @ 0x36
   770   000037                     	ds	1
   771   000038                     getHSVval@temp_620:
   772                           	callstack 0
   773   000038                     sendHSVvalSerial4@tempStr:
   774                           	callstack 0
   775   000038                     sendRGBCvalSerial4@tempStr:
   776                           	callstack 0
   777                           
   778                           ; 26 bytes @ 0x37
   779   000038                     	ds	4
   780   00003C                     getHSVval@M:
   781                           	callstack 0
   782                           
   783                           ; 2 bytes @ 0x3B
   784   00003C                     	ds	2
   785   00003E                     getHSVval@C:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x3D
   789   00003E                     	ds	20
   790   000052                     ??_main:
   791                           
   792                           ; 1 bytes @ 0x51
   793   000052                     	ds	2
   794                           
   795 ;;
   796 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   797 ;;
   798 ;; *************** function _main *****************
   799 ;; Defined at:
   800 ;;		line 27 in file "main.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;		None
   803 ;; Auto vars:     Size  Location     Type
   804 ;;  motorR          9   15[BANK0 ] struct DC_motor
   805 ;;  motorL          9    6[BANK0 ] struct DC_motor
   806 ;;  measured_col    8   24[BANK0 ] struct RGBC_val
   807 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
   808 ;;  PWMcycle        2    0        unsigned int 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   819 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   820 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   821 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   822 ;;Total ram usage:       34 bytes
   823 ;; Hardware stack levels required when called: 7
   824 ;; This function calls:
   825 ;;		_Timer0_init
   826 ;;		_buggy_lights_init
   827 ;;		_color_click_init
   828 ;;		_getHSVval
   829 ;;		_getRGBCval
   830 ;;		_initDCmotorsPWM
   831 ;;		_initUSART4
   832 ;;		_sendHSVvalSerial4
   833 ;;		_sendRGBCvalSerial4
   834 ;;		_toggle_tricolour_LED
   835 ;; This function is called by:
   836 ;;		Startup code after reset
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text0
   841   0017F2                     __ptext0:
   842                           	callstack 0
   843   0017F2                     _main:
   844                           	callstack 24
   845   0017F2                     
   846                           ;main.c: 28:     struct RGBC_val measured_colour;;main.c: 29:         measured_colour.R 
      +                          = 0;
   847   0017F2  0E00               	movlw	0
   848   0017F4  0100               	movlb	0	; () banked
   849   0017F6  6F9F               	movwf	(main@measured_colour+1)& (0+255),b
   850   0017F8  0E00               	movlw	0
   851   0017FA  6F9E               	movwf	main@measured_colour& (0+255),b
   852                           
   853                           ;main.c: 30:         measured_colour.G = 0;
   854   0017FC  0E00               	movlw	0
   855   0017FE  6FA1               	movwf	(main@measured_colour+3)& (0+255),b
   856   001800  0E00               	movlw	0
   857   001802  6FA0               	movwf	(main@measured_colour+2)& (0+255),b
   858                           
   859                           ;main.c: 31:         measured_colour.B = 0;
   860   001804  0E00               	movlw	0
   861   001806  6FA3               	movwf	(main@measured_colour+5)& (0+255),b
   862   001808  0E00               	movlw	0
   863   00180A  6FA2               	movwf	(main@measured_colour+4)& (0+255),b
   864                           
   865                           ;main.c: 32:         measured_colour.C = 0;
   866   00180C  0E00               	movlw	0
   867   00180E  6FA5               	movwf	(main@measured_colour+7)& (0+255),b
   868   001810  0E00               	movlw	0
   869   001812  6FA4               	movwf	(main@measured_colour+6)& (0+255),b
   870                           
   871                           ;main.c: 34:     struct HSV_val HSV_colour;;main.c: 35:         HSV_colour.H = 0;
   872   001814  0E00               	movlw	0
   873   001816  6F87               	movwf	(main@HSV_colour+1)& (0+255),b
   874   001818  0E00               	movlw	0
   875   00181A  6F86               	movwf	main@HSV_colour& (0+255),b
   876                           
   877                           ;main.c: 36:         HSV_colour.S = 0;
   878   00181C  0E00               	movlw	0
   879   00181E  6F89               	movwf	(main@HSV_colour+3)& (0+255),b
   880   001820  0E00               	movlw	0
   881   001822  6F88               	movwf	(main@HSV_colour+2)& (0+255),b
   882                           
   883                           ;main.c: 37:         HSV_colour.V = 0;
   884   001824  0E00               	movlw	0
   885   001826  6F8B               	movwf	(main@HSV_colour+5)& (0+255),b
   886   001828  0E00               	movlw	0
   887   00182A  6F8A               	movwf	(main@HSV_colour+4)& (0+255),b
   888                           
   889                           ;main.c: 41:     struct DC_motor motorL, motorR;;main.c: 42:         motorL.power = 0;
   890   00182C  0E00               	movlw	0
   891   00182E  6F8C               	movwf	main@motorL& (0+255),b
   892                           
   893                           ;main.c: 43:         motorL.direction = 1;
   894   001830  0E01               	movlw	1
   895   001832  6F8D               	movwf	(main@motorL+1)& (0+255),b
   896                           
   897                           ;main.c: 44:         motorL.brakemode = 1;
   898   001834  0E01               	movlw	1
   899   001836  6F8E               	movwf	(main@motorL+2)& (0+255),b
   900   001838                     
   901                           ; BSR set to: 0
   902                           ;main.c: 45:         motorL.PWMperiod = PWMcycle;
   903   001838  0E00               	movlw	0
   904   00183A  6F90               	movwf	(main@motorL+4)& (0+255),b
   905   00183C  0E63               	movlw	99
   906   00183E  6F8F               	movwf	(main@motorL+3)& (0+255),b
   907   001840                     
   908                           ; BSR set to: 0
   909                           ;main.c: 46:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
   910   001840  0EAA               	movlw	170
   911   001842  6F91               	movwf	(main@motorL+5)& (0+255),b
   912   001844  0E0F               	movlw	15
   913   001846  6F92               	movwf	(main@motorL+6)& (0+255),b
   914   001848                     
   915                           ; BSR set to: 0
   916                           ;main.c: 47:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
   917   001848  0EA6               	movlw	166
   918   00184A  6F93               	movwf	(main@motorL+7)& (0+255),b
   919   00184C  0E0F               	movlw	15
   920   00184E  6F94               	movwf	(main@motorL+8)& (0+255),b
   921                           
   922                           ;main.c: 48:         motorR.power = 0;
   923   001850  0E00               	movlw	0
   924   001852  6F95               	movwf	main@motorR& (0+255),b
   925                           
   926                           ;main.c: 49:         motorR.direction = 1;
   927   001854  0E01               	movlw	1
   928   001856  6F96               	movwf	(main@motorR+1)& (0+255),b
   929                           
   930                           ;main.c: 50:         motorR.brakemode = 1;
   931   001858  0E01               	movlw	1
   932   00185A  6F97               	movwf	(main@motorR+2)& (0+255),b
   933   00185C                     
   934                           ; BSR set to: 0
   935                           ;main.c: 51:         motorR.PWMperiod = PWMcycle;
   936   00185C  0E00               	movlw	0
   937   00185E  6F99               	movwf	(main@motorR+4)& (0+255),b
   938   001860  0E63               	movlw	99
   939   001862  6F98               	movwf	(main@motorR+3)& (0+255),b
   940   001864                     
   941                           ; BSR set to: 0
   942                           ;main.c: 52:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
   943   001864  0E25               	movlw	37
   944   001866  6F9A               	movwf	(main@motorR+5)& (0+255),b
   945   001868  0E0F               	movlw	15
   946   00186A  6F9B               	movwf	(main@motorR+6)& (0+255),b
   947   00186C                     
   948                           ; BSR set to: 0
   949                           ;main.c: 53:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
   950   00186C  0E21               	movlw	33
   951   00186E  6F9C               	movwf	(main@motorR+7)& (0+255),b
   952   001870  0E0F               	movlw	15
   953   001872  6F9D               	movwf	(main@motorR+8)& (0+255),b
   954   001874                     
   955                           ; BSR set to: 0
   956                           ;main.c: 55:     initDCmotorsPWM(PWMcycle);
   957   001874  0E00               	movlw	0
   958   001876  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   959   001878  0E63               	movlw	99
   960   00187A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   961   00187C  EC54  F00E         	call	_initDCmotorsPWM	;wreg free
   962                           
   963                           ;main.c: 56:     buggy_lights_init();
   964   001880  ECED  F011         	call	_buggy_lights_init	;wreg free
   965   001884                     
   966                           ;main.c: 57:     color_click_init();
   967   001884  ECA3  F011         	call	_color_click_init	;wreg free
   968   001888                     
   969                           ;main.c: 58:     initUSART4();
   970   001888  EC4F  F012         	call	_initUSART4	;wreg free
   971   00188C                     
   972                           ;main.c: 59:     Timer0_init();
   973   00188C  EC2D  F012         	call	_Timer0_init	;wreg free
   974   001890                     
   975                           ;main.c: 63:         TRISDbits.TRISD7 = 0;
   976   001890  9E84               	bcf	132,7,c	;volatile
   977   001892                     
   978                           ;main.c: 64:         TRISHbits.TRISH3 = 0;
   979   001892  9688               	bcf	136,3,c	;volatile
   980   001894                     
   981                           ;main.c: 66:         LATDbits.LATD7 = 0;
   982   001894  9E7C               	bcf	124,7,c	;volatile
   983   001896                     
   984                           ;main.c: 67:         LATHbits.LATH3 = 0;
   985   001896  9680               	bcf	128,3,c	;volatile
   986   001898                     
   987                           ;main.c: 71:         TRISFbits.TRISF2 = 1;
   988   001898  8486               	bsf	134,2,c	;volatile
   989   00189A                     
   990                           ;main.c: 72:         TRISFbits.TRISF3 = 1;
   991   00189A  8686               	bsf	134,3,c	;volatile
   992   00189C                     
   993                           ;main.c: 74:         ANSELFbits.ANSELF2 = 0;
   994   00189C  010E               	movlb	14	; () banked
   995   00189E  95B4               	bcf	180,2,b	;volatile
   996   0018A0                     
   997                           ; BSR set to: 14
   998                           ;main.c: 75:         ANSELFbits.ANSELF3 = 0;
   999   0018A0  97B4               	bcf	180,3,b	;volatile
  1000                           
  1001                           ;main.c: 80:     LATHbits.LATH3 = !LATHbits.LATH3;
  1002   0018A2  A680               	btfss	128,3,c	;volatile
  1003   0018A4  EF56  F00C         	goto	u2191
  1004   0018A8  EF5A  F00C         	goto	u2190
  1005   0018AC                     u2191:
  1006   0018AC  6A52               	clrf	??_main^0,c
  1007   0018AE  2A52               	incf	??_main^0,f,c
  1008   0018B0  EF5B  F00C         	goto	u2208
  1009   0018B4                     u2190:
  1010   0018B4  6A52               	clrf	??_main^0,c
  1011   0018B6                     u2208:
  1012   0018B6  4652               	rlncf	??_main^0,f,c
  1013   0018B8  4652               	rlncf	??_main^0,f,c
  1014   0018BA  4652               	rlncf	??_main^0,f,c
  1015   0018BC  5080               	movf	128,w,c	;volatile
  1016   0018BE  1852               	xorwf	??_main^0,w,c
  1017   0018C0  0BF7               	andlw	-9
  1018   0018C2  1852               	xorwf	??_main^0,w,c
  1019   0018C4  6E80               	movwf	128,c	;volatile
  1020   0018C6                     
  1021                           ;main.c: 81:     toggle_tricolour_LED();
  1022   0018C6  EC87  F00C         	call	_toggle_tricolour_LED	;wreg free
  1023   0018CA                     l3491:
  1024                           
  1025                           ;main.c: 86:         getRGBCval(&measured_colour);
  1026   0018CA  0E9E               	movlw	low main@measured_colour
  1027   0018CC  6E0C               	movwf	getRGBCval@p^0,c
  1028   0018CE  ECFD  F00F         	call	_getRGBCval	;wreg free
  1029   0018D2                     
  1030                           ;main.c: 91:         getHSVval(&HSV_colour, &measured_colour);
  1031   0018D2  0E86               	movlw	low main@HSV_colour
  1032   0018D4  6E0E               	movwf	getHSVval@p1^0,c
  1033   0018D6  0E9E               	movlw	low main@measured_colour
  1034   0018D8  6E0F               	movwf	getHSVval@p2^0,c
  1035   0018DA  EC0D  F007         	call	_getHSVval	;wreg free
  1036   0018DE                     
  1037                           ;main.c: 92:         sendRGBCvalSerial4(&measured_colour);
  1038   0018DE  0E9E               	movlw	low main@measured_colour
  1039   0018E0  6E37               	movwf	sendRGBCvalSerial4@col_val^0,c
  1040   0018E2  ECA3  F00F         	call	_sendRGBCvalSerial4	;wreg free
  1041   0018E6                     
  1042                           ;main.c: 93:         sendHSVvalSerial4(&HSV_colour);
  1043   0018E6  0E86               	movlw	low main@HSV_colour
  1044   0018E8  6E37               	movwf	sendHSVvalSerial4@col_val^0,c
  1045   0018EA  EC1C  F011         	call	_sendHSVvalSerial4	;wreg free
  1046   0018EE                     
  1047                           ;main.c: 94:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1048   0018EE  0E52               	movlw	82
  1049   0018F0  6E53               	movwf	(??_main+1)^0,c
  1050   0018F2  0E2B               	movlw	43
  1051   0018F4  6E52               	movwf	??_main^0,c
  1052   0018F6  0E00               	movlw	0
  1053   0018F8                     u2647:
  1054   0018F8  2EE8               	decfsz	wreg,f,c
  1055   0018FA  D7FE               	bra	u2647
  1056   0018FC  2E52               	decfsz	??_main^0,f,c
  1057   0018FE  D7FC               	bra	u2647
  1058   001900  2E53               	decfsz	(??_main+1)^0,f,c
  1059   001902  D7FA               	bra	u2647
  1060   001904  D000               	nop2	
  1061   001906  EF65  F00C         	goto	l3491
  1062   00190A  EF1A  F000         	goto	start
  1063   00190E                     __end_of_main:
  1064                           	callstack 0
  1065                           
  1066 ;; *************** function _toggle_tricolour_LED *****************
  1067 ;; Defined at:
  1068 ;;		line 86 in file "buggy_lights.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;		None
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;		None
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  1    wreg      void 
  1075 ;; Registers used:
  1076 ;;		wreg, status,2, status,0
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1084 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1085 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1086 ;;Total ram usage:        1 bytes
  1087 ;; Hardware stack levels used: 1
  1088 ;; Hardware stack levels required when called: 1
  1089 ;; This function calls:
  1090 ;;		Nothing
  1091 ;; This function is called by:
  1092 ;;		_main
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           	psect	text1
  1097   00190E                     __ptext1:
  1098                           	callstack 0
  1099   00190E                     _toggle_tricolour_LED:
  1100                           	callstack 29
  1101   00190E                     
  1102                           ;buggy_lights.c: 91:             LATGbits.LATG1 = !LATGbits.LATG1;
  1103   00190E  A27F               	btfss	127,1,c	;volatile
  1104   001910  EF8C  F00C         	goto	u1891
  1105   001914  EF90  F00C         	goto	u1890
  1106   001918                     u1891:
  1107   001918  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1108   00191A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1109   00191C  EF91  F00C         	goto	u1908
  1110   001920                     u1890:
  1111   001920  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1112   001922                     u1908:
  1113   001922  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1114   001924  507F               	movf	127,w,c	;volatile
  1115   001926  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1116   001928  0BFD               	andlw	-3
  1117   00192A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1118   00192C  6E7F               	movwf	127,c	;volatile
  1119                           
  1120                           ;buggy_lights.c: 92:             LATAbits.LATA4 = !LATAbits.LATA4;
  1121   00192E  A879               	btfss	121,4,c	;volatile
  1122   001930  EF9C  F00C         	goto	u1911
  1123   001934  EFA0  F00C         	goto	u1910
  1124   001938                     u1911:
  1125   001938  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1126   00193A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1127   00193C  EFA1  F00C         	goto	u1928
  1128   001940                     u1910:
  1129   001940  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1130   001942                     u1928:
  1131   001942  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  1132   001944  5079               	movf	121,w,c	;volatile
  1133   001946  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1134   001948  0BEF               	andlw	-17
  1135   00194A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1136   00194C  6E79               	movwf	121,c	;volatile
  1137                           
  1138                           ;buggy_lights.c: 93:             LATFbits.LATF7 = !LATFbits.LATF7;
  1139   00194E  AE7E               	btfss	126,7,c	;volatile
  1140   001950  EFAC  F00C         	goto	u1931
  1141   001954  EFB0  F00C         	goto	u1930
  1142   001958                     u1931:
  1143   001958  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1144   00195A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1145   00195C  EFB1  F00C         	goto	u1948
  1146   001960                     u1930:
  1147   001960  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1148   001962                     u1948:
  1149   001962  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1150   001964  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1151   001966  507E               	movf	126,w,c	;volatile
  1152   001968  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1153   00196A  0B7F               	andlw	-129
  1154   00196C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1155   00196E  6E7E               	movwf	126,c	;volatile
  1156                           
  1157                           ;buggy_lights.c: 97:             LATGbits.LATG0 = !LATGbits.LATG0;
  1158   001970  A07F               	btfss	127,0,c	;volatile
  1159   001972  EFBD  F00C         	goto	u1951
  1160   001976  EFC1  F00C         	goto	u1950
  1161   00197A                     u1951:
  1162   00197A  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1163   00197C  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1164   00197E  EFC2  F00C         	goto	u1968
  1165   001982                     u1950:
  1166   001982  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1167   001984                     u1968:
  1168   001984  507F               	movf	127,w,c	;volatile
  1169   001986  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1170   001988  0BFE               	andlw	-2
  1171   00198A  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1172   00198C  6E7F               	movwf	127,c	;volatile
  1173                           
  1174                           ;buggy_lights.c: 98:             LATEbits.LATE7 = !LATEbits.LATE7;
  1175   00198E  AE7D               	btfss	125,7,c	;volatile
  1176   001990  EFCC  F00C         	goto	u1971
  1177   001994  EFD0  F00C         	goto	u1970
  1178   001998                     u1971:
  1179   001998  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1180   00199A  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1181   00199C  EFD1  F00C         	goto	u1988
  1182   0019A0                     u1970:
  1183   0019A0  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1184   0019A2                     u1988:
  1185   0019A2  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1186   0019A4  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1187   0019A6  507D               	movf	125,w,c	;volatile
  1188   0019A8  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1189   0019AA  0B7F               	andlw	-129
  1190   0019AC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1191   0019AE  6E7D               	movwf	125,c	;volatile
  1192                           
  1193                           ;buggy_lights.c: 99:             LATAbits.LATA3 = !LATAbits.LATA3;
  1194   0019B0  A679               	btfss	121,3,c	;volatile
  1195   0019B2  EFDD  F00C         	goto	u1991
  1196   0019B6  EFE1  F00C         	goto	u1990
  1197   0019BA                     u1991:
  1198   0019BA  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1199   0019BC  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1200   0019BE  EFE2  F00C         	goto	u2008
  1201   0019C2                     u1990:
  1202   0019C2  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1203   0019C4                     u2008:
  1204   0019C4  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1205   0019C6  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1206   0019C8  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1207   0019CA  5079               	movf	121,w,c	;volatile
  1208   0019CC  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1209   0019CE  0BF7               	andlw	-9
  1210   0019D0  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1211   0019D2  6E79               	movwf	121,c	;volatile
  1212   0019D4  0012               	return		;funcret
  1213   0019D6                     __end_of_toggle_tricolour_LED:
  1214                           	callstack 0
  1215                           
  1216 ;; *************** function _sendRGBCvalSerial4 *****************
  1217 ;; Defined at:
  1218 ;;		line 62 in file "serial.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  col_val         1   54[COMRAM] PTR struct RGBC_val
  1221 ;;		 -> main@measured_colour(8), 
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;  tempStr        26   55[COMRAM] unsigned char [26]
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      void 
  1226 ;; Registers used:
  1227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1233 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1234 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1236 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1237 ;;Total ram usage:       27 bytes
  1238 ;; Hardware stack levels used: 1
  1239 ;; Hardware stack levels required when called: 6
  1240 ;; This function calls:
  1241 ;;		_sendStringSerial4
  1242 ;;		_sprintf
  1243 ;; This function is called by:
  1244 ;;		_main
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text2
  1249   001F46                     __ptext2:
  1250                           	callstack 0
  1251   001F46                     _sendRGBCvalSerial4:
  1252                           	callstack 24
  1253   001F46                     
  1254                           ;serial.c: 63:     char tempStr[26];;serial.c: 65:     sprintf(tempStr, "%u %u %u %u \r"
      +                          , col_val->R, col_val->G, col_val->B, col_val->C);
  1255   001F46  0E38               	movlw	low sendRGBCvalSerial4@tempStr
  1256   001F48  6E1D               	movwf	sprintf@s^0,c
  1257   001F4A  6A1E               	clrf	(sprintf@s+1)^0,c
  1258   001F4C  0E01               	movlw	low STR_5
  1259   001F4E  6E1F               	movwf	sprintf@fmt^0,c
  1260   001F50  5037               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1261   001F52  6ED9               	movwf	fsr2l,c
  1262   001F54  6ADA               	clrf	fsr2h,c
  1263   001F56  CFDE F020          	movff	postinc2,?_sprintf+3
  1264   001F5A  CFDD F021          	movff	postdec2,?_sprintf+4
  1265   001F5E  5037               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1266   001F60  6ED9               	movwf	fsr2l,c
  1267   001F62  6ADA               	clrf	fsr2h,c
  1268   001F64  0E02               	movlw	2
  1269   001F66  26D9               	addwf	fsr2l,f,c
  1270   001F68  CFDE F022          	movff	postinc2,?_sprintf+5
  1271   001F6C  CFDD F023          	movff	postdec2,?_sprintf+6
  1272   001F70  5037               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1273   001F72  6ED9               	movwf	fsr2l,c
  1274   001F74  6ADA               	clrf	fsr2h,c
  1275   001F76  0E04               	movlw	4
  1276   001F78  26D9               	addwf	fsr2l,f,c
  1277   001F7A  CFDE F024          	movff	postinc2,?_sprintf+7
  1278   001F7E  CFDD F025          	movff	postdec2,?_sprintf+8
  1279   001F82  5037               	movf	sendRGBCvalSerial4@col_val^0,w,c
  1280   001F84  6ED9               	movwf	fsr2l,c
  1281   001F86  6ADA               	clrf	fsr2h,c
  1282   001F88  0E06               	movlw	6
  1283   001F8A  26D9               	addwf	fsr2l,f,c
  1284   001F8C  CFDE F026          	movff	postinc2,?_sprintf+9
  1285   001F90  CFDD F027          	movff	postdec2,?_sprintf+10
  1286   001F94  EC42  F011         	call	_sprintf	;wreg free
  1287   001F98                     
  1288                           ;serial.c: 66:     sendStringSerial4(tempStr);
  1289   001F98  0E38               	movlw	low sendRGBCvalSerial4@tempStr
  1290   001F9A  6E02               	movwf	sendStringSerial4@string^0,c
  1291   001F9C  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1292   001F9E  EC72  F00F         	call	_sendStringSerial4	;wreg free
  1293   001FA2  0012               	return		;funcret
  1294   001FA4                     __end_of_sendRGBCvalSerial4:
  1295                           	callstack 0
  1296                           
  1297 ;; *************** function _sendHSVvalSerial4 *****************
  1298 ;; Defined at:
  1299 ;;		line 70 in file "serial.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;  col_val         1   54[COMRAM] PTR struct HSV_val
  1302 ;;		 -> main@HSV_colour(6), 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  tempStr        21   55[COMRAM] unsigned char [21]
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      void 
  1307 ;; Registers used:
  1308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1314 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1315 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1317 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1318 ;;Total ram usage:       22 bytes
  1319 ;; Hardware stack levels used: 1
  1320 ;; Hardware stack levels required when called: 6
  1321 ;; This function calls:
  1322 ;;		_sendStringSerial4
  1323 ;;		_sprintf
  1324 ;; This function is called by:
  1325 ;;		_main
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           	psect	text3
  1330   002238                     __ptext3:
  1331                           	callstack 0
  1332   002238                     _sendHSVvalSerial4:
  1333                           	callstack 24
  1334   002238                     
  1335                           ;serial.c: 71:     char tempStr[21];;serial.c: 73:     sprintf(tempStr, "%u %u %u \r", c
      +                          ol_val->H, col_val->S, col_val->V);
  1336   002238  0E38               	movlw	low sendHSVvalSerial4@tempStr
  1337   00223A  6E1D               	movwf	sprintf@s^0,c
  1338   00223C  6A1E               	clrf	(sprintf@s+1)^0,c
  1339   00223E  0E04               	movlw	low (STR_5+3)
  1340   002240  6E1F               	movwf	sprintf@fmt^0,c
  1341   002242  5037               	movf	sendHSVvalSerial4@col_val^0,w,c
  1342   002244  6ED9               	movwf	fsr2l,c
  1343   002246  6ADA               	clrf	fsr2h,c
  1344   002248  CFDE F020          	movff	postinc2,?_sprintf+3
  1345   00224C  CFDD F021          	movff	postdec2,?_sprintf+4
  1346   002250  5037               	movf	sendHSVvalSerial4@col_val^0,w,c
  1347   002252  6ED9               	movwf	fsr2l,c
  1348   002254  6ADA               	clrf	fsr2h,c
  1349   002256  0E02               	movlw	2
  1350   002258  26D9               	addwf	fsr2l,f,c
  1351   00225A  CFDE F022          	movff	postinc2,?_sprintf+5
  1352   00225E  CFDD F023          	movff	postdec2,?_sprintf+6
  1353   002262  5037               	movf	sendHSVvalSerial4@col_val^0,w,c
  1354   002264  6ED9               	movwf	fsr2l,c
  1355   002266  6ADA               	clrf	fsr2h,c
  1356   002268  0E04               	movlw	4
  1357   00226A  26D9               	addwf	fsr2l,f,c
  1358   00226C  CFDE F024          	movff	postinc2,?_sprintf+7
  1359   002270  CFDD F025          	movff	postdec2,?_sprintf+8
  1360   002274  EC42  F011         	call	_sprintf	;wreg free
  1361   002278                     
  1362                           ;serial.c: 74:     sendStringSerial4(tempStr);
  1363   002278  0E38               	movlw	low sendHSVvalSerial4@tempStr
  1364   00227A  6E02               	movwf	sendStringSerial4@string^0,c
  1365   00227C  6A03               	clrf	(sendStringSerial4@string+1)^0,c
  1366   00227E  EC72  F00F         	call	_sendStringSerial4	;wreg free
  1367   002282  0012               	return		;funcret
  1368   002284                     __end_of_sendHSVvalSerial4:
  1369                           	callstack 0
  1370                           
  1371 ;; *************** function _sprintf *****************
  1372 ;; Defined at:
  1373 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;  s               2   28[COMRAM] PTR unsigned char 
  1376 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), sendArrayCharSerial4@tempStr(161), sendIntSerial4
      +@string(17), 
  1377 ;;  fmt             1   30[COMRAM] PTR const unsigned char 
  1378 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  f              12   42[COMRAM] struct _IO_FILE
  1381 ;;  ret             2   39[COMRAM] int 
  1382 ;;  ap              1   41[COMRAM] PTR void [1]
  1383 ;;		 -> ?_sprintf(2), 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  2   28[COMRAM] int 
  1386 ;; Registers used:
  1387 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1393 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1394 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1396 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1397 ;;Total ram usage:       26 bytes
  1398 ;; Hardware stack levels used: 1
  1399 ;; Hardware stack levels required when called: 5
  1400 ;; This function calls:
  1401 ;;		_vfprintf
  1402 ;; This function is called by:
  1403 ;;		_sendRGBCvalSerial4
  1404 ;;		_sendHSVvalSerial4
  1405 ;;		_sendIntSerial4
  1406 ;;		_sendArrayCharSerial4
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text4
  1411   002284                     __ptext4:
  1412                           	callstack 0
  1413   002284                     _sprintf:
  1414                           	callstack 24
  1415   002284  0E20               	movlw	low (?_sprintf+3)
  1416   002286  6E2A               	movwf	sprintf@ap^0,c
  1417   002288  C01D  F02B         	movff	sprintf@s,sprintf@f
  1418   00228C  C01E  F02C         	movff	sprintf@s+1,sprintf@f+1
  1419   002290  0E00               	movlw	0
  1420   002292  6E2F               	movwf	(sprintf@f+4)^0,c
  1421   002294  0E00               	movlw	0
  1422   002296  6E2E               	movwf	(sprintf@f+3)^0,c
  1423   002298  0E00               	movlw	0
  1424   00229A  6E36               	movwf	(sprintf@f+11)^0,c
  1425   00229C  0E00               	movlw	0
  1426   00229E  6E35               	movwf	(sprintf@f+10)^0,c
  1427   0022A0  0E2B               	movlw	low sprintf@f
  1428   0022A2  6E19               	movwf	vfprintf@fp^0,c
  1429   0022A4  C01F  F01A         	movff	sprintf@fmt,vfprintf@fmt
  1430   0022A8  0E2A               	movlw	low sprintf@ap
  1431   0022AA  6E1B               	movwf	vfprintf@ap^0,c
  1432   0022AC  ECD2  F00F         	call	_vfprintf	;wreg free
  1433   0022B0  C019  F028         	movff	?_vfprintf,sprintf@ret
  1434   0022B4  C01A  F029         	movff	?_vfprintf+1,sprintf@ret+1
  1435   0022B8  502E               	movf	(sprintf@f+3)^0,w,c
  1436   0022BA  241D               	addwf	sprintf@s^0,w,c
  1437   0022BC  6ED9               	movwf	fsr2l,c
  1438   0022BE  502F               	movf	(sprintf@f+4)^0,w,c
  1439   0022C0  201E               	addwfc	(sprintf@s+1)^0,w,c
  1440   0022C2  6EDA               	movwf	fsr2h,c
  1441   0022C4  6ADF               	clrf	indf2,c
  1442   0022C6  C028  F01D         	movff	sprintf@ret,?_sprintf
  1443   0022CA  C029  F01E         	movff	sprintf@ret+1,?_sprintf+1
  1444   0022CE  0012               	return		;funcret
  1445   0022D0                     __end_of_sprintf:
  1446                           	callstack 0
  1447                           
  1448 ;; *************** function _vfprintf *****************
  1449 ;; Defined at:
  1450 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  fp              1   24[COMRAM] PTR struct _IO_FILE
  1453 ;;		 -> sprintf@f(12), 
  1454 ;;  fmt             1   25[COMRAM] PTR const unsigned char 
  1455 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1456 ;;  ap              1   26[COMRAM] PTR PTR void 
  1457 ;;		 -> sprintf@ap(1), 
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  cfmt            1   27[COMRAM] PTR unsigned char 
  1460 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  2   24[COMRAM] int 
  1463 ;; Registers used:
  1464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1470 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1471 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1473 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1474 ;;Total ram usage:        4 bytes
  1475 ;; Hardware stack levels used: 1
  1476 ;; Hardware stack levels required when called: 4
  1477 ;; This function calls:
  1478 ;;		_vfpfcnvrt
  1479 ;; This function is called by:
  1480 ;;		_sprintf
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           	psect	text5
  1485   001FA4                     __ptext5:
  1486                           	callstack 0
  1487   001FA4                     _vfprintf:
  1488                           	callstack 24
  1489   001FA4                     
  1490                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1491   001FA4  C01A  F01C         	movff	vfprintf@fmt,vfprintf@cfmt
  1492   001FA8                     
  1493                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  1494   001FA8  0E00               	movlw	0
  1495   001FAA  0100               	movlb	0	; () banked
  1496   001FAC  6F81               	movwf	(_nout+1)& (0+255),b
  1497   001FAE  0E00               	movlw	0
  1498   001FB0  6F80               	movwf	_nout& (0+255),b
  1499                           
  1500                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1501   001FB2  EFE8  F00F         	goto	l2961
  1502   001FB6                     l2959:
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  1506   001FB6  C019  F00B         	movff	vfprintf@fp,vfpfcnvrt@fp
  1507   001FBA  0E1C               	movlw	low vfprintf@cfmt
  1508   001FBC  6E0C               	movwf	vfpfcnvrt@fmt^0,c
  1509   001FBE  C01B  F00D         	movff	vfprintf@ap,vfpfcnvrt@ap
  1510   001FC2  EC73  F00A         	call	_vfpfcnvrt	;wreg free
  1511   001FC6  500B               	movf	?_vfpfcnvrt^0,w,c
  1512   001FC8  0100               	movlb	0	; () banked
  1513   001FCA  2780               	addwf	_nout& (0+255),f,b
  1514   001FCC  500C               	movf	(?_vfpfcnvrt+1)^0,w,c
  1515   001FCE  2381               	addwfc	(_nout+1)& (0+255),f,b
  1516   001FD0                     l2961:
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1520   001FD0  C01C  FFF6         	movff	vfprintf@cfmt,tblptrl
  1521   001FD4                     	if	1	;There is more than 1 active tblptr byte
  1522   001FD4  0E0E               	movlw	high __smallconst
  1523   001FD6  6EF7               	movwf	tblptrh,c
  1524   001FD8                     	endif
  1525   001FD8                     	if	0	;tblptru may be non-zero
  1526   001FD8                     	endif
  1527   001FD8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1528   001FD8  0E00               	movlw	low (__smallconst shr (0+16))
  1529   001FDA  6EF8               	movwf	tblptru,c
  1530   001FDC                     	endif
  1531   001FDC  0008               	tblrd		*
  1532   001FDE  50F5               	movf	tablat,w,c
  1533   001FE0  0900               	iorlw	0
  1534   001FE2  A4D8               	btfss	status,2,c
  1535   001FE4  EFF6  F00F         	goto	u1801
  1536   001FE8  EFF8  F00F         	goto	u1800
  1537   001FEC                     u1801:
  1538   001FEC  EFDB  F00F         	goto	l2959
  1539   001FF0                     u1800:
  1540   001FF0                     
  1541                           ; BSR set to: 0
  1542                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  1543   001FF0  C080  F019         	movff	_nout,?_vfprintf
  1544   001FF4  C081  F01A         	movff	_nout+1,?_vfprintf+1
  1545   001FF8                     
  1546                           ; BSR set to: 0
  1547   001FF8  0012               	return		;funcret
  1548   001FFA                     __end_of_vfprintf:
  1549                           	callstack 0
  1550                           
  1551 ;; *************** function _vfpfcnvrt *****************
  1552 ;; Defined at:
  1553 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  1556 ;;		 -> sprintf@f(12), 
  1557 ;;  fmt             1   11[COMRAM] PTR PTR unsigned char 
  1558 ;;		 -> vfprintf@cfmt(1), 
  1559 ;;  ap              1   12[COMRAM] PTR PTR void 
  1560 ;;		 -> sprintf@ap(1), 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  convarg         4   19[COMRAM] struct .
  1563 ;;  cnt             2   16[COMRAM] int 
  1564 ;;  c               1   23[COMRAM] unsigned char 
  1565 ;;  cp              1   18[COMRAM] PTR unsigned char 
  1566 ;;		 -> STR_6(11), STR_5(14), STR_3(4), STR_1(5), 
  1567 ;;  done            1   15[COMRAM] _Bool 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  2   10[COMRAM] int 
  1570 ;; Registers used:
  1571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1577 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1578 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1579 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1580 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1581 ;;Total ram usage:       14 bytes
  1582 ;; Hardware stack levels used: 1
  1583 ;; Hardware stack levels required when called: 3
  1584 ;; This function calls:
  1585 ;;		___awdiv
  1586 ;;		___awmod
  1587 ;;		___lwdiv
  1588 ;;		___lwmod
  1589 ;;		_abs
  1590 ;;		_fputc
  1591 ;; This function is called by:
  1592 ;;		_vfprintf
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text6
  1597   0014E6                     __ptext6:
  1598                           	callstack 0
  1599   0014E6                     _vfpfcnvrt:
  1600                           	callstack 24
  1601   0014E6                     
  1602                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1191:  int cnt = 0;
  1603   0014E6  0E00               	movlw	0
  1604   0014E8  6E12               	movwf	(vfpfcnvrt@cnt+1)^0,c
  1605   0014EA  0E00               	movlw	0
  1606   0014EC  6E11               	movwf	vfpfcnvrt@cnt^0,c
  1607   0014EE                     
  1608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1201:     if ((*f
      +                          mt)[0] == '%') {
  1609   0014EE  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1610   0014F0  6ED9               	movwf	fsr2l,c
  1611   0014F2  6ADA               	clrf	fsr2h,c
  1612   0014F4  CFDF FFF6          	movff	indf2,tblptrl
  1613   0014F8                     	if	1	;There is more than 1 active tblptr byte
  1614   0014F8  0E0E               	movlw	high __smallconst
  1615   0014FA  6EF7               	movwf	tblptrh,c
  1616   0014FC                     	endif
  1617   0014FC                     	if	0	;tblptru may be non-zero
  1618   0014FC                     	endif
  1619   0014FC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1620   0014FC  0E00               	movlw	low (__smallconst shr (0+16))
  1621   0014FE  6EF8               	movwf	tblptru,c
  1622   001500                     	endif
  1623   001500  0008               	tblrd		*
  1624   001502  50F5               	movf	tablat,w,c
  1625   001504  0A25               	xorlw	37
  1626   001506  A4D8               	btfss	status,2,c
  1627   001508  EF88  F00A         	goto	u1611
  1628   00150C  EF8A  F00A         	goto	u1610
  1629   001510                     u1611:
  1630   001510  EFDF  F00B         	goto	l2849
  1631   001514                     u1610:
  1632   001514                     
  1633                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1634   001514  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1635   001516  6ED9               	movwf	fsr2l,c
  1636   001518  6ADA               	clrf	fsr2h,c
  1637   00151A  2ADF               	incf	indf2,f,c
  1638   00151C                     
  1639                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1640   00151C  0E00               	movlw	0
  1641   00151E  0100               	movlb	0	; () banked
  1642   001520  6F83               	movwf	(_width+1)& (0+255),b
  1643   001522  0E00               	movlw	0
  1644   001524  6F82               	movwf	_width& (0+255),b
  1645   001526  C082  F05A         	movff	_width,_flags
  1646   00152A                     
  1647                           ; BSR set to: 0
  1648                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1649   00152A  6984               	setf	_prec& (0+255),b
  1650   00152C  6985               	setf	(_prec+1)& (0+255),b
  1651   00152E                     
  1652                           ; BSR set to: 0
  1653                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1654   00152E  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1655   001530  6ED9               	movwf	fsr2l,c
  1656   001532  6ADA               	clrf	fsr2h,c
  1657   001534  50DF               	movf	indf2,w,c
  1658   001536  6E13               	movwf	vfpfcnvrt@cp^0,c
  1659   001538                     
  1660                           ; BSR set to: 0
  1661                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1662   001538  C013  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1663   00153C                     	if	1	;There is more than 1 active tblptr byte
  1664   00153C  0E0E               	movlw	high __smallconst
  1665   00153E  6EF7               	movwf	tblptrh,c
  1666   001540                     	endif
  1667   001540                     	if	0	;tblptru may be non-zero
  1668   001540                     	endif
  1669   001540                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1670   001540  0E00               	movlw	low (__smallconst shr (0+16))
  1671   001542  6EF8               	movwf	tblptru,c
  1672   001544                     	endif
  1673   001544  0008               	tblrd		*
  1674   001546  50F5               	movf	tablat,w,c
  1675   001548  0A64               	xorlw	100
  1676   00154A  B4D8               	btfsc	status,2,c
  1677   00154C  EFAA  F00A         	goto	u1621
  1678   001550  EFAC  F00A         	goto	u1620
  1679   001554                     u1621:
  1680   001554  EFBC  F00A         	goto	l2785
  1681   001558                     u1620:
  1682   001558                     
  1683                           ; BSR set to: 0
  1684   001558  C013  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1685   00155C                     	if	1	;There is more than 1 active tblptr byte
  1686   00155C  0E0E               	movlw	high __smallconst
  1687   00155E  6EF7               	movwf	tblptrh,c
  1688   001560                     	endif
  1689   001560                     	if	0	;tblptru may be non-zero
  1690   001560                     	endif
  1691   001560                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1692   001560  0E00               	movlw	low (__smallconst shr (0+16))
  1693   001562  6EF8               	movwf	tblptru,c
  1694   001564                     	endif
  1695   001564  0008               	tblrd		*
  1696   001566  50F5               	movf	tablat,w,c
  1697   001568  0A69               	xorlw	105
  1698   00156A  A4D8               	btfss	status,2,c
  1699   00156C  EFBA  F00A         	goto	u1631
  1700   001570  EFBC  F00A         	goto	u1630
  1701   001574                     u1631:
  1702   001574  EF4A  F00B         	goto	l2815
  1703   001578                     u1630:
  1704   001578                     l2785:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1708   001578  500D               	movf	vfpfcnvrt@ap^0,w,c
  1709   00157A  6ED9               	movwf	fsr2l,c
  1710   00157C  6ADA               	clrf	fsr2h,c
  1711   00157E  0E02               	movlw	2
  1712   001580  26DF               	addwf	indf2,f,c
  1713   001582  5CDF               	subwf	indf2,w,c
  1714   001584  6ED9               	movwf	fsr2l,c
  1715   001586  6ADA               	clrf	fsr2h,c
  1716   001588  CFDE F014          	movff	postinc2,vfpfcnvrt@convarg
  1717   00158C  CFDE F015          	movff	postinc2,vfpfcnvrt@convarg+1
  1718   001590                     
  1719                           ; BSR set to: 0
  1720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1721   001590  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1722   001592  6ED9               	movwf	fsr2l,c
  1723   001594  6ADA               	clrf	fsr2h,c
  1724   001596  2813               	incf	vfpfcnvrt@cp^0,w,c
  1725   001598  6EDF               	movwf	indf2,c
  1726   00159A                     
  1727                           ; BSR set to: 0
  1728                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1729   00159A  0E20               	movlw	32
  1730   00159C  6E18               	movwf	vfpfcnvrt@c^0,c
  1731                           
  1732                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1733   00159E  BE15               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1734   0015A0  EFD4  F00A         	goto	u1641
  1735   0015A4  EFD7  F00A         	goto	u1640
  1736   0015A8                     u1641:
  1737   0015A8  0E01               	movlw	1
  1738   0015AA  EFD8  F00A         	goto	u1650
  1739   0015AE                     u1640:
  1740   0015AE  0E00               	movlw	0
  1741   0015B0                     u1650:
  1742   0015B0  6E10               	movwf	vfpfcnvrt@done^0,c
  1743   0015B2                     l2791:
  1744                           
  1745                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1746   0015B2  0618               	decf	vfpfcnvrt@c^0,f,c
  1747   0015B4  5018               	movf	vfpfcnvrt@c^0,w,c
  1748   0015B6  0F60               	addlw	low _dbuf
  1749   0015B8  6ED9               	movwf	fsr2l,c
  1750   0015BA  6ADA               	clrf	fsr2h,c
  1751   0015BC  C014  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1752   0015C0  C015  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1753   0015C4  0E00               	movlw	0
  1754   0015C6  6E04               	movwf	(___awmod@divisor+1)^0,c
  1755   0015C8  0E0A               	movlw	10
  1756   0015CA  6E03               	movwf	___awmod@divisor^0,c
  1757   0015CC  ECAA  F00D         	call	___awmod	;wreg free
  1758   0015D0  C001  F007         	movff	?___awmod,abs@a
  1759   0015D4  C002  F008         	movff	?___awmod+1,abs@a+1
  1760   0015D8  EC89  F011         	call	_abs	;wreg free
  1761   0015DC  5007               	movf	?_abs^0,w,c
  1762   0015DE  0F30               	addlw	48
  1763   0015E0  6EDF               	movwf	indf2,c
  1764   0015E2                     
  1765                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1766   0015E2  C014  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1767   0015E6  C015  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1768   0015EA  0E00               	movlw	0
  1769   0015EC  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1770   0015EE  0E0A               	movlw	10
  1771   0015F0  6E03               	movwf	___awdiv@divisor^0,c
  1772   0015F2  ECEB  F00C         	call	___awdiv	;wreg free
  1773   0015F6  C001  F014         	movff	?___awdiv,vfpfcnvrt@convarg
  1774   0015FA  C002  F015         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1775   0015FE                     
  1776                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1414:     cnt++;
  1777   0015FE  4A11               	infsnz	vfpfcnvrt@cnt^0,f,c
  1778   001600  2A12               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1779   001602                     
  1780                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1781   001602  5014               	movf	vfpfcnvrt@convarg^0,w,c
  1782   001604  1015               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1783   001606  B4D8               	btfsc	status,2,c
  1784   001608  EF08  F00B         	goto	u1661
  1785   00160C  EF0A  F00B         	goto	u1660
  1786   001610                     u1661:
  1787   001610  EF12  F00B         	goto	l2801
  1788   001614                     u1660:
  1789   001614  5018               	movf	vfpfcnvrt@c^0,w,c
  1790   001616  A4D8               	btfss	status,2,c
  1791   001618  EF10  F00B         	goto	u1671
  1792   00161C  EF12  F00B         	goto	u1670
  1793   001620                     u1671:
  1794   001620  EFD9  F00A         	goto	l2791
  1795   001624                     u1670:
  1796   001624                     l2801:
  1797                           
  1798                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1799   001624  5018               	movf	vfpfcnvrt@c^0,w,c
  1800   001626  B4D8               	btfsc	status,2,c
  1801   001628  EF18  F00B         	goto	u1681
  1802   00162C  EF1A  F00B         	goto	u1680
  1803   001630                     u1681:
  1804   001630  EF3B  F00B         	goto	l2813
  1805   001634                     u1680:
  1806   001634  5010               	movf	vfpfcnvrt@done^0,w,c
  1807   001636  B4D8               	btfsc	status,2,c
  1808   001638  EF20  F00B         	goto	u1691
  1809   00163C  EF22  F00B         	goto	u1690
  1810   001640                     u1691:
  1811   001640  EF3B  F00B         	goto	l2813
  1812   001644                     u1690:
  1813   001644                     
  1814                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1815   001644  0618               	decf	vfpfcnvrt@c^0,f,c
  1816   001646  5018               	movf	vfpfcnvrt@c^0,w,c
  1817   001648  0F60               	addlw	low _dbuf
  1818   00164A  6ED9               	movwf	fsr2l,c
  1819   00164C  6ADA               	clrf	fsr2h,c
  1820   00164E  0E2D               	movlw	45
  1821   001650  6EDF               	movwf	indf2,c
  1822   001652                     
  1823                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1420:     cnt++;
  1824   001652  4A11               	infsnz	vfpfcnvrt@cnt^0,f,c
  1825   001654  2A12               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1826   001656  EF3B  F00B         	goto	l2813
  1827   00165A                     l2809:
  1828                           
  1829                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1830   00165A  5018               	movf	vfpfcnvrt@c^0,w,c
  1831   00165C  0F60               	addlw	low _dbuf
  1832   00165E  6ED9               	movwf	fsr2l,c
  1833   001660  6ADA               	clrf	fsr2h,c
  1834   001662  50DF               	movf	indf2,w,c
  1835   001664  6E0E               	movwf	??_vfpfcnvrt^0,c
  1836   001666  500E               	movf	??_vfpfcnvrt^0,w,c
  1837   001668  6E01               	movwf	fputc@c^0,c
  1838   00166A  6A02               	clrf	(fputc@c+1)^0,c
  1839   00166C  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1840   001670  EC4D  F00D         	call	_fputc	;wreg free
  1841   001674  2A18               	incf	vfpfcnvrt@c^0,f,c
  1842   001676                     l2813:
  1843                           
  1844                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1845   001676  0E20               	movlw	32
  1846   001678  1818               	xorwf	vfpfcnvrt@c^0,w,c
  1847   00167A  A4D8               	btfss	status,2,c
  1848   00167C  EF42  F00B         	goto	u1701
  1849   001680  EF44  F00B         	goto	u1700
  1850   001684                     u1701:
  1851   001684  EF2D  F00B         	goto	l2809
  1852   001688                     u1700:
  1853   001688                     l1417:
  1854                           
  1855                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1427:    return c
      +                          nt;
  1856   001688  C011  F00B         	movff	vfpfcnvrt@cnt,?_vfpfcnvrt
  1857   00168C  C012  F00C         	movff	vfpfcnvrt@cnt+1,?_vfpfcnvrt+1
  1858   001690  EFF8  F00B         	goto	l1418
  1859   001694                     l2815:
  1860                           
  1861                           ; BSR set to: 0
  1862   001694  C013  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1863   001698                     	if	1	;There is more than 1 active tblptr byte
  1864   001698  0E0E               	movlw	high __smallconst
  1865   00169A  6EF7               	movwf	tblptrh,c
  1866   00169C                     	endif
  1867   00169C                     	if	0	;tblptru may be non-zero
  1868   00169C                     	endif
  1869   00169C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1870   00169C  0E00               	movlw	low (__smallconst shr (0+16))
  1871   00169E  6EF8               	movwf	tblptru,c
  1872   0016A0                     	endif
  1873   0016A0  0008               	tblrd		*
  1874   0016A2  50F5               	movf	tablat,w,c
  1875   0016A4  0A75               	xorlw	117
  1876   0016A6  A4D8               	btfss	status,2,c
  1877   0016A8  EF58  F00B         	goto	u1711
  1878   0016AC  EF5A  F00B         	goto	u1710
  1879   0016B0                     u1711:
  1880   0016B0  EFD5  F00B         	goto	l2843
  1881   0016B4                     u1710:
  1882   0016B4                     
  1883                           ; BSR set to: 0
  1884                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1885   0016B4  500D               	movf	vfpfcnvrt@ap^0,w,c
  1886   0016B6  6ED9               	movwf	fsr2l,c
  1887   0016B8  6ADA               	clrf	fsr2h,c
  1888   0016BA  0E02               	movlw	2
  1889   0016BC  26DF               	addwf	indf2,f,c
  1890   0016BE  5CDF               	subwf	indf2,w,c
  1891   0016C0  6ED9               	movwf	fsr2l,c
  1892   0016C2  6ADA               	clrf	fsr2h,c
  1893   0016C4  CFDE F014          	movff	postinc2,vfpfcnvrt@convarg
  1894   0016C8  CFDE F015          	movff	postinc2,vfpfcnvrt@convarg+1
  1895   0016CC                     
  1896                           ; BSR set to: 0
  1897                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1898   0016CC  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1899   0016CE  6ED9               	movwf	fsr2l,c
  1900   0016D0  6ADA               	clrf	fsr2h,c
  1901   0016D2  2813               	incf	vfpfcnvrt@cp^0,w,c
  1902   0016D4  6EDF               	movwf	indf2,c
  1903                           
  1904                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1905   0016D6  EFBD  F00B         	goto	l2841
  1906   0016DA                     l2821:
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  1910   0016DA  0E20               	movlw	32
  1911   0016DC  6E18               	movwf	vfpfcnvrt@c^0,c
  1912   0016DE                     l2823:
  1913                           
  1914                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  1915   0016DE  0618               	decf	vfpfcnvrt@c^0,f,c
  1916   0016E0  5018               	movf	vfpfcnvrt@c^0,w,c
  1917   0016E2  0F60               	addlw	low _dbuf
  1918   0016E4  6ED9               	movwf	fsr2l,c
  1919   0016E6  6ADA               	clrf	fsr2h,c
  1920   0016E8  C014  F001         	movff	vfpfcnvrt@convarg,___lwmod@dividend
  1921   0016EC  C015  F002         	movff	vfpfcnvrt@convarg+1,___lwmod@dividend+1
  1922   0016F0  0E00               	movlw	0
  1923   0016F2  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1924   0016F4  0E0A               	movlw	10
  1925   0016F6  6E03               	movwf	___lwmod@divisor^0,c
  1926   0016F8  EC40  F00F         	call	___lwmod	;wreg free
  1927   0016FC  5001               	movf	?___lwmod^0,w,c
  1928   0016FE  0F30               	addlw	48
  1929   001700  6EDF               	movwf	indf2,c
  1930   001702                     
  1931                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  1932   001702  C014  F001         	movff	vfpfcnvrt@convarg,___lwdiv@dividend
  1933   001706  C015  F002         	movff	vfpfcnvrt@convarg+1,___lwdiv@dividend+1
  1934   00170A  0E00               	movlw	0
  1935   00170C  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  1936   00170E  0E0A               	movlw	10
  1937   001710  6E03               	movwf	___lwdiv@divisor^0,c
  1938   001712  EC9C  F00E         	call	___lwdiv	;wreg free
  1939   001716  C001  F014         	movff	?___lwdiv,vfpfcnvrt@convarg
  1940   00171A  C002  F015         	movff	?___lwdiv+1,vfpfcnvrt@convarg+1
  1941   00171E                     
  1942                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1530:       cnt++
      +                          ;
  1943   00171E  4A11               	infsnz	vfpfcnvrt@cnt^0,f,c
  1944   001720  2A12               	incf	(vfpfcnvrt@cnt+1)^0,f,c
  1945   001722                     
  1946                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  1947   001722  5014               	movf	vfpfcnvrt@convarg^0,w,c
  1948   001724  1015               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1949   001726  B4D8               	btfsc	status,2,c
  1950   001728  EF98  F00B         	goto	u1721
  1951   00172C  EF9A  F00B         	goto	u1720
  1952   001730                     u1721:
  1953   001730  EFB2  F00B         	goto	l2837
  1954   001734                     u1720:
  1955   001734  5018               	movf	vfpfcnvrt@c^0,w,c
  1956   001736  A4D8               	btfss	status,2,c
  1957   001738  EFA0  F00B         	goto	u1731
  1958   00173C  EFA2  F00B         	goto	u1730
  1959   001740                     u1731:
  1960   001740  EF6F  F00B         	goto	l2823
  1961   001744                     u1730:
  1962   001744  EFB2  F00B         	goto	l2837
  1963   001748                     l2833:
  1964                           
  1965                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  1966   001748  5018               	movf	vfpfcnvrt@c^0,w,c
  1967   00174A  0F60               	addlw	low _dbuf
  1968   00174C  6ED9               	movwf	fsr2l,c
  1969   00174E  6ADA               	clrf	fsr2h,c
  1970   001750  50DF               	movf	indf2,w,c
  1971   001752  6E0E               	movwf	??_vfpfcnvrt^0,c
  1972   001754  500E               	movf	??_vfpfcnvrt^0,w,c
  1973   001756  6E01               	movwf	fputc@c^0,c
  1974   001758  6A02               	clrf	(fputc@c+1)^0,c
  1975   00175A  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1976   00175E  EC4D  F00D         	call	_fputc	;wreg free
  1977   001762  2A18               	incf	vfpfcnvrt@c^0,f,c
  1978   001764                     l2837:
  1979                           
  1980                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  1981   001764  0E20               	movlw	32
  1982   001766  1818               	xorwf	vfpfcnvrt@c^0,w,c
  1983   001768  A4D8               	btfss	status,2,c
  1984   00176A  EFB9  F00B         	goto	u1741
  1985   00176E  EFBB  F00B         	goto	u1740
  1986   001772                     u1741:
  1987   001772  EFA4  F00B         	goto	l2833
  1988   001776                     u1740:
  1989   001776  EF44  F00B         	goto	l1417
  1990   00177A                     l2841:
  1991                           
  1992                           ; BSR set to: 0
  1993   00177A  C013  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1994   00177E                     	if	1	;There is more than 1 active tblptr byte
  1995   00177E  0E0E               	movlw	high __smallconst
  1996   001780  6EF7               	movwf	tblptrh,c
  1997   001782                     	endif
  1998   001782                     	if	0	;tblptru may be non-zero
  1999   001782                     	endif
  2000   001782                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2001   001782  0E00               	movlw	low (__smallconst shr (0+16))
  2002   001784  6EF8               	movwf	tblptru,c
  2003   001786                     	endif
  2004   001786  0008               	tblrd		*
  2005   001788  50F5               	movf	tablat,w,c
  2006   00178A  6E0E               	movwf	??_vfpfcnvrt^0,c
  2007   00178C  6A0F               	clrf	(??_vfpfcnvrt+1)^0,c
  2008                           
  2009                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2010                           ; Switch size 1, requested type "simple"
  2011                           ; Number of cases is 1, Range of values is 0 to 0
  2012                           ; switch strategies available:
  2013                           ; Name         Instructions Cycles
  2014                           ; simple_byte            4     3 (average)
  2015                           ;	Chosen strategy is simple_byte
  2016   00178E  500F               	movf	(??_vfpfcnvrt+1)^0,w,c
  2017   001790  0A00               	xorlw	0	; case 0
  2018   001792  B4D8               	btfsc	status,2,c
  2019   001794  EFCE  F00B         	goto	l3907
  2020   001798  EFD5  F00B         	goto	l2843
  2021   00179C                     l3907:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ; Switch size 1, requested type "simple"
  2025                           ; Number of cases is 1, Range of values is 117 to 117
  2026                           ; switch strategies available:
  2027                           ; Name         Instructions Cycles
  2028                           ; simple_byte            4     3 (average)
  2029                           ;	Chosen strategy is simple_byte
  2030   00179C  500E               	movf	??_vfpfcnvrt^0,w,c
  2031   00179E  0A75               	xorlw	117	; case 117
  2032   0017A0  B4D8               	btfsc	status,2,c
  2033   0017A2  EF6D  F00B         	goto	l2821
  2034   0017A6  EFD5  F00B         	goto	l2843
  2035   0017AA                     l2843:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2039   0017AA  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2040   0017AC  6ED9               	movwf	fsr2l,c
  2041   0017AE  6ADA               	clrf	fsr2h,c
  2042   0017B0  2ADF               	incf	indf2,f,c
  2043   0017B2                     
  2044                           ; BSR set to: 0
  2045                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  2046   0017B2  0E00               	movlw	0
  2047   0017B4  6E0C               	movwf	(?_vfpfcnvrt+1)^0,c
  2048   0017B6  0E00               	movlw	0
  2049   0017B8  6E0B               	movwf	?_vfpfcnvrt^0,c
  2050   0017BA  EFF8  F00B         	goto	l1418
  2051   0017BE                     l2849:
  2052                           
  2053                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2054   0017BE  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2055   0017C0  6ED9               	movwf	fsr2l,c
  2056   0017C2  6ADA               	clrf	fsr2h,c
  2057   0017C4  CFDF FFF6          	movff	indf2,tblptrl
  2058   0017C8                     	if	1	;There is more than 1 active tblptr byte
  2059   0017C8  0E0E               	movlw	high __smallconst
  2060   0017CA  6EF7               	movwf	tblptrh,c
  2061   0017CC                     	endif
  2062   0017CC                     	if	0	;tblptru may be non-zero
  2063   0017CC                     	endif
  2064   0017CC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2065   0017CC  0E00               	movlw	low (__smallconst shr (0+16))
  2066   0017CE  6EF8               	movwf	tblptru,c
  2067   0017D0                     	endif
  2068   0017D0  0008               	tblrd		*
  2069   0017D2  50F5               	movf	tablat,w,c
  2070   0017D4  6E01               	movwf	fputc@c^0,c
  2071   0017D6  6A02               	clrf	(fputc@c+1)^0,c
  2072   0017D8  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2073   0017DC  EC4D  F00D         	call	_fputc	;wreg free
  2074   0017E0                     
  2075                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  2076   0017E0  500C               	movf	vfpfcnvrt@fmt^0,w,c
  2077   0017E2  6ED9               	movwf	fsr2l,c
  2078   0017E4  6ADA               	clrf	fsr2h,c
  2079   0017E6  2ADF               	incf	indf2,f,c
  2080   0017E8                     
  2081                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  2082   0017E8  0E00               	movlw	0
  2083   0017EA  6E0C               	movwf	(?_vfpfcnvrt+1)^0,c
  2084   0017EC  0E01               	movlw	1
  2085   0017EE  6E0B               	movwf	?_vfpfcnvrt^0,c
  2086   0017F0                     l1418:
  2087   0017F0  0012               	return		;funcret
  2088   0017F2                     __end_of_vfpfcnvrt:
  2089                           	callstack 0
  2090                           
  2091 ;; *************** function _fputc *****************
  2092 ;; Defined at:
  2093 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  c               2    0[COMRAM] int 
  2096 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2097 ;;		 -> sprintf@f(12), 
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  2    0[COMRAM] int 
  2102 ;; Registers used:
  2103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2109 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2111 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2112 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2113 ;;Total ram usage:        8 bytes
  2114 ;; Hardware stack levels used: 1
  2115 ;; Hardware stack levels required when called: 2
  2116 ;; This function calls:
  2117 ;;		_putch
  2118 ;; This function is called by:
  2119 ;;		_vfpfcnvrt
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text7
  2124   001A9A                     __ptext7:
  2125                           	callstack 0
  2126   001A9A                     _fputc:
  2127                           	callstack 24
  2128   001A9A  5003               	movf	fputc@fp^0,w,c
  2129   001A9C  B4D8               	btfsc	status,2,c
  2130   001A9E  EF53  F00D         	goto	u1381
  2131   001AA2  EF55  F00D         	goto	u1380
  2132   001AA6                     u1381:
  2133   001AA6  EF5D  F00D         	goto	l2665
  2134   001AAA                     u1380:
  2135   001AAA  5003               	movf	fputc@fp^0,w,c
  2136   001AAC  A4D8               	btfss	status,2,c
  2137   001AAE  EF5B  F00D         	goto	u1391
  2138   001AB2  EF5D  F00D         	goto	u1390
  2139   001AB6                     u1391:
  2140   001AB6  EF62  F00D         	goto	l2667
  2141   001ABA                     u1390:
  2142   001ABA                     l2665:
  2143   001ABA  5001               	movf	fputc@c^0,w,c
  2144   001ABC  EC98  F012         	call	_putch
  2145   001AC0  EFA9  F00D         	goto	l1456
  2146   001AC4                     l2667:
  2147   001AC4  5003               	movf	fputc@fp^0,w,c
  2148   001AC6  6ED9               	movwf	fsr2l,c
  2149   001AC8  6ADA               	clrf	fsr2h,c
  2150   001ACA  0E0A               	movlw	10
  2151   001ACC  26D9               	addwf	fsr2l,f,c
  2152   001ACE  50DE               	movf	postinc2,w,c
  2153   001AD0  10DE               	iorwf	postinc2,w,c
  2154   001AD2  B4D8               	btfsc	status,2,c
  2155   001AD4  EF6E  F00D         	goto	u1401
  2156   001AD8  EF70  F00D         	goto	u1400
  2157   001ADC                     u1401:
  2158   001ADC  EF89  F00D         	goto	l2671
  2159   001AE0                     u1400:
  2160   001AE0  5003               	movf	fputc@fp^0,w,c
  2161   001AE2  6ED9               	movwf	fsr2l,c
  2162   001AE4  6ADA               	clrf	fsr2h,c
  2163   001AE6  0E0A               	movlw	10
  2164   001AE8  26D9               	addwf	fsr2l,f,c
  2165   001AEA  5003               	movf	fputc@fp^0,w,c
  2166   001AEC  6EE1               	movwf	fsr1l,c
  2167   001AEE  6AE2               	clrf	fsr1h,c
  2168   001AF0  0E03               	movlw	3
  2169   001AF2  26E1               	addwf	fsr1l,f,c
  2170   001AF4  50DE               	movf	postinc2,w,c
  2171   001AF6  5CE6               	subwf	postinc1,w,c
  2172   001AF8  50E6               	movf	postinc1,w,c
  2173   001AFA  0A80               	xorlw	128
  2174   001AFC  6E08               	movwf	(??_fputc+4)^0,c
  2175   001AFE  50DE               	movf	postinc2,w,c
  2176   001B00  0A80               	xorlw	128
  2177   001B02  5808               	subwfb	(??_fputc+4)^0,w,c
  2178   001B04  B0D8               	btfsc	status,0,c
  2179   001B06  EF87  F00D         	goto	u1411
  2180   001B0A  EF89  F00D         	goto	u1410
  2181   001B0E                     u1411:
  2182   001B0E  EFA9  F00D         	goto	l1456
  2183   001B12                     u1410:
  2184   001B12                     l2671:
  2185   001B12  5003               	movf	fputc@fp^0,w,c
  2186   001B14  6ED9               	movwf	fsr2l,c
  2187   001B16  6ADA               	clrf	fsr2h,c
  2188   001B18  0E03               	movlw	3
  2189   001B1A  26D9               	addwf	fsr2l,f,c
  2190   001B1C  CFDE F004          	movff	postinc2,??_fputc
  2191   001B20  CFDD F005          	movff	postdec2,??_fputc+1
  2192   001B24  5003               	movf	fputc@fp^0,w,c
  2193   001B26  6ED9               	movwf	fsr2l,c
  2194   001B28  6ADA               	clrf	fsr2h,c
  2195   001B2A  CFDE F006          	movff	postinc2,??_fputc+2
  2196   001B2E  CFDD F007          	movff	postdec2,??_fputc+3
  2197   001B32  5004               	movf	??_fputc^0,w,c
  2198   001B34  2406               	addwf	(??_fputc+2)^0,w,c
  2199   001B36  6ED9               	movwf	fsr2l,c
  2200   001B38  5005               	movf	(??_fputc+1)^0,w,c
  2201   001B3A  2007               	addwfc	(??_fputc+3)^0,w,c
  2202   001B3C  6EDA               	movwf	fsr2h,c
  2203   001B3E  C001  FFDF         	movff	fputc@c,indf2
  2204   001B42  5003               	movf	fputc@fp^0,w,c
  2205   001B44  6ED9               	movwf	fsr2l,c
  2206   001B46  6ADA               	clrf	fsr2h,c
  2207   001B48  0E03               	movlw	3
  2208   001B4A  26D9               	addwf	fsr2l,f,c
  2209   001B4C  2ADE               	incf	postinc2,f,c
  2210   001B4E  0E00               	movlw	0
  2211   001B50  22DD               	addwfc	postdec2,f,c
  2212   001B52                     l1456:
  2213   001B52  0012               	return		;funcret
  2214   001B54                     __end_of_fputc:
  2215                           	callstack 0
  2216                           
  2217 ;; *************** function _putch *****************
  2218 ;; Defined at:
  2219 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  c               1    wreg     unsigned char 
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;  c               1    0[COMRAM] unsigned char 
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  1    wreg      void 
  2226 ;; Registers used:
  2227 ;;		wreg
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2237 ;;Total ram usage:        0 bytes
  2238 ;; Hardware stack levels used: 1
  2239 ;; Hardware stack levels required when called: 1
  2240 ;; This function calls:
  2241 ;;		Nothing
  2242 ;; This function is called by:
  2243 ;;		_fputc
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           	psect	text8
  2248   002530                     __ptext8:
  2249                           	callstack 0
  2250   002530                     _putch:
  2251                           	callstack 24
  2252   002530  0012               	return		;funcret
  2253   002532                     __end_of_putch:
  2254                           	callstack 0
  2255                           
  2256 ;; *************** function _abs *****************
  2257 ;; Defined at:
  2258 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  a               2    6[COMRAM] int 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;		None
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  2    6[COMRAM] int 
  2265 ;; Registers used:
  2266 ;;		wreg, status,2, status,0
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2272 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2274 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2275 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2276 ;;Total ram usage:        4 bytes
  2277 ;; Hardware stack levels used: 1
  2278 ;; Hardware stack levels required when called: 1
  2279 ;; This function calls:
  2280 ;;		Nothing
  2281 ;; This function is called by:
  2282 ;;		_vfpfcnvrt
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text9
  2287   002312                     __ptext9:
  2288                           	callstack 0
  2289   002312                     _abs:
  2290                           	callstack 25
  2291   002312  BE08               	btfsc	(abs@a+1)^0,7,c
  2292   002314  EF8E  F011         	goto	u1421
  2293   002318  EF90  F011         	goto	u1420
  2294   00231C                     u1421:
  2295   00231C  EF96  F011         	goto	l1441
  2296   002320                     u1420:
  2297   002320  C007  F007         	movff	abs@a,?_abs
  2298   002324  C008  F008         	movff	abs@a+1,?_abs+1
  2299   002328  EFA2  F011         	goto	l1444
  2300   00232C                     l1441:
  2301   00232C  C007  F009         	movff	abs@a,??_abs
  2302   002330  C008  F00A         	movff	abs@a+1,??_abs+1
  2303   002334  1E09               	comf	??_abs^0,f,c
  2304   002336  1E0A               	comf	(??_abs+1)^0,f,c
  2305   002338  4A09               	infsnz	??_abs^0,f,c
  2306   00233A  2A0A               	incf	(??_abs+1)^0,f,c
  2307   00233C  C009  F007         	movff	??_abs,?_abs
  2308   002340  C00A  F008         	movff	??_abs+1,?_abs+1
  2309   002344                     l1444:
  2310   002344  0012               	return		;funcret
  2311   002346                     __end_of_abs:
  2312                           	callstack 0
  2313                           
  2314 ;; *************** function ___lwmod *****************
  2315 ;; Defined at:
  2316 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  dividend        2    0[COMRAM] unsigned int 
  2319 ;;  divisor         2    2[COMRAM] unsigned int 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  counter         1    4[COMRAM] unsigned char 
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  2    0[COMRAM] unsigned int 
  2324 ;; Registers used:
  2325 ;;		wreg, status,2, status,0
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2331 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2332 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2334 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2335 ;;Total ram usage:        5 bytes
  2336 ;; Hardware stack levels used: 1
  2337 ;; Hardware stack levels required when called: 1
  2338 ;; This function calls:
  2339 ;;		Nothing
  2340 ;; This function is called by:
  2341 ;;		_vfpfcnvrt
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text10
  2346   001E80                     __ptext10:
  2347                           	callstack 0
  2348   001E80                     ___lwmod:
  2349                           	callstack 25
  2350   001E80  5003               	movf	___lwmod@divisor^0,w,c
  2351   001E82  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  2352   001E84  B4D8               	btfsc	status,2,c
  2353   001E86  EF47  F00F         	goto	u1351
  2354   001E8A  EF49  F00F         	goto	u1350
  2355   001E8E                     u1351:
  2356   001E8E  EF6D  F00F         	goto	l1199
  2357   001E92                     u1350:
  2358   001E92  0E01               	movlw	1
  2359   001E94  6E05               	movwf	___lwmod@counter^0,c
  2360   001E96  EF51  F00F         	goto	l2651
  2361   001E9A                     l2649:
  2362   001E9A  90D8               	bcf	status,0,c
  2363   001E9C  3603               	rlcf	___lwmod@divisor^0,f,c
  2364   001E9E  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  2365   001EA0  2A05               	incf	___lwmod@counter^0,f,c
  2366   001EA2                     l2651:
  2367   001EA2  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  2368   001EA4  EF56  F00F         	goto	u1361
  2369   001EA8  EF58  F00F         	goto	u1360
  2370   001EAC                     u1361:
  2371   001EAC  EF4D  F00F         	goto	l2649
  2372   001EB0                     u1360:
  2373   001EB0                     l2653:
  2374   001EB0  5003               	movf	___lwmod@divisor^0,w,c
  2375   001EB2  5C01               	subwf	___lwmod@dividend^0,w,c
  2376   001EB4  5004               	movf	(___lwmod@divisor+1)^0,w,c
  2377   001EB6  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  2378   001EB8  A0D8               	btfss	status,0,c
  2379   001EBA  EF61  F00F         	goto	u1371
  2380   001EBE  EF63  F00F         	goto	u1370
  2381   001EC2                     u1371:
  2382   001EC2  EF67  F00F         	goto	l2657
  2383   001EC6                     u1370:
  2384   001EC6  5003               	movf	___lwmod@divisor^0,w,c
  2385   001EC8  5E01               	subwf	___lwmod@dividend^0,f,c
  2386   001ECA  5004               	movf	(___lwmod@divisor+1)^0,w,c
  2387   001ECC  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  2388   001ECE                     l2657:
  2389   001ECE  90D8               	bcf	status,0,c
  2390   001ED0  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  2391   001ED2  3203               	rrcf	___lwmod@divisor^0,f,c
  2392   001ED4  2E05               	decfsz	___lwmod@counter^0,f,c
  2393   001ED6  EF58  F00F         	goto	l2653
  2394   001EDA                     l1199:
  2395   001EDA  C001  F001         	movff	___lwmod@dividend,?___lwmod
  2396   001EDE  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  2397   001EE2  0012               	return		;funcret
  2398   001EE4                     __end_of___lwmod:
  2399                           	callstack 0
  2400                           
  2401 ;; *************** function ___lwdiv *****************
  2402 ;; Defined at:
  2403 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  dividend        2    0[COMRAM] unsigned int 
  2406 ;;  divisor         2    2[COMRAM] unsigned int 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  quotient        2    4[COMRAM] unsigned int 
  2409 ;;  counter         1    6[COMRAM] unsigned char 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  2    0[COMRAM] unsigned int 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2419 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2420 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2422 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2423 ;;Total ram usage:        7 bytes
  2424 ;; Hardware stack levels used: 1
  2425 ;; Hardware stack levels required when called: 1
  2426 ;; This function calls:
  2427 ;;		Nothing
  2428 ;; This function is called by:
  2429 ;;		_vfpfcnvrt
  2430 ;;		_setMotorPWM
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           	psect	text11
  2435   001D38                     __ptext11:
  2436                           	callstack 0
  2437   001D38                     ___lwdiv:
  2438                           	callstack 25
  2439   001D38  0E00               	movlw	0
  2440   001D3A  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  2441   001D3C  0E00               	movlw	0
  2442   001D3E  6E05               	movwf	___lwdiv@quotient^0,c
  2443   001D40  5003               	movf	___lwdiv@divisor^0,w,c
  2444   001D42  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2445   001D44  B4D8               	btfsc	status,2,c
  2446   001D46  EFA7  F00E         	goto	u1321
  2447   001D4A  EFA9  F00E         	goto	u1320
  2448   001D4E                     u1321:
  2449   001D4E  EFD1  F00E         	goto	l1189
  2450   001D52                     u1320:
  2451   001D52  0E01               	movlw	1
  2452   001D54  6E07               	movwf	___lwdiv@counter^0,c
  2453   001D56  EFB1  F00E         	goto	l2631
  2454   001D5A                     l2629:
  2455   001D5A  90D8               	bcf	status,0,c
  2456   001D5C  3603               	rlcf	___lwdiv@divisor^0,f,c
  2457   001D5E  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2458   001D60  2A07               	incf	___lwdiv@counter^0,f,c
  2459   001D62                     l2631:
  2460   001D62  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  2461   001D64  EFB6  F00E         	goto	u1331
  2462   001D68  EFB8  F00E         	goto	u1330
  2463   001D6C                     u1331:
  2464   001D6C  EFAD  F00E         	goto	l2629
  2465   001D70                     u1330:
  2466   001D70                     l2633:
  2467   001D70  90D8               	bcf	status,0,c
  2468   001D72  3605               	rlcf	___lwdiv@quotient^0,f,c
  2469   001D74  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2470   001D76  5003               	movf	___lwdiv@divisor^0,w,c
  2471   001D78  5C01               	subwf	___lwdiv@dividend^0,w,c
  2472   001D7A  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  2473   001D7C  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2474   001D7E  A0D8               	btfss	status,0,c
  2475   001D80  EFC4  F00E         	goto	u1341
  2476   001D84  EFC6  F00E         	goto	u1340
  2477   001D88                     u1341:
  2478   001D88  EFCB  F00E         	goto	l2641
  2479   001D8C                     u1340:
  2480   001D8C  5003               	movf	___lwdiv@divisor^0,w,c
  2481   001D8E  5E01               	subwf	___lwdiv@dividend^0,f,c
  2482   001D90  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  2483   001D92  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2484   001D94  8005               	bsf	___lwdiv@quotient^0,0,c
  2485   001D96                     l2641:
  2486   001D96  90D8               	bcf	status,0,c
  2487   001D98  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2488   001D9A  3203               	rrcf	___lwdiv@divisor^0,f,c
  2489   001D9C  2E07               	decfsz	___lwdiv@counter^0,f,c
  2490   001D9E  EFB8  F00E         	goto	l2633
  2491   001DA2                     l1189:
  2492   001DA2  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2493   001DA6  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2494   001DAA  0012               	return		;funcret
  2495   001DAC                     __end_of___lwdiv:
  2496                           	callstack 0
  2497                           
  2498 ;; *************** function ___awmod *****************
  2499 ;; Defined at:
  2500 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  dividend        2    0[COMRAM] int 
  2503 ;;  divisor         2    2[COMRAM] int 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  sign            1    5[COMRAM] unsigned char 
  2506 ;;  counter         1    4[COMRAM] unsigned char 
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  2    0[COMRAM] int 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2516 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2519 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2520 ;;Total ram usage:        6 bytes
  2521 ;; Hardware stack levels used: 1
  2522 ;; Hardware stack levels required when called: 1
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_vfpfcnvrt
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text12
  2531   001B54                     __ptext12:
  2532                           	callstack 0
  2533   001B54                     ___awmod:
  2534                           	callstack 25
  2535   001B54  0E00               	movlw	0
  2536   001B56  6E06               	movwf	___awmod@sign^0,c
  2537   001B58  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2538   001B5A  EFB3  F00D         	goto	u1260
  2539   001B5E  EFB1  F00D         	goto	u1261
  2540   001B62                     u1261:
  2541   001B62  EFB9  F00D         	goto	l2595
  2542   001B66                     u1260:
  2543   001B66  6C01               	negf	___awmod@dividend^0,c
  2544   001B68  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2545   001B6A  B0D8               	btfsc	status,0,c
  2546   001B6C  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2547   001B6E  0E01               	movlw	1
  2548   001B70  6E06               	movwf	___awmod@sign^0,c
  2549   001B72                     l2595:
  2550   001B72  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2551   001B74  EFC0  F00D         	goto	u1270
  2552   001B78  EFBE  F00D         	goto	u1271
  2553   001B7C                     u1271:
  2554   001B7C  EFC4  F00D         	goto	l2599
  2555   001B80                     u1270:
  2556   001B80  6C03               	negf	___awmod@divisor^0,c
  2557   001B82  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2558   001B84  B0D8               	btfsc	status,0,c
  2559   001B86  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2560   001B88                     l2599:
  2561   001B88  5003               	movf	___awmod@divisor^0,w,c
  2562   001B8A  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2563   001B8C  B4D8               	btfsc	status,2,c
  2564   001B8E  EFCB  F00D         	goto	u1281
  2565   001B92  EFCD  F00D         	goto	u1280
  2566   001B96                     u1281:
  2567   001B96  EFF1  F00D         	goto	l2615
  2568   001B9A                     u1280:
  2569   001B9A  0E01               	movlw	1
  2570   001B9C  6E05               	movwf	___awmod@counter^0,c
  2571   001B9E  EFD5  F00D         	goto	l2605
  2572   001BA2                     l2603:
  2573   001BA2  90D8               	bcf	status,0,c
  2574   001BA4  3603               	rlcf	___awmod@divisor^0,f,c
  2575   001BA6  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2576   001BA8  2A05               	incf	___awmod@counter^0,f,c
  2577   001BAA                     l2605:
  2578   001BAA  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2579   001BAC  EFDA  F00D         	goto	u1291
  2580   001BB0  EFDC  F00D         	goto	u1290
  2581   001BB4                     u1291:
  2582   001BB4  EFD1  F00D         	goto	l2603
  2583   001BB8                     u1290:
  2584   001BB8                     l2607:
  2585   001BB8  5003               	movf	___awmod@divisor^0,w,c
  2586   001BBA  5C01               	subwf	___awmod@dividend^0,w,c
  2587   001BBC  5004               	movf	(___awmod@divisor+1)^0,w,c
  2588   001BBE  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2589   001BC0  A0D8               	btfss	status,0,c
  2590   001BC2  EFE5  F00D         	goto	u1301
  2591   001BC6  EFE7  F00D         	goto	u1300
  2592   001BCA                     u1301:
  2593   001BCA  EFEB  F00D         	goto	l2611
  2594   001BCE                     u1300:
  2595   001BCE  5003               	movf	___awmod@divisor^0,w,c
  2596   001BD0  5E01               	subwf	___awmod@dividend^0,f,c
  2597   001BD2  5004               	movf	(___awmod@divisor+1)^0,w,c
  2598   001BD4  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2599   001BD6                     l2611:
  2600   001BD6  90D8               	bcf	status,0,c
  2601   001BD8  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2602   001BDA  3203               	rrcf	___awmod@divisor^0,f,c
  2603   001BDC  2E05               	decfsz	___awmod@counter^0,f,c
  2604   001BDE  EFDC  F00D         	goto	l2607
  2605   001BE2                     l2615:
  2606   001BE2  5006               	movf	___awmod@sign^0,w,c
  2607   001BE4  B4D8               	btfsc	status,2,c
  2608   001BE6  EFF7  F00D         	goto	u1311
  2609   001BEA  EFF9  F00D         	goto	u1310
  2610   001BEE                     u1311:
  2611   001BEE  EFFD  F00D         	goto	l2619
  2612   001BF2                     u1310:
  2613   001BF2  6C01               	negf	___awmod@dividend^0,c
  2614   001BF4  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2615   001BF6  B0D8               	btfsc	status,0,c
  2616   001BF8  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2617   001BFA                     l2619:
  2618   001BFA  C001  F001         	movff	___awmod@dividend,?___awmod
  2619   001BFE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2620   001C02  0012               	return		;funcret
  2621   001C04                     __end_of___awmod:
  2622                           	callstack 0
  2623                           
  2624 ;; *************** function ___awdiv *****************
  2625 ;; Defined at:
  2626 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  dividend        2    0[COMRAM] int 
  2629 ;;  divisor         2    2[COMRAM] int 
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;  quotient        2    6[COMRAM] int 
  2632 ;;  sign            1    5[COMRAM] unsigned char 
  2633 ;;  counter         1    4[COMRAM] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  2    0[COMRAM] int 
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2643 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2646 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2647 ;;Total ram usage:        8 bytes
  2648 ;; Hardware stack levels used: 1
  2649 ;; Hardware stack levels required when called: 1
  2650 ;; This function calls:
  2651 ;;		Nothing
  2652 ;; This function is called by:
  2653 ;;		_vfpfcnvrt
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           	psect	text13
  2658   0019D6                     __ptext13:
  2659                           	callstack 0
  2660   0019D6                     ___awdiv:
  2661                           	callstack 25
  2662   0019D6  0E00               	movlw	0
  2663   0019D8  6E06               	movwf	___awdiv@sign^0,c
  2664   0019DA  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2665   0019DC  EFF4  F00C         	goto	u1200
  2666   0019E0  EFF2  F00C         	goto	u1201
  2667   0019E4                     u1201:
  2668   0019E4  EFFA  F00C         	goto	l2551
  2669   0019E8                     u1200:
  2670   0019E8  6C03               	negf	___awdiv@divisor^0,c
  2671   0019EA  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2672   0019EC  B0D8               	btfsc	status,0,c
  2673   0019EE  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2674   0019F0  0E01               	movlw	1
  2675   0019F2  6E06               	movwf	___awdiv@sign^0,c
  2676   0019F4                     l2551:
  2677   0019F4  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2678   0019F6  EF01  F00D         	goto	u1210
  2679   0019FA  EFFF  F00C         	goto	u1211
  2680   0019FE                     u1211:
  2681   0019FE  EF07  F00D         	goto	l2557
  2682   001A02                     u1210:
  2683   001A02  6C01               	negf	___awdiv@dividend^0,c
  2684   001A04  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2685   001A06  B0D8               	btfsc	status,0,c
  2686   001A08  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2687   001A0A  0E01               	movlw	1
  2688   001A0C  1A06               	xorwf	___awdiv@sign^0,f,c
  2689   001A0E                     l2557:
  2690   001A0E  0E00               	movlw	0
  2691   001A10  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2692   001A12  0E00               	movlw	0
  2693   001A14  6E07               	movwf	___awdiv@quotient^0,c
  2694   001A16  5003               	movf	___awdiv@divisor^0,w,c
  2695   001A18  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2696   001A1A  B4D8               	btfsc	status,2,c
  2697   001A1C  EF12  F00D         	goto	u1221
  2698   001A20  EF14  F00D         	goto	u1220
  2699   001A24                     u1221:
  2700   001A24  EF3C  F00D         	goto	l2579
  2701   001A28                     u1220:
  2702   001A28  0E01               	movlw	1
  2703   001A2A  6E05               	movwf	___awdiv@counter^0,c
  2704   001A2C  EF1C  F00D         	goto	l2565
  2705   001A30                     l2563:
  2706   001A30  90D8               	bcf	status,0,c
  2707   001A32  3603               	rlcf	___awdiv@divisor^0,f,c
  2708   001A34  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2709   001A36  2A05               	incf	___awdiv@counter^0,f,c
  2710   001A38                     l2565:
  2711   001A38  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2712   001A3A  EF21  F00D         	goto	u1231
  2713   001A3E  EF23  F00D         	goto	u1230
  2714   001A42                     u1231:
  2715   001A42  EF18  F00D         	goto	l2563
  2716   001A46                     u1230:
  2717   001A46                     l2567:
  2718   001A46  90D8               	bcf	status,0,c
  2719   001A48  3607               	rlcf	___awdiv@quotient^0,f,c
  2720   001A4A  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2721   001A4C  5003               	movf	___awdiv@divisor^0,w,c
  2722   001A4E  5C01               	subwf	___awdiv@dividend^0,w,c
  2723   001A50  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2724   001A52  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2725   001A54  A0D8               	btfss	status,0,c
  2726   001A56  EF2F  F00D         	goto	u1241
  2727   001A5A  EF31  F00D         	goto	u1240
  2728   001A5E                     u1241:
  2729   001A5E  EF36  F00D         	goto	l2575
  2730   001A62                     u1240:
  2731   001A62  5003               	movf	___awdiv@divisor^0,w,c
  2732   001A64  5E01               	subwf	___awdiv@dividend^0,f,c
  2733   001A66  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2734   001A68  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2735   001A6A  8007               	bsf	___awdiv@quotient^0,0,c
  2736   001A6C                     l2575:
  2737   001A6C  90D8               	bcf	status,0,c
  2738   001A6E  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2739   001A70  3203               	rrcf	___awdiv@divisor^0,f,c
  2740   001A72  2E05               	decfsz	___awdiv@counter^0,f,c
  2741   001A74  EF23  F00D         	goto	l2567
  2742   001A78                     l2579:
  2743   001A78  5006               	movf	___awdiv@sign^0,w,c
  2744   001A7A  B4D8               	btfsc	status,2,c
  2745   001A7C  EF42  F00D         	goto	u1251
  2746   001A80  EF44  F00D         	goto	u1250
  2747   001A84                     u1251:
  2748   001A84  EF48  F00D         	goto	l2583
  2749   001A88                     u1250:
  2750   001A88  6C07               	negf	___awdiv@quotient^0,c
  2751   001A8A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2752   001A8C  B0D8               	btfsc	status,0,c
  2753   001A8E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2754   001A90                     l2583:
  2755   001A90  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2756   001A94  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2757   001A98  0012               	return		;funcret
  2758   001A9A                     __end_of___awdiv:
  2759                           	callstack 0
  2760                           
  2761 ;; *************** function _sendStringSerial4 *****************
  2762 ;; Defined at:
  2763 ;;		line 35 in file "serial.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  string          2    1[COMRAM] PTR unsigned char 
  2766 ;;		 -> sendHSVvalSerial4@tempStr(21), sendRGBCvalSerial4@tempStr(26), STR_4(3), sendArrayCharSerial4@tempStr(161), 
  2767 ;;		 -> sendIntSerial4@string(17), 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2782 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2783 ;;Total ram usage:        2 bytes
  2784 ;; Hardware stack levels used: 1
  2785 ;; Hardware stack levels required when called: 2
  2786 ;; This function calls:
  2787 ;;		_sendCharSerial4
  2788 ;; This function is called by:
  2789 ;;		_sendRGBCvalSerial4
  2790 ;;		_sendHSVvalSerial4
  2791 ;;		_sendIntSerial4
  2792 ;;		_sendArrayCharSerial4
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text14
  2797   001EE4                     __ptext14:
  2798                           	callstack 0
  2799   001EE4                     _sendStringSerial4:
  2800                           	callstack 27
  2801   001EE4                     
  2802                           ;serial.c: 37:     while(*string != 0){
  2803   001EE4  EF89  F00F         	goto	l3015
  2804   001EE8                     l3011:
  2805                           
  2806                           ;serial.c: 38:   sendCharSerial4(*string++);
  2807   001EE8  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2808   001EEC  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2809   001EF0  0E00               	movlw	low (__smallconst shr (0+16))
  2810   001EF2  6EF8               	movwf	tblptru,c
  2811   001EF4  0E0D               	movlw	(high __ramtop+-1)
  2812   001EF6  64F7               	cpfsgt	tblptrh,c
  2813   001EF8  D003               	bra	u1817
  2814   001EFA  0008               	tblrd		*
  2815   001EFC  50F5               	movf	tablat,w,c
  2816   001EFE  D005               	bra	u1810
  2817   001F00                     u1817:
  2818   001F00  CFF6 FFE9          	movff	tblptrl,fsr0l
  2819   001F04  CFF7 FFEA          	movff	tblptrh,fsr0h
  2820   001F08  50EF               	movf	indf0,w,c
  2821   001F0A                     u1810:
  2822   001F0A  EC5E  F012         	call	_sendCharSerial4
  2823   001F0E  4A02               	infsnz	sendStringSerial4@string^0,f,c
  2824   001F10  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  2825   001F12                     l3015:
  2826                           
  2827                           ;serial.c: 37:     while(*string != 0){
  2828   001F12  C002  FFF6         	movff	sendStringSerial4@string,tblptrl
  2829   001F16  C003  FFF7         	movff	sendStringSerial4@string+1,tblptrh
  2830   001F1A  0E00               	movlw	low (__smallconst shr (0+16))
  2831   001F1C  6EF8               	movwf	tblptru,c
  2832   001F1E  0E0D               	movlw	(high __ramtop+-1)
  2833   001F20  64F7               	cpfsgt	tblptrh,c
  2834   001F22  D003               	bra	u1827
  2835   001F24  0008               	tblrd		*
  2836   001F26  50F5               	movf	tablat,w,c
  2837   001F28  D005               	bra	u1820
  2838   001F2A                     u1827:
  2839   001F2A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2840   001F2E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2841   001F32  50EF               	movf	indf0,w,c
  2842   001F34                     u1820:
  2843   001F34  0900               	iorlw	0
  2844   001F36  A4D8               	btfss	status,2,c
  2845   001F38  EFA0  F00F         	goto	u1831
  2846   001F3C  EFA2  F00F         	goto	u1830
  2847   001F40                     u1831:
  2848   001F40  EF74  F00F         	goto	l3011
  2849   001F44                     u1830:
  2850   001F44  0012               	return		;funcret
  2851   001F46                     __end_of_sendStringSerial4:
  2852                           	callstack 0
  2853                           
  2854 ;; *************** function _sendCharSerial4 *****************
  2855 ;; Defined at:
  2856 ;;		line 29 in file "serial.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;  charToSend      1    wreg     unsigned char 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  charToSend      1    0[COMRAM] unsigned char 
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		wreg
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2873 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2874 ;;Total ram usage:        1 bytes
  2875 ;; Hardware stack levels used: 1
  2876 ;; Hardware stack levels required when called: 1
  2877 ;; This function calls:
  2878 ;;		Nothing
  2879 ;; This function is called by:
  2880 ;;		_sendStringSerial4
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           	psect	text15
  2885   0024BC                     __ptext15:
  2886                           	callstack 0
  2887   0024BC                     _sendCharSerial4:
  2888                           	callstack 27
  2889                           
  2890                           ;incstack = 0
  2891                           ;sendCharSerial4@charToSend stored from wreg
  2892   0024BC  6E01               	movwf	sendCharSerial4@charToSend^0,c
  2893   0024BE                     l437:
  2894   0024BE  010E               	movlb	14	; () banked
  2895   0024C0  A537               	btfss	55,2,b	;volatile
  2896   0024C2  EF65  F012         	goto	u1791
  2897   0024C6  EF67  F012         	goto	u1790
  2898   0024CA                     u1791:
  2899   0024CA  EF5F  F012         	goto	l437
  2900   0024CE                     u1790:
  2901   0024CE                     
  2902                           ; BSR set to: 14
  2903                           ;serial.c: 31:     TX4REG = charToSend;
  2904   0024CE  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  2905   0024D2                     
  2906                           ; BSR set to: 14
  2907   0024D2  0012               	return		;funcret
  2908   0024D4                     __end_of_sendCharSerial4:
  2909                           	callstack 0
  2910                           
  2911 ;; *************** function _initUSART4 *****************
  2912 ;; Defined at:
  2913 ;;		line 5 in file "serial.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;		None
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;		None
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      void 
  2920 ;; Registers used:
  2921 ;;		wreg, status,2
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2931 ;;Total ram usage:        0 bytes
  2932 ;; Hardware stack levels used: 1
  2933 ;; Hardware stack levels required when called: 1
  2934 ;; This function calls:
  2935 ;;		Nothing
  2936 ;; This function is called by:
  2937 ;;		_main
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text16
  2942   00249E                     __ptext16:
  2943                           	callstack 0
  2944   00249E                     _initUSART4:
  2945                           	callstack 29
  2946   00249E                     
  2947                           ;serial.c: 9:     RC0PPS = 0x12;
  2948   00249E  0E12               	movlw	18
  2949   0024A0  010E               	movlb	14	; () banked
  2950   0024A2  6F62               	movwf	98,b	;volatile
  2951                           
  2952                           ;serial.c: 10:     RX4PPS = 0x11;
  2953   0024A4  0E11               	movlw	17
  2954   0024A6  6F15               	movwf	21,b	;volatile
  2955   0024A8                     
  2956                           ; BSR set to: 14
  2957                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  2958   0024A8  97E9               	bcf	233,3,b	;volatile
  2959   0024AA                     
  2960                           ; BSR set to: 14
  2961                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  2962   0024AA  95E8               	bcf	232,2,b	;volatile
  2963                           
  2964                           ;serial.c: 14:     SP4BRGL = 51;
  2965   0024AC  0E33               	movlw	51
  2966   0024AE  6FE5               	movwf	229,b	;volatile
  2967                           
  2968                           ;serial.c: 15:     SP4BRGH = 0;
  2969   0024B0  0E00               	movlw	0
  2970   0024B2  6FE6               	movwf	230,b	;volatile
  2971   0024B4                     
  2972                           ; BSR set to: 14
  2973                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  2974   0024B4  89E7               	bsf	231,4,b	;volatile
  2975   0024B6                     
  2976                           ; BSR set to: 14
  2977                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  2978   0024B6  8BE8               	bsf	232,5,b	;volatile
  2979   0024B8                     
  2980                           ; BSR set to: 14
  2981                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  2982   0024B8  8FE7               	bsf	231,7,b	;volatile
  2983   0024BA                     
  2984                           ; BSR set to: 14
  2985   0024BA  0012               	return		;funcret
  2986   0024BC                     __end_of_initUSART4:
  2987                           	callstack 0
  2988                           
  2989 ;; *************** function _initDCmotorsPWM *****************
  2990 ;; Defined at:
  2991 ;;		line 5 in file "dc_motor.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;		None
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, status,2
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3005 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3008 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3009 ;;Total ram usage:        2 bytes
  3010 ;; Hardware stack levels used: 1
  3011 ;; Hardware stack levels required when called: 1
  3012 ;; This function calls:
  3013 ;;		Nothing
  3014 ;; This function is called by:
  3015 ;;		_main
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text17
  3020   001CA8                     __ptext17:
  3021                           	callstack 0
  3022   001CA8                     _initDCmotorsPWM:
  3023                           	callstack 29
  3024   001CA8                     
  3025                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  3026   001CA8  9485               	bcf	133,2,c	;volatile
  3027                           
  3028                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  3029   001CAA  9885               	bcf	133,4,c	;volatile
  3030                           
  3031                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  3032   001CAC  9E83               	bcf	131,7,c	;volatile
  3033                           
  3034                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  3035   001CAE  9C87               	bcf	135,6,c	;volatile
  3036                           
  3037                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
  3038   001CB0  947D               	bcf	125,2,c	;volatile
  3039                           
  3040                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
  3041   001CB2  987D               	bcf	125,4,c	;volatile
  3042                           
  3043                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
  3044   001CB4  9E7B               	bcf	123,7,c	;volatile
  3045                           
  3046                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
  3047   001CB6  9C7F               	bcf	127,6,c	;volatile
  3048   001CB8                     
  3049                           ;dc_motor.c: 18:     RE2PPS=0x05;
  3050   001CB8  0E05               	movlw	5
  3051   001CBA  010E               	movlb	14	; () banked
  3052   001CBC  6F74               	movwf	116,b	;volatile
  3053                           
  3054                           ;dc_motor.c: 19:     RE4PPS=0x06;
  3055   001CBE  0E06               	movlw	6
  3056   001CC0  6F76               	movwf	118,b	;volatile
  3057                           
  3058                           ;dc_motor.c: 20:     RC7PPS=0x07;
  3059   001CC2  0E07               	movlw	7
  3060   001CC4  6F69               	movwf	105,b	;volatile
  3061                           
  3062                           ;dc_motor.c: 21:     RG6PPS=0x08;
  3063   001CC6  0E08               	movlw	8
  3064   001CC8  6F88               	movwf	136,b	;volatile
  3065                           
  3066                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  3067   001CCA  50BD               	movf	189,w,c	;volatile
  3068   001CCC  0B8F               	andlw	-113
  3069   001CCE  0940               	iorlw	64
  3070   001CD0  6EBD               	movwf	189,c	;volatile
  3071                           
  3072                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  3073   001CD2  0EE0               	movlw	-32
  3074   001CD4  16BE               	andwf	190,f,c	;volatile
  3075                           
  3076                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  3077   001CD6  50BF               	movf	191,w,c	;volatile
  3078   001CD8  0BF0               	andlw	-16
  3079   001CDA  0901               	iorlw	1
  3080   001CDC  6EBF               	movwf	191,c	;volatile
  3081   001CDE                     
  3082                           ; BSR set to: 14
  3083                           ;dc_motor.c: 30:     T2PR=(unsigned char)PWMperiod;
  3084   001CDE  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  3085   001CE2                     
  3086                           ; BSR set to: 14
  3087                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  3088   001CE2  8EBD               	bsf	189,7,c	;volatile
  3089                           
  3090                           ;dc_motor.c: 35:     CCPR1H=0;
  3091   001CE4  0E00               	movlw	0
  3092   001CE6  6EAA               	movwf	170,c	;volatile
  3093                           
  3094                           ;dc_motor.c: 36:     CCPR2H=0;
  3095   001CE8  0E00               	movlw	0
  3096   001CEA  6EA6               	movwf	166,c	;volatile
  3097                           
  3098                           ;dc_motor.c: 37:     CCPR3H=0;
  3099   001CEC  0E00               	movlw	0
  3100   001CEE  010F               	movlb	15	; () banked
  3101   001CF0  6F25               	movwf	37,b	;volatile
  3102                           
  3103                           ;dc_motor.c: 38:     CCPR4H=0;
  3104   001CF2  0E00               	movlw	0
  3105   001CF4  6F21               	movwf	33,b	;volatile
  3106                           
  3107                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  3108   001CF6  0EFC               	movlw	-4
  3109   001CF8  16AD               	andwf	173,f,c	;volatile
  3110                           
  3111                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  3112   001CFA  0EF3               	movlw	-13
  3113   001CFC  16AD               	andwf	173,f,c	;volatile
  3114                           
  3115                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  3116   001CFE  0ECF               	movlw	-49
  3117   001D00  16AD               	andwf	173,f,c	;volatile
  3118                           
  3119                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  3120   001D02  0E3F               	movlw	-193
  3121   001D04  16AD               	andwf	173,f,c	;volatile
  3122   001D06                     
  3123                           ; BSR set to: 15
  3124                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  3125   001D06  88AB               	bsf	171,4,c	;volatile
  3126                           
  3127                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  3128   001D08  50AB               	movf	171,w,c	;volatile
  3129   001D0A  0BF0               	andlw	-16
  3130   001D0C  090C               	iorlw	12
  3131   001D0E  6EAB               	movwf	171,c	;volatile
  3132   001D10                     
  3133                           ; BSR set to: 15
  3134                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  3135   001D10  8EAB               	bsf	171,7,c	;volatile
  3136   001D12                     
  3137                           ; BSR set to: 15
  3138                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  3139   001D12  88A7               	bsf	167,4,c	;volatile
  3140                           
  3141                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  3142   001D14  50A7               	movf	167,w,c	;volatile
  3143   001D16  0BF0               	andlw	-16
  3144   001D18  090C               	iorlw	12
  3145   001D1A  6EA7               	movwf	167,c	;volatile
  3146   001D1C                     
  3147                           ; BSR set to: 15
  3148                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  3149   001D1C  8EA7               	bsf	167,7,c	;volatile
  3150   001D1E                     
  3151                           ; BSR set to: 15
  3152                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  3153   001D1E  8926               	bsf	38,4,b	;volatile
  3154                           
  3155                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  3156   001D20  5126               	movf	38,w,b	;volatile
  3157   001D22  0BF0               	andlw	-16
  3158   001D24  090C               	iorlw	12
  3159   001D26  6F26               	movwf	38,b	;volatile
  3160   001D28                     
  3161                           ; BSR set to: 15
  3162                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  3163   001D28  8F26               	bsf	38,7,b	;volatile
  3164   001D2A                     
  3165                           ; BSR set to: 15
  3166                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  3167   001D2A  8922               	bsf	34,4,b	;volatile
  3168                           
  3169                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  3170   001D2C  5122               	movf	34,w,b	;volatile
  3171   001D2E  0BF0               	andlw	-16
  3172   001D30  090C               	iorlw	12
  3173   001D32  6F22               	movwf	34,b	;volatile
  3174   001D34                     
  3175                           ; BSR set to: 15
  3176                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  3177   001D34  8F22               	bsf	34,7,b	;volatile
  3178   001D36                     
  3179                           ; BSR set to: 15
  3180   001D36  0012               	return		;funcret
  3181   001D38                     __end_of_initDCmotorsPWM:
  3182                           	callstack 0
  3183                           
  3184 ;; *************** function _getRGBCval *****************
  3185 ;; Defined at:
  3186 ;;		line 84 in file "color.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  3189 ;;		 -> main@measured_colour(8), 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;		None
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3201 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3204 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3205 ;;Total ram usage:        1 bytes
  3206 ;; Hardware stack levels used: 1
  3207 ;; Hardware stack levels required when called: 4
  3208 ;; This function calls:
  3209 ;;		_color_read_Blue
  3210 ;;		_color_read_Clear
  3211 ;;		_color_read_Green
  3212 ;;		_color_read_Red
  3213 ;; This function is called by:
  3214 ;;		_main
  3215 ;;		_wait_for_wall
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text18
  3220   001FFA                     __ptext18:
  3221                           	callstack 0
  3222   001FFA                     _getRGBCval:
  3223                           	callstack 26
  3224   001FFA                     
  3225                           ;color.c: 84: void getRGBCval(struct RGBC_val *p);color.c: 85: {;color.c: 86:     p->R =
      +                           color_read_Red();
  3226   001FFA  EC7C  F010         	call	_color_read_Red	;wreg free
  3227   001FFE  500C               	movf	getRGBCval@p^0,w,c
  3228   002000  6ED9               	movwf	fsr2l,c
  3229   002002  6ADA               	clrf	fsr2h,c
  3230   002004  C005  FFDE         	movff	?_color_read_Red,postinc2
  3231   002008  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3232                           
  3233                           ;color.c: 87:     p->B = color_read_Blue();
  3234   00200C  ECF4  F010         	call	_color_read_Blue	;wreg free
  3235   002010  500C               	movf	getRGBCval@p^0,w,c
  3236   002012  6ED9               	movwf	fsr2l,c
  3237   002014  6ADA               	clrf	fsr2h,c
  3238   002016  0E04               	movlw	4
  3239   002018  26D9               	addwf	fsr2l,f,c
  3240   00201A  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3241   00201E  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3242                           
  3243                           ;color.c: 88:     p->G = color_read_Green();
  3244   002022  ECA4  F010         	call	_color_read_Green	;wreg free
  3245   002026  500C               	movf	getRGBCval@p^0,w,c
  3246   002028  6ED9               	movwf	fsr2l,c
  3247   00202A  6ADA               	clrf	fsr2h,c
  3248   00202C  0E02               	movlw	2
  3249   00202E  26D9               	addwf	fsr2l,f,c
  3250   002030  C005  FFDE         	movff	?_color_read_Green,postinc2
  3251   002034  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3252                           
  3253                           ;color.c: 89:     p->C = color_read_Clear();
  3254   002038  ECCC  F010         	call	_color_read_Clear	;wreg free
  3255   00203C  500C               	movf	getRGBCval@p^0,w,c
  3256   00203E  6ED9               	movwf	fsr2l,c
  3257   002040  6ADA               	clrf	fsr2h,c
  3258   002042  0E06               	movlw	6
  3259   002044  26D9               	addwf	fsr2l,f,c
  3260   002046  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3261   00204A  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3262   00204E  0012               	return		;funcret
  3263   002050                     __end_of_getRGBCval:
  3264                           	callstack 0
  3265                           
  3266 ;; *************** function _color_read_Red *****************
  3267 ;; Defined at:
  3268 ;;		line 28 in file "color.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;		None
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  tmp             2    9[COMRAM] unsigned int 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  2    4[COMRAM] unsigned int 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3282 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3284 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3285 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3286 ;;Total ram usage:        7 bytes
  3287 ;; Hardware stack levels used: 1
  3288 ;; Hardware stack levels required when called: 3
  3289 ;; This function calls:
  3290 ;;		_I2C_2_Master_Read
  3291 ;;		_I2C_2_Master_RepStart
  3292 ;;		_I2C_2_Master_Start
  3293 ;;		_I2C_2_Master_Stop
  3294 ;;		_I2C_2_Master_Write
  3295 ;; This function is called by:
  3296 ;;		_getRGBCval
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text19
  3301   0020F8                     __ptext19:
  3302                           	callstack 0
  3303   0020F8                     _color_read_Red:
  3304                           	callstack 26
  3305   0020F8                     
  3306                           ;color.c: 30:  unsigned int tmp;;color.c: 31:  I2C_2_Master_Start();
  3307   0020F8  EC90  F012         	call	_I2C_2_Master_Start	;wreg free
  3308                           
  3309                           ;color.c: 32:  I2C_2_Master_Write(0x52 | 0x00);
  3310   0020FC  0E52               	movlw	82
  3311   0020FE  EC74  F012         	call	_I2C_2_Master_Write
  3312                           
  3313                           ;color.c: 33:  I2C_2_Master_Write(0xA0 | 0x16);
  3314   002102  0EB6               	movlw	182
  3315   002104  EC74  F012         	call	_I2C_2_Master_Write
  3316                           
  3317                           ;color.c: 34:  I2C_2_Master_RepStart();
  3318   002108  EC86  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3319                           
  3320                           ;color.c: 35:  I2C_2_Master_Write(0x52 | 0x01);
  3321   00210C  0E53               	movlw	83
  3322   00210E  EC74  F012         	call	_I2C_2_Master_Write
  3323                           
  3324                           ;color.c: 36:  tmp=I2C_2_Master_Read(1);
  3325   002112  0E01               	movlw	1
  3326   002114  EC68  F011         	call	_I2C_2_Master_Read
  3327   002118  6E07               	movwf	??_color_read_Red^0,c
  3328   00211A  5007               	movf	??_color_read_Red^0,w,c
  3329   00211C  6E0A               	movwf	color_read_Red@tmp^0,c
  3330   00211E  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3331                           
  3332                           ;color.c: 37:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3333   002120  0E00               	movlw	0
  3334   002122  EC68  F011         	call	_I2C_2_Master_Read
  3335   002126  6E07               	movwf	??_color_read_Red^0,c
  3336   002128  5007               	movf	??_color_read_Red^0,w,c
  3337   00212A  6E09               	movwf	(??_color_read_Red+2)^0,c
  3338   00212C  6A08               	clrf	(??_color_read_Red+1)^0,c
  3339   00212E  500A               	movf	color_read_Red@tmp^0,w,c
  3340   002130  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3341   002132  6E0A               	movwf	color_read_Red@tmp^0,c
  3342   002134  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3343   002136  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3344   002138  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3345                           
  3346                           ;color.c: 38:  I2C_2_Master_Stop();
  3347   00213A  EC8B  F012         	call	_I2C_2_Master_Stop	;wreg free
  3348   00213E                     
  3349                           ;color.c: 39:  return tmp;
  3350   00213E  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3351   002142  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3352   002146  0012               	return		;funcret
  3353   002148                     __end_of_color_read_Red:
  3354                           	callstack 0
  3355                           
  3356 ;; *************** function _color_read_Green *****************
  3357 ;; Defined at:
  3358 ;;		line 56 in file "color.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  tmp             2    9[COMRAM] unsigned int 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  2    4[COMRAM] unsigned int 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3372 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3374 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3375 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3376 ;;Total ram usage:        7 bytes
  3377 ;; Hardware stack levels used: 1
  3378 ;; Hardware stack levels required when called: 3
  3379 ;; This function calls:
  3380 ;;		_I2C_2_Master_Read
  3381 ;;		_I2C_2_Master_RepStart
  3382 ;;		_I2C_2_Master_Start
  3383 ;;		_I2C_2_Master_Stop
  3384 ;;		_I2C_2_Master_Write
  3385 ;; This function is called by:
  3386 ;;		_getRGBCval
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text20
  3391   002148                     __ptext20:
  3392                           	callstack 0
  3393   002148                     _color_read_Green:
  3394                           	callstack 26
  3395   002148                     
  3396                           ;color.c: 58:     unsigned int tmp;;color.c: 59:  I2C_2_Master_Start();
  3397   002148  EC90  F012         	call	_I2C_2_Master_Start	;wreg free
  3398                           
  3399                           ;color.c: 60:  I2C_2_Master_Write(0x52 | 0x00);
  3400   00214C  0E52               	movlw	82
  3401   00214E  EC74  F012         	call	_I2C_2_Master_Write
  3402                           
  3403                           ;color.c: 61:  I2C_2_Master_Write(0xA0 | 0x18);
  3404   002152  0EB8               	movlw	184
  3405   002154  EC74  F012         	call	_I2C_2_Master_Write
  3406                           
  3407                           ;color.c: 62:  I2C_2_Master_RepStart();
  3408   002158  EC86  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3409                           
  3410                           ;color.c: 63:  I2C_2_Master_Write(0x52 | 0x01);
  3411   00215C  0E53               	movlw	83
  3412   00215E  EC74  F012         	call	_I2C_2_Master_Write
  3413                           
  3414                           ;color.c: 64:  tmp=I2C_2_Master_Read(1);
  3415   002162  0E01               	movlw	1
  3416   002164  EC68  F011         	call	_I2C_2_Master_Read
  3417   002168  6E07               	movwf	??_color_read_Green^0,c
  3418   00216A  5007               	movf	??_color_read_Green^0,w,c
  3419   00216C  6E0A               	movwf	color_read_Green@tmp^0,c
  3420   00216E  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3421                           
  3422                           ;color.c: 65:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3423   002170  0E00               	movlw	0
  3424   002172  EC68  F011         	call	_I2C_2_Master_Read
  3425   002176  6E07               	movwf	??_color_read_Green^0,c
  3426   002178  5007               	movf	??_color_read_Green^0,w,c
  3427   00217A  6E09               	movwf	(??_color_read_Green+2)^0,c
  3428   00217C  6A08               	clrf	(??_color_read_Green+1)^0,c
  3429   00217E  500A               	movf	color_read_Green@tmp^0,w,c
  3430   002180  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3431   002182  6E0A               	movwf	color_read_Green@tmp^0,c
  3432   002184  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3433   002186  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3434   002188  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3435                           
  3436                           ;color.c: 66:  I2C_2_Master_Stop();
  3437   00218A  EC8B  F012         	call	_I2C_2_Master_Stop	;wreg free
  3438   00218E                     
  3439                           ;color.c: 67:  return tmp;
  3440   00218E  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3441   002192  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3442   002196  0012               	return		;funcret
  3443   002198                     __end_of_color_read_Green:
  3444                           	callstack 0
  3445                           
  3446 ;; *************** function _color_read_Clear *****************
  3447 ;; Defined at:
  3448 ;;		line 70 in file "color.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;		None
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;  tmp             2    9[COMRAM] unsigned int 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  2    4[COMRAM] unsigned int 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3462 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3463 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3464 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3465 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3466 ;;Total ram usage:        7 bytes
  3467 ;; Hardware stack levels used: 1
  3468 ;; Hardware stack levels required when called: 3
  3469 ;; This function calls:
  3470 ;;		_I2C_2_Master_Read
  3471 ;;		_I2C_2_Master_RepStart
  3472 ;;		_I2C_2_Master_Start
  3473 ;;		_I2C_2_Master_Stop
  3474 ;;		_I2C_2_Master_Write
  3475 ;; This function is called by:
  3476 ;;		_getRGBCval
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           	psect	text21
  3481   002198                     __ptext21:
  3482                           	callstack 0
  3483   002198                     _color_read_Clear:
  3484                           	callstack 26
  3485   002198                     
  3486                           ;color.c: 72:     unsigned int tmp;;color.c: 73:  I2C_2_Master_Start();
  3487   002198  EC90  F012         	call	_I2C_2_Master_Start	;wreg free
  3488                           
  3489                           ;color.c: 74:  I2C_2_Master_Write(0x52 | 0x00);
  3490   00219C  0E52               	movlw	82
  3491   00219E  EC74  F012         	call	_I2C_2_Master_Write
  3492                           
  3493                           ;color.c: 75:  I2C_2_Master_Write(0xA0 | 0x14);
  3494   0021A2  0EB4               	movlw	180
  3495   0021A4  EC74  F012         	call	_I2C_2_Master_Write
  3496                           
  3497                           ;color.c: 76:  I2C_2_Master_RepStart();
  3498   0021A8  EC86  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3499                           
  3500                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x01);
  3501   0021AC  0E53               	movlw	83
  3502   0021AE  EC74  F012         	call	_I2C_2_Master_Write
  3503                           
  3504                           ;color.c: 78:  tmp=I2C_2_Master_Read(1);
  3505   0021B2  0E01               	movlw	1
  3506   0021B4  EC68  F011         	call	_I2C_2_Master_Read
  3507   0021B8  6E07               	movwf	??_color_read_Clear^0,c
  3508   0021BA  5007               	movf	??_color_read_Clear^0,w,c
  3509   0021BC  6E0A               	movwf	color_read_Clear@tmp^0,c
  3510   0021BE  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3511                           
  3512                           ;color.c: 79:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3513   0021C0  0E00               	movlw	0
  3514   0021C2  EC68  F011         	call	_I2C_2_Master_Read
  3515   0021C6  6E07               	movwf	??_color_read_Clear^0,c
  3516   0021C8  5007               	movf	??_color_read_Clear^0,w,c
  3517   0021CA  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3518   0021CC  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3519   0021CE  500A               	movf	color_read_Clear@tmp^0,w,c
  3520   0021D0  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3521   0021D2  6E0A               	movwf	color_read_Clear@tmp^0,c
  3522   0021D4  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3523   0021D6  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3524   0021D8  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3525                           
  3526                           ;color.c: 80:  I2C_2_Master_Stop();
  3527   0021DA  EC8B  F012         	call	_I2C_2_Master_Stop	;wreg free
  3528   0021DE                     
  3529                           ;color.c: 81:  return tmp;
  3530   0021DE  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3531   0021E2  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3532   0021E6  0012               	return		;funcret
  3533   0021E8                     __end_of_color_read_Clear:
  3534                           	callstack 0
  3535                           
  3536 ;; *************** function _color_read_Blue *****************
  3537 ;; Defined at:
  3538 ;;		line 42 in file "color.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;  tmp             2    9[COMRAM] unsigned int 
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  2    4[COMRAM] unsigned int 
  3545 ;; Registers used:
  3546 ;;		wreg, status,2, status,0, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3552 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3553 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3554 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3555 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3556 ;;Total ram usage:        7 bytes
  3557 ;; Hardware stack levels used: 1
  3558 ;; Hardware stack levels required when called: 3
  3559 ;; This function calls:
  3560 ;;		_I2C_2_Master_Read
  3561 ;;		_I2C_2_Master_RepStart
  3562 ;;		_I2C_2_Master_Start
  3563 ;;		_I2C_2_Master_Stop
  3564 ;;		_I2C_2_Master_Write
  3565 ;; This function is called by:
  3566 ;;		_getRGBCval
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           	psect	text22
  3571   0021E8                     __ptext22:
  3572                           	callstack 0
  3573   0021E8                     _color_read_Blue:
  3574                           	callstack 26
  3575   0021E8                     
  3576                           ;color.c: 44:     unsigned int tmp;;color.c: 45:  I2C_2_Master_Start();
  3577   0021E8  EC90  F012         	call	_I2C_2_Master_Start	;wreg free
  3578                           
  3579                           ;color.c: 46:  I2C_2_Master_Write(0x52 | 0x00);
  3580   0021EC  0E52               	movlw	82
  3581   0021EE  EC74  F012         	call	_I2C_2_Master_Write
  3582                           
  3583                           ;color.c: 47:  I2C_2_Master_Write(0xA0 | 0x1A);
  3584   0021F2  0EBA               	movlw	186
  3585   0021F4  EC74  F012         	call	_I2C_2_Master_Write
  3586                           
  3587                           ;color.c: 48:  I2C_2_Master_RepStart();
  3588   0021F8  EC86  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3589                           
  3590                           ;color.c: 49:  I2C_2_Master_Write(0x52 | 0x01);
  3591   0021FC  0E53               	movlw	83
  3592   0021FE  EC74  F012         	call	_I2C_2_Master_Write
  3593                           
  3594                           ;color.c: 50:  tmp=I2C_2_Master_Read(1);
  3595   002202  0E01               	movlw	1
  3596   002204  EC68  F011         	call	_I2C_2_Master_Read
  3597   002208  6E07               	movwf	??_color_read_Blue^0,c
  3598   00220A  5007               	movf	??_color_read_Blue^0,w,c
  3599   00220C  6E0A               	movwf	color_read_Blue@tmp^0,c
  3600   00220E  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3601                           
  3602                           ;color.c: 51:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3603   002210  0E00               	movlw	0
  3604   002212  EC68  F011         	call	_I2C_2_Master_Read
  3605   002216  6E07               	movwf	??_color_read_Blue^0,c
  3606   002218  5007               	movf	??_color_read_Blue^0,w,c
  3607   00221A  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3608   00221C  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3609   00221E  500A               	movf	color_read_Blue@tmp^0,w,c
  3610   002220  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3611   002222  6E0A               	movwf	color_read_Blue@tmp^0,c
  3612   002224  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3613   002226  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3614   002228  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3615                           
  3616                           ;color.c: 52:  I2C_2_Master_Stop();
  3617   00222A  EC8B  F012         	call	_I2C_2_Master_Stop	;wreg free
  3618   00222E                     
  3619                           ;color.c: 53:  return tmp;
  3620   00222E  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3621   002232  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3622   002236  0012               	return		;funcret
  3623   002238                     __end_of_color_read_Blue:
  3624                           	callstack 0
  3625                           
  3626 ;; *************** function _I2C_2_Master_RepStart *****************
  3627 ;; Defined at:
  3628 ;;		line 33 in file "i2c.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;		None
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2, status,0, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3646 ;;Total ram usage:        0 bytes
  3647 ;; Hardware stack levels used: 1
  3648 ;; Hardware stack levels required when called: 2
  3649 ;; This function calls:
  3650 ;;		_I2C_2_Master_Idle
  3651 ;; This function is called by:
  3652 ;;		_color_read_Red
  3653 ;;		_color_read_Blue
  3654 ;;		_color_read_Green
  3655 ;;		_color_read_Clear
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text23
  3660   00250C                     __ptext23:
  3661                           	callstack 0
  3662   00250C                     _I2C_2_Master_RepStart:
  3663                           	callstack 26
  3664   00250C                     
  3665                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3666   00250C  EC19  F012         	call	_I2C_2_Master_Idle	;wreg free
  3667   002510                     
  3668                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3669   002510  010E               	movlb	14	; () banked
  3670   002512  83DA               	bsf	218,1,b	;volatile
  3671   002514                     
  3672                           ; BSR set to: 14
  3673   002514  0012               	return		;funcret
  3674   002516                     __end_of_I2C_2_Master_RepStart:
  3675                           	callstack 0
  3676                           
  3677 ;; *************** function _I2C_2_Master_Read *****************
  3678 ;; Defined at:
  3679 ;;		line 51 in file "i2c.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  ack             1    wreg     unsigned char 
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  ack             1    2[COMRAM] unsigned char 
  3684 ;;  tmp             1    3[COMRAM] unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      unsigned char 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2, status,0, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3696 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3697 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3698 ;;Total ram usage:        3 bytes
  3699 ;; Hardware stack levels used: 1
  3700 ;; Hardware stack levels required when called: 2
  3701 ;; This function calls:
  3702 ;;		_I2C_2_Master_Idle
  3703 ;; This function is called by:
  3704 ;;		_color_read_Red
  3705 ;;		_color_read_Blue
  3706 ;;		_color_read_Green
  3707 ;;		_color_read_Clear
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           	psect	text24
  3712   0022D0                     __ptext24:
  3713                           	callstack 0
  3714   0022D0                     _I2C_2_Master_Read:
  3715                           	callstack 26
  3716                           
  3717                           ; BSR set to: 14
  3718                           ;incstack = 0
  3719                           ;I2C_2_Master_Read@ack stored from wreg
  3720   0022D0  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3721   0022D2                     
  3722                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3723   0022D2  EC19  F012         	call	_I2C_2_Master_Idle	;wreg free
  3724   0022D6                     
  3725                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3726   0022D6  010E               	movlb	14	; () banked
  3727   0022D8  87DA               	bsf	218,3,b	;volatile
  3728                           
  3729                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3730   0022DA  EC19  F012         	call	_I2C_2_Master_Idle	;wreg free
  3731   0022DE                     
  3732                           ;i2c.c: 57:   tmp = SSP2BUF;
  3733   0022DE  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3734                           
  3735                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3736   0022E2  EC19  F012         	call	_I2C_2_Master_Idle	;wreg free
  3737   0022E6                     
  3738                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3739   0022E6  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3740   0022E8  B4D8               	btfsc	status,2,c
  3741   0022EA  EF79  F011         	goto	u1751
  3742   0022EE  EF7D  F011         	goto	u1750
  3743   0022F2                     u1751:
  3744   0022F2  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3745   0022F4  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3746   0022F6  EF7E  F011         	goto	u1768
  3747   0022FA                     u1750:
  3748   0022FA  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3749   0022FC                     u1768:
  3750   0022FC  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3751   0022FE  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3752   002300  010E               	movlb	14	; () banked
  3753   002302  51DA               	movf	218,w,b	;volatile
  3754   002304  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3755   002306  0BDF               	andlw	-33
  3756   002308  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3757   00230A  6FDA               	movwf	218,b	;volatile
  3758   00230C                     
  3759                           ; BSR set to: 14
  3760                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3761   00230C  89DA               	bsf	218,4,b	;volatile
  3762   00230E                     
  3763                           ; BSR set to: 14
  3764                           ;i2c.c: 61:   return tmp;
  3765   00230E  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3766   002310                     
  3767                           ; BSR set to: 14
  3768   002310  0012               	return		;funcret
  3769   002312                     __end_of_I2C_2_Master_Read:
  3770                           	callstack 0
  3771                           
  3772 ;; *************** function _getHSVval *****************
  3773 ;; Defined at:
  3774 ;;		line 129 in file "color.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  3777 ;;		 -> main@HSV_colour(6), 
  3778 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  3779 ;;		 -> main@measured_colour(8), 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  temp            4   51[COMRAM] unsigned long 
  3782 ;;  temp            4   47[COMRAM] unsigned long 
  3783 ;;  temp            4   43[COMRAM] unsigned long 
  3784 ;;  temp            4   39[COMRAM] unsigned long 
  3785 ;;  temp            4   55[COMRAM] unsigned long 
  3786 ;;  temp            4   35[COMRAM] unsigned long 
  3787 ;;  temp            4   31[COMRAM] unsigned long 
  3788 ;;  C               2   61[COMRAM] unsigned int 
  3789 ;;  M               2   59[COMRAM] unsigned int 
  3790 ;;  Hz              2    0        unsigned int 
  3791 ;;  H               2   29[COMRAM] unsigned int 
  3792 ;;  S               2   27[COMRAM] unsigned int 
  3793 ;;  m               2   25[COMRAM] unsigned int 
  3794 ;;  Sz              2   23[COMRAM] unsigned int 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3805 ;;      Locals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3807 ;;      Totals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3808 ;;Total ram usage:       50 bytes
  3809 ;; Hardware stack levels used: 1
  3810 ;; Hardware stack levels required when called: 3
  3811 ;; This function calls:
  3812 ;;		___lldiv
  3813 ;;		___lmul
  3814 ;;		_maxRGB
  3815 ;;		_minRGB
  3816 ;; This function is called by:
  3817 ;;		_main
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text25
  3822   000E1A                     __ptext25:
  3823                           	callstack 0
  3824   000E1A                     _getHSVval:
  3825                           	callstack 27
  3826   000E1A                     
  3827                           ;color.c: 132:     unsigned int Sz = 100;
  3828   000E1A  0E00               	movlw	0
  3829   000E1C  6E19               	movwf	(getHSVval@Sz+1)^0,c
  3830   000E1E  0E64               	movlw	100
  3831   000E20  6E18               	movwf	getHSVval@Sz^0,c
  3832                           
  3833                           ;color.c: 133:     unsigned int H = 0;
  3834   000E22  0E00               	movlw	0
  3835   000E24  6E1F               	movwf	(getHSVval@H+1)^0,c
  3836   000E26  0E00               	movlw	0
  3837   000E28  6E1E               	movwf	getHSVval@H^0,c
  3838                           
  3839                           ;color.c: 134:     unsigned int S = 0;
  3840   000E2A  0E00               	movlw	0
  3841   000E2C  6E1D               	movwf	(getHSVval@S+1)^0,c
  3842   000E2E  0E00               	movlw	0
  3843   000E30  6E1C               	movwf	getHSVval@S^0,c
  3844   000E32                     
  3845                           ;color.c: 136:     unsigned int M = maxRGB(p2);
  3846   000E32  C00F  F007         	movff	getHSVval@p2,maxRGB@p
  3847   000E36  EC52  F010         	call	_maxRGB	;wreg free
  3848   000E3A  C007  F03C         	movff	?_maxRGB,getHSVval@M
  3849   000E3E  C008  F03D         	movff	?_maxRGB+1,getHSVval@M+1
  3850   000E42                     
  3851                           ;color.c: 137:     unsigned int m = minRGB(p2);
  3852   000E42  C00F  F007         	movff	getHSVval@p2,minRGB@p
  3853   000E46  EC28  F010         	call	_minRGB	;wreg free
  3854   000E4A  C007  F01A         	movff	?_minRGB,getHSVval@m
  3855   000E4E  C008  F01B         	movff	?_minRGB+1,getHSVval@m+1
  3856   000E52                     
  3857                           ;color.c: 138:     unsigned int C = M - m;
  3858   000E52  501A               	movf	getHSVval@m^0,w,c
  3859   000E54  5C3C               	subwf	getHSVval@M^0,w,c
  3860   000E56  6E3E               	movwf	getHSVval@C^0,c
  3861   000E58  501B               	movf	(getHSVval@m+1)^0,w,c
  3862   000E5A  583D               	subwfb	(getHSVval@M+1)^0,w,c
  3863   000E5C  6E3F               	movwf	(getHSVval@C+1)^0,c
  3864   000E5E                     
  3865                           ;color.c: 140:     if (C == 0) {
  3866   000E5E  503E               	movf	getHSVval@C^0,w,c
  3867   000E60  103F               	iorwf	(getHSVval@C+1)^0,w,c
  3868   000E62  A4D8               	btfss	status,2,c
  3869   000E64  EF36  F007         	goto	u2041
  3870   000E68  EF38  F007         	goto	u2040
  3871   000E6C                     u2041:
  3872   000E6C  EF3E  F007         	goto	l3201
  3873   000E70                     u2040:
  3874   000E70                     
  3875                           ;color.c: 141:         H = 0;
  3876   000E70  0E00               	movlw	0
  3877   000E72  6E1F               	movwf	(getHSVval@H+1)^0,c
  3878   000E74  0E00               	movlw	0
  3879   000E76  6E1E               	movwf	getHSVval@H^0,c
  3880                           
  3881                           ;color.c: 142:     } else {
  3882   000E78  EF0E  F00A         	goto	l3285
  3883   000E7C                     l3201:
  3884                           
  3885                           ;color.c: 143:         if (M == p2->R) {
  3886   000E7C  500F               	movf	getHSVval@p2^0,w,c
  3887   000E7E  6ED9               	movwf	fsr2l,c
  3888   000E80  6ADA               	clrf	fsr2h,c
  3889   000E82  503C               	movf	getHSVval@M^0,w,c
  3890   000E84  18DE               	xorwf	postinc2,w,c
  3891   000E86  E107               	bnz	u2051
  3892   000E88  503D               	movf	(getHSVval@M+1)^0,w,c
  3893   000E8A  18DE               	xorwf	postinc2,w,c
  3894   000E8C  A4D8               	btfss	status,2,c
  3895   000E8E  EF4B  F007         	goto	u2051
  3896   000E92  EF4D  F007         	goto	u2050
  3897   000E96                     u2051:
  3898   000E96  EF3A  F008         	goto	l3229
  3899   000E9A                     u2050:
  3900   000E9A                     
  3901                           ;color.c: 144:             if (p2->G >= p2->B) {
  3902   000E9A  500F               	movf	getHSVval@p2^0,w,c
  3903   000E9C  6ED9               	movwf	fsr2l,c
  3904   000E9E  6ADA               	clrf	fsr2h,c
  3905   000EA0  0E04               	movlw	4
  3906   000EA2  26D9               	addwf	fsr2l,f,c
  3907   000EA4  500F               	movf	getHSVval@p2^0,w,c
  3908   000EA6  6EE1               	movwf	fsr1l,c
  3909   000EA8  6AE2               	clrf	fsr1h,c
  3910   000EAA  0E02               	movlw	2
  3911   000EAC  26E1               	addwf	fsr1l,f,c
  3912   000EAE  50DE               	movf	postinc2,w,c
  3913   000EB0  5CE6               	subwf	postinc1,w,c
  3914   000EB2  50DE               	movf	postinc2,w,c
  3915   000EB4  58E6               	subwfb	postinc1,w,c
  3916   000EB6  A0D8               	btfss	status,0,c
  3917   000EB8  EF60  F007         	goto	u2061
  3918   000EBC  EF62  F007         	goto	u2060
  3919   000EC0                     u2061:
  3920   000EC0  EFC2  F007         	goto	l3217
  3921   000EC4                     u2060:
  3922   000EC4                     
  3923                           ;color.c: 148:                 temp *= 0;
  3924   000EC4  0E00               	movlw	0
  3925   000EC6  6E24               	movwf	getHSVval@temp^0,c
  3926   000EC8  0E00               	movlw	0
  3927   000ECA  6E25               	movwf	(getHSVval@temp+1)^0,c
  3928   000ECC  0E00               	movlw	0
  3929   000ECE  6E26               	movwf	(getHSVval@temp+2)^0,c
  3930   000ED0  0E00               	movlw	0
  3931   000ED2  6E27               	movwf	(getHSVval@temp+3)^0,c
  3932   000ED4                     
  3933                           ;color.c: 149:                 temp += (unsigned long)(p2->G - p2->B);
  3934   000ED4  500F               	movf	getHSVval@p2^0,w,c
  3935   000ED6  6ED9               	movwf	fsr2l,c
  3936   000ED8  6ADA               	clrf	fsr2h,c
  3937   000EDA  0E04               	movlw	4
  3938   000EDC  26D9               	addwf	fsr2l,f,c
  3939   000EDE  CFDE F010          	movff	postinc2,??_getHSVval
  3940   000EE2  CFDD F011          	movff	postdec2,??_getHSVval+1
  3941   000EE6  500F               	movf	getHSVval@p2^0,w,c
  3942   000EE8  6ED9               	movwf	fsr2l,c
  3943   000EEA  6ADA               	clrf	fsr2h,c
  3944   000EEC  0E02               	movlw	2
  3945   000EEE  26D9               	addwf	fsr2l,f,c
  3946   000EF0  CFDE F012          	movff	postinc2,??_getHSVval+2
  3947   000EF4  CFDD F013          	movff	postdec2,??_getHSVval+3
  3948   000EF8  5010               	movf	??_getHSVval^0,w,c
  3949   000EFA  5C12               	subwf	(??_getHSVval+2)^0,w,c
  3950   000EFC  6E14               	movwf	(??_getHSVval+4)^0,c
  3951   000EFE  5011               	movf	(??_getHSVval+1)^0,w,c
  3952   000F00  5813               	subwfb	(??_getHSVval+3)^0,w,c
  3953   000F02  6E15               	movwf	(??_getHSVval+5)^0,c
  3954   000F04  5014               	movf	(??_getHSVval+4)^0,w,c
  3955   000F06  2624               	addwf	getHSVval@temp^0,f,c
  3956   000F08  5015               	movf	(??_getHSVval+5)^0,w,c
  3957   000F0A  2225               	addwfc	(getHSVval@temp+1)^0,f,c
  3958   000F0C  0E00               	movlw	0
  3959   000F0E  2226               	addwfc	(getHSVval@temp+2)^0,f,c
  3960   000F10  0E00               	movlw	0
  3961   000F12  2227               	addwfc	(getHSVval@temp+3)^0,f,c
  3962   000F14                     
  3963                           ;color.c: 150:                 temp *= (unsigned long)Hz;
  3964   000F14  C024  F001         	movff	getHSVval@temp,___lmul@multiplier
  3965   000F18  C025  F002         	movff	getHSVval@temp+1,___lmul@multiplier+1
  3966   000F1C  C026  F003         	movff	getHSVval@temp+2,___lmul@multiplier+2
  3967   000F20  C027  F004         	movff	getHSVval@temp+3,___lmul@multiplier+3
  3968   000F24  0E3C               	movlw	60
  3969   000F26  6E05               	movwf	___lmul@multiplicand^0,c
  3970   000F28  0E00               	movlw	0
  3971   000F2A  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3972   000F2C  0E00               	movlw	0
  3973   000F2E  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3974   000F30  0E00               	movlw	0
  3975   000F32  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3976   000F34  EC0B  F00F         	call	___lmul	;wreg free
  3977   000F38  C001  F024         	movff	?___lmul,getHSVval@temp
  3978   000F3C  C002  F025         	movff	?___lmul+1,getHSVval@temp+1
  3979   000F40  C003  F026         	movff	?___lmul+2,getHSVval@temp+2
  3980   000F44  C004  F027         	movff	?___lmul+3,getHSVval@temp+3
  3981   000F48                     
  3982                           ;color.c: 151:                 temp /= (unsigned long)C;
  3983   000F48  C024  F001         	movff	getHSVval@temp,___lldiv@dividend
  3984   000F4C  C025  F002         	movff	getHSVval@temp+1,___lldiv@dividend+1
  3985   000F50  C026  F003         	movff	getHSVval@temp+2,___lldiv@dividend+2
  3986   000F54  C027  F004         	movff	getHSVval@temp+3,___lldiv@dividend+3
  3987   000F58  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  3988   000F5C  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  3989   000F60  6A07               	clrf	(___lldiv@divisor+2)^0,c
  3990   000F62  6A08               	clrf	(___lldiv@divisor+3)^0,c
  3991   000F64  EC02  F00E         	call	___lldiv	;wreg free
  3992   000F68  C001  F024         	movff	?___lldiv,getHSVval@temp
  3993   000F6C  C002  F025         	movff	?___lldiv+1,getHSVval@temp+1
  3994   000F70  C003  F026         	movff	?___lldiv+2,getHSVval@temp+2
  3995   000F74  C004  F027         	movff	?___lldiv+3,getHSVval@temp+3
  3996   000F78                     
  3997                           ;color.c: 152:                 H = (unsigned int)temp;
  3998   000F78  C024  F01E         	movff	getHSVval@temp,getHSVval@H
  3999   000F7C  C025  F01F         	movff	getHSVval@temp+1,getHSVval@H+1
  4000                           
  4001                           ;color.c: 153:             } else {
  4002   000F80  EF3A  F008         	goto	l3229
  4003   000F84                     l3217:
  4004                           
  4005                           ;color.c: 155:                 unsigned long temp;;color.c: 156:                 temp = 
      +                          (unsigned long)C;
  4006   000F84  C03E  F038         	movff	getHSVval@C,getHSVval@temp_620
  4007   000F88  C03F  F039         	movff	getHSVval@C+1,getHSVval@temp_620+1
  4008   000F8C  6A3A               	clrf	(getHSVval@temp_620+2)^0,c
  4009   000F8E  6A3B               	clrf	(getHSVval@temp_620+3)^0,c
  4010   000F90                     
  4011                           ;color.c: 157:                 temp *= 6;
  4012   000F90  C038  F001         	movff	getHSVval@temp_620,___lmul@multiplier
  4013   000F94  C039  F002         	movff	getHSVval@temp_620+1,___lmul@multiplier+1
  4014   000F98  C03A  F003         	movff	getHSVval@temp_620+2,___lmul@multiplier+2
  4015   000F9C  C03B  F004         	movff	getHSVval@temp_620+3,___lmul@multiplier+3
  4016   000FA0  0E06               	movlw	6
  4017   000FA2  6E05               	movwf	___lmul@multiplicand^0,c
  4018   000FA4  0E00               	movlw	0
  4019   000FA6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  4020   000FA8  0E00               	movlw	0
  4021   000FAA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  4022   000FAC  0E00               	movlw	0
  4023   000FAE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  4024   000FB0  EC0B  F00F         	call	___lmul	;wreg free
  4025   000FB4  C001  F038         	movff	?___lmul,getHSVval@temp_620
  4026   000FB8  C002  F039         	movff	?___lmul+1,getHSVval@temp_620+1
  4027   000FBC  C003  F03A         	movff	?___lmul+2,getHSVval@temp_620+2
  4028   000FC0  C004  F03B         	movff	?___lmul+3,getHSVval@temp_620+3
  4029   000FC4                     
  4030                           ;color.c: 158:                 temp -= (unsigned long)(p2->B - p2->G);
  4031   000FC4  500F               	movf	getHSVval@p2^0,w,c
  4032   000FC6  6ED9               	movwf	fsr2l,c
  4033   000FC8  6ADA               	clrf	fsr2h,c
  4034   000FCA  0E02               	movlw	2
  4035   000FCC  26D9               	addwf	fsr2l,f,c
  4036   000FCE  CFDE F010          	movff	postinc2,??_getHSVval
  4037   000FD2  CFDD F011          	movff	postdec2,??_getHSVval+1
  4038   000FD6  500F               	movf	getHSVval@p2^0,w,c
  4039   000FD8  6ED9               	movwf	fsr2l,c
  4040   000FDA  6ADA               	clrf	fsr2h,c
  4041   000FDC  0E04               	movlw	4
  4042   000FDE  26D9               	addwf	fsr2l,f,c
  4043   000FE0  CFDE F012          	movff	postinc2,??_getHSVval+2
  4044   000FE4  CFDD F013          	movff	postdec2,??_getHSVval+3
  4045   000FE8  5010               	movf	??_getHSVval^0,w,c
  4046   000FEA  5C12               	subwf	(??_getHSVval+2)^0,w,c
  4047   000FEC  6E14               	movwf	(??_getHSVval+4)^0,c
  4048   000FEE  5011               	movf	(??_getHSVval+1)^0,w,c
  4049   000FF0  5813               	subwfb	(??_getHSVval+3)^0,w,c
  4050   000FF2  6E15               	movwf	(??_getHSVval+5)^0,c
  4051   000FF4  6A16               	clrf	(??_getHSVval+6)^0,c
  4052   000FF6  6A17               	clrf	(??_getHSVval+7)^0,c
  4053   000FF8  5014               	movf	(??_getHSVval+4)^0,w,c
  4054   000FFA  5E38               	subwf	getHSVval@temp_620^0,f,c
  4055   000FFC  5015               	movf	(??_getHSVval+5)^0,w,c
  4056   000FFE  5A39               	subwfb	(getHSVval@temp_620+1)^0,f,c
  4057   001000  5016               	movf	(??_getHSVval+6)^0,w,c
  4058   001002  5A3A               	subwfb	(getHSVval@temp_620+2)^0,f,c
  4059   001004  5017               	movf	(??_getHSVval+7)^0,w,c
  4060   001006  5A3B               	subwfb	(getHSVval@temp_620+3)^0,f,c
  4061   001008                     
  4062                           ;color.c: 159:                 temp *= (unsigned long)Hz;
  4063   001008  C038  F001         	movff	getHSVval@temp_620,___lmul@multiplier
  4064   00100C  C039  F002         	movff	getHSVval@temp_620+1,___lmul@multiplier+1
  4065   001010  C03A  F003         	movff	getHSVval@temp_620+2,___lmul@multiplier+2
  4066   001014  C03B  F004         	movff	getHSVval@temp_620+3,___lmul@multiplier+3
  4067   001018  0E3C               	movlw	60
  4068   00101A  6E05               	movwf	___lmul@multiplicand^0,c
  4069   00101C  0E00               	movlw	0
  4070   00101E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  4071   001020  0E00               	movlw	0
  4072   001022  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  4073   001024  0E00               	movlw	0
  4074   001026  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  4075   001028  EC0B  F00F         	call	___lmul	;wreg free
  4076   00102C  C001  F038         	movff	?___lmul,getHSVval@temp_620
  4077   001030  C002  F039         	movff	?___lmul+1,getHSVval@temp_620+1
  4078   001034  C003  F03A         	movff	?___lmul+2,getHSVval@temp_620+2
  4079   001038  C004  F03B         	movff	?___lmul+3,getHSVval@temp_620+3
  4080   00103C                     
  4081                           ;color.c: 160:                 temp /= (unsigned long)C;
  4082   00103C  C038  F001         	movff	getHSVval@temp_620,___lldiv@dividend
  4083   001040  C039  F002         	movff	getHSVval@temp_620+1,___lldiv@dividend+1
  4084   001044  C03A  F003         	movff	getHSVval@temp_620+2,___lldiv@dividend+2
  4085   001048  C03B  F004         	movff	getHSVval@temp_620+3,___lldiv@dividend+3
  4086   00104C  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  4087   001050  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  4088   001054  6A07               	clrf	(___lldiv@divisor+2)^0,c
  4089   001056  6A08               	clrf	(___lldiv@divisor+3)^0,c
  4090   001058  EC02  F00E         	call	___lldiv	;wreg free
  4091   00105C  C001  F038         	movff	?___lldiv,getHSVval@temp_620
  4092   001060  C002  F039         	movff	?___lldiv+1,getHSVval@temp_620+1
  4093   001064  C003  F03A         	movff	?___lldiv+2,getHSVval@temp_620+2
  4094   001068  C004  F03B         	movff	?___lldiv+3,getHSVval@temp_620+3
  4095   00106C                     
  4096                           ;color.c: 161:                 H = (unsigned int)temp;
  4097   00106C  C038  F01E         	movff	getHSVval@temp_620,getHSVval@H
  4098   001070  C039  F01F         	movff	getHSVval@temp_620+1,getHSVval@H+1
  4099   001074                     l3229:
  4100                           
  4101                           ;color.c: 164:         if (M == p2->G) {
  4102   001074  500F               	movf	getHSVval@p2^0,w,c
  4103   001076  6ED9               	movwf	fsr2l,c
  4104   001078  6ADA               	clrf	fsr2h,c
  4105   00107A  0E02               	movlw	2
  4106   00107C  26D9               	addwf	fsr2l,f,c
  4107   00107E  503C               	movf	getHSVval@M^0,w,c
  4108   001080  18DE               	xorwf	postinc2,w,c
  4109   001082  E107               	bnz	u2071
  4110   001084  503D               	movf	(getHSVval@M+1)^0,w,c
  4111   001086  18DE               	xorwf	postinc2,w,c
  4112   001088  A4D8               	btfss	status,2,c
  4113   00108A  EF49  F008         	goto	u2071
  4114   00108E  EF4B  F008         	goto	u2070
  4115   001092                     u2071:
  4116   001092  EF20  F009         	goto	l3257
  4117   001096                     u2070:
  4118   001096                     
  4119                           ;color.c: 165:             if (p2->B >= p2->R) {
  4120   001096  500F               	movf	getHSVval@p2^0,w,c
  4121   001098  6ED9               	movwf	fsr2l,c
  4122   00109A  6ADA               	clrf	fsr2h,c
  4123   00109C  500F               	movf	getHSVval@p2^0,w,c
  4124   00109E  6EE1               	movwf	fsr1l,c
  4125   0010A0  6AE2               	clrf	fsr1h,c
  4126   0010A2  0E04               	movlw	4
  4127   0010A4  26E1               	addwf	fsr1l,f,c
  4128   0010A6  50DE               	movf	postinc2,w,c
  4129   0010A8  5CE6               	subwf	postinc1,w,c
  4130   0010AA  50DE               	movf	postinc2,w,c
  4131   0010AC  58E6               	subwfb	postinc1,w,c
  4132   0010AE  A0D8               	btfss	status,0,c
  4133   0010B0  EF5C  F008         	goto	u2081
  4134   0010B4  EF5E  F008         	goto	u2080
  4135   0010B8                     u2081:
  4136   0010B8  EFBF  F008         	goto	l3245
  4137   0010BC                     u2080:
  4138   0010BC                     
  4139                           ;color.c: 167:                 unsigned long temp;;color.c: 168:                 temp = 
      +                          (unsigned long)C;
  4140   0010BC  C03E  F028         	movff	getHSVval@C,getHSVval@temp_621
  4141   0010C0  C03F  F029         	movff	getHSVval@C+1,getHSVval@temp_621+1
  4142   0010C4  6A2A               	clrf	(getHSVval@temp_621+2)^0,c
  4143   0010C6  6A2B               	clrf	(getHSVval@temp_621+3)^0,c
  4144   0010C8                     
  4145                           ;color.c: 169:                 temp *= 2;
  4146   0010C8  90D8               	bcf	status,0,c
  4147   0010CA  3628               	rlcf	getHSVval@temp_621^0,f,c
  4148   0010CC  3629               	rlcf	(getHSVval@temp_621+1)^0,f,c
  4149   0010CE  362A               	rlcf	(getHSVval@temp_621+2)^0,f,c
  4150   0010D0  362B               	rlcf	(getHSVval@temp_621+3)^0,f,c
  4151   0010D2                     
  4152                           ;color.c: 170:                 temp += (unsigned long)(p2->B - p2->R);
  4153   0010D2  500F               	movf	getHSVval@p2^0,w,c
  4154   0010D4  6ED9               	movwf	fsr2l,c
  4155   0010D6  6ADA               	clrf	fsr2h,c
  4156   0010D8  CFDE F010          	movff	postinc2,??_getHSVval
  4157   0010DC  CFDD F011          	movff	postdec2,??_getHSVval+1
  4158   0010E0  500F               	movf	getHSVval@p2^0,w,c
  4159   0010E2  6ED9               	movwf	fsr2l,c
  4160   0010E4  6ADA               	clrf	fsr2h,c
  4161   0010E6  0E04               	movlw	4
  4162   0010E8  26D9               	addwf	fsr2l,f,c
  4163   0010EA  CFDE F012          	movff	postinc2,??_getHSVval+2
  4164   0010EE  CFDD F013          	movff	postdec2,??_getHSVval+3
  4165   0010F2  5010               	movf	??_getHSVval^0,w,c
  4166   0010F4  5C12               	subwf	(??_getHSVval+2)^0,w,c
  4167   0010F6  6E14               	movwf	(??_getHSVval+4)^0,c
  4168   0010F8  5011               	movf	(??_getHSVval+1)^0,w,c
  4169   0010FA  5813               	subwfb	(??_getHSVval+3)^0,w,c
  4170   0010FC  6E15               	movwf	(??_getHSVval+5)^0,c
  4171   0010FE  5014               	movf	(??_getHSVval+4)^0,w,c
  4172   001100  2628               	addwf	getHSVval@temp_621^0,f,c
  4173   001102  5015               	movf	(??_getHSVval+5)^0,w,c
  4174   001104  2229               	addwfc	(getHSVval@temp_621+1)^0,f,c
  4175   001106  0E00               	movlw	0
  4176   001108  222A               	addwfc	(getHSVval@temp_621+2)^0,f,c
  4177   00110A  0E00               	movlw	0
  4178   00110C  222B               	addwfc	(getHSVval@temp_621+3)^0,f,c
  4179   00110E                     
  4180                           ;color.c: 171:                 temp *= (unsigned long)Hz;
  4181   00110E  C028  F001         	movff	getHSVval@temp_621,___lmul@multiplier
  4182   001112  C029  F002         	movff	getHSVval@temp_621+1,___lmul@multiplier+1
  4183   001116  C02A  F003         	movff	getHSVval@temp_621+2,___lmul@multiplier+2
  4184   00111A  C02B  F004         	movff	getHSVval@temp_621+3,___lmul@multiplier+3
  4185   00111E  0E3C               	movlw	60
  4186   001120  6E05               	movwf	___lmul@multiplicand^0,c
  4187   001122  0E00               	movlw	0
  4188   001124  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  4189   001126  0E00               	movlw	0
  4190   001128  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  4191   00112A  0E00               	movlw	0
  4192   00112C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  4193   00112E  EC0B  F00F         	call	___lmul	;wreg free
  4194   001132  C001  F028         	movff	?___lmul,getHSVval@temp_621
  4195   001136  C002  F029         	movff	?___lmul+1,getHSVval@temp_621+1
  4196   00113A  C003  F02A         	movff	?___lmul+2,getHSVval@temp_621+2
  4197   00113E  C004  F02B         	movff	?___lmul+3,getHSVval@temp_621+3
  4198   001142                     
  4199                           ;color.c: 172:                 temp /= (unsigned long)C;
  4200   001142  C028  F001         	movff	getHSVval@temp_621,___lldiv@dividend
  4201   001146  C029  F002         	movff	getHSVval@temp_621+1,___lldiv@dividend+1
  4202   00114A  C02A  F003         	movff	getHSVval@temp_621+2,___lldiv@dividend+2
  4203   00114E  C02B  F004         	movff	getHSVval@temp_621+3,___lldiv@dividend+3
  4204   001152  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  4205   001156  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  4206   00115A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  4207   00115C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  4208   00115E  EC02  F00E         	call	___lldiv	;wreg free
  4209   001162  C001  F028         	movff	?___lldiv,getHSVval@temp_621
  4210   001166  C002  F029         	movff	?___lldiv+1,getHSVval@temp_621+1
  4211   00116A  C003  F02A         	movff	?___lldiv+2,getHSVval@temp_621+2
  4212   00116E  C004  F02B         	movff	?___lldiv+3,getHSVval@temp_621+3
  4213   001172                     
  4214                           ;color.c: 173:                 H = (unsigned int)temp;
  4215   001172  C028  F01E         	movff	getHSVval@temp_621,getHSVval@H
  4216   001176  C029  F01F         	movff	getHSVval@temp_621+1,getHSVval@H+1
  4217                           
  4218                           ;color.c: 174:             } else {
  4219   00117A  EF20  F009         	goto	l3257
  4220   00117E                     l3245:
  4221                           
  4222                           ;color.c: 176:                 unsigned long temp;;color.c: 177:                 temp = 
      +                          (unsigned long)C;
  4223   00117E  C03E  F02C         	movff	getHSVval@C,getHSVval@temp_622
  4224   001182  C03F  F02D         	movff	getHSVval@C+1,getHSVval@temp_622+1
  4225   001186  6A2E               	clrf	(getHSVval@temp_622+2)^0,c
  4226   001188  6A2F               	clrf	(getHSVval@temp_622+3)^0,c
  4227   00118A                     
  4228                           ;color.c: 178:                 temp *= 2;
  4229   00118A  90D8               	bcf	status,0,c
  4230   00118C  362C               	rlcf	getHSVval@temp_622^0,f,c
  4231   00118E  362D               	rlcf	(getHSVval@temp_622+1)^0,f,c
  4232   001190  362E               	rlcf	(getHSVval@temp_622+2)^0,f,c
  4233   001192  362F               	rlcf	(getHSVval@temp_622+3)^0,f,c
  4234   001194                     
  4235                           ;color.c: 179:                 temp -= (unsigned long)(p2->R - p2->B);
  4236   001194  500F               	movf	getHSVval@p2^0,w,c
  4237   001196  6ED9               	movwf	fsr2l,c
  4238   001198  6ADA               	clrf	fsr2h,c
  4239   00119A  0E04               	movlw	4
  4240   00119C  26D9               	addwf	fsr2l,f,c
  4241   00119E  CFDE F010          	movff	postinc2,??_getHSVval
  4242   0011A2  CFDD F011          	movff	postdec2,??_getHSVval+1
  4243   0011A6  500F               	movf	getHSVval@p2^0,w,c
  4244   0011A8  6ED9               	movwf	fsr2l,c
  4245   0011AA  6ADA               	clrf	fsr2h,c
  4246   0011AC  CFDE F012          	movff	postinc2,??_getHSVval+2
  4247   0011B0  CFDD F013          	movff	postdec2,??_getHSVval+3
  4248   0011B4  5010               	movf	??_getHSVval^0,w,c
  4249   0011B6  5C12               	subwf	(??_getHSVval+2)^0,w,c
  4250   0011B8  6E14               	movwf	(??_getHSVval+4)^0,c
  4251   0011BA  5011               	movf	(??_getHSVval+1)^0,w,c
  4252   0011BC  5813               	subwfb	(??_getHSVval+3)^0,w,c
  4253   0011BE  6E15               	movwf	(??_getHSVval+5)^0,c
  4254   0011C0  6A16               	clrf	(??_getHSVval+6)^0,c
  4255   0011C2  6A17               	clrf	(??_getHSVval+7)^0,c
  4256   0011C4  5014               	movf	(??_getHSVval+4)^0,w,c
  4257   0011C6  5E2C               	subwf	getHSVval@temp_622^0,f,c
  4258   0011C8  5015               	movf	(??_getHSVval+5)^0,w,c
  4259   0011CA  5A2D               	subwfb	(getHSVval@temp_622+1)^0,f,c
  4260   0011CC  5016               	movf	(??_getHSVval+6)^0,w,c
  4261   0011CE  5A2E               	subwfb	(getHSVval@temp_622+2)^0,f,c
  4262   0011D0  5017               	movf	(??_getHSVval+7)^0,w,c
  4263   0011D2  5A2F               	subwfb	(getHSVval@temp_622+3)^0,f,c
  4264   0011D4                     
  4265                           ;color.c: 180:                 temp *= (unsigned long)Hz;
  4266   0011D4  C02C  F001         	movff	getHSVval@temp_622,___lmul@multiplier
  4267   0011D8  C02D  F002         	movff	getHSVval@temp_622+1,___lmul@multiplier+1
  4268   0011DC  C02E  F003         	movff	getHSVval@temp_622+2,___lmul@multiplier+2
  4269   0011E0  C02F  F004         	movff	getHSVval@temp_622+3,___lmul@multiplier+3
  4270   0011E4  0E3C               	movlw	60
  4271   0011E6  6E05               	movwf	___lmul@multiplicand^0,c
  4272   0011E8  0E00               	movlw	0
  4273   0011EA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  4274   0011EC  0E00               	movlw	0
  4275   0011EE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  4276   0011F0  0E00               	movlw	0
  4277   0011F2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  4278   0011F4  EC0B  F00F         	call	___lmul	;wreg free
  4279   0011F8  C001  F02C         	movff	?___lmul,getHSVval@temp_622
  4280   0011FC  C002  F02D         	movff	?___lmul+1,getHSVval@temp_622+1
  4281   001200  C003  F02E         	movff	?___lmul+2,getHSVval@temp_622+2
  4282   001204  C004  F02F         	movff	?___lmul+3,getHSVval@temp_622+3
  4283   001208                     
  4284                           ;color.c: 181:                 temp /= (unsigned long)C;
  4285   001208  C02C  F001         	movff	getHSVval@temp_622,___lldiv@dividend
  4286   00120C  C02D  F002         	movff	getHSVval@temp_622+1,___lldiv@dividend+1
  4287   001210  C02E  F003         	movff	getHSVval@temp_622+2,___lldiv@dividend+2
  4288   001214  C02F  F004         	movff	getHSVval@temp_622+3,___lldiv@dividend+3
  4289   001218  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  4290   00121C  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  4291   001220  6A07               	clrf	(___lldiv@divisor+2)^0,c
  4292   001222  6A08               	clrf	(___lldiv@divisor+3)^0,c
  4293   001224  EC02  F00E         	call	___lldiv	;wreg free
  4294   001228  C001  F02C         	movff	?___lldiv,getHSVval@temp_622
  4295   00122C  C002  F02D         	movff	?___lldiv+1,getHSVval@temp_622+1
  4296   001230  C003  F02E         	movff	?___lldiv+2,getHSVval@temp_622+2
  4297   001234  C004  F02F         	movff	?___lldiv+3,getHSVval@temp_622+3
  4298   001238                     
  4299                           ;color.c: 182:                 H = (unsigned int)temp;
  4300   001238  C02C  F01E         	movff	getHSVval@temp_622,getHSVval@H
  4301   00123C  C02D  F01F         	movff	getHSVval@temp_622+1,getHSVval@H+1
  4302   001240                     l3257:
  4303                           
  4304                           ;color.c: 185:         if (M == p2->B) {
  4305   001240  500F               	movf	getHSVval@p2^0,w,c
  4306   001242  6ED9               	movwf	fsr2l,c
  4307   001244  6ADA               	clrf	fsr2h,c
  4308   001246  0E04               	movlw	4
  4309   001248  26D9               	addwf	fsr2l,f,c
  4310   00124A  503C               	movf	getHSVval@M^0,w,c
  4311   00124C  18DE               	xorwf	postinc2,w,c
  4312   00124E  E107               	bnz	u2091
  4313   001250  503D               	movf	(getHSVval@M+1)^0,w,c
  4314   001252  18DE               	xorwf	postinc2,w,c
  4315   001254  A4D8               	btfss	status,2,c
  4316   001256  EF2F  F009         	goto	u2091
  4317   00125A  EF31  F009         	goto	u2090
  4318   00125E                     u2091:
  4319   00125E  EF0E  F00A         	goto	l3285
  4320   001262                     u2090:
  4321   001262                     
  4322                           ;color.c: 186:             if (p2->R >= p2->G) {
  4323   001262  500F               	movf	getHSVval@p2^0,w,c
  4324   001264  6ED9               	movwf	fsr2l,c
  4325   001266  6ADA               	clrf	fsr2h,c
  4326   001268  0E02               	movlw	2
  4327   00126A  26D9               	addwf	fsr2l,f,c
  4328   00126C  500F               	movf	getHSVval@p2^0,w,c
  4329   00126E  6EE1               	movwf	fsr1l,c
  4330   001270  6AE2               	clrf	fsr1h,c
  4331   001272  50DE               	movf	postinc2,w,c
  4332   001274  5CE6               	subwf	postinc1,w,c
  4333   001276  50DE               	movf	postinc2,w,c
  4334   001278  58E6               	subwfb	postinc1,w,c
  4335   00127A  A0D8               	btfss	status,0,c
  4336   00127C  EF42  F009         	goto	u2101
  4337   001280  EF44  F009         	goto	u2100
  4338   001284                     u2101:
  4339   001284  EFA9  F009         	goto	l3273
  4340   001288                     u2100:
  4341   001288                     
  4342                           ;color.c: 188:                 unsigned long temp;;color.c: 189:                 temp = 
      +                          (unsigned long)C;
  4343   001288  C03E  F030         	movff	getHSVval@C,getHSVval@temp_623
  4344   00128C  C03F  F031         	movff	getHSVval@C+1,getHSVval@temp_623+1
  4345   001290  6A32               	clrf	(getHSVval@temp_623+2)^0,c
  4346   001292  6A33               	clrf	(getHSVval@temp_623+3)^0,c
  4347   001294                     
  4348                           ;color.c: 190:                 temp *= 4;
  4349   001294  0E02               	movlw	2
  4350   001296                     u2115:
  4351   001296  90D8               	bcf	status,0,c
  4352   001298  3630               	rlcf	getHSVval@temp_623^0,f,c
  4353   00129A  3631               	rlcf	(getHSVval@temp_623+1)^0,f,c
  4354   00129C  3632               	rlcf	(getHSVval@temp_623+2)^0,f,c
  4355   00129E  3633               	rlcf	(getHSVval@temp_623+3)^0,f,c
  4356   0012A0  2EE8               	decfsz	wreg,f,c
  4357   0012A2  EF4B  F009         	goto	u2115
  4358   0012A6                     
  4359                           ;color.c: 191:                 temp += (unsigned long)(p2->R - p2->G);
  4360   0012A6  500F               	movf	getHSVval@p2^0,w,c
  4361   0012A8  6ED9               	movwf	fsr2l,c
  4362   0012AA  6ADA               	clrf	fsr2h,c
  4363   0012AC  0E02               	movlw	2
  4364   0012AE  26D9               	addwf	fsr2l,f,c
  4365   0012B0  CFDE F010          	movff	postinc2,??_getHSVval
  4366   0012B4  CFDD F011          	movff	postdec2,??_getHSVval+1
  4367   0012B8  500F               	movf	getHSVval@p2^0,w,c
  4368   0012BA  6ED9               	movwf	fsr2l,c
  4369   0012BC  6ADA               	clrf	fsr2h,c
  4370   0012BE  CFDE F012          	movff	postinc2,??_getHSVval+2
  4371   0012C2  CFDD F013          	movff	postdec2,??_getHSVval+3
  4372   0012C6  5010               	movf	??_getHSVval^0,w,c
  4373   0012C8  5C12               	subwf	(??_getHSVval+2)^0,w,c
  4374   0012CA  6E14               	movwf	(??_getHSVval+4)^0,c
  4375   0012CC  5011               	movf	(??_getHSVval+1)^0,w,c
  4376   0012CE  5813               	subwfb	(??_getHSVval+3)^0,w,c
  4377   0012D0  6E15               	movwf	(??_getHSVval+5)^0,c
  4378   0012D2  5014               	movf	(??_getHSVval+4)^0,w,c
  4379   0012D4  2630               	addwf	getHSVval@temp_623^0,f,c
  4380   0012D6  5015               	movf	(??_getHSVval+5)^0,w,c
  4381   0012D8  2231               	addwfc	(getHSVval@temp_623+1)^0,f,c
  4382   0012DA  0E00               	movlw	0
  4383   0012DC  2232               	addwfc	(getHSVval@temp_623+2)^0,f,c
  4384   0012DE  0E00               	movlw	0
  4385   0012E0  2233               	addwfc	(getHSVval@temp_623+3)^0,f,c
  4386   0012E2                     
  4387                           ;color.c: 192:                 temp *= (unsigned long)Hz;
  4388   0012E2  C030  F001         	movff	getHSVval@temp_623,___lmul@multiplier
  4389   0012E6  C031  F002         	movff	getHSVval@temp_623+1,___lmul@multiplier+1
  4390   0012EA  C032  F003         	movff	getHSVval@temp_623+2,___lmul@multiplier+2
  4391   0012EE  C033  F004         	movff	getHSVval@temp_623+3,___lmul@multiplier+3
  4392   0012F2  0E3C               	movlw	60
  4393   0012F4  6E05               	movwf	___lmul@multiplicand^0,c
  4394   0012F6  0E00               	movlw	0
  4395   0012F8  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  4396   0012FA  0E00               	movlw	0
  4397   0012FC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  4398   0012FE  0E00               	movlw	0
  4399   001300  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  4400   001302  EC0B  F00F         	call	___lmul	;wreg free
  4401   001306  C001  F030         	movff	?___lmul,getHSVval@temp_623
  4402   00130A  C002  F031         	movff	?___lmul+1,getHSVval@temp_623+1
  4403   00130E  C003  F032         	movff	?___lmul+2,getHSVval@temp_623+2
  4404   001312  C004  F033         	movff	?___lmul+3,getHSVval@temp_623+3
  4405   001316                     
  4406                           ;color.c: 193:                 temp /= (unsigned long)C;
  4407   001316  C030  F001         	movff	getHSVval@temp_623,___lldiv@dividend
  4408   00131A  C031  F002         	movff	getHSVval@temp_623+1,___lldiv@dividend+1
  4409   00131E  C032  F003         	movff	getHSVval@temp_623+2,___lldiv@dividend+2
  4410   001322  C033  F004         	movff	getHSVval@temp_623+3,___lldiv@dividend+3
  4411   001326  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  4412   00132A  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  4413   00132E  6A07               	clrf	(___lldiv@divisor+2)^0,c
  4414   001330  6A08               	clrf	(___lldiv@divisor+3)^0,c
  4415   001332  EC02  F00E         	call	___lldiv	;wreg free
  4416   001336  C001  F030         	movff	?___lldiv,getHSVval@temp_623
  4417   00133A  C002  F031         	movff	?___lldiv+1,getHSVval@temp_623+1
  4418   00133E  C003  F032         	movff	?___lldiv+2,getHSVval@temp_623+2
  4419   001342  C004  F033         	movff	?___lldiv+3,getHSVval@temp_623+3
  4420   001346                     
  4421                           ;color.c: 194:                 H = (unsigned int)temp;
  4422   001346  C030  F01E         	movff	getHSVval@temp_623,getHSVval@H
  4423   00134A  C031  F01F         	movff	getHSVval@temp_623+1,getHSVval@H+1
  4424                           
  4425                           ;color.c: 195:             } else {
  4426   00134E  EF0E  F00A         	goto	l3285
  4427   001352                     l3273:
  4428                           
  4429                           ;color.c: 197:                 unsigned long temp;;color.c: 198:                 temp = 
      +                          (unsigned long)C;
  4430   001352  C03E  F034         	movff	getHSVval@C,getHSVval@temp_624
  4431   001356  C03F  F035         	movff	getHSVval@C+1,getHSVval@temp_624+1
  4432   00135A  6A36               	clrf	(getHSVval@temp_624+2)^0,c
  4433   00135C  6A37               	clrf	(getHSVval@temp_624+3)^0,c
  4434   00135E                     
  4435                           ;color.c: 199:                 temp *= 4;
  4436   00135E  0E02               	movlw	2
  4437   001360                     u2125:
  4438   001360  90D8               	bcf	status,0,c
  4439   001362  3634               	rlcf	getHSVval@temp_624^0,f,c
  4440   001364  3635               	rlcf	(getHSVval@temp_624+1)^0,f,c
  4441   001366  3636               	rlcf	(getHSVval@temp_624+2)^0,f,c
  4442   001368  3637               	rlcf	(getHSVval@temp_624+3)^0,f,c
  4443   00136A  2EE8               	decfsz	wreg,f,c
  4444   00136C  EFB0  F009         	goto	u2125
  4445   001370                     
  4446                           ;color.c: 200:                 temp -= (unsigned long)(p2->G - p2->R);
  4447   001370  500F               	movf	getHSVval@p2^0,w,c
  4448   001372  6ED9               	movwf	fsr2l,c
  4449   001374  6ADA               	clrf	fsr2h,c
  4450   001376  CFDE F010          	movff	postinc2,??_getHSVval
  4451   00137A  CFDD F011          	movff	postdec2,??_getHSVval+1
  4452   00137E  500F               	movf	getHSVval@p2^0,w,c
  4453   001380  6ED9               	movwf	fsr2l,c
  4454   001382  6ADA               	clrf	fsr2h,c
  4455   001384  0E02               	movlw	2
  4456   001386  26D9               	addwf	fsr2l,f,c
  4457   001388  CFDE F012          	movff	postinc2,??_getHSVval+2
  4458   00138C  CFDD F013          	movff	postdec2,??_getHSVval+3
  4459   001390  5010               	movf	??_getHSVval^0,w,c
  4460   001392  5C12               	subwf	(??_getHSVval+2)^0,w,c
  4461   001394  6E14               	movwf	(??_getHSVval+4)^0,c
  4462   001396  5011               	movf	(??_getHSVval+1)^0,w,c
  4463   001398  5813               	subwfb	(??_getHSVval+3)^0,w,c
  4464   00139A  6E15               	movwf	(??_getHSVval+5)^0,c
  4465   00139C  6A16               	clrf	(??_getHSVval+6)^0,c
  4466   00139E  6A17               	clrf	(??_getHSVval+7)^0,c
  4467   0013A0  5014               	movf	(??_getHSVval+4)^0,w,c
  4468   0013A2  5E34               	subwf	getHSVval@temp_624^0,f,c
  4469   0013A4  5015               	movf	(??_getHSVval+5)^0,w,c
  4470   0013A6  5A35               	subwfb	(getHSVval@temp_624+1)^0,f,c
  4471   0013A8  5016               	movf	(??_getHSVval+6)^0,w,c
  4472   0013AA  5A36               	subwfb	(getHSVval@temp_624+2)^0,f,c
  4473   0013AC  5017               	movf	(??_getHSVval+7)^0,w,c
  4474   0013AE  5A37               	subwfb	(getHSVval@temp_624+3)^0,f,c
  4475   0013B0                     
  4476                           ;color.c: 201:                 temp *= (unsigned long)Hz;
  4477   0013B0  C034  F001         	movff	getHSVval@temp_624,___lmul@multiplier
  4478   0013B4  C035  F002         	movff	getHSVval@temp_624+1,___lmul@multiplier+1
  4479   0013B8  C036  F003         	movff	getHSVval@temp_624+2,___lmul@multiplier+2
  4480   0013BC  C037  F004         	movff	getHSVval@temp_624+3,___lmul@multiplier+3
  4481   0013C0  0E3C               	movlw	60
  4482   0013C2  6E05               	movwf	___lmul@multiplicand^0,c
  4483   0013C4  0E00               	movlw	0
  4484   0013C6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  4485   0013C8  0E00               	movlw	0
  4486   0013CA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  4487   0013CC  0E00               	movlw	0
  4488   0013CE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  4489   0013D0  EC0B  F00F         	call	___lmul	;wreg free
  4490   0013D4  C001  F034         	movff	?___lmul,getHSVval@temp_624
  4491   0013D8  C002  F035         	movff	?___lmul+1,getHSVval@temp_624+1
  4492   0013DC  C003  F036         	movff	?___lmul+2,getHSVval@temp_624+2
  4493   0013E0  C004  F037         	movff	?___lmul+3,getHSVval@temp_624+3
  4494   0013E4                     
  4495                           ;color.c: 202:                 temp /= (unsigned long)C;
  4496   0013E4  C034  F001         	movff	getHSVval@temp_624,___lldiv@dividend
  4497   0013E8  C035  F002         	movff	getHSVval@temp_624+1,___lldiv@dividend+1
  4498   0013EC  C036  F003         	movff	getHSVval@temp_624+2,___lldiv@dividend+2
  4499   0013F0  C037  F004         	movff	getHSVval@temp_624+3,___lldiv@dividend+3
  4500   0013F4  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  4501   0013F8  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  4502   0013FC  6A07               	clrf	(___lldiv@divisor+2)^0,c
  4503   0013FE  6A08               	clrf	(___lldiv@divisor+3)^0,c
  4504   001400  EC02  F00E         	call	___lldiv	;wreg free
  4505   001404  C001  F034         	movff	?___lldiv,getHSVval@temp_624
  4506   001408  C002  F035         	movff	?___lldiv+1,getHSVval@temp_624+1
  4507   00140C  C003  F036         	movff	?___lldiv+2,getHSVval@temp_624+2
  4508   001410  C004  F037         	movff	?___lldiv+3,getHSVval@temp_624+3
  4509   001414                     
  4510                           ;color.c: 203:                 H = (unsigned int)temp;
  4511   001414  C034  F01E         	movff	getHSVval@temp_624,getHSVval@H
  4512   001418  C035  F01F         	movff	getHSVval@temp_624+1,getHSVval@H+1
  4513   00141C                     l3285:
  4514                           
  4515                           ;color.c: 208:     if (M == 0) {
  4516   00141C  503C               	movf	getHSVval@M^0,w,c
  4517   00141E  103D               	iorwf	(getHSVval@M+1)^0,w,c
  4518   001420  A4D8               	btfss	status,2,c
  4519   001422  EF15  F00A         	goto	u2131
  4520   001426  EF17  F00A         	goto	u2130
  4521   00142A                     u2131:
  4522   00142A  EF1D  F00A         	goto	l3289
  4523   00142E                     u2130:
  4524   00142E                     
  4525                           ;color.c: 209:         S = 0;
  4526   00142E  0E00               	movlw	0
  4527   001430  6E1D               	movwf	(getHSVval@S+1)^0,c
  4528   001432  0E00               	movlw	0
  4529   001434  6E1C               	movwf	getHSVval@S^0,c
  4530                           
  4531                           ;color.c: 210:     } else {
  4532   001436  EF59  F00A         	goto	l3297
  4533   00143A                     l3289:
  4534                           
  4535                           ;color.c: 212:         unsigned long temp;;color.c: 213:         temp = (unsigned long)C
      +                          ;
  4536   00143A  C03E  F020         	movff	getHSVval@C,getHSVval@temp_625
  4537   00143E  C03F  F021         	movff	getHSVval@C+1,getHSVval@temp_625+1
  4538   001442  6A22               	clrf	(getHSVval@temp_625+2)^0,c
  4539   001444  6A23               	clrf	(getHSVval@temp_625+3)^0,c
  4540   001446                     
  4541                           ;color.c: 214:         temp *= (unsigned long)Sz;
  4542   001446  C020  F001         	movff	getHSVval@temp_625,___lmul@multiplier
  4543   00144A  C021  F002         	movff	getHSVval@temp_625+1,___lmul@multiplier+1
  4544   00144E  C022  F003         	movff	getHSVval@temp_625+2,___lmul@multiplier+2
  4545   001452  C023  F004         	movff	getHSVval@temp_625+3,___lmul@multiplier+3
  4546   001456  0E64               	movlw	100
  4547   001458  6E05               	movwf	___lmul@multiplicand^0,c
  4548   00145A  0E00               	movlw	0
  4549   00145C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  4550   00145E  0E00               	movlw	0
  4551   001460  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  4552   001462  0E00               	movlw	0
  4553   001464  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  4554   001466  EC0B  F00F         	call	___lmul	;wreg free
  4555   00146A  C001  F020         	movff	?___lmul,getHSVval@temp_625
  4556   00146E  C002  F021         	movff	?___lmul+1,getHSVval@temp_625+1
  4557   001472  C003  F022         	movff	?___lmul+2,getHSVval@temp_625+2
  4558   001476  C004  F023         	movff	?___lmul+3,getHSVval@temp_625+3
  4559   00147A                     
  4560                           ;color.c: 215:         temp /= (unsigned long)M;
  4561   00147A  C020  F001         	movff	getHSVval@temp_625,___lldiv@dividend
  4562   00147E  C021  F002         	movff	getHSVval@temp_625+1,___lldiv@dividend+1
  4563   001482  C022  F003         	movff	getHSVval@temp_625+2,___lldiv@dividend+2
  4564   001486  C023  F004         	movff	getHSVval@temp_625+3,___lldiv@dividend+3
  4565   00148A  C03C  F005         	movff	getHSVval@M,___lldiv@divisor
  4566   00148E  C03D  F006         	movff	getHSVval@M+1,___lldiv@divisor+1
  4567   001492  6A07               	clrf	(___lldiv@divisor+2)^0,c
  4568   001494  6A08               	clrf	(___lldiv@divisor+3)^0,c
  4569   001496  EC02  F00E         	call	___lldiv	;wreg free
  4570   00149A  C001  F020         	movff	?___lldiv,getHSVval@temp_625
  4571   00149E  C002  F021         	movff	?___lldiv+1,getHSVval@temp_625+1
  4572   0014A2  C003  F022         	movff	?___lldiv+2,getHSVval@temp_625+2
  4573   0014A6  C004  F023         	movff	?___lldiv+3,getHSVval@temp_625+3
  4574   0014AA                     
  4575                           ;color.c: 216:         S = (unsigned int)temp;
  4576   0014AA  C020  F01C         	movff	getHSVval@temp_625,getHSVval@S
  4577   0014AE  C021  F01D         	movff	getHSVval@temp_625+1,getHSVval@S+1
  4578   0014B2                     l3297:
  4579                           
  4580                           ;color.c: 219:     p1->H = H;
  4581   0014B2  500E               	movf	getHSVval@p1^0,w,c
  4582   0014B4  6ED9               	movwf	fsr2l,c
  4583   0014B6  6ADA               	clrf	fsr2h,c
  4584   0014B8  C01E  FFDE         	movff	getHSVval@H,postinc2
  4585   0014BC  C01F  FFDD         	movff	getHSVval@H+1,postdec2
  4586   0014C0                     
  4587                           ;color.c: 220:     p1->S = S;
  4588   0014C0  500E               	movf	getHSVval@p1^0,w,c
  4589   0014C2  6ED9               	movwf	fsr2l,c
  4590   0014C4  6ADA               	clrf	fsr2h,c
  4591   0014C6  0E02               	movlw	2
  4592   0014C8  26D9               	addwf	fsr2l,f,c
  4593   0014CA  C01C  FFDE         	movff	getHSVval@S,postinc2
  4594   0014CE  C01D  FFDD         	movff	getHSVval@S+1,postdec2
  4595   0014D2                     
  4596                           ;color.c: 221:     p1->V = M;
  4597   0014D2  500E               	movf	getHSVval@p1^0,w,c
  4598   0014D4  6ED9               	movwf	fsr2l,c
  4599   0014D6  6ADA               	clrf	fsr2h,c
  4600   0014D8  0E04               	movlw	4
  4601   0014DA  26D9               	addwf	fsr2l,f,c
  4602   0014DC  C03C  FFDE         	movff	getHSVval@M,postinc2
  4603   0014E0  C03D  FFDD         	movff	getHSVval@M+1,postdec2
  4604   0014E4  0012               	return		;funcret
  4605   0014E6                     __end_of_getHSVval:
  4606                           	callstack 0
  4607                           
  4608 ;; *************** function _minRGB *****************
  4609 ;; Defined at:
  4610 ;;		line 123 in file "color.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  p               1    6[COMRAM] PTR struct RGBC_val
  4613 ;;		 -> main@measured_colour(8), 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;		None
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  2    6[COMRAM] unsigned int 
  4618 ;; Registers used:
  4619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4625 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4626 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4628 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4629 ;;Total ram usage:        4 bytes
  4630 ;; Hardware stack levels used: 1
  4631 ;; Hardware stack levels required when called: 2
  4632 ;; This function calls:
  4633 ;;		_min
  4634 ;; This function is called by:
  4635 ;;		_getHSVval
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text26
  4640   002050                     __ptext26:
  4641                           	callstack 0
  4642   002050                     _minRGB:
  4643                           	callstack 27
  4644   002050                     
  4645                           ;color.c: 123: unsigned int minRGB(struct RGBC_val *p);color.c: 124: {;color.c: 125:    
      +                           return(min(min(p->R,p->G),p->B));
  4646   002050  5007               	movf	minRGB@p^0,w,c
  4647   002052  6ED9               	movwf	fsr2l,c
  4648   002054  6ADA               	clrf	fsr2h,c
  4649   002056  CFDE F001          	movff	postinc2,min@a
  4650   00205A  CFDD F002          	movff	postdec2,min@a+1
  4651   00205E  5007               	movf	minRGB@p^0,w,c
  4652   002060  6ED9               	movwf	fsr2l,c
  4653   002062  6ADA               	clrf	fsr2h,c
  4654   002064  0E02               	movlw	2
  4655   002066  26D9               	addwf	fsr2l,f,c
  4656   002068  CFDE F003          	movff	postinc2,min@b
  4657   00206C  CFDD F004          	movff	postdec2,min@b+1
  4658   002070  ECBD  F011         	call	_min	;wreg free
  4659   002074  C001  F009         	movff	?_min,_minRGB$3155
  4660   002078  C002  F00A         	movff	?_min+1,_minRGB$3155+1
  4661                           
  4662                           ;color.c: 123: unsigned int minRGB(struct RGBC_val *p);color.c: 124: {;color.c: 125:    
      +                           return(min(min(p->R,p->G),p->B));
  4663   00207C  C009  F001         	movff	_minRGB$3155,min@a
  4664   002080  C00A  F002         	movff	_minRGB$3155+1,min@a+1
  4665   002084  5007               	movf	minRGB@p^0,w,c
  4666   002086  6ED9               	movwf	fsr2l,c
  4667   002088  6ADA               	clrf	fsr2h,c
  4668   00208A  0E04               	movlw	4
  4669   00208C  26D9               	addwf	fsr2l,f,c
  4670   00208E  CFDE F003          	movff	postinc2,min@b
  4671   002092  CFDD F004          	movff	postdec2,min@b+1
  4672   002096  ECBD  F011         	call	_min	;wreg free
  4673   00209A  C001  F007         	movff	?_min,?_minRGB
  4674   00209E  C002  F008         	movff	?_min+1,?_minRGB+1
  4675   0020A2  0012               	return		;funcret
  4676   0020A4                     __end_of_minRGB:
  4677                           	callstack 0
  4678                           
  4679 ;; *************** function _min *****************
  4680 ;; Defined at:
  4681 ;;		line 111 in file "color.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;  a               2    0[COMRAM] unsigned int 
  4684 ;;  b               2    2[COMRAM] unsigned int 
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;  min_val         2    4[COMRAM] unsigned int 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  2    0[COMRAM] unsigned int 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4699 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4700 ;;Total ram usage:        6 bytes
  4701 ;; Hardware stack levels used: 1
  4702 ;; Hardware stack levels required when called: 1
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_minRGB
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text27
  4711   00237A                     __ptext27:
  4712                           	callstack 0
  4713   00237A                     _min:
  4714                           	callstack 27
  4715   00237A                     
  4716                           ;color.c: 111: unsigned int min(unsigned int a, unsigned int b);color.c: 112: {;color.c:
      +                           113:     unsigned int min_val = b;
  4717   00237A  C003  F005         	movff	min@b,min@min_val
  4718   00237E  C004  F006         	movff	min@b+1,min@min_val+1
  4719   002382                     
  4720                           ;color.c: 114:     if (a < b) {min_val = a;}
  4721   002382  5003               	movf	min@b^0,w,c
  4722   002384  5C01               	subwf	min@a^0,w,c
  4723   002386  5004               	movf	(min@b+1)^0,w,c
  4724   002388  5802               	subwfb	(min@a+1)^0,w,c
  4725   00238A  B0D8               	btfsc	status,0,c
  4726   00238C  EFCA  F011         	goto	u1781
  4727   002390  EFCC  F011         	goto	u1780
  4728   002394                     u1781:
  4729   002394  EFD0  F011         	goto	l97
  4730   002398                     u1780:
  4731   002398  C001  F005         	movff	min@a,min@min_val
  4732   00239C  C002  F006         	movff	min@a+1,min@min_val+1
  4733   0023A0                     l97:
  4734                           
  4735                           ;color.c: 115:     return min_val;
  4736   0023A0  C005  F001         	movff	min@min_val,?_min
  4737   0023A4  C006  F002         	movff	min@min_val+1,?_min+1
  4738   0023A8  0012               	return		;funcret
  4739   0023AA                     __end_of_min:
  4740                           	callstack 0
  4741                           
  4742 ;; *************** function _maxRGB *****************
  4743 ;; Defined at:
  4744 ;;		line 118 in file "color.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;  p               1    6[COMRAM] PTR struct RGBC_val
  4747 ;;		 -> main@measured_colour(8), 
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;		None
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  2    6[COMRAM] unsigned int 
  4752 ;; Registers used:
  4753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4759 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4762 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4763 ;;Total ram usage:        4 bytes
  4764 ;; Hardware stack levels used: 1
  4765 ;; Hardware stack levels required when called: 2
  4766 ;; This function calls:
  4767 ;;		_max
  4768 ;; This function is called by:
  4769 ;;		_getHSVval
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text28
  4774   0020A4                     __ptext28:
  4775                           	callstack 0
  4776   0020A4                     _maxRGB:
  4777                           	callstack 27
  4778   0020A4                     
  4779                           ;color.c: 118: unsigned int maxRGB(struct RGBC_val *p);color.c: 119: {;color.c: 120:    
      +                           return(max(max(p->R,p->G),p->B));
  4780   0020A4  5007               	movf	maxRGB@p^0,w,c
  4781   0020A6  6ED9               	movwf	fsr2l,c
  4782   0020A8  6ADA               	clrf	fsr2h,c
  4783   0020AA  CFDE F001          	movff	postinc2,max@a
  4784   0020AE  CFDD F002          	movff	postdec2,max@a+1
  4785   0020B2  5007               	movf	maxRGB@p^0,w,c
  4786   0020B4  6ED9               	movwf	fsr2l,c
  4787   0020B6  6ADA               	clrf	fsr2h,c
  4788   0020B8  0E02               	movlw	2
  4789   0020BA  26D9               	addwf	fsr2l,f,c
  4790   0020BC  CFDE F003          	movff	postinc2,max@b
  4791   0020C0  CFDD F004          	movff	postdec2,max@b+1
  4792   0020C4  ECD5  F011         	call	_max	;wreg free
  4793   0020C8  C001  F009         	movff	?_max,_maxRGB$3154
  4794   0020CC  C002  F00A         	movff	?_max+1,_maxRGB$3154+1
  4795                           
  4796                           ;color.c: 118: unsigned int maxRGB(struct RGBC_val *p);color.c: 119: {;color.c: 120:    
      +                           return(max(max(p->R,p->G),p->B));
  4797   0020D0  C009  F001         	movff	_maxRGB$3154,max@a
  4798   0020D4  C00A  F002         	movff	_maxRGB$3154+1,max@a+1
  4799   0020D8  5007               	movf	maxRGB@p^0,w,c
  4800   0020DA  6ED9               	movwf	fsr2l,c
  4801   0020DC  6ADA               	clrf	fsr2h,c
  4802   0020DE  0E04               	movlw	4
  4803   0020E0  26D9               	addwf	fsr2l,f,c
  4804   0020E2  CFDE F003          	movff	postinc2,max@b
  4805   0020E6  CFDD F004          	movff	postdec2,max@b+1
  4806   0020EA  ECD5  F011         	call	_max	;wreg free
  4807   0020EE  C001  F007         	movff	?_max,?_maxRGB
  4808   0020F2  C002  F008         	movff	?_max+1,?_maxRGB+1
  4809   0020F6  0012               	return		;funcret
  4810   0020F8                     __end_of_maxRGB:
  4811                           	callstack 0
  4812                           
  4813 ;; *************** function _max *****************
  4814 ;; Defined at:
  4815 ;;		line 104 in file "color.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;  a               2    0[COMRAM] unsigned int 
  4818 ;;  b               2    2[COMRAM] unsigned int 
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;  max_val         2    4[COMRAM] unsigned int 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  2    0[COMRAM] unsigned int 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4830 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4833 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4834 ;;Total ram usage:        6 bytes
  4835 ;; Hardware stack levels used: 1
  4836 ;; Hardware stack levels required when called: 1
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_maxRGB
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           	psect	text29
  4845   0023AA                     __ptext29:
  4846                           	callstack 0
  4847   0023AA                     _max:
  4848                           	callstack 27
  4849   0023AA                     
  4850                           ;color.c: 104: unsigned int max(unsigned int a, unsigned int b);color.c: 105: {;color.c:
      +                           106:     unsigned int max_val = b;
  4851   0023AA  C003  F005         	movff	max@b,max@max_val
  4852   0023AE  C004  F006         	movff	max@b+1,max@max_val+1
  4853   0023B2                     
  4854                           ;color.c: 107:     if (a > b) {max_val = a;}
  4855   0023B2  5001               	movf	max@a^0,w,c
  4856   0023B4  5C03               	subwf	max@b^0,w,c
  4857   0023B6  5002               	movf	(max@a+1)^0,w,c
  4858   0023B8  5804               	subwfb	(max@b+1)^0,w,c
  4859   0023BA  B0D8               	btfsc	status,0,c
  4860   0023BC  EFE2  F011         	goto	u1771
  4861   0023C0  EFE4  F011         	goto	u1770
  4862   0023C4                     u1771:
  4863   0023C4  EFE8  F011         	goto	l93
  4864   0023C8                     u1770:
  4865   0023C8  C001  F005         	movff	max@a,max@max_val
  4866   0023CC  C002  F006         	movff	max@a+1,max@max_val+1
  4867   0023D0                     l93:
  4868                           
  4869                           ;color.c: 108:     return max_val;
  4870   0023D0  C005  F001         	movff	max@max_val,?_max
  4871   0023D4  C006  F002         	movff	max@max_val+1,?_max+1
  4872   0023D8  0012               	return		;funcret
  4873   0023DA                     __end_of_max:
  4874                           	callstack 0
  4875                           
  4876 ;; *************** function ___lmul *****************
  4877 ;; Defined at:
  4878 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  multiplier      4    0[COMRAM] unsigned long 
  4881 ;;  multiplicand    4    4[COMRAM] unsigned long 
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  product         4    8[COMRAM] unsigned long 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  4    0[COMRAM] unsigned long 
  4886 ;; Registers used:
  4887 ;;		wreg, status,2, status,0
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4893 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4894 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4896 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4897 ;;Total ram usage:       12 bytes
  4898 ;; Hardware stack levels used: 1
  4899 ;; Hardware stack levels required when called: 1
  4900 ;; This function calls:
  4901 ;;		Nothing
  4902 ;; This function is called by:
  4903 ;;		_getHSVval
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text30
  4908   001E16                     __ptext30:
  4909                           	callstack 0
  4910   001E16                     ___lmul:
  4911                           	callstack 28
  4912   001E16  0E00               	movlw	0
  4913   001E18  6E09               	movwf	___lmul@product^0,c
  4914   001E1A  0E00               	movlw	0
  4915   001E1C  6E0A               	movwf	(___lmul@product+1)^0,c
  4916   001E1E  0E00               	movlw	0
  4917   001E20  6E0B               	movwf	(___lmul@product+2)^0,c
  4918   001E22  0E00               	movlw	0
  4919   001E24  6E0C               	movwf	(___lmul@product+3)^0,c
  4920   001E26                     l3135:
  4921   001E26  A001               	btfss	___lmul@multiplier^0,0,c
  4922   001E28  EF18  F00F         	goto	u1841
  4923   001E2C  EF1A  F00F         	goto	u1840
  4924   001E30                     u1841:
  4925   001E30  EF22  F00F         	goto	l3139
  4926   001E34                     u1840:
  4927   001E34  5005               	movf	___lmul@multiplicand^0,w,c
  4928   001E36  2609               	addwf	___lmul@product^0,f,c
  4929   001E38  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  4930   001E3A  220A               	addwfc	(___lmul@product+1)^0,f,c
  4931   001E3C  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  4932   001E3E  220B               	addwfc	(___lmul@product+2)^0,f,c
  4933   001E40  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  4934   001E42  220C               	addwfc	(___lmul@product+3)^0,f,c
  4935   001E44                     l3139:
  4936   001E44  90D8               	bcf	status,0,c
  4937   001E46  3605               	rlcf	___lmul@multiplicand^0,f,c
  4938   001E48  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  4939   001E4A  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  4940   001E4C  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  4941   001E4E  90D8               	bcf	status,0,c
  4942   001E50  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  4943   001E52  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  4944   001E54  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  4945   001E56  3201               	rrcf	___lmul@multiplier^0,f,c
  4946   001E58  5001               	movf	___lmul@multiplier^0,w,c
  4947   001E5A  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  4948   001E5C  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  4949   001E5E  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  4950   001E60  A4D8               	btfss	status,2,c
  4951   001E62  EF35  F00F         	goto	u1851
  4952   001E66  EF37  F00F         	goto	u1850
  4953   001E6A                     u1851:
  4954   001E6A  EF13  F00F         	goto	l3135
  4955   001E6E                     u1850:
  4956   001E6E  C009  F001         	movff	___lmul@product,?___lmul
  4957   001E72  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  4958   001E76  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  4959   001E7A  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  4960   001E7E  0012               	return		;funcret
  4961   001E80                     __end_of___lmul:
  4962                           	callstack 0
  4963                           
  4964 ;; *************** function ___lldiv *****************
  4965 ;; Defined at:
  4966 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  dividend        4    0[COMRAM] unsigned long 
  4969 ;;  divisor         4    4[COMRAM] unsigned long 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  quotient        4    8[COMRAM] unsigned long 
  4972 ;;  counter         1   12[COMRAM] unsigned char 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  4    0[COMRAM] unsigned long 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4982 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4983 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4985 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4986 ;;Total ram usage:       13 bytes
  4987 ;; Hardware stack levels used: 1
  4988 ;; Hardware stack levels required when called: 1
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_getHSVval
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text31
  4997   001C04                     __ptext31:
  4998                           	callstack 0
  4999   001C04                     ___lldiv:
  5000                           	callstack 28
  5001   001C04  0E00               	movlw	0
  5002   001C06  6E09               	movwf	___lldiv@quotient^0,c
  5003   001C08  0E00               	movlw	0
  5004   001C0A  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  5005   001C0C  0E00               	movlw	0
  5006   001C0E  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  5007   001C10  0E00               	movlw	0
  5008   001C12  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  5009   001C14  5005               	movf	___lldiv@divisor^0,w,c
  5010   001C16  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  5011   001C18  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  5012   001C1A  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  5013   001C1C  B4D8               	btfsc	status,2,c
  5014   001C1E  EF13  F00E         	goto	u1861
  5015   001C22  EF15  F00E         	goto	u1860
  5016   001C26                     u1861:
  5017   001C26  EF4B  F00E         	goto	l725
  5018   001C2A                     u1860:
  5019   001C2A  0E01               	movlw	1
  5020   001C2C  6E0D               	movwf	___lldiv@counter^0,c
  5021   001C2E  EF1F  F00E         	goto	l3151
  5022   001C32                     l3149:
  5023   001C32  90D8               	bcf	status,0,c
  5024   001C34  3605               	rlcf	___lldiv@divisor^0,f,c
  5025   001C36  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  5026   001C38  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  5027   001C3A  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  5028   001C3C  2A0D               	incf	___lldiv@counter^0,f,c
  5029   001C3E                     l3151:
  5030   001C3E  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  5031   001C40  EF24  F00E         	goto	u1871
  5032   001C44  EF26  F00E         	goto	u1870
  5033   001C48                     u1871:
  5034   001C48  EF19  F00E         	goto	l3149
  5035   001C4C                     u1870:
  5036   001C4C                     l3153:
  5037   001C4C  90D8               	bcf	status,0,c
  5038   001C4E  3609               	rlcf	___lldiv@quotient^0,f,c
  5039   001C50  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  5040   001C52  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  5041   001C54  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  5042   001C56  5005               	movf	___lldiv@divisor^0,w,c
  5043   001C58  5C01               	subwf	___lldiv@dividend^0,w,c
  5044   001C5A  5006               	movf	(___lldiv@divisor+1)^0,w,c
  5045   001C5C  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  5046   001C5E  5007               	movf	(___lldiv@divisor+2)^0,w,c
  5047   001C60  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  5048   001C62  5008               	movf	(___lldiv@divisor+3)^0,w,c
  5049   001C64  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  5050   001C66  A0D8               	btfss	status,0,c
  5051   001C68  EF38  F00E         	goto	u1881
  5052   001C6C  EF3A  F00E         	goto	u1880
  5053   001C70                     u1881:
  5054   001C70  EF43  F00E         	goto	l3161
  5055   001C74                     u1880:
  5056   001C74  5005               	movf	___lldiv@divisor^0,w,c
  5057   001C76  5E01               	subwf	___lldiv@dividend^0,f,c
  5058   001C78  5006               	movf	(___lldiv@divisor+1)^0,w,c
  5059   001C7A  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  5060   001C7C  5007               	movf	(___lldiv@divisor+2)^0,w,c
  5061   001C7E  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  5062   001C80  5008               	movf	(___lldiv@divisor+3)^0,w,c
  5063   001C82  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  5064   001C84  8009               	bsf	___lldiv@quotient^0,0,c
  5065   001C86                     l3161:
  5066   001C86  90D8               	bcf	status,0,c
  5067   001C88  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  5068   001C8A  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  5069   001C8C  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  5070   001C8E  3205               	rrcf	___lldiv@divisor^0,f,c
  5071   001C90  2E0D               	decfsz	___lldiv@counter^0,f,c
  5072   001C92  EF26  F00E         	goto	l3153
  5073   001C96                     l725:
  5074   001C96  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5075   001C9A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5076   001C9E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5077   001CA2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5078   001CA6  0012               	return		;funcret
  5079   001CA8                     __end_of___lldiv:
  5080                           	callstack 0
  5081                           
  5082 ;; *************** function _color_click_init *****************
  5083 ;; Defined at:
  5084 ;;		line 4 in file "color.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;		None
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;		None
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  1    wreg      void 
  5091 ;; Registers used:
  5092 ;;		wreg, status,2, status,0, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5101 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5102 ;;Total ram usage:        1 bytes
  5103 ;; Hardware stack levels used: 1
  5104 ;; Hardware stack levels required when called: 4
  5105 ;; This function calls:
  5106 ;;		_I2C_2_Master_Init
  5107 ;;		_color_writetoaddr
  5108 ;; This function is called by:
  5109 ;;		_main
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           	psect	text32
  5114   002346                     __ptext32:
  5115                           	callstack 0
  5116   002346                     _color_click_init:
  5117                           	callstack 26
  5118   002346                     
  5119                           ;color.c: 7:     I2C_2_Master_Init();
  5120   002346  EC04  F012         	call	_I2C_2_Master_Init	;wreg free
  5121   00234A                     
  5122                           ;color.c: 10:   color_writetoaddr(0x00, 0x01);
  5123   00234A  0E01               	movlw	1
  5124   00234C  6E03               	movwf	color_writetoaddr@value^0,c
  5125   00234E  0E00               	movlw	0
  5126   002350  EC3F  F012         	call	_color_writetoaddr
  5127   002354                     
  5128                           ;color.c: 11:     _delay((unsigned long)((3)*(64000000/4000.0)));
  5129   002354  0E3F               	movlw	63
  5130   002356  6E05               	movwf	??_color_click_init^0,c
  5131   002358  0E55               	movlw	85
  5132   00235A                     u2657:
  5133   00235A  2EE8               	decfsz	wreg,f,c
  5134   00235C  D7FE               	bra	u2657
  5135   00235E  2E05               	decfsz	??_color_click_init^0,f,c
  5136   002360  D7FC               	bra	u2657
  5137   002362  0000               	nop	
  5138   002364                     
  5139                           ;color.c: 14:  color_writetoaddr(0x00, 0x03);
  5140   002364  0E03               	movlw	3
  5141   002366  6E03               	movwf	color_writetoaddr@value^0,c
  5142   002368  0E00               	movlw	0
  5143   00236A  EC3F  F012         	call	_color_writetoaddr
  5144   00236E                     
  5145                           ;color.c: 17:  color_writetoaddr(0x01, 0xD5);
  5146   00236E  0ED5               	movlw	213
  5147   002370  6E03               	movwf	color_writetoaddr@value^0,c
  5148   002372  0E01               	movlw	1
  5149   002374  EC3F  F012         	call	_color_writetoaddr
  5150   002378  0012               	return		;funcret
  5151   00237A                     __end_of_color_click_init:
  5152                           	callstack 0
  5153                           
  5154 ;; *************** function _color_writetoaddr *****************
  5155 ;; Defined at:
  5156 ;;		line 20 in file "color.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  address         1    wreg     unsigned char 
  5159 ;;  value           1    2[COMRAM] unsigned char 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  address         1    3[COMRAM] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      void 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5171 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5174 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5175 ;;Total ram usage:        2 bytes
  5176 ;; Hardware stack levels used: 1
  5177 ;; Hardware stack levels required when called: 3
  5178 ;; This function calls:
  5179 ;;		_I2C_2_Master_Start
  5180 ;;		_I2C_2_Master_Stop
  5181 ;;		_I2C_2_Master_Write
  5182 ;; This function is called by:
  5183 ;;		_color_click_init
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text33
  5188   00247E                     __ptext33:
  5189                           	callstack 0
  5190   00247E                     _color_writetoaddr:
  5191                           	callstack 26
  5192                           
  5193                           ;incstack = 0
  5194                           ;color_writetoaddr@address stored from wreg
  5195   00247E  6E04               	movwf	color_writetoaddr@address^0,c
  5196   002480                     
  5197                           ;color.c: 21:     I2C_2_Master_Start();
  5198   002480  EC90  F012         	call	_I2C_2_Master_Start	;wreg free
  5199                           
  5200                           ;color.c: 22:     I2C_2_Master_Write(0x52 | 0x00);
  5201   002484  0E52               	movlw	82
  5202   002486  EC74  F012         	call	_I2C_2_Master_Write
  5203                           
  5204                           ;color.c: 23:     I2C_2_Master_Write(0x80 | address);
  5205   00248A  5004               	movf	color_writetoaddr@address^0,w,c
  5206   00248C  0980               	iorlw	128
  5207   00248E  EC74  F012         	call	_I2C_2_Master_Write
  5208                           
  5209                           ;color.c: 24:     I2C_2_Master_Write(value);
  5210   002492  5003               	movf	color_writetoaddr@value^0,w,c
  5211   002494  EC74  F012         	call	_I2C_2_Master_Write
  5212                           
  5213                           ;color.c: 25:     I2C_2_Master_Stop();
  5214   002498  EC8B  F012         	call	_I2C_2_Master_Stop	;wreg free
  5215   00249C  0012               	return		;funcret
  5216   00249E                     __end_of_color_writetoaddr:
  5217                           	callstack 0
  5218                           
  5219 ;; *************** function _I2C_2_Master_Write *****************
  5220 ;; Defined at:
  5221 ;;		line 45 in file "i2c.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  data_byte       1    wreg     unsigned char 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  data_byte       1    1[COMRAM] unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  1    wreg      void 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0, cstack
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5236 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5238 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5239 ;;Total ram usage:        1 bytes
  5240 ;; Hardware stack levels used: 1
  5241 ;; Hardware stack levels required when called: 2
  5242 ;; This function calls:
  5243 ;;		_I2C_2_Master_Idle
  5244 ;; This function is called by:
  5245 ;;		_color_writetoaddr
  5246 ;;		_color_read_Red
  5247 ;;		_color_read_Blue
  5248 ;;		_color_read_Green
  5249 ;;		_color_read_Clear
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text34
  5254   0024E8                     __ptext34:
  5255                           	callstack 0
  5256   0024E8                     _I2C_2_Master_Write:
  5257                           	callstack 26
  5258                           
  5259                           ;incstack = 0
  5260                           ;I2C_2_Master_Write@data_byte stored from wreg
  5261   0024E8  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  5262   0024EA                     
  5263                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5264   0024EA  EC19  F012         	call	_I2C_2_Master_Idle	;wreg free
  5265   0024EE                     
  5266                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5267   0024EE  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5268   0024F2  0012               	return		;funcret
  5269   0024F4                     __end_of_I2C_2_Master_Write:
  5270                           	callstack 0
  5271                           
  5272 ;; *************** function _I2C_2_Master_Stop *****************
  5273 ;; Defined at:
  5274 ;;		line 39 in file "i2c.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5292 ;;Total ram usage:        0 bytes
  5293 ;; Hardware stack levels used: 1
  5294 ;; Hardware stack levels required when called: 2
  5295 ;; This function calls:
  5296 ;;		_I2C_2_Master_Idle
  5297 ;; This function is called by:
  5298 ;;		_color_writetoaddr
  5299 ;;		_color_read_Red
  5300 ;;		_color_read_Blue
  5301 ;;		_color_read_Green
  5302 ;;		_color_read_Clear
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           	psect	text35
  5307   002516                     __ptext35:
  5308                           	callstack 0
  5309   002516                     _I2C_2_Master_Stop:
  5310                           	callstack 26
  5311   002516                     
  5312                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5313   002516  EC19  F012         	call	_I2C_2_Master_Idle	;wreg free
  5314   00251A                     
  5315                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5316   00251A  010E               	movlb	14	; () banked
  5317   00251C  85DA               	bsf	218,2,b	;volatile
  5318   00251E                     
  5319                           ; BSR set to: 14
  5320   00251E  0012               	return		;funcret
  5321   002520                     __end_of_I2C_2_Master_Stop:
  5322                           	callstack 0
  5323                           
  5324 ;; *************** function _I2C_2_Master_Start *****************
  5325 ;; Defined at:
  5326 ;;		line 27 in file "i2c.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;		None
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;		None
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2, status,0, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5344 ;;Total ram usage:        0 bytes
  5345 ;; Hardware stack levels used: 1
  5346 ;; Hardware stack levels required when called: 2
  5347 ;; This function calls:
  5348 ;;		_I2C_2_Master_Idle
  5349 ;; This function is called by:
  5350 ;;		_color_writetoaddr
  5351 ;;		_color_read_Red
  5352 ;;		_color_read_Blue
  5353 ;;		_color_read_Green
  5354 ;;		_color_read_Clear
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text36
  5359   002520                     __ptext36:
  5360                           	callstack 0
  5361   002520                     _I2C_2_Master_Start:
  5362                           	callstack 26
  5363   002520                     
  5364                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5365   002520  EC19  F012         	call	_I2C_2_Master_Idle	;wreg free
  5366   002524                     
  5367                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5368   002524  010E               	movlb	14	; () banked
  5369   002526  81DA               	bsf	218,0,b	;volatile
  5370   002528                     
  5371                           ; BSR set to: 14
  5372   002528  0012               	return		;funcret
  5373   00252A                     __end_of_I2C_2_Master_Start:
  5374                           	callstack 0
  5375                           
  5376 ;; *************** function _I2C_2_Master_Idle *****************
  5377 ;; Defined at:
  5378 ;;		line 22 in file "i2c.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  1    wreg      void 
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, status,0
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5396 ;;Total ram usage:        1 bytes
  5397 ;; Hardware stack levels used: 1
  5398 ;; Hardware stack levels required when called: 1
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_I2C_2_Master_Start
  5403 ;;		_I2C_2_Master_RepStart
  5404 ;;		_I2C_2_Master_Stop
  5405 ;;		_I2C_2_Master_Write
  5406 ;;		_I2C_2_Master_Read
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           	psect	text37
  5411   002432                     __ptext37:
  5412                           	callstack 0
  5413   002432                     _I2C_2_Master_Idle:
  5414                           	callstack 26
  5415   002432                     l291:
  5416   002432  010E               	movlb	14	; () banked
  5417   002434  B5D8               	btfsc	216,2,b	;volatile
  5418   002436  EF1F  F012         	goto	u1591
  5419   00243A  EF21  F012         	goto	u1590
  5420   00243E                     u1591:
  5421   00243E  EF19  F012         	goto	l291
  5422   002442                     u1590:
  5423   002442                     
  5424                           ; BSR set to: 14
  5425   002442  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5426   002446  0E1F               	movlw	31
  5427   002448  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  5428   00244A  A4D8               	btfss	status,2,c
  5429   00244C  EF2A  F012         	goto	u1601
  5430   002450  EF2C  F012         	goto	u1600
  5431   002454                     u1601:
  5432   002454  EF19  F012         	goto	l291
  5433   002458                     u1600:
  5434   002458                     
  5435                           ; BSR set to: 14
  5436   002458  0012               	return		;funcret
  5437   00245A                     __end_of_I2C_2_Master_Idle:
  5438                           	callstack 0
  5439                           
  5440 ;; *************** function _I2C_2_Master_Init *****************
  5441 ;; Defined at:
  5442 ;;		line 4 in file "i2c.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;		None
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;		None
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  1    wreg      void 
  5449 ;; Registers used:
  5450 ;;		wreg, status,2
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5460 ;;Total ram usage:        0 bytes
  5461 ;; Hardware stack levels used: 1
  5462 ;; Hardware stack levels required when called: 1
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_color_click_init
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text38
  5471   002408                     __ptext38:
  5472                           	callstack 0
  5473   002408                     _I2C_2_Master_Init:
  5474                           	callstack 28
  5475   002408                     
  5476                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  5477   002408  010E               	movlb	14	; () banked
  5478   00240A  51D9               	movf	217,w,b	;volatile
  5479   00240C  0BF0               	andlw	-16
  5480   00240E  0908               	iorlw	8
  5481   002410  6FD9               	movwf	217,b	;volatile
  5482   002412                     
  5483                           ; BSR set to: 14
  5484                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  5485   002412  8BD9               	bsf	217,5,b	;volatile
  5486                           
  5487                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  5488   002414  0E9F               	movlw	159
  5489   002416  6FD6               	movwf	214,b	;volatile
  5490   002418                     
  5491                           ; BSR set to: 14
  5492                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  5493   002418  8A84               	bsf	132,5,c	;volatile
  5494   00241A                     
  5495                           ; BSR set to: 14
  5496                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  5497   00241A  8C84               	bsf	132,6,c	;volatile
  5498   00241C                     
  5499                           ; BSR set to: 14
  5500                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  5501   00241C  9BA7               	bcf	167,5,b	;volatile
  5502   00241E                     
  5503                           ; BSR set to: 14
  5504                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  5505   00241E  9DA7               	bcf	167,6,b	;volatile
  5506                           
  5507                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  5508   002420  0E1D               	movlw	29
  5509   002422  6F1D               	movwf	29,b	;volatile
  5510                           
  5511                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  5512   002424  0E1E               	movlw	30
  5513   002426  6F1C               	movwf	28,b	;volatile
  5514                           
  5515                           ;i2c.c: 18:   RD5PPS=0x1C;
  5516   002428  0E1C               	movlw	28
  5517   00242A  6F6F               	movwf	111,b	;volatile
  5518                           
  5519                           ;i2c.c: 19:   RD6PPS=0x1B;
  5520   00242C  0E1B               	movlw	27
  5521   00242E  6F70               	movwf	112,b	;volatile
  5522   002430                     
  5523                           ; BSR set to: 14
  5524   002430  0012               	return		;funcret
  5525   002432                     __end_of_I2C_2_Master_Init:
  5526                           	callstack 0
  5527                           
  5528 ;; *************** function _buggy_lights_init *****************
  5529 ;; Defined at:
  5530 ;;		line 4 in file "buggy_lights.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		None
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5548 ;;Total ram usage:        0 bytes
  5549 ;; Hardware stack levels used: 1
  5550 ;; Hardware stack levels required when called: 1
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_main
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           	psect	text39
  5559   0023DA                     __ptext39:
  5560                           	callstack 0
  5561   0023DA                     _buggy_lights_init:
  5562                           	callstack 29
  5563   0023DA                     
  5564                           ;buggy_lights.c: 8:         TRISDbits.TRISD4 = 0;
  5565   0023DA  9884               	bcf	132,4,c	;volatile
  5566                           
  5567                           ;buggy_lights.c: 9:         TRISHbits.TRISH1 = 0;
  5568   0023DC  9288               	bcf	136,1,c	;volatile
  5569                           
  5570                           ;buggy_lights.c: 10:         TRISDbits.TRISD3 = 0;
  5571   0023DE  9684               	bcf	132,3,c	;volatile
  5572                           
  5573                           ;buggy_lights.c: 11:         TRISFbits.TRISF0 = 0;
  5574   0023E0  9086               	bcf	134,0,c	;volatile
  5575                           
  5576                           ;buggy_lights.c: 12:         TRISHbits.TRISH0 = 0;
  5577   0023E2  9088               	bcf	136,0,c	;volatile
  5578                           
  5579                           ;buggy_lights.c: 14:         LATDbits.LATD4 = 0;
  5580   0023E4  987C               	bcf	124,4,c	;volatile
  5581                           
  5582                           ;buggy_lights.c: 15:         LATHbits.LATH1 = 0;
  5583   0023E6  9280               	bcf	128,1,c	;volatile
  5584                           
  5585                           ;buggy_lights.c: 16:         LATDbits.LATD3 = 0;
  5586   0023E8  967C               	bcf	124,3,c	;volatile
  5587                           
  5588                           ;buggy_lights.c: 17:         LATFbits.LATF0 = 0;
  5589   0023EA  907E               	bcf	126,0,c	;volatile
  5590                           
  5591                           ;buggy_lights.c: 18:         LATHbits.LATH0 = 0;
  5592   0023EC  9080               	bcf	128,0,c	;volatile
  5593                           
  5594                           ;buggy_lights.c: 24:             TRISGbits.TRISG1 = 0;
  5595   0023EE  9287               	bcf	135,1,c	;volatile
  5596                           
  5597                           ;buggy_lights.c: 25:             TRISAbits.TRISA4 = 0;
  5598   0023F0  9881               	bcf	129,4,c	;volatile
  5599                           
  5600                           ;buggy_lights.c: 26:             TRISFbits.TRISF7 = 0;
  5601   0023F2  9E86               	bcf	134,7,c	;volatile
  5602                           
  5603                           ;buggy_lights.c: 28:             LATGbits.LATG1 = 0;
  5604   0023F4  927F               	bcf	127,1,c	;volatile
  5605                           
  5606                           ;buggy_lights.c: 29:             LATAbits.LATA4 = 0;
  5607   0023F6  9879               	bcf	121,4,c	;volatile
  5608                           
  5609                           ;buggy_lights.c: 30:             LATFbits.LATF7 = 0;
  5610   0023F8  9E7E               	bcf	126,7,c	;volatile
  5611                           
  5612                           ;buggy_lights.c: 34:             TRISGbits.TRISG0 = 0;
  5613   0023FA  9087               	bcf	135,0,c	;volatile
  5614                           
  5615                           ;buggy_lights.c: 35:             TRISEbits.TRISE7 = 0;
  5616   0023FC  9E85               	bcf	133,7,c	;volatile
  5617                           
  5618                           ;buggy_lights.c: 36:             TRISAbits.TRISA3 = 0;
  5619   0023FE  9681               	bcf	129,3,c	;volatile
  5620                           
  5621                           ;buggy_lights.c: 38:             LATGbits.LATG0 = 0;
  5622   002400  907F               	bcf	127,0,c	;volatile
  5623                           
  5624                           ;buggy_lights.c: 39:             LATEbits.LATE7 = 0;
  5625   002402  9E7D               	bcf	125,7,c	;volatile
  5626                           
  5627                           ;buggy_lights.c: 40:             LATAbits.LATA3 = 0;
  5628   002404  9679               	bcf	121,3,c	;volatile
  5629   002406  0012               	return		;funcret
  5630   002408                     __end_of_buggy_lights_init:
  5631                           	callstack 0
  5632                           
  5633 ;; *************** function _Timer0_init *****************
  5634 ;; Defined at:
  5635 ;;		line 7 in file "timers.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;		None
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;		None
  5640 ;; Return value:  Size  Location     Type
  5641 ;;                  1    wreg      void 
  5642 ;; Registers used:
  5643 ;;		wreg, status,2, cstack
  5644 ;; Tracked objects:
  5645 ;;		On entry : 0/0
  5646 ;;		On exit  : 0/0
  5647 ;;		Unchanged: 0/0
  5648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5653 ;;Total ram usage:        0 bytes
  5654 ;; Hardware stack levels used: 1
  5655 ;; Hardware stack levels required when called: 3
  5656 ;; This function calls:
  5657 ;;		_reset_timer
  5658 ;; This function is called by:
  5659 ;;		_main
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text40
  5664   00245A                     __ptext40:
  5665                           	callstack 0
  5666   00245A                     _Timer0_init:
  5667                           	callstack 27
  5668   00245A                     
  5669                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  5670   00245A  50D6               	movf	214,w,c	;volatile
  5671   00245C  0B1F               	andlw	-225
  5672   00245E  0940               	iorlw	64
  5673   002460  6ED6               	movwf	214,c	;volatile
  5674   002462                     
  5675                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  5676   002462  88D6               	bsf	214,4,c	;volatile
  5677   002464                     
  5678                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  5679   002464  88D5               	bsf	213,4,c	;volatile
  5680                           
  5681                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  5682   002466  50D6               	movf	214,w,c	;volatile
  5683   002468  0BF0               	andlw	-16
  5684   00246A  090E               	iorlw	14
  5685   00246C  6ED6               	movwf	214,c	;volatile
  5686   00246E                     
  5687                           ;timers.c: 18:     reset_timer();
  5688   00246E  EC7A  F012         	call	_reset_timer	;wreg free
  5689   002472                     
  5690                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  5691   002472  8ED5               	bsf	213,7,c	;volatile
  5692   002474                     
  5693                           ;timers.c: 21:     PIE0bits.TMR0IE = 1;
  5694   002474  010E               	movlb	14	; () banked
  5695   002476  8B29               	bsf	41,5,b	;volatile
  5696   002478                     
  5697                           ; BSR set to: 14
  5698                           ;timers.c: 22:     INTCONbits.PEIE = 1;
  5699   002478  8CF2               	bsf	242,6,c	;volatile
  5700   00247A                     
  5701                           ; BSR set to: 14
  5702                           ;timers.c: 23:     INTCONbits.GIE = 1;
  5703   00247A  8EF2               	bsf	242,7,c	;volatile
  5704   00247C                     
  5705                           ; BSR set to: 14
  5706   00247C  0012               	return		;funcret
  5707   00247E                     __end_of_Timer0_init:
  5708                           	callstack 0
  5709                           
  5710 ;; *************** function _reset_timer *****************
  5711 ;; Defined at:
  5712 ;;		line 44 in file "timers.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;		None
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;		None
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      void 
  5719 ;; Registers used:
  5720 ;;		wreg, status,2, cstack
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5730 ;;Total ram usage:        0 bytes
  5731 ;; Hardware stack levels used: 1
  5732 ;; Hardware stack levels required when called: 2
  5733 ;; This function calls:
  5734 ;;		_write_timer
  5735 ;; This function is called by:
  5736 ;;		_Timer0_init
  5737 ;;		_forward_navigation
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           	psect	text41
  5742   0024F4                     __ptext41:
  5743                           	callstack 0
  5744   0024F4                     _reset_timer:
  5745                           	callstack 27
  5746   0024F4                     
  5747                           ;timers.c: 46:     write_timer(0, 0);
  5748   0024F4  0E00               	movlw	0
  5749   0024F6  6E01               	movwf	write_timer@tL^0,c
  5750   0024F8  0E00               	movlw	0
  5751   0024FA  EC80  F012         	call	_write_timer
  5752   0024FE  0012               	return		;funcret
  5753   002500                     __end_of_reset_timer:
  5754                           	callstack 0
  5755                           
  5756 ;; *************** function _write_timer *****************
  5757 ;; Defined at:
  5758 ;;		line 35 in file "timers.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  tH              1    wreg     unsigned char 
  5761 ;;  tL              1    0[COMRAM] unsigned char 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  tH              1    1[COMRAM] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5773 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5776 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5777 ;;Total ram usage:        2 bytes
  5778 ;; Hardware stack levels used: 1
  5779 ;; Hardware stack levels required when called: 1
  5780 ;; This function calls:
  5781 ;;		Nothing
  5782 ;; This function is called by:
  5783 ;;		_reset_timer
  5784 ;;		_return_to_sender
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text42
  5789   002500                     __ptext42:
  5790                           	callstack 0
  5791   002500                     _write_timer:
  5792                           	callstack 27
  5793                           
  5794                           ;incstack = 0
  5795                           ;write_timer@tH stored from wreg
  5796   002500  6E02               	movwf	write_timer@tH^0,c
  5797   002502                     
  5798                           ;timers.c: 35: void write_timer(unsigned char tH, unsigned char tL);timers.c: 36: {;time
      +                          rs.c: 40:     TMR0H = tH;
  5799   002502  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  5800   002506                     
  5801                           ;timers.c: 41:     TMR0L = tL;
  5802   002506  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  5803   00250A  0012               	return		;funcret
  5804   00250C                     __end_of_write_timer:
  5805                           	callstack 0
  5806                           
  5807 ;; *************** function _ISR *****************
  5808 ;; Defined at:
  5809 ;;		line 116 in file "timers.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;		None
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  1    wreg      void 
  5816 ;; Registers used:
  5817 ;;		wreg, status,2
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5827 ;;Total ram usage:        0 bytes
  5828 ;; Hardware stack levels used: 1
  5829 ;; This function calls:
  5830 ;;		Nothing
  5831 ;; This function is called by:
  5832 ;;		Interrupt level 2
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           	psect	intcode
  5837   000008                     __pintcode:
  5838                           	callstack 0
  5839   000008                     _ISR:
  5840                           	callstack 24
  5841                           
  5842                           ;incstack = 0
  5843   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5844   00000A                     
  5845                           ;timers.c: 119:     if (PIR0bits.TMR0IF) {
  5846   00000A  010E               	movlb	14	; () banked
  5847   00000C  AB33               	btfss	51,5,b	;volatile
  5848   00000E  EF0B  F000         	goto	i2u116_41
  5849   000012  EF0D  F000         	goto	i2u116_40
  5850   000016                     i2u116_41:
  5851   000016  EF18  F000         	goto	i2l668
  5852   00001A                     i2u116_40:
  5853   00001A                     
  5854                           ; BSR set to: 14
  5855                           ;timers.c: 120:         if (returning) {
  5856   00001A  505D               	movf	_returning^0,w,c
  5857   00001C  B4D8               	btfsc	status,2,c
  5858   00001E  EF13  F000         	goto	i2u117_41
  5859   000022  EF15  F000         	goto	i2u117_40
  5860   000026                     i2u117_41:
  5861   000026  EF17  F000         	goto	i2l667
  5862   00002A                     i2u117_40:
  5863   00002A                     
  5864                           ; BSR set to: 14
  5865                           ;timers.c: 121:             return_flag = 1;
  5866   00002A  0E01               	movlw	1
  5867   00002C  6E5C               	movwf	_return_flag^0,c
  5868   00002E                     i2l667:
  5869                           
  5870                           ; BSR set to: 14
  5871                           ;timers.c: 126:         PIR0bits.TMR0IF = 0;
  5872   00002E  9B33               	bcf	51,5,b	;volatile
  5873   000030                     i2l668:
  5874                           
  5875                           ; BSR set to: 14
  5876   000030  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5877   000032  0011               	retfie		f
  5878   000034                     __end_of_ISR:
  5879                           	callstack 0
  5880                           
  5881                           	psect	rparam
  5882   000000                     
  5883                           	psect	temp
  5884   00005E                     btemp:
  5885                           	callstack 0
  5886   00005E                     	ds	1
  5887   000000                     int$flags	set	btemp
  5888   000000                     wtemp8	set	btemp+1
  5889   000000                     ttemp5	set	btemp+1
  5890   000000                     ttemp6	set	btemp+4
  5891   000000                     ttemp7	set	btemp+8
  5892                           
  5893                           	psect	idloc
  5894                           
  5895                           ;Config register IDLOC0 @ 0x200000
  5896                           ;	unspecified, using default values
  5897   200000                     	org	2097152
  5898   200000  FFFF               	dw	65535
  5899                           
  5900                           ;Config register IDLOC1 @ 0x200002
  5901                           ;	unspecified, using default values
  5902   200002                     	org	2097154
  5903   200002  FFFF               	dw	65535
  5904                           
  5905                           ;Config register IDLOC2 @ 0x200004
  5906                           ;	unspecified, using default values
  5907   200004                     	org	2097156
  5908   200004  FFFF               	dw	65535
  5909                           
  5910                           ;Config register IDLOC3 @ 0x200006
  5911                           ;	unspecified, using default values
  5912   200006                     	org	2097158
  5913   200006  FFFF               	dw	65535
  5914                           
  5915                           ;Config register IDLOC4 @ 0x200008
  5916                           ;	unspecified, using default values
  5917   200008                     	org	2097160
  5918   200008  FFFF               	dw	65535
  5919                           
  5920                           ;Config register IDLOC5 @ 0x20000A
  5921                           ;	unspecified, using default values
  5922   20000A                     	org	2097162
  5923   20000A  FFFF               	dw	65535
  5924                           
  5925                           ;Config register IDLOC6 @ 0x20000C
  5926                           ;	unspecified, using default values
  5927   20000C                     	org	2097164
  5928   20000C  FFFF               	dw	65535
  5929                           
  5930                           ;Config register IDLOC7 @ 0x20000E
  5931                           ;	unspecified, using default values
  5932   20000E                     	org	2097166
  5933   20000E  FFFF               	dw	65535
  5934                           
  5935                           	psect	config
  5936                           
  5937                           ;Config register CONFIG1L @ 0x300000
  5938                           ;	External Oscillator mode Selection bits
  5939                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5940                           ;	Power-up default value for COSC bits
  5941                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5942   300000                     	org	3145728
  5943   300000  AA                 	db	170
  5944                           
  5945                           ;Config register CONFIG1H @ 0x300001
  5946                           ;	unspecified, using default values
  5947                           ;	Clock Out Enable bit
  5948                           ;	CLKOUTEN = 0x1, unprogrammed default
  5949                           ;	Clock Switch Enable bit
  5950                           ;	CSWEN = 0x1, unprogrammed default
  5951                           ;	Fail-Safe Clock Monitor Enable bit
  5952                           ;	FCMEN = 0x1, unprogrammed default
  5953   300001                     	org	3145729
  5954   300001  FF                 	db	255
  5955                           
  5956                           ;Config register CONFIG2L @ 0x300002
  5957                           ;	unspecified, using default values
  5958                           ;	Master Clear Enable bit
  5959                           ;	MCLRE = 0x1, unprogrammed default
  5960                           ;	Power-up Timer Enable bit
  5961                           ;	PWRTE = 0x1, unprogrammed default
  5962                           ;	Low-power BOR enable bit
  5963                           ;	LPBOREN = 0x1, unprogrammed default
  5964                           ;	Brown-out Reset Enable bits
  5965                           ;	BOREN = 0x3, unprogrammed default
  5966   300002                     	org	3145730
  5967   300002  FF                 	db	255
  5968                           
  5969                           ;Config register CONFIG2H @ 0x300003
  5970                           ;	unspecified, using default values
  5971                           ;	Brown Out Reset Voltage selection bits
  5972                           ;	BORV = 0x3, unprogrammed default
  5973                           ;	ZCD Disable bit
  5974                           ;	ZCD = 0x1, unprogrammed default
  5975                           ;	PPSLOCK bit One-Way Set Enable bit
  5976                           ;	PPS1WAY = 0x1, unprogrammed default
  5977                           ;	Stack Full/Underflow Reset Enable bit
  5978                           ;	STVREN = 0x1, unprogrammed default
  5979                           ;	Debugger Enable bit
  5980                           ;	DEBUG = 0x1, unprogrammed default
  5981                           ;	Extended Instruction Set Enable bit
  5982                           ;	XINST = 0x1, unprogrammed default
  5983   300003                     	org	3145731
  5984   300003  FF                 	db	255
  5985                           
  5986                           ;Config register CONFIG3L @ 0x300004
  5987                           ;	WDT Period Select bits
  5988                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5989                           ;	WDT operating mode
  5990                           ;	WDTE = OFF, WDT Disabled
  5991   300004                     	org	3145732
  5992   300004  9F                 	db	159
  5993                           
  5994                           ;Config register CONFIG3H @ 0x300005
  5995                           ;	unspecified, using default values
  5996                           ;	WDT Window Select bits
  5997                           ;	WDTCWS = 0x7, unprogrammed default
  5998                           ;	WDT input clock selector
  5999                           ;	WDTCCS = 0x7, unprogrammed default
  6000   300005                     	org	3145733
  6001   300005  FF                 	db	255
  6002                           
  6003                           ;Config register CONFIG4L @ 0x300006
  6004                           ;	unspecified, using default values
  6005                           ;	Write Protection Block 0
  6006                           ;	WRT0 = 0x1, unprogrammed default
  6007                           ;	Write Protection Block 1
  6008                           ;	WRT1 = 0x1, unprogrammed default
  6009                           ;	Write Protection Block 2
  6010                           ;	WRT2 = 0x1, unprogrammed default
  6011                           ;	Write Protection Block 3
  6012                           ;	WRT3 = 0x1, unprogrammed default
  6013                           ;	Write Protection Block 3
  6014                           ;	WRT4 = 0x1, unprogrammed default
  6015                           ;	Write Protection Block 3
  6016                           ;	WRT5 = 0x1, unprogrammed default
  6017                           ;	Write Protection Block 3
  6018                           ;	WRT6 = 0x1, unprogrammed default
  6019                           ;	Write Protection Block 3
  6020                           ;	WRT7 = 0x1, unprogrammed default
  6021   300006                     	org	3145734
  6022   300006  FF                 	db	255
  6023                           
  6024                           ;Config register CONFIG4H @ 0x300007
  6025                           ;	unspecified, using default values
  6026                           ;	Configuration Register Write Protection bit
  6027                           ;	WRTC = 0x1, unprogrammed default
  6028                           ;	Boot Block Write Protection bit
  6029                           ;	WRTB = 0x1, unprogrammed default
  6030                           ;	Data EEPROM Write Protection bit
  6031                           ;	WRTD = 0x1, unprogrammed default
  6032                           ;	Scanner Enable bit
  6033                           ;	SCANE = 0x1, unprogrammed default
  6034                           ;	Low Voltage Programming Enable bit
  6035                           ;	LVP = 0x1, unprogrammed default
  6036   300007                     	org	3145735
  6037   300007  FF                 	db	255
  6038                           
  6039                           ;Config register CONFIG5L @ 0x300008
  6040                           ;	unspecified, using default values
  6041                           ;	UserNVM Program Memory Code Protection bit
  6042                           ;	CP = 0x1, unprogrammed default
  6043                           ;	DataNVM Memory Code Protection bit
  6044                           ;	CPD = 0x1, unprogrammed default
  6045   300008                     	org	3145736
  6046   300008  FF                 	db	255
  6047                           
  6048                           ;Config register CONFIG5H @ 0x300009
  6049                           ;	unspecified, using default values
  6050   300009                     	org	3145737
  6051   300009  FF                 	db	255
  6052                           
  6053                           ;Config register CONFIG6L @ 0x30000A
  6054                           ;	unspecified, using default values
  6055                           ;	Table Read Protection Block 0
  6056                           ;	EBTR0 = 0x1, unprogrammed default
  6057                           ;	Table Read Protection Block 1
  6058                           ;	EBTR1 = 0x1, unprogrammed default
  6059                           ;	Table Read Protection Block 2
  6060                           ;	EBTR2 = 0x1, unprogrammed default
  6061                           ;	Table Read Protection Block 3
  6062                           ;	EBTR3 = 0x1, unprogrammed default
  6063                           ;	Table Read Protection Block 4
  6064                           ;	EBTR4 = 0x1, unprogrammed default
  6065                           ;	Table Read Protection Block 5
  6066                           ;	EBTR5 = 0x1, unprogrammed default
  6067                           ;	Table Read Protection Block 6
  6068                           ;	EBTR6 = 0x1, unprogrammed default
  6069                           ;	Table Read Protection Block 7
  6070                           ;	EBTR7 = 0x1, unprogrammed default
  6071   30000A                     	org	3145738
  6072   30000A  FF                 	db	255
  6073                           
  6074                           ;Config register CONFIG6H @ 0x30000B
  6075                           ;	unspecified, using default values
  6076                           ;	Boot Block Table Read Protection bit
  6077                           ;	EBTRB = 0x1, unprogrammed default
  6078   30000B                     	org	3145739
  6079   30000B  FF                 	db	255
  6080                           tosu	equ	0xFFF
  6081                           tosh	equ	0xFFE
  6082                           tosl	equ	0xFFD
  6083                           stkptr	equ	0xFFC
  6084                           pclatu	equ	0xFFB
  6085                           pclath	equ	0xFFA
  6086                           pcl	equ	0xFF9
  6087                           tblptru	equ	0xFF8
  6088                           tblptrh	equ	0xFF7
  6089                           tblptrl	equ	0xFF6
  6090                           tablat	equ	0xFF5
  6091                           prodh	equ	0xFF4
  6092                           prodl	equ	0xFF3
  6093                           indf0	equ	0xFEF
  6094                           postinc0	equ	0xFEE
  6095                           postdec0	equ	0xFED
  6096                           preinc0	equ	0xFEC
  6097                           plusw0	equ	0xFEB
  6098                           fsr0h	equ	0xFEA
  6099                           fsr0l	equ	0xFE9
  6100                           wreg	equ	0xFE8
  6101                           indf1	equ	0xFE7
  6102                           postinc1	equ	0xFE6
  6103                           postdec1	equ	0xFE5
  6104                           preinc1	equ	0xFE4
  6105                           plusw1	equ	0xFE3
  6106                           fsr1h	equ	0xFE2
  6107                           fsr1l	equ	0xFE1
  6108                           bsr	equ	0xFE0
  6109                           indf2	equ	0xFDF
  6110                           postinc2	equ	0xFDE
  6111                           postdec2	equ	0xFDD
  6112                           preinc2	equ	0xFDC
  6113                           plusw2	equ	0xFDB
  6114                           fsr2h	equ	0xFDA
  6115                           fsr2l	equ	0xFD9
  6116                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        26
    BSS         102
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     83      93
    BANK0           160     32      90
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    getHSVval@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    getHSVval@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    maxRGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    minRGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    S1143DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    S2718$buffer	PTR unsigned char  size(2) Largest target is 0

    S2718$source	PTR const unsigned char  size(2) Largest target is 0

    sendHSVvalSerial4@col_val	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    sendRGBCvalSerial4@col_val	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 
		 -> STR_4(CODE[3]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 161
		 -> sendArrayCharSerial4@tempStr(BANK1[161]), sendHSVvalSerial4@tempStr(COMRAM[21]), sendIntSerial4@string(COMRAM[17]), sendRGBCvalSerial4@tempStr(COMRAM[26]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlll[1]), CCPR4H(BITBIGSFRlllhhhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlll[1]), CCPR3H(BITBIGSFRlllhhhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[14]), STR_6(CODE[11]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sendRGBCvalSerial4
    _sendRGBCvalSerial4->_sprintf
    _sendHSVvalSerial4->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _getHSVval->___lldiv
    _minRGB->_min
    _maxRGB->_max
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   19294
                                             81 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                          _getHSVval
                         _getRGBCval
                    _initDCmotorsPWM
                         _initUSART4
                  _sendHSVvalSerial4
                 _sendRGBCvalSerial4
               _toggle_tricolour_LED
 ---------------------------------------------------------------------------------
 (1) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sendRGBCvalSerial4                                  27    26      1    5843
                                             54 COMRAM    27    26      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sendHSVvalSerial4                                   22    21      1    5821
                                             54 COMRAM    22    21      1
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    15     11    5182
                                             28 COMRAM    26    15     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    4357
                                             24 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           14    11      3    4005
                                             10 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     934
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     447
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _getHSVval                                           52    50      2    5761
                                             13 COMRAM    50    48      2
                            ___lldiv
                             ___lmul
                             _maxRGB
                             _minRGB
 ---------------------------------------------------------------------------------
 (2) _minRGB                                               4     2      2     581
                                              6 COMRAM     4     2      2
                                _min
 ---------------------------------------------------------------------------------
 (3) _min                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _maxRGB                                               4     2      2     581
                                              6 COMRAM     4     2      2
                                _max
 ---------------------------------------------------------------------------------
 (3) _max                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1434
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    1226
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
     _reset_timer
       _write_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _getHSVval
     ___lldiv
     ___lmul
     _maxRGB
       _max
     _minRGB
       _min
   _getRGBCval
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendHSVvalSerial4
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           ___awdiv
           ___awmod
           ___lwdiv
           ___lwmod
           _abs
             ___awmod (ARG)
           _fputc
             _putch
   _sendRGBCvalSerial4
     _sendStringSerial4
     _sprintf
   _toggle_tricolour_LED

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      5A       5       56.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     53      5D       1       98.9%
BITBIGSFRlllhhh     52      0       0      41        0.0%
BITBIGSFRlllhhh     37      0       0      43        0.0%
BITBIGSFRlllllh     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      59        0.0%
BITBIGSFRlllhhh     20      0       0      46        0.0%
BITBIGSFRlllhhh     1E      0       0      48        0.0%
BITBIGSFRhhlll      1D      0       0      38        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      49        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      47        0.0%
BITBIGSFRlllllh      B      0       0      57        0.0%
BITBIGSFRlllllh      9      0       0      56        0.0%
BITBIGSFRlllhhh      8      0       0      44        0.0%
BITBIGSFRllllll      6      0       0      58        0.0%
BITBIGSFRlllllh      6      0       0      53        0.0%
BITBIGSFRllllhl      5      0       0      52        0.0%
BITBIGSFRlllllh      3      0       0      55        0.0%
BITBIGSFRllllhh      3      0       0      51        0.0%
BITBIGSFRlllhhh      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllhhh      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      50        0.0%
BITBIGSFRllh         1      0       0      40        0.0%
BITBIGSFRlhh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F3      60        0.0%
DATA                 0      0      F3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Mar 08 09:49:36 2024

                 _turn180Delay 00AE                 _color_read_Red 20F8                _color_read_Blue 21E8  
              _trail_timer_low 0114                             l42 19D4                             l27 2406  
                           l71 2146                             l80 21E6                             l65 2378  
                           l74 2236                             l83 204E                             l68 249C  
                           l93 23D0                             l77 2196                             l94 23D8  
                           l97 23A0                             l98 23A8                   ___awdiv@sign 0006  
             _trail_timer_high 0128               _color_read_Clear 2198               _color_read_Green 2148  
                          l101 20F6                            l104 20A2                            l120 14E4  
                          l300 2514                            l303 251E                            l306 24F2  
                          l309 2310                            l440 24D2                            l193 1D36  
                          l291 2432                            l428 24BA                            l460 2282  
                          l437 24BE                            l294 2458                            l710 1E7E  
                          l446 1F44                            l632 247C                            l288 2430  
                          l641 24FE                            l297 2528                            l457 1FA2  
                          l732 1CA6                            l725 1C96                            l709 1E6E  
                          l638 250A                            l942 1C02                            l929 1A98  
                          _ISR 0008         ??_toggle_tricolour_LED 0001                            _abs 2312  
                          _max 23AA                            _min 237A                   ___awmod@sign 0006  
                          wreg 0FE8                    _squareDelay 00AA                           ?_ISR 0001  
                         ?_abs 0007                           l1206 1EE2                           l3001 20A4  
                         l3011 1EE8                           l3005 2050                           l3013 1F0E  
                         l3021 2298                           l3015 1F12                           l3023 22A0  
                         l3201 0E7C                           l3009 1EE4                           l1441 232C  
                         l1417 1688                           l3025 22B8                           l3017 2284  
                         l1418 17F0                           l3131 24F4                           l3211 0F14  
                         l3203 0E9A                           l3027 22C6                           l3019 2290  
                         l1196 1DAA                           l1444 2344                           l1436 1FF0  
                         l3141 1E4E                           l3133 1E16                           l3301 14D2  
                         l3221 0FC4                           l3213 0F48                           l3205 0EC4  
                         l1189 1DA2                           l1437 1FF8                           l3151 1C3E  
                         l3143 1C04                           l3135 1E26                           l3231 1096  
                         l3223 1008                           l3215 0F78                           l3207 0EC4  
                         l3311 1D06                           l3303 1CA8                           l1199 1EDA  
                         l1456 1B52                           l1376 22CE                           l3161 1C86  
                         l3153 1C4C                           l3145 1C14                           l3137 1E34  
                         l3241 1142                           l3233 10BC                           l3225 103C  
                         l3209 0ED4                           l3217 0F84                           l3321 1D28  
                         l3313 1D10                           l3305 1CB8                           l2601 1B9A  
                         l3171 234A                           l3163 1C90                           l3155 1C56  
                         l3147 1C2A                           l3139 1E44                           l3251 11D4  
                         l3243 1172                           l3235 10C8                           l3227 106C  
                         l3219 0F90                           l3323 1D2A                           l3315 1D12  
                         l3307 1CDE                           l2611 1BD6                           l2603 1BA2  
                         l1467 2530                           l3165 23DA                           l3173 2354  
                         l3157 1C74                           l3149 1C32                           l3261 1288  
                         l3253 1208                           l3237 10D2                           l3245 117E  
                         l3229 1074                           l3325 1D34                           l3317 1D1C  
                         l3309 1CE2                           l2613 1BDC                           l2605 1BAA  
                         l3175 2364                           l3159 1C84                           l3271 1346  
                         l3263 1294                           l3255 1238                           l3247 118A  
                         l3239 110E                           l3191 0E32                           l3319 1D1E  
                         l3351 24A8                           l2551 19F4                           l2543 19D6  
                         l2607 1BB8                           l2615 1BE2                           l2631 1D62  
                         l2623 1D38                           l3167 190E                           l3361 245A  
                         l3177 236E                           l3169 2346                           l3281 13E4  
                         l3265 12A6                           l3273 1352                           l3249 1194  
                         l3257 1240                           l3193 0E42                           l3353 24AA  
                         l2561 1A28                           l2553 1A02                           l2545 19DA  
                         l2617 1BF2                           l2609 1BCE                           l2641 1D96  
                         l2633 1D70                           l2625 1D40                           l2801 1624  
                         l3371 2474                           l3363 2462                           l3291 1446  
                         l3283 1414                           l3275 135E                           l3267 12E2  
                         l3259 1262                           l3195 0E52                           l3179 1FFA  
                         l3355 24B4                           l2571 1A62                           l2563 1A30  
                         l2555 1A0A                           l2547 19E8                           l2619 1BFA  
                         l2643 1D9C                           l2635 1D76                           l2627 1D52  
                         l2651 1EA2                           l2811 1674                           l2803 1634  
                         l3451 17F2                           l3373 2478                           l3365 2464  
                         l2901 2382                           l3293 147A                           l3277 1370  
                         l3269 1316                           l3285 141C                           l3197 0E5E  
                         l3189 0E1A                           l3357 24B6                           l3349 249E  
                         l2581 1A88                           l2573 1A6A                           l2565 1A38  
                         l2557 1A0E                           l2549 19F0                           l2637 1D8C  
                         l2629 1D5A                           l2653 1EB0                           l2645 1E80  
                         l2661 1A9A                           l2821 16DA                           l2805 1644  
                         l2813 1676                           l3381 2238                           l3461 1864  
                         l3453 1838                           l3375 247A                           l3367 246E  
                         l2903 2398                           l3295 14AA                           l3287 142E  
                         l3279 13B0                           l3199 0E70                           l3359 24B8  
                         l2583 1A90                           l2575 1A6C                           l2567 1A46  
                         l2559 1A16                           l2591 1B66                           l2639 1D94  
                         l2655 1EC6                           l2647 1E92                           l2671 1B12  
                         l2663 1AAA                           l2831 1734                           l2823 16DE  
                         l2807 1652                           l2815 1694                           l3383 2278  
                         l3471 188C                           l3463 186C                           l3455 1840  
                         l3369 2472                           l3297 14B2                           l3289 143A  
                         l2577 1A72                           l2569 1A4C                           l2593 1B6E  
                         l2657 1ECE                           l2649 1E9A                           l2665 1ABA  
                         l2833 1748                           l2825 1702                           l2841 177A  
                         l2817 16B4                           l2809 165A                           l3377 1F46  
                         l3481 1898                           l3473 1890                           l3465 1874  
                         l3457 1848                           l3299 14C0                           l2579 1A78  
                         l2595 1B72                           l2587 1B54                           l2659 1ED4  
                         l2675 2312                           l2667 1AC4                           l2851 17E0  
                         l2835 1762                           l2827 171E                           l2819 16CC  
                         l2843 17AA                           l2771 14EE                           l3379 1F98  
                         l3491 18CA                           l3483 189A                           l3475 1892  
                         l3467 1884                           l3459 185C                           l2765 2432  
                         l2597 1B80                           l2589 1B58                           l2677 2320  
                         l2669 1AE0                           l2853 17E8                           l2845 17B2  
                         l2837 1764                           l2829 1722                           l2781 1538  
                         l2773 1514                           l3493 18D2                           l3485 189C  
                         l3477 1894                           l3469 1888                           l2951 2502  
                         l2767 2442                           l2863 2520                           l2871 2516  
                         l2599 1B88                           l2791 15B2                           l2783 1558  
                         l2775 151C                           l3495 18DE                           l3487 18A0  
                         l3479 1896                           l2953 2506                           l2865 2524  
                         l2873 251A                           l2881 22D6                           l2793 15E2  
                         l2785 1578                           l2777 152A                           l2849 17BE  
                         l2769 14E6                           l2961 1FD0                           l3497 18E6  
                         l3489 18C6                           l2971 241C                           l2963 2408  
                         l2867 24EA                           l2883 22DE                           l2875 250C  
                         l2947 24BE                           l3907 179C                           l2795 15FE  
                         l2787 1590                           l2779 152E                           l2955 1FA4  
                         l3499 18EE                           l2973 241E                           l2965 2412  
                         l2869 24EE                           l2893 23AA                           l2885 22E6  
                         l2877 2510                           l2949 24CE                           l2797 1602  
                         l2789 159A                           l2957 1FA8                           ?_max 0001  
                         l2967 2418                           l2975 2480                           l2895 23B2  
                         l2887 230C                           l2879 22D2                           l2983 21E8  
                         l2991 218E                           l2799 1614                           l2959 1FB6  
                         l2969 241A                           l2897 23C8                           l2889 230E  
                         l2985 222E                           l2977 20F8                           l2899 237A  
                         l2995 2198                           l2979 213E                           ?_min 0001  
                         l2997 21DE                           l2989 2148                           STR_1 0E0F  
                         STR_2 0E14                           STR_5 0E01                           STR_6 0E04  
                         u1200 19E8                           u1201 19E4                           u1210 1A02  
                         u1211 19FE                           u2100 1288                           u1220 1A28  
                         u1300 1BCE                           u2101 1284                           u1221 1A24  
                         u1301 1BCA                           u1230 1A46                           u1310 1BF2  
                         u1231 1A42                           u1311 1BEE                           u2040 0E70  
                         u1240 1A62                           u1320 1D52                           u1400 1AE0  
                         u2008 19C4                           u2041 0E6C                           u1241 1A5E  
                         u1321 1D4E                           u1401 1ADC                           u2130 142E  
                         u2050 0E9A                           u1250 1A88                           u1330 1D70  
                         u1410 1B12                           u2131 142A                           u2115 1296  
                         u2051 0E96                           u1251 1A84                           u1331 1D6C  
                         u1411 1B0E                           u2060 0EC4                           u1260 1B66  
                         u1340 1D8C                           u1420 2320                           u2125 1360  
                         u2061 0EC0                           u1261 1B62                           u1341 1D88  
                         u1421 231C                           u2070 1096                           u1270 1B80  
                         u1350 1E92                           u2071 1092                           u1271 1B7C  
                         u1351 1E8E                           u1600 2458                           u2080 10BC  
                         u1280 1B9A                           u1360 1EB0                           u2208 18B6  
                 _BAUD4CONbits 0EE9                           u1601 2454                           u2081 10B8  
                         u1281 1B96                           u1361 1EAC                           u2090 1262  
                         u1290 1BB8                           u1370 1EC6                           u1610 1514  
                         u2091 125E                           u1291 1BB4                           u1371 1EC2  
                         u1611 1510                           u1380 1AAA                           u1700 1688  
                         u1620 1558                           u1381 1AA6                           u1701 1684  
                         u1621 1554                           u1390 1ABA                           u1710 16B4  
                         u1630 1578                           u2190 18B4                           u1391 1AB6  
                         u1711 16B0                           u1631 1574                           u2191 18AC  
                         u1720 1734                           u1640 15AE                           u1800 1FF0  
                         u1721 1730                           u1641 15A8                           u1801 1FEC  
                         u1810 1F0A                           u1730 1744                           u1650 15B0  
                         _T2PR 0FBC                           u1731 1740                           u1820 1F34  
                         u1740 1776                           u1660 1614                           u1741 1772  
                         u1661 1610                           u1590 2442                           u1750 22FA  
                         u1830 1F44                           u1670 1624                           u1910 1940  
                         u1591 243E                           u1751 22F2                           u1831 1F40  
                         u1671 1620                           u1911 1938                           u1840 1E34  
                         u1680 1634                           u1841 1E30                           u1817 1F00  
                         u1681 1630                           u1850 1E6E                           u1770 23C8  
                         u1690 1644                           u1930 1960                           u1851 1E6A  
                         u1771 23C4                           u1827 1F2A                           u1691 1640  
                         u1931 1958                           u1860 1C2A                           u1780 2398  
                         u1908 1922                           u1861 1C26                           u1781 2394  
                         u1870 1C4C                           u1790 24CE                           u1950 1982  
                         u1871 1C48                           u1791 24CA                           u1951 197A  
                         u2647 18F8                           u1880 1C74                           u1768 22FC  
                         u1928 1942                           u2657 235A                           u1881 1C70  
                         u1970 19A0                           u1890 1920                           u1971 1998  
                         u1891 1918                           u1948 1962                           u1990 19C2  
                         u1991 19BA                           u1968 1984                           u1988 19A2  
                         abs@a 0007                           _dbuf 0060                           _main 17F2  
                         _prec 0084                           _nout 0080                           fsr0h 0FEA  
                         fsr1h 0FE2                           indf0 0FEF                           fsr2h 0FDA  
                         fsr0l 0FE9                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           max@a 0001                           max@b 0003  
                         btemp 005E                           min@a 0001                           min@b 0003  
           _sendRGBCvalSerial4 1F46                           start 0034         __end_of_color_read_Red 2148  
                 ___param_bank 0000                          ??_ISR 0001            ?_sendRGBCvalSerial4 0037  
                        ??_abs 0009                  write_timer@tH 0002                  write_timer@tL 0001  
                        ??_max 0005                          ??_min 0005                          ?_main 0001  
           _timer_high_pointer 0054                __end_of___awdiv 1A9A                __end_of___awmod 1C04  
              __end_of___lldiv 1CA8                ___awdiv@divisor 0003                __end_of___lwdiv 1DAC  
              __end_of___lwmod 1EE4                          i2l667 002E                          i2l668 0030  
              ___awdiv@counter 0005                   vfpfcnvrt@cnt 0011                   vfpfcnvrt@fmt 000C  
                        _TMR0H 0FD4                          _TMR0L 0FD3            ___lmul@multiplicand 0005  
      __end_of_sendCharSerial4 24D4     __end_of_I2C_2_Master_Start 252A                    _write_timer 2500  
   __end_of_I2C_2_Master_Write 24F4                    _turningGear 0056                          _flags 005A  
         ??_sendRGBCvalSerial4 0038                          _fputc 1A9A                          _width 0082  
                        _putch 2530              _turnRight135Delay 00B0                          tablat 0FF5  
              _turnLeft90Delay 00B6                          ttemp5 005F                          ttemp6 0062  
                        ttemp7 0066                          status 0FD8                          wtemp8 005F  
              __end_of_sprintf 22D0        __end_of_color_read_Blue 2238          _I2C_2_Master_RepStart 250C  
              ?_color_read_Red 0005                __initialization 1DAC                   __end_of_main 190E  
                       ??_main 0052                  __activetblptr 0003                         ?_fputc 0001  
                       _CCPR1H 0FAA                         _CCPR2H 0FA6                         _CCPR3H 0F25  
                       _CCPR4H 0F21               ___awdiv@dividend 0001                         ?_putch 0001  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       _RD5PPS 0E6F                         _RC7PPS 0E69                         _RD6PPS 0E70  
                       _RE4PPS 0E76                         i2l2501 001A                         i2l2503 002A  
                       i2l2499 000A                         _RG6PPS 0E88                  vfpfcnvrt@done 0010  
     __end_of_color_click_init 237A                         _RX4PPS 0E15                         _TX4REG 0EE4  
             _turnLeft135Delay 00B2                  ??_Timer0_init 0003                   ?_reset_timer 0001  
                 _CCPTMRS0bits 0FAD                   vfprintf@cfmt 001C                         ___lmul 1E16  
                    ??___awdiv 0005                      ??___awmod 0005                      ??___lldiv 0009  
                    ??___lwdiv 0005                      ??___lwmod 0005                         _maxRGB 20A4  
                       _minRGB 2050                         clear_0 1DF2                         clear_1 1DFE  
             ___awdiv@quotient 0007                ___awmod@divisor 0003                         isa$std 0001  
              ___awmod@counter 0005                         fputc@c 0001                   __pdataCOMRAM 0054  
            _timer_low_pointer 00A8                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8               ?_sendCharSerial4 0001  
                       putch@c 0001               __end_of_vfprintf 1FFA              ??_initDCmotorsPWM 0003  
                    ??_sprintf 0028              _buggy_lights_init 23DA                     __accesstop 0060  
      __end_of__initialization 1E0C       __end_of_color_read_Clear 21E8       __end_of_color_read_Green 2198  
       ?_I2C_2_Master_RepStart 0001             ?_buggy_lights_init 0001                  ___rparam_used 0001  
             ?_color_read_Blue 0005                 __pcstackCOMRAM 0001                   __pidataBANK0 24D4  
            getHSVval@temp_620 0038              getHSVval@temp_621 0028              getHSVval@temp_622 002C  
            getHSVval@temp_623 0030              getHSVval@temp_624 0034              getHSVval@temp_625 0020  
          ??_buggy_lights_init 0001                  __end_of_fputc 1B54                  __end_of_putch 2532  
          __end_of_Timer0_init 247E                        ??_fputc 0004      __end_of_buggy_lights_init 2408  
                      ??_putch 0001                     __pbssBANK0 0060                     __pbssBANK1 0100  
                   _getRGBCval 1FFA              _color_writetoaddr 247E                   _T2CLKCONbits 0FBF  
           ?_color_writetoaddr 0003                        ?___lmul 0001                        ?_maxRGB 0007  
                      ?_minRGB 0007                 ___lmul@product 0009            ??_color_writetoaddr 0004  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                   ?_write_timer 0001  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5              __end_of_getHSVval 14E6  
       color_writetoaddr@value 0003               ??_color_read_Red 0007      __end_of_color_writetoaddr 249E  
           _I2C_2_Master_Start 2520                     _initUSART4 249E             _I2C_2_Master_Write 24E8  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000A  
                  _Timer0_init 245A        sendStringSerial4@string 0002                        ___awdiv 19D6  
                      ___awmod 1B54                        ___lldiv 1C04            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 1D38            ?_I2C_2_Master_Write 0001                        ___lwmod 1E80  
                    ?_vfprintf 0019                   __psmallconst 0E00                        __pcinit 1DAC  
                      __ramtop 0E00                        __ptext0 17F2                        __ptext1 190E  
                      __ptext2 1F46                        __ptext3 2238                        __ptext4 2284  
                      __ptext5 1FA4                        __ptext6 14E6                        __ptext7 1A9A  
                      __ptext8 2530                        __ptext9 2312                      _T2CONbits 0FBD  
             ___awmod@dividend 0001                     getHSVval@C 003E                     getHSVval@H 001E  
                   getHSVval@M 003C                      _T2HLTbits 0FBE                     getHSVval@S 001C  
                   getHSVval@m 001A                        maxRGB@p 0007                        _sprintf 2284  
                      minRGB@p 0007           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
         end_of_initialization 1E0C              _sendHSVvalSerial4 2238                    ?_getRGBCval 000C  
                      fputc@fp 0003              ?_color_click_init 0001                  getHSVval@temp 0024  
           ?_sendHSVvalSerial4 0037                ___lldiv@divisor 0005             ??_color_click_init 0005  
              ___lldiv@counter 000D              __end_of_vfpfcnvrt 17F2            ??_sendHSVvalSerial4 0038  
                      postdec1 0FE5                        postdec2 0FDD                        postinc0 0FEE  
                      postinc1 0FE6                        postinc2 0FDE               vfpfcnvrt@convarg 0014  
                   ??_vfprintf 001C                _initDCmotorsPWM 1CA8                      _TRISAbits 0F81  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
    __end_of_sendHSVvalSerial4 2284       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
                  _CCP1CONbits 0FAB              ?_color_read_Clear 0005                    _CCP2CONbits 0FA7  
            ?_color_read_Green 0005                    _CCP3CONbits 0F26                    ?_initUSART4 0001  
                  _CCP4CONbits 0F22      sendCharSerial4@charToSend 0001                     main@motorL 008C  
                   main@motorR 0095             ??_color_read_Clear 0007             ??_color_read_Green 0007  
                   max@max_val 0005                 __end_of___lmul 1E80                    vfpfcnvrt@ap 000D  
                  vfpfcnvrt@cp 0013                    vfpfcnvrt@fp 000B                  __pidataCOMRAM 252A  
               __end_of_maxRGB 20F8                 __end_of_minRGB 20A4      sendRGBCvalSerial4@col_val 0037  
     sendHSVvalSerial4@col_val 0037                     min@min_val 0005            color_read_Clear@tmp 000A  
          start_initialization 1DAC                    __end_of_ISR 0034                    __end_of_abs 2346  
                  __end_of_max 23DA                    __end_of_min 23AA               _turnRight90Delay 00B4  
    sendRGBCvalSerial4@tempStr 0038       sendHSVvalSerial4@tempStr 0038            color_read_Green@tmp 000A  
      __end_of_initDCmotorsPWM 1D38                    vfprintf@fmt 001A                       ??___lmul 0009  
                     ??_maxRGB 0009                       ??_minRGB 0009                    __pdataBANK0 00A6  
                  __pbssCOMRAM 005A                  __pcstackBANK0 0086                 _wall_threshold 00B8  
 __end_of_toggle_tricolour_LED 19D6                      _getHSVval 0E1A               ___lwdiv@dividend 0001  
                 ?_Timer0_init 0001                      __pintcode 0008                       ?___awdiv 0001  
                     ?___awmod 0001                       ?___lldiv 0001                       ?___lwdiv 0001  
                     ?___lwmod 0001           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
                  __smallconst 0E00              _I2C_2_Master_Idle 2432              _I2C_2_Master_Init 2408  
            _I2C_2_Master_Read 22D0              _I2C_2_Master_Stop 2516                    _maxRGB$3154 0009  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 0005                  _headbuttDelay 00AC  
     initDCmotorsPWM@PWMperiod 0001                       ?_sprintf 001D                      _rampDelay 0059  
                 ??_getRGBCval 000D              _sendStringSerial4 1EE4            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                       _LATAbits 0F79  
          ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                     _LATHbits 0F80                    _minRGB$3155 0009                       _PIE0bits 0E29  
           ?_sendStringSerial4 0002                     ?_getHSVval 000E                  ??_reset_timer 0003  
                     i2u116_40 001A                       i2u116_41 0016                       i2u117_40 002A  
                     i2u117_41 0026                       _PIR0bits 0E33                       _PIR4bits 0E37  
             ?_initDCmotorsPWM 0001              ??_sendCharSerial4 0001                       _SSP2CON2 0EDA  
          ??_sendStringSerial4 0004                       _SSP2STAT 0ED8                      _returning 005D  
                    _vfpfcnvrt 14E6      __end_of_I2C_2_Master_Idle 245A      __end_of_I2C_2_Master_Init 2432  
    __end_of_I2C_2_Master_Read 2312      __end_of_I2C_2_Master_Stop 2520    I2C_2_Master_Write@data_byte 0002  
           __end_of_getRGBCval 2050     __end_of_sendRGBCvalSerial4 1FA4              ??_color_read_Blue 0007  
                   vfpfcnvrt@c 0018              ___lmul@multiplier 0001                      copy_data0 1DC0  
                    copy_data1 1DE0      __end_of_sendStringSerial4 1F46  __end_of_I2C_2_Master_RepStart 2516  
           color_read_Blue@tmp 000A                   ??_initUSART4 0001                       __Hrparam 0000  
                   vfprintf@ap 001B                       __Lrparam 0000                     vfprintf@fp 0019  
                   ?_vfpfcnvrt 000B            __end_of_reset_timer 2500                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                     sprintf@fmt 001F                     sprintf@ret 0028  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6           _toggle_tricolour_LED 190E  
              ___lwdiv@divisor 0003             __end_of_initUSART4 24BC                ___lwdiv@counter 0007  
                     __ptext10 1E80                       __ptext11 1D38                       __ptext20 2148  
                     __ptext12 1B54                       __ptext21 2198                       __ptext13 19D6  
                     __ptext30 1E16                       __ptext22 21E8                       __ptext14 1EE4  
                     __ptext31 1C04                       __ptext23 250C                       __ptext15 24BC  
                     __ptext40 245A                       __ptext32 2346                       __ptext24 22D0  
                     __ptext16 249E                       __ptext41 24F4                       __ptext33 247E  
                     __ptext25 0E1A                       __ptext17 1CA8                       __ptext42 2500  
                     __ptext34 24E8                       __ptext26 2050                       __ptext18 1FFA  
                     __ptext35 2516                       __ptext27 237A                       __ptext19 20F8  
                     __ptext36 2520                       __ptext28 20A4                       __ptext37 2432  
                     __ptext29 23AA                       __ptext38 2408                       __ptext39 23DA  
                  getRGBCval@p 000C            main@measured_colour 009E                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA                    ??_getHSVval 0010                    getHSVval@p1 000E  
                  getHSVval@p2 000F                    getHSVval@Sz 0018                       isa$xinst 0000  
                   _RC4STAbits 0EE7                       int$flags 005E                       _vfprintf 1FA4  
                   _INTCONbits 0FF2          ?_toggle_tricolour_LED 0001                  ??_write_timer 0002  
                     intlevel2 0000                      sprintf@ap 002A                   _topGearRight 0057  
            _manoeuvre_pointer 00A6               ___lwmod@dividend 0001               ___lldiv@dividend 0001  
               main@HSV_colour 0086                    _reset_timer 24F4                    ??_vfpfcnvrt 000E  
             _color_click_init 2346                    _topGearLeft 0058                       sprintf@f 002B  
                     sprintf@s 001D                     _SSP2DATPPS 0E1D               ___lldiv@quotient 0009  
                   _SSP2CLKPPS 0E1C                ___lwmod@divisor 0003                ___lwmod@counter 0005  
              _trail_manoeuvre 0100                    _return_flag 005C                _manoeuvre_count 005B  
                   _TX4STAbits 0EE8                _sendCharSerial4 24BC            __end_of_write_timer 250C  
