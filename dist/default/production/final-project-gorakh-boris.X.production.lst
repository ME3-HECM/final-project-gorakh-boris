

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun Mar 10 20:13:50 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    75                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    76   000000                     
    77                           ; Generated 21/07/2023 GMT
    78                           ; 
    79                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F67K40 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111   000000                     
   112                           	psect	idataCOMRAM
   113   002F7E                     __pidataCOMRAM:
   114                           	callstack 0
   115                           
   116                           ;initializer for _manoeuvre_pointer
   117   002F7E  00                 	db	low _trail_manoeuvre
   118   002F7F  01                 	db	high _trail_manoeuvre
   119                           
   120                           ;initializer for _timer_low_pointer
   121   002F80  14                 	db	low _trail_timer_low
   122   002F81  01                 	db	high _trail_timer_low
   123                           
   124                           ;initializer for _timer_high_pointer
   125   002F82  28                 	db	low _trail_timer_high
   126   002F83  01                 	db	high _trail_timer_high
   127                           
   128                           ;initializer for _wall_threshold
   129   002F84  012C               	dw	300
   130                           
   131                           ;initializer for _squareDelay
   132   002F86  012C               	dw	300
   133                           
   134                           ;initializer for _headbuttDelay
   135   002F88  0046               	dw	70
   136                           
   137                           ;initializer for _turn180Delay
   138   002F8A  01FE               	dw	510
   139                           
   140                           ;initializer for _turnRight135Delay
   141   002F8C  012C               	dw	300
   142                           
   143                           ;initializer for _turnLeft135Delay
   144   002F8E  012C               	dw	300
   145                           
   146                           ;initializer for _turnRight90Delay
   147   002F90  00AF               	dw	175
   148                           
   149                           ;initializer for _turnLeft90Delay
   150   002F92  00AF               	dw	175
   151                           
   152                           ;initializer for _turningGear
   153   002F94  2A                 	db	42
   154                           
   155                           ;initializer for _topGearRight
   156   002F95  14                 	db	20
   157                           
   158                           ;initializer for _topGearLeft
   159   002F96  14                 	db	20
   160                           
   161                           ;initializer for _rampDelay
   162   002F97  08                 	db	8
   163   000000                     _TMR0H	set	4052
   164   000000                     _TX4REG	set	3812
   165   000000                     _RC4STAbits	set	3815
   166   000000                     _SP4BRGH	set	3814
   167   000000                     _LATEbits	set	3965
   168   000000                     _TRISEbits	set	3973
   169   000000                     _LATGbits	set	3967
   170   000000                     _TRISGbits	set	3975
   171   000000                     _LATFbits	set	3966
   172   000000                     _LATHbits	set	3968
   173   000000                     _TRISFbits	set	3974
   174   000000                     _TRISHbits	set	3976
   175   000000                     _SSP2CON2bits	set	3802
   176   000000                     _RX4PPS	set	3605
   177   000000                     _SSP2CLKPPS	set	3612
   178   000000                     _SSP2DATPPS	set	3613
   179   000000                     _RC7PPS	set	3689
   180   000000                     _RE2PPS	set	3700
   181   000000                     _LATAbits	set	3961
   182   000000                     _LATDbits	set	3964
   183   000000                     _TRISDbits	set	3972
   184   000000                     _CCPR4H	set	3873
   185   000000                     _CCPR3H	set	3877
   186   000000                     _CCPR2H	set	4006
   187   000000                     _CCPR1H	set	4010
   188   000000                     _TRISCbits	set	3971
   189   000000                     _TRISAbits	set	3969
   190   000000                     _LATCbits	set	3963
   191   000000                     _CCP1CONbits	set	4011
   192   000000                     _CCPTMRS0bits	set	4013
   193   000000                     _T2PR	set	4028
   194   000000                     _T2CONbits	set	4029
   195   000000                     _CCP2CONbits	set	4007
   196   000000                     _CCP3CONbits	set	3878
   197   000000                     _CCP4CONbits	set	3874
   198   000000                     _RE4PPS	set	3702
   199   000000                     _RG6PPS	set	3720
   200   000000                     _RD5PPS	set	3695
   201   000000                     _ANSELDbits	set	3751
   202   000000                     _SSP2ADD	set	3798
   203   000000                     _SSP2CON1bits	set	3801
   204   000000                     _TMR0L	set	4051
   205   000000                     _T0CON0bits	set	4053
   206   000000                     _T0CON1bits	set	4054
   207   000000                     _T2CLKCONbits	set	4031
   208   000000                     _T2HLTbits	set	4030
   209   000000                     _RC4REG	set	3811
   210   000000                     _SP4BRGL	set	3813
   211   000000                     _TX4STAbits	set	3816
   212   000000                     _BAUD4CONbits	set	3817
   213   000000                     _SSP2CON2	set	3802
   214   000000                     _SSP2STAT	set	3800
   215   000000                     _ANSELFbits	set	3764
   216   000000                     _SSP2BUF	set	3797
   217   000000                     _PIE0bits	set	3625
   218   000000                     _PIR4bits	set	3639
   219   000000                     _RC0PPS	set	3682
   220   000000                     _RD6PPS	set	3696
   221   000000                     _INTCONbits	set	4082
   222   000000                     _PIR0bits	set	3635
   223                           
   224                           	psect	smallconst
   225   000E00                     __psmallconst:
   226                           	callstack 0
   227   000E00  00                 	db	0
   228   000E01                     
   229                           ; BSR set to: 14
   230   000E01  25                 	db	37
   231   000E02  75                 	db	117	;'u'
   232   000E03  20                 	db	32
   233   000E04  25                 	db	37
   234   000E05  75                 	db	117	;'u'
   235   000E06  20                 	db	32
   236   000E07  25                 	db	37
   237   000E08  75                 	db	117	;'u'
   238   000E09  20                 	db	32
   239   000E0A  25                 	db	37
   240   000E0B  75                 	db	117	;'u'
   241   000E0C  20                 	db	32
   242   000E0D  00                 	db	0
   243   000E0E                     
   244                           ; BSR set to: 14
   245   000E0E  25                 	db	37
   246   000E0F  75                 	db	117	;'u'
   247   000E10  20                 	db	32
   248   000E11  25                 	db	37
   249   000E12  75                 	db	117	;'u'
   250   000E13  20                 	db	32
   251   000E14  25                 	db	37
   252   000E15  75                 	db	117	;'u'
   253   000E16  20                 	db	32
   254   000E17  0D                 	db	13
   255   000E18  00                 	db	0
   256   000E19                     STR_1:
   257                           
   258                           ; BSR set to: 14
   259   000E19  25                 	db	37
   260   000E1A  64                 	db	100	;'d'
   261   000E1B  20                 	db	32
   262   000E1C  0D                 	db	13
   263   000E1D  00                 	db	0
   264   000E1E                     STR_2:
   265                           
   266                           ; BSR set to: 14
   267   000E1E  25                 	db	37
   268   000E1F  64                 	db	100	;'d'
   269   000E20  20                 	db	32
   270   000E21  00                 	db	0
   271   000E22  00                 	db	0	; dummy byte at the end
   272   000000                     
   273                           ; #config settings
   274                           
   275                           	psect	cinit
   276   002C2A                     __pcinit:
   277                           	callstack 0
   278   002C2A                     start_initialization:
   279                           	callstack 0
   280   002C2A                     __initialization:
   281                           	callstack 0
   282                           
   283                           ; Initialize objects allocated to COMRAM (26 bytes)
   284                           ; load TBLPTR registers with __pidataCOMRAM
   285   002C2A  0E7E               	movlw	low __pidataCOMRAM
   286   002C2C  6EF6               	movwf	tblptrl,c
   287   002C2E  0E2F               	movlw	high __pidataCOMRAM
   288   002C30  6EF7               	movwf	tblptrh,c
   289   002C32  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   290   002C34  6EF8               	movwf	tblptru,c
   291   002C36  EE00  F041         	lfsr	0,__pdataCOMRAM
   292   002C3A  EE10 F01A          	lfsr	1,26
   293   002C3E                     copy_data0:
   294   002C3E  0009               	tblrd		*+
   295   002C40  CFF5 FFEE          	movff	tablat,postinc0
   296   002C44  50E5               	movf	postdec1,w,c
   297   002C46  50E1               	movf	fsr1l,w,c
   298   002C48  E1FA               	bnz	copy_data0
   299                           
   300                           ; Clear objects allocated to BANK1 (60 bytes)
   301   002C4A  EE01  F000         	lfsr	0,__pbssBANK1
   302   002C4E  0E3C               	movlw	60
   303   002C50                     clear_0:
   304   002C50  6AEE               	clrf	postinc0,c
   305   002C52  06E8               	decf	wreg,f,c
   306   002C54  E1FD               	bnz	clear_0
   307                           
   308                           ; Clear objects allocated to COMRAM (3 bytes)
   309   002C56  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   310   002C58  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   311   002C5A  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   312   002C5C                     end_of_initialization:
   313                           	callstack 0
   314   002C5C                     __end_of__initialization:
   315                           	callstack 0
   316   002C5C  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   317   002C5E  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   318   002C60  0100               	movlb	0
   319   002C62  EF1F  F00F         	goto	_main	;jump to C main() function
   320                           
   321                           	psect	bssCOMRAM
   322   00005B                     __pbssCOMRAM:
   323                           	callstack 0
   324   00005B                     _manoeuvre_count:
   325                           	callstack 0
   326   00005B                     	ds	1
   327   00005C                     _return_flag:
   328                           	callstack 0
   329   00005C                     	ds	1
   330   00005D                     _returning:
   331                           	callstack 0
   332   00005D                     	ds	1
   333                           
   334                           	psect	dataCOMRAM
   335   000041                     __pdataCOMRAM:
   336                           	callstack 0
   337   000041                     _manoeuvre_pointer:
   338                           	callstack 0
   339   000041                     	ds	2
   340   000043                     _timer_low_pointer:
   341                           	callstack 0
   342   000043                     	ds	2
   343   000045                     _timer_high_pointer:
   344                           	callstack 0
   345   000045                     	ds	2
   346   000047                     _wall_threshold:
   347                           	callstack 0
   348   000047                     	ds	2
   349   000049                     _squareDelay:
   350                           	callstack 0
   351   000049                     	ds	2
   352   00004B                     _headbuttDelay:
   353                           	callstack 0
   354   00004B                     	ds	2
   355   00004D                     _turn180Delay:
   356                           	callstack 0
   357   00004D                     	ds	2
   358   00004F                     _turnRight135Delay:
   359                           	callstack 0
   360   00004F                     	ds	2
   361   000051                     _turnLeft135Delay:
   362                           	callstack 0
   363   000051                     	ds	2
   364   000053                     _turnRight90Delay:
   365                           	callstack 0
   366   000053                     	ds	2
   367   000055                     _turnLeft90Delay:
   368                           	callstack 0
   369   000055                     	ds	2
   370   000057                     _turningGear:
   371                           	callstack 0
   372   000057                     	ds	1
   373   000058                     _topGearRight:
   374                           	callstack 0
   375   000058                     	ds	1
   376   000059                     _topGearLeft:
   377                           	callstack 0
   378   000059                     	ds	1
   379   00005A                     _rampDelay:
   380                           	callstack 0
   381   00005A                     	ds	1
   382                           
   383                           	psect	bssBANK1
   384   000100                     __pbssBANK1:
   385                           	callstack 0
   386   000100                     _trail_manoeuvre:
   387                           	callstack 0
   388   000100                     	ds	20
   389   000114                     _trail_timer_low:
   390                           	callstack 0
   391   000114                     	ds	20
   392   000128                     _trail_timer_high:
   393                           	callstack 0
   394   000128                     	ds	20
   395                           
   396                           	psect	cstackBANK0
   397   000060                     __pcstackBANK0:
   398                           	callstack 0
   399   000060                     main@HSV_colour:
   400                           	callstack 0
   401                           
   402                           ; 6 bytes @ 0x0
   403   000060                     	ds	6
   404   000066                     main@motorL:
   405                           	callstack 0
   406                           
   407                           ; 9 bytes @ 0x6
   408   000066                     	ds	9
   409   00006F                     main@motorR:
   410                           	callstack 0
   411                           
   412                           ; 9 bytes @ 0xF
   413   00006F                     	ds	9
   414   000078                     main@measured_colour:
   415                           	callstack 0
   416                           
   417                           ; 8 bytes @ 0x18
   418   000078                     	ds	8
   419                           
   420                           	psect	cstackCOMRAM
   421   000001                     __pcstackCOMRAM:
   422                           	callstack 0
   423   000001                     ??_toggle_tricolour_LED:
   424   000001                     ??_I2C_2_Master_Idle:
   425   000001                     ?_max:
   426                           	callstack 0
   427   000001                     ?_min:
   428                           	callstack 0
   429   000001                     ?___wmul:
   430                           	callstack 0
   431   000001                     ?___lmul:
   432                           	callstack 0
   433   000001                     ?___lldiv:
   434                           	callstack 0
   435   000001                     ?___xxtofl:
   436                           	callstack 0
   437   000001                     write_timer@tL:
   438                           	callstack 0
   439   000001                     max@a:
   440                           	callstack 0
   441   000001                     min@a:
   442                           	callstack 0
   443   000001                     initDCmotorsPWM@PWMperiod:
   444                           	callstack 0
   445   000001                     ___wmul@multiplier:
   446                           	callstack 0
   447   000001                     ___lmul@multiplier:
   448                           	callstack 0
   449   000001                     ___lldiv@dividend:
   450                           	callstack 0
   451   000001                     ___xxtofl@val:
   452                           	callstack 0
   453                           
   454                           ; 4 bytes @ 0x0
   455   000001                     	ds	1
   456   000002                     ??_I2C_2_Master_Read:
   457   000002                     I2C_2_Master_Write@data_byte:
   458                           	callstack 0
   459   000002                     write_timer@tH:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x1
   463   000002                     	ds	1
   464   000003                     color_writetoaddr@value:
   465                           	callstack 0
   466   000003                     I2C_2_Master_Read@ack:
   467                           	callstack 0
   468   000003                     max@b:
   469                           	callstack 0
   470   000003                     min@b:
   471                           	callstack 0
   472   000003                     ___wmul@multiplicand:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x2
   476   000003                     	ds	1
   477   000004                     color_writetoaddr@address:
   478                           	callstack 0
   479   000004                     I2C_2_Master_Read@tmp:
   480                           	callstack 0
   481                           
   482                           ; 1 bytes @ 0x3
   483   000004                     	ds	1
   484   000005                     ??_color_click_init:
   485   000005                     ??___xxtofl:
   486   000005                     ?_color_read_Red:
   487                           	callstack 0
   488   000005                     ?_color_read_Green:
   489                           	callstack 0
   490   000005                     ?_color_read_Blue:
   491                           	callstack 0
   492   000005                     ?_color_read_Clear:
   493                           	callstack 0
   494   000005                     max@max_val:
   495                           	callstack 0
   496   000005                     min@min_val:
   497                           	callstack 0
   498   000005                     ___wmul@product:
   499                           	callstack 0
   500   000005                     ___lmul@multiplicand:
   501                           	callstack 0
   502   000005                     ___lldiv@divisor:
   503                           	callstack 0
   504                           
   505                           ; 4 bytes @ 0x4
   506   000005                     	ds	2
   507   000007                     ??_color_read_Red:
   508   000007                     ??_color_read_Green:
   509   000007                     ??_color_read_Blue:
   510   000007                     ??_color_read_Clear:
   511   000007                     ?_maxRGB:
   512                           	callstack 0
   513   000007                     ?_minRGB:
   514                           	callstack 0
   515   000007                     ?___lwdiv:
   516                           	callstack 0
   517   000007                     maxRGB@p:
   518                           	callstack 0
   519   000007                     minRGB@p:
   520                           	callstack 0
   521   000007                     ___lwdiv@dividend:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0x6
   525   000007                     	ds	2
   526   000009                     ___xxtofl@sign:
   527                           	callstack 0
   528   000009                     ___lwdiv@divisor:
   529                           	callstack 0
   530   000009                     _maxRGB$3109:
   531                           	callstack 0
   532   000009                     _minRGB$3110:
   533                           	callstack 0
   534   000009                     ___lmul@product:
   535                           	callstack 0
   536   000009                     ___lldiv@quotient:
   537                           	callstack 0
   538                           
   539                           ; 4 bytes @ 0x8
   540   000009                     	ds	1
   541   00000A                     ___xxtofl@exp:
   542                           	callstack 0
   543   00000A                     color_read_Red@tmp:
   544                           	callstack 0
   545   00000A                     color_read_Green@tmp:
   546                           	callstack 0
   547   00000A                     color_read_Blue@tmp:
   548                           	callstack 0
   549   00000A                     color_read_Clear@tmp:
   550                           	callstack 0
   551                           
   552                           ; 2 bytes @ 0x9
   553   00000A                     	ds	1
   554   00000B                     ___lwdiv@quotient:
   555                           	callstack 0
   556   00000B                     ___xxtofl@arg:
   557                           	callstack 0
   558                           
   559                           ; 4 bytes @ 0xA
   560   00000B                     	ds	1
   561   00000C                     getRGBCval@p:
   562                           	callstack 0
   563                           
   564                           ; 1 bytes @ 0xB
   565   00000C                     	ds	1
   566   00000D                     ___lldiv@counter:
   567                           	callstack 0
   568   00000D                     ___lwdiv@counter:
   569                           	callstack 0
   570                           
   571                           ; 1 bytes @ 0xC
   572   00000D                     	ds	1
   573   00000E                     getHSVval@p1:
   574                           	callstack 0
   575   00000E                     setMotorPWM@m:
   576                           	callstack 0
   577                           
   578                           ; 1 bytes @ 0xD
   579   00000E                     	ds	1
   580   00000F                     ??_setMotorPWM:
   581   00000F                     ?___flmul:
   582                           	callstack 0
   583   00000F                     getHSVval@p2:
   584                           	callstack 0
   585   00000F                     ___flmul@b:
   586                           	callstack 0
   587                           
   588                           ; 4 bytes @ 0xE
   589   00000F                     	ds	1
   590   000010                     ??_getHSVval:
   591                           
   592                           ; 1 bytes @ 0xF
   593   000010                     	ds	1
   594   000011                     setMotorPWM@posDuty:
   595                           	callstack 0
   596                           
   597                           ; 1 bytes @ 0x10
   598   000011                     	ds	1
   599   000012                     setMotorPWM@negDuty:
   600                           	callstack 0
   601                           
   602                           ; 1 bytes @ 0x11
   603   000012                     	ds	1
   604   000013                     stop@mL:
   605                           	callstack 0
   606   000013                     turnLeft@mL:
   607                           	callstack 0
   608   000013                     turnRight@mL:
   609                           	callstack 0
   610   000013                     fullSpeedReverse@mL:
   611                           	callstack 0
   612   000013                     ___flmul@a:
   613                           	callstack 0
   614                           
   615                           ; 4 bytes @ 0x12
   616   000013                     	ds	1
   617   000014                     stop@mR:
   618                           	callstack 0
   619   000014                     turnLeft@mR:
   620                           	callstack 0
   621   000014                     turnRight@mR:
   622                           	callstack 0
   623   000014                     fullSpeedReverse@mR:
   624                           	callstack 0
   625                           
   626                           ; 1 bytes @ 0x13
   627   000014                     	ds	1
   628   000015                     ??_stop:
   629   000015                     ??_turnLeft:
   630   000015                     ??_turnRight:
   631   000015                     ??_fullSpeedReverse:
   632                           
   633                           ; 1 bytes @ 0x14
   634   000015                     	ds	1
   635   000016                     turnLeft@leftGear:
   636                           	callstack 0
   637   000016                     turnRight@leftGear:
   638                           	callstack 0
   639   000016                     fullSpeedReverse@leftGear:
   640                           	callstack 0
   641                           
   642                           ; 1 bytes @ 0x15
   643   000016                     	ds	1
   644   000017                     ??___flmul:
   645   000017                     turnLeft@rightGear:
   646                           	callstack 0
   647   000017                     turnRight@rightGear:
   648                           	callstack 0
   649   000017                     fullSpeedReverse@rightGear:
   650                           	callstack 0
   651                           
   652                           ; 1 bytes @ 0x16
   653   000017                     	ds	1
   654   000018                     turnLeft90@mL:
   655                           	callstack 0
   656   000018                     turnRight90@mL:
   657                           	callstack 0
   658   000018                     turnLeft135@mL:
   659                           	callstack 0
   660   000018                     turnRight135@mL:
   661                           	callstack 0
   662   000018                     UTurn@mL:
   663                           	callstack 0
   664   000018                     headbuttReverse@mL:
   665                           	callstack 0
   666   000018                     squareReverse@mL:
   667                           	callstack 0
   668   000018                     getHSVval@Sz:
   669                           	callstack 0
   670                           
   671                           ; 2 bytes @ 0x17
   672   000018                     	ds	1
   673   000019                     turnLeft90@mR:
   674                           	callstack 0
   675   000019                     turnRight90@mR:
   676                           	callstack 0
   677   000019                     turnLeft135@mR:
   678                           	callstack 0
   679   000019                     turnRight135@mR:
   680                           	callstack 0
   681   000019                     UTurn@mR:
   682                           	callstack 0
   683   000019                     headbuttReverse@mR:
   684                           	callstack 0
   685   000019                     squareReverse@mR:
   686                           	callstack 0
   687                           
   688                           ; 1 bytes @ 0x18
   689   000019                     	ds	1
   690   00001A                     ??_turnLeft90:
   691   00001A                     ??_turnRight90:
   692   00001A                     ??_turnLeft135:
   693   00001A                     ??_turnRight135:
   694   00001A                     ??_UTurn:
   695   00001A                     ??_headbuttReverse:
   696   00001A                     ??_squareReverse:
   697   00001A                     getHSVval@m:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x19
   701   00001A                     	ds	1
   702   00001B                     ___flmul@sign:
   703                           	callstack 0
   704                           
   705                           ; 1 bytes @ 0x1A
   706   00001B                     	ds	1
   707   00001C                     card_red@mL:
   708                           	callstack 0
   709   00001C                     card_green@mL:
   710                           	callstack 0
   711   00001C                     card_blue@mL:
   712                           	callstack 0
   713   00001C                     card_yellow@mL:
   714                           	callstack 0
   715   00001C                     card_pink@mL:
   716                           	callstack 0
   717   00001C                     card_orange@mL:
   718                           	callstack 0
   719   00001C                     card_cyan@mL:
   720                           	callstack 0
   721   00001C                     card_white@mL:
   722                           	callstack 0
   723   00001C                     getHSVval@S:
   724                           	callstack 0
   725   00001C                     ___flmul@grs:
   726                           	callstack 0
   727                           
   728                           ; 4 bytes @ 0x1B
   729   00001C                     	ds	1
   730   00001D                     card_red@mR:
   731                           	callstack 0
   732   00001D                     card_green@mR:
   733                           	callstack 0
   734   00001D                     card_blue@mR:
   735                           	callstack 0
   736   00001D                     card_yellow@mR:
   737                           	callstack 0
   738   00001D                     card_pink@mR:
   739                           	callstack 0
   740   00001D                     card_orange@mR:
   741                           	callstack 0
   742   00001D                     card_cyan@mR:
   743                           	callstack 0
   744   00001D                     card_white@mR:
   745                           	callstack 0
   746                           
   747                           ; 1 bytes @ 0x1C
   748   00001D                     	ds	1
   749   00001E                     card_red@backtrack:
   750                           	callstack 0
   751   00001E                     card_green@backtrack:
   752                           	callstack 0
   753   00001E                     card_blue@backtrack:
   754                           	callstack 0
   755   00001E                     card_yellow@backtrack:
   756                           	callstack 0
   757   00001E                     card_pink@backtrack:
   758                           	callstack 0
   759   00001E                     card_orange@backtrack:
   760                           	callstack 0
   761   00001E                     card_cyan@backtrack:
   762                           	callstack 0
   763   00001E                     getHSVval@H:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0x1D
   767   00001E                     	ds	1
   768   00001F                     ??_card_red:
   769   00001F                     ??_card_green:
   770   00001F                     ??_card_blue:
   771   00001F                     ??_card_yellow:
   772   00001F                     ??_card_pink:
   773   00001F                     ??_card_orange:
   774   00001F                     ??_card_cyan:
   775                           
   776                           ; 1 bytes @ 0x1E
   777   00001F                     	ds	1
   778   000020                     ___flmul@aexp:
   779                           	callstack 0
   780   000020                     getHSVval@temp_661:
   781                           	callstack 0
   782                           
   783                           ; 4 bytes @ 0x1F
   784   000020                     	ds	1
   785   000021                     pick_card@mL:
   786                           	callstack 0
   787   000021                     ___flmul@bexp:
   788                           	callstack 0
   789                           
   790                           ; 1 bytes @ 0x20
   791   000021                     	ds	1
   792   000022                     pick_card@mR:
   793                           	callstack 0
   794   000022                     ___flmul@prod:
   795                           	callstack 0
   796                           
   797                           ; 4 bytes @ 0x21
   798   000022                     	ds	1
   799   000023                     pick_card@backtrack:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0x22
   803   000023                     	ds	1
   804   000024                     pick_card@key:
   805                           	callstack 0
   806   000024                     getHSVval@temp:
   807                           	callstack 0
   808                           
   809                           ; 4 bytes @ 0x23
   810   000024                     	ds	1
   811   000025                     ??_pick_card:
   812                           
   813                           ; 1 bytes @ 0x24
   814   000025                     	ds	1
   815   000026                     ___flmul@temp:
   816                           	callstack 0
   817                           
   818                           ; 2 bytes @ 0x25
   819   000026                     	ds	1
   820   000027                     RGBC2colourcard@p:
   821                           	callstack 0
   822                           
   823                           ; 1 bytes @ 0x26
   824   000027                     	ds	1
   825   000028                     ?___fltol:
   826                           	callstack 0
   827   000028                     getHSVval@temp_657:
   828                           	callstack 0
   829   000028                     ___fltol@f1:
   830                           	callstack 0
   831                           
   832                           ; 4 bytes @ 0x27
   833   000028                     	ds	2
   834   00002A                     RGBC2colourcard@motorL:
   835                           	callstack 0
   836                           
   837                           ; 9 bytes @ 0x29
   838   00002A                     	ds	2
   839   00002C                     ??___fltol:
   840   00002C                     getHSVval@temp_658:
   841                           	callstack 0
   842                           
   843                           ; 4 bytes @ 0x2B
   844   00002C                     	ds	4
   845   000030                     ___fltol@sign1:
   846                           	callstack 0
   847   000030                     getHSVval@temp_659:
   848                           	callstack 0
   849                           
   850                           ; 4 bytes @ 0x2F
   851   000030                     	ds	1
   852   000031                     ___fltol@exp1:
   853                           	callstack 0
   854                           
   855                           ; 1 bytes @ 0x30
   856   000031                     	ds	1
   857   000032                     scaleRGB@p:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x31
   861   000032                     	ds	1
   862   000033                     ??_scaleRGB:
   863   000033                     RGBC2colourcard@motorR:
   864                           	callstack 0
   865                           
   866                           ; 9 bytes @ 0x32
   867   000033                     	ds	1
   868   000034                     getHSVval@temp_660:
   869                           	callstack 0
   870                           
   871                           ; 4 bytes @ 0x33
   872   000034                     	ds	4
   873   000038                     getHSVval@temp_656:
   874                           	callstack 0
   875                           
   876                           ; 4 bytes @ 0x37
   877   000038                     	ds	4
   878   00003C                     getHSVval@M:
   879                           	callstack 0
   880                           
   881                           ; 2 bytes @ 0x3B
   882   00003C                     	ds	2
   883   00003E                     getHSVval@C:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x3D
   887   00003E                     	ds	2
   888   000040                     ??_main:
   889                           
   890                           ; 1 bytes @ 0x3F
   891   000040                     	ds	1
   892                           
   893 ;;
   894 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   895 ;;
   896 ;; *************** function _main *****************
   897 ;; Defined at:
   898 ;;		line 29 in file "main.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  motorR          9   15[BANK0 ] struct DC_motor
   903 ;;  motorL          9    6[BANK0 ] struct DC_motor
   904 ;;  measured_col    8   24[BANK0 ] struct RGBC_val
   905 ;;  HSV_colour      6    0[BANK0 ] struct HSV_val
   906 ;;  PWMcycle        2    0        unsigned int 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   917 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   918 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   919 ;;      Totals:         1      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   920 ;;Total ram usage:       33 bytes
   921 ;; Hardware stack levels required when called: 8
   922 ;; This function calls:
   923 ;;		_RGBC2colourcard
   924 ;;		_Timer0_init
   925 ;;		_buggy_lights_init
   926 ;;		_color_click_init
   927 ;;		_getHSVval
   928 ;;		_getRGBCval
   929 ;;		_initDCmotorsPWM
   930 ;;		_initUSART4
   931 ;;		_scaleRGB
   932 ;;		_toggle_tricolour_LED
   933 ;; This function is called by:
   934 ;;		Startup code after reset
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text0
   939   001E3E                     __ptext0:
   940                           	callstack 0
   941   001E3E                     _main:
   942                           	callstack 23
   943   001E3E                     
   944                           ;main.c: 30:     struct RGBC_val measured_colour;;main.c: 31:         measured_colour.R 
      +                          = 0;
   945   001E3E  0E00               	movlw	0
   946   001E40  0100               	movlb	0	; () banked
   947   001E42  6F79               	movwf	(main@measured_colour+1)& (0+255),b
   948   001E44  0E00               	movlw	0
   949   001E46  6F78               	movwf	main@measured_colour& (0+255),b
   950                           
   951                           ;main.c: 32:         measured_colour.G = 0;
   952   001E48  0E00               	movlw	0
   953   001E4A  6F7B               	movwf	(main@measured_colour+3)& (0+255),b
   954   001E4C  0E00               	movlw	0
   955   001E4E  6F7A               	movwf	(main@measured_colour+2)& (0+255),b
   956                           
   957                           ;main.c: 33:         measured_colour.B = 0;
   958   001E50  0E00               	movlw	0
   959   001E52  6F7D               	movwf	(main@measured_colour+5)& (0+255),b
   960   001E54  0E00               	movlw	0
   961   001E56  6F7C               	movwf	(main@measured_colour+4)& (0+255),b
   962                           
   963                           ;main.c: 34:         measured_colour.C = 0;
   964   001E58  0E00               	movlw	0
   965   001E5A  6F7F               	movwf	(main@measured_colour+7)& (0+255),b
   966   001E5C  0E00               	movlw	0
   967   001E5E  6F7E               	movwf	(main@measured_colour+6)& (0+255),b
   968                           
   969                           ;main.c: 36:     struct HSV_val HSV_colour;;main.c: 37:         HSV_colour.H = 0;
   970   001E60  0E00               	movlw	0
   971   001E62  6F61               	movwf	(main@HSV_colour+1)& (0+255),b
   972   001E64  0E00               	movlw	0
   973   001E66  6F60               	movwf	main@HSV_colour& (0+255),b
   974                           
   975                           ;main.c: 38:         HSV_colour.S = 0;
   976   001E68  0E00               	movlw	0
   977   001E6A  6F63               	movwf	(main@HSV_colour+3)& (0+255),b
   978   001E6C  0E00               	movlw	0
   979   001E6E  6F62               	movwf	(main@HSV_colour+2)& (0+255),b
   980                           
   981                           ;main.c: 39:         HSV_colour.V = 0;
   982   001E70  0E00               	movlw	0
   983   001E72  6F65               	movwf	(main@HSV_colour+5)& (0+255),b
   984   001E74  0E00               	movlw	0
   985   001E76  6F64               	movwf	(main@HSV_colour+4)& (0+255),b
   986                           
   987                           ;main.c: 43:     struct DC_motor motorL, motorR;;main.c: 44:         motorL.power = 0;
   988   001E78  0E00               	movlw	0
   989   001E7A  6F66               	movwf	main@motorL& (0+255),b
   990                           
   991                           ;main.c: 45:         motorL.direction = 1;
   992   001E7C  0E01               	movlw	1
   993   001E7E  6F67               	movwf	(main@motorL+1)& (0+255),b
   994                           
   995                           ;main.c: 46:         motorL.brakemode = 1;
   996   001E80  0E01               	movlw	1
   997   001E82  6F68               	movwf	(main@motorL+2)& (0+255),b
   998   001E84                     
   999                           ; BSR set to: 0
  1000                           ;main.c: 47:         motorL.PWMperiod = PWMcycle;
  1001   001E84  0E00               	movlw	0
  1002   001E86  6F6A               	movwf	(main@motorL+4)& (0+255),b
  1003   001E88  0E63               	movlw	99
  1004   001E8A  6F69               	movwf	(main@motorL+3)& (0+255),b
  1005   001E8C                     
  1006                           ; BSR set to: 0
  1007                           ;main.c: 48:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  1008   001E8C  0EAA               	movlw	170
  1009   001E8E  6F6B               	movwf	(main@motorL+5)& (0+255),b
  1010   001E90  0E0F               	movlw	15
  1011   001E92  6F6C               	movwf	(main@motorL+6)& (0+255),b
  1012   001E94                     
  1013                           ; BSR set to: 0
  1014                           ;main.c: 49:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  1015   001E94  0EA6               	movlw	166
  1016   001E96  6F6D               	movwf	(main@motorL+7)& (0+255),b
  1017   001E98  0E0F               	movlw	15
  1018   001E9A  6F6E               	movwf	(main@motorL+8)& (0+255),b
  1019                           
  1020                           ;main.c: 50:         motorR.power = 0;
  1021   001E9C  0E00               	movlw	0
  1022   001E9E  6F6F               	movwf	main@motorR& (0+255),b
  1023                           
  1024                           ;main.c: 51:         motorR.direction = 1;
  1025   001EA0  0E01               	movlw	1
  1026   001EA2  6F70               	movwf	(main@motorR+1)& (0+255),b
  1027                           
  1028                           ;main.c: 52:         motorR.brakemode = 1;
  1029   001EA4  0E01               	movlw	1
  1030   001EA6  6F71               	movwf	(main@motorR+2)& (0+255),b
  1031   001EA8                     
  1032                           ; BSR set to: 0
  1033                           ;main.c: 53:         motorR.PWMperiod = PWMcycle;
  1034   001EA8  0E00               	movlw	0
  1035   001EAA  6F73               	movwf	(main@motorR+4)& (0+255),b
  1036   001EAC  0E63               	movlw	99
  1037   001EAE  6F72               	movwf	(main@motorR+3)& (0+255),b
  1038   001EB0                     
  1039                           ; BSR set to: 0
  1040                           ;main.c: 54:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  1041   001EB0  0E25               	movlw	37
  1042   001EB2  6F74               	movwf	(main@motorR+5)& (0+255),b
  1043   001EB4  0E0F               	movlw	15
  1044   001EB6  6F75               	movwf	(main@motorR+6)& (0+255),b
  1045   001EB8                     
  1046                           ; BSR set to: 0
  1047                           ;main.c: 55:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  1048   001EB8  0E21               	movlw	33
  1049   001EBA  6F76               	movwf	(main@motorR+7)& (0+255),b
  1050   001EBC  0E0F               	movlw	15
  1051   001EBE  6F77               	movwf	(main@motorR+8)& (0+255),b
  1052   001EC0                     
  1053                           ; BSR set to: 0
  1054                           ;main.c: 57:     initDCmotorsPWM(PWMcycle);
  1055   001EC0  0E00               	movlw	0
  1056   001EC2  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1057   001EC4  0E63               	movlw	99
  1058   001EC6  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1059   001EC8  EC53  F012         	call	_initDCmotorsPWM	;wreg free
  1060                           
  1061                           ;main.c: 58:     buggy_lights_init();
  1062   001ECC  EC28  F017         	call	_buggy_lights_init	;wreg free
  1063   001ED0                     
  1064                           ;main.c: 59:     color_click_init();
  1065   001ED0  EC33  F016         	call	_color_click_init	;wreg free
  1066   001ED4                     
  1067                           ;main.c: 60:     initUSART4();
  1068   001ED4  ECB0  F017         	call	_initUSART4	;wreg free
  1069   001ED8                     
  1070                           ;main.c: 61:     Timer0_init();
  1071   001ED8  EC8E  F017         	call	_Timer0_init	;wreg free
  1072   001EDC                     
  1073                           ;main.c: 65:         TRISDbits.TRISD7 = 0;
  1074   001EDC  9E84               	bcf	132,7,c	;volatile
  1075   001EDE                     
  1076                           ;main.c: 66:         TRISHbits.TRISH3 = 0;
  1077   001EDE  9688               	bcf	136,3,c	;volatile
  1078   001EE0                     
  1079                           ;main.c: 68:         LATDbits.LATD7 = 0;
  1080   001EE0  9E7C               	bcf	124,7,c	;volatile
  1081   001EE2                     
  1082                           ;main.c: 69:         LATHbits.LATH3 = 0;
  1083   001EE2  9680               	bcf	128,3,c	;volatile
  1084   001EE4                     
  1085                           ;main.c: 73:         TRISFbits.TRISF2 = 1;
  1086   001EE4  8486               	bsf	134,2,c	;volatile
  1087   001EE6                     
  1088                           ;main.c: 74:         TRISFbits.TRISF3 = 1;
  1089   001EE6  8686               	bsf	134,3,c	;volatile
  1090   001EE8                     
  1091                           ;main.c: 76:         ANSELFbits.ANSELF2 = 0;
  1092   001EE8  010E               	movlb	14	; () banked
  1093   001EEA  95B4               	bcf	180,2,b	;volatile
  1094   001EEC                     
  1095                           ; BSR set to: 14
  1096                           ;main.c: 77:         ANSELFbits.ANSELF3 = 0;
  1097   001EEC  97B4               	bcf	180,3,b	;volatile
  1098                           
  1099                           ;main.c: 83:     LATHbits.LATH3 = !LATHbits.LATH3;
  1100   001EEE  A680               	btfss	128,3,c	;volatile
  1101   001EF0  EF7C  F00F         	goto	u2331
  1102   001EF4  EF80  F00F         	goto	u2330
  1103   001EF8                     u2331:
  1104   001EF8  6A40               	clrf	??_main^0,c
  1105   001EFA  2A40               	incf	??_main^0,f,c
  1106   001EFC  EF81  F00F         	goto	u2348
  1107   001F00                     u2330:
  1108   001F00  6A40               	clrf	??_main^0,c
  1109   001F02                     u2348:
  1110   001F02  4640               	rlncf	??_main^0,f,c
  1111   001F04  4640               	rlncf	??_main^0,f,c
  1112   001F06  4640               	rlncf	??_main^0,f,c
  1113   001F08  5080               	movf	128,w,c	;volatile
  1114   001F0A  1840               	xorwf	??_main^0,w,c
  1115   001F0C  0BF7               	andlw	-9
  1116   001F0E  1840               	xorwf	??_main^0,w,c
  1117   001F10  6E80               	movwf	128,c	;volatile
  1118   001F12                     
  1119                           ;main.c: 84:     toggle_tricolour_LED();
  1120   001F12  EC8A  F010         	call	_toggle_tricolour_LED	;wreg free
  1121   001F16                     l3637:
  1122                           
  1123                           ;main.c: 89:     {;main.c: 91:         getRGBCval(&measured_colour);
  1124   001F16  0E78               	movlw	low main@measured_colour
  1125   001F18  6E0C               	movwf	getRGBCval@p^0,c
  1126   001F1A  ECD5  F014         	call	_getRGBCval	;wreg free
  1127   001F1E                     
  1128                           ;main.c: 92:         scaleRGB(&measured_colour);
  1129   001F1E  0E78               	movlw	low main@measured_colour
  1130   001F20  6E32               	movwf	scaleRGB@p^0,c
  1131   001F22  EC1F  F010         	call	_scaleRGB	;wreg free
  1132   001F26                     
  1133                           ;main.c: 96:         getHSVval(&HSV_colour, &measured_colour);
  1134   001F26  0E60               	movlw	low main@HSV_colour
  1135   001F28  6E0E               	movwf	getHSVval@p1^0,c
  1136   001F2A  0E78               	movlw	low main@measured_colour
  1137   001F2C  6E0F               	movwf	getHSVval@p2^0,c
  1138   001F2E  EC12  F007         	call	_getHSVval	;wreg free
  1139   001F32                     
  1140                           ;main.c: 101:         RGBC2colourcard(&measured_colour);
  1141   001F32  0E78               	movlw	low main@measured_colour
  1142   001F34  6E27               	movwf	RGBC2colourcard@p^0,c
  1143   001F36  EC11  F00E         	call	_RGBC2colourcard	;wreg free
  1144   001F3A  EF8B  F00F         	goto	l3637
  1145   001F3E  EF1A  F000         	goto	start
  1146   001F42                     __end_of_main:
  1147                           	callstack 0
  1148                           
  1149 ;; *************** function _toggle_tricolour_LED *****************
  1150 ;; Defined at:
  1151 ;;		line 86 in file "buggy_lights.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;		None
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		wreg, status,2, status,0
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1169 ;;Total ram usage:        1 bytes
  1170 ;; Hardware stack levels used: 1
  1171 ;; Hardware stack levels required when called: 1
  1172 ;; This function calls:
  1173 ;;		Nothing
  1174 ;; This function is called by:
  1175 ;;		_main
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           	psect	text1
  1180   002114                     __ptext1:
  1181                           	callstack 0
  1182   002114                     _toggle_tricolour_LED:
  1183                           	callstack 29
  1184   002114                     
  1185                           ;buggy_lights.c: 91:             LATGbits.LATG1 = !LATGbits.LATG1;
  1186   002114  A27F               	btfss	127,1,c	;volatile
  1187   002116  EF8F  F010         	goto	u1971
  1188   00211A  EF93  F010         	goto	u1970
  1189   00211E                     u1971:
  1190   00211E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1191   002120  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1192   002122  EF94  F010         	goto	u1988
  1193   002126                     u1970:
  1194   002126  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1195   002128                     u1988:
  1196   002128  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1197   00212A  507F               	movf	127,w,c	;volatile
  1198   00212C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1199   00212E  0BFD               	andlw	-3
  1200   002130  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1201   002132  6E7F               	movwf	127,c	;volatile
  1202                           
  1203                           ;buggy_lights.c: 92:             LATAbits.LATA4 = !LATAbits.LATA4;
  1204   002134  A879               	btfss	121,4,c	;volatile
  1205   002136  EF9F  F010         	goto	u1991
  1206   00213A  EFA3  F010         	goto	u1990
  1207   00213E                     u1991:
  1208   00213E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1209   002140  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1210   002142  EFA4  F010         	goto	u2008
  1211   002146                     u1990:
  1212   002146  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1213   002148                     u2008:
  1214   002148  3A01               	swapf	??_toggle_tricolour_LED^0,f,c
  1215   00214A  5079               	movf	121,w,c	;volatile
  1216   00214C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1217   00214E  0BEF               	andlw	-17
  1218   002150  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1219   002152  6E79               	movwf	121,c	;volatile
  1220                           
  1221                           ;buggy_lights.c: 93:             LATFbits.LATF7 = !LATFbits.LATF7;
  1222   002154  AE7E               	btfss	126,7,c	;volatile
  1223   002156  EFAF  F010         	goto	u2011
  1224   00215A  EFB3  F010         	goto	u2010
  1225   00215E                     u2011:
  1226   00215E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1227   002160  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1228   002162  EFB4  F010         	goto	u2028
  1229   002166                     u2010:
  1230   002166  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1231   002168                     u2028:
  1232   002168  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1233   00216A  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1234   00216C  507E               	movf	126,w,c	;volatile
  1235   00216E  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1236   002170  0B7F               	andlw	-129
  1237   002172  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1238   002174  6E7E               	movwf	126,c	;volatile
  1239                           
  1240                           ;buggy_lights.c: 97:             LATGbits.LATG0 = !LATGbits.LATG0;
  1241   002176  A07F               	btfss	127,0,c	;volatile
  1242   002178  EFC0  F010         	goto	u2031
  1243   00217C  EFC4  F010         	goto	u2030
  1244   002180                     u2031:
  1245   002180  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1246   002182  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1247   002184  EFC5  F010         	goto	u2048
  1248   002188                     u2030:
  1249   002188  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1250   00218A                     u2048:
  1251   00218A  507F               	movf	127,w,c	;volatile
  1252   00218C  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1253   00218E  0BFE               	andlw	-2
  1254   002190  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1255   002192  6E7F               	movwf	127,c	;volatile
  1256                           
  1257                           ;buggy_lights.c: 98:             LATEbits.LATE7 = !LATEbits.LATE7;
  1258   002194  AE7D               	btfss	125,7,c	;volatile
  1259   002196  EFCF  F010         	goto	u2051
  1260   00219A  EFD3  F010         	goto	u2050
  1261   00219E                     u2051:
  1262   00219E  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1263   0021A0  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1264   0021A2  EFD4  F010         	goto	u2068
  1265   0021A6                     u2050:
  1266   0021A6  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1267   0021A8                     u2068:
  1268   0021A8  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1269   0021AA  3201               	rrcf	??_toggle_tricolour_LED^0,f,c
  1270   0021AC  507D               	movf	125,w,c	;volatile
  1271   0021AE  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1272   0021B0  0B7F               	andlw	-129
  1273   0021B2  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1274   0021B4  6E7D               	movwf	125,c	;volatile
  1275                           
  1276                           ;buggy_lights.c: 99:             LATAbits.LATA3 = !LATAbits.LATA3;
  1277   0021B6  A679               	btfss	121,3,c	;volatile
  1278   0021B8  EFE0  F010         	goto	u2071
  1279   0021BC  EFE4  F010         	goto	u2070
  1280   0021C0                     u2071:
  1281   0021C0  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1282   0021C2  2A01               	incf	??_toggle_tricolour_LED^0,f,c
  1283   0021C4  EFE5  F010         	goto	u2088
  1284   0021C8                     u2070:
  1285   0021C8  6A01               	clrf	??_toggle_tricolour_LED^0,c
  1286   0021CA                     u2088:
  1287   0021CA  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1288   0021CC  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1289   0021CE  4601               	rlncf	??_toggle_tricolour_LED^0,f,c
  1290   0021D0  5079               	movf	121,w,c	;volatile
  1291   0021D2  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1292   0021D4  0BF7               	andlw	-9
  1293   0021D6  1801               	xorwf	??_toggle_tricolour_LED^0,w,c
  1294   0021D8  6E79               	movwf	121,c	;volatile
  1295   0021DA  0012               	return		;funcret
  1296   0021DC                     __end_of_toggle_tricolour_LED:
  1297                           	callstack 0
  1298                           
  1299 ;; *************** function _scaleRGB *****************
  1300 ;; Defined at:
  1301 ;;		line 128 in file "color.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  p               1   49[COMRAM] PTR struct RGBC_val
  1304 ;;		 -> main@measured_colour(8), 
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;		None
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  1    wreg      void 
  1309 ;; Registers used:
  1310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1316 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1319 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1320 ;;Total ram usage:        3 bytes
  1321 ;; Hardware stack levels used: 1
  1322 ;; Hardware stack levels required when called: 2
  1323 ;; This function calls:
  1324 ;;		___flmul
  1325 ;;		___fltol
  1326 ;;		___xxtofl
  1327 ;; This function is called by:
  1328 ;;		_main
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text2
  1333   00203E                     __ptext2:
  1334                           	callstack 0
  1335   00203E                     _scaleRGB:
  1336                           	callstack 28
  1337   00203E                     
  1338                           ;color.c: 128: void scaleRGB(struct RGBC_val *p);color.c: 129: {;color.c: 130:     p->R 
      +                          *= 0.5;
  1339   00203E  0E00               	movlw	0
  1340   002040  6E13               	movwf	___flmul@a^0,c
  1341   002042  0E00               	movlw	0
  1342   002044  6E14               	movwf	(___flmul@a+1)^0,c
  1343   002046  0E00               	movlw	0
  1344   002048  6E15               	movwf	(___flmul@a+2)^0,c
  1345   00204A  0E3F               	movlw	63
  1346   00204C  6E16               	movwf	(___flmul@a+3)^0,c
  1347   00204E  5032               	movf	scaleRGB@p^0,w,c
  1348   002050  6ED9               	movwf	fsr2l,c
  1349   002052  6ADA               	clrf	fsr2h,c
  1350   002054  CFDE F033          	movff	postinc2,??_scaleRGB
  1351   002058  CFDD F034          	movff	postdec2,??_scaleRGB+1
  1352   00205C  C033  F001         	movff	??_scaleRGB,___xxtofl@val
  1353   002060  C034  F002         	movff	??_scaleRGB+1,___xxtofl@val+1
  1354   002064  6A03               	clrf	(___xxtofl@val+2)^0,c
  1355   002066  6A04               	clrf	(___xxtofl@val+3)^0,c
  1356   002068  0E00               	movlw	0
  1357   00206A  EC8D  F00C         	call	___xxtofl
  1358   00206E  C001  F00F         	movff	?___xxtofl,___flmul@b
  1359   002072  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  1360   002076  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  1361   00207A  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  1362   00207E  EC78  F00A         	call	___flmul	;wreg free
  1363   002082  C00F  F028         	movff	?___flmul,___fltol@f1
  1364   002086  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  1365   00208A  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  1366   00208E  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  1367   002092  EC9C  F00E         	call	___fltol	;wreg free
  1368   002096  5032               	movf	scaleRGB@p^0,w,c
  1369   002098  6ED9               	movwf	fsr2l,c
  1370   00209A  6ADA               	clrf	fsr2h,c
  1371   00209C  C028  FFDE         	movff	?___fltol,postinc2
  1372   0020A0  C029  FFDD         	movff	?___fltol+1,postdec2
  1373                           
  1374                           ;color.c: 131:     p->G *= 0.7;
  1375   0020A4  0E33               	movlw	51
  1376   0020A6  6E13               	movwf	___flmul@a^0,c
  1377   0020A8  0E33               	movlw	51
  1378   0020AA  6E14               	movwf	(___flmul@a+1)^0,c
  1379   0020AC  0E33               	movlw	51
  1380   0020AE  6E15               	movwf	(___flmul@a+2)^0,c
  1381   0020B0  0E3F               	movlw	63
  1382   0020B2  6E16               	movwf	(___flmul@a+3)^0,c
  1383   0020B4  5032               	movf	scaleRGB@p^0,w,c
  1384   0020B6  6ED9               	movwf	fsr2l,c
  1385   0020B8  6ADA               	clrf	fsr2h,c
  1386   0020BA  0E02               	movlw	2
  1387   0020BC  26D9               	addwf	fsr2l,f,c
  1388   0020BE  CFDE F033          	movff	postinc2,??_scaleRGB
  1389   0020C2  CFDD F034          	movff	postdec2,??_scaleRGB+1
  1390   0020C6  C033  F001         	movff	??_scaleRGB,___xxtofl@val
  1391   0020CA  C034  F002         	movff	??_scaleRGB+1,___xxtofl@val+1
  1392   0020CE  6A03               	clrf	(___xxtofl@val+2)^0,c
  1393   0020D0  6A04               	clrf	(___xxtofl@val+3)^0,c
  1394   0020D2  0E00               	movlw	0
  1395   0020D4  EC8D  F00C         	call	___xxtofl
  1396   0020D8  C001  F00F         	movff	?___xxtofl,___flmul@b
  1397   0020DC  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  1398   0020E0  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  1399   0020E4  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  1400   0020E8  EC78  F00A         	call	___flmul	;wreg free
  1401   0020EC  C00F  F028         	movff	?___flmul,___fltol@f1
  1402   0020F0  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  1403   0020F4  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  1404   0020F8  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  1405   0020FC  EC9C  F00E         	call	___fltol	;wreg free
  1406   002100  5032               	movf	scaleRGB@p^0,w,c
  1407   002102  6ED9               	movwf	fsr2l,c
  1408   002104  6ADA               	clrf	fsr2h,c
  1409   002106  0E02               	movlw	2
  1410   002108  26D9               	addwf	fsr2l,f,c
  1411   00210A  C028  FFDE         	movff	?___fltol,postinc2
  1412   00210E  C029  FFDD         	movff	?___fltol+1,postdec2
  1413   002112  0012               	return		;funcret
  1414   002114                     __end_of_scaleRGB:
  1415                           	callstack 0
  1416                           
  1417 ;; *************** function ___xxtofl *****************
  1418 ;; Defined at:
  1419 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  sign            1    wreg     unsigned char 
  1422 ;;  val             4    0[COMRAM] long 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  sign            1    8[COMRAM] unsigned char 
  1425 ;;  arg             4   10[COMRAM] unsigned long 
  1426 ;;  exp             1    9[COMRAM] unsigned char 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  4    0[COMRAM] unsigned char 
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, status,0
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1437 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1438 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1439 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1440 ;;Total ram usage:       14 bytes
  1441 ;; Hardware stack levels used: 1
  1442 ;; Hardware stack levels required when called: 1
  1443 ;; This function calls:
  1444 ;;		Nothing
  1445 ;; This function is called by:
  1446 ;;		_scaleRGB
  1447 ;;		_stop
  1448 ;;		_turnLeft
  1449 ;;		_turnRight
  1450 ;;		_fullSpeedReverse
  1451 ;;		_turnLeft90
  1452 ;;		_turnRight90
  1453 ;;		_turnLeft135
  1454 ;;		_turnRight135
  1455 ;;		_UTurn
  1456 ;;		_headbuttReverse
  1457 ;;		_squareReverse
  1458 ;;		_fullSpeedAhead
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text3
  1463   00191A                     __ptext3:
  1464                           	callstack 0
  1465   00191A                     ___xxtofl:
  1466                           	callstack 28
  1467                           
  1468                           ;incstack = 0
  1469                           ;___xxtofl@sign stored from wreg
  1470   00191A  6E09               	movwf	___xxtofl@sign^0,c
  1471   00191C  5009               	movf	___xxtofl@sign^0,w,c
  1472   00191E  B4D8               	btfsc	status,2,c
  1473   001920  EF94  F00C         	goto	u1871
  1474   001924  EF96  F00C         	goto	u1870
  1475   001928                     u1871:
  1476   001928  EFB8  F00C         	goto	l1412
  1477   00192C                     u1870:
  1478   00192C  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  1479   00192E  EF9D  F00C         	goto	u1880
  1480   001932  EF9B  F00C         	goto	u1881
  1481   001936                     u1881:
  1482   001936  EFB8  F00C         	goto	l1412
  1483   00193A                     u1880:
  1484   00193A  C001  F005         	movff	___xxtofl@val,??___xxtofl
  1485   00193E  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  1486   001942  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  1487   001946  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  1488   00194A  1E05               	comf	??___xxtofl^0,f,c
  1489   00194C  1E06               	comf	(??___xxtofl+1)^0,f,c
  1490   00194E  1E07               	comf	(??___xxtofl+2)^0,f,c
  1491   001950  1E08               	comf	(??___xxtofl+3)^0,f,c
  1492   001952  2A05               	incf	??___xxtofl^0,f,c
  1493   001954  0E00               	movlw	0
  1494   001956  2206               	addwfc	(??___xxtofl+1)^0,f,c
  1495   001958  2207               	addwfc	(??___xxtofl+2)^0,f,c
  1496   00195A  2208               	addwfc	(??___xxtofl+3)^0,f,c
  1497   00195C  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  1498   001960  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  1499   001964  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  1500   001968  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  1501   00196C  EFC0  F00C         	goto	l3275
  1502   001970                     l1412:
  1503   001970  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  1504   001974  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  1505   001978  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  1506   00197C  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  1507   001980                     l3275:
  1508   001980  5001               	movf	___xxtofl@val^0,w,c
  1509   001982  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  1510   001984  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  1511   001986  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  1512   001988  A4D8               	btfss	status,2,c
  1513   00198A  EFC9  F00C         	goto	u1891
  1514   00198E  EFCB  F00C         	goto	u1890
  1515   001992                     u1891:
  1516   001992  EFD5  F00C         	goto	l3281
  1517   001996                     u1890:
  1518   001996  0E00               	movlw	0
  1519   001998  6E01               	movwf	?___xxtofl^0,c
  1520   00199A  0E00               	movlw	0
  1521   00199C  6E02               	movwf	(?___xxtofl+1)^0,c
  1522   00199E  0E00               	movlw	0
  1523   0019A0  6E03               	movwf	(?___xxtofl+2)^0,c
  1524   0019A2  0E00               	movlw	0
  1525   0019A4  6E04               	movwf	(?___xxtofl+3)^0,c
  1526   0019A6  EF66  F00D         	goto	l1415
  1527   0019AA                     l3281:
  1528   0019AA  0E96               	movlw	150
  1529   0019AC  6E0A               	movwf	___xxtofl@exp^0,c
  1530   0019AE  EFDF  F00C         	goto	l3285
  1531   0019B2                     l3283:
  1532   0019B2  2A0A               	incf	___xxtofl@exp^0,f,c
  1533   0019B4  90D8               	bcf	status,0,c
  1534   0019B6  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  1535   0019B8  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  1536   0019BA  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  1537   0019BC  320B               	rrcf	___xxtofl@arg^0,f,c
  1538   0019BE                     l3285:
  1539   0019BE  0E00               	movlw	0
  1540   0019C0  140B               	andwf	___xxtofl@arg^0,w,c
  1541   0019C2  6E05               	movwf	??___xxtofl^0,c
  1542   0019C4  0E00               	movlw	0
  1543   0019C6  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  1544   0019C8  6E06               	movwf	(??___xxtofl+1)^0,c
  1545   0019CA  0E00               	movlw	0
  1546   0019CC  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  1547   0019CE  6E07               	movwf	(??___xxtofl+2)^0,c
  1548   0019D0  0EFE               	movlw	254
  1549   0019D2  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  1550   0019D4  6E08               	movwf	(??___xxtofl+3)^0,c
  1551   0019D6  5005               	movf	??___xxtofl^0,w,c
  1552   0019D8  1006               	iorwf	(??___xxtofl+1)^0,w,c
  1553   0019DA  1007               	iorwf	(??___xxtofl+2)^0,w,c
  1554   0019DC  1008               	iorwf	(??___xxtofl+3)^0,w,c
  1555   0019DE  A4D8               	btfss	status,2,c
  1556   0019E0  EFF4  F00C         	goto	u1901
  1557   0019E4  EFF6  F00C         	goto	u1900
  1558   0019E8                     u1901:
  1559   0019E8  EFD9  F00C         	goto	l3283
  1560   0019EC                     u1900:
  1561   0019EC  EF04  F00D         	goto	l1419
  1562   0019F0                     l3287:
  1563   0019F0  2A0A               	incf	___xxtofl@exp^0,f,c
  1564   0019F2  0E01               	movlw	1
  1565   0019F4  260B               	addwf	___xxtofl@arg^0,f,c
  1566   0019F6  0E00               	movlw	0
  1567   0019F8  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  1568   0019FA  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  1569   0019FC  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  1570   0019FE  90D8               	bcf	status,0,c
  1571   001A00  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  1572   001A02  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  1573   001A04  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  1574   001A06  320B               	rrcf	___xxtofl@arg^0,f,c
  1575   001A08                     l1419:
  1576   001A08  0E00               	movlw	0
  1577   001A0A  140B               	andwf	___xxtofl@arg^0,w,c
  1578   001A0C  6E05               	movwf	??___xxtofl^0,c
  1579   001A0E  0E00               	movlw	0
  1580   001A10  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  1581   001A12  6E06               	movwf	(??___xxtofl+1)^0,c
  1582   001A14  0E00               	movlw	0
  1583   001A16  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  1584   001A18  6E07               	movwf	(??___xxtofl+2)^0,c
  1585   001A1A  0EFF               	movlw	255
  1586   001A1C  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  1587   001A1E  6E08               	movwf	(??___xxtofl+3)^0,c
  1588   001A20  5005               	movf	??___xxtofl^0,w,c
  1589   001A22  1006               	iorwf	(??___xxtofl+1)^0,w,c
  1590   001A24  1007               	iorwf	(??___xxtofl+2)^0,w,c
  1591   001A26  1008               	iorwf	(??___xxtofl+3)^0,w,c
  1592   001A28  A4D8               	btfss	status,2,c
  1593   001A2A  EF19  F00D         	goto	u1911
  1594   001A2E  EF1B  F00D         	goto	u1910
  1595   001A32                     u1911:
  1596   001A32  EFF8  F00C         	goto	l3287
  1597   001A36                     u1910:
  1598   001A36  EF23  F00D         	goto	l3295
  1599   001A3A                     l3293:
  1600   001A3A  060A               	decf	___xxtofl@exp^0,f,c
  1601   001A3C  90D8               	bcf	status,0,c
  1602   001A3E  360B               	rlcf	___xxtofl@arg^0,f,c
  1603   001A40  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  1604   001A42  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  1605   001A44  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  1606   001A46                     l3295:
  1607   001A46  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  1608   001A48  EF28  F00D         	goto	u1921
  1609   001A4C  EF2A  F00D         	goto	u1920
  1610   001A50                     u1921:
  1611   001A50  EF32  F00D         	goto	l1426
  1612   001A54                     u1920:
  1613   001A54  0E02               	movlw	2
  1614   001A56  600A               	cpfslt	___xxtofl@exp^0,c
  1615   001A58  EF30  F00D         	goto	u1931
  1616   001A5C  EF32  F00D         	goto	u1930
  1617   001A60                     u1931:
  1618   001A60  EF1D  F00D         	goto	l3293
  1619   001A64                     u1930:
  1620   001A64                     l1426:
  1621   001A64  B00A               	btfsc	___xxtofl@exp^0,0,c
  1622   001A66  EF37  F00D         	goto	u1941
  1623   001A6A  EF39  F00D         	goto	u1940
  1624   001A6E                     u1941:
  1625   001A6E  EF3A  F00D         	goto	l3301
  1626   001A72                     u1940:
  1627   001A72  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  1628   001A74                     l3301:
  1629   001A74  90D8               	bcf	status,0,c
  1630   001A76  320A               	rrcf	___xxtofl@exp^0,f,c
  1631   001A78  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  1632   001A7C  6A06               	clrf	(??___xxtofl+1)^0,c
  1633   001A7E  6A07               	clrf	(??___xxtofl+2)^0,c
  1634   001A80  6A08               	clrf	(??___xxtofl+3)^0,c
  1635   001A82  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  1636   001A86  6A07               	clrf	(??___xxtofl+2)^0,c
  1637   001A88  6A06               	clrf	(??___xxtofl+1)^0,c
  1638   001A8A  6A05               	clrf	??___xxtofl^0,c
  1639   001A8C  5005               	movf	??___xxtofl^0,w,c
  1640   001A8E  120B               	iorwf	___xxtofl@arg^0,f,c
  1641   001A90  5006               	movf	(??___xxtofl+1)^0,w,c
  1642   001A92  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  1643   001A94  5007               	movf	(??___xxtofl+2)^0,w,c
  1644   001A96  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  1645   001A98  5008               	movf	(??___xxtofl+3)^0,w,c
  1646   001A9A  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  1647   001A9C  5009               	movf	___xxtofl@sign^0,w,c
  1648   001A9E  B4D8               	btfsc	status,2,c
  1649   001AA0  EF54  F00D         	goto	u1951
  1650   001AA4  EF56  F00D         	goto	u1950
  1651   001AA8                     u1951:
  1652   001AA8  EF5E  F00D         	goto	l3311
  1653   001AAC                     u1950:
  1654   001AAC  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  1655   001AAE  EF5D  F00D         	goto	u1960
  1656   001AB2  EF5B  F00D         	goto	u1961
  1657   001AB6                     u1961:
  1658   001AB6  EF5E  F00D         	goto	l3311
  1659   001ABA                     u1960:
  1660   001ABA  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  1661   001ABC                     l3311:
  1662   001ABC  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  1663   001AC0  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  1664   001AC4  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  1665   001AC8  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  1666   001ACC                     l1415:
  1667   001ACC  0012               	return		;funcret
  1668   001ACE                     __end_of___xxtofl:
  1669                           	callstack 0
  1670                           
  1671 ;; *************** function ___fltol *****************
  1672 ;; Defined at:
  1673 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;  f1              4   39[COMRAM] unsigned char 
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;  exp1            1   48[COMRAM] unsigned char 
  1678 ;;  sign1           1   47[COMRAM] unsigned char 
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  4   39[COMRAM] long 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, status,0
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1689 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1690 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1691 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1692 ;;Total ram usage:       10 bytes
  1693 ;; Hardware stack levels used: 1
  1694 ;; Hardware stack levels required when called: 1
  1695 ;; This function calls:
  1696 ;;		Nothing
  1697 ;; This function is called by:
  1698 ;;		_scaleRGB
  1699 ;;		_stop
  1700 ;;		_turnLeft
  1701 ;;		_turnRight
  1702 ;;		_fullSpeedReverse
  1703 ;;		_turnLeft90
  1704 ;;		_turnRight90
  1705 ;;		_turnLeft135
  1706 ;;		_turnRight135
  1707 ;;		_UTurn
  1708 ;;		_headbuttReverse
  1709 ;;		_squareReverse
  1710 ;;		_fullSpeedAhead
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text4
  1715   001D38                     __ptext4:
  1716                           	callstack 0
  1717   001D38                     ___fltol:
  1718                           	callstack 28
  1719   001D38  342A               	rlcf	(___fltol@f1+2)^0,w,c
  1720   001D3A  342B               	rlcf	(___fltol@f1+3)^0,w,c
  1721   001D3C  6E31               	movwf	___fltol@exp1^0,c
  1722   001D3E  5031               	movf	___fltol@exp1^0,w,c
  1723   001D40  A4D8               	btfss	status,2,c
  1724   001D42  EFA5  F00E         	goto	u1801
  1725   001D46  EFA7  F00E         	goto	u1800
  1726   001D4A                     u1801:
  1727   001D4A  EFB1  F00E         	goto	l3231
  1728   001D4E                     u1800:
  1729   001D4E                     l3227:
  1730   001D4E  0E00               	movlw	0
  1731   001D50  6E28               	movwf	?___fltol^0,c
  1732   001D52  0E00               	movlw	0
  1733   001D54  6E29               	movwf	(?___fltol+1)^0,c
  1734   001D56  0E00               	movlw	0
  1735   001D58  6E2A               	movwf	(?___fltol+2)^0,c
  1736   001D5A  0E00               	movlw	0
  1737   001D5C  6E2B               	movwf	(?___fltol+3)^0,c
  1738   001D5E  EF1E  F00F         	goto	l1054
  1739   001D62                     l3231:
  1740   001D62  C028  F02C         	movff	___fltol@f1,??___fltol
  1741   001D66  C029  F02D         	movff	___fltol@f1+1,??___fltol+1
  1742   001D6A  C02A  F02E         	movff	___fltol@f1+2,??___fltol+2
  1743   001D6E  C02B  F02F         	movff	___fltol@f1+3,??___fltol+3
  1744   001D72  0E20               	movlw	32
  1745   001D74  EFC1  F00E         	goto	u1810
  1746   001D78                     u1815:
  1747   001D78  90D8               	bcf	status,0,c
  1748   001D7A  322F               	rrcf	(??___fltol+3)^0,f,c
  1749   001D7C  322E               	rrcf	(??___fltol+2)^0,f,c
  1750   001D7E  322D               	rrcf	(??___fltol+1)^0,f,c
  1751   001D80  322C               	rrcf	??___fltol^0,f,c
  1752   001D82                     u1810:
  1753   001D82  2EE8               	decfsz	wreg,f,c
  1754   001D84  EFBC  F00E         	goto	u1815
  1755   001D88  502C               	movf	??___fltol^0,w,c
  1756   001D8A  6E30               	movwf	___fltol@sign1^0,c
  1757   001D8C  8E2A               	bsf	(___fltol@f1+2)^0,7,c
  1758   001D8E  0EFF               	movlw	255
  1759   001D90  1628               	andwf	___fltol@f1^0,f,c
  1760   001D92  0EFF               	movlw	255
  1761   001D94  1629               	andwf	(___fltol@f1+1)^0,f,c
  1762   001D96  0EFF               	movlw	255
  1763   001D98  162A               	andwf	(___fltol@f1+2)^0,f,c
  1764   001D9A  0E00               	movlw	0
  1765   001D9C  162B               	andwf	(___fltol@f1+3)^0,f,c
  1766   001D9E  0E96               	movlw	150
  1767   001DA0  5E31               	subwf	___fltol@exp1^0,f,c
  1768   001DA2  BE31               	btfsc	___fltol@exp1^0,7,c
  1769   001DA4  EFD8  F00E         	goto	u1820
  1770   001DA8  EFD6  F00E         	goto	u1821
  1771   001DAC                     u1821:
  1772   001DAC  EFEE  F00E         	goto	l3251
  1773   001DB0                     u1820:
  1774   001DB0  5031               	movf	___fltol@exp1^0,w,c
  1775   001DB2  0A80               	xorlw	128
  1776   001DB4  0F97               	addlw	151
  1777   001DB6  B0D8               	btfsc	status,0,c
  1778   001DB8  EFE0  F00E         	goto	u1831
  1779   001DBC  EFE2  F00E         	goto	u1830
  1780   001DC0                     u1831:
  1781   001DC0  EFE4  F00E         	goto	l3247
  1782   001DC4                     u1830:
  1783   001DC4  EFA7  F00E         	goto	l3227
  1784   001DC8                     l3247:
  1785   001DC8  90D8               	bcf	status,0,c
  1786   001DCA  322B               	rrcf	(___fltol@f1+3)^0,f,c
  1787   001DCC  322A               	rrcf	(___fltol@f1+2)^0,f,c
  1788   001DCE  3229               	rrcf	(___fltol@f1+1)^0,f,c
  1789   001DD0  3228               	rrcf	___fltol@f1^0,f,c
  1790   001DD2  3E31               	incfsz	___fltol@exp1^0,f,c
  1791   001DD4  EFE4  F00E         	goto	l3247
  1792   001DD8  EF06  F00F         	goto	l3261
  1793   001DDC                     l3251:
  1794   001DDC  0E1F               	movlw	31
  1795   001DDE  6431               	cpfsgt	___fltol@exp1^0,c
  1796   001DE0  EFF4  F00E         	goto	u1841
  1797   001DE4  EFF6  F00E         	goto	u1840
  1798   001DE8                     u1841:
  1799   001DE8  EFFE  F00E         	goto	l3259
  1800   001DEC                     u1840:
  1801   001DEC  EFA7  F00E         	goto	l3227
  1802   001DF0                     l3257:
  1803   001DF0  90D8               	bcf	status,0,c
  1804   001DF2  3628               	rlcf	___fltol@f1^0,f,c
  1805   001DF4  3629               	rlcf	(___fltol@f1+1)^0,f,c
  1806   001DF6  362A               	rlcf	(___fltol@f1+2)^0,f,c
  1807   001DF8  362B               	rlcf	(___fltol@f1+3)^0,f,c
  1808   001DFA  0631               	decf	___fltol@exp1^0,f,c
  1809   001DFC                     l3259:
  1810   001DFC  5031               	movf	___fltol@exp1^0,w,c
  1811   001DFE  A4D8               	btfss	status,2,c
  1812   001E00  EF04  F00F         	goto	u1851
  1813   001E04  EF06  F00F         	goto	u1850
  1814   001E08                     u1851:
  1815   001E08  EFF8  F00E         	goto	l3257
  1816   001E0C                     u1850:
  1817   001E0C                     l3261:
  1818   001E0C  5030               	movf	___fltol@sign1^0,w,c
  1819   001E0E  B4D8               	btfsc	status,2,c
  1820   001E10  EF0C  F00F         	goto	u1861
  1821   001E14  EF0E  F00F         	goto	u1860
  1822   001E18                     u1861:
  1823   001E18  EF16  F00F         	goto	l3265
  1824   001E1C                     u1860:
  1825   001E1C  1E2B               	comf	(___fltol@f1+3)^0,f,c
  1826   001E1E  1E2A               	comf	(___fltol@f1+2)^0,f,c
  1827   001E20  1E29               	comf	(___fltol@f1+1)^0,f,c
  1828   001E22  6C28               	negf	___fltol@f1^0,c
  1829   001E24  0E00               	movlw	0
  1830   001E26  2229               	addwfc	(___fltol@f1+1)^0,f,c
  1831   001E28  222A               	addwfc	(___fltol@f1+2)^0,f,c
  1832   001E2A  222B               	addwfc	(___fltol@f1+3)^0,f,c
  1833   001E2C                     l3265:
  1834   001E2C  C028  F028         	movff	___fltol@f1,?___fltol
  1835   001E30  C029  F029         	movff	___fltol@f1+1,?___fltol+1
  1836   001E34  C02A  F02A         	movff	___fltol@f1+2,?___fltol+2
  1837   001E38  C02B  F02B         	movff	___fltol@f1+3,?___fltol+3
  1838   001E3C                     l1054:
  1839   001E3C  0012               	return		;funcret
  1840   001E3E                     __end_of___fltol:
  1841                           	callstack 0
  1842                           
  1843 ;; *************** function ___flmul *****************
  1844 ;; Defined at:
  1845 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;  b               4   14[COMRAM] long 
  1848 ;;  a               4   18[COMRAM] long 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  prod            4   33[COMRAM] struct .
  1851 ;;  grs             4   27[COMRAM] unsigned long 
  1852 ;;  temp            2   37[COMRAM] struct .
  1853 ;;  bexp            1   32[COMRAM] unsigned char 
  1854 ;;  aexp            1   31[COMRAM] unsigned char 
  1855 ;;  sign            1   26[COMRAM] unsigned char 
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  4   14[COMRAM] unsigned char 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0, prodl, prodh
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1865 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1866 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1867 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1868 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1869 ;;Total ram usage:       25 bytes
  1870 ;; Hardware stack levels used: 1
  1871 ;; Hardware stack levels required when called: 1
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_scaleRGB
  1876 ;;		_stop
  1877 ;;		_turnLeft
  1878 ;;		_turnRight
  1879 ;;		_fullSpeedReverse
  1880 ;;		_turnLeft90
  1881 ;;		_turnRight90
  1882 ;;		_turnLeft135
  1883 ;;		_turnRight135
  1884 ;;		_UTurn
  1885 ;;		_headbuttReverse
  1886 ;;		_squareReverse
  1887 ;;		_fullSpeedAhead
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text5
  1892   0014F0                     __ptext5:
  1893                           	callstack 0
  1894   0014F0                     ___flmul:
  1895                           	callstack 28
  1896   0014F0  5012               	movf	(___flmul@b+3)^0,w,c
  1897   0014F2  0B80               	andlw	128
  1898   0014F4  6E1B               	movwf	___flmul@sign^0,c
  1899   0014F6  5012               	movf	(___flmul@b+3)^0,w,c
  1900   0014F8  2412               	addwf	(___flmul@b+3)^0,w,c
  1901   0014FA  6E21               	movwf	___flmul@bexp^0,c
  1902   0014FC  AE11               	btfss	(___flmul@b+2)^0,7,c
  1903   0014FE  EF83  F00A         	goto	u1611
  1904   001502  EF85  F00A         	goto	u1610
  1905   001506                     u1611:
  1906   001506  EF86  F00A         	goto	l3101
  1907   00150A                     u1610:
  1908   00150A  8021               	bsf	___flmul@bexp^0,0,c
  1909   00150C                     l3101:
  1910   00150C  5021               	movf	___flmul@bexp^0,w,c
  1911   00150E  B4D8               	btfsc	status,2,c
  1912   001510  EF8C  F00A         	goto	u1621
  1913   001514  EF8E  F00A         	goto	u1620
  1914   001518                     u1621:
  1915   001518  EFA1  F00A         	goto	l3109
  1916   00151C                     u1620:
  1917   00151C  2821               	incf	___flmul@bexp^0,w,c
  1918   00151E  A4D8               	btfss	status,2,c
  1919   001520  EF94  F00A         	goto	u1631
  1920   001524  EF96  F00A         	goto	u1630
  1921   001528                     u1631:
  1922   001528  EF9E  F00A         	goto	l3107
  1923   00152C                     u1630:
  1924   00152C  0E00               	movlw	0
  1925   00152E  6E0F               	movwf	___flmul@b^0,c
  1926   001530  0E00               	movlw	0
  1927   001532  6E10               	movwf	(___flmul@b+1)^0,c
  1928   001534  0E00               	movlw	0
  1929   001536  6E11               	movwf	(___flmul@b+2)^0,c
  1930   001538  0E00               	movlw	0
  1931   00153A  6E12               	movwf	(___flmul@b+3)^0,c
  1932   00153C                     l3107:
  1933   00153C  8E11               	bsf	(___flmul@b+2)^0,7,c
  1934   00153E  EFA9  F00A         	goto	l3111
  1935   001542                     l3109:
  1936   001542  0E00               	movlw	0
  1937   001544  6E0F               	movwf	___flmul@b^0,c
  1938   001546  0E00               	movlw	0
  1939   001548  6E10               	movwf	(___flmul@b+1)^0,c
  1940   00154A  0E00               	movlw	0
  1941   00154C  6E11               	movwf	(___flmul@b+2)^0,c
  1942   00154E  0E00               	movlw	0
  1943   001550  6E12               	movwf	(___flmul@b+3)^0,c
  1944   001552                     l3111:
  1945   001552  5016               	movf	(___flmul@a+3)^0,w,c
  1946   001554  0B80               	andlw	128
  1947   001556  1A1B               	xorwf	___flmul@sign^0,f,c
  1948   001558  5016               	movf	(___flmul@a+3)^0,w,c
  1949   00155A  2416               	addwf	(___flmul@a+3)^0,w,c
  1950   00155C  6E20               	movwf	___flmul@aexp^0,c
  1951   00155E  AE15               	btfss	(___flmul@a+2)^0,7,c
  1952   001560  EFB4  F00A         	goto	u1641
  1953   001564  EFB6  F00A         	goto	u1640
  1954   001568                     u1641:
  1955   001568  EFB7  F00A         	goto	l3119
  1956   00156C                     u1640:
  1957   00156C  8020               	bsf	___flmul@aexp^0,0,c
  1958   00156E                     l3119:
  1959   00156E  5020               	movf	___flmul@aexp^0,w,c
  1960   001570  B4D8               	btfsc	status,2,c
  1961   001572  EFBD  F00A         	goto	u1651
  1962   001576  EFBF  F00A         	goto	u1650
  1963   00157A                     u1651:
  1964   00157A  EFD2  F00A         	goto	l3127
  1965   00157E                     u1650:
  1966   00157E  2820               	incf	___flmul@aexp^0,w,c
  1967   001580  A4D8               	btfss	status,2,c
  1968   001582  EFC5  F00A         	goto	u1661
  1969   001586  EFC7  F00A         	goto	u1660
  1970   00158A                     u1661:
  1971   00158A  EFCF  F00A         	goto	l3125
  1972   00158E                     u1660:
  1973   00158E  0E00               	movlw	0
  1974   001590  6E13               	movwf	___flmul@a^0,c
  1975   001592  0E00               	movlw	0
  1976   001594  6E14               	movwf	(___flmul@a+1)^0,c
  1977   001596  0E00               	movlw	0
  1978   001598  6E15               	movwf	(___flmul@a+2)^0,c
  1979   00159A  0E00               	movlw	0
  1980   00159C  6E16               	movwf	(___flmul@a+3)^0,c
  1981   00159E                     l3125:
  1982   00159E  8E15               	bsf	(___flmul@a+2)^0,7,c
  1983   0015A0  EFDA  F00A         	goto	l1371
  1984   0015A4                     l3127:
  1985   0015A4  0E00               	movlw	0
  1986   0015A6  6E13               	movwf	___flmul@a^0,c
  1987   0015A8  0E00               	movlw	0
  1988   0015AA  6E14               	movwf	(___flmul@a+1)^0,c
  1989   0015AC  0E00               	movlw	0
  1990   0015AE  6E15               	movwf	(___flmul@a+2)^0,c
  1991   0015B0  0E00               	movlw	0
  1992   0015B2  6E16               	movwf	(___flmul@a+3)^0,c
  1993   0015B4                     l1371:
  1994   0015B4  5020               	movf	___flmul@aexp^0,w,c
  1995   0015B6  B4D8               	btfsc	status,2,c
  1996   0015B8  EFE0  F00A         	goto	u1671
  1997   0015BC  EFE2  F00A         	goto	u1670
  1998   0015C0                     u1671:
  1999   0015C0  EFEA  F00A         	goto	l3131
  2000   0015C4                     u1670:
  2001   0015C4  5021               	movf	___flmul@bexp^0,w,c
  2002   0015C6  A4D8               	btfss	status,2,c
  2003   0015C8  EFE8  F00A         	goto	u1681
  2004   0015CC  EFEA  F00A         	goto	u1680
  2005   0015D0                     u1681:
  2006   0015D0  EFF4  F00A         	goto	l3135
  2007   0015D4                     u1680:
  2008   0015D4                     l3131:
  2009   0015D4  0E00               	movlw	0
  2010   0015D6  6E0F               	movwf	?___flmul^0,c
  2011   0015D8  0E00               	movlw	0
  2012   0015DA  6E10               	movwf	(?___flmul+1)^0,c
  2013   0015DC  0E00               	movlw	0
  2014   0015DE  6E11               	movwf	(?___flmul+2)^0,c
  2015   0015E0  0E00               	movlw	0
  2016   0015E2  6E12               	movwf	(?___flmul+3)^0,c
  2017   0015E4  EF8C  F00C         	goto	l1375
  2018   0015E8                     l3135:
  2019   0015E8  5015               	movf	(___flmul@a+2)^0,w,c
  2020   0015EA  020F               	mulwf	___flmul@b^0,c
  2021   0015EC  CFF3 F026          	movff	prodl,___flmul@temp
  2022   0015F0  CFF4 F027          	movff	prodh,___flmul@temp+1
  2023   0015F4  5026               	movf	___flmul@temp^0,w,c
  2024   0015F6  6E1C               	movwf	___flmul@grs^0,c
  2025   0015F8  6A1D               	clrf	(___flmul@grs+1)^0,c
  2026   0015FA  6A1E               	clrf	(___flmul@grs+2)^0,c
  2027   0015FC  6A1F               	clrf	(___flmul@grs+3)^0,c
  2028   0015FE  5027               	movf	(___flmul@temp+1)^0,w,c
  2029   001600  6E22               	movwf	___flmul@prod^0,c
  2030   001602  6A23               	clrf	(___flmul@prod+1)^0,c
  2031   001604  6A24               	clrf	(___flmul@prod+2)^0,c
  2032   001606  6A25               	clrf	(___flmul@prod+3)^0,c
  2033   001608  5014               	movf	(___flmul@a+1)^0,w,c
  2034   00160A  0210               	mulwf	(___flmul@b+1)^0,c
  2035   00160C  CFF3 F026          	movff	prodl,___flmul@temp
  2036   001610  CFF4 F027          	movff	prodh,___flmul@temp+1
  2037   001614  5026               	movf	___flmul@temp^0,w,c
  2038   001616  261C               	addwf	___flmul@grs^0,f,c
  2039   001618  0E00               	movlw	0
  2040   00161A  221D               	addwfc	(___flmul@grs+1)^0,f,c
  2041   00161C  221E               	addwfc	(___flmul@grs+2)^0,f,c
  2042   00161E  221F               	addwfc	(___flmul@grs+3)^0,f,c
  2043   001620  5027               	movf	(___flmul@temp+1)^0,w,c
  2044   001622  2622               	addwf	___flmul@prod^0,f,c
  2045   001624  0E00               	movlw	0
  2046   001626  2223               	addwfc	(___flmul@prod+1)^0,f,c
  2047   001628  2224               	addwfc	(___flmul@prod+2)^0,f,c
  2048   00162A  2225               	addwfc	(___flmul@prod+3)^0,f,c
  2049   00162C  5013               	movf	___flmul@a^0,w,c
  2050   00162E  0211               	mulwf	(___flmul@b+2)^0,c
  2051   001630  CFF3 F026          	movff	prodl,___flmul@temp
  2052   001634  CFF4 F027          	movff	prodh,___flmul@temp+1
  2053   001638  5026               	movf	___flmul@temp^0,w,c
  2054   00163A  261C               	addwf	___flmul@grs^0,f,c
  2055   00163C  0E00               	movlw	0
  2056   00163E  221D               	addwfc	(___flmul@grs+1)^0,f,c
  2057   001640  221E               	addwfc	(___flmul@grs+2)^0,f,c
  2058   001642  221F               	addwfc	(___flmul@grs+3)^0,f,c
  2059   001644  5027               	movf	(___flmul@temp+1)^0,w,c
  2060   001646  2622               	addwf	___flmul@prod^0,f,c
  2061   001648  0E00               	movlw	0
  2062   00164A  2223               	addwfc	(___flmul@prod+1)^0,f,c
  2063   00164C  2224               	addwfc	(___flmul@prod+2)^0,f,c
  2064   00164E  2225               	addwfc	(___flmul@prod+3)^0,f,c
  2065   001650  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  2066   001654  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  2067   001658  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  2068   00165C  6A1C               	clrf	___flmul@grs^0,c
  2069   00165E  5013               	movf	___flmul@a^0,w,c
  2070   001660  0210               	mulwf	(___flmul@b+1)^0,c
  2071   001662  CFF3 F026          	movff	prodl,___flmul@temp
  2072   001666  CFF4 F027          	movff	prodh,___flmul@temp+1
  2073   00166A  5026               	movf	___flmul@temp^0,w,c
  2074   00166C  261C               	addwf	___flmul@grs^0,f,c
  2075   00166E  5027               	movf	(___flmul@temp+1)^0,w,c
  2076   001670  221D               	addwfc	(___flmul@grs+1)^0,f,c
  2077   001672  0E00               	movlw	0
  2078   001674  221E               	addwfc	(___flmul@grs+2)^0,f,c
  2079   001676  0E00               	movlw	0
  2080   001678  221F               	addwfc	(___flmul@grs+3)^0,f,c
  2081   00167A  5014               	movf	(___flmul@a+1)^0,w,c
  2082   00167C  020F               	mulwf	___flmul@b^0,c
  2083   00167E  CFF3 F026          	movff	prodl,___flmul@temp
  2084   001682  CFF4 F027          	movff	prodh,___flmul@temp+1
  2085   001686  5026               	movf	___flmul@temp^0,w,c
  2086   001688  261C               	addwf	___flmul@grs^0,f,c
  2087   00168A  5027               	movf	(___flmul@temp+1)^0,w,c
  2088   00168C  221D               	addwfc	(___flmul@grs+1)^0,f,c
  2089   00168E  0E00               	movlw	0
  2090   001690  221E               	addwfc	(___flmul@grs+2)^0,f,c
  2091   001692  0E00               	movlw	0
  2092   001694  221F               	addwfc	(___flmul@grs+3)^0,f,c
  2093   001696  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  2094   00169A  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  2095   00169E  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  2096   0016A2  6A1C               	clrf	___flmul@grs^0,c
  2097   0016A4  5013               	movf	___flmul@a^0,w,c
  2098   0016A6  020F               	mulwf	___flmul@b^0,c
  2099   0016A8  CFF3 F026          	movff	prodl,___flmul@temp
  2100   0016AC  CFF4 F027          	movff	prodh,___flmul@temp+1
  2101   0016B0  5026               	movf	___flmul@temp^0,w,c
  2102   0016B2  261C               	addwf	___flmul@grs^0,f,c
  2103   0016B4  5027               	movf	(___flmul@temp+1)^0,w,c
  2104   0016B6  221D               	addwfc	(___flmul@grs+1)^0,f,c
  2105   0016B8  0E00               	movlw	0
  2106   0016BA  221E               	addwfc	(___flmul@grs+2)^0,f,c
  2107   0016BC  0E00               	movlw	0
  2108   0016BE  221F               	addwfc	(___flmul@grs+3)^0,f,c
  2109   0016C0  5015               	movf	(___flmul@a+2)^0,w,c
  2110   0016C2  0210               	mulwf	(___flmul@b+1)^0,c
  2111   0016C4  CFF3 F026          	movff	prodl,___flmul@temp
  2112   0016C8  CFF4 F027          	movff	prodh,___flmul@temp+1
  2113   0016CC  5026               	movf	___flmul@temp^0,w,c
  2114   0016CE  2622               	addwf	___flmul@prod^0,f,c
  2115   0016D0  5027               	movf	(___flmul@temp+1)^0,w,c
  2116   0016D2  2223               	addwfc	(___flmul@prod+1)^0,f,c
  2117   0016D4  0E00               	movlw	0
  2118   0016D6  2224               	addwfc	(___flmul@prod+2)^0,f,c
  2119   0016D8  0E00               	movlw	0
  2120   0016DA  2225               	addwfc	(___flmul@prod+3)^0,f,c
  2121   0016DC  5014               	movf	(___flmul@a+1)^0,w,c
  2122   0016DE  0211               	mulwf	(___flmul@b+2)^0,c
  2123   0016E0  CFF3 F026          	movff	prodl,___flmul@temp
  2124   0016E4  CFF4 F027          	movff	prodh,___flmul@temp+1
  2125   0016E8  5026               	movf	___flmul@temp^0,w,c
  2126   0016EA  2622               	addwf	___flmul@prod^0,f,c
  2127   0016EC  5027               	movf	(___flmul@temp+1)^0,w,c
  2128   0016EE  2223               	addwfc	(___flmul@prod+1)^0,f,c
  2129   0016F0  0E00               	movlw	0
  2130   0016F2  2224               	addwfc	(___flmul@prod+2)^0,f,c
  2131   0016F4  0E00               	movlw	0
  2132   0016F6  2225               	addwfc	(___flmul@prod+3)^0,f,c
  2133   0016F8  5015               	movf	(___flmul@a+2)^0,w,c
  2134   0016FA  0211               	mulwf	(___flmul@b+2)^0,c
  2135   0016FC  CFF3 F026          	movff	prodl,___flmul@temp
  2136   001700  CFF4 F027          	movff	prodh,___flmul@temp+1
  2137   001704  5026               	movf	___flmul@temp^0,w,c
  2138   001706  6E17               	movwf	??___flmul^0,c
  2139   001708  5027               	movf	(___flmul@temp+1)^0,w,c
  2140   00170A  6E18               	movwf	(??___flmul+1)^0,c
  2141   00170C  6A19               	clrf	(??___flmul+2)^0,c
  2142   00170E  6A1A               	clrf	(??___flmul+3)^0,c
  2143   001710  C019  F01A         	movff	??___flmul+2,??___flmul+3
  2144   001714  C018  F019         	movff	??___flmul+1,??___flmul+2
  2145   001718  C017  F018         	movff	??___flmul,??___flmul+1
  2146   00171C  6A17               	clrf	??___flmul^0,c
  2147   00171E  5017               	movf	??___flmul^0,w,c
  2148   001720  2622               	addwf	___flmul@prod^0,f,c
  2149   001722  5018               	movf	(??___flmul+1)^0,w,c
  2150   001724  2223               	addwfc	(___flmul@prod+1)^0,f,c
  2151   001726  5019               	movf	(??___flmul+2)^0,w,c
  2152   001728  2224               	addwfc	(___flmul@prod+2)^0,f,c
  2153   00172A  501A               	movf	(??___flmul+3)^0,w,c
  2154   00172C  2225               	addwfc	(___flmul@prod+3)^0,f,c
  2155   00172E  C01C  F017         	movff	___flmul@grs,??___flmul
  2156   001732  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  2157   001736  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  2158   00173A  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  2159   00173E  0E19               	movlw	25
  2160   001740  EFA7  F00B         	goto	u1690
  2161   001744                     u1695:
  2162   001744  90D8               	bcf	status,0,c
  2163   001746  321A               	rrcf	(??___flmul+3)^0,f,c
  2164   001748  3219               	rrcf	(??___flmul+2)^0,f,c
  2165   00174A  3218               	rrcf	(??___flmul+1)^0,f,c
  2166   00174C  3217               	rrcf	??___flmul^0,f,c
  2167   00174E                     u1690:
  2168   00174E  2EE8               	decfsz	wreg,f,c
  2169   001750  EFA2  F00B         	goto	u1695
  2170   001754  5017               	movf	??___flmul^0,w,c
  2171   001756  2622               	addwf	___flmul@prod^0,f,c
  2172   001758  5018               	movf	(??___flmul+1)^0,w,c
  2173   00175A  2223               	addwfc	(___flmul@prod+1)^0,f,c
  2174   00175C  5019               	movf	(??___flmul+2)^0,w,c
  2175   00175E  2224               	addwfc	(___flmul@prod+2)^0,f,c
  2176   001760  501A               	movf	(??___flmul+3)^0,w,c
  2177   001762  2225               	addwfc	(___flmul@prod+3)^0,f,c
  2178   001764  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  2179   001768  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  2180   00176C  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  2181   001770  6A1C               	clrf	___flmul@grs^0,c
  2182   001772  5020               	movf	___flmul@aexp^0,w,c
  2183   001774  C021  F017         	movff	___flmul@bexp,??___flmul
  2184   001778  6A18               	clrf	(??___flmul+1)^0,c
  2185   00177A  2617               	addwf	??___flmul^0,f,c
  2186   00177C  0E00               	movlw	0
  2187   00177E  2218               	addwfc	(??___flmul+1)^0,f,c
  2188   001780  0E82               	movlw	130
  2189   001782  2417               	addwf	??___flmul^0,w,c
  2190   001784  6E26               	movwf	___flmul@temp^0,c
  2191   001786  0EFF               	movlw	255
  2192   001788  2018               	addwfc	(??___flmul+1)^0,w,c
  2193   00178A  6E27               	movwf	(___flmul@temp+1)^0,c
  2194   00178C  EFDD  F00B         	goto	l3183
  2195   001790                     l3177:
  2196   001790  90D8               	bcf	status,0,c
  2197   001792  3622               	rlcf	___flmul@prod^0,f,c
  2198   001794  3623               	rlcf	(___flmul@prod+1)^0,f,c
  2199   001796  3624               	rlcf	(___flmul@prod+2)^0,f,c
  2200   001798  3625               	rlcf	(___flmul@prod+3)^0,f,c
  2201   00179A  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  2202   00179C  EFD2  F00B         	goto	u1701
  2203   0017A0  EFD4  F00B         	goto	u1700
  2204   0017A4                     u1701:
  2205   0017A4  EFD5  F00B         	goto	l1378
  2206   0017A8                     u1700:
  2207   0017A8  8022               	bsf	___flmul@prod^0,0,c
  2208   0017AA                     l1378:
  2209   0017AA  90D8               	bcf	status,0,c
  2210   0017AC  361C               	rlcf	___flmul@grs^0,f,c
  2211   0017AE  361D               	rlcf	(___flmul@grs+1)^0,f,c
  2212   0017B0  361E               	rlcf	(___flmul@grs+2)^0,f,c
  2213   0017B2  361F               	rlcf	(___flmul@grs+3)^0,f,c
  2214   0017B4  0626               	decf	___flmul@temp^0,f,c
  2215   0017B6  A0D8               	btfss	status,0,c
  2216   0017B8  0627               	decf	(___flmul@temp+1)^0,f,c
  2217   0017BA                     l3183:
  2218   0017BA  AE24               	btfss	(___flmul@prod+2)^0,7,c
  2219   0017BC  EFE2  F00B         	goto	u1711
  2220   0017C0  EFE4  F00B         	goto	u1710
  2221   0017C4                     u1711:
  2222   0017C4  EFC8  F00B         	goto	l3177
  2223   0017C8                     u1710:
  2224   0017C8  0E00               	movlw	0
  2225   0017CA  6E20               	movwf	___flmul@aexp^0,c
  2226   0017CC  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  2227   0017CE  EFEB  F00B         	goto	u1721
  2228   0017D2  EFED  F00B         	goto	u1720
  2229   0017D6                     u1721:
  2230   0017D6  EF11  F00C         	goto	l1380
  2231   0017DA                     u1720:
  2232   0017DA  0EFF               	movlw	255
  2233   0017DC  141C               	andwf	___flmul@grs^0,w,c
  2234   0017DE  6E17               	movwf	??___flmul^0,c
  2235   0017E0  0EFF               	movlw	255
  2236   0017E2  141D               	andwf	(___flmul@grs+1)^0,w,c
  2237   0017E4  6E18               	movwf	(??___flmul+1)^0,c
  2238   0017E6  0EFF               	movlw	255
  2239   0017E8  141E               	andwf	(___flmul@grs+2)^0,w,c
  2240   0017EA  6E19               	movwf	(??___flmul+2)^0,c
  2241   0017EC  0E7F               	movlw	127
  2242   0017EE  141F               	andwf	(___flmul@grs+3)^0,w,c
  2243   0017F0  6E1A               	movwf	(??___flmul+3)^0,c
  2244   0017F2  5017               	movf	??___flmul^0,w,c
  2245   0017F4  1018               	iorwf	(??___flmul+1)^0,w,c
  2246   0017F6  1019               	iorwf	(??___flmul+2)^0,w,c
  2247   0017F8  101A               	iorwf	(??___flmul+3)^0,w,c
  2248   0017FA  B4D8               	btfsc	status,2,c
  2249   0017FC  EF02  F00C         	goto	u1731
  2250   001800  EF04  F00C         	goto	u1730
  2251   001804                     u1731:
  2252   001804  EF08  F00C         	goto	l1381
  2253   001808                     u1730:
  2254   001808                     l3191:
  2255   001808  0E01               	movlw	1
  2256   00180A  6E20               	movwf	___flmul@aexp^0,c
  2257   00180C  EF11  F00C         	goto	l1380
  2258   001810                     l1381:
  2259   001810  A022               	btfss	___flmul@prod^0,0,c
  2260   001812  EF0D  F00C         	goto	u1741
  2261   001816  EF0F  F00C         	goto	u1740
  2262   00181A                     u1741:
  2263   00181A  EF11  F00C         	goto	l1380
  2264   00181E                     u1740:
  2265   00181E  EF04  F00C         	goto	l3191
  2266   001822                     l1380:
  2267   001822  5020               	movf	___flmul@aexp^0,w,c
  2268   001824  B4D8               	btfsc	status,2,c
  2269   001826  EF17  F00C         	goto	u1751
  2270   00182A  EF19  F00C         	goto	u1750
  2271   00182E                     u1751:
  2272   00182E  EF3D  F00C         	goto	l3203
  2273   001832                     u1750:
  2274   001832  0E01               	movlw	1
  2275   001834  2622               	addwf	___flmul@prod^0,f,c
  2276   001836  0E00               	movlw	0
  2277   001838  2223               	addwfc	(___flmul@prod+1)^0,f,c
  2278   00183A  2224               	addwfc	(___flmul@prod+2)^0,f,c
  2279   00183C  2225               	addwfc	(___flmul@prod+3)^0,f,c
  2280   00183E  A025               	btfss	(___flmul@prod+3)^0,0,c
  2281   001840  EF24  F00C         	goto	u1761
  2282   001844  EF26  F00C         	goto	u1760
  2283   001848                     u1761:
  2284   001848  EF3D  F00C         	goto	l3203
  2285   00184C                     u1760:
  2286   00184C  C022  F017         	movff	___flmul@prod,??___flmul
  2287   001850  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  2288   001854  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  2289   001858  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  2290   00185C  341A               	rlcf	(??___flmul+3)^0,w,c
  2291   00185E  321A               	rrcf	(??___flmul+3)^0,f,c
  2292   001860  3219               	rrcf	(??___flmul+2)^0,f,c
  2293   001862  3218               	rrcf	(??___flmul+1)^0,f,c
  2294   001864  3217               	rrcf	??___flmul^0,f,c
  2295   001866  C017  F022         	movff	??___flmul,___flmul@prod
  2296   00186A  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  2297   00186E  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  2298   001872  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  2299   001876  4A26               	infsnz	___flmul@temp^0,f,c
  2300   001878  2A27               	incf	(___flmul@temp+1)^0,f,c
  2301   00187A                     l3203:
  2302   00187A  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  2303   00187C  EF48  F00C         	goto	u1771
  2304   001880  5027               	movf	(___flmul@temp+1)^0,w,c
  2305   001882  E108               	bnz	u1770
  2306   001884  2826               	incf	___flmul@temp^0,w,c
  2307   001886  A0D8               	btfss	status,0,c
  2308   001888  EF48  F00C         	goto	u1771
  2309   00188C  EF4A  F00C         	goto	u1770
  2310   001890                     u1771:
  2311   001890  EF54  F00C         	goto	l3207
  2312   001894                     u1770:
  2313   001894  0E00               	movlw	0
  2314   001896  6E22               	movwf	___flmul@prod^0,c
  2315   001898  0E00               	movlw	0
  2316   00189A  6E23               	movwf	(___flmul@prod+1)^0,c
  2317   00189C  0E80               	movlw	128
  2318   00189E  6E24               	movwf	(___flmul@prod+2)^0,c
  2319   0018A0  0E7F               	movlw	127
  2320   0018A2  6E25               	movwf	(___flmul@prod+3)^0,c
  2321   0018A4  EF82  F00C         	goto	l3219
  2322   0018A8                     l3207:
  2323   0018A8  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  2324   0018AA  EF61  F00C         	goto	u1780
  2325   0018AE  5027               	movf	(___flmul@temp+1)^0,w,c
  2326   0018B0  E106               	bnz	u1781
  2327   0018B2  0426               	decf	___flmul@temp^0,w,c
  2328   0018B4  B0D8               	btfsc	status,0,c
  2329   0018B6  EF5F  F00C         	goto	u1781
  2330   0018BA  EF61  F00C         	goto	u1780
  2331   0018BE                     u1781:
  2332   0018BE  EF6D  F00C         	goto	l1388
  2333   0018C2                     u1780:
  2334   0018C2  0E00               	movlw	0
  2335   0018C4  6E22               	movwf	___flmul@prod^0,c
  2336   0018C6  0E00               	movlw	0
  2337   0018C8  6E23               	movwf	(___flmul@prod+1)^0,c
  2338   0018CA  0E00               	movlw	0
  2339   0018CC  6E24               	movwf	(___flmul@prod+2)^0,c
  2340   0018CE  0E00               	movlw	0
  2341   0018D0  6E25               	movwf	(___flmul@prod+3)^0,c
  2342   0018D2  0E00               	movlw	0
  2343   0018D4  6E1B               	movwf	___flmul@sign^0,c
  2344   0018D6  EF82  F00C         	goto	l3219
  2345   0018DA                     l1388:
  2346   0018DA  C026  F021         	movff	___flmul@temp,___flmul@bexp
  2347   0018DE  0EFF               	movlw	255
  2348   0018E0  1622               	andwf	___flmul@prod^0,f,c
  2349   0018E2  0EFF               	movlw	255
  2350   0018E4  1623               	andwf	(___flmul@prod+1)^0,f,c
  2351   0018E6  0E7F               	movlw	127
  2352   0018E8  1624               	andwf	(___flmul@prod+2)^0,f,c
  2353   0018EA  0E00               	movlw	0
  2354   0018EC  1625               	andwf	(___flmul@prod+3)^0,f,c
  2355   0018EE  A021               	btfss	___flmul@bexp^0,0,c
  2356   0018F0  EF7C  F00C         	goto	u1791
  2357   0018F4  EF7E  F00C         	goto	u1790
  2358   0018F8                     u1791:
  2359   0018F8  EF7F  F00C         	goto	l3217
  2360   0018FC                     u1790:
  2361   0018FC  8E24               	bsf	(___flmul@prod+2)^0,7,c
  2362   0018FE                     l3217:
  2363   0018FE  90D8               	bcf	status,0,c
  2364   001900  3021               	rrcf	___flmul@bexp^0,w,c
  2365   001902  6E25               	movwf	(___flmul@prod+3)^0,c
  2366   001904                     l3219:
  2367   001904  501B               	movf	___flmul@sign^0,w,c
  2368   001906  1225               	iorwf	(___flmul@prod+3)^0,f,c
  2369   001908  C022  F00F         	movff	___flmul@prod,?___flmul
  2370   00190C  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  2371   001910  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  2372   001914  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  2373   001918                     l1375:
  2374   001918  0012               	return		;funcret
  2375   00191A                     __end_of___flmul:
  2376                           	callstack 0
  2377                           
  2378 ;; *************** function _initUSART4 *****************
  2379 ;; Defined at:
  2380 ;;		line 5 in file "serial.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;		None
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2398 ;;Total ram usage:        0 bytes
  2399 ;; Hardware stack levels used: 1
  2400 ;; Hardware stack levels required when called: 1
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_main
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text6
  2409   002F60                     __ptext6:
  2410                           	callstack 0
  2411   002F60                     _initUSART4:
  2412                           	callstack 29
  2413   002F60                     
  2414                           ;serial.c: 9:     RC0PPS = 0x12;
  2415   002F60  0E12               	movlw	18
  2416   002F62  010E               	movlb	14	; () banked
  2417   002F64  6F62               	movwf	98,b	;volatile
  2418                           
  2419                           ;serial.c: 10:     RX4PPS = 0x11;
  2420   002F66  0E11               	movlw	17
  2421   002F68  6F15               	movwf	21,b	;volatile
  2422   002F6A                     
  2423                           ; BSR set to: 14
  2424                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  2425   002F6A  97E9               	bcf	233,3,b	;volatile
  2426   002F6C                     
  2427                           ; BSR set to: 14
  2428                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  2429   002F6C  95E8               	bcf	232,2,b	;volatile
  2430                           
  2431                           ;serial.c: 14:     SP4BRGL = 51;
  2432   002F6E  0E33               	movlw	51
  2433   002F70  6FE5               	movwf	229,b	;volatile
  2434                           
  2435                           ;serial.c: 15:     SP4BRGH = 0;
  2436   002F72  0E00               	movlw	0
  2437   002F74  6FE6               	movwf	230,b	;volatile
  2438   002F76                     
  2439                           ; BSR set to: 14
  2440                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  2441   002F76  89E7               	bsf	231,4,b	;volatile
  2442   002F78                     
  2443                           ; BSR set to: 14
  2444                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  2445   002F78  8BE8               	bsf	232,5,b	;volatile
  2446   002F7A                     
  2447                           ; BSR set to: 14
  2448                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  2449   002F7A  8FE7               	bsf	231,7,b	;volatile
  2450   002F7C                     
  2451                           ; BSR set to: 14
  2452   002F7C  0012               	return		;funcret
  2453   002F7E                     __end_of_initUSART4:
  2454                           	callstack 0
  2455                           
  2456 ;; *************** function _initDCmotorsPWM *****************
  2457 ;; Defined at:
  2458 ;;		line 5 in file "dc_motor.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, status,2
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2472 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2476 ;;Total ram usage:        2 bytes
  2477 ;; Hardware stack levels used: 1
  2478 ;; Hardware stack levels required when called: 1
  2479 ;; This function calls:
  2480 ;;		Nothing
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text7
  2487   0024A6                     __ptext7:
  2488                           	callstack 0
  2489   0024A6                     _initDCmotorsPWM:
  2490                           	callstack 29
  2491   0024A6                     
  2492                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  2493   0024A6  9485               	bcf	133,2,c	;volatile
  2494                           
  2495                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  2496   0024A8  9885               	bcf	133,4,c	;volatile
  2497                           
  2498                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  2499   0024AA  9E83               	bcf	131,7,c	;volatile
  2500                           
  2501                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  2502   0024AC  9C87               	bcf	135,6,c	;volatile
  2503                           
  2504                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
  2505   0024AE  947D               	bcf	125,2,c	;volatile
  2506                           
  2507                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
  2508   0024B0  987D               	bcf	125,4,c	;volatile
  2509                           
  2510                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
  2511   0024B2  9E7B               	bcf	123,7,c	;volatile
  2512                           
  2513                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
  2514   0024B4  9C7F               	bcf	127,6,c	;volatile
  2515   0024B6                     
  2516                           ;dc_motor.c: 18:     RE2PPS=0x05;
  2517   0024B6  0E05               	movlw	5
  2518   0024B8  010E               	movlb	14	; () banked
  2519   0024BA  6F74               	movwf	116,b	;volatile
  2520                           
  2521                           ;dc_motor.c: 19:     RE4PPS=0x06;
  2522   0024BC  0E06               	movlw	6
  2523   0024BE  6F76               	movwf	118,b	;volatile
  2524                           
  2525                           ;dc_motor.c: 20:     RC7PPS=0x07;
  2526   0024C0  0E07               	movlw	7
  2527   0024C2  6F69               	movwf	105,b	;volatile
  2528                           
  2529                           ;dc_motor.c: 21:     RG6PPS=0x08;
  2530   0024C4  0E08               	movlw	8
  2531   0024C6  6F88               	movwf	136,b	;volatile
  2532                           
  2533                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  2534   0024C8  50BD               	movf	189,w,c	;volatile
  2535   0024CA  0B8F               	andlw	-113
  2536   0024CC  0940               	iorlw	64
  2537   0024CE  6EBD               	movwf	189,c	;volatile
  2538                           
  2539                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  2540   0024D0  0EE0               	movlw	-32
  2541   0024D2  16BE               	andwf	190,f,c	;volatile
  2542                           
  2543                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  2544   0024D4  50BF               	movf	191,w,c	;volatile
  2545   0024D6  0BF0               	andlw	-16
  2546   0024D8  0901               	iorlw	1
  2547   0024DA  6EBF               	movwf	191,c	;volatile
  2548   0024DC                     
  2549                           ; BSR set to: 14
  2550                           ;dc_motor.c: 30:     T2PR=(unsigned char)PWMperiod;
  2551   0024DC  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2552   0024E0                     
  2553                           ; BSR set to: 14
  2554                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  2555   0024E0  8EBD               	bsf	189,7,c	;volatile
  2556                           
  2557                           ;dc_motor.c: 35:     CCPR1H=0;
  2558   0024E2  0E00               	movlw	0
  2559   0024E4  6EAA               	movwf	170,c	;volatile
  2560                           
  2561                           ;dc_motor.c: 36:     CCPR2H=0;
  2562   0024E6  0E00               	movlw	0
  2563   0024E8  6EA6               	movwf	166,c	;volatile
  2564                           
  2565                           ;dc_motor.c: 37:     CCPR3H=0;
  2566   0024EA  0E00               	movlw	0
  2567   0024EC  010F               	movlb	15	; () banked
  2568   0024EE  6F25               	movwf	37,b	;volatile
  2569                           
  2570                           ;dc_motor.c: 38:     CCPR4H=0;
  2571   0024F0  0E00               	movlw	0
  2572   0024F2  6F21               	movwf	33,b	;volatile
  2573                           
  2574                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  2575   0024F4  0EFC               	movlw	-4
  2576   0024F6  16AD               	andwf	173,f,c	;volatile
  2577                           
  2578                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  2579   0024F8  0EF3               	movlw	-13
  2580   0024FA  16AD               	andwf	173,f,c	;volatile
  2581                           
  2582                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  2583   0024FC  0ECF               	movlw	-49
  2584   0024FE  16AD               	andwf	173,f,c	;volatile
  2585                           
  2586                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  2587   002500  0E3F               	movlw	-193
  2588   002502  16AD               	andwf	173,f,c	;volatile
  2589   002504                     
  2590                           ; BSR set to: 15
  2591                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  2592   002504  88AB               	bsf	171,4,c	;volatile
  2593                           
  2594                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  2595   002506  50AB               	movf	171,w,c	;volatile
  2596   002508  0BF0               	andlw	-16
  2597   00250A  090C               	iorlw	12
  2598   00250C  6EAB               	movwf	171,c	;volatile
  2599   00250E                     
  2600                           ; BSR set to: 15
  2601                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  2602   00250E  8EAB               	bsf	171,7,c	;volatile
  2603   002510                     
  2604                           ; BSR set to: 15
  2605                           ;dc_motor.c: 51:     CCP2CONbits.FMT=1;
  2606   002510  88A7               	bsf	167,4,c	;volatile
  2607                           
  2608                           ;dc_motor.c: 52:     CCP2CONbits.CCP2MODE=0b1100;
  2609   002512  50A7               	movf	167,w,c	;volatile
  2610   002514  0BF0               	andlw	-16
  2611   002516  090C               	iorlw	12
  2612   002518  6EA7               	movwf	167,c	;volatile
  2613   00251A                     
  2614                           ; BSR set to: 15
  2615                           ;dc_motor.c: 53:     CCP2CONbits.EN=1;
  2616   00251A  8EA7               	bsf	167,7,c	;volatile
  2617   00251C                     
  2618                           ; BSR set to: 15
  2619                           ;dc_motor.c: 55:     CCP3CONbits.FMT=1;
  2620   00251C  8926               	bsf	38,4,b	;volatile
  2621                           
  2622                           ;dc_motor.c: 56:     CCP3CONbits.CCP3MODE=0b1100;
  2623   00251E  5126               	movf	38,w,b	;volatile
  2624   002520  0BF0               	andlw	-16
  2625   002522  090C               	iorlw	12
  2626   002524  6F26               	movwf	38,b	;volatile
  2627   002526                     
  2628                           ; BSR set to: 15
  2629                           ;dc_motor.c: 57:     CCP3CONbits.EN=1;
  2630   002526  8F26               	bsf	38,7,b	;volatile
  2631   002528                     
  2632                           ; BSR set to: 15
  2633                           ;dc_motor.c: 59:     CCP4CONbits.FMT=1;
  2634   002528  8922               	bsf	34,4,b	;volatile
  2635                           
  2636                           ;dc_motor.c: 60:     CCP4CONbits.CCP4MODE=0b1100;
  2637   00252A  5122               	movf	34,w,b	;volatile
  2638   00252C  0BF0               	andlw	-16
  2639   00252E  090C               	iorlw	12
  2640   002530  6F22               	movwf	34,b	;volatile
  2641   002532                     
  2642                           ; BSR set to: 15
  2643                           ;dc_motor.c: 61:     CCP4CONbits.EN=1;
  2644   002532  8F22               	bsf	34,7,b	;volatile
  2645   002534                     
  2646                           ; BSR set to: 15
  2647   002534  0012               	return		;funcret
  2648   002536                     __end_of_initDCmotorsPWM:
  2649                           	callstack 0
  2650                           
  2651 ;; *************** function _getRGBCval *****************
  2652 ;; Defined at:
  2653 ;;		line 84 in file "color.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  p               1   11[COMRAM] PTR struct RGBC_val
  2656 ;;		 -> main@measured_colour(8), 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2668 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2671 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2672 ;;Total ram usage:        1 bytes
  2673 ;; Hardware stack levels used: 1
  2674 ;; Hardware stack levels required when called: 4
  2675 ;; This function calls:
  2676 ;;		_color_read_Blue
  2677 ;;		_color_read_Clear
  2678 ;;		_color_read_Green
  2679 ;;		_color_read_Red
  2680 ;; This function is called by:
  2681 ;;		_main
  2682 ;;		_wait_for_wall
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           	psect	text8
  2687   0029AA                     __ptext8:
  2688                           	callstack 0
  2689   0029AA                     _getRGBCval:
  2690                           	callstack 26
  2691   0029AA                     
  2692                           ;color.c: 84: void getRGBCval(struct RGBC_val *p);color.c: 85: {;color.c: 86:     p->R =
      +                           color_read_Red();
  2693   0029AA  EC54  F015         	call	_color_read_Red	;wreg free
  2694   0029AE  500C               	movf	getRGBCval@p^0,w,c
  2695   0029B0  6ED9               	movwf	fsr2l,c
  2696   0029B2  6ADA               	clrf	fsr2h,c
  2697   0029B4  C005  FFDE         	movff	?_color_read_Red,postinc2
  2698   0029B8  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  2699                           
  2700                           ;color.c: 87:     p->G = color_read_Green();
  2701   0029BC  EC7C  F015         	call	_color_read_Green	;wreg free
  2702   0029C0  500C               	movf	getRGBCval@p^0,w,c
  2703   0029C2  6ED9               	movwf	fsr2l,c
  2704   0029C4  6ADA               	clrf	fsr2h,c
  2705   0029C6  0E02               	movlw	2
  2706   0029C8  26D9               	addwf	fsr2l,f,c
  2707   0029CA  C005  FFDE         	movff	?_color_read_Green,postinc2
  2708   0029CE  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  2709                           
  2710                           ;color.c: 88:     p->B = color_read_Blue();
  2711   0029D2  ECCC  F015         	call	_color_read_Blue	;wreg free
  2712   0029D6  500C               	movf	getRGBCval@p^0,w,c
  2713   0029D8  6ED9               	movwf	fsr2l,c
  2714   0029DA  6ADA               	clrf	fsr2h,c
  2715   0029DC  0E04               	movlw	4
  2716   0029DE  26D9               	addwf	fsr2l,f,c
  2717   0029E0  C005  FFDE         	movff	?_color_read_Blue,postinc2
  2718   0029E4  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  2719                           
  2720                           ;color.c: 89:     p->C = color_read_Clear();
  2721   0029E8  ECA4  F015         	call	_color_read_Clear	;wreg free
  2722   0029EC  500C               	movf	getRGBCval@p^0,w,c
  2723   0029EE  6ED9               	movwf	fsr2l,c
  2724   0029F0  6ADA               	clrf	fsr2h,c
  2725   0029F2  0E06               	movlw	6
  2726   0029F4  26D9               	addwf	fsr2l,f,c
  2727   0029F6  C005  FFDE         	movff	?_color_read_Clear,postinc2
  2728   0029FA  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  2729   0029FE  0012               	return		;funcret
  2730   002A00                     __end_of_getRGBCval:
  2731                           	callstack 0
  2732                           
  2733 ;; *************** function _color_read_Red *****************
  2734 ;; Defined at:
  2735 ;;		line 28 in file "color.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;		None
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  tmp             2    9[COMRAM] unsigned int 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  2    4[COMRAM] unsigned int 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2749 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2751 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2752 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2753 ;;Total ram usage:        7 bytes
  2754 ;; Hardware stack levels used: 1
  2755 ;; Hardware stack levels required when called: 3
  2756 ;; This function calls:
  2757 ;;		_I2C_2_Master_Read
  2758 ;;		_I2C_2_Master_RepStart
  2759 ;;		_I2C_2_Master_Start
  2760 ;;		_I2C_2_Master_Stop
  2761 ;;		_I2C_2_Master_Write
  2762 ;; This function is called by:
  2763 ;;		_getRGBCval
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text9
  2768   002AA8                     __ptext9:
  2769                           	callstack 0
  2770   002AA8                     _color_read_Red:
  2771                           	callstack 26
  2772   002AA8                     
  2773                           ;color.c: 30:  unsigned int tmp;;color.c: 31:  I2C_2_Master_Start();
  2774   002AA8  ECE8  F017         	call	_I2C_2_Master_Start	;wreg free
  2775                           
  2776                           ;color.c: 32:  I2C_2_Master_Write(0x52 | 0x00);
  2777   002AAC  0E52               	movlw	82
  2778   002AAE  ECCC  F017         	call	_I2C_2_Master_Write
  2779                           
  2780                           ;color.c: 33:  I2C_2_Master_Write(0xA0 | 0x16);
  2781   002AB2  0EB6               	movlw	182
  2782   002AB4  ECCC  F017         	call	_I2C_2_Master_Write
  2783                           
  2784                           ;color.c: 34:  I2C_2_Master_RepStart();
  2785   002AB8  ECDE  F017         	call	_I2C_2_Master_RepStart	;wreg free
  2786                           
  2787                           ;color.c: 35:  I2C_2_Master_Write(0x52 | 0x01);
  2788   002ABC  0E53               	movlw	83
  2789   002ABE  ECCC  F017         	call	_I2C_2_Master_Write
  2790                           
  2791                           ;color.c: 36:  tmp=I2C_2_Master_Read(1);
  2792   002AC2  0E01               	movlw	1
  2793   002AC4  ECF4  F015         	call	_I2C_2_Master_Read
  2794   002AC8  6E07               	movwf	??_color_read_Red^0,c
  2795   002ACA  5007               	movf	??_color_read_Red^0,w,c
  2796   002ACC  6E0A               	movwf	color_read_Red@tmp^0,c
  2797   002ACE  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  2798                           
  2799                           ;color.c: 37:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2800   002AD0  0E00               	movlw	0
  2801   002AD2  ECF4  F015         	call	_I2C_2_Master_Read
  2802   002AD6  6E07               	movwf	??_color_read_Red^0,c
  2803   002AD8  5007               	movf	??_color_read_Red^0,w,c
  2804   002ADA  6E09               	movwf	(??_color_read_Red+2)^0,c
  2805   002ADC  6A08               	clrf	(??_color_read_Red+1)^0,c
  2806   002ADE  500A               	movf	color_read_Red@tmp^0,w,c
  2807   002AE0  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  2808   002AE2  6E0A               	movwf	color_read_Red@tmp^0,c
  2809   002AE4  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  2810   002AE6  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  2811   002AE8  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  2812                           
  2813                           ;color.c: 38:  I2C_2_Master_Stop();
  2814   002AEA  ECE3  F017         	call	_I2C_2_Master_Stop	;wreg free
  2815   002AEE                     
  2816                           ;color.c: 39:  return tmp;
  2817   002AEE  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  2818   002AF2  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  2819   002AF6  0012               	return		;funcret
  2820   002AF8                     __end_of_color_read_Red:
  2821                           	callstack 0
  2822                           
  2823 ;; *************** function _color_read_Green *****************
  2824 ;; Defined at:
  2825 ;;		line 42 in file "color.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;		None
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  tmp             2    9[COMRAM] unsigned int 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  2    4[COMRAM] unsigned int 
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2842 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2843 ;;Total ram usage:        7 bytes
  2844 ;; Hardware stack levels used: 1
  2845 ;; Hardware stack levels required when called: 3
  2846 ;; This function calls:
  2847 ;;		_I2C_2_Master_Read
  2848 ;;		_I2C_2_Master_RepStart
  2849 ;;		_I2C_2_Master_Start
  2850 ;;		_I2C_2_Master_Stop
  2851 ;;		_I2C_2_Master_Write
  2852 ;; This function is called by:
  2853 ;;		_getRGBCval
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text10
  2858   002AF8                     __ptext10:
  2859                           	callstack 0
  2860   002AF8                     _color_read_Green:
  2861                           	callstack 26
  2862   002AF8                     
  2863                           ;color.c: 44:     unsigned int tmp;;color.c: 45:  I2C_2_Master_Start();
  2864   002AF8  ECE8  F017         	call	_I2C_2_Master_Start	;wreg free
  2865                           
  2866                           ;color.c: 46:  I2C_2_Master_Write(0x52 | 0x00);
  2867   002AFC  0E52               	movlw	82
  2868   002AFE  ECCC  F017         	call	_I2C_2_Master_Write
  2869                           
  2870                           ;color.c: 47:  I2C_2_Master_Write(0xA0 | 0x18);
  2871   002B02  0EB8               	movlw	184
  2872   002B04  ECCC  F017         	call	_I2C_2_Master_Write
  2873                           
  2874                           ;color.c: 48:  I2C_2_Master_RepStart();
  2875   002B08  ECDE  F017         	call	_I2C_2_Master_RepStart	;wreg free
  2876                           
  2877                           ;color.c: 49:  I2C_2_Master_Write(0x52 | 0x01);
  2878   002B0C  0E53               	movlw	83
  2879   002B0E  ECCC  F017         	call	_I2C_2_Master_Write
  2880                           
  2881                           ;color.c: 50:  tmp=I2C_2_Master_Read(1);
  2882   002B12  0E01               	movlw	1
  2883   002B14  ECF4  F015         	call	_I2C_2_Master_Read
  2884   002B18  6E07               	movwf	??_color_read_Green^0,c
  2885   002B1A  5007               	movf	??_color_read_Green^0,w,c
  2886   002B1C  6E0A               	movwf	color_read_Green@tmp^0,c
  2887   002B1E  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  2888                           
  2889                           ;color.c: 51:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2890   002B20  0E00               	movlw	0
  2891   002B22  ECF4  F015         	call	_I2C_2_Master_Read
  2892   002B26  6E07               	movwf	??_color_read_Green^0,c
  2893   002B28  5007               	movf	??_color_read_Green^0,w,c
  2894   002B2A  6E09               	movwf	(??_color_read_Green+2)^0,c
  2895   002B2C  6A08               	clrf	(??_color_read_Green+1)^0,c
  2896   002B2E  500A               	movf	color_read_Green@tmp^0,w,c
  2897   002B30  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  2898   002B32  6E0A               	movwf	color_read_Green@tmp^0,c
  2899   002B34  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  2900   002B36  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  2901   002B38  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  2902                           
  2903                           ;color.c: 52:  I2C_2_Master_Stop();
  2904   002B3A  ECE3  F017         	call	_I2C_2_Master_Stop	;wreg free
  2905   002B3E                     
  2906                           ;color.c: 53:  return tmp;
  2907   002B3E  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  2908   002B42  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  2909   002B46  0012               	return		;funcret
  2910   002B48                     __end_of_color_read_Green:
  2911                           	callstack 0
  2912                           
  2913 ;; *************** function _color_read_Clear *****************
  2914 ;; Defined at:
  2915 ;;		line 70 in file "color.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;		None
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;  tmp             2    9[COMRAM] unsigned int 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  2    4[COMRAM] unsigned int 
  2922 ;; Registers used:
  2923 ;;		wreg, status,2, status,0, cstack
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2929 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2931 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2932 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2933 ;;Total ram usage:        7 bytes
  2934 ;; Hardware stack levels used: 1
  2935 ;; Hardware stack levels required when called: 3
  2936 ;; This function calls:
  2937 ;;		_I2C_2_Master_Read
  2938 ;;		_I2C_2_Master_RepStart
  2939 ;;		_I2C_2_Master_Start
  2940 ;;		_I2C_2_Master_Stop
  2941 ;;		_I2C_2_Master_Write
  2942 ;; This function is called by:
  2943 ;;		_getRGBCval
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text11
  2948   002B48                     __ptext11:
  2949                           	callstack 0
  2950   002B48                     _color_read_Clear:
  2951                           	callstack 26
  2952   002B48                     
  2953                           ;color.c: 72:     unsigned int tmp;;color.c: 73:  I2C_2_Master_Start();
  2954   002B48  ECE8  F017         	call	_I2C_2_Master_Start	;wreg free
  2955                           
  2956                           ;color.c: 74:  I2C_2_Master_Write(0x52 | 0x00);
  2957   002B4C  0E52               	movlw	82
  2958   002B4E  ECCC  F017         	call	_I2C_2_Master_Write
  2959                           
  2960                           ;color.c: 75:  I2C_2_Master_Write(0xA0 | 0x14);
  2961   002B52  0EB4               	movlw	180
  2962   002B54  ECCC  F017         	call	_I2C_2_Master_Write
  2963                           
  2964                           ;color.c: 76:  I2C_2_Master_RepStart();
  2965   002B58  ECDE  F017         	call	_I2C_2_Master_RepStart	;wreg free
  2966                           
  2967                           ;color.c: 77:  I2C_2_Master_Write(0x52 | 0x01);
  2968   002B5C  0E53               	movlw	83
  2969   002B5E  ECCC  F017         	call	_I2C_2_Master_Write
  2970                           
  2971                           ;color.c: 78:  tmp=I2C_2_Master_Read(1);
  2972   002B62  0E01               	movlw	1
  2973   002B64  ECF4  F015         	call	_I2C_2_Master_Read
  2974   002B68  6E07               	movwf	??_color_read_Clear^0,c
  2975   002B6A  5007               	movf	??_color_read_Clear^0,w,c
  2976   002B6C  6E0A               	movwf	color_read_Clear@tmp^0,c
  2977   002B6E  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  2978                           
  2979                           ;color.c: 79:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2980   002B70  0E00               	movlw	0
  2981   002B72  ECF4  F015         	call	_I2C_2_Master_Read
  2982   002B76  6E07               	movwf	??_color_read_Clear^0,c
  2983   002B78  5007               	movf	??_color_read_Clear^0,w,c
  2984   002B7A  6E09               	movwf	(??_color_read_Clear+2)^0,c
  2985   002B7C  6A08               	clrf	(??_color_read_Clear+1)^0,c
  2986   002B7E  500A               	movf	color_read_Clear@tmp^0,w,c
  2987   002B80  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  2988   002B82  6E0A               	movwf	color_read_Clear@tmp^0,c
  2989   002B84  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  2990   002B86  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  2991   002B88  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  2992                           
  2993                           ;color.c: 80:  I2C_2_Master_Stop();
  2994   002B8A  ECE3  F017         	call	_I2C_2_Master_Stop	;wreg free
  2995   002B8E                     
  2996                           ;color.c: 81:  return tmp;
  2997   002B8E  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  2998   002B92  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  2999   002B96  0012               	return		;funcret
  3000   002B98                     __end_of_color_read_Clear:
  3001                           	callstack 0
  3002                           
  3003 ;; *************** function _color_read_Blue *****************
  3004 ;; Defined at:
  3005 ;;		line 56 in file "color.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  tmp             2    9[COMRAM] unsigned int 
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  2    4[COMRAM] unsigned int 
  3012 ;; Registers used:
  3013 ;;		wreg, status,2, status,0, cstack
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3019 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3020 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3021 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3022 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3023 ;;Total ram usage:        7 bytes
  3024 ;; Hardware stack levels used: 1
  3025 ;; Hardware stack levels required when called: 3
  3026 ;; This function calls:
  3027 ;;		_I2C_2_Master_Read
  3028 ;;		_I2C_2_Master_RepStart
  3029 ;;		_I2C_2_Master_Start
  3030 ;;		_I2C_2_Master_Stop
  3031 ;;		_I2C_2_Master_Write
  3032 ;; This function is called by:
  3033 ;;		_getRGBCval
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text12
  3038   002B98                     __ptext12:
  3039                           	callstack 0
  3040   002B98                     _color_read_Blue:
  3041                           	callstack 26
  3042   002B98                     
  3043                           ;color.c: 58:     unsigned int tmp;;color.c: 59:  I2C_2_Master_Start();
  3044   002B98  ECE8  F017         	call	_I2C_2_Master_Start	;wreg free
  3045                           
  3046                           ;color.c: 60:  I2C_2_Master_Write(0x52 | 0x00);
  3047   002B9C  0E52               	movlw	82
  3048   002B9E  ECCC  F017         	call	_I2C_2_Master_Write
  3049                           
  3050                           ;color.c: 61:  I2C_2_Master_Write(0xA0 | 0x1A);
  3051   002BA2  0EBA               	movlw	186
  3052   002BA4  ECCC  F017         	call	_I2C_2_Master_Write
  3053                           
  3054                           ;color.c: 62:  I2C_2_Master_RepStart();
  3055   002BA8  ECDE  F017         	call	_I2C_2_Master_RepStart	;wreg free
  3056                           
  3057                           ;color.c: 63:  I2C_2_Master_Write(0x52 | 0x01);
  3058   002BAC  0E53               	movlw	83
  3059   002BAE  ECCC  F017         	call	_I2C_2_Master_Write
  3060                           
  3061                           ;color.c: 64:  tmp=I2C_2_Master_Read(1);
  3062   002BB2  0E01               	movlw	1
  3063   002BB4  ECF4  F015         	call	_I2C_2_Master_Read
  3064   002BB8  6E07               	movwf	??_color_read_Blue^0,c
  3065   002BBA  5007               	movf	??_color_read_Blue^0,w,c
  3066   002BBC  6E0A               	movwf	color_read_Blue@tmp^0,c
  3067   002BBE  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3068                           
  3069                           ;color.c: 65:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3070   002BC0  0E00               	movlw	0
  3071   002BC2  ECF4  F015         	call	_I2C_2_Master_Read
  3072   002BC6  6E07               	movwf	??_color_read_Blue^0,c
  3073   002BC8  5007               	movf	??_color_read_Blue^0,w,c
  3074   002BCA  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3075   002BCC  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3076   002BCE  500A               	movf	color_read_Blue@tmp^0,w,c
  3077   002BD0  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3078   002BD2  6E0A               	movwf	color_read_Blue@tmp^0,c
  3079   002BD4  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3080   002BD6  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3081   002BD8  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3082                           
  3083                           ;color.c: 66:  I2C_2_Master_Stop();
  3084   002BDA  ECE3  F017         	call	_I2C_2_Master_Stop	;wreg free
  3085   002BDE                     
  3086                           ;color.c: 67:  return tmp;
  3087   002BDE  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3088   002BE2  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3089   002BE6  0012               	return		;funcret
  3090   002BE8                     __end_of_color_read_Blue:
  3091                           	callstack 0
  3092                           
  3093 ;; *************** function _I2C_2_Master_RepStart *****************
  3094 ;; Defined at:
  3095 ;;		line 33 in file "i2c.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;		None
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;		None
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  1    wreg      void 
  3102 ;; Registers used:
  3103 ;;		wreg, status,2, status,0, cstack
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3113 ;;Total ram usage:        0 bytes
  3114 ;; Hardware stack levels used: 1
  3115 ;; Hardware stack levels required when called: 2
  3116 ;; This function calls:
  3117 ;;		_I2C_2_Master_Idle
  3118 ;; This function is called by:
  3119 ;;		_color_read_Red
  3120 ;;		_color_read_Green
  3121 ;;		_color_read_Blue
  3122 ;;		_color_read_Clear
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text13
  3127   002FBC                     __ptext13:
  3128                           	callstack 0
  3129   002FBC                     _I2C_2_Master_RepStart:
  3130                           	callstack 26
  3131   002FBC                     
  3132                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3133   002FBC  EC54  F017         	call	_I2C_2_Master_Idle	;wreg free
  3134   002FC0                     
  3135                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3136   002FC0  010E               	movlb	14	; () banked
  3137   002FC2  83DA               	bsf	218,1,b	;volatile
  3138   002FC4                     
  3139                           ; BSR set to: 14
  3140   002FC4  0012               	return		;funcret
  3141   002FC6                     __end_of_I2C_2_Master_RepStart:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _I2C_2_Master_Read *****************
  3145 ;; Defined at:
  3146 ;;		line 51 in file "i2c.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  ack             1    wreg     unsigned char 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  ack             1    2[COMRAM] unsigned char 
  3151 ;;  tmp             1    3[COMRAM] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      unsigned char 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3162 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3164 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3165 ;;Total ram usage:        3 bytes
  3166 ;; Hardware stack levels used: 1
  3167 ;; Hardware stack levels required when called: 2
  3168 ;; This function calls:
  3169 ;;		_I2C_2_Master_Idle
  3170 ;; This function is called by:
  3171 ;;		_color_read_Red
  3172 ;;		_color_read_Green
  3173 ;;		_color_read_Blue
  3174 ;;		_color_read_Clear
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text14
  3179   002BE8                     __ptext14:
  3180                           	callstack 0
  3181   002BE8                     _I2C_2_Master_Read:
  3182                           	callstack 26
  3183                           
  3184                           ; BSR set to: 14
  3185                           ;incstack = 0
  3186                           ;I2C_2_Master_Read@ack stored from wreg
  3187   002BE8  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3188   002BEA                     
  3189                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3190   002BEA  EC54  F017         	call	_I2C_2_Master_Idle	;wreg free
  3191   002BEE                     
  3192                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3193   002BEE  010E               	movlb	14	; () banked
  3194   002BF0  87DA               	bsf	218,3,b	;volatile
  3195                           
  3196                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3197   002BF2  EC54  F017         	call	_I2C_2_Master_Idle	;wreg free
  3198   002BF6                     
  3199                           ;i2c.c: 57:   tmp = SSP2BUF;
  3200   002BF6  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3201                           
  3202                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3203   002BFA  EC54  F017         	call	_I2C_2_Master_Idle	;wreg free
  3204   002BFE                     
  3205                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3206   002BFE  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3207   002C00  B4D8               	btfsc	status,2,c
  3208   002C02  EF05  F016         	goto	u1481
  3209   002C06  EF09  F016         	goto	u1480
  3210   002C0A                     u1481:
  3211   002C0A  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3212   002C0C  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3213   002C0E  EF0A  F016         	goto	u1498
  3214   002C12                     u1480:
  3215   002C12  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3216   002C14                     u1498:
  3217   002C14  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3218   002C16  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3219   002C18  010E               	movlb	14	; () banked
  3220   002C1A  51DA               	movf	218,w,b	;volatile
  3221   002C1C  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3222   002C1E  0BDF               	andlw	-33
  3223   002C20  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3224   002C22  6FDA               	movwf	218,b	;volatile
  3225   002C24                     
  3226                           ; BSR set to: 14
  3227                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3228   002C24  89DA               	bsf	218,4,b	;volatile
  3229   002C26                     
  3230                           ; BSR set to: 14
  3231                           ;i2c.c: 61:   return tmp;
  3232   002C26  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3233   002C28                     
  3234                           ; BSR set to: 14
  3235   002C28  0012               	return		;funcret
  3236   002C2A                     __end_of_I2C_2_Master_Read:
  3237                           	callstack 0
  3238                           
  3239 ;; *************** function _getHSVval *****************
  3240 ;; Defined at:
  3241 ;;		line 136 in file "color.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  p1              1   13[COMRAM] PTR struct HSV_val
  3244 ;;		 -> main@HSV_colour(6), 
  3245 ;;  p2              1   14[COMRAM] PTR struct RGBC_val
  3246 ;;		 -> main@measured_colour(8), 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  temp            4   51[COMRAM] unsigned long 
  3249 ;;  temp            4   47[COMRAM] unsigned long 
  3250 ;;  temp            4   43[COMRAM] unsigned long 
  3251 ;;  temp            4   39[COMRAM] unsigned long 
  3252 ;;  temp            4   55[COMRAM] unsigned long 
  3253 ;;  temp            4   35[COMRAM] unsigned long 
  3254 ;;  temp            4   31[COMRAM] unsigned long 
  3255 ;;  C               2   61[COMRAM] unsigned int 
  3256 ;;  M               2   59[COMRAM] unsigned int 
  3257 ;;  Hz              2    0        unsigned int 
  3258 ;;  H               2   29[COMRAM] unsigned int 
  3259 ;;  S               2   27[COMRAM] unsigned int 
  3260 ;;  m               2   25[COMRAM] unsigned int 
  3261 ;;  Sz              2   23[COMRAM] unsigned int 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3271 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3272 ;;      Locals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3273 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3274 ;;      Totals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3275 ;;Total ram usage:       50 bytes
  3276 ;; Hardware stack levels used: 1
  3277 ;; Hardware stack levels required when called: 3
  3278 ;; This function calls:
  3279 ;;		___lldiv
  3280 ;;		___lmul
  3281 ;;		_maxRGB
  3282 ;;		_minRGB
  3283 ;; This function is called by:
  3284 ;;		_main
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text15
  3289   000E24                     __ptext15:
  3290                           	callstack 0
  3291   000E24                     _getHSVval:
  3292                           	callstack 27
  3293   000E24                     
  3294                           ;color.c: 139:     unsigned int Sz = 100;
  3295   000E24  0E00               	movlw	0
  3296   000E26  6E19               	movwf	(getHSVval@Sz+1)^0,c
  3297   000E28  0E64               	movlw	100
  3298   000E2A  6E18               	movwf	getHSVval@Sz^0,c
  3299                           
  3300                           ;color.c: 140:     unsigned int H = 0;
  3301   000E2C  0E00               	movlw	0
  3302   000E2E  6E1F               	movwf	(getHSVval@H+1)^0,c
  3303   000E30  0E00               	movlw	0
  3304   000E32  6E1E               	movwf	getHSVval@H^0,c
  3305                           
  3306                           ;color.c: 141:     unsigned int S = 0;
  3307   000E34  0E00               	movlw	0
  3308   000E36  6E1D               	movwf	(getHSVval@S+1)^0,c
  3309   000E38  0E00               	movlw	0
  3310   000E3A  6E1C               	movwf	getHSVval@S^0,c
  3311   000E3C                     
  3312                           ;color.c: 143:     unsigned int M = maxRGB(p2);
  3313   000E3C  C00F  F007         	movff	getHSVval@p2,maxRGB@p
  3314   000E40  EC2A  F015         	call	_maxRGB	;wreg free
  3315   000E44  C007  F03C         	movff	?_maxRGB,getHSVval@M
  3316   000E48  C008  F03D         	movff	?_maxRGB+1,getHSVval@M+1
  3317   000E4C                     
  3318                           ;color.c: 144:     unsigned int m = minRGB(p2);
  3319   000E4C  C00F  F007         	movff	getHSVval@p2,minRGB@p
  3320   000E50  EC00  F015         	call	_minRGB	;wreg free
  3321   000E54  C007  F01A         	movff	?_minRGB,getHSVval@m
  3322   000E58  C008  F01B         	movff	?_minRGB+1,getHSVval@m+1
  3323   000E5C                     
  3324                           ;color.c: 145:     unsigned int C = M - m;
  3325   000E5C  501A               	movf	getHSVval@m^0,w,c
  3326   000E5E  5C3C               	subwf	getHSVval@M^0,w,c
  3327   000E60  6E3E               	movwf	getHSVval@C^0,c
  3328   000E62  501B               	movf	(getHSVval@m+1)^0,w,c
  3329   000E64  583D               	subwfb	(getHSVval@M+1)^0,w,c
  3330   000E66  6E3F               	movwf	(getHSVval@C+1)^0,c
  3331   000E68                     
  3332                           ;color.c: 147:     if (C == 0) {
  3333   000E68  503E               	movf	getHSVval@C^0,w,c
  3334   000E6A  103F               	iorwf	(getHSVval@C+1)^0,w,c
  3335   000E6C  A4D8               	btfss	status,2,c
  3336   000E6E  EF3B  F007         	goto	u2121
  3337   000E72  EF3D  F007         	goto	u2120
  3338   000E76                     u2121:
  3339   000E76  EF43  F007         	goto	l3353
  3340   000E7A                     u2120:
  3341   000E7A                     
  3342                           ;color.c: 148:         H = 0;
  3343   000E7A  0E00               	movlw	0
  3344   000E7C  6E1F               	movwf	(getHSVval@H+1)^0,c
  3345   000E7E  0E00               	movlw	0
  3346   000E80  6E1E               	movwf	getHSVval@H^0,c
  3347                           
  3348                           ;color.c: 149:     } else {
  3349   000E82  EF13  F00A         	goto	l3437
  3350   000E86                     l3353:
  3351                           
  3352                           ;color.c: 150:         if (M == p2->R) {
  3353   000E86  500F               	movf	getHSVval@p2^0,w,c
  3354   000E88  6ED9               	movwf	fsr2l,c
  3355   000E8A  6ADA               	clrf	fsr2h,c
  3356   000E8C  503C               	movf	getHSVval@M^0,w,c
  3357   000E8E  18DE               	xorwf	postinc2,w,c
  3358   000E90  E107               	bnz	u2131
  3359   000E92  503D               	movf	(getHSVval@M+1)^0,w,c
  3360   000E94  18DE               	xorwf	postinc2,w,c
  3361   000E96  A4D8               	btfss	status,2,c
  3362   000E98  EF50  F007         	goto	u2131
  3363   000E9C  EF52  F007         	goto	u2130
  3364   000EA0                     u2131:
  3365   000EA0  EF3F  F008         	goto	l3381
  3366   000EA4                     u2130:
  3367   000EA4                     
  3368                           ;color.c: 151:             if (p2->G >= p2->B) {
  3369   000EA4  500F               	movf	getHSVval@p2^0,w,c
  3370   000EA6  6ED9               	movwf	fsr2l,c
  3371   000EA8  6ADA               	clrf	fsr2h,c
  3372   000EAA  0E04               	movlw	4
  3373   000EAC  26D9               	addwf	fsr2l,f,c
  3374   000EAE  500F               	movf	getHSVval@p2^0,w,c
  3375   000EB0  6EE1               	movwf	fsr1l,c
  3376   000EB2  6AE2               	clrf	fsr1h,c
  3377   000EB4  0E02               	movlw	2
  3378   000EB6  26E1               	addwf	fsr1l,f,c
  3379   000EB8  50DE               	movf	postinc2,w,c
  3380   000EBA  5CE6               	subwf	postinc1,w,c
  3381   000EBC  50DE               	movf	postinc2,w,c
  3382   000EBE  58E6               	subwfb	postinc1,w,c
  3383   000EC0  A0D8               	btfss	status,0,c
  3384   000EC2  EF65  F007         	goto	u2141
  3385   000EC6  EF67  F007         	goto	u2140
  3386   000ECA                     u2141:
  3387   000ECA  EFC7  F007         	goto	l3369
  3388   000ECE                     u2140:
  3389   000ECE                     
  3390                           ;color.c: 155:                 temp *= 0;
  3391   000ECE  0E00               	movlw	0
  3392   000ED0  6E24               	movwf	getHSVval@temp^0,c
  3393   000ED2  0E00               	movlw	0
  3394   000ED4  6E25               	movwf	(getHSVval@temp+1)^0,c
  3395   000ED6  0E00               	movlw	0
  3396   000ED8  6E26               	movwf	(getHSVval@temp+2)^0,c
  3397   000EDA  0E00               	movlw	0
  3398   000EDC  6E27               	movwf	(getHSVval@temp+3)^0,c
  3399   000EDE                     
  3400                           ;color.c: 156:                 temp += (unsigned long)(p2->G - p2->B);
  3401   000EDE  500F               	movf	getHSVval@p2^0,w,c
  3402   000EE0  6ED9               	movwf	fsr2l,c
  3403   000EE2  6ADA               	clrf	fsr2h,c
  3404   000EE4  0E04               	movlw	4
  3405   000EE6  26D9               	addwf	fsr2l,f,c
  3406   000EE8  CFDE F010          	movff	postinc2,??_getHSVval
  3407   000EEC  CFDD F011          	movff	postdec2,??_getHSVval+1
  3408   000EF0  500F               	movf	getHSVval@p2^0,w,c
  3409   000EF2  6ED9               	movwf	fsr2l,c
  3410   000EF4  6ADA               	clrf	fsr2h,c
  3411   000EF6  0E02               	movlw	2
  3412   000EF8  26D9               	addwf	fsr2l,f,c
  3413   000EFA  CFDE F012          	movff	postinc2,??_getHSVval+2
  3414   000EFE  CFDD F013          	movff	postdec2,??_getHSVval+3
  3415   000F02  5010               	movf	??_getHSVval^0,w,c
  3416   000F04  5C12               	subwf	(??_getHSVval+2)^0,w,c
  3417   000F06  6E14               	movwf	(??_getHSVval+4)^0,c
  3418   000F08  5011               	movf	(??_getHSVval+1)^0,w,c
  3419   000F0A  5813               	subwfb	(??_getHSVval+3)^0,w,c
  3420   000F0C  6E15               	movwf	(??_getHSVval+5)^0,c
  3421   000F0E  5014               	movf	(??_getHSVval+4)^0,w,c
  3422   000F10  2624               	addwf	getHSVval@temp^0,f,c
  3423   000F12  5015               	movf	(??_getHSVval+5)^0,w,c
  3424   000F14  2225               	addwfc	(getHSVval@temp+1)^0,f,c
  3425   000F16  0E00               	movlw	0
  3426   000F18  2226               	addwfc	(getHSVval@temp+2)^0,f,c
  3427   000F1A  0E00               	movlw	0
  3428   000F1C  2227               	addwfc	(getHSVval@temp+3)^0,f,c
  3429   000F1E                     
  3430                           ;color.c: 157:                 temp *= (unsigned long)Hz;
  3431   000F1E  C024  F001         	movff	getHSVval@temp,___lmul@multiplier
  3432   000F22  C025  F002         	movff	getHSVval@temp+1,___lmul@multiplier+1
  3433   000F26  C026  F003         	movff	getHSVval@temp+2,___lmul@multiplier+2
  3434   000F2A  C027  F004         	movff	getHSVval@temp+3,___lmul@multiplier+3
  3435   000F2E  0E3C               	movlw	60
  3436   000F30  6E05               	movwf	___lmul@multiplicand^0,c
  3437   000F32  0E00               	movlw	0
  3438   000F34  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3439   000F36  0E00               	movlw	0
  3440   000F38  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3441   000F3A  0E00               	movlw	0
  3442   000F3C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3443   000F3E  EC9C  F013         	call	___lmul	;wreg free
  3444   000F42  C001  F024         	movff	?___lmul,getHSVval@temp
  3445   000F46  C002  F025         	movff	?___lmul+1,getHSVval@temp+1
  3446   000F4A  C003  F026         	movff	?___lmul+2,getHSVval@temp+2
  3447   000F4E  C004  F027         	movff	?___lmul+3,getHSVval@temp+3
  3448   000F52                     
  3449                           ;color.c: 158:                 temp /= (unsigned long)C;
  3450   000F52  C024  F001         	movff	getHSVval@temp,___lldiv@dividend
  3451   000F56  C025  F002         	movff	getHSVval@temp+1,___lldiv@dividend+1
  3452   000F5A  C026  F003         	movff	getHSVval@temp+2,___lldiv@dividend+2
  3453   000F5E  C027  F004         	movff	getHSVval@temp+3,___lldiv@dividend+3
  3454   000F62  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  3455   000F66  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  3456   000F6A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  3457   000F6C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  3458   000F6E  EC01  F012         	call	___lldiv	;wreg free
  3459   000F72  C001  F024         	movff	?___lldiv,getHSVval@temp
  3460   000F76  C002  F025         	movff	?___lldiv+1,getHSVval@temp+1
  3461   000F7A  C003  F026         	movff	?___lldiv+2,getHSVval@temp+2
  3462   000F7E  C004  F027         	movff	?___lldiv+3,getHSVval@temp+3
  3463   000F82                     
  3464                           ;color.c: 159:                 H = (unsigned int)temp;
  3465   000F82  C024  F01E         	movff	getHSVval@temp,getHSVval@H
  3466   000F86  C025  F01F         	movff	getHSVval@temp+1,getHSVval@H+1
  3467                           
  3468                           ;color.c: 160:             } else {
  3469   000F8A  EF3F  F008         	goto	l3381
  3470   000F8E                     l3369:
  3471                           
  3472                           ;color.c: 162:                 unsigned long temp;;color.c: 163:                 temp = 
      +                          (unsigned long)C;
  3473   000F8E  C03E  F038         	movff	getHSVval@C,getHSVval@temp_656
  3474   000F92  C03F  F039         	movff	getHSVval@C+1,getHSVval@temp_656+1
  3475   000F96  6A3A               	clrf	(getHSVval@temp_656+2)^0,c
  3476   000F98  6A3B               	clrf	(getHSVval@temp_656+3)^0,c
  3477   000F9A                     
  3478                           ;color.c: 164:                 temp *= 6;
  3479   000F9A  C038  F001         	movff	getHSVval@temp_656,___lmul@multiplier
  3480   000F9E  C039  F002         	movff	getHSVval@temp_656+1,___lmul@multiplier+1
  3481   000FA2  C03A  F003         	movff	getHSVval@temp_656+2,___lmul@multiplier+2
  3482   000FA6  C03B  F004         	movff	getHSVval@temp_656+3,___lmul@multiplier+3
  3483   000FAA  0E06               	movlw	6
  3484   000FAC  6E05               	movwf	___lmul@multiplicand^0,c
  3485   000FAE  0E00               	movlw	0
  3486   000FB0  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3487   000FB2  0E00               	movlw	0
  3488   000FB4  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3489   000FB6  0E00               	movlw	0
  3490   000FB8  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3491   000FBA  EC9C  F013         	call	___lmul	;wreg free
  3492   000FBE  C001  F038         	movff	?___lmul,getHSVval@temp_656
  3493   000FC2  C002  F039         	movff	?___lmul+1,getHSVval@temp_656+1
  3494   000FC6  C003  F03A         	movff	?___lmul+2,getHSVval@temp_656+2
  3495   000FCA  C004  F03B         	movff	?___lmul+3,getHSVval@temp_656+3
  3496   000FCE                     
  3497                           ;color.c: 165:                 temp -= (unsigned long)(p2->B - p2->G);
  3498   000FCE  500F               	movf	getHSVval@p2^0,w,c
  3499   000FD0  6ED9               	movwf	fsr2l,c
  3500   000FD2  6ADA               	clrf	fsr2h,c
  3501   000FD4  0E02               	movlw	2
  3502   000FD6  26D9               	addwf	fsr2l,f,c
  3503   000FD8  CFDE F010          	movff	postinc2,??_getHSVval
  3504   000FDC  CFDD F011          	movff	postdec2,??_getHSVval+1
  3505   000FE0  500F               	movf	getHSVval@p2^0,w,c
  3506   000FE2  6ED9               	movwf	fsr2l,c
  3507   000FE4  6ADA               	clrf	fsr2h,c
  3508   000FE6  0E04               	movlw	4
  3509   000FE8  26D9               	addwf	fsr2l,f,c
  3510   000FEA  CFDE F012          	movff	postinc2,??_getHSVval+2
  3511   000FEE  CFDD F013          	movff	postdec2,??_getHSVval+3
  3512   000FF2  5010               	movf	??_getHSVval^0,w,c
  3513   000FF4  5C12               	subwf	(??_getHSVval+2)^0,w,c
  3514   000FF6  6E14               	movwf	(??_getHSVval+4)^0,c
  3515   000FF8  5011               	movf	(??_getHSVval+1)^0,w,c
  3516   000FFA  5813               	subwfb	(??_getHSVval+3)^0,w,c
  3517   000FFC  6E15               	movwf	(??_getHSVval+5)^0,c
  3518   000FFE  6A16               	clrf	(??_getHSVval+6)^0,c
  3519   001000  6A17               	clrf	(??_getHSVval+7)^0,c
  3520   001002  5014               	movf	(??_getHSVval+4)^0,w,c
  3521   001004  5E38               	subwf	getHSVval@temp_656^0,f,c
  3522   001006  5015               	movf	(??_getHSVval+5)^0,w,c
  3523   001008  5A39               	subwfb	(getHSVval@temp_656+1)^0,f,c
  3524   00100A  5016               	movf	(??_getHSVval+6)^0,w,c
  3525   00100C  5A3A               	subwfb	(getHSVval@temp_656+2)^0,f,c
  3526   00100E  5017               	movf	(??_getHSVval+7)^0,w,c
  3527   001010  5A3B               	subwfb	(getHSVval@temp_656+3)^0,f,c
  3528   001012                     
  3529                           ;color.c: 166:                 temp *= (unsigned long)Hz;
  3530   001012  C038  F001         	movff	getHSVval@temp_656,___lmul@multiplier
  3531   001016  C039  F002         	movff	getHSVval@temp_656+1,___lmul@multiplier+1
  3532   00101A  C03A  F003         	movff	getHSVval@temp_656+2,___lmul@multiplier+2
  3533   00101E  C03B  F004         	movff	getHSVval@temp_656+3,___lmul@multiplier+3
  3534   001022  0E3C               	movlw	60
  3535   001024  6E05               	movwf	___lmul@multiplicand^0,c
  3536   001026  0E00               	movlw	0
  3537   001028  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3538   00102A  0E00               	movlw	0
  3539   00102C  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3540   00102E  0E00               	movlw	0
  3541   001030  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3542   001032  EC9C  F013         	call	___lmul	;wreg free
  3543   001036  C001  F038         	movff	?___lmul,getHSVval@temp_656
  3544   00103A  C002  F039         	movff	?___lmul+1,getHSVval@temp_656+1
  3545   00103E  C003  F03A         	movff	?___lmul+2,getHSVval@temp_656+2
  3546   001042  C004  F03B         	movff	?___lmul+3,getHSVval@temp_656+3
  3547   001046                     
  3548                           ;color.c: 167:                 temp /= (unsigned long)C;
  3549   001046  C038  F001         	movff	getHSVval@temp_656,___lldiv@dividend
  3550   00104A  C039  F002         	movff	getHSVval@temp_656+1,___lldiv@dividend+1
  3551   00104E  C03A  F003         	movff	getHSVval@temp_656+2,___lldiv@dividend+2
  3552   001052  C03B  F004         	movff	getHSVval@temp_656+3,___lldiv@dividend+3
  3553   001056  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  3554   00105A  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  3555   00105E  6A07               	clrf	(___lldiv@divisor+2)^0,c
  3556   001060  6A08               	clrf	(___lldiv@divisor+3)^0,c
  3557   001062  EC01  F012         	call	___lldiv	;wreg free
  3558   001066  C001  F038         	movff	?___lldiv,getHSVval@temp_656
  3559   00106A  C002  F039         	movff	?___lldiv+1,getHSVval@temp_656+1
  3560   00106E  C003  F03A         	movff	?___lldiv+2,getHSVval@temp_656+2
  3561   001072  C004  F03B         	movff	?___lldiv+3,getHSVval@temp_656+3
  3562   001076                     
  3563                           ;color.c: 168:                 H = (unsigned int)temp;
  3564   001076  C038  F01E         	movff	getHSVval@temp_656,getHSVval@H
  3565   00107A  C039  F01F         	movff	getHSVval@temp_656+1,getHSVval@H+1
  3566   00107E                     l3381:
  3567                           
  3568                           ;color.c: 171:         if (M == p2->G) {
  3569   00107E  500F               	movf	getHSVval@p2^0,w,c
  3570   001080  6ED9               	movwf	fsr2l,c
  3571   001082  6ADA               	clrf	fsr2h,c
  3572   001084  0E02               	movlw	2
  3573   001086  26D9               	addwf	fsr2l,f,c
  3574   001088  503C               	movf	getHSVval@M^0,w,c
  3575   00108A  18DE               	xorwf	postinc2,w,c
  3576   00108C  E107               	bnz	u2151
  3577   00108E  503D               	movf	(getHSVval@M+1)^0,w,c
  3578   001090  18DE               	xorwf	postinc2,w,c
  3579   001092  A4D8               	btfss	status,2,c
  3580   001094  EF4E  F008         	goto	u2151
  3581   001098  EF50  F008         	goto	u2150
  3582   00109C                     u2151:
  3583   00109C  EF25  F009         	goto	l3409
  3584   0010A0                     u2150:
  3585   0010A0                     
  3586                           ;color.c: 172:             if (p2->B >= p2->R) {
  3587   0010A0  500F               	movf	getHSVval@p2^0,w,c
  3588   0010A2  6ED9               	movwf	fsr2l,c
  3589   0010A4  6ADA               	clrf	fsr2h,c
  3590   0010A6  500F               	movf	getHSVval@p2^0,w,c
  3591   0010A8  6EE1               	movwf	fsr1l,c
  3592   0010AA  6AE2               	clrf	fsr1h,c
  3593   0010AC  0E04               	movlw	4
  3594   0010AE  26E1               	addwf	fsr1l,f,c
  3595   0010B0  50DE               	movf	postinc2,w,c
  3596   0010B2  5CE6               	subwf	postinc1,w,c
  3597   0010B4  50DE               	movf	postinc2,w,c
  3598   0010B6  58E6               	subwfb	postinc1,w,c
  3599   0010B8  A0D8               	btfss	status,0,c
  3600   0010BA  EF61  F008         	goto	u2161
  3601   0010BE  EF63  F008         	goto	u2160
  3602   0010C2                     u2161:
  3603   0010C2  EFC4  F008         	goto	l3397
  3604   0010C6                     u2160:
  3605   0010C6                     
  3606                           ;color.c: 174:                 unsigned long temp;;color.c: 175:                 temp = 
      +                          (unsigned long)C;
  3607   0010C6  C03E  F028         	movff	getHSVval@C,getHSVval@temp_657
  3608   0010CA  C03F  F029         	movff	getHSVval@C+1,getHSVval@temp_657+1
  3609   0010CE  6A2A               	clrf	(getHSVval@temp_657+2)^0,c
  3610   0010D0  6A2B               	clrf	(getHSVval@temp_657+3)^0,c
  3611   0010D2                     
  3612                           ;color.c: 176:                 temp *= 2;
  3613   0010D2  90D8               	bcf	status,0,c
  3614   0010D4  3628               	rlcf	getHSVval@temp_657^0,f,c
  3615   0010D6  3629               	rlcf	(getHSVval@temp_657+1)^0,f,c
  3616   0010D8  362A               	rlcf	(getHSVval@temp_657+2)^0,f,c
  3617   0010DA  362B               	rlcf	(getHSVval@temp_657+3)^0,f,c
  3618   0010DC                     
  3619                           ;color.c: 177:                 temp += (unsigned long)(p2->B - p2->R);
  3620   0010DC  500F               	movf	getHSVval@p2^0,w,c
  3621   0010DE  6ED9               	movwf	fsr2l,c
  3622   0010E0  6ADA               	clrf	fsr2h,c
  3623   0010E2  CFDE F010          	movff	postinc2,??_getHSVval
  3624   0010E6  CFDD F011          	movff	postdec2,??_getHSVval+1
  3625   0010EA  500F               	movf	getHSVval@p2^0,w,c
  3626   0010EC  6ED9               	movwf	fsr2l,c
  3627   0010EE  6ADA               	clrf	fsr2h,c
  3628   0010F0  0E04               	movlw	4
  3629   0010F2  26D9               	addwf	fsr2l,f,c
  3630   0010F4  CFDE F012          	movff	postinc2,??_getHSVval+2
  3631   0010F8  CFDD F013          	movff	postdec2,??_getHSVval+3
  3632   0010FC  5010               	movf	??_getHSVval^0,w,c
  3633   0010FE  5C12               	subwf	(??_getHSVval+2)^0,w,c
  3634   001100  6E14               	movwf	(??_getHSVval+4)^0,c
  3635   001102  5011               	movf	(??_getHSVval+1)^0,w,c
  3636   001104  5813               	subwfb	(??_getHSVval+3)^0,w,c
  3637   001106  6E15               	movwf	(??_getHSVval+5)^0,c
  3638   001108  5014               	movf	(??_getHSVval+4)^0,w,c
  3639   00110A  2628               	addwf	getHSVval@temp_657^0,f,c
  3640   00110C  5015               	movf	(??_getHSVval+5)^0,w,c
  3641   00110E  2229               	addwfc	(getHSVval@temp_657+1)^0,f,c
  3642   001110  0E00               	movlw	0
  3643   001112  222A               	addwfc	(getHSVval@temp_657+2)^0,f,c
  3644   001114  0E00               	movlw	0
  3645   001116  222B               	addwfc	(getHSVval@temp_657+3)^0,f,c
  3646   001118                     
  3647                           ;color.c: 178:                 temp *= (unsigned long)Hz;
  3648   001118  C028  F001         	movff	getHSVval@temp_657,___lmul@multiplier
  3649   00111C  C029  F002         	movff	getHSVval@temp_657+1,___lmul@multiplier+1
  3650   001120  C02A  F003         	movff	getHSVval@temp_657+2,___lmul@multiplier+2
  3651   001124  C02B  F004         	movff	getHSVval@temp_657+3,___lmul@multiplier+3
  3652   001128  0E3C               	movlw	60
  3653   00112A  6E05               	movwf	___lmul@multiplicand^0,c
  3654   00112C  0E00               	movlw	0
  3655   00112E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3656   001130  0E00               	movlw	0
  3657   001132  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3658   001134  0E00               	movlw	0
  3659   001136  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3660   001138  EC9C  F013         	call	___lmul	;wreg free
  3661   00113C  C001  F028         	movff	?___lmul,getHSVval@temp_657
  3662   001140  C002  F029         	movff	?___lmul+1,getHSVval@temp_657+1
  3663   001144  C003  F02A         	movff	?___lmul+2,getHSVval@temp_657+2
  3664   001148  C004  F02B         	movff	?___lmul+3,getHSVval@temp_657+3
  3665   00114C                     
  3666                           ;color.c: 179:                 temp /= (unsigned long)C;
  3667   00114C  C028  F001         	movff	getHSVval@temp_657,___lldiv@dividend
  3668   001150  C029  F002         	movff	getHSVval@temp_657+1,___lldiv@dividend+1
  3669   001154  C02A  F003         	movff	getHSVval@temp_657+2,___lldiv@dividend+2
  3670   001158  C02B  F004         	movff	getHSVval@temp_657+3,___lldiv@dividend+3
  3671   00115C  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  3672   001160  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  3673   001164  6A07               	clrf	(___lldiv@divisor+2)^0,c
  3674   001166  6A08               	clrf	(___lldiv@divisor+3)^0,c
  3675   001168  EC01  F012         	call	___lldiv	;wreg free
  3676   00116C  C001  F028         	movff	?___lldiv,getHSVval@temp_657
  3677   001170  C002  F029         	movff	?___lldiv+1,getHSVval@temp_657+1
  3678   001174  C003  F02A         	movff	?___lldiv+2,getHSVval@temp_657+2
  3679   001178  C004  F02B         	movff	?___lldiv+3,getHSVval@temp_657+3
  3680   00117C                     
  3681                           ;color.c: 180:                 H = (unsigned int)temp;
  3682   00117C  C028  F01E         	movff	getHSVval@temp_657,getHSVval@H
  3683   001180  C029  F01F         	movff	getHSVval@temp_657+1,getHSVval@H+1
  3684                           
  3685                           ;color.c: 181:             } else {
  3686   001184  EF25  F009         	goto	l3409
  3687   001188                     l3397:
  3688                           
  3689                           ;color.c: 183:                 unsigned long temp;;color.c: 184:                 temp = 
      +                          (unsigned long)C;
  3690   001188  C03E  F02C         	movff	getHSVval@C,getHSVval@temp_658
  3691   00118C  C03F  F02D         	movff	getHSVval@C+1,getHSVval@temp_658+1
  3692   001190  6A2E               	clrf	(getHSVval@temp_658+2)^0,c
  3693   001192  6A2F               	clrf	(getHSVval@temp_658+3)^0,c
  3694   001194                     
  3695                           ;color.c: 185:                 temp *= 2;
  3696   001194  90D8               	bcf	status,0,c
  3697   001196  362C               	rlcf	getHSVval@temp_658^0,f,c
  3698   001198  362D               	rlcf	(getHSVval@temp_658+1)^0,f,c
  3699   00119A  362E               	rlcf	(getHSVval@temp_658+2)^0,f,c
  3700   00119C  362F               	rlcf	(getHSVval@temp_658+3)^0,f,c
  3701   00119E                     
  3702                           ;color.c: 186:                 temp -= (unsigned long)(p2->R - p2->B);
  3703   00119E  500F               	movf	getHSVval@p2^0,w,c
  3704   0011A0  6ED9               	movwf	fsr2l,c
  3705   0011A2  6ADA               	clrf	fsr2h,c
  3706   0011A4  0E04               	movlw	4
  3707   0011A6  26D9               	addwf	fsr2l,f,c
  3708   0011A8  CFDE F010          	movff	postinc2,??_getHSVval
  3709   0011AC  CFDD F011          	movff	postdec2,??_getHSVval+1
  3710   0011B0  500F               	movf	getHSVval@p2^0,w,c
  3711   0011B2  6ED9               	movwf	fsr2l,c
  3712   0011B4  6ADA               	clrf	fsr2h,c
  3713   0011B6  CFDE F012          	movff	postinc2,??_getHSVval+2
  3714   0011BA  CFDD F013          	movff	postdec2,??_getHSVval+3
  3715   0011BE  5010               	movf	??_getHSVval^0,w,c
  3716   0011C0  5C12               	subwf	(??_getHSVval+2)^0,w,c
  3717   0011C2  6E14               	movwf	(??_getHSVval+4)^0,c
  3718   0011C4  5011               	movf	(??_getHSVval+1)^0,w,c
  3719   0011C6  5813               	subwfb	(??_getHSVval+3)^0,w,c
  3720   0011C8  6E15               	movwf	(??_getHSVval+5)^0,c
  3721   0011CA  6A16               	clrf	(??_getHSVval+6)^0,c
  3722   0011CC  6A17               	clrf	(??_getHSVval+7)^0,c
  3723   0011CE  5014               	movf	(??_getHSVval+4)^0,w,c
  3724   0011D0  5E2C               	subwf	getHSVval@temp_658^0,f,c
  3725   0011D2  5015               	movf	(??_getHSVval+5)^0,w,c
  3726   0011D4  5A2D               	subwfb	(getHSVval@temp_658+1)^0,f,c
  3727   0011D6  5016               	movf	(??_getHSVval+6)^0,w,c
  3728   0011D8  5A2E               	subwfb	(getHSVval@temp_658+2)^0,f,c
  3729   0011DA  5017               	movf	(??_getHSVval+7)^0,w,c
  3730   0011DC  5A2F               	subwfb	(getHSVval@temp_658+3)^0,f,c
  3731   0011DE                     
  3732                           ;color.c: 187:                 temp *= (unsigned long)Hz;
  3733   0011DE  C02C  F001         	movff	getHSVval@temp_658,___lmul@multiplier
  3734   0011E2  C02D  F002         	movff	getHSVval@temp_658+1,___lmul@multiplier+1
  3735   0011E6  C02E  F003         	movff	getHSVval@temp_658+2,___lmul@multiplier+2
  3736   0011EA  C02F  F004         	movff	getHSVval@temp_658+3,___lmul@multiplier+3
  3737   0011EE  0E3C               	movlw	60
  3738   0011F0  6E05               	movwf	___lmul@multiplicand^0,c
  3739   0011F2  0E00               	movlw	0
  3740   0011F4  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3741   0011F6  0E00               	movlw	0
  3742   0011F8  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3743   0011FA  0E00               	movlw	0
  3744   0011FC  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3745   0011FE  EC9C  F013         	call	___lmul	;wreg free
  3746   001202  C001  F02C         	movff	?___lmul,getHSVval@temp_658
  3747   001206  C002  F02D         	movff	?___lmul+1,getHSVval@temp_658+1
  3748   00120A  C003  F02E         	movff	?___lmul+2,getHSVval@temp_658+2
  3749   00120E  C004  F02F         	movff	?___lmul+3,getHSVval@temp_658+3
  3750   001212                     
  3751                           ;color.c: 188:                 temp /= (unsigned long)C;
  3752   001212  C02C  F001         	movff	getHSVval@temp_658,___lldiv@dividend
  3753   001216  C02D  F002         	movff	getHSVval@temp_658+1,___lldiv@dividend+1
  3754   00121A  C02E  F003         	movff	getHSVval@temp_658+2,___lldiv@dividend+2
  3755   00121E  C02F  F004         	movff	getHSVval@temp_658+3,___lldiv@dividend+3
  3756   001222  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  3757   001226  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  3758   00122A  6A07               	clrf	(___lldiv@divisor+2)^0,c
  3759   00122C  6A08               	clrf	(___lldiv@divisor+3)^0,c
  3760   00122E  EC01  F012         	call	___lldiv	;wreg free
  3761   001232  C001  F02C         	movff	?___lldiv,getHSVval@temp_658
  3762   001236  C002  F02D         	movff	?___lldiv+1,getHSVval@temp_658+1
  3763   00123A  C003  F02E         	movff	?___lldiv+2,getHSVval@temp_658+2
  3764   00123E  C004  F02F         	movff	?___lldiv+3,getHSVval@temp_658+3
  3765   001242                     
  3766                           ;color.c: 189:                 H = (unsigned int)temp;
  3767   001242  C02C  F01E         	movff	getHSVval@temp_658,getHSVval@H
  3768   001246  C02D  F01F         	movff	getHSVval@temp_658+1,getHSVval@H+1
  3769   00124A                     l3409:
  3770                           
  3771                           ;color.c: 192:         if (M == p2->B) {
  3772   00124A  500F               	movf	getHSVval@p2^0,w,c
  3773   00124C  6ED9               	movwf	fsr2l,c
  3774   00124E  6ADA               	clrf	fsr2h,c
  3775   001250  0E04               	movlw	4
  3776   001252  26D9               	addwf	fsr2l,f,c
  3777   001254  503C               	movf	getHSVval@M^0,w,c
  3778   001256  18DE               	xorwf	postinc2,w,c
  3779   001258  E107               	bnz	u2171
  3780   00125A  503D               	movf	(getHSVval@M+1)^0,w,c
  3781   00125C  18DE               	xorwf	postinc2,w,c
  3782   00125E  A4D8               	btfss	status,2,c
  3783   001260  EF34  F009         	goto	u2171
  3784   001264  EF36  F009         	goto	u2170
  3785   001268                     u2171:
  3786   001268  EF13  F00A         	goto	l3437
  3787   00126C                     u2170:
  3788   00126C                     
  3789                           ;color.c: 193:             if (p2->R >= p2->G) {
  3790   00126C  500F               	movf	getHSVval@p2^0,w,c
  3791   00126E  6ED9               	movwf	fsr2l,c
  3792   001270  6ADA               	clrf	fsr2h,c
  3793   001272  0E02               	movlw	2
  3794   001274  26D9               	addwf	fsr2l,f,c
  3795   001276  500F               	movf	getHSVval@p2^0,w,c
  3796   001278  6EE1               	movwf	fsr1l,c
  3797   00127A  6AE2               	clrf	fsr1h,c
  3798   00127C  50DE               	movf	postinc2,w,c
  3799   00127E  5CE6               	subwf	postinc1,w,c
  3800   001280  50DE               	movf	postinc2,w,c
  3801   001282  58E6               	subwfb	postinc1,w,c
  3802   001284  A0D8               	btfss	status,0,c
  3803   001286  EF47  F009         	goto	u2181
  3804   00128A  EF49  F009         	goto	u2180
  3805   00128E                     u2181:
  3806   00128E  EFAE  F009         	goto	l3425
  3807   001292                     u2180:
  3808   001292                     
  3809                           ;color.c: 195:                 unsigned long temp;;color.c: 196:                 temp = 
      +                          (unsigned long)C;
  3810   001292  C03E  F030         	movff	getHSVval@C,getHSVval@temp_659
  3811   001296  C03F  F031         	movff	getHSVval@C+1,getHSVval@temp_659+1
  3812   00129A  6A32               	clrf	(getHSVval@temp_659+2)^0,c
  3813   00129C  6A33               	clrf	(getHSVval@temp_659+3)^0,c
  3814   00129E                     
  3815                           ;color.c: 197:                 temp *= 4;
  3816   00129E  0E02               	movlw	2
  3817   0012A0                     u2195:
  3818   0012A0  90D8               	bcf	status,0,c
  3819   0012A2  3630               	rlcf	getHSVval@temp_659^0,f,c
  3820   0012A4  3631               	rlcf	(getHSVval@temp_659+1)^0,f,c
  3821   0012A6  3632               	rlcf	(getHSVval@temp_659+2)^0,f,c
  3822   0012A8  3633               	rlcf	(getHSVval@temp_659+3)^0,f,c
  3823   0012AA  2EE8               	decfsz	wreg,f,c
  3824   0012AC  EF50  F009         	goto	u2195
  3825   0012B0                     
  3826                           ;color.c: 198:                 temp += (unsigned long)(p2->R - p2->G);
  3827   0012B0  500F               	movf	getHSVval@p2^0,w,c
  3828   0012B2  6ED9               	movwf	fsr2l,c
  3829   0012B4  6ADA               	clrf	fsr2h,c
  3830   0012B6  0E02               	movlw	2
  3831   0012B8  26D9               	addwf	fsr2l,f,c
  3832   0012BA  CFDE F010          	movff	postinc2,??_getHSVval
  3833   0012BE  CFDD F011          	movff	postdec2,??_getHSVval+1
  3834   0012C2  500F               	movf	getHSVval@p2^0,w,c
  3835   0012C4  6ED9               	movwf	fsr2l,c
  3836   0012C6  6ADA               	clrf	fsr2h,c
  3837   0012C8  CFDE F012          	movff	postinc2,??_getHSVval+2
  3838   0012CC  CFDD F013          	movff	postdec2,??_getHSVval+3
  3839   0012D0  5010               	movf	??_getHSVval^0,w,c
  3840   0012D2  5C12               	subwf	(??_getHSVval+2)^0,w,c
  3841   0012D4  6E14               	movwf	(??_getHSVval+4)^0,c
  3842   0012D6  5011               	movf	(??_getHSVval+1)^0,w,c
  3843   0012D8  5813               	subwfb	(??_getHSVval+3)^0,w,c
  3844   0012DA  6E15               	movwf	(??_getHSVval+5)^0,c
  3845   0012DC  5014               	movf	(??_getHSVval+4)^0,w,c
  3846   0012DE  2630               	addwf	getHSVval@temp_659^0,f,c
  3847   0012E0  5015               	movf	(??_getHSVval+5)^0,w,c
  3848   0012E2  2231               	addwfc	(getHSVval@temp_659+1)^0,f,c
  3849   0012E4  0E00               	movlw	0
  3850   0012E6  2232               	addwfc	(getHSVval@temp_659+2)^0,f,c
  3851   0012E8  0E00               	movlw	0
  3852   0012EA  2233               	addwfc	(getHSVval@temp_659+3)^0,f,c
  3853   0012EC                     
  3854                           ;color.c: 199:                 temp *= (unsigned long)Hz;
  3855   0012EC  C030  F001         	movff	getHSVval@temp_659,___lmul@multiplier
  3856   0012F0  C031  F002         	movff	getHSVval@temp_659+1,___lmul@multiplier+1
  3857   0012F4  C032  F003         	movff	getHSVval@temp_659+2,___lmul@multiplier+2
  3858   0012F8  C033  F004         	movff	getHSVval@temp_659+3,___lmul@multiplier+3
  3859   0012FC  0E3C               	movlw	60
  3860   0012FE  6E05               	movwf	___lmul@multiplicand^0,c
  3861   001300  0E00               	movlw	0
  3862   001302  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3863   001304  0E00               	movlw	0
  3864   001306  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3865   001308  0E00               	movlw	0
  3866   00130A  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3867   00130C  EC9C  F013         	call	___lmul	;wreg free
  3868   001310  C001  F030         	movff	?___lmul,getHSVval@temp_659
  3869   001314  C002  F031         	movff	?___lmul+1,getHSVval@temp_659+1
  3870   001318  C003  F032         	movff	?___lmul+2,getHSVval@temp_659+2
  3871   00131C  C004  F033         	movff	?___lmul+3,getHSVval@temp_659+3
  3872   001320                     
  3873                           ;color.c: 200:                 temp /= (unsigned long)C;
  3874   001320  C030  F001         	movff	getHSVval@temp_659,___lldiv@dividend
  3875   001324  C031  F002         	movff	getHSVval@temp_659+1,___lldiv@dividend+1
  3876   001328  C032  F003         	movff	getHSVval@temp_659+2,___lldiv@dividend+2
  3877   00132C  C033  F004         	movff	getHSVval@temp_659+3,___lldiv@dividend+3
  3878   001330  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  3879   001334  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  3880   001338  6A07               	clrf	(___lldiv@divisor+2)^0,c
  3881   00133A  6A08               	clrf	(___lldiv@divisor+3)^0,c
  3882   00133C  EC01  F012         	call	___lldiv	;wreg free
  3883   001340  C001  F030         	movff	?___lldiv,getHSVval@temp_659
  3884   001344  C002  F031         	movff	?___lldiv+1,getHSVval@temp_659+1
  3885   001348  C003  F032         	movff	?___lldiv+2,getHSVval@temp_659+2
  3886   00134C  C004  F033         	movff	?___lldiv+3,getHSVval@temp_659+3
  3887   001350                     
  3888                           ;color.c: 201:                 H = (unsigned int)temp;
  3889   001350  C030  F01E         	movff	getHSVval@temp_659,getHSVval@H
  3890   001354  C031  F01F         	movff	getHSVval@temp_659+1,getHSVval@H+1
  3891                           
  3892                           ;color.c: 202:             } else {
  3893   001358  EF13  F00A         	goto	l3437
  3894   00135C                     l3425:
  3895                           
  3896                           ;color.c: 204:                 unsigned long temp;;color.c: 205:                 temp = 
      +                          (unsigned long)C;
  3897   00135C  C03E  F034         	movff	getHSVval@C,getHSVval@temp_660
  3898   001360  C03F  F035         	movff	getHSVval@C+1,getHSVval@temp_660+1
  3899   001364  6A36               	clrf	(getHSVval@temp_660+2)^0,c
  3900   001366  6A37               	clrf	(getHSVval@temp_660+3)^0,c
  3901   001368                     
  3902                           ;color.c: 206:                 temp *= 4;
  3903   001368  0E02               	movlw	2
  3904   00136A                     u2205:
  3905   00136A  90D8               	bcf	status,0,c
  3906   00136C  3634               	rlcf	getHSVval@temp_660^0,f,c
  3907   00136E  3635               	rlcf	(getHSVval@temp_660+1)^0,f,c
  3908   001370  3636               	rlcf	(getHSVval@temp_660+2)^0,f,c
  3909   001372  3637               	rlcf	(getHSVval@temp_660+3)^0,f,c
  3910   001374  2EE8               	decfsz	wreg,f,c
  3911   001376  EFB5  F009         	goto	u2205
  3912   00137A                     
  3913                           ;color.c: 207:                 temp -= (unsigned long)(p2->G - p2->R);
  3914   00137A  500F               	movf	getHSVval@p2^0,w,c
  3915   00137C  6ED9               	movwf	fsr2l,c
  3916   00137E  6ADA               	clrf	fsr2h,c
  3917   001380  CFDE F010          	movff	postinc2,??_getHSVval
  3918   001384  CFDD F011          	movff	postdec2,??_getHSVval+1
  3919   001388  500F               	movf	getHSVval@p2^0,w,c
  3920   00138A  6ED9               	movwf	fsr2l,c
  3921   00138C  6ADA               	clrf	fsr2h,c
  3922   00138E  0E02               	movlw	2
  3923   001390  26D9               	addwf	fsr2l,f,c
  3924   001392  CFDE F012          	movff	postinc2,??_getHSVval+2
  3925   001396  CFDD F013          	movff	postdec2,??_getHSVval+3
  3926   00139A  5010               	movf	??_getHSVval^0,w,c
  3927   00139C  5C12               	subwf	(??_getHSVval+2)^0,w,c
  3928   00139E  6E14               	movwf	(??_getHSVval+4)^0,c
  3929   0013A0  5011               	movf	(??_getHSVval+1)^0,w,c
  3930   0013A2  5813               	subwfb	(??_getHSVval+3)^0,w,c
  3931   0013A4  6E15               	movwf	(??_getHSVval+5)^0,c
  3932   0013A6  6A16               	clrf	(??_getHSVval+6)^0,c
  3933   0013A8  6A17               	clrf	(??_getHSVval+7)^0,c
  3934   0013AA  5014               	movf	(??_getHSVval+4)^0,w,c
  3935   0013AC  5E34               	subwf	getHSVval@temp_660^0,f,c
  3936   0013AE  5015               	movf	(??_getHSVval+5)^0,w,c
  3937   0013B0  5A35               	subwfb	(getHSVval@temp_660+1)^0,f,c
  3938   0013B2  5016               	movf	(??_getHSVval+6)^0,w,c
  3939   0013B4  5A36               	subwfb	(getHSVval@temp_660+2)^0,f,c
  3940   0013B6  5017               	movf	(??_getHSVval+7)^0,w,c
  3941   0013B8  5A37               	subwfb	(getHSVval@temp_660+3)^0,f,c
  3942   0013BA                     
  3943                           ;color.c: 208:                 temp *= (unsigned long)Hz;
  3944   0013BA  C034  F001         	movff	getHSVval@temp_660,___lmul@multiplier
  3945   0013BE  C035  F002         	movff	getHSVval@temp_660+1,___lmul@multiplier+1
  3946   0013C2  C036  F003         	movff	getHSVval@temp_660+2,___lmul@multiplier+2
  3947   0013C6  C037  F004         	movff	getHSVval@temp_660+3,___lmul@multiplier+3
  3948   0013CA  0E3C               	movlw	60
  3949   0013CC  6E05               	movwf	___lmul@multiplicand^0,c
  3950   0013CE  0E00               	movlw	0
  3951   0013D0  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  3952   0013D2  0E00               	movlw	0
  3953   0013D4  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  3954   0013D6  0E00               	movlw	0
  3955   0013D8  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  3956   0013DA  EC9C  F013         	call	___lmul	;wreg free
  3957   0013DE  C001  F034         	movff	?___lmul,getHSVval@temp_660
  3958   0013E2  C002  F035         	movff	?___lmul+1,getHSVval@temp_660+1
  3959   0013E6  C003  F036         	movff	?___lmul+2,getHSVval@temp_660+2
  3960   0013EA  C004  F037         	movff	?___lmul+3,getHSVval@temp_660+3
  3961   0013EE                     
  3962                           ;color.c: 209:                 temp /= (unsigned long)C;
  3963   0013EE  C034  F001         	movff	getHSVval@temp_660,___lldiv@dividend
  3964   0013F2  C035  F002         	movff	getHSVval@temp_660+1,___lldiv@dividend+1
  3965   0013F6  C036  F003         	movff	getHSVval@temp_660+2,___lldiv@dividend+2
  3966   0013FA  C037  F004         	movff	getHSVval@temp_660+3,___lldiv@dividend+3
  3967   0013FE  C03E  F005         	movff	getHSVval@C,___lldiv@divisor
  3968   001402  C03F  F006         	movff	getHSVval@C+1,___lldiv@divisor+1
  3969   001406  6A07               	clrf	(___lldiv@divisor+2)^0,c
  3970   001408  6A08               	clrf	(___lldiv@divisor+3)^0,c
  3971   00140A  EC01  F012         	call	___lldiv	;wreg free
  3972   00140E  C001  F034         	movff	?___lldiv,getHSVval@temp_660
  3973   001412  C002  F035         	movff	?___lldiv+1,getHSVval@temp_660+1
  3974   001416  C003  F036         	movff	?___lldiv+2,getHSVval@temp_660+2
  3975   00141A  C004  F037         	movff	?___lldiv+3,getHSVval@temp_660+3
  3976   00141E                     
  3977                           ;color.c: 210:                 H = (unsigned int)temp;
  3978   00141E  C034  F01E         	movff	getHSVval@temp_660,getHSVval@H
  3979   001422  C035  F01F         	movff	getHSVval@temp_660+1,getHSVval@H+1
  3980   001426                     l3437:
  3981                           
  3982                           ;color.c: 215:     if (M == 0) {
  3983   001426  503C               	movf	getHSVval@M^0,w,c
  3984   001428  103D               	iorwf	(getHSVval@M+1)^0,w,c
  3985   00142A  A4D8               	btfss	status,2,c
  3986   00142C  EF1A  F00A         	goto	u2211
  3987   001430  EF1C  F00A         	goto	u2210
  3988   001434                     u2211:
  3989   001434  EF22  F00A         	goto	l3441
  3990   001438                     u2210:
  3991   001438                     
  3992                           ;color.c: 216:         S = 0;
  3993   001438  0E00               	movlw	0
  3994   00143A  6E1D               	movwf	(getHSVval@S+1)^0,c
  3995   00143C  0E00               	movlw	0
  3996   00143E  6E1C               	movwf	getHSVval@S^0,c
  3997                           
  3998                           ;color.c: 217:     } else {
  3999   001440  EF5E  F00A         	goto	l3449
  4000   001444                     l3441:
  4001                           
  4002                           ;color.c: 219:         unsigned long temp;;color.c: 220:         temp = (unsigned long)C
      +                          ;
  4003   001444  C03E  F020         	movff	getHSVval@C,getHSVval@temp_661
  4004   001448  C03F  F021         	movff	getHSVval@C+1,getHSVval@temp_661+1
  4005   00144C  6A22               	clrf	(getHSVval@temp_661+2)^0,c
  4006   00144E  6A23               	clrf	(getHSVval@temp_661+3)^0,c
  4007   001450                     
  4008                           ;color.c: 221:         temp *= (unsigned long)Sz;
  4009   001450  C020  F001         	movff	getHSVval@temp_661,___lmul@multiplier
  4010   001454  C021  F002         	movff	getHSVval@temp_661+1,___lmul@multiplier+1
  4011   001458  C022  F003         	movff	getHSVval@temp_661+2,___lmul@multiplier+2
  4012   00145C  C023  F004         	movff	getHSVval@temp_661+3,___lmul@multiplier+3
  4013   001460  0E64               	movlw	100
  4014   001462  6E05               	movwf	___lmul@multiplicand^0,c
  4015   001464  0E00               	movlw	0
  4016   001466  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  4017   001468  0E00               	movlw	0
  4018   00146A  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  4019   00146C  0E00               	movlw	0
  4020   00146E  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  4021   001470  EC9C  F013         	call	___lmul	;wreg free
  4022   001474  C001  F020         	movff	?___lmul,getHSVval@temp_661
  4023   001478  C002  F021         	movff	?___lmul+1,getHSVval@temp_661+1
  4024   00147C  C003  F022         	movff	?___lmul+2,getHSVval@temp_661+2
  4025   001480  C004  F023         	movff	?___lmul+3,getHSVval@temp_661+3
  4026   001484                     
  4027                           ;color.c: 222:         temp /= (unsigned long)M;
  4028   001484  C020  F001         	movff	getHSVval@temp_661,___lldiv@dividend
  4029   001488  C021  F002         	movff	getHSVval@temp_661+1,___lldiv@dividend+1
  4030   00148C  C022  F003         	movff	getHSVval@temp_661+2,___lldiv@dividend+2
  4031   001490  C023  F004         	movff	getHSVval@temp_661+3,___lldiv@dividend+3
  4032   001494  C03C  F005         	movff	getHSVval@M,___lldiv@divisor
  4033   001498  C03D  F006         	movff	getHSVval@M+1,___lldiv@divisor+1
  4034   00149C  6A07               	clrf	(___lldiv@divisor+2)^0,c
  4035   00149E  6A08               	clrf	(___lldiv@divisor+3)^0,c
  4036   0014A0  EC01  F012         	call	___lldiv	;wreg free
  4037   0014A4  C001  F020         	movff	?___lldiv,getHSVval@temp_661
  4038   0014A8  C002  F021         	movff	?___lldiv+1,getHSVval@temp_661+1
  4039   0014AC  C003  F022         	movff	?___lldiv+2,getHSVval@temp_661+2
  4040   0014B0  C004  F023         	movff	?___lldiv+3,getHSVval@temp_661+3
  4041   0014B4                     
  4042                           ;color.c: 223:         S = (unsigned int)temp;
  4043   0014B4  C020  F01C         	movff	getHSVval@temp_661,getHSVval@S
  4044   0014B8  C021  F01D         	movff	getHSVval@temp_661+1,getHSVval@S+1
  4045   0014BC                     l3449:
  4046                           
  4047                           ;color.c: 226:     p1->H = H;
  4048   0014BC  500E               	movf	getHSVval@p1^0,w,c
  4049   0014BE  6ED9               	movwf	fsr2l,c
  4050   0014C0  6ADA               	clrf	fsr2h,c
  4051   0014C2  C01E  FFDE         	movff	getHSVval@H,postinc2
  4052   0014C6  C01F  FFDD         	movff	getHSVval@H+1,postdec2
  4053   0014CA                     
  4054                           ;color.c: 227:     p1->S = S;
  4055   0014CA  500E               	movf	getHSVval@p1^0,w,c
  4056   0014CC  6ED9               	movwf	fsr2l,c
  4057   0014CE  6ADA               	clrf	fsr2h,c
  4058   0014D0  0E02               	movlw	2
  4059   0014D2  26D9               	addwf	fsr2l,f,c
  4060   0014D4  C01C  FFDE         	movff	getHSVval@S,postinc2
  4061   0014D8  C01D  FFDD         	movff	getHSVval@S+1,postdec2
  4062   0014DC                     
  4063                           ;color.c: 228:     p1->V = M;
  4064   0014DC  500E               	movf	getHSVval@p1^0,w,c
  4065   0014DE  6ED9               	movwf	fsr2l,c
  4066   0014E0  6ADA               	clrf	fsr2h,c
  4067   0014E2  0E04               	movlw	4
  4068   0014E4  26D9               	addwf	fsr2l,f,c
  4069   0014E6  C03C  FFDE         	movff	getHSVval@M,postinc2
  4070   0014EA  C03D  FFDD         	movff	getHSVval@M+1,postdec2
  4071   0014EE  0012               	return		;funcret
  4072   0014F0                     __end_of_getHSVval:
  4073                           	callstack 0
  4074                           
  4075 ;; *************** function _minRGB *****************
  4076 ;; Defined at:
  4077 ;;		line 123 in file "color.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  p               1    6[COMRAM] PTR struct RGBC_val
  4080 ;;		 -> main@measured_colour(8), 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  2    6[COMRAM] unsigned int 
  4085 ;; Registers used:
  4086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4092 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4095 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4096 ;;Total ram usage:        4 bytes
  4097 ;; Hardware stack levels used: 1
  4098 ;; Hardware stack levels required when called: 2
  4099 ;; This function calls:
  4100 ;;		_min
  4101 ;; This function is called by:
  4102 ;;		_getHSVval
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text16
  4107   002A00                     __ptext16:
  4108                           	callstack 0
  4109   002A00                     _minRGB:
  4110                           	callstack 27
  4111   002A00                     
  4112                           ;color.c: 123: unsigned int minRGB(struct RGBC_val *p);color.c: 124: {;color.c: 125:    
      +                           return(min(min(p->R,p->G),p->B));
  4113   002A00  5007               	movf	minRGB@p^0,w,c
  4114   002A02  6ED9               	movwf	fsr2l,c
  4115   002A04  6ADA               	clrf	fsr2h,c
  4116   002A06  CFDE F001          	movff	postinc2,min@a
  4117   002A0A  CFDD F002          	movff	postdec2,min@a+1
  4118   002A0E  5007               	movf	minRGB@p^0,w,c
  4119   002A10  6ED9               	movwf	fsr2l,c
  4120   002A12  6ADA               	clrf	fsr2h,c
  4121   002A14  0E02               	movlw	2
  4122   002A16  26D9               	addwf	fsr2l,f,c
  4123   002A18  CFDE F003          	movff	postinc2,min@b
  4124   002A1C  CFDD F004          	movff	postdec2,min@b+1
  4125   002A20  EC98  F016         	call	_min	;wreg free
  4126   002A24  C001  F009         	movff	?_min,_minRGB$3110
  4127   002A28  C002  F00A         	movff	?_min+1,_minRGB$3110+1
  4128                           
  4129                           ;color.c: 123: unsigned int minRGB(struct RGBC_val *p);color.c: 124: {;color.c: 125:    
      +                           return(min(min(p->R,p->G),p->B));
  4130   002A2C  C009  F001         	movff	_minRGB$3110,min@a
  4131   002A30  C00A  F002         	movff	_minRGB$3110+1,min@a+1
  4132   002A34  5007               	movf	minRGB@p^0,w,c
  4133   002A36  6ED9               	movwf	fsr2l,c
  4134   002A38  6ADA               	clrf	fsr2h,c
  4135   002A3A  0E04               	movlw	4
  4136   002A3C  26D9               	addwf	fsr2l,f,c
  4137   002A3E  CFDE F003          	movff	postinc2,min@b
  4138   002A42  CFDD F004          	movff	postdec2,min@b+1
  4139   002A46  EC98  F016         	call	_min	;wreg free
  4140   002A4A  C001  F007         	movff	?_min,?_minRGB
  4141   002A4E  C002  F008         	movff	?_min+1,?_minRGB+1
  4142   002A52  0012               	return		;funcret
  4143   002A54                     __end_of_minRGB:
  4144                           	callstack 0
  4145                           
  4146 ;; *************** function _min *****************
  4147 ;; Defined at:
  4148 ;;		line 111 in file "color.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  a               2    0[COMRAM] unsigned int 
  4151 ;;  b               2    2[COMRAM] unsigned int 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;  min_val         2    4[COMRAM] unsigned int 
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  2    0[COMRAM] unsigned int 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4163 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4164 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4166 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4167 ;;Total ram usage:        6 bytes
  4168 ;; Hardware stack levels used: 1
  4169 ;; Hardware stack levels required when called: 1
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_minRGB
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           	psect	text17
  4178   002D30                     __ptext17:
  4179                           	callstack 0
  4180   002D30                     _min:
  4181                           	callstack 27
  4182   002D30                     
  4183                           ;color.c: 111: unsigned int min(unsigned int a, unsigned int b);color.c: 112: {;color.c:
      +                           113:     unsigned int min_val = b;
  4184   002D30  C003  F005         	movff	min@b,min@min_val
  4185   002D34  C004  F006         	movff	min@b+1,min@min_val+1
  4186   002D38                     
  4187                           ;color.c: 114:     if (a < b) {min_val = a;}
  4188   002D38  5003               	movf	min@b^0,w,c
  4189   002D3A  5C01               	subwf	min@a^0,w,c
  4190   002D3C  5004               	movf	(min@b+1)^0,w,c
  4191   002D3E  5802               	subwfb	(min@a+1)^0,w,c
  4192   002D40  B0D8               	btfsc	status,0,c
  4193   002D42  EFA5  F016         	goto	u1511
  4194   002D46  EFA7  F016         	goto	u1510
  4195   002D4A                     u1511:
  4196   002D4A  EFAB  F016         	goto	l129
  4197   002D4E                     u1510:
  4198   002D4E  C001  F005         	movff	min@a,min@min_val
  4199   002D52  C002  F006         	movff	min@a+1,min@min_val+1
  4200   002D56                     l129:
  4201                           
  4202                           ;color.c: 115:     return min_val;
  4203   002D56  C005  F001         	movff	min@min_val,?_min
  4204   002D5A  C006  F002         	movff	min@min_val+1,?_min+1
  4205   002D5E  0012               	return		;funcret
  4206   002D60                     __end_of_min:
  4207                           	callstack 0
  4208                           
  4209 ;; *************** function _maxRGB *****************
  4210 ;; Defined at:
  4211 ;;		line 118 in file "color.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  p               1    6[COMRAM] PTR struct RGBC_val
  4214 ;;		 -> main@measured_colour(8), 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;		None
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  2    6[COMRAM] unsigned int 
  4219 ;; Registers used:
  4220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4226 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4227 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4229 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4230 ;;Total ram usage:        4 bytes
  4231 ;; Hardware stack levels used: 1
  4232 ;; Hardware stack levels required when called: 2
  4233 ;; This function calls:
  4234 ;;		_max
  4235 ;; This function is called by:
  4236 ;;		_getHSVval
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text18
  4241   002A54                     __ptext18:
  4242                           	callstack 0
  4243   002A54                     _maxRGB:
  4244                           	callstack 27
  4245   002A54                     
  4246                           ;color.c: 118: unsigned int maxRGB(struct RGBC_val *p);color.c: 119: {;color.c: 120:    
      +                           return(max(max(p->R,p->G),p->B));
  4247   002A54  5007               	movf	maxRGB@p^0,w,c
  4248   002A56  6ED9               	movwf	fsr2l,c
  4249   002A58  6ADA               	clrf	fsr2h,c
  4250   002A5A  CFDE F001          	movff	postinc2,max@a
  4251   002A5E  CFDD F002          	movff	postdec2,max@a+1
  4252   002A62  5007               	movf	maxRGB@p^0,w,c
  4253   002A64  6ED9               	movwf	fsr2l,c
  4254   002A66  6ADA               	clrf	fsr2h,c
  4255   002A68  0E02               	movlw	2
  4256   002A6A  26D9               	addwf	fsr2l,f,c
  4257   002A6C  CFDE F003          	movff	postinc2,max@b
  4258   002A70  CFDD F004          	movff	postdec2,max@b+1
  4259   002A74  ECB0  F016         	call	_max	;wreg free
  4260   002A78  C001  F009         	movff	?_max,_maxRGB$3109
  4261   002A7C  C002  F00A         	movff	?_max+1,_maxRGB$3109+1
  4262                           
  4263                           ;color.c: 118: unsigned int maxRGB(struct RGBC_val *p);color.c: 119: {;color.c: 120:    
      +                           return(max(max(p->R,p->G),p->B));
  4264   002A80  C009  F001         	movff	_maxRGB$3109,max@a
  4265   002A84  C00A  F002         	movff	_maxRGB$3109+1,max@a+1
  4266   002A88  5007               	movf	maxRGB@p^0,w,c
  4267   002A8A  6ED9               	movwf	fsr2l,c
  4268   002A8C  6ADA               	clrf	fsr2h,c
  4269   002A8E  0E04               	movlw	4
  4270   002A90  26D9               	addwf	fsr2l,f,c
  4271   002A92  CFDE F003          	movff	postinc2,max@b
  4272   002A96  CFDD F004          	movff	postdec2,max@b+1
  4273   002A9A  ECB0  F016         	call	_max	;wreg free
  4274   002A9E  C001  F007         	movff	?_max,?_maxRGB
  4275   002AA2  C002  F008         	movff	?_max+1,?_maxRGB+1
  4276   002AA6  0012               	return		;funcret
  4277   002AA8                     __end_of_maxRGB:
  4278                           	callstack 0
  4279                           
  4280 ;; *************** function _max *****************
  4281 ;; Defined at:
  4282 ;;		line 104 in file "color.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;  a               2    0[COMRAM] unsigned int 
  4285 ;;  b               2    2[COMRAM] unsigned int 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  max_val         2    4[COMRAM] unsigned int 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  2    0[COMRAM] unsigned int 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4297 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4301 ;;Total ram usage:        6 bytes
  4302 ;; Hardware stack levels used: 1
  4303 ;; Hardware stack levels required when called: 1
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_maxRGB
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text19
  4312   002D60                     __ptext19:
  4313                           	callstack 0
  4314   002D60                     _max:
  4315                           	callstack 27
  4316   002D60                     
  4317                           ;color.c: 104: unsigned int max(unsigned int a, unsigned int b);color.c: 105: {;color.c:
      +                           106:     unsigned int max_val = b;
  4318   002D60  C003  F005         	movff	max@b,max@max_val
  4319   002D64  C004  F006         	movff	max@b+1,max@max_val+1
  4320   002D68                     
  4321                           ;color.c: 107:     if (a > b) {max_val = a;}
  4322   002D68  5001               	movf	max@a^0,w,c
  4323   002D6A  5C03               	subwf	max@b^0,w,c
  4324   002D6C  5002               	movf	(max@a+1)^0,w,c
  4325   002D6E  5804               	subwfb	(max@b+1)^0,w,c
  4326   002D70  B0D8               	btfsc	status,0,c
  4327   002D72  EFBD  F016         	goto	u1501
  4328   002D76  EFBF  F016         	goto	u1500
  4329   002D7A                     u1501:
  4330   002D7A  EFC3  F016         	goto	l125
  4331   002D7E                     u1500:
  4332   002D7E  C001  F005         	movff	max@a,max@max_val
  4333   002D82  C002  F006         	movff	max@a+1,max@max_val+1
  4334   002D86                     l125:
  4335                           
  4336                           ;color.c: 108:     return max_val;
  4337   002D86  C005  F001         	movff	max@max_val,?_max
  4338   002D8A  C006  F002         	movff	max@max_val+1,?_max+1
  4339   002D8E  0012               	return		;funcret
  4340   002D90                     __end_of_max:
  4341                           	callstack 0
  4342                           
  4343 ;; *************** function ___lmul *****************
  4344 ;; Defined at:
  4345 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  multiplier      4    0[COMRAM] unsigned long 
  4348 ;;  multiplicand    4    4[COMRAM] unsigned long 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  product         4    8[COMRAM] unsigned long 
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  4    0[COMRAM] unsigned long 
  4353 ;; Registers used:
  4354 ;;		wreg, status,2, status,0
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4360 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4361 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4363 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4364 ;;Total ram usage:       12 bytes
  4365 ;; Hardware stack levels used: 1
  4366 ;; Hardware stack levels required when called: 1
  4367 ;; This function calls:
  4368 ;;		Nothing
  4369 ;; This function is called by:
  4370 ;;		_getHSVval
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text20
  4375   002738                     __ptext20:
  4376                           	callstack 0
  4377   002738                     ___lmul:
  4378                           	callstack 28
  4379   002738  0E00               	movlw	0
  4380   00273A  6E09               	movwf	___lmul@product^0,c
  4381   00273C  0E00               	movlw	0
  4382   00273E  6E0A               	movwf	(___lmul@product+1)^0,c
  4383   002740  0E00               	movlw	0
  4384   002742  6E0B               	movwf	(___lmul@product+2)^0,c
  4385   002744  0E00               	movlw	0
  4386   002746  6E0C               	movwf	(___lmul@product+3)^0,c
  4387   002748                     l3065:
  4388   002748  A001               	btfss	___lmul@multiplier^0,0,c
  4389   00274A  EFA9  F013         	goto	u1561
  4390   00274E  EFAB  F013         	goto	u1560
  4391   002752                     u1561:
  4392   002752  EFB3  F013         	goto	l3069
  4393   002756                     u1560:
  4394   002756  5005               	movf	___lmul@multiplicand^0,w,c
  4395   002758  2609               	addwf	___lmul@product^0,f,c
  4396   00275A  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  4397   00275C  220A               	addwfc	(___lmul@product+1)^0,f,c
  4398   00275E  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  4399   002760  220B               	addwfc	(___lmul@product+2)^0,f,c
  4400   002762  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  4401   002764  220C               	addwfc	(___lmul@product+3)^0,f,c
  4402   002766                     l3069:
  4403   002766  90D8               	bcf	status,0,c
  4404   002768  3605               	rlcf	___lmul@multiplicand^0,f,c
  4405   00276A  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  4406   00276C  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  4407   00276E  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  4408   002770  90D8               	bcf	status,0,c
  4409   002772  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  4410   002774  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  4411   002776  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  4412   002778  3201               	rrcf	___lmul@multiplier^0,f,c
  4413   00277A  5001               	movf	___lmul@multiplier^0,w,c
  4414   00277C  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  4415   00277E  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  4416   002780  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  4417   002782  A4D8               	btfss	status,2,c
  4418   002784  EFC6  F013         	goto	u1571
  4419   002788  EFC8  F013         	goto	u1570
  4420   00278C                     u1571:
  4421   00278C  EFA4  F013         	goto	l3065
  4422   002790                     u1570:
  4423   002790  C009  F001         	movff	___lmul@product,?___lmul
  4424   002794  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  4425   002798  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  4426   00279C  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  4427   0027A0  0012               	return		;funcret
  4428   0027A2                     __end_of___lmul:
  4429                           	callstack 0
  4430                           
  4431 ;; *************** function ___lldiv *****************
  4432 ;; Defined at:
  4433 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  dividend        4    0[COMRAM] unsigned long 
  4436 ;;  divisor         4    4[COMRAM] unsigned long 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  quotient        4    8[COMRAM] unsigned long 
  4439 ;;  counter         1   12[COMRAM] unsigned char 
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  4    0[COMRAM] unsigned long 
  4442 ;; Registers used:
  4443 ;;		wreg, status,2, status,0
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4449 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4450 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4452 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4453 ;;Total ram usage:       13 bytes
  4454 ;; Hardware stack levels used: 1
  4455 ;; Hardware stack levels required when called: 1
  4456 ;; This function calls:
  4457 ;;		Nothing
  4458 ;; This function is called by:
  4459 ;;		_getHSVval
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text21
  4464   002402                     __ptext21:
  4465                           	callstack 0
  4466   002402                     ___lldiv:
  4467                           	callstack 28
  4468   002402  0E00               	movlw	0
  4469   002404  6E09               	movwf	___lldiv@quotient^0,c
  4470   002406  0E00               	movlw	0
  4471   002408  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  4472   00240A  0E00               	movlw	0
  4473   00240C  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  4474   00240E  0E00               	movlw	0
  4475   002410  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  4476   002412  5005               	movf	___lldiv@divisor^0,w,c
  4477   002414  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  4478   002416  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  4479   002418  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  4480   00241A  B4D8               	btfsc	status,2,c
  4481   00241C  EF12  F012         	goto	u1581
  4482   002420  EF14  F012         	goto	u1580
  4483   002424                     u1581:
  4484   002424  EF4A  F012         	goto	l784
  4485   002428                     u1580:
  4486   002428  0E01               	movlw	1
  4487   00242A  6E0D               	movwf	___lldiv@counter^0,c
  4488   00242C  EF1E  F012         	goto	l3081
  4489   002430                     l3079:
  4490   002430  90D8               	bcf	status,0,c
  4491   002432  3605               	rlcf	___lldiv@divisor^0,f,c
  4492   002434  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  4493   002436  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  4494   002438  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  4495   00243A  2A0D               	incf	___lldiv@counter^0,f,c
  4496   00243C                     l3081:
  4497   00243C  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  4498   00243E  EF23  F012         	goto	u1591
  4499   002442  EF25  F012         	goto	u1590
  4500   002446                     u1591:
  4501   002446  EF18  F012         	goto	l3079
  4502   00244A                     u1590:
  4503   00244A                     l3083:
  4504   00244A  90D8               	bcf	status,0,c
  4505   00244C  3609               	rlcf	___lldiv@quotient^0,f,c
  4506   00244E  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  4507   002450  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  4508   002452  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  4509   002454  5005               	movf	___lldiv@divisor^0,w,c
  4510   002456  5C01               	subwf	___lldiv@dividend^0,w,c
  4511   002458  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4512   00245A  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  4513   00245C  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4514   00245E  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  4515   002460  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4516   002462  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  4517   002464  A0D8               	btfss	status,0,c
  4518   002466  EF37  F012         	goto	u1601
  4519   00246A  EF39  F012         	goto	u1600
  4520   00246E                     u1601:
  4521   00246E  EF42  F012         	goto	l3091
  4522   002472                     u1600:
  4523   002472  5005               	movf	___lldiv@divisor^0,w,c
  4524   002474  5E01               	subwf	___lldiv@dividend^0,f,c
  4525   002476  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4526   002478  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  4527   00247A  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4528   00247C  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  4529   00247E  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4530   002480  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  4531   002482  8009               	bsf	___lldiv@quotient^0,0,c
  4532   002484                     l3091:
  4533   002484  90D8               	bcf	status,0,c
  4534   002486  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  4535   002488  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  4536   00248A  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  4537   00248C  3205               	rrcf	___lldiv@divisor^0,f,c
  4538   00248E  2E0D               	decfsz	___lldiv@counter^0,f,c
  4539   002490  EF25  F012         	goto	l3083
  4540   002494                     l784:
  4541   002494  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4542   002498  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4543   00249C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4544   0024A0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4545   0024A4  0012               	return		;funcret
  4546   0024A6                     __end_of___lldiv:
  4547                           	callstack 0
  4548                           
  4549 ;; *************** function _color_click_init *****************
  4550 ;; Defined at:
  4551 ;;		line 4 in file "color.c"
  4552 ;; Parameters:    Size  Location     Type
  4553 ;;		None
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;		None
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  1    wreg      void 
  4558 ;; Registers used:
  4559 ;;		wreg, status,2, status,0, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4567 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4568 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4569 ;;Total ram usage:        1 bytes
  4570 ;; Hardware stack levels used: 1
  4571 ;; Hardware stack levels required when called: 4
  4572 ;; This function calls:
  4573 ;;		_I2C_2_Master_Init
  4574 ;;		_color_writetoaddr
  4575 ;; This function is called by:
  4576 ;;		_main
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text22
  4581   002C66                     __ptext22:
  4582                           	callstack 0
  4583   002C66                     _color_click_init:
  4584                           	callstack 26
  4585   002C66                     
  4586                           ;color.c: 7:     I2C_2_Master_Init();
  4587   002C66  EC3F  F017         	call	_I2C_2_Master_Init	;wreg free
  4588   002C6A                     
  4589                           ;color.c: 10:   color_writetoaddr(0x00, 0x01);
  4590   002C6A  0E01               	movlw	1
  4591   002C6C  6E03               	movwf	color_writetoaddr@value^0,c
  4592   002C6E  0E00               	movlw	0
  4593   002C70  ECA0  F017         	call	_color_writetoaddr
  4594   002C74                     
  4595                           ;color.c: 11:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4596   002C74  0E3F               	movlw	63
  4597   002C76  6E05               	movwf	??_color_click_init^0,c
  4598   002C78  0E55               	movlw	85
  4599   002C7A                     u2397:
  4600   002C7A  2EE8               	decfsz	wreg,f,c
  4601   002C7C  D7FE               	bra	u2397
  4602   002C7E  2E05               	decfsz	??_color_click_init^0,f,c
  4603   002C80  D7FC               	bra	u2397
  4604   002C82  0000               	nop	
  4605   002C84                     
  4606                           ;color.c: 14:  color_writetoaddr(0x00, 0x03);
  4607   002C84  0E03               	movlw	3
  4608   002C86  6E03               	movwf	color_writetoaddr@value^0,c
  4609   002C88  0E00               	movlw	0
  4610   002C8A  ECA0  F017         	call	_color_writetoaddr
  4611   002C8E                     
  4612                           ;color.c: 17:  color_writetoaddr(0x01, 0xD5);
  4613   002C8E  0ED5               	movlw	213
  4614   002C90  6E03               	movwf	color_writetoaddr@value^0,c
  4615   002C92  0E01               	movlw	1
  4616   002C94  ECA0  F017         	call	_color_writetoaddr
  4617   002C98  0012               	return		;funcret
  4618   002C9A                     __end_of_color_click_init:
  4619                           	callstack 0
  4620                           
  4621 ;; *************** function _color_writetoaddr *****************
  4622 ;; Defined at:
  4623 ;;		line 20 in file "color.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;  address         1    wreg     unsigned char 
  4626 ;;  value           1    2[COMRAM] unsigned char 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  address         1    3[COMRAM] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      void 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4638 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4641 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4642 ;;Total ram usage:        2 bytes
  4643 ;; Hardware stack levels used: 1
  4644 ;; Hardware stack levels required when called: 3
  4645 ;; This function calls:
  4646 ;;		_I2C_2_Master_Start
  4647 ;;		_I2C_2_Master_Stop
  4648 ;;		_I2C_2_Master_Write
  4649 ;; This function is called by:
  4650 ;;		_color_click_init
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text23
  4655   002F40                     __ptext23:
  4656                           	callstack 0
  4657   002F40                     _color_writetoaddr:
  4658                           	callstack 26
  4659                           
  4660                           ;incstack = 0
  4661                           ;color_writetoaddr@address stored from wreg
  4662   002F40  6E04               	movwf	color_writetoaddr@address^0,c
  4663   002F42                     
  4664                           ;color.c: 21:     I2C_2_Master_Start();
  4665   002F42  ECE8  F017         	call	_I2C_2_Master_Start	;wreg free
  4666                           
  4667                           ;color.c: 22:     I2C_2_Master_Write(0x52 | 0x00);
  4668   002F46  0E52               	movlw	82
  4669   002F48  ECCC  F017         	call	_I2C_2_Master_Write
  4670                           
  4671                           ;color.c: 23:     I2C_2_Master_Write(0x80 | address);
  4672   002F4C  5004               	movf	color_writetoaddr@address^0,w,c
  4673   002F4E  0980               	iorlw	128
  4674   002F50  ECCC  F017         	call	_I2C_2_Master_Write
  4675                           
  4676                           ;color.c: 24:     I2C_2_Master_Write(value);
  4677   002F54  5003               	movf	color_writetoaddr@value^0,w,c
  4678   002F56  ECCC  F017         	call	_I2C_2_Master_Write
  4679                           
  4680                           ;color.c: 25:     I2C_2_Master_Stop();
  4681   002F5A  ECE3  F017         	call	_I2C_2_Master_Stop	;wreg free
  4682   002F5E  0012               	return		;funcret
  4683   002F60                     __end_of_color_writetoaddr:
  4684                           	callstack 0
  4685                           
  4686 ;; *************** function _I2C_2_Master_Write *****************
  4687 ;; Defined at:
  4688 ;;		line 45 in file "i2c.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  data_byte       1    wreg     unsigned char 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  data_byte       1    1[COMRAM] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg, status,2, status,0, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4706 ;;Total ram usage:        1 bytes
  4707 ;; Hardware stack levels used: 1
  4708 ;; Hardware stack levels required when called: 2
  4709 ;; This function calls:
  4710 ;;		_I2C_2_Master_Idle
  4711 ;; This function is called by:
  4712 ;;		_color_writetoaddr
  4713 ;;		_color_read_Red
  4714 ;;		_color_read_Green
  4715 ;;		_color_read_Blue
  4716 ;;		_color_read_Clear
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text24
  4721   002F98                     __ptext24:
  4722                           	callstack 0
  4723   002F98                     _I2C_2_Master_Write:
  4724                           	callstack 26
  4725                           
  4726                           ;incstack = 0
  4727                           ;I2C_2_Master_Write@data_byte stored from wreg
  4728   002F98  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  4729   002F9A                     
  4730                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4731   002F9A  EC54  F017         	call	_I2C_2_Master_Idle	;wreg free
  4732   002F9E                     
  4733                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4734   002F9E  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4735   002FA2  0012               	return		;funcret
  4736   002FA4                     __end_of_I2C_2_Master_Write:
  4737                           	callstack 0
  4738                           
  4739 ;; *************** function _I2C_2_Master_Stop *****************
  4740 ;; Defined at:
  4741 ;;		line 39 in file "i2c.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;		None
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      void 
  4748 ;; Registers used:
  4749 ;;		wreg, status,2, status,0, cstack
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4759 ;;Total ram usage:        0 bytes
  4760 ;; Hardware stack levels used: 1
  4761 ;; Hardware stack levels required when called: 2
  4762 ;; This function calls:
  4763 ;;		_I2C_2_Master_Idle
  4764 ;; This function is called by:
  4765 ;;		_color_writetoaddr
  4766 ;;		_color_read_Red
  4767 ;;		_color_read_Green
  4768 ;;		_color_read_Blue
  4769 ;;		_color_read_Clear
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text25
  4774   002FC6                     __ptext25:
  4775                           	callstack 0
  4776   002FC6                     _I2C_2_Master_Stop:
  4777                           	callstack 26
  4778   002FC6                     
  4779                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4780   002FC6  EC54  F017         	call	_I2C_2_Master_Idle	;wreg free
  4781   002FCA                     
  4782                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4783   002FCA  010E               	movlb	14	; () banked
  4784   002FCC  85DA               	bsf	218,2,b	;volatile
  4785   002FCE                     
  4786                           ; BSR set to: 14
  4787   002FCE  0012               	return		;funcret
  4788   002FD0                     __end_of_I2C_2_Master_Stop:
  4789                           	callstack 0
  4790                           
  4791 ;; *************** function _I2C_2_Master_Start *****************
  4792 ;; Defined at:
  4793 ;;		line 27 in file "i2c.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4811 ;;Total ram usage:        0 bytes
  4812 ;; Hardware stack levels used: 1
  4813 ;; Hardware stack levels required when called: 2
  4814 ;; This function calls:
  4815 ;;		_I2C_2_Master_Idle
  4816 ;; This function is called by:
  4817 ;;		_color_writetoaddr
  4818 ;;		_color_read_Red
  4819 ;;		_color_read_Green
  4820 ;;		_color_read_Blue
  4821 ;;		_color_read_Clear
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	text26
  4826   002FD0                     __ptext26:
  4827                           	callstack 0
  4828   002FD0                     _I2C_2_Master_Start:
  4829                           	callstack 26
  4830   002FD0                     
  4831                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4832   002FD0  EC54  F017         	call	_I2C_2_Master_Idle	;wreg free
  4833   002FD4                     
  4834                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4835   002FD4  010E               	movlb	14	; () banked
  4836   002FD6  81DA               	bsf	218,0,b	;volatile
  4837   002FD8                     
  4838                           ; BSR set to: 14
  4839   002FD8  0012               	return		;funcret
  4840   002FDA                     __end_of_I2C_2_Master_Start:
  4841                           	callstack 0
  4842                           
  4843 ;; *************** function _I2C_2_Master_Idle *****************
  4844 ;; Defined at:
  4845 ;;		line 22 in file "i2c.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;		None
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;		None
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4863 ;;Total ram usage:        1 bytes
  4864 ;; Hardware stack levels used: 1
  4865 ;; Hardware stack levels required when called: 1
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_I2C_2_Master_Start
  4870 ;;		_I2C_2_Master_RepStart
  4871 ;;		_I2C_2_Master_Stop
  4872 ;;		_I2C_2_Master_Write
  4873 ;;		_I2C_2_Master_Read
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text27
  4878   002EA8                     __ptext27:
  4879                           	callstack 0
  4880   002EA8                     _I2C_2_Master_Idle:
  4881                           	callstack 26
  4882   002EA8                     l330:
  4883   002EA8  010E               	movlb	14	; () banked
  4884   002EAA  B5D8               	btfsc	216,2,b	;volatile
  4885   002EAC  EF5A  F017         	goto	u1461
  4886   002EB0  EF5C  F017         	goto	u1460
  4887   002EB4                     u1461:
  4888   002EB4  EF54  F017         	goto	l330
  4889   002EB8                     u1460:
  4890   002EB8                     
  4891                           ; BSR set to: 14
  4892   002EB8  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4893   002EBC  0E1F               	movlw	31
  4894   002EBE  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4895   002EC0  A4D8               	btfss	status,2,c
  4896   002EC2  EF65  F017         	goto	u1471
  4897   002EC6  EF67  F017         	goto	u1470
  4898   002ECA                     u1471:
  4899   002ECA  EF54  F017         	goto	l330
  4900   002ECE                     u1470:
  4901   002ECE                     
  4902                           ; BSR set to: 14
  4903   002ECE  0012               	return		;funcret
  4904   002ED0                     __end_of_I2C_2_Master_Idle:
  4905                           	callstack 0
  4906                           
  4907 ;; *************** function _I2C_2_Master_Init *****************
  4908 ;; Defined at:
  4909 ;;		line 4 in file "i2c.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;		None
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      void 
  4916 ;; Registers used:
  4917 ;;		wreg, status,2
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4927 ;;Total ram usage:        0 bytes
  4928 ;; Hardware stack levels used: 1
  4929 ;; Hardware stack levels required when called: 1
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		_color_click_init
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	text28
  4938   002E7E                     __ptext28:
  4939                           	callstack 0
  4940   002E7E                     _I2C_2_Master_Init:
  4941                           	callstack 28
  4942   002E7E                     
  4943                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4944   002E7E  010E               	movlb	14	; () banked
  4945   002E80  51D9               	movf	217,w,b	;volatile
  4946   002E82  0BF0               	andlw	-16
  4947   002E84  0908               	iorlw	8
  4948   002E86  6FD9               	movwf	217,b	;volatile
  4949   002E88                     
  4950                           ; BSR set to: 14
  4951                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4952   002E88  8BD9               	bsf	217,5,b	;volatile
  4953                           
  4954                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4955   002E8A  0E9F               	movlw	159
  4956   002E8C  6FD6               	movwf	214,b	;volatile
  4957   002E8E                     
  4958                           ; BSR set to: 14
  4959                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4960   002E8E  8A84               	bsf	132,5,c	;volatile
  4961   002E90                     
  4962                           ; BSR set to: 14
  4963                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4964   002E90  8C84               	bsf	132,6,c	;volatile
  4965   002E92                     
  4966                           ; BSR set to: 14
  4967                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4968   002E92  9BA7               	bcf	167,5,b	;volatile
  4969   002E94                     
  4970                           ; BSR set to: 14
  4971                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4972   002E94  9DA7               	bcf	167,6,b	;volatile
  4973                           
  4974                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4975   002E96  0E1D               	movlw	29
  4976   002E98  6F1D               	movwf	29,b	;volatile
  4977                           
  4978                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4979   002E9A  0E1E               	movlw	30
  4980   002E9C  6F1C               	movwf	28,b	;volatile
  4981                           
  4982                           ;i2c.c: 18:   RD5PPS=0x1C;
  4983   002E9E  0E1C               	movlw	28
  4984   002EA0  6F6F               	movwf	111,b	;volatile
  4985                           
  4986                           ;i2c.c: 19:   RD6PPS=0x1B;
  4987   002EA2  0E1B               	movlw	27
  4988   002EA4  6F70               	movwf	112,b	;volatile
  4989   002EA6                     
  4990                           ; BSR set to: 14
  4991   002EA6  0012               	return		;funcret
  4992   002EA8                     __end_of_I2C_2_Master_Init:
  4993                           	callstack 0
  4994                           
  4995 ;; *************** function _buggy_lights_init *****************
  4996 ;; Defined at:
  4997 ;;		line 4 in file "buggy_lights.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		None
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5015 ;;Total ram usage:        0 bytes
  5016 ;; Hardware stack levels used: 1
  5017 ;; Hardware stack levels required when called: 1
  5018 ;; This function calls:
  5019 ;;		Nothing
  5020 ;; This function is called by:
  5021 ;;		_main
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           	psect	text29
  5026   002E50                     __ptext29:
  5027                           	callstack 0
  5028   002E50                     _buggy_lights_init:
  5029                           	callstack 29
  5030   002E50                     
  5031                           ;buggy_lights.c: 8:         TRISDbits.TRISD4 = 0;
  5032   002E50  9884               	bcf	132,4,c	;volatile
  5033                           
  5034                           ;buggy_lights.c: 9:         TRISHbits.TRISH1 = 0;
  5035   002E52  9288               	bcf	136,1,c	;volatile
  5036                           
  5037                           ;buggy_lights.c: 10:         TRISDbits.TRISD3 = 0;
  5038   002E54  9684               	bcf	132,3,c	;volatile
  5039                           
  5040                           ;buggy_lights.c: 11:         TRISFbits.TRISF0 = 0;
  5041   002E56  9086               	bcf	134,0,c	;volatile
  5042                           
  5043                           ;buggy_lights.c: 12:         TRISHbits.TRISH0 = 0;
  5044   002E58  9088               	bcf	136,0,c	;volatile
  5045                           
  5046                           ;buggy_lights.c: 14:         LATDbits.LATD4 = 0;
  5047   002E5A  987C               	bcf	124,4,c	;volatile
  5048                           
  5049                           ;buggy_lights.c: 15:         LATHbits.LATH1 = 0;
  5050   002E5C  9280               	bcf	128,1,c	;volatile
  5051                           
  5052                           ;buggy_lights.c: 16:         LATDbits.LATD3 = 0;
  5053   002E5E  967C               	bcf	124,3,c	;volatile
  5054                           
  5055                           ;buggy_lights.c: 17:         LATFbits.LATF0 = 0;
  5056   002E60  907E               	bcf	126,0,c	;volatile
  5057                           
  5058                           ;buggy_lights.c: 18:         LATHbits.LATH0 = 0;
  5059   002E62  9080               	bcf	128,0,c	;volatile
  5060                           
  5061                           ;buggy_lights.c: 24:             TRISGbits.TRISG1 = 0;
  5062   002E64  9287               	bcf	135,1,c	;volatile
  5063                           
  5064                           ;buggy_lights.c: 25:             TRISAbits.TRISA4 = 0;
  5065   002E66  9881               	bcf	129,4,c	;volatile
  5066                           
  5067                           ;buggy_lights.c: 26:             TRISFbits.TRISF7 = 0;
  5068   002E68  9E86               	bcf	134,7,c	;volatile
  5069                           
  5070                           ;buggy_lights.c: 28:             LATGbits.LATG1 = 0;
  5071   002E6A  927F               	bcf	127,1,c	;volatile
  5072                           
  5073                           ;buggy_lights.c: 29:             LATAbits.LATA4 = 0;
  5074   002E6C  9879               	bcf	121,4,c	;volatile
  5075                           
  5076                           ;buggy_lights.c: 30:             LATFbits.LATF7 = 0;
  5077   002E6E  9E7E               	bcf	126,7,c	;volatile
  5078                           
  5079                           ;buggy_lights.c: 34:             TRISGbits.TRISG0 = 0;
  5080   002E70  9087               	bcf	135,0,c	;volatile
  5081                           
  5082                           ;buggy_lights.c: 35:             TRISEbits.TRISE7 = 0;
  5083   002E72  9E85               	bcf	133,7,c	;volatile
  5084                           
  5085                           ;buggy_lights.c: 36:             TRISAbits.TRISA3 = 0;
  5086   002E74  9681               	bcf	129,3,c	;volatile
  5087                           
  5088                           ;buggy_lights.c: 38:             LATGbits.LATG0 = 0;
  5089   002E76  907F               	bcf	127,0,c	;volatile
  5090                           
  5091                           ;buggy_lights.c: 39:             LATEbits.LATE7 = 0;
  5092   002E78  9E7D               	bcf	125,7,c	;volatile
  5093                           
  5094                           ;buggy_lights.c: 40:             LATAbits.LATA3 = 0;
  5095   002E7A  9679               	bcf	121,3,c	;volatile
  5096   002E7C  0012               	return		;funcret
  5097   002E7E                     __end_of_buggy_lights_init:
  5098                           	callstack 0
  5099                           
  5100 ;; *************** function _Timer0_init *****************
  5101 ;; Defined at:
  5102 ;;		line 7 in file "timers.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      void 
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used: 1
  5122 ;; Hardware stack levels required when called: 3
  5123 ;; This function calls:
  5124 ;;		_reset_timer
  5125 ;; This function is called by:
  5126 ;;		_main
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           	psect	text30
  5131   002F1C                     __ptext30:
  5132                           	callstack 0
  5133   002F1C                     _Timer0_init:
  5134                           	callstack 27
  5135   002F1C                     
  5136                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  5137   002F1C  50D6               	movf	214,w,c	;volatile
  5138   002F1E  0B1F               	andlw	-225
  5139   002F20  0940               	iorlw	64
  5140   002F22  6ED6               	movwf	214,c	;volatile
  5141   002F24                     
  5142                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  5143   002F24  88D6               	bsf	214,4,c	;volatile
  5144   002F26                     
  5145                           ;timers.c: 11:     T0CON0bits.T016BIT=1;
  5146   002F26  88D5               	bsf	213,4,c	;volatile
  5147                           
  5148                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1110;
  5149   002F28  50D6               	movf	214,w,c	;volatile
  5150   002F2A  0BF0               	andlw	-16
  5151   002F2C  090E               	iorlw	14
  5152   002F2E  6ED6               	movwf	214,c	;volatile
  5153   002F30                     
  5154                           ;timers.c: 18:     reset_timer();
  5155   002F30  ECD2  F017         	call	_reset_timer	;wreg free
  5156   002F34                     
  5157                           ;timers.c: 19:     T0CON0bits.T0EN=1;
  5158   002F34  8ED5               	bsf	213,7,c	;volatile
  5159   002F36                     
  5160                           ;timers.c: 21:     PIE0bits.TMR0IE = 1;
  5161   002F36  010E               	movlb	14	; () banked
  5162   002F38  8B29               	bsf	41,5,b	;volatile
  5163   002F3A                     
  5164                           ; BSR set to: 14
  5165                           ;timers.c: 22:     INTCONbits.PEIE = 1;
  5166   002F3A  8CF2               	bsf	242,6,c	;volatile
  5167   002F3C                     
  5168                           ; BSR set to: 14
  5169                           ;timers.c: 23:     INTCONbits.GIE = 1;
  5170   002F3C  8EF2               	bsf	242,7,c	;volatile
  5171   002F3E                     
  5172                           ; BSR set to: 14
  5173   002F3E  0012               	return		;funcret
  5174   002F40                     __end_of_Timer0_init:
  5175                           	callstack 0
  5176                           
  5177 ;; *************** function _reset_timer *****************
  5178 ;; Defined at:
  5179 ;;		line 44 in file "timers.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, cstack
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5197 ;;Total ram usage:        0 bytes
  5198 ;; Hardware stack levels used: 1
  5199 ;; Hardware stack levels required when called: 2
  5200 ;; This function calls:
  5201 ;;		_write_timer
  5202 ;; This function is called by:
  5203 ;;		_Timer0_init
  5204 ;;		_forward_navigation
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text31
  5209   002FA4                     __ptext31:
  5210                           	callstack 0
  5211   002FA4                     _reset_timer:
  5212                           	callstack 27
  5213   002FA4                     
  5214                           ;timers.c: 46:     write_timer(0, 0);
  5215   002FA4  0E00               	movlw	0
  5216   002FA6  6E01               	movwf	write_timer@tL^0,c
  5217   002FA8  0E00               	movlw	0
  5218   002FAA  ECD8  F017         	call	_write_timer
  5219   002FAE  0012               	return		;funcret
  5220   002FB0                     __end_of_reset_timer:
  5221                           	callstack 0
  5222                           
  5223 ;; *************** function _write_timer *****************
  5224 ;; Defined at:
  5225 ;;		line 35 in file "timers.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  tH              1    wreg     unsigned char 
  5228 ;;  tL              1    0[COMRAM] unsigned char 
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  tH              1    1[COMRAM] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		wreg
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5240 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5243 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5244 ;;Total ram usage:        2 bytes
  5245 ;; Hardware stack levels used: 1
  5246 ;; Hardware stack levels required when called: 1
  5247 ;; This function calls:
  5248 ;;		Nothing
  5249 ;; This function is called by:
  5250 ;;		_reset_timer
  5251 ;;		_return_to_sender
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text32
  5256   002FB0                     __ptext32:
  5257                           	callstack 0
  5258   002FB0                     _write_timer:
  5259                           	callstack 27
  5260                           
  5261                           ;incstack = 0
  5262                           ;write_timer@tH stored from wreg
  5263   002FB0  6E02               	movwf	write_timer@tH^0,c
  5264   002FB2                     
  5265                           ;timers.c: 35: void write_timer(unsigned char tH, unsigned char tL);timers.c: 36: {;time
      +                          rs.c: 40:     TMR0H = tH;
  5266   002FB2  C002  FFD4         	movff	write_timer@tH,4052	;volatile
  5267   002FB6                     
  5268                           ;timers.c: 41:     TMR0L = tL;
  5269   002FB6  C001  FFD3         	movff	write_timer@tL,4051	;volatile
  5270   002FBA  0012               	return		;funcret
  5271   002FBC                     __end_of_write_timer:
  5272                           	callstack 0
  5273                           
  5274 ;; *************** function _RGBC2colourcard *****************
  5275 ;; Defined at:
  5276 ;;		line 239 in file "color.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;  p               1   38[COMRAM] PTR struct RGBC_val
  5279 ;;		 -> main@measured_colour(8), 
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  motorR          9   50[COMRAM] struct DC_motor
  5282 ;;  motorL          9   41[COMRAM] struct DC_motor
  5283 ;;  PWMcycle        2    0        unsigned int 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  1    wreg      void 
  5286 ;; Registers used:
  5287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5293 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5294 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5295 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5296 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5297 ;;Total ram usage:       21 bytes
  5298 ;; Hardware stack levels used: 1
  5299 ;; Hardware stack levels required when called: 7
  5300 ;; This function calls:
  5301 ;;		_pick_card
  5302 ;; This function is called by:
  5303 ;;		_main
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text33
  5308   001C22                     __ptext33:
  5309                           	callstack 0
  5310   001C22                     _RGBC2colourcard:
  5311                           	callstack 23
  5312   001C22                     
  5313                           ;color.c: 242:     struct DC_motor motorL, motorR;;color.c: 243:         motorL.power = 
      +                          0;
  5314   001C22  0E00               	movlw	0
  5315   001C24  6E2A               	movwf	RGBC2colourcard@motorL^0,c
  5316                           
  5317                           ;color.c: 244:         motorL.direction = 1;
  5318   001C26  0E01               	movlw	1
  5319   001C28  6E2B               	movwf	(RGBC2colourcard@motorL+1)^0,c
  5320                           
  5321                           ;color.c: 245:         motorL.brakemode = 1;
  5322   001C2A  0E01               	movlw	1
  5323   001C2C  6E2C               	movwf	(RGBC2colourcard@motorL+2)^0,c
  5324   001C2E                     
  5325                           ;color.c: 246:         motorL.PWMperiod = PWMcycle;
  5326   001C2E  0E00               	movlw	0
  5327   001C30  6E2E               	movwf	(RGBC2colourcard@motorL+4)^0,c
  5328   001C32  0E63               	movlw	99
  5329   001C34  6E2D               	movwf	(RGBC2colourcard@motorL+3)^0,c
  5330   001C36                     
  5331                           ;color.c: 247:         motorL.posDutyHighByte = (unsigned char *)(&CCPR1H);
  5332   001C36  0EAA               	movlw	170
  5333   001C38  6E2F               	movwf	(RGBC2colourcard@motorL+5)^0,c
  5334   001C3A  0E0F               	movlw	15
  5335   001C3C  6E30               	movwf	(RGBC2colourcard@motorL+6)^0,c
  5336   001C3E                     
  5337                           ;color.c: 248:         motorL.negDutyHighByte = (unsigned char *)(&CCPR2H);
  5338   001C3E  0EA6               	movlw	166
  5339   001C40  6E31               	movwf	(RGBC2colourcard@motorL+7)^0,c
  5340   001C42  0E0F               	movlw	15
  5341   001C44  6E32               	movwf	(RGBC2colourcard@motorL+8)^0,c
  5342                           
  5343                           ;color.c: 249:         motorR.power = 0;
  5344   001C46  0E00               	movlw	0
  5345   001C48  6E33               	movwf	RGBC2colourcard@motorR^0,c
  5346                           
  5347                           ;color.c: 250:         motorR.direction = 1;
  5348   001C4A  0E01               	movlw	1
  5349   001C4C  6E34               	movwf	(RGBC2colourcard@motorR+1)^0,c
  5350                           
  5351                           ;color.c: 251:         motorR.brakemode = 1;
  5352   001C4E  0E01               	movlw	1
  5353   001C50  6E35               	movwf	(RGBC2colourcard@motorR+2)^0,c
  5354   001C52                     
  5355                           ;color.c: 252:         motorR.PWMperiod = PWMcycle;
  5356   001C52  0E00               	movlw	0
  5357   001C54  6E37               	movwf	(RGBC2colourcard@motorR+4)^0,c
  5358   001C56  0E63               	movlw	99
  5359   001C58  6E36               	movwf	(RGBC2colourcard@motorR+3)^0,c
  5360   001C5A                     
  5361                           ;color.c: 253:         motorR.posDutyHighByte = (unsigned char *)(&CCPR3H);
  5362   001C5A  0E25               	movlw	37
  5363   001C5C  6E38               	movwf	(RGBC2colourcard@motorR+5)^0,c
  5364   001C5E  0E0F               	movlw	15
  5365   001C60  6E39               	movwf	(RGBC2colourcard@motorR+6)^0,c
  5366   001C62                     
  5367                           ;color.c: 254:         motorR.negDutyHighByte = (unsigned char *)(&CCPR4H);
  5368   001C62  0E21               	movlw	33
  5369   001C64  6E3A               	movwf	(RGBC2colourcard@motorR+7)^0,c
  5370   001C66  0E0F               	movlw	15
  5371   001C68  6E3B               	movwf	(RGBC2colourcard@motorR+8)^0,c
  5372   001C6A                     
  5373                           ;color.c: 257:     if (((p->R >= 2850)&&(p->R <= 3855)) && ((p->G >= 602)&&(p->G <= 814)
      +                          ) && ((p->B >= 1144)&&(p->B <= 1548))) {
  5374   001C6A  5027               	movf	RGBC2colourcard@p^0,w,c
  5375   001C6C  6ED9               	movwf	fsr2l,c
  5376   001C6E  6ADA               	clrf	fsr2h,c
  5377   001C70  0E22               	movlw	34
  5378   001C72  5CDE               	subwf	postinc2,w,c
  5379   001C74  0E0B               	movlw	11
  5380   001C76  58DE               	subwfb	postinc2,w,c
  5381   001C78  A0D8               	btfss	status,0,c
  5382   001C7A  EF41  F00E         	goto	u2221
  5383   001C7E  EF43  F00E         	goto	u2220
  5384   001C82                     u2221:
  5385   001C82  EF9B  F00E         	goto	l159
  5386   001C86                     u2220:
  5387   001C86  5027               	movf	RGBC2colourcard@p^0,w,c
  5388   001C88  6ED9               	movwf	fsr2l,c
  5389   001C8A  6ADA               	clrf	fsr2h,c
  5390   001C8C  0E10               	movlw	16
  5391   001C8E  5CDE               	subwf	postinc2,w,c
  5392   001C90  0E0F               	movlw	15
  5393   001C92  58DE               	subwfb	postinc2,w,c
  5394   001C94  B0D8               	btfsc	status,0,c
  5395   001C96  EF4F  F00E         	goto	u2231
  5396   001C9A  EF51  F00E         	goto	u2230
  5397   001C9E                     u2231:
  5398   001C9E  EF9B  F00E         	goto	l159
  5399   001CA2                     u2230:
  5400   001CA2  5027               	movf	RGBC2colourcard@p^0,w,c
  5401   001CA4  6ED9               	movwf	fsr2l,c
  5402   001CA6  6ADA               	clrf	fsr2h,c
  5403   001CA8  0E02               	movlw	2
  5404   001CAA  26D9               	addwf	fsr2l,f,c
  5405   001CAC  0E5A               	movlw	90
  5406   001CAE  5CDE               	subwf	postinc2,w,c
  5407   001CB0  0E02               	movlw	2
  5408   001CB2  58DE               	subwfb	postinc2,w,c
  5409   001CB4  A0D8               	btfss	status,0,c
  5410   001CB6  EF5F  F00E         	goto	u2241
  5411   001CBA  EF61  F00E         	goto	u2240
  5412   001CBE                     u2241:
  5413   001CBE  EF9B  F00E         	goto	l159
  5414   001CC2                     u2240:
  5415   001CC2  5027               	movf	RGBC2colourcard@p^0,w,c
  5416   001CC4  6ED9               	movwf	fsr2l,c
  5417   001CC6  6ADA               	clrf	fsr2h,c
  5418   001CC8  0E02               	movlw	2
  5419   001CCA  26D9               	addwf	fsr2l,f,c
  5420   001CCC  0E2F               	movlw	47
  5421   001CCE  5CDE               	subwf	postinc2,w,c
  5422   001CD0  0E03               	movlw	3
  5423   001CD2  58DE               	subwfb	postinc2,w,c
  5424   001CD4  B0D8               	btfsc	status,0,c
  5425   001CD6  EF6F  F00E         	goto	u2251
  5426   001CDA  EF71  F00E         	goto	u2250
  5427   001CDE                     u2251:
  5428   001CDE  EF9B  F00E         	goto	l159
  5429   001CE2                     u2250:
  5430   001CE2  5027               	movf	RGBC2colourcard@p^0,w,c
  5431   001CE4  6ED9               	movwf	fsr2l,c
  5432   001CE6  6ADA               	clrf	fsr2h,c
  5433   001CE8  0E04               	movlw	4
  5434   001CEA  26D9               	addwf	fsr2l,f,c
  5435   001CEC  0E78               	movlw	120
  5436   001CEE  5CDE               	subwf	postinc2,w,c
  5437   001CF0  0E04               	movlw	4
  5438   001CF2  58DE               	subwfb	postinc2,w,c
  5439   001CF4  A0D8               	btfss	status,0,c
  5440   001CF6  EF7F  F00E         	goto	u2261
  5441   001CFA  EF81  F00E         	goto	u2260
  5442   001CFE                     u2261:
  5443   001CFE  EF9B  F00E         	goto	l159
  5444   001D02                     u2260:
  5445   001D02  5027               	movf	RGBC2colourcard@p^0,w,c
  5446   001D04  6ED9               	movwf	fsr2l,c
  5447   001D06  6ADA               	clrf	fsr2h,c
  5448   001D08  0E04               	movlw	4
  5449   001D0A  26D9               	addwf	fsr2l,f,c
  5450   001D0C  0E0D               	movlw	13
  5451   001D0E  5CDE               	subwf	postinc2,w,c
  5452   001D10  0E06               	movlw	6
  5453   001D12  58DE               	subwfb	postinc2,w,c
  5454   001D14  B0D8               	btfsc	status,0,c
  5455   001D16  EF8F  F00E         	goto	u2271
  5456   001D1A  EF91  F00E         	goto	u2270
  5457   001D1E                     u2271:
  5458   001D1E  EF9B  F00E         	goto	l159
  5459   001D22                     u2270:
  5460   001D22                     
  5461                           ;color.c: 261:         pick_card(&motorL, &motorR, 0, 1);
  5462   001D22  0E2A               	movlw	low RGBC2colourcard@motorL
  5463   001D24  6E21               	movwf	pick_card@mL^0,c
  5464   001D26  0E33               	movlw	low RGBC2colourcard@motorR
  5465   001D28  6E22               	movwf	pick_card@mR^0,c
  5466   001D2A  0E00               	movlw	0
  5467   001D2C  6E23               	movwf	pick_card@backtrack^0,c
  5468   001D2E  0E01               	movlw	1
  5469   001D30  6E24               	movwf	pick_card@key^0,c
  5470   001D32  ECA1  F00F         	call	_pick_card	;wreg free
  5471   001D36                     l159:
  5472   001D36  0012               	return		;funcret
  5473   001D38                     __end_of_RGBC2colourcard:
  5474                           	callstack 0
  5475                           
  5476 ;; *************** function _pick_card *****************
  5477 ;; Defined at:
  5478 ;;		line 113 in file "manoeuvres.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  mL              1   32[COMRAM] PTR struct DC_motor
  5481 ;;		 -> RGBC2colourcard@motorL(9), 
  5482 ;;  mR              1   33[COMRAM] PTR struct DC_motor
  5483 ;;		 -> RGBC2colourcard@motorR(9), 
  5484 ;;  backtrack       1   34[COMRAM] unsigned char 
  5485 ;;  key             1   35[COMRAM] unsigned char 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5497 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5500 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5501 ;;Total ram usage:        6 bytes
  5502 ;; Hardware stack levels used: 1
  5503 ;; Hardware stack levels required when called: 6
  5504 ;; This function calls:
  5505 ;;		_card_blue
  5506 ;;		_card_cyan
  5507 ;;		_card_green
  5508 ;;		_card_orange
  5509 ;;		_card_pink
  5510 ;;		_card_red
  5511 ;;		_card_white
  5512 ;;		_card_yellow
  5513 ;; This function is called by:
  5514 ;;		_RGBC2colourcard
  5515 ;;		_return_to_sender
  5516 ;;		_test_manoeuvres
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text34
  5521   001F42                     __ptext34:
  5522                           	callstack 0
  5523   001F42                     _pick_card:
  5524                           	callstack 23
  5525   001F42                     
  5526                           ;manoeuvres.c: 113: void pick_card(DC_motor *mL, DC_motor *mR, unsigned char backtrack, 
      +                          unsigned char key);manoeuvres.c: 114: {;manoeuvres.c: 115:     switch (key) {
  5527   001F42  EFF1  F00F         	goto	l3047
  5528   001F46                     l3029:
  5529                           
  5530                           ;manoeuvres.c: 117:             card_red(mL, mR, backtrack);
  5531   001F46  C021  F01C         	movff	pick_card@mL,card_red@mL
  5532   001F4A  C022  F01D         	movff	pick_card@mR,card_red@mR
  5533   001F4E  C023  F01E         	movff	pick_card@backtrack,card_red@backtrack
  5534   001F52  ECD1  F013         	call	_card_red	;wreg free
  5535                           
  5536                           ;manoeuvres.c: 118:             break;
  5537   001F56  EF1E  F010         	goto	l620
  5538   001F5A                     l3031:
  5539                           
  5540                           ;manoeuvres.c: 120:             card_green(mL, mR, backtrack);
  5541   001F5A  C021  F01C         	movff	pick_card@mL,card_green@mL
  5542   001F5E  C022  F01D         	movff	pick_card@mR,card_green@mR
  5543   001F62  C023  F01E         	movff	pick_card@backtrack,card_green@backtrack
  5544   001F66  EC39  F014         	call	_card_green	;wreg free
  5545                           
  5546                           ;manoeuvres.c: 121:             break;
  5547   001F6A  EF1E  F010         	goto	l620
  5548   001F6E                     l3033:
  5549                           
  5550                           ;manoeuvres.c: 123:             card_blue(mL, mR, backtrack);
  5551   001F6E  C021  F01C         	movff	pick_card@mL,card_blue@mL
  5552   001F72  C022  F01D         	movff	pick_card@mR,card_blue@mR
  5553   001F76  C023  F01E         	movff	pick_card@backtrack,card_blue@backtrack
  5554   001F7A  ECA1  F014         	call	_card_blue	;wreg free
  5555                           
  5556                           ;manoeuvres.c: 124:             break;
  5557   001F7E  EF1E  F010         	goto	l620
  5558   001F82                     l3035:
  5559                           
  5560                           ;manoeuvres.c: 126:             card_yellow(mL, mR, backtrack);
  5561   001F82  C021  F01C         	movff	pick_card@mL,card_yellow@mL
  5562   001F86  C022  F01D         	movff	pick_card@mR,card_yellow@mR
  5563   001F8A  C023  F01E         	movff	pick_card@backtrack,card_yellow@backtrack
  5564   001F8E  ECE2  F012         	call	_card_yellow	;wreg free
  5565                           
  5566                           ;manoeuvres.c: 127:             break;
  5567   001F92  EF1E  F010         	goto	l620
  5568   001F96                     l3037:
  5569                           
  5570                           ;manoeuvres.c: 129:             card_pink(mL, mR, backtrack);
  5571   001F96  C021  F01C         	movff	pick_card@mL,card_pink@mL
  5572   001F9A  C022  F01D         	movff	pick_card@mR,card_pink@mR
  5573   001F9E  C023  F01E         	movff	pick_card@backtrack,card_pink@backtrack
  5574   001FA2  EC22  F013         	call	_card_pink	;wreg free
  5575                           
  5576                           ;manoeuvres.c: 130:             break;
  5577   001FA6  EF1E  F010         	goto	l620
  5578   001FAA                     l3039:
  5579                           
  5580                           ;manoeuvres.c: 132:             card_orange(mL, mR, backtrack);
  5581   001FAA  C021  F01C         	movff	pick_card@mL,card_orange@mL
  5582   001FAE  C022  F01D         	movff	pick_card@mR,card_orange@mR
  5583   001FB2  C023  F01E         	movff	pick_card@backtrack,card_orange@backtrack
  5584   001FB6  EC05  F014         	call	_card_orange	;wreg free
  5585                           
  5586                           ;manoeuvres.c: 133:             break;
  5587   001FBA  EF1E  F010         	goto	l620
  5588   001FBE                     l3041:
  5589                           
  5590                           ;manoeuvres.c: 135:             card_cyan(mL, mR, backtrack);
  5591   001FBE  C021  F01C         	movff	pick_card@mL,card_cyan@mL
  5592   001FC2  C022  F01D         	movff	pick_card@mR,card_cyan@mR
  5593   001FC6  C023  F01E         	movff	pick_card@backtrack,card_cyan@backtrack
  5594   001FCA  EC6D  F014         	call	_card_cyan	;wreg free
  5595                           
  5596                           ;manoeuvres.c: 136:             break;
  5597   001FCE  EF1E  F010         	goto	l620
  5598   001FD2                     l3043:
  5599                           
  5600                           ;manoeuvres.c: 138:             card_white(mL, mR);
  5601   001FD2  C021  F01C         	movff	pick_card@mL,card_white@mL
  5602   001FD6  C022  F01D         	movff	pick_card@mR,card_white@mR
  5603   001FDA  EC68  F017         	call	_card_white	;wreg free
  5604                           
  5605                           ;manoeuvres.c: 139:             break;
  5606   001FDE  EF1E  F010         	goto	l620
  5607   001FE2                     l3047:
  5608   001FE2  5024               	movf	pick_card@key^0,w,c
  5609   001FE4  6E25               	movwf	??_pick_card^0,c
  5610   001FE6  6A26               	clrf	(??_pick_card+1)^0,c
  5611                           
  5612                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5613                           ; Switch size 1, requested type "simple"
  5614                           ; Number of cases is 1, Range of values is 0 to 0
  5615                           ; switch strategies available:
  5616                           ; Name         Instructions Cycles
  5617                           ; simple_byte            4     3 (average)
  5618                           ;	Chosen strategy is simple_byte
  5619   001FE8  5026               	movf	(??_pick_card+1)^0,w,c
  5620   001FEA  0A00               	xorlw	0	; case 0
  5621   001FEC  B4D8               	btfsc	status,2,c
  5622   001FEE  EFFB  F00F         	goto	l4061
  5623   001FF2  EF1E  F010         	goto	l620
  5624   001FF6                     l4061:
  5625                           
  5626                           ; Switch size 1, requested type "simple"
  5627                           ; Number of cases is 8, Range of values is 1 to 8
  5628                           ; switch strategies available:
  5629                           ; Name         Instructions Cycles
  5630                           ; simple_byte           25    13 (average)
  5631                           ;	Chosen strategy is simple_byte
  5632   001FF6  5025               	movf	??_pick_card^0,w,c
  5633   001FF8  0A01               	xorlw	1	; case 1
  5634   001FFA  B4D8               	btfsc	status,2,c
  5635   001FFC  EFA3  F00F         	goto	l3029
  5636   002000  0A03               	xorlw	3	; case 2
  5637   002002  B4D8               	btfsc	status,2,c
  5638   002004  EFAD  F00F         	goto	l3031
  5639   002008  0A01               	xorlw	1	; case 3
  5640   00200A  B4D8               	btfsc	status,2,c
  5641   00200C  EFB7  F00F         	goto	l3033
  5642   002010  0A07               	xorlw	7	; case 4
  5643   002012  B4D8               	btfsc	status,2,c
  5644   002014  EFC1  F00F         	goto	l3035
  5645   002018  0A01               	xorlw	1	; case 5
  5646   00201A  B4D8               	btfsc	status,2,c
  5647   00201C  EFCB  F00F         	goto	l3037
  5648   002020  0A03               	xorlw	3	; case 6
  5649   002022  B4D8               	btfsc	status,2,c
  5650   002024  EFD5  F00F         	goto	l3039
  5651   002028  0A01               	xorlw	1	; case 7
  5652   00202A  B4D8               	btfsc	status,2,c
  5653   00202C  EFDF  F00F         	goto	l3041
  5654   002030  0A0F               	xorlw	15	; case 8
  5655   002032  B4D8               	btfsc	status,2,c
  5656   002034  EFE9  F00F         	goto	l3043
  5657   002038  EF1E  F010         	goto	l620
  5658   00203C                     l620:
  5659   00203C  0012               	return		;funcret
  5660   00203E                     __end_of_pick_card:
  5661                           	callstack 0
  5662                           
  5663 ;; *************** function _card_yellow *****************
  5664 ;; Defined at:
  5665 ;;		line 46 in file "manoeuvres.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5668 ;;		 -> RGBC2colourcard@motorL(9), 
  5669 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5670 ;;		 -> RGBC2colourcard@motorR(9), 
  5671 ;;  backtrack       1   29[COMRAM] unsigned char 
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  1    wreg      void 
  5676 ;; Registers used:
  5677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5683 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5685 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5686 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5687 ;;Total ram usage:        5 bytes
  5688 ;; Hardware stack levels used: 1
  5689 ;; Hardware stack levels required when called: 5
  5690 ;; This function calls:
  5691 ;;		_headbuttReverse
  5692 ;;		_squareReverse
  5693 ;;		_turnLeft90
  5694 ;;		_turnRight90
  5695 ;; This function is called by:
  5696 ;;		_pick_card
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           	psect	text35
  5701   0025C4                     __ptext35:
  5702                           	callstack 0
  5703   0025C4                     _card_yellow:
  5704                           	callstack 23
  5705   0025C4                     
  5706                           ;manoeuvres.c: 46: void card_yellow(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 47: {;manoeuvres.c: 48:     switch (backtrack) {
  5707   0025C4  EF0C  F013         	goto	l2927
  5708   0025C8                     l2921:
  5709                           
  5710                           ;manoeuvres.c: 50:             headbuttReverse(mL, mR);
  5711   0025C8  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  5712   0025CC  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  5713   0025D0  EC10  F017         	call	_headbuttReverse	;wreg free
  5714                           
  5715                           ;manoeuvres.c: 51:             squareReverse(mL, mR);
  5716   0025D4  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  5717   0025D8  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  5718   0025DC  ECC8  F016         	call	_squareReverse	;wreg free
  5719                           
  5720                           ;manoeuvres.c: 52:             turnRight90(mL, mR);
  5721   0025E0  C01C  F018         	movff	card_yellow@mL,turnRight90@mL
  5722   0025E4  C01D  F019         	movff	card_yellow@mR,turnRight90@mR
  5723   0025E8  EC4D  F016         	call	_turnRight90	;wreg free
  5724                           
  5725                           ;manoeuvres.c: 53:             break;
  5726   0025EC  EF21  F013         	goto	l583
  5727   0025F0                     l2923:
  5728                           
  5729                           ;manoeuvres.c: 55:             turnLeft90(mL, mR);
  5730   0025F0  C01C  F018         	movff	card_yellow@mL,turnLeft90@mL
  5731   0025F4  C01D  F019         	movff	card_yellow@mR,turnLeft90@mR
  5732   0025F8  EC66  F016         	call	_turnLeft90	;wreg free
  5733                           
  5734                           ;manoeuvres.c: 56:             squareReverse(mL, mR);
  5735   0025FC  C01C  F018         	movff	card_yellow@mL,squareReverse@mL
  5736   002600  C01D  F019         	movff	card_yellow@mR,squareReverse@mR
  5737   002604  ECC8  F016         	call	_squareReverse	;wreg free
  5738                           
  5739                           ;manoeuvres.c: 57:             headbuttReverse(mL, mR);
  5740   002608  C01C  F018         	movff	card_yellow@mL,headbuttReverse@mL
  5741   00260C  C01D  F019         	movff	card_yellow@mR,headbuttReverse@mR
  5742   002610  EC10  F017         	call	_headbuttReverse	;wreg free
  5743                           
  5744                           ;manoeuvres.c: 58:             break;
  5745   002614  EF21  F013         	goto	l583
  5746   002618                     l2927:
  5747   002618  501E               	movf	card_yellow@backtrack^0,w,c
  5748   00261A  6E1F               	movwf	??_card_yellow^0,c
  5749   00261C  6A20               	clrf	(??_card_yellow+1)^0,c
  5750                           
  5751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5752                           ; Switch size 1, requested type "simple"
  5753                           ; Number of cases is 1, Range of values is 0 to 0
  5754                           ; switch strategies available:
  5755                           ; Name         Instructions Cycles
  5756                           ; simple_byte            4     3 (average)
  5757                           ;	Chosen strategy is simple_byte
  5758   00261E  5020               	movf	(??_card_yellow+1)^0,w,c
  5759   002620  0A00               	xorlw	0	; case 0
  5760   002622  B4D8               	btfsc	status,2,c
  5761   002624  EF16  F013         	goto	l4063
  5762   002628  EF21  F013         	goto	l583
  5763   00262C                     l4063:
  5764                           
  5765                           ; Switch size 1, requested type "simple"
  5766                           ; Number of cases is 2, Range of values is 0 to 1
  5767                           ; switch strategies available:
  5768                           ; Name         Instructions Cycles
  5769                           ; simple_byte            7     4 (average)
  5770                           ;	Chosen strategy is simple_byte
  5771   00262C  501F               	movf	??_card_yellow^0,w,c
  5772   00262E  0A00               	xorlw	0	; case 0
  5773   002630  B4D8               	btfsc	status,2,c
  5774   002632  EFE4  F012         	goto	l2921
  5775   002636  0A01               	xorlw	1	; case 1
  5776   002638  B4D8               	btfsc	status,2,c
  5777   00263A  EFF8  F012         	goto	l2923
  5778   00263E  EF21  F013         	goto	l583
  5779   002642                     l583:
  5780   002642  0012               	return		;funcret
  5781   002644                     __end_of_card_yellow:
  5782                           	callstack 0
  5783                           
  5784 ;; *************** function _card_white *****************
  5785 ;; Defined at:
  5786 ;;		line 106 in file "manoeuvres.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5789 ;;		 -> RGBC2colourcard@motorL(9), 
  5790 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5791 ;;		 -> RGBC2colourcard@motorR(9), 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;		None
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5807 ;;Total ram usage:        2 bytes
  5808 ;; Hardware stack levels used: 1
  5809 ;; Hardware stack levels required when called: 5
  5810 ;; This function calls:
  5811 ;;		_UTurn
  5812 ;;		_headbuttReverse
  5813 ;; This function is called by:
  5814 ;;		_pick_card
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text36
  5819   002ED0                     __ptext36:
  5820                           	callstack 0
  5821   002ED0                     _card_white:
  5822                           	callstack 23
  5823   002ED0                     
  5824                           ;manoeuvres.c: 106: void card_white(DC_motor *mL, DC_motor *mR);manoeuvres.c: 107: {;man
      +                          oeuvres.c: 108:     headbuttReverse(mL, mR);
  5825   002ED0  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  5826   002ED4  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  5827   002ED8  EC10  F017         	call	_headbuttReverse	;wreg free
  5828                           
  5829                           ;manoeuvres.c: 109:     UTurn(mL, mR);
  5830   002EDC  C01C  F018         	movff	card_white@mL,UTurn@mL
  5831   002EE0  C01D  F019         	movff	card_white@mR,UTurn@mR
  5832   002EE4  EC7F  F016         	call	_UTurn	;wreg free
  5833                           
  5834                           ;manoeuvres.c: 110:     headbuttReverse(mL, mR);
  5835   002EE8  C01C  F018         	movff	card_white@mL,headbuttReverse@mL
  5836   002EEC  C01D  F019         	movff	card_white@mR,headbuttReverse@mR
  5837   002EF0  EC10  F017         	call	_headbuttReverse	;wreg free
  5838   002EF4  0012               	return		;funcret
  5839   002EF6                     __end_of_card_white:
  5840                           	callstack 0
  5841                           
  5842 ;; *************** function _card_red *****************
  5843 ;; Defined at:
  5844 ;;		line 4 in file "manoeuvres.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5847 ;;		 -> RGBC2colourcard@motorL(9), 
  5848 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5849 ;;		 -> RGBC2colourcard@motorR(9), 
  5850 ;;  backtrack       1   29[COMRAM] unsigned char 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;		None
  5853 ;; Return value:  Size  Location     Type
  5854 ;;                  1    wreg      void 
  5855 ;; Registers used:
  5856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5862 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5864 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5865 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5866 ;;Total ram usage:        5 bytes
  5867 ;; Hardware stack levels used: 1
  5868 ;; Hardware stack levels required when called: 5
  5869 ;; This function calls:
  5870 ;;		_headbuttReverse
  5871 ;;		_turnLeft90
  5872 ;;		_turnRight90
  5873 ;; This function is called by:
  5874 ;;		_pick_card
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text37
  5879   0027A2                     __ptext37:
  5880                           	callstack 0
  5881   0027A2                     _card_red:
  5882                           	callstack 23
  5883   0027A2                     
  5884                           ;manoeuvres.c: 4: void card_red(DC_motor *mL, DC_motor *mR, unsigned char backtrack);man
      +                          oeuvres.c: 5: {;manoeuvres.c: 6:     switch (backtrack) {
  5885   0027A2  EFEF  F013         	goto	l2885
  5886   0027A6                     l2879:
  5887                           
  5888                           ;manoeuvres.c: 8:             headbuttReverse(mL, mR);
  5889   0027A6  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  5890   0027AA  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  5891   0027AE  EC10  F017         	call	_headbuttReverse	;wreg free
  5892                           
  5893                           ;manoeuvres.c: 9:             turnRight90(mL, mR);
  5894   0027B2  C01C  F018         	movff	card_red@mL,turnRight90@mL
  5895   0027B6  C01D  F019         	movff	card_red@mR,turnRight90@mR
  5896   0027BA  EC4D  F016         	call	_turnRight90	;wreg free
  5897                           
  5898                           ;manoeuvres.c: 10:             break;
  5899   0027BE  EF04  F014         	goto	l562
  5900   0027C2                     l2881:
  5901                           
  5902                           ;manoeuvres.c: 12:             turnLeft90(mL, mR);
  5903   0027C2  C01C  F018         	movff	card_red@mL,turnLeft90@mL
  5904   0027C6  C01D  F019         	movff	card_red@mR,turnLeft90@mR
  5905   0027CA  EC66  F016         	call	_turnLeft90	;wreg free
  5906                           
  5907                           ;manoeuvres.c: 13:             headbuttReverse(mL, mR);
  5908   0027CE  C01C  F018         	movff	card_red@mL,headbuttReverse@mL
  5909   0027D2  C01D  F019         	movff	card_red@mR,headbuttReverse@mR
  5910   0027D6  EC10  F017         	call	_headbuttReverse	;wreg free
  5911                           
  5912                           ;manoeuvres.c: 14:             break;
  5913   0027DA  EF04  F014         	goto	l562
  5914   0027DE                     l2885:
  5915   0027DE  501E               	movf	card_red@backtrack^0,w,c
  5916   0027E0  6E1F               	movwf	??_card_red^0,c
  5917   0027E2  6A20               	clrf	(??_card_red+1)^0,c
  5918                           
  5919                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5920                           ; Switch size 1, requested type "simple"
  5921                           ; Number of cases is 1, Range of values is 0 to 0
  5922                           ; switch strategies available:
  5923                           ; Name         Instructions Cycles
  5924                           ; simple_byte            4     3 (average)
  5925                           ;	Chosen strategy is simple_byte
  5926   0027E4  5020               	movf	(??_card_red+1)^0,w,c
  5927   0027E6  0A00               	xorlw	0	; case 0
  5928   0027E8  B4D8               	btfsc	status,2,c
  5929   0027EA  EFF9  F013         	goto	l4065
  5930   0027EE  EF04  F014         	goto	l562
  5931   0027F2                     l4065:
  5932                           
  5933                           ; Switch size 1, requested type "simple"
  5934                           ; Number of cases is 2, Range of values is 0 to 1
  5935                           ; switch strategies available:
  5936                           ; Name         Instructions Cycles
  5937                           ; simple_byte            7     4 (average)
  5938                           ;	Chosen strategy is simple_byte
  5939   0027F2  501F               	movf	??_card_red^0,w,c
  5940   0027F4  0A00               	xorlw	0	; case 0
  5941   0027F6  B4D8               	btfsc	status,2,c
  5942   0027F8  EFD3  F013         	goto	l2879
  5943   0027FC  0A01               	xorlw	1	; case 1
  5944   0027FE  B4D8               	btfsc	status,2,c
  5945   002800  EFE1  F013         	goto	l2881
  5946   002804  EF04  F014         	goto	l562
  5947   002808                     l562:
  5948   002808  0012               	return		;funcret
  5949   00280A                     __end_of_card_red:
  5950                           	callstack 0
  5951                           
  5952 ;; *************** function _card_pink *****************
  5953 ;; Defined at:
  5954 ;;		line 62 in file "manoeuvres.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  5957 ;;		 -> RGBC2colourcard@motorL(9), 
  5958 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  5959 ;;		 -> RGBC2colourcard@motorR(9), 
  5960 ;;  backtrack       1   29[COMRAM] unsigned char 
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;		None
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      void 
  5965 ;; Registers used:
  5966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5972 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5974 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5975 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5976 ;;Total ram usage:        5 bytes
  5977 ;; Hardware stack levels used: 1
  5978 ;; Hardware stack levels required when called: 5
  5979 ;; This function calls:
  5980 ;;		_headbuttReverse
  5981 ;;		_squareReverse
  5982 ;;		_turnLeft90
  5983 ;;		_turnRight90
  5984 ;; This function is called by:
  5985 ;;		_pick_card
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           	psect	text38
  5990   002644                     __ptext38:
  5991                           	callstack 0
  5992   002644                     _card_pink:
  5993                           	callstack 23
  5994   002644                     
  5995                           ;manoeuvres.c: 62: void card_pink(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 63: {;manoeuvres.c: 64:     switch (backtrack) {
  5996   002644  EF4C  F013         	goto	l2941
  5997   002648                     l2935:
  5998                           
  5999                           ;manoeuvres.c: 66:             headbuttReverse(mL, mR);
  6000   002648  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  6001   00264C  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  6002   002650  EC10  F017         	call	_headbuttReverse	;wreg free
  6003                           
  6004                           ;manoeuvres.c: 67:             squareReverse(mL, mR);
  6005   002654  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  6006   002658  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  6007   00265C  ECC8  F016         	call	_squareReverse	;wreg free
  6008                           
  6009                           ;manoeuvres.c: 68:             turnLeft90(mL, mR);
  6010   002660  C01C  F018         	movff	card_pink@mL,turnLeft90@mL
  6011   002664  C01D  F019         	movff	card_pink@mR,turnLeft90@mR
  6012   002668  EC66  F016         	call	_turnLeft90	;wreg free
  6013                           
  6014                           ;manoeuvres.c: 69:             break;
  6015   00266C  EF61  F013         	goto	l590
  6016   002670                     l2937:
  6017                           
  6018                           ;manoeuvres.c: 71:             turnRight90(mL, mR);
  6019   002670  C01C  F018         	movff	card_pink@mL,turnRight90@mL
  6020   002674  C01D  F019         	movff	card_pink@mR,turnRight90@mR
  6021   002678  EC4D  F016         	call	_turnRight90	;wreg free
  6022                           
  6023                           ;manoeuvres.c: 72:             squareReverse(mL, mR);
  6024   00267C  C01C  F018         	movff	card_pink@mL,squareReverse@mL
  6025   002680  C01D  F019         	movff	card_pink@mR,squareReverse@mR
  6026   002684  ECC8  F016         	call	_squareReverse	;wreg free
  6027                           
  6028                           ;manoeuvres.c: 73:             headbuttReverse(mL, mR);
  6029   002688  C01C  F018         	movff	card_pink@mL,headbuttReverse@mL
  6030   00268C  C01D  F019         	movff	card_pink@mR,headbuttReverse@mR
  6031   002690  EC10  F017         	call	_headbuttReverse	;wreg free
  6032                           
  6033                           ;manoeuvres.c: 74:             break;
  6034   002694  EF61  F013         	goto	l590
  6035   002698                     l2941:
  6036   002698  501E               	movf	card_pink@backtrack^0,w,c
  6037   00269A  6E1F               	movwf	??_card_pink^0,c
  6038   00269C  6A20               	clrf	(??_card_pink+1)^0,c
  6039                           
  6040                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6041                           ; Switch size 1, requested type "simple"
  6042                           ; Number of cases is 1, Range of values is 0 to 0
  6043                           ; switch strategies available:
  6044                           ; Name         Instructions Cycles
  6045                           ; simple_byte            4     3 (average)
  6046                           ;	Chosen strategy is simple_byte
  6047   00269E  5020               	movf	(??_card_pink+1)^0,w,c
  6048   0026A0  0A00               	xorlw	0	; case 0
  6049   0026A2  B4D8               	btfsc	status,2,c
  6050   0026A4  EF56  F013         	goto	l4067
  6051   0026A8  EF61  F013         	goto	l590
  6052   0026AC                     l4067:
  6053                           
  6054                           ; Switch size 1, requested type "simple"
  6055                           ; Number of cases is 2, Range of values is 0 to 1
  6056                           ; switch strategies available:
  6057                           ; Name         Instructions Cycles
  6058                           ; simple_byte            7     4 (average)
  6059                           ;	Chosen strategy is simple_byte
  6060   0026AC  501F               	movf	??_card_pink^0,w,c
  6061   0026AE  0A00               	xorlw	0	; case 0
  6062   0026B0  B4D8               	btfsc	status,2,c
  6063   0026B2  EF24  F013         	goto	l2935
  6064   0026B6  0A01               	xorlw	1	; case 1
  6065   0026B8  B4D8               	btfsc	status,2,c
  6066   0026BA  EF38  F013         	goto	l2937
  6067   0026BE  EF61  F013         	goto	l590
  6068   0026C2                     l590:
  6069   0026C2  0012               	return		;funcret
  6070   0026C4                     __end_of_card_pink:
  6071                           	callstack 0
  6072                           
  6073 ;; *************** function _squareReverse *****************
  6074 ;; Defined at:
  6075 ;;		line 214 in file "dc_motor.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6078 ;;		 -> RGBC2colourcard@motorL(9), 
  6079 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6080 ;;		 -> RGBC2colourcard@motorR(9), 
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;		None
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      void 
  6085 ;; Registers used:
  6086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6092 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6094 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6095 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6096 ;;Total ram usage:        4 bytes
  6097 ;; Hardware stack levels used: 1
  6098 ;; Hardware stack levels required when called: 4
  6099 ;; This function calls:
  6100 ;;		_fullSpeedReverse
  6101 ;;		_stop
  6102 ;; This function is called by:
  6103 ;;		_card_yellow
  6104 ;;		_card_pink
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text39
  6109   002D90                     __ptext39:
  6110                           	callstack 0
  6111   002D90                     _squareReverse:
  6112                           	callstack 23
  6113   002D90                     
  6114                           ;dc_motor.c: 214: void squareReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 215: {;dc_m
      +                          otor.c: 216:     fullSpeedReverse(mL, mR);
  6115   002D90  C018  F013         	movff	squareReverse@mL,fullSpeedReverse@mL
  6116   002D94  C019  F014         	movff	squareReverse@mR,fullSpeedReverse@mR
  6117   002D98  ECA6  F011         	call	_fullSpeedReverse	;wreg free
  6118   002D9C                     
  6119                           ;dc_motor.c: 217:     _delay((unsigned long)((squareDelay)*(64000000/4000.0)));
  6120   002D9C  0E19               	movlw	25
  6121   002D9E  6E1B               	movwf	(??_squareReverse+1)^0,c
  6122   002DA0  0E5A               	movlw	90
  6123   002DA2  6E1A               	movwf	??_squareReverse^0,c
  6124   002DA4  0EB2               	movlw	178
  6125   002DA6                     u2407:
  6126   002DA6  2EE8               	decfsz	wreg,f,c
  6127   002DA8  D7FE               	bra	u2407
  6128   002DAA  2E1A               	decfsz	??_squareReverse^0,f,c
  6129   002DAC  D7FC               	bra	u2407
  6130   002DAE  2E1B               	decfsz	(??_squareReverse+1)^0,f,c
  6131   002DB0  D7FA               	bra	u2407
  6132   002DB2                     
  6133                           ;dc_motor.c: 218:     stop(mL, mR);
  6134   002DB2  C018  F013         	movff	squareReverse@mL,stop@mL
  6135   002DB6  C019  F014         	movff	squareReverse@mR,stop@mR
  6136   002DBA  EC9B  F012         	call	_stop	;wreg free
  6137   002DBE  0012               	return		;funcret
  6138   002DC0                     __end_of_squareReverse:
  6139                           	callstack 0
  6140                           
  6141 ;; *************** function _card_orange *****************
  6142 ;; Defined at:
  6143 ;;		line 78 in file "manoeuvres.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6146 ;;		 -> RGBC2colourcard@motorL(9), 
  6147 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6148 ;;		 -> RGBC2colourcard@motorR(9), 
  6149 ;;  backtrack       1   29[COMRAM] unsigned char 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;		None
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  1    wreg      void 
  6154 ;; Registers used:
  6155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6161 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6164 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6165 ;;Total ram usage:        5 bytes
  6166 ;; Hardware stack levels used: 1
  6167 ;; Hardware stack levels required when called: 5
  6168 ;; This function calls:
  6169 ;;		_headbuttReverse
  6170 ;;		_turnLeft135
  6171 ;;		_turnRight135
  6172 ;; This function is called by:
  6173 ;;		_pick_card
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text40
  6178   00280A                     __ptext40:
  6179                           	callstack 0
  6180   00280A                     _card_orange:
  6181                           	callstack 23
  6182   00280A                     
  6183                           ;manoeuvres.c: 78: void card_orange(DC_motor *mL, DC_motor *mR, unsigned char backtrack)
      +                          ;manoeuvres.c: 79: {;manoeuvres.c: 80:     switch (backtrack) {
  6184   00280A  EF23  F014         	goto	l2955
  6185   00280E                     l2949:
  6186                           
  6187                           ;manoeuvres.c: 82:             headbuttReverse(mL, mR);
  6188   00280E  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  6189   002812  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  6190   002816  EC10  F017         	call	_headbuttReverse	;wreg free
  6191                           
  6192                           ;manoeuvres.c: 83:             turnRight135(mL, mR);
  6193   00281A  C01C  F018         	movff	card_orange@mL,turnRight135@mL
  6194   00281E  C01D  F019         	movff	card_orange@mR,turnRight135@mR
  6195   002822  ECE0  F016         	call	_turnRight135	;wreg free
  6196                           
  6197                           ;manoeuvres.c: 84:             break;
  6198   002826  EF38  F014         	goto	l597
  6199   00282A                     l2951:
  6200                           
  6201                           ;manoeuvres.c: 86:             turnLeft135(mL, mR);
  6202   00282A  C01C  F018         	movff	card_orange@mL,turnLeft135@mL
  6203   00282E  C01D  F019         	movff	card_orange@mR,turnLeft135@mR
  6204   002832  ECF8  F016         	call	_turnLeft135	;wreg free
  6205                           
  6206                           ;manoeuvres.c: 87:             headbuttReverse(mL, mR);
  6207   002836  C01C  F018         	movff	card_orange@mL,headbuttReverse@mL
  6208   00283A  C01D  F019         	movff	card_orange@mR,headbuttReverse@mR
  6209   00283E  EC10  F017         	call	_headbuttReverse	;wreg free
  6210                           
  6211                           ;manoeuvres.c: 88:             break;
  6212   002842  EF38  F014         	goto	l597
  6213   002846                     l2955:
  6214   002846  501E               	movf	card_orange@backtrack^0,w,c
  6215   002848  6E1F               	movwf	??_card_orange^0,c
  6216   00284A  6A20               	clrf	(??_card_orange+1)^0,c
  6217                           
  6218                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6219                           ; Switch size 1, requested type "simple"
  6220                           ; Number of cases is 1, Range of values is 0 to 0
  6221                           ; switch strategies available:
  6222                           ; Name         Instructions Cycles
  6223                           ; simple_byte            4     3 (average)
  6224                           ;	Chosen strategy is simple_byte
  6225   00284C  5020               	movf	(??_card_orange+1)^0,w,c
  6226   00284E  0A00               	xorlw	0	; case 0
  6227   002850  B4D8               	btfsc	status,2,c
  6228   002852  EF2D  F014         	goto	l4069
  6229   002856  EF38  F014         	goto	l597
  6230   00285A                     l4069:
  6231                           
  6232                           ; Switch size 1, requested type "simple"
  6233                           ; Number of cases is 2, Range of values is 0 to 1
  6234                           ; switch strategies available:
  6235                           ; Name         Instructions Cycles
  6236                           ; simple_byte            7     4 (average)
  6237                           ;	Chosen strategy is simple_byte
  6238   00285A  501F               	movf	??_card_orange^0,w,c
  6239   00285C  0A00               	xorlw	0	; case 0
  6240   00285E  B4D8               	btfsc	status,2,c
  6241   002860  EF07  F014         	goto	l2949
  6242   002864  0A01               	xorlw	1	; case 1
  6243   002866  B4D8               	btfsc	status,2,c
  6244   002868  EF15  F014         	goto	l2951
  6245   00286C  EF38  F014         	goto	l597
  6246   002870                     l597:
  6247   002870  0012               	return		;funcret
  6248   002872                     __end_of_card_orange:
  6249                           	callstack 0
  6250                           
  6251 ;; *************** function _card_green *****************
  6252 ;; Defined at:
  6253 ;;		line 18 in file "manoeuvres.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6256 ;;		 -> RGBC2colourcard@motorL(9), 
  6257 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6258 ;;		 -> RGBC2colourcard@motorR(9), 
  6259 ;;  backtrack       1   29[COMRAM] unsigned char 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      void 
  6264 ;; Registers used:
  6265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6271 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6273 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6274 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6275 ;;Total ram usage:        5 bytes
  6276 ;; Hardware stack levels used: 1
  6277 ;; Hardware stack levels required when called: 5
  6278 ;; This function calls:
  6279 ;;		_headbuttReverse
  6280 ;;		_turnLeft90
  6281 ;;		_turnRight90
  6282 ;; This function is called by:
  6283 ;;		_pick_card
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           	psect	text41
  6288   002872                     __ptext41:
  6289                           	callstack 0
  6290   002872                     _card_green:
  6291                           	callstack 23
  6292   002872                     
  6293                           ;manoeuvres.c: 18: void card_green(DC_motor *mL, DC_motor *mR, unsigned char backtrack);
      +                          manoeuvres.c: 19: {;manoeuvres.c: 20:     switch (backtrack) {
  6294   002872  EF57  F014         	goto	l2899
  6295   002876                     l2893:
  6296                           
  6297                           ;manoeuvres.c: 22:             headbuttReverse(mL, mR);
  6298   002876  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  6299   00287A  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  6300   00287E  EC10  F017         	call	_headbuttReverse	;wreg free
  6301                           
  6302                           ;manoeuvres.c: 23:             turnLeft90(mL, mR);
  6303   002882  C01C  F018         	movff	card_green@mL,turnLeft90@mL
  6304   002886  C01D  F019         	movff	card_green@mR,turnLeft90@mR
  6305   00288A  EC66  F016         	call	_turnLeft90	;wreg free
  6306                           
  6307                           ;manoeuvres.c: 24:             break;
  6308   00288E  EF6C  F014         	goto	l569
  6309   002892                     l2895:
  6310                           
  6311                           ;manoeuvres.c: 26:             turnRight90(mL, mR);
  6312   002892  C01C  F018         	movff	card_green@mL,turnRight90@mL
  6313   002896  C01D  F019         	movff	card_green@mR,turnRight90@mR
  6314   00289A  EC4D  F016         	call	_turnRight90	;wreg free
  6315                           
  6316                           ;manoeuvres.c: 27:             headbuttReverse(mL, mR);
  6317   00289E  C01C  F018         	movff	card_green@mL,headbuttReverse@mL
  6318   0028A2  C01D  F019         	movff	card_green@mR,headbuttReverse@mR
  6319   0028A6  EC10  F017         	call	_headbuttReverse	;wreg free
  6320                           
  6321                           ;manoeuvres.c: 28:             break;
  6322   0028AA  EF6C  F014         	goto	l569
  6323   0028AE                     l2899:
  6324   0028AE  501E               	movf	card_green@backtrack^0,w,c
  6325   0028B0  6E1F               	movwf	??_card_green^0,c
  6326   0028B2  6A20               	clrf	(??_card_green+1)^0,c
  6327                           
  6328                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6329                           ; Switch size 1, requested type "simple"
  6330                           ; Number of cases is 1, Range of values is 0 to 0
  6331                           ; switch strategies available:
  6332                           ; Name         Instructions Cycles
  6333                           ; simple_byte            4     3 (average)
  6334                           ;	Chosen strategy is simple_byte
  6335   0028B4  5020               	movf	(??_card_green+1)^0,w,c
  6336   0028B6  0A00               	xorlw	0	; case 0
  6337   0028B8  B4D8               	btfsc	status,2,c
  6338   0028BA  EF61  F014         	goto	l4071
  6339   0028BE  EF6C  F014         	goto	l569
  6340   0028C2                     l4071:
  6341                           
  6342                           ; Switch size 1, requested type "simple"
  6343                           ; Number of cases is 2, Range of values is 0 to 1
  6344                           ; switch strategies available:
  6345                           ; Name         Instructions Cycles
  6346                           ; simple_byte            7     4 (average)
  6347                           ;	Chosen strategy is simple_byte
  6348   0028C2  501F               	movf	??_card_green^0,w,c
  6349   0028C4  0A00               	xorlw	0	; case 0
  6350   0028C6  B4D8               	btfsc	status,2,c
  6351   0028C8  EF3B  F014         	goto	l2893
  6352   0028CC  0A01               	xorlw	1	; case 1
  6353   0028CE  B4D8               	btfsc	status,2,c
  6354   0028D0  EF49  F014         	goto	l2895
  6355   0028D4  EF6C  F014         	goto	l569
  6356   0028D8                     l569:
  6357   0028D8  0012               	return		;funcret
  6358   0028DA                     __end_of_card_green:
  6359                           	callstack 0
  6360                           
  6361 ;; *************** function _turnRight90 *****************
  6362 ;; Defined at:
  6363 ;;		line 174 in file "dc_motor.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6366 ;;		 -> RGBC2colourcard@motorL(9), 
  6367 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6368 ;;		 -> RGBC2colourcard@motorR(9), 
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      void 
  6373 ;; Registers used:
  6374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6383 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6384 ;;Total ram usage:        4 bytes
  6385 ;; Hardware stack levels used: 1
  6386 ;; Hardware stack levels required when called: 4
  6387 ;; This function calls:
  6388 ;;		_stop
  6389 ;;		_turnRight
  6390 ;; This function is called by:
  6391 ;;		_card_red
  6392 ;;		_card_green
  6393 ;;		_card_yellow
  6394 ;;		_card_pink
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           	psect	text42
  6399   002C9A                     __ptext42:
  6400                           	callstack 0
  6401   002C9A                     _turnRight90:
  6402                           	callstack 23
  6403   002C9A                     
  6404                           ;dc_motor.c: 174: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 175: {;dc_mot
      +                          or.c: 176:     turnRight(mL, mR);
  6405   002C9A  C018  F013         	movff	turnRight90@mL,turnRight@mL
  6406   002C9E  C019  F014         	movff	turnRight90@mR,turnRight@mR
  6407   002CA2  ECEE  F010         	call	_turnRight	;wreg free
  6408   002CA6                     
  6409                           ;dc_motor.c: 177:     _delay((unsigned long)((turnRight90Delay)*(64000000/4000.0)));
  6410   002CA6  0E0F               	movlw	15
  6411   002CA8  6E1B               	movwf	(??_turnRight90+1)^0,c
  6412   002CAA  0E35               	movlw	53
  6413   002CAC  6E1A               	movwf	??_turnRight90^0,c
  6414   002CAE  0E51               	movlw	81
  6415   002CB0                     u2417:
  6416   002CB0  2EE8               	decfsz	wreg,f,c
  6417   002CB2  D7FE               	bra	u2417
  6418   002CB4  2E1A               	decfsz	??_turnRight90^0,f,c
  6419   002CB6  D7FC               	bra	u2417
  6420   002CB8  2E1B               	decfsz	(??_turnRight90+1)^0,f,c
  6421   002CBA  D7FA               	bra	u2417
  6422   002CBC  0000               	nop	
  6423   002CBE                     
  6424                           ;dc_motor.c: 178:     stop(mL, mR);
  6425   002CBE  C018  F013         	movff	turnRight90@mL,stop@mL
  6426   002CC2  C019  F014         	movff	turnRight90@mR,stop@mR
  6427   002CC6  EC9B  F012         	call	_stop	;wreg free
  6428   002CCA  0012               	return		;funcret
  6429   002CCC                     __end_of_turnRight90:
  6430                           	callstack 0
  6431                           
  6432 ;; *************** function _turnLeft90 *****************
  6433 ;; Defined at:
  6434 ;;		line 166 in file "dc_motor.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6437 ;;		 -> RGBC2colourcard@motorL(9), 
  6438 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6439 ;;		 -> RGBC2colourcard@motorR(9), 
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  1    wreg      void 
  6444 ;; Registers used:
  6445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6451 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6453 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6454 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6455 ;;Total ram usage:        4 bytes
  6456 ;; Hardware stack levels used: 1
  6457 ;; Hardware stack levels required when called: 4
  6458 ;; This function calls:
  6459 ;;		_stop
  6460 ;;		_turnLeft
  6461 ;; This function is called by:
  6462 ;;		_card_red
  6463 ;;		_card_green
  6464 ;;		_card_yellow
  6465 ;;		_card_pink
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text43
  6470   002CCC                     __ptext43:
  6471                           	callstack 0
  6472   002CCC                     _turnLeft90:
  6473                           	callstack 23
  6474   002CCC                     
  6475                           ;dc_motor.c: 166: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 167: {;dc_moto
      +                          r.c: 168:     turnLeft(mL, mR);
  6476   002CCC  C018  F013         	movff	turnLeft90@mL,turnLeft@mL
  6477   002CD0  C019  F014         	movff	turnLeft90@mR,turnLeft@mR
  6478   002CD4  EC4A  F011         	call	_turnLeft	;wreg free
  6479   002CD8                     
  6480                           ;dc_motor.c: 169:     _delay((unsigned long)((turnLeft90Delay)*(64000000/4000.0)));
  6481   002CD8  0E0F               	movlw	15
  6482   002CDA  6E1B               	movwf	(??_turnLeft90+1)^0,c
  6483   002CDC  0E35               	movlw	53
  6484   002CDE  6E1A               	movwf	??_turnLeft90^0,c
  6485   002CE0  0E51               	movlw	81
  6486   002CE2                     u2427:
  6487   002CE2  2EE8               	decfsz	wreg,f,c
  6488   002CE4  D7FE               	bra	u2427
  6489   002CE6  2E1A               	decfsz	??_turnLeft90^0,f,c
  6490   002CE8  D7FC               	bra	u2427
  6491   002CEA  2E1B               	decfsz	(??_turnLeft90+1)^0,f,c
  6492   002CEC  D7FA               	bra	u2427
  6493   002CEE  0000               	nop	
  6494   002CF0                     
  6495                           ;dc_motor.c: 170:     stop(mL, mR);
  6496   002CF0  C018  F013         	movff	turnLeft90@mL,stop@mL
  6497   002CF4  C019  F014         	movff	turnLeft90@mR,stop@mR
  6498   002CF8  EC9B  F012         	call	_stop	;wreg free
  6499   002CFC  0012               	return		;funcret
  6500   002CFE                     __end_of_turnLeft90:
  6501                           	callstack 0
  6502                           
  6503 ;; *************** function _card_cyan *****************
  6504 ;; Defined at:
  6505 ;;		line 92 in file "manoeuvres.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6508 ;;		 -> RGBC2colourcard@motorL(9), 
  6509 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6510 ;;		 -> RGBC2colourcard@motorR(9), 
  6511 ;;  backtrack       1   29[COMRAM] unsigned char 
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;		None
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      void 
  6516 ;; Registers used:
  6517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6523 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6525 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6526 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6527 ;;Total ram usage:        5 bytes
  6528 ;; Hardware stack levels used: 1
  6529 ;; Hardware stack levels required when called: 5
  6530 ;; This function calls:
  6531 ;;		_headbuttReverse
  6532 ;;		_turnLeft135
  6533 ;;		_turnRight135
  6534 ;; This function is called by:
  6535 ;;		_pick_card
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text44
  6540   0028DA                     __ptext44:
  6541                           	callstack 0
  6542   0028DA                     _card_cyan:
  6543                           	callstack 23
  6544   0028DA                     
  6545                           ;manoeuvres.c: 92: void card_cyan(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 93: {;manoeuvres.c: 94:     switch (backtrack) {
  6546   0028DA  EF8B  F014         	goto	l2969
  6547   0028DE                     l2963:
  6548                           
  6549                           ;manoeuvres.c: 96:             headbuttReverse(mL, mR);
  6550   0028DE  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  6551   0028E2  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  6552   0028E6  EC10  F017         	call	_headbuttReverse	;wreg free
  6553                           
  6554                           ;manoeuvres.c: 97:             turnLeft135(mL, mR);
  6555   0028EA  C01C  F018         	movff	card_cyan@mL,turnLeft135@mL
  6556   0028EE  C01D  F019         	movff	card_cyan@mR,turnLeft135@mR
  6557   0028F2  ECF8  F016         	call	_turnLeft135	;wreg free
  6558                           
  6559                           ;manoeuvres.c: 98:             break;
  6560   0028F6  EFA0  F014         	goto	l604
  6561   0028FA                     l2965:
  6562                           
  6563                           ;manoeuvres.c: 100:             turnRight135(mL, mR);
  6564   0028FA  C01C  F018         	movff	card_cyan@mL,turnRight135@mL
  6565   0028FE  C01D  F019         	movff	card_cyan@mR,turnRight135@mR
  6566   002902  ECE0  F016         	call	_turnRight135	;wreg free
  6567                           
  6568                           ;manoeuvres.c: 101:             headbuttReverse(mL, mR);
  6569   002906  C01C  F018         	movff	card_cyan@mL,headbuttReverse@mL
  6570   00290A  C01D  F019         	movff	card_cyan@mR,headbuttReverse@mR
  6571   00290E  EC10  F017         	call	_headbuttReverse	;wreg free
  6572                           
  6573                           ;manoeuvres.c: 102:             break;
  6574   002912  EFA0  F014         	goto	l604
  6575   002916                     l2969:
  6576   002916  501E               	movf	card_cyan@backtrack^0,w,c
  6577   002918  6E1F               	movwf	??_card_cyan^0,c
  6578   00291A  6A20               	clrf	(??_card_cyan+1)^0,c
  6579                           
  6580                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6581                           ; Switch size 1, requested type "simple"
  6582                           ; Number of cases is 1, Range of values is 0 to 0
  6583                           ; switch strategies available:
  6584                           ; Name         Instructions Cycles
  6585                           ; simple_byte            4     3 (average)
  6586                           ;	Chosen strategy is simple_byte
  6587   00291C  5020               	movf	(??_card_cyan+1)^0,w,c
  6588   00291E  0A00               	xorlw	0	; case 0
  6589   002920  B4D8               	btfsc	status,2,c
  6590   002922  EF95  F014         	goto	l4073
  6591   002926  EFA0  F014         	goto	l604
  6592   00292A                     l4073:
  6593                           
  6594                           ; Switch size 1, requested type "simple"
  6595                           ; Number of cases is 2, Range of values is 0 to 1
  6596                           ; switch strategies available:
  6597                           ; Name         Instructions Cycles
  6598                           ; simple_byte            7     4 (average)
  6599                           ;	Chosen strategy is simple_byte
  6600   00292A  501F               	movf	??_card_cyan^0,w,c
  6601   00292C  0A00               	xorlw	0	; case 0
  6602   00292E  B4D8               	btfsc	status,2,c
  6603   002930  EF6F  F014         	goto	l2963
  6604   002934  0A01               	xorlw	1	; case 1
  6605   002936  B4D8               	btfsc	status,2,c
  6606   002938  EF7D  F014         	goto	l2965
  6607   00293C  EFA0  F014         	goto	l604
  6608   002940                     l604:
  6609   002940  0012               	return		;funcret
  6610   002942                     __end_of_card_cyan:
  6611                           	callstack 0
  6612                           
  6613 ;; *************** function _turnRight135 *****************
  6614 ;; Defined at:
  6615 ;;		line 190 in file "dc_motor.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6618 ;;		 -> RGBC2colourcard@motorL(9), 
  6619 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6620 ;;		 -> RGBC2colourcard@motorR(9), 
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6634 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6635 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6636 ;;Total ram usage:        4 bytes
  6637 ;; Hardware stack levels used: 1
  6638 ;; Hardware stack levels required when called: 4
  6639 ;; This function calls:
  6640 ;;		_stop
  6641 ;;		_turnRight
  6642 ;; This function is called by:
  6643 ;;		_card_orange
  6644 ;;		_card_cyan
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           	psect	text45
  6649   002DC0                     __ptext45:
  6650                           	callstack 0
  6651   002DC0                     _turnRight135:
  6652                           	callstack 23
  6653   002DC0                     
  6654                           ;dc_motor.c: 190: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 191: {;dc_mo
      +                          tor.c: 192:     turnRight(mL, mR);
  6655   002DC0  C018  F013         	movff	turnRight135@mL,turnRight@mL
  6656   002DC4  C019  F014         	movff	turnRight135@mR,turnRight@mR
  6657   002DC8  ECEE  F010         	call	_turnRight	;wreg free
  6658   002DCC                     
  6659                           ;dc_motor.c: 193:     _delay((unsigned long)((turnRight135Delay)*(64000000/4000.0)));
  6660   002DCC  0E19               	movlw	25
  6661   002DCE  6E1B               	movwf	(??_turnRight135+1)^0,c
  6662   002DD0  0E5A               	movlw	90
  6663   002DD2  6E1A               	movwf	??_turnRight135^0,c
  6664   002DD4  0EB2               	movlw	178
  6665   002DD6                     u2437:
  6666   002DD6  2EE8               	decfsz	wreg,f,c
  6667   002DD8  D7FE               	bra	u2437
  6668   002DDA  2E1A               	decfsz	??_turnRight135^0,f,c
  6669   002DDC  D7FC               	bra	u2437
  6670   002DDE  2E1B               	decfsz	(??_turnRight135+1)^0,f,c
  6671   002DE0  D7FA               	bra	u2437
  6672   002DE2                     
  6673                           ;dc_motor.c: 194:     stop(mL, mR);
  6674   002DE2  C018  F013         	movff	turnRight135@mL,stop@mL
  6675   002DE6  C019  F014         	movff	turnRight135@mR,stop@mR
  6676   002DEA  EC9B  F012         	call	_stop	;wreg free
  6677   002DEE  0012               	return		;funcret
  6678   002DF0                     __end_of_turnRight135:
  6679                           	callstack 0
  6680                           
  6681 ;; *************** function _turnRight *****************
  6682 ;; Defined at:
  6683 ;;		line 118 in file "dc_motor.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  6686 ;;		 -> RGBC2colourcard@motorL(9), 
  6687 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  6688 ;;		 -> RGBC2colourcard@motorR(9), 
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  rightGear       1   22[COMRAM] unsigned char 
  6691 ;;  leftGear        1   21[COMRAM] unsigned char 
  6692 ;; Return value:  Size  Location     Type
  6693 ;;                  1    wreg      void 
  6694 ;; Registers used:
  6695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6704 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6705 ;;Total ram usage:        5 bytes
  6706 ;; Hardware stack levels used: 1
  6707 ;; Hardware stack levels required when called: 3
  6708 ;; This function calls:
  6709 ;;		_setMotorPWM
  6710 ;; This function is called by:
  6711 ;;		_turnRight90
  6712 ;;		_turnRight135
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text46
  6717   0021DC                     __ptext46:
  6718                           	callstack 0
  6719   0021DC                     _turnRight:
  6720                           	callstack 23
  6721   0021DC  0E2A               	movlw	42
  6722   0021DE  6E16               	movwf	turnRight@leftGear^0,c
  6723   0021E0  0E2A               	movlw	42
  6724   0021E2  6E17               	movwf	turnRight@rightGear^0,c
  6725   0021E4                     
  6726                           ;dc_motor.c: 122:     (mL->direction) = 1;
  6727   0021E4  5013               	movf	turnRight@mL^0,w,c
  6728   0021E6  6ED9               	movwf	fsr2l,c
  6729   0021E8  6ADA               	clrf	fsr2h,c
  6730   0021EA  0E01               	movlw	1
  6731   0021EC  26D9               	addwf	fsr2l,f,c
  6732   0021EE  0E01               	movlw	1
  6733   0021F0  6EDF               	movwf	indf2,c
  6734   0021F2                     
  6735                           ;dc_motor.c: 123:     (mR->direction) = 0;
  6736   0021F2  5014               	movf	turnRight@mR^0,w,c
  6737   0021F4  6ED9               	movwf	fsr2l,c
  6738   0021F6  6ADA               	clrf	fsr2h,c
  6739   0021F8  0E01               	movlw	1
  6740   0021FA  26D9               	addwf	fsr2l,f,c
  6741   0021FC  6ADF               	clrf	indf2,c
  6742                           
  6743                           ;dc_motor.c: 124:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  6744   0021FE  EF31  F011         	goto	l2759
  6745   002202                     l2747:
  6746                           
  6747                           ;dc_motor.c: 125:         if (mL->power<leftGear) {mL->power++;}
  6748   002202  5013               	movf	turnRight@mL^0,w,c
  6749   002204  6ED9               	movwf	fsr2l,c
  6750   002206  6ADA               	clrf	fsr2h,c
  6751   002208  5016               	movf	turnRight@leftGear^0,w,c
  6752   00220A  5CDE               	subwf	postinc2,w,c
  6753   00220C  B0D8               	btfsc	status,0,c
  6754   00220E  EF0B  F011         	goto	u1381
  6755   002212  EF0D  F011         	goto	u1380
  6756   002216                     u1381:
  6757   002216  EF11  F011         	goto	l260
  6758   00221A                     u1380:
  6759   00221A  5013               	movf	turnRight@mL^0,w,c
  6760   00221C  6ED9               	movwf	fsr2l,c
  6761   00221E  6ADA               	clrf	fsr2h,c
  6762   002220  2ADF               	incf	indf2,f,c
  6763   002222                     l260:
  6764                           
  6765                           ;dc_motor.c: 126:         if (mR->power<rightGear) {mR->power++;}
  6766   002222  5014               	movf	turnRight@mR^0,w,c
  6767   002224  6ED9               	movwf	fsr2l,c
  6768   002226  6ADA               	clrf	fsr2h,c
  6769   002228  5017               	movf	turnRight@rightGear^0,w,c
  6770   00222A  5CDE               	subwf	postinc2,w,c
  6771   00222C  B0D8               	btfsc	status,0,c
  6772   00222E  EF1B  F011         	goto	u1391
  6773   002232  EF1D  F011         	goto	u1390
  6774   002236                     u1391:
  6775   002236  EF21  F011         	goto	l2753
  6776   00223A                     u1390:
  6777   00223A  5014               	movf	turnRight@mR^0,w,c
  6778   00223C  6ED9               	movwf	fsr2l,c
  6779   00223E  6ADA               	clrf	fsr2h,c
  6780   002240  2ADF               	incf	indf2,f,c
  6781   002242                     l2753:
  6782                           
  6783                           ;dc_motor.c: 127:         setMotorPWM(mL);
  6784   002242  C013  F00E         	movff	turnRight@mL,setMotorPWM@m
  6785   002246  EC67  F00D         	call	_setMotorPWM	;wreg free
  6786   00224A                     
  6787                           ;dc_motor.c: 128:         setMotorPWM(mR);
  6788   00224A  C014  F00E         	movff	turnRight@mR,setMotorPWM@m
  6789   00224E  EC67  F00D         	call	_setMotorPWM	;wreg free
  6790   002252                     
  6791                           ;dc_motor.c: 129:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  6792   002252  0EA7               	movlw	167
  6793   002254  6E15               	movwf	??_turnRight^0,c
  6794   002256  0E3A               	movlw	58
  6795   002258                     u2447:
  6796   002258  2EE8               	decfsz	wreg,f,c
  6797   00225A  D7FE               	bra	u2447
  6798   00225C  2E15               	decfsz	??_turnRight^0,f,c
  6799   00225E  D7FC               	bra	u2447
  6800   002260  D000               	nop2	
  6801   002262                     l2759:
  6802                           
  6803                           ;dc_motor.c: 124:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  6804   002262  5013               	movf	turnRight@mL^0,w,c
  6805   002264  6ED9               	movwf	fsr2l,c
  6806   002266  6ADA               	clrf	fsr2h,c
  6807   002268  5016               	movf	turnRight@leftGear^0,w,c
  6808   00226A  5CDE               	subwf	postinc2,w,c
  6809   00226C  A0D8               	btfss	status,0,c
  6810   00226E  EF3B  F011         	goto	u1401
  6811   002272  EF3D  F011         	goto	u1400
  6812   002276                     u1401:
  6813   002276  EF01  F011         	goto	l2747
  6814   00227A                     u1400:
  6815   00227A  5014               	movf	turnRight@mR^0,w,c
  6816   00227C  6ED9               	movwf	fsr2l,c
  6817   00227E  6ADA               	clrf	fsr2h,c
  6818   002280  5017               	movf	turnRight@rightGear^0,w,c
  6819   002282  5CDE               	subwf	postinc2,w,c
  6820   002284  A0D8               	btfss	status,0,c
  6821   002286  EF47  F011         	goto	u1411
  6822   00228A  EF49  F011         	goto	u1410
  6823   00228E                     u1411:
  6824   00228E  EF01  F011         	goto	l2747
  6825   002292                     u1410:
  6826   002292  0012               	return		;funcret
  6827   002294                     __end_of_turnRight:
  6828                           	callstack 0
  6829                           
  6830 ;; *************** function _turnLeft135 *****************
  6831 ;; Defined at:
  6832 ;;		line 182 in file "dc_motor.c"
  6833 ;; Parameters:    Size  Location     Type
  6834 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  6835 ;;		 -> RGBC2colourcard@motorL(9), 
  6836 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  6837 ;;		 -> RGBC2colourcard@motorR(9), 
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6849 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6851 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6852 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6853 ;;Total ram usage:        4 bytes
  6854 ;; Hardware stack levels used: 1
  6855 ;; Hardware stack levels required when called: 4
  6856 ;; This function calls:
  6857 ;;		_stop
  6858 ;;		_turnLeft
  6859 ;; This function is called by:
  6860 ;;		_card_orange
  6861 ;;		_card_cyan
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           	psect	text47
  6866   002DF0                     __ptext47:
  6867                           	callstack 0
  6868   002DF0                     _turnLeft135:
  6869                           	callstack 23
  6870   002DF0                     
  6871                           ;dc_motor.c: 182: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 183: {;dc_mot
      +                          or.c: 184:     turnLeft(mL, mR);
  6872   002DF0  C018  F013         	movff	turnLeft135@mL,turnLeft@mL
  6873   002DF4  C019  F014         	movff	turnLeft135@mR,turnLeft@mR
  6874   002DF8  EC4A  F011         	call	_turnLeft	;wreg free
  6875   002DFC                     
  6876                           ;dc_motor.c: 185:     _delay((unsigned long)((turnLeft135Delay)*(64000000/4000.0)));
  6877   002DFC  0E19               	movlw	25
  6878   002DFE  6E1B               	movwf	(??_turnLeft135+1)^0,c
  6879   002E00  0E5A               	movlw	90
  6880   002E02  6E1A               	movwf	??_turnLeft135^0,c
  6881   002E04  0EB2               	movlw	178
  6882   002E06                     u2457:
  6883   002E06  2EE8               	decfsz	wreg,f,c
  6884   002E08  D7FE               	bra	u2457
  6885   002E0A  2E1A               	decfsz	??_turnLeft135^0,f,c
  6886   002E0C  D7FC               	bra	u2457
  6887   002E0E  2E1B               	decfsz	(??_turnLeft135+1)^0,f,c
  6888   002E10  D7FA               	bra	u2457
  6889   002E12                     
  6890                           ;dc_motor.c: 186:     stop(mL, mR);
  6891   002E12  C018  F013         	movff	turnLeft135@mL,stop@mL
  6892   002E16  C019  F014         	movff	turnLeft135@mR,stop@mR
  6893   002E1A  EC9B  F012         	call	_stop	;wreg free
  6894   002E1E  0012               	return		;funcret
  6895   002E20                     __end_of_turnLeft135:
  6896                           	callstack 0
  6897                           
  6898 ;; *************** function _card_blue *****************
  6899 ;; Defined at:
  6900 ;;		line 32 in file "manoeuvres.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;  mL              1   27[COMRAM] PTR struct DC_motor
  6903 ;;		 -> RGBC2colourcard@motorL(9), 
  6904 ;;  mR              1   28[COMRAM] PTR struct DC_motor
  6905 ;;		 -> RGBC2colourcard@motorR(9), 
  6906 ;;  backtrack       1   29[COMRAM] unsigned char 
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;		None
  6909 ;; Return value:  Size  Location     Type
  6910 ;;                  1    wreg      void 
  6911 ;; Registers used:
  6912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6913 ;; Tracked objects:
  6914 ;;		On entry : 0/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6918 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6920 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6921 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6922 ;;Total ram usage:        5 bytes
  6923 ;; Hardware stack levels used: 1
  6924 ;; Hardware stack levels required when called: 5
  6925 ;; This function calls:
  6926 ;;		_UTurn
  6927 ;;		_headbuttReverse
  6928 ;; This function is called by:
  6929 ;;		_pick_card
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text48
  6934   002942                     __ptext48:
  6935                           	callstack 0
  6936   002942                     _card_blue:
  6937                           	callstack 23
  6938   002942                     
  6939                           ;manoeuvres.c: 32: void card_blue(DC_motor *mL, DC_motor *mR, unsigned char backtrack);m
      +                          anoeuvres.c: 33: {;manoeuvres.c: 34:     switch (backtrack) {
  6940   002942  EFBF  F014         	goto	l2913
  6941   002946                     l2907:
  6942                           
  6943                           ;manoeuvres.c: 36:             headbuttReverse(mL, mR);
  6944   002946  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  6945   00294A  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  6946   00294E  EC10  F017         	call	_headbuttReverse	;wreg free
  6947                           
  6948                           ;manoeuvres.c: 37:             UTurn(mL, mR);
  6949   002952  C01C  F018         	movff	card_blue@mL,UTurn@mL
  6950   002956  C01D  F019         	movff	card_blue@mR,UTurn@mR
  6951   00295A  EC7F  F016         	call	_UTurn	;wreg free
  6952                           
  6953                           ;manoeuvres.c: 38:             break;
  6954   00295E  EFD4  F014         	goto	l576
  6955   002962                     l2909:
  6956                           
  6957                           ;manoeuvres.c: 40:             UTurn(mL, mR);
  6958   002962  C01C  F018         	movff	card_blue@mL,UTurn@mL
  6959   002966  C01D  F019         	movff	card_blue@mR,UTurn@mR
  6960   00296A  EC7F  F016         	call	_UTurn	;wreg free
  6961                           
  6962                           ;manoeuvres.c: 41:             headbuttReverse(mL, mR);
  6963   00296E  C01C  F018         	movff	card_blue@mL,headbuttReverse@mL
  6964   002972  C01D  F019         	movff	card_blue@mR,headbuttReverse@mR
  6965   002976  EC10  F017         	call	_headbuttReverse	;wreg free
  6966                           
  6967                           ;manoeuvres.c: 42:             break;
  6968   00297A  EFD4  F014         	goto	l576
  6969   00297E                     l2913:
  6970   00297E  501E               	movf	card_blue@backtrack^0,w,c
  6971   002980  6E1F               	movwf	??_card_blue^0,c
  6972   002982  6A20               	clrf	(??_card_blue+1)^0,c
  6973                           
  6974                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6975                           ; Switch size 1, requested type "simple"
  6976                           ; Number of cases is 1, Range of values is 0 to 0
  6977                           ; switch strategies available:
  6978                           ; Name         Instructions Cycles
  6979                           ; simple_byte            4     3 (average)
  6980                           ;	Chosen strategy is simple_byte
  6981   002984  5020               	movf	(??_card_blue+1)^0,w,c
  6982   002986  0A00               	xorlw	0	; case 0
  6983   002988  B4D8               	btfsc	status,2,c
  6984   00298A  EFC9  F014         	goto	l4075
  6985   00298E  EFD4  F014         	goto	l576
  6986   002992                     l4075:
  6987                           
  6988                           ; Switch size 1, requested type "simple"
  6989                           ; Number of cases is 2, Range of values is 0 to 1
  6990                           ; switch strategies available:
  6991                           ; Name         Instructions Cycles
  6992                           ; simple_byte            7     4 (average)
  6993                           ;	Chosen strategy is simple_byte
  6994   002992  501F               	movf	??_card_blue^0,w,c
  6995   002994  0A00               	xorlw	0	; case 0
  6996   002996  B4D8               	btfsc	status,2,c
  6997   002998  EFA3  F014         	goto	l2907
  6998   00299C  0A01               	xorlw	1	; case 1
  6999   00299E  B4D8               	btfsc	status,2,c
  7000   0029A0  EFB1  F014         	goto	l2909
  7001   0029A4  EFD4  F014         	goto	l576
  7002   0029A8                     l576:
  7003   0029A8  0012               	return		;funcret
  7004   0029AA                     __end_of_card_blue:
  7005                           	callstack 0
  7006                           
  7007 ;; *************** function _headbuttReverse *****************
  7008 ;; Defined at:
  7009 ;;		line 206 in file "dc_motor.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7012 ;;		 -> RGBC2colourcard@motorL(9), 
  7013 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7014 ;;		 -> RGBC2colourcard@motorR(9), 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;		None
  7017 ;; Return value:  Size  Location     Type
  7018 ;;                  1    wreg      void 
  7019 ;; Registers used:
  7020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7028 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7029 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7030 ;;Total ram usage:        4 bytes
  7031 ;; Hardware stack levels used: 1
  7032 ;; Hardware stack levels required when called: 4
  7033 ;; This function calls:
  7034 ;;		_fullSpeedReverse
  7035 ;;		_stop
  7036 ;; This function is called by:
  7037 ;;		_card_red
  7038 ;;		_card_green
  7039 ;;		_card_blue
  7040 ;;		_card_yellow
  7041 ;;		_card_pink
  7042 ;;		_card_orange
  7043 ;;		_card_cyan
  7044 ;;		_card_white
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text49
  7049   002E20                     __ptext49:
  7050                           	callstack 0
  7051   002E20                     _headbuttReverse:
  7052                           	callstack 23
  7053   002E20                     
  7054                           ;dc_motor.c: 206: void headbuttReverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 207: {;dc
      +                          _motor.c: 208:     fullSpeedReverse(mL, mR);
  7055   002E20  C018  F013         	movff	headbuttReverse@mL,fullSpeedReverse@mL
  7056   002E24  C019  F014         	movff	headbuttReverse@mR,fullSpeedReverse@mR
  7057   002E28  ECA6  F011         	call	_fullSpeedReverse	;wreg free
  7058   002E2C                     
  7059                           ;dc_motor.c: 209:     _delay((unsigned long)((headbuttDelay)*(64000000/4000.0)));
  7060   002E2C  0E06               	movlw	6
  7061   002E2E  6E1B               	movwf	(??_headbuttReverse+1)^0,c
  7062   002E30  0EAF               	movlw	175
  7063   002E32  6E1A               	movwf	??_headbuttReverse^0,c
  7064   002E34  0E86               	movlw	134
  7065   002E36                     u2467:
  7066   002E36  2EE8               	decfsz	wreg,f,c
  7067   002E38  D7FE               	bra	u2467
  7068   002E3A  2E1A               	decfsz	??_headbuttReverse^0,f,c
  7069   002E3C  D7FC               	bra	u2467
  7070   002E3E  2E1B               	decfsz	(??_headbuttReverse+1)^0,f,c
  7071   002E40  D7FA               	bra	u2467
  7072   002E42                     
  7073                           ;dc_motor.c: 210:     stop(mL, mR);
  7074   002E42  C018  F013         	movff	headbuttReverse@mL,stop@mL
  7075   002E46  C019  F014         	movff	headbuttReverse@mR,stop@mR
  7076   002E4A  EC9B  F012         	call	_stop	;wreg free
  7077   002E4E  0012               	return		;funcret
  7078   002E50                     __end_of_headbuttReverse:
  7079                           	callstack 0
  7080                           
  7081 ;; *************** function _fullSpeedReverse *****************
  7082 ;; Defined at:
  7083 ;;		line 150 in file "dc_motor.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7086 ;;		 -> RGBC2colourcard@motorL(9), 
  7087 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7088 ;;		 -> RGBC2colourcard@motorR(9), 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;  rightGear       1   22[COMRAM] unsigned char 
  7091 ;;  leftGear        1   21[COMRAM] unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      void 
  7094 ;; Registers used:
  7095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7101 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7104 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7105 ;;Total ram usage:        5 bytes
  7106 ;; Hardware stack levels used: 1
  7107 ;; Hardware stack levels required when called: 3
  7108 ;; This function calls:
  7109 ;;		_setMotorPWM
  7110 ;; This function is called by:
  7111 ;;		_headbuttReverse
  7112 ;;		_squareReverse
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	text50
  7117   00234C                     __ptext50:
  7118                           	callstack 0
  7119   00234C                     _fullSpeedReverse:
  7120                           	callstack 23
  7121   00234C  0E14               	movlw	20
  7122   00234E  6E16               	movwf	fullSpeedReverse@leftGear^0,c
  7123   002350  0E14               	movlw	20
  7124   002352  6E17               	movwf	fullSpeedReverse@rightGear^0,c
  7125   002354                     
  7126                           ;dc_motor.c: 154:     (mL -> direction) = 0;
  7127   002354  5013               	movf	fullSpeedReverse@mL^0,w,c
  7128   002356  6ED9               	movwf	fsr2l,c
  7129   002358  6ADA               	clrf	fsr2h,c
  7130   00235A  0E01               	movlw	1
  7131   00235C  26D9               	addwf	fsr2l,f,c
  7132   00235E  6ADF               	clrf	indf2,c
  7133   002360                     
  7134                           ;dc_motor.c: 155:     (mR -> direction) = 0;
  7135   002360  5014               	movf	fullSpeedReverse@mR^0,w,c
  7136   002362  6ED9               	movwf	fsr2l,c
  7137   002364  6ADA               	clrf	fsr2h,c
  7138   002366  0E01               	movlw	1
  7139   002368  26D9               	addwf	fsr2l,f,c
  7140   00236A  6ADF               	clrf	indf2,c
  7141                           
  7142                           ;dc_motor.c: 156:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7143   00236C  EFE8  F011         	goto	l2781
  7144   002370                     l2769:
  7145                           
  7146                           ;dc_motor.c: 157:         if (mL->power<leftGear) {mL->power++;}
  7147   002370  5013               	movf	fullSpeedReverse@mL^0,w,c
  7148   002372  6ED9               	movwf	fsr2l,c
  7149   002374  6ADA               	clrf	fsr2h,c
  7150   002376  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  7151   002378  5CDE               	subwf	postinc2,w,c
  7152   00237A  B0D8               	btfsc	status,0,c
  7153   00237C  EFC2  F011         	goto	u1421
  7154   002380  EFC4  F011         	goto	u1420
  7155   002384                     u1421:
  7156   002384  EFC8  F011         	goto	l276
  7157   002388                     u1420:
  7158   002388  5013               	movf	fullSpeedReverse@mL^0,w,c
  7159   00238A  6ED9               	movwf	fsr2l,c
  7160   00238C  6ADA               	clrf	fsr2h,c
  7161   00238E  2ADF               	incf	indf2,f,c
  7162   002390                     l276:
  7163                           
  7164                           ;dc_motor.c: 158:         if (mR->power<rightGear) {mR->power++;}
  7165   002390  5014               	movf	fullSpeedReverse@mR^0,w,c
  7166   002392  6ED9               	movwf	fsr2l,c
  7167   002394  6ADA               	clrf	fsr2h,c
  7168   002396  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  7169   002398  5CDE               	subwf	postinc2,w,c
  7170   00239A  B0D8               	btfsc	status,0,c
  7171   00239C  EFD2  F011         	goto	u1431
  7172   0023A0  EFD4  F011         	goto	u1430
  7173   0023A4                     u1431:
  7174   0023A4  EFD8  F011         	goto	l2775
  7175   0023A8                     u1430:
  7176   0023A8  5014               	movf	fullSpeedReverse@mR^0,w,c
  7177   0023AA  6ED9               	movwf	fsr2l,c
  7178   0023AC  6ADA               	clrf	fsr2h,c
  7179   0023AE  2ADF               	incf	indf2,f,c
  7180   0023B0                     l2775:
  7181                           
  7182                           ;dc_motor.c: 159:         setMotorPWM(mL);
  7183   0023B0  C013  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  7184   0023B4  EC67  F00D         	call	_setMotorPWM	;wreg free
  7185   0023B8                     
  7186                           ;dc_motor.c: 160:         setMotorPWM(mR);
  7187   0023B8  C014  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  7188   0023BC  EC67  F00D         	call	_setMotorPWM	;wreg free
  7189   0023C0                     
  7190                           ;dc_motor.c: 161:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7191   0023C0  0EA7               	movlw	167
  7192   0023C2  6E15               	movwf	??_fullSpeedReverse^0,c
  7193   0023C4  0E3A               	movlw	58
  7194   0023C6                     u2477:
  7195   0023C6  2EE8               	decfsz	wreg,f,c
  7196   0023C8  D7FE               	bra	u2477
  7197   0023CA  2E15               	decfsz	??_fullSpeedReverse^0,f,c
  7198   0023CC  D7FC               	bra	u2477
  7199   0023CE  D000               	nop2	
  7200   0023D0                     l2781:
  7201                           
  7202                           ;dc_motor.c: 156:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7203   0023D0  5013               	movf	fullSpeedReverse@mL^0,w,c
  7204   0023D2  6ED9               	movwf	fsr2l,c
  7205   0023D4  6ADA               	clrf	fsr2h,c
  7206   0023D6  5016               	movf	fullSpeedReverse@leftGear^0,w,c
  7207   0023D8  5CDE               	subwf	postinc2,w,c
  7208   0023DA  A0D8               	btfss	status,0,c
  7209   0023DC  EFF2  F011         	goto	u1441
  7210   0023E0  EFF4  F011         	goto	u1440
  7211   0023E4                     u1441:
  7212   0023E4  EFB8  F011         	goto	l2769
  7213   0023E8                     u1440:
  7214   0023E8  5014               	movf	fullSpeedReverse@mR^0,w,c
  7215   0023EA  6ED9               	movwf	fsr2l,c
  7216   0023EC  6ADA               	clrf	fsr2h,c
  7217   0023EE  5017               	movf	fullSpeedReverse@rightGear^0,w,c
  7218   0023F0  5CDE               	subwf	postinc2,w,c
  7219   0023F2  A0D8               	btfss	status,0,c
  7220   0023F4  EFFE  F011         	goto	u1451
  7221   0023F8  EF00  F012         	goto	u1450
  7222   0023FC                     u1451:
  7223   0023FC  EFB8  F011         	goto	l2769
  7224   002400                     u1450:
  7225   002400  0012               	return		;funcret
  7226   002402                     __end_of_fullSpeedReverse:
  7227                           	callstack 0
  7228                           
  7229 ;; *************** function _UTurn *****************
  7230 ;; Defined at:
  7231 ;;		line 198 in file "dc_motor.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  mL              1   23[COMRAM] PTR struct DC_motor
  7234 ;;		 -> RGBC2colourcard@motorL(9), 
  7235 ;;  mR              1   24[COMRAM] PTR struct DC_motor
  7236 ;;		 -> RGBC2colourcard@motorR(9), 
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;		None
  7239 ;; Return value:  Size  Location     Type
  7240 ;;                  1    wreg      void 
  7241 ;; Registers used:
  7242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7243 ;; Tracked objects:
  7244 ;;		On entry : 0/0
  7245 ;;		On exit  : 0/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7248 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7250 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7251 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7252 ;;Total ram usage:        4 bytes
  7253 ;; Hardware stack levels used: 1
  7254 ;; Hardware stack levels required when called: 4
  7255 ;; This function calls:
  7256 ;;		_stop
  7257 ;;		_turnLeft
  7258 ;; This function is called by:
  7259 ;;		_card_blue
  7260 ;;		_card_white
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           	psect	text51
  7265   002CFE                     __ptext51:
  7266                           	callstack 0
  7267   002CFE                     _UTurn:
  7268                           	callstack 23
  7269   002CFE                     
  7270                           ;dc_motor.c: 198: void UTurn(DC_motor *mL, DC_motor *mR);dc_motor.c: 199: {;dc_motor.c: 
      +                          200:     turnLeft(mL, mR);
  7271   002CFE  C018  F013         	movff	UTurn@mL,turnLeft@mL
  7272   002D02  C019  F014         	movff	UTurn@mR,turnLeft@mR
  7273   002D06  EC4A  F011         	call	_turnLeft	;wreg free
  7274   002D0A                     
  7275                           ;dc_motor.c: 201:     _delay((unsigned long)((turn180Delay)*(64000000/4000.0)));
  7276   002D0A  0E2A               	movlw	42
  7277   002D0C  6E1B               	movwf	(??_UTurn+1)^0,c
  7278   002D0E  0E66               	movlw	102
  7279   002D10  6E1A               	movwf	??_UTurn^0,c
  7280   002D12  0E49               	movlw	73
  7281   002D14                     u2487:
  7282   002D14  2EE8               	decfsz	wreg,f,c
  7283   002D16  D7FE               	bra	u2487
  7284   002D18  2E1A               	decfsz	??_UTurn^0,f,c
  7285   002D1A  D7FC               	bra	u2487
  7286   002D1C  2E1B               	decfsz	(??_UTurn+1)^0,f,c
  7287   002D1E  D7FA               	bra	u2487
  7288   002D20  0000               	nop	
  7289   002D22                     
  7290                           ;dc_motor.c: 202:     stop(mL, mR);
  7291   002D22  C018  F013         	movff	UTurn@mL,stop@mL
  7292   002D26  C019  F014         	movff	UTurn@mR,stop@mR
  7293   002D2A  EC9B  F012         	call	_stop	;wreg free
  7294   002D2E  0012               	return		;funcret
  7295   002D30                     __end_of_UTurn:
  7296                           	callstack 0
  7297                           
  7298 ;; *************** function _turnLeft *****************
  7299 ;; Defined at:
  7300 ;;		line 102 in file "dc_motor.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7303 ;;		 -> RGBC2colourcard@motorL(9), 
  7304 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7305 ;;		 -> RGBC2colourcard@motorR(9), 
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;  rightGear       1   22[COMRAM] unsigned char 
  7308 ;;  leftGear        1   21[COMRAM] unsigned char 
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  1    wreg      void 
  7311 ;; Registers used:
  7312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7318 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7319 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7320 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7321 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7322 ;;Total ram usage:        5 bytes
  7323 ;; Hardware stack levels used: 1
  7324 ;; Hardware stack levels required when called: 3
  7325 ;; This function calls:
  7326 ;;		_setMotorPWM
  7327 ;; This function is called by:
  7328 ;;		_turnLeft90
  7329 ;;		_turnLeft135
  7330 ;;		_UTurn
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text52
  7335   002294                     __ptext52:
  7336                           	callstack 0
  7337   002294                     _turnLeft:
  7338                           	callstack 23
  7339   002294  0E2A               	movlw	42
  7340   002296  6E16               	movwf	turnLeft@leftGear^0,c
  7341   002298  0E2A               	movlw	42
  7342   00229A  6E17               	movwf	turnLeft@rightGear^0,c
  7343   00229C                     
  7344                           ;dc_motor.c: 106:     (mL->direction) = 0;
  7345   00229C  5013               	movf	turnLeft@mL^0,w,c
  7346   00229E  6ED9               	movwf	fsr2l,c
  7347   0022A0  6ADA               	clrf	fsr2h,c
  7348   0022A2  0E01               	movlw	1
  7349   0022A4  26D9               	addwf	fsr2l,f,c
  7350   0022A6  6ADF               	clrf	indf2,c
  7351   0022A8                     
  7352                           ;dc_motor.c: 107:     (mR->direction) = 1;
  7353   0022A8  5014               	movf	turnLeft@mR^0,w,c
  7354   0022AA  6ED9               	movwf	fsr2l,c
  7355   0022AC  6ADA               	clrf	fsr2h,c
  7356   0022AE  0E01               	movlw	1
  7357   0022B0  26D9               	addwf	fsr2l,f,c
  7358   0022B2  0E01               	movlw	1
  7359   0022B4  6EDF               	movwf	indf2,c
  7360                           
  7361                           ;dc_motor.c: 108:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7362   0022B6  EF8D  F011         	goto	l2737
  7363   0022BA                     l2725:
  7364                           
  7365                           ;dc_motor.c: 109:         if (mL->power<leftGear) {mL->power++;}
  7366   0022BA  5013               	movf	turnLeft@mL^0,w,c
  7367   0022BC  6ED9               	movwf	fsr2l,c
  7368   0022BE  6ADA               	clrf	fsr2h,c
  7369   0022C0  5016               	movf	turnLeft@leftGear^0,w,c
  7370   0022C2  5CDE               	subwf	postinc2,w,c
  7371   0022C4  B0D8               	btfsc	status,0,c
  7372   0022C6  EF67  F011         	goto	u1341
  7373   0022CA  EF69  F011         	goto	u1340
  7374   0022CE                     u1341:
  7375   0022CE  EF6D  F011         	goto	l252
  7376   0022D2                     u1340:
  7377   0022D2  5013               	movf	turnLeft@mL^0,w,c
  7378   0022D4  6ED9               	movwf	fsr2l,c
  7379   0022D6  6ADA               	clrf	fsr2h,c
  7380   0022D8  2ADF               	incf	indf2,f,c
  7381   0022DA                     l252:
  7382                           
  7383                           ;dc_motor.c: 110:         if (mR->power<rightGear) {mR->power++;}
  7384   0022DA  5014               	movf	turnLeft@mR^0,w,c
  7385   0022DC  6ED9               	movwf	fsr2l,c
  7386   0022DE  6ADA               	clrf	fsr2h,c
  7387   0022E0  5017               	movf	turnLeft@rightGear^0,w,c
  7388   0022E2  5CDE               	subwf	postinc2,w,c
  7389   0022E4  B0D8               	btfsc	status,0,c
  7390   0022E6  EF77  F011         	goto	u1351
  7391   0022EA  EF79  F011         	goto	u1350
  7392   0022EE                     u1351:
  7393   0022EE  EF7D  F011         	goto	l2731
  7394   0022F2                     u1350:
  7395   0022F2  5014               	movf	turnLeft@mR^0,w,c
  7396   0022F4  6ED9               	movwf	fsr2l,c
  7397   0022F6  6ADA               	clrf	fsr2h,c
  7398   0022F8  2ADF               	incf	indf2,f,c
  7399   0022FA                     l2731:
  7400                           
  7401                           ;dc_motor.c: 111:         setMotorPWM(mL);
  7402   0022FA  C013  F00E         	movff	turnLeft@mL,setMotorPWM@m
  7403   0022FE  EC67  F00D         	call	_setMotorPWM	;wreg free
  7404   002302                     
  7405                           ;dc_motor.c: 112:         setMotorPWM(mR);
  7406   002302  C014  F00E         	movff	turnLeft@mR,setMotorPWM@m
  7407   002306  EC67  F00D         	call	_setMotorPWM	;wreg free
  7408   00230A                     
  7409                           ;dc_motor.c: 113:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7410   00230A  0EA7               	movlw	167
  7411   00230C  6E15               	movwf	??_turnLeft^0,c
  7412   00230E  0E3A               	movlw	58
  7413   002310                     u2497:
  7414   002310  2EE8               	decfsz	wreg,f,c
  7415   002312  D7FE               	bra	u2497
  7416   002314  2E15               	decfsz	??_turnLeft^0,f,c
  7417   002316  D7FC               	bra	u2497
  7418   002318  D000               	nop2	
  7419   00231A                     l2737:
  7420                           
  7421                           ;dc_motor.c: 108:     while ((mL->power<leftGear) || (mR->power<rightGear)){
  7422   00231A  5013               	movf	turnLeft@mL^0,w,c
  7423   00231C  6ED9               	movwf	fsr2l,c
  7424   00231E  6ADA               	clrf	fsr2h,c
  7425   002320  5016               	movf	turnLeft@leftGear^0,w,c
  7426   002322  5CDE               	subwf	postinc2,w,c
  7427   002324  A0D8               	btfss	status,0,c
  7428   002326  EF97  F011         	goto	u1361
  7429   00232A  EF99  F011         	goto	u1360
  7430   00232E                     u1361:
  7431   00232E  EF5D  F011         	goto	l2725
  7432   002332                     u1360:
  7433   002332  5014               	movf	turnLeft@mR^0,w,c
  7434   002334  6ED9               	movwf	fsr2l,c
  7435   002336  6ADA               	clrf	fsr2h,c
  7436   002338  5017               	movf	turnLeft@rightGear^0,w,c
  7437   00233A  5CDE               	subwf	postinc2,w,c
  7438   00233C  A0D8               	btfss	status,0,c
  7439   00233E  EFA3  F011         	goto	u1371
  7440   002342  EFA5  F011         	goto	u1370
  7441   002346                     u1371:
  7442   002346  EF5D  F011         	goto	l2725
  7443   00234A                     u1370:
  7444   00234A  0012               	return		;funcret
  7445   00234C                     __end_of_turnLeft:
  7446                           	callstack 0
  7447                           
  7448 ;; *************** function _stop *****************
  7449 ;; Defined at:
  7450 ;;		line 88 in file "dc_motor.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;  mL              1   18[COMRAM] PTR struct DC_motor
  7453 ;;		 -> RGBC2colourcard@motorL(9), 
  7454 ;;  mR              1   19[COMRAM] PTR struct DC_motor
  7455 ;;		 -> RGBC2colourcard@motorR(9), 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  1    wreg      void 
  7460 ;; Registers used:
  7461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7470 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7471 ;;Total ram usage:        3 bytes
  7472 ;; Hardware stack levels used: 1
  7473 ;; Hardware stack levels required when called: 3
  7474 ;; This function calls:
  7475 ;;		_setMotorPWM
  7476 ;; This function is called by:
  7477 ;;		_turnLeft90
  7478 ;;		_turnRight90
  7479 ;;		_turnLeft135
  7480 ;;		_turnRight135
  7481 ;;		_UTurn
  7482 ;;		_headbuttReverse
  7483 ;;		_squareReverse
  7484 ;;		_return_to_sender
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text53
  7489   002536                     __ptext53:
  7490                           	callstack 0
  7491   002536                     _stop:
  7492                           	callstack 23
  7493   002536                     
  7494                           ;dc_motor.c: 88: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 92:
      +                               while ((mL->power>0) || (mR->power>0)){
  7495   002536  EFCB  F012         	goto	l2715
  7496   00253A                     l2701:
  7497                           
  7498                           ;dc_motor.c: 93:         if (mL->power>0) {mL->power--;}
  7499   00253A  5013               	movf	stop@mL^0,w,c
  7500   00253C  6ED9               	movwf	fsr2l,c
  7501   00253E  6ADA               	clrf	fsr2h,c
  7502   002540  50DF               	movf	indf2,w,c
  7503   002542  B4D8               	btfsc	status,2,c
  7504   002544  EFA6  F012         	goto	u1301
  7505   002548  EFA8  F012         	goto	u1300
  7506   00254C                     u1301:
  7507   00254C  EFAC  F012         	goto	l2705
  7508   002550                     u1300:
  7509   002550  5013               	movf	stop@mL^0,w,c
  7510   002552  6ED9               	movwf	fsr2l,c
  7511   002554  6ADA               	clrf	fsr2h,c
  7512   002556  06DF               	decf	indf2,f,c
  7513   002558                     l2705:
  7514                           
  7515                           ;dc_motor.c: 94:         if (mR->power>0) {mR->power--;}
  7516   002558  5014               	movf	stop@mR^0,w,c
  7517   00255A  6ED9               	movwf	fsr2l,c
  7518   00255C  6ADA               	clrf	fsr2h,c
  7519   00255E  50DF               	movf	indf2,w,c
  7520   002560  B4D8               	btfsc	status,2,c
  7521   002562  EFB5  F012         	goto	u1311
  7522   002566  EFB7  F012         	goto	u1310
  7523   00256A                     u1311:
  7524   00256A  EFBB  F012         	goto	l2709
  7525   00256E                     u1310:
  7526   00256E  5014               	movf	stop@mR^0,w,c
  7527   002570  6ED9               	movwf	fsr2l,c
  7528   002572  6ADA               	clrf	fsr2h,c
  7529   002574  06DF               	decf	indf2,f,c
  7530   002576                     l2709:
  7531                           
  7532                           ;dc_motor.c: 95:         setMotorPWM(mL);
  7533   002576  C013  F00E         	movff	stop@mL,setMotorPWM@m
  7534   00257A  EC67  F00D         	call	_setMotorPWM	;wreg free
  7535   00257E                     
  7536                           ;dc_motor.c: 96:         setMotorPWM(mR);
  7537   00257E  C014  F00E         	movff	stop@mR,setMotorPWM@m
  7538   002582  EC67  F00D         	call	_setMotorPWM	;wreg free
  7539   002586                     
  7540                           ;dc_motor.c: 97:         _delay((unsigned long)((rampDelay)*(64000000/4000.0)));
  7541   002586  0EA7               	movlw	167
  7542   002588  6E15               	movwf	??_stop^0,c
  7543   00258A  0E3A               	movlw	58
  7544   00258C                     u2507:
  7545   00258C  2EE8               	decfsz	wreg,f,c
  7546   00258E  D7FE               	bra	u2507
  7547   002590  2E15               	decfsz	??_stop^0,f,c
  7548   002592  D7FC               	bra	u2507
  7549   002594  D000               	nop2	
  7550   002596                     l2715:
  7551                           
  7552                           ;dc_motor.c: 92:     while ((mL->power>0) || (mR->power>0)){
  7553   002596  5013               	movf	stop@mL^0,w,c
  7554   002598  6ED9               	movwf	fsr2l,c
  7555   00259A  6ADA               	clrf	fsr2h,c
  7556   00259C  50DF               	movf	indf2,w,c
  7557   00259E  A4D8               	btfss	status,2,c
  7558   0025A0  EFD4  F012         	goto	u1321
  7559   0025A4  EFD6  F012         	goto	u1320
  7560   0025A8                     u1321:
  7561   0025A8  EF9D  F012         	goto	l2701
  7562   0025AC                     u1320:
  7563   0025AC  5014               	movf	stop@mR^0,w,c
  7564   0025AE  6ED9               	movwf	fsr2l,c
  7565   0025B0  6ADA               	clrf	fsr2h,c
  7566   0025B2  50DF               	movf	indf2,w,c
  7567   0025B4  A4D8               	btfss	status,2,c
  7568   0025B6  EFDF  F012         	goto	u1331
  7569   0025BA  EFE1  F012         	goto	u1330
  7570   0025BE                     u1331:
  7571   0025BE  EF9D  F012         	goto	l2701
  7572   0025C2                     u1330:
  7573   0025C2  0012               	return		;funcret
  7574   0025C4                     __end_of_stop:
  7575                           	callstack 0
  7576                           
  7577 ;; *************** function _setMotorPWM *****************
  7578 ;; Defined at:
  7579 ;;		line 65 in file "dc_motor.c"
  7580 ;; Parameters:    Size  Location     Type
  7581 ;;  m               1   13[COMRAM] PTR struct DC_motor
  7582 ;;		 -> RGBC2colourcard@motorR(9), RGBC2colourcard@motorL(9), 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;  negDuty         1   17[COMRAM] unsigned char 
  7585 ;;  posDuty         1   16[COMRAM] unsigned char 
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      void 
  7588 ;; Registers used:
  7589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7595 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7598 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7599 ;;Total ram usage:        5 bytes
  7600 ;; Hardware stack levels used: 1
  7601 ;; Hardware stack levels required when called: 2
  7602 ;; This function calls:
  7603 ;;		___lwdiv
  7604 ;;		___wmul
  7605 ;; This function is called by:
  7606 ;;		_stop
  7607 ;;		_turnLeft
  7608 ;;		_turnRight
  7609 ;;		_fullSpeedReverse
  7610 ;;		_fullSpeedAhead
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614                           	psect	text54
  7615   001ACE                     __ptext54:
  7616                           	callstack 0
  7617   001ACE                     _setMotorPWM:
  7618                           	callstack 23
  7619   001ACE                     
  7620                           ;dc_motor.c: 65: void setMotorPWM(DC_motor *m);dc_motor.c: 66: {;dc_motor.c: 67:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 69:     if(m->brakemode) {
  7621   001ACE  500E               	movf	setMotorPWM@m^0,w,c
  7622   001AD0  6ED9               	movwf	fsr2l,c
  7623   001AD2  6ADA               	clrf	fsr2h,c
  7624   001AD4  0E02               	movlw	2
  7625   001AD6  26D9               	addwf	fsr2l,f,c
  7626   001AD8  50DF               	movf	indf2,w,c
  7627   001ADA  B4D8               	btfsc	status,2,c
  7628   001ADC  EF72  F00D         	goto	u1281
  7629   001AE0  EF74  F00D         	goto	u1280
  7630   001AE4                     u1281:
  7631   001AE4  EFA4  F00D         	goto	l2689
  7632   001AE8                     u1280:
  7633   001AE8                     
  7634                           ;dc_motor.c: 70:         posDuty=(unsigned char)(m->PWMperiod - ((unsigned int)(m->power
      +                          )*(m->PWMperiod))/100);
  7635   001AE8  500E               	movf	setMotorPWM@m^0,w,c
  7636   001AEA  6ED9               	movwf	fsr2l,c
  7637   001AEC  6ADA               	clrf	fsr2h,c
  7638   001AEE  50DF               	movf	indf2,w,c
  7639   001AF0  6E0F               	movwf	??_setMotorPWM^0,c
  7640   001AF2  500F               	movf	??_setMotorPWM^0,w,c
  7641   001AF4  6E01               	movwf	___wmul@multiplier^0,c
  7642   001AF6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  7643   001AF8  500E               	movf	setMotorPWM@m^0,w,c
  7644   001AFA  6ED9               	movwf	fsr2l,c
  7645   001AFC  6ADA               	clrf	fsr2h,c
  7646   001AFE  0E03               	movlw	3
  7647   001B00  26D9               	addwf	fsr2l,f,c
  7648   001B02  CFDE F003          	movff	postinc2,___wmul@multiplicand
  7649   001B06  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  7650   001B0A  EC7B  F017         	call	___wmul	;wreg free
  7651   001B0E  C001  F007         	movff	?___wmul,___lwdiv@dividend
  7652   001B12  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  7653   001B16  0E00               	movlw	0
  7654   001B18  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  7655   001B1A  0E64               	movlw	100
  7656   001B1C  6E09               	movwf	___lwdiv@divisor^0,c
  7657   001B1E  EC62  F013         	call	___lwdiv	;wreg free
  7658   001B22  500E               	movf	setMotorPWM@m^0,w,c
  7659   001B24  6ED9               	movwf	fsr2l,c
  7660   001B26  6ADA               	clrf	fsr2h,c
  7661   001B28  0E03               	movlw	3
  7662   001B2A  26D9               	addwf	fsr2l,f,c
  7663   001B2C  50DF               	movf	indf2,w,c
  7664   001B2E  6E10               	movwf	(??_setMotorPWM+1)^0,c
  7665   001B30  5007               	movf	?___lwdiv^0,w,c
  7666   001B32  5C10               	subwf	(??_setMotorPWM+1)^0,w,c
  7667   001B34  6E11               	movwf	setMotorPWM@posDuty^0,c
  7668   001B36                     
  7669                           ;dc_motor.c: 71:         negDuty=(unsigned char)(m->PWMperiod);
  7670   001B36  500E               	movf	setMotorPWM@m^0,w,c
  7671   001B38  6ED9               	movwf	fsr2l,c
  7672   001B3A  6ADA               	clrf	fsr2h,c
  7673   001B3C  0E03               	movlw	3
  7674   001B3E  26D9               	addwf	fsr2l,f,c
  7675   001B40  50DF               	movf	indf2,w,c
  7676   001B42  6E12               	movwf	setMotorPWM@negDuty^0,c
  7677                           
  7678                           ;dc_motor.c: 72:     }
  7679   001B44  EFC5  F00D         	goto	l2693
  7680   001B48                     l2689:
  7681                           
  7682                           ;dc_motor.c: 74:         posDuty=0;
  7683   001B48  0E00               	movlw	0
  7684   001B4A  6E11               	movwf	setMotorPWM@posDuty^0,c
  7685   001B4C                     
  7686                           ;dc_motor.c: 75:   negDuty=(unsigned char)(((unsigned int)(m->power)*(m->PWMperiod))/100
      +                          );
  7687   001B4C  500E               	movf	setMotorPWM@m^0,w,c
  7688   001B4E  6ED9               	movwf	fsr2l,c
  7689   001B50  6ADA               	clrf	fsr2h,c
  7690   001B52  50DF               	movf	indf2,w,c
  7691   001B54  6E0F               	movwf	??_setMotorPWM^0,c
  7692   001B56  500F               	movf	??_setMotorPWM^0,w,c
  7693   001B58  6E01               	movwf	___wmul@multiplier^0,c
  7694   001B5A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  7695   001B5C  500E               	movf	setMotorPWM@m^0,w,c
  7696   001B5E  6ED9               	movwf	fsr2l,c
  7697   001B60  6ADA               	clrf	fsr2h,c
  7698   001B62  0E03               	movlw	3
  7699   001B64  26D9               	addwf	fsr2l,f,c
  7700   001B66  CFDE F003          	movff	postinc2,___wmul@multiplicand
  7701   001B6A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  7702   001B6E  EC7B  F017         	call	___wmul	;wreg free
  7703   001B72  C001  F007         	movff	?___wmul,___lwdiv@dividend
  7704   001B76  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  7705   001B7A  0E00               	movlw	0
  7706   001B7C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  7707   001B7E  0E64               	movlw	100
  7708   001B80  6E09               	movwf	___lwdiv@divisor^0,c
  7709   001B82  EC62  F013         	call	___lwdiv	;wreg free
  7710   001B86  5007               	movf	?___lwdiv^0,w,c
  7711   001B88  6E12               	movwf	setMotorPWM@negDuty^0,c
  7712   001B8A                     l2693:
  7713                           
  7714                           ;dc_motor.c: 78:     if (m->direction) {
  7715   001B8A  500E               	movf	setMotorPWM@m^0,w,c
  7716   001B8C  6ED9               	movwf	fsr2l,c
  7717   001B8E  6ADA               	clrf	fsr2h,c
  7718   001B90  0E01               	movlw	1
  7719   001B92  26D9               	addwf	fsr2l,f,c
  7720   001B94  50DF               	movf	indf2,w,c
  7721   001B96  B4D8               	btfsc	status,2,c
  7722   001B98  EFD0  F00D         	goto	u1291
  7723   001B9C  EFD2  F00D         	goto	u1290
  7724   001BA0                     u1291:
  7725   001BA0  EFF2  F00D         	goto	l2697
  7726   001BA4                     u1290:
  7727   001BA4                     
  7728                           ;dc_motor.c: 79:         *(m->posDutyHighByte)=posDuty;
  7729   001BA4  500E               	movf	setMotorPWM@m^0,w,c
  7730   001BA6  6ED9               	movwf	fsr2l,c
  7731   001BA8  6ADA               	clrf	fsr2h,c
  7732   001BAA  0E05               	movlw	5
  7733   001BAC  26D9               	addwf	fsr2l,f,c
  7734   001BAE  CFDE F00F          	movff	postinc2,??_setMotorPWM
  7735   001BB2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  7736   001BB6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  7737   001BBA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7738   001BBE  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  7739                           
  7740                           ;dc_motor.c: 80:         *(m->negDutyHighByte)=negDuty;
  7741   001BC2  500E               	movf	setMotorPWM@m^0,w,c
  7742   001BC4  6ED9               	movwf	fsr2l,c
  7743   001BC6  6ADA               	clrf	fsr2h,c
  7744   001BC8  0E07               	movlw	7
  7745   001BCA  26D9               	addwf	fsr2l,f,c
  7746   001BCC  CFDE F00F          	movff	postinc2,??_setMotorPWM
  7747   001BD0  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  7748   001BD4  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  7749   001BD8  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7750   001BDC  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  7751                           
  7752                           ;dc_motor.c: 81:     } else {
  7753   001BE0  EF10  F00E         	goto	l239
  7754   001BE4                     l2697:
  7755                           
  7756                           ;dc_motor.c: 82:         *(m->posDutyHighByte)=negDuty;
  7757   001BE4  500E               	movf	setMotorPWM@m^0,w,c
  7758   001BE6  6ED9               	movwf	fsr2l,c
  7759   001BE8  6ADA               	clrf	fsr2h,c
  7760   001BEA  0E05               	movlw	5
  7761   001BEC  26D9               	addwf	fsr2l,f,c
  7762   001BEE  CFDE F00F          	movff	postinc2,??_setMotorPWM
  7763   001BF2  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  7764   001BF6  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  7765   001BFA  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7766   001BFE  C012  FFDF         	movff	setMotorPWM@negDuty,indf2
  7767                           
  7768                           ;dc_motor.c: 83:         *(m->negDutyHighByte)=posDuty;
  7769   001C02  500E               	movf	setMotorPWM@m^0,w,c
  7770   001C04  6ED9               	movwf	fsr2l,c
  7771   001C06  6ADA               	clrf	fsr2h,c
  7772   001C08  0E07               	movlw	7
  7773   001C0A  26D9               	addwf	fsr2l,f,c
  7774   001C0C  CFDE F00F          	movff	postinc2,??_setMotorPWM
  7775   001C10  CFDD F010          	movff	postdec2,??_setMotorPWM+1
  7776   001C14  C00F  FFD9         	movff	??_setMotorPWM,fsr2l
  7777   001C18  C010  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7778   001C1C  C011  FFDF         	movff	setMotorPWM@posDuty,indf2
  7779   001C20                     l239:
  7780   001C20  0012               	return		;funcret
  7781   001C22                     __end_of_setMotorPWM:
  7782                           	callstack 0
  7783                           
  7784 ;; *************** function ___wmul *****************
  7785 ;; Defined at:
  7786 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;  multiplier      2    0[COMRAM] unsigned int 
  7789 ;;  multiplicand    2    2[COMRAM] unsigned int 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  product         2    4[COMRAM] unsigned int 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  2    0[COMRAM] unsigned int 
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0, prodl, prodh
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7802 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7804 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7805 ;;Total ram usage:        6 bytes
  7806 ;; Hardware stack levels used: 1
  7807 ;; Hardware stack levels required when called: 1
  7808 ;; This function calls:
  7809 ;;		Nothing
  7810 ;; This function is called by:
  7811 ;;		_setMotorPWM
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text55
  7816   002EF6                     __ptext55:
  7817                           	callstack 0
  7818   002EF6                     ___wmul:
  7819                           	callstack 23
  7820   002EF6  5001               	movf	___wmul@multiplier^0,w,c
  7821   002EF8  0203               	mulwf	___wmul@multiplicand^0,c
  7822   002EFA  CFF3 F005          	movff	prodl,___wmul@product
  7823   002EFE  CFF4 F006          	movff	prodh,___wmul@product+1
  7824   002F02  5001               	movf	___wmul@multiplier^0,w,c
  7825   002F04  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  7826   002F06  50F3               	movf	243,w,c
  7827   002F08  2606               	addwf	(___wmul@product+1)^0,f,c
  7828   002F0A  5002               	movf	(___wmul@multiplier+1)^0,w,c
  7829   002F0C  0203               	mulwf	___wmul@multiplicand^0,c
  7830   002F0E  50F3               	movf	243,w,c
  7831   002F10  2606               	addwf	(___wmul@product+1)^0,f,c
  7832   002F12  C005  F001         	movff	___wmul@product,?___wmul
  7833   002F16  C006  F002         	movff	___wmul@product+1,?___wmul+1
  7834   002F1A  0012               	return		;funcret
  7835   002F1C                     __end_of___wmul:
  7836                           	callstack 0
  7837                           
  7838 ;; *************** function ___lwdiv *****************
  7839 ;; Defined at:
  7840 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;  dividend        2    6[COMRAM] unsigned int 
  7843 ;;  divisor         2    8[COMRAM] unsigned int 
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;  quotient        2   10[COMRAM] unsigned int 
  7846 ;;  counter         1   12[COMRAM] unsigned char 
  7847 ;; Return value:  Size  Location     Type
  7848 ;;                  2    6[COMRAM] unsigned int 
  7849 ;; Registers used:
  7850 ;;		wreg, status,2, status,0
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7856 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7857 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7859 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7860 ;;Total ram usage:        7 bytes
  7861 ;; Hardware stack levels used: 1
  7862 ;; Hardware stack levels required when called: 1
  7863 ;; This function calls:
  7864 ;;		Nothing
  7865 ;; This function is called by:
  7866 ;;		_setMotorPWM
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           	psect	text56
  7871   0026C4                     __ptext56:
  7872                           	callstack 0
  7873   0026C4                     ___lwdiv:
  7874                           	callstack 23
  7875   0026C4  0E00               	movlw	0
  7876   0026C6  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  7877   0026C8  0E00               	movlw	0
  7878   0026CA  6E0B               	movwf	___lwdiv@quotient^0,c
  7879   0026CC  5009               	movf	___lwdiv@divisor^0,w,c
  7880   0026CE  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7881   0026D0  B4D8               	btfsc	status,2,c
  7882   0026D2  EF6D  F013         	goto	u1251
  7883   0026D6  EF6F  F013         	goto	u1250
  7884   0026DA                     u1251:
  7885   0026DA  EF97  F013         	goto	l1248
  7886   0026DE                     u1250:
  7887   0026DE  0E01               	movlw	1
  7888   0026E0  6E0D               	movwf	___lwdiv@counter^0,c
  7889   0026E2  EF77  F013         	goto	l2669
  7890   0026E6                     l2667:
  7891   0026E6  90D8               	bcf	status,0,c
  7892   0026E8  3609               	rlcf	___lwdiv@divisor^0,f,c
  7893   0026EA  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7894   0026EC  2A0D               	incf	___lwdiv@counter^0,f,c
  7895   0026EE                     l2669:
  7896   0026EE  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  7897   0026F0  EF7C  F013         	goto	u1261
  7898   0026F4  EF7E  F013         	goto	u1260
  7899   0026F8                     u1261:
  7900   0026F8  EF73  F013         	goto	l2667
  7901   0026FC                     u1260:
  7902   0026FC                     l2671:
  7903   0026FC  90D8               	bcf	status,0,c
  7904   0026FE  360B               	rlcf	___lwdiv@quotient^0,f,c
  7905   002700  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7906   002702  5009               	movf	___lwdiv@divisor^0,w,c
  7907   002704  5C07               	subwf	___lwdiv@dividend^0,w,c
  7908   002706  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  7909   002708  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7910   00270A  A0D8               	btfss	status,0,c
  7911   00270C  EF8A  F013         	goto	u1271
  7912   002710  EF8C  F013         	goto	u1270
  7913   002714                     u1271:
  7914   002714  EF91  F013         	goto	l2679
  7915   002718                     u1270:
  7916   002718  5009               	movf	___lwdiv@divisor^0,w,c
  7917   00271A  5E07               	subwf	___lwdiv@dividend^0,f,c
  7918   00271C  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  7919   00271E  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7920   002720  800B               	bsf	___lwdiv@quotient^0,0,c
  7921   002722                     l2679:
  7922   002722  90D8               	bcf	status,0,c
  7923   002724  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7924   002726  3209               	rrcf	___lwdiv@divisor^0,f,c
  7925   002728  2E0D               	decfsz	___lwdiv@counter^0,f,c
  7926   00272A  EF7E  F013         	goto	l2671
  7927   00272E                     l1248:
  7928   00272E  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  7929   002732  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7930   002736  0012               	return		;funcret
  7931   002738                     __end_of___lwdiv:
  7932                           	callstack 0
  7933                           
  7934 ;; *************** function _ISR *****************
  7935 ;; Defined at:
  7936 ;;		line 116 in file "timers.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;		None
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;		None
  7941 ;; Return value:  Size  Location     Type
  7942 ;;                  1    wreg      void 
  7943 ;; Registers used:
  7944 ;;		wreg, status,2
  7945 ;; Tracked objects:
  7946 ;;		On entry : 0/0
  7947 ;;		On exit  : 0/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7954 ;;Total ram usage:        0 bytes
  7955 ;; Hardware stack levels used: 1
  7956 ;; This function calls:
  7957 ;;		Nothing
  7958 ;; This function is called by:
  7959 ;;		Interrupt level 2
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	intcode
  7964   000008                     __pintcode:
  7965                           	callstack 0
  7966   000008                     _ISR:
  7967                           	callstack 23
  7968                           
  7969                           ;incstack = 0
  7970   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7971   00000A                     
  7972                           ;timers.c: 119:     if (PIR0bits.TMR0IF) {
  7973   00000A  010E               	movlb	14	; () banked
  7974   00000C  AB33               	btfss	51,5,b	;volatile
  7975   00000E  EF0B  F000         	goto	i2u123_41
  7976   000012  EF0D  F000         	goto	i2u123_40
  7977   000016                     i2u123_41:
  7978   000016  EF18  F000         	goto	i2l727
  7979   00001A                     i2u123_40:
  7980   00001A                     
  7981                           ; BSR set to: 14
  7982                           ;timers.c: 120:         if (returning) {
  7983   00001A  505D               	movf	_returning^0,w,c
  7984   00001C  B4D8               	btfsc	status,2,c
  7985   00001E  EF13  F000         	goto	i2u124_41
  7986   000022  EF15  F000         	goto	i2u124_40
  7987   000026                     i2u124_41:
  7988   000026  EF17  F000         	goto	i2l726
  7989   00002A                     i2u124_40:
  7990   00002A                     
  7991                           ; BSR set to: 14
  7992                           ;timers.c: 121:             return_flag = 1;
  7993   00002A  0E01               	movlw	1
  7994   00002C  6E5C               	movwf	_return_flag^0,c
  7995   00002E                     i2l726:
  7996                           
  7997                           ; BSR set to: 14
  7998                           ;timers.c: 126:         PIR0bits.TMR0IF = 0;
  7999   00002E  9B33               	bcf	51,5,b	;volatile
  8000   000030                     i2l727:
  8001                           
  8002                           ; BSR set to: 14
  8003   000030  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  8004   000032  0011               	retfie		f
  8005   000034                     __end_of_ISR:
  8006                           	callstack 0
  8007                           
  8008                           	psect	rparam
  8009   000000                     
  8010                           	psect	temp
  8011   00005E                     btemp:
  8012                           	callstack 0
  8013   00005E                     	ds	1
  8014   000000                     int$flags	set	btemp
  8015   000000                     wtemp8	set	btemp+1
  8016   000000                     ttemp5	set	btemp+1
  8017   000000                     ttemp6	set	btemp+4
  8018   000000                     ttemp7	set	btemp+8
  8019                           
  8020                           	psect	idloc
  8021                           
  8022                           ;Config register IDLOC0 @ 0x200000
  8023                           ;	unspecified, using default values
  8024   200000                     	org	2097152
  8025   200000  FFFF               	dw	65535
  8026                           
  8027                           ;Config register IDLOC1 @ 0x200002
  8028                           ;	unspecified, using default values
  8029   200002                     	org	2097154
  8030   200002  FFFF               	dw	65535
  8031                           
  8032                           ;Config register IDLOC2 @ 0x200004
  8033                           ;	unspecified, using default values
  8034   200004                     	org	2097156
  8035   200004  FFFF               	dw	65535
  8036                           
  8037                           ;Config register IDLOC3 @ 0x200006
  8038                           ;	unspecified, using default values
  8039   200006                     	org	2097158
  8040   200006  FFFF               	dw	65535
  8041                           
  8042                           ;Config register IDLOC4 @ 0x200008
  8043                           ;	unspecified, using default values
  8044   200008                     	org	2097160
  8045   200008  FFFF               	dw	65535
  8046                           
  8047                           ;Config register IDLOC5 @ 0x20000A
  8048                           ;	unspecified, using default values
  8049   20000A                     	org	2097162
  8050   20000A  FFFF               	dw	65535
  8051                           
  8052                           ;Config register IDLOC6 @ 0x20000C
  8053                           ;	unspecified, using default values
  8054   20000C                     	org	2097164
  8055   20000C  FFFF               	dw	65535
  8056                           
  8057                           ;Config register IDLOC7 @ 0x20000E
  8058                           ;	unspecified, using default values
  8059   20000E                     	org	2097166
  8060   20000E  FFFF               	dw	65535
  8061                           
  8062                           	psect	config
  8063                           
  8064                           ;Config register CONFIG1L @ 0x300000
  8065                           ;	External Oscillator mode Selection bits
  8066                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8067                           ;	Power-up default value for COSC bits
  8068                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8069   300000                     	org	3145728
  8070   300000  AA                 	db	170
  8071                           
  8072                           ;Config register CONFIG1H @ 0x300001
  8073                           ;	unspecified, using default values
  8074                           ;	Clock Out Enable bit
  8075                           ;	CLKOUTEN = 0x1, unprogrammed default
  8076                           ;	Clock Switch Enable bit
  8077                           ;	CSWEN = 0x1, unprogrammed default
  8078                           ;	Fail-Safe Clock Monitor Enable bit
  8079                           ;	FCMEN = 0x1, unprogrammed default
  8080   300001                     	org	3145729
  8081   300001  FF                 	db	255
  8082                           
  8083                           ;Config register CONFIG2L @ 0x300002
  8084                           ;	unspecified, using default values
  8085                           ;	Master Clear Enable bit
  8086                           ;	MCLRE = 0x1, unprogrammed default
  8087                           ;	Power-up Timer Enable bit
  8088                           ;	PWRTE = 0x1, unprogrammed default
  8089                           ;	Low-power BOR enable bit
  8090                           ;	LPBOREN = 0x1, unprogrammed default
  8091                           ;	Brown-out Reset Enable bits
  8092                           ;	BOREN = 0x3, unprogrammed default
  8093   300002                     	org	3145730
  8094   300002  FF                 	db	255
  8095                           
  8096                           ;Config register CONFIG2H @ 0x300003
  8097                           ;	unspecified, using default values
  8098                           ;	Brown Out Reset Voltage selection bits
  8099                           ;	BORV = 0x3, unprogrammed default
  8100                           ;	ZCD Disable bit
  8101                           ;	ZCD = 0x1, unprogrammed default
  8102                           ;	PPSLOCK bit One-Way Set Enable bit
  8103                           ;	PPS1WAY = 0x1, unprogrammed default
  8104                           ;	Stack Full/Underflow Reset Enable bit
  8105                           ;	STVREN = 0x1, unprogrammed default
  8106                           ;	Debugger Enable bit
  8107                           ;	DEBUG = 0x1, unprogrammed default
  8108                           ;	Extended Instruction Set Enable bit
  8109                           ;	XINST = 0x1, unprogrammed default
  8110   300003                     	org	3145731
  8111   300003  FF                 	db	255
  8112                           
  8113                           ;Config register CONFIG3L @ 0x300004
  8114                           ;	WDT Period Select bits
  8115                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  8116                           ;	WDT operating mode
  8117                           ;	WDTE = OFF, WDT Disabled
  8118   300004                     	org	3145732
  8119   300004  9F                 	db	159
  8120                           
  8121                           ;Config register CONFIG3H @ 0x300005
  8122                           ;	unspecified, using default values
  8123                           ;	WDT Window Select bits
  8124                           ;	WDTCWS = 0x7, unprogrammed default
  8125                           ;	WDT input clock selector
  8126                           ;	WDTCCS = 0x7, unprogrammed default
  8127   300005                     	org	3145733
  8128   300005  FF                 	db	255
  8129                           
  8130                           ;Config register CONFIG4L @ 0x300006
  8131                           ;	unspecified, using default values
  8132                           ;	Write Protection Block 0
  8133                           ;	WRT0 = 0x1, unprogrammed default
  8134                           ;	Write Protection Block 1
  8135                           ;	WRT1 = 0x1, unprogrammed default
  8136                           ;	Write Protection Block 2
  8137                           ;	WRT2 = 0x1, unprogrammed default
  8138                           ;	Write Protection Block 3
  8139                           ;	WRT3 = 0x1, unprogrammed default
  8140                           ;	Write Protection Block 3
  8141                           ;	WRT4 = 0x1, unprogrammed default
  8142                           ;	Write Protection Block 3
  8143                           ;	WRT5 = 0x1, unprogrammed default
  8144                           ;	Write Protection Block 3
  8145                           ;	WRT6 = 0x1, unprogrammed default
  8146                           ;	Write Protection Block 3
  8147                           ;	WRT7 = 0x1, unprogrammed default
  8148   300006                     	org	3145734
  8149   300006  FF                 	db	255
  8150                           
  8151                           ;Config register CONFIG4H @ 0x300007
  8152                           ;	unspecified, using default values
  8153                           ;	Configuration Register Write Protection bit
  8154                           ;	WRTC = 0x1, unprogrammed default
  8155                           ;	Boot Block Write Protection bit
  8156                           ;	WRTB = 0x1, unprogrammed default
  8157                           ;	Data EEPROM Write Protection bit
  8158                           ;	WRTD = 0x1, unprogrammed default
  8159                           ;	Scanner Enable bit
  8160                           ;	SCANE = 0x1, unprogrammed default
  8161                           ;	Low Voltage Programming Enable bit
  8162                           ;	LVP = 0x1, unprogrammed default
  8163   300007                     	org	3145735
  8164   300007  FF                 	db	255
  8165                           
  8166                           ;Config register CONFIG5L @ 0x300008
  8167                           ;	unspecified, using default values
  8168                           ;	UserNVM Program Memory Code Protection bit
  8169                           ;	CP = 0x1, unprogrammed default
  8170                           ;	DataNVM Memory Code Protection bit
  8171                           ;	CPD = 0x1, unprogrammed default
  8172   300008                     	org	3145736
  8173   300008  FF                 	db	255
  8174                           
  8175                           ;Config register CONFIG5H @ 0x300009
  8176                           ;	unspecified, using default values
  8177   300009                     	org	3145737
  8178   300009  FF                 	db	255
  8179                           
  8180                           ;Config register CONFIG6L @ 0x30000A
  8181                           ;	unspecified, using default values
  8182                           ;	Table Read Protection Block 0
  8183                           ;	EBTR0 = 0x1, unprogrammed default
  8184                           ;	Table Read Protection Block 1
  8185                           ;	EBTR1 = 0x1, unprogrammed default
  8186                           ;	Table Read Protection Block 2
  8187                           ;	EBTR2 = 0x1, unprogrammed default
  8188                           ;	Table Read Protection Block 3
  8189                           ;	EBTR3 = 0x1, unprogrammed default
  8190                           ;	Table Read Protection Block 4
  8191                           ;	EBTR4 = 0x1, unprogrammed default
  8192                           ;	Table Read Protection Block 5
  8193                           ;	EBTR5 = 0x1, unprogrammed default
  8194                           ;	Table Read Protection Block 6
  8195                           ;	EBTR6 = 0x1, unprogrammed default
  8196                           ;	Table Read Protection Block 7
  8197                           ;	EBTR7 = 0x1, unprogrammed default
  8198   30000A                     	org	3145738
  8199   30000A  FF                 	db	255
  8200                           
  8201                           ;Config register CONFIG6H @ 0x30000B
  8202                           ;	unspecified, using default values
  8203                           ;	Boot Block Table Read Protection bit
  8204                           ;	EBTRB = 0x1, unprogrammed default
  8205   30000B                     	org	3145739
  8206   30000B  FF                 	db	255
  8207                           tosu	equ	0xFFF
  8208                           tosh	equ	0xFFE
  8209                           tosl	equ	0xFFD
  8210                           stkptr	equ	0xFFC
  8211                           pclatu	equ	0xFFB
  8212                           pclath	equ	0xFFA
  8213                           pcl	equ	0xFF9
  8214                           tblptru	equ	0xFF8
  8215                           tblptrh	equ	0xFF7
  8216                           tblptrl	equ	0xFF6
  8217                           tablat	equ	0xFF5
  8218                           prodh	equ	0xFF4
  8219                           prodl	equ	0xFF3
  8220                           indf0	equ	0xFEF
  8221                           postinc0	equ	0xFEE
  8222                           postdec0	equ	0xFED
  8223                           preinc0	equ	0xFEC
  8224                           plusw0	equ	0xFEB
  8225                           fsr0h	equ	0xFEA
  8226                           fsr0l	equ	0xFE9
  8227                           wreg	equ	0xFE8
  8228                           indf1	equ	0xFE7
  8229                           postinc1	equ	0xFE6
  8230                           postdec1	equ	0xFE5
  8231                           preinc1	equ	0xFE4
  8232                           plusw1	equ	0xFE3
  8233                           fsr1h	equ	0xFE2
  8234                           fsr1l	equ	0xFE1
  8235                           bsr	equ	0xFE0
  8236                           indf2	equ	0xFDF
  8237                           postinc2	equ	0xFDE
  8238                           postdec2	equ	0xFDD
  8239                           preinc2	equ	0xFDC
  8240                           plusw2	equ	0xFDB
  8241                           fsr2h	equ	0xFDA
  8242                           fsr2l	equ	0xFD9
  8243                           status	equ	0xFD8

Data Sizes:
    Strings     33
    Constant    0
    Data        26
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      93
    BANK0           160     32      32
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    card_blue@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    card_blue@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    card_cyan@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    card_cyan@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    card_green@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    card_green@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    card_orange@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    card_orange@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    card_pink@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    card_pink@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    card_red@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    card_red@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    card_white@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    card_white@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    card_yellow@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    card_yellow@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    fullSpeedReverse@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedReverse@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    fullSpeedReverse@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    fullSpeedReverse@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    getHSVval@p1	PTR struct HSV_val size(1) Largest target is 6
		 -> main@HSV_colour(BANK0[6]), 

    getHSVval@p2	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    getRGBCval@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    headbuttReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    headbuttReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    manoeuvre_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_manoeuvre(BANK1[20]), 

    maxRGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    minRGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    pick_card@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    pick_card@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    RGBC2colourcard@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    S2777$buffer	PTR unsigned char  size(2) Largest target is 0

    S2777$source	PTR const unsigned char  size(2) Largest target is 0

    S551DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    S551DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    scaleRGB@p	PTR struct RGBC_val size(1) Largest target is 8
		 -> main@measured_colour(BANK0[8]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), RGBC2colourcard@motorR(COMRAM[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    squareReverse@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    squareReverse@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    timer_high_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_high(BANK1[20]), 

    timer_low_pointer	PTR unsigned char  size(2) Largest target is 20
		 -> trail_timer_low(BANK1[20]), 

    turnLeft135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    turnLeft135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    turnLeft90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    turnLeft90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight135@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    turnRight135@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    turnRight90@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    turnRight90@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhll[1]), CCPR4H(BITBIGSFRlllllllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhll[1]), CCPR3H(BITBIGSFRlllllllll[1]), 

    UTurn@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorL(COMRAM[9]), 

    UTurn@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> RGBC2colourcard@motorR(COMRAM[9]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_1(CODE[5]), STR_3(CODE[4]), STR_5(CODE[13]), STR_6(CODE[11]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_getHSVval
    _scaleRGB->___fltol
    ___fltol->___flmul
    ___flmul->___xxtofl
    _getRGBCval->_color_read_Blue
    _getRGBCval->_color_read_Clear
    _getRGBCval->_color_read_Green
    _getRGBCval->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _getHSVval->___lldiv
    _minRGB->_min
    _maxRGB->_max
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _reset_timer->_write_timer
    _RGBC2colourcard->_pick_card
    _pick_card->_card_blue
    _pick_card->_card_cyan
    _pick_card->_card_green
    _pick_card->_card_orange
    _pick_card->_card_pink
    _pick_card->_card_red
    _pick_card->_card_yellow
    _card_yellow->_headbuttReverse
    _card_yellow->_squareReverse
    _card_yellow->_turnLeft90
    _card_yellow->_turnRight90
    _card_white->_UTurn
    _card_white->_headbuttReverse
    _card_red->_headbuttReverse
    _card_red->_turnLeft90
    _card_red->_turnRight90
    _card_pink->_headbuttReverse
    _card_pink->_squareReverse
    _card_pink->_turnLeft90
    _card_pink->_turnRight90
    _squareReverse->_fullSpeedReverse
    _card_orange->_headbuttReverse
    _card_orange->_turnLeft135
    _card_orange->_turnRight135
    _card_green->_headbuttReverse
    _card_green->_turnLeft90
    _card_green->_turnRight90
    _turnRight90->_turnRight
    _turnLeft90->_turnLeft
    _card_cyan->_headbuttReverse
    _card_cyan->_turnLeft135
    _card_cyan->_turnRight135
    _turnRight135->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft135->_turnLeft
    _card_blue->_UTurn
    _card_blue->_headbuttReverse
    _headbuttReverse->_fullSpeedReverse
    _fullSpeedReverse->_setMotorPWM
    _UTurn->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  188143
                                             63 COMRAM     1     1      0
                                              0 BANK0     32    32      0
                    _RGBC2colourcard
                        _Timer0_init
                  _buggy_lights_init
                   _color_click_init
                          _getHSVval
                         _getRGBCval
                    _initDCmotorsPWM
                         _initUSART4
                           _scaleRGB
               _toggle_tricolour_LED
 ---------------------------------------------------------------------------------
 (1) _toggle_tricolour_LED                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scaleRGB                                             3     2      1    5963
                                             49 COMRAM     3     2      1
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1236
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1143
                                             39 COMRAM    10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    3420
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getRGBCval                                           1     0      1     692
                                             11 COMRAM     1     0      1
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _getHSVval                                           52    50      2    5761
                                             13 COMRAM    50    48      2
                            ___lldiv
                             ___lmul
                             _maxRGB
                             _minRGB
 ---------------------------------------------------------------------------------
 (2) _minRGB                                               4     2      2     581
                                              6 COMRAM     4     2      2
                                _min
 ---------------------------------------------------------------------------------
 (3) _min                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _maxRGB                                               4     2      2     581
                                              6 COMRAM     4     2      2
                                _max
 ---------------------------------------------------------------------------------
 (3) _max                                                  6     2      4     416
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1434
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    1226
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_lights_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0     196
                        _reset_timer
 ---------------------------------------------------------------------------------
 (2) _reset_timer                                          0     0      0     196
                        _write_timer
 ---------------------------------------------------------------------------------
 (3) _write_timer                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _RGBC2colourcard                                     23    22      1  174545
                                             38 COMRAM    21    20      1
                          _pick_card
 ---------------------------------------------------------------------------------
 (2) _pick_card                                            6     2      4  173938
                                             32 COMRAM     6     2      4
                          _card_blue
                          _card_cyan
                         _card_green
                        _card_orange
                          _card_pink
                           _card_red
                         _card_white
                        _card_yellow
 ---------------------------------------------------------------------------------
 (3) _card_yellow                                          5     2      3   27930
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_white                                           2     0      2   14828
                                             27 COMRAM     2     0      2
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (3) _card_red                                             5     2      3   21482
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (3) _card_pink                                            5     2      3   27930
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                      _squareReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _squareReverse                                        4     2      2    6360
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _card_orange                                          5     2      3   20874
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (3) _card_green                                           5     2      3   21482
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                         _turnLeft90
                        _turnRight90
 ---------------------------------------------------------------------------------
 (4) _turnRight90                                          4     2      2    6360
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnLeft90                                           4     2      2    6512
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_cyan                                            5     2      3   20874
                                             27 COMRAM     5     2      3
                    _headbuttReverse
                        _turnLeft135
                       _turnRight135
 ---------------------------------------------------------------------------------
 (4) _turnRight135                                         4     2      2    6056
                                             23 COMRAM     4     2      2
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (5) _turnRight                                            5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _turnLeft135                                          4     2      2    6208
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _card_blue                                            5     2      3   14970
                                             27 COMRAM     5     2      3
                              _UTurn
                    _headbuttReverse
 ---------------------------------------------------------------------------------
 (4) _headbuttReverse                                      4     2      2    8184
                                             23 COMRAM     4     2      2
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (5) _fullSpeedReverse                                     5     3      2    2443
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _UTurn                                                4     2      2    6360
                                             23 COMRAM     4     2      2
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (5) _turnLeft                                             5     3      2    2595
                                             18 COMRAM     5     3      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (5) _stop                                                 3     1      2    3221
                                             18 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (6) _setMotorPWM                                          5     4      1    1829
                                             13 COMRAM     5     4      1
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RGBC2colourcard
     _pick_card
       _card_blue
         _UTurn
           _stop
             _setMotorPWM
               ___lwdiv
                 ___wmul (ARG)
               ___wmul
           _turnLeft
             _setMotorPWM
         _headbuttReverse
           _fullSpeedReverse
             _setMotorPWM
           _stop
       _card_cyan
         _headbuttReverse
         _turnLeft135
           _stop
           _turnLeft
         _turnRight135
           _stop
           _turnRight
             _setMotorPWM
       _card_green
         _headbuttReverse
         _turnLeft90
           _stop
           _turnLeft
         _turnRight90
           _stop
           _turnRight
       _card_orange
         _headbuttReverse
         _turnLeft135
         _turnRight135
       _card_pink
         _headbuttReverse
         _squareReverse
           _fullSpeedReverse
           _stop
         _turnLeft90
         _turnRight90
       _card_red
         _headbuttReverse
         _turnLeft90
         _turnRight90
       _card_white
         _UTurn
         _headbuttReverse
       _card_yellow
         _headbuttReverse
         _squareReverse
         _turnLeft90
         _turnRight90
   _Timer0_init
     _reset_timer
       _write_timer
   _buggy_lights_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _getHSVval
     ___lldiv
     ___lmul
     _maxRGB
       _max
     _minRGB
       _min
   _getRGBCval
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _scaleRGB
     ___flmul
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _toggle_tricolour_LED

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      20       5       20.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      5D       1       98.9%
BITBIGSFRlllh       52      0       0      41        0.0%
BITBIGSFRlllllh     37      0       0      43        0.0%
BITBIGSFRllllll     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      59        0.0%
BITBIGSFRlllllh     20      0       0      46        0.0%
BITBIGSFRlllllh     1E      0       0      48        0.0%
BITBIGSFRhhll       1D      0       0      38        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllllh     11      0       0      49        0.0%
BITBIGSFRhhhlh       E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlllllh      C      0       0      47        0.0%
BITBIGSFRllllll      B      0       0      57        0.0%
BITBIGSFRllllll      9      0       0      56        0.0%
BITBIGSFRlllllh      8      0       0      44        0.0%
BITBIGSFRllllll      6      0       0      58        0.0%
BITBIGSFRllllll      6      0       0      53        0.0%
BITBIGSFRllllll      5      0       0      52        0.0%
BITBIGSFRllllll      3      0       0      55        0.0%
BITBIGSFRllllll      3      0       0      51        0.0%
BITBIGSFRllllh       2      0       0      42        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      45        0.0%
BITBIGSFRlllllh      1      0       0      50        0.0%
BITBIGSFRhhhll       1      0       0      36        0.0%
BITBIGSFRllh         1      0       0      40        0.0%
BITBIGSFRlhh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B9      60        0.0%
DATA                 0      0      B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun Mar 10 20:13:50 2024

                 _turn180Delay 004D                 _color_read_Red 2AA8                _color_read_Blue 2B98  
              _trail_timer_low 0114            card_green@backtrack 001E                             l42 21DA  
                           l27 2E7C                             l97 2C98            ___wmul@multiplicand 0003  
             _trail_timer_high 0128               _color_read_Clear 2B48               _color_read_Green 2AF8  
                          l100 2F5E                            l103 2AF6                            l112 2B96  
                          l130 2D5E                            l106 2B46                            l115 29FE  
                          l300 2DBE                            l125 2D86                            l133 2AA6  
                          l109 2BE6                            l126 2D8E                            l136 2A52  
                          l232 2534                            l129 2D56                            l330 2EA8  
                          l155 14EE                            l139 2112                            l252 22DA  
                          l260 2222                            l333 2ECE                            l342 2FCE  
                          l239 1C20                            l247 25C2                            l255 234A  
                          l263 2292                            l159 1D36                            l327 2EA6  
                          l336 2FD8                            l345 2FA2                            l282 2CFC  
                          l291 2DEE                            l339 2FC4                            l276 2390  
                          l604 2940                            l620 203C                            l700 2FAE  
                          l348 2C28                            l285 2CCA                            l294 2D2E  
                          l279 2400                            l607 2EF4                            l288 2E1E  
                          l297 2E4E                            l562 2808                            l590 26C2  
                          l583 2642                            l487 2F7C                            l576 29A8  
                          l569 28D8                            l691 2F3E                            l757 2F1A  
                          l597 2870                            l791 24A4                            l784 2494  
                          l768 2790                            l697 2FBA                            l769 27A0  
                          _ISR 0008         ??_toggle_tricolour_LED 0001                            _max 2D60  
                          _min 2D30                            wreg 0FE8                   ___flmul@aexp 0020  
                 ___flmul@bexp 0021                   ___flmul@sign 001B                   ___flmul@temp 0026  
                 ___flmul@prod 0022                    _squareDelay 0049                           ?_ISR 0001  
                 ___fltol@exp1 0031                           l1054 1E3C                           l3001 2AF8  
                         l3003 2B3E                           l1412 1970                           l3013 2B48  
                         l3101 150C                           l1255 2736                           l3031 1F5A  
                         l3023 2A00                           l3007 2B98                           l3015 2B8E  
                         l3111 1552                           l3103 151C                           l1415 1ACC  
                         l1248 272E                           l3041 1FBE                           l3033 1F6E  
                         l3009 2BDE                           l3201 1876                           l3121 157E  
                         l3113 1558                           l3105 152C                           l1426 1A64  
                         l3043 1FD2                           l3035 1F82                           l3027 1F42  
                         l3019 2A54                           l3211 18DE                           l3203 187A  
                         l3131 15D4                           l1371 15B4                           l3123 158E  
                         l3115 155E                           l3107 153C                           l1419 1A08  
                         l1380 1822                           l3037 1F96                           l3029 1F46  
                         l3061 2FA4                           l3221 1908                           l3213 18EE  
                         l3205 1894                           l1381 1810                           l3141 1614  
                         l3125 159E                           l3117 156C                           l3109 1542  
                         l3301 1A74                           l3039 1FAA                           l3047 1FE2  
                         l3071 2770                           l3063 2738                           l3215 18FC  
                         l3207 18A8                           l3151 165E                           l3143 1620  
                         l1375 1918                           l3135 15E8                           l3127 15A4  
                         l3119 156E                           l3231 1D62                           l3311 1ABC  
                         l3303 1A78                           l3321 2C6A                           l3081 243C  
                         l3073 2402                           l3065 2748                           l3401 119E  
                         l3217 18FE                           l3209 18C2                           l3161 16B0  
                         l3153 166A                           l3145 1638                           l3137 15F4  
                         l3129 15C4                           l3241 1DB0                           l3233 1D8C  
                         l3225 1D38                           l3305 1A9C                           l1378 17AA  
                         l3315 2E50                           l3323 2C74                           l3091 2484  
                         l3083 244A                           l3075 2412                           l3067 2756  
                         l3411 126C                           l3403 11DE                           l3219 1904  
                         l3171 172E                           l3163 16C0                           l3155 167A  
                         l3147 1644                           l3139 15FE                           l3251 1DDC  
                         l3235 1D8E                           l3227 1D4E                           l3307 1AAC  
                         l1388 18DA                           l2701 253A                           l4061 1FF6  
                         l3325 2C84                           l3093 248E                           l3085 2454  
                         l3077 2428                           l3069 2766                           l3421 1320  
                         l3413 1292                           l3405 1212                           l3341 0E24  
                         l3501 2526                           l3181 17A8                           l3173 1764  
                         l3165 16DC                           l3157 1686                           l3149 1650  
                         l3261 1E0C                           l3237 1D9E                           l3309 1ABA  
                         l3317 2114                           l2711 257E                           l2703 2550  
                         l4071 28C2                           l4063 262C                           l3327 2C8E  
                         l3319 2C66                           l3087 2472                           l3079 2430  
                         l3431 13BA                           l3423 1350                           l3415 129E  
                         l3407 1242                           l3351 0E7A                           l3343 0E3C  
                         l3503 2528                           l3191 1808                           l3183 17BA  
                         l3175 1772                           l3167 16E8                           l3159 1696  
                         l3095 14F0                           l3263 1E1C                           l3247 1DC8  
                         l3239 1DA2                           l3271 192C                           l2713 2586  
                         l2705 2558                           l2721 229C                           l2801 2E12  
                         l4073 292A                           l4065 27F2                           l3089 2482  
                         l3441 1444                           l3433 13EE                           l3417 12B0  
                         l3425 135C                           l3409 124A                           l3361 0EDE  
                         l3353 0E86                           l3345 0E4C                           l3329 29AA  
                         l3505 2532                           l3185 17C8                           l3177 1790  
                         l3169 1704                           l3097 14FC                           l3265 1E2C  
                         l3257 1DF0                           l3249 1DD2                           l3281 19AA  
                         l3273 193A                           l3601 1E8C                           l2707 256E  
                         l2715 2596                           l2731 22FA                           l2723 22A8  
                         l2811 2D0A                           l4075 2992                           l2803 2DC0  
                         l4067 26AC                           l3451 14CA                           l3443 1450  
                         l3435 141E                           l3427 1368                           l3419 12EC  
                         l3371 0F9A                           l3363 0F1E                           l3355 0EA4  
                         l3347 0E5C                           l3531 2F6A                           l3195 1832  
                         l3187 17CC                           l3179 179A                           l3099 150A  
                         l3259 1DFC                           l3291 19FE                           l3283 19B2  
                         l3275 1980                           l3339 203E                           l3611 1EC0  
                         l3603 1E94                           l2661 26C4                           l2717 25AC  
                         l2709 2576                           l2733 2302                           l2725 22BA  
                         l2813 2D22                           l2741 21DC                           l2805 2DCC  
                         l4069 285A                           l2821 2D90                           l3461 1C3E  
                         l3541 2F1C                           l3453 14DC                           l3445 1484  
                         l3429 137A                           l3373 0FCE                           l3365 0F52  
                         l3357 0ECE                           l3381 107E                           l3437 1426  
                         l3349 0E68                           l3533 2F6C                           l3197 183E  
                         l3189 17DA                           l3293 1A3A                           l3285 19BE  
                         l3277 1996                           l3269 191C                           l3621 1EDE  
                         l3613 1ED0                           l3605 1EA8                           l2671 26FC  
                         l2663 26CC                           l2655 2EF6                           l2735 230A  
                         l2727 22D2                           l2719 2294                           l2815 2E20  
                         l2751 223A                           l2743 21E4                           l2807 2DE2  
                         l2823 2D9C                           l3471 1C86                           l3463 1C52  
                         l3455 1C22                           l3551 2F36                           l3543 2F24  
                         l2831 2FD0                           l3447 14B4                           l3439 1438  
                         l3391 1118                           l3383 10A0                           l3375 1012  
                         l3367 0F82                           l3359 0ECE                           l3535 2F76  
                         l3199 184C                           l3295 1A46                           l3287 19F0  
                         l3631 1EE8                           l3623 1EE0                           l3615 1ED4  
                         l3607 1EB0                           l2681 2728                           l2673 2702  
                         l2665 26DE                           l2657 2F12                           l2729 22F2  
                         l2737 231A                           l2809 2CFE                           l2817 2E2C  
                         l2913 297E                           l2905 2942                           l2761 227A  
                         l2753 2242                           l2745 21F2                           l2825 2DB2  
                         l2921 25C8                           l3481 1D22                           l3473 1CA2  
                         l3465 1C5A                           l3457 1C2E                           l3553 2F3A  
                         l3545 2F26                           l2833 2FD4                           l2841 2FCA  
                         l3449 14BC                           l3393 114C                           l3385 10C6  
                         l3377 1046                           l3369 0F8E                           l3537 2F78  
                         l3529 2F60                           l3297 1A54                           l3289 19F2  
                         l3641 1F26                           l3633 1EEC                           l3625 1EE2  
                         l3617 1ED8                           l3609 1EB8                           l2675 2718  
                         l2667 26E6                           l2691 1B4C                           l2683 1ACE  
                         l2739 2332                           l2771 2388                           l2763 234C  
                         l2819 2E42                           l2907 2946                           l2755 224A  
                         l2747 2202                           l2923 25F0                           l3475 1CC2  
                         l3467 1C62                           l3459 1C36                           l3555 2F3C  
                         l3547 2F30                           l2827 2EA8                           l2835 2F9A  
                         l3395 117C                           l3387 10D2                           l3379 1076  
                         l2851 2BF6                           l2843 2FBC                           l3491 2504  
                         l3483 24A6                           l3539 2F7A                           l3299 1A72  
                         l3643 1F32                           l3635 1F12                           l3627 1EE4  
                         l3619 1EDC                           l2677 2720                           l2669 26EE  
                         l2693 1B8A                           l2685 1AE8                           l2773 23A8  
                         l2781 23D0                           l2765 2354                           l2909 2962  
                         l2757 2252                           l2749 221A                           l2941 2698  
                         l2933 2644                           l3477 1CE2                           l3469 1C6A  
                         l3549 2F34                           l2829 2EB8                           l2837 2F9E  
                         l2861 2D60                           l3389 10DC                           l3397 1188  
                         l2853 2BFE                           l2845 2FC0                           l3493 250E  
                         l3485 24B6                           l3637 1F16                           l3629 1EE6  
                         l2679 2722                           l2695 1BA4                           l2687 1B36  
                         l2783 23E8                           l2775 23B0                           l2767 2360  
                         l2759 2262                           l2791 2C9A                           l2951 282A  
                         l2935 2648                           l2927 2618                           l2919 25C4  
                         l3479 1D02                           l2839 2FC6                           l2863 2D68  
                         l2871 2D4E                           l3399 1194                           l2855 2C24  
                         l2847 2BEA                           l3495 2510                           l3487 24DC  
                         l3639 1F1E                           l2697 1BE4                           l2689 1B48  
                         l2777 23B8                           l2769 2370                           l2961 28DA  
                         l2785 2CCC                           l2793 2CA6                           l2937 2670  
                         l2881 27C2                           l2865 2D7E                           l2857 2C26  
                         l2849 2BEE                           l3497 251A                           l3489 24E0  
                         l2699 2536                           l2779 23C0                           l2963 28DE  
                         l2787 2CD8                           l2795 2CBE                           l2891 2872  
                         l2955 2846                           l2947 280A                           l2867 2D30  
                         l3499 251C                           l2797 2DF0                           l2965 28FA  
                         l2789 2CF0                           l2893 2876                           l2949 280E  
                         l2885 27DE                           l2877 27A2                           l2981 2E7E  
                         l2869 2D38                           l3597 1E3E                           ?_max 0001  
                         l2799 2DFC                           l2895 2892                           l2879 27A6  
                         l2975 2ED0                           l2991 2E94                           l2983 2E88  
                         l3599 1E84                           l2969 2916                           l2977 2FB2  
                         l2985 2E8E                           l2993 2F42                           l2899 28AE  
                         l2979 2FB6                           l2987 2E90                           l2995 2AA8  
                         ?_min 0001                           l2989 2E92                           l2997 2AEE  
                         STR_1 0E19                           STR_2 0E1E                           STR_5 0E01  
                         STR_6 0E0E                           u2010 2166                           u2011 215E  
                         u1300 2550                           u1301 254C                           u1310 256E  
                         u2030 2188                           u1311 256A                           u2031 2180  
                         u1320 25AC                           u1400 227A                           u2120 0E7A  
                         u2008 2148                           u1321 25A8                           u1401 2276  
                         u2121 0E76                           u1250 26DE                           u1330 25C2  
                         u1410 2292                           u2210 1438                           u2130 0EA4  
                         u2050 21A6                           u1251 26DA                           u1331 25BE  
                         u1411 228E                           u2211 1434                           u2131 0EA0  
                         u2051 219E                           u1260 26FC                           u1340 22D2  
                         u1420 2388                           u2220 1C86                           u1500 2D7E  
                         u2140 0ECE                           u2028 2168                           u1261 26F8  
                         u1341 22CE                           u1421 2384                           u2221 1C82  
                         u1501 2D7A                           u2205 136A                           u2141 0ECA  
                         u1270 2718                           u1350 22F2                           u1430 23A8  
                         u2230 1CA2                           u1510 2D4E                           u2150 10A0  
                         u2070 21C8                           u1271 2714                           u1351 22EE  
                         u1431 23A4                           u2231 1C9E                           u1511 2D4A  
                         u2151 109C                           u2071 21C0                           u1280 1AE8  
                         u1360 2332                           u1440 23E8                           u2240 1CC2  
                         u1600 2472                           u2160 10C6                           u2048 218A  
                 _BAUD4CONbits 0EE9                           u1281 1AE4                           u1361 232E  
                         u1441 23E4                           u2241 1CBE                           u1601 246E  
                         u2161 10C2                           u1290 1BA4                           u1370 234A  
                         u1450 2400                           u2250 1CE2                           u2170 126C  
                         u1610 150A                           u2330 1F00                           u1291 1BA0  
                         u1371 2346                           u1451 23FC                           u2251 1CDE  
                         u2171 1268                           u1611 1506                           u2331 1EF8  
                         u1380 221A                           u2260 1D02                           u1460 2EB8  
                         u2180 1292                           u1700 17A8                           u1620 151C  
                         u2068 21A8                           u1381 2216                           u2261 1CFE  
                         u1461 2EB4                           u2181 128E                           u1701 17A4  
                         u1621 1518                           u1390 223A                           u2270 1D22  
                         u1470 2ECE                           u1710 17C8                           u1630 152C  
                         u1391 2236                           u2407 2DA6                           u2271 1D1E  
                         u1471 2ECA                           u1711 17C4                           u1631 1528  
                         u1560 2756                           u1480 2C12                           u1720 17DA  
                         u1640 156C                           u1800 1D4E                           u2088 21CA  
                         u2417 2CB0                           u1561 2752                           u1481 2C0A  
                         u1721 17D6                           u1641 1568                           u1801 1D4A  
                         u1570 2790                           u1730 1808                           u1650 157E  
                         u1810 1D82                           _T2PR 0FBC                           u2507 258C  
                         u2427 2CE2                           u1571 278C                           u2195 12A0  
                         u1731 1804                           u1651 157A                           u1580 2428  
                         u1740 181E                           u1660 158E                           u1820 1DB0  
                         u1900 19EC                           u2348 1F02                           u2437 2DD6  
                         u1581 2424                           u1741 181A                           u1661 158A  
                         u1821 1DAC                           u1901 19E8                           u1590 244A  
                         u1750 1832                           u1670 15C4                           u1830 1DC4  
                         u1910 1A36                           u2447 2258                           u1591 2446  
                         u1751 182E                           u1671 15C0                           u1831 1DC0  
                         u1815 1D78                           u1911 1A32                           u1760 184C  
                         u1680 15D4                           u1840 1DEC                           u1920 1A54  
                         u2457 2E06                           u1761 1848                           u1681 15D0  
                         u1841 1DE8                           u1921 1A50                           u1498 2C14  
                         u1770 1894                           u1690 174E                           u1850 1E0C  
                         u1930 1A64                           u2467 2E36                           u1771 1890  
                         u1851 1E08                           u1931 1A60                           u1780 18C2  
                         u1860 1E1C                           u1940 1A72                           u2477 23C6  
                         u2397 2C7A                           u1781 18BE                           u1861 1E18  
                         u1941 1A6E                           u1790 18FC                           u1950 1AAC  
                         u1870 192C                           u2487 2D14                           u1791 18F8  
                         u1695 1744                           u1951 1AA8                           u1871 1928  
                         u1960 1ABA                           u1880 193A                           u2497 2310  
                         u1961 1AB6                           u1881 1936                           u1890 1996  
                         u1970 2126                           u1891 1992                           u1971 211E  
                         u1990 2146                           u1991 213E                           u1988 2128  
                         _main 1E3E                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         max@a 0001                           max@b 0003                           btemp 005E  
                         _stop 2536                           min@a 0001                           min@b 0003  
                         prodh 0FF4                           prodl 0FF3                           start 0034  
       __end_of_color_read_Red 2AF8              headbuttReverse@mL 0018              headbuttReverse@mR 0019  
                 ___param_bank 0000                    _turnLeft135 2DF0                          ??_ISR 0001  
                write_timer@tH 0002                  write_timer@tL 0001                          ??_max 0005  
                        ??_min 0005                    _turnRight90 2C9A                  ___fltol@sign1 0030  
                        ?_main 0001             _timer_high_pointer 0045                __end_of___flmul 191A  
              __end_of___fltol 1E3E                __end_of___lldiv 24A6                          ?_stop 0013  
              __end_of___lwdiv 2738                          i2l726 002E                          i2l727 0030  
                        _TMR0H 0FD4                          _TMR0L 0FD3               ?_headbuttReverse 0018  
          ___lmul@multiplicand 0005                          _UTurn 2CFE     __end_of_I2C_2_Master_Start 2FDA  
                  _write_timer 2FB0     __end_of_I2C_2_Master_Write 2FA4                    _turningGear 0057  
            _turnRight135Delay 004F                          tablat 0FF5                _turnLeft90Delay 0055  
                        ttemp5 005F                          ttemp6 0062                          ttemp7 0066  
                        status 0FD8                          wtemp8 005F        __end_of_color_read_Blue 2BE8  
        _I2C_2_Master_RepStart 2FBC                ?_color_read_Red 0005                __initialization 2C2A  
                 __end_of_main 1F42                   __end_of_stop 25C4                         ??_main 0040  
                       ??_stop 0015                  __activetblptr 0003                   _turnRight135 2DC0  
                       ?_UTurn 0018                   ?_setMotorPWM 000E                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
                _squareReverse 2D90                         _RC0PPS 0E62                         _RC4REG 0EE3  
                       _RE2PPS 0E74                         _RD5PPS 0E6F                         _RC7PPS 0E69  
                       _RD6PPS 0E70                         _RE4PPS 0E76                         i2l2491 002A  
                       i2l2487 000A                         i2l2489 001A                         _RG6PPS 0E88  
     __end_of_color_click_init 2C9A                         _RX4PPS 0E15                         _TX4REG 0EE4  
             __end_of_card_red 280A               __end_of___xxtofl 1ACE               _fullSpeedReverse 234C  
             _turnLeft135Delay 0051                  ??_Timer0_init 0003                   ?_reset_timer 0001  
                 _CCPTMRS0bits 0FAD                         ___lmul 2738                         ___wmul 2EF6  
                    ??___flmul 0017                      ??___fltol 002C                      ??___lldiv 0009  
                    ??___lwdiv 000B                         _maxRGB 2A54                         _minRGB 2A00  
             __end_of_scaleRGB 2114                         clear_0 2C50             fullSpeedReverse@mL 0013  
           fullSpeedReverse@mR 0014                         isa$std 0001             card_blue@backtrack 001E  
                 __pdataCOMRAM 0041              _timer_low_pointer 0043                   __mediumconst 0000  
                       tblptrh 0FF7                         tblptrl 0FF6                         tblptru 0FF8  
               ?_squareReverse 0018                         stop@mL 0013                         stop@mR 0014  
            ??_initDCmotorsPWM 0003               __end_of_turnLeft 234C                   ___xxtofl@arg 000B  
                 ___xxtofl@exp 000A                   ___xxtofl@val 0001              _buggy_lights_init 2E50  
                   __accesstop 0060        __end_of__initialization 2C5C       __end_of_color_read_Clear 2B98  
     __end_of_color_read_Green 2B48                  card_orange@mL 001C                  card_orange@mR 001D  
       ?_I2C_2_Master_RepStart 0001             ?_buggy_lights_init 0001                  ___rparam_used 0001  
                   ___fltol@f1 0028               ?_color_read_Blue 0005                 __pcstackCOMRAM 0001  
                __end_of_UTurn 2D30                    pick_card@mL 0021                    pick_card@mR 0022  
            getHSVval@temp_660 0034              getHSVval@temp_661 0020              getHSVval@temp_656 0038  
            getHSVval@temp_657 0028              getHSVval@temp_658 002C              getHSVval@temp_659 0030  
          ??_buggy_lights_init 0001            __end_of_Timer0_init 2F40                  card_yellow@mL 001C  
                card_yellow@mR 001D                        ??_UTurn 001A      __end_of_buggy_lights_init 2E7E  
                   _card_green 2872                     __pbssBANK1 0100                     _card_white 2ED0  
                   _getRGBCval 29AA              _color_writetoaddr 2F40                   _T2CLKCONbits 0FBF  
                 ?_turnLeft135 0018             ?_color_writetoaddr 0003                        ?___lmul 0001  
    fullSpeedReverse@rightGear 0017           card_yellow@backtrack 001E                        ?___wmul 0001  
                      ?_maxRGB 0007                        ?_minRGB 0007                   ?_turnRight90 0018  
               ___lmul@product 0009            ??_color_writetoaddr 0004                      ?_card_red 001C  
                    ?___xxtofl 0001                ??_squareReverse 001A                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5                   ?_write_timer 0001                        _SSP2ADD 0ED6  
                      _SSP2BUF 0ED5              __end_of_card_blue 29AA              __end_of_card_cyan 2942  
            __end_of_card_pink 26C4              __end_of_getHSVval 14F0         color_writetoaddr@value 0003  
             ??_color_read_Red 0007                        UTurn@mL 0018                        UTurn@mR 0019  
                    ?_scaleRGB 0032      __end_of_color_writetoaddr 2F60             _I2C_2_Master_Start 2FD0  
                   _initUSART4 2F60             _I2C_2_Master_Write 2F98              ??_RGBC2colourcard 0028  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000A  
                  _Timer0_init 2F1C                     card_red@mL 001C                     card_red@mR 001D  
                      ___flmul 14F0                        ___fltol 1D38                        ___lldiv 2402  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 26C4            ?_I2C_2_Master_Write 0001  
                 __psmallconst 0E00                   turnLeft90@mL 0018                   turnLeft90@mR 0019  
                      __pcinit 2C2A                        __ramtop 0E00                      ?_turnLeft 0013  
                      __ptext0 1E3E                        __ptext1 2114                        __ptext2 203E  
                      __ptext3 191A                        __ptext4 1D38                        __ptext5 14F0  
                      __ptext6 2F60                        __ptext7 24A6                        __ptext8 29AA  
                      __ptext9 2AA8                  ??_card_orange 001F                  ??_card_yellow 001F  
                    _T2CONbits 0FBD                     ??_card_red 001F                     ??___xxtofl 0005  
                   getHSVval@C 003E                     getHSVval@H 001E       __end_of_fullSpeedReverse 2402  
                   getHSVval@M 003C                      _T2HLTbits 0FBE                     getHSVval@S 001C  
                   getHSVval@m 001A              __end_of_pick_card 203E                        maxRGB@p 0007  
                      minRGB@p 0007           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
                  ?_card_green 001C           end_of_initialization 2C5C                    ?_card_white 001C  
                  ?_getRGBCval 000C                     ??_scaleRGB 0033              ?_color_click_init 0001  
                getHSVval@temp 0024                ___lldiv@divisor 0005             ??_color_click_init 0005  
              ___lldiv@counter 000D                        postdec1 0FE5                        postdec2 0FDD  
              squareReverse@mL 0018                squareReverse@mR 0019                        postinc0 0FEE  
                      postinc1 0FE6                        postinc2 0FDE                _initDCmotorsPWM 24A6  
                   ??_turnLeft 0015             setMotorPWM@negDuty 0012              __end_of_turnRight 2294  
                ___xxtofl@sign 0009                      _TRISAbits 0F81             setMotorPWM@posDuty 0011  
                    _TRISCbits 0F83                      _TRISDbits 0F84                      _TRISEbits 0F85  
                    _TRISFbits 0F86                      _TRISGbits 0F87                      _TRISHbits 0F88  
          __end_of_card_orange 2872              card_red@backtrack 001E       color_writetoaddr@address 0004  
          __end_of_card_yellow 2644        ??_I2C_2_Master_RepStart 0002           card_orange@backtrack 001E  
                  ___flmul@grs 001C                    _CCP1CONbits 0FAB              ?_color_read_Clear 0005  
                  _CCP2CONbits 0FA7              ?_color_read_Green 0005                    _CCP3CONbits 0F26  
                  ?_initUSART4 0001                    _CCP4CONbits 0F22                     main@motorL 0066  
                   main@motorR 006F             ??_color_read_Clear 0007             ??_color_read_Green 0007  
                   max@max_val 0005                     _turnLeft90 2CCC                   pick_card@key 0024  
               __end_of___lmul 27A2                 __end_of___wmul 2F1C                  __pidataCOMRAM 2F7E  
               __end_of_maxRGB 2AA8                 __end_of_minRGB 2A54                     min@min_val 0005  
          color_read_Clear@tmp 000A            start_initialization 2C2A                    __end_of_ISR 0034  
                  __end_of_max 2D90                    __end_of_min 2D60               _turnRight90Delay 0053  
          color_read_Green@tmp 000A              ??_headbuttReverse 001A        __end_of_initDCmotorsPWM 2536  
                     ??___lmul 0009                       ??___wmul 0005                   card_green@mL 001C  
                 card_green@mR 001D                       ??_maxRGB 0009                       ??_minRGB 0009  
                  _card_orange 280A                    _card_yellow 25C4             turnRight@rightGear 0017  
                    ___flmul@a 0013                      ___flmul@b 000F                    __pbssCOMRAM 005B  
                __pcstackBANK0 0060                   card_white@mL 001C                   card_white@mR 001D  
              _RGBC2colourcard 1C22                 _wall_threshold 0047              turnLeft@rightGear 0017  
                    _card_blue 2942                      _card_cyan 28DA                      _card_pink 2644  
 __end_of_toggle_tricolour_LED 21DC                      _getHSVval 0E24               ___lwdiv@dividend 0007  
                 ?_Timer0_init 0001                    ?_turnLeft90 0018                      __pintcode 0008  
                     ?___flmul 000F                       ?___fltol 0028                       ?___lldiv 0001  
                     ?___lwdiv 0007           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
                  __smallconst 0E00                  ?_turnRight135 0018              _I2C_2_Master_Idle 2EA8  
            _I2C_2_Master_Init 2E7E              _I2C_2_Master_Read 2BE8              _I2C_2_Master_Stop 2FC6  
                  _maxRGB$3109 0009              ?_fullSpeedReverse 0013             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 000F  
        __end_of_squareReverse 2DC0             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
           pick_card@backtrack 0023                  _headbuttDelay 004B       initDCmotorsPWM@PWMperiod 0001  
                 ??_card_green 001F             ??_fullSpeedReverse 0015                      _rampDelay 005A  
                 ??_card_white 001E                      _pick_card 1F42             card_cyan@backtrack 001E  
                 ??_getRGBCval 000D               RGBC2colourcard@p 0027            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
                     _LATAbits 0F79                     ?_card_blue 001C            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 0F7B                     ?_card_cyan 001C                       _LATDbits 0F7C  
                     _LATEbits 0F7D                       _LATFbits 0F7E                       _LATGbits 0F7F  
                   ?_card_pink 001C                       _LATHbits 0F80                    _minRGB$3110 0009  
                     _PIE0bits 0E29                     ?_getHSVval 000E                  ??_reset_timer 0003  
                     i2u123_40 001A                       i2u123_41 0016                       i2u124_40 002A  
                     i2u124_41 0026                    turnRight@mL 0013                    turnRight@mR 0014  
                     _PIR0bits 0E33                       _PIR4bits 0E37               ?_initDCmotorsPWM 0001  
                     _SSP2CON2 0EDA                       _SSP2STAT 0ED8                      _returning 005D  
           __end_of_card_green 28DA      __end_of_I2C_2_Master_Idle 2ED0      __end_of_I2C_2_Master_Init 2EA8  
    __end_of_I2C_2_Master_Read 2C2A              ___wmul@multiplier 0001             __end_of_card_white 2EF6  
               ??_turnRight135 001A      __end_of_I2C_2_Master_Stop 2FD0        __end_of_RGBC2colourcard 1D38  
                 setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002             __end_of_getRGBCval 2A00  
            ??_color_read_Blue 0007                      _turnRight 21DC              ___lmul@multiplier 0001  
                    copy_data0 2C3E                     ?_pick_card 0021             card_pink@backtrack 001E  
__end_of_I2C_2_Master_RepStart 2FC6             color_read_Blue@tmp 000A            __end_of_setMotorPWM 1C22  
                 ??_initUSART4 0001              turnRight@leftGear 0016                       __Hrparam 0000  
                  card_blue@mL 001C                    card_blue@mR 001D                       __Lrparam 0000  
                  card_cyan@mL 001C                    card_cyan@mR 001D                      scaleRGB@p 0032  
             turnLeft@leftGear 0016                    card_pink@mL 001C                    card_pink@mR 001D  
          __end_of_reset_timer 2FB0                 turnRight135@mL 0018                 turnRight135@mR 0019  
                turnLeft135@mL 0018                  turnLeft135@mR 0019                     _ANSELDbits 0EA7  
                   _ANSELFbits 0EB4                       _card_red 27A2                       ___xxtofl 191A  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6           _toggle_tricolour_LED 2114  
              ___lwdiv@divisor 0009             __end_of_initUSART4 2F7E                ___lwdiv@counter 000D  
                   ?_turnRight 0013                       __ptext10 2AF8                       __ptext11 2B48  
                     __ptext20 2738                       __ptext12 2B98                       __ptext21 2402  
                     __ptext13 2FBC                       __ptext30 2F1C                       __ptext22 2C66  
                     __ptext14 2BE8                       __ptext31 2FA4                       __ptext23 2F40  
                     __ptext15 0E24                       __ptext40 280A                       __ptext32 2FB0  
                     __ptext24 2F98                       __ptext16 2A00                       __ptext41 2872  
                     __ptext33 1C22                       __ptext25 2FC6                       __ptext17 2D30  
                     __ptext50 234C                       __ptext42 2C9A                       __ptext34 1F42  
                     __ptext26 2FD0                       __ptext18 2A54                       __ptext51 2CFE  
                     __ptext43 2CCC                       __ptext35 25C4                       __ptext27 2EA8  
                     __ptext19 2D60                       __ptext52 2294                       __ptext44 28DA  
                     __ptext36 2ED0                       __ptext28 2E7E                       __ptext53 2536  
                     __ptext45 2DC0                       __ptext37 27A2                       __ptext29 2E50  
                     __ptext54 1ACE                       __ptext46 21DC                       __ptext38 2644  
                     __ptext55 2EF6                       __ptext47 2DF0                       __ptext39 2D90  
                     __ptext56 26C4                       __ptext48 2942                       __ptext49 2E20  
                  getRGBCval@p 000C            main@measured_colour 0078                   _SSP2CON1bits 0ED9  
              _headbuttReverse 2E20                   _SSP2CON2bits 0EDA                    ??_card_blue 001F  
                     _scaleRGB 203E                    ??_card_cyan 001F                    ??_card_pink 001F  
     fullSpeedReverse@leftGear 0016                     turnLeft@mL 0013                     turnLeft@mR 0014  
                  ??_getHSVval 0010                    getHSVval@p1 000E                    getHSVval@p2 000F  
                  getHSVval@Sz 0018                  ??_turnLeft135 001A                       isa$xinst 0000  
                   _RC4STAbits 0EE7                       int$flags 005E                  ??_turnRight90 001A  
                     _turnLeft 2294                   ?_card_orange 001C               ?_RGBC2colourcard 0027  
                 ?_card_yellow 001C                     _INTCONbits 0FF2          ?_toggle_tricolour_LED 0001  
                ??_write_timer 0002                    _setMotorPWM 1ACE                       intlevel2 0000  
                turnRight90@mL 0018                  turnRight90@mR 0019                    ??_pick_card 0025  
                 _topGearRight 0058              _manoeuvre_pointer 0041               ___lldiv@dividend 0001  
         __end_of_turnRight135 2DF0                 main@HSV_colour 0060                    _reset_timer 2FA4  
                 ??_turnLeft90 001A               _color_click_init 2C66            __end_of_turnLeft135 2E20  
                  _topGearLeft 0059                     _SSP2DATPPS 0E1D               ___lldiv@quotient 0009  
      __end_of_headbuttReverse 2E50                     _SSP2CLKPPS 0E1C            __end_of_turnRight90 2CCC  
        RGBC2colourcard@motorL 002A          RGBC2colourcard@motorR 0033                _trail_manoeuvre 0100  
                  ??_turnRight 0015                    _return_flag 005C             __end_of_turnLeft90 2CFE  
              _manoeuvre_count 005B                     _TX4STAbits 0EE8            __end_of_write_timer 2FBC  
